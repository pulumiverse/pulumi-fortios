// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Configure FortiGuard Web Filter service.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trname = new fortios.filter.web.Fortiguard("trname", {
 *     cacheMemPercent: 2,
 *     cacheMode: "ttl",
 *     cachePrefixMatch: "enable",
 *     closePorts: "disable",
 *     ovrdAuthHttps: "enable",
 *     ovrdAuthPort: 8008,
 *     ovrdAuthPortHttp: 8008,
 *     ovrdAuthPortHttps: 8010,
 *     ovrdAuthPortHttpsFlow: 8015,
 *     ovrdAuthPortWarning: 8020,
 *     warnAuthHttps: "enable",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Webfilter Fortiguard can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:filter/web/fortiguard:Fortiguard labelname WebfilterFortiguard
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:filter/web/fortiguard:Fortiguard labelname WebfilterFortiguard
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Fortiguard extends pulumi.CustomResource {
    /**
     * Get an existing Fortiguard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FortiguardState, opts?: pulumi.CustomResourceOptions): Fortiguard {
        return new Fortiguard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:filter/web/fortiguard:Fortiguard';

    /**
     * Returns true if the given object is an instance of Fortiguard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Fortiguard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Fortiguard.__pulumiType;
    }

    /**
     * Maximum percentage of available memory allocated to caching (1 - 15%!)(MISSING).
     */
    public readonly cacheMemPercent!: pulumi.Output<number>;
    /**
     * Maximum permille of available memory allocated to caching (1 - 150).
     */
    public readonly cacheMemPermille!: pulumi.Output<number>;
    /**
     * Cache entry expiration mode. Valid values: `ttl`, `db-ver`.
     */
    public readonly cacheMode!: pulumi.Output<string>;
    /**
     * Enable/disable prefix matching in the cache. Valid values: `enable`, `disable`.
     */
    public readonly cachePrefixMatch!: pulumi.Output<string>;
    /**
     * Close ports used for HTTP/HTTPS override authentication and disable user overrides. Valid values: `enable`, `disable`.
     */
    public readonly closePorts!: pulumi.Output<string>;
    /**
     * Enable/disable embedding images into replacement messages (default = enable). Valid values: `enable`, `disable`.
     */
    public readonly embedImage!: pulumi.Output<string>;
    /**
     * Enable/disable use of HTTPS for override authentication. Valid values: `enable`, `disable`.
     */
    public readonly ovrdAuthHttps!: pulumi.Output<string>;
    /**
     * Port to use for FortiGuard Web Filter override authentication.
     */
    public readonly ovrdAuthPort!: pulumi.Output<number>;
    /**
     * Port to use for FortiGuard Web Filter HTTP override authentication
     */
    public readonly ovrdAuthPortHttp!: pulumi.Output<number>;
    /**
     * Port to use for FortiGuard Web Filter HTTPS override authentication in proxy mode.
     */
    public readonly ovrdAuthPortHttps!: pulumi.Output<number>;
    /**
     * Port to use for FortiGuard Web Filter HTTPS override authentication in flow mode.
     */
    public readonly ovrdAuthPortHttpsFlow!: pulumi.Output<number>;
    /**
     * Port to use for FortiGuard Web Filter Warning override authentication.
     */
    public readonly ovrdAuthPortWarning!: pulumi.Output<number>;
    /**
     * Limit size of URL request packets sent to FortiGuard server (0 for default).
     */
    public readonly requestPacketSizeLimit!: pulumi.Output<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable use of HTTPS for warning and authentication. Valid values: `enable`, `disable`.
     */
    public readonly warnAuthHttps!: pulumi.Output<string>;

    /**
     * Create a Fortiguard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FortiguardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FortiguardArgs | FortiguardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FortiguardState | undefined;
            resourceInputs["cacheMemPercent"] = state ? state.cacheMemPercent : undefined;
            resourceInputs["cacheMemPermille"] = state ? state.cacheMemPermille : undefined;
            resourceInputs["cacheMode"] = state ? state.cacheMode : undefined;
            resourceInputs["cachePrefixMatch"] = state ? state.cachePrefixMatch : undefined;
            resourceInputs["closePorts"] = state ? state.closePorts : undefined;
            resourceInputs["embedImage"] = state ? state.embedImage : undefined;
            resourceInputs["ovrdAuthHttps"] = state ? state.ovrdAuthHttps : undefined;
            resourceInputs["ovrdAuthPort"] = state ? state.ovrdAuthPort : undefined;
            resourceInputs["ovrdAuthPortHttp"] = state ? state.ovrdAuthPortHttp : undefined;
            resourceInputs["ovrdAuthPortHttps"] = state ? state.ovrdAuthPortHttps : undefined;
            resourceInputs["ovrdAuthPortHttpsFlow"] = state ? state.ovrdAuthPortHttpsFlow : undefined;
            resourceInputs["ovrdAuthPortWarning"] = state ? state.ovrdAuthPortWarning : undefined;
            resourceInputs["requestPacketSizeLimit"] = state ? state.requestPacketSizeLimit : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["warnAuthHttps"] = state ? state.warnAuthHttps : undefined;
        } else {
            const args = argsOrState as FortiguardArgs | undefined;
            resourceInputs["cacheMemPercent"] = args ? args.cacheMemPercent : undefined;
            resourceInputs["cacheMemPermille"] = args ? args.cacheMemPermille : undefined;
            resourceInputs["cacheMode"] = args ? args.cacheMode : undefined;
            resourceInputs["cachePrefixMatch"] = args ? args.cachePrefixMatch : undefined;
            resourceInputs["closePorts"] = args ? args.closePorts : undefined;
            resourceInputs["embedImage"] = args ? args.embedImage : undefined;
            resourceInputs["ovrdAuthHttps"] = args ? args.ovrdAuthHttps : undefined;
            resourceInputs["ovrdAuthPort"] = args ? args.ovrdAuthPort : undefined;
            resourceInputs["ovrdAuthPortHttp"] = args ? args.ovrdAuthPortHttp : undefined;
            resourceInputs["ovrdAuthPortHttps"] = args ? args.ovrdAuthPortHttps : undefined;
            resourceInputs["ovrdAuthPortHttpsFlow"] = args ? args.ovrdAuthPortHttpsFlow : undefined;
            resourceInputs["ovrdAuthPortWarning"] = args ? args.ovrdAuthPortWarning : undefined;
            resourceInputs["requestPacketSizeLimit"] = args ? args.requestPacketSizeLimit : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["warnAuthHttps"] = args ? args.warnAuthHttps : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Fortiguard.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Fortiguard resources.
 */
export interface FortiguardState {
    /**
     * Maximum percentage of available memory allocated to caching (1 - 15%!)(MISSING).
     */
    cacheMemPercent?: pulumi.Input<number>;
    /**
     * Maximum permille of available memory allocated to caching (1 - 150).
     */
    cacheMemPermille?: pulumi.Input<number>;
    /**
     * Cache entry expiration mode. Valid values: `ttl`, `db-ver`.
     */
    cacheMode?: pulumi.Input<string>;
    /**
     * Enable/disable prefix matching in the cache. Valid values: `enable`, `disable`.
     */
    cachePrefixMatch?: pulumi.Input<string>;
    /**
     * Close ports used for HTTP/HTTPS override authentication and disable user overrides. Valid values: `enable`, `disable`.
     */
    closePorts?: pulumi.Input<string>;
    /**
     * Enable/disable embedding images into replacement messages (default = enable). Valid values: `enable`, `disable`.
     */
    embedImage?: pulumi.Input<string>;
    /**
     * Enable/disable use of HTTPS for override authentication. Valid values: `enable`, `disable`.
     */
    ovrdAuthHttps?: pulumi.Input<string>;
    /**
     * Port to use for FortiGuard Web Filter override authentication.
     */
    ovrdAuthPort?: pulumi.Input<number>;
    /**
     * Port to use for FortiGuard Web Filter HTTP override authentication
     */
    ovrdAuthPortHttp?: pulumi.Input<number>;
    /**
     * Port to use for FortiGuard Web Filter HTTPS override authentication in proxy mode.
     */
    ovrdAuthPortHttps?: pulumi.Input<number>;
    /**
     * Port to use for FortiGuard Web Filter HTTPS override authentication in flow mode.
     */
    ovrdAuthPortHttpsFlow?: pulumi.Input<number>;
    /**
     * Port to use for FortiGuard Web Filter Warning override authentication.
     */
    ovrdAuthPortWarning?: pulumi.Input<number>;
    /**
     * Limit size of URL request packets sent to FortiGuard server (0 for default).
     */
    requestPacketSizeLimit?: pulumi.Input<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Enable/disable use of HTTPS for warning and authentication. Valid values: `enable`, `disable`.
     */
    warnAuthHttps?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Fortiguard resource.
 */
export interface FortiguardArgs {
    /**
     * Maximum percentage of available memory allocated to caching (1 - 15%!)(MISSING).
     */
    cacheMemPercent?: pulumi.Input<number>;
    /**
     * Maximum permille of available memory allocated to caching (1 - 150).
     */
    cacheMemPermille?: pulumi.Input<number>;
    /**
     * Cache entry expiration mode. Valid values: `ttl`, `db-ver`.
     */
    cacheMode?: pulumi.Input<string>;
    /**
     * Enable/disable prefix matching in the cache. Valid values: `enable`, `disable`.
     */
    cachePrefixMatch?: pulumi.Input<string>;
    /**
     * Close ports used for HTTP/HTTPS override authentication and disable user overrides. Valid values: `enable`, `disable`.
     */
    closePorts?: pulumi.Input<string>;
    /**
     * Enable/disable embedding images into replacement messages (default = enable). Valid values: `enable`, `disable`.
     */
    embedImage?: pulumi.Input<string>;
    /**
     * Enable/disable use of HTTPS for override authentication. Valid values: `enable`, `disable`.
     */
    ovrdAuthHttps?: pulumi.Input<string>;
    /**
     * Port to use for FortiGuard Web Filter override authentication.
     */
    ovrdAuthPort?: pulumi.Input<number>;
    /**
     * Port to use for FortiGuard Web Filter HTTP override authentication
     */
    ovrdAuthPortHttp?: pulumi.Input<number>;
    /**
     * Port to use for FortiGuard Web Filter HTTPS override authentication in proxy mode.
     */
    ovrdAuthPortHttps?: pulumi.Input<number>;
    /**
     * Port to use for FortiGuard Web Filter HTTPS override authentication in flow mode.
     */
    ovrdAuthPortHttpsFlow?: pulumi.Input<number>;
    /**
     * Port to use for FortiGuard Web Filter Warning override authentication.
     */
    ovrdAuthPortWarning?: pulumi.Input<number>;
    /**
     * Limit size of URL request packets sent to FortiGuard server (0 for default).
     */
    requestPacketSizeLimit?: pulumi.Input<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Enable/disable use of HTTPS for warning and authentication. Valid values: `enable`, `disable`.
     */
    warnAuthHttps?: pulumi.Input<string>;
}
