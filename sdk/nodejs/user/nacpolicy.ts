// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Configure NAC policy matching pattern to identify matching NAC devices. Applies to FortiOS Version `>= 6.4.0`.
 *
 * ## Import
 *
 * User NacPolicy can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:user/nacpolicy:Nacpolicy labelname {{name}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:user/nacpolicy:Nacpolicy labelname {{name}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Nacpolicy extends pulumi.CustomResource {
    /**
     * Get an existing Nacpolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NacpolicyState, opts?: pulumi.CustomResourceOptions): Nacpolicy {
        return new Nacpolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:user/nacpolicy:Nacpolicy';

    /**
     * Returns true if the given object is an instance of Nacpolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nacpolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nacpolicy.__pulumiType;
    }

    /**
     * Category of NAC policy.
     */
    public readonly category!: pulumi.Output<string>;
    /**
     * Description for the NAC policy matching pattern.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * NAC policy matching EMS tag.
     */
    public readonly emsTag!: pulumi.Output<string>;
    /**
     * NAC policy matching family.
     */
    public readonly family!: pulumi.Output<string>;
    /**
     * Dynamic firewall address to associate MAC which match this policy.
     */
    public readonly firewallAddress!: pulumi.Output<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * NAC policy matching host.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * NAC policy matching hardware vendor.
     */
    public readonly hwVendor!: pulumi.Output<string>;
    /**
     * NAC policy matching hardware version.
     */
    public readonly hwVersion!: pulumi.Output<string>;
    /**
     * NAC policy matching MAC address.
     */
    public readonly mac!: pulumi.Output<string>;
    /**
     * NAC policy name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * NAC policy matching operating system.
     */
    public readonly os!: pulumi.Output<string>;
    /**
     * NAC policy matching devices vulnerability severity lists. The structure of `severity` block is documented below.
     */
    public readonly severities!: pulumi.Output<outputs.user.NacpolicySeverity[] | undefined>;
    /**
     * NAC policy matching source.
     */
    public readonly src!: pulumi.Output<string>;
    /**
     * SSID policy to be applied on the matched NAC policy.
     */
    public readonly ssidPolicy!: pulumi.Output<string>;
    /**
     * Enable/disable NAC policy. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * NAC policy matching software version.
     */
    public readonly swVersion!: pulumi.Output<string>;
    /**
     * NAC device auto authorization when discovered and nac-policy matched. Valid values: `global`, `disable`, `enable`.
     */
    public readonly switchAutoAuth!: pulumi.Output<string>;
    /**
     * FortiLink interface for which this NAC policy belongs to.
     */
    public readonly switchFortilink!: pulumi.Output<string>;
    /**
     * List of managed FortiSwitch groups on which NAC policy can be applied. The structure of `switchGroup` block is documented below.
     */
    public readonly switchGroups!: pulumi.Output<outputs.user.NacpolicySwitchGroup[] | undefined>;
    /**
     * switch-mac-policy to be applied on the matched NAC policy.
     */
    public readonly switchMacPolicy!: pulumi.Output<string>;
    /**
     * switch-port-policy to be applied on the matched NAC policy.
     */
    public readonly switchPortPolicy!: pulumi.Output<string>;
    /**
     * List of managed FortiSwitches on which NAC policy can be applied. The structure of `switchScope` block is documented below.
     */
    public readonly switchScopes!: pulumi.Output<outputs.user.NacpolicySwitchScope[] | undefined>;
    /**
     * NAC policy matching type.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * NAC policy matching user.
     */
    public readonly user!: pulumi.Output<string>;
    /**
     * NAC policy matching user group.
     */
    public readonly userGroup!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a Nacpolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NacpolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NacpolicyArgs | NacpolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NacpolicyState | undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["emsTag"] = state ? state.emsTag : undefined;
            resourceInputs["family"] = state ? state.family : undefined;
            resourceInputs["firewallAddress"] = state ? state.firewallAddress : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["hwVendor"] = state ? state.hwVendor : undefined;
            resourceInputs["hwVersion"] = state ? state.hwVersion : undefined;
            resourceInputs["mac"] = state ? state.mac : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["severities"] = state ? state.severities : undefined;
            resourceInputs["src"] = state ? state.src : undefined;
            resourceInputs["ssidPolicy"] = state ? state.ssidPolicy : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["swVersion"] = state ? state.swVersion : undefined;
            resourceInputs["switchAutoAuth"] = state ? state.switchAutoAuth : undefined;
            resourceInputs["switchFortilink"] = state ? state.switchFortilink : undefined;
            resourceInputs["switchGroups"] = state ? state.switchGroups : undefined;
            resourceInputs["switchMacPolicy"] = state ? state.switchMacPolicy : undefined;
            resourceInputs["switchPortPolicy"] = state ? state.switchPortPolicy : undefined;
            resourceInputs["switchScopes"] = state ? state.switchScopes : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["userGroup"] = state ? state.userGroup : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as NacpolicyArgs | undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["emsTag"] = args ? args.emsTag : undefined;
            resourceInputs["family"] = args ? args.family : undefined;
            resourceInputs["firewallAddress"] = args ? args.firewallAddress : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["hwVendor"] = args ? args.hwVendor : undefined;
            resourceInputs["hwVersion"] = args ? args.hwVersion : undefined;
            resourceInputs["mac"] = args ? args.mac : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["severities"] = args ? args.severities : undefined;
            resourceInputs["src"] = args ? args.src : undefined;
            resourceInputs["ssidPolicy"] = args ? args.ssidPolicy : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["swVersion"] = args ? args.swVersion : undefined;
            resourceInputs["switchAutoAuth"] = args ? args.switchAutoAuth : undefined;
            resourceInputs["switchFortilink"] = args ? args.switchFortilink : undefined;
            resourceInputs["switchGroups"] = args ? args.switchGroups : undefined;
            resourceInputs["switchMacPolicy"] = args ? args.switchMacPolicy : undefined;
            resourceInputs["switchPortPolicy"] = args ? args.switchPortPolicy : undefined;
            resourceInputs["switchScopes"] = args ? args.switchScopes : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["userGroup"] = args ? args.userGroup : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nacpolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Nacpolicy resources.
 */
export interface NacpolicyState {
    /**
     * Category of NAC policy.
     */
    category?: pulumi.Input<string>;
    /**
     * Description for the NAC policy matching pattern.
     */
    description?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * NAC policy matching EMS tag.
     */
    emsTag?: pulumi.Input<string>;
    /**
     * NAC policy matching family.
     */
    family?: pulumi.Input<string>;
    /**
     * Dynamic firewall address to associate MAC which match this policy.
     */
    firewallAddress?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * NAC policy matching host.
     */
    host?: pulumi.Input<string>;
    /**
     * NAC policy matching hardware vendor.
     */
    hwVendor?: pulumi.Input<string>;
    /**
     * NAC policy matching hardware version.
     */
    hwVersion?: pulumi.Input<string>;
    /**
     * NAC policy matching MAC address.
     */
    mac?: pulumi.Input<string>;
    /**
     * NAC policy name.
     */
    name?: pulumi.Input<string>;
    /**
     * NAC policy matching operating system.
     */
    os?: pulumi.Input<string>;
    /**
     * NAC policy matching devices vulnerability severity lists. The structure of `severity` block is documented below.
     */
    severities?: pulumi.Input<pulumi.Input<inputs.user.NacpolicySeverity>[]>;
    /**
     * NAC policy matching source.
     */
    src?: pulumi.Input<string>;
    /**
     * SSID policy to be applied on the matched NAC policy.
     */
    ssidPolicy?: pulumi.Input<string>;
    /**
     * Enable/disable NAC policy. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * NAC policy matching software version.
     */
    swVersion?: pulumi.Input<string>;
    /**
     * NAC device auto authorization when discovered and nac-policy matched. Valid values: `global`, `disable`, `enable`.
     */
    switchAutoAuth?: pulumi.Input<string>;
    /**
     * FortiLink interface for which this NAC policy belongs to.
     */
    switchFortilink?: pulumi.Input<string>;
    /**
     * List of managed FortiSwitch groups on which NAC policy can be applied. The structure of `switchGroup` block is documented below.
     */
    switchGroups?: pulumi.Input<pulumi.Input<inputs.user.NacpolicySwitchGroup>[]>;
    /**
     * switch-mac-policy to be applied on the matched NAC policy.
     */
    switchMacPolicy?: pulumi.Input<string>;
    /**
     * switch-port-policy to be applied on the matched NAC policy.
     */
    switchPortPolicy?: pulumi.Input<string>;
    /**
     * List of managed FortiSwitches on which NAC policy can be applied. The structure of `switchScope` block is documented below.
     */
    switchScopes?: pulumi.Input<pulumi.Input<inputs.user.NacpolicySwitchScope>[]>;
    /**
     * NAC policy matching type.
     */
    type?: pulumi.Input<string>;
    /**
     * NAC policy matching user.
     */
    user?: pulumi.Input<string>;
    /**
     * NAC policy matching user group.
     */
    userGroup?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Nacpolicy resource.
 */
export interface NacpolicyArgs {
    /**
     * Category of NAC policy.
     */
    category?: pulumi.Input<string>;
    /**
     * Description for the NAC policy matching pattern.
     */
    description?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * NAC policy matching EMS tag.
     */
    emsTag?: pulumi.Input<string>;
    /**
     * NAC policy matching family.
     */
    family?: pulumi.Input<string>;
    /**
     * Dynamic firewall address to associate MAC which match this policy.
     */
    firewallAddress?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * NAC policy matching host.
     */
    host?: pulumi.Input<string>;
    /**
     * NAC policy matching hardware vendor.
     */
    hwVendor?: pulumi.Input<string>;
    /**
     * NAC policy matching hardware version.
     */
    hwVersion?: pulumi.Input<string>;
    /**
     * NAC policy matching MAC address.
     */
    mac?: pulumi.Input<string>;
    /**
     * NAC policy name.
     */
    name?: pulumi.Input<string>;
    /**
     * NAC policy matching operating system.
     */
    os?: pulumi.Input<string>;
    /**
     * NAC policy matching devices vulnerability severity lists. The structure of `severity` block is documented below.
     */
    severities?: pulumi.Input<pulumi.Input<inputs.user.NacpolicySeverity>[]>;
    /**
     * NAC policy matching source.
     */
    src?: pulumi.Input<string>;
    /**
     * SSID policy to be applied on the matched NAC policy.
     */
    ssidPolicy?: pulumi.Input<string>;
    /**
     * Enable/disable NAC policy. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * NAC policy matching software version.
     */
    swVersion?: pulumi.Input<string>;
    /**
     * NAC device auto authorization when discovered and nac-policy matched. Valid values: `global`, `disable`, `enable`.
     */
    switchAutoAuth?: pulumi.Input<string>;
    /**
     * FortiLink interface for which this NAC policy belongs to.
     */
    switchFortilink?: pulumi.Input<string>;
    /**
     * List of managed FortiSwitch groups on which NAC policy can be applied. The structure of `switchGroup` block is documented below.
     */
    switchGroups?: pulumi.Input<pulumi.Input<inputs.user.NacpolicySwitchGroup>[]>;
    /**
     * switch-mac-policy to be applied on the matched NAC policy.
     */
    switchMacPolicy?: pulumi.Input<string>;
    /**
     * switch-port-policy to be applied on the matched NAC policy.
     */
    switchPortPolicy?: pulumi.Input<string>;
    /**
     * List of managed FortiSwitches on which NAC policy can be applied. The structure of `switchScope` block is documented below.
     */
    switchScopes?: pulumi.Input<pulumi.Input<inputs.user.NacpolicySwitchScope>[]>;
    /**
     * NAC policy matching type.
     */
    type?: pulumi.Input<string>;
    /**
     * NAC policy matching user.
     */
    user?: pulumi.Input<string>;
    /**
     * NAC policy matching user group.
     */
    userGroup?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
