// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AdgrpArgs, AdgrpState } from "./adgrp";
export type Adgrp = import("./adgrp").Adgrp;
export const Adgrp: typeof import("./adgrp").Adgrp = null as any;
utilities.lazyLoad(exports, ["Adgrp"], () => require("./adgrp"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { DeviceArgs, DeviceState } from "./device";
export type Device = import("./device").Device;
export const Device: typeof import("./device").Device = null as any;
utilities.lazyLoad(exports, ["Device"], () => require("./device"));

export { DeviceaccesslistArgs, DeviceaccesslistState } from "./deviceaccesslist";
export type Deviceaccesslist = import("./deviceaccesslist").Deviceaccesslist;
export const Deviceaccesslist: typeof import("./deviceaccesslist").Deviceaccesslist = null as any;
utilities.lazyLoad(exports, ["Deviceaccesslist"], () => require("./deviceaccesslist"));

export { DevicecategoryArgs, DevicecategoryState } from "./devicecategory";
export type Devicecategory = import("./devicecategory").Devicecategory;
export const Devicecategory: typeof import("./devicecategory").Devicecategory = null as any;
utilities.lazyLoad(exports, ["Devicecategory"], () => require("./devicecategory"));

export { DevicegroupArgs, DevicegroupState } from "./devicegroup";
export type Devicegroup = import("./devicegroup").Devicegroup;
export const Devicegroup: typeof import("./devicegroup").Devicegroup = null as any;
utilities.lazyLoad(exports, ["Devicegroup"], () => require("./devicegroup"));

export { DomaincontrollerArgs, DomaincontrollerState } from "./domaincontroller";
export type Domaincontroller = import("./domaincontroller").Domaincontroller;
export const Domaincontroller: typeof import("./domaincontroller").Domaincontroller = null as any;
utilities.lazyLoad(exports, ["Domaincontroller"], () => require("./domaincontroller"));

export { ExchangeArgs, ExchangeState } from "./exchange";
export type Exchange = import("./exchange").Exchange;
export const Exchange: typeof import("./exchange").Exchange = null as any;
utilities.lazyLoad(exports, ["Exchange"], () => require("./exchange"));

export { ExternalidentityproviderArgs, ExternalidentityproviderState } from "./externalidentityprovider";
export type Externalidentityprovider = import("./externalidentityprovider").Externalidentityprovider;
export const Externalidentityprovider: typeof import("./externalidentityprovider").Externalidentityprovider = null as any;
utilities.lazyLoad(exports, ["Externalidentityprovider"], () => require("./externalidentityprovider"));

export { FortitokenArgs, FortitokenState } from "./fortitoken";
export type Fortitoken = import("./fortitoken").Fortitoken;
export const Fortitoken: typeof import("./fortitoken").Fortitoken = null as any;
utilities.lazyLoad(exports, ["Fortitoken"], () => require("./fortitoken"));

export { FssoArgs, FssoState } from "./fsso";
export type Fsso = import("./fsso").Fsso;
export const Fsso: typeof import("./fsso").Fsso = null as any;
utilities.lazyLoad(exports, ["Fsso"], () => require("./fsso"));

export { FssopollingArgs, FssopollingState } from "./fssopolling";
export type Fssopolling = import("./fssopolling").Fssopolling;
export const Fssopolling: typeof import("./fssopolling").Fssopolling = null as any;
utilities.lazyLoad(exports, ["Fssopolling"], () => require("./fssopolling"));

export { GetSamlArgs, GetSamlResult, GetSamlOutputArgs } from "./getSaml";
export const getSaml: typeof import("./getSaml").getSaml = null as any;
export const getSamlOutput: typeof import("./getSaml").getSamlOutput = null as any;
utilities.lazyLoad(exports, ["getSaml","getSamlOutput"], () => require("./getSaml"));

export { GetSamllistArgs, GetSamllistResult, GetSamllistOutputArgs } from "./getSamllist";
export const getSamllist: typeof import("./getSamllist").getSamllist = null as any;
export const getSamllistOutput: typeof import("./getSamllist").getSamllistOutput = null as any;
utilities.lazyLoad(exports, ["getSamllist","getSamllistOutput"], () => require("./getSamllist"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { KrbkeytabArgs, KrbkeytabState } from "./krbkeytab";
export type Krbkeytab = import("./krbkeytab").Krbkeytab;
export const Krbkeytab: typeof import("./krbkeytab").Krbkeytab = null as any;
utilities.lazyLoad(exports, ["Krbkeytab"], () => require("./krbkeytab"));

export { LdapArgs, LdapState } from "./ldap";
export type Ldap = import("./ldap").Ldap;
export const Ldap: typeof import("./ldap").Ldap = null as any;
utilities.lazyLoad(exports, ["Ldap"], () => require("./ldap"));

export { LocalArgs, LocalState } from "./local";
export type Local = import("./local").Local;
export const Local: typeof import("./local").Local = null as any;
utilities.lazyLoad(exports, ["Local"], () => require("./local"));

export { NacpolicyArgs, NacpolicyState } from "./nacpolicy";
export type Nacpolicy = import("./nacpolicy").Nacpolicy;
export const Nacpolicy: typeof import("./nacpolicy").Nacpolicy = null as any;
utilities.lazyLoad(exports, ["Nacpolicy"], () => require("./nacpolicy"));

export { PasswordpolicyArgs, PasswordpolicyState } from "./passwordpolicy";
export type Passwordpolicy = import("./passwordpolicy").Passwordpolicy;
export const Passwordpolicy: typeof import("./passwordpolicy").Passwordpolicy = null as any;
utilities.lazyLoad(exports, ["Passwordpolicy"], () => require("./passwordpolicy"));

export { PeerArgs, PeerState } from "./peer";
export type Peer = import("./peer").Peer;
export const Peer: typeof import("./peer").Peer = null as any;
utilities.lazyLoad(exports, ["Peer"], () => require("./peer"));

export { PeergrpArgs, PeergrpState } from "./peergrp";
export type Peergrp = import("./peergrp").Peergrp;
export const Peergrp: typeof import("./peergrp").Peergrp = null as any;
utilities.lazyLoad(exports, ["Peergrp"], () => require("./peergrp"));

export { Pop3Args, Pop3State } from "./pop3";
export type Pop3 = import("./pop3").Pop3;
export const Pop3: typeof import("./pop3").Pop3 = null as any;
utilities.lazyLoad(exports, ["Pop3"], () => require("./pop3"));

export { QuarantineArgs, QuarantineState } from "./quarantine";
export type Quarantine = import("./quarantine").Quarantine;
export const Quarantine: typeof import("./quarantine").Quarantine = null as any;
utilities.lazyLoad(exports, ["Quarantine"], () => require("./quarantine"));

export { RadiusArgs, RadiusState } from "./radius";
export type Radius = import("./radius").Radius;
export const Radius: typeof import("./radius").Radius = null as any;
utilities.lazyLoad(exports, ["Radius"], () => require("./radius"));

export { SamlArgs, SamlState } from "./saml";
export type Saml = import("./saml").Saml;
export const Saml: typeof import("./saml").Saml = null as any;
utilities.lazyLoad(exports, ["Saml"], () => require("./saml"));

export { SecurityexemptlistArgs, SecurityexemptlistState } from "./securityexemptlist";
export type Securityexemptlist = import("./securityexemptlist").Securityexemptlist;
export const Securityexemptlist: typeof import("./securityexemptlist").Securityexemptlist = null as any;
utilities.lazyLoad(exports, ["Securityexemptlist"], () => require("./securityexemptlist"));

export { SettingArgs, SettingState } from "./setting";
export type Setting = import("./setting").Setting;
export const Setting: typeof import("./setting").Setting = null as any;
utilities.lazyLoad(exports, ["Setting"], () => require("./setting"));

export { TacacsArgs, TacacsState } from "./tacacs";
export type Tacacs = import("./tacacs").Tacacs;
export const Tacacs: typeof import("./tacacs").Tacacs = null as any;
utilities.lazyLoad(exports, ["Tacacs"], () => require("./tacacs"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fortios:user/adgrp:Adgrp":
                return new Adgrp(name, <any>undefined, { urn })
            case "fortios:user/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "fortios:user/device:Device":
                return new Device(name, <any>undefined, { urn })
            case "fortios:user/deviceaccesslist:Deviceaccesslist":
                return new Deviceaccesslist(name, <any>undefined, { urn })
            case "fortios:user/devicecategory:Devicecategory":
                return new Devicecategory(name, <any>undefined, { urn })
            case "fortios:user/devicegroup:Devicegroup":
                return new Devicegroup(name, <any>undefined, { urn })
            case "fortios:user/domaincontroller:Domaincontroller":
                return new Domaincontroller(name, <any>undefined, { urn })
            case "fortios:user/exchange:Exchange":
                return new Exchange(name, <any>undefined, { urn })
            case "fortios:user/externalidentityprovider:Externalidentityprovider":
                return new Externalidentityprovider(name, <any>undefined, { urn })
            case "fortios:user/fortitoken:Fortitoken":
                return new Fortitoken(name, <any>undefined, { urn })
            case "fortios:user/fsso:Fsso":
                return new Fsso(name, <any>undefined, { urn })
            case "fortios:user/fssopolling:Fssopolling":
                return new Fssopolling(name, <any>undefined, { urn })
            case "fortios:user/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "fortios:user/krbkeytab:Krbkeytab":
                return new Krbkeytab(name, <any>undefined, { urn })
            case "fortios:user/ldap:Ldap":
                return new Ldap(name, <any>undefined, { urn })
            case "fortios:user/local:Local":
                return new Local(name, <any>undefined, { urn })
            case "fortios:user/nacpolicy:Nacpolicy":
                return new Nacpolicy(name, <any>undefined, { urn })
            case "fortios:user/passwordpolicy:Passwordpolicy":
                return new Passwordpolicy(name, <any>undefined, { urn })
            case "fortios:user/peer:Peer":
                return new Peer(name, <any>undefined, { urn })
            case "fortios:user/peergrp:Peergrp":
                return new Peergrp(name, <any>undefined, { urn })
            case "fortios:user/pop3:Pop3":
                return new Pop3(name, <any>undefined, { urn })
            case "fortios:user/quarantine:Quarantine":
                return new Quarantine(name, <any>undefined, { urn })
            case "fortios:user/radius:Radius":
                return new Radius(name, <any>undefined, { urn })
            case "fortios:user/saml:Saml":
                return new Saml(name, <any>undefined, { urn })
            case "fortios:user/securityexemptlist:Securityexemptlist":
                return new Securityexemptlist(name, <any>undefined, { urn })
            case "fortios:user/setting:Setting":
                return new Setting(name, <any>undefined, { urn })
            case "fortios:user/tacacs:Tacacs":
                return new Tacacs(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fortios", "user/adgrp", _module)
pulumi.runtime.registerResourceModule("fortios", "user/certificate", _module)
pulumi.runtime.registerResourceModule("fortios", "user/device", _module)
pulumi.runtime.registerResourceModule("fortios", "user/deviceaccesslist", _module)
pulumi.runtime.registerResourceModule("fortios", "user/devicecategory", _module)
pulumi.runtime.registerResourceModule("fortios", "user/devicegroup", _module)
pulumi.runtime.registerResourceModule("fortios", "user/domaincontroller", _module)
pulumi.runtime.registerResourceModule("fortios", "user/exchange", _module)
pulumi.runtime.registerResourceModule("fortios", "user/externalidentityprovider", _module)
pulumi.runtime.registerResourceModule("fortios", "user/fortitoken", _module)
pulumi.runtime.registerResourceModule("fortios", "user/fsso", _module)
pulumi.runtime.registerResourceModule("fortios", "user/fssopolling", _module)
pulumi.runtime.registerResourceModule("fortios", "user/group", _module)
pulumi.runtime.registerResourceModule("fortios", "user/krbkeytab", _module)
pulumi.runtime.registerResourceModule("fortios", "user/ldap", _module)
pulumi.runtime.registerResourceModule("fortios", "user/local", _module)
pulumi.runtime.registerResourceModule("fortios", "user/nacpolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "user/passwordpolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "user/peer", _module)
pulumi.runtime.registerResourceModule("fortios", "user/peergrp", _module)
pulumi.runtime.registerResourceModule("fortios", "user/pop3", _module)
pulumi.runtime.registerResourceModule("fortios", "user/quarantine", _module)
pulumi.runtime.registerResourceModule("fortios", "user/radius", _module)
pulumi.runtime.registerResourceModule("fortios", "user/saml", _module)
pulumi.runtime.registerResourceModule("fortios", "user/securityexemptlist", _module)
pulumi.runtime.registerResourceModule("fortios", "user/setting", _module)
pulumi.runtime.registerResourceModule("fortios", "user/tacacs", _module)
