// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * Configure consolidated IPv4/IPv6 policies. Applies to FortiOS Version `<= 6.4.0`.
 *
 * ## Import
 *
 * FirewallConsolidated Policy can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:firewall/consolidated/policy:Policy labelname {{policyid}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:firewall/consolidated/policy:Policy labelname {{policyid}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:firewall/consolidated/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Application category ID list. The structure of `appCategory` block is documented below.
     */
    public readonly appCategories!: pulumi.Output<outputs.firewall.consolidated.PolicyAppCategory[] | undefined>;
    /**
     * Application group names. The structure of `appGroup` block is documented below.
     */
    public readonly appGroups!: pulumi.Output<outputs.firewall.consolidated.PolicyAppGroup[] | undefined>;
    /**
     * Name of an existing Application list.
     */
    public readonly applicationList!: pulumi.Output<string>;
    /**
     * Application ID list. The structure of `application` block is documented below.
     */
    public readonly applications!: pulumi.Output<outputs.firewall.consolidated.PolicyApplication[] | undefined>;
    /**
     * Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
     */
    public readonly autoAsicOffload!: pulumi.Output<string>;
    /**
     * Name of an existing Antivirus profile.
     */
    public readonly avProfile!: pulumi.Output<string>;
    /**
     * Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
     */
    public readonly captivePortalExempt!: pulumi.Output<string>;
    /**
     * Name of an existing CIFS profile.
     */
    public readonly cifsProfile!: pulumi.Output<string>;
    /**
     * Comment.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
     */
    public readonly diffservForward!: pulumi.Output<string>;
    /**
     * Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
     */
    public readonly diffservReverse!: pulumi.Output<string>;
    /**
     * Change packet's DiffServ to this value.
     */
    public readonly diffservcodeForward!: pulumi.Output<string>;
    /**
     * Change packet's reverse (reply) DiffServ to this value.
     */
    public readonly diffservcodeRev!: pulumi.Output<string>;
    /**
     * Name of an existing DLP sensor.
     */
    public readonly dlpSensor!: pulumi.Output<string>;
    /**
     * Name of an existing DNS filter profile.
     */
    public readonly dnsfilterProfile!: pulumi.Output<string>;
    /**
     * Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
     */
    public readonly dstaddr4s!: pulumi.Output<outputs.firewall.consolidated.PolicyDstaddr4[] | undefined>;
    /**
     * Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
     */
    public readonly dstaddr6s!: pulumi.Output<outputs.firewall.consolidated.PolicyDstaddr6[] | undefined>;
    /**
     * When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
     */
    public readonly dstaddrNegate!: pulumi.Output<string>;
    /**
     * Outgoing (egress) interface. The structure of `dstintf` block is documented below.
     */
    public readonly dstintfs!: pulumi.Output<outputs.firewall.consolidated.PolicyDstintf[] | undefined>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing email filter profile.
     */
    public readonly emailfilterProfile!: pulumi.Output<string>;
    /**
     * Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
     */
    public readonly fixedport!: pulumi.Output<string>;
    /**
     * Names of FSSO groups. The structure of `fssoGroups` block is documented below.
     */
    public readonly fssoGroups!: pulumi.Output<outputs.firewall.consolidated.PolicyFssoGroup[] | undefined>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
     */
    public readonly groups!: pulumi.Output<outputs.firewall.consolidated.PolicyGroup[] | undefined>;
    /**
     * Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
     */
    public readonly httpPolicyRedirect!: pulumi.Output<string>;
    /**
     * Name of an existing ICAP profile.
     */
    public readonly icapProfile!: pulumi.Output<string>;
    /**
     * Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
     */
    public readonly inbound!: pulumi.Output<string>;
    /**
     * Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
     */
    public readonly inspectionMode!: pulumi.Output<string>;
    /**
     * Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
     */
    public readonly internetService!: pulumi.Output<string>;
    /**
     * Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
     */
    public readonly internetServiceCustomGroups!: pulumi.Output<outputs.firewall.consolidated.PolicyInternetServiceCustomGroup[] | undefined>;
    /**
     * Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
     */
    public readonly internetServiceCustoms!: pulumi.Output<outputs.firewall.consolidated.PolicyInternetServiceCustom[] | undefined>;
    /**
     * Internet Service group name. The structure of `internetServiceGroup` block is documented below.
     */
    public readonly internetServiceGroups!: pulumi.Output<outputs.firewall.consolidated.PolicyInternetServiceGroup[] | undefined>;
    /**
     * Internet Service ID. The structure of `internetServiceId` block is documented below.
     */
    public readonly internetServiceIds!: pulumi.Output<outputs.firewall.consolidated.PolicyInternetServiceId[] | undefined>;
    /**
     * Internet Service name. The structure of `internetServiceName` block is documented below.
     */
    public readonly internetServiceNames!: pulumi.Output<outputs.firewall.consolidated.PolicyInternetServiceName[] | undefined>;
    /**
     * When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    public readonly internetServiceNegate!: pulumi.Output<string>;
    /**
     * Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
     */
    public readonly internetServiceSrc!: pulumi.Output<string>;
    /**
     * Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
     */
    public readonly internetServiceSrcCustomGroups!: pulumi.Output<outputs.firewall.consolidated.PolicyInternetServiceSrcCustomGroup[] | undefined>;
    /**
     * Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
     */
    public readonly internetServiceSrcCustoms!: pulumi.Output<outputs.firewall.consolidated.PolicyInternetServiceSrcCustom[] | undefined>;
    /**
     * Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
     */
    public readonly internetServiceSrcGroups!: pulumi.Output<outputs.firewall.consolidated.PolicyInternetServiceSrcGroup[] | undefined>;
    /**
     * Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
     */
    public readonly internetServiceSrcIds!: pulumi.Output<outputs.firewall.consolidated.PolicyInternetServiceSrcId[] | undefined>;
    /**
     * Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
     */
    public readonly internetServiceSrcNames!: pulumi.Output<outputs.firewall.consolidated.PolicyInternetServiceSrcName[] | undefined>;
    /**
     * When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    public readonly internetServiceSrcNegate!: pulumi.Output<string>;
    /**
     * Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
     */
    public readonly ippool!: pulumi.Output<string>;
    /**
     * Name of an existing IPS sensor.
     */
    public readonly ipsSensor!: pulumi.Output<string>;
    /**
     * Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
     */
    public readonly logtraffic!: pulumi.Output<string>;
    /**
     * Record logs when a session starts. Valid values: `enable`, `disable`.
     */
    public readonly logtrafficStart!: pulumi.Output<string>;
    /**
     * Policy name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable/disable source NAT. Valid values: `enable`, `disable`.
     */
    public readonly nat!: pulumi.Output<string>;
    /**
     * Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
     */
    public readonly outbound!: pulumi.Output<string>;
    /**
     * Per-IP traffic shaper.
     */
    public readonly perIpShaper!: pulumi.Output<string>;
    /**
     * Policy ID.
     */
    public readonly policyid!: pulumi.Output<number>;
    /**
     * IPv4 pool names. The structure of `poolname4` block is documented below.
     */
    public readonly poolname4s!: pulumi.Output<outputs.firewall.consolidated.PolicyPoolname4[] | undefined>;
    /**
     * IPv6 pool names. The structure of `poolname6` block is documented below.
     */
    public readonly poolname6s!: pulumi.Output<outputs.firewall.consolidated.PolicyPoolname6[] | undefined>;
    /**
     * Name of profile group.
     */
    public readonly profileGroup!: pulumi.Output<string>;
    /**
     * Name of an existing Protocol options profile.
     */
    public readonly profileProtocolOptions!: pulumi.Output<string>;
    /**
     * Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
     */
    public readonly profileType!: pulumi.Output<string>;
    /**
     * Schedule name.
     */
    public readonly schedule!: pulumi.Output<string>;
    /**
     * When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    public readonly serviceNegate!: pulumi.Output<string>;
    /**
     * Service and service group names. The structure of `service` block is documented below.
     */
    public readonly services!: pulumi.Output<outputs.firewall.consolidated.PolicyService[] | undefined>;
    /**
     * TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
     */
    public readonly sessionTtl!: pulumi.Output<number>;
    /**
     * Name of an existing Spam filter profile.
     */
    public readonly spamfilterProfile!: pulumi.Output<string>;
    /**
     * Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
     */
    public readonly srcaddr4s!: pulumi.Output<outputs.firewall.consolidated.PolicySrcaddr4[] | undefined>;
    /**
     * Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
     */
    public readonly srcaddr6s!: pulumi.Output<outputs.firewall.consolidated.PolicySrcaddr6[] | undefined>;
    /**
     * When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
     */
    public readonly srcaddrNegate!: pulumi.Output<string>;
    /**
     * Incoming (ingress) interface. The structure of `srcintf` block is documented below.
     */
    public readonly srcintfs!: pulumi.Output<outputs.firewall.consolidated.PolicySrcintf[] | undefined>;
    /**
     * Name of an existing SSH filter profile.
     */
    public readonly sshFilterProfile!: pulumi.Output<string>;
    /**
     * Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
     */
    public readonly sshPolicyRedirect!: pulumi.Output<string>;
    /**
     * Name of an existing SSL SSH profile.
     */
    public readonly sslSshProfile!: pulumi.Output<string>;
    /**
     * Enable or disable this policy. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Receiver TCP maximum segment size (MSS).
     */
    public readonly tcpMssReceiver!: pulumi.Output<number>;
    /**
     * Sender TCP maximum segment size (MSS).
     */
    public readonly tcpMssSender!: pulumi.Output<number>;
    /**
     * Traffic shaper.
     */
    public readonly trafficShaper!: pulumi.Output<string>;
    /**
     * Reverse traffic shaper.
     */
    public readonly trafficShaperReverse!: pulumi.Output<string>;
    /**
     * URL category ID list. The structure of `urlCategory` block is documented below.
     */
    public readonly urlCategories!: pulumi.Output<outputs.firewall.consolidated.PolicyUrlCategory[] | undefined>;
    /**
     * Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
     */
    public readonly users!: pulumi.Output<outputs.firewall.consolidated.PolicyUser[] | undefined>;
    /**
     * Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
     */
    public readonly utmStatus!: pulumi.Output<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing VoIP profile.
     */
    public readonly voipProfile!: pulumi.Output<string>;
    /**
     * Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
     */
    public readonly vpntunnel!: pulumi.Output<string>;
    /**
     * Name of an existing Web application firewall profile.
     */
    public readonly wafProfile!: pulumi.Output<string>;
    /**
     * Enable/disable WAN optimization. Valid values: `enable`, `disable`.
     */
    public readonly wanopt!: pulumi.Output<string>;
    /**
     * WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
     */
    public readonly wanoptDetection!: pulumi.Output<string>;
    /**
     * WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
     */
    public readonly wanoptPassiveOpt!: pulumi.Output<string>;
    /**
     * WAN optimization peer.
     */
    public readonly wanoptPeer!: pulumi.Output<string>;
    /**
     * WAN optimization profile.
     */
    public readonly wanoptProfile!: pulumi.Output<string>;
    /**
     * Enable/disable web cache. Valid values: `enable`, `disable`.
     */
    public readonly webcache!: pulumi.Output<string>;
    /**
     * Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
     */
    public readonly webcacheHttps!: pulumi.Output<string>;
    /**
     * Name of an existing Web filter profile.
     */
    public readonly webfilterProfile!: pulumi.Output<string>;
    /**
     * Webproxy forward server name.
     */
    public readonly webproxyForwardServer!: pulumi.Output<string>;
    /**
     * Webproxy profile name.
     */
    public readonly webproxyProfile!: pulumi.Output<string>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["appCategories"] = state ? state.appCategories : undefined;
            resourceInputs["appGroups"] = state ? state.appGroups : undefined;
            resourceInputs["applicationList"] = state ? state.applicationList : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["autoAsicOffload"] = state ? state.autoAsicOffload : undefined;
            resourceInputs["avProfile"] = state ? state.avProfile : undefined;
            resourceInputs["captivePortalExempt"] = state ? state.captivePortalExempt : undefined;
            resourceInputs["cifsProfile"] = state ? state.cifsProfile : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["diffservForward"] = state ? state.diffservForward : undefined;
            resourceInputs["diffservReverse"] = state ? state.diffservReverse : undefined;
            resourceInputs["diffservcodeForward"] = state ? state.diffservcodeForward : undefined;
            resourceInputs["diffservcodeRev"] = state ? state.diffservcodeRev : undefined;
            resourceInputs["dlpSensor"] = state ? state.dlpSensor : undefined;
            resourceInputs["dnsfilterProfile"] = state ? state.dnsfilterProfile : undefined;
            resourceInputs["dstaddr4s"] = state ? state.dstaddr4s : undefined;
            resourceInputs["dstaddr6s"] = state ? state.dstaddr6s : undefined;
            resourceInputs["dstaddrNegate"] = state ? state.dstaddrNegate : undefined;
            resourceInputs["dstintfs"] = state ? state.dstintfs : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["emailfilterProfile"] = state ? state.emailfilterProfile : undefined;
            resourceInputs["fixedport"] = state ? state.fixedport : undefined;
            resourceInputs["fssoGroups"] = state ? state.fssoGroups : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["httpPolicyRedirect"] = state ? state.httpPolicyRedirect : undefined;
            resourceInputs["icapProfile"] = state ? state.icapProfile : undefined;
            resourceInputs["inbound"] = state ? state.inbound : undefined;
            resourceInputs["inspectionMode"] = state ? state.inspectionMode : undefined;
            resourceInputs["internetService"] = state ? state.internetService : undefined;
            resourceInputs["internetServiceCustomGroups"] = state ? state.internetServiceCustomGroups : undefined;
            resourceInputs["internetServiceCustoms"] = state ? state.internetServiceCustoms : undefined;
            resourceInputs["internetServiceGroups"] = state ? state.internetServiceGroups : undefined;
            resourceInputs["internetServiceIds"] = state ? state.internetServiceIds : undefined;
            resourceInputs["internetServiceNames"] = state ? state.internetServiceNames : undefined;
            resourceInputs["internetServiceNegate"] = state ? state.internetServiceNegate : undefined;
            resourceInputs["internetServiceSrc"] = state ? state.internetServiceSrc : undefined;
            resourceInputs["internetServiceSrcCustomGroups"] = state ? state.internetServiceSrcCustomGroups : undefined;
            resourceInputs["internetServiceSrcCustoms"] = state ? state.internetServiceSrcCustoms : undefined;
            resourceInputs["internetServiceSrcGroups"] = state ? state.internetServiceSrcGroups : undefined;
            resourceInputs["internetServiceSrcIds"] = state ? state.internetServiceSrcIds : undefined;
            resourceInputs["internetServiceSrcNames"] = state ? state.internetServiceSrcNames : undefined;
            resourceInputs["internetServiceSrcNegate"] = state ? state.internetServiceSrcNegate : undefined;
            resourceInputs["ippool"] = state ? state.ippool : undefined;
            resourceInputs["ipsSensor"] = state ? state.ipsSensor : undefined;
            resourceInputs["logtraffic"] = state ? state.logtraffic : undefined;
            resourceInputs["logtrafficStart"] = state ? state.logtrafficStart : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nat"] = state ? state.nat : undefined;
            resourceInputs["outbound"] = state ? state.outbound : undefined;
            resourceInputs["perIpShaper"] = state ? state.perIpShaper : undefined;
            resourceInputs["policyid"] = state ? state.policyid : undefined;
            resourceInputs["poolname4s"] = state ? state.poolname4s : undefined;
            resourceInputs["poolname6s"] = state ? state.poolname6s : undefined;
            resourceInputs["profileGroup"] = state ? state.profileGroup : undefined;
            resourceInputs["profileProtocolOptions"] = state ? state.profileProtocolOptions : undefined;
            resourceInputs["profileType"] = state ? state.profileType : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["serviceNegate"] = state ? state.serviceNegate : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["sessionTtl"] = state ? state.sessionTtl : undefined;
            resourceInputs["spamfilterProfile"] = state ? state.spamfilterProfile : undefined;
            resourceInputs["srcaddr4s"] = state ? state.srcaddr4s : undefined;
            resourceInputs["srcaddr6s"] = state ? state.srcaddr6s : undefined;
            resourceInputs["srcaddrNegate"] = state ? state.srcaddrNegate : undefined;
            resourceInputs["srcintfs"] = state ? state.srcintfs : undefined;
            resourceInputs["sshFilterProfile"] = state ? state.sshFilterProfile : undefined;
            resourceInputs["sshPolicyRedirect"] = state ? state.sshPolicyRedirect : undefined;
            resourceInputs["sslSshProfile"] = state ? state.sslSshProfile : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tcpMssReceiver"] = state ? state.tcpMssReceiver : undefined;
            resourceInputs["tcpMssSender"] = state ? state.tcpMssSender : undefined;
            resourceInputs["trafficShaper"] = state ? state.trafficShaper : undefined;
            resourceInputs["trafficShaperReverse"] = state ? state.trafficShaperReverse : undefined;
            resourceInputs["urlCategories"] = state ? state.urlCategories : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["utmStatus"] = state ? state.utmStatus : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["voipProfile"] = state ? state.voipProfile : undefined;
            resourceInputs["vpntunnel"] = state ? state.vpntunnel : undefined;
            resourceInputs["wafProfile"] = state ? state.wafProfile : undefined;
            resourceInputs["wanopt"] = state ? state.wanopt : undefined;
            resourceInputs["wanoptDetection"] = state ? state.wanoptDetection : undefined;
            resourceInputs["wanoptPassiveOpt"] = state ? state.wanoptPassiveOpt : undefined;
            resourceInputs["wanoptPeer"] = state ? state.wanoptPeer : undefined;
            resourceInputs["wanoptProfile"] = state ? state.wanoptProfile : undefined;
            resourceInputs["webcache"] = state ? state.webcache : undefined;
            resourceInputs["webcacheHttps"] = state ? state.webcacheHttps : undefined;
            resourceInputs["webfilterProfile"] = state ? state.webfilterProfile : undefined;
            resourceInputs["webproxyForwardServer"] = state ? state.webproxyForwardServer : undefined;
            resourceInputs["webproxyProfile"] = state ? state.webproxyProfile : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["appCategories"] = args ? args.appCategories : undefined;
            resourceInputs["appGroups"] = args ? args.appGroups : undefined;
            resourceInputs["applicationList"] = args ? args.applicationList : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["autoAsicOffload"] = args ? args.autoAsicOffload : undefined;
            resourceInputs["avProfile"] = args ? args.avProfile : undefined;
            resourceInputs["captivePortalExempt"] = args ? args.captivePortalExempt : undefined;
            resourceInputs["cifsProfile"] = args ? args.cifsProfile : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["diffservForward"] = args ? args.diffservForward : undefined;
            resourceInputs["diffservReverse"] = args ? args.diffservReverse : undefined;
            resourceInputs["diffservcodeForward"] = args ? args.diffservcodeForward : undefined;
            resourceInputs["diffservcodeRev"] = args ? args.diffservcodeRev : undefined;
            resourceInputs["dlpSensor"] = args ? args.dlpSensor : undefined;
            resourceInputs["dnsfilterProfile"] = args ? args.dnsfilterProfile : undefined;
            resourceInputs["dstaddr4s"] = args ? args.dstaddr4s : undefined;
            resourceInputs["dstaddr6s"] = args ? args.dstaddr6s : undefined;
            resourceInputs["dstaddrNegate"] = args ? args.dstaddrNegate : undefined;
            resourceInputs["dstintfs"] = args ? args.dstintfs : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["emailfilterProfile"] = args ? args.emailfilterProfile : undefined;
            resourceInputs["fixedport"] = args ? args.fixedport : undefined;
            resourceInputs["fssoGroups"] = args ? args.fssoGroups : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["httpPolicyRedirect"] = args ? args.httpPolicyRedirect : undefined;
            resourceInputs["icapProfile"] = args ? args.icapProfile : undefined;
            resourceInputs["inbound"] = args ? args.inbound : undefined;
            resourceInputs["inspectionMode"] = args ? args.inspectionMode : undefined;
            resourceInputs["internetService"] = args ? args.internetService : undefined;
            resourceInputs["internetServiceCustomGroups"] = args ? args.internetServiceCustomGroups : undefined;
            resourceInputs["internetServiceCustoms"] = args ? args.internetServiceCustoms : undefined;
            resourceInputs["internetServiceGroups"] = args ? args.internetServiceGroups : undefined;
            resourceInputs["internetServiceIds"] = args ? args.internetServiceIds : undefined;
            resourceInputs["internetServiceNames"] = args ? args.internetServiceNames : undefined;
            resourceInputs["internetServiceNegate"] = args ? args.internetServiceNegate : undefined;
            resourceInputs["internetServiceSrc"] = args ? args.internetServiceSrc : undefined;
            resourceInputs["internetServiceSrcCustomGroups"] = args ? args.internetServiceSrcCustomGroups : undefined;
            resourceInputs["internetServiceSrcCustoms"] = args ? args.internetServiceSrcCustoms : undefined;
            resourceInputs["internetServiceSrcGroups"] = args ? args.internetServiceSrcGroups : undefined;
            resourceInputs["internetServiceSrcIds"] = args ? args.internetServiceSrcIds : undefined;
            resourceInputs["internetServiceSrcNames"] = args ? args.internetServiceSrcNames : undefined;
            resourceInputs["internetServiceSrcNegate"] = args ? args.internetServiceSrcNegate : undefined;
            resourceInputs["ippool"] = args ? args.ippool : undefined;
            resourceInputs["ipsSensor"] = args ? args.ipsSensor : undefined;
            resourceInputs["logtraffic"] = args ? args.logtraffic : undefined;
            resourceInputs["logtrafficStart"] = args ? args.logtrafficStart : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nat"] = args ? args.nat : undefined;
            resourceInputs["outbound"] = args ? args.outbound : undefined;
            resourceInputs["perIpShaper"] = args ? args.perIpShaper : undefined;
            resourceInputs["policyid"] = args ? args.policyid : undefined;
            resourceInputs["poolname4s"] = args ? args.poolname4s : undefined;
            resourceInputs["poolname6s"] = args ? args.poolname6s : undefined;
            resourceInputs["profileGroup"] = args ? args.profileGroup : undefined;
            resourceInputs["profileProtocolOptions"] = args ? args.profileProtocolOptions : undefined;
            resourceInputs["profileType"] = args ? args.profileType : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["serviceNegate"] = args ? args.serviceNegate : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["sessionTtl"] = args ? args.sessionTtl : undefined;
            resourceInputs["spamfilterProfile"] = args ? args.spamfilterProfile : undefined;
            resourceInputs["srcaddr4s"] = args ? args.srcaddr4s : undefined;
            resourceInputs["srcaddr6s"] = args ? args.srcaddr6s : undefined;
            resourceInputs["srcaddrNegate"] = args ? args.srcaddrNegate : undefined;
            resourceInputs["srcintfs"] = args ? args.srcintfs : undefined;
            resourceInputs["sshFilterProfile"] = args ? args.sshFilterProfile : undefined;
            resourceInputs["sshPolicyRedirect"] = args ? args.sshPolicyRedirect : undefined;
            resourceInputs["sslSshProfile"] = args ? args.sslSshProfile : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tcpMssReceiver"] = args ? args.tcpMssReceiver : undefined;
            resourceInputs["tcpMssSender"] = args ? args.tcpMssSender : undefined;
            resourceInputs["trafficShaper"] = args ? args.trafficShaper : undefined;
            resourceInputs["trafficShaperReverse"] = args ? args.trafficShaperReverse : undefined;
            resourceInputs["urlCategories"] = args ? args.urlCategories : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["utmStatus"] = args ? args.utmStatus : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["voipProfile"] = args ? args.voipProfile : undefined;
            resourceInputs["vpntunnel"] = args ? args.vpntunnel : undefined;
            resourceInputs["wafProfile"] = args ? args.wafProfile : undefined;
            resourceInputs["wanopt"] = args ? args.wanopt : undefined;
            resourceInputs["wanoptDetection"] = args ? args.wanoptDetection : undefined;
            resourceInputs["wanoptPassiveOpt"] = args ? args.wanoptPassiveOpt : undefined;
            resourceInputs["wanoptPeer"] = args ? args.wanoptPeer : undefined;
            resourceInputs["wanoptProfile"] = args ? args.wanoptProfile : undefined;
            resourceInputs["webcache"] = args ? args.webcache : undefined;
            resourceInputs["webcacheHttps"] = args ? args.webcacheHttps : undefined;
            resourceInputs["webfilterProfile"] = args ? args.webfilterProfile : undefined;
            resourceInputs["webproxyForwardServer"] = args ? args.webproxyForwardServer : undefined;
            resourceInputs["webproxyProfile"] = args ? args.webproxyProfile : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
     */
    action?: pulumi.Input<string>;
    /**
     * Application category ID list. The structure of `appCategory` block is documented below.
     */
    appCategories?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyAppCategory>[]>;
    /**
     * Application group names. The structure of `appGroup` block is documented below.
     */
    appGroups?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyAppGroup>[]>;
    /**
     * Name of an existing Application list.
     */
    applicationList?: pulumi.Input<string>;
    /**
     * Application ID list. The structure of `application` block is documented below.
     */
    applications?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyApplication>[]>;
    /**
     * Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
     */
    autoAsicOffload?: pulumi.Input<string>;
    /**
     * Name of an existing Antivirus profile.
     */
    avProfile?: pulumi.Input<string>;
    /**
     * Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
     */
    captivePortalExempt?: pulumi.Input<string>;
    /**
     * Name of an existing CIFS profile.
     */
    cifsProfile?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
     */
    diffservForward?: pulumi.Input<string>;
    /**
     * Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
     */
    diffservReverse?: pulumi.Input<string>;
    /**
     * Change packet's DiffServ to this value.
     */
    diffservcodeForward?: pulumi.Input<string>;
    /**
     * Change packet's reverse (reply) DiffServ to this value.
     */
    diffservcodeRev?: pulumi.Input<string>;
    /**
     * Name of an existing DLP sensor.
     */
    dlpSensor?: pulumi.Input<string>;
    /**
     * Name of an existing DNS filter profile.
     */
    dnsfilterProfile?: pulumi.Input<string>;
    /**
     * Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
     */
    dstaddr4s?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyDstaddr4>[]>;
    /**
     * Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
     */
    dstaddr6s?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyDstaddr6>[]>;
    /**
     * When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
     */
    dstaddrNegate?: pulumi.Input<string>;
    /**
     * Outgoing (egress) interface. The structure of `dstintf` block is documented below.
     */
    dstintfs?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyDstintf>[]>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Name of an existing email filter profile.
     */
    emailfilterProfile?: pulumi.Input<string>;
    /**
     * Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
     */
    fixedport?: pulumi.Input<string>;
    /**
     * Names of FSSO groups. The structure of `fssoGroups` block is documented below.
     */
    fssoGroups?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyFssoGroup>[]>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyGroup>[]>;
    /**
     * Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
     */
    httpPolicyRedirect?: pulumi.Input<string>;
    /**
     * Name of an existing ICAP profile.
     */
    icapProfile?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
     */
    inbound?: pulumi.Input<string>;
    /**
     * Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
     */
    inspectionMode?: pulumi.Input<string>;
    /**
     * Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
     */
    internetService?: pulumi.Input<string>;
    /**
     * Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
     */
    internetServiceCustomGroups?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceCustomGroup>[]>;
    /**
     * Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
     */
    internetServiceCustoms?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceCustom>[]>;
    /**
     * Internet Service group name. The structure of `internetServiceGroup` block is documented below.
     */
    internetServiceGroups?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceGroup>[]>;
    /**
     * Internet Service ID. The structure of `internetServiceId` block is documented below.
     */
    internetServiceIds?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceId>[]>;
    /**
     * Internet Service name. The structure of `internetServiceName` block is documented below.
     */
    internetServiceNames?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceName>[]>;
    /**
     * When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    internetServiceNegate?: pulumi.Input<string>;
    /**
     * Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
     */
    internetServiceSrc?: pulumi.Input<string>;
    /**
     * Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
     */
    internetServiceSrcCustomGroups?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceSrcCustomGroup>[]>;
    /**
     * Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
     */
    internetServiceSrcCustoms?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceSrcCustom>[]>;
    /**
     * Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
     */
    internetServiceSrcGroups?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceSrcGroup>[]>;
    /**
     * Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
     */
    internetServiceSrcIds?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceSrcId>[]>;
    /**
     * Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
     */
    internetServiceSrcNames?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceSrcName>[]>;
    /**
     * When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    internetServiceSrcNegate?: pulumi.Input<string>;
    /**
     * Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
     */
    ippool?: pulumi.Input<string>;
    /**
     * Name of an existing IPS sensor.
     */
    ipsSensor?: pulumi.Input<string>;
    /**
     * Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
     */
    logtraffic?: pulumi.Input<string>;
    /**
     * Record logs when a session starts. Valid values: `enable`, `disable`.
     */
    logtrafficStart?: pulumi.Input<string>;
    /**
     * Policy name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable source NAT. Valid values: `enable`, `disable`.
     */
    nat?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
     */
    outbound?: pulumi.Input<string>;
    /**
     * Per-IP traffic shaper.
     */
    perIpShaper?: pulumi.Input<string>;
    /**
     * Policy ID.
     */
    policyid?: pulumi.Input<number>;
    /**
     * IPv4 pool names. The structure of `poolname4` block is documented below.
     */
    poolname4s?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyPoolname4>[]>;
    /**
     * IPv6 pool names. The structure of `poolname6` block is documented below.
     */
    poolname6s?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyPoolname6>[]>;
    /**
     * Name of profile group.
     */
    profileGroup?: pulumi.Input<string>;
    /**
     * Name of an existing Protocol options profile.
     */
    profileProtocolOptions?: pulumi.Input<string>;
    /**
     * Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
     */
    profileType?: pulumi.Input<string>;
    /**
     * Schedule name.
     */
    schedule?: pulumi.Input<string>;
    /**
     * When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    serviceNegate?: pulumi.Input<string>;
    /**
     * Service and service group names. The structure of `service` block is documented below.
     */
    services?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyService>[]>;
    /**
     * TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
     */
    sessionTtl?: pulumi.Input<number>;
    /**
     * Name of an existing Spam filter profile.
     */
    spamfilterProfile?: pulumi.Input<string>;
    /**
     * Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
     */
    srcaddr4s?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicySrcaddr4>[]>;
    /**
     * Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
     */
    srcaddr6s?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicySrcaddr6>[]>;
    /**
     * When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
     */
    srcaddrNegate?: pulumi.Input<string>;
    /**
     * Incoming (ingress) interface. The structure of `srcintf` block is documented below.
     */
    srcintfs?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicySrcintf>[]>;
    /**
     * Name of an existing SSH filter profile.
     */
    sshFilterProfile?: pulumi.Input<string>;
    /**
     * Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
     */
    sshPolicyRedirect?: pulumi.Input<string>;
    /**
     * Name of an existing SSL SSH profile.
     */
    sslSshProfile?: pulumi.Input<string>;
    /**
     * Enable or disable this policy. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Receiver TCP maximum segment size (MSS).
     */
    tcpMssReceiver?: pulumi.Input<number>;
    /**
     * Sender TCP maximum segment size (MSS).
     */
    tcpMssSender?: pulumi.Input<number>;
    /**
     * Traffic shaper.
     */
    trafficShaper?: pulumi.Input<string>;
    /**
     * Reverse traffic shaper.
     */
    trafficShaperReverse?: pulumi.Input<string>;
    /**
     * URL category ID list. The structure of `urlCategory` block is documented below.
     */
    urlCategories?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyUrlCategory>[]>;
    /**
     * Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
     */
    users?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyUser>[]>;
    /**
     * Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
     */
    utmStatus?: pulumi.Input<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Name of an existing VoIP profile.
     */
    voipProfile?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
     */
    vpntunnel?: pulumi.Input<string>;
    /**
     * Name of an existing Web application firewall profile.
     */
    wafProfile?: pulumi.Input<string>;
    /**
     * Enable/disable WAN optimization. Valid values: `enable`, `disable`.
     */
    wanopt?: pulumi.Input<string>;
    /**
     * WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
     */
    wanoptDetection?: pulumi.Input<string>;
    /**
     * WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
     */
    wanoptPassiveOpt?: pulumi.Input<string>;
    /**
     * WAN optimization peer.
     */
    wanoptPeer?: pulumi.Input<string>;
    /**
     * WAN optimization profile.
     */
    wanoptProfile?: pulumi.Input<string>;
    /**
     * Enable/disable web cache. Valid values: `enable`, `disable`.
     */
    webcache?: pulumi.Input<string>;
    /**
     * Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
     */
    webcacheHttps?: pulumi.Input<string>;
    /**
     * Name of an existing Web filter profile.
     */
    webfilterProfile?: pulumi.Input<string>;
    /**
     * Webproxy forward server name.
     */
    webproxyForwardServer?: pulumi.Input<string>;
    /**
     * Webproxy profile name.
     */
    webproxyProfile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
     */
    action?: pulumi.Input<string>;
    /**
     * Application category ID list. The structure of `appCategory` block is documented below.
     */
    appCategories?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyAppCategory>[]>;
    /**
     * Application group names. The structure of `appGroup` block is documented below.
     */
    appGroups?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyAppGroup>[]>;
    /**
     * Name of an existing Application list.
     */
    applicationList?: pulumi.Input<string>;
    /**
     * Application ID list. The structure of `application` block is documented below.
     */
    applications?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyApplication>[]>;
    /**
     * Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
     */
    autoAsicOffload?: pulumi.Input<string>;
    /**
     * Name of an existing Antivirus profile.
     */
    avProfile?: pulumi.Input<string>;
    /**
     * Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
     */
    captivePortalExempt?: pulumi.Input<string>;
    /**
     * Name of an existing CIFS profile.
     */
    cifsProfile?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
     */
    diffservForward?: pulumi.Input<string>;
    /**
     * Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
     */
    diffservReverse?: pulumi.Input<string>;
    /**
     * Change packet's DiffServ to this value.
     */
    diffservcodeForward?: pulumi.Input<string>;
    /**
     * Change packet's reverse (reply) DiffServ to this value.
     */
    diffservcodeRev?: pulumi.Input<string>;
    /**
     * Name of an existing DLP sensor.
     */
    dlpSensor?: pulumi.Input<string>;
    /**
     * Name of an existing DNS filter profile.
     */
    dnsfilterProfile?: pulumi.Input<string>;
    /**
     * Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
     */
    dstaddr4s?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyDstaddr4>[]>;
    /**
     * Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
     */
    dstaddr6s?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyDstaddr6>[]>;
    /**
     * When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
     */
    dstaddrNegate?: pulumi.Input<string>;
    /**
     * Outgoing (egress) interface. The structure of `dstintf` block is documented below.
     */
    dstintfs?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyDstintf>[]>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Name of an existing email filter profile.
     */
    emailfilterProfile?: pulumi.Input<string>;
    /**
     * Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
     */
    fixedport?: pulumi.Input<string>;
    /**
     * Names of FSSO groups. The structure of `fssoGroups` block is documented below.
     */
    fssoGroups?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyFssoGroup>[]>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyGroup>[]>;
    /**
     * Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
     */
    httpPolicyRedirect?: pulumi.Input<string>;
    /**
     * Name of an existing ICAP profile.
     */
    icapProfile?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
     */
    inbound?: pulumi.Input<string>;
    /**
     * Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
     */
    inspectionMode?: pulumi.Input<string>;
    /**
     * Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
     */
    internetService?: pulumi.Input<string>;
    /**
     * Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
     */
    internetServiceCustomGroups?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceCustomGroup>[]>;
    /**
     * Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
     */
    internetServiceCustoms?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceCustom>[]>;
    /**
     * Internet Service group name. The structure of `internetServiceGroup` block is documented below.
     */
    internetServiceGroups?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceGroup>[]>;
    /**
     * Internet Service ID. The structure of `internetServiceId` block is documented below.
     */
    internetServiceIds?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceId>[]>;
    /**
     * Internet Service name. The structure of `internetServiceName` block is documented below.
     */
    internetServiceNames?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceName>[]>;
    /**
     * When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    internetServiceNegate?: pulumi.Input<string>;
    /**
     * Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
     */
    internetServiceSrc?: pulumi.Input<string>;
    /**
     * Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
     */
    internetServiceSrcCustomGroups?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceSrcCustomGroup>[]>;
    /**
     * Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
     */
    internetServiceSrcCustoms?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceSrcCustom>[]>;
    /**
     * Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
     */
    internetServiceSrcGroups?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceSrcGroup>[]>;
    /**
     * Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
     */
    internetServiceSrcIds?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceSrcId>[]>;
    /**
     * Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
     */
    internetServiceSrcNames?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyInternetServiceSrcName>[]>;
    /**
     * When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    internetServiceSrcNegate?: pulumi.Input<string>;
    /**
     * Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
     */
    ippool?: pulumi.Input<string>;
    /**
     * Name of an existing IPS sensor.
     */
    ipsSensor?: pulumi.Input<string>;
    /**
     * Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
     */
    logtraffic?: pulumi.Input<string>;
    /**
     * Record logs when a session starts. Valid values: `enable`, `disable`.
     */
    logtrafficStart?: pulumi.Input<string>;
    /**
     * Policy name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable source NAT. Valid values: `enable`, `disable`.
     */
    nat?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
     */
    outbound?: pulumi.Input<string>;
    /**
     * Per-IP traffic shaper.
     */
    perIpShaper?: pulumi.Input<string>;
    /**
     * Policy ID.
     */
    policyid?: pulumi.Input<number>;
    /**
     * IPv4 pool names. The structure of `poolname4` block is documented below.
     */
    poolname4s?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyPoolname4>[]>;
    /**
     * IPv6 pool names. The structure of `poolname6` block is documented below.
     */
    poolname6s?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyPoolname6>[]>;
    /**
     * Name of profile group.
     */
    profileGroup?: pulumi.Input<string>;
    /**
     * Name of an existing Protocol options profile.
     */
    profileProtocolOptions?: pulumi.Input<string>;
    /**
     * Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
     */
    profileType?: pulumi.Input<string>;
    /**
     * Schedule name.
     */
    schedule?: pulumi.Input<string>;
    /**
     * When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    serviceNegate?: pulumi.Input<string>;
    /**
     * Service and service group names. The structure of `service` block is documented below.
     */
    services?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyService>[]>;
    /**
     * TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
     */
    sessionTtl?: pulumi.Input<number>;
    /**
     * Name of an existing Spam filter profile.
     */
    spamfilterProfile?: pulumi.Input<string>;
    /**
     * Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
     */
    srcaddr4s?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicySrcaddr4>[]>;
    /**
     * Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
     */
    srcaddr6s?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicySrcaddr6>[]>;
    /**
     * When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
     */
    srcaddrNegate?: pulumi.Input<string>;
    /**
     * Incoming (ingress) interface. The structure of `srcintf` block is documented below.
     */
    srcintfs?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicySrcintf>[]>;
    /**
     * Name of an existing SSH filter profile.
     */
    sshFilterProfile?: pulumi.Input<string>;
    /**
     * Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
     */
    sshPolicyRedirect?: pulumi.Input<string>;
    /**
     * Name of an existing SSL SSH profile.
     */
    sslSshProfile?: pulumi.Input<string>;
    /**
     * Enable or disable this policy. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Receiver TCP maximum segment size (MSS).
     */
    tcpMssReceiver?: pulumi.Input<number>;
    /**
     * Sender TCP maximum segment size (MSS).
     */
    tcpMssSender?: pulumi.Input<number>;
    /**
     * Traffic shaper.
     */
    trafficShaper?: pulumi.Input<string>;
    /**
     * Reverse traffic shaper.
     */
    trafficShaperReverse?: pulumi.Input<string>;
    /**
     * URL category ID list. The structure of `urlCategory` block is documented below.
     */
    urlCategories?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyUrlCategory>[]>;
    /**
     * Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
     */
    users?: pulumi.Input<pulumi.Input<inputs.firewall.consolidated.PolicyUser>[]>;
    /**
     * Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
     */
    utmStatus?: pulumi.Input<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Name of an existing VoIP profile.
     */
    voipProfile?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
     */
    vpntunnel?: pulumi.Input<string>;
    /**
     * Name of an existing Web application firewall profile.
     */
    wafProfile?: pulumi.Input<string>;
    /**
     * Enable/disable WAN optimization. Valid values: `enable`, `disable`.
     */
    wanopt?: pulumi.Input<string>;
    /**
     * WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
     */
    wanoptDetection?: pulumi.Input<string>;
    /**
     * WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
     */
    wanoptPassiveOpt?: pulumi.Input<string>;
    /**
     * WAN optimization peer.
     */
    wanoptPeer?: pulumi.Input<string>;
    /**
     * WAN optimization profile.
     */
    wanoptProfile?: pulumi.Input<string>;
    /**
     * Enable/disable web cache. Valid values: `enable`, `disable`.
     */
    webcache?: pulumi.Input<string>;
    /**
     * Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
     */
    webcacheHttps?: pulumi.Input<string>;
    /**
     * Name of an existing Web filter profile.
     */
    webfilterProfile?: pulumi.Input<string>;
    /**
     * Webproxy forward server name.
     */
    webproxyForwardServer?: pulumi.Input<string>;
    /**
     * Webproxy profile name.
     */
    webproxyProfile?: pulumi.Input<string>;
}
