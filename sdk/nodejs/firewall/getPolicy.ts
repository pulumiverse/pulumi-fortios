// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to get information on an fortios firewall policy
 */
export function getPolicy(args: GetPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortios:firewall/getPolicy:getPolicy", {
        "policyid": args.policyid,
        "vdomparam": args.vdomparam,
    }, opts);
}

/**
 * A collection of arguments for invoking getPolicy.
 */
export interface GetPolicyArgs {
    /**
     * Specify the policyid of the desired firewall policy.
     */
    policyid: number;
    /**
     * Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: string;
}

/**
 * A collection of values returned by getPolicy.
 */
export interface GetPolicyResult {
    /**
     * Policy action (allow/deny/ipsec).
     */
    readonly action: string;
    /**
     * Enable/disable anti-replay check.
     */
    readonly antiReplay: string;
    /**
     * Application category ID list. The structure of `appCategory` block is documented below.
     */
    readonly appCategories: outputs.firewall.GetPolicyAppCategory[];
    /**
     * Application group names. The structure of `appGroup` block is documented below.
     */
    readonly appGroups: outputs.firewall.GetPolicyAppGroup[];
    /**
     * Name of an existing Application list.
     */
    readonly applicationList: string;
    /**
     * Application ID list. The structure of `application` block is documented below.
     */
    readonly applications: outputs.firewall.GetPolicyApplication[];
    /**
     * HTTPS server certificate for policy authentication.
     */
    readonly authCert: string;
    /**
     * Enable/disable authentication-based routing.
     */
    readonly authPath: string;
    /**
     * HTTP-to-HTTPS redirect address for firewall authentication.
     */
    readonly authRedirectAddr: string;
    /**
     * Enable/disable policy traffic ASIC offloading.
     */
    readonly autoAsicOffload: string;
    /**
     * Name of an existing Antivirus profile.
     */
    readonly avProfile: string;
    /**
     * Enable/disable block notification.
     */
    readonly blockNotification: string;
    /**
     * Enable to exempt some users from the captive portal.
     */
    readonly captivePortalExempt: string;
    /**
     * Enable/disable capture packets.
     */
    readonly capturePacket: string;
    /**
     * Name of an existing CASB profile.
     */
    readonly casbProfile: string;
    /**
     * Name of an existing CIFS profile.
     */
    readonly cifsProfile: string;
    /**
     * Comment.
     */
    readonly comments: string;
    /**
     * Custom fields to append to log messages for this policy. The structure of `customLogFields` block is documented below.
     */
    readonly customLogFields: outputs.firewall.GetPolicyCustomLogField[];
    /**
     * Decrypted traffic mirror.
     */
    readonly decryptedTrafficMirror: string;
    /**
     * Enable TCP NPU session delay to guarantee packet order of 3-way handshake.
     */
    readonly delayTcpNpuSession: string;
    /**
     * Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
     */
    readonly devices: outputs.firewall.GetPolicyDevice[];
    /**
     * Name of an existing Diameter filter profile.
     */
    readonly diameterFilterProfile: string;
    /**
     * Enable to copy packet's DiffServ values from session's original direction to its reply direction.
     */
    readonly diffservCopy: string;
    /**
     * Enable to change packet's DiffServ values to the specified diffservcode-forward value.
     */
    readonly diffservForward: string;
    /**
     * Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.
     */
    readonly diffservReverse: string;
    /**
     * Change packet's DiffServ to this value.
     */
    readonly diffservcodeForward: string;
    /**
     * Change packet's reverse (reply) DiffServ to this value.
     */
    readonly diffservcodeRev: string;
    /**
     * Enable/disable user authentication disclaimer.
     */
    readonly disclaimer: string;
    /**
     * Name of an existing DLP profile.
     */
    readonly dlpProfile: string;
    /**
     * Name of an existing DLP sensor.
     */
    readonly dlpSensor: string;
    /**
     * Name of an existing DNS filter profile.
     */
    readonly dnsfilterProfile: string;
    /**
     * Enable DSRI to ignore HTTP server responses.
     */
    readonly dsri: string;
    /**
     * When enabled dstaddr6 specifies what the destination address must NOT be.
     */
    readonly dstaddr6Negate: string;
    /**
     * Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
     */
    readonly dstaddr6s: outputs.firewall.GetPolicyDstaddr6[];
    /**
     * When enabled dstaddr specifies what the destination address must NOT be.
     */
    readonly dstaddrNegate: string;
    /**
     * Destination address and address group names. The structure of `dstaddr` block is documented below.
     */
    readonly dstaddrs: outputs.firewall.GetPolicyDstaddr[];
    /**
     * Outgoing (egress) interface. The structure of `dstintf` block is documented below.
     */
    readonly dstintfs: outputs.firewall.GetPolicyDstintf[];
    /**
     * Enable/disable dynamic RADIUS defined traffic shaping.
     */
    readonly dynamicShaping: string;
    /**
     * Enable/disable email collection.
     */
    readonly emailCollect: string;
    /**
     * Name of an existing email filter profile.
     */
    readonly emailfilterProfile: string;
    /**
     * Enable/disable Forward Error Correction on traffic matching this policy on a FEC device.
     */
    readonly fec: string;
    /**
     * Name of an existing file-filter profile.
     */
    readonly fileFilterProfile: string;
    /**
     * How to handle sessions if the configuration of this firewall policy changes.
     */
    readonly firewallSessionDirty: string;
    /**
     * Enable to prevent source NAT from changing a session's source port.
     */
    readonly fixedport: string;
    /**
     * Enable/disable Fortinet Single Sign-On.
     */
    readonly fsso: string;
    /**
     * FSSO agent to use for NTLM authentication.
     */
    readonly fssoAgentForNtlm: string;
    /**
     * Names of FSSO groups. The structure of `fssoGroups` block is documented below.
     */
    readonly fssoGroups: outputs.firewall.GetPolicyFssoGroup[];
    /**
     * Enable/disable recognition of anycast IP addresses using the geography IP database.
     */
    readonly geoipAnycast: string;
    /**
     * Match geography address based either on its physical location or registered location.
     */
    readonly geoipMatch: string;
    /**
     * Label for the policy that appears when the GUI is in Global View mode.
     */
    readonly globalLabel: string;
    /**
     * Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
     */
    readonly groups: outputs.firewall.GetPolicyGroup[];
    /**
     * Redirect HTTP(S) traffic to matching transparent web proxy policy.
     */
    readonly httpPolicyRedirect: string;
    /**
     * Name of an existing ICAP profile.
     */
    readonly icapProfile: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Name of identity-based routing rule.
     */
    readonly identityBasedRoute: string;
    /**
     * Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN.
     */
    readonly inbound: string;
    /**
     * Policy inspection mode (Flow/proxy). Default is Flow mode.
     */
    readonly inspectionMode: string;
    /**
     * Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
     */
    readonly internetService: string;
    /**
     * Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used.
     */
    readonly internetService6: string;
    /**
     * Custom Internet Service6 group name. The structure of `internetService6CustomGroup` block is documented below.
     */
    readonly internetService6CustomGroups: outputs.firewall.GetPolicyInternetService6CustomGroup[];
    /**
     * Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
     */
    readonly internetService6Customs: outputs.firewall.GetPolicyInternetService6Custom[];
    /**
     * Internet Service group name. The structure of `internetService6Group` block is documented below.
     */
    readonly internetService6Groups: outputs.firewall.GetPolicyInternetService6Group[];
    /**
     * IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
     */
    readonly internetService6Names: outputs.firewall.GetPolicyInternetService6Name[];
    /**
     * When enabled internet-service6 specifies what the service must NOT be.
     */
    readonly internetService6Negate: string;
    /**
     * Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used.
     */
    readonly internetService6Src: string;
    /**
     * Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
     */
    readonly internetService6SrcCustomGroups: outputs.firewall.GetPolicyInternetService6SrcCustomGroup[];
    /**
     * Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
     */
    readonly internetService6SrcCustoms: outputs.firewall.GetPolicyInternetService6SrcCustom[];
    /**
     * Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
     */
    readonly internetService6SrcGroups: outputs.firewall.GetPolicyInternetService6SrcGroup[];
    /**
     * IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
     */
    readonly internetService6SrcNames: outputs.firewall.GetPolicyInternetService6SrcName[];
    /**
     * When enabled internet-service6-src specifies what the service must NOT be.
     */
    readonly internetService6SrcNegate: string;
    /**
     * Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
     */
    readonly internetServiceCustomGroups: outputs.firewall.GetPolicyInternetServiceCustomGroup[];
    /**
     * Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
     */
    readonly internetServiceCustoms: outputs.firewall.GetPolicyInternetServiceCustom[];
    /**
     * Internet Service group name. The structure of `internetServiceGroup` block is documented below.
     */
    readonly internetServiceGroups: outputs.firewall.GetPolicyInternetServiceGroup[];
    /**
     * Internet Service ID. The structure of `internetServiceId` block is documented below.
     */
    readonly internetServiceIds: outputs.firewall.GetPolicyInternetServiceId[];
    /**
     * Internet Service name. The structure of `internetServiceName` block is documented below.
     */
    readonly internetServiceNames: outputs.firewall.GetPolicyInternetServiceName[];
    /**
     * When enabled internet-service specifies what the service must NOT be.
     */
    readonly internetServiceNegate: string;
    /**
     * Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.
     */
    readonly internetServiceSrc: string;
    /**
     * Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
     */
    readonly internetServiceSrcCustomGroups: outputs.firewall.GetPolicyInternetServiceSrcCustomGroup[];
    /**
     * Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
     */
    readonly internetServiceSrcCustoms: outputs.firewall.GetPolicyInternetServiceSrcCustom[];
    /**
     * Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
     */
    readonly internetServiceSrcGroups: outputs.firewall.GetPolicyInternetServiceSrcGroup[];
    /**
     * Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
     */
    readonly internetServiceSrcIds: outputs.firewall.GetPolicyInternetServiceSrcId[];
    /**
     * Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
     */
    readonly internetServiceSrcNames: outputs.firewall.GetPolicyInternetServiceSrcName[];
    /**
     * When enabled internet-service-src specifies what the service must NOT be.
     */
    readonly internetServiceSrcNegate: string;
    /**
     * Enable to use IP Pools for source NAT.
     */
    readonly ippool: string;
    /**
     * Name of an existing IPS sensor.
     */
    readonly ipsSensor: string;
    /**
     * Name of an existing VoIP (ips) profile.
     */
    readonly ipsVoipFilter: string;
    /**
     * Label for the policy that appears when the GUI is in Section View mode.
     */
    readonly label: string;
    /**
     * Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated.
     */
    readonly learningMode: string;
    /**
     * Enable or disable logging. Log all sessions or security profile sessions.
     */
    readonly logtraffic: string;
    /**
     * Record logs when a session starts.
     */
    readonly logtrafficStart: string;
    /**
     * Enable to match packets that have had their destination addresses changed by a VIP.
     */
    readonly matchVip: string;
    /**
     * Enable/disable matching of only those packets that have had their destination addresses changed by a VIP.
     */
    readonly matchVipOnly: string;
    /**
     * Mirror Interface name.
     */
    readonly name: string;
    /**
     * Enable/disable source NAT.
     */
    readonly nat: string;
    /**
     * Enable/disable NAT46.
     */
    readonly nat46: string;
    /**
     * Enable/disable NAT64.
     */
    readonly nat64: string;
    /**
     * Policy-based IPsec VPN: apply destination NAT to inbound traffic.
     */
    readonly natinbound: string;
    /**
     * Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
     */
    readonly natip: string;
    /**
     * Policy-based IPsec VPN: apply source NAT to outbound traffic.
     */
    readonly natoutbound: string;
    /**
     * Dynamic Network Service name. The structure of `networkServiceDynamic` block is documented below.
     */
    readonly networkServiceDynamics: outputs.firewall.GetPolicyNetworkServiceDynamic[];
    /**
     * Dynamic Network Service source name. The structure of `networkServiceSrcDynamic` block is documented below.
     */
    readonly networkServiceSrcDynamics: outputs.firewall.GetPolicyNetworkServiceSrcDynamic[];
    /**
     * Enable/disable UTM Network Processor acceleration.
     */
    readonly npAcceleration: string;
    /**
     * Enable/disable NTLM authentication.
     */
    readonly ntlm: string;
    /**
     * HTTP-User-Agent value of supported browsers. The structure of `ntlmEnabledBrowsers` block is documented below.
     */
    readonly ntlmEnabledBrowsers: outputs.firewall.GetPolicyNtlmEnabledBrowser[];
    /**
     * Enable/disable NTLM guest user access.
     */
    readonly ntlmGuest: string;
    /**
     * Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN.
     */
    readonly outbound: string;
    /**
     * Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled.
     */
    readonly passiveWanHealthMeasurement: string;
    /**
     * Enable/disable PCP inbound DNAT.
     */
    readonly pcpInbound: string;
    /**
     * Enable/disable PCP outbound SNAT.
     */
    readonly pcpOutbound: string;
    /**
     * PCP pool names. The structure of `pcpPoolname` block is documented below.
     */
    readonly pcpPoolnames: outputs.firewall.GetPolicyPcpPoolname[];
    /**
     * Per-IP traffic shaper.
     */
    readonly perIpShaper: string;
    /**
     * Accept UDP packets from any host.
     */
    readonly permitAnyHost: string;
    /**
     * Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host.
     */
    readonly permitStunHost: string;
    /**
     * Enable/disable policy expiry.
     */
    readonly policyExpiry: string;
    /**
     * Policy expiry date (YYYY-MM-DD HH:MM:SS).
     */
    readonly policyExpiryDate: string;
    /**
     * Policy expiry date and time, in epoch format.
     */
    readonly policyExpiryDateUtc: string;
    /**
     * Policy ID.
     */
    readonly policyid: number;
    /**
     * IPv6 pool names. The structure of `poolname6` block is documented below.
     */
    readonly poolname6s: outputs.firewall.GetPolicyPoolname6[];
    /**
     * IP Pool names. The structure of `poolname` block is documented below.
     */
    readonly poolnames: outputs.firewall.GetPolicyPoolname[];
    /**
     * Name of profile group.
     */
    readonly profileGroup: string;
    /**
     * Name of an existing Protocol options profile.
     */
    readonly profileProtocolOptions: string;
    /**
     * Determine whether the firewall policy allows security profile groups or single profiles only.
     */
    readonly profileType: string;
    /**
     * Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server.
     */
    readonly radiusMacAuthBypass: string;
    /**
     * URL users are directed to after seeing and accepting the disclaimer or authenticating.
     */
    readonly redirectUrl: string;
    /**
     * Override the default replacement message group for this policy.
     */
    readonly replacemsgOverrideGroup: string;
    /**
     * Direction of the initial traffic for reputation to take effect.
     */
    readonly reputationDirection: string;
    /**
     * Direction of the initial traffic for IPv6 reputation to take effect.
     */
    readonly reputationDirection6: string;
    /**
     * Minimum Reputation to take action.
     */
    readonly reputationMinimum: number;
    /**
     * IPv6 Minimum Reputation to take action.
     */
    readonly reputationMinimum6: number;
    /**
     * Enable/disable RADIUS single sign-on (RSSO).
     */
    readonly rsso: string;
    /**
     * Address names if this is an RTP NAT policy. The structure of `rtpAddr` block is documented below.
     */
    readonly rtpAddrs: outputs.firewall.GetPolicyRtpAddr[];
    /**
     * Enable Real Time Protocol (RTP) NAT.
     */
    readonly rtpNat: string;
    /**
     * Block or monitor connections to Botnet servers or disable Botnet scanning.
     */
    readonly scanBotnetConnections: string;
    /**
     * Schedule name.
     */
    readonly schedule: string;
    /**
     * Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity.
     */
    readonly scheduleTimeout: string;
    /**
     * Name of an existing SCTP filter profile.
     */
    readonly sctpFilterProfile: string;
    /**
     * Enable to send a reply when a session is denied or blocked by a firewall policy.
     */
    readonly sendDenyPacket: string;
    /**
     * When enabled service specifies what the service must NOT be.
     */
    readonly serviceNegate: string;
    /**
     * Service and service group names. The structure of `service` block is documented below.
     */
    readonly services: outputs.firewall.GetPolicyService[];
    /**
     * TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
     */
    readonly sessionTtl: number;
    /**
     * Enable/disable security group tags (SGT) check.
     */
    readonly sgtCheck: string;
    /**
     * Security group tags. The structure of `sgt` block is documented below.
     */
    readonly sgts: outputs.firewall.GetPolicySgt[];
    /**
     * Name of an existing Spam filter profile.
     */
    readonly spamfilterProfile: string;
    /**
     * Vendor MAC source ID. The structure of `srcVendorMac` block is documented below.
     */
    readonly srcVendorMacs: outputs.firewall.GetPolicySrcVendorMac[];
    /**
     * When enabled srcaddr6 specifies what the source address must NOT be.
     */
    readonly srcaddr6Negate: string;
    /**
     * Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
     */
    readonly srcaddr6s: outputs.firewall.GetPolicySrcaddr6[];
    /**
     * When enabled srcaddr specifies what the source address must NOT be.
     */
    readonly srcaddrNegate: string;
    /**
     * Source address and address group names. The structure of `srcaddr` block is documented below.
     */
    readonly srcaddrs: outputs.firewall.GetPolicySrcaddr[];
    /**
     * Incoming (ingress) interface. The structure of `srcintf` block is documented below.
     */
    readonly srcintfs: outputs.firewall.GetPolicySrcintf[];
    /**
     * Name of an existing SSH filter profile.
     */
    readonly sshFilterProfile: string;
    /**
     * Redirect SSH traffic to matching transparent proxy policy.
     */
    readonly sshPolicyRedirect: string;
    /**
     * Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring).
     */
    readonly sslMirror: string;
    /**
     * SSL mirror interface name. The structure of `sslMirrorIntf` block is documented below.
     */
    readonly sslMirrorIntfs: outputs.firewall.GetPolicySslMirrorIntf[];
    /**
     * Name of an existing SSL SSH profile.
     */
    readonly sslSshProfile: string;
    /**
     * Enable or disable this policy.
     */
    readonly status: string;
    /**
     * Receiver TCP maximum segment size (MSS).
     */
    readonly tcpMssReceiver: number;
    /**
     * Sender TCP maximum segment size (MSS).
     */
    readonly tcpMssSender: number;
    /**
     * Enable/disable creation of TCP session without SYN flag.
     */
    readonly tcpSessionWithoutSyn: string;
    /**
     * Enable/disable sending RST packets when TCP sessions expire.
     */
    readonly timeoutSendRst: string;
    /**
     * ToS (Type of Service) value used for comparison.
     */
    readonly tos: string;
    /**
     * Non-zero bit positions are used for comparison while zero bit positions are ignored.
     */
    readonly tosMask: string;
    /**
     * Enable negated TOS match.
     */
    readonly tosNegate: string;
    /**
     * Traffic shaper.
     */
    readonly trafficShaper: string;
    /**
     * Reverse traffic shaper.
     */
    readonly trafficShaperReverse: string;
    /**
     * URL category ID list. The structure of `urlCategory` block is documented below.
     */
    readonly urlCategories: outputs.firewall.GetPolicyUrlCategory[];
    /**
     * Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
     */
    readonly users: outputs.firewall.GetPolicyUser[];
    /**
     * Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
     */
    readonly utmStatus: string;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    readonly uuid: string;
    readonly vdomparam?: string;
    /**
     * Name of an existing VideoFilter profile.
     */
    readonly videofilterProfile: string;
    /**
     * Name of an existing virtual-patch profile.
     */
    readonly virtualPatchProfile: string;
    /**
     * VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
     */
    readonly vlanCosFwd: number;
    /**
     * VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
     */
    readonly vlanCosRev: number;
    /**
     * Set VLAN filters.
     */
    readonly vlanFilter: string;
    /**
     * Name of an existing VoIP profile.
     */
    readonly voipProfile: string;
    /**
     * Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
     */
    readonly vpntunnel: string;
    /**
     * Name of an existing Web application firewall profile.
     */
    readonly wafProfile: string;
    /**
     * Enable/disable WAN optimization.
     */
    readonly wanopt: string;
    /**
     * WAN optimization auto-detection mode.
     */
    readonly wanoptDetection: string;
    /**
     * WAN optimization passive mode options. This option decides what IP address will be used to connect server.
     */
    readonly wanoptPassiveOpt: string;
    /**
     * WAN optimization peer.
     */
    readonly wanoptPeer: string;
    /**
     * WAN optimization profile.
     */
    readonly wanoptProfile: string;
    /**
     * Enable/disable forwarding traffic matching this policy to a configured WCCP server.
     */
    readonly wccp: string;
    /**
     * Enable/disable web cache.
     */
    readonly webcache: string;
    /**
     * Enable/disable web cache for HTTPS.
     */
    readonly webcacheHttps: string;
    /**
     * Name of an existing Web filter profile.
     */
    readonly webfilterProfile: string;
    /**
     * Web proxy forward server name.
     */
    readonly webproxyForwardServer: string;
    /**
     * Webproxy profile name.
     */
    readonly webproxyProfile: string;
    /**
     * Enable/disable WiFi Single Sign On (WSSO).
     */
    readonly wsso: string;
    /**
     * Enable/disable zero trust device ownership.
     */
    readonly ztnaDeviceOwnership: string;
    /**
     * Source ztna-ems-tag-secondary names. The structure of `ztnaEmsTagSecondary` block is documented below.
     */
    readonly ztnaEmsTagSecondaries: outputs.firewall.GetPolicyZtnaEmsTagSecondary[];
    /**
     * Source ztna-ems-tag names. The structure of `ztnaEmsTag` block is documented below.
     */
    readonly ztnaEmsTags: outputs.firewall.GetPolicyZtnaEmsTag[];
    /**
     * Source ztna-geo-tag names. The structure of `ztnaGeoTag` block is documented below.
     */
    readonly ztnaGeoTags: outputs.firewall.GetPolicyZtnaGeoTag[];
    /**
     * Redirect ZTNA traffic to matching Access-Proxy proxy-policy.
     */
    readonly ztnaPolicyRedirect: string;
    /**
     * Enable/disable zero trust access.
     */
    readonly ztnaStatus: string;
    /**
     * ZTNA tag matching logic.
     */
    readonly ztnaTagsMatchLogic: string;
}
/**
 * Use this data source to get information on an fortios firewall policy
 */
export function getPolicyOutput(args: GetPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPolicyResult> {
    return pulumi.output(args).apply((a: any) => getPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getPolicy.
 */
export interface GetPolicyOutputArgs {
    /**
     * Specify the policyid of the desired firewall policy.
     */
    policyid: pulumi.Input<number>;
    /**
     * Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
