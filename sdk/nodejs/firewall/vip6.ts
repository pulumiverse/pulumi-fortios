// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Configure virtual IP for IPv6.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trname = new fortios.firewall.Vip6("trname", {
 *     arpReply: "enable",
 *     color: 0,
 *     extip: "2001:1:1:12::100",
 *     extport: "0-65535",
 *     fosid: 0,
 *     httpCookieAge: 60,
 *     httpCookieDomainFromHost: "disable",
 *     httpCookieGeneration: 0,
 *     httpCookieShare: "same-ip",
 *     httpIpHeader: "disable",
 *     httpMultiplex: "disable",
 *     httpsCookieSecure: "disable",
 *     ldbMethod: "static",
 *     mappedip: "2001:1:1:12::200",
 *     mappedport: "0-65535",
 *     maxEmbryonicConnections: 1000,
 *     outlookWebAccess: "disable",
 *     persistence: "none",
 *     portforward: "disable",
 *     protocol: "tcp",
 *     sslAlgorithm: "high",
 *     sslClientFallback: "enable",
 *     sslClientRenegotiation: "secure",
 *     sslClientSessionStateMax: 1000,
 *     sslClientSessionStateTimeout: 30,
 *     sslClientSessionStateType: "both",
 *     sslDhBits: "2048",
 *     sslHpkp: "disable",
 *     sslHpkpAge: 5184000,
 *     sslHpkpIncludeSubdomains: "disable",
 *     sslHsts: "disable",
 *     sslHstsAge: 5184000,
 *     sslHstsIncludeSubdomains: "disable",
 *     sslHttpLocationConversion: "disable",
 *     sslHttpMatchHost: "enable",
 *     sslMaxVersion: "tls-1.2",
 *     sslMinVersion: "tls-1.1",
 *     sslMode: "half",
 *     sslPfs: "require",
 *     sslSendEmptyFrags: "enable",
 *     sslServerAlgorithm: "client",
 *     sslServerMaxVersion: "client",
 *     sslServerMinVersion: "client",
 *     sslServerSessionStateMax: 100,
 *     sslServerSessionStateTimeout: 60,
 *     sslServerSessionStateType: "both",
 *     type: "static-nat",
 *     weblogicServer: "disable",
 *     websphereServer: "disable",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Firewall Vip6 can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:firewall/vip6:Vip6 labelname {{name}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:firewall/vip6:Vip6 labelname {{name}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Vip6 extends pulumi.CustomResource {
    /**
     * Get an existing Vip6 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Vip6State, opts?: pulumi.CustomResourceOptions): Vip6 {
        return new Vip6(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:firewall/vip6:Vip6';

    /**
     * Returns true if the given object is an instance of Vip6.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vip6 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vip6.__pulumiType;
    }

    /**
     * Enable/disable adding NAT64 route. Valid values: `disable`, `enable`.
     */
    public readonly addNat64Route!: pulumi.Output<string>;
    /**
     * Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
     */
    public readonly arpReply!: pulumi.Output<string>;
    /**
     * Color of icon on the GUI.
     */
    public readonly color!: pulumi.Output<number>;
    /**
     * Comment.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable embedded IPv4 address. Valid values: `disable`, `enable`.
     */
    public readonly embeddedIpv4Address!: pulumi.Output<string>;
    /**
     * IP address or address range on the external interface that you want to map to an address or address range on the destination network.
     */
    public readonly extip!: pulumi.Output<string>;
    /**
     * Incoming port number range that you want to map to a port number range on the destination network.
     */
    public readonly extport!: pulumi.Output<string>;
    /**
     * Custom defined ID.
     */
    public readonly fosid!: pulumi.Output<number>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
     */
    public readonly h2Support!: pulumi.Output<string>;
    /**
     * Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
     */
    public readonly h3Support!: pulumi.Output<string>;
    /**
     * Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
     */
    public readonly httpCookieAge!: pulumi.Output<number>;
    /**
     * Domain that HTTP cookie persistence should apply to.
     */
    public readonly httpCookieDomain!: pulumi.Output<string>;
    /**
     * Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
     */
    public readonly httpCookieDomainFromHost!: pulumi.Output<string>;
    /**
     * Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
     */
    public readonly httpCookieGeneration!: pulumi.Output<number>;
    /**
     * Limit HTTP cookie persistence to the specified path.
     */
    public readonly httpCookiePath!: pulumi.Output<string>;
    /**
     * Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
     */
    public readonly httpCookieShare!: pulumi.Output<string>;
    /**
     * For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
     */
    public readonly httpIpHeader!: pulumi.Output<string>;
    /**
     * For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
     */
    public readonly httpIpHeaderName!: pulumi.Output<string>;
    /**
     * Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
     */
    public readonly httpMultiplex!: pulumi.Output<string>;
    /**
     * Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
     */
    public readonly httpRedirect!: pulumi.Output<string>;
    /**
     * Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
     */
    public readonly httpsCookieSecure!: pulumi.Output<string>;
    /**
     * Start-mapped-IPv4-address [-end mapped-IPv4-address].
     */
    public readonly ipv4Mappedip!: pulumi.Output<string>;
    /**
     * IPv4 port number range on the destination network to which the external port number range is mapped.
     */
    public readonly ipv4Mappedport!: pulumi.Output<string>;
    /**
     * Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
     */
    public readonly ldbMethod!: pulumi.Output<string>;
    /**
     * Mapped IP address range in the format startIP-endIP.
     */
    public readonly mappedip!: pulumi.Output<string>;
    /**
     * Port number range on the destination network to which the external port number range is mapped.
     */
    public readonly mappedport!: pulumi.Output<string>;
    /**
     * Maximum number of incomplete connections.
     */
    public readonly maxEmbryonicConnections!: pulumi.Output<number>;
    /**
     * Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
     */
    public readonly monitors!: pulumi.Output<outputs.firewall.Vip6Monitor[] | undefined>;
    /**
     * Virtual ip6 name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable/disable DNAT64. Valid values: `disable`, `enable`.
     */
    public readonly nat64!: pulumi.Output<string>;
    /**
     * Enable/disable DNAT66. Valid values: `disable`, `enable`.
     */
    public readonly nat66!: pulumi.Output<string>;
    /**
     * Enable to perform SNAT on traffic from mappedip to the extip for all egress interfaces. Valid values: `disable`, `enable`.
     */
    public readonly natSourceVip!: pulumi.Output<string>;
    /**
     * Enable/disable this FortiGate unit's ability to respond to NDP requests for this virtual IP address (default = enable). Valid values: `disable`, `enable`.
     */
    public readonly ndpReply!: pulumi.Output<string>;
    /**
     * Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
     */
    public readonly outlookWebAccess!: pulumi.Output<string>;
    /**
     * Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
     */
    public readonly persistence!: pulumi.Output<string>;
    /**
     * Enable port forwarding. Valid values: `disable`, `enable`.
     */
    public readonly portforward!: pulumi.Output<string>;
    /**
     * Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * QUIC setting. The structure of `quic` block is documented below.
     */
    public readonly quic!: pulumi.Output<outputs.firewall.Vip6Quic>;
    /**
     * Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
     */
    public readonly realservers!: pulumi.Output<outputs.firewall.Vip6Realserver[] | undefined>;
    /**
     * Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
     */
    public readonly serverType!: pulumi.Output<string>;
    /**
     * Source IP6 filter (x:x:x:x:x:x:x:x/x). Separate addresses with spaces. The structure of `srcFilter` block is documented below.
     */
    public readonly srcFilters!: pulumi.Output<outputs.firewall.Vip6SrcFilter[] | undefined>;
    /**
     * Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
     */
    public readonly sslAcceptFfdheGroups!: pulumi.Output<string>;
    /**
     * Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
     */
    public readonly sslAlgorithm!: pulumi.Output<string>;
    /**
     * The name of the SSL certificate to use for SSL acceleration.
     */
    public readonly sslCertificate!: pulumi.Output<string>;
    /**
     * SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `sslCipherSuites` block is documented below.
     */
    public readonly sslCipherSuites!: pulumi.Output<outputs.firewall.Vip6SslCipherSuite[] | undefined>;
    /**
     * Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
     */
    public readonly sslClientFallback!: pulumi.Output<string>;
    /**
     * Maximum length of data in MB before triggering a client rekey (0 = disable).
     */
    public readonly sslClientRekeyCount!: pulumi.Output<number>;
    /**
     * Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
     */
    public readonly sslClientRenegotiation!: pulumi.Output<string>;
    /**
     * Maximum number of client to FortiGate SSL session states to keep.
     */
    public readonly sslClientSessionStateMax!: pulumi.Output<number>;
    /**
     * Number of minutes to keep client to FortiGate SSL session state.
     */
    public readonly sslClientSessionStateTimeout!: pulumi.Output<number>;
    /**
     * How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
     */
    public readonly sslClientSessionStateType!: pulumi.Output<string>;
    /**
     * Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
     */
    public readonly sslDhBits!: pulumi.Output<string>;
    /**
     * Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
     */
    public readonly sslHpkp!: pulumi.Output<string>;
    /**
     * Number of minutes the web browser should keep HPKP.
     */
    public readonly sslHpkpAge!: pulumi.Output<number>;
    /**
     * Certificate to generate backup HPKP pin from.
     */
    public readonly sslHpkpBackup!: pulumi.Output<string>;
    /**
     * Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
     */
    public readonly sslHpkpIncludeSubdomains!: pulumi.Output<string>;
    /**
     * Certificate to generate primary HPKP pin from.
     */
    public readonly sslHpkpPrimary!: pulumi.Output<string>;
    /**
     * URL to report HPKP violations to.
     */
    public readonly sslHpkpReportUri!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
     */
    public readonly sslHsts!: pulumi.Output<string>;
    /**
     * Number of seconds the client should honour the HSTS setting.
     */
    public readonly sslHstsAge!: pulumi.Output<number>;
    /**
     * Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
     */
    public readonly sslHstsIncludeSubdomains!: pulumi.Output<string>;
    /**
     * Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
     */
    public readonly sslHttpLocationConversion!: pulumi.Output<string>;
    /**
     * Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
     */
    public readonly sslHttpMatchHost!: pulumi.Output<string>;
    /**
     * Highest SSL/TLS version acceptable from a client.
     */
    public readonly sslMaxVersion!: pulumi.Output<string>;
    /**
     * Lowest SSL/TLS version acceptable from a client.
     */
    public readonly sslMinVersion!: pulumi.Output<string>;
    /**
     * Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
     */
    public readonly sslMode!: pulumi.Output<string>;
    /**
     * Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
     */
    public readonly sslPfs!: pulumi.Output<string>;
    /**
     * Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
     */
    public readonly sslSendEmptyFrags!: pulumi.Output<string>;
    /**
     * Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
     */
    public readonly sslServerAlgorithm!: pulumi.Output<string>;
    /**
     * SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslServerCipherSuites` block is documented below.
     */
    public readonly sslServerCipherSuites!: pulumi.Output<outputs.firewall.Vip6SslServerCipherSuite[] | undefined>;
    /**
     * Highest SSL/TLS version acceptable from a server. Use the client setting by default.
     */
    public readonly sslServerMaxVersion!: pulumi.Output<string>;
    /**
     * Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
     */
    public readonly sslServerMinVersion!: pulumi.Output<string>;
    /**
     * Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
     */
    public readonly sslServerRenegotiation!: pulumi.Output<string>;
    /**
     * Maximum number of FortiGate to Server SSL session states to keep.
     */
    public readonly sslServerSessionStateMax!: pulumi.Output<number>;
    /**
     * Number of minutes to keep FortiGate to Server SSL session state.
     */
    public readonly sslServerSessionStateTimeout!: pulumi.Output<number>;
    /**
     * How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
     */
    public readonly sslServerSessionStateType!: pulumi.Output<string>;
    /**
     * Configure a static NAT or server load balance VIP.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
     */
    public readonly weblogicServer!: pulumi.Output<string>;
    /**
     * Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
     */
    public readonly websphereServer!: pulumi.Output<string>;

    /**
     * Create a Vip6 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Vip6Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Vip6Args | Vip6State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Vip6State | undefined;
            resourceInputs["addNat64Route"] = state ? state.addNat64Route : undefined;
            resourceInputs["arpReply"] = state ? state.arpReply : undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["embeddedIpv4Address"] = state ? state.embeddedIpv4Address : undefined;
            resourceInputs["extip"] = state ? state.extip : undefined;
            resourceInputs["extport"] = state ? state.extport : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["h2Support"] = state ? state.h2Support : undefined;
            resourceInputs["h3Support"] = state ? state.h3Support : undefined;
            resourceInputs["httpCookieAge"] = state ? state.httpCookieAge : undefined;
            resourceInputs["httpCookieDomain"] = state ? state.httpCookieDomain : undefined;
            resourceInputs["httpCookieDomainFromHost"] = state ? state.httpCookieDomainFromHost : undefined;
            resourceInputs["httpCookieGeneration"] = state ? state.httpCookieGeneration : undefined;
            resourceInputs["httpCookiePath"] = state ? state.httpCookiePath : undefined;
            resourceInputs["httpCookieShare"] = state ? state.httpCookieShare : undefined;
            resourceInputs["httpIpHeader"] = state ? state.httpIpHeader : undefined;
            resourceInputs["httpIpHeaderName"] = state ? state.httpIpHeaderName : undefined;
            resourceInputs["httpMultiplex"] = state ? state.httpMultiplex : undefined;
            resourceInputs["httpRedirect"] = state ? state.httpRedirect : undefined;
            resourceInputs["httpsCookieSecure"] = state ? state.httpsCookieSecure : undefined;
            resourceInputs["ipv4Mappedip"] = state ? state.ipv4Mappedip : undefined;
            resourceInputs["ipv4Mappedport"] = state ? state.ipv4Mappedport : undefined;
            resourceInputs["ldbMethod"] = state ? state.ldbMethod : undefined;
            resourceInputs["mappedip"] = state ? state.mappedip : undefined;
            resourceInputs["mappedport"] = state ? state.mappedport : undefined;
            resourceInputs["maxEmbryonicConnections"] = state ? state.maxEmbryonicConnections : undefined;
            resourceInputs["monitors"] = state ? state.monitors : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nat64"] = state ? state.nat64 : undefined;
            resourceInputs["nat66"] = state ? state.nat66 : undefined;
            resourceInputs["natSourceVip"] = state ? state.natSourceVip : undefined;
            resourceInputs["ndpReply"] = state ? state.ndpReply : undefined;
            resourceInputs["outlookWebAccess"] = state ? state.outlookWebAccess : undefined;
            resourceInputs["persistence"] = state ? state.persistence : undefined;
            resourceInputs["portforward"] = state ? state.portforward : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["quic"] = state ? state.quic : undefined;
            resourceInputs["realservers"] = state ? state.realservers : undefined;
            resourceInputs["serverType"] = state ? state.serverType : undefined;
            resourceInputs["srcFilters"] = state ? state.srcFilters : undefined;
            resourceInputs["sslAcceptFfdheGroups"] = state ? state.sslAcceptFfdheGroups : undefined;
            resourceInputs["sslAlgorithm"] = state ? state.sslAlgorithm : undefined;
            resourceInputs["sslCertificate"] = state ? state.sslCertificate : undefined;
            resourceInputs["sslCipherSuites"] = state ? state.sslCipherSuites : undefined;
            resourceInputs["sslClientFallback"] = state ? state.sslClientFallback : undefined;
            resourceInputs["sslClientRekeyCount"] = state ? state.sslClientRekeyCount : undefined;
            resourceInputs["sslClientRenegotiation"] = state ? state.sslClientRenegotiation : undefined;
            resourceInputs["sslClientSessionStateMax"] = state ? state.sslClientSessionStateMax : undefined;
            resourceInputs["sslClientSessionStateTimeout"] = state ? state.sslClientSessionStateTimeout : undefined;
            resourceInputs["sslClientSessionStateType"] = state ? state.sslClientSessionStateType : undefined;
            resourceInputs["sslDhBits"] = state ? state.sslDhBits : undefined;
            resourceInputs["sslHpkp"] = state ? state.sslHpkp : undefined;
            resourceInputs["sslHpkpAge"] = state ? state.sslHpkpAge : undefined;
            resourceInputs["sslHpkpBackup"] = state ? state.sslHpkpBackup : undefined;
            resourceInputs["sslHpkpIncludeSubdomains"] = state ? state.sslHpkpIncludeSubdomains : undefined;
            resourceInputs["sslHpkpPrimary"] = state ? state.sslHpkpPrimary : undefined;
            resourceInputs["sslHpkpReportUri"] = state ? state.sslHpkpReportUri : undefined;
            resourceInputs["sslHsts"] = state ? state.sslHsts : undefined;
            resourceInputs["sslHstsAge"] = state ? state.sslHstsAge : undefined;
            resourceInputs["sslHstsIncludeSubdomains"] = state ? state.sslHstsIncludeSubdomains : undefined;
            resourceInputs["sslHttpLocationConversion"] = state ? state.sslHttpLocationConversion : undefined;
            resourceInputs["sslHttpMatchHost"] = state ? state.sslHttpMatchHost : undefined;
            resourceInputs["sslMaxVersion"] = state ? state.sslMaxVersion : undefined;
            resourceInputs["sslMinVersion"] = state ? state.sslMinVersion : undefined;
            resourceInputs["sslMode"] = state ? state.sslMode : undefined;
            resourceInputs["sslPfs"] = state ? state.sslPfs : undefined;
            resourceInputs["sslSendEmptyFrags"] = state ? state.sslSendEmptyFrags : undefined;
            resourceInputs["sslServerAlgorithm"] = state ? state.sslServerAlgorithm : undefined;
            resourceInputs["sslServerCipherSuites"] = state ? state.sslServerCipherSuites : undefined;
            resourceInputs["sslServerMaxVersion"] = state ? state.sslServerMaxVersion : undefined;
            resourceInputs["sslServerMinVersion"] = state ? state.sslServerMinVersion : undefined;
            resourceInputs["sslServerRenegotiation"] = state ? state.sslServerRenegotiation : undefined;
            resourceInputs["sslServerSessionStateMax"] = state ? state.sslServerSessionStateMax : undefined;
            resourceInputs["sslServerSessionStateTimeout"] = state ? state.sslServerSessionStateTimeout : undefined;
            resourceInputs["sslServerSessionStateType"] = state ? state.sslServerSessionStateType : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["weblogicServer"] = state ? state.weblogicServer : undefined;
            resourceInputs["websphereServer"] = state ? state.websphereServer : undefined;
        } else {
            const args = argsOrState as Vip6Args | undefined;
            if ((!args || args.extip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extip'");
            }
            if ((!args || args.mappedip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mappedip'");
            }
            resourceInputs["addNat64Route"] = args ? args.addNat64Route : undefined;
            resourceInputs["arpReply"] = args ? args.arpReply : undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["embeddedIpv4Address"] = args ? args.embeddedIpv4Address : undefined;
            resourceInputs["extip"] = args ? args.extip : undefined;
            resourceInputs["extport"] = args ? args.extport : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["h2Support"] = args ? args.h2Support : undefined;
            resourceInputs["h3Support"] = args ? args.h3Support : undefined;
            resourceInputs["httpCookieAge"] = args ? args.httpCookieAge : undefined;
            resourceInputs["httpCookieDomain"] = args ? args.httpCookieDomain : undefined;
            resourceInputs["httpCookieDomainFromHost"] = args ? args.httpCookieDomainFromHost : undefined;
            resourceInputs["httpCookieGeneration"] = args ? args.httpCookieGeneration : undefined;
            resourceInputs["httpCookiePath"] = args ? args.httpCookiePath : undefined;
            resourceInputs["httpCookieShare"] = args ? args.httpCookieShare : undefined;
            resourceInputs["httpIpHeader"] = args ? args.httpIpHeader : undefined;
            resourceInputs["httpIpHeaderName"] = args ? args.httpIpHeaderName : undefined;
            resourceInputs["httpMultiplex"] = args ? args.httpMultiplex : undefined;
            resourceInputs["httpRedirect"] = args ? args.httpRedirect : undefined;
            resourceInputs["httpsCookieSecure"] = args ? args.httpsCookieSecure : undefined;
            resourceInputs["ipv4Mappedip"] = args ? args.ipv4Mappedip : undefined;
            resourceInputs["ipv4Mappedport"] = args ? args.ipv4Mappedport : undefined;
            resourceInputs["ldbMethod"] = args ? args.ldbMethod : undefined;
            resourceInputs["mappedip"] = args ? args.mappedip : undefined;
            resourceInputs["mappedport"] = args ? args.mappedport : undefined;
            resourceInputs["maxEmbryonicConnections"] = args ? args.maxEmbryonicConnections : undefined;
            resourceInputs["monitors"] = args ? args.monitors : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nat64"] = args ? args.nat64 : undefined;
            resourceInputs["nat66"] = args ? args.nat66 : undefined;
            resourceInputs["natSourceVip"] = args ? args.natSourceVip : undefined;
            resourceInputs["ndpReply"] = args ? args.ndpReply : undefined;
            resourceInputs["outlookWebAccess"] = args ? args.outlookWebAccess : undefined;
            resourceInputs["persistence"] = args ? args.persistence : undefined;
            resourceInputs["portforward"] = args ? args.portforward : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["quic"] = args ? args.quic : undefined;
            resourceInputs["realservers"] = args ? args.realservers : undefined;
            resourceInputs["serverType"] = args ? args.serverType : undefined;
            resourceInputs["srcFilters"] = args ? args.srcFilters : undefined;
            resourceInputs["sslAcceptFfdheGroups"] = args ? args.sslAcceptFfdheGroups : undefined;
            resourceInputs["sslAlgorithm"] = args ? args.sslAlgorithm : undefined;
            resourceInputs["sslCertificate"] = args ? args.sslCertificate : undefined;
            resourceInputs["sslCipherSuites"] = args ? args.sslCipherSuites : undefined;
            resourceInputs["sslClientFallback"] = args ? args.sslClientFallback : undefined;
            resourceInputs["sslClientRekeyCount"] = args ? args.sslClientRekeyCount : undefined;
            resourceInputs["sslClientRenegotiation"] = args ? args.sslClientRenegotiation : undefined;
            resourceInputs["sslClientSessionStateMax"] = args ? args.sslClientSessionStateMax : undefined;
            resourceInputs["sslClientSessionStateTimeout"] = args ? args.sslClientSessionStateTimeout : undefined;
            resourceInputs["sslClientSessionStateType"] = args ? args.sslClientSessionStateType : undefined;
            resourceInputs["sslDhBits"] = args ? args.sslDhBits : undefined;
            resourceInputs["sslHpkp"] = args ? args.sslHpkp : undefined;
            resourceInputs["sslHpkpAge"] = args ? args.sslHpkpAge : undefined;
            resourceInputs["sslHpkpBackup"] = args ? args.sslHpkpBackup : undefined;
            resourceInputs["sslHpkpIncludeSubdomains"] = args ? args.sslHpkpIncludeSubdomains : undefined;
            resourceInputs["sslHpkpPrimary"] = args ? args.sslHpkpPrimary : undefined;
            resourceInputs["sslHpkpReportUri"] = args ? args.sslHpkpReportUri : undefined;
            resourceInputs["sslHsts"] = args ? args.sslHsts : undefined;
            resourceInputs["sslHstsAge"] = args ? args.sslHstsAge : undefined;
            resourceInputs["sslHstsIncludeSubdomains"] = args ? args.sslHstsIncludeSubdomains : undefined;
            resourceInputs["sslHttpLocationConversion"] = args ? args.sslHttpLocationConversion : undefined;
            resourceInputs["sslHttpMatchHost"] = args ? args.sslHttpMatchHost : undefined;
            resourceInputs["sslMaxVersion"] = args ? args.sslMaxVersion : undefined;
            resourceInputs["sslMinVersion"] = args ? args.sslMinVersion : undefined;
            resourceInputs["sslMode"] = args ? args.sslMode : undefined;
            resourceInputs["sslPfs"] = args ? args.sslPfs : undefined;
            resourceInputs["sslSendEmptyFrags"] = args ? args.sslSendEmptyFrags : undefined;
            resourceInputs["sslServerAlgorithm"] = args ? args.sslServerAlgorithm : undefined;
            resourceInputs["sslServerCipherSuites"] = args ? args.sslServerCipherSuites : undefined;
            resourceInputs["sslServerMaxVersion"] = args ? args.sslServerMaxVersion : undefined;
            resourceInputs["sslServerMinVersion"] = args ? args.sslServerMinVersion : undefined;
            resourceInputs["sslServerRenegotiation"] = args ? args.sslServerRenegotiation : undefined;
            resourceInputs["sslServerSessionStateMax"] = args ? args.sslServerSessionStateMax : undefined;
            resourceInputs["sslServerSessionStateTimeout"] = args ? args.sslServerSessionStateTimeout : undefined;
            resourceInputs["sslServerSessionStateType"] = args ? args.sslServerSessionStateType : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["weblogicServer"] = args ? args.weblogicServer : undefined;
            resourceInputs["websphereServer"] = args ? args.websphereServer : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vip6.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vip6 resources.
 */
export interface Vip6State {
    /**
     * Enable/disable adding NAT64 route. Valid values: `disable`, `enable`.
     */
    addNat64Route?: pulumi.Input<string>;
    /**
     * Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
     */
    arpReply?: pulumi.Input<string>;
    /**
     * Color of icon on the GUI.
     */
    color?: pulumi.Input<number>;
    /**
     * Comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Enable/disable embedded IPv4 address. Valid values: `disable`, `enable`.
     */
    embeddedIpv4Address?: pulumi.Input<string>;
    /**
     * IP address or address range on the external interface that you want to map to an address or address range on the destination network.
     */
    extip?: pulumi.Input<string>;
    /**
     * Incoming port number range that you want to map to a port number range on the destination network.
     */
    extport?: pulumi.Input<string>;
    /**
     * Custom defined ID.
     */
    fosid?: pulumi.Input<number>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
     */
    h2Support?: pulumi.Input<string>;
    /**
     * Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
     */
    h3Support?: pulumi.Input<string>;
    /**
     * Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
     */
    httpCookieAge?: pulumi.Input<number>;
    /**
     * Domain that HTTP cookie persistence should apply to.
     */
    httpCookieDomain?: pulumi.Input<string>;
    /**
     * Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
     */
    httpCookieDomainFromHost?: pulumi.Input<string>;
    /**
     * Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
     */
    httpCookieGeneration?: pulumi.Input<number>;
    /**
     * Limit HTTP cookie persistence to the specified path.
     */
    httpCookiePath?: pulumi.Input<string>;
    /**
     * Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
     */
    httpCookieShare?: pulumi.Input<string>;
    /**
     * For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
     */
    httpIpHeader?: pulumi.Input<string>;
    /**
     * For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
     */
    httpIpHeaderName?: pulumi.Input<string>;
    /**
     * Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
     */
    httpMultiplex?: pulumi.Input<string>;
    /**
     * Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
     */
    httpRedirect?: pulumi.Input<string>;
    /**
     * Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
     */
    httpsCookieSecure?: pulumi.Input<string>;
    /**
     * Start-mapped-IPv4-address [-end mapped-IPv4-address].
     */
    ipv4Mappedip?: pulumi.Input<string>;
    /**
     * IPv4 port number range on the destination network to which the external port number range is mapped.
     */
    ipv4Mappedport?: pulumi.Input<string>;
    /**
     * Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
     */
    ldbMethod?: pulumi.Input<string>;
    /**
     * Mapped IP address range in the format startIP-endIP.
     */
    mappedip?: pulumi.Input<string>;
    /**
     * Port number range on the destination network to which the external port number range is mapped.
     */
    mappedport?: pulumi.Input<string>;
    /**
     * Maximum number of incomplete connections.
     */
    maxEmbryonicConnections?: pulumi.Input<number>;
    /**
     * Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
     */
    monitors?: pulumi.Input<pulumi.Input<inputs.firewall.Vip6Monitor>[]>;
    /**
     * Virtual ip6 name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable DNAT64. Valid values: `disable`, `enable`.
     */
    nat64?: pulumi.Input<string>;
    /**
     * Enable/disable DNAT66. Valid values: `disable`, `enable`.
     */
    nat66?: pulumi.Input<string>;
    /**
     * Enable to perform SNAT on traffic from mappedip to the extip for all egress interfaces. Valid values: `disable`, `enable`.
     */
    natSourceVip?: pulumi.Input<string>;
    /**
     * Enable/disable this FortiGate unit's ability to respond to NDP requests for this virtual IP address (default = enable). Valid values: `disable`, `enable`.
     */
    ndpReply?: pulumi.Input<string>;
    /**
     * Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
     */
    outlookWebAccess?: pulumi.Input<string>;
    /**
     * Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
     */
    persistence?: pulumi.Input<string>;
    /**
     * Enable port forwarding. Valid values: `disable`, `enable`.
     */
    portforward?: pulumi.Input<string>;
    /**
     * Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * QUIC setting. The structure of `quic` block is documented below.
     */
    quic?: pulumi.Input<inputs.firewall.Vip6Quic>;
    /**
     * Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
     */
    realservers?: pulumi.Input<pulumi.Input<inputs.firewall.Vip6Realserver>[]>;
    /**
     * Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
     */
    serverType?: pulumi.Input<string>;
    /**
     * Source IP6 filter (x:x:x:x:x:x:x:x/x). Separate addresses with spaces. The structure of `srcFilter` block is documented below.
     */
    srcFilters?: pulumi.Input<pulumi.Input<inputs.firewall.Vip6SrcFilter>[]>;
    /**
     * Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
     */
    sslAcceptFfdheGroups?: pulumi.Input<string>;
    /**
     * Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
     */
    sslAlgorithm?: pulumi.Input<string>;
    /**
     * The name of the SSL certificate to use for SSL acceleration.
     */
    sslCertificate?: pulumi.Input<string>;
    /**
     * SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `sslCipherSuites` block is documented below.
     */
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.firewall.Vip6SslCipherSuite>[]>;
    /**
     * Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
     */
    sslClientFallback?: pulumi.Input<string>;
    /**
     * Maximum length of data in MB before triggering a client rekey (0 = disable).
     */
    sslClientRekeyCount?: pulumi.Input<number>;
    /**
     * Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
     */
    sslClientRenegotiation?: pulumi.Input<string>;
    /**
     * Maximum number of client to FortiGate SSL session states to keep.
     */
    sslClientSessionStateMax?: pulumi.Input<number>;
    /**
     * Number of minutes to keep client to FortiGate SSL session state.
     */
    sslClientSessionStateTimeout?: pulumi.Input<number>;
    /**
     * How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
     */
    sslClientSessionStateType?: pulumi.Input<string>;
    /**
     * Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
     */
    sslDhBits?: pulumi.Input<string>;
    /**
     * Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
     */
    sslHpkp?: pulumi.Input<string>;
    /**
     * Number of minutes the web browser should keep HPKP.
     */
    sslHpkpAge?: pulumi.Input<number>;
    /**
     * Certificate to generate backup HPKP pin from.
     */
    sslHpkpBackup?: pulumi.Input<string>;
    /**
     * Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
     */
    sslHpkpIncludeSubdomains?: pulumi.Input<string>;
    /**
     * Certificate to generate primary HPKP pin from.
     */
    sslHpkpPrimary?: pulumi.Input<string>;
    /**
     * URL to report HPKP violations to.
     */
    sslHpkpReportUri?: pulumi.Input<string>;
    /**
     * Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
     */
    sslHsts?: pulumi.Input<string>;
    /**
     * Number of seconds the client should honour the HSTS setting.
     */
    sslHstsAge?: pulumi.Input<number>;
    /**
     * Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
     */
    sslHstsIncludeSubdomains?: pulumi.Input<string>;
    /**
     * Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
     */
    sslHttpLocationConversion?: pulumi.Input<string>;
    /**
     * Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
     */
    sslHttpMatchHost?: pulumi.Input<string>;
    /**
     * Highest SSL/TLS version acceptable from a client.
     */
    sslMaxVersion?: pulumi.Input<string>;
    /**
     * Lowest SSL/TLS version acceptable from a client.
     */
    sslMinVersion?: pulumi.Input<string>;
    /**
     * Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
     */
    sslMode?: pulumi.Input<string>;
    /**
     * Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
     */
    sslPfs?: pulumi.Input<string>;
    /**
     * Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
     */
    sslSendEmptyFrags?: pulumi.Input<string>;
    /**
     * Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
     */
    sslServerAlgorithm?: pulumi.Input<string>;
    /**
     * SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslServerCipherSuites` block is documented below.
     */
    sslServerCipherSuites?: pulumi.Input<pulumi.Input<inputs.firewall.Vip6SslServerCipherSuite>[]>;
    /**
     * Highest SSL/TLS version acceptable from a server. Use the client setting by default.
     */
    sslServerMaxVersion?: pulumi.Input<string>;
    /**
     * Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
     */
    sslServerMinVersion?: pulumi.Input<string>;
    /**
     * Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
     */
    sslServerRenegotiation?: pulumi.Input<string>;
    /**
     * Maximum number of FortiGate to Server SSL session states to keep.
     */
    sslServerSessionStateMax?: pulumi.Input<number>;
    /**
     * Number of minutes to keep FortiGate to Server SSL session state.
     */
    sslServerSessionStateTimeout?: pulumi.Input<number>;
    /**
     * How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
     */
    sslServerSessionStateType?: pulumi.Input<string>;
    /**
     * Configure a static NAT or server load balance VIP.
     */
    type?: pulumi.Input<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
     */
    weblogicServer?: pulumi.Input<string>;
    /**
     * Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
     */
    websphereServer?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vip6 resource.
 */
export interface Vip6Args {
    /**
     * Enable/disable adding NAT64 route. Valid values: `disable`, `enable`.
     */
    addNat64Route?: pulumi.Input<string>;
    /**
     * Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
     */
    arpReply?: pulumi.Input<string>;
    /**
     * Color of icon on the GUI.
     */
    color?: pulumi.Input<number>;
    /**
     * Comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Enable/disable embedded IPv4 address. Valid values: `disable`, `enable`.
     */
    embeddedIpv4Address?: pulumi.Input<string>;
    /**
     * IP address or address range on the external interface that you want to map to an address or address range on the destination network.
     */
    extip: pulumi.Input<string>;
    /**
     * Incoming port number range that you want to map to a port number range on the destination network.
     */
    extport?: pulumi.Input<string>;
    /**
     * Custom defined ID.
     */
    fosid?: pulumi.Input<number>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
     */
    h2Support?: pulumi.Input<string>;
    /**
     * Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
     */
    h3Support?: pulumi.Input<string>;
    /**
     * Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
     */
    httpCookieAge?: pulumi.Input<number>;
    /**
     * Domain that HTTP cookie persistence should apply to.
     */
    httpCookieDomain?: pulumi.Input<string>;
    /**
     * Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
     */
    httpCookieDomainFromHost?: pulumi.Input<string>;
    /**
     * Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
     */
    httpCookieGeneration?: pulumi.Input<number>;
    /**
     * Limit HTTP cookie persistence to the specified path.
     */
    httpCookiePath?: pulumi.Input<string>;
    /**
     * Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
     */
    httpCookieShare?: pulumi.Input<string>;
    /**
     * For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
     */
    httpIpHeader?: pulumi.Input<string>;
    /**
     * For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
     */
    httpIpHeaderName?: pulumi.Input<string>;
    /**
     * Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
     */
    httpMultiplex?: pulumi.Input<string>;
    /**
     * Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
     */
    httpRedirect?: pulumi.Input<string>;
    /**
     * Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
     */
    httpsCookieSecure?: pulumi.Input<string>;
    /**
     * Start-mapped-IPv4-address [-end mapped-IPv4-address].
     */
    ipv4Mappedip?: pulumi.Input<string>;
    /**
     * IPv4 port number range on the destination network to which the external port number range is mapped.
     */
    ipv4Mappedport?: pulumi.Input<string>;
    /**
     * Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
     */
    ldbMethod?: pulumi.Input<string>;
    /**
     * Mapped IP address range in the format startIP-endIP.
     */
    mappedip: pulumi.Input<string>;
    /**
     * Port number range on the destination network to which the external port number range is mapped.
     */
    mappedport?: pulumi.Input<string>;
    /**
     * Maximum number of incomplete connections.
     */
    maxEmbryonicConnections?: pulumi.Input<number>;
    /**
     * Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
     */
    monitors?: pulumi.Input<pulumi.Input<inputs.firewall.Vip6Monitor>[]>;
    /**
     * Virtual ip6 name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable DNAT64. Valid values: `disable`, `enable`.
     */
    nat64?: pulumi.Input<string>;
    /**
     * Enable/disable DNAT66. Valid values: `disable`, `enable`.
     */
    nat66?: pulumi.Input<string>;
    /**
     * Enable to perform SNAT on traffic from mappedip to the extip for all egress interfaces. Valid values: `disable`, `enable`.
     */
    natSourceVip?: pulumi.Input<string>;
    /**
     * Enable/disable this FortiGate unit's ability to respond to NDP requests for this virtual IP address (default = enable). Valid values: `disable`, `enable`.
     */
    ndpReply?: pulumi.Input<string>;
    /**
     * Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
     */
    outlookWebAccess?: pulumi.Input<string>;
    /**
     * Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
     */
    persistence?: pulumi.Input<string>;
    /**
     * Enable port forwarding. Valid values: `disable`, `enable`.
     */
    portforward?: pulumi.Input<string>;
    /**
     * Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * QUIC setting. The structure of `quic` block is documented below.
     */
    quic?: pulumi.Input<inputs.firewall.Vip6Quic>;
    /**
     * Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
     */
    realservers?: pulumi.Input<pulumi.Input<inputs.firewall.Vip6Realserver>[]>;
    /**
     * Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
     */
    serverType?: pulumi.Input<string>;
    /**
     * Source IP6 filter (x:x:x:x:x:x:x:x/x). Separate addresses with spaces. The structure of `srcFilter` block is documented below.
     */
    srcFilters?: pulumi.Input<pulumi.Input<inputs.firewall.Vip6SrcFilter>[]>;
    /**
     * Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
     */
    sslAcceptFfdheGroups?: pulumi.Input<string>;
    /**
     * Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
     */
    sslAlgorithm?: pulumi.Input<string>;
    /**
     * The name of the SSL certificate to use for SSL acceleration.
     */
    sslCertificate?: pulumi.Input<string>;
    /**
     * SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `sslCipherSuites` block is documented below.
     */
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.firewall.Vip6SslCipherSuite>[]>;
    /**
     * Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
     */
    sslClientFallback?: pulumi.Input<string>;
    /**
     * Maximum length of data in MB before triggering a client rekey (0 = disable).
     */
    sslClientRekeyCount?: pulumi.Input<number>;
    /**
     * Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
     */
    sslClientRenegotiation?: pulumi.Input<string>;
    /**
     * Maximum number of client to FortiGate SSL session states to keep.
     */
    sslClientSessionStateMax?: pulumi.Input<number>;
    /**
     * Number of minutes to keep client to FortiGate SSL session state.
     */
    sslClientSessionStateTimeout?: pulumi.Input<number>;
    /**
     * How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
     */
    sslClientSessionStateType?: pulumi.Input<string>;
    /**
     * Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
     */
    sslDhBits?: pulumi.Input<string>;
    /**
     * Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
     */
    sslHpkp?: pulumi.Input<string>;
    /**
     * Number of minutes the web browser should keep HPKP.
     */
    sslHpkpAge?: pulumi.Input<number>;
    /**
     * Certificate to generate backup HPKP pin from.
     */
    sslHpkpBackup?: pulumi.Input<string>;
    /**
     * Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
     */
    sslHpkpIncludeSubdomains?: pulumi.Input<string>;
    /**
     * Certificate to generate primary HPKP pin from.
     */
    sslHpkpPrimary?: pulumi.Input<string>;
    /**
     * URL to report HPKP violations to.
     */
    sslHpkpReportUri?: pulumi.Input<string>;
    /**
     * Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
     */
    sslHsts?: pulumi.Input<string>;
    /**
     * Number of seconds the client should honour the HSTS setting.
     */
    sslHstsAge?: pulumi.Input<number>;
    /**
     * Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
     */
    sslHstsIncludeSubdomains?: pulumi.Input<string>;
    /**
     * Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
     */
    sslHttpLocationConversion?: pulumi.Input<string>;
    /**
     * Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
     */
    sslHttpMatchHost?: pulumi.Input<string>;
    /**
     * Highest SSL/TLS version acceptable from a client.
     */
    sslMaxVersion?: pulumi.Input<string>;
    /**
     * Lowest SSL/TLS version acceptable from a client.
     */
    sslMinVersion?: pulumi.Input<string>;
    /**
     * Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
     */
    sslMode?: pulumi.Input<string>;
    /**
     * Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
     */
    sslPfs?: pulumi.Input<string>;
    /**
     * Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
     */
    sslSendEmptyFrags?: pulumi.Input<string>;
    /**
     * Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
     */
    sslServerAlgorithm?: pulumi.Input<string>;
    /**
     * SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslServerCipherSuites` block is documented below.
     */
    sslServerCipherSuites?: pulumi.Input<pulumi.Input<inputs.firewall.Vip6SslServerCipherSuite>[]>;
    /**
     * Highest SSL/TLS version acceptable from a server. Use the client setting by default.
     */
    sslServerMaxVersion?: pulumi.Input<string>;
    /**
     * Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
     */
    sslServerMinVersion?: pulumi.Input<string>;
    /**
     * Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
     */
    sslServerRenegotiation?: pulumi.Input<string>;
    /**
     * Maximum number of FortiGate to Server SSL session states to keep.
     */
    sslServerSessionStateMax?: pulumi.Input<number>;
    /**
     * Number of minutes to keep FortiGate to Server SSL session state.
     */
    sslServerSessionStateTimeout?: pulumi.Input<number>;
    /**
     * How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
     */
    sslServerSessionStateType?: pulumi.Input<string>;
    /**
     * Configure a static NAT or server load balance VIP.
     */
    type?: pulumi.Input<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
     */
    weblogicServer?: pulumi.Input<string>;
    /**
     * Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
     */
    websphereServer?: pulumi.Input<string>;
}
