// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Configure IPv6 interface policies.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trname = new fortios.firewall.Interfacepolicy6("trname", {
 *     addressType: "ipv6",
 *     applicationListStatus: "disable",
 *     avProfileStatus: "disable",
 *     dlpSensorStatus: "disable",
 *     dsri: "disable",
 *     dstaddr6s: [{
 *         name: "all",
 *     }],
 *     "interface": "port4",
 *     ipsSensorStatus: "disable",
 *     logtraffic: "all",
 *     policyid: 1,
 *     scanBotnetConnections: "block",
 *     service6s: [{
 *         name: "ALL",
 *     }],
 *     spamfilterProfileStatus: "disable",
 *     srcaddr6s: [{
 *         name: "all",
 *     }],
 *     status: "enable",
 *     webfilterProfileStatus: "disable",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Firewall InterfacePolicy6 can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:firewall/interfacepolicy6:Interfacepolicy6 labelname {{policyid}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:firewall/interfacepolicy6:Interfacepolicy6 labelname {{policyid}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Interfacepolicy6 extends pulumi.CustomResource {
    /**
     * Get an existing Interfacepolicy6 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Interfacepolicy6State, opts?: pulumi.CustomResourceOptions): Interfacepolicy6 {
        return new Interfacepolicy6(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:firewall/interfacepolicy6:Interfacepolicy6';

    /**
     * Returns true if the given object is an instance of Interfacepolicy6.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Interfacepolicy6 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Interfacepolicy6.__pulumiType;
    }

    /**
     * Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
     */
    public readonly addressType!: pulumi.Output<string>;
    /**
     * Application list name.
     */
    public readonly applicationList!: pulumi.Output<string>;
    /**
     * Enable/disable application control. Valid values: `enable`, `disable`.
     */
    public readonly applicationListStatus!: pulumi.Output<string>;
    /**
     * Antivirus profile.
     */
    public readonly avProfile!: pulumi.Output<string>;
    /**
     * Enable/disable antivirus. Valid values: `enable`, `disable`.
     */
    public readonly avProfileStatus!: pulumi.Output<string>;
    /**
     * CASB profile.
     */
    public readonly casbProfile!: pulumi.Output<string>;
    /**
     * Enable/disable CASB. Valid values: `enable`, `disable`.
     */
    public readonly casbProfileStatus!: pulumi.Output<string>;
    /**
     * Comments.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * DLP profile name.
     */
    public readonly dlpProfile!: pulumi.Output<string>;
    /**
     * Enable/disable DLP. Valid values: `enable`, `disable`.
     */
    public readonly dlpProfileStatus!: pulumi.Output<string>;
    /**
     * DLP sensor name.
     */
    public readonly dlpSensor!: pulumi.Output<string>;
    /**
     * Enable/disable DLP. Valid values: `enable`, `disable`.
     */
    public readonly dlpSensorStatus!: pulumi.Output<string>;
    /**
     * Enable/disable DSRI. Valid values: `enable`, `disable`.
     */
    public readonly dsri!: pulumi.Output<string>;
    /**
     * IPv6 address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr6` block is documented below.
     */
    public readonly dstaddr6s!: pulumi.Output<outputs.firewall.Interfacepolicy6Dstaddr6[]>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Email filter profile.
     */
    public readonly emailfilterProfile!: pulumi.Output<string>;
    /**
     * Enable/disable email filter. Valid values: `enable`, `disable`.
     */
    public readonly emailfilterProfileStatus!: pulumi.Output<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Monitored interface name from available interfaces.
     */
    public readonly interface!: pulumi.Output<string>;
    /**
     * IPS sensor name.
     */
    public readonly ipsSensor!: pulumi.Output<string>;
    /**
     * Enable/disable IPS. Valid values: `enable`, `disable`.
     */
    public readonly ipsSensorStatus!: pulumi.Output<string>;
    /**
     * Label.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
     */
    public readonly logtraffic!: pulumi.Output<string>;
    /**
     * Policy ID.
     */
    public readonly policyid!: pulumi.Output<number>;
    /**
     * Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
     */
    public readonly scanBotnetConnections!: pulumi.Output<string>;
    /**
     * Service name. The structure of `service6` block is documented below.
     */
    public readonly service6s!: pulumi.Output<outputs.firewall.Interfacepolicy6Service6[] | undefined>;
    /**
     * Antispam profile.
     */
    public readonly spamfilterProfile!: pulumi.Output<string>;
    /**
     * Enable/disable antispam. Valid values: `enable`, `disable`.
     */
    public readonly spamfilterProfileStatus!: pulumi.Output<string>;
    /**
     * IPv6 address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr6` block is documented below.
     */
    public readonly srcaddr6s!: pulumi.Output<outputs.firewall.Interfacepolicy6Srcaddr6[]>;
    /**
     * Enable/disable this policy. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     *
     * The `srcaddr6` block supports:
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * Web filter profile.
     */
    public readonly webfilterProfile!: pulumi.Output<string>;
    /**
     * Enable/disable web filtering. Valid values: `enable`, `disable`.
     */
    public readonly webfilterProfileStatus!: pulumi.Output<string>;

    /**
     * Create a Interfacepolicy6 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Interfacepolicy6Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Interfacepolicy6Args | Interfacepolicy6State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Interfacepolicy6State | undefined;
            resourceInputs["addressType"] = state ? state.addressType : undefined;
            resourceInputs["applicationList"] = state ? state.applicationList : undefined;
            resourceInputs["applicationListStatus"] = state ? state.applicationListStatus : undefined;
            resourceInputs["avProfile"] = state ? state.avProfile : undefined;
            resourceInputs["avProfileStatus"] = state ? state.avProfileStatus : undefined;
            resourceInputs["casbProfile"] = state ? state.casbProfile : undefined;
            resourceInputs["casbProfileStatus"] = state ? state.casbProfileStatus : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["dlpProfile"] = state ? state.dlpProfile : undefined;
            resourceInputs["dlpProfileStatus"] = state ? state.dlpProfileStatus : undefined;
            resourceInputs["dlpSensor"] = state ? state.dlpSensor : undefined;
            resourceInputs["dlpSensorStatus"] = state ? state.dlpSensorStatus : undefined;
            resourceInputs["dsri"] = state ? state.dsri : undefined;
            resourceInputs["dstaddr6s"] = state ? state.dstaddr6s : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["emailfilterProfile"] = state ? state.emailfilterProfile : undefined;
            resourceInputs["emailfilterProfileStatus"] = state ? state.emailfilterProfileStatus : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["ipsSensor"] = state ? state.ipsSensor : undefined;
            resourceInputs["ipsSensorStatus"] = state ? state.ipsSensorStatus : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["logtraffic"] = state ? state.logtraffic : undefined;
            resourceInputs["policyid"] = state ? state.policyid : undefined;
            resourceInputs["scanBotnetConnections"] = state ? state.scanBotnetConnections : undefined;
            resourceInputs["service6s"] = state ? state.service6s : undefined;
            resourceInputs["spamfilterProfile"] = state ? state.spamfilterProfile : undefined;
            resourceInputs["spamfilterProfileStatus"] = state ? state.spamfilterProfileStatus : undefined;
            resourceInputs["srcaddr6s"] = state ? state.srcaddr6s : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["webfilterProfile"] = state ? state.webfilterProfile : undefined;
            resourceInputs["webfilterProfileStatus"] = state ? state.webfilterProfileStatus : undefined;
        } else {
            const args = argsOrState as Interfacepolicy6Args | undefined;
            if ((!args || args.dstaddr6s === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstaddr6s'");
            }
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            if ((!args || args.srcaddr6s === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcaddr6s'");
            }
            resourceInputs["addressType"] = args ? args.addressType : undefined;
            resourceInputs["applicationList"] = args ? args.applicationList : undefined;
            resourceInputs["applicationListStatus"] = args ? args.applicationListStatus : undefined;
            resourceInputs["avProfile"] = args ? args.avProfile : undefined;
            resourceInputs["avProfileStatus"] = args ? args.avProfileStatus : undefined;
            resourceInputs["casbProfile"] = args ? args.casbProfile : undefined;
            resourceInputs["casbProfileStatus"] = args ? args.casbProfileStatus : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["dlpProfile"] = args ? args.dlpProfile : undefined;
            resourceInputs["dlpProfileStatus"] = args ? args.dlpProfileStatus : undefined;
            resourceInputs["dlpSensor"] = args ? args.dlpSensor : undefined;
            resourceInputs["dlpSensorStatus"] = args ? args.dlpSensorStatus : undefined;
            resourceInputs["dsri"] = args ? args.dsri : undefined;
            resourceInputs["dstaddr6s"] = args ? args.dstaddr6s : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["emailfilterProfile"] = args ? args.emailfilterProfile : undefined;
            resourceInputs["emailfilterProfileStatus"] = args ? args.emailfilterProfileStatus : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["ipsSensor"] = args ? args.ipsSensor : undefined;
            resourceInputs["ipsSensorStatus"] = args ? args.ipsSensorStatus : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["logtraffic"] = args ? args.logtraffic : undefined;
            resourceInputs["policyid"] = args ? args.policyid : undefined;
            resourceInputs["scanBotnetConnections"] = args ? args.scanBotnetConnections : undefined;
            resourceInputs["service6s"] = args ? args.service6s : undefined;
            resourceInputs["spamfilterProfile"] = args ? args.spamfilterProfile : undefined;
            resourceInputs["spamfilterProfileStatus"] = args ? args.spamfilterProfileStatus : undefined;
            resourceInputs["srcaddr6s"] = args ? args.srcaddr6s : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["webfilterProfile"] = args ? args.webfilterProfile : undefined;
            resourceInputs["webfilterProfileStatus"] = args ? args.webfilterProfileStatus : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Interfacepolicy6.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Interfacepolicy6 resources.
 */
export interface Interfacepolicy6State {
    /**
     * Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
     */
    addressType?: pulumi.Input<string>;
    /**
     * Application list name.
     */
    applicationList?: pulumi.Input<string>;
    /**
     * Enable/disable application control. Valid values: `enable`, `disable`.
     */
    applicationListStatus?: pulumi.Input<string>;
    /**
     * Antivirus profile.
     */
    avProfile?: pulumi.Input<string>;
    /**
     * Enable/disable antivirus. Valid values: `enable`, `disable`.
     */
    avProfileStatus?: pulumi.Input<string>;
    /**
     * CASB profile.
     */
    casbProfile?: pulumi.Input<string>;
    /**
     * Enable/disable CASB. Valid values: `enable`, `disable`.
     */
    casbProfileStatus?: pulumi.Input<string>;
    /**
     * Comments.
     */
    comments?: pulumi.Input<string>;
    /**
     * DLP profile name.
     */
    dlpProfile?: pulumi.Input<string>;
    /**
     * Enable/disable DLP. Valid values: `enable`, `disable`.
     */
    dlpProfileStatus?: pulumi.Input<string>;
    /**
     * DLP sensor name.
     */
    dlpSensor?: pulumi.Input<string>;
    /**
     * Enable/disable DLP. Valid values: `enable`, `disable`.
     */
    dlpSensorStatus?: pulumi.Input<string>;
    /**
     * Enable/disable DSRI. Valid values: `enable`, `disable`.
     */
    dsri?: pulumi.Input<string>;
    /**
     * IPv6 address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr6` block is documented below.
     */
    dstaddr6s?: pulumi.Input<pulumi.Input<inputs.firewall.Interfacepolicy6Dstaddr6>[]>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Email filter profile.
     */
    emailfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable email filter. Valid values: `enable`, `disable`.
     */
    emailfilterProfileStatus?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Monitored interface name from available interfaces.
     */
    interface?: pulumi.Input<string>;
    /**
     * IPS sensor name.
     */
    ipsSensor?: pulumi.Input<string>;
    /**
     * Enable/disable IPS. Valid values: `enable`, `disable`.
     */
    ipsSensorStatus?: pulumi.Input<string>;
    /**
     * Label.
     */
    label?: pulumi.Input<string>;
    /**
     * Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
     */
    logtraffic?: pulumi.Input<string>;
    /**
     * Policy ID.
     */
    policyid?: pulumi.Input<number>;
    /**
     * Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
     */
    scanBotnetConnections?: pulumi.Input<string>;
    /**
     * Service name. The structure of `service6` block is documented below.
     */
    service6s?: pulumi.Input<pulumi.Input<inputs.firewall.Interfacepolicy6Service6>[]>;
    /**
     * Antispam profile.
     */
    spamfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable antispam. Valid values: `enable`, `disable`.
     */
    spamfilterProfileStatus?: pulumi.Input<string>;
    /**
     * IPv6 address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr6` block is documented below.
     */
    srcaddr6s?: pulumi.Input<pulumi.Input<inputs.firewall.Interfacepolicy6Srcaddr6>[]>;
    /**
     * Enable/disable this policy. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     *
     * The `srcaddr6` block supports:
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Web filter profile.
     */
    webfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable web filtering. Valid values: `enable`, `disable`.
     */
    webfilterProfileStatus?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Interfacepolicy6 resource.
 */
export interface Interfacepolicy6Args {
    /**
     * Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
     */
    addressType?: pulumi.Input<string>;
    /**
     * Application list name.
     */
    applicationList?: pulumi.Input<string>;
    /**
     * Enable/disable application control. Valid values: `enable`, `disable`.
     */
    applicationListStatus?: pulumi.Input<string>;
    /**
     * Antivirus profile.
     */
    avProfile?: pulumi.Input<string>;
    /**
     * Enable/disable antivirus. Valid values: `enable`, `disable`.
     */
    avProfileStatus?: pulumi.Input<string>;
    /**
     * CASB profile.
     */
    casbProfile?: pulumi.Input<string>;
    /**
     * Enable/disable CASB. Valid values: `enable`, `disable`.
     */
    casbProfileStatus?: pulumi.Input<string>;
    /**
     * Comments.
     */
    comments?: pulumi.Input<string>;
    /**
     * DLP profile name.
     */
    dlpProfile?: pulumi.Input<string>;
    /**
     * Enable/disable DLP. Valid values: `enable`, `disable`.
     */
    dlpProfileStatus?: pulumi.Input<string>;
    /**
     * DLP sensor name.
     */
    dlpSensor?: pulumi.Input<string>;
    /**
     * Enable/disable DLP. Valid values: `enable`, `disable`.
     */
    dlpSensorStatus?: pulumi.Input<string>;
    /**
     * Enable/disable DSRI. Valid values: `enable`, `disable`.
     */
    dsri?: pulumi.Input<string>;
    /**
     * IPv6 address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr6` block is documented below.
     */
    dstaddr6s: pulumi.Input<pulumi.Input<inputs.firewall.Interfacepolicy6Dstaddr6>[]>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Email filter profile.
     */
    emailfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable email filter. Valid values: `enable`, `disable`.
     */
    emailfilterProfileStatus?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Monitored interface name from available interfaces.
     */
    interface: pulumi.Input<string>;
    /**
     * IPS sensor name.
     */
    ipsSensor?: pulumi.Input<string>;
    /**
     * Enable/disable IPS. Valid values: `enable`, `disable`.
     */
    ipsSensorStatus?: pulumi.Input<string>;
    /**
     * Label.
     */
    label?: pulumi.Input<string>;
    /**
     * Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
     */
    logtraffic?: pulumi.Input<string>;
    /**
     * Policy ID.
     */
    policyid?: pulumi.Input<number>;
    /**
     * Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
     */
    scanBotnetConnections?: pulumi.Input<string>;
    /**
     * Service name. The structure of `service6` block is documented below.
     */
    service6s?: pulumi.Input<pulumi.Input<inputs.firewall.Interfacepolicy6Service6>[]>;
    /**
     * Antispam profile.
     */
    spamfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable antispam. Valid values: `enable`, `disable`.
     */
    spamfilterProfileStatus?: pulumi.Input<string>;
    /**
     * IPv6 address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr6` block is documented below.
     */
    srcaddr6s: pulumi.Input<pulumi.Input<inputs.firewall.Interfacepolicy6Srcaddr6>[]>;
    /**
     * Enable/disable this policy. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     *
     * The `srcaddr6` block supports:
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Web filter profile.
     */
    webfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable web filtering. Valid values: `enable`, `disable`.
     */
    webfilterProfileStatus?: pulumi.Input<string>;
}
