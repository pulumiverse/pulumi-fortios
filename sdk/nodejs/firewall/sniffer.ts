// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Configure sniffer.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trname = new fortios.firewall.Sniffer("trname", {
 *     applicationListStatus: "disable",
 *     avProfileStatus: "disable",
 *     dlpSensorStatus: "disable",
 *     dsri: "disable",
 *     fosid: 1,
 *     "interface": "port4",
 *     ipsDosStatus: "disable",
 *     ipsSensorStatus: "disable",
 *     ipv6: "disable",
 *     logtraffic: "utm",
 *     maxPacketCount: 4000,
 *     nonIp: "enable",
 *     scanBotnetConnections: "disable",
 *     spamfilterProfileStatus: "disable",
 *     status: "enable",
 *     webfilterProfileStatus: "disable",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Firewall Sniffer can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:firewall/sniffer:Sniffer labelname {{fosid}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:firewall/sniffer:Sniffer labelname {{fosid}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Sniffer extends pulumi.CustomResource {
    /**
     * Get an existing Sniffer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnifferState, opts?: pulumi.CustomResourceOptions): Sniffer {
        return new Sniffer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:firewall/sniffer:Sniffer';

    /**
     * Returns true if the given object is an instance of Sniffer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sniffer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sniffer.__pulumiType;
    }

    /**
     * Configuration method to edit Denial of Service (DoS) anomaly settings. The structure of `anomaly` block is documented below.
     */
    public readonly anomalies!: pulumi.Output<outputs.firewall.SnifferAnomaly[] | undefined>;
    /**
     * Name of an existing application list.
     */
    public readonly applicationList!: pulumi.Output<string>;
    /**
     * Enable/disable application control profile. Valid values: `enable`, `disable`.
     */
    public readonly applicationListStatus!: pulumi.Output<string>;
    /**
     * Name of an existing antivirus profile.
     */
    public readonly avProfile!: pulumi.Output<string>;
    /**
     * Enable/disable antivirus profile. Valid values: `enable`, `disable`.
     */
    public readonly avProfileStatus!: pulumi.Output<string>;
    /**
     * Name of an existing CASB profile.
     */
    public readonly casbProfile!: pulumi.Output<string>;
    /**
     * Enable/disable CASB profile. Valid values: `enable`, `disable`.
     */
    public readonly casbProfileStatus!: pulumi.Output<string>;
    /**
     * Name of an existing DLP profile.
     */
    public readonly dlpProfile!: pulumi.Output<string>;
    /**
     * Enable/disable DLP profile. Valid values: `enable`, `disable`.
     */
    public readonly dlpProfileStatus!: pulumi.Output<string>;
    /**
     * Name of an existing DLP sensor.
     */
    public readonly dlpSensor!: pulumi.Output<string>;
    /**
     * Enable/disable DLP sensor. Valid values: `enable`, `disable`.
     */
    public readonly dlpSensorStatus!: pulumi.Output<string>;
    /**
     * Enable/disable DSRI. Valid values: `enable`, `disable`.
     */
    public readonly dsri!: pulumi.Output<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing email filter profile.
     */
    public readonly emailfilterProfile!: pulumi.Output<string>;
    /**
     * Enable/disable emailfilter. Valid values: `enable`, `disable`.
     */
    public readonly emailfilterProfileStatus!: pulumi.Output<string>;
    /**
     * Name of an existing file-filter profile.
     */
    public readonly fileFilterProfile!: pulumi.Output<string>;
    /**
     * Enable/disable file filter. Valid values: `enable`, `disable`.
     */
    public readonly fileFilterProfileStatus!: pulumi.Output<string>;
    /**
     * Sniffer ID.
     */
    public readonly fosid!: pulumi.Output<number>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Hosts to filter for in sniffer traffic (Format examples: 1.1.1.1, 2.2.2.0/24, 3.3.3.3/255.255.255.0, 4.4.4.0-4.4.4.240).
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * Interface name that traffic sniffing will take place on.
     */
    public readonly interface!: pulumi.Output<string>;
    /**
     * Enable/disable IP threat feed. Valid values: `enable`, `disable`.
     */
    public readonly ipThreatfeedStatus!: pulumi.Output<string>;
    /**
     * Name of an existing IP threat feed. The structure of `ipThreatfeed` block is documented below.
     */
    public readonly ipThreatfeeds!: pulumi.Output<outputs.firewall.SnifferIpThreatfeed[] | undefined>;
    /**
     * Enable/disable IPS DoS anomaly detection. Valid values: `enable`, `disable`.
     */
    public readonly ipsDosStatus!: pulumi.Output<string>;
    /**
     * Name of an existing IPS sensor.
     */
    public readonly ipsSensor!: pulumi.Output<string>;
    /**
     * Enable/disable IPS sensor. Valid values: `enable`, `disable`.
     */
    public readonly ipsSensorStatus!: pulumi.Output<string>;
    /**
     * Enable/disable sniffing IPv6 packets. Valid values: `enable`, `disable`.
     */
    public readonly ipv6!: pulumi.Output<string>;
    /**
     * Either log all sessions, only sessions that have a security profile applied, or disable all logging for this policy. Valid values: `all`, `utm`, `disable`.
     */
    public readonly logtraffic!: pulumi.Output<string>;
    /**
     * Maximum packet count. On FortiOS versions 6.2.0: 1 - 1000000, default = 10000. On FortiOS versions 6.2.4-6.4.2, 7.0.0: 1 - 10000, default = 4000. On FortiOS versions 6.4.10-6.4.14, 7.0.1-7.0.13: 1 - 1000000, default = 4000.
     */
    public readonly maxPacketCount!: pulumi.Output<number>;
    /**
     * Enable/disable sniffing non-IP packets. Valid values: `enable`, `disable`.
     */
    public readonly nonIp!: pulumi.Output<string>;
    /**
     * Ports to sniff (Format examples: 10, :20, 30:40, 50-, 100-200).
     */
    public readonly port!: pulumi.Output<string>;
    /**
     * Integer value for the protocol type as defined by IANA (0 - 255).
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
     */
    public readonly scanBotnetConnections!: pulumi.Output<string>;
    /**
     * Name of an existing spam filter profile.
     */
    public readonly spamfilterProfile!: pulumi.Output<string>;
    /**
     * Enable/disable spam filter. Valid values: `enable`, `disable`.
     */
    public readonly spamfilterProfileStatus!: pulumi.Output<string>;
    /**
     * Enable/disable the active status of the sniffer. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * List of VLANs to sniff.
     */
    public readonly vlan!: pulumi.Output<string>;
    /**
     * Name of an existing web filter profile.
     */
    public readonly webfilterProfile!: pulumi.Output<string>;
    /**
     * Enable/disable web filter profile. Valid values: `enable`, `disable`.
     */
    public readonly webfilterProfileStatus!: pulumi.Output<string>;

    /**
     * Create a Sniffer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnifferArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnifferArgs | SnifferState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnifferState | undefined;
            resourceInputs["anomalies"] = state ? state.anomalies : undefined;
            resourceInputs["applicationList"] = state ? state.applicationList : undefined;
            resourceInputs["applicationListStatus"] = state ? state.applicationListStatus : undefined;
            resourceInputs["avProfile"] = state ? state.avProfile : undefined;
            resourceInputs["avProfileStatus"] = state ? state.avProfileStatus : undefined;
            resourceInputs["casbProfile"] = state ? state.casbProfile : undefined;
            resourceInputs["casbProfileStatus"] = state ? state.casbProfileStatus : undefined;
            resourceInputs["dlpProfile"] = state ? state.dlpProfile : undefined;
            resourceInputs["dlpProfileStatus"] = state ? state.dlpProfileStatus : undefined;
            resourceInputs["dlpSensor"] = state ? state.dlpSensor : undefined;
            resourceInputs["dlpSensorStatus"] = state ? state.dlpSensorStatus : undefined;
            resourceInputs["dsri"] = state ? state.dsri : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["emailfilterProfile"] = state ? state.emailfilterProfile : undefined;
            resourceInputs["emailfilterProfileStatus"] = state ? state.emailfilterProfileStatus : undefined;
            resourceInputs["fileFilterProfile"] = state ? state.fileFilterProfile : undefined;
            resourceInputs["fileFilterProfileStatus"] = state ? state.fileFilterProfileStatus : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["ipThreatfeedStatus"] = state ? state.ipThreatfeedStatus : undefined;
            resourceInputs["ipThreatfeeds"] = state ? state.ipThreatfeeds : undefined;
            resourceInputs["ipsDosStatus"] = state ? state.ipsDosStatus : undefined;
            resourceInputs["ipsSensor"] = state ? state.ipsSensor : undefined;
            resourceInputs["ipsSensorStatus"] = state ? state.ipsSensorStatus : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["logtraffic"] = state ? state.logtraffic : undefined;
            resourceInputs["maxPacketCount"] = state ? state.maxPacketCount : undefined;
            resourceInputs["nonIp"] = state ? state.nonIp : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["scanBotnetConnections"] = state ? state.scanBotnetConnections : undefined;
            resourceInputs["spamfilterProfile"] = state ? state.spamfilterProfile : undefined;
            resourceInputs["spamfilterProfileStatus"] = state ? state.spamfilterProfileStatus : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
            resourceInputs["webfilterProfile"] = state ? state.webfilterProfile : undefined;
            resourceInputs["webfilterProfileStatus"] = state ? state.webfilterProfileStatus : undefined;
        } else {
            const args = argsOrState as SnifferArgs | undefined;
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            resourceInputs["anomalies"] = args ? args.anomalies : undefined;
            resourceInputs["applicationList"] = args ? args.applicationList : undefined;
            resourceInputs["applicationListStatus"] = args ? args.applicationListStatus : undefined;
            resourceInputs["avProfile"] = args ? args.avProfile : undefined;
            resourceInputs["avProfileStatus"] = args ? args.avProfileStatus : undefined;
            resourceInputs["casbProfile"] = args ? args.casbProfile : undefined;
            resourceInputs["casbProfileStatus"] = args ? args.casbProfileStatus : undefined;
            resourceInputs["dlpProfile"] = args ? args.dlpProfile : undefined;
            resourceInputs["dlpProfileStatus"] = args ? args.dlpProfileStatus : undefined;
            resourceInputs["dlpSensor"] = args ? args.dlpSensor : undefined;
            resourceInputs["dlpSensorStatus"] = args ? args.dlpSensorStatus : undefined;
            resourceInputs["dsri"] = args ? args.dsri : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["emailfilterProfile"] = args ? args.emailfilterProfile : undefined;
            resourceInputs["emailfilterProfileStatus"] = args ? args.emailfilterProfileStatus : undefined;
            resourceInputs["fileFilterProfile"] = args ? args.fileFilterProfile : undefined;
            resourceInputs["fileFilterProfileStatus"] = args ? args.fileFilterProfileStatus : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["ipThreatfeedStatus"] = args ? args.ipThreatfeedStatus : undefined;
            resourceInputs["ipThreatfeeds"] = args ? args.ipThreatfeeds : undefined;
            resourceInputs["ipsDosStatus"] = args ? args.ipsDosStatus : undefined;
            resourceInputs["ipsSensor"] = args ? args.ipsSensor : undefined;
            resourceInputs["ipsSensorStatus"] = args ? args.ipsSensorStatus : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["logtraffic"] = args ? args.logtraffic : undefined;
            resourceInputs["maxPacketCount"] = args ? args.maxPacketCount : undefined;
            resourceInputs["nonIp"] = args ? args.nonIp : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["scanBotnetConnections"] = args ? args.scanBotnetConnections : undefined;
            resourceInputs["spamfilterProfile"] = args ? args.spamfilterProfile : undefined;
            resourceInputs["spamfilterProfileStatus"] = args ? args.spamfilterProfileStatus : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
            resourceInputs["webfilterProfile"] = args ? args.webfilterProfile : undefined;
            resourceInputs["webfilterProfileStatus"] = args ? args.webfilterProfileStatus : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sniffer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Sniffer resources.
 */
export interface SnifferState {
    /**
     * Configuration method to edit Denial of Service (DoS) anomaly settings. The structure of `anomaly` block is documented below.
     */
    anomalies?: pulumi.Input<pulumi.Input<inputs.firewall.SnifferAnomaly>[]>;
    /**
     * Name of an existing application list.
     */
    applicationList?: pulumi.Input<string>;
    /**
     * Enable/disable application control profile. Valid values: `enable`, `disable`.
     */
    applicationListStatus?: pulumi.Input<string>;
    /**
     * Name of an existing antivirus profile.
     */
    avProfile?: pulumi.Input<string>;
    /**
     * Enable/disable antivirus profile. Valid values: `enable`, `disable`.
     */
    avProfileStatus?: pulumi.Input<string>;
    /**
     * Name of an existing CASB profile.
     */
    casbProfile?: pulumi.Input<string>;
    /**
     * Enable/disable CASB profile. Valid values: `enable`, `disable`.
     */
    casbProfileStatus?: pulumi.Input<string>;
    /**
     * Name of an existing DLP profile.
     */
    dlpProfile?: pulumi.Input<string>;
    /**
     * Enable/disable DLP profile. Valid values: `enable`, `disable`.
     */
    dlpProfileStatus?: pulumi.Input<string>;
    /**
     * Name of an existing DLP sensor.
     */
    dlpSensor?: pulumi.Input<string>;
    /**
     * Enable/disable DLP sensor. Valid values: `enable`, `disable`.
     */
    dlpSensorStatus?: pulumi.Input<string>;
    /**
     * Enable/disable DSRI. Valid values: `enable`, `disable`.
     */
    dsri?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Name of an existing email filter profile.
     */
    emailfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable emailfilter. Valid values: `enable`, `disable`.
     */
    emailfilterProfileStatus?: pulumi.Input<string>;
    /**
     * Name of an existing file-filter profile.
     */
    fileFilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable file filter. Valid values: `enable`, `disable`.
     */
    fileFilterProfileStatus?: pulumi.Input<string>;
    /**
     * Sniffer ID.
     */
    fosid?: pulumi.Input<number>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Hosts to filter for in sniffer traffic (Format examples: 1.1.1.1, 2.2.2.0/24, 3.3.3.3/255.255.255.0, 4.4.4.0-4.4.4.240).
     */
    host?: pulumi.Input<string>;
    /**
     * Interface name that traffic sniffing will take place on.
     */
    interface?: pulumi.Input<string>;
    /**
     * Enable/disable IP threat feed. Valid values: `enable`, `disable`.
     */
    ipThreatfeedStatus?: pulumi.Input<string>;
    /**
     * Name of an existing IP threat feed. The structure of `ipThreatfeed` block is documented below.
     */
    ipThreatfeeds?: pulumi.Input<pulumi.Input<inputs.firewall.SnifferIpThreatfeed>[]>;
    /**
     * Enable/disable IPS DoS anomaly detection. Valid values: `enable`, `disable`.
     */
    ipsDosStatus?: pulumi.Input<string>;
    /**
     * Name of an existing IPS sensor.
     */
    ipsSensor?: pulumi.Input<string>;
    /**
     * Enable/disable IPS sensor. Valid values: `enable`, `disable`.
     */
    ipsSensorStatus?: pulumi.Input<string>;
    /**
     * Enable/disable sniffing IPv6 packets. Valid values: `enable`, `disable`.
     */
    ipv6?: pulumi.Input<string>;
    /**
     * Either log all sessions, only sessions that have a security profile applied, or disable all logging for this policy. Valid values: `all`, `utm`, `disable`.
     */
    logtraffic?: pulumi.Input<string>;
    /**
     * Maximum packet count. On FortiOS versions 6.2.0: 1 - 1000000, default = 10000. On FortiOS versions 6.2.4-6.4.2, 7.0.0: 1 - 10000, default = 4000. On FortiOS versions 6.4.10-6.4.14, 7.0.1-7.0.13: 1 - 1000000, default = 4000.
     */
    maxPacketCount?: pulumi.Input<number>;
    /**
     * Enable/disable sniffing non-IP packets. Valid values: `enable`, `disable`.
     */
    nonIp?: pulumi.Input<string>;
    /**
     * Ports to sniff (Format examples: 10, :20, 30:40, 50-, 100-200).
     */
    port?: pulumi.Input<string>;
    /**
     * Integer value for the protocol type as defined by IANA (0 - 255).
     */
    protocol?: pulumi.Input<string>;
    /**
     * Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
     */
    scanBotnetConnections?: pulumi.Input<string>;
    /**
     * Name of an existing spam filter profile.
     */
    spamfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable spam filter. Valid values: `enable`, `disable`.
     */
    spamfilterProfileStatus?: pulumi.Input<string>;
    /**
     * Enable/disable the active status of the sniffer. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * List of VLANs to sniff.
     */
    vlan?: pulumi.Input<string>;
    /**
     * Name of an existing web filter profile.
     */
    webfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable web filter profile. Valid values: `enable`, `disable`.
     */
    webfilterProfileStatus?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sniffer resource.
 */
export interface SnifferArgs {
    /**
     * Configuration method to edit Denial of Service (DoS) anomaly settings. The structure of `anomaly` block is documented below.
     */
    anomalies?: pulumi.Input<pulumi.Input<inputs.firewall.SnifferAnomaly>[]>;
    /**
     * Name of an existing application list.
     */
    applicationList?: pulumi.Input<string>;
    /**
     * Enable/disable application control profile. Valid values: `enable`, `disable`.
     */
    applicationListStatus?: pulumi.Input<string>;
    /**
     * Name of an existing antivirus profile.
     */
    avProfile?: pulumi.Input<string>;
    /**
     * Enable/disable antivirus profile. Valid values: `enable`, `disable`.
     */
    avProfileStatus?: pulumi.Input<string>;
    /**
     * Name of an existing CASB profile.
     */
    casbProfile?: pulumi.Input<string>;
    /**
     * Enable/disable CASB profile. Valid values: `enable`, `disable`.
     */
    casbProfileStatus?: pulumi.Input<string>;
    /**
     * Name of an existing DLP profile.
     */
    dlpProfile?: pulumi.Input<string>;
    /**
     * Enable/disable DLP profile. Valid values: `enable`, `disable`.
     */
    dlpProfileStatus?: pulumi.Input<string>;
    /**
     * Name of an existing DLP sensor.
     */
    dlpSensor?: pulumi.Input<string>;
    /**
     * Enable/disable DLP sensor. Valid values: `enable`, `disable`.
     */
    dlpSensorStatus?: pulumi.Input<string>;
    /**
     * Enable/disable DSRI. Valid values: `enable`, `disable`.
     */
    dsri?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Name of an existing email filter profile.
     */
    emailfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable emailfilter. Valid values: `enable`, `disable`.
     */
    emailfilterProfileStatus?: pulumi.Input<string>;
    /**
     * Name of an existing file-filter profile.
     */
    fileFilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable file filter. Valid values: `enable`, `disable`.
     */
    fileFilterProfileStatus?: pulumi.Input<string>;
    /**
     * Sniffer ID.
     */
    fosid?: pulumi.Input<number>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Hosts to filter for in sniffer traffic (Format examples: 1.1.1.1, 2.2.2.0/24, 3.3.3.3/255.255.255.0, 4.4.4.0-4.4.4.240).
     */
    host?: pulumi.Input<string>;
    /**
     * Interface name that traffic sniffing will take place on.
     */
    interface: pulumi.Input<string>;
    /**
     * Enable/disable IP threat feed. Valid values: `enable`, `disable`.
     */
    ipThreatfeedStatus?: pulumi.Input<string>;
    /**
     * Name of an existing IP threat feed. The structure of `ipThreatfeed` block is documented below.
     */
    ipThreatfeeds?: pulumi.Input<pulumi.Input<inputs.firewall.SnifferIpThreatfeed>[]>;
    /**
     * Enable/disable IPS DoS anomaly detection. Valid values: `enable`, `disable`.
     */
    ipsDosStatus?: pulumi.Input<string>;
    /**
     * Name of an existing IPS sensor.
     */
    ipsSensor?: pulumi.Input<string>;
    /**
     * Enable/disable IPS sensor. Valid values: `enable`, `disable`.
     */
    ipsSensorStatus?: pulumi.Input<string>;
    /**
     * Enable/disable sniffing IPv6 packets. Valid values: `enable`, `disable`.
     */
    ipv6?: pulumi.Input<string>;
    /**
     * Either log all sessions, only sessions that have a security profile applied, or disable all logging for this policy. Valid values: `all`, `utm`, `disable`.
     */
    logtraffic?: pulumi.Input<string>;
    /**
     * Maximum packet count. On FortiOS versions 6.2.0: 1 - 1000000, default = 10000. On FortiOS versions 6.2.4-6.4.2, 7.0.0: 1 - 10000, default = 4000. On FortiOS versions 6.4.10-6.4.14, 7.0.1-7.0.13: 1 - 1000000, default = 4000.
     */
    maxPacketCount?: pulumi.Input<number>;
    /**
     * Enable/disable sniffing non-IP packets. Valid values: `enable`, `disable`.
     */
    nonIp?: pulumi.Input<string>;
    /**
     * Ports to sniff (Format examples: 10, :20, 30:40, 50-, 100-200).
     */
    port?: pulumi.Input<string>;
    /**
     * Integer value for the protocol type as defined by IANA (0 - 255).
     */
    protocol?: pulumi.Input<string>;
    /**
     * Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
     */
    scanBotnetConnections?: pulumi.Input<string>;
    /**
     * Name of an existing spam filter profile.
     */
    spamfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable spam filter. Valid values: `enable`, `disable`.
     */
    spamfilterProfileStatus?: pulumi.Input<string>;
    /**
     * Enable/disable the active status of the sniffer. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * List of VLANs to sniff.
     */
    vlan?: pulumi.Input<string>;
    /**
     * Name of an existing web filter profile.
     */
    webfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable web filter profile. Valid values: `enable`, `disable`.
     */
    webfilterProfileStatus?: pulumi.Input<string>;
}
