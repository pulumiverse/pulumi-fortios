// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Configure virtual IP for IPv4.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trname = new fortios.firewall.Vip("trname", {
 *     arpReply: "enable",
 *     color: 0,
 *     dnsMappingTtl: 0,
 *     extintf: "any",
 *     extip: "1.0.0.1-1.0.0.2",
 *     extport: "0-65535",
 *     fosid: 0,
 *     httpCookieAge: 60,
 *     httpCookieDomainFromHost: "disable",
 *     httpCookieGeneration: 0,
 *     httpCookieShare: "same-ip",
 *     httpIpHeader: "disable",
 *     httpMultiplex: "disable",
 *     httpsCookieSecure: "disable",
 *     ldbMethod: "static",
 *     mappedips: [{
 *         range: "3.0.0.0-3.0.0.1",
 *     }],
 *     mappedport: "0-65535",
 *     maxEmbryonicConnections: 1000,
 *     natSourceVip: "disable",
 *     outlookWebAccess: "disable",
 *     persistence: "none",
 *     portforward: "disable",
 *     portmappingType: "1-to-1",
 *     protocol: "tcp",
 *     sslAlgorithm: "high",
 *     sslClientFallback: "enable",
 *     sslClientRenegotiation: "secure",
 *     sslClientSessionStateMax: 1000,
 *     sslClientSessionStateTimeout: 30,
 *     sslClientSessionStateType: "both",
 *     sslDhBits: "2048",
 *     sslHpkp: "disable",
 *     sslHpkpAge: 5184000,
 *     sslHpkpIncludeSubdomains: "disable",
 *     sslHsts: "disable",
 *     sslHstsAge: 5184000,
 *     sslHstsIncludeSubdomains: "disable",
 *     sslHttpLocationConversion: "disable",
 *     sslHttpMatchHost: "enable",
 *     sslMaxVersion: "tls-1.2",
 *     sslMinVersion: "tls-1.1",
 *     sslMode: "half",
 *     sslPfs: "require",
 *     sslSendEmptyFrags: "enable",
 *     sslServerAlgorithm: "client",
 *     sslServerMaxVersion: "client",
 *     sslServerMinVersion: "client",
 *     sslServerSessionStateMax: 100,
 *     sslServerSessionStateTimeout: 60,
 *     sslServerSessionStateType: "both",
 *     type: "static-nat",
 *     weblogicServer: "disable",
 *     websphereServer: "disable",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Firewall Vip can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:firewall/vip:Vip labelname {{name}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:firewall/vip:Vip labelname {{name}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Vip extends pulumi.CustomResource {
    /**
     * Get an existing Vip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VipState, opts?: pulumi.CustomResourceOptions): Vip {
        return new Vip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:firewall/vip:Vip';

    /**
     * Returns true if the given object is an instance of Vip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vip.__pulumiType;
    }

    /**
     * Enable/disable adding NAT46 route. Valid values: `disable`, `enable`.
     */
    public readonly addNat46Route!: pulumi.Output<string>;
    /**
     * Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
     */
    public readonly arpReply!: pulumi.Output<string>;
    /**
     * Color of icon on the GUI.
     */
    public readonly color!: pulumi.Output<number>;
    /**
     * Comment.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * DNS mapping TTL (Set to zero to use TTL in DNS response, default = 0).
     */
    public readonly dnsMappingTtl!: pulumi.Output<number>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * External FQDN address name. The structure of `extaddr` block is documented below.
     */
    public readonly extaddrs!: pulumi.Output<outputs.firewall.VipExtaddr[] | undefined>;
    /**
     * Interface connected to the source network that receives the packets that will be forwarded to the destination network.
     */
    public readonly extintf!: pulumi.Output<string>;
    /**
     * IP address or address range on the external interface that you want to map to an address or address range on the destination network.
     */
    public readonly extip!: pulumi.Output<string>;
    /**
     * Incoming port number range that you want to map to a port number range on the destination network.
     */
    public readonly extport!: pulumi.Output<string>;
    /**
     * Custom defined ID.
     */
    public readonly fosid!: pulumi.Output<number>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Enable to have the VIP send gratuitous ARPs. 0=disabled. Set from 5 up to 8640000 seconds to enable.
     */
    public readonly gratuitousArpInterval!: pulumi.Output<number>;
    /**
     * Domain to use when integrating with FortiGSLB.
     */
    public readonly gslbDomainName!: pulumi.Output<string>;
    /**
     * Hostname to use within the configured FortiGSLB domain.
     */
    public readonly gslbHostname!: pulumi.Output<string>;
    /**
     * Publicly accessible IP addresses for the FortiGSLB service. The structure of `gslbPublicIps` block is documented below.
     */
    public readonly gslbPublicIps!: pulumi.Output<outputs.firewall.VipGslbPublicIp[] | undefined>;
    /**
     * Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
     */
    public readonly h2Support!: pulumi.Output<string>;
    /**
     * Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
     */
    public readonly h3Support!: pulumi.Output<string>;
    /**
     * Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
     */
    public readonly httpCookieAge!: pulumi.Output<number>;
    /**
     * Domain that HTTP cookie persistence should apply to.
     */
    public readonly httpCookieDomain!: pulumi.Output<string>;
    /**
     * Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
     */
    public readonly httpCookieDomainFromHost!: pulumi.Output<string>;
    /**
     * Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
     */
    public readonly httpCookieGeneration!: pulumi.Output<number>;
    /**
     * Limit HTTP cookie persistence to the specified path.
     */
    public readonly httpCookiePath!: pulumi.Output<string>;
    /**
     * Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
     */
    public readonly httpCookieShare!: pulumi.Output<string>;
    /**
     * For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
     */
    public readonly httpIpHeader!: pulumi.Output<string>;
    /**
     * For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
     */
    public readonly httpIpHeaderName!: pulumi.Output<string>;
    /**
     * Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
     */
    public readonly httpMultiplex!: pulumi.Output<string>;
    /**
     * Maximum number of concurrent requests that a multiplex server can handle (default = unlimited).
     */
    public readonly httpMultiplexMaxConcurrentRequest!: pulumi.Output<number>;
    /**
     * Maximum number of requests that a multiplex server can handle before disconnecting sessions (default = unlimited).
     */
    public readonly httpMultiplexMaxRequest!: pulumi.Output<number>;
    /**
     * Time-to-live for idle connections to servers.
     */
    public readonly httpMultiplexTtl!: pulumi.Output<number>;
    /**
     * Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
     */
    public readonly httpRedirect!: pulumi.Output<string>;
    /**
     * Maximum supported HTTP versions. default = HTTP2 Valid values: `http1`, `http2`.
     */
    public readonly httpSupportedMaxVersion!: pulumi.Output<string>;
    /**
     * Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
     */
    public readonly httpsCookieSecure!: pulumi.Output<string>;
    /**
     * Start-mapped-IPv6-address [-end mapped-IPv6-address].
     */
    public readonly ipv6Mappedip!: pulumi.Output<string>;
    /**
     * IPv6 port number range on the destination network to which the external port number range is mapped.
     */
    public readonly ipv6Mappedport!: pulumi.Output<string>;
    /**
     * Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
     */
    public readonly ldbMethod!: pulumi.Output<string>;
    /**
     * Mapped FQDN address name.
     */
    public readonly mappedAddr!: pulumi.Output<string>;
    /**
     * IP address or address range on the destination network to which the external IP address is mapped. The structure of `mappedip` block is documented below.
     */
    public readonly mappedips!: pulumi.Output<outputs.firewall.VipMappedip[] | undefined>;
    /**
     * Port number range on the destination network to which the external port number range is mapped.
     */
    public readonly mappedport!: pulumi.Output<string>;
    /**
     * Maximum number of incomplete connections.
     */
    public readonly maxEmbryonicConnections!: pulumi.Output<number>;
    /**
     * Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
     */
    public readonly monitors!: pulumi.Output<outputs.firewall.VipMonitor[] | undefined>;
    /**
     * Virtual IP name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable/disable NAT44. Valid values: `disable`, `enable`.
     */
    public readonly nat44!: pulumi.Output<string>;
    /**
     * Enable/disable NAT46. Valid values: `disable`, `enable`.
     */
    public readonly nat46!: pulumi.Output<string>;
    /**
     * Enable/disable forcing the source NAT mapped IP to the external IP for all traffic. Valid values: `disable`, `enable`.
     */
    public readonly natSourceVip!: pulumi.Output<string>;
    /**
     * Enable/disable one click GSLB server integration with FortiGSLB. Valid values: `disable`, `enable`.
     */
    public readonly oneClickGslbServer!: pulumi.Output<string>;
    /**
     * Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
     */
    public readonly outlookWebAccess!: pulumi.Output<string>;
    /**
     * Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
     */
    public readonly persistence!: pulumi.Output<string>;
    /**
     * Enable/disable port forwarding. Valid values: `disable`, `enable`.
     */
    public readonly portforward!: pulumi.Output<string>;
    /**
     * Port mapping type. Valid values: `1-to-1`, `m-to-n`.
     */
    public readonly portmappingType!: pulumi.Output<string>;
    /**
     * Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`, `icmp`.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * QUIC setting. The structure of `quic` block is documented below.
     */
    public readonly quic!: pulumi.Output<outputs.firewall.VipQuic>;
    /**
     * Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
     */
    public readonly realservers!: pulumi.Output<outputs.firewall.VipRealserver[] | undefined>;
    /**
     * Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
     */
    public readonly serverType!: pulumi.Output<string>;
    /**
     * Service name. The structure of `service` block is documented below.
     */
    public readonly services!: pulumi.Output<outputs.firewall.VipService[] | undefined>;
    /**
     * Source address filter. Each address must be either an IP/subnet (x.x.x.x/n) or a range (x.x.x.x-y.y.y.y). Separate addresses with spaces. The structure of `srcFilter` block is documented below.
     */
    public readonly srcFilters!: pulumi.Output<outputs.firewall.VipSrcFilter[] | undefined>;
    /**
     * Interfaces to which the VIP applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
     */
    public readonly srcintfFilters!: pulumi.Output<outputs.firewall.VipSrcintfFilter[] | undefined>;
    /**
     * Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
     */
    public readonly sslAcceptFfdheGroups!: pulumi.Output<string>;
    /**
     * Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
     */
    public readonly sslAlgorithm!: pulumi.Output<string>;
    /**
     * The name of the SSL certificate to use for SSL acceleration.
     */
    public readonly sslCertificate!: pulumi.Output<string>;
    /**
     * SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `sslCipherSuites` block is documented below.
     */
    public readonly sslCipherSuites!: pulumi.Output<outputs.firewall.VipSslCipherSuite[] | undefined>;
    /**
     * Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
     */
    public readonly sslClientFallback!: pulumi.Output<string>;
    /**
     * Maximum length of data in MB before triggering a client rekey (0 = disable).
     */
    public readonly sslClientRekeyCount!: pulumi.Output<number>;
    /**
     * Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
     */
    public readonly sslClientRenegotiation!: pulumi.Output<string>;
    /**
     * Maximum number of client to FortiGate SSL session states to keep.
     */
    public readonly sslClientSessionStateMax!: pulumi.Output<number>;
    /**
     * Number of minutes to keep client to FortiGate SSL session state.
     */
    public readonly sslClientSessionStateTimeout!: pulumi.Output<number>;
    /**
     * How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
     */
    public readonly sslClientSessionStateType!: pulumi.Output<string>;
    /**
     * Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
     */
    public readonly sslDhBits!: pulumi.Output<string>;
    /**
     * Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
     */
    public readonly sslHpkp!: pulumi.Output<string>;
    /**
     * Number of seconds the client should honour the HPKP setting.
     */
    public readonly sslHpkpAge!: pulumi.Output<number>;
    /**
     * Certificate to generate backup HPKP pin from.
     */
    public readonly sslHpkpBackup!: pulumi.Output<string>;
    /**
     * Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
     */
    public readonly sslHpkpIncludeSubdomains!: pulumi.Output<string>;
    /**
     * Certificate to generate primary HPKP pin from.
     */
    public readonly sslHpkpPrimary!: pulumi.Output<string>;
    /**
     * URL to report HPKP violations to.
     */
    public readonly sslHpkpReportUri!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
     */
    public readonly sslHsts!: pulumi.Output<string>;
    /**
     * Number of seconds the client should honour the HSTS setting.
     */
    public readonly sslHstsAge!: pulumi.Output<number>;
    /**
     * Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
     */
    public readonly sslHstsIncludeSubdomains!: pulumi.Output<string>;
    /**
     * Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
     */
    public readonly sslHttpLocationConversion!: pulumi.Output<string>;
    /**
     * Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
     */
    public readonly sslHttpMatchHost!: pulumi.Output<string>;
    /**
     * Highest SSL/TLS version acceptable from a client.
     */
    public readonly sslMaxVersion!: pulumi.Output<string>;
    /**
     * Lowest SSL/TLS version acceptable from a client.
     */
    public readonly sslMinVersion!: pulumi.Output<string>;
    /**
     * Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
     */
    public readonly sslMode!: pulumi.Output<string>;
    /**
     * Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
     */
    public readonly sslPfs!: pulumi.Output<string>;
    /**
     * Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
     */
    public readonly sslSendEmptyFrags!: pulumi.Output<string>;
    /**
     * Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
     */
    public readonly sslServerAlgorithm!: pulumi.Output<string>;
    /**
     * SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslServerCipherSuites` block is documented below.
     */
    public readonly sslServerCipherSuites!: pulumi.Output<outputs.firewall.VipSslServerCipherSuite[] | undefined>;
    /**
     * Highest SSL/TLS version acceptable from a server. Use the client setting by default.
     */
    public readonly sslServerMaxVersion!: pulumi.Output<string>;
    /**
     * Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
     */
    public readonly sslServerMinVersion!: pulumi.Output<string>;
    /**
     * Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
     */
    public readonly sslServerRenegotiation!: pulumi.Output<string>;
    /**
     * Maximum number of FortiGate to Server SSL session states to keep.
     */
    public readonly sslServerSessionStateMax!: pulumi.Output<number>;
    /**
     * Number of minutes to keep FortiGate to Server SSL session state.
     */
    public readonly sslServerSessionStateTimeout!: pulumi.Output<number>;
    /**
     * How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
     */
    public readonly sslServerSessionStateType!: pulumi.Output<string>;
    /**
     * Enable/disable VIP. Valid values: `disable`, `enable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Configure a static NAT, load balance, server load balance, DNS translation, or FQDN VIP.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
     */
    public readonly weblogicServer!: pulumi.Output<string>;
    /**
     * Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
     */
    public readonly websphereServer!: pulumi.Output<string>;

    /**
     * Create a Vip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VipArgs | VipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VipState | undefined;
            resourceInputs["addNat46Route"] = state ? state.addNat46Route : undefined;
            resourceInputs["arpReply"] = state ? state.arpReply : undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["dnsMappingTtl"] = state ? state.dnsMappingTtl : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["extaddrs"] = state ? state.extaddrs : undefined;
            resourceInputs["extintf"] = state ? state.extintf : undefined;
            resourceInputs["extip"] = state ? state.extip : undefined;
            resourceInputs["extport"] = state ? state.extport : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["gratuitousArpInterval"] = state ? state.gratuitousArpInterval : undefined;
            resourceInputs["gslbDomainName"] = state ? state.gslbDomainName : undefined;
            resourceInputs["gslbHostname"] = state ? state.gslbHostname : undefined;
            resourceInputs["gslbPublicIps"] = state ? state.gslbPublicIps : undefined;
            resourceInputs["h2Support"] = state ? state.h2Support : undefined;
            resourceInputs["h3Support"] = state ? state.h3Support : undefined;
            resourceInputs["httpCookieAge"] = state ? state.httpCookieAge : undefined;
            resourceInputs["httpCookieDomain"] = state ? state.httpCookieDomain : undefined;
            resourceInputs["httpCookieDomainFromHost"] = state ? state.httpCookieDomainFromHost : undefined;
            resourceInputs["httpCookieGeneration"] = state ? state.httpCookieGeneration : undefined;
            resourceInputs["httpCookiePath"] = state ? state.httpCookiePath : undefined;
            resourceInputs["httpCookieShare"] = state ? state.httpCookieShare : undefined;
            resourceInputs["httpIpHeader"] = state ? state.httpIpHeader : undefined;
            resourceInputs["httpIpHeaderName"] = state ? state.httpIpHeaderName : undefined;
            resourceInputs["httpMultiplex"] = state ? state.httpMultiplex : undefined;
            resourceInputs["httpMultiplexMaxConcurrentRequest"] = state ? state.httpMultiplexMaxConcurrentRequest : undefined;
            resourceInputs["httpMultiplexMaxRequest"] = state ? state.httpMultiplexMaxRequest : undefined;
            resourceInputs["httpMultiplexTtl"] = state ? state.httpMultiplexTtl : undefined;
            resourceInputs["httpRedirect"] = state ? state.httpRedirect : undefined;
            resourceInputs["httpSupportedMaxVersion"] = state ? state.httpSupportedMaxVersion : undefined;
            resourceInputs["httpsCookieSecure"] = state ? state.httpsCookieSecure : undefined;
            resourceInputs["ipv6Mappedip"] = state ? state.ipv6Mappedip : undefined;
            resourceInputs["ipv6Mappedport"] = state ? state.ipv6Mappedport : undefined;
            resourceInputs["ldbMethod"] = state ? state.ldbMethod : undefined;
            resourceInputs["mappedAddr"] = state ? state.mappedAddr : undefined;
            resourceInputs["mappedips"] = state ? state.mappedips : undefined;
            resourceInputs["mappedport"] = state ? state.mappedport : undefined;
            resourceInputs["maxEmbryonicConnections"] = state ? state.maxEmbryonicConnections : undefined;
            resourceInputs["monitors"] = state ? state.monitors : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nat44"] = state ? state.nat44 : undefined;
            resourceInputs["nat46"] = state ? state.nat46 : undefined;
            resourceInputs["natSourceVip"] = state ? state.natSourceVip : undefined;
            resourceInputs["oneClickGslbServer"] = state ? state.oneClickGslbServer : undefined;
            resourceInputs["outlookWebAccess"] = state ? state.outlookWebAccess : undefined;
            resourceInputs["persistence"] = state ? state.persistence : undefined;
            resourceInputs["portforward"] = state ? state.portforward : undefined;
            resourceInputs["portmappingType"] = state ? state.portmappingType : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["quic"] = state ? state.quic : undefined;
            resourceInputs["realservers"] = state ? state.realservers : undefined;
            resourceInputs["serverType"] = state ? state.serverType : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["srcFilters"] = state ? state.srcFilters : undefined;
            resourceInputs["srcintfFilters"] = state ? state.srcintfFilters : undefined;
            resourceInputs["sslAcceptFfdheGroups"] = state ? state.sslAcceptFfdheGroups : undefined;
            resourceInputs["sslAlgorithm"] = state ? state.sslAlgorithm : undefined;
            resourceInputs["sslCertificate"] = state ? state.sslCertificate : undefined;
            resourceInputs["sslCipherSuites"] = state ? state.sslCipherSuites : undefined;
            resourceInputs["sslClientFallback"] = state ? state.sslClientFallback : undefined;
            resourceInputs["sslClientRekeyCount"] = state ? state.sslClientRekeyCount : undefined;
            resourceInputs["sslClientRenegotiation"] = state ? state.sslClientRenegotiation : undefined;
            resourceInputs["sslClientSessionStateMax"] = state ? state.sslClientSessionStateMax : undefined;
            resourceInputs["sslClientSessionStateTimeout"] = state ? state.sslClientSessionStateTimeout : undefined;
            resourceInputs["sslClientSessionStateType"] = state ? state.sslClientSessionStateType : undefined;
            resourceInputs["sslDhBits"] = state ? state.sslDhBits : undefined;
            resourceInputs["sslHpkp"] = state ? state.sslHpkp : undefined;
            resourceInputs["sslHpkpAge"] = state ? state.sslHpkpAge : undefined;
            resourceInputs["sslHpkpBackup"] = state ? state.sslHpkpBackup : undefined;
            resourceInputs["sslHpkpIncludeSubdomains"] = state ? state.sslHpkpIncludeSubdomains : undefined;
            resourceInputs["sslHpkpPrimary"] = state ? state.sslHpkpPrimary : undefined;
            resourceInputs["sslHpkpReportUri"] = state ? state.sslHpkpReportUri : undefined;
            resourceInputs["sslHsts"] = state ? state.sslHsts : undefined;
            resourceInputs["sslHstsAge"] = state ? state.sslHstsAge : undefined;
            resourceInputs["sslHstsIncludeSubdomains"] = state ? state.sslHstsIncludeSubdomains : undefined;
            resourceInputs["sslHttpLocationConversion"] = state ? state.sslHttpLocationConversion : undefined;
            resourceInputs["sslHttpMatchHost"] = state ? state.sslHttpMatchHost : undefined;
            resourceInputs["sslMaxVersion"] = state ? state.sslMaxVersion : undefined;
            resourceInputs["sslMinVersion"] = state ? state.sslMinVersion : undefined;
            resourceInputs["sslMode"] = state ? state.sslMode : undefined;
            resourceInputs["sslPfs"] = state ? state.sslPfs : undefined;
            resourceInputs["sslSendEmptyFrags"] = state ? state.sslSendEmptyFrags : undefined;
            resourceInputs["sslServerAlgorithm"] = state ? state.sslServerAlgorithm : undefined;
            resourceInputs["sslServerCipherSuites"] = state ? state.sslServerCipherSuites : undefined;
            resourceInputs["sslServerMaxVersion"] = state ? state.sslServerMaxVersion : undefined;
            resourceInputs["sslServerMinVersion"] = state ? state.sslServerMinVersion : undefined;
            resourceInputs["sslServerRenegotiation"] = state ? state.sslServerRenegotiation : undefined;
            resourceInputs["sslServerSessionStateMax"] = state ? state.sslServerSessionStateMax : undefined;
            resourceInputs["sslServerSessionStateTimeout"] = state ? state.sslServerSessionStateTimeout : undefined;
            resourceInputs["sslServerSessionStateType"] = state ? state.sslServerSessionStateType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["weblogicServer"] = state ? state.weblogicServer : undefined;
            resourceInputs["websphereServer"] = state ? state.websphereServer : undefined;
        } else {
            const args = argsOrState as VipArgs | undefined;
            resourceInputs["addNat46Route"] = args ? args.addNat46Route : undefined;
            resourceInputs["arpReply"] = args ? args.arpReply : undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["dnsMappingTtl"] = args ? args.dnsMappingTtl : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["extaddrs"] = args ? args.extaddrs : undefined;
            resourceInputs["extintf"] = args ? args.extintf : undefined;
            resourceInputs["extip"] = args ? args.extip : undefined;
            resourceInputs["extport"] = args ? args.extport : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["gratuitousArpInterval"] = args ? args.gratuitousArpInterval : undefined;
            resourceInputs["gslbDomainName"] = args ? args.gslbDomainName : undefined;
            resourceInputs["gslbHostname"] = args ? args.gslbHostname : undefined;
            resourceInputs["gslbPublicIps"] = args ? args.gslbPublicIps : undefined;
            resourceInputs["h2Support"] = args ? args.h2Support : undefined;
            resourceInputs["h3Support"] = args ? args.h3Support : undefined;
            resourceInputs["httpCookieAge"] = args ? args.httpCookieAge : undefined;
            resourceInputs["httpCookieDomain"] = args ? args.httpCookieDomain : undefined;
            resourceInputs["httpCookieDomainFromHost"] = args ? args.httpCookieDomainFromHost : undefined;
            resourceInputs["httpCookieGeneration"] = args ? args.httpCookieGeneration : undefined;
            resourceInputs["httpCookiePath"] = args ? args.httpCookiePath : undefined;
            resourceInputs["httpCookieShare"] = args ? args.httpCookieShare : undefined;
            resourceInputs["httpIpHeader"] = args ? args.httpIpHeader : undefined;
            resourceInputs["httpIpHeaderName"] = args ? args.httpIpHeaderName : undefined;
            resourceInputs["httpMultiplex"] = args ? args.httpMultiplex : undefined;
            resourceInputs["httpMultiplexMaxConcurrentRequest"] = args ? args.httpMultiplexMaxConcurrentRequest : undefined;
            resourceInputs["httpMultiplexMaxRequest"] = args ? args.httpMultiplexMaxRequest : undefined;
            resourceInputs["httpMultiplexTtl"] = args ? args.httpMultiplexTtl : undefined;
            resourceInputs["httpRedirect"] = args ? args.httpRedirect : undefined;
            resourceInputs["httpSupportedMaxVersion"] = args ? args.httpSupportedMaxVersion : undefined;
            resourceInputs["httpsCookieSecure"] = args ? args.httpsCookieSecure : undefined;
            resourceInputs["ipv6Mappedip"] = args ? args.ipv6Mappedip : undefined;
            resourceInputs["ipv6Mappedport"] = args ? args.ipv6Mappedport : undefined;
            resourceInputs["ldbMethod"] = args ? args.ldbMethod : undefined;
            resourceInputs["mappedAddr"] = args ? args.mappedAddr : undefined;
            resourceInputs["mappedips"] = args ? args.mappedips : undefined;
            resourceInputs["mappedport"] = args ? args.mappedport : undefined;
            resourceInputs["maxEmbryonicConnections"] = args ? args.maxEmbryonicConnections : undefined;
            resourceInputs["monitors"] = args ? args.monitors : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nat44"] = args ? args.nat44 : undefined;
            resourceInputs["nat46"] = args ? args.nat46 : undefined;
            resourceInputs["natSourceVip"] = args ? args.natSourceVip : undefined;
            resourceInputs["oneClickGslbServer"] = args ? args.oneClickGslbServer : undefined;
            resourceInputs["outlookWebAccess"] = args ? args.outlookWebAccess : undefined;
            resourceInputs["persistence"] = args ? args.persistence : undefined;
            resourceInputs["portforward"] = args ? args.portforward : undefined;
            resourceInputs["portmappingType"] = args ? args.portmappingType : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["quic"] = args ? args.quic : undefined;
            resourceInputs["realservers"] = args ? args.realservers : undefined;
            resourceInputs["serverType"] = args ? args.serverType : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["srcFilters"] = args ? args.srcFilters : undefined;
            resourceInputs["srcintfFilters"] = args ? args.srcintfFilters : undefined;
            resourceInputs["sslAcceptFfdheGroups"] = args ? args.sslAcceptFfdheGroups : undefined;
            resourceInputs["sslAlgorithm"] = args ? args.sslAlgorithm : undefined;
            resourceInputs["sslCertificate"] = args ? args.sslCertificate : undefined;
            resourceInputs["sslCipherSuites"] = args ? args.sslCipherSuites : undefined;
            resourceInputs["sslClientFallback"] = args ? args.sslClientFallback : undefined;
            resourceInputs["sslClientRekeyCount"] = args ? args.sslClientRekeyCount : undefined;
            resourceInputs["sslClientRenegotiation"] = args ? args.sslClientRenegotiation : undefined;
            resourceInputs["sslClientSessionStateMax"] = args ? args.sslClientSessionStateMax : undefined;
            resourceInputs["sslClientSessionStateTimeout"] = args ? args.sslClientSessionStateTimeout : undefined;
            resourceInputs["sslClientSessionStateType"] = args ? args.sslClientSessionStateType : undefined;
            resourceInputs["sslDhBits"] = args ? args.sslDhBits : undefined;
            resourceInputs["sslHpkp"] = args ? args.sslHpkp : undefined;
            resourceInputs["sslHpkpAge"] = args ? args.sslHpkpAge : undefined;
            resourceInputs["sslHpkpBackup"] = args ? args.sslHpkpBackup : undefined;
            resourceInputs["sslHpkpIncludeSubdomains"] = args ? args.sslHpkpIncludeSubdomains : undefined;
            resourceInputs["sslHpkpPrimary"] = args ? args.sslHpkpPrimary : undefined;
            resourceInputs["sslHpkpReportUri"] = args ? args.sslHpkpReportUri : undefined;
            resourceInputs["sslHsts"] = args ? args.sslHsts : undefined;
            resourceInputs["sslHstsAge"] = args ? args.sslHstsAge : undefined;
            resourceInputs["sslHstsIncludeSubdomains"] = args ? args.sslHstsIncludeSubdomains : undefined;
            resourceInputs["sslHttpLocationConversion"] = args ? args.sslHttpLocationConversion : undefined;
            resourceInputs["sslHttpMatchHost"] = args ? args.sslHttpMatchHost : undefined;
            resourceInputs["sslMaxVersion"] = args ? args.sslMaxVersion : undefined;
            resourceInputs["sslMinVersion"] = args ? args.sslMinVersion : undefined;
            resourceInputs["sslMode"] = args ? args.sslMode : undefined;
            resourceInputs["sslPfs"] = args ? args.sslPfs : undefined;
            resourceInputs["sslSendEmptyFrags"] = args ? args.sslSendEmptyFrags : undefined;
            resourceInputs["sslServerAlgorithm"] = args ? args.sslServerAlgorithm : undefined;
            resourceInputs["sslServerCipherSuites"] = args ? args.sslServerCipherSuites : undefined;
            resourceInputs["sslServerMaxVersion"] = args ? args.sslServerMaxVersion : undefined;
            resourceInputs["sslServerMinVersion"] = args ? args.sslServerMinVersion : undefined;
            resourceInputs["sslServerRenegotiation"] = args ? args.sslServerRenegotiation : undefined;
            resourceInputs["sslServerSessionStateMax"] = args ? args.sslServerSessionStateMax : undefined;
            resourceInputs["sslServerSessionStateTimeout"] = args ? args.sslServerSessionStateTimeout : undefined;
            resourceInputs["sslServerSessionStateType"] = args ? args.sslServerSessionStateType : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["weblogicServer"] = args ? args.weblogicServer : undefined;
            resourceInputs["websphereServer"] = args ? args.websphereServer : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vip.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vip resources.
 */
export interface VipState {
    /**
     * Enable/disable adding NAT46 route. Valid values: `disable`, `enable`.
     */
    addNat46Route?: pulumi.Input<string>;
    /**
     * Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
     */
    arpReply?: pulumi.Input<string>;
    /**
     * Color of icon on the GUI.
     */
    color?: pulumi.Input<number>;
    /**
     * Comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * DNS mapping TTL (Set to zero to use TTL in DNS response, default = 0).
     */
    dnsMappingTtl?: pulumi.Input<number>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * External FQDN address name. The structure of `extaddr` block is documented below.
     */
    extaddrs?: pulumi.Input<pulumi.Input<inputs.firewall.VipExtaddr>[]>;
    /**
     * Interface connected to the source network that receives the packets that will be forwarded to the destination network.
     */
    extintf?: pulumi.Input<string>;
    /**
     * IP address or address range on the external interface that you want to map to an address or address range on the destination network.
     */
    extip?: pulumi.Input<string>;
    /**
     * Incoming port number range that you want to map to a port number range on the destination network.
     */
    extport?: pulumi.Input<string>;
    /**
     * Custom defined ID.
     */
    fosid?: pulumi.Input<number>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Enable to have the VIP send gratuitous ARPs. 0=disabled. Set from 5 up to 8640000 seconds to enable.
     */
    gratuitousArpInterval?: pulumi.Input<number>;
    /**
     * Domain to use when integrating with FortiGSLB.
     */
    gslbDomainName?: pulumi.Input<string>;
    /**
     * Hostname to use within the configured FortiGSLB domain.
     */
    gslbHostname?: pulumi.Input<string>;
    /**
     * Publicly accessible IP addresses for the FortiGSLB service. The structure of `gslbPublicIps` block is documented below.
     */
    gslbPublicIps?: pulumi.Input<pulumi.Input<inputs.firewall.VipGslbPublicIp>[]>;
    /**
     * Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
     */
    h2Support?: pulumi.Input<string>;
    /**
     * Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
     */
    h3Support?: pulumi.Input<string>;
    /**
     * Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
     */
    httpCookieAge?: pulumi.Input<number>;
    /**
     * Domain that HTTP cookie persistence should apply to.
     */
    httpCookieDomain?: pulumi.Input<string>;
    /**
     * Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
     */
    httpCookieDomainFromHost?: pulumi.Input<string>;
    /**
     * Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
     */
    httpCookieGeneration?: pulumi.Input<number>;
    /**
     * Limit HTTP cookie persistence to the specified path.
     */
    httpCookiePath?: pulumi.Input<string>;
    /**
     * Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
     */
    httpCookieShare?: pulumi.Input<string>;
    /**
     * For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
     */
    httpIpHeader?: pulumi.Input<string>;
    /**
     * For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
     */
    httpIpHeaderName?: pulumi.Input<string>;
    /**
     * Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
     */
    httpMultiplex?: pulumi.Input<string>;
    /**
     * Maximum number of concurrent requests that a multiplex server can handle (default = unlimited).
     */
    httpMultiplexMaxConcurrentRequest?: pulumi.Input<number>;
    /**
     * Maximum number of requests that a multiplex server can handle before disconnecting sessions (default = unlimited).
     */
    httpMultiplexMaxRequest?: pulumi.Input<number>;
    /**
     * Time-to-live for idle connections to servers.
     */
    httpMultiplexTtl?: pulumi.Input<number>;
    /**
     * Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
     */
    httpRedirect?: pulumi.Input<string>;
    /**
     * Maximum supported HTTP versions. default = HTTP2 Valid values: `http1`, `http2`.
     */
    httpSupportedMaxVersion?: pulumi.Input<string>;
    /**
     * Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
     */
    httpsCookieSecure?: pulumi.Input<string>;
    /**
     * Start-mapped-IPv6-address [-end mapped-IPv6-address].
     */
    ipv6Mappedip?: pulumi.Input<string>;
    /**
     * IPv6 port number range on the destination network to which the external port number range is mapped.
     */
    ipv6Mappedport?: pulumi.Input<string>;
    /**
     * Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
     */
    ldbMethod?: pulumi.Input<string>;
    /**
     * Mapped FQDN address name.
     */
    mappedAddr?: pulumi.Input<string>;
    /**
     * IP address or address range on the destination network to which the external IP address is mapped. The structure of `mappedip` block is documented below.
     */
    mappedips?: pulumi.Input<pulumi.Input<inputs.firewall.VipMappedip>[]>;
    /**
     * Port number range on the destination network to which the external port number range is mapped.
     */
    mappedport?: pulumi.Input<string>;
    /**
     * Maximum number of incomplete connections.
     */
    maxEmbryonicConnections?: pulumi.Input<number>;
    /**
     * Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
     */
    monitors?: pulumi.Input<pulumi.Input<inputs.firewall.VipMonitor>[]>;
    /**
     * Virtual IP name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable NAT44. Valid values: `disable`, `enable`.
     */
    nat44?: pulumi.Input<string>;
    /**
     * Enable/disable NAT46. Valid values: `disable`, `enable`.
     */
    nat46?: pulumi.Input<string>;
    /**
     * Enable/disable forcing the source NAT mapped IP to the external IP for all traffic. Valid values: `disable`, `enable`.
     */
    natSourceVip?: pulumi.Input<string>;
    /**
     * Enable/disable one click GSLB server integration with FortiGSLB. Valid values: `disable`, `enable`.
     */
    oneClickGslbServer?: pulumi.Input<string>;
    /**
     * Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
     */
    outlookWebAccess?: pulumi.Input<string>;
    /**
     * Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
     */
    persistence?: pulumi.Input<string>;
    /**
     * Enable/disable port forwarding. Valid values: `disable`, `enable`.
     */
    portforward?: pulumi.Input<string>;
    /**
     * Port mapping type. Valid values: `1-to-1`, `m-to-n`.
     */
    portmappingType?: pulumi.Input<string>;
    /**
     * Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`, `icmp`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * QUIC setting. The structure of `quic` block is documented below.
     */
    quic?: pulumi.Input<inputs.firewall.VipQuic>;
    /**
     * Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
     */
    realservers?: pulumi.Input<pulumi.Input<inputs.firewall.VipRealserver>[]>;
    /**
     * Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
     */
    serverType?: pulumi.Input<string>;
    /**
     * Service name. The structure of `service` block is documented below.
     */
    services?: pulumi.Input<pulumi.Input<inputs.firewall.VipService>[]>;
    /**
     * Source address filter. Each address must be either an IP/subnet (x.x.x.x/n) or a range (x.x.x.x-y.y.y.y). Separate addresses with spaces. The structure of `srcFilter` block is documented below.
     */
    srcFilters?: pulumi.Input<pulumi.Input<inputs.firewall.VipSrcFilter>[]>;
    /**
     * Interfaces to which the VIP applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
     */
    srcintfFilters?: pulumi.Input<pulumi.Input<inputs.firewall.VipSrcintfFilter>[]>;
    /**
     * Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
     */
    sslAcceptFfdheGroups?: pulumi.Input<string>;
    /**
     * Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
     */
    sslAlgorithm?: pulumi.Input<string>;
    /**
     * The name of the SSL certificate to use for SSL acceleration.
     */
    sslCertificate?: pulumi.Input<string>;
    /**
     * SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `sslCipherSuites` block is documented below.
     */
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.firewall.VipSslCipherSuite>[]>;
    /**
     * Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
     */
    sslClientFallback?: pulumi.Input<string>;
    /**
     * Maximum length of data in MB before triggering a client rekey (0 = disable).
     */
    sslClientRekeyCount?: pulumi.Input<number>;
    /**
     * Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
     */
    sslClientRenegotiation?: pulumi.Input<string>;
    /**
     * Maximum number of client to FortiGate SSL session states to keep.
     */
    sslClientSessionStateMax?: pulumi.Input<number>;
    /**
     * Number of minutes to keep client to FortiGate SSL session state.
     */
    sslClientSessionStateTimeout?: pulumi.Input<number>;
    /**
     * How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
     */
    sslClientSessionStateType?: pulumi.Input<string>;
    /**
     * Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
     */
    sslDhBits?: pulumi.Input<string>;
    /**
     * Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
     */
    sslHpkp?: pulumi.Input<string>;
    /**
     * Number of seconds the client should honour the HPKP setting.
     */
    sslHpkpAge?: pulumi.Input<number>;
    /**
     * Certificate to generate backup HPKP pin from.
     */
    sslHpkpBackup?: pulumi.Input<string>;
    /**
     * Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
     */
    sslHpkpIncludeSubdomains?: pulumi.Input<string>;
    /**
     * Certificate to generate primary HPKP pin from.
     */
    sslHpkpPrimary?: pulumi.Input<string>;
    /**
     * URL to report HPKP violations to.
     */
    sslHpkpReportUri?: pulumi.Input<string>;
    /**
     * Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
     */
    sslHsts?: pulumi.Input<string>;
    /**
     * Number of seconds the client should honour the HSTS setting.
     */
    sslHstsAge?: pulumi.Input<number>;
    /**
     * Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
     */
    sslHstsIncludeSubdomains?: pulumi.Input<string>;
    /**
     * Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
     */
    sslHttpLocationConversion?: pulumi.Input<string>;
    /**
     * Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
     */
    sslHttpMatchHost?: pulumi.Input<string>;
    /**
     * Highest SSL/TLS version acceptable from a client.
     */
    sslMaxVersion?: pulumi.Input<string>;
    /**
     * Lowest SSL/TLS version acceptable from a client.
     */
    sslMinVersion?: pulumi.Input<string>;
    /**
     * Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
     */
    sslMode?: pulumi.Input<string>;
    /**
     * Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
     */
    sslPfs?: pulumi.Input<string>;
    /**
     * Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
     */
    sslSendEmptyFrags?: pulumi.Input<string>;
    /**
     * Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
     */
    sslServerAlgorithm?: pulumi.Input<string>;
    /**
     * SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslServerCipherSuites` block is documented below.
     */
    sslServerCipherSuites?: pulumi.Input<pulumi.Input<inputs.firewall.VipSslServerCipherSuite>[]>;
    /**
     * Highest SSL/TLS version acceptable from a server. Use the client setting by default.
     */
    sslServerMaxVersion?: pulumi.Input<string>;
    /**
     * Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
     */
    sslServerMinVersion?: pulumi.Input<string>;
    /**
     * Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
     */
    sslServerRenegotiation?: pulumi.Input<string>;
    /**
     * Maximum number of FortiGate to Server SSL session states to keep.
     */
    sslServerSessionStateMax?: pulumi.Input<number>;
    /**
     * Number of minutes to keep FortiGate to Server SSL session state.
     */
    sslServerSessionStateTimeout?: pulumi.Input<number>;
    /**
     * How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
     */
    sslServerSessionStateType?: pulumi.Input<string>;
    /**
     * Enable/disable VIP. Valid values: `disable`, `enable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Configure a static NAT, load balance, server load balance, DNS translation, or FQDN VIP.
     */
    type?: pulumi.Input<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
     */
    weblogicServer?: pulumi.Input<string>;
    /**
     * Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
     */
    websphereServer?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vip resource.
 */
export interface VipArgs {
    /**
     * Enable/disable adding NAT46 route. Valid values: `disable`, `enable`.
     */
    addNat46Route?: pulumi.Input<string>;
    /**
     * Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
     */
    arpReply?: pulumi.Input<string>;
    /**
     * Color of icon on the GUI.
     */
    color?: pulumi.Input<number>;
    /**
     * Comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * DNS mapping TTL (Set to zero to use TTL in DNS response, default = 0).
     */
    dnsMappingTtl?: pulumi.Input<number>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * External FQDN address name. The structure of `extaddr` block is documented below.
     */
    extaddrs?: pulumi.Input<pulumi.Input<inputs.firewall.VipExtaddr>[]>;
    /**
     * Interface connected to the source network that receives the packets that will be forwarded to the destination network.
     */
    extintf?: pulumi.Input<string>;
    /**
     * IP address or address range on the external interface that you want to map to an address or address range on the destination network.
     */
    extip?: pulumi.Input<string>;
    /**
     * Incoming port number range that you want to map to a port number range on the destination network.
     */
    extport?: pulumi.Input<string>;
    /**
     * Custom defined ID.
     */
    fosid?: pulumi.Input<number>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Enable to have the VIP send gratuitous ARPs. 0=disabled. Set from 5 up to 8640000 seconds to enable.
     */
    gratuitousArpInterval?: pulumi.Input<number>;
    /**
     * Domain to use when integrating with FortiGSLB.
     */
    gslbDomainName?: pulumi.Input<string>;
    /**
     * Hostname to use within the configured FortiGSLB domain.
     */
    gslbHostname?: pulumi.Input<string>;
    /**
     * Publicly accessible IP addresses for the FortiGSLB service. The structure of `gslbPublicIps` block is documented below.
     */
    gslbPublicIps?: pulumi.Input<pulumi.Input<inputs.firewall.VipGslbPublicIp>[]>;
    /**
     * Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
     */
    h2Support?: pulumi.Input<string>;
    /**
     * Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
     */
    h3Support?: pulumi.Input<string>;
    /**
     * Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
     */
    httpCookieAge?: pulumi.Input<number>;
    /**
     * Domain that HTTP cookie persistence should apply to.
     */
    httpCookieDomain?: pulumi.Input<string>;
    /**
     * Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
     */
    httpCookieDomainFromHost?: pulumi.Input<string>;
    /**
     * Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
     */
    httpCookieGeneration?: pulumi.Input<number>;
    /**
     * Limit HTTP cookie persistence to the specified path.
     */
    httpCookiePath?: pulumi.Input<string>;
    /**
     * Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
     */
    httpCookieShare?: pulumi.Input<string>;
    /**
     * For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
     */
    httpIpHeader?: pulumi.Input<string>;
    /**
     * For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
     */
    httpIpHeaderName?: pulumi.Input<string>;
    /**
     * Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
     */
    httpMultiplex?: pulumi.Input<string>;
    /**
     * Maximum number of concurrent requests that a multiplex server can handle (default = unlimited).
     */
    httpMultiplexMaxConcurrentRequest?: pulumi.Input<number>;
    /**
     * Maximum number of requests that a multiplex server can handle before disconnecting sessions (default = unlimited).
     */
    httpMultiplexMaxRequest?: pulumi.Input<number>;
    /**
     * Time-to-live for idle connections to servers.
     */
    httpMultiplexTtl?: pulumi.Input<number>;
    /**
     * Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
     */
    httpRedirect?: pulumi.Input<string>;
    /**
     * Maximum supported HTTP versions. default = HTTP2 Valid values: `http1`, `http2`.
     */
    httpSupportedMaxVersion?: pulumi.Input<string>;
    /**
     * Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
     */
    httpsCookieSecure?: pulumi.Input<string>;
    /**
     * Start-mapped-IPv6-address [-end mapped-IPv6-address].
     */
    ipv6Mappedip?: pulumi.Input<string>;
    /**
     * IPv6 port number range on the destination network to which the external port number range is mapped.
     */
    ipv6Mappedport?: pulumi.Input<string>;
    /**
     * Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
     */
    ldbMethod?: pulumi.Input<string>;
    /**
     * Mapped FQDN address name.
     */
    mappedAddr?: pulumi.Input<string>;
    /**
     * IP address or address range on the destination network to which the external IP address is mapped. The structure of `mappedip` block is documented below.
     */
    mappedips?: pulumi.Input<pulumi.Input<inputs.firewall.VipMappedip>[]>;
    /**
     * Port number range on the destination network to which the external port number range is mapped.
     */
    mappedport?: pulumi.Input<string>;
    /**
     * Maximum number of incomplete connections.
     */
    maxEmbryonicConnections?: pulumi.Input<number>;
    /**
     * Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
     */
    monitors?: pulumi.Input<pulumi.Input<inputs.firewall.VipMonitor>[]>;
    /**
     * Virtual IP name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable NAT44. Valid values: `disable`, `enable`.
     */
    nat44?: pulumi.Input<string>;
    /**
     * Enable/disable NAT46. Valid values: `disable`, `enable`.
     */
    nat46?: pulumi.Input<string>;
    /**
     * Enable/disable forcing the source NAT mapped IP to the external IP for all traffic. Valid values: `disable`, `enable`.
     */
    natSourceVip?: pulumi.Input<string>;
    /**
     * Enable/disable one click GSLB server integration with FortiGSLB. Valid values: `disable`, `enable`.
     */
    oneClickGslbServer?: pulumi.Input<string>;
    /**
     * Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
     */
    outlookWebAccess?: pulumi.Input<string>;
    /**
     * Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
     */
    persistence?: pulumi.Input<string>;
    /**
     * Enable/disable port forwarding. Valid values: `disable`, `enable`.
     */
    portforward?: pulumi.Input<string>;
    /**
     * Port mapping type. Valid values: `1-to-1`, `m-to-n`.
     */
    portmappingType?: pulumi.Input<string>;
    /**
     * Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`, `icmp`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * QUIC setting. The structure of `quic` block is documented below.
     */
    quic?: pulumi.Input<inputs.firewall.VipQuic>;
    /**
     * Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
     */
    realservers?: pulumi.Input<pulumi.Input<inputs.firewall.VipRealserver>[]>;
    /**
     * Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
     */
    serverType?: pulumi.Input<string>;
    /**
     * Service name. The structure of `service` block is documented below.
     */
    services?: pulumi.Input<pulumi.Input<inputs.firewall.VipService>[]>;
    /**
     * Source address filter. Each address must be either an IP/subnet (x.x.x.x/n) or a range (x.x.x.x-y.y.y.y). Separate addresses with spaces. The structure of `srcFilter` block is documented below.
     */
    srcFilters?: pulumi.Input<pulumi.Input<inputs.firewall.VipSrcFilter>[]>;
    /**
     * Interfaces to which the VIP applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
     */
    srcintfFilters?: pulumi.Input<pulumi.Input<inputs.firewall.VipSrcintfFilter>[]>;
    /**
     * Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
     */
    sslAcceptFfdheGroups?: pulumi.Input<string>;
    /**
     * Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
     */
    sslAlgorithm?: pulumi.Input<string>;
    /**
     * The name of the SSL certificate to use for SSL acceleration.
     */
    sslCertificate?: pulumi.Input<string>;
    /**
     * SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `sslCipherSuites` block is documented below.
     */
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.firewall.VipSslCipherSuite>[]>;
    /**
     * Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
     */
    sslClientFallback?: pulumi.Input<string>;
    /**
     * Maximum length of data in MB before triggering a client rekey (0 = disable).
     */
    sslClientRekeyCount?: pulumi.Input<number>;
    /**
     * Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
     */
    sslClientRenegotiation?: pulumi.Input<string>;
    /**
     * Maximum number of client to FortiGate SSL session states to keep.
     */
    sslClientSessionStateMax?: pulumi.Input<number>;
    /**
     * Number of minutes to keep client to FortiGate SSL session state.
     */
    sslClientSessionStateTimeout?: pulumi.Input<number>;
    /**
     * How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
     */
    sslClientSessionStateType?: pulumi.Input<string>;
    /**
     * Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
     */
    sslDhBits?: pulumi.Input<string>;
    /**
     * Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
     */
    sslHpkp?: pulumi.Input<string>;
    /**
     * Number of seconds the client should honour the HPKP setting.
     */
    sslHpkpAge?: pulumi.Input<number>;
    /**
     * Certificate to generate backup HPKP pin from.
     */
    sslHpkpBackup?: pulumi.Input<string>;
    /**
     * Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
     */
    sslHpkpIncludeSubdomains?: pulumi.Input<string>;
    /**
     * Certificate to generate primary HPKP pin from.
     */
    sslHpkpPrimary?: pulumi.Input<string>;
    /**
     * URL to report HPKP violations to.
     */
    sslHpkpReportUri?: pulumi.Input<string>;
    /**
     * Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
     */
    sslHsts?: pulumi.Input<string>;
    /**
     * Number of seconds the client should honour the HSTS setting.
     */
    sslHstsAge?: pulumi.Input<number>;
    /**
     * Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
     */
    sslHstsIncludeSubdomains?: pulumi.Input<string>;
    /**
     * Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
     */
    sslHttpLocationConversion?: pulumi.Input<string>;
    /**
     * Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
     */
    sslHttpMatchHost?: pulumi.Input<string>;
    /**
     * Highest SSL/TLS version acceptable from a client.
     */
    sslMaxVersion?: pulumi.Input<string>;
    /**
     * Lowest SSL/TLS version acceptable from a client.
     */
    sslMinVersion?: pulumi.Input<string>;
    /**
     * Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
     */
    sslMode?: pulumi.Input<string>;
    /**
     * Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
     */
    sslPfs?: pulumi.Input<string>;
    /**
     * Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
     */
    sslSendEmptyFrags?: pulumi.Input<string>;
    /**
     * Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
     */
    sslServerAlgorithm?: pulumi.Input<string>;
    /**
     * SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslServerCipherSuites` block is documented below.
     */
    sslServerCipherSuites?: pulumi.Input<pulumi.Input<inputs.firewall.VipSslServerCipherSuite>[]>;
    /**
     * Highest SSL/TLS version acceptable from a server. Use the client setting by default.
     */
    sslServerMaxVersion?: pulumi.Input<string>;
    /**
     * Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
     */
    sslServerMinVersion?: pulumi.Input<string>;
    /**
     * Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
     */
    sslServerRenegotiation?: pulumi.Input<string>;
    /**
     * Maximum number of FortiGate to Server SSL session states to keep.
     */
    sslServerSessionStateMax?: pulumi.Input<number>;
    /**
     * Number of minutes to keep FortiGate to Server SSL session state.
     */
    sslServerSessionStateTimeout?: pulumi.Input<number>;
    /**
     * How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
     */
    sslServerSessionStateType?: pulumi.Input<string>;
    /**
     * Enable/disable VIP. Valid values: `disable`, `enable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Configure a static NAT, load balance, server load balance, DNS translation, or FQDN VIP.
     */
    type?: pulumi.Input<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
     */
    weblogicServer?: pulumi.Input<string>;
    /**
     * Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
     */
    websphereServer?: pulumi.Input<string>;
}
