// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessproxyArgs, AccessproxyState } from "./accessproxy";
export type Accessproxy = import("./accessproxy").Accessproxy;
export const Accessproxy: typeof import("./accessproxy").Accessproxy = null as any;
utilities.lazyLoad(exports, ["Accessproxy"], () => require("./accessproxy"));

export { Accessproxy6Args, Accessproxy6State } from "./accessproxy6";
export type Accessproxy6 = import("./accessproxy6").Accessproxy6;
export const Accessproxy6: typeof import("./accessproxy6").Accessproxy6 = null as any;
utilities.lazyLoad(exports, ["Accessproxy6"], () => require("./accessproxy6"));

export { AccessproxysshclientcertArgs, AccessproxysshclientcertState } from "./accessproxysshclientcert";
export type Accessproxysshclientcert = import("./accessproxysshclientcert").Accessproxysshclientcert;
export const Accessproxysshclientcert: typeof import("./accessproxysshclientcert").Accessproxysshclientcert = null as any;
utilities.lazyLoad(exports, ["Accessproxysshclientcert"], () => require("./accessproxysshclientcert"));

export { AccessproxyvirtualhostArgs, AccessproxyvirtualhostState } from "./accessproxyvirtualhost";
export type Accessproxyvirtualhost = import("./accessproxyvirtualhost").Accessproxyvirtualhost;
export const Accessproxyvirtualhost: typeof import("./accessproxyvirtualhost").Accessproxyvirtualhost = null as any;
utilities.lazyLoad(exports, ["Accessproxyvirtualhost"], () => require("./accessproxyvirtualhost"));

export { AddressArgs, AddressState } from "./address";
export type Address = import("./address").Address;
export const Address: typeof import("./address").Address = null as any;
utilities.lazyLoad(exports, ["Address"], () => require("./address"));

export { Address6Args, Address6State } from "./address6";
export type Address6 = import("./address6").Address6;
export const Address6: typeof import("./address6").Address6 = null as any;
utilities.lazyLoad(exports, ["Address6"], () => require("./address6"));

export { Address6templateArgs, Address6templateState } from "./address6template";
export type Address6template = import("./address6template").Address6template;
export const Address6template: typeof import("./address6template").Address6template = null as any;
utilities.lazyLoad(exports, ["Address6template"], () => require("./address6template"));

export { AddrgrpArgs, AddrgrpState } from "./addrgrp";
export type Addrgrp = import("./addrgrp").Addrgrp;
export const Addrgrp: typeof import("./addrgrp").Addrgrp = null as any;
utilities.lazyLoad(exports, ["Addrgrp"], () => require("./addrgrp"));

export { Addrgrp6Args, Addrgrp6State } from "./addrgrp6";
export type Addrgrp6 = import("./addrgrp6").Addrgrp6;
export const Addrgrp6: typeof import("./addrgrp6").Addrgrp6 = null as any;
utilities.lazyLoad(exports, ["Addrgrp6"], () => require("./addrgrp6"));

export { AuthportalArgs, AuthportalState } from "./authportal";
export type Authportal = import("./authportal").Authportal;
export const Authportal: typeof import("./authportal").Authportal = null as any;
utilities.lazyLoad(exports, ["Authportal"], () => require("./authportal"));

export { CentralsnatmapArgs, CentralsnatmapState } from "./centralsnatmap";
export type Centralsnatmap = import("./centralsnatmap").Centralsnatmap;
export const Centralsnatmap: typeof import("./centralsnatmap").Centralsnatmap = null as any;
utilities.lazyLoad(exports, ["Centralsnatmap"], () => require("./centralsnatmap"));

export { CentralsnatmapMoveArgs, CentralsnatmapMoveState } from "./centralsnatmapMove";
export type CentralsnatmapMove = import("./centralsnatmapMove").CentralsnatmapMove;
export const CentralsnatmapMove: typeof import("./centralsnatmapMove").CentralsnatmapMove = null as any;
utilities.lazyLoad(exports, ["CentralsnatmapMove"], () => require("./centralsnatmapMove"));

export { CentralsnatmapSortArgs, CentralsnatmapSortState } from "./centralsnatmapSort";
export type CentralsnatmapSort = import("./centralsnatmapSort").CentralsnatmapSort;
export const CentralsnatmapSort: typeof import("./centralsnatmapSort").CentralsnatmapSort = null as any;
utilities.lazyLoad(exports, ["CentralsnatmapSort"], () => require("./centralsnatmapSort"));

export { CityArgs, CityState } from "./city";
export type City = import("./city").City;
export const City: typeof import("./city").City = null as any;
utilities.lazyLoad(exports, ["City"], () => require("./city"));

export { CountryArgs, CountryState } from "./country";
export type Country = import("./country").Country;
export const Country: typeof import("./country").Country = null as any;
utilities.lazyLoad(exports, ["Country"], () => require("./country"));

export { DecryptedtrafficmirrorArgs, DecryptedtrafficmirrorState } from "./decryptedtrafficmirror";
export type Decryptedtrafficmirror = import("./decryptedtrafficmirror").Decryptedtrafficmirror;
export const Decryptedtrafficmirror: typeof import("./decryptedtrafficmirror").Decryptedtrafficmirror = null as any;
utilities.lazyLoad(exports, ["Decryptedtrafficmirror"], () => require("./decryptedtrafficmirror"));

export { DnstranslationArgs, DnstranslationState } from "./dnstranslation";
export type Dnstranslation = import("./dnstranslation").Dnstranslation;
export const Dnstranslation: typeof import("./dnstranslation").Dnstranslation = null as any;
utilities.lazyLoad(exports, ["Dnstranslation"], () => require("./dnstranslation"));

export { DoSpolicyArgs, DoSpolicyState } from "./doSpolicy";
export type DoSpolicy = import("./doSpolicy").DoSpolicy;
export const DoSpolicy: typeof import("./doSpolicy").DoSpolicy = null as any;
utilities.lazyLoad(exports, ["DoSpolicy"], () => require("./doSpolicy"));

export { DoSpolicy6Args, DoSpolicy6State } from "./doSpolicy6";
export type DoSpolicy6 = import("./doSpolicy6").DoSpolicy6;
export const DoSpolicy6: typeof import("./doSpolicy6").DoSpolicy6 = null as any;
utilities.lazyLoad(exports, ["DoSpolicy6"], () => require("./doSpolicy6"));

export { GetAddressArgs, GetAddressResult, GetAddressOutputArgs } from "./getAddress";
export const getAddress: typeof import("./getAddress").getAddress = null as any;
export const getAddressOutput: typeof import("./getAddress").getAddressOutput = null as any;
utilities.lazyLoad(exports, ["getAddress","getAddressOutput"], () => require("./getAddress"));

export { GetAddress6Args, GetAddress6Result, GetAddress6OutputArgs } from "./getAddress6";
export const getAddress6: typeof import("./getAddress6").getAddress6 = null as any;
export const getAddress6Output: typeof import("./getAddress6").getAddress6Output = null as any;
utilities.lazyLoad(exports, ["getAddress6","getAddress6Output"], () => require("./getAddress6"));

export { GetAddress6listArgs, GetAddress6listResult, GetAddress6listOutputArgs } from "./getAddress6list";
export const getAddress6list: typeof import("./getAddress6list").getAddress6list = null as any;
export const getAddress6listOutput: typeof import("./getAddress6list").getAddress6listOutput = null as any;
utilities.lazyLoad(exports, ["getAddress6list","getAddress6listOutput"], () => require("./getAddress6list"));

export { GetAddress6templateArgs, GetAddress6templateResult, GetAddress6templateOutputArgs } from "./getAddress6template";
export const getAddress6template: typeof import("./getAddress6template").getAddress6template = null as any;
export const getAddress6templateOutput: typeof import("./getAddress6template").getAddress6templateOutput = null as any;
utilities.lazyLoad(exports, ["getAddress6template","getAddress6templateOutput"], () => require("./getAddress6template"));

export { GetAddress6templatelistArgs, GetAddress6templatelistResult, GetAddress6templatelistOutputArgs } from "./getAddress6templatelist";
export const getAddress6templatelist: typeof import("./getAddress6templatelist").getAddress6templatelist = null as any;
export const getAddress6templatelistOutput: typeof import("./getAddress6templatelist").getAddress6templatelistOutput = null as any;
utilities.lazyLoad(exports, ["getAddress6templatelist","getAddress6templatelistOutput"], () => require("./getAddress6templatelist"));

export { GetAddresslistArgs, GetAddresslistResult, GetAddresslistOutputArgs } from "./getAddresslist";
export const getAddresslist: typeof import("./getAddresslist").getAddresslist = null as any;
export const getAddresslistOutput: typeof import("./getAddresslist").getAddresslistOutput = null as any;
utilities.lazyLoad(exports, ["getAddresslist","getAddresslistOutput"], () => require("./getAddresslist"));

export { GetAddrgrpArgs, GetAddrgrpResult, GetAddrgrpOutputArgs } from "./getAddrgrp";
export const getAddrgrp: typeof import("./getAddrgrp").getAddrgrp = null as any;
export const getAddrgrpOutput: typeof import("./getAddrgrp").getAddrgrpOutput = null as any;
utilities.lazyLoad(exports, ["getAddrgrp","getAddrgrpOutput"], () => require("./getAddrgrp"));

export { GetAddrgrp6Args, GetAddrgrp6Result, GetAddrgrp6OutputArgs } from "./getAddrgrp6";
export const getAddrgrp6: typeof import("./getAddrgrp6").getAddrgrp6 = null as any;
export const getAddrgrp6Output: typeof import("./getAddrgrp6").getAddrgrp6Output = null as any;
utilities.lazyLoad(exports, ["getAddrgrp6","getAddrgrp6Output"], () => require("./getAddrgrp6"));

export { GetAddrgrp6listArgs, GetAddrgrp6listResult, GetAddrgrp6listOutputArgs } from "./getAddrgrp6list";
export const getAddrgrp6list: typeof import("./getAddrgrp6list").getAddrgrp6list = null as any;
export const getAddrgrp6listOutput: typeof import("./getAddrgrp6list").getAddrgrp6listOutput = null as any;
utilities.lazyLoad(exports, ["getAddrgrp6list","getAddrgrp6listOutput"], () => require("./getAddrgrp6list"));

export { GetAddrgrplistArgs, GetAddrgrplistResult, GetAddrgrplistOutputArgs } from "./getAddrgrplist";
export const getAddrgrplist: typeof import("./getAddrgrplist").getAddrgrplist = null as any;
export const getAddrgrplistOutput: typeof import("./getAddrgrplist").getAddrgrplistOutput = null as any;
utilities.lazyLoad(exports, ["getAddrgrplist","getAddrgrplistOutput"], () => require("./getAddrgrplist"));

export { GetCentralsnatmapArgs, GetCentralsnatmapResult, GetCentralsnatmapOutputArgs } from "./getCentralsnatmap";
export const getCentralsnatmap: typeof import("./getCentralsnatmap").getCentralsnatmap = null as any;
export const getCentralsnatmapOutput: typeof import("./getCentralsnatmap").getCentralsnatmapOutput = null as any;
utilities.lazyLoad(exports, ["getCentralsnatmap","getCentralsnatmapOutput"], () => require("./getCentralsnatmap"));

export { GetCentralsnatmaplistArgs, GetCentralsnatmaplistResult, GetCentralsnatmaplistOutputArgs } from "./getCentralsnatmaplist";
export const getCentralsnatmaplist: typeof import("./getCentralsnatmaplist").getCentralsnatmaplist = null as any;
export const getCentralsnatmaplistOutput: typeof import("./getCentralsnatmaplist").getCentralsnatmaplistOutput = null as any;
utilities.lazyLoad(exports, ["getCentralsnatmaplist","getCentralsnatmaplistOutput"], () => require("./getCentralsnatmaplist"));

export { GetDoSpolicyArgs, GetDoSpolicyResult, GetDoSpolicyOutputArgs } from "./getDoSpolicy";
export const getDoSpolicy: typeof import("./getDoSpolicy").getDoSpolicy = null as any;
export const getDoSpolicyOutput: typeof import("./getDoSpolicy").getDoSpolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDoSpolicy","getDoSpolicyOutput"], () => require("./getDoSpolicy"));

export { GetDoSpolicy6Args, GetDoSpolicy6Result, GetDoSpolicy6OutputArgs } from "./getDoSpolicy6";
export const getDoSpolicy6: typeof import("./getDoSpolicy6").getDoSpolicy6 = null as any;
export const getDoSpolicy6Output: typeof import("./getDoSpolicy6").getDoSpolicy6Output = null as any;
utilities.lazyLoad(exports, ["getDoSpolicy6","getDoSpolicy6Output"], () => require("./getDoSpolicy6"));

export { GetDoSpolicy6listArgs, GetDoSpolicy6listResult, GetDoSpolicy6listOutputArgs } from "./getDoSpolicy6list";
export const getDoSpolicy6list: typeof import("./getDoSpolicy6list").getDoSpolicy6list = null as any;
export const getDoSpolicy6listOutput: typeof import("./getDoSpolicy6list").getDoSpolicy6listOutput = null as any;
utilities.lazyLoad(exports, ["getDoSpolicy6list","getDoSpolicy6listOutput"], () => require("./getDoSpolicy6list"));

export { GetDoSpolicylistArgs, GetDoSpolicylistResult, GetDoSpolicylistOutputArgs } from "./getDoSpolicylist";
export const getDoSpolicylist: typeof import("./getDoSpolicylist").getDoSpolicylist = null as any;
export const getDoSpolicylistOutput: typeof import("./getDoSpolicylist").getDoSpolicylistOutput = null as any;
utilities.lazyLoad(exports, ["getDoSpolicylist","getDoSpolicylistOutput"], () => require("./getDoSpolicylist"));

export { GetInternetserviceArgs, GetInternetserviceResult, GetInternetserviceOutputArgs } from "./getInternetservice";
export const getInternetservice: typeof import("./getInternetservice").getInternetservice = null as any;
export const getInternetserviceOutput: typeof import("./getInternetservice").getInternetserviceOutput = null as any;
utilities.lazyLoad(exports, ["getInternetservice","getInternetserviceOutput"], () => require("./getInternetservice"));

export { GetInternetservicecustomArgs, GetInternetservicecustomResult, GetInternetservicecustomOutputArgs } from "./getInternetservicecustom";
export const getInternetservicecustom: typeof import("./getInternetservicecustom").getInternetservicecustom = null as any;
export const getInternetservicecustomOutput: typeof import("./getInternetservicecustom").getInternetservicecustomOutput = null as any;
utilities.lazyLoad(exports, ["getInternetservicecustom","getInternetservicecustomOutput"], () => require("./getInternetservicecustom"));

export { GetInternetservicecustomgroupArgs, GetInternetservicecustomgroupResult, GetInternetservicecustomgroupOutputArgs } from "./getInternetservicecustomgroup";
export const getInternetservicecustomgroup: typeof import("./getInternetservicecustomgroup").getInternetservicecustomgroup = null as any;
export const getInternetservicecustomgroupOutput: typeof import("./getInternetservicecustomgroup").getInternetservicecustomgroupOutput = null as any;
utilities.lazyLoad(exports, ["getInternetservicecustomgroup","getInternetservicecustomgroupOutput"], () => require("./getInternetservicecustomgroup"));

export { GetInternetservicecustomgrouplistArgs, GetInternetservicecustomgrouplistResult, GetInternetservicecustomgrouplistOutputArgs } from "./getInternetservicecustomgrouplist";
export const getInternetservicecustomgrouplist: typeof import("./getInternetservicecustomgrouplist").getInternetservicecustomgrouplist = null as any;
export const getInternetservicecustomgrouplistOutput: typeof import("./getInternetservicecustomgrouplist").getInternetservicecustomgrouplistOutput = null as any;
utilities.lazyLoad(exports, ["getInternetservicecustomgrouplist","getInternetservicecustomgrouplistOutput"], () => require("./getInternetservicecustomgrouplist"));

export { GetInternetservicecustomlistArgs, GetInternetservicecustomlistResult, GetInternetservicecustomlistOutputArgs } from "./getInternetservicecustomlist";
export const getInternetservicecustomlist: typeof import("./getInternetservicecustomlist").getInternetservicecustomlist = null as any;
export const getInternetservicecustomlistOutput: typeof import("./getInternetservicecustomlist").getInternetservicecustomlistOutput = null as any;
utilities.lazyLoad(exports, ["getInternetservicecustomlist","getInternetservicecustomlistOutput"], () => require("./getInternetservicecustomlist"));

export { GetInternetservicedefinitionArgs, GetInternetservicedefinitionResult, GetInternetservicedefinitionOutputArgs } from "./getInternetservicedefinition";
export const getInternetservicedefinition: typeof import("./getInternetservicedefinition").getInternetservicedefinition = null as any;
export const getInternetservicedefinitionOutput: typeof import("./getInternetservicedefinition").getInternetservicedefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getInternetservicedefinition","getInternetservicedefinitionOutput"], () => require("./getInternetservicedefinition"));

export { GetInternetservicedefinitionlistArgs, GetInternetservicedefinitionlistResult, GetInternetservicedefinitionlistOutputArgs } from "./getInternetservicedefinitionlist";
export const getInternetservicedefinitionlist: typeof import("./getInternetservicedefinitionlist").getInternetservicedefinitionlist = null as any;
export const getInternetservicedefinitionlistOutput: typeof import("./getInternetservicedefinitionlist").getInternetservicedefinitionlistOutput = null as any;
utilities.lazyLoad(exports, ["getInternetservicedefinitionlist","getInternetservicedefinitionlistOutput"], () => require("./getInternetservicedefinitionlist"));

export { GetInternetserviceextensionArgs, GetInternetserviceextensionResult, GetInternetserviceextensionOutputArgs } from "./getInternetserviceextension";
export const getInternetserviceextension: typeof import("./getInternetserviceextension").getInternetserviceextension = null as any;
export const getInternetserviceextensionOutput: typeof import("./getInternetserviceextension").getInternetserviceextensionOutput = null as any;
utilities.lazyLoad(exports, ["getInternetserviceextension","getInternetserviceextensionOutput"], () => require("./getInternetserviceextension"));

export { GetInternetserviceextensionlistArgs, GetInternetserviceextensionlistResult, GetInternetserviceextensionlistOutputArgs } from "./getInternetserviceextensionlist";
export const getInternetserviceextensionlist: typeof import("./getInternetserviceextensionlist").getInternetserviceextensionlist = null as any;
export const getInternetserviceextensionlistOutput: typeof import("./getInternetserviceextensionlist").getInternetserviceextensionlistOutput = null as any;
utilities.lazyLoad(exports, ["getInternetserviceextensionlist","getInternetserviceextensionlistOutput"], () => require("./getInternetserviceextensionlist"));

export { GetInternetservicegroupArgs, GetInternetservicegroupResult, GetInternetservicegroupOutputArgs } from "./getInternetservicegroup";
export const getInternetservicegroup: typeof import("./getInternetservicegroup").getInternetservicegroup = null as any;
export const getInternetservicegroupOutput: typeof import("./getInternetservicegroup").getInternetservicegroupOutput = null as any;
utilities.lazyLoad(exports, ["getInternetservicegroup","getInternetservicegroupOutput"], () => require("./getInternetservicegroup"));

export { GetInternetservicegrouplistArgs, GetInternetservicegrouplistResult, GetInternetservicegrouplistOutputArgs } from "./getInternetservicegrouplist";
export const getInternetservicegrouplist: typeof import("./getInternetservicegrouplist").getInternetservicegrouplist = null as any;
export const getInternetservicegrouplistOutput: typeof import("./getInternetservicegrouplist").getInternetservicegrouplistOutput = null as any;
utilities.lazyLoad(exports, ["getInternetservicegrouplist","getInternetservicegrouplistOutput"], () => require("./getInternetservicegrouplist"));

export { GetInternetservicelistArgs, GetInternetservicelistResult, GetInternetservicelistOutputArgs } from "./getInternetservicelist";
export const getInternetservicelist: typeof import("./getInternetservicelist").getInternetservicelist = null as any;
export const getInternetservicelistOutput: typeof import("./getInternetservicelist").getInternetservicelistOutput = null as any;
utilities.lazyLoad(exports, ["getInternetservicelist","getInternetservicelistOutput"], () => require("./getInternetservicelist"));

export { GetIpv6ehfilterArgs, GetIpv6ehfilterResult, GetIpv6ehfilterOutputArgs } from "./getIpv6ehfilter";
export const getIpv6ehfilter: typeof import("./getIpv6ehfilter").getIpv6ehfilter = null as any;
export const getIpv6ehfilterOutput: typeof import("./getIpv6ehfilter").getIpv6ehfilterOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6ehfilter","getIpv6ehfilterOutput"], () => require("./getIpv6ehfilter"));

export { GetMulticastaddressArgs, GetMulticastaddressResult, GetMulticastaddressOutputArgs } from "./getMulticastaddress";
export const getMulticastaddress: typeof import("./getMulticastaddress").getMulticastaddress = null as any;
export const getMulticastaddressOutput: typeof import("./getMulticastaddress").getMulticastaddressOutput = null as any;
utilities.lazyLoad(exports, ["getMulticastaddress","getMulticastaddressOutput"], () => require("./getMulticastaddress"));

export { GetMulticastaddress6Args, GetMulticastaddress6Result, GetMulticastaddress6OutputArgs } from "./getMulticastaddress6";
export const getMulticastaddress6: typeof import("./getMulticastaddress6").getMulticastaddress6 = null as any;
export const getMulticastaddress6Output: typeof import("./getMulticastaddress6").getMulticastaddress6Output = null as any;
utilities.lazyLoad(exports, ["getMulticastaddress6","getMulticastaddress6Output"], () => require("./getMulticastaddress6"));

export { GetMulticastaddress6listArgs, GetMulticastaddress6listResult, GetMulticastaddress6listOutputArgs } from "./getMulticastaddress6list";
export const getMulticastaddress6list: typeof import("./getMulticastaddress6list").getMulticastaddress6list = null as any;
export const getMulticastaddress6listOutput: typeof import("./getMulticastaddress6list").getMulticastaddress6listOutput = null as any;
utilities.lazyLoad(exports, ["getMulticastaddress6list","getMulticastaddress6listOutput"], () => require("./getMulticastaddress6list"));

export { GetMulticastaddresslistArgs, GetMulticastaddresslistResult, GetMulticastaddresslistOutputArgs } from "./getMulticastaddresslist";
export const getMulticastaddresslist: typeof import("./getMulticastaddresslist").getMulticastaddresslist = null as any;
export const getMulticastaddresslistOutput: typeof import("./getMulticastaddresslist").getMulticastaddresslistOutput = null as any;
utilities.lazyLoad(exports, ["getMulticastaddresslist","getMulticastaddresslistOutput"], () => require("./getMulticastaddresslist"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { GetPolicy46Args, GetPolicy46Result, GetPolicy46OutputArgs } from "./getPolicy46";
export const getPolicy46: typeof import("./getPolicy46").getPolicy46 = null as any;
export const getPolicy46Output: typeof import("./getPolicy46").getPolicy46Output = null as any;
utilities.lazyLoad(exports, ["getPolicy46","getPolicy46Output"], () => require("./getPolicy46"));

export { GetPolicy46listArgs, GetPolicy46listResult, GetPolicy46listOutputArgs } from "./getPolicy46list";
export const getPolicy46list: typeof import("./getPolicy46list").getPolicy46list = null as any;
export const getPolicy46listOutput: typeof import("./getPolicy46list").getPolicy46listOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy46list","getPolicy46listOutput"], () => require("./getPolicy46list"));

export { GetPolicy6Args, GetPolicy6Result, GetPolicy6OutputArgs } from "./getPolicy6";
export const getPolicy6: typeof import("./getPolicy6").getPolicy6 = null as any;
export const getPolicy6Output: typeof import("./getPolicy6").getPolicy6Output = null as any;
utilities.lazyLoad(exports, ["getPolicy6","getPolicy6Output"], () => require("./getPolicy6"));

export { GetPolicy64Args, GetPolicy64Result, GetPolicy64OutputArgs } from "./getPolicy64";
export const getPolicy64: typeof import("./getPolicy64").getPolicy64 = null as any;
export const getPolicy64Output: typeof import("./getPolicy64").getPolicy64Output = null as any;
utilities.lazyLoad(exports, ["getPolicy64","getPolicy64Output"], () => require("./getPolicy64"));

export { GetPolicy64listArgs, GetPolicy64listResult, GetPolicy64listOutputArgs } from "./getPolicy64list";
export const getPolicy64list: typeof import("./getPolicy64list").getPolicy64list = null as any;
export const getPolicy64listOutput: typeof import("./getPolicy64list").getPolicy64listOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy64list","getPolicy64listOutput"], () => require("./getPolicy64list"));

export { GetPolicy6listArgs, GetPolicy6listResult, GetPolicy6listOutputArgs } from "./getPolicy6list";
export const getPolicy6list: typeof import("./getPolicy6list").getPolicy6list = null as any;
export const getPolicy6listOutput: typeof import("./getPolicy6list").getPolicy6listOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy6list","getPolicy6listOutput"], () => require("./getPolicy6list"));

export { GetPolicylistArgs, GetPolicylistResult, GetPolicylistOutputArgs } from "./getPolicylist";
export const getPolicylist: typeof import("./getPolicylist").getPolicylist = null as any;
export const getPolicylistOutput: typeof import("./getPolicylist").getPolicylistOutput = null as any;
utilities.lazyLoad(exports, ["getPolicylist","getPolicylistOutput"], () => require("./getPolicylist"));

export { GetProfileprotocoloptionsArgs, GetProfileprotocoloptionsResult, GetProfileprotocoloptionsOutputArgs } from "./getProfileprotocoloptions";
export const getProfileprotocoloptions: typeof import("./getProfileprotocoloptions").getProfileprotocoloptions = null as any;
export const getProfileprotocoloptionsOutput: typeof import("./getProfileprotocoloptions").getProfileprotocoloptionsOutput = null as any;
utilities.lazyLoad(exports, ["getProfileprotocoloptions","getProfileprotocoloptionsOutput"], () => require("./getProfileprotocoloptions"));

export { GetProfileprotocoloptionslistArgs, GetProfileprotocoloptionslistResult, GetProfileprotocoloptionslistOutputArgs } from "./getProfileprotocoloptionslist";
export const getProfileprotocoloptionslist: typeof import("./getProfileprotocoloptionslist").getProfileprotocoloptionslist = null as any;
export const getProfileprotocoloptionslistOutput: typeof import("./getProfileprotocoloptionslist").getProfileprotocoloptionslistOutput = null as any;
utilities.lazyLoad(exports, ["getProfileprotocoloptionslist","getProfileprotocoloptionslistOutput"], () => require("./getProfileprotocoloptionslist"));

export { GetProxyaddressArgs, GetProxyaddressResult, GetProxyaddressOutputArgs } from "./getProxyaddress";
export const getProxyaddress: typeof import("./getProxyaddress").getProxyaddress = null as any;
export const getProxyaddressOutput: typeof import("./getProxyaddress").getProxyaddressOutput = null as any;
utilities.lazyLoad(exports, ["getProxyaddress","getProxyaddressOutput"], () => require("./getProxyaddress"));

export { GetProxyaddresslistArgs, GetProxyaddresslistResult, GetProxyaddresslistOutputArgs } from "./getProxyaddresslist";
export const getProxyaddresslist: typeof import("./getProxyaddresslist").getProxyaddresslist = null as any;
export const getProxyaddresslistOutput: typeof import("./getProxyaddresslist").getProxyaddresslistOutput = null as any;
utilities.lazyLoad(exports, ["getProxyaddresslist","getProxyaddresslistOutput"], () => require("./getProxyaddresslist"));

export { GetProxyaddrgrpArgs, GetProxyaddrgrpResult, GetProxyaddrgrpOutputArgs } from "./getProxyaddrgrp";
export const getProxyaddrgrp: typeof import("./getProxyaddrgrp").getProxyaddrgrp = null as any;
export const getProxyaddrgrpOutput: typeof import("./getProxyaddrgrp").getProxyaddrgrpOutput = null as any;
utilities.lazyLoad(exports, ["getProxyaddrgrp","getProxyaddrgrpOutput"], () => require("./getProxyaddrgrp"));

export { GetProxyaddrgrplistArgs, GetProxyaddrgrplistResult, GetProxyaddrgrplistOutputArgs } from "./getProxyaddrgrplist";
export const getProxyaddrgrplist: typeof import("./getProxyaddrgrplist").getProxyaddrgrplist = null as any;
export const getProxyaddrgrplistOutput: typeof import("./getProxyaddrgrplist").getProxyaddrgrplistOutput = null as any;
utilities.lazyLoad(exports, ["getProxyaddrgrplist","getProxyaddrgrplistOutput"], () => require("./getProxyaddrgrplist"));

export { GetProxypolicyArgs, GetProxypolicyResult, GetProxypolicyOutputArgs } from "./getProxypolicy";
export const getProxypolicy: typeof import("./getProxypolicy").getProxypolicy = null as any;
export const getProxypolicyOutput: typeof import("./getProxypolicy").getProxypolicyOutput = null as any;
utilities.lazyLoad(exports, ["getProxypolicy","getProxypolicyOutput"], () => require("./getProxypolicy"));

export { GetProxypolicylistArgs, GetProxypolicylistResult, GetProxypolicylistOutputArgs } from "./getProxypolicylist";
export const getProxypolicylist: typeof import("./getProxypolicylist").getProxypolicylist = null as any;
export const getProxypolicylistOutput: typeof import("./getProxypolicylist").getProxypolicylistOutput = null as any;
utilities.lazyLoad(exports, ["getProxypolicylist","getProxypolicylistOutput"], () => require("./getProxypolicylist"));

export { GlobalArgs, GlobalState } from "./global";
export type Global = import("./global").Global;
export const Global: typeof import("./global").Global = null as any;
utilities.lazyLoad(exports, ["Global"], () => require("./global"));

export { IdentitybasedrouteArgs, IdentitybasedrouteState } from "./identitybasedroute";
export type Identitybasedroute = import("./identitybasedroute").Identitybasedroute;
export const Identitybasedroute: typeof import("./identitybasedroute").Identitybasedroute = null as any;
utilities.lazyLoad(exports, ["Identitybasedroute"], () => require("./identitybasedroute"));

export { InterfacepolicyArgs, InterfacepolicyState } from "./interfacepolicy";
export type Interfacepolicy = import("./interfacepolicy").Interfacepolicy;
export const Interfacepolicy: typeof import("./interfacepolicy").Interfacepolicy = null as any;
utilities.lazyLoad(exports, ["Interfacepolicy"], () => require("./interfacepolicy"));

export { Interfacepolicy6Args, Interfacepolicy6State } from "./interfacepolicy6";
export type Interfacepolicy6 = import("./interfacepolicy6").Interfacepolicy6;
export const Interfacepolicy6: typeof import("./interfacepolicy6").Interfacepolicy6 = null as any;
utilities.lazyLoad(exports, ["Interfacepolicy6"], () => require("./interfacepolicy6"));

export { InternetserviceArgs, InternetserviceState } from "./internetservice";
export type Internetservice = import("./internetservice").Internetservice;
export const Internetservice: typeof import("./internetservice").Internetservice = null as any;
utilities.lazyLoad(exports, ["Internetservice"], () => require("./internetservice"));

export { InternetserviceadditionArgs, InternetserviceadditionState } from "./internetserviceaddition";
export type Internetserviceaddition = import("./internetserviceaddition").Internetserviceaddition;
export const Internetserviceaddition: typeof import("./internetserviceaddition").Internetserviceaddition = null as any;
utilities.lazyLoad(exports, ["Internetserviceaddition"], () => require("./internetserviceaddition"));

export { InternetserviceappendArgs, InternetserviceappendState } from "./internetserviceappend";
export type Internetserviceappend = import("./internetserviceappend").Internetserviceappend;
export const Internetserviceappend: typeof import("./internetserviceappend").Internetserviceappend = null as any;
utilities.lazyLoad(exports, ["Internetserviceappend"], () => require("./internetserviceappend"));

export { InternetservicebotnetArgs, InternetservicebotnetState } from "./internetservicebotnet";
export type Internetservicebotnet = import("./internetservicebotnet").Internetservicebotnet;
export const Internetservicebotnet: typeof import("./internetservicebotnet").Internetservicebotnet = null as any;
utilities.lazyLoad(exports, ["Internetservicebotnet"], () => require("./internetservicebotnet"));

export { InternetservicecustomArgs, InternetservicecustomState } from "./internetservicecustom";
export type Internetservicecustom = import("./internetservicecustom").Internetservicecustom;
export const Internetservicecustom: typeof import("./internetservicecustom").Internetservicecustom = null as any;
utilities.lazyLoad(exports, ["Internetservicecustom"], () => require("./internetservicecustom"));

export { InternetservicecustomgroupArgs, InternetservicecustomgroupState } from "./internetservicecustomgroup";
export type Internetservicecustomgroup = import("./internetservicecustomgroup").Internetservicecustomgroup;
export const Internetservicecustomgroup: typeof import("./internetservicecustomgroup").Internetservicecustomgroup = null as any;
utilities.lazyLoad(exports, ["Internetservicecustomgroup"], () => require("./internetservicecustomgroup"));

export { InternetservicedefinitionArgs, InternetservicedefinitionState } from "./internetservicedefinition";
export type Internetservicedefinition = import("./internetservicedefinition").Internetservicedefinition;
export const Internetservicedefinition: typeof import("./internetservicedefinition").Internetservicedefinition = null as any;
utilities.lazyLoad(exports, ["Internetservicedefinition"], () => require("./internetservicedefinition"));

export { InternetserviceextensionArgs, InternetserviceextensionState } from "./internetserviceextension";
export type Internetserviceextension = import("./internetserviceextension").Internetserviceextension;
export const Internetserviceextension: typeof import("./internetserviceextension").Internetserviceextension = null as any;
utilities.lazyLoad(exports, ["Internetserviceextension"], () => require("./internetserviceextension"));

export { InternetservicegroupArgs, InternetservicegroupState } from "./internetservicegroup";
export type Internetservicegroup = import("./internetservicegroup").Internetservicegroup;
export const Internetservicegroup: typeof import("./internetservicegroup").Internetservicegroup = null as any;
utilities.lazyLoad(exports, ["Internetservicegroup"], () => require("./internetservicegroup"));

export { InternetserviceipblreasonArgs, InternetserviceipblreasonState } from "./internetserviceipblreason";
export type Internetserviceipblreason = import("./internetserviceipblreason").Internetserviceipblreason;
export const Internetserviceipblreason: typeof import("./internetserviceipblreason").Internetserviceipblreason = null as any;
utilities.lazyLoad(exports, ["Internetserviceipblreason"], () => require("./internetserviceipblreason"));

export { InternetserviceipblvendorArgs, InternetserviceipblvendorState } from "./internetserviceipblvendor";
export type Internetserviceipblvendor = import("./internetserviceipblvendor").Internetserviceipblvendor;
export const Internetserviceipblvendor: typeof import("./internetserviceipblvendor").Internetserviceipblvendor = null as any;
utilities.lazyLoad(exports, ["Internetserviceipblvendor"], () => require("./internetserviceipblvendor"));

export { InternetservicelistArgs, InternetservicelistState } from "./internetservicelist";
export type Internetservicelist = import("./internetservicelist").Internetservicelist;
export const Internetservicelist: typeof import("./internetservicelist").Internetservicelist = null as any;
utilities.lazyLoad(exports, ["Internetservicelist"], () => require("./internetservicelist"));

export { InternetservicenameArgs, InternetservicenameState } from "./internetservicename";
export type Internetservicename = import("./internetservicename").Internetservicename;
export const Internetservicename: typeof import("./internetservicename").Internetservicename = null as any;
utilities.lazyLoad(exports, ["Internetservicename"], () => require("./internetservicename"));

export { InternetserviceownerArgs, InternetserviceownerState } from "./internetserviceowner";
export type Internetserviceowner = import("./internetserviceowner").Internetserviceowner;
export const Internetserviceowner: typeof import("./internetserviceowner").Internetserviceowner = null as any;
utilities.lazyLoad(exports, ["Internetserviceowner"], () => require("./internetserviceowner"));

export { InternetservicereputationArgs, InternetservicereputationState } from "./internetservicereputation";
export type Internetservicereputation = import("./internetservicereputation").Internetservicereputation;
export const Internetservicereputation: typeof import("./internetservicereputation").Internetservicereputation = null as any;
utilities.lazyLoad(exports, ["Internetservicereputation"], () => require("./internetservicereputation"));

export { InternetservicesubappArgs, InternetservicesubappState } from "./internetservicesubapp";
export type Internetservicesubapp = import("./internetservicesubapp").Internetservicesubapp;
export const Internetservicesubapp: typeof import("./internetservicesubapp").Internetservicesubapp = null as any;
utilities.lazyLoad(exports, ["Internetservicesubapp"], () => require("./internetservicesubapp"));

export { IppoolArgs, IppoolState } from "./ippool";
export type Ippool = import("./ippool").Ippool;
export const Ippool: typeof import("./ippool").Ippool = null as any;
utilities.lazyLoad(exports, ["Ippool"], () => require("./ippool"));

export { Ippool6Args, Ippool6State } from "./ippool6";
export type Ippool6 = import("./ippool6").Ippool6;
export const Ippool6: typeof import("./ippool6").Ippool6 = null as any;
utilities.lazyLoad(exports, ["Ippool6"], () => require("./ippool6"));

export { IptranslationArgs, IptranslationState } from "./iptranslation";
export type Iptranslation = import("./iptranslation").Iptranslation;
export const Iptranslation: typeof import("./iptranslation").Iptranslation = null as any;
utilities.lazyLoad(exports, ["Iptranslation"], () => require("./iptranslation"));

export { Ipv6ehfilterArgs, Ipv6ehfilterState } from "./ipv6ehfilter";
export type Ipv6ehfilter = import("./ipv6ehfilter").Ipv6ehfilter;
export const Ipv6ehfilter: typeof import("./ipv6ehfilter").Ipv6ehfilter = null as any;
utilities.lazyLoad(exports, ["Ipv6ehfilter"], () => require("./ipv6ehfilter"));

export { LdbmonitorArgs, LdbmonitorState } from "./ldbmonitor";
export type Ldbmonitor = import("./ldbmonitor").Ldbmonitor;
export const Ldbmonitor: typeof import("./ldbmonitor").Ldbmonitor = null as any;
utilities.lazyLoad(exports, ["Ldbmonitor"], () => require("./ldbmonitor"));

export { LocalinpolicyArgs, LocalinpolicyState } from "./localinpolicy";
export type Localinpolicy = import("./localinpolicy").Localinpolicy;
export const Localinpolicy: typeof import("./localinpolicy").Localinpolicy = null as any;
utilities.lazyLoad(exports, ["Localinpolicy"], () => require("./localinpolicy"));

export { Localinpolicy6Args, Localinpolicy6State } from "./localinpolicy6";
export type Localinpolicy6 = import("./localinpolicy6").Localinpolicy6;
export const Localinpolicy6: typeof import("./localinpolicy6").Localinpolicy6 = null as any;
utilities.lazyLoad(exports, ["Localinpolicy6"], () => require("./localinpolicy6"));

export { MulticastaddressArgs, MulticastaddressState } from "./multicastaddress";
export type Multicastaddress = import("./multicastaddress").Multicastaddress;
export const Multicastaddress: typeof import("./multicastaddress").Multicastaddress = null as any;
utilities.lazyLoad(exports, ["Multicastaddress"], () => require("./multicastaddress"));

export { Multicastaddress6Args, Multicastaddress6State } from "./multicastaddress6";
export type Multicastaddress6 = import("./multicastaddress6").Multicastaddress6;
export const Multicastaddress6: typeof import("./multicastaddress6").Multicastaddress6 = null as any;
utilities.lazyLoad(exports, ["Multicastaddress6"], () => require("./multicastaddress6"));

export { MulticastpolicyArgs, MulticastpolicyState } from "./multicastpolicy";
export type Multicastpolicy = import("./multicastpolicy").Multicastpolicy;
export const Multicastpolicy: typeof import("./multicastpolicy").Multicastpolicy = null as any;
utilities.lazyLoad(exports, ["Multicastpolicy"], () => require("./multicastpolicy"));

export { Multicastpolicy6Args, Multicastpolicy6State } from "./multicastpolicy6";
export type Multicastpolicy6 = import("./multicastpolicy6").Multicastpolicy6;
export const Multicastpolicy6: typeof import("./multicastpolicy6").Multicastpolicy6 = null as any;
utilities.lazyLoad(exports, ["Multicastpolicy6"], () => require("./multicastpolicy6"));

export { NetworkservicedynamicArgs, NetworkservicedynamicState } from "./networkservicedynamic";
export type Networkservicedynamic = import("./networkservicedynamic").Networkservicedynamic;
export const Networkservicedynamic: typeof import("./networkservicedynamic").Networkservicedynamic = null as any;
utilities.lazyLoad(exports, ["Networkservicedynamic"], () => require("./networkservicedynamic"));

export { ObjectAddressArgs, ObjectAddressState } from "./objectAddress";
export type ObjectAddress = import("./objectAddress").ObjectAddress;
export const ObjectAddress: typeof import("./objectAddress").ObjectAddress = null as any;
utilities.lazyLoad(exports, ["ObjectAddress"], () => require("./objectAddress"));

export { ObjectAddressgroupArgs, ObjectAddressgroupState } from "./objectAddressgroup";
export type ObjectAddressgroup = import("./objectAddressgroup").ObjectAddressgroup;
export const ObjectAddressgroup: typeof import("./objectAddressgroup").ObjectAddressgroup = null as any;
utilities.lazyLoad(exports, ["ObjectAddressgroup"], () => require("./objectAddressgroup"));

export { ObjectIppoolArgs, ObjectIppoolState } from "./objectIppool";
export type ObjectIppool = import("./objectIppool").ObjectIppool;
export const ObjectIppool: typeof import("./objectIppool").ObjectIppool = null as any;
utilities.lazyLoad(exports, ["ObjectIppool"], () => require("./objectIppool"));

export { ObjectServiceArgs, ObjectServiceState } from "./objectService";
export type ObjectService = import("./objectService").ObjectService;
export const ObjectService: typeof import("./objectService").ObjectService = null as any;
utilities.lazyLoad(exports, ["ObjectService"], () => require("./objectService"));

export { ObjectServicecategoryArgs, ObjectServicecategoryState } from "./objectServicecategory";
export type ObjectServicecategory = import("./objectServicecategory").ObjectServicecategory;
export const ObjectServicecategory: typeof import("./objectServicecategory").ObjectServicecategory = null as any;
utilities.lazyLoad(exports, ["ObjectServicecategory"], () => require("./objectServicecategory"));

export { ObjectServicegroupArgs, ObjectServicegroupState } from "./objectServicegroup";
export type ObjectServicegroup = import("./objectServicegroup").ObjectServicegroup;
export const ObjectServicegroup: typeof import("./objectServicegroup").ObjectServicegroup = null as any;
utilities.lazyLoad(exports, ["ObjectServicegroup"], () => require("./objectServicegroup"));

export { ObjectVipArgs, ObjectVipState } from "./objectVip";
export type ObjectVip = import("./objectVip").ObjectVip;
export const ObjectVip: typeof import("./objectVip").ObjectVip = null as any;
utilities.lazyLoad(exports, ["ObjectVip"], () => require("./objectVip"));

export { ObjectVipgroupArgs, ObjectVipgroupState } from "./objectVipgroup";
export type ObjectVipgroup = import("./objectVipgroup").ObjectVipgroup;
export const ObjectVipgroup: typeof import("./objectVipgroup").ObjectVipgroup = null as any;
utilities.lazyLoad(exports, ["ObjectVipgroup"], () => require("./objectVipgroup"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { Policy46Args, Policy46State } from "./policy46";
export type Policy46 = import("./policy46").Policy46;
export const Policy46: typeof import("./policy46").Policy46 = null as any;
utilities.lazyLoad(exports, ["Policy46"], () => require("./policy46"));

export { Policy6Args, Policy6State } from "./policy6";
export type Policy6 = import("./policy6").Policy6;
export const Policy6: typeof import("./policy6").Policy6 = null as any;
utilities.lazyLoad(exports, ["Policy6"], () => require("./policy6"));

export { Policy64Args, Policy64State } from "./policy64";
export type Policy64 = import("./policy64").Policy64;
export const Policy64: typeof import("./policy64").Policy64 = null as any;
utilities.lazyLoad(exports, ["Policy64"], () => require("./policy64"));

export { PolicyMoveArgs, PolicyMoveState } from "./policyMove";
export type PolicyMove = import("./policyMove").PolicyMove;
export const PolicyMove: typeof import("./policyMove").PolicyMove = null as any;
utilities.lazyLoad(exports, ["PolicyMove"], () => require("./policyMove"));

export { PolicySortArgs, PolicySortState } from "./policySort";
export type PolicySort = import("./policySort").PolicySort;
export const PolicySort: typeof import("./policySort").PolicySort = null as any;
utilities.lazyLoad(exports, ["PolicySort"], () => require("./policySort"));

export { ProfilegroupArgs, ProfilegroupState } from "./profilegroup";
export type Profilegroup = import("./profilegroup").Profilegroup;
export const Profilegroup: typeof import("./profilegroup").Profilegroup = null as any;
utilities.lazyLoad(exports, ["Profilegroup"], () => require("./profilegroup"));

export { ProfileprotocoloptionsArgs, ProfileprotocoloptionsState } from "./profileprotocoloptions";
export type Profileprotocoloptions = import("./profileprotocoloptions").Profileprotocoloptions;
export const Profileprotocoloptions: typeof import("./profileprotocoloptions").Profileprotocoloptions = null as any;
utilities.lazyLoad(exports, ["Profileprotocoloptions"], () => require("./profileprotocoloptions"));

export { ProxyaddressArgs, ProxyaddressState } from "./proxyaddress";
export type Proxyaddress = import("./proxyaddress").Proxyaddress;
export const Proxyaddress: typeof import("./proxyaddress").Proxyaddress = null as any;
utilities.lazyLoad(exports, ["Proxyaddress"], () => require("./proxyaddress"));

export { ProxyaddrgrpArgs, ProxyaddrgrpState } from "./proxyaddrgrp";
export type Proxyaddrgrp = import("./proxyaddrgrp").Proxyaddrgrp;
export const Proxyaddrgrp: typeof import("./proxyaddrgrp").Proxyaddrgrp = null as any;
utilities.lazyLoad(exports, ["Proxyaddrgrp"], () => require("./proxyaddrgrp"));

export { ProxypolicyArgs, ProxypolicyState } from "./proxypolicy";
export type Proxypolicy = import("./proxypolicy").Proxypolicy;
export const Proxypolicy: typeof import("./proxypolicy").Proxypolicy = null as any;
utilities.lazyLoad(exports, ["Proxypolicy"], () => require("./proxypolicy"));

export { ProxypolicyMoveArgs, ProxypolicyMoveState } from "./proxypolicyMove";
export type ProxypolicyMove = import("./proxypolicyMove").ProxypolicyMove;
export const ProxypolicyMove: typeof import("./proxypolicyMove").ProxypolicyMove = null as any;
utilities.lazyLoad(exports, ["ProxypolicyMove"], () => require("./proxypolicyMove"));

export { ProxypolicySortArgs, ProxypolicySortState } from "./proxypolicySort";
export type ProxypolicySort = import("./proxypolicySort").ProxypolicySort;
export const ProxypolicySort: typeof import("./proxypolicySort").ProxypolicySort = null as any;
utilities.lazyLoad(exports, ["ProxypolicySort"], () => require("./proxypolicySort"));

export { RegionArgs, RegionState } from "./region";
export type Region = import("./region").Region;
export const Region: typeof import("./region").Region = null as any;
utilities.lazyLoad(exports, ["Region"], () => require("./region"));

export { SecurityPolicyseqArgs, SecurityPolicyseqState } from "./securityPolicyseq";
export type SecurityPolicyseq = import("./securityPolicyseq").SecurityPolicyseq;
export const SecurityPolicyseq: typeof import("./securityPolicyseq").SecurityPolicyseq = null as any;
utilities.lazyLoad(exports, ["SecurityPolicyseq"], () => require("./securityPolicyseq"));

export { SecuritypolicyArgs, SecuritypolicyState } from "./securitypolicy";
export type Securitypolicy = import("./securitypolicy").Securitypolicy;
export const Securitypolicy: typeof import("./securitypolicy").Securitypolicy = null as any;
utilities.lazyLoad(exports, ["Securitypolicy"], () => require("./securitypolicy"));

export { SecuritypolicyMoveArgs, SecuritypolicyMoveState } from "./securitypolicyMove";
export type SecuritypolicyMove = import("./securitypolicyMove").SecuritypolicyMove;
export const SecuritypolicyMove: typeof import("./securitypolicyMove").SecuritypolicyMove = null as any;
utilities.lazyLoad(exports, ["SecuritypolicyMove"], () => require("./securitypolicyMove"));

export { SecuritypolicySortArgs, SecuritypolicySortState } from "./securitypolicySort";
export type SecuritypolicySort = import("./securitypolicySort").SecuritypolicySort;
export const SecuritypolicySort: typeof import("./securitypolicySort").SecuritypolicySort = null as any;
utilities.lazyLoad(exports, ["SecuritypolicySort"], () => require("./securitypolicySort"));

export { ShapingpolicyArgs, ShapingpolicyState } from "./shapingpolicy";
export type Shapingpolicy = import("./shapingpolicy").Shapingpolicy;
export const Shapingpolicy: typeof import("./shapingpolicy").Shapingpolicy = null as any;
utilities.lazyLoad(exports, ["Shapingpolicy"], () => require("./shapingpolicy"));

export { ShapingprofileArgs, ShapingprofileState } from "./shapingprofile";
export type Shapingprofile = import("./shapingprofile").Shapingprofile;
export const Shapingprofile: typeof import("./shapingprofile").Shapingprofile = null as any;
utilities.lazyLoad(exports, ["Shapingprofile"], () => require("./shapingprofile"));

export { SnifferArgs, SnifferState } from "./sniffer";
export type Sniffer = import("./sniffer").Sniffer;
export const Sniffer: typeof import("./sniffer").Sniffer = null as any;
utilities.lazyLoad(exports, ["Sniffer"], () => require("./sniffer"));

export { SslserverArgs, SslserverState } from "./sslserver";
export type Sslserver = import("./sslserver").Sslserver;
export const Sslserver: typeof import("./sslserver").Sslserver = null as any;
utilities.lazyLoad(exports, ["Sslserver"], () => require("./sslserver"));

export { SslsshprofileArgs, SslsshprofileState } from "./sslsshprofile";
export type Sslsshprofile = import("./sslsshprofile").Sslsshprofile;
export const Sslsshprofile: typeof import("./sslsshprofile").Sslsshprofile = null as any;
utilities.lazyLoad(exports, ["Sslsshprofile"], () => require("./sslsshprofile"));

export { TrafficclassArgs, TrafficclassState } from "./trafficclass";
export type Trafficclass = import("./trafficclass").Trafficclass;
export const Trafficclass: typeof import("./trafficclass").Trafficclass = null as any;
utilities.lazyLoad(exports, ["Trafficclass"], () => require("./trafficclass"));

export { TtlpolicyArgs, TtlpolicyState } from "./ttlpolicy";
export type Ttlpolicy = import("./ttlpolicy").Ttlpolicy;
export const Ttlpolicy: typeof import("./ttlpolicy").Ttlpolicy = null as any;
utilities.lazyLoad(exports, ["Ttlpolicy"], () => require("./ttlpolicy"));

export { VendormacArgs, VendormacState } from "./vendormac";
export type Vendormac = import("./vendormac").Vendormac;
export const Vendormac: typeof import("./vendormac").Vendormac = null as any;
utilities.lazyLoad(exports, ["Vendormac"], () => require("./vendormac"));

export { VipArgs, VipState } from "./vip";
export type Vip = import("./vip").Vip;
export const Vip: typeof import("./vip").Vip = null as any;
utilities.lazyLoad(exports, ["Vip"], () => require("./vip"));

export { Vip46Args, Vip46State } from "./vip46";
export type Vip46 = import("./vip46").Vip46;
export const Vip46: typeof import("./vip46").Vip46 = null as any;
utilities.lazyLoad(exports, ["Vip46"], () => require("./vip46"));

export { Vip6Args, Vip6State } from "./vip6";
export type Vip6 = import("./vip6").Vip6;
export const Vip6: typeof import("./vip6").Vip6 = null as any;
utilities.lazyLoad(exports, ["Vip6"], () => require("./vip6"));

export { Vip64Args, Vip64State } from "./vip64";
export type Vip64 = import("./vip64").Vip64;
export const Vip64: typeof import("./vip64").Vip64 = null as any;
utilities.lazyLoad(exports, ["Vip64"], () => require("./vip64"));

export { VipgrpArgs, VipgrpState } from "./vipgrp";
export type Vipgrp = import("./vipgrp").Vipgrp;
export const Vipgrp: typeof import("./vipgrp").Vipgrp = null as any;
utilities.lazyLoad(exports, ["Vipgrp"], () => require("./vipgrp"));

export { Vipgrp46Args, Vipgrp46State } from "./vipgrp46";
export type Vipgrp46 = import("./vipgrp46").Vipgrp46;
export const Vipgrp46: typeof import("./vipgrp46").Vipgrp46 = null as any;
utilities.lazyLoad(exports, ["Vipgrp46"], () => require("./vipgrp46"));

export { Vipgrp6Args, Vipgrp6State } from "./vipgrp6";
export type Vipgrp6 = import("./vipgrp6").Vipgrp6;
export const Vipgrp6: typeof import("./vipgrp6").Vipgrp6 = null as any;
utilities.lazyLoad(exports, ["Vipgrp6"], () => require("./vipgrp6"));

export { Vipgrp64Args, Vipgrp64State } from "./vipgrp64";
export type Vipgrp64 = import("./vipgrp64").Vipgrp64;
export const Vipgrp64: typeof import("./vipgrp64").Vipgrp64 = null as any;
utilities.lazyLoad(exports, ["Vipgrp64"], () => require("./vipgrp64"));


// Export sub-modules:
import * as consolidated from "./consolidated";
import * as ipmacbinding from "./ipmacbinding";
import * as schedule from "./schedule";
import * as service from "./service";
import * as shaper from "./shaper";
import * as ssh from "./ssh";
import * as ssl from "./ssl";
import * as wildcardfqdn from "./wildcardfqdn";

export {
    consolidated,
    ipmacbinding,
    schedule,
    service,
    shaper,
    ssh,
    ssl,
    wildcardfqdn,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fortios:firewall/accessproxy6:Accessproxy6":
                return new Accessproxy6(name, <any>undefined, { urn })
            case "fortios:firewall/accessproxy:Accessproxy":
                return new Accessproxy(name, <any>undefined, { urn })
            case "fortios:firewall/accessproxysshclientcert:Accessproxysshclientcert":
                return new Accessproxysshclientcert(name, <any>undefined, { urn })
            case "fortios:firewall/accessproxyvirtualhost:Accessproxyvirtualhost":
                return new Accessproxyvirtualhost(name, <any>undefined, { urn })
            case "fortios:firewall/address6:Address6":
                return new Address6(name, <any>undefined, { urn })
            case "fortios:firewall/address6template:Address6template":
                return new Address6template(name, <any>undefined, { urn })
            case "fortios:firewall/address:Address":
                return new Address(name, <any>undefined, { urn })
            case "fortios:firewall/addrgrp6:Addrgrp6":
                return new Addrgrp6(name, <any>undefined, { urn })
            case "fortios:firewall/addrgrp:Addrgrp":
                return new Addrgrp(name, <any>undefined, { urn })
            case "fortios:firewall/authportal:Authportal":
                return new Authportal(name, <any>undefined, { urn })
            case "fortios:firewall/centralsnatmap:Centralsnatmap":
                return new Centralsnatmap(name, <any>undefined, { urn })
            case "fortios:firewall/centralsnatmapMove:CentralsnatmapMove":
                return new CentralsnatmapMove(name, <any>undefined, { urn })
            case "fortios:firewall/centralsnatmapSort:CentralsnatmapSort":
                return new CentralsnatmapSort(name, <any>undefined, { urn })
            case "fortios:firewall/city:City":
                return new City(name, <any>undefined, { urn })
            case "fortios:firewall/country:Country":
                return new Country(name, <any>undefined, { urn })
            case "fortios:firewall/decryptedtrafficmirror:Decryptedtrafficmirror":
                return new Decryptedtrafficmirror(name, <any>undefined, { urn })
            case "fortios:firewall/dnstranslation:Dnstranslation":
                return new Dnstranslation(name, <any>undefined, { urn })
            case "fortios:firewall/doSpolicy6:DoSpolicy6":
                return new DoSpolicy6(name, <any>undefined, { urn })
            case "fortios:firewall/doSpolicy:DoSpolicy":
                return new DoSpolicy(name, <any>undefined, { urn })
            case "fortios:firewall/global:Global":
                return new Global(name, <any>undefined, { urn })
            case "fortios:firewall/identitybasedroute:Identitybasedroute":
                return new Identitybasedroute(name, <any>undefined, { urn })
            case "fortios:firewall/interfacepolicy6:Interfacepolicy6":
                return new Interfacepolicy6(name, <any>undefined, { urn })
            case "fortios:firewall/interfacepolicy:Interfacepolicy":
                return new Interfacepolicy(name, <any>undefined, { urn })
            case "fortios:firewall/internetservice:Internetservice":
                return new Internetservice(name, <any>undefined, { urn })
            case "fortios:firewall/internetserviceaddition:Internetserviceaddition":
                return new Internetserviceaddition(name, <any>undefined, { urn })
            case "fortios:firewall/internetserviceappend:Internetserviceappend":
                return new Internetserviceappend(name, <any>undefined, { urn })
            case "fortios:firewall/internetservicebotnet:Internetservicebotnet":
                return new Internetservicebotnet(name, <any>undefined, { urn })
            case "fortios:firewall/internetservicecustom:Internetservicecustom":
                return new Internetservicecustom(name, <any>undefined, { urn })
            case "fortios:firewall/internetservicecustomgroup:Internetservicecustomgroup":
                return new Internetservicecustomgroup(name, <any>undefined, { urn })
            case "fortios:firewall/internetservicedefinition:Internetservicedefinition":
                return new Internetservicedefinition(name, <any>undefined, { urn })
            case "fortios:firewall/internetserviceextension:Internetserviceextension":
                return new Internetserviceextension(name, <any>undefined, { urn })
            case "fortios:firewall/internetservicegroup:Internetservicegroup":
                return new Internetservicegroup(name, <any>undefined, { urn })
            case "fortios:firewall/internetserviceipblreason:Internetserviceipblreason":
                return new Internetserviceipblreason(name, <any>undefined, { urn })
            case "fortios:firewall/internetserviceipblvendor:Internetserviceipblvendor":
                return new Internetserviceipblvendor(name, <any>undefined, { urn })
            case "fortios:firewall/internetservicelist:Internetservicelist":
                return new Internetservicelist(name, <any>undefined, { urn })
            case "fortios:firewall/internetservicename:Internetservicename":
                return new Internetservicename(name, <any>undefined, { urn })
            case "fortios:firewall/internetserviceowner:Internetserviceowner":
                return new Internetserviceowner(name, <any>undefined, { urn })
            case "fortios:firewall/internetservicereputation:Internetservicereputation":
                return new Internetservicereputation(name, <any>undefined, { urn })
            case "fortios:firewall/internetservicesubapp:Internetservicesubapp":
                return new Internetservicesubapp(name, <any>undefined, { urn })
            case "fortios:firewall/ippool6:Ippool6":
                return new Ippool6(name, <any>undefined, { urn })
            case "fortios:firewall/ippool:Ippool":
                return new Ippool(name, <any>undefined, { urn })
            case "fortios:firewall/iptranslation:Iptranslation":
                return new Iptranslation(name, <any>undefined, { urn })
            case "fortios:firewall/ipv6ehfilter:Ipv6ehfilter":
                return new Ipv6ehfilter(name, <any>undefined, { urn })
            case "fortios:firewall/ldbmonitor:Ldbmonitor":
                return new Ldbmonitor(name, <any>undefined, { urn })
            case "fortios:firewall/localinpolicy6:Localinpolicy6":
                return new Localinpolicy6(name, <any>undefined, { urn })
            case "fortios:firewall/localinpolicy:Localinpolicy":
                return new Localinpolicy(name, <any>undefined, { urn })
            case "fortios:firewall/multicastaddress6:Multicastaddress6":
                return new Multicastaddress6(name, <any>undefined, { urn })
            case "fortios:firewall/multicastaddress:Multicastaddress":
                return new Multicastaddress(name, <any>undefined, { urn })
            case "fortios:firewall/multicastpolicy6:Multicastpolicy6":
                return new Multicastpolicy6(name, <any>undefined, { urn })
            case "fortios:firewall/multicastpolicy:Multicastpolicy":
                return new Multicastpolicy(name, <any>undefined, { urn })
            case "fortios:firewall/networkservicedynamic:Networkservicedynamic":
                return new Networkservicedynamic(name, <any>undefined, { urn })
            case "fortios:firewall/objectAddress:ObjectAddress":
                return new ObjectAddress(name, <any>undefined, { urn })
            case "fortios:firewall/objectAddressgroup:ObjectAddressgroup":
                return new ObjectAddressgroup(name, <any>undefined, { urn })
            case "fortios:firewall/objectIppool:ObjectIppool":
                return new ObjectIppool(name, <any>undefined, { urn })
            case "fortios:firewall/objectService:ObjectService":
                return new ObjectService(name, <any>undefined, { urn })
            case "fortios:firewall/objectServicecategory:ObjectServicecategory":
                return new ObjectServicecategory(name, <any>undefined, { urn })
            case "fortios:firewall/objectServicegroup:ObjectServicegroup":
                return new ObjectServicegroup(name, <any>undefined, { urn })
            case "fortios:firewall/objectVip:ObjectVip":
                return new ObjectVip(name, <any>undefined, { urn })
            case "fortios:firewall/objectVipgroup:ObjectVipgroup":
                return new ObjectVipgroup(name, <any>undefined, { urn })
            case "fortios:firewall/policy46:Policy46":
                return new Policy46(name, <any>undefined, { urn })
            case "fortios:firewall/policy64:Policy64":
                return new Policy64(name, <any>undefined, { urn })
            case "fortios:firewall/policy6:Policy6":
                return new Policy6(name, <any>undefined, { urn })
            case "fortios:firewall/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "fortios:firewall/policyMove:PolicyMove":
                return new PolicyMove(name, <any>undefined, { urn })
            case "fortios:firewall/policySort:PolicySort":
                return new PolicySort(name, <any>undefined, { urn })
            case "fortios:firewall/profilegroup:Profilegroup":
                return new Profilegroup(name, <any>undefined, { urn })
            case "fortios:firewall/profileprotocoloptions:Profileprotocoloptions":
                return new Profileprotocoloptions(name, <any>undefined, { urn })
            case "fortios:firewall/proxyaddress:Proxyaddress":
                return new Proxyaddress(name, <any>undefined, { urn })
            case "fortios:firewall/proxyaddrgrp:Proxyaddrgrp":
                return new Proxyaddrgrp(name, <any>undefined, { urn })
            case "fortios:firewall/proxypolicy:Proxypolicy":
                return new Proxypolicy(name, <any>undefined, { urn })
            case "fortios:firewall/proxypolicyMove:ProxypolicyMove":
                return new ProxypolicyMove(name, <any>undefined, { urn })
            case "fortios:firewall/proxypolicySort:ProxypolicySort":
                return new ProxypolicySort(name, <any>undefined, { urn })
            case "fortios:firewall/region:Region":
                return new Region(name, <any>undefined, { urn })
            case "fortios:firewall/securityPolicyseq:SecurityPolicyseq":
                return new SecurityPolicyseq(name, <any>undefined, { urn })
            case "fortios:firewall/securitypolicy:Securitypolicy":
                return new Securitypolicy(name, <any>undefined, { urn })
            case "fortios:firewall/securitypolicyMove:SecuritypolicyMove":
                return new SecuritypolicyMove(name, <any>undefined, { urn })
            case "fortios:firewall/securitypolicySort:SecuritypolicySort":
                return new SecuritypolicySort(name, <any>undefined, { urn })
            case "fortios:firewall/shapingpolicy:Shapingpolicy":
                return new Shapingpolicy(name, <any>undefined, { urn })
            case "fortios:firewall/shapingprofile:Shapingprofile":
                return new Shapingprofile(name, <any>undefined, { urn })
            case "fortios:firewall/sniffer:Sniffer":
                return new Sniffer(name, <any>undefined, { urn })
            case "fortios:firewall/sslserver:Sslserver":
                return new Sslserver(name, <any>undefined, { urn })
            case "fortios:firewall/sslsshprofile:Sslsshprofile":
                return new Sslsshprofile(name, <any>undefined, { urn })
            case "fortios:firewall/trafficclass:Trafficclass":
                return new Trafficclass(name, <any>undefined, { urn })
            case "fortios:firewall/ttlpolicy:Ttlpolicy":
                return new Ttlpolicy(name, <any>undefined, { urn })
            case "fortios:firewall/vendormac:Vendormac":
                return new Vendormac(name, <any>undefined, { urn })
            case "fortios:firewall/vip46:Vip46":
                return new Vip46(name, <any>undefined, { urn })
            case "fortios:firewall/vip64:Vip64":
                return new Vip64(name, <any>undefined, { urn })
            case "fortios:firewall/vip6:Vip6":
                return new Vip6(name, <any>undefined, { urn })
            case "fortios:firewall/vip:Vip":
                return new Vip(name, <any>undefined, { urn })
            case "fortios:firewall/vipgrp46:Vipgrp46":
                return new Vipgrp46(name, <any>undefined, { urn })
            case "fortios:firewall/vipgrp64:Vipgrp64":
                return new Vipgrp64(name, <any>undefined, { urn })
            case "fortios:firewall/vipgrp6:Vipgrp6":
                return new Vipgrp6(name, <any>undefined, { urn })
            case "fortios:firewall/vipgrp:Vipgrp":
                return new Vipgrp(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fortios", "firewall/accessproxy", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/accessproxy6", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/accessproxysshclientcert", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/accessproxyvirtualhost", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/address", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/address6", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/address6template", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/addrgrp", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/addrgrp6", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/authportal", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/centralsnatmap", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/centralsnatmapMove", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/centralsnatmapSort", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/city", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/country", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/decryptedtrafficmirror", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/dnstranslation", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/doSpolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/doSpolicy6", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/global", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/identitybasedroute", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/interfacepolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/interfacepolicy6", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/internetservice", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/internetserviceaddition", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/internetserviceappend", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/internetservicebotnet", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/internetservicecustom", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/internetservicecustomgroup", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/internetservicedefinition", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/internetserviceextension", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/internetservicegroup", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/internetserviceipblreason", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/internetserviceipblvendor", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/internetservicelist", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/internetservicename", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/internetserviceowner", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/internetservicereputation", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/internetservicesubapp", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/ippool", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/ippool6", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/iptranslation", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/ipv6ehfilter", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/ldbmonitor", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/localinpolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/localinpolicy6", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/multicastaddress", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/multicastaddress6", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/multicastpolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/multicastpolicy6", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/networkservicedynamic", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/objectAddress", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/objectAddressgroup", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/objectIppool", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/objectService", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/objectServicecategory", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/objectServicegroup", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/objectVip", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/objectVipgroup", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/policy", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/policy46", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/policy6", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/policy64", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/policyMove", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/policySort", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/profilegroup", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/profileprotocoloptions", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/proxyaddress", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/proxyaddrgrp", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/proxypolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/proxypolicyMove", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/proxypolicySort", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/region", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/securityPolicyseq", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/securitypolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/securitypolicyMove", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/securitypolicySort", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/shapingpolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/shapingprofile", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/sniffer", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/sslserver", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/sslsshprofile", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/trafficclass", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/ttlpolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/vendormac", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/vip", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/vip46", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/vip6", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/vip64", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/vipgrp", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/vipgrp46", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/vipgrp6", _module)
pulumi.runtime.registerResourceModule("fortios", "firewall/vipgrp64", _module)
