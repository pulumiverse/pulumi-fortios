// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Configure IPv4 policies.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trname = new fortios.firewall.Policy("trname", {
 *     action: "accept",
 *     dstaddrs: [{
 *         name: "all",
 *     }],
 *     dstintfs: [{
 *         name: "port4",
 *     }],
 *     logtraffic: "utm",
 *     policyid: 1,
 *     schedule: "always",
 *     services: [{
 *         name: "HTTP",
 *     }],
 *     srcaddrs: [{
 *         name: "all",
 *     }],
 *     srcintfs: [{
 *         name: "port3",
 *     }],
 *     wanopt: "disable",
 *     wanoptDetection: "active",
 *     wanoptPassiveOpt: "default",
 *     wccp: "disable",
 *     webcache: "disable",
 *     webcacheHttps: "disable",
 *     wsso: "enable",
 * });
 * const myrule = new fortios.firewall.Policy("myrule", {
 *     action: "accept",
 *     antiReplay: "enable",
 *     authPath: "disable",
 *     autoAsicOffload: "enable",
 *     avProfile: "wifi-default",
 *     dstintfs: [{
 *         name: "port1",
 *     }],
 *     inspectionMode: "flow",
 *     internetService: "enable",
 *     internetServiceNames: [
 *         {
 *             name: "Amazon-AWS",
 *         },
 *         {
 *             name: "GitHub-GitHub",
 *         },
 *     ],
 *     ipsSensor: "protect_email_server",
 *     logtraffic: "utm",
 *     policyid: 2,
 *     schedule: "always",
 *     srcaddrs: [{
 *         name: "FABRIC_DEVICE",
 *     }],
 *     srcintfs: [{
 *         name: "port2",
 *     }],
 *     sslSshProfile: "certificate-inspection",
 *     status: "enable",
 *     utmStatus: "enable",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Firewall Policy can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:firewall/policy:Policy labelname {{policyid}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:firewall/policy:Policy labelname {{policyid}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:firewall/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * Policy action. On FortiOS versions 6.2.0-6.4.0: allow/deny/ipsec. On FortiOS versions >= 6.4.1: accept/deny/ipsec. Valid values: `accept`, `deny`, `ipsec`.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Enable/disable anti-replay check. Valid values: `enable`, `disable`.
     */
    public readonly antiReplay!: pulumi.Output<string>;
    /**
     * Application category ID list. The structure of `appCategory` block is documented below.
     */
    public readonly appCategories!: pulumi.Output<outputs.firewall.PolicyAppCategory[] | undefined>;
    /**
     * Application group names. The structure of `appGroup` block is documented below.
     */
    public readonly appGroups!: pulumi.Output<outputs.firewall.PolicyAppGroup[] | undefined>;
    /**
     * Name of an existing Application list.
     */
    public readonly applicationList!: pulumi.Output<string | undefined>;
    /**
     * Application ID list. The structure of `application` block is documented below.
     */
    public readonly applications!: pulumi.Output<outputs.firewall.PolicyApplication[] | undefined>;
    /**
     * HTTPS server certificate for policy authentication.
     */
    public readonly authCert!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable authentication-based routing. Valid values: `enable`, `disable`.
     */
    public readonly authPath!: pulumi.Output<string>;
    /**
     * HTTP-to-HTTPS redirect address for firewall authentication.
     */
    public readonly authRedirectAddr!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
     */
    public readonly autoAsicOffload!: pulumi.Output<string>;
    /**
     * Name of an existing Antivirus profile.
     */
    public readonly avProfile!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable block notification. Valid values: `enable`, `disable`.
     */
    public readonly blockNotification!: pulumi.Output<string>;
    /**
     * Enable to exempt some users from the captive portal. Valid values: `enable`, `disable`.
     */
    public readonly captivePortalExempt!: pulumi.Output<string>;
    /**
     * Enable/disable capture packets. Valid values: `enable`, `disable`.
     */
    public readonly capturePacket!: pulumi.Output<string>;
    /**
     * Name of an existing CASB profile.
     */
    public readonly casbProfile!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing CIFS profile.
     */
    public readonly cifsProfile!: pulumi.Output<string | undefined>;
    /**
     * Comment.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Custom fields to append to log messages for this policy. The structure of `customLogFields` block is documented below.
     */
    public readonly customLogFields!: pulumi.Output<outputs.firewall.PolicyCustomLogField[] | undefined>;
    /**
     * Decrypted traffic mirror.
     */
    public readonly decryptedTrafficMirror!: pulumi.Output<string | undefined>;
    /**
     * Enable TCP NPU session delay to guarantee packet order of 3-way handshake. Valid values: `enable`, `disable`.
     */
    public readonly delayTcpNpuSession!: pulumi.Output<string>;
    /**
     * Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
     */
    public readonly devices!: pulumi.Output<outputs.firewall.PolicyDevice[] | undefined>;
    /**
     * Name of an existing Diameter filter profile.
     */
    public readonly diameterFilterProfile!: pulumi.Output<string | undefined>;
    /**
     * Enable to copy packet's DiffServ values from session's original direction to its reply direction. Valid values: `enable`, `disable`.
     */
    public readonly diffservCopy!: pulumi.Output<string>;
    /**
     * Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
     */
    public readonly diffservForward!: pulumi.Output<string>;
    /**
     * Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
     */
    public readonly diffservReverse!: pulumi.Output<string>;
    /**
     * Change packet's DiffServ to this value.
     */
    public readonly diffservcodeForward!: pulumi.Output<string>;
    /**
     * Change packet's reverse (reply) DiffServ to this value.
     */
    public readonly diffservcodeRev!: pulumi.Output<string>;
    /**
     * Enable/disable user authentication disclaimer. Valid values: `enable`, `disable`.
     */
    public readonly disclaimer!: pulumi.Output<string>;
    /**
     * Name of an existing DLP profile.
     */
    public readonly dlpProfile!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing DLP sensor.
     */
    public readonly dlpSensor!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing DNS filter profile.
     */
    public readonly dnsfilterProfile!: pulumi.Output<string | undefined>;
    /**
     * Enable DSRI to ignore HTTP server responses. Valid values: `enable`, `disable`.
     */
    public readonly dsri!: pulumi.Output<string>;
    /**
     * When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
     */
    public readonly dstaddr6Negate!: pulumi.Output<string>;
    /**
     * Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
     */
    public readonly dstaddr6s!: pulumi.Output<outputs.firewall.PolicyDstaddr6[] | undefined>;
    /**
     * When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
     */
    public readonly dstaddrNegate!: pulumi.Output<string>;
    /**
     * Destination address and address group names. The structure of `dstaddr` block is documented below.
     */
    public readonly dstaddrs!: pulumi.Output<outputs.firewall.PolicyDstaddr[] | undefined>;
    /**
     * Outgoing (egress) interface. The structure of `dstintf` block is documented below.
     */
    public readonly dstintfs!: pulumi.Output<outputs.firewall.PolicyDstintf[]>;
    /**
     * Enable/disable dynamic RADIUS defined traffic shaping. Valid values: `enable`, `disable`.
     */
    public readonly dynamicShaping!: pulumi.Output<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable email collection. Valid values: `enable`, `disable`.
     */
    public readonly emailCollect!: pulumi.Output<string>;
    /**
     * Name of an existing email filter profile.
     */
    public readonly emailfilterProfile!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable Forward Error Correction on traffic matching this policy on a FEC device. Valid values: `enable`, `disable`.
     */
    public readonly fec!: pulumi.Output<string>;
    /**
     * Name of an existing file-filter profile.
     */
    public readonly fileFilterProfile!: pulumi.Output<string | undefined>;
    /**
     * How to handle sessions if the configuration of this firewall policy changes. Valid values: `check-all`, `check-new`.
     */
    public readonly firewallSessionDirty!: pulumi.Output<string>;
    /**
     * Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
     */
    public readonly fixedport!: pulumi.Output<string>;
    /**
     * Enable/disable Fortinet Single Sign-On. Valid values: `enable`, `disable`.
     */
    public readonly fsso!: pulumi.Output<string | undefined>;
    /**
     * FSSO agent to use for NTLM authentication.
     */
    public readonly fssoAgentForNtlm!: pulumi.Output<string | undefined>;
    /**
     * Names of FSSO groups. The structure of `fssoGroups` block is documented below.
     */
    public readonly fssoGroups!: pulumi.Output<outputs.firewall.PolicyFssoGroup[] | undefined>;
    /**
     * Enable/disable recognition of anycast IP addresses using the geography IP database. Valid values: `enable`, `disable`.
     */
    public readonly geoipAnycast!: pulumi.Output<string>;
    /**
     * Match geography address based either on its physical location or registered location. Valid values: `physical-location`, `registered-location`.
     */
    public readonly geoipMatch!: pulumi.Output<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Label for the policy that appears when the GUI is in Global View mode.
     */
    public readonly globalLabel!: pulumi.Output<string | undefined>;
    /**
     * Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
     */
    public readonly groups!: pulumi.Output<outputs.firewall.PolicyGroup[] | undefined>;
    /**
     * Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
     */
    public readonly httpPolicyRedirect!: pulumi.Output<string>;
    /**
     * Name of an existing ICAP profile.
     */
    public readonly icapProfile!: pulumi.Output<string | undefined>;
    /**
     * Name of identity-based routing rule.
     */
    public readonly identityBasedRoute!: pulumi.Output<string | undefined>;
    /**
     * Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
     */
    public readonly inbound!: pulumi.Output<string>;
    /**
     * Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
     */
    public readonly inspectionMode!: pulumi.Output<string>;
    /**
     * Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
     */
    public readonly internetService!: pulumi.Output<string>;
    /**
     * Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
     */
    public readonly internetService6!: pulumi.Output<string>;
    /**
     * Custom Internet Service6 group name. The structure of `internetService6CustomGroup` block is documented below.
     */
    public readonly internetService6CustomGroups!: pulumi.Output<outputs.firewall.PolicyInternetService6CustomGroup[] | undefined>;
    /**
     * Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
     */
    public readonly internetService6Customs!: pulumi.Output<outputs.firewall.PolicyInternetService6Custom[] | undefined>;
    /**
     * Internet Service group name. The structure of `internetService6Group` block is documented below.
     */
    public readonly internetService6Groups!: pulumi.Output<outputs.firewall.PolicyInternetService6Group[] | undefined>;
    /**
     * IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
     */
    public readonly internetService6Names!: pulumi.Output<outputs.firewall.PolicyInternetService6Name[] | undefined>;
    /**
     * When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    public readonly internetService6Negate!: pulumi.Output<string>;
    /**
     * Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
     */
    public readonly internetService6Src!: pulumi.Output<string>;
    /**
     * Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
     */
    public readonly internetService6SrcCustomGroups!: pulumi.Output<outputs.firewall.PolicyInternetService6SrcCustomGroup[] | undefined>;
    /**
     * Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
     */
    public readonly internetService6SrcCustoms!: pulumi.Output<outputs.firewall.PolicyInternetService6SrcCustom[] | undefined>;
    /**
     * Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
     */
    public readonly internetService6SrcGroups!: pulumi.Output<outputs.firewall.PolicyInternetService6SrcGroup[] | undefined>;
    /**
     * IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
     */
    public readonly internetService6SrcNames!: pulumi.Output<outputs.firewall.PolicyInternetService6SrcName[] | undefined>;
    /**
     * When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    public readonly internetService6SrcNegate!: pulumi.Output<string>;
    /**
     * Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
     */
    public readonly internetServiceCustomGroups!: pulumi.Output<outputs.firewall.PolicyInternetServiceCustomGroup[] | undefined>;
    /**
     * Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
     */
    public readonly internetServiceCustoms!: pulumi.Output<outputs.firewall.PolicyInternetServiceCustom[] | undefined>;
    /**
     * Internet Service group name. The structure of `internetServiceGroup` block is documented below.
     */
    public readonly internetServiceGroups!: pulumi.Output<outputs.firewall.PolicyInternetServiceGroup[] | undefined>;
    /**
     * Internet Service ID. The structure of `internetServiceId` block is documented below.
     */
    public readonly internetServiceIds!: pulumi.Output<outputs.firewall.PolicyInternetServiceId[] | undefined>;
    /**
     * Internet Service name. The structure of `internetServiceName` block is documented below.
     */
    public readonly internetServiceNames!: pulumi.Output<outputs.firewall.PolicyInternetServiceName[] | undefined>;
    /**
     * When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    public readonly internetServiceNegate!: pulumi.Output<string>;
    /**
     * Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
     */
    public readonly internetServiceSrc!: pulumi.Output<string>;
    /**
     * Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
     */
    public readonly internetServiceSrcCustomGroups!: pulumi.Output<outputs.firewall.PolicyInternetServiceSrcCustomGroup[] | undefined>;
    /**
     * Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
     */
    public readonly internetServiceSrcCustoms!: pulumi.Output<outputs.firewall.PolicyInternetServiceSrcCustom[] | undefined>;
    /**
     * Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
     */
    public readonly internetServiceSrcGroups!: pulumi.Output<outputs.firewall.PolicyInternetServiceSrcGroup[] | undefined>;
    /**
     * Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
     */
    public readonly internetServiceSrcIds!: pulumi.Output<outputs.firewall.PolicyInternetServiceSrcId[] | undefined>;
    /**
     * Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
     */
    public readonly internetServiceSrcNames!: pulumi.Output<outputs.firewall.PolicyInternetServiceSrcName[] | undefined>;
    /**
     * When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    public readonly internetServiceSrcNegate!: pulumi.Output<string>;
    /**
     * Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
     */
    public readonly ippool!: pulumi.Output<string>;
    /**
     * Name of an existing IPS sensor.
     */
    public readonly ipsSensor!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing VoIP (ips) profile.
     */
    public readonly ipsVoipFilter!: pulumi.Output<string | undefined>;
    /**
     * Label for the policy that appears when the GUI is in Section View mode.
     */
    public readonly label!: pulumi.Output<string | undefined>;
    /**
     * Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
     */
    public readonly learningMode!: pulumi.Output<string | undefined>;
    /**
     * Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
     */
    public readonly logtraffic!: pulumi.Output<string>;
    /**
     * Record logs when a session starts. Valid values: `enable`, `disable`.
     */
    public readonly logtrafficStart!: pulumi.Output<string>;
    /**
     * Enable to match packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
     */
    public readonly matchVip!: pulumi.Output<string>;
    /**
     * Enable/disable matching of only those packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
     */
    public readonly matchVipOnly!: pulumi.Output<string>;
    /**
     * Policy name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable/disable source NAT. Valid values: `enable`, `disable`.
     */
    public readonly nat!: pulumi.Output<string>;
    /**
     * Enable/disable NAT46. Valid values: `enable`, `disable`.
     */
    public readonly nat46!: pulumi.Output<string>;
    /**
     * Enable/disable NAT64. Valid values: `enable`, `disable`.
     */
    public readonly nat64!: pulumi.Output<string>;
    /**
     * Policy-based IPsec VPN: apply destination NAT to inbound traffic. Valid values: `enable`, `disable`.
     */
    public readonly natinbound!: pulumi.Output<string>;
    /**
     * Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
     */
    public readonly natip!: pulumi.Output<string>;
    /**
     * Policy-based IPsec VPN: apply source NAT to outbound traffic. Valid values: `enable`, `disable`.
     */
    public readonly natoutbound!: pulumi.Output<string>;
    /**
     * Dynamic Network Service name. The structure of `networkServiceDynamic` block is documented below.
     */
    public readonly networkServiceDynamics!: pulumi.Output<outputs.firewall.PolicyNetworkServiceDynamic[] | undefined>;
    /**
     * Dynamic Network Service source name. The structure of `networkServiceSrcDynamic` block is documented below.
     */
    public readonly networkServiceSrcDynamics!: pulumi.Output<outputs.firewall.PolicyNetworkServiceSrcDynamic[] | undefined>;
    /**
     * Enable/disable UTM Network Processor acceleration. Valid values: `enable`, `disable`.
     */
    public readonly npAcceleration!: pulumi.Output<string>;
    /**
     * Enable/disable NTLM authentication. Valid values: `enable`, `disable`.
     */
    public readonly ntlm!: pulumi.Output<string>;
    /**
     * HTTP-User-Agent value of supported browsers. The structure of `ntlmEnabledBrowsers` block is documented below.
     */
    public readonly ntlmEnabledBrowsers!: pulumi.Output<outputs.firewall.PolicyNtlmEnabledBrowser[] | undefined>;
    /**
     * Enable/disable NTLM guest user access. Valid values: `enable`, `disable`.
     */
    public readonly ntlmGuest!: pulumi.Output<string>;
    /**
     * Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
     */
    public readonly outbound!: pulumi.Output<string>;
    /**
     * Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled. Valid values: `enable`, `disable`.
     */
    public readonly passiveWanHealthMeasurement!: pulumi.Output<string>;
    /**
     * Enable/disable PCP inbound DNAT. Valid values: `enable`, `disable`.
     */
    public readonly pcpInbound!: pulumi.Output<string>;
    /**
     * Enable/disable PCP outbound SNAT. Valid values: `enable`, `disable`.
     */
    public readonly pcpOutbound!: pulumi.Output<string>;
    /**
     * PCP pool names. The structure of `pcpPoolname` block is documented below.
     */
    public readonly pcpPoolnames!: pulumi.Output<outputs.firewall.PolicyPcpPoolname[] | undefined>;
    /**
     * Per-IP traffic shaper.
     */
    public readonly perIpShaper!: pulumi.Output<string | undefined>;
    /**
     * Accept UDP packets from any host. Valid values: `enable`, `disable`.
     */
    public readonly permitAnyHost!: pulumi.Output<string>;
    /**
     * Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host. Valid values: `enable`, `disable`.
     */
    public readonly permitStunHost!: pulumi.Output<string>;
    /**
     * Enable/disable policy expiry. Valid values: `enable`, `disable`.
     */
    public readonly policyExpiry!: pulumi.Output<string>;
    /**
     * Policy expiry date (YYYY-MM-DD HH:MM:SS).
     */
    public readonly policyExpiryDate!: pulumi.Output<string>;
    /**
     * Policy expiry date and time, in epoch format.
     */
    public readonly policyExpiryDateUtc!: pulumi.Output<string | undefined>;
    /**
     * Policy ID.
     */
    public readonly policyid!: pulumi.Output<number>;
    /**
     * IPv6 pool names. The structure of `poolname6` block is documented below.
     */
    public readonly poolname6s!: pulumi.Output<outputs.firewall.PolicyPoolname6[] | undefined>;
    /**
     * IP Pool names. The structure of `poolname` block is documented below.
     */
    public readonly poolnames!: pulumi.Output<outputs.firewall.PolicyPoolname[] | undefined>;
    /**
     * Name of profile group.
     */
    public readonly profileGroup!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing Protocol options profile.
     */
    public readonly profileProtocolOptions!: pulumi.Output<string>;
    /**
     * Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
     */
    public readonly profileType!: pulumi.Output<string>;
    /**
     * Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server. Valid values: `enable`, `disable`.
     */
    public readonly radiusMacAuthBypass!: pulumi.Output<string>;
    /**
     * URL users are directed to after seeing and accepting the disclaimer or authenticating.
     */
    public readonly redirectUrl!: pulumi.Output<string | undefined>;
    /**
     * Override the default replacement message group for this policy.
     */
    public readonly replacemsgOverrideGroup!: pulumi.Output<string | undefined>;
    /**
     * Direction of the initial traffic for reputation to take effect. Valid values: `source`, `destination`.
     */
    public readonly reputationDirection!: pulumi.Output<string>;
    /**
     * Direction of the initial traffic for IPv6 reputation to take effect. Valid values: `source`, `destination`.
     */
    public readonly reputationDirection6!: pulumi.Output<string>;
    /**
     * Minimum Reputation to take action.
     */
    public readonly reputationMinimum!: pulumi.Output<number | undefined>;
    /**
     * IPv6 Minimum Reputation to take action.
     */
    public readonly reputationMinimum6!: pulumi.Output<number | undefined>;
    /**
     * Enable/disable RADIUS single sign-on (RSSO). Valid values: `enable`, `disable`.
     */
    public readonly rsso!: pulumi.Output<string | undefined>;
    /**
     * Address names if this is an RTP NAT policy. The structure of `rtpAddr` block is documented below.
     */
    public readonly rtpAddrs!: pulumi.Output<outputs.firewall.PolicyRtpAddr[] | undefined>;
    /**
     * Enable Real Time Protocol (RTP) NAT. Valid values: `disable`, `enable`.
     */
    public readonly rtpNat!: pulumi.Output<string>;
    /**
     * Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
     */
    public readonly scanBotnetConnections!: pulumi.Output<string | undefined>;
    /**
     * Schedule name.(Default is `always`)
     */
    public readonly schedule!: pulumi.Output<string | undefined>;
    /**
     * Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity. Valid values: `enable`, `disable`.
     */
    public readonly scheduleTimeout!: pulumi.Output<string>;
    /**
     * Name of an existing SCTP filter profile.
     */
    public readonly sctpFilterProfile!: pulumi.Output<string | undefined>;
    /**
     * Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
     */
    public readonly sendDenyPacket!: pulumi.Output<string>;
    /**
     * When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    public readonly serviceNegate!: pulumi.Output<string>;
    /**
     * Service and service group names. The structure of `service` block is documented below.
     */
    public readonly services!: pulumi.Output<outputs.firewall.PolicyService[] | undefined>;
    /**
     * TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
     */
    public readonly sessionTtl!: pulumi.Output<number | undefined>;
    /**
     * Enable/disable security group tags (SGT) check. Valid values: `enable`, `disable`.
     */
    public readonly sgtCheck!: pulumi.Output<string>;
    /**
     * Security group tags. The structure of `sgt` block is documented below.
     */
    public readonly sgts!: pulumi.Output<outputs.firewall.PolicySgt[] | undefined>;
    /**
     * Name of an existing Spam filter profile.
     */
    public readonly spamfilterProfile!: pulumi.Output<string | undefined>;
    /**
     * Vendor MAC source ID. The structure of `srcVendorMac` block is documented below.
     */
    public readonly srcVendorMacs!: pulumi.Output<outputs.firewall.PolicySrcVendorMac[] | undefined>;
    /**
     * When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
     */
    public readonly srcaddr6Negate!: pulumi.Output<string>;
    /**
     * Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
     */
    public readonly srcaddr6s!: pulumi.Output<outputs.firewall.PolicySrcaddr6[] | undefined>;
    /**
     * When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
     */
    public readonly srcaddrNegate!: pulumi.Output<string>;
    /**
     * Source address and address group names. The structure of `srcaddr` block is documented below.
     */
    public readonly srcaddrs!: pulumi.Output<outputs.firewall.PolicySrcaddr[] | undefined>;
    /**
     * Incoming (ingress) interface. The structure of `srcintf` block is documented below.
     */
    public readonly srcintfs!: pulumi.Output<outputs.firewall.PolicySrcintf[]>;
    /**
     * Name of an existing SSH filter profile.
     */
    public readonly sshFilterProfile!: pulumi.Output<string | undefined>;
    /**
     * Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
     */
    public readonly sshPolicyRedirect!: pulumi.Output<string>;
    /**
     * Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring). Valid values: `enable`, `disable`.
     */
    public readonly sslMirror!: pulumi.Output<string | undefined>;
    /**
     * SSL mirror interface name. The structure of `sslMirrorIntf` block is documented below.
     */
    public readonly sslMirrorIntfs!: pulumi.Output<outputs.firewall.PolicySslMirrorIntf[] | undefined>;
    /**
     * Name of an existing SSL SSH profile.
     */
    public readonly sslSshProfile!: pulumi.Output<string>;
    /**
     * Enable or disable this policy. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Receiver TCP maximum segment size (MSS).
     */
    public readonly tcpMssReceiver!: pulumi.Output<number | undefined>;
    /**
     * Sender TCP maximum segment size (MSS).
     */
    public readonly tcpMssSender!: pulumi.Output<number | undefined>;
    /**
     * Enable/disable creation of TCP session without SYN flag. Valid values: `all`, `data-only`, `disable`.
     */
    public readonly tcpSessionWithoutSyn!: pulumi.Output<string>;
    /**
     * Enable/disable sending RST packets when TCP sessions expire. Valid values: `enable`, `disable`.
     */
    public readonly timeoutSendRst!: pulumi.Output<string>;
    /**
     * ToS (Type of Service) value used for comparison.
     */
    public readonly tos!: pulumi.Output<string>;
    /**
     * Non-zero bit positions are used for comparison while zero bit positions are ignored.
     */
    public readonly tosMask!: pulumi.Output<string>;
    /**
     * Enable negated TOS match. Valid values: `enable`, `disable`.
     */
    public readonly tosNegate!: pulumi.Output<string>;
    /**
     * Traffic shaper.
     */
    public readonly trafficShaper!: pulumi.Output<string | undefined>;
    /**
     * Reverse traffic shaper.
     */
    public readonly trafficShaperReverse!: pulumi.Output<string | undefined>;
    /**
     * URL category ID list. The structure of `urlCategory` block is documented below.
     */
    public readonly urlCategories!: pulumi.Output<outputs.firewall.PolicyUrlCategory[] | undefined>;
    /**
     * Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
     */
    public readonly users!: pulumi.Output<outputs.firewall.PolicyUser[] | undefined>;
    /**
     * Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
     */
    public readonly utmStatus!: pulumi.Output<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing VideoFilter profile.
     */
    public readonly videofilterProfile!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing virtual-patch profile.
     */
    public readonly virtualPatchProfile!: pulumi.Output<string | undefined>;
    /**
     * VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
     */
    public readonly vlanCosFwd!: pulumi.Output<number>;
    /**
     * VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
     */
    public readonly vlanCosRev!: pulumi.Output<number>;
    /**
     * Set VLAN filters.
     */
    public readonly vlanFilter!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing VoIP (voipd) profile.
     */
    public readonly voipProfile!: pulumi.Output<string | undefined>;
    /**
     * Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
     */
    public readonly vpntunnel!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing Web application firewall profile.
     */
    public readonly wafProfile!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable WAN optimization. Valid values: `enable`, `disable`.
     */
    public readonly wanopt!: pulumi.Output<string>;
    /**
     * WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
     */
    public readonly wanoptDetection!: pulumi.Output<string>;
    /**
     * WAN optimization passive mode options. This option decides what IP address will be used to connect server. Valid values: `default`, `transparent`, `non-transparent`.
     */
    public readonly wanoptPassiveOpt!: pulumi.Output<string>;
    /**
     * WAN optimization peer.
     */
    public readonly wanoptPeer!: pulumi.Output<string | undefined>;
    /**
     * WAN optimization profile.
     */
    public readonly wanoptProfile!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable forwarding traffic matching this policy to a configured WCCP server. Valid values: `enable`, `disable`.
     */
    public readonly wccp!: pulumi.Output<string>;
    /**
     * Enable/disable web cache. Valid values: `enable`, `disable`.
     */
    public readonly webcache!: pulumi.Output<string>;
    /**
     * Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
     */
    public readonly webcacheHttps!: pulumi.Output<string>;
    /**
     * Name of an existing Web filter profile.
     */
    public readonly webfilterProfile!: pulumi.Output<string | undefined>;
    /**
     * Web proxy forward server name.
     */
    public readonly webproxyForwardServer!: pulumi.Output<string | undefined>;
    /**
     * Webproxy profile name.
     */
    public readonly webproxyProfile!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable WiFi Single Sign On (WSSO). Valid values: `enable`, `disable`.
     */
    public readonly wsso!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable zero trust device ownership. Valid values: `enable`, `disable`.
     */
    public readonly ztnaDeviceOwnership!: pulumi.Output<string>;
    /**
     * Source ztna-ems-tag-secondary names. The structure of `ztnaEmsTagSecondary` block is documented below.
     */
    public readonly ztnaEmsTagSecondaries!: pulumi.Output<outputs.firewall.PolicyZtnaEmsTagSecondary[] | undefined>;
    /**
     * Source ztna-ems-tag names. The structure of `ztnaEmsTag` block is documented below.
     */
    public readonly ztnaEmsTags!: pulumi.Output<outputs.firewall.PolicyZtnaEmsTag[] | undefined>;
    /**
     * Source ztna-geo-tag names. The structure of `ztnaGeoTag` block is documented below.
     */
    public readonly ztnaGeoTags!: pulumi.Output<outputs.firewall.PolicyZtnaGeoTag[] | undefined>;
    /**
     * Redirect ZTNA traffic to matching Access-Proxy proxy-policy. Valid values: `enable`, `disable`.
     */
    public readonly ztnaPolicyRedirect!: pulumi.Output<string>;
    /**
     * Enable/disable zero trust access. Valid values: `enable`, `disable`.
     */
    public readonly ztnaStatus!: pulumi.Output<string>;
    /**
     * ZTNA tag matching logic. Valid values: `or`, `and`.
     */
    public readonly ztnaTagsMatchLogic!: pulumi.Output<string>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["antiReplay"] = state ? state.antiReplay : undefined;
            resourceInputs["appCategories"] = state ? state.appCategories : undefined;
            resourceInputs["appGroups"] = state ? state.appGroups : undefined;
            resourceInputs["applicationList"] = state ? state.applicationList : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["authCert"] = state ? state.authCert : undefined;
            resourceInputs["authPath"] = state ? state.authPath : undefined;
            resourceInputs["authRedirectAddr"] = state ? state.authRedirectAddr : undefined;
            resourceInputs["autoAsicOffload"] = state ? state.autoAsicOffload : undefined;
            resourceInputs["avProfile"] = state ? state.avProfile : undefined;
            resourceInputs["blockNotification"] = state ? state.blockNotification : undefined;
            resourceInputs["captivePortalExempt"] = state ? state.captivePortalExempt : undefined;
            resourceInputs["capturePacket"] = state ? state.capturePacket : undefined;
            resourceInputs["casbProfile"] = state ? state.casbProfile : undefined;
            resourceInputs["cifsProfile"] = state ? state.cifsProfile : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["customLogFields"] = state ? state.customLogFields : undefined;
            resourceInputs["decryptedTrafficMirror"] = state ? state.decryptedTrafficMirror : undefined;
            resourceInputs["delayTcpNpuSession"] = state ? state.delayTcpNpuSession : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["diameterFilterProfile"] = state ? state.diameterFilterProfile : undefined;
            resourceInputs["diffservCopy"] = state ? state.diffservCopy : undefined;
            resourceInputs["diffservForward"] = state ? state.diffservForward : undefined;
            resourceInputs["diffservReverse"] = state ? state.diffservReverse : undefined;
            resourceInputs["diffservcodeForward"] = state ? state.diffservcodeForward : undefined;
            resourceInputs["diffservcodeRev"] = state ? state.diffservcodeRev : undefined;
            resourceInputs["disclaimer"] = state ? state.disclaimer : undefined;
            resourceInputs["dlpProfile"] = state ? state.dlpProfile : undefined;
            resourceInputs["dlpSensor"] = state ? state.dlpSensor : undefined;
            resourceInputs["dnsfilterProfile"] = state ? state.dnsfilterProfile : undefined;
            resourceInputs["dsri"] = state ? state.dsri : undefined;
            resourceInputs["dstaddr6Negate"] = state ? state.dstaddr6Negate : undefined;
            resourceInputs["dstaddr6s"] = state ? state.dstaddr6s : undefined;
            resourceInputs["dstaddrNegate"] = state ? state.dstaddrNegate : undefined;
            resourceInputs["dstaddrs"] = state ? state.dstaddrs : undefined;
            resourceInputs["dstintfs"] = state ? state.dstintfs : undefined;
            resourceInputs["dynamicShaping"] = state ? state.dynamicShaping : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["emailCollect"] = state ? state.emailCollect : undefined;
            resourceInputs["emailfilterProfile"] = state ? state.emailfilterProfile : undefined;
            resourceInputs["fec"] = state ? state.fec : undefined;
            resourceInputs["fileFilterProfile"] = state ? state.fileFilterProfile : undefined;
            resourceInputs["firewallSessionDirty"] = state ? state.firewallSessionDirty : undefined;
            resourceInputs["fixedport"] = state ? state.fixedport : undefined;
            resourceInputs["fsso"] = state ? state.fsso : undefined;
            resourceInputs["fssoAgentForNtlm"] = state ? state.fssoAgentForNtlm : undefined;
            resourceInputs["fssoGroups"] = state ? state.fssoGroups : undefined;
            resourceInputs["geoipAnycast"] = state ? state.geoipAnycast : undefined;
            resourceInputs["geoipMatch"] = state ? state.geoipMatch : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["globalLabel"] = state ? state.globalLabel : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["httpPolicyRedirect"] = state ? state.httpPolicyRedirect : undefined;
            resourceInputs["icapProfile"] = state ? state.icapProfile : undefined;
            resourceInputs["identityBasedRoute"] = state ? state.identityBasedRoute : undefined;
            resourceInputs["inbound"] = state ? state.inbound : undefined;
            resourceInputs["inspectionMode"] = state ? state.inspectionMode : undefined;
            resourceInputs["internetService"] = state ? state.internetService : undefined;
            resourceInputs["internetService6"] = state ? state.internetService6 : undefined;
            resourceInputs["internetService6CustomGroups"] = state ? state.internetService6CustomGroups : undefined;
            resourceInputs["internetService6Customs"] = state ? state.internetService6Customs : undefined;
            resourceInputs["internetService6Groups"] = state ? state.internetService6Groups : undefined;
            resourceInputs["internetService6Names"] = state ? state.internetService6Names : undefined;
            resourceInputs["internetService6Negate"] = state ? state.internetService6Negate : undefined;
            resourceInputs["internetService6Src"] = state ? state.internetService6Src : undefined;
            resourceInputs["internetService6SrcCustomGroups"] = state ? state.internetService6SrcCustomGroups : undefined;
            resourceInputs["internetService6SrcCustoms"] = state ? state.internetService6SrcCustoms : undefined;
            resourceInputs["internetService6SrcGroups"] = state ? state.internetService6SrcGroups : undefined;
            resourceInputs["internetService6SrcNames"] = state ? state.internetService6SrcNames : undefined;
            resourceInputs["internetService6SrcNegate"] = state ? state.internetService6SrcNegate : undefined;
            resourceInputs["internetServiceCustomGroups"] = state ? state.internetServiceCustomGroups : undefined;
            resourceInputs["internetServiceCustoms"] = state ? state.internetServiceCustoms : undefined;
            resourceInputs["internetServiceGroups"] = state ? state.internetServiceGroups : undefined;
            resourceInputs["internetServiceIds"] = state ? state.internetServiceIds : undefined;
            resourceInputs["internetServiceNames"] = state ? state.internetServiceNames : undefined;
            resourceInputs["internetServiceNegate"] = state ? state.internetServiceNegate : undefined;
            resourceInputs["internetServiceSrc"] = state ? state.internetServiceSrc : undefined;
            resourceInputs["internetServiceSrcCustomGroups"] = state ? state.internetServiceSrcCustomGroups : undefined;
            resourceInputs["internetServiceSrcCustoms"] = state ? state.internetServiceSrcCustoms : undefined;
            resourceInputs["internetServiceSrcGroups"] = state ? state.internetServiceSrcGroups : undefined;
            resourceInputs["internetServiceSrcIds"] = state ? state.internetServiceSrcIds : undefined;
            resourceInputs["internetServiceSrcNames"] = state ? state.internetServiceSrcNames : undefined;
            resourceInputs["internetServiceSrcNegate"] = state ? state.internetServiceSrcNegate : undefined;
            resourceInputs["ippool"] = state ? state.ippool : undefined;
            resourceInputs["ipsSensor"] = state ? state.ipsSensor : undefined;
            resourceInputs["ipsVoipFilter"] = state ? state.ipsVoipFilter : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["learningMode"] = state ? state.learningMode : undefined;
            resourceInputs["logtraffic"] = state ? state.logtraffic : undefined;
            resourceInputs["logtrafficStart"] = state ? state.logtrafficStart : undefined;
            resourceInputs["matchVip"] = state ? state.matchVip : undefined;
            resourceInputs["matchVipOnly"] = state ? state.matchVipOnly : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nat"] = state ? state.nat : undefined;
            resourceInputs["nat46"] = state ? state.nat46 : undefined;
            resourceInputs["nat64"] = state ? state.nat64 : undefined;
            resourceInputs["natinbound"] = state ? state.natinbound : undefined;
            resourceInputs["natip"] = state ? state.natip : undefined;
            resourceInputs["natoutbound"] = state ? state.natoutbound : undefined;
            resourceInputs["networkServiceDynamics"] = state ? state.networkServiceDynamics : undefined;
            resourceInputs["networkServiceSrcDynamics"] = state ? state.networkServiceSrcDynamics : undefined;
            resourceInputs["npAcceleration"] = state ? state.npAcceleration : undefined;
            resourceInputs["ntlm"] = state ? state.ntlm : undefined;
            resourceInputs["ntlmEnabledBrowsers"] = state ? state.ntlmEnabledBrowsers : undefined;
            resourceInputs["ntlmGuest"] = state ? state.ntlmGuest : undefined;
            resourceInputs["outbound"] = state ? state.outbound : undefined;
            resourceInputs["passiveWanHealthMeasurement"] = state ? state.passiveWanHealthMeasurement : undefined;
            resourceInputs["pcpInbound"] = state ? state.pcpInbound : undefined;
            resourceInputs["pcpOutbound"] = state ? state.pcpOutbound : undefined;
            resourceInputs["pcpPoolnames"] = state ? state.pcpPoolnames : undefined;
            resourceInputs["perIpShaper"] = state ? state.perIpShaper : undefined;
            resourceInputs["permitAnyHost"] = state ? state.permitAnyHost : undefined;
            resourceInputs["permitStunHost"] = state ? state.permitStunHost : undefined;
            resourceInputs["policyExpiry"] = state ? state.policyExpiry : undefined;
            resourceInputs["policyExpiryDate"] = state ? state.policyExpiryDate : undefined;
            resourceInputs["policyExpiryDateUtc"] = state ? state.policyExpiryDateUtc : undefined;
            resourceInputs["policyid"] = state ? state.policyid : undefined;
            resourceInputs["poolname6s"] = state ? state.poolname6s : undefined;
            resourceInputs["poolnames"] = state ? state.poolnames : undefined;
            resourceInputs["profileGroup"] = state ? state.profileGroup : undefined;
            resourceInputs["profileProtocolOptions"] = state ? state.profileProtocolOptions : undefined;
            resourceInputs["profileType"] = state ? state.profileType : undefined;
            resourceInputs["radiusMacAuthBypass"] = state ? state.radiusMacAuthBypass : undefined;
            resourceInputs["redirectUrl"] = state ? state.redirectUrl : undefined;
            resourceInputs["replacemsgOverrideGroup"] = state ? state.replacemsgOverrideGroup : undefined;
            resourceInputs["reputationDirection"] = state ? state.reputationDirection : undefined;
            resourceInputs["reputationDirection6"] = state ? state.reputationDirection6 : undefined;
            resourceInputs["reputationMinimum"] = state ? state.reputationMinimum : undefined;
            resourceInputs["reputationMinimum6"] = state ? state.reputationMinimum6 : undefined;
            resourceInputs["rsso"] = state ? state.rsso : undefined;
            resourceInputs["rtpAddrs"] = state ? state.rtpAddrs : undefined;
            resourceInputs["rtpNat"] = state ? state.rtpNat : undefined;
            resourceInputs["scanBotnetConnections"] = state ? state.scanBotnetConnections : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["scheduleTimeout"] = state ? state.scheduleTimeout : undefined;
            resourceInputs["sctpFilterProfile"] = state ? state.sctpFilterProfile : undefined;
            resourceInputs["sendDenyPacket"] = state ? state.sendDenyPacket : undefined;
            resourceInputs["serviceNegate"] = state ? state.serviceNegate : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["sessionTtl"] = state ? state.sessionTtl : undefined;
            resourceInputs["sgtCheck"] = state ? state.sgtCheck : undefined;
            resourceInputs["sgts"] = state ? state.sgts : undefined;
            resourceInputs["spamfilterProfile"] = state ? state.spamfilterProfile : undefined;
            resourceInputs["srcVendorMacs"] = state ? state.srcVendorMacs : undefined;
            resourceInputs["srcaddr6Negate"] = state ? state.srcaddr6Negate : undefined;
            resourceInputs["srcaddr6s"] = state ? state.srcaddr6s : undefined;
            resourceInputs["srcaddrNegate"] = state ? state.srcaddrNegate : undefined;
            resourceInputs["srcaddrs"] = state ? state.srcaddrs : undefined;
            resourceInputs["srcintfs"] = state ? state.srcintfs : undefined;
            resourceInputs["sshFilterProfile"] = state ? state.sshFilterProfile : undefined;
            resourceInputs["sshPolicyRedirect"] = state ? state.sshPolicyRedirect : undefined;
            resourceInputs["sslMirror"] = state ? state.sslMirror : undefined;
            resourceInputs["sslMirrorIntfs"] = state ? state.sslMirrorIntfs : undefined;
            resourceInputs["sslSshProfile"] = state ? state.sslSshProfile : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tcpMssReceiver"] = state ? state.tcpMssReceiver : undefined;
            resourceInputs["tcpMssSender"] = state ? state.tcpMssSender : undefined;
            resourceInputs["tcpSessionWithoutSyn"] = state ? state.tcpSessionWithoutSyn : undefined;
            resourceInputs["timeoutSendRst"] = state ? state.timeoutSendRst : undefined;
            resourceInputs["tos"] = state ? state.tos : undefined;
            resourceInputs["tosMask"] = state ? state.tosMask : undefined;
            resourceInputs["tosNegate"] = state ? state.tosNegate : undefined;
            resourceInputs["trafficShaper"] = state ? state.trafficShaper : undefined;
            resourceInputs["trafficShaperReverse"] = state ? state.trafficShaperReverse : undefined;
            resourceInputs["urlCategories"] = state ? state.urlCategories : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["utmStatus"] = state ? state.utmStatus : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["videofilterProfile"] = state ? state.videofilterProfile : undefined;
            resourceInputs["virtualPatchProfile"] = state ? state.virtualPatchProfile : undefined;
            resourceInputs["vlanCosFwd"] = state ? state.vlanCosFwd : undefined;
            resourceInputs["vlanCosRev"] = state ? state.vlanCosRev : undefined;
            resourceInputs["vlanFilter"] = state ? state.vlanFilter : undefined;
            resourceInputs["voipProfile"] = state ? state.voipProfile : undefined;
            resourceInputs["vpntunnel"] = state ? state.vpntunnel : undefined;
            resourceInputs["wafProfile"] = state ? state.wafProfile : undefined;
            resourceInputs["wanopt"] = state ? state.wanopt : undefined;
            resourceInputs["wanoptDetection"] = state ? state.wanoptDetection : undefined;
            resourceInputs["wanoptPassiveOpt"] = state ? state.wanoptPassiveOpt : undefined;
            resourceInputs["wanoptPeer"] = state ? state.wanoptPeer : undefined;
            resourceInputs["wanoptProfile"] = state ? state.wanoptProfile : undefined;
            resourceInputs["wccp"] = state ? state.wccp : undefined;
            resourceInputs["webcache"] = state ? state.webcache : undefined;
            resourceInputs["webcacheHttps"] = state ? state.webcacheHttps : undefined;
            resourceInputs["webfilterProfile"] = state ? state.webfilterProfile : undefined;
            resourceInputs["webproxyForwardServer"] = state ? state.webproxyForwardServer : undefined;
            resourceInputs["webproxyProfile"] = state ? state.webproxyProfile : undefined;
            resourceInputs["wsso"] = state ? state.wsso : undefined;
            resourceInputs["ztnaDeviceOwnership"] = state ? state.ztnaDeviceOwnership : undefined;
            resourceInputs["ztnaEmsTagSecondaries"] = state ? state.ztnaEmsTagSecondaries : undefined;
            resourceInputs["ztnaEmsTags"] = state ? state.ztnaEmsTags : undefined;
            resourceInputs["ztnaGeoTags"] = state ? state.ztnaGeoTags : undefined;
            resourceInputs["ztnaPolicyRedirect"] = state ? state.ztnaPolicyRedirect : undefined;
            resourceInputs["ztnaStatus"] = state ? state.ztnaStatus : undefined;
            resourceInputs["ztnaTagsMatchLogic"] = state ? state.ztnaTagsMatchLogic : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if ((!args || args.dstintfs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstintfs'");
            }
            if ((!args || args.srcintfs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcintfs'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["antiReplay"] = args ? args.antiReplay : undefined;
            resourceInputs["appCategories"] = args ? args.appCategories : undefined;
            resourceInputs["appGroups"] = args ? args.appGroups : undefined;
            resourceInputs["applicationList"] = args ? args.applicationList : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["authCert"] = args ? args.authCert : undefined;
            resourceInputs["authPath"] = args ? args.authPath : undefined;
            resourceInputs["authRedirectAddr"] = args ? args.authRedirectAddr : undefined;
            resourceInputs["autoAsicOffload"] = args ? args.autoAsicOffload : undefined;
            resourceInputs["avProfile"] = args ? args.avProfile : undefined;
            resourceInputs["blockNotification"] = args ? args.blockNotification : undefined;
            resourceInputs["captivePortalExempt"] = args ? args.captivePortalExempt : undefined;
            resourceInputs["capturePacket"] = args ? args.capturePacket : undefined;
            resourceInputs["casbProfile"] = args ? args.casbProfile : undefined;
            resourceInputs["cifsProfile"] = args ? args.cifsProfile : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["customLogFields"] = args ? args.customLogFields : undefined;
            resourceInputs["decryptedTrafficMirror"] = args ? args.decryptedTrafficMirror : undefined;
            resourceInputs["delayTcpNpuSession"] = args ? args.delayTcpNpuSession : undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["diameterFilterProfile"] = args ? args.diameterFilterProfile : undefined;
            resourceInputs["diffservCopy"] = args ? args.diffservCopy : undefined;
            resourceInputs["diffservForward"] = args ? args.diffservForward : undefined;
            resourceInputs["diffservReverse"] = args ? args.diffservReverse : undefined;
            resourceInputs["diffservcodeForward"] = args ? args.diffservcodeForward : undefined;
            resourceInputs["diffservcodeRev"] = args ? args.diffservcodeRev : undefined;
            resourceInputs["disclaimer"] = args ? args.disclaimer : undefined;
            resourceInputs["dlpProfile"] = args ? args.dlpProfile : undefined;
            resourceInputs["dlpSensor"] = args ? args.dlpSensor : undefined;
            resourceInputs["dnsfilterProfile"] = args ? args.dnsfilterProfile : undefined;
            resourceInputs["dsri"] = args ? args.dsri : undefined;
            resourceInputs["dstaddr6Negate"] = args ? args.dstaddr6Negate : undefined;
            resourceInputs["dstaddr6s"] = args ? args.dstaddr6s : undefined;
            resourceInputs["dstaddrNegate"] = args ? args.dstaddrNegate : undefined;
            resourceInputs["dstaddrs"] = args ? args.dstaddrs : undefined;
            resourceInputs["dstintfs"] = args ? args.dstintfs : undefined;
            resourceInputs["dynamicShaping"] = args ? args.dynamicShaping : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["emailCollect"] = args ? args.emailCollect : undefined;
            resourceInputs["emailfilterProfile"] = args ? args.emailfilterProfile : undefined;
            resourceInputs["fec"] = args ? args.fec : undefined;
            resourceInputs["fileFilterProfile"] = args ? args.fileFilterProfile : undefined;
            resourceInputs["firewallSessionDirty"] = args ? args.firewallSessionDirty : undefined;
            resourceInputs["fixedport"] = args ? args.fixedport : undefined;
            resourceInputs["fsso"] = args ? args.fsso : undefined;
            resourceInputs["fssoAgentForNtlm"] = args ? args.fssoAgentForNtlm : undefined;
            resourceInputs["fssoGroups"] = args ? args.fssoGroups : undefined;
            resourceInputs["geoipAnycast"] = args ? args.geoipAnycast : undefined;
            resourceInputs["geoipMatch"] = args ? args.geoipMatch : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["globalLabel"] = args ? args.globalLabel : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["httpPolicyRedirect"] = args ? args.httpPolicyRedirect : undefined;
            resourceInputs["icapProfile"] = args ? args.icapProfile : undefined;
            resourceInputs["identityBasedRoute"] = args ? args.identityBasedRoute : undefined;
            resourceInputs["inbound"] = args ? args.inbound : undefined;
            resourceInputs["inspectionMode"] = args ? args.inspectionMode : undefined;
            resourceInputs["internetService"] = args ? args.internetService : undefined;
            resourceInputs["internetService6"] = args ? args.internetService6 : undefined;
            resourceInputs["internetService6CustomGroups"] = args ? args.internetService6CustomGroups : undefined;
            resourceInputs["internetService6Customs"] = args ? args.internetService6Customs : undefined;
            resourceInputs["internetService6Groups"] = args ? args.internetService6Groups : undefined;
            resourceInputs["internetService6Names"] = args ? args.internetService6Names : undefined;
            resourceInputs["internetService6Negate"] = args ? args.internetService6Negate : undefined;
            resourceInputs["internetService6Src"] = args ? args.internetService6Src : undefined;
            resourceInputs["internetService6SrcCustomGroups"] = args ? args.internetService6SrcCustomGroups : undefined;
            resourceInputs["internetService6SrcCustoms"] = args ? args.internetService6SrcCustoms : undefined;
            resourceInputs["internetService6SrcGroups"] = args ? args.internetService6SrcGroups : undefined;
            resourceInputs["internetService6SrcNames"] = args ? args.internetService6SrcNames : undefined;
            resourceInputs["internetService6SrcNegate"] = args ? args.internetService6SrcNegate : undefined;
            resourceInputs["internetServiceCustomGroups"] = args ? args.internetServiceCustomGroups : undefined;
            resourceInputs["internetServiceCustoms"] = args ? args.internetServiceCustoms : undefined;
            resourceInputs["internetServiceGroups"] = args ? args.internetServiceGroups : undefined;
            resourceInputs["internetServiceIds"] = args ? args.internetServiceIds : undefined;
            resourceInputs["internetServiceNames"] = args ? args.internetServiceNames : undefined;
            resourceInputs["internetServiceNegate"] = args ? args.internetServiceNegate : undefined;
            resourceInputs["internetServiceSrc"] = args ? args.internetServiceSrc : undefined;
            resourceInputs["internetServiceSrcCustomGroups"] = args ? args.internetServiceSrcCustomGroups : undefined;
            resourceInputs["internetServiceSrcCustoms"] = args ? args.internetServiceSrcCustoms : undefined;
            resourceInputs["internetServiceSrcGroups"] = args ? args.internetServiceSrcGroups : undefined;
            resourceInputs["internetServiceSrcIds"] = args ? args.internetServiceSrcIds : undefined;
            resourceInputs["internetServiceSrcNames"] = args ? args.internetServiceSrcNames : undefined;
            resourceInputs["internetServiceSrcNegate"] = args ? args.internetServiceSrcNegate : undefined;
            resourceInputs["ippool"] = args ? args.ippool : undefined;
            resourceInputs["ipsSensor"] = args ? args.ipsSensor : undefined;
            resourceInputs["ipsVoipFilter"] = args ? args.ipsVoipFilter : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["learningMode"] = args ? args.learningMode : undefined;
            resourceInputs["logtraffic"] = args ? args.logtraffic : undefined;
            resourceInputs["logtrafficStart"] = args ? args.logtrafficStart : undefined;
            resourceInputs["matchVip"] = args ? args.matchVip : undefined;
            resourceInputs["matchVipOnly"] = args ? args.matchVipOnly : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nat"] = args ? args.nat : undefined;
            resourceInputs["nat46"] = args ? args.nat46 : undefined;
            resourceInputs["nat64"] = args ? args.nat64 : undefined;
            resourceInputs["natinbound"] = args ? args.natinbound : undefined;
            resourceInputs["natip"] = args ? args.natip : undefined;
            resourceInputs["natoutbound"] = args ? args.natoutbound : undefined;
            resourceInputs["networkServiceDynamics"] = args ? args.networkServiceDynamics : undefined;
            resourceInputs["networkServiceSrcDynamics"] = args ? args.networkServiceSrcDynamics : undefined;
            resourceInputs["npAcceleration"] = args ? args.npAcceleration : undefined;
            resourceInputs["ntlm"] = args ? args.ntlm : undefined;
            resourceInputs["ntlmEnabledBrowsers"] = args ? args.ntlmEnabledBrowsers : undefined;
            resourceInputs["ntlmGuest"] = args ? args.ntlmGuest : undefined;
            resourceInputs["outbound"] = args ? args.outbound : undefined;
            resourceInputs["passiveWanHealthMeasurement"] = args ? args.passiveWanHealthMeasurement : undefined;
            resourceInputs["pcpInbound"] = args ? args.pcpInbound : undefined;
            resourceInputs["pcpOutbound"] = args ? args.pcpOutbound : undefined;
            resourceInputs["pcpPoolnames"] = args ? args.pcpPoolnames : undefined;
            resourceInputs["perIpShaper"] = args ? args.perIpShaper : undefined;
            resourceInputs["permitAnyHost"] = args ? args.permitAnyHost : undefined;
            resourceInputs["permitStunHost"] = args ? args.permitStunHost : undefined;
            resourceInputs["policyExpiry"] = args ? args.policyExpiry : undefined;
            resourceInputs["policyExpiryDate"] = args ? args.policyExpiryDate : undefined;
            resourceInputs["policyExpiryDateUtc"] = args ? args.policyExpiryDateUtc : undefined;
            resourceInputs["policyid"] = args ? args.policyid : undefined;
            resourceInputs["poolname6s"] = args ? args.poolname6s : undefined;
            resourceInputs["poolnames"] = args ? args.poolnames : undefined;
            resourceInputs["profileGroup"] = args ? args.profileGroup : undefined;
            resourceInputs["profileProtocolOptions"] = args ? args.profileProtocolOptions : undefined;
            resourceInputs["profileType"] = args ? args.profileType : undefined;
            resourceInputs["radiusMacAuthBypass"] = args ? args.radiusMacAuthBypass : undefined;
            resourceInputs["redirectUrl"] = args ? args.redirectUrl : undefined;
            resourceInputs["replacemsgOverrideGroup"] = args ? args.replacemsgOverrideGroup : undefined;
            resourceInputs["reputationDirection"] = args ? args.reputationDirection : undefined;
            resourceInputs["reputationDirection6"] = args ? args.reputationDirection6 : undefined;
            resourceInputs["reputationMinimum"] = args ? args.reputationMinimum : undefined;
            resourceInputs["reputationMinimum6"] = args ? args.reputationMinimum6 : undefined;
            resourceInputs["rsso"] = args ? args.rsso : undefined;
            resourceInputs["rtpAddrs"] = args ? args.rtpAddrs : undefined;
            resourceInputs["rtpNat"] = args ? args.rtpNat : undefined;
            resourceInputs["scanBotnetConnections"] = args ? args.scanBotnetConnections : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["scheduleTimeout"] = args ? args.scheduleTimeout : undefined;
            resourceInputs["sctpFilterProfile"] = args ? args.sctpFilterProfile : undefined;
            resourceInputs["sendDenyPacket"] = args ? args.sendDenyPacket : undefined;
            resourceInputs["serviceNegate"] = args ? args.serviceNegate : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["sessionTtl"] = args ? args.sessionTtl : undefined;
            resourceInputs["sgtCheck"] = args ? args.sgtCheck : undefined;
            resourceInputs["sgts"] = args ? args.sgts : undefined;
            resourceInputs["spamfilterProfile"] = args ? args.spamfilterProfile : undefined;
            resourceInputs["srcVendorMacs"] = args ? args.srcVendorMacs : undefined;
            resourceInputs["srcaddr6Negate"] = args ? args.srcaddr6Negate : undefined;
            resourceInputs["srcaddr6s"] = args ? args.srcaddr6s : undefined;
            resourceInputs["srcaddrNegate"] = args ? args.srcaddrNegate : undefined;
            resourceInputs["srcaddrs"] = args ? args.srcaddrs : undefined;
            resourceInputs["srcintfs"] = args ? args.srcintfs : undefined;
            resourceInputs["sshFilterProfile"] = args ? args.sshFilterProfile : undefined;
            resourceInputs["sshPolicyRedirect"] = args ? args.sshPolicyRedirect : undefined;
            resourceInputs["sslMirror"] = args ? args.sslMirror : undefined;
            resourceInputs["sslMirrorIntfs"] = args ? args.sslMirrorIntfs : undefined;
            resourceInputs["sslSshProfile"] = args ? args.sslSshProfile : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tcpMssReceiver"] = args ? args.tcpMssReceiver : undefined;
            resourceInputs["tcpMssSender"] = args ? args.tcpMssSender : undefined;
            resourceInputs["tcpSessionWithoutSyn"] = args ? args.tcpSessionWithoutSyn : undefined;
            resourceInputs["timeoutSendRst"] = args ? args.timeoutSendRst : undefined;
            resourceInputs["tos"] = args ? args.tos : undefined;
            resourceInputs["tosMask"] = args ? args.tosMask : undefined;
            resourceInputs["tosNegate"] = args ? args.tosNegate : undefined;
            resourceInputs["trafficShaper"] = args ? args.trafficShaper : undefined;
            resourceInputs["trafficShaperReverse"] = args ? args.trafficShaperReverse : undefined;
            resourceInputs["urlCategories"] = args ? args.urlCategories : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["utmStatus"] = args ? args.utmStatus : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["videofilterProfile"] = args ? args.videofilterProfile : undefined;
            resourceInputs["virtualPatchProfile"] = args ? args.virtualPatchProfile : undefined;
            resourceInputs["vlanCosFwd"] = args ? args.vlanCosFwd : undefined;
            resourceInputs["vlanCosRev"] = args ? args.vlanCosRev : undefined;
            resourceInputs["vlanFilter"] = args ? args.vlanFilter : undefined;
            resourceInputs["voipProfile"] = args ? args.voipProfile : undefined;
            resourceInputs["vpntunnel"] = args ? args.vpntunnel : undefined;
            resourceInputs["wafProfile"] = args ? args.wafProfile : undefined;
            resourceInputs["wanopt"] = args ? args.wanopt : undefined;
            resourceInputs["wanoptDetection"] = args ? args.wanoptDetection : undefined;
            resourceInputs["wanoptPassiveOpt"] = args ? args.wanoptPassiveOpt : undefined;
            resourceInputs["wanoptPeer"] = args ? args.wanoptPeer : undefined;
            resourceInputs["wanoptProfile"] = args ? args.wanoptProfile : undefined;
            resourceInputs["wccp"] = args ? args.wccp : undefined;
            resourceInputs["webcache"] = args ? args.webcache : undefined;
            resourceInputs["webcacheHttps"] = args ? args.webcacheHttps : undefined;
            resourceInputs["webfilterProfile"] = args ? args.webfilterProfile : undefined;
            resourceInputs["webproxyForwardServer"] = args ? args.webproxyForwardServer : undefined;
            resourceInputs["webproxyProfile"] = args ? args.webproxyProfile : undefined;
            resourceInputs["wsso"] = args ? args.wsso : undefined;
            resourceInputs["ztnaDeviceOwnership"] = args ? args.ztnaDeviceOwnership : undefined;
            resourceInputs["ztnaEmsTagSecondaries"] = args ? args.ztnaEmsTagSecondaries : undefined;
            resourceInputs["ztnaEmsTags"] = args ? args.ztnaEmsTags : undefined;
            resourceInputs["ztnaGeoTags"] = args ? args.ztnaGeoTags : undefined;
            resourceInputs["ztnaPolicyRedirect"] = args ? args.ztnaPolicyRedirect : undefined;
            resourceInputs["ztnaStatus"] = args ? args.ztnaStatus : undefined;
            resourceInputs["ztnaTagsMatchLogic"] = args ? args.ztnaTagsMatchLogic : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * Policy action. On FortiOS versions 6.2.0-6.4.0: allow/deny/ipsec. On FortiOS versions >= 6.4.1: accept/deny/ipsec. Valid values: `accept`, `deny`, `ipsec`.
     */
    action?: pulumi.Input<string>;
    /**
     * Enable/disable anti-replay check. Valid values: `enable`, `disable`.
     */
    antiReplay?: pulumi.Input<string>;
    /**
     * Application category ID list. The structure of `appCategory` block is documented below.
     */
    appCategories?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyAppCategory>[]>;
    /**
     * Application group names. The structure of `appGroup` block is documented below.
     */
    appGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyAppGroup>[]>;
    /**
     * Name of an existing Application list.
     */
    applicationList?: pulumi.Input<string>;
    /**
     * Application ID list. The structure of `application` block is documented below.
     */
    applications?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyApplication>[]>;
    /**
     * HTTPS server certificate for policy authentication.
     */
    authCert?: pulumi.Input<string>;
    /**
     * Enable/disable authentication-based routing. Valid values: `enable`, `disable`.
     */
    authPath?: pulumi.Input<string>;
    /**
     * HTTP-to-HTTPS redirect address for firewall authentication.
     */
    authRedirectAddr?: pulumi.Input<string>;
    /**
     * Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
     */
    autoAsicOffload?: pulumi.Input<string>;
    /**
     * Name of an existing Antivirus profile.
     */
    avProfile?: pulumi.Input<string>;
    /**
     * Enable/disable block notification. Valid values: `enable`, `disable`.
     */
    blockNotification?: pulumi.Input<string>;
    /**
     * Enable to exempt some users from the captive portal. Valid values: `enable`, `disable`.
     */
    captivePortalExempt?: pulumi.Input<string>;
    /**
     * Enable/disable capture packets. Valid values: `enable`, `disable`.
     */
    capturePacket?: pulumi.Input<string>;
    /**
     * Name of an existing CASB profile.
     */
    casbProfile?: pulumi.Input<string>;
    /**
     * Name of an existing CIFS profile.
     */
    cifsProfile?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * Custom fields to append to log messages for this policy. The structure of `customLogFields` block is documented below.
     */
    customLogFields?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyCustomLogField>[]>;
    /**
     * Decrypted traffic mirror.
     */
    decryptedTrafficMirror?: pulumi.Input<string>;
    /**
     * Enable TCP NPU session delay to guarantee packet order of 3-way handshake. Valid values: `enable`, `disable`.
     */
    delayTcpNpuSession?: pulumi.Input<string>;
    /**
     * Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
     */
    devices?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyDevice>[]>;
    /**
     * Name of an existing Diameter filter profile.
     */
    diameterFilterProfile?: pulumi.Input<string>;
    /**
     * Enable to copy packet's DiffServ values from session's original direction to its reply direction. Valid values: `enable`, `disable`.
     */
    diffservCopy?: pulumi.Input<string>;
    /**
     * Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
     */
    diffservForward?: pulumi.Input<string>;
    /**
     * Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
     */
    diffservReverse?: pulumi.Input<string>;
    /**
     * Change packet's DiffServ to this value.
     */
    diffservcodeForward?: pulumi.Input<string>;
    /**
     * Change packet's reverse (reply) DiffServ to this value.
     */
    diffservcodeRev?: pulumi.Input<string>;
    /**
     * Enable/disable user authentication disclaimer. Valid values: `enable`, `disable`.
     */
    disclaimer?: pulumi.Input<string>;
    /**
     * Name of an existing DLP profile.
     */
    dlpProfile?: pulumi.Input<string>;
    /**
     * Name of an existing DLP sensor.
     */
    dlpSensor?: pulumi.Input<string>;
    /**
     * Name of an existing DNS filter profile.
     */
    dnsfilterProfile?: pulumi.Input<string>;
    /**
     * Enable DSRI to ignore HTTP server responses. Valid values: `enable`, `disable`.
     */
    dsri?: pulumi.Input<string>;
    /**
     * When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
     */
    dstaddr6Negate?: pulumi.Input<string>;
    /**
     * Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
     */
    dstaddr6s?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyDstaddr6>[]>;
    /**
     * When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
     */
    dstaddrNegate?: pulumi.Input<string>;
    /**
     * Destination address and address group names. The structure of `dstaddr` block is documented below.
     */
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyDstaddr>[]>;
    /**
     * Outgoing (egress) interface. The structure of `dstintf` block is documented below.
     */
    dstintfs?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyDstintf>[]>;
    /**
     * Enable/disable dynamic RADIUS defined traffic shaping. Valid values: `enable`, `disable`.
     */
    dynamicShaping?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Enable/disable email collection. Valid values: `enable`, `disable`.
     */
    emailCollect?: pulumi.Input<string>;
    /**
     * Name of an existing email filter profile.
     */
    emailfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable Forward Error Correction on traffic matching this policy on a FEC device. Valid values: `enable`, `disable`.
     */
    fec?: pulumi.Input<string>;
    /**
     * Name of an existing file-filter profile.
     */
    fileFilterProfile?: pulumi.Input<string>;
    /**
     * How to handle sessions if the configuration of this firewall policy changes. Valid values: `check-all`, `check-new`.
     */
    firewallSessionDirty?: pulumi.Input<string>;
    /**
     * Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
     */
    fixedport?: pulumi.Input<string>;
    /**
     * Enable/disable Fortinet Single Sign-On. Valid values: `enable`, `disable`.
     */
    fsso?: pulumi.Input<string>;
    /**
     * FSSO agent to use for NTLM authentication.
     */
    fssoAgentForNtlm?: pulumi.Input<string>;
    /**
     * Names of FSSO groups. The structure of `fssoGroups` block is documented below.
     */
    fssoGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyFssoGroup>[]>;
    /**
     * Enable/disable recognition of anycast IP addresses using the geography IP database. Valid values: `enable`, `disable`.
     */
    geoipAnycast?: pulumi.Input<string>;
    /**
     * Match geography address based either on its physical location or registered location. Valid values: `physical-location`, `registered-location`.
     */
    geoipMatch?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Label for the policy that appears when the GUI is in Global View mode.
     */
    globalLabel?: pulumi.Input<string>;
    /**
     * Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyGroup>[]>;
    /**
     * Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
     */
    httpPolicyRedirect?: pulumi.Input<string>;
    /**
     * Name of an existing ICAP profile.
     */
    icapProfile?: pulumi.Input<string>;
    /**
     * Name of identity-based routing rule.
     */
    identityBasedRoute?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
     */
    inbound?: pulumi.Input<string>;
    /**
     * Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
     */
    inspectionMode?: pulumi.Input<string>;
    /**
     * Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
     */
    internetService?: pulumi.Input<string>;
    /**
     * Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
     */
    internetService6?: pulumi.Input<string>;
    /**
     * Custom Internet Service6 group name. The structure of `internetService6CustomGroup` block is documented below.
     */
    internetService6CustomGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetService6CustomGroup>[]>;
    /**
     * Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
     */
    internetService6Customs?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetService6Custom>[]>;
    /**
     * Internet Service group name. The structure of `internetService6Group` block is documented below.
     */
    internetService6Groups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetService6Group>[]>;
    /**
     * IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
     */
    internetService6Names?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetService6Name>[]>;
    /**
     * When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    internetService6Negate?: pulumi.Input<string>;
    /**
     * Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
     */
    internetService6Src?: pulumi.Input<string>;
    /**
     * Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
     */
    internetService6SrcCustomGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetService6SrcCustomGroup>[]>;
    /**
     * Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
     */
    internetService6SrcCustoms?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetService6SrcCustom>[]>;
    /**
     * Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
     */
    internetService6SrcGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetService6SrcGroup>[]>;
    /**
     * IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
     */
    internetService6SrcNames?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetService6SrcName>[]>;
    /**
     * When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    internetService6SrcNegate?: pulumi.Input<string>;
    /**
     * Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
     */
    internetServiceCustomGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceCustomGroup>[]>;
    /**
     * Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
     */
    internetServiceCustoms?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceCustom>[]>;
    /**
     * Internet Service group name. The structure of `internetServiceGroup` block is documented below.
     */
    internetServiceGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceGroup>[]>;
    /**
     * Internet Service ID. The structure of `internetServiceId` block is documented below.
     */
    internetServiceIds?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceId>[]>;
    /**
     * Internet Service name. The structure of `internetServiceName` block is documented below.
     */
    internetServiceNames?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceName>[]>;
    /**
     * When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    internetServiceNegate?: pulumi.Input<string>;
    /**
     * Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
     */
    internetServiceSrc?: pulumi.Input<string>;
    /**
     * Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
     */
    internetServiceSrcCustomGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceSrcCustomGroup>[]>;
    /**
     * Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
     */
    internetServiceSrcCustoms?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceSrcCustom>[]>;
    /**
     * Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
     */
    internetServiceSrcGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceSrcGroup>[]>;
    /**
     * Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
     */
    internetServiceSrcIds?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceSrcId>[]>;
    /**
     * Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
     */
    internetServiceSrcNames?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceSrcName>[]>;
    /**
     * When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    internetServiceSrcNegate?: pulumi.Input<string>;
    /**
     * Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
     */
    ippool?: pulumi.Input<string>;
    /**
     * Name of an existing IPS sensor.
     */
    ipsSensor?: pulumi.Input<string>;
    /**
     * Name of an existing VoIP (ips) profile.
     */
    ipsVoipFilter?: pulumi.Input<string>;
    /**
     * Label for the policy that appears when the GUI is in Section View mode.
     */
    label?: pulumi.Input<string>;
    /**
     * Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
     */
    learningMode?: pulumi.Input<string>;
    /**
     * Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
     */
    logtraffic?: pulumi.Input<string>;
    /**
     * Record logs when a session starts. Valid values: `enable`, `disable`.
     */
    logtrafficStart?: pulumi.Input<string>;
    /**
     * Enable to match packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
     */
    matchVip?: pulumi.Input<string>;
    /**
     * Enable/disable matching of only those packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
     */
    matchVipOnly?: pulumi.Input<string>;
    /**
     * Policy name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable source NAT. Valid values: `enable`, `disable`.
     */
    nat?: pulumi.Input<string>;
    /**
     * Enable/disable NAT46. Valid values: `enable`, `disable`.
     */
    nat46?: pulumi.Input<string>;
    /**
     * Enable/disable NAT64. Valid values: `enable`, `disable`.
     */
    nat64?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: apply destination NAT to inbound traffic. Valid values: `enable`, `disable`.
     */
    natinbound?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
     */
    natip?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: apply source NAT to outbound traffic. Valid values: `enable`, `disable`.
     */
    natoutbound?: pulumi.Input<string>;
    /**
     * Dynamic Network Service name. The structure of `networkServiceDynamic` block is documented below.
     */
    networkServiceDynamics?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyNetworkServiceDynamic>[]>;
    /**
     * Dynamic Network Service source name. The structure of `networkServiceSrcDynamic` block is documented below.
     */
    networkServiceSrcDynamics?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyNetworkServiceSrcDynamic>[]>;
    /**
     * Enable/disable UTM Network Processor acceleration. Valid values: `enable`, `disable`.
     */
    npAcceleration?: pulumi.Input<string>;
    /**
     * Enable/disable NTLM authentication. Valid values: `enable`, `disable`.
     */
    ntlm?: pulumi.Input<string>;
    /**
     * HTTP-User-Agent value of supported browsers. The structure of `ntlmEnabledBrowsers` block is documented below.
     */
    ntlmEnabledBrowsers?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyNtlmEnabledBrowser>[]>;
    /**
     * Enable/disable NTLM guest user access. Valid values: `enable`, `disable`.
     */
    ntlmGuest?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
     */
    outbound?: pulumi.Input<string>;
    /**
     * Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled. Valid values: `enable`, `disable`.
     */
    passiveWanHealthMeasurement?: pulumi.Input<string>;
    /**
     * Enable/disable PCP inbound DNAT. Valid values: `enable`, `disable`.
     */
    pcpInbound?: pulumi.Input<string>;
    /**
     * Enable/disable PCP outbound SNAT. Valid values: `enable`, `disable`.
     */
    pcpOutbound?: pulumi.Input<string>;
    /**
     * PCP pool names. The structure of `pcpPoolname` block is documented below.
     */
    pcpPoolnames?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyPcpPoolname>[]>;
    /**
     * Per-IP traffic shaper.
     */
    perIpShaper?: pulumi.Input<string>;
    /**
     * Accept UDP packets from any host. Valid values: `enable`, `disable`.
     */
    permitAnyHost?: pulumi.Input<string>;
    /**
     * Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host. Valid values: `enable`, `disable`.
     */
    permitStunHost?: pulumi.Input<string>;
    /**
     * Enable/disable policy expiry. Valid values: `enable`, `disable`.
     */
    policyExpiry?: pulumi.Input<string>;
    /**
     * Policy expiry date (YYYY-MM-DD HH:MM:SS).
     */
    policyExpiryDate?: pulumi.Input<string>;
    /**
     * Policy expiry date and time, in epoch format.
     */
    policyExpiryDateUtc?: pulumi.Input<string>;
    /**
     * Policy ID.
     */
    policyid?: pulumi.Input<number>;
    /**
     * IPv6 pool names. The structure of `poolname6` block is documented below.
     */
    poolname6s?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyPoolname6>[]>;
    /**
     * IP Pool names. The structure of `poolname` block is documented below.
     */
    poolnames?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyPoolname>[]>;
    /**
     * Name of profile group.
     */
    profileGroup?: pulumi.Input<string>;
    /**
     * Name of an existing Protocol options profile.
     */
    profileProtocolOptions?: pulumi.Input<string>;
    /**
     * Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
     */
    profileType?: pulumi.Input<string>;
    /**
     * Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server. Valid values: `enable`, `disable`.
     */
    radiusMacAuthBypass?: pulumi.Input<string>;
    /**
     * URL users are directed to after seeing and accepting the disclaimer or authenticating.
     */
    redirectUrl?: pulumi.Input<string>;
    /**
     * Override the default replacement message group for this policy.
     */
    replacemsgOverrideGroup?: pulumi.Input<string>;
    /**
     * Direction of the initial traffic for reputation to take effect. Valid values: `source`, `destination`.
     */
    reputationDirection?: pulumi.Input<string>;
    /**
     * Direction of the initial traffic for IPv6 reputation to take effect. Valid values: `source`, `destination`.
     */
    reputationDirection6?: pulumi.Input<string>;
    /**
     * Minimum Reputation to take action.
     */
    reputationMinimum?: pulumi.Input<number>;
    /**
     * IPv6 Minimum Reputation to take action.
     */
    reputationMinimum6?: pulumi.Input<number>;
    /**
     * Enable/disable RADIUS single sign-on (RSSO). Valid values: `enable`, `disable`.
     */
    rsso?: pulumi.Input<string>;
    /**
     * Address names if this is an RTP NAT policy. The structure of `rtpAddr` block is documented below.
     */
    rtpAddrs?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyRtpAddr>[]>;
    /**
     * Enable Real Time Protocol (RTP) NAT. Valid values: `disable`, `enable`.
     */
    rtpNat?: pulumi.Input<string>;
    /**
     * Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
     */
    scanBotnetConnections?: pulumi.Input<string>;
    /**
     * Schedule name.(Default is `always`)
     */
    schedule?: pulumi.Input<string>;
    /**
     * Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity. Valid values: `enable`, `disable`.
     */
    scheduleTimeout?: pulumi.Input<string>;
    /**
     * Name of an existing SCTP filter profile.
     */
    sctpFilterProfile?: pulumi.Input<string>;
    /**
     * Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
     */
    sendDenyPacket?: pulumi.Input<string>;
    /**
     * When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    serviceNegate?: pulumi.Input<string>;
    /**
     * Service and service group names. The structure of `service` block is documented below.
     */
    services?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyService>[]>;
    /**
     * TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
     */
    sessionTtl?: pulumi.Input<number>;
    /**
     * Enable/disable security group tags (SGT) check. Valid values: `enable`, `disable`.
     */
    sgtCheck?: pulumi.Input<string>;
    /**
     * Security group tags. The structure of `sgt` block is documented below.
     */
    sgts?: pulumi.Input<pulumi.Input<inputs.firewall.PolicySgt>[]>;
    /**
     * Name of an existing Spam filter profile.
     */
    spamfilterProfile?: pulumi.Input<string>;
    /**
     * Vendor MAC source ID. The structure of `srcVendorMac` block is documented below.
     */
    srcVendorMacs?: pulumi.Input<pulumi.Input<inputs.firewall.PolicySrcVendorMac>[]>;
    /**
     * When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
     */
    srcaddr6Negate?: pulumi.Input<string>;
    /**
     * Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
     */
    srcaddr6s?: pulumi.Input<pulumi.Input<inputs.firewall.PolicySrcaddr6>[]>;
    /**
     * When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
     */
    srcaddrNegate?: pulumi.Input<string>;
    /**
     * Source address and address group names. The structure of `srcaddr` block is documented below.
     */
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.firewall.PolicySrcaddr>[]>;
    /**
     * Incoming (ingress) interface. The structure of `srcintf` block is documented below.
     */
    srcintfs?: pulumi.Input<pulumi.Input<inputs.firewall.PolicySrcintf>[]>;
    /**
     * Name of an existing SSH filter profile.
     */
    sshFilterProfile?: pulumi.Input<string>;
    /**
     * Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
     */
    sshPolicyRedirect?: pulumi.Input<string>;
    /**
     * Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring). Valid values: `enable`, `disable`.
     */
    sslMirror?: pulumi.Input<string>;
    /**
     * SSL mirror interface name. The structure of `sslMirrorIntf` block is documented below.
     */
    sslMirrorIntfs?: pulumi.Input<pulumi.Input<inputs.firewall.PolicySslMirrorIntf>[]>;
    /**
     * Name of an existing SSL SSH profile.
     */
    sslSshProfile?: pulumi.Input<string>;
    /**
     * Enable or disable this policy. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Receiver TCP maximum segment size (MSS).
     */
    tcpMssReceiver?: pulumi.Input<number>;
    /**
     * Sender TCP maximum segment size (MSS).
     */
    tcpMssSender?: pulumi.Input<number>;
    /**
     * Enable/disable creation of TCP session without SYN flag. Valid values: `all`, `data-only`, `disable`.
     */
    tcpSessionWithoutSyn?: pulumi.Input<string>;
    /**
     * Enable/disable sending RST packets when TCP sessions expire. Valid values: `enable`, `disable`.
     */
    timeoutSendRst?: pulumi.Input<string>;
    /**
     * ToS (Type of Service) value used for comparison.
     */
    tos?: pulumi.Input<string>;
    /**
     * Non-zero bit positions are used for comparison while zero bit positions are ignored.
     */
    tosMask?: pulumi.Input<string>;
    /**
     * Enable negated TOS match. Valid values: `enable`, `disable`.
     */
    tosNegate?: pulumi.Input<string>;
    /**
     * Traffic shaper.
     */
    trafficShaper?: pulumi.Input<string>;
    /**
     * Reverse traffic shaper.
     */
    trafficShaperReverse?: pulumi.Input<string>;
    /**
     * URL category ID list. The structure of `urlCategory` block is documented below.
     */
    urlCategories?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyUrlCategory>[]>;
    /**
     * Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
     */
    users?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyUser>[]>;
    /**
     * Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
     */
    utmStatus?: pulumi.Input<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Name of an existing VideoFilter profile.
     */
    videofilterProfile?: pulumi.Input<string>;
    /**
     * Name of an existing virtual-patch profile.
     */
    virtualPatchProfile?: pulumi.Input<string>;
    /**
     * VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
     */
    vlanCosFwd?: pulumi.Input<number>;
    /**
     * VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
     */
    vlanCosRev?: pulumi.Input<number>;
    /**
     * Set VLAN filters.
     */
    vlanFilter?: pulumi.Input<string>;
    /**
     * Name of an existing VoIP (voipd) profile.
     */
    voipProfile?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
     */
    vpntunnel?: pulumi.Input<string>;
    /**
     * Name of an existing Web application firewall profile.
     */
    wafProfile?: pulumi.Input<string>;
    /**
     * Enable/disable WAN optimization. Valid values: `enable`, `disable`.
     */
    wanopt?: pulumi.Input<string>;
    /**
     * WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
     */
    wanoptDetection?: pulumi.Input<string>;
    /**
     * WAN optimization passive mode options. This option decides what IP address will be used to connect server. Valid values: `default`, `transparent`, `non-transparent`.
     */
    wanoptPassiveOpt?: pulumi.Input<string>;
    /**
     * WAN optimization peer.
     */
    wanoptPeer?: pulumi.Input<string>;
    /**
     * WAN optimization profile.
     */
    wanoptProfile?: pulumi.Input<string>;
    /**
     * Enable/disable forwarding traffic matching this policy to a configured WCCP server. Valid values: `enable`, `disable`.
     */
    wccp?: pulumi.Input<string>;
    /**
     * Enable/disable web cache. Valid values: `enable`, `disable`.
     */
    webcache?: pulumi.Input<string>;
    /**
     * Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
     */
    webcacheHttps?: pulumi.Input<string>;
    /**
     * Name of an existing Web filter profile.
     */
    webfilterProfile?: pulumi.Input<string>;
    /**
     * Web proxy forward server name.
     */
    webproxyForwardServer?: pulumi.Input<string>;
    /**
     * Webproxy profile name.
     */
    webproxyProfile?: pulumi.Input<string>;
    /**
     * Enable/disable WiFi Single Sign On (WSSO). Valid values: `enable`, `disable`.
     */
    wsso?: pulumi.Input<string>;
    /**
     * Enable/disable zero trust device ownership. Valid values: `enable`, `disable`.
     */
    ztnaDeviceOwnership?: pulumi.Input<string>;
    /**
     * Source ztna-ems-tag-secondary names. The structure of `ztnaEmsTagSecondary` block is documented below.
     */
    ztnaEmsTagSecondaries?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyZtnaEmsTagSecondary>[]>;
    /**
     * Source ztna-ems-tag names. The structure of `ztnaEmsTag` block is documented below.
     */
    ztnaEmsTags?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyZtnaEmsTag>[]>;
    /**
     * Source ztna-geo-tag names. The structure of `ztnaGeoTag` block is documented below.
     */
    ztnaGeoTags?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyZtnaGeoTag>[]>;
    /**
     * Redirect ZTNA traffic to matching Access-Proxy proxy-policy. Valid values: `enable`, `disable`.
     */
    ztnaPolicyRedirect?: pulumi.Input<string>;
    /**
     * Enable/disable zero trust access. Valid values: `enable`, `disable`.
     */
    ztnaStatus?: pulumi.Input<string>;
    /**
     * ZTNA tag matching logic. Valid values: `or`, `and`.
     */
    ztnaTagsMatchLogic?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * Policy action. On FortiOS versions 6.2.0-6.4.0: allow/deny/ipsec. On FortiOS versions >= 6.4.1: accept/deny/ipsec. Valid values: `accept`, `deny`, `ipsec`.
     */
    action?: pulumi.Input<string>;
    /**
     * Enable/disable anti-replay check. Valid values: `enable`, `disable`.
     */
    antiReplay?: pulumi.Input<string>;
    /**
     * Application category ID list. The structure of `appCategory` block is documented below.
     */
    appCategories?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyAppCategory>[]>;
    /**
     * Application group names. The structure of `appGroup` block is documented below.
     */
    appGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyAppGroup>[]>;
    /**
     * Name of an existing Application list.
     */
    applicationList?: pulumi.Input<string>;
    /**
     * Application ID list. The structure of `application` block is documented below.
     */
    applications?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyApplication>[]>;
    /**
     * HTTPS server certificate for policy authentication.
     */
    authCert?: pulumi.Input<string>;
    /**
     * Enable/disable authentication-based routing. Valid values: `enable`, `disable`.
     */
    authPath?: pulumi.Input<string>;
    /**
     * HTTP-to-HTTPS redirect address for firewall authentication.
     */
    authRedirectAddr?: pulumi.Input<string>;
    /**
     * Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
     */
    autoAsicOffload?: pulumi.Input<string>;
    /**
     * Name of an existing Antivirus profile.
     */
    avProfile?: pulumi.Input<string>;
    /**
     * Enable/disable block notification. Valid values: `enable`, `disable`.
     */
    blockNotification?: pulumi.Input<string>;
    /**
     * Enable to exempt some users from the captive portal. Valid values: `enable`, `disable`.
     */
    captivePortalExempt?: pulumi.Input<string>;
    /**
     * Enable/disable capture packets. Valid values: `enable`, `disable`.
     */
    capturePacket?: pulumi.Input<string>;
    /**
     * Name of an existing CASB profile.
     */
    casbProfile?: pulumi.Input<string>;
    /**
     * Name of an existing CIFS profile.
     */
    cifsProfile?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * Custom fields to append to log messages for this policy. The structure of `customLogFields` block is documented below.
     */
    customLogFields?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyCustomLogField>[]>;
    /**
     * Decrypted traffic mirror.
     */
    decryptedTrafficMirror?: pulumi.Input<string>;
    /**
     * Enable TCP NPU session delay to guarantee packet order of 3-way handshake. Valid values: `enable`, `disable`.
     */
    delayTcpNpuSession?: pulumi.Input<string>;
    /**
     * Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
     */
    devices?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyDevice>[]>;
    /**
     * Name of an existing Diameter filter profile.
     */
    diameterFilterProfile?: pulumi.Input<string>;
    /**
     * Enable to copy packet's DiffServ values from session's original direction to its reply direction. Valid values: `enable`, `disable`.
     */
    diffservCopy?: pulumi.Input<string>;
    /**
     * Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
     */
    diffservForward?: pulumi.Input<string>;
    /**
     * Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
     */
    diffservReverse?: pulumi.Input<string>;
    /**
     * Change packet's DiffServ to this value.
     */
    diffservcodeForward?: pulumi.Input<string>;
    /**
     * Change packet's reverse (reply) DiffServ to this value.
     */
    diffservcodeRev?: pulumi.Input<string>;
    /**
     * Enable/disable user authentication disclaimer. Valid values: `enable`, `disable`.
     */
    disclaimer?: pulumi.Input<string>;
    /**
     * Name of an existing DLP profile.
     */
    dlpProfile?: pulumi.Input<string>;
    /**
     * Name of an existing DLP sensor.
     */
    dlpSensor?: pulumi.Input<string>;
    /**
     * Name of an existing DNS filter profile.
     */
    dnsfilterProfile?: pulumi.Input<string>;
    /**
     * Enable DSRI to ignore HTTP server responses. Valid values: `enable`, `disable`.
     */
    dsri?: pulumi.Input<string>;
    /**
     * When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
     */
    dstaddr6Negate?: pulumi.Input<string>;
    /**
     * Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
     */
    dstaddr6s?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyDstaddr6>[]>;
    /**
     * When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
     */
    dstaddrNegate?: pulumi.Input<string>;
    /**
     * Destination address and address group names. The structure of `dstaddr` block is documented below.
     */
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyDstaddr>[]>;
    /**
     * Outgoing (egress) interface. The structure of `dstintf` block is documented below.
     */
    dstintfs: pulumi.Input<pulumi.Input<inputs.firewall.PolicyDstintf>[]>;
    /**
     * Enable/disable dynamic RADIUS defined traffic shaping. Valid values: `enable`, `disable`.
     */
    dynamicShaping?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Enable/disable email collection. Valid values: `enable`, `disable`.
     */
    emailCollect?: pulumi.Input<string>;
    /**
     * Name of an existing email filter profile.
     */
    emailfilterProfile?: pulumi.Input<string>;
    /**
     * Enable/disable Forward Error Correction on traffic matching this policy on a FEC device. Valid values: `enable`, `disable`.
     */
    fec?: pulumi.Input<string>;
    /**
     * Name of an existing file-filter profile.
     */
    fileFilterProfile?: pulumi.Input<string>;
    /**
     * How to handle sessions if the configuration of this firewall policy changes. Valid values: `check-all`, `check-new`.
     */
    firewallSessionDirty?: pulumi.Input<string>;
    /**
     * Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
     */
    fixedport?: pulumi.Input<string>;
    /**
     * Enable/disable Fortinet Single Sign-On. Valid values: `enable`, `disable`.
     */
    fsso?: pulumi.Input<string>;
    /**
     * FSSO agent to use for NTLM authentication.
     */
    fssoAgentForNtlm?: pulumi.Input<string>;
    /**
     * Names of FSSO groups. The structure of `fssoGroups` block is documented below.
     */
    fssoGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyFssoGroup>[]>;
    /**
     * Enable/disable recognition of anycast IP addresses using the geography IP database. Valid values: `enable`, `disable`.
     */
    geoipAnycast?: pulumi.Input<string>;
    /**
     * Match geography address based either on its physical location or registered location. Valid values: `physical-location`, `registered-location`.
     */
    geoipMatch?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Label for the policy that appears when the GUI is in Global View mode.
     */
    globalLabel?: pulumi.Input<string>;
    /**
     * Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyGroup>[]>;
    /**
     * Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
     */
    httpPolicyRedirect?: pulumi.Input<string>;
    /**
     * Name of an existing ICAP profile.
     */
    icapProfile?: pulumi.Input<string>;
    /**
     * Name of identity-based routing rule.
     */
    identityBasedRoute?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
     */
    inbound?: pulumi.Input<string>;
    /**
     * Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
     */
    inspectionMode?: pulumi.Input<string>;
    /**
     * Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
     */
    internetService?: pulumi.Input<string>;
    /**
     * Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
     */
    internetService6?: pulumi.Input<string>;
    /**
     * Custom Internet Service6 group name. The structure of `internetService6CustomGroup` block is documented below.
     */
    internetService6CustomGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetService6CustomGroup>[]>;
    /**
     * Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
     */
    internetService6Customs?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetService6Custom>[]>;
    /**
     * Internet Service group name. The structure of `internetService6Group` block is documented below.
     */
    internetService6Groups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetService6Group>[]>;
    /**
     * IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
     */
    internetService6Names?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetService6Name>[]>;
    /**
     * When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    internetService6Negate?: pulumi.Input<string>;
    /**
     * Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
     */
    internetService6Src?: pulumi.Input<string>;
    /**
     * Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
     */
    internetService6SrcCustomGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetService6SrcCustomGroup>[]>;
    /**
     * Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
     */
    internetService6SrcCustoms?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetService6SrcCustom>[]>;
    /**
     * Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
     */
    internetService6SrcGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetService6SrcGroup>[]>;
    /**
     * IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
     */
    internetService6SrcNames?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetService6SrcName>[]>;
    /**
     * When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    internetService6SrcNegate?: pulumi.Input<string>;
    /**
     * Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
     */
    internetServiceCustomGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceCustomGroup>[]>;
    /**
     * Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
     */
    internetServiceCustoms?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceCustom>[]>;
    /**
     * Internet Service group name. The structure of `internetServiceGroup` block is documented below.
     */
    internetServiceGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceGroup>[]>;
    /**
     * Internet Service ID. The structure of `internetServiceId` block is documented below.
     */
    internetServiceIds?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceId>[]>;
    /**
     * Internet Service name. The structure of `internetServiceName` block is documented below.
     */
    internetServiceNames?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceName>[]>;
    /**
     * When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    internetServiceNegate?: pulumi.Input<string>;
    /**
     * Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
     */
    internetServiceSrc?: pulumi.Input<string>;
    /**
     * Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
     */
    internetServiceSrcCustomGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceSrcCustomGroup>[]>;
    /**
     * Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
     */
    internetServiceSrcCustoms?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceSrcCustom>[]>;
    /**
     * Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
     */
    internetServiceSrcGroups?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceSrcGroup>[]>;
    /**
     * Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
     */
    internetServiceSrcIds?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceSrcId>[]>;
    /**
     * Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
     */
    internetServiceSrcNames?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyInternetServiceSrcName>[]>;
    /**
     * When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    internetServiceSrcNegate?: pulumi.Input<string>;
    /**
     * Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
     */
    ippool?: pulumi.Input<string>;
    /**
     * Name of an existing IPS sensor.
     */
    ipsSensor?: pulumi.Input<string>;
    /**
     * Name of an existing VoIP (ips) profile.
     */
    ipsVoipFilter?: pulumi.Input<string>;
    /**
     * Label for the policy that appears when the GUI is in Section View mode.
     */
    label?: pulumi.Input<string>;
    /**
     * Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
     */
    learningMode?: pulumi.Input<string>;
    /**
     * Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
     */
    logtraffic?: pulumi.Input<string>;
    /**
     * Record logs when a session starts. Valid values: `enable`, `disable`.
     */
    logtrafficStart?: pulumi.Input<string>;
    /**
     * Enable to match packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
     */
    matchVip?: pulumi.Input<string>;
    /**
     * Enable/disable matching of only those packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
     */
    matchVipOnly?: pulumi.Input<string>;
    /**
     * Policy name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable source NAT. Valid values: `enable`, `disable`.
     */
    nat?: pulumi.Input<string>;
    /**
     * Enable/disable NAT46. Valid values: `enable`, `disable`.
     */
    nat46?: pulumi.Input<string>;
    /**
     * Enable/disable NAT64. Valid values: `enable`, `disable`.
     */
    nat64?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: apply destination NAT to inbound traffic. Valid values: `enable`, `disable`.
     */
    natinbound?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
     */
    natip?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: apply source NAT to outbound traffic. Valid values: `enable`, `disable`.
     */
    natoutbound?: pulumi.Input<string>;
    /**
     * Dynamic Network Service name. The structure of `networkServiceDynamic` block is documented below.
     */
    networkServiceDynamics?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyNetworkServiceDynamic>[]>;
    /**
     * Dynamic Network Service source name. The structure of `networkServiceSrcDynamic` block is documented below.
     */
    networkServiceSrcDynamics?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyNetworkServiceSrcDynamic>[]>;
    /**
     * Enable/disable UTM Network Processor acceleration. Valid values: `enable`, `disable`.
     */
    npAcceleration?: pulumi.Input<string>;
    /**
     * Enable/disable NTLM authentication. Valid values: `enable`, `disable`.
     */
    ntlm?: pulumi.Input<string>;
    /**
     * HTTP-User-Agent value of supported browsers. The structure of `ntlmEnabledBrowsers` block is documented below.
     */
    ntlmEnabledBrowsers?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyNtlmEnabledBrowser>[]>;
    /**
     * Enable/disable NTLM guest user access. Valid values: `enable`, `disable`.
     */
    ntlmGuest?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
     */
    outbound?: pulumi.Input<string>;
    /**
     * Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled. Valid values: `enable`, `disable`.
     */
    passiveWanHealthMeasurement?: pulumi.Input<string>;
    /**
     * Enable/disable PCP inbound DNAT. Valid values: `enable`, `disable`.
     */
    pcpInbound?: pulumi.Input<string>;
    /**
     * Enable/disable PCP outbound SNAT. Valid values: `enable`, `disable`.
     */
    pcpOutbound?: pulumi.Input<string>;
    /**
     * PCP pool names. The structure of `pcpPoolname` block is documented below.
     */
    pcpPoolnames?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyPcpPoolname>[]>;
    /**
     * Per-IP traffic shaper.
     */
    perIpShaper?: pulumi.Input<string>;
    /**
     * Accept UDP packets from any host. Valid values: `enable`, `disable`.
     */
    permitAnyHost?: pulumi.Input<string>;
    /**
     * Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host. Valid values: `enable`, `disable`.
     */
    permitStunHost?: pulumi.Input<string>;
    /**
     * Enable/disable policy expiry. Valid values: `enable`, `disable`.
     */
    policyExpiry?: pulumi.Input<string>;
    /**
     * Policy expiry date (YYYY-MM-DD HH:MM:SS).
     */
    policyExpiryDate?: pulumi.Input<string>;
    /**
     * Policy expiry date and time, in epoch format.
     */
    policyExpiryDateUtc?: pulumi.Input<string>;
    /**
     * Policy ID.
     */
    policyid?: pulumi.Input<number>;
    /**
     * IPv6 pool names. The structure of `poolname6` block is documented below.
     */
    poolname6s?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyPoolname6>[]>;
    /**
     * IP Pool names. The structure of `poolname` block is documented below.
     */
    poolnames?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyPoolname>[]>;
    /**
     * Name of profile group.
     */
    profileGroup?: pulumi.Input<string>;
    /**
     * Name of an existing Protocol options profile.
     */
    profileProtocolOptions?: pulumi.Input<string>;
    /**
     * Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
     */
    profileType?: pulumi.Input<string>;
    /**
     * Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server. Valid values: `enable`, `disable`.
     */
    radiusMacAuthBypass?: pulumi.Input<string>;
    /**
     * URL users are directed to after seeing and accepting the disclaimer or authenticating.
     */
    redirectUrl?: pulumi.Input<string>;
    /**
     * Override the default replacement message group for this policy.
     */
    replacemsgOverrideGroup?: pulumi.Input<string>;
    /**
     * Direction of the initial traffic for reputation to take effect. Valid values: `source`, `destination`.
     */
    reputationDirection?: pulumi.Input<string>;
    /**
     * Direction of the initial traffic for IPv6 reputation to take effect. Valid values: `source`, `destination`.
     */
    reputationDirection6?: pulumi.Input<string>;
    /**
     * Minimum Reputation to take action.
     */
    reputationMinimum?: pulumi.Input<number>;
    /**
     * IPv6 Minimum Reputation to take action.
     */
    reputationMinimum6?: pulumi.Input<number>;
    /**
     * Enable/disable RADIUS single sign-on (RSSO). Valid values: `enable`, `disable`.
     */
    rsso?: pulumi.Input<string>;
    /**
     * Address names if this is an RTP NAT policy. The structure of `rtpAddr` block is documented below.
     */
    rtpAddrs?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyRtpAddr>[]>;
    /**
     * Enable Real Time Protocol (RTP) NAT. Valid values: `disable`, `enable`.
     */
    rtpNat?: pulumi.Input<string>;
    /**
     * Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
     */
    scanBotnetConnections?: pulumi.Input<string>;
    /**
     * Schedule name.(Default is `always`)
     */
    schedule?: pulumi.Input<string>;
    /**
     * Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity. Valid values: `enable`, `disable`.
     */
    scheduleTimeout?: pulumi.Input<string>;
    /**
     * Name of an existing SCTP filter profile.
     */
    sctpFilterProfile?: pulumi.Input<string>;
    /**
     * Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
     */
    sendDenyPacket?: pulumi.Input<string>;
    /**
     * When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
     */
    serviceNegate?: pulumi.Input<string>;
    /**
     * Service and service group names. The structure of `service` block is documented below.
     */
    services?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyService>[]>;
    /**
     * TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
     */
    sessionTtl?: pulumi.Input<number>;
    /**
     * Enable/disable security group tags (SGT) check. Valid values: `enable`, `disable`.
     */
    sgtCheck?: pulumi.Input<string>;
    /**
     * Security group tags. The structure of `sgt` block is documented below.
     */
    sgts?: pulumi.Input<pulumi.Input<inputs.firewall.PolicySgt>[]>;
    /**
     * Name of an existing Spam filter profile.
     */
    spamfilterProfile?: pulumi.Input<string>;
    /**
     * Vendor MAC source ID. The structure of `srcVendorMac` block is documented below.
     */
    srcVendorMacs?: pulumi.Input<pulumi.Input<inputs.firewall.PolicySrcVendorMac>[]>;
    /**
     * When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
     */
    srcaddr6Negate?: pulumi.Input<string>;
    /**
     * Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
     */
    srcaddr6s?: pulumi.Input<pulumi.Input<inputs.firewall.PolicySrcaddr6>[]>;
    /**
     * When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
     */
    srcaddrNegate?: pulumi.Input<string>;
    /**
     * Source address and address group names. The structure of `srcaddr` block is documented below.
     */
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.firewall.PolicySrcaddr>[]>;
    /**
     * Incoming (ingress) interface. The structure of `srcintf` block is documented below.
     */
    srcintfs: pulumi.Input<pulumi.Input<inputs.firewall.PolicySrcintf>[]>;
    /**
     * Name of an existing SSH filter profile.
     */
    sshFilterProfile?: pulumi.Input<string>;
    /**
     * Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
     */
    sshPolicyRedirect?: pulumi.Input<string>;
    /**
     * Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring). Valid values: `enable`, `disable`.
     */
    sslMirror?: pulumi.Input<string>;
    /**
     * SSL mirror interface name. The structure of `sslMirrorIntf` block is documented below.
     */
    sslMirrorIntfs?: pulumi.Input<pulumi.Input<inputs.firewall.PolicySslMirrorIntf>[]>;
    /**
     * Name of an existing SSL SSH profile.
     */
    sslSshProfile?: pulumi.Input<string>;
    /**
     * Enable or disable this policy. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Receiver TCP maximum segment size (MSS).
     */
    tcpMssReceiver?: pulumi.Input<number>;
    /**
     * Sender TCP maximum segment size (MSS).
     */
    tcpMssSender?: pulumi.Input<number>;
    /**
     * Enable/disable creation of TCP session without SYN flag. Valid values: `all`, `data-only`, `disable`.
     */
    tcpSessionWithoutSyn?: pulumi.Input<string>;
    /**
     * Enable/disable sending RST packets when TCP sessions expire. Valid values: `enable`, `disable`.
     */
    timeoutSendRst?: pulumi.Input<string>;
    /**
     * ToS (Type of Service) value used for comparison.
     */
    tos?: pulumi.Input<string>;
    /**
     * Non-zero bit positions are used for comparison while zero bit positions are ignored.
     */
    tosMask?: pulumi.Input<string>;
    /**
     * Enable negated TOS match. Valid values: `enable`, `disable`.
     */
    tosNegate?: pulumi.Input<string>;
    /**
     * Traffic shaper.
     */
    trafficShaper?: pulumi.Input<string>;
    /**
     * Reverse traffic shaper.
     */
    trafficShaperReverse?: pulumi.Input<string>;
    /**
     * URL category ID list. The structure of `urlCategory` block is documented below.
     */
    urlCategories?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyUrlCategory>[]>;
    /**
     * Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
     */
    users?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyUser>[]>;
    /**
     * Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
     */
    utmStatus?: pulumi.Input<string>;
    /**
     * Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Name of an existing VideoFilter profile.
     */
    videofilterProfile?: pulumi.Input<string>;
    /**
     * Name of an existing virtual-patch profile.
     */
    virtualPatchProfile?: pulumi.Input<string>;
    /**
     * VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
     */
    vlanCosFwd?: pulumi.Input<number>;
    /**
     * VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
     */
    vlanCosRev?: pulumi.Input<number>;
    /**
     * Set VLAN filters.
     */
    vlanFilter?: pulumi.Input<string>;
    /**
     * Name of an existing VoIP (voipd) profile.
     */
    voipProfile?: pulumi.Input<string>;
    /**
     * Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
     */
    vpntunnel?: pulumi.Input<string>;
    /**
     * Name of an existing Web application firewall profile.
     */
    wafProfile?: pulumi.Input<string>;
    /**
     * Enable/disable WAN optimization. Valid values: `enable`, `disable`.
     */
    wanopt?: pulumi.Input<string>;
    /**
     * WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
     */
    wanoptDetection?: pulumi.Input<string>;
    /**
     * WAN optimization passive mode options. This option decides what IP address will be used to connect server. Valid values: `default`, `transparent`, `non-transparent`.
     */
    wanoptPassiveOpt?: pulumi.Input<string>;
    /**
     * WAN optimization peer.
     */
    wanoptPeer?: pulumi.Input<string>;
    /**
     * WAN optimization profile.
     */
    wanoptProfile?: pulumi.Input<string>;
    /**
     * Enable/disable forwarding traffic matching this policy to a configured WCCP server. Valid values: `enable`, `disable`.
     */
    wccp?: pulumi.Input<string>;
    /**
     * Enable/disable web cache. Valid values: `enable`, `disable`.
     */
    webcache?: pulumi.Input<string>;
    /**
     * Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
     */
    webcacheHttps?: pulumi.Input<string>;
    /**
     * Name of an existing Web filter profile.
     */
    webfilterProfile?: pulumi.Input<string>;
    /**
     * Web proxy forward server name.
     */
    webproxyForwardServer?: pulumi.Input<string>;
    /**
     * Webproxy profile name.
     */
    webproxyProfile?: pulumi.Input<string>;
    /**
     * Enable/disable WiFi Single Sign On (WSSO). Valid values: `enable`, `disable`.
     */
    wsso?: pulumi.Input<string>;
    /**
     * Enable/disable zero trust device ownership. Valid values: `enable`, `disable`.
     */
    ztnaDeviceOwnership?: pulumi.Input<string>;
    /**
     * Source ztna-ems-tag-secondary names. The structure of `ztnaEmsTagSecondary` block is documented below.
     */
    ztnaEmsTagSecondaries?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyZtnaEmsTagSecondary>[]>;
    /**
     * Source ztna-ems-tag names. The structure of `ztnaEmsTag` block is documented below.
     */
    ztnaEmsTags?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyZtnaEmsTag>[]>;
    /**
     * Source ztna-geo-tag names. The structure of `ztnaGeoTag` block is documented below.
     */
    ztnaGeoTags?: pulumi.Input<pulumi.Input<inputs.firewall.PolicyZtnaGeoTag>[]>;
    /**
     * Redirect ZTNA traffic to matching Access-Proxy proxy-policy. Valid values: `enable`, `disable`.
     */
    ztnaPolicyRedirect?: pulumi.Input<string>;
    /**
     * Enable/disable zero trust access. Valid values: `enable`, `disable`.
     */
    ztnaStatus?: pulumi.Input<string>;
    /**
     * ZTNA tag matching logic. Valid values: `or`, `and`.
     */
    ztnaTagsMatchLogic?: pulumi.Input<string>;
}
