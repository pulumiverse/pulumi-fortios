// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * SSH proxy host public keys.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trname = new fortios.firewall.ssh.Hostkey("trname", {
 *     hostname: "testmachine",
 *     ip: "1.1.1.1",
 *     port: 22,
 *     status: "trusted",
 *     type: "RSA",
 * });
 * ```
 *
 * ## Import
 *
 * FirewallSsh HostKey can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:firewall/ssh/hostkey:Hostkey labelname {{name}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:firewall/ssh/hostkey:Hostkey labelname {{name}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Hostkey extends pulumi.CustomResource {
    /**
     * Get an existing Hostkey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HostkeyState, opts?: pulumi.CustomResourceOptions): Hostkey {
        return new Hostkey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:firewall/ssh/hostkey:Hostkey';

    /**
     * Returns true if the given object is an instance of Hostkey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Hostkey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Hostkey.__pulumiType;
    }

    /**
     * Hostname of the SSH server.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * IP address of the SSH server.
     */
    public readonly ip!: pulumi.Output<string>;
    /**
     * SSH public key name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set the nid of the ECDSA key. Valid values: `256`, `384`, `521`.
     */
    public readonly nid!: pulumi.Output<string>;
    /**
     * Port of the SSH server.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * SSH public key.
     */
    public readonly publicKey!: pulumi.Output<string | undefined>;
    /**
     * Set the trust status of the public key. Valid values: `trusted`, `revoked`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Set the type of the public key. Valid values: `RSA`, `DSA`, `ECDSA`, `ED25519`, `RSA-CA`, `DSA-CA`, `ECDSA-CA`, `ED25519-CA`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Usage for this public key. Valid values: `transparent-proxy`, `access-proxy`.
     */
    public readonly usage!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a Hostkey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HostkeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HostkeyArgs | HostkeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HostkeyState | undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nid"] = state ? state.nid : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["usage"] = state ? state.usage : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as HostkeyArgs | undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nid"] = args ? args.nid : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["publicKey"] = args?.publicKey ? pulumi.secret(args.publicKey) : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["usage"] = args ? args.usage : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["publicKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Hostkey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Hostkey resources.
 */
export interface HostkeyState {
    /**
     * Hostname of the SSH server.
     */
    hostname?: pulumi.Input<string>;
    /**
     * IP address of the SSH server.
     */
    ip?: pulumi.Input<string>;
    /**
     * SSH public key name.
     */
    name?: pulumi.Input<string>;
    /**
     * Set the nid of the ECDSA key. Valid values: `256`, `384`, `521`.
     */
    nid?: pulumi.Input<string>;
    /**
     * Port of the SSH server.
     */
    port?: pulumi.Input<number>;
    /**
     * SSH public key.
     */
    publicKey?: pulumi.Input<string>;
    /**
     * Set the trust status of the public key. Valid values: `trusted`, `revoked`.
     */
    status?: pulumi.Input<string>;
    /**
     * Set the type of the public key. Valid values: `RSA`, `DSA`, `ECDSA`, `ED25519`, `RSA-CA`, `DSA-CA`, `ECDSA-CA`, `ED25519-CA`.
     */
    type?: pulumi.Input<string>;
    /**
     * Usage for this public key. Valid values: `transparent-proxy`, `access-proxy`.
     */
    usage?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Hostkey resource.
 */
export interface HostkeyArgs {
    /**
     * Hostname of the SSH server.
     */
    hostname?: pulumi.Input<string>;
    /**
     * IP address of the SSH server.
     */
    ip?: pulumi.Input<string>;
    /**
     * SSH public key name.
     */
    name?: pulumi.Input<string>;
    /**
     * Set the nid of the ECDSA key. Valid values: `256`, `384`, `521`.
     */
    nid?: pulumi.Input<string>;
    /**
     * Port of the SSH server.
     */
    port?: pulumi.Input<number>;
    /**
     * SSH public key.
     */
    publicKey?: pulumi.Input<string>;
    /**
     * Set the trust status of the public key. Valid values: `trusted`, `revoked`.
     */
    status?: pulumi.Input<string>;
    /**
     * Set the type of the public key. Valid values: `RSA`, `DSA`, `ECDSA`, `ED25519`, `RSA-CA`, `DSA-CA`, `ECDSA-CA`, `ED25519-CA`.
     */
    type?: pulumi.Input<string>;
    /**
     * Usage for this public key. Valid values: `transparent-proxy`, `access-proxy`.
     */
    usage?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
