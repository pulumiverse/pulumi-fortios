// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource supports handling JSON RPC request for FortiManager.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const test1 = new fortios.fmg.JsonrpcRequest("test1", {jsonContent: `{
 *   "method": "add",
 *   "params": [
 *     {
 *       "data": [
 *         {
 *           "action": "accept",
 *           "dstaddr": ["all"],
 *           "dstintf": "any",
 *           "name": "policytest",
 *           "schedule": "none",
 *           "service": "ALL",
 *           "srcaddr": "all",
 *           "srcintf": "any",
 *           "internet-service": "enable",
 *           "internet-service-id": "Alibaba-Web",
 *           "internet-service-src": "enable",
 *           "internet-service-src-id": "Alibaba-Web",
 *           "users": "guest",
 *           "groups": "Guest-group"
 *         }
 *       ],
 *       "url": "/pm/config/adom/root/pkg/default/firewall/policy"
 *     }
 *   ]
 * }
 *
 * `});
 * const test2 = new fortios.fmg.JsonrpcRequest("test2", {jsonContent: `{
 *   "method": "add",
 *   "params": [
 *     {
 *       "data": [
 *         {
 *           "ip": "192.168.1.2",
 *           "name": "logserver4",
 *           "port": "514"
 *         }
 *       ],
 *       "url": "/cli/global/system/syslog"
 *     }
 *   ]
 * }
 *
 * `});
 * const test3 = new fortios.fmg.JsonrpcRequest("test3", {jsonContent: `{
 *   "method": "get",
 *   "params": [
 *     {
 *       "url": "/cli/global/system/admin/user/APIUser"
 *     }
 *   ]
 * }
 *
 * `});
 * ```
 */
export class JsonrpcRequest extends pulumi.CustomResource {
    /**
     * Get an existing JsonrpcRequest resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JsonrpcRequestState, opts?: pulumi.CustomResourceOptions): JsonrpcRequest {
        return new JsonrpcRequest(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:fmg/jsonrpcRequest:JsonrpcRequest';

    /**
     * Returns true if the given object is an instance of JsonrpcRequest.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JsonrpcRequest {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JsonrpcRequest.__pulumiType;
    }

    /**
     * Comment.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * JSON RPC request, which should contain 'method' and 'params' parameters.
     */
    public readonly jsonContent!: pulumi.Output<string>;
    /**
     * JSON RPC request response data.
     */
    public /*out*/ readonly response!: pulumi.Output<string>;

    /**
     * Create a JsonrpcRequest resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JsonrpcRequestArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JsonrpcRequestArgs | JsonrpcRequestState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JsonrpcRequestState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["jsonContent"] = state ? state.jsonContent : undefined;
            resourceInputs["response"] = state ? state.response : undefined;
        } else {
            const args = argsOrState as JsonrpcRequestArgs | undefined;
            if ((!args || args.jsonContent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jsonContent'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["jsonContent"] = args ? args.jsonContent : undefined;
            resourceInputs["response"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(JsonrpcRequest.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering JsonrpcRequest resources.
 */
export interface JsonrpcRequestState {
    /**
     * Comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * JSON RPC request, which should contain 'method' and 'params' parameters.
     */
    jsonContent?: pulumi.Input<string>;
    /**
     * JSON RPC request response data.
     */
    response?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a JsonrpcRequest resource.
 */
export interface JsonrpcRequestArgs {
    /**
     * Comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * JSON RPC request, which should contain 'method' and 'params' parameters.
     */
    jsonContent: pulumi.Input<string>;
}
