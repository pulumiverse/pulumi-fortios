// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource supports uploading VM license to FortiGate through FortiManager.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const test1 = new fortios.fmg.SystemLicenseVm("test1", {
 *     fileContent: "XXX",
 *     target: "fortigate-test",
 * });
 * ```
 */
export class SystemLicenseVm extends pulumi.CustomResource {
    /**
     * Get an existing SystemLicenseVm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemLicenseVmState, opts?: pulumi.CustomResourceOptions): SystemLicenseVm {
        return new SystemLicenseVm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:fmg/systemLicenseVm:SystemLicenseVm';

    /**
     * Returns true if the given object is an instance of SystemLicenseVm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemLicenseVm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemLicenseVm.__pulumiType;
    }

    /**
     * ADOM that the target device belongs to. default is 'root'.
     */
    public readonly adom!: pulumi.Output<string | undefined>;
    /**
     * The license file, it needs to be base64 encoded.
     */
    public readonly fileContent!: pulumi.Output<string>;
    /**
     * Target name, which is managed by FortiManager.
     */
    public readonly target!: pulumi.Output<string>;

    /**
     * Create a SystemLicenseVm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemLicenseVmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemLicenseVmArgs | SystemLicenseVmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemLicenseVmState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["fileContent"] = state ? state.fileContent : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
        } else {
            const args = argsOrState as SystemLicenseVmArgs | undefined;
            if ((!args || args.fileContent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileContent'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["fileContent"] = args ? args.fileContent : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemLicenseVm.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SystemLicenseVm resources.
 */
export interface SystemLicenseVmState {
    /**
     * ADOM that the target device belongs to. default is 'root'.
     */
    adom?: pulumi.Input<string>;
    /**
     * The license file, it needs to be base64 encoded.
     */
    fileContent?: pulumi.Input<string>;
    /**
     * Target name, which is managed by FortiManager.
     */
    target?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemLicenseVm resource.
 */
export interface SystemLicenseVmArgs {
    /**
     * ADOM that the target device belongs to. default is 'root'.
     */
    adom?: pulumi.Input<string>;
    /**
     * The license file, it needs to be base64 encoded.
     */
    fileContent: pulumi.Input<string>;
    /**
     * Target name, which is managed by FortiManager.
     */
    target: pulumi.Input<string>;
}
