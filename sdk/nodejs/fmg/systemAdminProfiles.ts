// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource supports Create/Read/Update/Delete admin profiles for FortiManager
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const test1 = new fortios.fmg.SystemAdminProfiles("test1", {
 *     adomPolicyPackages: "read",
 *     adomSwitch: "read",
 *     assignment: "read",
 *     configRetrieve: "read",
 *     configRevert: "read",
 *     consistencyCheck: "read-write",
 *     deployManagement: "read",
 *     description: "11",
 *     deviceAp: "none",
 *     deviceConfig: "read",
 *     deviceForticlient: "read",
 *     deviceFortiswitch: "read",
 *     deviceManager: "read-write",
 *     deviceOperation: "read",
 *     deviceProfile: "read",
 *     deviceRevisionDeletion: "read",
 *     deviceWanLinkLoadBalance: "read",
 *     fortiguardCenter: "read",
 *     fortiguardCenterAdvanced: "read",
 *     fortiguardCenterFirmwareManagerment: "read",
 *     fortiguardCenterLicensing: "read",
 *     globalPolicyPackages: "read-write",
 *     importPolicyPackages: "read",
 *     intfMapping: "read-write",
 *     logViewer: "read",
 *     policyObjects: "read-write",
 *     profileid: "terraform-test1",
 *     setInstallTargets: "read-write",
 *     systemSetting: "read",
 *     terminalAccess: "read",
 *     vpnManager: "read",
 * });
 * ```
 */
export class SystemAdminProfiles extends pulumi.CustomResource {
    /**
     * Get an existing SystemAdminProfiles resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemAdminProfilesState, opts?: pulumi.CustomResourceOptions): SystemAdminProfiles {
        return new SystemAdminProfiles(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:fmg/systemAdminProfiles:SystemAdminProfiles';

    /**
     * Returns true if the given object is an instance of SystemAdminProfiles.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemAdminProfiles {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemAdminProfiles.__pulumiType;
    }

    /**
     * Adom policy packages.
     */
    public readonly adomPolicyPackages!: pulumi.Output<string | undefined>;
    /**
     * Administrator Domain.
     */
    public readonly adomSwitch!: pulumi.Output<string | undefined>;
    /**
     * Assignment Permission.
     */
    public readonly assignment!: pulumi.Output<string | undefined>;
    /**
     * Configuration Retrieve.
     */
    public readonly configRetrieve!: pulumi.Output<string | undefined>;
    /**
     * Revert Configuration from Revision History.
     */
    public readonly configRevert!: pulumi.Output<string | undefined>;
    /**
     * Consistency check.
     */
    public readonly consistencyCheck!: pulumi.Output<string | undefined>;
    /**
     * Install to devices.
     */
    public readonly deployManagement!: pulumi.Output<string | undefined>;
    /**
     * Description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Manage AP.
     */
    public readonly deviceAp!: pulumi.Output<string | undefined>;
    /**
     * Manage device configurations.
     */
    public readonly deviceConfig!: pulumi.Output<string | undefined>;
    /**
     * Manage FortiClient.
     */
    public readonly deviceForticlient!: pulumi.Output<string | undefined>;
    /**
     * Manage FortiSwitch.
     */
    public readonly deviceFortiswitch!: pulumi.Output<string | undefined>;
    /**
     * Device Manager.
     */
    public readonly deviceManager!: pulumi.Output<string | undefined>;
    /**
     * Device add/delete/edit.
     */
    public readonly deviceOperation!: pulumi.Output<string | undefined>;
    /**
     * Device profile permission.
     */
    public readonly deviceProfile!: pulumi.Output<string | undefined>;
    /**
     * Delete device revision.
     */
    public readonly deviceRevisionDeletion!: pulumi.Output<string | undefined>;
    /**
     * Manage WAN link load balance.
     */
    public readonly deviceWanLinkLoadBalance!: pulumi.Output<string | undefined>;
    /**
     * FortiGuard Center.
     */
    public readonly fortiguardCenter!: pulumi.Output<string | undefined>;
    /**
     * FortiGuard Center Advanced.
     */
    public readonly fortiguardCenterAdvanced!: pulumi.Output<string | undefined>;
    /**
     * FortiGuard Center Firmware Managerment.
     */
    public readonly fortiguardCenterFirmwareManagerment!: pulumi.Output<string | undefined>;
    /**
     * FortiGuard Center Licensing.
     */
    public readonly fortiguardCenterLicensing!: pulumi.Output<string | undefined>;
    /**
     * Global policy packages.
     */
    public readonly globalPolicyPackages!: pulumi.Output<string | undefined>;
    /**
     * Import Policy Package.
     */
    public readonly importPolicyPackages!: pulumi.Output<string | undefined>;
    /**
     * Interface Mapping.
     */
    public readonly intfMapping!: pulumi.Output<string | undefined>;
    /**
     * Log Viewer.
     */
    public readonly logViewer!: pulumi.Output<string | undefined>;
    /**
     * Policy objects permission.
     */
    public readonly policyObjects!: pulumi.Output<string | undefined>;
    /**
     * Profile name.
     */
    public readonly profileid!: pulumi.Output<string>;
    /**
     * Edit installation targets.
     */
    public readonly setInstallTargets!: pulumi.Output<string | undefined>;
    /**
     * System Setting.
     */
    public readonly systemSetting!: pulumi.Output<string | undefined>;
    /**
     * Terminal access.
     */
    public readonly terminalAccess!: pulumi.Output<string | undefined>;
    /**
     * VPN Manager.
     */
    public readonly vpnManager!: pulumi.Output<string | undefined>;

    /**
     * Create a SystemAdminProfiles resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemAdminProfilesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemAdminProfilesArgs | SystemAdminProfilesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemAdminProfilesState | undefined;
            resourceInputs["adomPolicyPackages"] = state ? state.adomPolicyPackages : undefined;
            resourceInputs["adomSwitch"] = state ? state.adomSwitch : undefined;
            resourceInputs["assignment"] = state ? state.assignment : undefined;
            resourceInputs["configRetrieve"] = state ? state.configRetrieve : undefined;
            resourceInputs["configRevert"] = state ? state.configRevert : undefined;
            resourceInputs["consistencyCheck"] = state ? state.consistencyCheck : undefined;
            resourceInputs["deployManagement"] = state ? state.deployManagement : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceAp"] = state ? state.deviceAp : undefined;
            resourceInputs["deviceConfig"] = state ? state.deviceConfig : undefined;
            resourceInputs["deviceForticlient"] = state ? state.deviceForticlient : undefined;
            resourceInputs["deviceFortiswitch"] = state ? state.deviceFortiswitch : undefined;
            resourceInputs["deviceManager"] = state ? state.deviceManager : undefined;
            resourceInputs["deviceOperation"] = state ? state.deviceOperation : undefined;
            resourceInputs["deviceProfile"] = state ? state.deviceProfile : undefined;
            resourceInputs["deviceRevisionDeletion"] = state ? state.deviceRevisionDeletion : undefined;
            resourceInputs["deviceWanLinkLoadBalance"] = state ? state.deviceWanLinkLoadBalance : undefined;
            resourceInputs["fortiguardCenter"] = state ? state.fortiguardCenter : undefined;
            resourceInputs["fortiguardCenterAdvanced"] = state ? state.fortiguardCenterAdvanced : undefined;
            resourceInputs["fortiguardCenterFirmwareManagerment"] = state ? state.fortiguardCenterFirmwareManagerment : undefined;
            resourceInputs["fortiguardCenterLicensing"] = state ? state.fortiguardCenterLicensing : undefined;
            resourceInputs["globalPolicyPackages"] = state ? state.globalPolicyPackages : undefined;
            resourceInputs["importPolicyPackages"] = state ? state.importPolicyPackages : undefined;
            resourceInputs["intfMapping"] = state ? state.intfMapping : undefined;
            resourceInputs["logViewer"] = state ? state.logViewer : undefined;
            resourceInputs["policyObjects"] = state ? state.policyObjects : undefined;
            resourceInputs["profileid"] = state ? state.profileid : undefined;
            resourceInputs["setInstallTargets"] = state ? state.setInstallTargets : undefined;
            resourceInputs["systemSetting"] = state ? state.systemSetting : undefined;
            resourceInputs["terminalAccess"] = state ? state.terminalAccess : undefined;
            resourceInputs["vpnManager"] = state ? state.vpnManager : undefined;
        } else {
            const args = argsOrState as SystemAdminProfilesArgs | undefined;
            if ((!args || args.profileid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileid'");
            }
            resourceInputs["adomPolicyPackages"] = args ? args.adomPolicyPackages : undefined;
            resourceInputs["adomSwitch"] = args ? args.adomSwitch : undefined;
            resourceInputs["assignment"] = args ? args.assignment : undefined;
            resourceInputs["configRetrieve"] = args ? args.configRetrieve : undefined;
            resourceInputs["configRevert"] = args ? args.configRevert : undefined;
            resourceInputs["consistencyCheck"] = args ? args.consistencyCheck : undefined;
            resourceInputs["deployManagement"] = args ? args.deployManagement : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceAp"] = args ? args.deviceAp : undefined;
            resourceInputs["deviceConfig"] = args ? args.deviceConfig : undefined;
            resourceInputs["deviceForticlient"] = args ? args.deviceForticlient : undefined;
            resourceInputs["deviceFortiswitch"] = args ? args.deviceFortiswitch : undefined;
            resourceInputs["deviceManager"] = args ? args.deviceManager : undefined;
            resourceInputs["deviceOperation"] = args ? args.deviceOperation : undefined;
            resourceInputs["deviceProfile"] = args ? args.deviceProfile : undefined;
            resourceInputs["deviceRevisionDeletion"] = args ? args.deviceRevisionDeletion : undefined;
            resourceInputs["deviceWanLinkLoadBalance"] = args ? args.deviceWanLinkLoadBalance : undefined;
            resourceInputs["fortiguardCenter"] = args ? args.fortiguardCenter : undefined;
            resourceInputs["fortiguardCenterAdvanced"] = args ? args.fortiguardCenterAdvanced : undefined;
            resourceInputs["fortiguardCenterFirmwareManagerment"] = args ? args.fortiguardCenterFirmwareManagerment : undefined;
            resourceInputs["fortiguardCenterLicensing"] = args ? args.fortiguardCenterLicensing : undefined;
            resourceInputs["globalPolicyPackages"] = args ? args.globalPolicyPackages : undefined;
            resourceInputs["importPolicyPackages"] = args ? args.importPolicyPackages : undefined;
            resourceInputs["intfMapping"] = args ? args.intfMapping : undefined;
            resourceInputs["logViewer"] = args ? args.logViewer : undefined;
            resourceInputs["policyObjects"] = args ? args.policyObjects : undefined;
            resourceInputs["profileid"] = args ? args.profileid : undefined;
            resourceInputs["setInstallTargets"] = args ? args.setInstallTargets : undefined;
            resourceInputs["systemSetting"] = args ? args.systemSetting : undefined;
            resourceInputs["terminalAccess"] = args ? args.terminalAccess : undefined;
            resourceInputs["vpnManager"] = args ? args.vpnManager : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemAdminProfiles.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SystemAdminProfiles resources.
 */
export interface SystemAdminProfilesState {
    /**
     * Adom policy packages.
     */
    adomPolicyPackages?: pulumi.Input<string>;
    /**
     * Administrator Domain.
     */
    adomSwitch?: pulumi.Input<string>;
    /**
     * Assignment Permission.
     */
    assignment?: pulumi.Input<string>;
    /**
     * Configuration Retrieve.
     */
    configRetrieve?: pulumi.Input<string>;
    /**
     * Revert Configuration from Revision History.
     */
    configRevert?: pulumi.Input<string>;
    /**
     * Consistency check.
     */
    consistencyCheck?: pulumi.Input<string>;
    /**
     * Install to devices.
     */
    deployManagement?: pulumi.Input<string>;
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * Manage AP.
     */
    deviceAp?: pulumi.Input<string>;
    /**
     * Manage device configurations.
     */
    deviceConfig?: pulumi.Input<string>;
    /**
     * Manage FortiClient.
     */
    deviceForticlient?: pulumi.Input<string>;
    /**
     * Manage FortiSwitch.
     */
    deviceFortiswitch?: pulumi.Input<string>;
    /**
     * Device Manager.
     */
    deviceManager?: pulumi.Input<string>;
    /**
     * Device add/delete/edit.
     */
    deviceOperation?: pulumi.Input<string>;
    /**
     * Device profile permission.
     */
    deviceProfile?: pulumi.Input<string>;
    /**
     * Delete device revision.
     */
    deviceRevisionDeletion?: pulumi.Input<string>;
    /**
     * Manage WAN link load balance.
     */
    deviceWanLinkLoadBalance?: pulumi.Input<string>;
    /**
     * FortiGuard Center.
     */
    fortiguardCenter?: pulumi.Input<string>;
    /**
     * FortiGuard Center Advanced.
     */
    fortiguardCenterAdvanced?: pulumi.Input<string>;
    /**
     * FortiGuard Center Firmware Managerment.
     */
    fortiguardCenterFirmwareManagerment?: pulumi.Input<string>;
    /**
     * FortiGuard Center Licensing.
     */
    fortiguardCenterLicensing?: pulumi.Input<string>;
    /**
     * Global policy packages.
     */
    globalPolicyPackages?: pulumi.Input<string>;
    /**
     * Import Policy Package.
     */
    importPolicyPackages?: pulumi.Input<string>;
    /**
     * Interface Mapping.
     */
    intfMapping?: pulumi.Input<string>;
    /**
     * Log Viewer.
     */
    logViewer?: pulumi.Input<string>;
    /**
     * Policy objects permission.
     */
    policyObjects?: pulumi.Input<string>;
    /**
     * Profile name.
     */
    profileid?: pulumi.Input<string>;
    /**
     * Edit installation targets.
     */
    setInstallTargets?: pulumi.Input<string>;
    /**
     * System Setting.
     */
    systemSetting?: pulumi.Input<string>;
    /**
     * Terminal access.
     */
    terminalAccess?: pulumi.Input<string>;
    /**
     * VPN Manager.
     */
    vpnManager?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemAdminProfiles resource.
 */
export interface SystemAdminProfilesArgs {
    /**
     * Adom policy packages.
     */
    adomPolicyPackages?: pulumi.Input<string>;
    /**
     * Administrator Domain.
     */
    adomSwitch?: pulumi.Input<string>;
    /**
     * Assignment Permission.
     */
    assignment?: pulumi.Input<string>;
    /**
     * Configuration Retrieve.
     */
    configRetrieve?: pulumi.Input<string>;
    /**
     * Revert Configuration from Revision History.
     */
    configRevert?: pulumi.Input<string>;
    /**
     * Consistency check.
     */
    consistencyCheck?: pulumi.Input<string>;
    /**
     * Install to devices.
     */
    deployManagement?: pulumi.Input<string>;
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * Manage AP.
     */
    deviceAp?: pulumi.Input<string>;
    /**
     * Manage device configurations.
     */
    deviceConfig?: pulumi.Input<string>;
    /**
     * Manage FortiClient.
     */
    deviceForticlient?: pulumi.Input<string>;
    /**
     * Manage FortiSwitch.
     */
    deviceFortiswitch?: pulumi.Input<string>;
    /**
     * Device Manager.
     */
    deviceManager?: pulumi.Input<string>;
    /**
     * Device add/delete/edit.
     */
    deviceOperation?: pulumi.Input<string>;
    /**
     * Device profile permission.
     */
    deviceProfile?: pulumi.Input<string>;
    /**
     * Delete device revision.
     */
    deviceRevisionDeletion?: pulumi.Input<string>;
    /**
     * Manage WAN link load balance.
     */
    deviceWanLinkLoadBalance?: pulumi.Input<string>;
    /**
     * FortiGuard Center.
     */
    fortiguardCenter?: pulumi.Input<string>;
    /**
     * FortiGuard Center Advanced.
     */
    fortiguardCenterAdvanced?: pulumi.Input<string>;
    /**
     * FortiGuard Center Firmware Managerment.
     */
    fortiguardCenterFirmwareManagerment?: pulumi.Input<string>;
    /**
     * FortiGuard Center Licensing.
     */
    fortiguardCenterLicensing?: pulumi.Input<string>;
    /**
     * Global policy packages.
     */
    globalPolicyPackages?: pulumi.Input<string>;
    /**
     * Import Policy Package.
     */
    importPolicyPackages?: pulumi.Input<string>;
    /**
     * Interface Mapping.
     */
    intfMapping?: pulumi.Input<string>;
    /**
     * Log Viewer.
     */
    logViewer?: pulumi.Input<string>;
    /**
     * Policy objects permission.
     */
    policyObjects?: pulumi.Input<string>;
    /**
     * Profile name.
     */
    profileid: pulumi.Input<string>;
    /**
     * Edit installation targets.
     */
    setInstallTargets?: pulumi.Input<string>;
    /**
     * System Setting.
     */
    systemSetting?: pulumi.Input<string>;
    /**
     * Terminal access.
     */
    terminalAccess?: pulumi.Input<string>;
    /**
     * VPN Manager.
     */
    vpnManager?: pulumi.Input<string>;
}
