// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Define known domain controller servers. Applies to FortiOS Version `6.4.0,6.4.1,6.4.2,6.4.10,6.4.11,6.4.12,6.4.13,6.4.14,7.0.0`.
 *
 * ## Import
 *
 * CredentialStore DomainController can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:credentialstore/domaincontroller:Domaincontroller labelname {{server_name}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:credentialstore/domaincontroller:Domaincontroller labelname {{server_name}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Domaincontroller extends pulumi.CustomResource {
    /**
     * Get an existing Domaincontroller resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomaincontrollerState, opts?: pulumi.CustomResourceOptions): Domaincontroller {
        return new Domaincontroller(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:credentialstore/domaincontroller:Domaincontroller';

    /**
     * Returns true if the given object is an instance of Domaincontroller.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Domaincontroller {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domaincontroller.__pulumiType;
    }

    /**
     * Fully qualified domain name (FQDN).
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * Hostname of the server to connect to.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * IPv4 server address.
     */
    public readonly ip!: pulumi.Output<string>;
    /**
     * IPv6 server address.
     */
    public readonly ip6!: pulumi.Output<string>;
    /**
     * Password for specified username.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Port number of service. Port number 0 indicates automatic discovery.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Name of the server to connect to.
     */
    public readonly serverName!: pulumi.Output<string>;
    /**
     * User name to sign in with. Must have proper permissions for service.
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a Domaincontroller resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DomaincontrollerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomaincontrollerArgs | DomaincontrollerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomaincontrollerState | undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ip6"] = state ? state.ip6 : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as DomaincontrollerArgs | undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["ip6"] = args ? args.ip6 : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Domaincontroller.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Domaincontroller resources.
 */
export interface DomaincontrollerState {
    /**
     * Fully qualified domain name (FQDN).
     */
    domainName?: pulumi.Input<string>;
    /**
     * Hostname of the server to connect to.
     */
    hostname?: pulumi.Input<string>;
    /**
     * IPv4 server address.
     */
    ip?: pulumi.Input<string>;
    /**
     * IPv6 server address.
     */
    ip6?: pulumi.Input<string>;
    /**
     * Password for specified username.
     */
    password?: pulumi.Input<string>;
    /**
     * Port number of service. Port number 0 indicates automatic discovery.
     */
    port?: pulumi.Input<number>;
    /**
     * Name of the server to connect to.
     */
    serverName?: pulumi.Input<string>;
    /**
     * User name to sign in with. Must have proper permissions for service.
     */
    username?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Domaincontroller resource.
 */
export interface DomaincontrollerArgs {
    /**
     * Fully qualified domain name (FQDN).
     */
    domainName?: pulumi.Input<string>;
    /**
     * Hostname of the server to connect to.
     */
    hostname?: pulumi.Input<string>;
    /**
     * IPv4 server address.
     */
    ip?: pulumi.Input<string>;
    /**
     * IPv6 server address.
     */
    ip6?: pulumi.Input<string>;
    /**
     * Password for specified username.
     */
    password?: pulumi.Input<string>;
    /**
     * Port number of service. Port number 0 indicates automatic discovery.
     */
    port?: pulumi.Input<number>;
    /**
     * Name of the server to connect to.
     */
    serverName?: pulumi.Input<string>;
    /**
     * User name to sign in with. Must have proper permissions for service.
     */
    username?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
