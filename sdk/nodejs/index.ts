// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as alertemail from "./alertemail";
import * as antivirus from "./antivirus";
import * as application from "./application";
import * as authentication from "./authentication";
import * as automation from "./automation";
import * as casb from "./casb";
import * as certificate from "./certificate";
import * as cifs from "./cifs";
import * as config from "./config";
import * as credentialstore from "./credentialstore";
import * as diameterfilter from "./diameterfilter";
import * as dlp from "./dlp";
import * as dpdk from "./dpdk";
import * as endpointcontrol from "./endpointcontrol";
import * as extendercontroller from "./extendercontroller";
import * as extensioncontroller from "./extensioncontroller";
import * as filter from "./filter";
import * as firewall from "./firewall";
import * as fmg from "./fmg";
import * as ftpproxy from "./ftpproxy";
import * as icap from "./icap";
import * as ipmask from "./ipmask";
import * as ips from "./ips";
import * as json from "./json";
import * as log from "./log";
import * as networking from "./networking";
import * as nsxt from "./nsxt";
import * as report from "./report";
import * as router from "./router";
import * as rule from "./rule";
import * as switchcontroller from "./switchcontroller";
import * as system from "./system";
import * as types from "./types";
import * as user from "./user";
import * as virtualpatch from "./virtualpatch";
import * as voip from "./voip";
import * as vpn from "./vpn";
import * as waf from "./waf";
import * as wanopt from "./wanopt";
import * as webproxy from "./webproxy";
import * as wirelesscontroller from "./wirelesscontroller";

export {
    alertemail,
    antivirus,
    application,
    authentication,
    automation,
    casb,
    certificate,
    cifs,
    config,
    credentialstore,
    diameterfilter,
    dlp,
    dpdk,
    endpointcontrol,
    extendercontroller,
    extensioncontroller,
    filter,
    firewall,
    fmg,
    ftpproxy,
    icap,
    ipmask,
    ips,
    json,
    log,
    networking,
    nsxt,
    report,
    router,
    rule,
    switchcontroller,
    system,
    types,
    user,
    virtualpatch,
    voip,
    vpn,
    waf,
    wanopt,
    webproxy,
    wirelesscontroller,
};
pulumi.runtime.registerResourcePackage("fortios", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:fortios") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
