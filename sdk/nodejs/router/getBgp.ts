// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to get information on fortios router bgp
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const sample1 = fortios.router.getBgp({});
 * export const output1 = sample1.then(sample1 => sample1.neighbors);
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getBgp(args?: GetBgpArgs, opts?: pulumi.InvokeOptions): Promise<GetBgpResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortios:router/getBgp:getBgp", {
        "vdomparam": args.vdomparam,
    }, opts);
}

/**
 * A collection of arguments for invoking getBgp.
 */
export interface GetBgpArgs {
    /**
     * Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: string;
}

/**
 * A collection of values returned by getBgp.
 */
export interface GetBgpResult {
    /**
     * Enable/disable IPv4 additional-path capability.
     */
    readonly additionalPath: string;
    /**
     * Enable/disable IPv6 additional-path capability.
     */
    readonly additionalPath6: string;
    /**
     * Number of additional paths to be selected for each IPv4 NLRI.
     */
    readonly additionalPathSelect: number;
    /**
     * Number of additional paths to be selected for each IPv6 NLRI.
     */
    readonly additionalPathSelect6: number;
    /**
     * Number of additional paths to be selected for each VPNv4 NLRI.
     */
    readonly additionalPathSelectVpnv4: number;
    /**
     * Number of additional paths to be selected for each VPNv6 NLRI.
     */
    readonly additionalPathSelectVpnv6: number;
    /**
     * Enable/disable VPNv4 additional-path capability.
     */
    readonly additionalPathVpnv4: string;
    /**
     * Enable/disable VPNv6 additional-path capability.
     */
    readonly additionalPathVpnv6: string;
    /**
     * Administrative distance modifications. The structure of `adminDistance` block is documented below.
     */
    readonly adminDistances: outputs.router.GetBgpAdminDistance[];
    /**
     * BGP IPv6 aggregate address table. The structure of `aggregateAddress6` block is documented below.
     */
    readonly aggregateAddress6s: outputs.router.GetBgpAggregateAddress6[];
    /**
     * BGP aggregate address table. The structure of `aggregateAddress` block is documented below.
     */
    readonly aggregateAddresses: outputs.router.GetBgpAggregateAddress[];
    /**
     * Enable/disable always compare MED.
     */
    readonly alwaysCompareMed: string;
    /**
     * Router AS number, valid from 1 to 4294967295, 0 to disable BGP.
     */
    readonly as: number;
    /**
     * Router AS number, asplain/asdot/asdot+ format, 0 to disable BGP.
     */
    readonly asString: string;
    /**
     * Enable/disable ignore AS path.
     */
    readonly bestpathAsPathIgnore: string;
    /**
     * Enable/disable compare federation AS path length.
     */
    readonly bestpathCmpConfedAspath: string;
    /**
     * Enable/disable compare router ID for identical EBGP paths.
     */
    readonly bestpathCmpRouterid: string;
    /**
     * Enable/disable compare MED among confederation paths.
     */
    readonly bestpathMedConfed: string;
    /**
     * Enable/disable treat missing MED as least preferred.
     */
    readonly bestpathMedMissingAsWorst: string;
    /**
     * Enable/disable client-to-client route reflection.
     */
    readonly clientToClientReflection: string;
    /**
     * Route reflector cluster ID.
     */
    readonly clusterId: string;
    /**
     * Confederation identifier.
     */
    readonly confederationIdentifier: number;
    /**
     * Confederation peers. The structure of `confederationPeers` block is documented below.
     */
    readonly confederationPeers: outputs.router.GetBgpConfederationPeer[];
    /**
     * Enable/disable cross address family conditional advertisement.
     */
    readonly crossFamilyConditionalAdv: string;
    /**
     * Enable/disable route-flap dampening.
     */
    readonly dampening: string;
    /**
     * Maximum minutes a route can be suppressed.
     */
    readonly dampeningMaxSuppressTime: number;
    /**
     * Reachability half-life time for penalty (min).
     */
    readonly dampeningReachabilityHalfLife: number;
    /**
     * Threshold to reuse routes.
     */
    readonly dampeningReuse: number;
    /**
     * Criteria for dampening.
     */
    readonly dampeningRouteMap: string;
    /**
     * Threshold to suppress routes.
     */
    readonly dampeningSuppress: number;
    /**
     * Unreachability half-life time for penalty (min).
     */
    readonly dampeningUnreachabilityHalfLife: number;
    /**
     * Default local preference.
     */
    readonly defaultLocalPreference: number;
    /**
     * Enable/disable enforce deterministic comparison of MED.
     */
    readonly deterministicMed: string;
    /**
     * Distance for routes external to the AS.
     */
    readonly distanceExternal: number;
    /**
     * Distance for routes internal to the AS.
     */
    readonly distanceInternal: number;
    /**
     * Distance for routes local to the AS.
     */
    readonly distanceLocal: number;
    /**
     * Enable/disable EBGP multi-path.
     */
    readonly ebgpMultipath: string;
    /**
     * Enable/disable enforce first AS for EBGP routes.
     */
    readonly enforceFirstAs: string;
    /**
     * Enable/disable reset peer BGP session if link goes down.
     */
    readonly fastExternalFailover: string;
    /**
     * Enable/disable to exit graceful restart on timer only.
     */
    readonly gracefulEndOnTimer: string;
    /**
     * Enable/disable BGP graceful restart capabilities.
     */
    readonly gracefulRestart: string;
    /**
     * Time needed for neighbors to restart (sec).
     */
    readonly gracefulRestartTime: number;
    /**
     * Time to hold stale paths of restarting neighbor (sec).
     */
    readonly gracefulStalepathTime: number;
    /**
     * Route advertisement/selection delay after restart (sec).
     */
    readonly gracefulUpdateDelay: number;
    /**
     * Interval (sec) before peer considered dead.
     */
    readonly holdtimeTimer: number;
    /**
     * Enable/disable IBGP multi-path.
     */
    readonly ibgpMultipath: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Don't send unknown optional capability notification message
     */
    readonly ignoreOptionalCapability: string;
    /**
     * Frequency to send keep alive requests.
     */
    readonly keepaliveTimer: number;
    /**
     * Enable logging of BGP neighbour's changes
     */
    readonly logNeighbourChanges: string;
    /**
     * Enable/disable use of recursive distance to select multipath.
     */
    readonly multipathRecursiveDistance: string;
    /**
     * Neighbor group name.
     */
    readonly neighborGroups: outputs.router.GetBgpNeighborGroup[];
    /**
     * BGP IPv6 neighbor range table. The structure of `neighborRange6` block is documented below.
     */
    readonly neighborRange6s: outputs.router.GetBgpNeighborRange6[];
    /**
     * BGP neighbor range table. The structure of `neighborRange` block is documented below.
     */
    readonly neighborRanges: outputs.router.GetBgpNeighborRange[];
    /**
     * BGP neighbor table. The structure of `neighbor` block is documented below.
     */
    readonly neighbors: outputs.router.GetBgpNeighbor[];
    /**
     * BGP IPv6 network table. The structure of `network6` block is documented below.
     */
    readonly network6s: outputs.router.GetBgpNetwork6[];
    /**
     * Configure insurance of BGP network route existence in IGP.
     */
    readonly networkImportCheck: string;
    /**
     * BGP network table. The structure of `network` block is documented below.
     */
    readonly networks: outputs.router.GetBgpNetwork[];
    /**
     * Enable/disable priority inheritance for recursive resolution.
     */
    readonly recursiveInheritPriority: string;
    /**
     * Enable/disable recursive resolution of next-hop using BGP route.
     */
    readonly recursiveNextHop: string;
    /**
     * BGP IPv6 redistribute table. The structure of `redistribute6` block is documented below.
     */
    readonly redistribute6s: outputs.router.GetBgpRedistribute6[];
    /**
     * BGP IPv4 redistribute table. The structure of `redistribute` block is documented below.
     */
    readonly redistributes: outputs.router.GetBgpRedistribute[];
    /**
     * Router ID.
     */
    readonly routerId: string;
    /**
     * Background scanner interval (sec), 0 to disable it.
     */
    readonly scanTime: number;
    /**
     * Enable/disable only advertise routes from iBGP if routes present in an IGP.
     */
    readonly synchronization: string;
    /**
     * Configure tag-match mode. Resolves BGP routes with other routes containing the same tag.
     */
    readonly tagResolveMode: string;
    readonly vdomparam?: string;
    /**
     * BGP IPv6 VRF leaking table. The structure of `vrf6` block is documented below.
     */
    readonly vrf6s: outputs.router.GetBgpVrf6[];
    /**
     * BGP IPv6 VRF leaking table. The structure of `vrfLeak6` block is documented below.
     */
    readonly vrfLeak6s: outputs.router.GetBgpVrfLeak6[];
    /**
     * BGP VRF leaking table. The structure of `vrfLeak` block is documented below.
     */
    readonly vrfLeaks: outputs.router.GetBgpVrfLeak[];
    /**
     * Target VRF ID <0 - 31>.
     */
    readonly vrves: outputs.router.GetBgpVrf[];
}
/**
 * Use this data source to get information on fortios router bgp
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const sample1 = fortios.router.getBgp({});
 * export const output1 = sample1.then(sample1 => sample1.neighbors);
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getBgpOutput(args?: GetBgpOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBgpResult> {
    return pulumi.output(args).apply((a: any) => getBgp(a, opts))
}

/**
 * A collection of arguments for invoking getBgp.
 */
export interface GetBgpOutputArgs {
    /**
     * Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
