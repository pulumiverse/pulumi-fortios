// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * Use this data source to get information on an fortios routerbgp neighbor
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const sample1 = fortios.router.bgp.getNeighbor({
 *     ip: "21.1.1.12",
 * });
 * export const output1 = sample1;
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getNeighbor(args: GetNeighborArgs, opts?: pulumi.InvokeOptions): Promise<GetNeighborResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortios:router/bgp/getNeighbor:getNeighbor", {
        "ip": args.ip,
        "vdomparam": args.vdomparam,
    }, opts);
}

/**
 * A collection of arguments for invoking getNeighbor.
 */
export interface GetNeighborArgs {
    /**
     * Specify the ip of the desired routerbgp neighbor.
     */
    ip: string;
    /**
     * Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: string;
}

/**
 * A collection of values returned by getNeighbor.
 */
export interface GetNeighborResult {
    /**
     * Enable/disable address family IPv4 for this neighbor.
     */
    readonly activate: string;
    /**
     * Enable/disable address family IPv6 for this neighbor.
     */
    readonly activate6: string;
    /**
     * Enable/disable address family L2VPN EVPN for this neighbor.
     */
    readonly activateEvpn: string;
    /**
     * Enable/disable address family VPNv4 for this neighbor.
     */
    readonly activateVpnv4: string;
    /**
     * Enable/disable address family VPNv6 for this neighbor.
     */
    readonly activateVpnv6: string;
    /**
     * Enable/disable IPv4 additional-path capability.
     */
    readonly additionalPath: string;
    /**
     * Enable/disable IPv6 additional-path capability.
     */
    readonly additionalPath6: string;
    /**
     * Enable/disable VPNv4 additional-path capability.
     */
    readonly additionalPathVpnv4: string;
    /**
     * Enable/disable VPNv6 additional-path capability.
     */
    readonly additionalPathVpnv6: string;
    /**
     * Number of IPv4 additional paths that can be advertised to this neighbor.
     */
    readonly advAdditionalPath: number;
    /**
     * Number of IPv6 additional paths that can be advertised to this neighbor.
     */
    readonly advAdditionalPath6: number;
    /**
     * Number of VPNv4 additional paths that can be advertised to this neighbor.
     */
    readonly advAdditionalPathVpnv4: number;
    /**
     * Number of VPNv6 additional paths that can be advertised to this neighbor.
     */
    readonly advAdditionalPathVpnv6: number;
    /**
     * Minimum interval (sec) between sending updates.
     */
    readonly advertisementInterval: number;
    /**
     * IPv4 The maximum number of occurrence of my AS number allowed.
     */
    readonly allowasIn: number;
    /**
     * IPv6 The maximum number of occurrence of my AS number allowed.
     */
    readonly allowasIn6: number;
    /**
     * Enable/disable IPv4 Enable to allow my AS in AS path.
     */
    readonly allowasInEnable: string;
    /**
     * Enable/disable IPv6 Enable to allow my AS in AS path.
     */
    readonly allowasInEnable6: string;
    /**
     * Enable/disable to allow my AS in AS path for L2VPN EVPN route.
     */
    readonly allowasInEnableEvpn: string;
    /**
     * Enable/disable to allow my AS in AS path for VPNv4 route.
     */
    readonly allowasInEnableVpnv4: string;
    /**
     * Enable/disable use of my AS in AS path for VPNv6 route.
     */
    readonly allowasInEnableVpnv6: string;
    /**
     * The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
     */
    readonly allowasInEvpn: number;
    /**
     * The maximum number of occurrence of my AS number allowed for VPNv4 route.
     */
    readonly allowasInVpnv4: number;
    /**
     * The maximum number of occurrence of my AS number allowed for VPNv6 route.
     */
    readonly allowasInVpnv6: number;
    /**
     * Enable/disable replace peer AS with own AS for IPv4.
     */
    readonly asOverride: string;
    /**
     * Enable/disable replace peer AS with own AS for IPv6.
     */
    readonly asOverride6: string;
    /**
     * IPv4 List of attributes that should be unchanged.
     */
    readonly attributeUnchanged: string;
    /**
     * IPv6 List of attributes that should be unchanged.
     */
    readonly attributeUnchanged6: string;
    /**
     * List of attributes that should be unchanged for VPNv4 route.
     */
    readonly attributeUnchangedVpnv4: string;
    /**
     * List of attributes that should not be changed for VPNv6 route.
     */
    readonly attributeUnchangedVpnv6: string;
    /**
     * Key-chain name for TCP authentication options.
     */
    readonly authOptions: string;
    /**
     * Enable/disable BFD for this neighbor.
     */
    readonly bfd: string;
    /**
     * Enable/disable advertise default IPv4 route to this neighbor.
     */
    readonly capabilityDefaultOriginate: string;
    /**
     * Enable/disable advertise default IPv6 route to this neighbor.
     */
    readonly capabilityDefaultOriginate6: string;
    /**
     * Enable/disable advertise dynamic capability to this neighbor.
     */
    readonly capabilityDynamic: string;
    /**
     * Enable/disable advertise IPv4 graceful restart capability to this neighbor.
     */
    readonly capabilityGracefulRestart: string;
    /**
     * Enable/disable advertise IPv6 graceful restart capability to this neighbor.
     */
    readonly capabilityGracefulRestart6: string;
    /**
     * Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor.
     */
    readonly capabilityGracefulRestartEvpn: string;
    /**
     * Enable/disable advertise VPNv4 graceful restart capability to this neighbor.
     */
    readonly capabilityGracefulRestartVpnv4: string;
    /**
     * Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor.
     */
    readonly capabilityGracefulRestartVpnv6: string;
    /**
     * Accept/Send IPv4 ORF lists to/from this neighbor.
     */
    readonly capabilityOrf: string;
    /**
     * Accept/Send IPv6 ORF lists to/from this neighbor.
     */
    readonly capabilityOrf6: string;
    /**
     * Enable/disable advertise route refresh capability to this neighbor.
     */
    readonly capabilityRouteRefresh: string;
    /**
     * IPv6 conditional advertisement. The structure of `conditionalAdvertise6` block is documented below.
     */
    readonly conditionalAdvertise6s: outputs.router.bgp.GetNeighborConditionalAdvertise6[];
    /**
     * Conditional advertisement. The structure of `conditionalAdvertise` block is documented below.
     */
    readonly conditionalAdvertises: outputs.router.bgp.GetNeighborConditionalAdvertise[];
    /**
     * Interval (sec) for connect timer.
     */
    readonly connectTimer: number;
    /**
     * Route map to specify criteria to originate IPv4 default.
     */
    readonly defaultOriginateRoutemap: string;
    /**
     * Route map to specify criteria to originate IPv6 default.
     */
    readonly defaultOriginateRoutemap6: string;
    /**
     * Description.
     */
    readonly description: string;
    /**
     * Filter for IPv4 updates from this neighbor.
     */
    readonly distributeListIn: string;
    /**
     * Filter for IPv6 updates from this neighbor.
     */
    readonly distributeListIn6: string;
    /**
     * Filter for VPNv4 updates from this neighbor.
     */
    readonly distributeListInVpnv4: string;
    /**
     * Filter for VPNv6 updates from this neighbor.
     */
    readonly distributeListInVpnv6: string;
    /**
     * Filter for IPv4 updates to this neighbor.
     */
    readonly distributeListOut: string;
    /**
     * Filter for IPv6 updates to this neighbor.
     */
    readonly distributeListOut6: string;
    /**
     * Filter for VPNv4 updates to this neighbor.
     */
    readonly distributeListOutVpnv4: string;
    /**
     * Filter for VPNv6 updates to this neighbor.
     */
    readonly distributeListOutVpnv6: string;
    /**
     * Don't negotiate capabilities with this neighbor
     */
    readonly dontCapabilityNegotiate: string;
    /**
     * Enable/disable allow multi-hop EBGP neighbors.
     */
    readonly ebgpEnforceMultihop: string;
    /**
     * EBGP multihop TTL for this peer.
     */
    readonly ebgpMultihopTtl: number;
    /**
     * BGP filter for IPv4 inbound routes.
     */
    readonly filterListIn: string;
    /**
     * BGP filter for IPv6 inbound routes.
     */
    readonly filterListIn6: string;
    /**
     * BGP filter for VPNv4 inbound routes.
     */
    readonly filterListInVpnv4: string;
    /**
     * BGP filter for VPNv6 inbound routes.
     */
    readonly filterListInVpnv6: string;
    /**
     * BGP filter for IPv4 outbound routes.
     */
    readonly filterListOut: string;
    /**
     * BGP filter for IPv6 outbound routes.
     */
    readonly filterListOut6: string;
    /**
     * BGP filter for VPNv4 outbound routes.
     */
    readonly filterListOutVpnv4: string;
    /**
     * BGP filter for VPNv6 outbound routes.
     */
    readonly filterListOutVpnv6: string;
    /**
     * Interval (sec) before peer considered dead.
     */
    readonly holdtimeTimer: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Interface
     */
    readonly interface: string;
    /**
     * IP/IPv6 address of neighbor.
     */
    readonly ip: string;
    /**
     * Keep alive timer interval (sec).
     */
    readonly keepAliveTimer: number;
    /**
     * Enable/disable failover upon link down.
     */
    readonly linkDownFailover: string;
    /**
     * Local AS number of neighbor.
     */
    readonly localAs: number;
    /**
     * Do not prepend local-as to incoming updates.
     */
    readonly localAsNoPrepend: string;
    /**
     * Replace real AS with local-as in outgoing updates.
     */
    readonly localAsReplaceAs: string;
    /**
     * Maximum number of IPv4 prefixes to accept from this peer.
     */
    readonly maximumPrefix: number;
    /**
     * Maximum number of IPv6 prefixes to accept from this peer.
     */
    readonly maximumPrefix6: number;
    /**
     * Maximum number of L2VPN EVPN prefixes to accept from this peer.
     */
    readonly maximumPrefixEvpn: number;
    /**
     * Maximum IPv4 prefix threshold value (1 - 100 percent).
     */
    readonly maximumPrefixThreshold: number;
    /**
     * Maximum IPv6 prefix threshold value (1 - 100 percent).
     */
    readonly maximumPrefixThreshold6: number;
    /**
     * Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
     */
    readonly maximumPrefixThresholdEvpn: number;
    /**
     * Maximum VPNv4 prefix threshold value (1 - 100 percent).
     */
    readonly maximumPrefixThresholdVpnv4: number;
    /**
     * Maximum VPNv6 prefix threshold value (1 - 100 percent).
     */
    readonly maximumPrefixThresholdVpnv6: number;
    /**
     * Maximum number of VPNv4 prefixes to accept from this peer.
     */
    readonly maximumPrefixVpnv4: number;
    /**
     * Maximum number of VPNv6 prefixes to accept from this peer.
     */
    readonly maximumPrefixVpnv6: number;
    /**
     * Enable/disable IPv4 Only give warning message when limit is exceeded.
     */
    readonly maximumPrefixWarningOnly: string;
    /**
     * Enable/disable IPv6 Only give warning message when limit is exceeded.
     */
    readonly maximumPrefixWarningOnly6: string;
    /**
     * Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes.
     */
    readonly maximumPrefixWarningOnlyEvpn: string;
    /**
     * Enable/disable only giving warning message when limit is exceeded for VPNv4 routes.
     */
    readonly maximumPrefixWarningOnlyVpnv4: string;
    /**
     * Enable/disable warning message when limit is exceeded for VPNv6 routes.
     */
    readonly maximumPrefixWarningOnlyVpnv6: string;
    /**
     * Enable/disable IPv4 next-hop calculation for this neighbor.
     */
    readonly nextHopSelf: string;
    /**
     * Enable/disable IPv6 next-hop calculation for this neighbor.
     */
    readonly nextHopSelf6: string;
    /**
     * Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes.
     */
    readonly nextHopSelfRr: string;
    /**
     * Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes.
     */
    readonly nextHopSelfRr6: string;
    /**
     * Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor.
     */
    readonly nextHopSelfVpnv4: string;
    /**
     * Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor.
     */
    readonly nextHopSelfVpnv6: string;
    /**
     * Enable/disable override result of capability negotiation.
     */
    readonly overrideCapability: string;
    /**
     * Enable/disable sending of open messages to this neighbor.
     */
    readonly passive: string;
    /**
     * Password used in MD5 authentication.
     */
    readonly password: string;
    /**
     * IPv4 Inbound filter for updates from this neighbor.
     */
    readonly prefixListIn: string;
    /**
     * IPv6 Inbound filter for updates from this neighbor.
     */
    readonly prefixListIn6: string;
    /**
     * Inbound filter for VPNv4 updates from this neighbor.
     */
    readonly prefixListInVpnv4: string;
    /**
     * Inbound filter for VPNv6 updates from this neighbor.
     */
    readonly prefixListInVpnv6: string;
    /**
     * IPv4 Outbound filter for updates to this neighbor.
     */
    readonly prefixListOut: string;
    /**
     * IPv6 Outbound filter for updates to this neighbor.
     */
    readonly prefixListOut6: string;
    /**
     * Outbound filter for VPNv4 updates to this neighbor.
     */
    readonly prefixListOutVpnv4: string;
    /**
     * Outbound filter for VPNv6 updates to this neighbor.
     */
    readonly prefixListOutVpnv6: string;
    /**
     * AS number of neighbor.
     */
    readonly remoteAs: number;
    /**
     * Enable/disable remove private AS number from IPv4 outbound updates.
     */
    readonly removePrivateAs: string;
    /**
     * Enable/disable remove private AS number from IPv6 outbound updates.
     */
    readonly removePrivateAs6: string;
    /**
     * Enable/disable removing private AS number from L2VPN EVPN outbound updates.
     */
    readonly removePrivateAsEvpn: string;
    /**
     * Enable/disable remove private AS number from VPNv4 outbound updates.
     */
    readonly removePrivateAsVpnv4: string;
    /**
     * Enable/disable to remove private AS number from VPNv6 outbound updates.
     */
    readonly removePrivateAsVpnv6: string;
    /**
     * Graceful restart delay time (sec, 0 = global default).
     */
    readonly restartTime: number;
    /**
     * Time to retain stale routes.
     */
    readonly retainStaleTime: number;
    /**
     * IPv4 Inbound route map filter.
     */
    readonly routeMapIn: string;
    /**
     * IPv6 Inbound route map filter.
     */
    readonly routeMapIn6: string;
    /**
     * L2VPN EVPN inbound route map filter.
     */
    readonly routeMapInEvpn: string;
    /**
     * VPNv4 inbound route map filter.
     */
    readonly routeMapInVpnv4: string;
    /**
     * VPNv6 inbound route map filter.
     */
    readonly routeMapInVpnv6: string;
    /**
     * IPv4 Outbound route map filter.
     */
    readonly routeMapOut: string;
    /**
     * IPv6 Outbound route map filter.
     */
    readonly routeMapOut6: string;
    /**
     * IPv6 outbound route map filter if the peer is preferred.
     */
    readonly routeMapOut6Preferable: string;
    /**
     * L2VPN EVPN outbound route map filter.
     */
    readonly routeMapOutEvpn: string;
    /**
     * IPv4 outbound route map filter if the peer is preferred.
     */
    readonly routeMapOutPreferable: string;
    /**
     * VPNv4 outbound route map filter.
     */
    readonly routeMapOutVpnv4: string;
    /**
     * VPNv4 outbound route map filter if the peer is preferred.
     */
    readonly routeMapOutVpnv4Preferable: string;
    /**
     * VPNv6 outbound route map filter.
     */
    readonly routeMapOutVpnv6: string;
    /**
     * VPNv6 outbound route map filter if this neighbor is preferred.
     */
    readonly routeMapOutVpnv6Preferable: string;
    /**
     * Enable/disable IPv4 AS route reflector client.
     */
    readonly routeReflectorClient: string;
    /**
     * Enable/disable IPv6 AS route reflector client.
     */
    readonly routeReflectorClient6: string;
    /**
     * Enable/disable L2VPN EVPN AS route reflector client for this neighbor.
     */
    readonly routeReflectorClientEvpn: string;
    /**
     * Enable/disable VPNv4 AS route reflector client for this neighbor.
     */
    readonly routeReflectorClientVpnv4: string;
    /**
     * Enable/disable VPNv6 AS route reflector client for this neighbor.
     */
    readonly routeReflectorClientVpnv6: string;
    /**
     * Enable/disable IPv4 AS route server client.
     */
    readonly routeServerClient: string;
    /**
     * Enable/disable IPv6 AS route server client.
     */
    readonly routeServerClient6: string;
    /**
     * Enable/disable L2VPN EVPN AS route server client for this neighbor.
     */
    readonly routeServerClientEvpn: string;
    /**
     * Enable/disable VPNv4 AS route server client for this neighbor.
     */
    readonly routeServerClientVpnv4: string;
    /**
     * Enable/disable VPNv6 AS route server client for this neighbor.
     */
    readonly routeServerClientVpnv6: string;
    /**
     * IPv4 Send community attribute to neighbor.
     */
    readonly sendCommunity: string;
    /**
     * IPv6 Send community attribute to neighbor.
     */
    readonly sendCommunity6: string;
    /**
     * Enable/disable sending community attribute to neighbor for L2VPN EVPN address family.
     */
    readonly sendCommunityEvpn: string;
    /**
     * Send community attribute to neighbor for VPNv4 address family.
     */
    readonly sendCommunityVpnv4: string;
    /**
     * Enable/disable sending community attribute to this neighbor for VPNv6 address family.
     */
    readonly sendCommunityVpnv6: string;
    /**
     * Enable/disable shutdown this neighbor.
     */
    readonly shutdown: string;
    /**
     * Enable/disable allow IPv4 inbound soft reconfiguration.
     */
    readonly softReconfiguration: string;
    /**
     * Enable/disable allow IPv6 inbound soft reconfiguration.
     */
    readonly softReconfiguration6: string;
    /**
     * Enable/disable L2VPN EVPN inbound soft reconfiguration.
     */
    readonly softReconfigurationEvpn: string;
    /**
     * Enable/disable allow VPNv4 inbound soft reconfiguration.
     */
    readonly softReconfigurationVpnv4: string;
    /**
     * Enable/disable VPNv6 inbound soft reconfiguration.
     */
    readonly softReconfigurationVpnv6: string;
    /**
     * Enable/disable stale route after neighbor down.
     */
    readonly staleRoute: string;
    /**
     * Enable/disable strict capability matching.
     */
    readonly strictCapabilityMatch: string;
    /**
     * IPv4 Route map to selectively unsuppress suppressed routes.
     */
    readonly unsuppressMap: string;
    /**
     * IPv6 Route map to selectively unsuppress suppressed routes.
     */
    readonly unsuppressMap6: string;
    /**
     * Interface to use as source IP/IPv6 address of TCP connections.
     */
    readonly updateSource: string;
    readonly vdomparam?: string;
    /**
     * Neighbor weight.
     */
    readonly weight: number;
}
/**
 * Use this data source to get information on an fortios routerbgp neighbor
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const sample1 = fortios.router.bgp.getNeighbor({
 *     ip: "21.1.1.12",
 * });
 * export const output1 = sample1;
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getNeighborOutput(args: GetNeighborOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNeighborResult> {
    return pulumi.output(args).apply((a: any) => getNeighbor(a, opts))
}

/**
 * A collection of arguments for invoking getNeighbor.
 */
export interface GetNeighborOutputArgs {
    /**
     * Specify the ip of the desired routerbgp neighbor.
     */
    ip: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
