// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Configure IPv4 routing policies.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trname = new fortios.router.Policy("trname", {
 *     action: "permit",
 *     dstNegate: "disable",
 *     endPort: 25,
 *     endSourcePort: 65535,
 *     gateway: "0.0.0.0",
 *     inputDevices: [{
 *         name: "port1",
 *     }],
 *     outputDevice: "port2",
 *     protocol: 6,
 *     seqNum: 1,
 *     srcNegate: "disable",
 *     startPort: 25,
 *     startSourcePort: 0,
 *     status: "enable",
 *     tos: "0x00",
 *     tosMask: "0x00",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Router Policy can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:router/policy:Policy labelname {{seq_num}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:router/policy:Policy labelname {{seq_num}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:router/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * Action of the policy route. Valid values: `deny`, `permit`.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Optional comments.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable negating destination address match. Valid values: `enable`, `disable`.
     */
    public readonly dstNegate!: pulumi.Output<string>;
    /**
     * Destination address name. The structure of `dstaddr` block is documented below.
     */
    public readonly dstaddrs!: pulumi.Output<outputs.router.PolicyDstaddr[] | undefined>;
    /**
     * Destination IP and mask (x.x.x.x/x). The structure of `dst` block is documented below.
     */
    public readonly dsts!: pulumi.Output<outputs.router.PolicyDst[] | undefined>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * End destination port number (0 - 65535).
     */
    public readonly endPort!: pulumi.Output<number>;
    /**
     * End source port number (0 - 65535).
     */
    public readonly endSourcePort!: pulumi.Output<number>;
    /**
     * IP address of the gateway.
     */
    public readonly gateway!: pulumi.Output<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable negation of input device match. Valid values: `enable`, `disable`.
     */
    public readonly inputDeviceNegate!: pulumi.Output<string>;
    /**
     * Incoming interface name. The structure of `inputDevice` block is documented below.
     */
    public readonly inputDevices!: pulumi.Output<outputs.router.PolicyInputDevice[] | undefined>;
    /**
     * Custom Destination Internet Service name. The structure of `internetServiceCustom` block is documented below.
     */
    public readonly internetServiceCustoms!: pulumi.Output<outputs.router.PolicyInternetServiceCustom[] | undefined>;
    /**
     * Destination Internet Service ID. The structure of `internetServiceId` block is documented below.
     */
    public readonly internetServiceIds!: pulumi.Output<outputs.router.PolicyInternetServiceId[] | undefined>;
    /**
     * Outgoing interface name.
     */
    public readonly outputDevice!: pulumi.Output<string>;
    /**
     * Protocol number (0 - 255).
     */
    public readonly protocol!: pulumi.Output<number>;
    /**
     * Sequence number.
     */
    public readonly seqNum!: pulumi.Output<number>;
    /**
     * Enable/disable negating source address match. Valid values: `enable`, `disable`.
     */
    public readonly srcNegate!: pulumi.Output<string>;
    /**
     * Source address name. The structure of `srcaddr` block is documented below.
     */
    public readonly srcaddrs!: pulumi.Output<outputs.router.PolicySrcaddr[] | undefined>;
    /**
     * Source IP and mask (x.x.x.x/x). The structure of `src` block is documented below.
     */
    public readonly srcs!: pulumi.Output<outputs.router.PolicySrc[] | undefined>;
    /**
     * Start destination port number (0 - 65535).
     */
    public readonly startPort!: pulumi.Output<number>;
    /**
     * Start source port number (0 - 65535).
     */
    public readonly startSourcePort!: pulumi.Output<number>;
    /**
     * Enable/disable this policy route. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Type of service bit pattern.
     */
    public readonly tos!: pulumi.Output<string>;
    /**
     * Type of service evaluated bits.
     */
    public readonly tosMask!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["dstNegate"] = state ? state.dstNegate : undefined;
            resourceInputs["dstaddrs"] = state ? state.dstaddrs : undefined;
            resourceInputs["dsts"] = state ? state.dsts : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["endPort"] = state ? state.endPort : undefined;
            resourceInputs["endSourcePort"] = state ? state.endSourcePort : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["inputDeviceNegate"] = state ? state.inputDeviceNegate : undefined;
            resourceInputs["inputDevices"] = state ? state.inputDevices : undefined;
            resourceInputs["internetServiceCustoms"] = state ? state.internetServiceCustoms : undefined;
            resourceInputs["internetServiceIds"] = state ? state.internetServiceIds : undefined;
            resourceInputs["outputDevice"] = state ? state.outputDevice : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["seqNum"] = state ? state.seqNum : undefined;
            resourceInputs["srcNegate"] = state ? state.srcNegate : undefined;
            resourceInputs["srcaddrs"] = state ? state.srcaddrs : undefined;
            resourceInputs["srcs"] = state ? state.srcs : undefined;
            resourceInputs["startPort"] = state ? state.startPort : undefined;
            resourceInputs["startSourcePort"] = state ? state.startSourcePort : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tos"] = state ? state.tos : undefined;
            resourceInputs["tosMask"] = state ? state.tosMask : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["dstNegate"] = args ? args.dstNegate : undefined;
            resourceInputs["dstaddrs"] = args ? args.dstaddrs : undefined;
            resourceInputs["dsts"] = args ? args.dsts : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["endPort"] = args ? args.endPort : undefined;
            resourceInputs["endSourcePort"] = args ? args.endSourcePort : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["inputDeviceNegate"] = args ? args.inputDeviceNegate : undefined;
            resourceInputs["inputDevices"] = args ? args.inputDevices : undefined;
            resourceInputs["internetServiceCustoms"] = args ? args.internetServiceCustoms : undefined;
            resourceInputs["internetServiceIds"] = args ? args.internetServiceIds : undefined;
            resourceInputs["outputDevice"] = args ? args.outputDevice : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["seqNum"] = args ? args.seqNum : undefined;
            resourceInputs["srcNegate"] = args ? args.srcNegate : undefined;
            resourceInputs["srcaddrs"] = args ? args.srcaddrs : undefined;
            resourceInputs["srcs"] = args ? args.srcs : undefined;
            resourceInputs["startPort"] = args ? args.startPort : undefined;
            resourceInputs["startSourcePort"] = args ? args.startSourcePort : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tos"] = args ? args.tos : undefined;
            resourceInputs["tosMask"] = args ? args.tosMask : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * Action of the policy route. Valid values: `deny`, `permit`.
     */
    action?: pulumi.Input<string>;
    /**
     * Optional comments.
     */
    comments?: pulumi.Input<string>;
    /**
     * Enable/disable negating destination address match. Valid values: `enable`, `disable`.
     */
    dstNegate?: pulumi.Input<string>;
    /**
     * Destination address name. The structure of `dstaddr` block is documented below.
     */
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.router.PolicyDstaddr>[]>;
    /**
     * Destination IP and mask (x.x.x.x/x). The structure of `dst` block is documented below.
     */
    dsts?: pulumi.Input<pulumi.Input<inputs.router.PolicyDst>[]>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * End destination port number (0 - 65535).
     */
    endPort?: pulumi.Input<number>;
    /**
     * End source port number (0 - 65535).
     */
    endSourcePort?: pulumi.Input<number>;
    /**
     * IP address of the gateway.
     */
    gateway?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Enable/disable negation of input device match. Valid values: `enable`, `disable`.
     */
    inputDeviceNegate?: pulumi.Input<string>;
    /**
     * Incoming interface name. The structure of `inputDevice` block is documented below.
     */
    inputDevices?: pulumi.Input<pulumi.Input<inputs.router.PolicyInputDevice>[]>;
    /**
     * Custom Destination Internet Service name. The structure of `internetServiceCustom` block is documented below.
     */
    internetServiceCustoms?: pulumi.Input<pulumi.Input<inputs.router.PolicyInternetServiceCustom>[]>;
    /**
     * Destination Internet Service ID. The structure of `internetServiceId` block is documented below.
     */
    internetServiceIds?: pulumi.Input<pulumi.Input<inputs.router.PolicyInternetServiceId>[]>;
    /**
     * Outgoing interface name.
     */
    outputDevice?: pulumi.Input<string>;
    /**
     * Protocol number (0 - 255).
     */
    protocol?: pulumi.Input<number>;
    /**
     * Sequence number.
     */
    seqNum?: pulumi.Input<number>;
    /**
     * Enable/disable negating source address match. Valid values: `enable`, `disable`.
     */
    srcNegate?: pulumi.Input<string>;
    /**
     * Source address name. The structure of `srcaddr` block is documented below.
     */
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.router.PolicySrcaddr>[]>;
    /**
     * Source IP and mask (x.x.x.x/x). The structure of `src` block is documented below.
     */
    srcs?: pulumi.Input<pulumi.Input<inputs.router.PolicySrc>[]>;
    /**
     * Start destination port number (0 - 65535).
     */
    startPort?: pulumi.Input<number>;
    /**
     * Start source port number (0 - 65535).
     */
    startSourcePort?: pulumi.Input<number>;
    /**
     * Enable/disable this policy route. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Type of service bit pattern.
     */
    tos?: pulumi.Input<string>;
    /**
     * Type of service evaluated bits.
     */
    tosMask?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * Action of the policy route. Valid values: `deny`, `permit`.
     */
    action?: pulumi.Input<string>;
    /**
     * Optional comments.
     */
    comments?: pulumi.Input<string>;
    /**
     * Enable/disable negating destination address match. Valid values: `enable`, `disable`.
     */
    dstNegate?: pulumi.Input<string>;
    /**
     * Destination address name. The structure of `dstaddr` block is documented below.
     */
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.router.PolicyDstaddr>[]>;
    /**
     * Destination IP and mask (x.x.x.x/x). The structure of `dst` block is documented below.
     */
    dsts?: pulumi.Input<pulumi.Input<inputs.router.PolicyDst>[]>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * End destination port number (0 - 65535).
     */
    endPort?: pulumi.Input<number>;
    /**
     * End source port number (0 - 65535).
     */
    endSourcePort?: pulumi.Input<number>;
    /**
     * IP address of the gateway.
     */
    gateway?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Enable/disable negation of input device match. Valid values: `enable`, `disable`.
     */
    inputDeviceNegate?: pulumi.Input<string>;
    /**
     * Incoming interface name. The structure of `inputDevice` block is documented below.
     */
    inputDevices?: pulumi.Input<pulumi.Input<inputs.router.PolicyInputDevice>[]>;
    /**
     * Custom Destination Internet Service name. The structure of `internetServiceCustom` block is documented below.
     */
    internetServiceCustoms?: pulumi.Input<pulumi.Input<inputs.router.PolicyInternetServiceCustom>[]>;
    /**
     * Destination Internet Service ID. The structure of `internetServiceId` block is documented below.
     */
    internetServiceIds?: pulumi.Input<pulumi.Input<inputs.router.PolicyInternetServiceId>[]>;
    /**
     * Outgoing interface name.
     */
    outputDevice?: pulumi.Input<string>;
    /**
     * Protocol number (0 - 255).
     */
    protocol?: pulumi.Input<number>;
    /**
     * Sequence number.
     */
    seqNum?: pulumi.Input<number>;
    /**
     * Enable/disable negating source address match. Valid values: `enable`, `disable`.
     */
    srcNegate?: pulumi.Input<string>;
    /**
     * Source address name. The structure of `srcaddr` block is documented below.
     */
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.router.PolicySrcaddr>[]>;
    /**
     * Source IP and mask (x.x.x.x/x). The structure of `src` block is documented below.
     */
    srcs?: pulumi.Input<pulumi.Input<inputs.router.PolicySrc>[]>;
    /**
     * Start destination port number (0 - 65535).
     */
    startPort?: pulumi.Input<number>;
    /**
     * Start source port number (0 - 65535).
     */
    startSourcePort?: pulumi.Input<number>;
    /**
     * Enable/disable this policy route. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Type of service bit pattern.
     */
    tos?: pulumi.Input<string>;
    /**
     * Type of service evaluated bits.
     */
    tosMask?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
