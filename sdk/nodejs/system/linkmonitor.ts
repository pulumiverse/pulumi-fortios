// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Configure Link Health Monitor.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trname = new fortios.system.Linkmonitor("trname", {
 *     addrMode: "ipv4",
 *     failtime: 5,
 *     gatewayIp: "2.2.2.2",
 *     gatewayIp6: "::",
 *     haPriority: 1,
 *     httpAgent: "Chrome/ Safari/",
 *     httpGet: "/",
 *     interval: 1,
 *     packetSize: 64,
 *     port: 80,
 *     protocol: "ping",
 *     recoverytime: 5,
 *     securityMode: "none",
 *     servers: [{
 *         address: "3.3.3.3",
 *     }],
 *     sourceIp: "0.0.0.0",
 *     sourceIp6: "::",
 *     srcintf: "port4",
 *     status: "enable",
 *     updateCascadeInterface: "enable",
 *     updateStaticRoute: "enable",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * System LinkMonitor can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:system/linkmonitor:Linkmonitor labelname {{name}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:system/linkmonitor:Linkmonitor labelname {{name}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Linkmonitor extends pulumi.CustomResource {
    /**
     * Get an existing Linkmonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinkmonitorState, opts?: pulumi.CustomResourceOptions): Linkmonitor {
        return new Linkmonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:system/linkmonitor:Linkmonitor';

    /**
     * Returns true if the given object is an instance of Linkmonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Linkmonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Linkmonitor.__pulumiType;
    }

    /**
     * Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
     */
    public readonly addrMode!: pulumi.Output<string>;
    /**
     * Traffic class ID.
     */
    public readonly classId!: pulumi.Output<number>;
    /**
     * Differentiated services code point (DSCP) in the IP header of the probe packet.
     */
    public readonly diffservcode!: pulumi.Output<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Threshold weight to trigger link failure alert.
     */
    public readonly failWeight!: pulumi.Output<number>;
    /**
     * Number of retry attempts before the server is considered down (1 - 10, default = 5)
     */
    public readonly failtime!: pulumi.Output<number>;
    /**
     * Gateway IP address used to probe the server.
     */
    public readonly gatewayIp!: pulumi.Output<string>;
    /**
     * Gateway IPv6 address used to probe the server.
     */
    public readonly gatewayIp6!: pulumi.Output<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * HA election priority (1 - 50).
     */
    public readonly haPriority!: pulumi.Output<number>;
    /**
     * String in the http-agent field in the HTTP header.
     */
    public readonly httpAgent!: pulumi.Output<string>;
    /**
     * If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
     */
    public readonly httpGet!: pulumi.Output<string>;
    /**
     * String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
     */
    public readonly httpMatch!: pulumi.Output<string>;
    /**
     * Detection interval (1 - 3600 sec, default = 5).
     */
    public readonly interval!: pulumi.Output<number>;
    /**
     * Link monitor name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Packet size of a twamp test session,
     */
    public readonly packetSize!: pulumi.Output<number>;
    /**
     * Twamp controller password in authentication mode
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Port number of the traffic to be used to monitor the server.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
     */
    public readonly probeCount!: pulumi.Output<number>;
    /**
     * Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
     */
    public readonly probeTimeout!: pulumi.Output<number>;
    /**
     * Protocols used to monitor the server.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Number of successful responses received before server is considered recovered (1 - 10, default = 5).
     */
    public readonly recoverytime!: pulumi.Output<number>;
    /**
     * Subnet to monitor. The structure of `route` block is documented below.
     */
    public readonly routes!: pulumi.Output<outputs.system.LinkmonitorRoute[] | undefined>;
    /**
     * Twamp controller security mode. Valid values: `none`, `authentication`.
     */
    public readonly securityMode!: pulumi.Output<string>;
    /**
     * Mode of server configuration. Valid values: `default`, `individual`.
     */
    public readonly serverConfig!: pulumi.Output<string>;
    /**
     * Servers for link-monitor to monitor. The structure of `serverList` block is documented below.
     */
    public readonly serverLists!: pulumi.Output<outputs.system.LinkmonitorServerList[] | undefined>;
    /**
     * Server type (static or dynamic). Valid values: `static`, `dynamic`.
     */
    public readonly serverType!: pulumi.Output<string>;
    /**
     * IP address of the server(s) to be monitored. The structure of `server` block is documented below.
     */
    public readonly servers!: pulumi.Output<outputs.system.LinkmonitorServer[]>;
    /**
     * Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
     */
    public readonly serviceDetection!: pulumi.Output<string>;
    /**
     * Source IP address used in packet to the server.
     */
    public readonly sourceIp!: pulumi.Output<string>;
    /**
     * Source IPv6 address used in packet to the server.
     */
    public readonly sourceIp6!: pulumi.Output<string>;
    /**
     * Interface that receives the traffic to be monitored.
     */
    public readonly srcintf!: pulumi.Output<string>;
    /**
     * Enable/disable this link monitor. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Enable/disable update cascade interface. Valid values: `enable`, `disable`.
     */
    public readonly updateCascadeInterface!: pulumi.Output<string>;
    /**
     * Enable/disable updating the policy route. Valid values: `enable`, `disable`.
     */
    public readonly updatePolicyRoute!: pulumi.Output<string>;
    /**
     * Enable/disable updating the static route. Valid values: `enable`, `disable`.
     */
    public readonly updateStaticRoute!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a Linkmonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinkmonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LinkmonitorArgs | LinkmonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LinkmonitorState | undefined;
            resourceInputs["addrMode"] = state ? state.addrMode : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["diffservcode"] = state ? state.diffservcode : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["failWeight"] = state ? state.failWeight : undefined;
            resourceInputs["failtime"] = state ? state.failtime : undefined;
            resourceInputs["gatewayIp"] = state ? state.gatewayIp : undefined;
            resourceInputs["gatewayIp6"] = state ? state.gatewayIp6 : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["haPriority"] = state ? state.haPriority : undefined;
            resourceInputs["httpAgent"] = state ? state.httpAgent : undefined;
            resourceInputs["httpGet"] = state ? state.httpGet : undefined;
            resourceInputs["httpMatch"] = state ? state.httpMatch : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["packetSize"] = state ? state.packetSize : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["probeCount"] = state ? state.probeCount : undefined;
            resourceInputs["probeTimeout"] = state ? state.probeTimeout : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["recoverytime"] = state ? state.recoverytime : undefined;
            resourceInputs["routes"] = state ? state.routes : undefined;
            resourceInputs["securityMode"] = state ? state.securityMode : undefined;
            resourceInputs["serverConfig"] = state ? state.serverConfig : undefined;
            resourceInputs["serverLists"] = state ? state.serverLists : undefined;
            resourceInputs["serverType"] = state ? state.serverType : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["serviceDetection"] = state ? state.serviceDetection : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["sourceIp6"] = state ? state.sourceIp6 : undefined;
            resourceInputs["srcintf"] = state ? state.srcintf : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updateCascadeInterface"] = state ? state.updateCascadeInterface : undefined;
            resourceInputs["updatePolicyRoute"] = state ? state.updatePolicyRoute : undefined;
            resourceInputs["updateStaticRoute"] = state ? state.updateStaticRoute : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as LinkmonitorArgs | undefined;
            if ((!args || args.servers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servers'");
            }
            resourceInputs["addrMode"] = args ? args.addrMode : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["diffservcode"] = args ? args.diffservcode : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["failWeight"] = args ? args.failWeight : undefined;
            resourceInputs["failtime"] = args ? args.failtime : undefined;
            resourceInputs["gatewayIp"] = args ? args.gatewayIp : undefined;
            resourceInputs["gatewayIp6"] = args ? args.gatewayIp6 : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["haPriority"] = args ? args.haPriority : undefined;
            resourceInputs["httpAgent"] = args ? args.httpAgent : undefined;
            resourceInputs["httpGet"] = args ? args.httpGet : undefined;
            resourceInputs["httpMatch"] = args ? args.httpMatch : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["packetSize"] = args ? args.packetSize : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["probeCount"] = args ? args.probeCount : undefined;
            resourceInputs["probeTimeout"] = args ? args.probeTimeout : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["recoverytime"] = args ? args.recoverytime : undefined;
            resourceInputs["routes"] = args ? args.routes : undefined;
            resourceInputs["securityMode"] = args ? args.securityMode : undefined;
            resourceInputs["serverConfig"] = args ? args.serverConfig : undefined;
            resourceInputs["serverLists"] = args ? args.serverLists : undefined;
            resourceInputs["serverType"] = args ? args.serverType : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["serviceDetection"] = args ? args.serviceDetection : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["sourceIp6"] = args ? args.sourceIp6 : undefined;
            resourceInputs["srcintf"] = args ? args.srcintf : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["updateCascadeInterface"] = args ? args.updateCascadeInterface : undefined;
            resourceInputs["updatePolicyRoute"] = args ? args.updatePolicyRoute : undefined;
            resourceInputs["updateStaticRoute"] = args ? args.updateStaticRoute : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Linkmonitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Linkmonitor resources.
 */
export interface LinkmonitorState {
    /**
     * Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
     */
    addrMode?: pulumi.Input<string>;
    /**
     * Traffic class ID.
     */
    classId?: pulumi.Input<number>;
    /**
     * Differentiated services code point (DSCP) in the IP header of the probe packet.
     */
    diffservcode?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Threshold weight to trigger link failure alert.
     */
    failWeight?: pulumi.Input<number>;
    /**
     * Number of retry attempts before the server is considered down (1 - 10, default = 5)
     */
    failtime?: pulumi.Input<number>;
    /**
     * Gateway IP address used to probe the server.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Gateway IPv6 address used to probe the server.
     */
    gatewayIp6?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * HA election priority (1 - 50).
     */
    haPriority?: pulumi.Input<number>;
    /**
     * String in the http-agent field in the HTTP header.
     */
    httpAgent?: pulumi.Input<string>;
    /**
     * If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
     */
    httpGet?: pulumi.Input<string>;
    /**
     * String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
     */
    httpMatch?: pulumi.Input<string>;
    /**
     * Detection interval (1 - 3600 sec, default = 5).
     */
    interval?: pulumi.Input<number>;
    /**
     * Link monitor name.
     */
    name?: pulumi.Input<string>;
    /**
     * Packet size of a twamp test session,
     */
    packetSize?: pulumi.Input<number>;
    /**
     * Twamp controller password in authentication mode
     */
    password?: pulumi.Input<string>;
    /**
     * Port number of the traffic to be used to monitor the server.
     */
    port?: pulumi.Input<number>;
    /**
     * Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
     */
    probeCount?: pulumi.Input<number>;
    /**
     * Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
     */
    probeTimeout?: pulumi.Input<number>;
    /**
     * Protocols used to monitor the server.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Number of successful responses received before server is considered recovered (1 - 10, default = 5).
     */
    recoverytime?: pulumi.Input<number>;
    /**
     * Subnet to monitor. The structure of `route` block is documented below.
     */
    routes?: pulumi.Input<pulumi.Input<inputs.system.LinkmonitorRoute>[]>;
    /**
     * Twamp controller security mode. Valid values: `none`, `authentication`.
     */
    securityMode?: pulumi.Input<string>;
    /**
     * Mode of server configuration. Valid values: `default`, `individual`.
     */
    serverConfig?: pulumi.Input<string>;
    /**
     * Servers for link-monitor to monitor. The structure of `serverList` block is documented below.
     */
    serverLists?: pulumi.Input<pulumi.Input<inputs.system.LinkmonitorServerList>[]>;
    /**
     * Server type (static or dynamic). Valid values: `static`, `dynamic`.
     */
    serverType?: pulumi.Input<string>;
    /**
     * IP address of the server(s) to be monitored. The structure of `server` block is documented below.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.system.LinkmonitorServer>[]>;
    /**
     * Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
     */
    serviceDetection?: pulumi.Input<string>;
    /**
     * Source IP address used in packet to the server.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * Source IPv6 address used in packet to the server.
     */
    sourceIp6?: pulumi.Input<string>;
    /**
     * Interface that receives the traffic to be monitored.
     */
    srcintf?: pulumi.Input<string>;
    /**
     * Enable/disable this link monitor. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Enable/disable update cascade interface. Valid values: `enable`, `disable`.
     */
    updateCascadeInterface?: pulumi.Input<string>;
    /**
     * Enable/disable updating the policy route. Valid values: `enable`, `disable`.
     */
    updatePolicyRoute?: pulumi.Input<string>;
    /**
     * Enable/disable updating the static route. Valid values: `enable`, `disable`.
     */
    updateStaticRoute?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Linkmonitor resource.
 */
export interface LinkmonitorArgs {
    /**
     * Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
     */
    addrMode?: pulumi.Input<string>;
    /**
     * Traffic class ID.
     */
    classId?: pulumi.Input<number>;
    /**
     * Differentiated services code point (DSCP) in the IP header of the probe packet.
     */
    diffservcode?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Threshold weight to trigger link failure alert.
     */
    failWeight?: pulumi.Input<number>;
    /**
     * Number of retry attempts before the server is considered down (1 - 10, default = 5)
     */
    failtime?: pulumi.Input<number>;
    /**
     * Gateway IP address used to probe the server.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Gateway IPv6 address used to probe the server.
     */
    gatewayIp6?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * HA election priority (1 - 50).
     */
    haPriority?: pulumi.Input<number>;
    /**
     * String in the http-agent field in the HTTP header.
     */
    httpAgent?: pulumi.Input<string>;
    /**
     * If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
     */
    httpGet?: pulumi.Input<string>;
    /**
     * String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
     */
    httpMatch?: pulumi.Input<string>;
    /**
     * Detection interval (1 - 3600 sec, default = 5).
     */
    interval?: pulumi.Input<number>;
    /**
     * Link monitor name.
     */
    name?: pulumi.Input<string>;
    /**
     * Packet size of a twamp test session,
     */
    packetSize?: pulumi.Input<number>;
    /**
     * Twamp controller password in authentication mode
     */
    password?: pulumi.Input<string>;
    /**
     * Port number of the traffic to be used to monitor the server.
     */
    port?: pulumi.Input<number>;
    /**
     * Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
     */
    probeCount?: pulumi.Input<number>;
    /**
     * Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
     */
    probeTimeout?: pulumi.Input<number>;
    /**
     * Protocols used to monitor the server.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Number of successful responses received before server is considered recovered (1 - 10, default = 5).
     */
    recoverytime?: pulumi.Input<number>;
    /**
     * Subnet to monitor. The structure of `route` block is documented below.
     */
    routes?: pulumi.Input<pulumi.Input<inputs.system.LinkmonitorRoute>[]>;
    /**
     * Twamp controller security mode. Valid values: `none`, `authentication`.
     */
    securityMode?: pulumi.Input<string>;
    /**
     * Mode of server configuration. Valid values: `default`, `individual`.
     */
    serverConfig?: pulumi.Input<string>;
    /**
     * Servers for link-monitor to monitor. The structure of `serverList` block is documented below.
     */
    serverLists?: pulumi.Input<pulumi.Input<inputs.system.LinkmonitorServerList>[]>;
    /**
     * Server type (static or dynamic). Valid values: `static`, `dynamic`.
     */
    serverType?: pulumi.Input<string>;
    /**
     * IP address of the server(s) to be monitored. The structure of `server` block is documented below.
     */
    servers: pulumi.Input<pulumi.Input<inputs.system.LinkmonitorServer>[]>;
    /**
     * Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
     */
    serviceDetection?: pulumi.Input<string>;
    /**
     * Source IP address used in packet to the server.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * Source IPv6 address used in packet to the server.
     */
    sourceIp6?: pulumi.Input<string>;
    /**
     * Interface that receives the traffic to be monitored.
     */
    srcintf?: pulumi.Input<string>;
    /**
     * Enable/disable this link monitor. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Enable/disable update cascade interface. Valid values: `enable`, `disable`.
     */
    updateCascadeInterface?: pulumi.Input<string>;
    /**
     * Enable/disable updating the policy route. Valid values: `enable`, `disable`.
     */
    updatePolicyRoute?: pulumi.Input<string>;
    /**
     * Enable/disable updating the static route. Valid values: `enable`, `disable`.
     */
    updateStaticRoute?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
