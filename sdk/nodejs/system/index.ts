// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccprofileArgs, AccprofileState } from "./accprofile";
export type Accprofile = import("./accprofile").Accprofile;
export const Accprofile: typeof import("./accprofile").Accprofile = null as any;
utilities.lazyLoad(exports, ["Accprofile"], () => require("./accprofile"));

export { AcmeArgs, AcmeState } from "./acme";
export type Acme = import("./acme").Acme;
export const Acme: typeof import("./acme").Acme = null as any;
utilities.lazyLoad(exports, ["Acme"], () => require("./acme"));

export { AdminArgs, AdminState } from "./admin";
export type Admin = import("./admin").Admin;
export const Admin: typeof import("./admin").Admin = null as any;
utilities.lazyLoad(exports, ["Admin"], () => require("./admin"));

export { AdminAdministratorArgs, AdminAdministratorState } from "./adminAdministrator";
export type AdminAdministrator = import("./adminAdministrator").AdminAdministrator;
export const AdminAdministrator: typeof import("./adminAdministrator").AdminAdministrator = null as any;
utilities.lazyLoad(exports, ["AdminAdministrator"], () => require("./adminAdministrator"));

export { AdminProfilesArgs, AdminProfilesState } from "./adminProfiles";
export type AdminProfiles = import("./adminProfiles").AdminProfiles;
export const AdminProfiles: typeof import("./adminProfiles").AdminProfiles = null as any;
utilities.lazyLoad(exports, ["AdminProfiles"], () => require("./adminProfiles"));

export { AffinityinterruptArgs, AffinityinterruptState } from "./affinityinterrupt";
export type Affinityinterrupt = import("./affinityinterrupt").Affinityinterrupt;
export const Affinityinterrupt: typeof import("./affinityinterrupt").Affinityinterrupt = null as any;
utilities.lazyLoad(exports, ["Affinityinterrupt"], () => require("./affinityinterrupt"));

export { AffinitypacketredistributionArgs, AffinitypacketredistributionState } from "./affinitypacketredistribution";
export type Affinitypacketredistribution = import("./affinitypacketredistribution").Affinitypacketredistribution;
export const Affinitypacketredistribution: typeof import("./affinitypacketredistribution").Affinitypacketredistribution = null as any;
utilities.lazyLoad(exports, ["Affinitypacketredistribution"], () => require("./affinitypacketredistribution"));

export { AlarmArgs, AlarmState } from "./alarm";
export type Alarm = import("./alarm").Alarm;
export const Alarm: typeof import("./alarm").Alarm = null as any;
utilities.lazyLoad(exports, ["Alarm"], () => require("./alarm"));

export { AliasArgs, AliasState } from "./alias";
export type Alias = import("./alias").Alias;
export const Alias: typeof import("./alias").Alias = null as any;
utilities.lazyLoad(exports, ["Alias"], () => require("./alias"));

export { ApiuserArgs, ApiuserState } from "./apiuser";
export type Apiuser = import("./apiuser").Apiuser;
export const Apiuser: typeof import("./apiuser").Apiuser = null as any;
utilities.lazyLoad(exports, ["Apiuser"], () => require("./apiuser"));

export { ApiuserSettingArgs, ApiuserSettingState } from "./apiuserSetting";
export type ApiuserSetting = import("./apiuserSetting").ApiuserSetting;
export const ApiuserSetting: typeof import("./apiuserSetting").ApiuserSetting = null as any;
utilities.lazyLoad(exports, ["ApiuserSetting"], () => require("./apiuserSetting"));

export { ArptableArgs, ArptableState } from "./arptable";
export type Arptable = import("./arptable").Arptable;
export const Arptable: typeof import("./arptable").Arptable = null as any;
utilities.lazyLoad(exports, ["Arptable"], () => require("./arptable"));

export { AutoinstallArgs, AutoinstallState } from "./autoinstall";
export type Autoinstall = import("./autoinstall").Autoinstall;
export const Autoinstall: typeof import("./autoinstall").Autoinstall = null as any;
utilities.lazyLoad(exports, ["Autoinstall"], () => require("./autoinstall"));

export { AutomationactionArgs, AutomationactionState } from "./automationaction";
export type Automationaction = import("./automationaction").Automationaction;
export const Automationaction: typeof import("./automationaction").Automationaction = null as any;
utilities.lazyLoad(exports, ["Automationaction"], () => require("./automationaction"));

export { AutomationdestinationArgs, AutomationdestinationState } from "./automationdestination";
export type Automationdestination = import("./automationdestination").Automationdestination;
export const Automationdestination: typeof import("./automationdestination").Automationdestination = null as any;
utilities.lazyLoad(exports, ["Automationdestination"], () => require("./automationdestination"));

export { AutomationstitchArgs, AutomationstitchState } from "./automationstitch";
export type Automationstitch = import("./automationstitch").Automationstitch;
export const Automationstitch: typeof import("./automationstitch").Automationstitch = null as any;
utilities.lazyLoad(exports, ["Automationstitch"], () => require("./automationstitch"));

export { AutomationtriggerArgs, AutomationtriggerState } from "./automationtrigger";
export type Automationtrigger = import("./automationtrigger").Automationtrigger;
export const Automationtrigger: typeof import("./automationtrigger").Automationtrigger = null as any;
utilities.lazyLoad(exports, ["Automationtrigger"], () => require("./automationtrigger"));

export { AutoscriptArgs, AutoscriptState } from "./autoscript";
export type Autoscript = import("./autoscript").Autoscript;
export const Autoscript: typeof import("./autoscript").Autoscript = null as any;
utilities.lazyLoad(exports, ["Autoscript"], () => require("./autoscript"));

export { CentralmanagementArgs, CentralmanagementState } from "./centralmanagement";
export type Centralmanagement = import("./centralmanagement").Centralmanagement;
export const Centralmanagement: typeof import("./centralmanagement").Centralmanagement = null as any;
utilities.lazyLoad(exports, ["Centralmanagement"], () => require("./centralmanagement"));

export { ClustersyncArgs, ClustersyncState } from "./clustersync";
export type Clustersync = import("./clustersync").Clustersync;
export const Clustersync: typeof import("./clustersync").Clustersync = null as any;
utilities.lazyLoad(exports, ["Clustersync"], () => require("./clustersync"));

export { ConsoleArgs, ConsoleState } from "./console";
export type Console = import("./console").Console;
export const Console: typeof import("./console").Console = null as any;
utilities.lazyLoad(exports, ["Console"], () => require("./console"));

export { CsfArgs, CsfState } from "./csf";
export type Csf = import("./csf").Csf;
export const Csf: typeof import("./csf").Csf = null as any;
utilities.lazyLoad(exports, ["Csf"], () => require("./csf"));

export { CustomlanguageArgs, CustomlanguageState } from "./customlanguage";
export type Customlanguage = import("./customlanguage").Customlanguage;
export const Customlanguage: typeof import("./customlanguage").Customlanguage = null as any;
utilities.lazyLoad(exports, ["Customlanguage"], () => require("./customlanguage"));

export { DdnsArgs, DdnsState } from "./ddns";
export type Ddns = import("./ddns").Ddns;
export const Ddns: typeof import("./ddns").Ddns = null as any;
utilities.lazyLoad(exports, ["Ddns"], () => require("./ddns"));

export { DedicatedmgmtArgs, DedicatedmgmtState } from "./dedicatedmgmt";
export type Dedicatedmgmt = import("./dedicatedmgmt").Dedicatedmgmt;
export const Dedicatedmgmt: typeof import("./dedicatedmgmt").Dedicatedmgmt = null as any;
utilities.lazyLoad(exports, ["Dedicatedmgmt"], () => require("./dedicatedmgmt"));

export { DeviceupgradeArgs, DeviceupgradeState } from "./deviceupgrade";
export type Deviceupgrade = import("./deviceupgrade").Deviceupgrade;
export const Deviceupgrade: typeof import("./deviceupgrade").Deviceupgrade = null as any;
utilities.lazyLoad(exports, ["Deviceupgrade"], () => require("./deviceupgrade"));

export { DnsArgs, DnsState } from "./dns";
export type Dns = import("./dns").Dns;
export const Dns: typeof import("./dns").Dns = null as any;
utilities.lazyLoad(exports, ["Dns"], () => require("./dns"));

export { Dns64Args, Dns64State } from "./dns64";
export type Dns64 = import("./dns64").Dns64;
export const Dns64: typeof import("./dns64").Dns64 = null as any;
utilities.lazyLoad(exports, ["Dns64"], () => require("./dns64"));

export { DnsdatabaseArgs, DnsdatabaseState } from "./dnsdatabase";
export type Dnsdatabase = import("./dnsdatabase").Dnsdatabase;
export const Dnsdatabase: typeof import("./dnsdatabase").Dnsdatabase = null as any;
utilities.lazyLoad(exports, ["Dnsdatabase"], () => require("./dnsdatabase"));

export { DnsserverArgs, DnsserverState } from "./dnsserver";
export type Dnsserver = import("./dnsserver").Dnsserver;
export const Dnsserver: typeof import("./dnsserver").Dnsserver = null as any;
utilities.lazyLoad(exports, ["Dnsserver"], () => require("./dnsserver"));

export { DscpbasedpriorityArgs, DscpbasedpriorityState } from "./dscpbasedpriority";
export type Dscpbasedpriority = import("./dscpbasedpriority").Dscpbasedpriority;
export const Dscpbasedpriority: typeof import("./dscpbasedpriority").Dscpbasedpriority = null as any;
utilities.lazyLoad(exports, ["Dscpbasedpriority"], () => require("./dscpbasedpriority"));

export { EmailserverArgs, EmailserverState } from "./emailserver";
export type Emailserver = import("./emailserver").Emailserver;
export const Emailserver: typeof import("./emailserver").Emailserver = null as any;
utilities.lazyLoad(exports, ["Emailserver"], () => require("./emailserver"));

export { EvpnArgs, EvpnState } from "./evpn";
export type Evpn = import("./evpn").Evpn;
export const Evpn: typeof import("./evpn").Evpn = null as any;
utilities.lazyLoad(exports, ["Evpn"], () => require("./evpn"));

export { ExternalresourceArgs, ExternalresourceState } from "./externalresource";
export type Externalresource = import("./externalresource").Externalresource;
export const Externalresource: typeof import("./externalresource").Externalresource = null as any;
utilities.lazyLoad(exports, ["Externalresource"], () => require("./externalresource"));

export { FabricvpnArgs, FabricvpnState } from "./fabricvpn";
export type Fabricvpn = import("./fabricvpn").Fabricvpn;
export const Fabricvpn: typeof import("./fabricvpn").Fabricvpn = null as any;
utilities.lazyLoad(exports, ["Fabricvpn"], () => require("./fabricvpn"));

export { FederatedupgradeArgs, FederatedupgradeState } from "./federatedupgrade";
export type Federatedupgrade = import("./federatedupgrade").Federatedupgrade;
export const Federatedupgrade: typeof import("./federatedupgrade").Federatedupgrade = null as any;
utilities.lazyLoad(exports, ["Federatedupgrade"], () => require("./federatedupgrade"));

export { FipsccArgs, FipsccState } from "./fipscc";
export type Fipscc = import("./fipscc").Fipscc;
export const Fipscc: typeof import("./fipscc").Fipscc = null as any;
utilities.lazyLoad(exports, ["Fipscc"], () => require("./fipscc"));

export { FmArgs, FmState } from "./fm";
export type Fm = import("./fm").Fm;
export const Fm: typeof import("./fm").Fm = null as any;
utilities.lazyLoad(exports, ["Fm"], () => require("./fm"));

export { FortiaiArgs, FortiaiState } from "./fortiai";
export type Fortiai = import("./fortiai").Fortiai;
export const Fortiai: typeof import("./fortiai").Fortiai = null as any;
utilities.lazyLoad(exports, ["Fortiai"], () => require("./fortiai"));

export { FortiguardArgs, FortiguardState } from "./fortiguard";
export type Fortiguard = import("./fortiguard").Fortiguard;
export const Fortiguard: typeof import("./fortiguard").Fortiguard = null as any;
utilities.lazyLoad(exports, ["Fortiguard"], () => require("./fortiguard"));

export { FortimanagerArgs, FortimanagerState } from "./fortimanager";
export type Fortimanager = import("./fortimanager").Fortimanager;
export const Fortimanager: typeof import("./fortimanager").Fortimanager = null as any;
utilities.lazyLoad(exports, ["Fortimanager"], () => require("./fortimanager"));

export { FortindrArgs, FortindrState } from "./fortindr";
export type Fortindr = import("./fortindr").Fortindr;
export const Fortindr: typeof import("./fortindr").Fortindr = null as any;
utilities.lazyLoad(exports, ["Fortindr"], () => require("./fortindr"));

export { FortisandboxArgs, FortisandboxState } from "./fortisandbox";
export type Fortisandbox = import("./fortisandbox").Fortisandbox;
export const Fortisandbox: typeof import("./fortisandbox").Fortisandbox = null as any;
utilities.lazyLoad(exports, ["Fortisandbox"], () => require("./fortisandbox"));

export { FssopollingArgs, FssopollingState } from "./fssopolling";
export type Fssopolling = import("./fssopolling").Fssopolling;
export const Fssopolling: typeof import("./fssopolling").Fssopolling = null as any;
utilities.lazyLoad(exports, ["Fssopolling"], () => require("./fssopolling"));

export { FtmpushArgs, FtmpushState } from "./ftmpush";
export type Ftmpush = import("./ftmpush").Ftmpush;
export const Ftmpush: typeof import("./ftmpush").Ftmpush = null as any;
utilities.lazyLoad(exports, ["Ftmpush"], () => require("./ftmpush"));

export { GeneveArgs, GeneveState } from "./geneve";
export type Geneve = import("./geneve").Geneve;
export const Geneve: typeof import("./geneve").Geneve = null as any;
utilities.lazyLoad(exports, ["Geneve"], () => require("./geneve"));

export { GeoipcountryArgs, GeoipcountryState } from "./geoipcountry";
export type Geoipcountry = import("./geoipcountry").Geoipcountry;
export const Geoipcountry: typeof import("./geoipcountry").Geoipcountry = null as any;
utilities.lazyLoad(exports, ["Geoipcountry"], () => require("./geoipcountry"));

export { GeoipoverrideArgs, GeoipoverrideState } from "./geoipoverride";
export type Geoipoverride = import("./geoipoverride").Geoipoverride;
export const Geoipoverride: typeof import("./geoipoverride").Geoipoverride = null as any;
utilities.lazyLoad(exports, ["Geoipoverride"], () => require("./geoipoverride"));

export { GetAccprofileArgs, GetAccprofileResult, GetAccprofileOutputArgs } from "./getAccprofile";
export const getAccprofile: typeof import("./getAccprofile").getAccprofile = null as any;
export const getAccprofileOutput: typeof import("./getAccprofile").getAccprofileOutput = null as any;
utilities.lazyLoad(exports, ["getAccprofile","getAccprofileOutput"], () => require("./getAccprofile"));

export { GetAccprofilelistArgs, GetAccprofilelistResult, GetAccprofilelistOutputArgs } from "./getAccprofilelist";
export const getAccprofilelist: typeof import("./getAccprofilelist").getAccprofilelist = null as any;
export const getAccprofilelistOutput: typeof import("./getAccprofilelist").getAccprofilelistOutput = null as any;
utilities.lazyLoad(exports, ["getAccprofilelist","getAccprofilelistOutput"], () => require("./getAccprofilelist"));

export { GetAdminArgs, GetAdminResult, GetAdminOutputArgs } from "./getAdmin";
export const getAdmin: typeof import("./getAdmin").getAdmin = null as any;
export const getAdminOutput: typeof import("./getAdmin").getAdminOutput = null as any;
utilities.lazyLoad(exports, ["getAdmin","getAdminOutput"], () => require("./getAdmin"));

export { GetAdminlistArgs, GetAdminlistResult, GetAdminlistOutputArgs } from "./getAdminlist";
export const getAdminlist: typeof import("./getAdminlist").getAdminlist = null as any;
export const getAdminlistOutput: typeof import("./getAdminlist").getAdminlistOutput = null as any;
utilities.lazyLoad(exports, ["getAdminlist","getAdminlistOutput"], () => require("./getAdminlist"));

export { GetAliasArgs, GetAliasResult, GetAliasOutputArgs } from "./getAlias";
export const getAlias: typeof import("./getAlias").getAlias = null as any;
export const getAliasOutput: typeof import("./getAlias").getAliasOutput = null as any;
utilities.lazyLoad(exports, ["getAlias","getAliasOutput"], () => require("./getAlias"));

export { GetAliaslistArgs, GetAliaslistResult, GetAliaslistOutputArgs } from "./getAliaslist";
export const getAliaslist: typeof import("./getAliaslist").getAliaslist = null as any;
export const getAliaslistOutput: typeof import("./getAliaslist").getAliaslistOutput = null as any;
utilities.lazyLoad(exports, ["getAliaslist","getAliaslistOutput"], () => require("./getAliaslist"));

export { GetApiuserArgs, GetApiuserResult, GetApiuserOutputArgs } from "./getApiuser";
export const getApiuser: typeof import("./getApiuser").getApiuser = null as any;
export const getApiuserOutput: typeof import("./getApiuser").getApiuserOutput = null as any;
utilities.lazyLoad(exports, ["getApiuser","getApiuserOutput"], () => require("./getApiuser"));

export { GetApiuserlistArgs, GetApiuserlistResult, GetApiuserlistOutputArgs } from "./getApiuserlist";
export const getApiuserlist: typeof import("./getApiuserlist").getApiuserlist = null as any;
export const getApiuserlistOutput: typeof import("./getApiuserlist").getApiuserlistOutput = null as any;
utilities.lazyLoad(exports, ["getApiuserlist","getApiuserlistOutput"], () => require("./getApiuserlist"));

export { GetArptableArgs, GetArptableResult, GetArptableOutputArgs } from "./getArptable";
export const getArptable: typeof import("./getArptable").getArptable = null as any;
export const getArptableOutput: typeof import("./getArptable").getArptableOutput = null as any;
utilities.lazyLoad(exports, ["getArptable","getArptableOutput"], () => require("./getArptable"));

export { GetArptablelistArgs, GetArptablelistResult, GetArptablelistOutputArgs } from "./getArptablelist";
export const getArptablelist: typeof import("./getArptablelist").getArptablelist = null as any;
export const getArptablelistOutput: typeof import("./getArptablelist").getArptablelistOutput = null as any;
utilities.lazyLoad(exports, ["getArptablelist","getArptablelistOutput"], () => require("./getArptablelist"));

export { GetAutoinstallArgs, GetAutoinstallResult, GetAutoinstallOutputArgs } from "./getAutoinstall";
export const getAutoinstall: typeof import("./getAutoinstall").getAutoinstall = null as any;
export const getAutoinstallOutput: typeof import("./getAutoinstall").getAutoinstallOutput = null as any;
utilities.lazyLoad(exports, ["getAutoinstall","getAutoinstallOutput"], () => require("./getAutoinstall"));

export { GetAutomationactionArgs, GetAutomationactionResult, GetAutomationactionOutputArgs } from "./getAutomationaction";
export const getAutomationaction: typeof import("./getAutomationaction").getAutomationaction = null as any;
export const getAutomationactionOutput: typeof import("./getAutomationaction").getAutomationactionOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationaction","getAutomationactionOutput"], () => require("./getAutomationaction"));

export { GetAutomationactionlistArgs, GetAutomationactionlistResult, GetAutomationactionlistOutputArgs } from "./getAutomationactionlist";
export const getAutomationactionlist: typeof import("./getAutomationactionlist").getAutomationactionlist = null as any;
export const getAutomationactionlistOutput: typeof import("./getAutomationactionlist").getAutomationactionlistOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationactionlist","getAutomationactionlistOutput"], () => require("./getAutomationactionlist"));

export { GetAutomationdestinationArgs, GetAutomationdestinationResult, GetAutomationdestinationOutputArgs } from "./getAutomationdestination";
export const getAutomationdestination: typeof import("./getAutomationdestination").getAutomationdestination = null as any;
export const getAutomationdestinationOutput: typeof import("./getAutomationdestination").getAutomationdestinationOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationdestination","getAutomationdestinationOutput"], () => require("./getAutomationdestination"));

export { GetAutomationdestinationlistArgs, GetAutomationdestinationlistResult, GetAutomationdestinationlistOutputArgs } from "./getAutomationdestinationlist";
export const getAutomationdestinationlist: typeof import("./getAutomationdestinationlist").getAutomationdestinationlist = null as any;
export const getAutomationdestinationlistOutput: typeof import("./getAutomationdestinationlist").getAutomationdestinationlistOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationdestinationlist","getAutomationdestinationlistOutput"], () => require("./getAutomationdestinationlist"));

export { GetAutomationtriggerArgs, GetAutomationtriggerResult, GetAutomationtriggerOutputArgs } from "./getAutomationtrigger";
export const getAutomationtrigger: typeof import("./getAutomationtrigger").getAutomationtrigger = null as any;
export const getAutomationtriggerOutput: typeof import("./getAutomationtrigger").getAutomationtriggerOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationtrigger","getAutomationtriggerOutput"], () => require("./getAutomationtrigger"));

export { GetAutomationtriggerlistArgs, GetAutomationtriggerlistResult, GetAutomationtriggerlistOutputArgs } from "./getAutomationtriggerlist";
export const getAutomationtriggerlist: typeof import("./getAutomationtriggerlist").getAutomationtriggerlist = null as any;
export const getAutomationtriggerlistOutput: typeof import("./getAutomationtriggerlist").getAutomationtriggerlistOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationtriggerlist","getAutomationtriggerlistOutput"], () => require("./getAutomationtriggerlist"));

export { GetAutoscriptArgs, GetAutoscriptResult, GetAutoscriptOutputArgs } from "./getAutoscript";
export const getAutoscript: typeof import("./getAutoscript").getAutoscript = null as any;
export const getAutoscriptOutput: typeof import("./getAutoscript").getAutoscriptOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscript","getAutoscriptOutput"], () => require("./getAutoscript"));

export { GetAutoscriptlistArgs, GetAutoscriptlistResult, GetAutoscriptlistOutputArgs } from "./getAutoscriptlist";
export const getAutoscriptlist: typeof import("./getAutoscriptlist").getAutoscriptlist = null as any;
export const getAutoscriptlistOutput: typeof import("./getAutoscriptlist").getAutoscriptlistOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscriptlist","getAutoscriptlistOutput"], () => require("./getAutoscriptlist"));

export { GetCentralmanagementArgs, GetCentralmanagementResult, GetCentralmanagementOutputArgs } from "./getCentralmanagement";
export const getCentralmanagement: typeof import("./getCentralmanagement").getCentralmanagement = null as any;
export const getCentralmanagementOutput: typeof import("./getCentralmanagement").getCentralmanagementOutput = null as any;
utilities.lazyLoad(exports, ["getCentralmanagement","getCentralmanagementOutput"], () => require("./getCentralmanagement"));

export { GetClustersyncArgs, GetClustersyncResult, GetClustersyncOutputArgs } from "./getClustersync";
export const getClustersync: typeof import("./getClustersync").getClustersync = null as any;
export const getClustersyncOutput: typeof import("./getClustersync").getClustersyncOutput = null as any;
utilities.lazyLoad(exports, ["getClustersync","getClustersyncOutput"], () => require("./getClustersync"));

export { GetClustersynclistArgs, GetClustersynclistResult, GetClustersynclistOutputArgs } from "./getClustersynclist";
export const getClustersynclist: typeof import("./getClustersynclist").getClustersynclist = null as any;
export const getClustersynclistOutput: typeof import("./getClustersynclist").getClustersynclistOutput = null as any;
utilities.lazyLoad(exports, ["getClustersynclist","getClustersynclistOutput"], () => require("./getClustersynclist"));

export { GetConsoleArgs, GetConsoleResult, GetConsoleOutputArgs } from "./getConsole";
export const getConsole: typeof import("./getConsole").getConsole = null as any;
export const getConsoleOutput: typeof import("./getConsole").getConsoleOutput = null as any;
utilities.lazyLoad(exports, ["getConsole","getConsoleOutput"], () => require("./getConsole"));

export { GetCsfArgs, GetCsfResult, GetCsfOutputArgs } from "./getCsf";
export const getCsf: typeof import("./getCsf").getCsf = null as any;
export const getCsfOutput: typeof import("./getCsf").getCsfOutput = null as any;
utilities.lazyLoad(exports, ["getCsf","getCsfOutput"], () => require("./getCsf"));

export { GetDdnsArgs, GetDdnsResult, GetDdnsOutputArgs } from "./getDdns";
export const getDdns: typeof import("./getDdns").getDdns = null as any;
export const getDdnsOutput: typeof import("./getDdns").getDdnsOutput = null as any;
utilities.lazyLoad(exports, ["getDdns","getDdnsOutput"], () => require("./getDdns"));

export { GetDdnslistArgs, GetDdnslistResult, GetDdnslistOutputArgs } from "./getDdnslist";
export const getDdnslist: typeof import("./getDdnslist").getDdnslist = null as any;
export const getDdnslistOutput: typeof import("./getDdnslist").getDdnslistOutput = null as any;
utilities.lazyLoad(exports, ["getDdnslist","getDdnslistOutput"], () => require("./getDdnslist"));

export { GetDnsArgs, GetDnsResult, GetDnsOutputArgs } from "./getDns";
export const getDns: typeof import("./getDns").getDns = null as any;
export const getDnsOutput: typeof import("./getDns").getDnsOutput = null as any;
utilities.lazyLoad(exports, ["getDns","getDnsOutput"], () => require("./getDns"));

export { GetDnsdatabaseArgs, GetDnsdatabaseResult, GetDnsdatabaseOutputArgs } from "./getDnsdatabase";
export const getDnsdatabase: typeof import("./getDnsdatabase").getDnsdatabase = null as any;
export const getDnsdatabaseOutput: typeof import("./getDnsdatabase").getDnsdatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDnsdatabase","getDnsdatabaseOutput"], () => require("./getDnsdatabase"));

export { GetDnsdatabaselistArgs, GetDnsdatabaselistResult, GetDnsdatabaselistOutputArgs } from "./getDnsdatabaselist";
export const getDnsdatabaselist: typeof import("./getDnsdatabaselist").getDnsdatabaselist = null as any;
export const getDnsdatabaselistOutput: typeof import("./getDnsdatabaselist").getDnsdatabaselistOutput = null as any;
utilities.lazyLoad(exports, ["getDnsdatabaselist","getDnsdatabaselistOutput"], () => require("./getDnsdatabaselist"));

export { GetDnsserverArgs, GetDnsserverResult, GetDnsserverOutputArgs } from "./getDnsserver";
export const getDnsserver: typeof import("./getDnsserver").getDnsserver = null as any;
export const getDnsserverOutput: typeof import("./getDnsserver").getDnsserverOutput = null as any;
utilities.lazyLoad(exports, ["getDnsserver","getDnsserverOutput"], () => require("./getDnsserver"));

export { GetDnsserverlistArgs, GetDnsserverlistResult, GetDnsserverlistOutputArgs } from "./getDnsserverlist";
export const getDnsserverlist: typeof import("./getDnsserverlist").getDnsserverlist = null as any;
export const getDnsserverlistOutput: typeof import("./getDnsserverlist").getDnsserverlistOutput = null as any;
utilities.lazyLoad(exports, ["getDnsserverlist","getDnsserverlistOutput"], () => require("./getDnsserverlist"));

export { GetDscpbasedpriorityArgs, GetDscpbasedpriorityResult, GetDscpbasedpriorityOutputArgs } from "./getDscpbasedpriority";
export const getDscpbasedpriority: typeof import("./getDscpbasedpriority").getDscpbasedpriority = null as any;
export const getDscpbasedpriorityOutput: typeof import("./getDscpbasedpriority").getDscpbasedpriorityOutput = null as any;
utilities.lazyLoad(exports, ["getDscpbasedpriority","getDscpbasedpriorityOutput"], () => require("./getDscpbasedpriority"));

export { GetDscpbasedprioritylistArgs, GetDscpbasedprioritylistResult, GetDscpbasedprioritylistOutputArgs } from "./getDscpbasedprioritylist";
export const getDscpbasedprioritylist: typeof import("./getDscpbasedprioritylist").getDscpbasedprioritylist = null as any;
export const getDscpbasedprioritylistOutput: typeof import("./getDscpbasedprioritylist").getDscpbasedprioritylistOutput = null as any;
utilities.lazyLoad(exports, ["getDscpbasedprioritylist","getDscpbasedprioritylistOutput"], () => require("./getDscpbasedprioritylist"));

export { GetEmailserverArgs, GetEmailserverResult, GetEmailserverOutputArgs } from "./getEmailserver";
export const getEmailserver: typeof import("./getEmailserver").getEmailserver = null as any;
export const getEmailserverOutput: typeof import("./getEmailserver").getEmailserverOutput = null as any;
utilities.lazyLoad(exports, ["getEmailserver","getEmailserverOutput"], () => require("./getEmailserver"));

export { GetExternalresourceArgs, GetExternalresourceResult, GetExternalresourceOutputArgs } from "./getExternalresource";
export const getExternalresource: typeof import("./getExternalresource").getExternalresource = null as any;
export const getExternalresourceOutput: typeof import("./getExternalresource").getExternalresourceOutput = null as any;
utilities.lazyLoad(exports, ["getExternalresource","getExternalresourceOutput"], () => require("./getExternalresource"));

export { GetExternalresourcelistArgs, GetExternalresourcelistResult, GetExternalresourcelistOutputArgs } from "./getExternalresourcelist";
export const getExternalresourcelist: typeof import("./getExternalresourcelist").getExternalresourcelist = null as any;
export const getExternalresourcelistOutput: typeof import("./getExternalresourcelist").getExternalresourcelistOutput = null as any;
utilities.lazyLoad(exports, ["getExternalresourcelist","getExternalresourcelistOutput"], () => require("./getExternalresourcelist"));

export { GetFipsccArgs, GetFipsccResult, GetFipsccOutputArgs } from "./getFipscc";
export const getFipscc: typeof import("./getFipscc").getFipscc = null as any;
export const getFipsccOutput: typeof import("./getFipscc").getFipsccOutput = null as any;
utilities.lazyLoad(exports, ["getFipscc","getFipsccOutput"], () => require("./getFipscc"));

export { GetFmArgs, GetFmResult, GetFmOutputArgs } from "./getFm";
export const getFm: typeof import("./getFm").getFm = null as any;
export const getFmOutput: typeof import("./getFm").getFmOutput = null as any;
utilities.lazyLoad(exports, ["getFm","getFmOutput"], () => require("./getFm"));

export { GetFortiguardArgs, GetFortiguardResult, GetFortiguardOutputArgs } from "./getFortiguard";
export const getFortiguard: typeof import("./getFortiguard").getFortiguard = null as any;
export const getFortiguardOutput: typeof import("./getFortiguard").getFortiguardOutput = null as any;
utilities.lazyLoad(exports, ["getFortiguard","getFortiguardOutput"], () => require("./getFortiguard"));

export { GetFortimanagerArgs, GetFortimanagerResult, GetFortimanagerOutputArgs } from "./getFortimanager";
export const getFortimanager: typeof import("./getFortimanager").getFortimanager = null as any;
export const getFortimanagerOutput: typeof import("./getFortimanager").getFortimanagerOutput = null as any;
utilities.lazyLoad(exports, ["getFortimanager","getFortimanagerOutput"], () => require("./getFortimanager"));

export { GetFortisandboxArgs, GetFortisandboxResult, GetFortisandboxOutputArgs } from "./getFortisandbox";
export const getFortisandbox: typeof import("./getFortisandbox").getFortisandbox = null as any;
export const getFortisandboxOutput: typeof import("./getFortisandbox").getFortisandboxOutput = null as any;
utilities.lazyLoad(exports, ["getFortisandbox","getFortisandboxOutput"], () => require("./getFortisandbox"));

export { GetFssopollingArgs, GetFssopollingResult, GetFssopollingOutputArgs } from "./getFssopolling";
export const getFssopolling: typeof import("./getFssopolling").getFssopolling = null as any;
export const getFssopollingOutput: typeof import("./getFssopolling").getFssopollingOutput = null as any;
utilities.lazyLoad(exports, ["getFssopolling","getFssopollingOutput"], () => require("./getFssopolling"));

export { GetFtmpushArgs, GetFtmpushResult, GetFtmpushOutputArgs } from "./getFtmpush";
export const getFtmpush: typeof import("./getFtmpush").getFtmpush = null as any;
export const getFtmpushOutput: typeof import("./getFtmpush").getFtmpushOutput = null as any;
utilities.lazyLoad(exports, ["getFtmpush","getFtmpushOutput"], () => require("./getFtmpush"));

export { GetGlobalArgs, GetGlobalResult, GetGlobalOutputArgs } from "./getGlobal";
export const getGlobal: typeof import("./getGlobal").getGlobal = null as any;
export const getGlobalOutput: typeof import("./getGlobal").getGlobalOutput = null as any;
utilities.lazyLoad(exports, ["getGlobal","getGlobalOutput"], () => require("./getGlobal"));

export { GetGretunnelArgs, GetGretunnelResult, GetGretunnelOutputArgs } from "./getGretunnel";
export const getGretunnel: typeof import("./getGretunnel").getGretunnel = null as any;
export const getGretunnelOutput: typeof import("./getGretunnel").getGretunnelOutput = null as any;
utilities.lazyLoad(exports, ["getGretunnel","getGretunnelOutput"], () => require("./getGretunnel"));

export { GetGretunnellistArgs, GetGretunnellistResult, GetGretunnellistOutputArgs } from "./getGretunnellist";
export const getGretunnellist: typeof import("./getGretunnellist").getGretunnellist = null as any;
export const getGretunnellistOutput: typeof import("./getGretunnellist").getGretunnellistOutput = null as any;
utilities.lazyLoad(exports, ["getGretunnellist","getGretunnellistOutput"], () => require("./getGretunnellist"));

export { GetHaArgs, GetHaResult, GetHaOutputArgs } from "./getHa";
export const getHa: typeof import("./getHa").getHa = null as any;
export const getHaOutput: typeof import("./getHa").getHaOutput = null as any;
utilities.lazyLoad(exports, ["getHa","getHaOutput"], () => require("./getHa"));

export { GetHamonitorArgs, GetHamonitorResult, GetHamonitorOutputArgs } from "./getHamonitor";
export const getHamonitor: typeof import("./getHamonitor").getHamonitor = null as any;
export const getHamonitorOutput: typeof import("./getHamonitor").getHamonitorOutput = null as any;
utilities.lazyLoad(exports, ["getHamonitor","getHamonitorOutput"], () => require("./getHamonitor"));

export { GetInterfaceArgs, GetInterfaceResult, GetInterfaceOutputArgs } from "./getInterface";
export const getInterface: typeof import("./getInterface").getInterface = null as any;
export const getInterfaceOutput: typeof import("./getInterface").getInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getInterface","getInterfaceOutput"], () => require("./getInterface"));

export { GetInterfacelistArgs, GetInterfacelistResult, GetInterfacelistOutputArgs } from "./getInterfacelist";
export const getInterfacelist: typeof import("./getInterfacelist").getInterfacelist = null as any;
export const getInterfacelistOutput: typeof import("./getInterfacelist").getInterfacelistOutput = null as any;
utilities.lazyLoad(exports, ["getInterfacelist","getInterfacelistOutput"], () => require("./getInterfacelist"));

export { GetIpiptunnelArgs, GetIpiptunnelResult, GetIpiptunnelOutputArgs } from "./getIpiptunnel";
export const getIpiptunnel: typeof import("./getIpiptunnel").getIpiptunnel = null as any;
export const getIpiptunnelOutput: typeof import("./getIpiptunnel").getIpiptunnelOutput = null as any;
utilities.lazyLoad(exports, ["getIpiptunnel","getIpiptunnelOutput"], () => require("./getIpiptunnel"));

export { GetIpiptunnellistArgs, GetIpiptunnellistResult, GetIpiptunnellistOutputArgs } from "./getIpiptunnellist";
export const getIpiptunnellist: typeof import("./getIpiptunnellist").getIpiptunnellist = null as any;
export const getIpiptunnellistOutput: typeof import("./getIpiptunnellist").getIpiptunnellistOutput = null as any;
utilities.lazyLoad(exports, ["getIpiptunnellist","getIpiptunnellistOutput"], () => require("./getIpiptunnellist"));

export { GetIpv6neighborcacheArgs, GetIpv6neighborcacheResult, GetIpv6neighborcacheOutputArgs } from "./getIpv6neighborcache";
export const getIpv6neighborcache: typeof import("./getIpv6neighborcache").getIpv6neighborcache = null as any;
export const getIpv6neighborcacheOutput: typeof import("./getIpv6neighborcache").getIpv6neighborcacheOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6neighborcache","getIpv6neighborcacheOutput"], () => require("./getIpv6neighborcache"));

export { GetIpv6neighborcachelistArgs, GetIpv6neighborcachelistResult, GetIpv6neighborcachelistOutputArgs } from "./getIpv6neighborcachelist";
export const getIpv6neighborcachelist: typeof import("./getIpv6neighborcachelist").getIpv6neighborcachelist = null as any;
export const getIpv6neighborcachelistOutput: typeof import("./getIpv6neighborcachelist").getIpv6neighborcachelistOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6neighborcachelist","getIpv6neighborcachelistOutput"], () => require("./getIpv6neighborcachelist"));

export { GetIpv6tunnelArgs, GetIpv6tunnelResult, GetIpv6tunnelOutputArgs } from "./getIpv6tunnel";
export const getIpv6tunnel: typeof import("./getIpv6tunnel").getIpv6tunnel = null as any;
export const getIpv6tunnelOutput: typeof import("./getIpv6tunnel").getIpv6tunnelOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6tunnel","getIpv6tunnelOutput"], () => require("./getIpv6tunnel"));

export { GetIpv6tunnellistArgs, GetIpv6tunnellistResult, GetIpv6tunnellistOutputArgs } from "./getIpv6tunnellist";
export const getIpv6tunnellist: typeof import("./getIpv6tunnellist").getIpv6tunnellist = null as any;
export const getIpv6tunnellistOutput: typeof import("./getIpv6tunnellist").getIpv6tunnellistOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6tunnellist","getIpv6tunnellistOutput"], () => require("./getIpv6tunnellist"));

export { GetLinkmonitorArgs, GetLinkmonitorResult, GetLinkmonitorOutputArgs } from "./getLinkmonitor";
export const getLinkmonitor: typeof import("./getLinkmonitor").getLinkmonitor = null as any;
export const getLinkmonitorOutput: typeof import("./getLinkmonitor").getLinkmonitorOutput = null as any;
utilities.lazyLoad(exports, ["getLinkmonitor","getLinkmonitorOutput"], () => require("./getLinkmonitor"));

export { GetLinkmonitorlistArgs, GetLinkmonitorlistResult, GetLinkmonitorlistOutputArgs } from "./getLinkmonitorlist";
export const getLinkmonitorlist: typeof import("./getLinkmonitorlist").getLinkmonitorlist = null as any;
export const getLinkmonitorlistOutput: typeof import("./getLinkmonitorlist").getLinkmonitorlistOutput = null as any;
utilities.lazyLoad(exports, ["getLinkmonitorlist","getLinkmonitorlistOutput"], () => require("./getLinkmonitorlist"));

export { GetManagementtunnelArgs, GetManagementtunnelResult, GetManagementtunnelOutputArgs } from "./getManagementtunnel";
export const getManagementtunnel: typeof import("./getManagementtunnel").getManagementtunnel = null as any;
export const getManagementtunnelOutput: typeof import("./getManagementtunnel").getManagementtunnelOutput = null as any;
utilities.lazyLoad(exports, ["getManagementtunnel","getManagementtunnelOutput"], () => require("./getManagementtunnel"));

export { GetMobiletunnelArgs, GetMobiletunnelResult, GetMobiletunnelOutputArgs } from "./getMobiletunnel";
export const getMobiletunnel: typeof import("./getMobiletunnel").getMobiletunnel = null as any;
export const getMobiletunnelOutput: typeof import("./getMobiletunnel").getMobiletunnelOutput = null as any;
utilities.lazyLoad(exports, ["getMobiletunnel","getMobiletunnelOutput"], () => require("./getMobiletunnel"));

export { GetMobiletunnellistArgs, GetMobiletunnellistResult, GetMobiletunnellistOutputArgs } from "./getMobiletunnellist";
export const getMobiletunnellist: typeof import("./getMobiletunnellist").getMobiletunnellist = null as any;
export const getMobiletunnellistOutput: typeof import("./getMobiletunnellist").getMobiletunnellistOutput = null as any;
utilities.lazyLoad(exports, ["getMobiletunnellist","getMobiletunnellistOutput"], () => require("./getMobiletunnellist"));

export { GetNat64Args, GetNat64Result, GetNat64OutputArgs } from "./getNat64";
export const getNat64: typeof import("./getNat64").getNat64 = null as any;
export const getNat64Output: typeof import("./getNat64").getNat64Output = null as any;
utilities.lazyLoad(exports, ["getNat64","getNat64Output"], () => require("./getNat64"));

export { GetNdproxyArgs, GetNdproxyResult, GetNdproxyOutputArgs } from "./getNdproxy";
export const getNdproxy: typeof import("./getNdproxy").getNdproxy = null as any;
export const getNdproxyOutput: typeof import("./getNdproxy").getNdproxyOutput = null as any;
utilities.lazyLoad(exports, ["getNdproxy","getNdproxyOutput"], () => require("./getNdproxy"));

export { GetNetflowArgs, GetNetflowResult, GetNetflowOutputArgs } from "./getNetflow";
export const getNetflow: typeof import("./getNetflow").getNetflow = null as any;
export const getNetflowOutput: typeof import("./getNetflow").getNetflowOutput = null as any;
utilities.lazyLoad(exports, ["getNetflow","getNetflowOutput"], () => require("./getNetflow"));

export { GetNetworkvisibilityArgs, GetNetworkvisibilityResult, GetNetworkvisibilityOutputArgs } from "./getNetworkvisibility";
export const getNetworkvisibility: typeof import("./getNetworkvisibility").getNetworkvisibility = null as any;
export const getNetworkvisibilityOutput: typeof import("./getNetworkvisibility").getNetworkvisibilityOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkvisibility","getNetworkvisibilityOutput"], () => require("./getNetworkvisibility"));

export { GetNtpArgs, GetNtpResult, GetNtpOutputArgs } from "./getNtp";
export const getNtp: typeof import("./getNtp").getNtp = null as any;
export const getNtpOutput: typeof import("./getNtp").getNtpOutput = null as any;
utilities.lazyLoad(exports, ["getNtp","getNtpOutput"], () => require("./getNtp"));

export { GetObjecttaggingArgs, GetObjecttaggingResult, GetObjecttaggingOutputArgs } from "./getObjecttagging";
export const getObjecttagging: typeof import("./getObjecttagging").getObjecttagging = null as any;
export const getObjecttaggingOutput: typeof import("./getObjecttagging").getObjecttaggingOutput = null as any;
utilities.lazyLoad(exports, ["getObjecttagging","getObjecttaggingOutput"], () => require("./getObjecttagging"));

export { GetObjecttagginglistArgs, GetObjecttagginglistResult, GetObjecttagginglistOutputArgs } from "./getObjecttagginglist";
export const getObjecttagginglist: typeof import("./getObjecttagginglist").getObjecttagginglist = null as any;
export const getObjecttagginglistOutput: typeof import("./getObjecttagginglist").getObjecttagginglistOutput = null as any;
utilities.lazyLoad(exports, ["getObjecttagginglist","getObjecttagginglistOutput"], () => require("./getObjecttagginglist"));

export { GetPasswordpolicyArgs, GetPasswordpolicyResult, GetPasswordpolicyOutputArgs } from "./getPasswordpolicy";
export const getPasswordpolicy: typeof import("./getPasswordpolicy").getPasswordpolicy = null as any;
export const getPasswordpolicyOutput: typeof import("./getPasswordpolicy").getPasswordpolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPasswordpolicy","getPasswordpolicyOutput"], () => require("./getPasswordpolicy"));

export { GetPasswordpolicyguestadminArgs, GetPasswordpolicyguestadminResult, GetPasswordpolicyguestadminOutputArgs } from "./getPasswordpolicyguestadmin";
export const getPasswordpolicyguestadmin: typeof import("./getPasswordpolicyguestadmin").getPasswordpolicyguestadmin = null as any;
export const getPasswordpolicyguestadminOutput: typeof import("./getPasswordpolicyguestadmin").getPasswordpolicyguestadminOutput = null as any;
utilities.lazyLoad(exports, ["getPasswordpolicyguestadmin","getPasswordpolicyguestadminOutput"], () => require("./getPasswordpolicyguestadmin"));

export { GetPppoeinterfaceArgs, GetPppoeinterfaceResult, GetPppoeinterfaceOutputArgs } from "./getPppoeinterface";
export const getPppoeinterface: typeof import("./getPppoeinterface").getPppoeinterface = null as any;
export const getPppoeinterfaceOutput: typeof import("./getPppoeinterface").getPppoeinterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getPppoeinterface","getPppoeinterfaceOutput"], () => require("./getPppoeinterface"));

export { GetPppoeinterfacelistArgs, GetPppoeinterfacelistResult, GetPppoeinterfacelistOutputArgs } from "./getPppoeinterfacelist";
export const getPppoeinterfacelist: typeof import("./getPppoeinterfacelist").getPppoeinterfacelist = null as any;
export const getPppoeinterfacelistOutput: typeof import("./getPppoeinterfacelist").getPppoeinterfacelistOutput = null as any;
utilities.lazyLoad(exports, ["getPppoeinterfacelist","getPppoeinterfacelistOutput"], () => require("./getPppoeinterfacelist"));

export { GetProberesponseArgs, GetProberesponseResult, GetProberesponseOutputArgs } from "./getProberesponse";
export const getProberesponse: typeof import("./getProberesponse").getProberesponse = null as any;
export const getProberesponseOutput: typeof import("./getProberesponse").getProberesponseOutput = null as any;
utilities.lazyLoad(exports, ["getProberesponse","getProberesponseOutput"], () => require("./getProberesponse"));

export { GetProxyarpArgs, GetProxyarpResult, GetProxyarpOutputArgs } from "./getProxyarp";
export const getProxyarp: typeof import("./getProxyarp").getProxyarp = null as any;
export const getProxyarpOutput: typeof import("./getProxyarp").getProxyarpOutput = null as any;
utilities.lazyLoad(exports, ["getProxyarp","getProxyarpOutput"], () => require("./getProxyarp"));

export { GetProxyarplistArgs, GetProxyarplistResult, GetProxyarplistOutputArgs } from "./getProxyarplist";
export const getProxyarplist: typeof import("./getProxyarplist").getProxyarplist = null as any;
export const getProxyarplistOutput: typeof import("./getProxyarplist").getProxyarplistOutput = null as any;
utilities.lazyLoad(exports, ["getProxyarplist","getProxyarplistOutput"], () => require("./getProxyarplist"));

export { GetReplacemsggroupArgs, GetReplacemsggroupResult, GetReplacemsggroupOutputArgs } from "./getReplacemsggroup";
export const getReplacemsggroup: typeof import("./getReplacemsggroup").getReplacemsggroup = null as any;
export const getReplacemsggroupOutput: typeof import("./getReplacemsggroup").getReplacemsggroupOutput = null as any;
utilities.lazyLoad(exports, ["getReplacemsggroup","getReplacemsggroupOutput"], () => require("./getReplacemsggroup"));

export { GetReplacemsggrouplistArgs, GetReplacemsggrouplistResult, GetReplacemsggrouplistOutputArgs } from "./getReplacemsggrouplist";
export const getReplacemsggrouplist: typeof import("./getReplacemsggrouplist").getReplacemsggrouplist = null as any;
export const getReplacemsggrouplistOutput: typeof import("./getReplacemsggrouplist").getReplacemsggrouplistOutput = null as any;
utilities.lazyLoad(exports, ["getReplacemsggrouplist","getReplacemsggrouplistOutput"], () => require("./getReplacemsggrouplist"));

export { GetReplacemsgimageArgs, GetReplacemsgimageResult, GetReplacemsgimageOutputArgs } from "./getReplacemsgimage";
export const getReplacemsgimage: typeof import("./getReplacemsgimage").getReplacemsgimage = null as any;
export const getReplacemsgimageOutput: typeof import("./getReplacemsgimage").getReplacemsgimageOutput = null as any;
utilities.lazyLoad(exports, ["getReplacemsgimage","getReplacemsgimageOutput"], () => require("./getReplacemsgimage"));

export { GetReplacemsgimagelistArgs, GetReplacemsgimagelistResult, GetReplacemsgimagelistOutputArgs } from "./getReplacemsgimagelist";
export const getReplacemsgimagelist: typeof import("./getReplacemsgimagelist").getReplacemsgimagelist = null as any;
export const getReplacemsgimagelistOutput: typeof import("./getReplacemsgimagelist").getReplacemsgimagelistOutput = null as any;
utilities.lazyLoad(exports, ["getReplacemsgimagelist","getReplacemsgimagelistOutput"], () => require("./getReplacemsgimagelist"));

export { GetResourcelimitsArgs, GetResourcelimitsResult, GetResourcelimitsOutputArgs } from "./getResourcelimits";
export const getResourcelimits: typeof import("./getResourcelimits").getResourcelimits = null as any;
export const getResourcelimitsOutput: typeof import("./getResourcelimits").getResourcelimitsOutput = null as any;
utilities.lazyLoad(exports, ["getResourcelimits","getResourcelimitsOutput"], () => require("./getResourcelimits"));

export { GetSdnconnectorArgs, GetSdnconnectorResult, GetSdnconnectorOutputArgs } from "./getSdnconnector";
export const getSdnconnector: typeof import("./getSdnconnector").getSdnconnector = null as any;
export const getSdnconnectorOutput: typeof import("./getSdnconnector").getSdnconnectorOutput = null as any;
utilities.lazyLoad(exports, ["getSdnconnector","getSdnconnectorOutput"], () => require("./getSdnconnector"));

export { GetSdnconnectorlistArgs, GetSdnconnectorlistResult, GetSdnconnectorlistOutputArgs } from "./getSdnconnectorlist";
export const getSdnconnectorlist: typeof import("./getSdnconnectorlist").getSdnconnectorlist = null as any;
export const getSdnconnectorlistOutput: typeof import("./getSdnconnectorlist").getSdnconnectorlistOutput = null as any;
utilities.lazyLoad(exports, ["getSdnconnectorlist","getSdnconnectorlistOutput"], () => require("./getSdnconnectorlist"));

export { GetSessionhelperArgs, GetSessionhelperResult, GetSessionhelperOutputArgs } from "./getSessionhelper";
export const getSessionhelper: typeof import("./getSessionhelper").getSessionhelper = null as any;
export const getSessionhelperOutput: typeof import("./getSessionhelper").getSessionhelperOutput = null as any;
utilities.lazyLoad(exports, ["getSessionhelper","getSessionhelperOutput"], () => require("./getSessionhelper"));

export { GetSessionhelperlistArgs, GetSessionhelperlistResult, GetSessionhelperlistOutputArgs } from "./getSessionhelperlist";
export const getSessionhelperlist: typeof import("./getSessionhelperlist").getSessionhelperlist = null as any;
export const getSessionhelperlistOutput: typeof import("./getSessionhelperlist").getSessionhelperlistOutput = null as any;
utilities.lazyLoad(exports, ["getSessionhelperlist","getSessionhelperlistOutput"], () => require("./getSessionhelperlist"));

export { GetSessionttlArgs, GetSessionttlResult, GetSessionttlOutputArgs } from "./getSessionttl";
export const getSessionttl: typeof import("./getSessionttl").getSessionttl = null as any;
export const getSessionttlOutput: typeof import("./getSessionttl").getSessionttlOutput = null as any;
utilities.lazyLoad(exports, ["getSessionttl","getSessionttlOutput"], () => require("./getSessionttl"));

export { GetSflowArgs, GetSflowResult, GetSflowOutputArgs } from "./getSflow";
export const getSflow: typeof import("./getSflow").getSflow = null as any;
export const getSflowOutput: typeof import("./getSflow").getSflowOutput = null as any;
utilities.lazyLoad(exports, ["getSflow","getSflowOutput"], () => require("./getSflow"));

export { GetSittunnelArgs, GetSittunnelResult, GetSittunnelOutputArgs } from "./getSittunnel";
export const getSittunnel: typeof import("./getSittunnel").getSittunnel = null as any;
export const getSittunnelOutput: typeof import("./getSittunnel").getSittunnelOutput = null as any;
utilities.lazyLoad(exports, ["getSittunnel","getSittunnelOutput"], () => require("./getSittunnel"));

export { GetSittunnellistArgs, GetSittunnellistResult, GetSittunnellistOutputArgs } from "./getSittunnellist";
export const getSittunnellist: typeof import("./getSittunnellist").getSittunnellist = null as any;
export const getSittunnellistOutput: typeof import("./getSittunnellist").getSittunnellistOutput = null as any;
utilities.lazyLoad(exports, ["getSittunnellist","getSittunnellistOutput"], () => require("./getSittunnellist"));

export { GetSmsserverArgs, GetSmsserverResult, GetSmsserverOutputArgs } from "./getSmsserver";
export const getSmsserver: typeof import("./getSmsserver").getSmsserver = null as any;
export const getSmsserverOutput: typeof import("./getSmsserver").getSmsserverOutput = null as any;
utilities.lazyLoad(exports, ["getSmsserver","getSmsserverOutput"], () => require("./getSmsserver"));

export { GetSmsserverlistArgs, GetSmsserverlistResult, GetSmsserverlistOutputArgs } from "./getSmsserverlist";
export const getSmsserverlist: typeof import("./getSmsserverlist").getSmsserverlist = null as any;
export const getSmsserverlistOutput: typeof import("./getSmsserverlist").getSmsserverlistOutput = null as any;
utilities.lazyLoad(exports, ["getSmsserverlist","getSmsserverlistOutput"], () => require("./getSmsserverlist"));

export { GetTosbasedpriorityArgs, GetTosbasedpriorityResult, GetTosbasedpriorityOutputArgs } from "./getTosbasedpriority";
export const getTosbasedpriority: typeof import("./getTosbasedpriority").getTosbasedpriority = null as any;
export const getTosbasedpriorityOutput: typeof import("./getTosbasedpriority").getTosbasedpriorityOutput = null as any;
utilities.lazyLoad(exports, ["getTosbasedpriority","getTosbasedpriorityOutput"], () => require("./getTosbasedpriority"));

export { GetTosbasedprioritylistArgs, GetTosbasedprioritylistResult, GetTosbasedprioritylistOutputArgs } from "./getTosbasedprioritylist";
export const getTosbasedprioritylist: typeof import("./getTosbasedprioritylist").getTosbasedprioritylist = null as any;
export const getTosbasedprioritylistOutput: typeof import("./getTosbasedprioritylist").getTosbasedprioritylistOutput = null as any;
utilities.lazyLoad(exports, ["getTosbasedprioritylist","getTosbasedprioritylistOutput"], () => require("./getTosbasedprioritylist"));

export { GetVdomexceptionArgs, GetVdomexceptionResult, GetVdomexceptionOutputArgs } from "./getVdomexception";
export const getVdomexception: typeof import("./getVdomexception").getVdomexception = null as any;
export const getVdomexceptionOutput: typeof import("./getVdomexception").getVdomexceptionOutput = null as any;
utilities.lazyLoad(exports, ["getVdomexception","getVdomexceptionOutput"], () => require("./getVdomexception"));

export { GetVdomexceptionlistArgs, GetVdomexceptionlistResult, GetVdomexceptionlistOutputArgs } from "./getVdomexceptionlist";
export const getVdomexceptionlist: typeof import("./getVdomexceptionlist").getVdomexceptionlist = null as any;
export const getVdomexceptionlistOutput: typeof import("./getVdomexceptionlist").getVdomexceptionlistOutput = null as any;
utilities.lazyLoad(exports, ["getVdomexceptionlist","getVdomexceptionlistOutput"], () => require("./getVdomexceptionlist"));

export { GetVdomnetflowArgs, GetVdomnetflowResult, GetVdomnetflowOutputArgs } from "./getVdomnetflow";
export const getVdomnetflow: typeof import("./getVdomnetflow").getVdomnetflow = null as any;
export const getVdomnetflowOutput: typeof import("./getVdomnetflow").getVdomnetflowOutput = null as any;
utilities.lazyLoad(exports, ["getVdomnetflow","getVdomnetflowOutput"], () => require("./getVdomnetflow"));

export { GetVdomsflowArgs, GetVdomsflowResult, GetVdomsflowOutputArgs } from "./getVdomsflow";
export const getVdomsflow: typeof import("./getVdomsflow").getVdomsflow = null as any;
export const getVdomsflowOutput: typeof import("./getVdomsflow").getVdomsflowOutput = null as any;
utilities.lazyLoad(exports, ["getVdomsflow","getVdomsflowOutput"], () => require("./getVdomsflow"));

export { GetVirtualwanlinkArgs, GetVirtualwanlinkResult, GetVirtualwanlinkOutputArgs } from "./getVirtualwanlink";
export const getVirtualwanlink: typeof import("./getVirtualwanlink").getVirtualwanlink = null as any;
export const getVirtualwanlinkOutput: typeof import("./getVirtualwanlink").getVirtualwanlinkOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualwanlink","getVirtualwanlinkOutput"], () => require("./getVirtualwanlink"));

export { GetVxlanArgs, GetVxlanResult, GetVxlanOutputArgs } from "./getVxlan";
export const getVxlan: typeof import("./getVxlan").getVxlan = null as any;
export const getVxlanOutput: typeof import("./getVxlan").getVxlanOutput = null as any;
utilities.lazyLoad(exports, ["getVxlan","getVxlanOutput"], () => require("./getVxlan"));

export { GetVxlanlistArgs, GetVxlanlistResult, GetVxlanlistOutputArgs } from "./getVxlanlist";
export const getVxlanlist: typeof import("./getVxlanlist").getVxlanlist = null as any;
export const getVxlanlistOutput: typeof import("./getVxlanlist").getVxlanlistOutput = null as any;
utilities.lazyLoad(exports, ["getVxlanlist","getVxlanlistOutput"], () => require("./getVxlanlist"));

export { GetWccpArgs, GetWccpResult, GetWccpOutputArgs } from "./getWccp";
export const getWccp: typeof import("./getWccp").getWccp = null as any;
export const getWccpOutput: typeof import("./getWccp").getWccpOutput = null as any;
utilities.lazyLoad(exports, ["getWccp","getWccpOutput"], () => require("./getWccp"));

export { GetWccplistArgs, GetWccplistResult, GetWccplistOutputArgs } from "./getWccplist";
export const getWccplist: typeof import("./getWccplist").getWccplist = null as any;
export const getWccplistOutput: typeof import("./getWccplist").getWccplistOutput = null as any;
utilities.lazyLoad(exports, ["getWccplist","getWccplistOutput"], () => require("./getWccplist"));

export { GetZoneArgs, GetZoneResult, GetZoneOutputArgs } from "./getZone";
export const getZone: typeof import("./getZone").getZone = null as any;
export const getZoneOutput: typeof import("./getZone").getZoneOutput = null as any;
utilities.lazyLoad(exports, ["getZone","getZoneOutput"], () => require("./getZone"));

export { GetZonelistArgs, GetZonelistResult, GetZonelistOutputArgs } from "./getZonelist";
export const getZonelist: typeof import("./getZonelist").getZonelist = null as any;
export const getZonelistOutput: typeof import("./getZonelist").getZonelistOutput = null as any;
utilities.lazyLoad(exports, ["getZonelist","getZonelistOutput"], () => require("./getZonelist"));

export { GlobalArgs, GlobalState } from "./global";
export type Global = import("./global").Global;
export const Global: typeof import("./global").Global = null as any;
utilities.lazyLoad(exports, ["Global"], () => require("./global"));

export { GretunnelArgs, GretunnelState } from "./gretunnel";
export type Gretunnel = import("./gretunnel").Gretunnel;
export const Gretunnel: typeof import("./gretunnel").Gretunnel = null as any;
utilities.lazyLoad(exports, ["Gretunnel"], () => require("./gretunnel"));

export { HaArgs, HaState } from "./ha";
export type Ha = import("./ha").Ha;
export const Ha: typeof import("./ha").Ha = null as any;
utilities.lazyLoad(exports, ["Ha"], () => require("./ha"));

export { HamonitorArgs, HamonitorState } from "./hamonitor";
export type Hamonitor = import("./hamonitor").Hamonitor;
export const Hamonitor: typeof import("./hamonitor").Hamonitor = null as any;
utilities.lazyLoad(exports, ["Hamonitor"], () => require("./hamonitor"));

export { IkeArgs, IkeState } from "./ike";
export type Ike = import("./ike").Ike;
export const Ike: typeof import("./ike").Ike = null as any;
utilities.lazyLoad(exports, ["Ike"], () => require("./ike"));

export { InterfaceArgs, InterfaceState } from "./interface";
export type Interface = import("./interface").Interface;
export const Interface: typeof import("./interface").Interface = null as any;
utilities.lazyLoad(exports, ["Interface"], () => require("./interface"));

export { IpamArgs, IpamState } from "./ipam";
export type Ipam = import("./ipam").Ipam;
export const Ipam: typeof import("./ipam").Ipam = null as any;
utilities.lazyLoad(exports, ["Ipam"], () => require("./ipam"));

export { IpiptunnelArgs, IpiptunnelState } from "./ipiptunnel";
export type Ipiptunnel = import("./ipiptunnel").Ipiptunnel;
export const Ipiptunnel: typeof import("./ipiptunnel").Ipiptunnel = null as any;
utilities.lazyLoad(exports, ["Ipiptunnel"], () => require("./ipiptunnel"));

export { IpsArgs, IpsState } from "./ips";
export type Ips = import("./ips").Ips;
export const Ips: typeof import("./ips").Ips = null as any;
utilities.lazyLoad(exports, ["Ips"], () => require("./ips"));

export { IpsecaggregateArgs, IpsecaggregateState } from "./ipsecaggregate";
export type Ipsecaggregate = import("./ipsecaggregate").Ipsecaggregate;
export const Ipsecaggregate: typeof import("./ipsecaggregate").Ipsecaggregate = null as any;
utilities.lazyLoad(exports, ["Ipsecaggregate"], () => require("./ipsecaggregate"));

export { IpsurlfilterdnsArgs, IpsurlfilterdnsState } from "./ipsurlfilterdns";
export type Ipsurlfilterdns = import("./ipsurlfilterdns").Ipsurlfilterdns;
export const Ipsurlfilterdns: typeof import("./ipsurlfilterdns").Ipsurlfilterdns = null as any;
utilities.lazyLoad(exports, ["Ipsurlfilterdns"], () => require("./ipsurlfilterdns"));

export { Ipsurlfilterdns6Args, Ipsurlfilterdns6State } from "./ipsurlfilterdns6";
export type Ipsurlfilterdns6 = import("./ipsurlfilterdns6").Ipsurlfilterdns6;
export const Ipsurlfilterdns6: typeof import("./ipsurlfilterdns6").Ipsurlfilterdns6 = null as any;
utilities.lazyLoad(exports, ["Ipsurlfilterdns6"], () => require("./ipsurlfilterdns6"));

export { Ipv6neighborcacheArgs, Ipv6neighborcacheState } from "./ipv6neighborcache";
export type Ipv6neighborcache = import("./ipv6neighborcache").Ipv6neighborcache;
export const Ipv6neighborcache: typeof import("./ipv6neighborcache").Ipv6neighborcache = null as any;
utilities.lazyLoad(exports, ["Ipv6neighborcache"], () => require("./ipv6neighborcache"));

export { Ipv6tunnelArgs, Ipv6tunnelState } from "./ipv6tunnel";
export type Ipv6tunnel = import("./ipv6tunnel").Ipv6tunnel;
export const Ipv6tunnel: typeof import("./ipv6tunnel").Ipv6tunnel = null as any;
utilities.lazyLoad(exports, ["Ipv6tunnel"], () => require("./ipv6tunnel"));

export { LicenseForticareArgs, LicenseForticareState } from "./licenseForticare";
export type LicenseForticare = import("./licenseForticare").LicenseForticare;
export const LicenseForticare: typeof import("./licenseForticare").LicenseForticare = null as any;
utilities.lazyLoad(exports, ["LicenseForticare"], () => require("./licenseForticare"));

export { LicenseVdomArgs, LicenseVdomState } from "./licenseVdom";
export type LicenseVdom = import("./licenseVdom").LicenseVdom;
export const LicenseVdom: typeof import("./licenseVdom").LicenseVdom = null as any;
utilities.lazyLoad(exports, ["LicenseVdom"], () => require("./licenseVdom"));

export { LicenseVmArgs, LicenseVmState } from "./licenseVm";
export type LicenseVm = import("./licenseVm").LicenseVm;
export const LicenseVm: typeof import("./licenseVm").LicenseVm = null as any;
utilities.lazyLoad(exports, ["LicenseVm"], () => require("./licenseVm"));

export { LinkmonitorArgs, LinkmonitorState } from "./linkmonitor";
export type Linkmonitor = import("./linkmonitor").Linkmonitor;
export const Linkmonitor: typeof import("./linkmonitor").Linkmonitor = null as any;
utilities.lazyLoad(exports, ["Linkmonitor"], () => require("./linkmonitor"));

export { LtemodemArgs, LtemodemState } from "./ltemodem";
export type Ltemodem = import("./ltemodem").Ltemodem;
export const Ltemodem: typeof import("./ltemodem").Ltemodem = null as any;
utilities.lazyLoad(exports, ["Ltemodem"], () => require("./ltemodem"));

export { MacaddresstableArgs, MacaddresstableState } from "./macaddresstable";
export type Macaddresstable = import("./macaddresstable").Macaddresstable;
export const Macaddresstable: typeof import("./macaddresstable").Macaddresstable = null as any;
utilities.lazyLoad(exports, ["Macaddresstable"], () => require("./macaddresstable"));

export { ManagementtunnelArgs, ManagementtunnelState } from "./managementtunnel";
export type Managementtunnel = import("./managementtunnel").Managementtunnel;
export const Managementtunnel: typeof import("./managementtunnel").Managementtunnel = null as any;
utilities.lazyLoad(exports, ["Managementtunnel"], () => require("./managementtunnel"));

export { MobiletunnelArgs, MobiletunnelState } from "./mobiletunnel";
export type Mobiletunnel = import("./mobiletunnel").Mobiletunnel;
export const Mobiletunnel: typeof import("./mobiletunnel").Mobiletunnel = null as any;
utilities.lazyLoad(exports, ["Mobiletunnel"], () => require("./mobiletunnel"));

export { ModemArgs, ModemState } from "./modem";
export type Modem = import("./modem").Modem;
export const Modem: typeof import("./modem").Modem = null as any;
utilities.lazyLoad(exports, ["Modem"], () => require("./modem"));

export { Nat64Args, Nat64State } from "./nat64";
export type Nat64 = import("./nat64").Nat64;
export const Nat64: typeof import("./nat64").Nat64 = null as any;
utilities.lazyLoad(exports, ["Nat64"], () => require("./nat64"));

export { NdproxyArgs, NdproxyState } from "./ndproxy";
export type Ndproxy = import("./ndproxy").Ndproxy;
export const Ndproxy: typeof import("./ndproxy").Ndproxy = null as any;
utilities.lazyLoad(exports, ["Ndproxy"], () => require("./ndproxy"));

export { NetflowArgs, NetflowState } from "./netflow";
export type Netflow = import("./netflow").Netflow;
export const Netflow: typeof import("./netflow").Netflow = null as any;
utilities.lazyLoad(exports, ["Netflow"], () => require("./netflow"));

export { NetworkvisibilityArgs, NetworkvisibilityState } from "./networkvisibility";
export type Networkvisibility = import("./networkvisibility").Networkvisibility;
export const Networkvisibility: typeof import("./networkvisibility").Networkvisibility = null as any;
utilities.lazyLoad(exports, ["Networkvisibility"], () => require("./networkvisibility"));

export { NpuArgs, NpuState } from "./npu";
export type Npu = import("./npu").Npu;
export const Npu: typeof import("./npu").Npu = null as any;
utilities.lazyLoad(exports, ["Npu"], () => require("./npu"));

export { NtpArgs, NtpState } from "./ntp";
export type Ntp = import("./ntp").Ntp;
export const Ntp: typeof import("./ntp").Ntp = null as any;
utilities.lazyLoad(exports, ["Ntp"], () => require("./ntp"));

export { ObjecttaggingArgs, ObjecttaggingState } from "./objecttagging";
export type Objecttagging = import("./objecttagging").Objecttagging;
export const Objecttagging: typeof import("./objecttagging").Objecttagging = null as any;
utilities.lazyLoad(exports, ["Objecttagging"], () => require("./objecttagging"));

export { PasswordpolicyArgs, PasswordpolicyState } from "./passwordpolicy";
export type Passwordpolicy = import("./passwordpolicy").Passwordpolicy;
export const Passwordpolicy: typeof import("./passwordpolicy").Passwordpolicy = null as any;
utilities.lazyLoad(exports, ["Passwordpolicy"], () => require("./passwordpolicy"));

export { PasswordpolicyguestadminArgs, PasswordpolicyguestadminState } from "./passwordpolicyguestadmin";
export type Passwordpolicyguestadmin = import("./passwordpolicyguestadmin").Passwordpolicyguestadmin;
export const Passwordpolicyguestadmin: typeof import("./passwordpolicyguestadmin").Passwordpolicyguestadmin = null as any;
utilities.lazyLoad(exports, ["Passwordpolicyguestadmin"], () => require("./passwordpolicyguestadmin"));

export { PcpserverArgs, PcpserverState } from "./pcpserver";
export type Pcpserver = import("./pcpserver").Pcpserver;
export const Pcpserver: typeof import("./pcpserver").Pcpserver = null as any;
utilities.lazyLoad(exports, ["Pcpserver"], () => require("./pcpserver"));

export { PhysicalswitchArgs, PhysicalswitchState } from "./physicalswitch";
export type Physicalswitch = import("./physicalswitch").Physicalswitch;
export const Physicalswitch: typeof import("./physicalswitch").Physicalswitch = null as any;
utilities.lazyLoad(exports, ["Physicalswitch"], () => require("./physicalswitch"));

export { PppoeinterfaceArgs, PppoeinterfaceState } from "./pppoeinterface";
export type Pppoeinterface = import("./pppoeinterface").Pppoeinterface;
export const Pppoeinterface: typeof import("./pppoeinterface").Pppoeinterface = null as any;
utilities.lazyLoad(exports, ["Pppoeinterface"], () => require("./pppoeinterface"));

export { ProberesponseArgs, ProberesponseState } from "./proberesponse";
export type Proberesponse = import("./proberesponse").Proberesponse;
export const Proberesponse: typeof import("./proberesponse").Proberesponse = null as any;
utilities.lazyLoad(exports, ["Proberesponse"], () => require("./proberesponse"));

export { ProxyarpArgs, ProxyarpState } from "./proxyarp";
export type Proxyarp = import("./proxyarp").Proxyarp;
export const Proxyarp: typeof import("./proxyarp").Proxyarp = null as any;
utilities.lazyLoad(exports, ["Proxyarp"], () => require("./proxyarp"));

export { PtpArgs, PtpState } from "./ptp";
export type Ptp = import("./ptp").Ptp;
export const Ptp: typeof import("./ptp").Ptp = null as any;
utilities.lazyLoad(exports, ["Ptp"], () => require("./ptp"));

export { ReplacemsggroupArgs, ReplacemsggroupState } from "./replacemsggroup";
export type Replacemsggroup = import("./replacemsggroup").Replacemsggroup;
export const Replacemsggroup: typeof import("./replacemsggroup").Replacemsggroup = null as any;
utilities.lazyLoad(exports, ["Replacemsggroup"], () => require("./replacemsggroup"));

export { ReplacemsgimageArgs, ReplacemsgimageState } from "./replacemsgimage";
export type Replacemsgimage = import("./replacemsgimage").Replacemsgimage;
export const Replacemsgimage: typeof import("./replacemsgimage").Replacemsgimage = null as any;
utilities.lazyLoad(exports, ["Replacemsgimage"], () => require("./replacemsgimage"));

export { ResourcelimitsArgs, ResourcelimitsState } from "./resourcelimits";
export type Resourcelimits = import("./resourcelimits").Resourcelimits;
export const Resourcelimits: typeof import("./resourcelimits").Resourcelimits = null as any;
utilities.lazyLoad(exports, ["Resourcelimits"], () => require("./resourcelimits"));

export { SamlArgs, SamlState } from "./saml";
export type Saml = import("./saml").Saml;
export const Saml: typeof import("./saml").Saml = null as any;
utilities.lazyLoad(exports, ["Saml"], () => require("./saml"));

export { SdnconnectorArgs, SdnconnectorState } from "./sdnconnector";
export type Sdnconnector = import("./sdnconnector").Sdnconnector;
export const Sdnconnector: typeof import("./sdnconnector").Sdnconnector = null as any;
utilities.lazyLoad(exports, ["Sdnconnector"], () => require("./sdnconnector"));

export { SdnproxyArgs, SdnproxyState } from "./sdnproxy";
export type Sdnproxy = import("./sdnproxy").Sdnproxy;
export const Sdnproxy: typeof import("./sdnproxy").Sdnproxy = null as any;
utilities.lazyLoad(exports, ["Sdnproxy"], () => require("./sdnproxy"));

export { SdwanArgs, SdwanState } from "./sdwan";
export type Sdwan = import("./sdwan").Sdwan;
export const Sdwan: typeof import("./sdwan").Sdwan = null as any;
utilities.lazyLoad(exports, ["Sdwan"], () => require("./sdwan"));

export { SessionhelperArgs, SessionhelperState } from "./sessionhelper";
export type Sessionhelper = import("./sessionhelper").Sessionhelper;
export const Sessionhelper: typeof import("./sessionhelper").Sessionhelper = null as any;
utilities.lazyLoad(exports, ["Sessionhelper"], () => require("./sessionhelper"));

export { SessionttlArgs, SessionttlState } from "./sessionttl";
export type Sessionttl = import("./sessionttl").Sessionttl;
export const Sessionttl: typeof import("./sessionttl").Sessionttl = null as any;
utilities.lazyLoad(exports, ["Sessionttl"], () => require("./sessionttl"));

export { SettingDnsArgs, SettingDnsState } from "./settingDns";
export type SettingDns = import("./settingDns").SettingDns;
export const SettingDns: typeof import("./settingDns").SettingDns = null as any;
utilities.lazyLoad(exports, ["SettingDns"], () => require("./settingDns"));

export { SettingGlobalArgs, SettingGlobalState } from "./settingGlobal";
export type SettingGlobal = import("./settingGlobal").SettingGlobal;
export const SettingGlobal: typeof import("./settingGlobal").SettingGlobal = null as any;
utilities.lazyLoad(exports, ["SettingGlobal"], () => require("./settingGlobal"));

export { SettingNtpArgs, SettingNtpState } from "./settingNtp";
export type SettingNtp = import("./settingNtp").SettingNtp;
export const SettingNtp: typeof import("./settingNtp").SettingNtp = null as any;
utilities.lazyLoad(exports, ["SettingNtp"], () => require("./settingNtp"));

export { SettingsArgs, SettingsState } from "./settings";
export type Settings = import("./settings").Settings;
export const Settings: typeof import("./settings").Settings = null as any;
utilities.lazyLoad(exports, ["Settings"], () => require("./settings"));

export { SflowArgs, SflowState } from "./sflow";
export type Sflow = import("./sflow").Sflow;
export const Sflow: typeof import("./sflow").Sflow = null as any;
utilities.lazyLoad(exports, ["Sflow"], () => require("./sflow"));

export { SittunnelArgs, SittunnelState } from "./sittunnel";
export type Sittunnel = import("./sittunnel").Sittunnel;
export const Sittunnel: typeof import("./sittunnel").Sittunnel = null as any;
utilities.lazyLoad(exports, ["Sittunnel"], () => require("./sittunnel"));

export { SmsserverArgs, SmsserverState } from "./smsserver";
export type Smsserver = import("./smsserver").Smsserver;
export const Smsserver: typeof import("./smsserver").Smsserver = null as any;
utilities.lazyLoad(exports, ["Smsserver"], () => require("./smsserver"));

export { SpeedtestscheduleArgs, SpeedtestscheduleState } from "./speedtestschedule";
export type Speedtestschedule = import("./speedtestschedule").Speedtestschedule;
export const Speedtestschedule: typeof import("./speedtestschedule").Speedtestschedule = null as any;
utilities.lazyLoad(exports, ["Speedtestschedule"], () => require("./speedtestschedule"));

export { SpeedtestserverArgs, SpeedtestserverState } from "./speedtestserver";
export type Speedtestserver = import("./speedtestserver").Speedtestserver;
export const Speedtestserver: typeof import("./speedtestserver").Speedtestserver = null as any;
utilities.lazyLoad(exports, ["Speedtestserver"], () => require("./speedtestserver"));

export { SpeedtestsettingArgs, SpeedtestsettingState } from "./speedtestsetting";
export type Speedtestsetting = import("./speedtestsetting").Speedtestsetting;
export const Speedtestsetting: typeof import("./speedtestsetting").Speedtestsetting = null as any;
utilities.lazyLoad(exports, ["Speedtestsetting"], () => require("./speedtestsetting"));

export { SsoadminArgs, SsoadminState } from "./ssoadmin";
export type Ssoadmin = import("./ssoadmin").Ssoadmin;
export const Ssoadmin: typeof import("./ssoadmin").Ssoadmin = null as any;
utilities.lazyLoad(exports, ["Ssoadmin"], () => require("./ssoadmin"));

export { SsoforticloudadminArgs, SsoforticloudadminState } from "./ssoforticloudadmin";
export type Ssoforticloudadmin = import("./ssoforticloudadmin").Ssoforticloudadmin;
export const Ssoforticloudadmin: typeof import("./ssoforticloudadmin").Ssoforticloudadmin = null as any;
utilities.lazyLoad(exports, ["Ssoforticloudadmin"], () => require("./ssoforticloudadmin"));

export { SsofortigatecloudadminArgs, SsofortigatecloudadminState } from "./ssofortigatecloudadmin";
export type Ssofortigatecloudadmin = import("./ssofortigatecloudadmin").Ssofortigatecloudadmin;
export const Ssofortigatecloudadmin: typeof import("./ssofortigatecloudadmin").Ssofortigatecloudadmin = null as any;
utilities.lazyLoad(exports, ["Ssofortigatecloudadmin"], () => require("./ssofortigatecloudadmin"));

export { StandaloneclusterArgs, StandaloneclusterState } from "./standalonecluster";
export type Standalonecluster = import("./standalonecluster").Standalonecluster;
export const Standalonecluster: typeof import("./standalonecluster").Standalonecluster = null as any;
utilities.lazyLoad(exports, ["Standalonecluster"], () => require("./standalonecluster"));

export { StorageArgs, StorageState } from "./storage";
export type Storage = import("./storage").Storage;
export const Storage: typeof import("./storage").Storage = null as any;
utilities.lazyLoad(exports, ["Storage"], () => require("./storage"));

export { StpArgs, StpState } from "./stp";
export type Stp = import("./stp").Stp;
export const Stp: typeof import("./stp").Stp = null as any;
utilities.lazyLoad(exports, ["Stp"], () => require("./stp"));

export { SwitchinterfaceArgs, SwitchinterfaceState } from "./switchinterface";
export type Switchinterface = import("./switchinterface").Switchinterface;
export const Switchinterface: typeof import("./switchinterface").Switchinterface = null as any;
utilities.lazyLoad(exports, ["Switchinterface"], () => require("./switchinterface"));

export { TosbasedpriorityArgs, TosbasedpriorityState } from "./tosbasedpriority";
export type Tosbasedpriority = import("./tosbasedpriority").Tosbasedpriority;
export const Tosbasedpriority: typeof import("./tosbasedpriority").Tosbasedpriority = null as any;
utilities.lazyLoad(exports, ["Tosbasedpriority"], () => require("./tosbasedpriority"));

export { VdomArgs, VdomState } from "./vdom";
export type Vdom = import("./vdom").Vdom;
export const Vdom: typeof import("./vdom").Vdom = null as any;
utilities.lazyLoad(exports, ["Vdom"], () => require("./vdom"));

export { VdomSettingArgs, VdomSettingState } from "./vdomSetting";
export type VdomSetting = import("./vdomSetting").VdomSetting;
export const VdomSetting: typeof import("./vdomSetting").VdomSetting = null as any;
utilities.lazyLoad(exports, ["VdomSetting"], () => require("./vdomSetting"));

export { VdomdnsArgs, VdomdnsState } from "./vdomdns";
export type Vdomdns = import("./vdomdns").Vdomdns;
export const Vdomdns: typeof import("./vdomdns").Vdomdns = null as any;
utilities.lazyLoad(exports, ["Vdomdns"], () => require("./vdomdns"));

export { VdomexceptionArgs, VdomexceptionState } from "./vdomexception";
export type Vdomexception = import("./vdomexception").Vdomexception;
export const Vdomexception: typeof import("./vdomexception").Vdomexception = null as any;
utilities.lazyLoad(exports, ["Vdomexception"], () => require("./vdomexception"));

export { VdomlinkArgs, VdomlinkState } from "./vdomlink";
export type Vdomlink = import("./vdomlink").Vdomlink;
export const Vdomlink: typeof import("./vdomlink").Vdomlink = null as any;
utilities.lazyLoad(exports, ["Vdomlink"], () => require("./vdomlink"));

export { VdomnetflowArgs, VdomnetflowState } from "./vdomnetflow";
export type Vdomnetflow = import("./vdomnetflow").Vdomnetflow;
export const Vdomnetflow: typeof import("./vdomnetflow").Vdomnetflow = null as any;
utilities.lazyLoad(exports, ["Vdomnetflow"], () => require("./vdomnetflow"));

export { VdompropertyArgs, VdompropertyState } from "./vdomproperty";
export type Vdomproperty = import("./vdomproperty").Vdomproperty;
export const Vdomproperty: typeof import("./vdomproperty").Vdomproperty = null as any;
utilities.lazyLoad(exports, ["Vdomproperty"], () => require("./vdomproperty"));

export { VdomradiusserverArgs, VdomradiusserverState } from "./vdomradiusserver";
export type Vdomradiusserver = import("./vdomradiusserver").Vdomradiusserver;
export const Vdomradiusserver: typeof import("./vdomradiusserver").Vdomradiusserver = null as any;
utilities.lazyLoad(exports, ["Vdomradiusserver"], () => require("./vdomradiusserver"));

export { VdomsflowArgs, VdomsflowState } from "./vdomsflow";
export type Vdomsflow = import("./vdomsflow").Vdomsflow;
export const Vdomsflow: typeof import("./vdomsflow").Vdomsflow = null as any;
utilities.lazyLoad(exports, ["Vdomsflow"], () => require("./vdomsflow"));

export { VirtualswitchArgs, VirtualswitchState } from "./virtualswitch";
export type Virtualswitch = import("./virtualswitch").Virtualswitch;
export const Virtualswitch: typeof import("./virtualswitch").Virtualswitch = null as any;
utilities.lazyLoad(exports, ["Virtualswitch"], () => require("./virtualswitch"));

export { VirtualwanlinkArgs, VirtualwanlinkState } from "./virtualwanlink";
export type Virtualwanlink = import("./virtualwanlink").Virtualwanlink;
export const Virtualwanlink: typeof import("./virtualwanlink").Virtualwanlink = null as any;
utilities.lazyLoad(exports, ["Virtualwanlink"], () => require("./virtualwanlink"));

export { VirtualwirepairArgs, VirtualwirepairState } from "./virtualwirepair";
export type Virtualwirepair = import("./virtualwirepair").Virtualwirepair;
export const Virtualwirepair: typeof import("./virtualwirepair").Virtualwirepair = null as any;
utilities.lazyLoad(exports, ["Virtualwirepair"], () => require("./virtualwirepair"));

export { VnetunnelArgs, VnetunnelState } from "./vnetunnel";
export type Vnetunnel = import("./vnetunnel").Vnetunnel;
export const Vnetunnel: typeof import("./vnetunnel").Vnetunnel = null as any;
utilities.lazyLoad(exports, ["Vnetunnel"], () => require("./vnetunnel"));

export { VxlanArgs, VxlanState } from "./vxlan";
export type Vxlan = import("./vxlan").Vxlan;
export const Vxlan: typeof import("./vxlan").Vxlan = null as any;
utilities.lazyLoad(exports, ["Vxlan"], () => require("./vxlan"));

export { WccpArgs, WccpState } from "./wccp";
export type Wccp = import("./wccp").Wccp;
export const Wccp: typeof import("./wccp").Wccp = null as any;
utilities.lazyLoad(exports, ["Wccp"], () => require("./wccp"));

export { ZoneArgs, ZoneState } from "./zone";
export type Zone = import("./zone").Zone;
export const Zone: typeof import("./zone").Zone = null as any;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));


// Export sub-modules:
import * as autoupdate from "./autoupdate";
import * as dhcp from "./dhcp";
import * as dhcp6 from "./dhcp6";
import * as lldp from "./lldp";
import * as modem3g from "./modem3g";
import * as replacemsg from "./replacemsg";
import * as snmp from "./snmp";

export {
    autoupdate,
    dhcp,
    dhcp6,
    lldp,
    modem3g,
    replacemsg,
    snmp,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fortios:system/accprofile:Accprofile":
                return new Accprofile(name, <any>undefined, { urn })
            case "fortios:system/acme:Acme":
                return new Acme(name, <any>undefined, { urn })
            case "fortios:system/admin:Admin":
                return new Admin(name, <any>undefined, { urn })
            case "fortios:system/adminAdministrator:AdminAdministrator":
                return new AdminAdministrator(name, <any>undefined, { urn })
            case "fortios:system/adminProfiles:AdminProfiles":
                return new AdminProfiles(name, <any>undefined, { urn })
            case "fortios:system/affinityinterrupt:Affinityinterrupt":
                return new Affinityinterrupt(name, <any>undefined, { urn })
            case "fortios:system/affinitypacketredistribution:Affinitypacketredistribution":
                return new Affinitypacketredistribution(name, <any>undefined, { urn })
            case "fortios:system/alarm:Alarm":
                return new Alarm(name, <any>undefined, { urn })
            case "fortios:system/alias:Alias":
                return new Alias(name, <any>undefined, { urn })
            case "fortios:system/apiuser:Apiuser":
                return new Apiuser(name, <any>undefined, { urn })
            case "fortios:system/apiuserSetting:ApiuserSetting":
                return new ApiuserSetting(name, <any>undefined, { urn })
            case "fortios:system/arptable:Arptable":
                return new Arptable(name, <any>undefined, { urn })
            case "fortios:system/autoinstall:Autoinstall":
                return new Autoinstall(name, <any>undefined, { urn })
            case "fortios:system/automationaction:Automationaction":
                return new Automationaction(name, <any>undefined, { urn })
            case "fortios:system/automationdestination:Automationdestination":
                return new Automationdestination(name, <any>undefined, { urn })
            case "fortios:system/automationstitch:Automationstitch":
                return new Automationstitch(name, <any>undefined, { urn })
            case "fortios:system/automationtrigger:Automationtrigger":
                return new Automationtrigger(name, <any>undefined, { urn })
            case "fortios:system/autoscript:Autoscript":
                return new Autoscript(name, <any>undefined, { urn })
            case "fortios:system/centralmanagement:Centralmanagement":
                return new Centralmanagement(name, <any>undefined, { urn })
            case "fortios:system/clustersync:Clustersync":
                return new Clustersync(name, <any>undefined, { urn })
            case "fortios:system/console:Console":
                return new Console(name, <any>undefined, { urn })
            case "fortios:system/csf:Csf":
                return new Csf(name, <any>undefined, { urn })
            case "fortios:system/customlanguage:Customlanguage":
                return new Customlanguage(name, <any>undefined, { urn })
            case "fortios:system/ddns:Ddns":
                return new Ddns(name, <any>undefined, { urn })
            case "fortios:system/dedicatedmgmt:Dedicatedmgmt":
                return new Dedicatedmgmt(name, <any>undefined, { urn })
            case "fortios:system/deviceupgrade:Deviceupgrade":
                return new Deviceupgrade(name, <any>undefined, { urn })
            case "fortios:system/dns64:Dns64":
                return new Dns64(name, <any>undefined, { urn })
            case "fortios:system/dns:Dns":
                return new Dns(name, <any>undefined, { urn })
            case "fortios:system/dnsdatabase:Dnsdatabase":
                return new Dnsdatabase(name, <any>undefined, { urn })
            case "fortios:system/dnsserver:Dnsserver":
                return new Dnsserver(name, <any>undefined, { urn })
            case "fortios:system/dscpbasedpriority:Dscpbasedpriority":
                return new Dscpbasedpriority(name, <any>undefined, { urn })
            case "fortios:system/emailserver:Emailserver":
                return new Emailserver(name, <any>undefined, { urn })
            case "fortios:system/evpn:Evpn":
                return new Evpn(name, <any>undefined, { urn })
            case "fortios:system/externalresource:Externalresource":
                return new Externalresource(name, <any>undefined, { urn })
            case "fortios:system/fabricvpn:Fabricvpn":
                return new Fabricvpn(name, <any>undefined, { urn })
            case "fortios:system/federatedupgrade:Federatedupgrade":
                return new Federatedupgrade(name, <any>undefined, { urn })
            case "fortios:system/fipscc:Fipscc":
                return new Fipscc(name, <any>undefined, { urn })
            case "fortios:system/fm:Fm":
                return new Fm(name, <any>undefined, { urn })
            case "fortios:system/fortiai:Fortiai":
                return new Fortiai(name, <any>undefined, { urn })
            case "fortios:system/fortiguard:Fortiguard":
                return new Fortiguard(name, <any>undefined, { urn })
            case "fortios:system/fortimanager:Fortimanager":
                return new Fortimanager(name, <any>undefined, { urn })
            case "fortios:system/fortindr:Fortindr":
                return new Fortindr(name, <any>undefined, { urn })
            case "fortios:system/fortisandbox:Fortisandbox":
                return new Fortisandbox(name, <any>undefined, { urn })
            case "fortios:system/fssopolling:Fssopolling":
                return new Fssopolling(name, <any>undefined, { urn })
            case "fortios:system/ftmpush:Ftmpush":
                return new Ftmpush(name, <any>undefined, { urn })
            case "fortios:system/geneve:Geneve":
                return new Geneve(name, <any>undefined, { urn })
            case "fortios:system/geoipcountry:Geoipcountry":
                return new Geoipcountry(name, <any>undefined, { urn })
            case "fortios:system/geoipoverride:Geoipoverride":
                return new Geoipoverride(name, <any>undefined, { urn })
            case "fortios:system/global:Global":
                return new Global(name, <any>undefined, { urn })
            case "fortios:system/gretunnel:Gretunnel":
                return new Gretunnel(name, <any>undefined, { urn })
            case "fortios:system/ha:Ha":
                return new Ha(name, <any>undefined, { urn })
            case "fortios:system/hamonitor:Hamonitor":
                return new Hamonitor(name, <any>undefined, { urn })
            case "fortios:system/ike:Ike":
                return new Ike(name, <any>undefined, { urn })
            case "fortios:system/interface:Interface":
                return new Interface(name, <any>undefined, { urn })
            case "fortios:system/ipam:Ipam":
                return new Ipam(name, <any>undefined, { urn })
            case "fortios:system/ipiptunnel:Ipiptunnel":
                return new Ipiptunnel(name, <any>undefined, { urn })
            case "fortios:system/ips:Ips":
                return new Ips(name, <any>undefined, { urn })
            case "fortios:system/ipsecaggregate:Ipsecaggregate":
                return new Ipsecaggregate(name, <any>undefined, { urn })
            case "fortios:system/ipsurlfilterdns6:Ipsurlfilterdns6":
                return new Ipsurlfilterdns6(name, <any>undefined, { urn })
            case "fortios:system/ipsurlfilterdns:Ipsurlfilterdns":
                return new Ipsurlfilterdns(name, <any>undefined, { urn })
            case "fortios:system/ipv6neighborcache:Ipv6neighborcache":
                return new Ipv6neighborcache(name, <any>undefined, { urn })
            case "fortios:system/ipv6tunnel:Ipv6tunnel":
                return new Ipv6tunnel(name, <any>undefined, { urn })
            case "fortios:system/licenseForticare:LicenseForticare":
                return new LicenseForticare(name, <any>undefined, { urn })
            case "fortios:system/licenseVdom:LicenseVdom":
                return new LicenseVdom(name, <any>undefined, { urn })
            case "fortios:system/licenseVm:LicenseVm":
                return new LicenseVm(name, <any>undefined, { urn })
            case "fortios:system/linkmonitor:Linkmonitor":
                return new Linkmonitor(name, <any>undefined, { urn })
            case "fortios:system/ltemodem:Ltemodem":
                return new Ltemodem(name, <any>undefined, { urn })
            case "fortios:system/macaddresstable:Macaddresstable":
                return new Macaddresstable(name, <any>undefined, { urn })
            case "fortios:system/managementtunnel:Managementtunnel":
                return new Managementtunnel(name, <any>undefined, { urn })
            case "fortios:system/mobiletunnel:Mobiletunnel":
                return new Mobiletunnel(name, <any>undefined, { urn })
            case "fortios:system/modem:Modem":
                return new Modem(name, <any>undefined, { urn })
            case "fortios:system/nat64:Nat64":
                return new Nat64(name, <any>undefined, { urn })
            case "fortios:system/ndproxy:Ndproxy":
                return new Ndproxy(name, <any>undefined, { urn })
            case "fortios:system/netflow:Netflow":
                return new Netflow(name, <any>undefined, { urn })
            case "fortios:system/networkvisibility:Networkvisibility":
                return new Networkvisibility(name, <any>undefined, { urn })
            case "fortios:system/npu:Npu":
                return new Npu(name, <any>undefined, { urn })
            case "fortios:system/ntp:Ntp":
                return new Ntp(name, <any>undefined, { urn })
            case "fortios:system/objecttagging:Objecttagging":
                return new Objecttagging(name, <any>undefined, { urn })
            case "fortios:system/passwordpolicy:Passwordpolicy":
                return new Passwordpolicy(name, <any>undefined, { urn })
            case "fortios:system/passwordpolicyguestadmin:Passwordpolicyguestadmin":
                return new Passwordpolicyguestadmin(name, <any>undefined, { urn })
            case "fortios:system/pcpserver:Pcpserver":
                return new Pcpserver(name, <any>undefined, { urn })
            case "fortios:system/physicalswitch:Physicalswitch":
                return new Physicalswitch(name, <any>undefined, { urn })
            case "fortios:system/pppoeinterface:Pppoeinterface":
                return new Pppoeinterface(name, <any>undefined, { urn })
            case "fortios:system/proberesponse:Proberesponse":
                return new Proberesponse(name, <any>undefined, { urn })
            case "fortios:system/proxyarp:Proxyarp":
                return new Proxyarp(name, <any>undefined, { urn })
            case "fortios:system/ptp:Ptp":
                return new Ptp(name, <any>undefined, { urn })
            case "fortios:system/replacemsggroup:Replacemsggroup":
                return new Replacemsggroup(name, <any>undefined, { urn })
            case "fortios:system/replacemsgimage:Replacemsgimage":
                return new Replacemsgimage(name, <any>undefined, { urn })
            case "fortios:system/resourcelimits:Resourcelimits":
                return new Resourcelimits(name, <any>undefined, { urn })
            case "fortios:system/saml:Saml":
                return new Saml(name, <any>undefined, { urn })
            case "fortios:system/sdnconnector:Sdnconnector":
                return new Sdnconnector(name, <any>undefined, { urn })
            case "fortios:system/sdnproxy:Sdnproxy":
                return new Sdnproxy(name, <any>undefined, { urn })
            case "fortios:system/sdwan:Sdwan":
                return new Sdwan(name, <any>undefined, { urn })
            case "fortios:system/sessionhelper:Sessionhelper":
                return new Sessionhelper(name, <any>undefined, { urn })
            case "fortios:system/sessionttl:Sessionttl":
                return new Sessionttl(name, <any>undefined, { urn })
            case "fortios:system/settingDns:SettingDns":
                return new SettingDns(name, <any>undefined, { urn })
            case "fortios:system/settingGlobal:SettingGlobal":
                return new SettingGlobal(name, <any>undefined, { urn })
            case "fortios:system/settingNtp:SettingNtp":
                return new SettingNtp(name, <any>undefined, { urn })
            case "fortios:system/settings:Settings":
                return new Settings(name, <any>undefined, { urn })
            case "fortios:system/sflow:Sflow":
                return new Sflow(name, <any>undefined, { urn })
            case "fortios:system/sittunnel:Sittunnel":
                return new Sittunnel(name, <any>undefined, { urn })
            case "fortios:system/smsserver:Smsserver":
                return new Smsserver(name, <any>undefined, { urn })
            case "fortios:system/speedtestschedule:Speedtestschedule":
                return new Speedtestschedule(name, <any>undefined, { urn })
            case "fortios:system/speedtestserver:Speedtestserver":
                return new Speedtestserver(name, <any>undefined, { urn })
            case "fortios:system/speedtestsetting:Speedtestsetting":
                return new Speedtestsetting(name, <any>undefined, { urn })
            case "fortios:system/ssoadmin:Ssoadmin":
                return new Ssoadmin(name, <any>undefined, { urn })
            case "fortios:system/ssoforticloudadmin:Ssoforticloudadmin":
                return new Ssoforticloudadmin(name, <any>undefined, { urn })
            case "fortios:system/ssofortigatecloudadmin:Ssofortigatecloudadmin":
                return new Ssofortigatecloudadmin(name, <any>undefined, { urn })
            case "fortios:system/standalonecluster:Standalonecluster":
                return new Standalonecluster(name, <any>undefined, { urn })
            case "fortios:system/storage:Storage":
                return new Storage(name, <any>undefined, { urn })
            case "fortios:system/stp:Stp":
                return new Stp(name, <any>undefined, { urn })
            case "fortios:system/switchinterface:Switchinterface":
                return new Switchinterface(name, <any>undefined, { urn })
            case "fortios:system/tosbasedpriority:Tosbasedpriority":
                return new Tosbasedpriority(name, <any>undefined, { urn })
            case "fortios:system/vdom:Vdom":
                return new Vdom(name, <any>undefined, { urn })
            case "fortios:system/vdomSetting:VdomSetting":
                return new VdomSetting(name, <any>undefined, { urn })
            case "fortios:system/vdomdns:Vdomdns":
                return new Vdomdns(name, <any>undefined, { urn })
            case "fortios:system/vdomexception:Vdomexception":
                return new Vdomexception(name, <any>undefined, { urn })
            case "fortios:system/vdomlink:Vdomlink":
                return new Vdomlink(name, <any>undefined, { urn })
            case "fortios:system/vdomnetflow:Vdomnetflow":
                return new Vdomnetflow(name, <any>undefined, { urn })
            case "fortios:system/vdomproperty:Vdomproperty":
                return new Vdomproperty(name, <any>undefined, { urn })
            case "fortios:system/vdomradiusserver:Vdomradiusserver":
                return new Vdomradiusserver(name, <any>undefined, { urn })
            case "fortios:system/vdomsflow:Vdomsflow":
                return new Vdomsflow(name, <any>undefined, { urn })
            case "fortios:system/virtualswitch:Virtualswitch":
                return new Virtualswitch(name, <any>undefined, { urn })
            case "fortios:system/virtualwanlink:Virtualwanlink":
                return new Virtualwanlink(name, <any>undefined, { urn })
            case "fortios:system/virtualwirepair:Virtualwirepair":
                return new Virtualwirepair(name, <any>undefined, { urn })
            case "fortios:system/vnetunnel:Vnetunnel":
                return new Vnetunnel(name, <any>undefined, { urn })
            case "fortios:system/vxlan:Vxlan":
                return new Vxlan(name, <any>undefined, { urn })
            case "fortios:system/wccp:Wccp":
                return new Wccp(name, <any>undefined, { urn })
            case "fortios:system/zone:Zone":
                return new Zone(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fortios", "system/accprofile", _module)
pulumi.runtime.registerResourceModule("fortios", "system/acme", _module)
pulumi.runtime.registerResourceModule("fortios", "system/admin", _module)
pulumi.runtime.registerResourceModule("fortios", "system/adminAdministrator", _module)
pulumi.runtime.registerResourceModule("fortios", "system/adminProfiles", _module)
pulumi.runtime.registerResourceModule("fortios", "system/affinityinterrupt", _module)
pulumi.runtime.registerResourceModule("fortios", "system/affinitypacketredistribution", _module)
pulumi.runtime.registerResourceModule("fortios", "system/alarm", _module)
pulumi.runtime.registerResourceModule("fortios", "system/alias", _module)
pulumi.runtime.registerResourceModule("fortios", "system/apiuser", _module)
pulumi.runtime.registerResourceModule("fortios", "system/apiuserSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "system/arptable", _module)
pulumi.runtime.registerResourceModule("fortios", "system/autoinstall", _module)
pulumi.runtime.registerResourceModule("fortios", "system/automationaction", _module)
pulumi.runtime.registerResourceModule("fortios", "system/automationdestination", _module)
pulumi.runtime.registerResourceModule("fortios", "system/automationstitch", _module)
pulumi.runtime.registerResourceModule("fortios", "system/automationtrigger", _module)
pulumi.runtime.registerResourceModule("fortios", "system/autoscript", _module)
pulumi.runtime.registerResourceModule("fortios", "system/centralmanagement", _module)
pulumi.runtime.registerResourceModule("fortios", "system/clustersync", _module)
pulumi.runtime.registerResourceModule("fortios", "system/console", _module)
pulumi.runtime.registerResourceModule("fortios", "system/csf", _module)
pulumi.runtime.registerResourceModule("fortios", "system/customlanguage", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ddns", _module)
pulumi.runtime.registerResourceModule("fortios", "system/dedicatedmgmt", _module)
pulumi.runtime.registerResourceModule("fortios", "system/deviceupgrade", _module)
pulumi.runtime.registerResourceModule("fortios", "system/dns", _module)
pulumi.runtime.registerResourceModule("fortios", "system/dns64", _module)
pulumi.runtime.registerResourceModule("fortios", "system/dnsdatabase", _module)
pulumi.runtime.registerResourceModule("fortios", "system/dnsserver", _module)
pulumi.runtime.registerResourceModule("fortios", "system/dscpbasedpriority", _module)
pulumi.runtime.registerResourceModule("fortios", "system/emailserver", _module)
pulumi.runtime.registerResourceModule("fortios", "system/evpn", _module)
pulumi.runtime.registerResourceModule("fortios", "system/externalresource", _module)
pulumi.runtime.registerResourceModule("fortios", "system/fabricvpn", _module)
pulumi.runtime.registerResourceModule("fortios", "system/federatedupgrade", _module)
pulumi.runtime.registerResourceModule("fortios", "system/fipscc", _module)
pulumi.runtime.registerResourceModule("fortios", "system/fm", _module)
pulumi.runtime.registerResourceModule("fortios", "system/fortiai", _module)
pulumi.runtime.registerResourceModule("fortios", "system/fortiguard", _module)
pulumi.runtime.registerResourceModule("fortios", "system/fortimanager", _module)
pulumi.runtime.registerResourceModule("fortios", "system/fortindr", _module)
pulumi.runtime.registerResourceModule("fortios", "system/fortisandbox", _module)
pulumi.runtime.registerResourceModule("fortios", "system/fssopolling", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ftmpush", _module)
pulumi.runtime.registerResourceModule("fortios", "system/geneve", _module)
pulumi.runtime.registerResourceModule("fortios", "system/geoipcountry", _module)
pulumi.runtime.registerResourceModule("fortios", "system/geoipoverride", _module)
pulumi.runtime.registerResourceModule("fortios", "system/global", _module)
pulumi.runtime.registerResourceModule("fortios", "system/gretunnel", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ha", _module)
pulumi.runtime.registerResourceModule("fortios", "system/hamonitor", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ike", _module)
pulumi.runtime.registerResourceModule("fortios", "system/interface", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ipam", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ipiptunnel", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ips", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ipsecaggregate", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ipsurlfilterdns", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ipsurlfilterdns6", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ipv6neighborcache", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ipv6tunnel", _module)
pulumi.runtime.registerResourceModule("fortios", "system/licenseForticare", _module)
pulumi.runtime.registerResourceModule("fortios", "system/licenseVdom", _module)
pulumi.runtime.registerResourceModule("fortios", "system/licenseVm", _module)
pulumi.runtime.registerResourceModule("fortios", "system/linkmonitor", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ltemodem", _module)
pulumi.runtime.registerResourceModule("fortios", "system/macaddresstable", _module)
pulumi.runtime.registerResourceModule("fortios", "system/managementtunnel", _module)
pulumi.runtime.registerResourceModule("fortios", "system/mobiletunnel", _module)
pulumi.runtime.registerResourceModule("fortios", "system/modem", _module)
pulumi.runtime.registerResourceModule("fortios", "system/nat64", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ndproxy", _module)
pulumi.runtime.registerResourceModule("fortios", "system/netflow", _module)
pulumi.runtime.registerResourceModule("fortios", "system/networkvisibility", _module)
pulumi.runtime.registerResourceModule("fortios", "system/npu", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ntp", _module)
pulumi.runtime.registerResourceModule("fortios", "system/objecttagging", _module)
pulumi.runtime.registerResourceModule("fortios", "system/passwordpolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "system/passwordpolicyguestadmin", _module)
pulumi.runtime.registerResourceModule("fortios", "system/pcpserver", _module)
pulumi.runtime.registerResourceModule("fortios", "system/physicalswitch", _module)
pulumi.runtime.registerResourceModule("fortios", "system/pppoeinterface", _module)
pulumi.runtime.registerResourceModule("fortios", "system/proberesponse", _module)
pulumi.runtime.registerResourceModule("fortios", "system/proxyarp", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ptp", _module)
pulumi.runtime.registerResourceModule("fortios", "system/replacemsggroup", _module)
pulumi.runtime.registerResourceModule("fortios", "system/replacemsgimage", _module)
pulumi.runtime.registerResourceModule("fortios", "system/resourcelimits", _module)
pulumi.runtime.registerResourceModule("fortios", "system/saml", _module)
pulumi.runtime.registerResourceModule("fortios", "system/sdnconnector", _module)
pulumi.runtime.registerResourceModule("fortios", "system/sdnproxy", _module)
pulumi.runtime.registerResourceModule("fortios", "system/sdwan", _module)
pulumi.runtime.registerResourceModule("fortios", "system/sessionhelper", _module)
pulumi.runtime.registerResourceModule("fortios", "system/sessionttl", _module)
pulumi.runtime.registerResourceModule("fortios", "system/settingDns", _module)
pulumi.runtime.registerResourceModule("fortios", "system/settingGlobal", _module)
pulumi.runtime.registerResourceModule("fortios", "system/settingNtp", _module)
pulumi.runtime.registerResourceModule("fortios", "system/settings", _module)
pulumi.runtime.registerResourceModule("fortios", "system/sflow", _module)
pulumi.runtime.registerResourceModule("fortios", "system/sittunnel", _module)
pulumi.runtime.registerResourceModule("fortios", "system/smsserver", _module)
pulumi.runtime.registerResourceModule("fortios", "system/speedtestschedule", _module)
pulumi.runtime.registerResourceModule("fortios", "system/speedtestserver", _module)
pulumi.runtime.registerResourceModule("fortios", "system/speedtestsetting", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ssoadmin", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ssoforticloudadmin", _module)
pulumi.runtime.registerResourceModule("fortios", "system/ssofortigatecloudadmin", _module)
pulumi.runtime.registerResourceModule("fortios", "system/standalonecluster", _module)
pulumi.runtime.registerResourceModule("fortios", "system/storage", _module)
pulumi.runtime.registerResourceModule("fortios", "system/stp", _module)
pulumi.runtime.registerResourceModule("fortios", "system/switchinterface", _module)
pulumi.runtime.registerResourceModule("fortios", "system/tosbasedpriority", _module)
pulumi.runtime.registerResourceModule("fortios", "system/vdom", _module)
pulumi.runtime.registerResourceModule("fortios", "system/vdomSetting", _module)
pulumi.runtime.registerResourceModule("fortios", "system/vdomdns", _module)
pulumi.runtime.registerResourceModule("fortios", "system/vdomexception", _module)
pulumi.runtime.registerResourceModule("fortios", "system/vdomlink", _module)
pulumi.runtime.registerResourceModule("fortios", "system/vdomnetflow", _module)
pulumi.runtime.registerResourceModule("fortios", "system/vdomproperty", _module)
pulumi.runtime.registerResourceModule("fortios", "system/vdomradiusserver", _module)
pulumi.runtime.registerResourceModule("fortios", "system/vdomsflow", _module)
pulumi.runtime.registerResourceModule("fortios", "system/virtualswitch", _module)
pulumi.runtime.registerResourceModule("fortios", "system/virtualwanlink", _module)
pulumi.runtime.registerResourceModule("fortios", "system/virtualwirepair", _module)
pulumi.runtime.registerResourceModule("fortios", "system/vnetunnel", _module)
pulumi.runtime.registerResourceModule("fortios", "system/vxlan", _module)
pulumi.runtime.registerResourceModule("fortios", "system/wccp", _module)
pulumi.runtime.registerResourceModule("fortios", "system/zone", _module)
