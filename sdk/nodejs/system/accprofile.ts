// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Configure access profiles for system administrators.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const test12 = new fortios.system.Accprofile("test12", {
 *     admintimeout: 10,
 *     admintimeoutOverride: "disable",
 *     authgrp: "read-write",
 *     ftviewgrp: "read-write",
 *     fwgrp: "custom",
 *     fwgrpPermission: {
 *         address: "read-write",
 *         policy: "read-write",
 *         schedule: "none",
 *         service: "none",
 *     },
 *     loggrp: "read-write",
 *     loggrpPermission: {
 *         config: "none",
 *         dataAccess: "none",
 *         reportAccess: "none",
 *         threatWeight: "none",
 *     },
 *     netgrp: "read-write",
 *     netgrpPermission: {
 *         cfg: "none",
 *         packetCapture: "none",
 *         routeCfg: "none",
 *     },
 *     scope: "vdom",
 *     secfabgrp: "read-write",
 *     sysgrp: "read-write",
 *     sysgrpPermission: {
 *         admin: "none",
 *         cfg: "none",
 *         mnt: "none",
 *         upd: "none",
 *     },
 *     utmgrp: "custom",
 *     utmgrpPermission: {
 *         antivirus: "read-write",
 *         applicationControl: "none",
 *         dataLossPrevention: "none",
 *         dnsfilter: "none",
 *         endpointControl: "none",
 *         icap: "none",
 *         ips: "read-write",
 *         voip: "none",
 *         waf: "none",
 *         webfilter: "none",
 *     },
 *     vpngrp: "read-write",
 *     wanoptgrp: "read-write",
 *     wifi: "read-write",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * System Accprofile can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:system/accprofile:Accprofile labelname {{name}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:system/accprofile:Accprofile labelname {{name}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Accprofile extends pulumi.CustomResource {
    /**
     * Get an existing Accprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccprofileState, opts?: pulumi.CustomResourceOptions): Accprofile {
        return new Accprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:system/accprofile:Accprofile';

    /**
     * Returns true if the given object is an instance of Accprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Accprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Accprofile.__pulumiType;
    }

    /**
     * Administrator timeout for this access profile (0 - 480 min, default = 10, 0 means never timeout).
     */
    public readonly admintimeout!: pulumi.Output<number>;
    /**
     * Enable/disable overriding the global administrator idle timeout. Valid values: `enable`, `disable`.
     */
    public readonly admintimeoutOverride!: pulumi.Output<string>;
    /**
     * Administrator access to Users and Devices. Valid values: `none`, `read`, `read-write`.
     */
    public readonly authgrp!: pulumi.Output<string>;
    /**
     * Enable/disable permission to run config commands. Valid values: `enable`, `disable`.
     */
    public readonly cliConfig!: pulumi.Output<string>;
    /**
     * Enable/disable permission to run diagnostic commands. Valid values: `enable`, `disable`.
     */
    public readonly cliDiagnose!: pulumi.Output<string>;
    /**
     * Enable/disable permission to run execute commands. Valid values: `enable`, `disable`.
     */
    public readonly cliExec!: pulumi.Output<string>;
    /**
     * Enable/disable permission to run get commands. Valid values: `enable`, `disable`.
     */
    public readonly cliGet!: pulumi.Output<string>;
    /**
     * Enable/disable permission to run show commands. Valid values: `enable`, `disable`.
     */
    public readonly cliShow!: pulumi.Output<string>;
    /**
     * Comment.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * FortiView. Valid values: `none`, `read`, `read-write`.
     */
    public readonly ftviewgrp!: pulumi.Output<string>;
    /**
     * Administrator access to the Firewall configuration. Valid values: `none`, `read`, `read-write`, `custom`.
     */
    public readonly fwgrp!: pulumi.Output<string>;
    /**
     * Custom firewall permission. The structure of `fwgrpPermission` block is documented below.
     */
    public readonly fwgrpPermission!: pulumi.Output<outputs.system.AccprofileFwgrpPermission>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Administrator access to Logging and Reporting including viewing log messages. Valid values: `none`, `read`, `read-write`, `custom`.
     */
    public readonly loggrp!: pulumi.Output<string>;
    /**
     * Custom Log & Report permission. The structure of `loggrpPermission` block is documented below.
     */
    public readonly loggrpPermission!: pulumi.Output<outputs.system.AccprofileLoggrpPermission>;
    /**
     * Profile name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
     */
    public readonly netgrp!: pulumi.Output<string>;
    /**
     * Custom network permission. The structure of `netgrpPermission` block is documented below.
     */
    public readonly netgrpPermission!: pulumi.Output<outputs.system.AccprofileNetgrpPermission>;
    /**
     * Scope of admin access: global or specific VDOM(s). Valid values: `vdom`, `global`.
     */
    public readonly scope!: pulumi.Output<string>;
    /**
     * Security Fabric. Valid values: `none`, `read`, `read-write`.
     */
    public readonly secfabgrp!: pulumi.Output<string>;
    /**
     * System Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
     */
    public readonly sysgrp!: pulumi.Output<string>;
    /**
     * Custom system permission. The structure of `sysgrpPermission` block is documented below.
     */
    public readonly sysgrpPermission!: pulumi.Output<outputs.system.AccprofileSysgrpPermission>;
    /**
     * Enable/disable permission to run system diagnostic commands. Valid values: `enable`, `disable`.
     */
    public readonly systemDiagnostics!: pulumi.Output<string>;
    /**
     * Enable/disable permission to execute SSH commands. Valid values: `enable`, `disable`.
     */
    public readonly systemExecuteSsh!: pulumi.Output<string>;
    /**
     * Enable/disable permission to execute TELNET commands. Valid values: `enable`, `disable`.
     */
    public readonly systemExecuteTelnet!: pulumi.Output<string>;
    /**
     * Administrator access to Security Profiles. Valid values: `none`, `read`, `read-write`, `custom`.
     */
    public readonly utmgrp!: pulumi.Output<string>;
    /**
     * Custom Security Profile permissions. The structure of `utmgrpPermission` block is documented below.
     */
    public readonly utmgrpPermission!: pulumi.Output<outputs.system.AccprofileUtmgrpPermission>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * Administrator access to IPsec, SSL, PPTP, and L2TP VPN. Valid values: `none`, `read`, `read-write`.
     */
    public readonly vpngrp!: pulumi.Output<string>;
    /**
     * Administrator access to WAN Opt & Cache. Valid values: `none`, `read`, `read-write`.
     */
    public readonly wanoptgrp!: pulumi.Output<string>;
    /**
     * Administrator access to the WiFi controller and Switch controller. Valid values: `none`, `read`, `read-write`.
     */
    public readonly wifi!: pulumi.Output<string>;

    /**
     * Create a Accprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AccprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccprofileArgs | AccprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccprofileState | undefined;
            resourceInputs["admintimeout"] = state ? state.admintimeout : undefined;
            resourceInputs["admintimeoutOverride"] = state ? state.admintimeoutOverride : undefined;
            resourceInputs["authgrp"] = state ? state.authgrp : undefined;
            resourceInputs["cliConfig"] = state ? state.cliConfig : undefined;
            resourceInputs["cliDiagnose"] = state ? state.cliDiagnose : undefined;
            resourceInputs["cliExec"] = state ? state.cliExec : undefined;
            resourceInputs["cliGet"] = state ? state.cliGet : undefined;
            resourceInputs["cliShow"] = state ? state.cliShow : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["ftviewgrp"] = state ? state.ftviewgrp : undefined;
            resourceInputs["fwgrp"] = state ? state.fwgrp : undefined;
            resourceInputs["fwgrpPermission"] = state ? state.fwgrpPermission : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["loggrp"] = state ? state.loggrp : undefined;
            resourceInputs["loggrpPermission"] = state ? state.loggrpPermission : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netgrp"] = state ? state.netgrp : undefined;
            resourceInputs["netgrpPermission"] = state ? state.netgrpPermission : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["secfabgrp"] = state ? state.secfabgrp : undefined;
            resourceInputs["sysgrp"] = state ? state.sysgrp : undefined;
            resourceInputs["sysgrpPermission"] = state ? state.sysgrpPermission : undefined;
            resourceInputs["systemDiagnostics"] = state ? state.systemDiagnostics : undefined;
            resourceInputs["systemExecuteSsh"] = state ? state.systemExecuteSsh : undefined;
            resourceInputs["systemExecuteTelnet"] = state ? state.systemExecuteTelnet : undefined;
            resourceInputs["utmgrp"] = state ? state.utmgrp : undefined;
            resourceInputs["utmgrpPermission"] = state ? state.utmgrpPermission : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["vpngrp"] = state ? state.vpngrp : undefined;
            resourceInputs["wanoptgrp"] = state ? state.wanoptgrp : undefined;
            resourceInputs["wifi"] = state ? state.wifi : undefined;
        } else {
            const args = argsOrState as AccprofileArgs | undefined;
            resourceInputs["admintimeout"] = args ? args.admintimeout : undefined;
            resourceInputs["admintimeoutOverride"] = args ? args.admintimeoutOverride : undefined;
            resourceInputs["authgrp"] = args ? args.authgrp : undefined;
            resourceInputs["cliConfig"] = args ? args.cliConfig : undefined;
            resourceInputs["cliDiagnose"] = args ? args.cliDiagnose : undefined;
            resourceInputs["cliExec"] = args ? args.cliExec : undefined;
            resourceInputs["cliGet"] = args ? args.cliGet : undefined;
            resourceInputs["cliShow"] = args ? args.cliShow : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["ftviewgrp"] = args ? args.ftviewgrp : undefined;
            resourceInputs["fwgrp"] = args ? args.fwgrp : undefined;
            resourceInputs["fwgrpPermission"] = args ? args.fwgrpPermission : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["loggrp"] = args ? args.loggrp : undefined;
            resourceInputs["loggrpPermission"] = args ? args.loggrpPermission : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netgrp"] = args ? args.netgrp : undefined;
            resourceInputs["netgrpPermission"] = args ? args.netgrpPermission : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["secfabgrp"] = args ? args.secfabgrp : undefined;
            resourceInputs["sysgrp"] = args ? args.sysgrp : undefined;
            resourceInputs["sysgrpPermission"] = args ? args.sysgrpPermission : undefined;
            resourceInputs["systemDiagnostics"] = args ? args.systemDiagnostics : undefined;
            resourceInputs["systemExecuteSsh"] = args ? args.systemExecuteSsh : undefined;
            resourceInputs["systemExecuteTelnet"] = args ? args.systemExecuteTelnet : undefined;
            resourceInputs["utmgrp"] = args ? args.utmgrp : undefined;
            resourceInputs["utmgrpPermission"] = args ? args.utmgrpPermission : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["vpngrp"] = args ? args.vpngrp : undefined;
            resourceInputs["wanoptgrp"] = args ? args.wanoptgrp : undefined;
            resourceInputs["wifi"] = args ? args.wifi : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Accprofile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Accprofile resources.
 */
export interface AccprofileState {
    /**
     * Administrator timeout for this access profile (0 - 480 min, default = 10, 0 means never timeout).
     */
    admintimeout?: pulumi.Input<number>;
    /**
     * Enable/disable overriding the global administrator idle timeout. Valid values: `enable`, `disable`.
     */
    admintimeoutOverride?: pulumi.Input<string>;
    /**
     * Administrator access to Users and Devices. Valid values: `none`, `read`, `read-write`.
     */
    authgrp?: pulumi.Input<string>;
    /**
     * Enable/disable permission to run config commands. Valid values: `enable`, `disable`.
     */
    cliConfig?: pulumi.Input<string>;
    /**
     * Enable/disable permission to run diagnostic commands. Valid values: `enable`, `disable`.
     */
    cliDiagnose?: pulumi.Input<string>;
    /**
     * Enable/disable permission to run execute commands. Valid values: `enable`, `disable`.
     */
    cliExec?: pulumi.Input<string>;
    /**
     * Enable/disable permission to run get commands. Valid values: `enable`, `disable`.
     */
    cliGet?: pulumi.Input<string>;
    /**
     * Enable/disable permission to run show commands. Valid values: `enable`, `disable`.
     */
    cliShow?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * FortiView. Valid values: `none`, `read`, `read-write`.
     */
    ftviewgrp?: pulumi.Input<string>;
    /**
     * Administrator access to the Firewall configuration. Valid values: `none`, `read`, `read-write`, `custom`.
     */
    fwgrp?: pulumi.Input<string>;
    /**
     * Custom firewall permission. The structure of `fwgrpPermission` block is documented below.
     */
    fwgrpPermission?: pulumi.Input<inputs.system.AccprofileFwgrpPermission>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Administrator access to Logging and Reporting including viewing log messages. Valid values: `none`, `read`, `read-write`, `custom`.
     */
    loggrp?: pulumi.Input<string>;
    /**
     * Custom Log & Report permission. The structure of `loggrpPermission` block is documented below.
     */
    loggrpPermission?: pulumi.Input<inputs.system.AccprofileLoggrpPermission>;
    /**
     * Profile name.
     */
    name?: pulumi.Input<string>;
    /**
     * Network Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
     */
    netgrp?: pulumi.Input<string>;
    /**
     * Custom network permission. The structure of `netgrpPermission` block is documented below.
     */
    netgrpPermission?: pulumi.Input<inputs.system.AccprofileNetgrpPermission>;
    /**
     * Scope of admin access: global or specific VDOM(s). Valid values: `vdom`, `global`.
     */
    scope?: pulumi.Input<string>;
    /**
     * Security Fabric. Valid values: `none`, `read`, `read-write`.
     */
    secfabgrp?: pulumi.Input<string>;
    /**
     * System Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
     */
    sysgrp?: pulumi.Input<string>;
    /**
     * Custom system permission. The structure of `sysgrpPermission` block is documented below.
     */
    sysgrpPermission?: pulumi.Input<inputs.system.AccprofileSysgrpPermission>;
    /**
     * Enable/disable permission to run system diagnostic commands. Valid values: `enable`, `disable`.
     */
    systemDiagnostics?: pulumi.Input<string>;
    /**
     * Enable/disable permission to execute SSH commands. Valid values: `enable`, `disable`.
     */
    systemExecuteSsh?: pulumi.Input<string>;
    /**
     * Enable/disable permission to execute TELNET commands. Valid values: `enable`, `disable`.
     */
    systemExecuteTelnet?: pulumi.Input<string>;
    /**
     * Administrator access to Security Profiles. Valid values: `none`, `read`, `read-write`, `custom`.
     */
    utmgrp?: pulumi.Input<string>;
    /**
     * Custom Security Profile permissions. The structure of `utmgrpPermission` block is documented below.
     */
    utmgrpPermission?: pulumi.Input<inputs.system.AccprofileUtmgrpPermission>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Administrator access to IPsec, SSL, PPTP, and L2TP VPN. Valid values: `none`, `read`, `read-write`.
     */
    vpngrp?: pulumi.Input<string>;
    /**
     * Administrator access to WAN Opt & Cache. Valid values: `none`, `read`, `read-write`.
     */
    wanoptgrp?: pulumi.Input<string>;
    /**
     * Administrator access to the WiFi controller and Switch controller. Valid values: `none`, `read`, `read-write`.
     */
    wifi?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Accprofile resource.
 */
export interface AccprofileArgs {
    /**
     * Administrator timeout for this access profile (0 - 480 min, default = 10, 0 means never timeout).
     */
    admintimeout?: pulumi.Input<number>;
    /**
     * Enable/disable overriding the global administrator idle timeout. Valid values: `enable`, `disable`.
     */
    admintimeoutOverride?: pulumi.Input<string>;
    /**
     * Administrator access to Users and Devices. Valid values: `none`, `read`, `read-write`.
     */
    authgrp?: pulumi.Input<string>;
    /**
     * Enable/disable permission to run config commands. Valid values: `enable`, `disable`.
     */
    cliConfig?: pulumi.Input<string>;
    /**
     * Enable/disable permission to run diagnostic commands. Valid values: `enable`, `disable`.
     */
    cliDiagnose?: pulumi.Input<string>;
    /**
     * Enable/disable permission to run execute commands. Valid values: `enable`, `disable`.
     */
    cliExec?: pulumi.Input<string>;
    /**
     * Enable/disable permission to run get commands. Valid values: `enable`, `disable`.
     */
    cliGet?: pulumi.Input<string>;
    /**
     * Enable/disable permission to run show commands. Valid values: `enable`, `disable`.
     */
    cliShow?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * FortiView. Valid values: `none`, `read`, `read-write`.
     */
    ftviewgrp?: pulumi.Input<string>;
    /**
     * Administrator access to the Firewall configuration. Valid values: `none`, `read`, `read-write`, `custom`.
     */
    fwgrp?: pulumi.Input<string>;
    /**
     * Custom firewall permission. The structure of `fwgrpPermission` block is documented below.
     */
    fwgrpPermission?: pulumi.Input<inputs.system.AccprofileFwgrpPermission>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Administrator access to Logging and Reporting including viewing log messages. Valid values: `none`, `read`, `read-write`, `custom`.
     */
    loggrp?: pulumi.Input<string>;
    /**
     * Custom Log & Report permission. The structure of `loggrpPermission` block is documented below.
     */
    loggrpPermission?: pulumi.Input<inputs.system.AccprofileLoggrpPermission>;
    /**
     * Profile name.
     */
    name?: pulumi.Input<string>;
    /**
     * Network Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
     */
    netgrp?: pulumi.Input<string>;
    /**
     * Custom network permission. The structure of `netgrpPermission` block is documented below.
     */
    netgrpPermission?: pulumi.Input<inputs.system.AccprofileNetgrpPermission>;
    /**
     * Scope of admin access: global or specific VDOM(s). Valid values: `vdom`, `global`.
     */
    scope?: pulumi.Input<string>;
    /**
     * Security Fabric. Valid values: `none`, `read`, `read-write`.
     */
    secfabgrp?: pulumi.Input<string>;
    /**
     * System Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
     */
    sysgrp?: pulumi.Input<string>;
    /**
     * Custom system permission. The structure of `sysgrpPermission` block is documented below.
     */
    sysgrpPermission?: pulumi.Input<inputs.system.AccprofileSysgrpPermission>;
    /**
     * Enable/disable permission to run system diagnostic commands. Valid values: `enable`, `disable`.
     */
    systemDiagnostics?: pulumi.Input<string>;
    /**
     * Enable/disable permission to execute SSH commands. Valid values: `enable`, `disable`.
     */
    systemExecuteSsh?: pulumi.Input<string>;
    /**
     * Enable/disable permission to execute TELNET commands. Valid values: `enable`, `disable`.
     */
    systemExecuteTelnet?: pulumi.Input<string>;
    /**
     * Administrator access to Security Profiles. Valid values: `none`, `read`, `read-write`, `custom`.
     */
    utmgrp?: pulumi.Input<string>;
    /**
     * Custom Security Profile permissions. The structure of `utmgrpPermission` block is documented below.
     */
    utmgrpPermission?: pulumi.Input<inputs.system.AccprofileUtmgrpPermission>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Administrator access to IPsec, SSL, PPTP, and L2TP VPN. Valid values: `none`, `read`, `read-write`.
     */
    vpngrp?: pulumi.Input<string>;
    /**
     * Administrator access to WAN Opt & Cache. Valid values: `none`, `read`, `read-write`.
     */
    wanoptgrp?: pulumi.Input<string>;
    /**
     * Administrator access to the WiFi controller and Switch controller. Valid values: `none`, `read`, `read-write`.
     */
    wifi?: pulumi.Input<string>;
}
