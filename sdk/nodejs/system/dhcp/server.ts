// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * Configure DHCP servers.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trname = new fortios.system.dhcp.Server("trname", {
 *     dnsService: "default",
 *     fosid: 1,
 *     "interface": "port2",
 *     ipRanges: [{
 *         endIp: "1.1.1.22",
 *         id: 1,
 *         startIp: "1.1.1.1",
 *     }],
 *     netmask: "255.255.255.0",
 *     ntpServer1: "192.168.52.22",
 *     status: "disable",
 *     timezone: "00",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * SystemDhcp Server can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:system/dhcp/server:Server labelname {{fosid}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:system/dhcp/server:Server labelname {{fosid}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:system/dhcp/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    /**
     * Enable/disable auto configuration. Valid values: `disable`, `enable`.
     */
    public readonly autoConfiguration!: pulumi.Output<string>;
    /**
     * Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
     */
    public readonly autoManagedStatus!: pulumi.Output<string>;
    /**
     * Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
     */
    public readonly conflictedIpTimeout!: pulumi.Output<number>;
    /**
     * DDNS authentication mode. Valid values: `disable`, `tsig`.
     */
    public readonly ddnsAuth!: pulumi.Output<string>;
    /**
     * DDNS update key (base 64 encoding).
     */
    public readonly ddnsKey!: pulumi.Output<string>;
    /**
     * DDNS update key name.
     */
    public readonly ddnsKeyname!: pulumi.Output<string>;
    /**
     * DDNS server IP.
     */
    public readonly ddnsServerIp!: pulumi.Output<string>;
    /**
     * TTL.
     */
    public readonly ddnsTtl!: pulumi.Output<number>;
    /**
     * Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
     */
    public readonly ddnsUpdate!: pulumi.Output<string>;
    /**
     * Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
     */
    public readonly ddnsUpdateOverride!: pulumi.Output<string>;
    /**
     * Zone of your domain name (ex. DDNS.com).
     */
    public readonly ddnsZone!: pulumi.Output<string>;
    /**
     * Default gateway IP address assigned by the DHCP server.
     */
    public readonly defaultGateway!: pulumi.Output<string>;
    /**
     * Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
     */
    public readonly dhcpSettingsFromFortiipam!: pulumi.Output<string>;
    /**
     * DNS server 1.
     */
    public readonly dnsServer1!: pulumi.Output<string>;
    /**
     * DNS server 2.
     */
    public readonly dnsServer2!: pulumi.Output<string>;
    /**
     * DNS server 3.
     */
    public readonly dnsServer3!: pulumi.Output<string>;
    /**
     * DNS server 4.
     */
    public readonly dnsServer4!: pulumi.Output<string>;
    /**
     * Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
     */
    public readonly dnsService!: pulumi.Output<string>;
    /**
     * Domain name suffix for the IP addresses that the DHCP server assigns to clients.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `excludeRange` block is documented below.
     */
    public readonly excludeRanges!: pulumi.Output<outputs.system.dhcp.ServerExcludeRange[] | undefined>;
    /**
     * Name of the boot file on the TFTP server.
     */
    public readonly filename!: pulumi.Output<string>;
    /**
     * Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
     */
    public readonly forticlientOnNetStatus!: pulumi.Output<string>;
    /**
     * ID.
     */
    public readonly fosid!: pulumi.Output<number>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * DHCP server can assign IP configurations to clients connected to this interface.
     */
    public readonly interface!: pulumi.Output<string>;
    /**
     * Method used to assign client IP. Valid values: `range`, `usrgrp`.
     */
    public readonly ipMode!: pulumi.Output<string>;
    /**
     * DHCP IP range configuration. The structure of `ipRange` block is documented below.
     */
    public readonly ipRanges!: pulumi.Output<outputs.system.dhcp.ServerIpRange[] | undefined>;
    /**
     * DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
     */
    public readonly ipsecLeaseHold!: pulumi.Output<number>;
    /**
     * Lease time in seconds, 0 means unlimited.
     */
    public readonly leaseTime!: pulumi.Output<number>;
    /**
     * MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
     */
    public readonly macAclDefaultAction!: pulumi.Output<string>;
    /**
     * Netmask assigned by the DHCP server.
     */
    public readonly netmask!: pulumi.Output<string>;
    /**
     * IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
     */
    public readonly nextServer!: pulumi.Output<string>;
    /**
     * NTP server 1.
     */
    public readonly ntpServer1!: pulumi.Output<string>;
    /**
     * NTP server 2.
     */
    public readonly ntpServer2!: pulumi.Output<string>;
    /**
     * NTP server 3.
     */
    public readonly ntpServer3!: pulumi.Output<string>;
    /**
     * Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
     */
    public readonly ntpService!: pulumi.Output<string>;
    /**
     * DHCP options. The structure of `options` block is documented below.
     */
    public readonly options!: pulumi.Output<outputs.system.dhcp.ServerOption[] | undefined>;
    /**
     * Relay agent IP.
     */
    public readonly relayAgent!: pulumi.Output<string>;
    /**
     * Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reservedAddress` block is documented below.
     */
    public readonly reservedAddresses!: pulumi.Output<outputs.system.dhcp.ServerReservedAddress[] | undefined>;
    /**
     * DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
     */
    public readonly serverType!: pulumi.Output<string>;
    /**
     * Enable/disable shared subnet. Valid values: `disable`, `enable`.
     */
    public readonly sharedSubnet!: pulumi.Output<string>;
    /**
     * Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftpServer` block is documented below.
     */
    public readonly tftpServers!: pulumi.Output<outputs.system.dhcp.ServerTftpServer[] | undefined>;
    /**
     * Select the time zone to be assigned to DHCP clients.
     */
    public readonly timezone!: pulumi.Output<string>;
    /**
     * Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
     */
    public readonly timezoneOption!: pulumi.Output<string>;
    /**
     * Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
     */
    public readonly vciMatch!: pulumi.Output<string>;
    /**
     * One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
     */
    public readonly vciStrings!: pulumi.Output<outputs.system.dhcp.ServerVciString[] | undefined>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
     */
    public readonly wifiAc1!: pulumi.Output<string>;
    /**
     * WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
     */
    public readonly wifiAc2!: pulumi.Output<string>;
    /**
     * WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
     */
    public readonly wifiAc3!: pulumi.Output<string>;
    /**
     * Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
     */
    public readonly wifiAcService!: pulumi.Output<string>;
    /**
     * WINS server 1.
     */
    public readonly winsServer1!: pulumi.Output<string>;
    /**
     * WINS server 2.
     */
    public readonly winsServer2!: pulumi.Output<string>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["autoConfiguration"] = state ? state.autoConfiguration : undefined;
            resourceInputs["autoManagedStatus"] = state ? state.autoManagedStatus : undefined;
            resourceInputs["conflictedIpTimeout"] = state ? state.conflictedIpTimeout : undefined;
            resourceInputs["ddnsAuth"] = state ? state.ddnsAuth : undefined;
            resourceInputs["ddnsKey"] = state ? state.ddnsKey : undefined;
            resourceInputs["ddnsKeyname"] = state ? state.ddnsKeyname : undefined;
            resourceInputs["ddnsServerIp"] = state ? state.ddnsServerIp : undefined;
            resourceInputs["ddnsTtl"] = state ? state.ddnsTtl : undefined;
            resourceInputs["ddnsUpdate"] = state ? state.ddnsUpdate : undefined;
            resourceInputs["ddnsUpdateOverride"] = state ? state.ddnsUpdateOverride : undefined;
            resourceInputs["ddnsZone"] = state ? state.ddnsZone : undefined;
            resourceInputs["defaultGateway"] = state ? state.defaultGateway : undefined;
            resourceInputs["dhcpSettingsFromFortiipam"] = state ? state.dhcpSettingsFromFortiipam : undefined;
            resourceInputs["dnsServer1"] = state ? state.dnsServer1 : undefined;
            resourceInputs["dnsServer2"] = state ? state.dnsServer2 : undefined;
            resourceInputs["dnsServer3"] = state ? state.dnsServer3 : undefined;
            resourceInputs["dnsServer4"] = state ? state.dnsServer4 : undefined;
            resourceInputs["dnsService"] = state ? state.dnsService : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["excludeRanges"] = state ? state.excludeRanges : undefined;
            resourceInputs["filename"] = state ? state.filename : undefined;
            resourceInputs["forticlientOnNetStatus"] = state ? state.forticlientOnNetStatus : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["ipMode"] = state ? state.ipMode : undefined;
            resourceInputs["ipRanges"] = state ? state.ipRanges : undefined;
            resourceInputs["ipsecLeaseHold"] = state ? state.ipsecLeaseHold : undefined;
            resourceInputs["leaseTime"] = state ? state.leaseTime : undefined;
            resourceInputs["macAclDefaultAction"] = state ? state.macAclDefaultAction : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["nextServer"] = state ? state.nextServer : undefined;
            resourceInputs["ntpServer1"] = state ? state.ntpServer1 : undefined;
            resourceInputs["ntpServer2"] = state ? state.ntpServer2 : undefined;
            resourceInputs["ntpServer3"] = state ? state.ntpServer3 : undefined;
            resourceInputs["ntpService"] = state ? state.ntpService : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["relayAgent"] = state ? state.relayAgent : undefined;
            resourceInputs["reservedAddresses"] = state ? state.reservedAddresses : undefined;
            resourceInputs["serverType"] = state ? state.serverType : undefined;
            resourceInputs["sharedSubnet"] = state ? state.sharedSubnet : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tftpServers"] = state ? state.tftpServers : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["timezoneOption"] = state ? state.timezoneOption : undefined;
            resourceInputs["vciMatch"] = state ? state.vciMatch : undefined;
            resourceInputs["vciStrings"] = state ? state.vciStrings : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["wifiAc1"] = state ? state.wifiAc1 : undefined;
            resourceInputs["wifiAc2"] = state ? state.wifiAc2 : undefined;
            resourceInputs["wifiAc3"] = state ? state.wifiAc3 : undefined;
            resourceInputs["wifiAcService"] = state ? state.wifiAcService : undefined;
            resourceInputs["winsServer1"] = state ? state.winsServer1 : undefined;
            resourceInputs["winsServer2"] = state ? state.winsServer2 : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            if ((!args || args.netmask === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netmask'");
            }
            resourceInputs["autoConfiguration"] = args ? args.autoConfiguration : undefined;
            resourceInputs["autoManagedStatus"] = args ? args.autoManagedStatus : undefined;
            resourceInputs["conflictedIpTimeout"] = args ? args.conflictedIpTimeout : undefined;
            resourceInputs["ddnsAuth"] = args ? args.ddnsAuth : undefined;
            resourceInputs["ddnsKey"] = args?.ddnsKey ? pulumi.secret(args.ddnsKey) : undefined;
            resourceInputs["ddnsKeyname"] = args ? args.ddnsKeyname : undefined;
            resourceInputs["ddnsServerIp"] = args ? args.ddnsServerIp : undefined;
            resourceInputs["ddnsTtl"] = args ? args.ddnsTtl : undefined;
            resourceInputs["ddnsUpdate"] = args ? args.ddnsUpdate : undefined;
            resourceInputs["ddnsUpdateOverride"] = args ? args.ddnsUpdateOverride : undefined;
            resourceInputs["ddnsZone"] = args ? args.ddnsZone : undefined;
            resourceInputs["defaultGateway"] = args ? args.defaultGateway : undefined;
            resourceInputs["dhcpSettingsFromFortiipam"] = args ? args.dhcpSettingsFromFortiipam : undefined;
            resourceInputs["dnsServer1"] = args ? args.dnsServer1 : undefined;
            resourceInputs["dnsServer2"] = args ? args.dnsServer2 : undefined;
            resourceInputs["dnsServer3"] = args ? args.dnsServer3 : undefined;
            resourceInputs["dnsServer4"] = args ? args.dnsServer4 : undefined;
            resourceInputs["dnsService"] = args ? args.dnsService : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["excludeRanges"] = args ? args.excludeRanges : undefined;
            resourceInputs["filename"] = args ? args.filename : undefined;
            resourceInputs["forticlientOnNetStatus"] = args ? args.forticlientOnNetStatus : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["ipMode"] = args ? args.ipMode : undefined;
            resourceInputs["ipRanges"] = args ? args.ipRanges : undefined;
            resourceInputs["ipsecLeaseHold"] = args ? args.ipsecLeaseHold : undefined;
            resourceInputs["leaseTime"] = args ? args.leaseTime : undefined;
            resourceInputs["macAclDefaultAction"] = args ? args.macAclDefaultAction : undefined;
            resourceInputs["netmask"] = args ? args.netmask : undefined;
            resourceInputs["nextServer"] = args ? args.nextServer : undefined;
            resourceInputs["ntpServer1"] = args ? args.ntpServer1 : undefined;
            resourceInputs["ntpServer2"] = args ? args.ntpServer2 : undefined;
            resourceInputs["ntpServer3"] = args ? args.ntpServer3 : undefined;
            resourceInputs["ntpService"] = args ? args.ntpService : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["relayAgent"] = args ? args.relayAgent : undefined;
            resourceInputs["reservedAddresses"] = args ? args.reservedAddresses : undefined;
            resourceInputs["serverType"] = args ? args.serverType : undefined;
            resourceInputs["sharedSubnet"] = args ? args.sharedSubnet : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tftpServers"] = args ? args.tftpServers : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["timezoneOption"] = args ? args.timezoneOption : undefined;
            resourceInputs["vciMatch"] = args ? args.vciMatch : undefined;
            resourceInputs["vciStrings"] = args ? args.vciStrings : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["wifiAc1"] = args ? args.wifiAc1 : undefined;
            resourceInputs["wifiAc2"] = args ? args.wifiAc2 : undefined;
            resourceInputs["wifiAc3"] = args ? args.wifiAc3 : undefined;
            resourceInputs["wifiAcService"] = args ? args.wifiAcService : undefined;
            resourceInputs["winsServer1"] = args ? args.winsServer1 : undefined;
            resourceInputs["winsServer2"] = args ? args.winsServer2 : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["ddnsKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Server.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    /**
     * Enable/disable auto configuration. Valid values: `disable`, `enable`.
     */
    autoConfiguration?: pulumi.Input<string>;
    /**
     * Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
     */
    autoManagedStatus?: pulumi.Input<string>;
    /**
     * Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
     */
    conflictedIpTimeout?: pulumi.Input<number>;
    /**
     * DDNS authentication mode. Valid values: `disable`, `tsig`.
     */
    ddnsAuth?: pulumi.Input<string>;
    /**
     * DDNS update key (base 64 encoding).
     */
    ddnsKey?: pulumi.Input<string>;
    /**
     * DDNS update key name.
     */
    ddnsKeyname?: pulumi.Input<string>;
    /**
     * DDNS server IP.
     */
    ddnsServerIp?: pulumi.Input<string>;
    /**
     * TTL.
     */
    ddnsTtl?: pulumi.Input<number>;
    /**
     * Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
     */
    ddnsUpdate?: pulumi.Input<string>;
    /**
     * Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
     */
    ddnsUpdateOverride?: pulumi.Input<string>;
    /**
     * Zone of your domain name (ex. DDNS.com).
     */
    ddnsZone?: pulumi.Input<string>;
    /**
     * Default gateway IP address assigned by the DHCP server.
     */
    defaultGateway?: pulumi.Input<string>;
    /**
     * Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
     */
    dhcpSettingsFromFortiipam?: pulumi.Input<string>;
    /**
     * DNS server 1.
     */
    dnsServer1?: pulumi.Input<string>;
    /**
     * DNS server 2.
     */
    dnsServer2?: pulumi.Input<string>;
    /**
     * DNS server 3.
     */
    dnsServer3?: pulumi.Input<string>;
    /**
     * DNS server 4.
     */
    dnsServer4?: pulumi.Input<string>;
    /**
     * Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
     */
    dnsService?: pulumi.Input<string>;
    /**
     * Domain name suffix for the IP addresses that the DHCP server assigns to clients.
     */
    domain?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `excludeRange` block is documented below.
     */
    excludeRanges?: pulumi.Input<pulumi.Input<inputs.system.dhcp.ServerExcludeRange>[]>;
    /**
     * Name of the boot file on the TFTP server.
     */
    filename?: pulumi.Input<string>;
    /**
     * Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
     */
    forticlientOnNetStatus?: pulumi.Input<string>;
    /**
     * ID.
     */
    fosid?: pulumi.Input<number>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * DHCP server can assign IP configurations to clients connected to this interface.
     */
    interface?: pulumi.Input<string>;
    /**
     * Method used to assign client IP. Valid values: `range`, `usrgrp`.
     */
    ipMode?: pulumi.Input<string>;
    /**
     * DHCP IP range configuration. The structure of `ipRange` block is documented below.
     */
    ipRanges?: pulumi.Input<pulumi.Input<inputs.system.dhcp.ServerIpRange>[]>;
    /**
     * DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
     */
    ipsecLeaseHold?: pulumi.Input<number>;
    /**
     * Lease time in seconds, 0 means unlimited.
     */
    leaseTime?: pulumi.Input<number>;
    /**
     * MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
     */
    macAclDefaultAction?: pulumi.Input<string>;
    /**
     * Netmask assigned by the DHCP server.
     */
    netmask?: pulumi.Input<string>;
    /**
     * IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
     */
    nextServer?: pulumi.Input<string>;
    /**
     * NTP server 1.
     */
    ntpServer1?: pulumi.Input<string>;
    /**
     * NTP server 2.
     */
    ntpServer2?: pulumi.Input<string>;
    /**
     * NTP server 3.
     */
    ntpServer3?: pulumi.Input<string>;
    /**
     * Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
     */
    ntpService?: pulumi.Input<string>;
    /**
     * DHCP options. The structure of `options` block is documented below.
     */
    options?: pulumi.Input<pulumi.Input<inputs.system.dhcp.ServerOption>[]>;
    /**
     * Relay agent IP.
     */
    relayAgent?: pulumi.Input<string>;
    /**
     * Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reservedAddress` block is documented below.
     */
    reservedAddresses?: pulumi.Input<pulumi.Input<inputs.system.dhcp.ServerReservedAddress>[]>;
    /**
     * DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
     */
    serverType?: pulumi.Input<string>;
    /**
     * Enable/disable shared subnet. Valid values: `disable`, `enable`.
     */
    sharedSubnet?: pulumi.Input<string>;
    /**
     * Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
     */
    status?: pulumi.Input<string>;
    /**
     * One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftpServer` block is documented below.
     */
    tftpServers?: pulumi.Input<pulumi.Input<inputs.system.dhcp.ServerTftpServer>[]>;
    /**
     * Select the time zone to be assigned to DHCP clients.
     */
    timezone?: pulumi.Input<string>;
    /**
     * Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
     */
    timezoneOption?: pulumi.Input<string>;
    /**
     * Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
     */
    vciMatch?: pulumi.Input<string>;
    /**
     * One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
     */
    vciStrings?: pulumi.Input<pulumi.Input<inputs.system.dhcp.ServerVciString>[]>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
     */
    wifiAc1?: pulumi.Input<string>;
    /**
     * WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
     */
    wifiAc2?: pulumi.Input<string>;
    /**
     * WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
     */
    wifiAc3?: pulumi.Input<string>;
    /**
     * Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
     */
    wifiAcService?: pulumi.Input<string>;
    /**
     * WINS server 1.
     */
    winsServer1?: pulumi.Input<string>;
    /**
     * WINS server 2.
     */
    winsServer2?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    /**
     * Enable/disable auto configuration. Valid values: `disable`, `enable`.
     */
    autoConfiguration?: pulumi.Input<string>;
    /**
     * Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
     */
    autoManagedStatus?: pulumi.Input<string>;
    /**
     * Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
     */
    conflictedIpTimeout?: pulumi.Input<number>;
    /**
     * DDNS authentication mode. Valid values: `disable`, `tsig`.
     */
    ddnsAuth?: pulumi.Input<string>;
    /**
     * DDNS update key (base 64 encoding).
     */
    ddnsKey?: pulumi.Input<string>;
    /**
     * DDNS update key name.
     */
    ddnsKeyname?: pulumi.Input<string>;
    /**
     * DDNS server IP.
     */
    ddnsServerIp?: pulumi.Input<string>;
    /**
     * TTL.
     */
    ddnsTtl?: pulumi.Input<number>;
    /**
     * Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
     */
    ddnsUpdate?: pulumi.Input<string>;
    /**
     * Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
     */
    ddnsUpdateOverride?: pulumi.Input<string>;
    /**
     * Zone of your domain name (ex. DDNS.com).
     */
    ddnsZone?: pulumi.Input<string>;
    /**
     * Default gateway IP address assigned by the DHCP server.
     */
    defaultGateway?: pulumi.Input<string>;
    /**
     * Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
     */
    dhcpSettingsFromFortiipam?: pulumi.Input<string>;
    /**
     * DNS server 1.
     */
    dnsServer1?: pulumi.Input<string>;
    /**
     * DNS server 2.
     */
    dnsServer2?: pulumi.Input<string>;
    /**
     * DNS server 3.
     */
    dnsServer3?: pulumi.Input<string>;
    /**
     * DNS server 4.
     */
    dnsServer4?: pulumi.Input<string>;
    /**
     * Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
     */
    dnsService?: pulumi.Input<string>;
    /**
     * Domain name suffix for the IP addresses that the DHCP server assigns to clients.
     */
    domain?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `excludeRange` block is documented below.
     */
    excludeRanges?: pulumi.Input<pulumi.Input<inputs.system.dhcp.ServerExcludeRange>[]>;
    /**
     * Name of the boot file on the TFTP server.
     */
    filename?: pulumi.Input<string>;
    /**
     * Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
     */
    forticlientOnNetStatus?: pulumi.Input<string>;
    /**
     * ID.
     */
    fosid?: pulumi.Input<number>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * DHCP server can assign IP configurations to clients connected to this interface.
     */
    interface: pulumi.Input<string>;
    /**
     * Method used to assign client IP. Valid values: `range`, `usrgrp`.
     */
    ipMode?: pulumi.Input<string>;
    /**
     * DHCP IP range configuration. The structure of `ipRange` block is documented below.
     */
    ipRanges?: pulumi.Input<pulumi.Input<inputs.system.dhcp.ServerIpRange>[]>;
    /**
     * DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
     */
    ipsecLeaseHold?: pulumi.Input<number>;
    /**
     * Lease time in seconds, 0 means unlimited.
     */
    leaseTime?: pulumi.Input<number>;
    /**
     * MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
     */
    macAclDefaultAction?: pulumi.Input<string>;
    /**
     * Netmask assigned by the DHCP server.
     */
    netmask: pulumi.Input<string>;
    /**
     * IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
     */
    nextServer?: pulumi.Input<string>;
    /**
     * NTP server 1.
     */
    ntpServer1?: pulumi.Input<string>;
    /**
     * NTP server 2.
     */
    ntpServer2?: pulumi.Input<string>;
    /**
     * NTP server 3.
     */
    ntpServer3?: pulumi.Input<string>;
    /**
     * Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
     */
    ntpService?: pulumi.Input<string>;
    /**
     * DHCP options. The structure of `options` block is documented below.
     */
    options?: pulumi.Input<pulumi.Input<inputs.system.dhcp.ServerOption>[]>;
    /**
     * Relay agent IP.
     */
    relayAgent?: pulumi.Input<string>;
    /**
     * Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reservedAddress` block is documented below.
     */
    reservedAddresses?: pulumi.Input<pulumi.Input<inputs.system.dhcp.ServerReservedAddress>[]>;
    /**
     * DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
     */
    serverType?: pulumi.Input<string>;
    /**
     * Enable/disable shared subnet. Valid values: `disable`, `enable`.
     */
    sharedSubnet?: pulumi.Input<string>;
    /**
     * Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
     */
    status?: pulumi.Input<string>;
    /**
     * One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftpServer` block is documented below.
     */
    tftpServers?: pulumi.Input<pulumi.Input<inputs.system.dhcp.ServerTftpServer>[]>;
    /**
     * Select the time zone to be assigned to DHCP clients.
     */
    timezone?: pulumi.Input<string>;
    /**
     * Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
     */
    timezoneOption?: pulumi.Input<string>;
    /**
     * Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
     */
    vciMatch?: pulumi.Input<string>;
    /**
     * One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
     */
    vciStrings?: pulumi.Input<pulumi.Input<inputs.system.dhcp.ServerVciString>[]>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
     */
    wifiAc1?: pulumi.Input<string>;
    /**
     * WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
     */
    wifiAc2?: pulumi.Input<string>;
    /**
     * WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
     */
    wifiAc3?: pulumi.Input<string>;
    /**
     * Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
     */
    wifiAcService?: pulumi.Input<string>;
    /**
     * WINS server 1.
     */
    winsServer1?: pulumi.Input<string>;
    /**
     * WINS server 2.
     */
    winsServer2?: pulumi.Input<string>;
}
