// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Configure interfaces.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trname = new fortios.system.Interface("trname", {
 *     algorithm: "L4",
 *     defaultgw: "enable",
 *     description: "Created by Terraform Provider for FortiOS",
 *     distance: 5,
 *     ip: "0.0.0.0 0.0.0.0",
 *     ipv6: {
 *         ndMode: "basic",
 *     },
 *     mode: "dhcp",
 *     mtu: 1500,
 *     mtuOverride: "disable",
 *     snmpIndex: 3,
 *     type: "physical",
 *     vdom: "root",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * System Interface can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:system/interface:Interface labelname {{name}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:system/interface:Interface labelname {{name}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Interface extends pulumi.CustomResource {
    /**
     * Get an existing Interface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceState, opts?: pulumi.CustomResourceOptions): Interface {
        return new Interface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:system/interface:Interface';

    /**
     * Returns true if the given object is an instance of Interface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Interface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Interface.__pulumiType;
    }

    /**
     * PPPoE server name.
     */
    public readonly acName!: pulumi.Output<string>;
    /**
     * Aggregate interface.
     */
    public readonly aggregate!: pulumi.Output<string>;
    /**
     * Type of aggregation. Valid values: `physical`, `vxlan`.
     */
    public readonly aggregateType!: pulumi.Output<string>;
    /**
     * Frame distribution algorithm.
     */
    public readonly algorithm!: pulumi.Output<string>;
    /**
     * Alias will be displayed with the interface name to make it easier to distinguish.
     */
    public readonly alias!: pulumi.Output<string>;
    /**
     * Permitted types of management access to this interface.
     */
    public readonly allowaccess!: pulumi.Output<string>;
    /**
     * Enable/disable automatic registration of unknown FortiAP devices. Valid values: `enable`, `disable`.
     */
    public readonly apDiscover!: pulumi.Output<string>;
    /**
     * Enable/disable ARP forwarding. Valid values: `enable`, `disable`.
     */
    public readonly arpforward!: pulumi.Output<string>;
    /**
     * HTTPS server certificate.
     */
    public readonly authCert!: pulumi.Output<string>;
    /**
     * Address of captive portal.
     */
    public readonly authPortalAddr!: pulumi.Output<string>;
    /**
     * PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
     */
    public readonly authType!: pulumi.Output<string>;
    /**
     * Enable/disable automatic authorization of dedicated Fortinet extension device on this interface. Valid values: `enable`, `disable`.
     */
    public readonly autoAuthExtensionDevice!: pulumi.Output<string>;
    /**
     * Indicates whether the interface is automatically created by FortiGate, for example, created during the VPN creation process. If it is, set it to "auto", else keep it empty.
     */
    public readonly autogenerated!: pulumi.Output<string>;
    /**
     * Bandwidth measure time
     */
    public readonly bandwidthMeasureTime!: pulumi.Output<number>;
    /**
     * Bidirectional Forwarding Detection (BFD) settings. Valid values: `global`, `enable`, `disable`.
     */
    public readonly bfd!: pulumi.Output<string>;
    /**
     * BFD desired minimal transmit interval.
     */
    public readonly bfdDesiredMinTx!: pulumi.Output<number>;
    /**
     * BFD detection multiplier.
     */
    public readonly bfdDetectMult!: pulumi.Output<number>;
    /**
     * BFD required minimal receive interval.
     */
    public readonly bfdRequiredMinRx!: pulumi.Output<number>;
    /**
     * Enable/disable broadcasting FortiClient discovery messages. Valid values: `enable`, `disable`.
     */
    public readonly broadcastForticlientDiscovery!: pulumi.Output<string>;
    /**
     * Enable/disable broadcast forwarding. Valid values: `enable`, `disable`.
     */
    public readonly broadcastForward!: pulumi.Output<string>;
    /**
     * Enable/disable captive portal.
     */
    public readonly captivePortal!: pulumi.Output<number>;
    /**
     * CLI connection status.
     */
    public readonly cliConnStatus!: pulumi.Output<number>;
    /**
     * DHCP client options. The structure of `clientOptions` block is documented below.
     */
    public readonly clientOptions!: pulumi.Output<outputs.system.InterfaceClientOption[] | undefined>;
    /**
     * Color of icon on the GUI.
     */
    public readonly color!: pulumi.Output<number>;
    /**
     * Configure interface for single purpose. Valid values: `none`, `management`.
     */
    public readonly dedicatedTo!: pulumi.Output<string>;
    /**
     * default purdue level of device detected on this interface. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
     */
    public readonly defaultPurdueLevel!: pulumi.Output<string>;
    /**
     * Enable to get the gateway IP from the DHCP or PPPoE server. Valid values: `enable`, `disable`.
     */
    public readonly defaultgw!: pulumi.Output<string>;
    /**
     * Description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * MTU of detected peer (0 - 4294967295).
     */
    public readonly detectedPeerMtu!: pulumi.Output<number>;
    /**
     * Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
     */
    public readonly detectprotocol!: pulumi.Output<string>;
    /**
     * Gateway's ping server for this IP.
     */
    public readonly detectserver!: pulumi.Output<string>;
    /**
     * Device access list.
     */
    public readonly deviceAccessList!: pulumi.Output<string>;
    /**
     * Enable/disable passively gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
     */
    public readonly deviceIdentification!: pulumi.Output<string>;
    /**
     * Enable/disable active gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
     */
    public readonly deviceIdentificationActiveScan!: pulumi.Output<string>;
    /**
     * Enable/disable inclusion of devices detected on this interface in network vulnerability scans. Valid values: `disable`, `enable`.
     */
    public readonly deviceNetscan!: pulumi.Output<string>;
    /**
     * Enable/disable passive gathering of user identity information about users on this interface. Valid values: `enable`, `disable`.
     */
    public readonly deviceUserIdentification!: pulumi.Output<string>;
    /**
     * Device Index.
     */
    public readonly devindex!: pulumi.Output<number>;
    /**
     * Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable). Valid values: `disable`, `enable`.
     */
    public readonly dhcpBroadcastFlag!: pulumi.Output<string>;
    /**
     * Enable/disable addition of classless static routes retrieved from DHCP server. Valid values: `enable`, `disable`.
     */
    public readonly dhcpClasslessRouteAddition!: pulumi.Output<string>;
    /**
     * DHCP client identifier.
     */
    public readonly dhcpClientIdentifier!: pulumi.Output<string>;
    /**
     * Enable/disable DHCP relay agent option. Valid values: `enable`, `disable`.
     */
    public readonly dhcpRelayAgentOption!: pulumi.Output<string>;
    /**
     * DHCP relay circuit ID.
     */
    public readonly dhcpRelayCircuitId!: pulumi.Output<string>;
    /**
     * Specify outgoing interface to reach server.
     */
    public readonly dhcpRelayInterface!: pulumi.Output<string>;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    public readonly dhcpRelayInterfaceSelectMethod!: pulumi.Output<string>;
    /**
     * DHCP relay IP address.
     */
    public readonly dhcpRelayIp!: pulumi.Output<string>;
    /**
     * DHCP relay link selection.
     */
    public readonly dhcpRelayLinkSelection!: pulumi.Output<string>;
    /**
     * Enable/disable sending DHCP request to all servers. Valid values: `disable`, `enable`.
     */
    public readonly dhcpRelayRequestAllServer!: pulumi.Output<string>;
    /**
     * Enable/disable allowing this interface to act as a DHCP relay. Valid values: `disable`, `enable`.
     */
    public readonly dhcpRelayService!: pulumi.Output<string>;
    /**
     * IP address used by the DHCP relay as its source IP.
     */
    public readonly dhcpRelaySourceIp!: pulumi.Output<string>;
    /**
     * DHCP relay type (regular or IPsec). Valid values: `regular`, `ipsec`.
     */
    public readonly dhcpRelayType!: pulumi.Output<string>;
    /**
     * DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
     */
    public readonly dhcpRenewTime!: pulumi.Output<number>;
    /**
     * Enable/disable DHCP smart relay. Valid values: `disable`, `enable`.
     */
    public readonly dhcpSmartRelay!: pulumi.Output<string>;
    /**
     * Configure DHCP server access list. The structure of `dhcpSnoopingServerList` block is documented below.
     */
    public readonly dhcpSnoopingServerLists!: pulumi.Output<outputs.system.InterfaceDhcpSnoopingServerList[] | undefined>;
    /**
     * Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
     */
    public readonly discRetryTimeout!: pulumi.Output<number>;
    /**
     * Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
     */
    public readonly disconnectThreshold!: pulumi.Output<number>;
    /**
     * Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
     */
    public readonly distance!: pulumi.Output<number>;
    /**
     * Enable/disable use DNS acquired by DHCP or PPPoE. Valid values: `enable`, `disable`.
     */
    public readonly dnsServerOverride!: pulumi.Output<string>;
    /**
     * DNS transport protocols. Valid values: `cleartext`, `dot`, `doh`.
     */
    public readonly dnsServerProtocol!: pulumi.Output<string>;
    /**
     * Enable/disable drop fragment packets. Valid values: `enable`, `disable`.
     */
    public readonly dropFragment!: pulumi.Output<string>;
    /**
     * Enable/disable drop overlapped fragment packets. Valid values: `enable`, `disable`.
     */
    public readonly dropOverlappedFragment!: pulumi.Output<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * EAP CA certificate name.
     */
    public readonly eapCaCert!: pulumi.Output<string>;
    /**
     * EAP identity.
     */
    public readonly eapIdentity!: pulumi.Output<string>;
    /**
     * EAP method. Valid values: `tls`, `peap`.
     */
    public readonly eapMethod!: pulumi.Output<string>;
    /**
     * EAP password.
     */
    public readonly eapPassword!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable EAP-Supplicant. Valid values: `enable`, `disable`.
     */
    public readonly eapSupplicant!: pulumi.Output<string>;
    /**
     * EAP user certificate name.
     */
    public readonly eapUserCert!: pulumi.Output<string>;
    /**
     * Outgoing traffic shaping profile.
     */
    public readonly egressShapingProfile!: pulumi.Output<string>;
    /**
     * Enable/disable endpoint compliance enforcement. Valid values: `enable`, `disable`.
     */
    public readonly endpointCompliance!: pulumi.Output<string>;
    /**
     * Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
     */
    public readonly estimatedDownstreamBandwidth!: pulumi.Output<number>;
    /**
     * Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
     */
    public readonly estimatedUpstreamBandwidth!: pulumi.Output<number>;
    /**
     * Enable/disable the explicit FTP proxy on this interface. Valid values: `enable`, `disable`.
     */
    public readonly explicitFtpProxy!: pulumi.Output<string>;
    /**
     * Enable/disable the explicit web proxy on this interface. Valid values: `enable`, `disable`.
     */
    public readonly explicitWebProxy!: pulumi.Output<string>;
    /**
     * Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet). Valid values: `enable`, `disable`.
     */
    public readonly external!: pulumi.Output<string>;
    /**
     * Action on extender when interface fail . Valid values: `soft-restart`, `hard-restart`, `reboot`.
     */
    public readonly failActionOnExtender!: pulumi.Output<string>;
    /**
     * Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `failAlertInterfaces` block is documented below.
     */
    public readonly failAlertInterfaces!: pulumi.Output<outputs.system.InterfaceFailAlertInterface[] | undefined>;
    /**
     * Select link-failed-signal or link-down method to alert about a failed link. Valid values: `link-failed-signal`, `link-down`.
     */
    public readonly failAlertMethod!: pulumi.Output<string>;
    /**
     * Enable/disable fail detection features for this interface. Valid values: `enable`, `disable`.
     */
    public readonly failDetect!: pulumi.Output<string>;
    /**
     * Options for detecting that this interface has failed. Valid values: `detectserver`, `link-down`.
     */
    public readonly failDetectOption!: pulumi.Output<string>;
    /**
     * Enable/disable FortiHeartBeat (FortiTelemetry on GUI). Valid values: `enable`, `disable`.
     */
    public readonly fortiheartbeat!: pulumi.Output<string>;
    /**
     * Enable FortiLink to dedicate this interface to manage other Fortinet devices. Valid values: `enable`, `disable`.
     */
    public readonly fortilink!: pulumi.Output<string>;
    /**
     * fortilink split interface backup link.
     */
    public readonly fortilinkBackupLink!: pulumi.Output<number>;
    /**
     * Protocol for FortiGate neighbor discovery. Valid values: `lldp`, `fortilink`.
     */
    public readonly fortilinkNeighborDetect!: pulumi.Output<string>;
    /**
     * Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy. Valid values: `enable`, `disable`.
     */
    public readonly fortilinkSplitInterface!: pulumi.Output<string>;
    /**
     * Enable/disable FortiLink switch-stacking on this interface. Valid values: `enable`, `disable`.
     */
    public readonly fortilinkStacking!: pulumi.Output<string>;
    /**
     * Transparent mode forward domain.
     */
    public readonly forwardDomain!: pulumi.Output<number>;
    /**
     * Configure forward error correction (FEC). Valid values: `none`, `disable`, `cl91-rs-fec`, `cl74-fc-fec`.
     */
    public readonly forwardErrorCorrection!: pulumi.Output<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
     */
    public readonly gwdetect!: pulumi.Output<string>;
    /**
     * HA election priority for the PING server.
     */
    public readonly haPriority!: pulumi.Output<number>;
    /**
     * Enable/disable ICMP accept redirect. Valid values: `enable`, `disable`.
     */
    public readonly icmpAcceptRedirect!: pulumi.Output<string>;
    /**
     * Enable/disable ICMP send redirect. Valid values: `enable`, `disable`.
     */
    public readonly icmpSendRedirect!: pulumi.Output<string>;
    /**
     * Enable/disable authentication for this interface. Valid values: `enable`, `disable`.
     */
    public readonly identAccept!: pulumi.Output<string>;
    /**
     * PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
     */
    public readonly idleTimeout!: pulumi.Output<number>;
    /**
     * Configure IKE authentication SAML server.
     */
    public readonly ikeSamlServer!: pulumi.Output<string>;
    /**
     * Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
     */
    public readonly inbandwidth!: pulumi.Output<number>;
    /**
     * Incoming traffic shaping profile.
     */
    public readonly ingressShapingProfile!: pulumi.Output<string>;
    /**
     * Ingress Spillover threshold (0 - 16776000 kbps).
     */
    public readonly ingressSpilloverThreshold!: pulumi.Output<number>;
    /**
     * Interface name.
     */
    public readonly interface!: pulumi.Output<string>;
    /**
     * Implicitly created.
     */
    public readonly internal!: pulumi.Output<number>;
    /**
     * Interface IPv4 address and subnet mask, syntax: X.X.X.X/24.
     */
    public readonly ip!: pulumi.Output<string>;
    /**
     * Enable/disable automatic IP address assignment of this interface by FortiIPAM.
     */
    public readonly ipManagedByFortiipam!: pulumi.Output<string>;
    /**
     * Enable/disable IP/MAC binding. Valid values: `enable`, `disable`.
     */
    public readonly ipmac!: pulumi.Output<string>;
    /**
     * Enable/disable the use of this interface as a one-armed sniffer. Valid values: `enable`, `disable`.
     */
    public readonly ipsSnifferMode!: pulumi.Output<string>;
    /**
     * Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
     */
    public readonly ipunnumbered!: pulumi.Output<string>;
    /**
     * IPv6 of interface. The structure of `ipv6` block is documented below.
     */
    public readonly ipv6!: pulumi.Output<outputs.system.InterfaceIpv6>;
    /**
     * Enable/disable l2 forwarding. Valid values: `enable`, `disable`.
     */
    public readonly l2forward!: pulumi.Output<string>;
    /**
     * LACP HA secondary member. Valid values: `enable`, `disable`.
     */
    public readonly lacpHaSecondary!: pulumi.Output<string>;
    /**
     * LACP HA slave. Valid values: `enable`, `disable`.
     */
    public readonly lacpHaSlave!: pulumi.Output<string>;
    /**
     * LACP mode. Valid values: `static`, `passive`, `active`.
     */
    public readonly lacpMode!: pulumi.Output<string>;
    /**
     * How often the interface sends LACP messages. Valid values: `slow`, `fast`.
     */
    public readonly lacpSpeed!: pulumi.Output<string>;
    /**
     * Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
     */
    public readonly lcpEchoInterval!: pulumi.Output<number>;
    /**
     * Maximum missed LCP echo messages before disconnect.
     */
    public readonly lcpMaxEchoFails!: pulumi.Output<number>;
    /**
     * Number of milliseconds to wait before considering a link is up.
     */
    public readonly linkUpDelay!: pulumi.Output<number>;
    /**
     * LLDP-MED network policy profile.
     */
    public readonly lldpNetworkPolicy!: pulumi.Output<string>;
    /**
     * Enable/disable Link Layer Discovery Protocol (LLDP) reception. Valid values: `enable`, `disable`, `vdom`.
     */
    public readonly lldpReception!: pulumi.Output<string>;
    /**
     * Enable/disable Link Layer Discovery Protocol (LLDP) transmission. Valid values: `enable`, `disable`, `vdom`.
     */
    public readonly lldpTransmission!: pulumi.Output<string>;
    /**
     * Change the interface's MAC address.
     */
    public readonly macaddr!: pulumi.Output<string>;
    /**
     * Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managedDevice` block is documented below.
     */
    public readonly managedDevices!: pulumi.Output<outputs.system.InterfaceManagedDevice[] | undefined>;
    /**
     * Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
     */
    public readonly managedSubnetworkSize!: pulumi.Output<string>;
    /**
     * High Availability in-band management IP address of this interface.
     */
    public readonly managementIp!: pulumi.Output<string>;
    /**
     * Measured downstream bandwidth (kbps).
     */
    public readonly measuredDownstreamBandwidth!: pulumi.Output<number>;
    /**
     * Measured upstream bandwidth (kbps).
     */
    public readonly measuredUpstreamBandwidth!: pulumi.Output<number>;
    /**
     * Select SFP media interface type Valid values: `none`, `gmii`, `sgmii`, `sr`, `lr`, `cr`, `sr4`, `lr4`, `cr4`.
     */
    public readonly mediatype!: pulumi.Output<string>;
    /**
     * Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
     */
    public readonly members!: pulumi.Output<outputs.system.InterfaceMember[] | undefined>;
    /**
     * Minimum number of aggregated ports that must be up.
     */
    public readonly minLinks!: pulumi.Output<number>;
    /**
     * Action to take when less than the configured minimum number of links are active. Valid values: `operational`, `administrative`.
     */
    public readonly minLinksDown!: pulumi.Output<string>;
    /**
     * Addressing mode (static, DHCP, PPPoE). Valid values: `static`, `dhcp`, `pppoe`.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * Enable monitoring bandwidth on this interface. Valid values: `enable`, `disable`.
     */
    public readonly monitorBandwidth!: pulumi.Output<string>;
    /**
     * MTU value for this interface.
     */
    public readonly mtu!: pulumi.Output<number>;
    /**
     * Enable to set a custom MTU for this interface. Valid values: `enable`, `disable`.
     */
    public readonly mtuOverride!: pulumi.Output<string>;
    /**
     * Name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable/disable NDISC forwarding. Valid values: `enable`, `disable`.
     */
    public readonly ndiscforward!: pulumi.Output<string>;
    /**
     * Enable/disable NETBIOS forwarding. Valid values: `disable`, `enable`.
     */
    public readonly netbiosForward!: pulumi.Output<string>;
    /**
     * Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both). Valid values: `disable`, `tx`, `rx`, `both`.
     */
    public readonly netflowSampler!: pulumi.Output<string>;
    /**
     * Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
     */
    public readonly outbandwidth!: pulumi.Output<number>;
    /**
     * PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
     */
    public readonly padtRetryTimeout!: pulumi.Output<number>;
    /**
     * PPPoE account's password.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * PING server status.
     */
    public readonly pingServStatus!: pulumi.Output<number>;
    /**
     * sFlow polling interval (1 - 255 sec).
     */
    public readonly pollingInterval!: pulumi.Output<number>;
    /**
     * Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
     */
    public readonly pppoeUnnumberedNegotiate!: pulumi.Output<string>;
    /**
     * PPTP authentication type. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
     */
    public readonly pptpAuthType!: pulumi.Output<string>;
    /**
     * Enable/disable PPTP client. Valid values: `enable`, `disable`.
     */
    public readonly pptpClient!: pulumi.Output<string>;
    /**
     * PPTP password.
     */
    public readonly pptpPassword!: pulumi.Output<string | undefined>;
    /**
     * PPTP server IP address.
     */
    public readonly pptpServerIp!: pulumi.Output<string>;
    /**
     * Idle timer in minutes (0 for disabled).
     */
    public readonly pptpTimeout!: pulumi.Output<number>;
    /**
     * PPTP user name.
     */
    public readonly pptpUser!: pulumi.Output<string>;
    /**
     * Enable/disable preservation of session route when dirty. Valid values: `enable`, `disable`.
     */
    public readonly preserveSessionRoute!: pulumi.Output<string>;
    /**
     * Priority of learned routes.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Enable/disable fail back to higher priority port once recovered. Valid values: `enable`, `disable`.
     */
    public readonly priorityOverride!: pulumi.Output<string>;
    /**
     * Enable/disable proxy captive portal on this interface. Valid values: `enable`, `disable`.
     */
    public readonly proxyCaptivePortal!: pulumi.Output<string>;
    /**
     * IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
     */
    public readonly reachableTime!: pulumi.Output<number>;
    /**
     * Redundant interface.
     */
    public readonly redundantInterface!: pulumi.Output<string>;
    /**
     * Remote IP address of tunnel.
     */
    public readonly remoteIp!: pulumi.Output<string>;
    /**
     * Replacement message override group.
     */
    public readonly replacemsgOverrideGroup!: pulumi.Output<string>;
    /**
     * RX ring size.
     */
    public readonly ringRx!: pulumi.Output<number>;
    /**
     * TX ring size.
     */
    public readonly ringTx!: pulumi.Output<number>;
    /**
     * Interface role. Valid values: `lan`, `wan`, `dmz`, `undefined`.
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * Data that NetFlow collects (rx, tx, or both). Valid values: `tx`, `rx`, `both`.
     */
    public readonly sampleDirection!: pulumi.Output<string>;
    /**
     * sFlow sample rate (10 - 99999).
     */
    public readonly sampleRate!: pulumi.Output<number>;
    /**
     * Enable monitoring or blocking connections to Botnet servers through this interface. Valid values: `disable`, `block`, `monitor`.
     */
    public readonly scanBotnetConnections!: pulumi.Output<string>;
    /**
     * Enable/disable adding a secondary IP to this interface. Valid values: `enable`, `disable`.
     */
    public readonly secondaryIp!: pulumi.Output<string>;
    /**
     * Second IP address of interface. The structure of `secondaryip` block is documented below.
     */
    public readonly secondaryips!: pulumi.Output<outputs.system.InterfaceSecondaryip[] | undefined>;
    /**
     * Name of security-exempt-list.
     */
    public readonly securityExemptList!: pulumi.Output<string>;
    /**
     * URL of external authentication logout server.
     */
    public readonly securityExternalLogout!: pulumi.Output<string>;
    /**
     * URL of external authentication web server.
     */
    public readonly securityExternalWeb!: pulumi.Output<string>;
    /**
     * User groups that can authenticate with the captive portal. The structure of `securityGroups` block is documented below.
     */
    public readonly securityGroups!: pulumi.Output<outputs.system.InterfaceSecurityGroup[] | undefined>;
    /**
     * Enable/disable MAC authentication bypass. Valid values: `mac-auth-only`, `enable`, `disable`.
     */
    public readonly securityMacAuthBypass!: pulumi.Output<string>;
    /**
     * Turn on captive portal authentication for this interface. Valid values: `none`, `captive-portal`, `802.1X`.
     */
    public readonly securityMode!: pulumi.Output<string>;
    /**
     * URL redirection after disclaimer/authentication.
     */
    public readonly securityRedirectUrl!: pulumi.Output<string>;
    /**
     * PPPoE service name.
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Enable/disable sFlow on this interface. Valid values: `enable`, `disable`.
     */
    public readonly sflowSampler!: pulumi.Output<string>;
    /**
     * Permanent SNMP Index of the interface.
     */
    public readonly snmpIndex!: pulumi.Output<number>;
    /**
     * Interface speed. The default setting and the options available depend on the interface hardware.
     */
    public readonly speed!: pulumi.Output<string>;
    /**
     * Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
     */
    public readonly spilloverThreshold!: pulumi.Output<number>;
    /**
     * Enable/disable source IP check. Valid values: `enable`, `disable`.
     */
    public readonly srcCheck!: pulumi.Output<string>;
    /**
     * Bring the interface up or shut the interface down. Valid values: `up`, `down`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Enable/disable STP. Valid values: `disable`, `enable`.
     */
    public readonly stp!: pulumi.Output<string>;
    /**
     * Control STP behaviour on HA secondary. Valid values: `disable`, `enable`, `priority-adjust`.
     */
    public readonly stpHaSecondary!: pulumi.Output<string>;
    /**
     * Enable/disable STP forwarding. Valid values: `enable`, `disable`.
     */
    public readonly stpforward!: pulumi.Output<string>;
    /**
     * Configure STP forwarding mode. Valid values: `rpl-all-ext-id`, `rpl-bridge-ext-id`, `rpl-nothing`.
     */
    public readonly stpforwardMode!: pulumi.Output<string>;
    /**
     * Enable to always send packets from this interface to a destination MAC address. Valid values: `enable`, `disable`.
     */
    public readonly subst!: pulumi.Output<string>;
    /**
     * Destination MAC address that all packets are sent to from this interface.
     */
    public readonly substituteDstMac!: pulumi.Output<string>;
    /**
     * Initial create for switch-controller VLANs.
     */
    public readonly swcFirstCreate!: pulumi.Output<number>;
    /**
     * Creation status for switch-controller VLANs.
     */
    public readonly swcVlan!: pulumi.Output<number>;
    /**
     * Contained in switch.
     */
    public readonly switch!: pulumi.Output<string>;
    /**
     * Block FortiSwitch port-to-port traffic. Valid values: `enable`, `disable`.
     */
    public readonly switchControllerAccessVlan!: pulumi.Output<string>;
    /**
     * Enable/disable FortiSwitch ARP inspection. Valid values: `enable`, `disable`.
     */
    public readonly switchControllerArpInspection!: pulumi.Output<string>;
    /**
     * Switch controller DHCP snooping. Valid values: `enable`, `disable`.
     */
    public readonly switchControllerDhcpSnooping!: pulumi.Output<string>;
    /**
     * Switch controller DHCP snooping option82. Valid values: `enable`, `disable`.
     */
    public readonly switchControllerDhcpSnoopingOption82!: pulumi.Output<string>;
    /**
     * Switch controller DHCP snooping verify MAC. Valid values: `enable`, `disable`.
     */
    public readonly switchControllerDhcpSnoopingVerifyMac!: pulumi.Output<string>;
    /**
     * Integrated FortiLink settings for managed FortiSwitch.
     */
    public readonly switchControllerDynamic!: pulumi.Output<string>;
    /**
     * Interface's purpose when assigning traffic (read only).
     */
    public readonly switchControllerFeature!: pulumi.Output<string>;
    /**
     * Switch controller IGMP snooping. Valid values: `enable`, `disable`.
     */
    public readonly switchControllerIgmpSnooping!: pulumi.Output<string>;
    /**
     * Switch controller IGMP snooping fast-leave. Valid values: `enable`, `disable`.
     */
    public readonly switchControllerIgmpSnoopingFastLeave!: pulumi.Output<string>;
    /**
     * Switch controller IGMP snooping proxy. Valid values: `enable`, `disable`.
     */
    public readonly switchControllerIgmpSnoopingProxy!: pulumi.Output<string>;
    /**
     * Enable/disable managed FortiSwitch IoT scanning. Valid values: `enable`, `disable`.
     */
    public readonly switchControllerIotScanning!: pulumi.Output<string>;
    /**
     * Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
     */
    public readonly switchControllerLearningLimit!: pulumi.Output<number>;
    /**
     * VLAN to use for FortiLink management purposes.
     */
    public readonly switchControllerMgmtVlan!: pulumi.Output<number>;
    /**
     * Integrated NAC settings for managed FortiSwitch.
     */
    public readonly switchControllerNac!: pulumi.Output<string>;
    /**
     * NetFlow collection and processing. Valid values: `disable`, `enable`.
     */
    public readonly switchControllerNetflowCollect!: pulumi.Output<string>;
    /**
     * Enable/disable managed FortiSwitch routing offload. Valid values: `enable`, `disable`.
     */
    public readonly switchControllerOffload!: pulumi.Output<string>;
    /**
     * Enable/disable managed FortiSwitch routing offload gateway. Valid values: `enable`, `disable`.
     */
    public readonly switchControllerOffloadGw!: pulumi.Output<string>;
    /**
     * IP for routing offload on FortiSwitch.
     */
    public readonly switchControllerOffloadIp!: pulumi.Output<string>;
    /**
     * Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface. Valid values: `disable`, `enable`.
     */
    public readonly switchControllerRspanMode!: pulumi.Output<string>;
    /**
     * Source IP address used in FortiLink over L3 connections. Valid values: `outbound`, `fixed`.
     */
    public readonly switchControllerSourceIp!: pulumi.Output<string>;
    /**
     * Switch controller traffic policy for the VLAN.
     */
    public readonly switchControllerTrafficPolicy!: pulumi.Output<string>;
    /**
     * Define a system ID for the aggregate interface.
     */
    public readonly systemId!: pulumi.Output<string>;
    /**
     * Method in which system ID is generated. Valid values: `auto`, `user`.
     */
    public readonly systemIdType!: pulumi.Output<string>;
    /**
     * Config object tagging. The structure of `tagging` block is documented below.
     */
    public readonly taggings!: pulumi.Output<outputs.system.InterfaceTagging[] | undefined>;
    /**
     * TCP maximum segment size. 0 means do not change segment size.
     */
    public readonly tcpMss!: pulumi.Output<number>;
    /**
     * Enable/disable VLAN trunk. Valid values: `enable`, `disable`.
     */
    public readonly trunk!: pulumi.Output<string>;
    /**
     * Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
     */
    public readonly trustIp1!: pulumi.Output<string>;
    /**
     * Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
     */
    public readonly trustIp2!: pulumi.Output<string>;
    /**
     * Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
     */
    public readonly trustIp3!: pulumi.Output<string>;
    /**
     * Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
     */
    public readonly trustIp61!: pulumi.Output<string>;
    /**
     * Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
     */
    public readonly trustIp62!: pulumi.Output<string>;
    /**
     * Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
     */
    public readonly trustIp63!: pulumi.Output<string>;
    /**
     * Interface type.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Username of the PPPoE account, provided by your ISP.
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * Interface is in this virtual domain (VDOM).
     */
    public readonly vdom!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * Switch control interface VLAN ID.
     */
    public readonly vindex!: pulumi.Output<number>;
    /**
     * Ethernet protocol of VLAN. Valid values: `8021q`, `8021ad`.
     */
    public readonly vlanProtocol!: pulumi.Output<string>;
    /**
     * Enable/disable traffic forwarding between VLANs on this interface. Valid values: `enable`, `disable`.
     */
    public readonly vlanforward!: pulumi.Output<string>;
    /**
     * VLAN ID (1 - 4094).
     */
    public readonly vlanid!: pulumi.Output<number>;
    /**
     * Virtual Routing Forwarding ID.
     */
    public readonly vrf!: pulumi.Output<number>;
    /**
     * Enable/disable use of virtual MAC for VRRP. Valid values: `enable`, `disable`.
     */
    public readonly vrrpVirtualMac!: pulumi.Output<string>;
    /**
     * VRRP configuration. The structure of `vrrp` block is documented below.
     */
    public readonly vrrps!: pulumi.Output<outputs.system.InterfaceVrrp[] | undefined>;
    /**
     * Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers. Valid values: `enable`, `disable`.
     */
    public readonly wccp!: pulumi.Output<string>;
    /**
     * Default weight for static routes (if route has no weight configured).
     */
    public readonly weight!: pulumi.Output<number>;
    /**
     * WINS server IP.
     */
    public readonly winsIp!: pulumi.Output<string>;

    /**
     * Create a Interface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceArgs | InterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceState | undefined;
            resourceInputs["acName"] = state ? state.acName : undefined;
            resourceInputs["aggregate"] = state ? state.aggregate : undefined;
            resourceInputs["aggregateType"] = state ? state.aggregateType : undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["allowaccess"] = state ? state.allowaccess : undefined;
            resourceInputs["apDiscover"] = state ? state.apDiscover : undefined;
            resourceInputs["arpforward"] = state ? state.arpforward : undefined;
            resourceInputs["authCert"] = state ? state.authCert : undefined;
            resourceInputs["authPortalAddr"] = state ? state.authPortalAddr : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["autoAuthExtensionDevice"] = state ? state.autoAuthExtensionDevice : undefined;
            resourceInputs["autogenerated"] = state ? state.autogenerated : undefined;
            resourceInputs["bandwidthMeasureTime"] = state ? state.bandwidthMeasureTime : undefined;
            resourceInputs["bfd"] = state ? state.bfd : undefined;
            resourceInputs["bfdDesiredMinTx"] = state ? state.bfdDesiredMinTx : undefined;
            resourceInputs["bfdDetectMult"] = state ? state.bfdDetectMult : undefined;
            resourceInputs["bfdRequiredMinRx"] = state ? state.bfdRequiredMinRx : undefined;
            resourceInputs["broadcastForticlientDiscovery"] = state ? state.broadcastForticlientDiscovery : undefined;
            resourceInputs["broadcastForward"] = state ? state.broadcastForward : undefined;
            resourceInputs["captivePortal"] = state ? state.captivePortal : undefined;
            resourceInputs["cliConnStatus"] = state ? state.cliConnStatus : undefined;
            resourceInputs["clientOptions"] = state ? state.clientOptions : undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["dedicatedTo"] = state ? state.dedicatedTo : undefined;
            resourceInputs["defaultPurdueLevel"] = state ? state.defaultPurdueLevel : undefined;
            resourceInputs["defaultgw"] = state ? state.defaultgw : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detectedPeerMtu"] = state ? state.detectedPeerMtu : undefined;
            resourceInputs["detectprotocol"] = state ? state.detectprotocol : undefined;
            resourceInputs["detectserver"] = state ? state.detectserver : undefined;
            resourceInputs["deviceAccessList"] = state ? state.deviceAccessList : undefined;
            resourceInputs["deviceIdentification"] = state ? state.deviceIdentification : undefined;
            resourceInputs["deviceIdentificationActiveScan"] = state ? state.deviceIdentificationActiveScan : undefined;
            resourceInputs["deviceNetscan"] = state ? state.deviceNetscan : undefined;
            resourceInputs["deviceUserIdentification"] = state ? state.deviceUserIdentification : undefined;
            resourceInputs["devindex"] = state ? state.devindex : undefined;
            resourceInputs["dhcpBroadcastFlag"] = state ? state.dhcpBroadcastFlag : undefined;
            resourceInputs["dhcpClasslessRouteAddition"] = state ? state.dhcpClasslessRouteAddition : undefined;
            resourceInputs["dhcpClientIdentifier"] = state ? state.dhcpClientIdentifier : undefined;
            resourceInputs["dhcpRelayAgentOption"] = state ? state.dhcpRelayAgentOption : undefined;
            resourceInputs["dhcpRelayCircuitId"] = state ? state.dhcpRelayCircuitId : undefined;
            resourceInputs["dhcpRelayInterface"] = state ? state.dhcpRelayInterface : undefined;
            resourceInputs["dhcpRelayInterfaceSelectMethod"] = state ? state.dhcpRelayInterfaceSelectMethod : undefined;
            resourceInputs["dhcpRelayIp"] = state ? state.dhcpRelayIp : undefined;
            resourceInputs["dhcpRelayLinkSelection"] = state ? state.dhcpRelayLinkSelection : undefined;
            resourceInputs["dhcpRelayRequestAllServer"] = state ? state.dhcpRelayRequestAllServer : undefined;
            resourceInputs["dhcpRelayService"] = state ? state.dhcpRelayService : undefined;
            resourceInputs["dhcpRelaySourceIp"] = state ? state.dhcpRelaySourceIp : undefined;
            resourceInputs["dhcpRelayType"] = state ? state.dhcpRelayType : undefined;
            resourceInputs["dhcpRenewTime"] = state ? state.dhcpRenewTime : undefined;
            resourceInputs["dhcpSmartRelay"] = state ? state.dhcpSmartRelay : undefined;
            resourceInputs["dhcpSnoopingServerLists"] = state ? state.dhcpSnoopingServerLists : undefined;
            resourceInputs["discRetryTimeout"] = state ? state.discRetryTimeout : undefined;
            resourceInputs["disconnectThreshold"] = state ? state.disconnectThreshold : undefined;
            resourceInputs["distance"] = state ? state.distance : undefined;
            resourceInputs["dnsServerOverride"] = state ? state.dnsServerOverride : undefined;
            resourceInputs["dnsServerProtocol"] = state ? state.dnsServerProtocol : undefined;
            resourceInputs["dropFragment"] = state ? state.dropFragment : undefined;
            resourceInputs["dropOverlappedFragment"] = state ? state.dropOverlappedFragment : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["eapCaCert"] = state ? state.eapCaCert : undefined;
            resourceInputs["eapIdentity"] = state ? state.eapIdentity : undefined;
            resourceInputs["eapMethod"] = state ? state.eapMethod : undefined;
            resourceInputs["eapPassword"] = state ? state.eapPassword : undefined;
            resourceInputs["eapSupplicant"] = state ? state.eapSupplicant : undefined;
            resourceInputs["eapUserCert"] = state ? state.eapUserCert : undefined;
            resourceInputs["egressShapingProfile"] = state ? state.egressShapingProfile : undefined;
            resourceInputs["endpointCompliance"] = state ? state.endpointCompliance : undefined;
            resourceInputs["estimatedDownstreamBandwidth"] = state ? state.estimatedDownstreamBandwidth : undefined;
            resourceInputs["estimatedUpstreamBandwidth"] = state ? state.estimatedUpstreamBandwidth : undefined;
            resourceInputs["explicitFtpProxy"] = state ? state.explicitFtpProxy : undefined;
            resourceInputs["explicitWebProxy"] = state ? state.explicitWebProxy : undefined;
            resourceInputs["external"] = state ? state.external : undefined;
            resourceInputs["failActionOnExtender"] = state ? state.failActionOnExtender : undefined;
            resourceInputs["failAlertInterfaces"] = state ? state.failAlertInterfaces : undefined;
            resourceInputs["failAlertMethod"] = state ? state.failAlertMethod : undefined;
            resourceInputs["failDetect"] = state ? state.failDetect : undefined;
            resourceInputs["failDetectOption"] = state ? state.failDetectOption : undefined;
            resourceInputs["fortiheartbeat"] = state ? state.fortiheartbeat : undefined;
            resourceInputs["fortilink"] = state ? state.fortilink : undefined;
            resourceInputs["fortilinkBackupLink"] = state ? state.fortilinkBackupLink : undefined;
            resourceInputs["fortilinkNeighborDetect"] = state ? state.fortilinkNeighborDetect : undefined;
            resourceInputs["fortilinkSplitInterface"] = state ? state.fortilinkSplitInterface : undefined;
            resourceInputs["fortilinkStacking"] = state ? state.fortilinkStacking : undefined;
            resourceInputs["forwardDomain"] = state ? state.forwardDomain : undefined;
            resourceInputs["forwardErrorCorrection"] = state ? state.forwardErrorCorrection : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["gwdetect"] = state ? state.gwdetect : undefined;
            resourceInputs["haPriority"] = state ? state.haPriority : undefined;
            resourceInputs["icmpAcceptRedirect"] = state ? state.icmpAcceptRedirect : undefined;
            resourceInputs["icmpSendRedirect"] = state ? state.icmpSendRedirect : undefined;
            resourceInputs["identAccept"] = state ? state.identAccept : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["ikeSamlServer"] = state ? state.ikeSamlServer : undefined;
            resourceInputs["inbandwidth"] = state ? state.inbandwidth : undefined;
            resourceInputs["ingressShapingProfile"] = state ? state.ingressShapingProfile : undefined;
            resourceInputs["ingressSpilloverThreshold"] = state ? state.ingressSpilloverThreshold : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["internal"] = state ? state.internal : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ipManagedByFortiipam"] = state ? state.ipManagedByFortiipam : undefined;
            resourceInputs["ipmac"] = state ? state.ipmac : undefined;
            resourceInputs["ipsSnifferMode"] = state ? state.ipsSnifferMode : undefined;
            resourceInputs["ipunnumbered"] = state ? state.ipunnumbered : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["l2forward"] = state ? state.l2forward : undefined;
            resourceInputs["lacpHaSecondary"] = state ? state.lacpHaSecondary : undefined;
            resourceInputs["lacpHaSlave"] = state ? state.lacpHaSlave : undefined;
            resourceInputs["lacpMode"] = state ? state.lacpMode : undefined;
            resourceInputs["lacpSpeed"] = state ? state.lacpSpeed : undefined;
            resourceInputs["lcpEchoInterval"] = state ? state.lcpEchoInterval : undefined;
            resourceInputs["lcpMaxEchoFails"] = state ? state.lcpMaxEchoFails : undefined;
            resourceInputs["linkUpDelay"] = state ? state.linkUpDelay : undefined;
            resourceInputs["lldpNetworkPolicy"] = state ? state.lldpNetworkPolicy : undefined;
            resourceInputs["lldpReception"] = state ? state.lldpReception : undefined;
            resourceInputs["lldpTransmission"] = state ? state.lldpTransmission : undefined;
            resourceInputs["macaddr"] = state ? state.macaddr : undefined;
            resourceInputs["managedDevices"] = state ? state.managedDevices : undefined;
            resourceInputs["managedSubnetworkSize"] = state ? state.managedSubnetworkSize : undefined;
            resourceInputs["managementIp"] = state ? state.managementIp : undefined;
            resourceInputs["measuredDownstreamBandwidth"] = state ? state.measuredDownstreamBandwidth : undefined;
            resourceInputs["measuredUpstreamBandwidth"] = state ? state.measuredUpstreamBandwidth : undefined;
            resourceInputs["mediatype"] = state ? state.mediatype : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["minLinks"] = state ? state.minLinks : undefined;
            resourceInputs["minLinksDown"] = state ? state.minLinksDown : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["monitorBandwidth"] = state ? state.monitorBandwidth : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["mtuOverride"] = state ? state.mtuOverride : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ndiscforward"] = state ? state.ndiscforward : undefined;
            resourceInputs["netbiosForward"] = state ? state.netbiosForward : undefined;
            resourceInputs["netflowSampler"] = state ? state.netflowSampler : undefined;
            resourceInputs["outbandwidth"] = state ? state.outbandwidth : undefined;
            resourceInputs["padtRetryTimeout"] = state ? state.padtRetryTimeout : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["pingServStatus"] = state ? state.pingServStatus : undefined;
            resourceInputs["pollingInterval"] = state ? state.pollingInterval : undefined;
            resourceInputs["pppoeUnnumberedNegotiate"] = state ? state.pppoeUnnumberedNegotiate : undefined;
            resourceInputs["pptpAuthType"] = state ? state.pptpAuthType : undefined;
            resourceInputs["pptpClient"] = state ? state.pptpClient : undefined;
            resourceInputs["pptpPassword"] = state ? state.pptpPassword : undefined;
            resourceInputs["pptpServerIp"] = state ? state.pptpServerIp : undefined;
            resourceInputs["pptpTimeout"] = state ? state.pptpTimeout : undefined;
            resourceInputs["pptpUser"] = state ? state.pptpUser : undefined;
            resourceInputs["preserveSessionRoute"] = state ? state.preserveSessionRoute : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["priorityOverride"] = state ? state.priorityOverride : undefined;
            resourceInputs["proxyCaptivePortal"] = state ? state.proxyCaptivePortal : undefined;
            resourceInputs["reachableTime"] = state ? state.reachableTime : undefined;
            resourceInputs["redundantInterface"] = state ? state.redundantInterface : undefined;
            resourceInputs["remoteIp"] = state ? state.remoteIp : undefined;
            resourceInputs["replacemsgOverrideGroup"] = state ? state.replacemsgOverrideGroup : undefined;
            resourceInputs["ringRx"] = state ? state.ringRx : undefined;
            resourceInputs["ringTx"] = state ? state.ringTx : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["sampleDirection"] = state ? state.sampleDirection : undefined;
            resourceInputs["sampleRate"] = state ? state.sampleRate : undefined;
            resourceInputs["scanBotnetConnections"] = state ? state.scanBotnetConnections : undefined;
            resourceInputs["secondaryIp"] = state ? state.secondaryIp : undefined;
            resourceInputs["secondaryips"] = state ? state.secondaryips : undefined;
            resourceInputs["securityExemptList"] = state ? state.securityExemptList : undefined;
            resourceInputs["securityExternalLogout"] = state ? state.securityExternalLogout : undefined;
            resourceInputs["securityExternalWeb"] = state ? state.securityExternalWeb : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["securityMacAuthBypass"] = state ? state.securityMacAuthBypass : undefined;
            resourceInputs["securityMode"] = state ? state.securityMode : undefined;
            resourceInputs["securityRedirectUrl"] = state ? state.securityRedirectUrl : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["sflowSampler"] = state ? state.sflowSampler : undefined;
            resourceInputs["snmpIndex"] = state ? state.snmpIndex : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["spilloverThreshold"] = state ? state.spilloverThreshold : undefined;
            resourceInputs["srcCheck"] = state ? state.srcCheck : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stp"] = state ? state.stp : undefined;
            resourceInputs["stpHaSecondary"] = state ? state.stpHaSecondary : undefined;
            resourceInputs["stpforward"] = state ? state.stpforward : undefined;
            resourceInputs["stpforwardMode"] = state ? state.stpforwardMode : undefined;
            resourceInputs["subst"] = state ? state.subst : undefined;
            resourceInputs["substituteDstMac"] = state ? state.substituteDstMac : undefined;
            resourceInputs["swcFirstCreate"] = state ? state.swcFirstCreate : undefined;
            resourceInputs["swcVlan"] = state ? state.swcVlan : undefined;
            resourceInputs["switch"] = state ? state.switch : undefined;
            resourceInputs["switchControllerAccessVlan"] = state ? state.switchControllerAccessVlan : undefined;
            resourceInputs["switchControllerArpInspection"] = state ? state.switchControllerArpInspection : undefined;
            resourceInputs["switchControllerDhcpSnooping"] = state ? state.switchControllerDhcpSnooping : undefined;
            resourceInputs["switchControllerDhcpSnoopingOption82"] = state ? state.switchControllerDhcpSnoopingOption82 : undefined;
            resourceInputs["switchControllerDhcpSnoopingVerifyMac"] = state ? state.switchControllerDhcpSnoopingVerifyMac : undefined;
            resourceInputs["switchControllerDynamic"] = state ? state.switchControllerDynamic : undefined;
            resourceInputs["switchControllerFeature"] = state ? state.switchControllerFeature : undefined;
            resourceInputs["switchControllerIgmpSnooping"] = state ? state.switchControllerIgmpSnooping : undefined;
            resourceInputs["switchControllerIgmpSnoopingFastLeave"] = state ? state.switchControllerIgmpSnoopingFastLeave : undefined;
            resourceInputs["switchControllerIgmpSnoopingProxy"] = state ? state.switchControllerIgmpSnoopingProxy : undefined;
            resourceInputs["switchControllerIotScanning"] = state ? state.switchControllerIotScanning : undefined;
            resourceInputs["switchControllerLearningLimit"] = state ? state.switchControllerLearningLimit : undefined;
            resourceInputs["switchControllerMgmtVlan"] = state ? state.switchControllerMgmtVlan : undefined;
            resourceInputs["switchControllerNac"] = state ? state.switchControllerNac : undefined;
            resourceInputs["switchControllerNetflowCollect"] = state ? state.switchControllerNetflowCollect : undefined;
            resourceInputs["switchControllerOffload"] = state ? state.switchControllerOffload : undefined;
            resourceInputs["switchControllerOffloadGw"] = state ? state.switchControllerOffloadGw : undefined;
            resourceInputs["switchControllerOffloadIp"] = state ? state.switchControllerOffloadIp : undefined;
            resourceInputs["switchControllerRspanMode"] = state ? state.switchControllerRspanMode : undefined;
            resourceInputs["switchControllerSourceIp"] = state ? state.switchControllerSourceIp : undefined;
            resourceInputs["switchControllerTrafficPolicy"] = state ? state.switchControllerTrafficPolicy : undefined;
            resourceInputs["systemId"] = state ? state.systemId : undefined;
            resourceInputs["systemIdType"] = state ? state.systemIdType : undefined;
            resourceInputs["taggings"] = state ? state.taggings : undefined;
            resourceInputs["tcpMss"] = state ? state.tcpMss : undefined;
            resourceInputs["trunk"] = state ? state.trunk : undefined;
            resourceInputs["trustIp1"] = state ? state.trustIp1 : undefined;
            resourceInputs["trustIp2"] = state ? state.trustIp2 : undefined;
            resourceInputs["trustIp3"] = state ? state.trustIp3 : undefined;
            resourceInputs["trustIp61"] = state ? state.trustIp61 : undefined;
            resourceInputs["trustIp62"] = state ? state.trustIp62 : undefined;
            resourceInputs["trustIp63"] = state ? state.trustIp63 : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vdom"] = state ? state.vdom : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["vindex"] = state ? state.vindex : undefined;
            resourceInputs["vlanProtocol"] = state ? state.vlanProtocol : undefined;
            resourceInputs["vlanforward"] = state ? state.vlanforward : undefined;
            resourceInputs["vlanid"] = state ? state.vlanid : undefined;
            resourceInputs["vrf"] = state ? state.vrf : undefined;
            resourceInputs["vrrpVirtualMac"] = state ? state.vrrpVirtualMac : undefined;
            resourceInputs["vrrps"] = state ? state.vrrps : undefined;
            resourceInputs["wccp"] = state ? state.wccp : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
            resourceInputs["winsIp"] = state ? state.winsIp : undefined;
        } else {
            const args = argsOrState as InterfaceArgs | undefined;
            if ((!args || args.vdom === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vdom'");
            }
            resourceInputs["acName"] = args ? args.acName : undefined;
            resourceInputs["aggregate"] = args ? args.aggregate : undefined;
            resourceInputs["aggregateType"] = args ? args.aggregateType : undefined;
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["allowaccess"] = args ? args.allowaccess : undefined;
            resourceInputs["apDiscover"] = args ? args.apDiscover : undefined;
            resourceInputs["arpforward"] = args ? args.arpforward : undefined;
            resourceInputs["authCert"] = args ? args.authCert : undefined;
            resourceInputs["authPortalAddr"] = args ? args.authPortalAddr : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["autoAuthExtensionDevice"] = args ? args.autoAuthExtensionDevice : undefined;
            resourceInputs["autogenerated"] = args ? args.autogenerated : undefined;
            resourceInputs["bandwidthMeasureTime"] = args ? args.bandwidthMeasureTime : undefined;
            resourceInputs["bfd"] = args ? args.bfd : undefined;
            resourceInputs["bfdDesiredMinTx"] = args ? args.bfdDesiredMinTx : undefined;
            resourceInputs["bfdDetectMult"] = args ? args.bfdDetectMult : undefined;
            resourceInputs["bfdRequiredMinRx"] = args ? args.bfdRequiredMinRx : undefined;
            resourceInputs["broadcastForticlientDiscovery"] = args ? args.broadcastForticlientDiscovery : undefined;
            resourceInputs["broadcastForward"] = args ? args.broadcastForward : undefined;
            resourceInputs["captivePortal"] = args ? args.captivePortal : undefined;
            resourceInputs["cliConnStatus"] = args ? args.cliConnStatus : undefined;
            resourceInputs["clientOptions"] = args ? args.clientOptions : undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["dedicatedTo"] = args ? args.dedicatedTo : undefined;
            resourceInputs["defaultPurdueLevel"] = args ? args.defaultPurdueLevel : undefined;
            resourceInputs["defaultgw"] = args ? args.defaultgw : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["detectedPeerMtu"] = args ? args.detectedPeerMtu : undefined;
            resourceInputs["detectprotocol"] = args ? args.detectprotocol : undefined;
            resourceInputs["detectserver"] = args ? args.detectserver : undefined;
            resourceInputs["deviceAccessList"] = args ? args.deviceAccessList : undefined;
            resourceInputs["deviceIdentification"] = args ? args.deviceIdentification : undefined;
            resourceInputs["deviceIdentificationActiveScan"] = args ? args.deviceIdentificationActiveScan : undefined;
            resourceInputs["deviceNetscan"] = args ? args.deviceNetscan : undefined;
            resourceInputs["deviceUserIdentification"] = args ? args.deviceUserIdentification : undefined;
            resourceInputs["devindex"] = args ? args.devindex : undefined;
            resourceInputs["dhcpBroadcastFlag"] = args ? args.dhcpBroadcastFlag : undefined;
            resourceInputs["dhcpClasslessRouteAddition"] = args ? args.dhcpClasslessRouteAddition : undefined;
            resourceInputs["dhcpClientIdentifier"] = args ? args.dhcpClientIdentifier : undefined;
            resourceInputs["dhcpRelayAgentOption"] = args ? args.dhcpRelayAgentOption : undefined;
            resourceInputs["dhcpRelayCircuitId"] = args ? args.dhcpRelayCircuitId : undefined;
            resourceInputs["dhcpRelayInterface"] = args ? args.dhcpRelayInterface : undefined;
            resourceInputs["dhcpRelayInterfaceSelectMethod"] = args ? args.dhcpRelayInterfaceSelectMethod : undefined;
            resourceInputs["dhcpRelayIp"] = args ? args.dhcpRelayIp : undefined;
            resourceInputs["dhcpRelayLinkSelection"] = args ? args.dhcpRelayLinkSelection : undefined;
            resourceInputs["dhcpRelayRequestAllServer"] = args ? args.dhcpRelayRequestAllServer : undefined;
            resourceInputs["dhcpRelayService"] = args ? args.dhcpRelayService : undefined;
            resourceInputs["dhcpRelaySourceIp"] = args ? args.dhcpRelaySourceIp : undefined;
            resourceInputs["dhcpRelayType"] = args ? args.dhcpRelayType : undefined;
            resourceInputs["dhcpRenewTime"] = args ? args.dhcpRenewTime : undefined;
            resourceInputs["dhcpSmartRelay"] = args ? args.dhcpSmartRelay : undefined;
            resourceInputs["dhcpSnoopingServerLists"] = args ? args.dhcpSnoopingServerLists : undefined;
            resourceInputs["discRetryTimeout"] = args ? args.discRetryTimeout : undefined;
            resourceInputs["disconnectThreshold"] = args ? args.disconnectThreshold : undefined;
            resourceInputs["distance"] = args ? args.distance : undefined;
            resourceInputs["dnsServerOverride"] = args ? args.dnsServerOverride : undefined;
            resourceInputs["dnsServerProtocol"] = args ? args.dnsServerProtocol : undefined;
            resourceInputs["dropFragment"] = args ? args.dropFragment : undefined;
            resourceInputs["dropOverlappedFragment"] = args ? args.dropOverlappedFragment : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["eapCaCert"] = args ? args.eapCaCert : undefined;
            resourceInputs["eapIdentity"] = args ? args.eapIdentity : undefined;
            resourceInputs["eapMethod"] = args ? args.eapMethod : undefined;
            resourceInputs["eapPassword"] = args?.eapPassword ? pulumi.secret(args.eapPassword) : undefined;
            resourceInputs["eapSupplicant"] = args ? args.eapSupplicant : undefined;
            resourceInputs["eapUserCert"] = args ? args.eapUserCert : undefined;
            resourceInputs["egressShapingProfile"] = args ? args.egressShapingProfile : undefined;
            resourceInputs["endpointCompliance"] = args ? args.endpointCompliance : undefined;
            resourceInputs["estimatedDownstreamBandwidth"] = args ? args.estimatedDownstreamBandwidth : undefined;
            resourceInputs["estimatedUpstreamBandwidth"] = args ? args.estimatedUpstreamBandwidth : undefined;
            resourceInputs["explicitFtpProxy"] = args ? args.explicitFtpProxy : undefined;
            resourceInputs["explicitWebProxy"] = args ? args.explicitWebProxy : undefined;
            resourceInputs["external"] = args ? args.external : undefined;
            resourceInputs["failActionOnExtender"] = args ? args.failActionOnExtender : undefined;
            resourceInputs["failAlertInterfaces"] = args ? args.failAlertInterfaces : undefined;
            resourceInputs["failAlertMethod"] = args ? args.failAlertMethod : undefined;
            resourceInputs["failDetect"] = args ? args.failDetect : undefined;
            resourceInputs["failDetectOption"] = args ? args.failDetectOption : undefined;
            resourceInputs["fortiheartbeat"] = args ? args.fortiheartbeat : undefined;
            resourceInputs["fortilink"] = args ? args.fortilink : undefined;
            resourceInputs["fortilinkBackupLink"] = args ? args.fortilinkBackupLink : undefined;
            resourceInputs["fortilinkNeighborDetect"] = args ? args.fortilinkNeighborDetect : undefined;
            resourceInputs["fortilinkSplitInterface"] = args ? args.fortilinkSplitInterface : undefined;
            resourceInputs["fortilinkStacking"] = args ? args.fortilinkStacking : undefined;
            resourceInputs["forwardDomain"] = args ? args.forwardDomain : undefined;
            resourceInputs["forwardErrorCorrection"] = args ? args.forwardErrorCorrection : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["gwdetect"] = args ? args.gwdetect : undefined;
            resourceInputs["haPriority"] = args ? args.haPriority : undefined;
            resourceInputs["icmpAcceptRedirect"] = args ? args.icmpAcceptRedirect : undefined;
            resourceInputs["icmpSendRedirect"] = args ? args.icmpSendRedirect : undefined;
            resourceInputs["identAccept"] = args ? args.identAccept : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["ikeSamlServer"] = args ? args.ikeSamlServer : undefined;
            resourceInputs["inbandwidth"] = args ? args.inbandwidth : undefined;
            resourceInputs["ingressShapingProfile"] = args ? args.ingressShapingProfile : undefined;
            resourceInputs["ingressSpilloverThreshold"] = args ? args.ingressSpilloverThreshold : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["internal"] = args ? args.internal : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["ipManagedByFortiipam"] = args ? args.ipManagedByFortiipam : undefined;
            resourceInputs["ipmac"] = args ? args.ipmac : undefined;
            resourceInputs["ipsSnifferMode"] = args ? args.ipsSnifferMode : undefined;
            resourceInputs["ipunnumbered"] = args ? args.ipunnumbered : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["l2forward"] = args ? args.l2forward : undefined;
            resourceInputs["lacpHaSecondary"] = args ? args.lacpHaSecondary : undefined;
            resourceInputs["lacpHaSlave"] = args ? args.lacpHaSlave : undefined;
            resourceInputs["lacpMode"] = args ? args.lacpMode : undefined;
            resourceInputs["lacpSpeed"] = args ? args.lacpSpeed : undefined;
            resourceInputs["lcpEchoInterval"] = args ? args.lcpEchoInterval : undefined;
            resourceInputs["lcpMaxEchoFails"] = args ? args.lcpMaxEchoFails : undefined;
            resourceInputs["linkUpDelay"] = args ? args.linkUpDelay : undefined;
            resourceInputs["lldpNetworkPolicy"] = args ? args.lldpNetworkPolicy : undefined;
            resourceInputs["lldpReception"] = args ? args.lldpReception : undefined;
            resourceInputs["lldpTransmission"] = args ? args.lldpTransmission : undefined;
            resourceInputs["macaddr"] = args ? args.macaddr : undefined;
            resourceInputs["managedDevices"] = args ? args.managedDevices : undefined;
            resourceInputs["managedSubnetworkSize"] = args ? args.managedSubnetworkSize : undefined;
            resourceInputs["managementIp"] = args ? args.managementIp : undefined;
            resourceInputs["measuredDownstreamBandwidth"] = args ? args.measuredDownstreamBandwidth : undefined;
            resourceInputs["measuredUpstreamBandwidth"] = args ? args.measuredUpstreamBandwidth : undefined;
            resourceInputs["mediatype"] = args ? args.mediatype : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["minLinks"] = args ? args.minLinks : undefined;
            resourceInputs["minLinksDown"] = args ? args.minLinksDown : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["monitorBandwidth"] = args ? args.monitorBandwidth : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["mtuOverride"] = args ? args.mtuOverride : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ndiscforward"] = args ? args.ndiscforward : undefined;
            resourceInputs["netbiosForward"] = args ? args.netbiosForward : undefined;
            resourceInputs["netflowSampler"] = args ? args.netflowSampler : undefined;
            resourceInputs["outbandwidth"] = args ? args.outbandwidth : undefined;
            resourceInputs["padtRetryTimeout"] = args ? args.padtRetryTimeout : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["pingServStatus"] = args ? args.pingServStatus : undefined;
            resourceInputs["pollingInterval"] = args ? args.pollingInterval : undefined;
            resourceInputs["pppoeUnnumberedNegotiate"] = args ? args.pppoeUnnumberedNegotiate : undefined;
            resourceInputs["pptpAuthType"] = args ? args.pptpAuthType : undefined;
            resourceInputs["pptpClient"] = args ? args.pptpClient : undefined;
            resourceInputs["pptpPassword"] = args?.pptpPassword ? pulumi.secret(args.pptpPassword) : undefined;
            resourceInputs["pptpServerIp"] = args ? args.pptpServerIp : undefined;
            resourceInputs["pptpTimeout"] = args ? args.pptpTimeout : undefined;
            resourceInputs["pptpUser"] = args ? args.pptpUser : undefined;
            resourceInputs["preserveSessionRoute"] = args ? args.preserveSessionRoute : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["priorityOverride"] = args ? args.priorityOverride : undefined;
            resourceInputs["proxyCaptivePortal"] = args ? args.proxyCaptivePortal : undefined;
            resourceInputs["reachableTime"] = args ? args.reachableTime : undefined;
            resourceInputs["redundantInterface"] = args ? args.redundantInterface : undefined;
            resourceInputs["remoteIp"] = args ? args.remoteIp : undefined;
            resourceInputs["replacemsgOverrideGroup"] = args ? args.replacemsgOverrideGroup : undefined;
            resourceInputs["ringRx"] = args ? args.ringRx : undefined;
            resourceInputs["ringTx"] = args ? args.ringTx : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["sampleDirection"] = args ? args.sampleDirection : undefined;
            resourceInputs["sampleRate"] = args ? args.sampleRate : undefined;
            resourceInputs["scanBotnetConnections"] = args ? args.scanBotnetConnections : undefined;
            resourceInputs["secondaryIp"] = args ? args.secondaryIp : undefined;
            resourceInputs["secondaryips"] = args ? args.secondaryips : undefined;
            resourceInputs["securityExemptList"] = args ? args.securityExemptList : undefined;
            resourceInputs["securityExternalLogout"] = args ? args.securityExternalLogout : undefined;
            resourceInputs["securityExternalWeb"] = args ? args.securityExternalWeb : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["securityMacAuthBypass"] = args ? args.securityMacAuthBypass : undefined;
            resourceInputs["securityMode"] = args ? args.securityMode : undefined;
            resourceInputs["securityRedirectUrl"] = args ? args.securityRedirectUrl : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["sflowSampler"] = args ? args.sflowSampler : undefined;
            resourceInputs["snmpIndex"] = args ? args.snmpIndex : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["spilloverThreshold"] = args ? args.spilloverThreshold : undefined;
            resourceInputs["srcCheck"] = args ? args.srcCheck : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["stp"] = args ? args.stp : undefined;
            resourceInputs["stpHaSecondary"] = args ? args.stpHaSecondary : undefined;
            resourceInputs["stpforward"] = args ? args.stpforward : undefined;
            resourceInputs["stpforwardMode"] = args ? args.stpforwardMode : undefined;
            resourceInputs["subst"] = args ? args.subst : undefined;
            resourceInputs["substituteDstMac"] = args ? args.substituteDstMac : undefined;
            resourceInputs["swcFirstCreate"] = args ? args.swcFirstCreate : undefined;
            resourceInputs["swcVlan"] = args ? args.swcVlan : undefined;
            resourceInputs["switch"] = args ? args.switch : undefined;
            resourceInputs["switchControllerAccessVlan"] = args ? args.switchControllerAccessVlan : undefined;
            resourceInputs["switchControllerArpInspection"] = args ? args.switchControllerArpInspection : undefined;
            resourceInputs["switchControllerDhcpSnooping"] = args ? args.switchControllerDhcpSnooping : undefined;
            resourceInputs["switchControllerDhcpSnoopingOption82"] = args ? args.switchControllerDhcpSnoopingOption82 : undefined;
            resourceInputs["switchControllerDhcpSnoopingVerifyMac"] = args ? args.switchControllerDhcpSnoopingVerifyMac : undefined;
            resourceInputs["switchControllerDynamic"] = args ? args.switchControllerDynamic : undefined;
            resourceInputs["switchControllerFeature"] = args ? args.switchControllerFeature : undefined;
            resourceInputs["switchControllerIgmpSnooping"] = args ? args.switchControllerIgmpSnooping : undefined;
            resourceInputs["switchControllerIgmpSnoopingFastLeave"] = args ? args.switchControllerIgmpSnoopingFastLeave : undefined;
            resourceInputs["switchControllerIgmpSnoopingProxy"] = args ? args.switchControllerIgmpSnoopingProxy : undefined;
            resourceInputs["switchControllerIotScanning"] = args ? args.switchControllerIotScanning : undefined;
            resourceInputs["switchControllerLearningLimit"] = args ? args.switchControllerLearningLimit : undefined;
            resourceInputs["switchControllerMgmtVlan"] = args ? args.switchControllerMgmtVlan : undefined;
            resourceInputs["switchControllerNac"] = args ? args.switchControllerNac : undefined;
            resourceInputs["switchControllerNetflowCollect"] = args ? args.switchControllerNetflowCollect : undefined;
            resourceInputs["switchControllerOffload"] = args ? args.switchControllerOffload : undefined;
            resourceInputs["switchControllerOffloadGw"] = args ? args.switchControllerOffloadGw : undefined;
            resourceInputs["switchControllerOffloadIp"] = args ? args.switchControllerOffloadIp : undefined;
            resourceInputs["switchControllerRspanMode"] = args ? args.switchControllerRspanMode : undefined;
            resourceInputs["switchControllerSourceIp"] = args ? args.switchControllerSourceIp : undefined;
            resourceInputs["switchControllerTrafficPolicy"] = args ? args.switchControllerTrafficPolicy : undefined;
            resourceInputs["systemId"] = args ? args.systemId : undefined;
            resourceInputs["systemIdType"] = args ? args.systemIdType : undefined;
            resourceInputs["taggings"] = args ? args.taggings : undefined;
            resourceInputs["tcpMss"] = args ? args.tcpMss : undefined;
            resourceInputs["trunk"] = args ? args.trunk : undefined;
            resourceInputs["trustIp1"] = args ? args.trustIp1 : undefined;
            resourceInputs["trustIp2"] = args ? args.trustIp2 : undefined;
            resourceInputs["trustIp3"] = args ? args.trustIp3 : undefined;
            resourceInputs["trustIp61"] = args ? args.trustIp61 : undefined;
            resourceInputs["trustIp62"] = args ? args.trustIp62 : undefined;
            resourceInputs["trustIp63"] = args ? args.trustIp63 : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vdom"] = args ? args.vdom : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["vindex"] = args ? args.vindex : undefined;
            resourceInputs["vlanProtocol"] = args ? args.vlanProtocol : undefined;
            resourceInputs["vlanforward"] = args ? args.vlanforward : undefined;
            resourceInputs["vlanid"] = args ? args.vlanid : undefined;
            resourceInputs["vrf"] = args ? args.vrf : undefined;
            resourceInputs["vrrpVirtualMac"] = args ? args.vrrpVirtualMac : undefined;
            resourceInputs["vrrps"] = args ? args.vrrps : undefined;
            resourceInputs["wccp"] = args ? args.wccp : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
            resourceInputs["winsIp"] = args ? args.winsIp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["eapPassword", "password", "pptpPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Interface.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Interface resources.
 */
export interface InterfaceState {
    /**
     * PPPoE server name.
     */
    acName?: pulumi.Input<string>;
    /**
     * Aggregate interface.
     */
    aggregate?: pulumi.Input<string>;
    /**
     * Type of aggregation. Valid values: `physical`, `vxlan`.
     */
    aggregateType?: pulumi.Input<string>;
    /**
     * Frame distribution algorithm.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * Alias will be displayed with the interface name to make it easier to distinguish.
     */
    alias?: pulumi.Input<string>;
    /**
     * Permitted types of management access to this interface.
     */
    allowaccess?: pulumi.Input<string>;
    /**
     * Enable/disable automatic registration of unknown FortiAP devices. Valid values: `enable`, `disable`.
     */
    apDiscover?: pulumi.Input<string>;
    /**
     * Enable/disable ARP forwarding. Valid values: `enable`, `disable`.
     */
    arpforward?: pulumi.Input<string>;
    /**
     * HTTPS server certificate.
     */
    authCert?: pulumi.Input<string>;
    /**
     * Address of captive portal.
     */
    authPortalAddr?: pulumi.Input<string>;
    /**
     * PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
     */
    authType?: pulumi.Input<string>;
    /**
     * Enable/disable automatic authorization of dedicated Fortinet extension device on this interface. Valid values: `enable`, `disable`.
     */
    autoAuthExtensionDevice?: pulumi.Input<string>;
    /**
     * Indicates whether the interface is automatically created by FortiGate, for example, created during the VPN creation process. If it is, set it to "auto", else keep it empty.
     */
    autogenerated?: pulumi.Input<string>;
    /**
     * Bandwidth measure time
     */
    bandwidthMeasureTime?: pulumi.Input<number>;
    /**
     * Bidirectional Forwarding Detection (BFD) settings. Valid values: `global`, `enable`, `disable`.
     */
    bfd?: pulumi.Input<string>;
    /**
     * BFD desired minimal transmit interval.
     */
    bfdDesiredMinTx?: pulumi.Input<number>;
    /**
     * BFD detection multiplier.
     */
    bfdDetectMult?: pulumi.Input<number>;
    /**
     * BFD required minimal receive interval.
     */
    bfdRequiredMinRx?: pulumi.Input<number>;
    /**
     * Enable/disable broadcasting FortiClient discovery messages. Valid values: `enable`, `disable`.
     */
    broadcastForticlientDiscovery?: pulumi.Input<string>;
    /**
     * Enable/disable broadcast forwarding. Valid values: `enable`, `disable`.
     */
    broadcastForward?: pulumi.Input<string>;
    /**
     * Enable/disable captive portal.
     */
    captivePortal?: pulumi.Input<number>;
    /**
     * CLI connection status.
     */
    cliConnStatus?: pulumi.Input<number>;
    /**
     * DHCP client options. The structure of `clientOptions` block is documented below.
     */
    clientOptions?: pulumi.Input<pulumi.Input<inputs.system.InterfaceClientOption>[]>;
    /**
     * Color of icon on the GUI.
     */
    color?: pulumi.Input<number>;
    /**
     * Configure interface for single purpose. Valid values: `none`, `management`.
     */
    dedicatedTo?: pulumi.Input<string>;
    /**
     * default purdue level of device detected on this interface. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
     */
    defaultPurdueLevel?: pulumi.Input<string>;
    /**
     * Enable to get the gateway IP from the DHCP or PPPoE server. Valid values: `enable`, `disable`.
     */
    defaultgw?: pulumi.Input<string>;
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * MTU of detected peer (0 - 4294967295).
     */
    detectedPeerMtu?: pulumi.Input<number>;
    /**
     * Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
     */
    detectprotocol?: pulumi.Input<string>;
    /**
     * Gateway's ping server for this IP.
     */
    detectserver?: pulumi.Input<string>;
    /**
     * Device access list.
     */
    deviceAccessList?: pulumi.Input<string>;
    /**
     * Enable/disable passively gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
     */
    deviceIdentification?: pulumi.Input<string>;
    /**
     * Enable/disable active gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
     */
    deviceIdentificationActiveScan?: pulumi.Input<string>;
    /**
     * Enable/disable inclusion of devices detected on this interface in network vulnerability scans. Valid values: `disable`, `enable`.
     */
    deviceNetscan?: pulumi.Input<string>;
    /**
     * Enable/disable passive gathering of user identity information about users on this interface. Valid values: `enable`, `disable`.
     */
    deviceUserIdentification?: pulumi.Input<string>;
    /**
     * Device Index.
     */
    devindex?: pulumi.Input<number>;
    /**
     * Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable). Valid values: `disable`, `enable`.
     */
    dhcpBroadcastFlag?: pulumi.Input<string>;
    /**
     * Enable/disable addition of classless static routes retrieved from DHCP server. Valid values: `enable`, `disable`.
     */
    dhcpClasslessRouteAddition?: pulumi.Input<string>;
    /**
     * DHCP client identifier.
     */
    dhcpClientIdentifier?: pulumi.Input<string>;
    /**
     * Enable/disable DHCP relay agent option. Valid values: `enable`, `disable`.
     */
    dhcpRelayAgentOption?: pulumi.Input<string>;
    /**
     * DHCP relay circuit ID.
     */
    dhcpRelayCircuitId?: pulumi.Input<string>;
    /**
     * Specify outgoing interface to reach server.
     */
    dhcpRelayInterface?: pulumi.Input<string>;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    dhcpRelayInterfaceSelectMethod?: pulumi.Input<string>;
    /**
     * DHCP relay IP address.
     */
    dhcpRelayIp?: pulumi.Input<string>;
    /**
     * DHCP relay link selection.
     */
    dhcpRelayLinkSelection?: pulumi.Input<string>;
    /**
     * Enable/disable sending DHCP request to all servers. Valid values: `disable`, `enable`.
     */
    dhcpRelayRequestAllServer?: pulumi.Input<string>;
    /**
     * Enable/disable allowing this interface to act as a DHCP relay. Valid values: `disable`, `enable`.
     */
    dhcpRelayService?: pulumi.Input<string>;
    /**
     * IP address used by the DHCP relay as its source IP.
     */
    dhcpRelaySourceIp?: pulumi.Input<string>;
    /**
     * DHCP relay type (regular or IPsec). Valid values: `regular`, `ipsec`.
     */
    dhcpRelayType?: pulumi.Input<string>;
    /**
     * DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
     */
    dhcpRenewTime?: pulumi.Input<number>;
    /**
     * Enable/disable DHCP smart relay. Valid values: `disable`, `enable`.
     */
    dhcpSmartRelay?: pulumi.Input<string>;
    /**
     * Configure DHCP server access list. The structure of `dhcpSnoopingServerList` block is documented below.
     */
    dhcpSnoopingServerLists?: pulumi.Input<pulumi.Input<inputs.system.InterfaceDhcpSnoopingServerList>[]>;
    /**
     * Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
     */
    discRetryTimeout?: pulumi.Input<number>;
    /**
     * Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
     */
    disconnectThreshold?: pulumi.Input<number>;
    /**
     * Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
     */
    distance?: pulumi.Input<number>;
    /**
     * Enable/disable use DNS acquired by DHCP or PPPoE. Valid values: `enable`, `disable`.
     */
    dnsServerOverride?: pulumi.Input<string>;
    /**
     * DNS transport protocols. Valid values: `cleartext`, `dot`, `doh`.
     */
    dnsServerProtocol?: pulumi.Input<string>;
    /**
     * Enable/disable drop fragment packets. Valid values: `enable`, `disable`.
     */
    dropFragment?: pulumi.Input<string>;
    /**
     * Enable/disable drop overlapped fragment packets. Valid values: `enable`, `disable`.
     */
    dropOverlappedFragment?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * EAP CA certificate name.
     */
    eapCaCert?: pulumi.Input<string>;
    /**
     * EAP identity.
     */
    eapIdentity?: pulumi.Input<string>;
    /**
     * EAP method. Valid values: `tls`, `peap`.
     */
    eapMethod?: pulumi.Input<string>;
    /**
     * EAP password.
     */
    eapPassword?: pulumi.Input<string>;
    /**
     * Enable/disable EAP-Supplicant. Valid values: `enable`, `disable`.
     */
    eapSupplicant?: pulumi.Input<string>;
    /**
     * EAP user certificate name.
     */
    eapUserCert?: pulumi.Input<string>;
    /**
     * Outgoing traffic shaping profile.
     */
    egressShapingProfile?: pulumi.Input<string>;
    /**
     * Enable/disable endpoint compliance enforcement. Valid values: `enable`, `disable`.
     */
    endpointCompliance?: pulumi.Input<string>;
    /**
     * Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
     */
    estimatedDownstreamBandwidth?: pulumi.Input<number>;
    /**
     * Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
     */
    estimatedUpstreamBandwidth?: pulumi.Input<number>;
    /**
     * Enable/disable the explicit FTP proxy on this interface. Valid values: `enable`, `disable`.
     */
    explicitFtpProxy?: pulumi.Input<string>;
    /**
     * Enable/disable the explicit web proxy on this interface. Valid values: `enable`, `disable`.
     */
    explicitWebProxy?: pulumi.Input<string>;
    /**
     * Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet). Valid values: `enable`, `disable`.
     */
    external?: pulumi.Input<string>;
    /**
     * Action on extender when interface fail . Valid values: `soft-restart`, `hard-restart`, `reboot`.
     */
    failActionOnExtender?: pulumi.Input<string>;
    /**
     * Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `failAlertInterfaces` block is documented below.
     */
    failAlertInterfaces?: pulumi.Input<pulumi.Input<inputs.system.InterfaceFailAlertInterface>[]>;
    /**
     * Select link-failed-signal or link-down method to alert about a failed link. Valid values: `link-failed-signal`, `link-down`.
     */
    failAlertMethod?: pulumi.Input<string>;
    /**
     * Enable/disable fail detection features for this interface. Valid values: `enable`, `disable`.
     */
    failDetect?: pulumi.Input<string>;
    /**
     * Options for detecting that this interface has failed. Valid values: `detectserver`, `link-down`.
     */
    failDetectOption?: pulumi.Input<string>;
    /**
     * Enable/disable FortiHeartBeat (FortiTelemetry on GUI). Valid values: `enable`, `disable`.
     */
    fortiheartbeat?: pulumi.Input<string>;
    /**
     * Enable FortiLink to dedicate this interface to manage other Fortinet devices. Valid values: `enable`, `disable`.
     */
    fortilink?: pulumi.Input<string>;
    /**
     * fortilink split interface backup link.
     */
    fortilinkBackupLink?: pulumi.Input<number>;
    /**
     * Protocol for FortiGate neighbor discovery. Valid values: `lldp`, `fortilink`.
     */
    fortilinkNeighborDetect?: pulumi.Input<string>;
    /**
     * Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy. Valid values: `enable`, `disable`.
     */
    fortilinkSplitInterface?: pulumi.Input<string>;
    /**
     * Enable/disable FortiLink switch-stacking on this interface. Valid values: `enable`, `disable`.
     */
    fortilinkStacking?: pulumi.Input<string>;
    /**
     * Transparent mode forward domain.
     */
    forwardDomain?: pulumi.Input<number>;
    /**
     * Configure forward error correction (FEC). Valid values: `none`, `disable`, `cl91-rs-fec`, `cl74-fc-fec`.
     */
    forwardErrorCorrection?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
     */
    gwdetect?: pulumi.Input<string>;
    /**
     * HA election priority for the PING server.
     */
    haPriority?: pulumi.Input<number>;
    /**
     * Enable/disable ICMP accept redirect. Valid values: `enable`, `disable`.
     */
    icmpAcceptRedirect?: pulumi.Input<string>;
    /**
     * Enable/disable ICMP send redirect. Valid values: `enable`, `disable`.
     */
    icmpSendRedirect?: pulumi.Input<string>;
    /**
     * Enable/disable authentication for this interface. Valid values: `enable`, `disable`.
     */
    identAccept?: pulumi.Input<string>;
    /**
     * PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * Configure IKE authentication SAML server.
     */
    ikeSamlServer?: pulumi.Input<string>;
    /**
     * Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
     */
    inbandwidth?: pulumi.Input<number>;
    /**
     * Incoming traffic shaping profile.
     */
    ingressShapingProfile?: pulumi.Input<string>;
    /**
     * Ingress Spillover threshold (0 - 16776000 kbps).
     */
    ingressSpilloverThreshold?: pulumi.Input<number>;
    /**
     * Interface name.
     */
    interface?: pulumi.Input<string>;
    /**
     * Implicitly created.
     */
    internal?: pulumi.Input<number>;
    /**
     * Interface IPv4 address and subnet mask, syntax: X.X.X.X/24.
     */
    ip?: pulumi.Input<string>;
    /**
     * Enable/disable automatic IP address assignment of this interface by FortiIPAM.
     */
    ipManagedByFortiipam?: pulumi.Input<string>;
    /**
     * Enable/disable IP/MAC binding. Valid values: `enable`, `disable`.
     */
    ipmac?: pulumi.Input<string>;
    /**
     * Enable/disable the use of this interface as a one-armed sniffer. Valid values: `enable`, `disable`.
     */
    ipsSnifferMode?: pulumi.Input<string>;
    /**
     * Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
     */
    ipunnumbered?: pulumi.Input<string>;
    /**
     * IPv6 of interface. The structure of `ipv6` block is documented below.
     */
    ipv6?: pulumi.Input<inputs.system.InterfaceIpv6>;
    /**
     * Enable/disable l2 forwarding. Valid values: `enable`, `disable`.
     */
    l2forward?: pulumi.Input<string>;
    /**
     * LACP HA secondary member. Valid values: `enable`, `disable`.
     */
    lacpHaSecondary?: pulumi.Input<string>;
    /**
     * LACP HA slave. Valid values: `enable`, `disable`.
     */
    lacpHaSlave?: pulumi.Input<string>;
    /**
     * LACP mode. Valid values: `static`, `passive`, `active`.
     */
    lacpMode?: pulumi.Input<string>;
    /**
     * How often the interface sends LACP messages. Valid values: `slow`, `fast`.
     */
    lacpSpeed?: pulumi.Input<string>;
    /**
     * Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
     */
    lcpEchoInterval?: pulumi.Input<number>;
    /**
     * Maximum missed LCP echo messages before disconnect.
     */
    lcpMaxEchoFails?: pulumi.Input<number>;
    /**
     * Number of milliseconds to wait before considering a link is up.
     */
    linkUpDelay?: pulumi.Input<number>;
    /**
     * LLDP-MED network policy profile.
     */
    lldpNetworkPolicy?: pulumi.Input<string>;
    /**
     * Enable/disable Link Layer Discovery Protocol (LLDP) reception. Valid values: `enable`, `disable`, `vdom`.
     */
    lldpReception?: pulumi.Input<string>;
    /**
     * Enable/disable Link Layer Discovery Protocol (LLDP) transmission. Valid values: `enable`, `disable`, `vdom`.
     */
    lldpTransmission?: pulumi.Input<string>;
    /**
     * Change the interface's MAC address.
     */
    macaddr?: pulumi.Input<string>;
    /**
     * Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managedDevice` block is documented below.
     */
    managedDevices?: pulumi.Input<pulumi.Input<inputs.system.InterfaceManagedDevice>[]>;
    /**
     * Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
     */
    managedSubnetworkSize?: pulumi.Input<string>;
    /**
     * High Availability in-band management IP address of this interface.
     */
    managementIp?: pulumi.Input<string>;
    /**
     * Measured downstream bandwidth (kbps).
     */
    measuredDownstreamBandwidth?: pulumi.Input<number>;
    /**
     * Measured upstream bandwidth (kbps).
     */
    measuredUpstreamBandwidth?: pulumi.Input<number>;
    /**
     * Select SFP media interface type Valid values: `none`, `gmii`, `sgmii`, `sr`, `lr`, `cr`, `sr4`, `lr4`, `cr4`.
     */
    mediatype?: pulumi.Input<string>;
    /**
     * Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
     */
    members?: pulumi.Input<pulumi.Input<inputs.system.InterfaceMember>[]>;
    /**
     * Minimum number of aggregated ports that must be up.
     */
    minLinks?: pulumi.Input<number>;
    /**
     * Action to take when less than the configured minimum number of links are active. Valid values: `operational`, `administrative`.
     */
    minLinksDown?: pulumi.Input<string>;
    /**
     * Addressing mode (static, DHCP, PPPoE). Valid values: `static`, `dhcp`, `pppoe`.
     */
    mode?: pulumi.Input<string>;
    /**
     * Enable monitoring bandwidth on this interface. Valid values: `enable`, `disable`.
     */
    monitorBandwidth?: pulumi.Input<string>;
    /**
     * MTU value for this interface.
     */
    mtu?: pulumi.Input<number>;
    /**
     * Enable to set a custom MTU for this interface. Valid values: `enable`, `disable`.
     */
    mtuOverride?: pulumi.Input<string>;
    /**
     * Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable NDISC forwarding. Valid values: `enable`, `disable`.
     */
    ndiscforward?: pulumi.Input<string>;
    /**
     * Enable/disable NETBIOS forwarding. Valid values: `disable`, `enable`.
     */
    netbiosForward?: pulumi.Input<string>;
    /**
     * Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both). Valid values: `disable`, `tx`, `rx`, `both`.
     */
    netflowSampler?: pulumi.Input<string>;
    /**
     * Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
     */
    outbandwidth?: pulumi.Input<number>;
    /**
     * PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
     */
    padtRetryTimeout?: pulumi.Input<number>;
    /**
     * PPPoE account's password.
     */
    password?: pulumi.Input<string>;
    /**
     * PING server status.
     */
    pingServStatus?: pulumi.Input<number>;
    /**
     * sFlow polling interval (1 - 255 sec).
     */
    pollingInterval?: pulumi.Input<number>;
    /**
     * Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
     */
    pppoeUnnumberedNegotiate?: pulumi.Input<string>;
    /**
     * PPTP authentication type. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
     */
    pptpAuthType?: pulumi.Input<string>;
    /**
     * Enable/disable PPTP client. Valid values: `enable`, `disable`.
     */
    pptpClient?: pulumi.Input<string>;
    /**
     * PPTP password.
     */
    pptpPassword?: pulumi.Input<string>;
    /**
     * PPTP server IP address.
     */
    pptpServerIp?: pulumi.Input<string>;
    /**
     * Idle timer in minutes (0 for disabled).
     */
    pptpTimeout?: pulumi.Input<number>;
    /**
     * PPTP user name.
     */
    pptpUser?: pulumi.Input<string>;
    /**
     * Enable/disable preservation of session route when dirty. Valid values: `enable`, `disable`.
     */
    preserveSessionRoute?: pulumi.Input<string>;
    /**
     * Priority of learned routes.
     */
    priority?: pulumi.Input<number>;
    /**
     * Enable/disable fail back to higher priority port once recovered. Valid values: `enable`, `disable`.
     */
    priorityOverride?: pulumi.Input<string>;
    /**
     * Enable/disable proxy captive portal on this interface. Valid values: `enable`, `disable`.
     */
    proxyCaptivePortal?: pulumi.Input<string>;
    /**
     * IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
     */
    reachableTime?: pulumi.Input<number>;
    /**
     * Redundant interface.
     */
    redundantInterface?: pulumi.Input<string>;
    /**
     * Remote IP address of tunnel.
     */
    remoteIp?: pulumi.Input<string>;
    /**
     * Replacement message override group.
     */
    replacemsgOverrideGroup?: pulumi.Input<string>;
    /**
     * RX ring size.
     */
    ringRx?: pulumi.Input<number>;
    /**
     * TX ring size.
     */
    ringTx?: pulumi.Input<number>;
    /**
     * Interface role. Valid values: `lan`, `wan`, `dmz`, `undefined`.
     */
    role?: pulumi.Input<string>;
    /**
     * Data that NetFlow collects (rx, tx, or both). Valid values: `tx`, `rx`, `both`.
     */
    sampleDirection?: pulumi.Input<string>;
    /**
     * sFlow sample rate (10 - 99999).
     */
    sampleRate?: pulumi.Input<number>;
    /**
     * Enable monitoring or blocking connections to Botnet servers through this interface. Valid values: `disable`, `block`, `monitor`.
     */
    scanBotnetConnections?: pulumi.Input<string>;
    /**
     * Enable/disable adding a secondary IP to this interface. Valid values: `enable`, `disable`.
     */
    secondaryIp?: pulumi.Input<string>;
    /**
     * Second IP address of interface. The structure of `secondaryip` block is documented below.
     */
    secondaryips?: pulumi.Input<pulumi.Input<inputs.system.InterfaceSecondaryip>[]>;
    /**
     * Name of security-exempt-list.
     */
    securityExemptList?: pulumi.Input<string>;
    /**
     * URL of external authentication logout server.
     */
    securityExternalLogout?: pulumi.Input<string>;
    /**
     * URL of external authentication web server.
     */
    securityExternalWeb?: pulumi.Input<string>;
    /**
     * User groups that can authenticate with the captive portal. The structure of `securityGroups` block is documented below.
     */
    securityGroups?: pulumi.Input<pulumi.Input<inputs.system.InterfaceSecurityGroup>[]>;
    /**
     * Enable/disable MAC authentication bypass. Valid values: `mac-auth-only`, `enable`, `disable`.
     */
    securityMacAuthBypass?: pulumi.Input<string>;
    /**
     * Turn on captive portal authentication for this interface. Valid values: `none`, `captive-portal`, `802.1X`.
     */
    securityMode?: pulumi.Input<string>;
    /**
     * URL redirection after disclaimer/authentication.
     */
    securityRedirectUrl?: pulumi.Input<string>;
    /**
     * PPPoE service name.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Enable/disable sFlow on this interface. Valid values: `enable`, `disable`.
     */
    sflowSampler?: pulumi.Input<string>;
    /**
     * Permanent SNMP Index of the interface.
     */
    snmpIndex?: pulumi.Input<number>;
    /**
     * Interface speed. The default setting and the options available depend on the interface hardware.
     */
    speed?: pulumi.Input<string>;
    /**
     * Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
     */
    spilloverThreshold?: pulumi.Input<number>;
    /**
     * Enable/disable source IP check. Valid values: `enable`, `disable`.
     */
    srcCheck?: pulumi.Input<string>;
    /**
     * Bring the interface up or shut the interface down. Valid values: `up`, `down`.
     */
    status?: pulumi.Input<string>;
    /**
     * Enable/disable STP. Valid values: `disable`, `enable`.
     */
    stp?: pulumi.Input<string>;
    /**
     * Control STP behaviour on HA secondary. Valid values: `disable`, `enable`, `priority-adjust`.
     */
    stpHaSecondary?: pulumi.Input<string>;
    /**
     * Enable/disable STP forwarding. Valid values: `enable`, `disable`.
     */
    stpforward?: pulumi.Input<string>;
    /**
     * Configure STP forwarding mode. Valid values: `rpl-all-ext-id`, `rpl-bridge-ext-id`, `rpl-nothing`.
     */
    stpforwardMode?: pulumi.Input<string>;
    /**
     * Enable to always send packets from this interface to a destination MAC address. Valid values: `enable`, `disable`.
     */
    subst?: pulumi.Input<string>;
    /**
     * Destination MAC address that all packets are sent to from this interface.
     */
    substituteDstMac?: pulumi.Input<string>;
    /**
     * Initial create for switch-controller VLANs.
     */
    swcFirstCreate?: pulumi.Input<number>;
    /**
     * Creation status for switch-controller VLANs.
     */
    swcVlan?: pulumi.Input<number>;
    /**
     * Contained in switch.
     */
    switch?: pulumi.Input<string>;
    /**
     * Block FortiSwitch port-to-port traffic. Valid values: `enable`, `disable`.
     */
    switchControllerAccessVlan?: pulumi.Input<string>;
    /**
     * Enable/disable FortiSwitch ARP inspection. Valid values: `enable`, `disable`.
     */
    switchControllerArpInspection?: pulumi.Input<string>;
    /**
     * Switch controller DHCP snooping. Valid values: `enable`, `disable`.
     */
    switchControllerDhcpSnooping?: pulumi.Input<string>;
    /**
     * Switch controller DHCP snooping option82. Valid values: `enable`, `disable`.
     */
    switchControllerDhcpSnoopingOption82?: pulumi.Input<string>;
    /**
     * Switch controller DHCP snooping verify MAC. Valid values: `enable`, `disable`.
     */
    switchControllerDhcpSnoopingVerifyMac?: pulumi.Input<string>;
    /**
     * Integrated FortiLink settings for managed FortiSwitch.
     */
    switchControllerDynamic?: pulumi.Input<string>;
    /**
     * Interface's purpose when assigning traffic (read only).
     */
    switchControllerFeature?: pulumi.Input<string>;
    /**
     * Switch controller IGMP snooping. Valid values: `enable`, `disable`.
     */
    switchControllerIgmpSnooping?: pulumi.Input<string>;
    /**
     * Switch controller IGMP snooping fast-leave. Valid values: `enable`, `disable`.
     */
    switchControllerIgmpSnoopingFastLeave?: pulumi.Input<string>;
    /**
     * Switch controller IGMP snooping proxy. Valid values: `enable`, `disable`.
     */
    switchControllerIgmpSnoopingProxy?: pulumi.Input<string>;
    /**
     * Enable/disable managed FortiSwitch IoT scanning. Valid values: `enable`, `disable`.
     */
    switchControllerIotScanning?: pulumi.Input<string>;
    /**
     * Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
     */
    switchControllerLearningLimit?: pulumi.Input<number>;
    /**
     * VLAN to use for FortiLink management purposes.
     */
    switchControllerMgmtVlan?: pulumi.Input<number>;
    /**
     * Integrated NAC settings for managed FortiSwitch.
     */
    switchControllerNac?: pulumi.Input<string>;
    /**
     * NetFlow collection and processing. Valid values: `disable`, `enable`.
     */
    switchControllerNetflowCollect?: pulumi.Input<string>;
    /**
     * Enable/disable managed FortiSwitch routing offload. Valid values: `enable`, `disable`.
     */
    switchControllerOffload?: pulumi.Input<string>;
    /**
     * Enable/disable managed FortiSwitch routing offload gateway. Valid values: `enable`, `disable`.
     */
    switchControllerOffloadGw?: pulumi.Input<string>;
    /**
     * IP for routing offload on FortiSwitch.
     */
    switchControllerOffloadIp?: pulumi.Input<string>;
    /**
     * Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface. Valid values: `disable`, `enable`.
     */
    switchControllerRspanMode?: pulumi.Input<string>;
    /**
     * Source IP address used in FortiLink over L3 connections. Valid values: `outbound`, `fixed`.
     */
    switchControllerSourceIp?: pulumi.Input<string>;
    /**
     * Switch controller traffic policy for the VLAN.
     */
    switchControllerTrafficPolicy?: pulumi.Input<string>;
    /**
     * Define a system ID for the aggregate interface.
     */
    systemId?: pulumi.Input<string>;
    /**
     * Method in which system ID is generated. Valid values: `auto`, `user`.
     */
    systemIdType?: pulumi.Input<string>;
    /**
     * Config object tagging. The structure of `tagging` block is documented below.
     */
    taggings?: pulumi.Input<pulumi.Input<inputs.system.InterfaceTagging>[]>;
    /**
     * TCP maximum segment size. 0 means do not change segment size.
     */
    tcpMss?: pulumi.Input<number>;
    /**
     * Enable/disable VLAN trunk. Valid values: `enable`, `disable`.
     */
    trunk?: pulumi.Input<string>;
    /**
     * Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
     */
    trustIp1?: pulumi.Input<string>;
    /**
     * Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
     */
    trustIp2?: pulumi.Input<string>;
    /**
     * Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
     */
    trustIp3?: pulumi.Input<string>;
    /**
     * Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
     */
    trustIp61?: pulumi.Input<string>;
    /**
     * Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
     */
    trustIp62?: pulumi.Input<string>;
    /**
     * Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
     */
    trustIp63?: pulumi.Input<string>;
    /**
     * Interface type.
     */
    type?: pulumi.Input<string>;
    /**
     * Username of the PPPoE account, provided by your ISP.
     */
    username?: pulumi.Input<string>;
    /**
     * Interface is in this virtual domain (VDOM).
     */
    vdom?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Switch control interface VLAN ID.
     */
    vindex?: pulumi.Input<number>;
    /**
     * Ethernet protocol of VLAN. Valid values: `8021q`, `8021ad`.
     */
    vlanProtocol?: pulumi.Input<string>;
    /**
     * Enable/disable traffic forwarding between VLANs on this interface. Valid values: `enable`, `disable`.
     */
    vlanforward?: pulumi.Input<string>;
    /**
     * VLAN ID (1 - 4094).
     */
    vlanid?: pulumi.Input<number>;
    /**
     * Virtual Routing Forwarding ID.
     */
    vrf?: pulumi.Input<number>;
    /**
     * Enable/disable use of virtual MAC for VRRP. Valid values: `enable`, `disable`.
     */
    vrrpVirtualMac?: pulumi.Input<string>;
    /**
     * VRRP configuration. The structure of `vrrp` block is documented below.
     */
    vrrps?: pulumi.Input<pulumi.Input<inputs.system.InterfaceVrrp>[]>;
    /**
     * Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers. Valid values: `enable`, `disable`.
     */
    wccp?: pulumi.Input<string>;
    /**
     * Default weight for static routes (if route has no weight configured).
     */
    weight?: pulumi.Input<number>;
    /**
     * WINS server IP.
     */
    winsIp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Interface resource.
 */
export interface InterfaceArgs {
    /**
     * PPPoE server name.
     */
    acName?: pulumi.Input<string>;
    /**
     * Aggregate interface.
     */
    aggregate?: pulumi.Input<string>;
    /**
     * Type of aggregation. Valid values: `physical`, `vxlan`.
     */
    aggregateType?: pulumi.Input<string>;
    /**
     * Frame distribution algorithm.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * Alias will be displayed with the interface name to make it easier to distinguish.
     */
    alias?: pulumi.Input<string>;
    /**
     * Permitted types of management access to this interface.
     */
    allowaccess?: pulumi.Input<string>;
    /**
     * Enable/disable automatic registration of unknown FortiAP devices. Valid values: `enable`, `disable`.
     */
    apDiscover?: pulumi.Input<string>;
    /**
     * Enable/disable ARP forwarding. Valid values: `enable`, `disable`.
     */
    arpforward?: pulumi.Input<string>;
    /**
     * HTTPS server certificate.
     */
    authCert?: pulumi.Input<string>;
    /**
     * Address of captive portal.
     */
    authPortalAddr?: pulumi.Input<string>;
    /**
     * PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
     */
    authType?: pulumi.Input<string>;
    /**
     * Enable/disable automatic authorization of dedicated Fortinet extension device on this interface. Valid values: `enable`, `disable`.
     */
    autoAuthExtensionDevice?: pulumi.Input<string>;
    /**
     * Indicates whether the interface is automatically created by FortiGate, for example, created during the VPN creation process. If it is, set it to "auto", else keep it empty.
     */
    autogenerated?: pulumi.Input<string>;
    /**
     * Bandwidth measure time
     */
    bandwidthMeasureTime?: pulumi.Input<number>;
    /**
     * Bidirectional Forwarding Detection (BFD) settings. Valid values: `global`, `enable`, `disable`.
     */
    bfd?: pulumi.Input<string>;
    /**
     * BFD desired minimal transmit interval.
     */
    bfdDesiredMinTx?: pulumi.Input<number>;
    /**
     * BFD detection multiplier.
     */
    bfdDetectMult?: pulumi.Input<number>;
    /**
     * BFD required minimal receive interval.
     */
    bfdRequiredMinRx?: pulumi.Input<number>;
    /**
     * Enable/disable broadcasting FortiClient discovery messages. Valid values: `enable`, `disable`.
     */
    broadcastForticlientDiscovery?: pulumi.Input<string>;
    /**
     * Enable/disable broadcast forwarding. Valid values: `enable`, `disable`.
     */
    broadcastForward?: pulumi.Input<string>;
    /**
     * Enable/disable captive portal.
     */
    captivePortal?: pulumi.Input<number>;
    /**
     * CLI connection status.
     */
    cliConnStatus?: pulumi.Input<number>;
    /**
     * DHCP client options. The structure of `clientOptions` block is documented below.
     */
    clientOptions?: pulumi.Input<pulumi.Input<inputs.system.InterfaceClientOption>[]>;
    /**
     * Color of icon on the GUI.
     */
    color?: pulumi.Input<number>;
    /**
     * Configure interface for single purpose. Valid values: `none`, `management`.
     */
    dedicatedTo?: pulumi.Input<string>;
    /**
     * default purdue level of device detected on this interface. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
     */
    defaultPurdueLevel?: pulumi.Input<string>;
    /**
     * Enable to get the gateway IP from the DHCP or PPPoE server. Valid values: `enable`, `disable`.
     */
    defaultgw?: pulumi.Input<string>;
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * MTU of detected peer (0 - 4294967295).
     */
    detectedPeerMtu?: pulumi.Input<number>;
    /**
     * Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
     */
    detectprotocol?: pulumi.Input<string>;
    /**
     * Gateway's ping server for this IP.
     */
    detectserver?: pulumi.Input<string>;
    /**
     * Device access list.
     */
    deviceAccessList?: pulumi.Input<string>;
    /**
     * Enable/disable passively gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
     */
    deviceIdentification?: pulumi.Input<string>;
    /**
     * Enable/disable active gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
     */
    deviceIdentificationActiveScan?: pulumi.Input<string>;
    /**
     * Enable/disable inclusion of devices detected on this interface in network vulnerability scans. Valid values: `disable`, `enable`.
     */
    deviceNetscan?: pulumi.Input<string>;
    /**
     * Enable/disable passive gathering of user identity information about users on this interface. Valid values: `enable`, `disable`.
     */
    deviceUserIdentification?: pulumi.Input<string>;
    /**
     * Device Index.
     */
    devindex?: pulumi.Input<number>;
    /**
     * Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable). Valid values: `disable`, `enable`.
     */
    dhcpBroadcastFlag?: pulumi.Input<string>;
    /**
     * Enable/disable addition of classless static routes retrieved from DHCP server. Valid values: `enable`, `disable`.
     */
    dhcpClasslessRouteAddition?: pulumi.Input<string>;
    /**
     * DHCP client identifier.
     */
    dhcpClientIdentifier?: pulumi.Input<string>;
    /**
     * Enable/disable DHCP relay agent option. Valid values: `enable`, `disable`.
     */
    dhcpRelayAgentOption?: pulumi.Input<string>;
    /**
     * DHCP relay circuit ID.
     */
    dhcpRelayCircuitId?: pulumi.Input<string>;
    /**
     * Specify outgoing interface to reach server.
     */
    dhcpRelayInterface?: pulumi.Input<string>;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    dhcpRelayInterfaceSelectMethod?: pulumi.Input<string>;
    /**
     * DHCP relay IP address.
     */
    dhcpRelayIp?: pulumi.Input<string>;
    /**
     * DHCP relay link selection.
     */
    dhcpRelayLinkSelection?: pulumi.Input<string>;
    /**
     * Enable/disable sending DHCP request to all servers. Valid values: `disable`, `enable`.
     */
    dhcpRelayRequestAllServer?: pulumi.Input<string>;
    /**
     * Enable/disable allowing this interface to act as a DHCP relay. Valid values: `disable`, `enable`.
     */
    dhcpRelayService?: pulumi.Input<string>;
    /**
     * IP address used by the DHCP relay as its source IP.
     */
    dhcpRelaySourceIp?: pulumi.Input<string>;
    /**
     * DHCP relay type (regular or IPsec). Valid values: `regular`, `ipsec`.
     */
    dhcpRelayType?: pulumi.Input<string>;
    /**
     * DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
     */
    dhcpRenewTime?: pulumi.Input<number>;
    /**
     * Enable/disable DHCP smart relay. Valid values: `disable`, `enable`.
     */
    dhcpSmartRelay?: pulumi.Input<string>;
    /**
     * Configure DHCP server access list. The structure of `dhcpSnoopingServerList` block is documented below.
     */
    dhcpSnoopingServerLists?: pulumi.Input<pulumi.Input<inputs.system.InterfaceDhcpSnoopingServerList>[]>;
    /**
     * Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
     */
    discRetryTimeout?: pulumi.Input<number>;
    /**
     * Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
     */
    disconnectThreshold?: pulumi.Input<number>;
    /**
     * Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
     */
    distance?: pulumi.Input<number>;
    /**
     * Enable/disable use DNS acquired by DHCP or PPPoE. Valid values: `enable`, `disable`.
     */
    dnsServerOverride?: pulumi.Input<string>;
    /**
     * DNS transport protocols. Valid values: `cleartext`, `dot`, `doh`.
     */
    dnsServerProtocol?: pulumi.Input<string>;
    /**
     * Enable/disable drop fragment packets. Valid values: `enable`, `disable`.
     */
    dropFragment?: pulumi.Input<string>;
    /**
     * Enable/disable drop overlapped fragment packets. Valid values: `enable`, `disable`.
     */
    dropOverlappedFragment?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * EAP CA certificate name.
     */
    eapCaCert?: pulumi.Input<string>;
    /**
     * EAP identity.
     */
    eapIdentity?: pulumi.Input<string>;
    /**
     * EAP method. Valid values: `tls`, `peap`.
     */
    eapMethod?: pulumi.Input<string>;
    /**
     * EAP password.
     */
    eapPassword?: pulumi.Input<string>;
    /**
     * Enable/disable EAP-Supplicant. Valid values: `enable`, `disable`.
     */
    eapSupplicant?: pulumi.Input<string>;
    /**
     * EAP user certificate name.
     */
    eapUserCert?: pulumi.Input<string>;
    /**
     * Outgoing traffic shaping profile.
     */
    egressShapingProfile?: pulumi.Input<string>;
    /**
     * Enable/disable endpoint compliance enforcement. Valid values: `enable`, `disable`.
     */
    endpointCompliance?: pulumi.Input<string>;
    /**
     * Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
     */
    estimatedDownstreamBandwidth?: pulumi.Input<number>;
    /**
     * Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
     */
    estimatedUpstreamBandwidth?: pulumi.Input<number>;
    /**
     * Enable/disable the explicit FTP proxy on this interface. Valid values: `enable`, `disable`.
     */
    explicitFtpProxy?: pulumi.Input<string>;
    /**
     * Enable/disable the explicit web proxy on this interface. Valid values: `enable`, `disable`.
     */
    explicitWebProxy?: pulumi.Input<string>;
    /**
     * Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet). Valid values: `enable`, `disable`.
     */
    external?: pulumi.Input<string>;
    /**
     * Action on extender when interface fail . Valid values: `soft-restart`, `hard-restart`, `reboot`.
     */
    failActionOnExtender?: pulumi.Input<string>;
    /**
     * Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `failAlertInterfaces` block is documented below.
     */
    failAlertInterfaces?: pulumi.Input<pulumi.Input<inputs.system.InterfaceFailAlertInterface>[]>;
    /**
     * Select link-failed-signal or link-down method to alert about a failed link. Valid values: `link-failed-signal`, `link-down`.
     */
    failAlertMethod?: pulumi.Input<string>;
    /**
     * Enable/disable fail detection features for this interface. Valid values: `enable`, `disable`.
     */
    failDetect?: pulumi.Input<string>;
    /**
     * Options for detecting that this interface has failed. Valid values: `detectserver`, `link-down`.
     */
    failDetectOption?: pulumi.Input<string>;
    /**
     * Enable/disable FortiHeartBeat (FortiTelemetry on GUI). Valid values: `enable`, `disable`.
     */
    fortiheartbeat?: pulumi.Input<string>;
    /**
     * Enable FortiLink to dedicate this interface to manage other Fortinet devices. Valid values: `enable`, `disable`.
     */
    fortilink?: pulumi.Input<string>;
    /**
     * fortilink split interface backup link.
     */
    fortilinkBackupLink?: pulumi.Input<number>;
    /**
     * Protocol for FortiGate neighbor discovery. Valid values: `lldp`, `fortilink`.
     */
    fortilinkNeighborDetect?: pulumi.Input<string>;
    /**
     * Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy. Valid values: `enable`, `disable`.
     */
    fortilinkSplitInterface?: pulumi.Input<string>;
    /**
     * Enable/disable FortiLink switch-stacking on this interface. Valid values: `enable`, `disable`.
     */
    fortilinkStacking?: pulumi.Input<string>;
    /**
     * Transparent mode forward domain.
     */
    forwardDomain?: pulumi.Input<number>;
    /**
     * Configure forward error correction (FEC). Valid values: `none`, `disable`, `cl91-rs-fec`, `cl74-fc-fec`.
     */
    forwardErrorCorrection?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
     */
    gwdetect?: pulumi.Input<string>;
    /**
     * HA election priority for the PING server.
     */
    haPriority?: pulumi.Input<number>;
    /**
     * Enable/disable ICMP accept redirect. Valid values: `enable`, `disable`.
     */
    icmpAcceptRedirect?: pulumi.Input<string>;
    /**
     * Enable/disable ICMP send redirect. Valid values: `enable`, `disable`.
     */
    icmpSendRedirect?: pulumi.Input<string>;
    /**
     * Enable/disable authentication for this interface. Valid values: `enable`, `disable`.
     */
    identAccept?: pulumi.Input<string>;
    /**
     * PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * Configure IKE authentication SAML server.
     */
    ikeSamlServer?: pulumi.Input<string>;
    /**
     * Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
     */
    inbandwidth?: pulumi.Input<number>;
    /**
     * Incoming traffic shaping profile.
     */
    ingressShapingProfile?: pulumi.Input<string>;
    /**
     * Ingress Spillover threshold (0 - 16776000 kbps).
     */
    ingressSpilloverThreshold?: pulumi.Input<number>;
    /**
     * Interface name.
     */
    interface?: pulumi.Input<string>;
    /**
     * Implicitly created.
     */
    internal?: pulumi.Input<number>;
    /**
     * Interface IPv4 address and subnet mask, syntax: X.X.X.X/24.
     */
    ip?: pulumi.Input<string>;
    /**
     * Enable/disable automatic IP address assignment of this interface by FortiIPAM.
     */
    ipManagedByFortiipam?: pulumi.Input<string>;
    /**
     * Enable/disable IP/MAC binding. Valid values: `enable`, `disable`.
     */
    ipmac?: pulumi.Input<string>;
    /**
     * Enable/disable the use of this interface as a one-armed sniffer. Valid values: `enable`, `disable`.
     */
    ipsSnifferMode?: pulumi.Input<string>;
    /**
     * Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
     */
    ipunnumbered?: pulumi.Input<string>;
    /**
     * IPv6 of interface. The structure of `ipv6` block is documented below.
     */
    ipv6?: pulumi.Input<inputs.system.InterfaceIpv6>;
    /**
     * Enable/disable l2 forwarding. Valid values: `enable`, `disable`.
     */
    l2forward?: pulumi.Input<string>;
    /**
     * LACP HA secondary member. Valid values: `enable`, `disable`.
     */
    lacpHaSecondary?: pulumi.Input<string>;
    /**
     * LACP HA slave. Valid values: `enable`, `disable`.
     */
    lacpHaSlave?: pulumi.Input<string>;
    /**
     * LACP mode. Valid values: `static`, `passive`, `active`.
     */
    lacpMode?: pulumi.Input<string>;
    /**
     * How often the interface sends LACP messages. Valid values: `slow`, `fast`.
     */
    lacpSpeed?: pulumi.Input<string>;
    /**
     * Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
     */
    lcpEchoInterval?: pulumi.Input<number>;
    /**
     * Maximum missed LCP echo messages before disconnect.
     */
    lcpMaxEchoFails?: pulumi.Input<number>;
    /**
     * Number of milliseconds to wait before considering a link is up.
     */
    linkUpDelay?: pulumi.Input<number>;
    /**
     * LLDP-MED network policy profile.
     */
    lldpNetworkPolicy?: pulumi.Input<string>;
    /**
     * Enable/disable Link Layer Discovery Protocol (LLDP) reception. Valid values: `enable`, `disable`, `vdom`.
     */
    lldpReception?: pulumi.Input<string>;
    /**
     * Enable/disable Link Layer Discovery Protocol (LLDP) transmission. Valid values: `enable`, `disable`, `vdom`.
     */
    lldpTransmission?: pulumi.Input<string>;
    /**
     * Change the interface's MAC address.
     */
    macaddr?: pulumi.Input<string>;
    /**
     * Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managedDevice` block is documented below.
     */
    managedDevices?: pulumi.Input<pulumi.Input<inputs.system.InterfaceManagedDevice>[]>;
    /**
     * Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
     */
    managedSubnetworkSize?: pulumi.Input<string>;
    /**
     * High Availability in-band management IP address of this interface.
     */
    managementIp?: pulumi.Input<string>;
    /**
     * Measured downstream bandwidth (kbps).
     */
    measuredDownstreamBandwidth?: pulumi.Input<number>;
    /**
     * Measured upstream bandwidth (kbps).
     */
    measuredUpstreamBandwidth?: pulumi.Input<number>;
    /**
     * Select SFP media interface type Valid values: `none`, `gmii`, `sgmii`, `sr`, `lr`, `cr`, `sr4`, `lr4`, `cr4`.
     */
    mediatype?: pulumi.Input<string>;
    /**
     * Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
     */
    members?: pulumi.Input<pulumi.Input<inputs.system.InterfaceMember>[]>;
    /**
     * Minimum number of aggregated ports that must be up.
     */
    minLinks?: pulumi.Input<number>;
    /**
     * Action to take when less than the configured minimum number of links are active. Valid values: `operational`, `administrative`.
     */
    minLinksDown?: pulumi.Input<string>;
    /**
     * Addressing mode (static, DHCP, PPPoE). Valid values: `static`, `dhcp`, `pppoe`.
     */
    mode?: pulumi.Input<string>;
    /**
     * Enable monitoring bandwidth on this interface. Valid values: `enable`, `disable`.
     */
    monitorBandwidth?: pulumi.Input<string>;
    /**
     * MTU value for this interface.
     */
    mtu?: pulumi.Input<number>;
    /**
     * Enable to set a custom MTU for this interface. Valid values: `enable`, `disable`.
     */
    mtuOverride?: pulumi.Input<string>;
    /**
     * Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable NDISC forwarding. Valid values: `enable`, `disable`.
     */
    ndiscforward?: pulumi.Input<string>;
    /**
     * Enable/disable NETBIOS forwarding. Valid values: `disable`, `enable`.
     */
    netbiosForward?: pulumi.Input<string>;
    /**
     * Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both). Valid values: `disable`, `tx`, `rx`, `both`.
     */
    netflowSampler?: pulumi.Input<string>;
    /**
     * Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
     */
    outbandwidth?: pulumi.Input<number>;
    /**
     * PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
     */
    padtRetryTimeout?: pulumi.Input<number>;
    /**
     * PPPoE account's password.
     */
    password?: pulumi.Input<string>;
    /**
     * PING server status.
     */
    pingServStatus?: pulumi.Input<number>;
    /**
     * sFlow polling interval (1 - 255 sec).
     */
    pollingInterval?: pulumi.Input<number>;
    /**
     * Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
     */
    pppoeUnnumberedNegotiate?: pulumi.Input<string>;
    /**
     * PPTP authentication type. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
     */
    pptpAuthType?: pulumi.Input<string>;
    /**
     * Enable/disable PPTP client. Valid values: `enable`, `disable`.
     */
    pptpClient?: pulumi.Input<string>;
    /**
     * PPTP password.
     */
    pptpPassword?: pulumi.Input<string>;
    /**
     * PPTP server IP address.
     */
    pptpServerIp?: pulumi.Input<string>;
    /**
     * Idle timer in minutes (0 for disabled).
     */
    pptpTimeout?: pulumi.Input<number>;
    /**
     * PPTP user name.
     */
    pptpUser?: pulumi.Input<string>;
    /**
     * Enable/disable preservation of session route when dirty. Valid values: `enable`, `disable`.
     */
    preserveSessionRoute?: pulumi.Input<string>;
    /**
     * Priority of learned routes.
     */
    priority?: pulumi.Input<number>;
    /**
     * Enable/disable fail back to higher priority port once recovered. Valid values: `enable`, `disable`.
     */
    priorityOverride?: pulumi.Input<string>;
    /**
     * Enable/disable proxy captive portal on this interface. Valid values: `enable`, `disable`.
     */
    proxyCaptivePortal?: pulumi.Input<string>;
    /**
     * IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
     */
    reachableTime?: pulumi.Input<number>;
    /**
     * Redundant interface.
     */
    redundantInterface?: pulumi.Input<string>;
    /**
     * Remote IP address of tunnel.
     */
    remoteIp?: pulumi.Input<string>;
    /**
     * Replacement message override group.
     */
    replacemsgOverrideGroup?: pulumi.Input<string>;
    /**
     * RX ring size.
     */
    ringRx?: pulumi.Input<number>;
    /**
     * TX ring size.
     */
    ringTx?: pulumi.Input<number>;
    /**
     * Interface role. Valid values: `lan`, `wan`, `dmz`, `undefined`.
     */
    role?: pulumi.Input<string>;
    /**
     * Data that NetFlow collects (rx, tx, or both). Valid values: `tx`, `rx`, `both`.
     */
    sampleDirection?: pulumi.Input<string>;
    /**
     * sFlow sample rate (10 - 99999).
     */
    sampleRate?: pulumi.Input<number>;
    /**
     * Enable monitoring or blocking connections to Botnet servers through this interface. Valid values: `disable`, `block`, `monitor`.
     */
    scanBotnetConnections?: pulumi.Input<string>;
    /**
     * Enable/disable adding a secondary IP to this interface. Valid values: `enable`, `disable`.
     */
    secondaryIp?: pulumi.Input<string>;
    /**
     * Second IP address of interface. The structure of `secondaryip` block is documented below.
     */
    secondaryips?: pulumi.Input<pulumi.Input<inputs.system.InterfaceSecondaryip>[]>;
    /**
     * Name of security-exempt-list.
     */
    securityExemptList?: pulumi.Input<string>;
    /**
     * URL of external authentication logout server.
     */
    securityExternalLogout?: pulumi.Input<string>;
    /**
     * URL of external authentication web server.
     */
    securityExternalWeb?: pulumi.Input<string>;
    /**
     * User groups that can authenticate with the captive portal. The structure of `securityGroups` block is documented below.
     */
    securityGroups?: pulumi.Input<pulumi.Input<inputs.system.InterfaceSecurityGroup>[]>;
    /**
     * Enable/disable MAC authentication bypass. Valid values: `mac-auth-only`, `enable`, `disable`.
     */
    securityMacAuthBypass?: pulumi.Input<string>;
    /**
     * Turn on captive portal authentication for this interface. Valid values: `none`, `captive-portal`, `802.1X`.
     */
    securityMode?: pulumi.Input<string>;
    /**
     * URL redirection after disclaimer/authentication.
     */
    securityRedirectUrl?: pulumi.Input<string>;
    /**
     * PPPoE service name.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Enable/disable sFlow on this interface. Valid values: `enable`, `disable`.
     */
    sflowSampler?: pulumi.Input<string>;
    /**
     * Permanent SNMP Index of the interface.
     */
    snmpIndex?: pulumi.Input<number>;
    /**
     * Interface speed. The default setting and the options available depend on the interface hardware.
     */
    speed?: pulumi.Input<string>;
    /**
     * Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
     */
    spilloverThreshold?: pulumi.Input<number>;
    /**
     * Enable/disable source IP check. Valid values: `enable`, `disable`.
     */
    srcCheck?: pulumi.Input<string>;
    /**
     * Bring the interface up or shut the interface down. Valid values: `up`, `down`.
     */
    status?: pulumi.Input<string>;
    /**
     * Enable/disable STP. Valid values: `disable`, `enable`.
     */
    stp?: pulumi.Input<string>;
    /**
     * Control STP behaviour on HA secondary. Valid values: `disable`, `enable`, `priority-adjust`.
     */
    stpHaSecondary?: pulumi.Input<string>;
    /**
     * Enable/disable STP forwarding. Valid values: `enable`, `disable`.
     */
    stpforward?: pulumi.Input<string>;
    /**
     * Configure STP forwarding mode. Valid values: `rpl-all-ext-id`, `rpl-bridge-ext-id`, `rpl-nothing`.
     */
    stpforwardMode?: pulumi.Input<string>;
    /**
     * Enable to always send packets from this interface to a destination MAC address. Valid values: `enable`, `disable`.
     */
    subst?: pulumi.Input<string>;
    /**
     * Destination MAC address that all packets are sent to from this interface.
     */
    substituteDstMac?: pulumi.Input<string>;
    /**
     * Initial create for switch-controller VLANs.
     */
    swcFirstCreate?: pulumi.Input<number>;
    /**
     * Creation status for switch-controller VLANs.
     */
    swcVlan?: pulumi.Input<number>;
    /**
     * Contained in switch.
     */
    switch?: pulumi.Input<string>;
    /**
     * Block FortiSwitch port-to-port traffic. Valid values: `enable`, `disable`.
     */
    switchControllerAccessVlan?: pulumi.Input<string>;
    /**
     * Enable/disable FortiSwitch ARP inspection. Valid values: `enable`, `disable`.
     */
    switchControllerArpInspection?: pulumi.Input<string>;
    /**
     * Switch controller DHCP snooping. Valid values: `enable`, `disable`.
     */
    switchControllerDhcpSnooping?: pulumi.Input<string>;
    /**
     * Switch controller DHCP snooping option82. Valid values: `enable`, `disable`.
     */
    switchControllerDhcpSnoopingOption82?: pulumi.Input<string>;
    /**
     * Switch controller DHCP snooping verify MAC. Valid values: `enable`, `disable`.
     */
    switchControllerDhcpSnoopingVerifyMac?: pulumi.Input<string>;
    /**
     * Integrated FortiLink settings for managed FortiSwitch.
     */
    switchControllerDynamic?: pulumi.Input<string>;
    /**
     * Interface's purpose when assigning traffic (read only).
     */
    switchControllerFeature?: pulumi.Input<string>;
    /**
     * Switch controller IGMP snooping. Valid values: `enable`, `disable`.
     */
    switchControllerIgmpSnooping?: pulumi.Input<string>;
    /**
     * Switch controller IGMP snooping fast-leave. Valid values: `enable`, `disable`.
     */
    switchControllerIgmpSnoopingFastLeave?: pulumi.Input<string>;
    /**
     * Switch controller IGMP snooping proxy. Valid values: `enable`, `disable`.
     */
    switchControllerIgmpSnoopingProxy?: pulumi.Input<string>;
    /**
     * Enable/disable managed FortiSwitch IoT scanning. Valid values: `enable`, `disable`.
     */
    switchControllerIotScanning?: pulumi.Input<string>;
    /**
     * Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
     */
    switchControllerLearningLimit?: pulumi.Input<number>;
    /**
     * VLAN to use for FortiLink management purposes.
     */
    switchControllerMgmtVlan?: pulumi.Input<number>;
    /**
     * Integrated NAC settings for managed FortiSwitch.
     */
    switchControllerNac?: pulumi.Input<string>;
    /**
     * NetFlow collection and processing. Valid values: `disable`, `enable`.
     */
    switchControllerNetflowCollect?: pulumi.Input<string>;
    /**
     * Enable/disable managed FortiSwitch routing offload. Valid values: `enable`, `disable`.
     */
    switchControllerOffload?: pulumi.Input<string>;
    /**
     * Enable/disable managed FortiSwitch routing offload gateway. Valid values: `enable`, `disable`.
     */
    switchControllerOffloadGw?: pulumi.Input<string>;
    /**
     * IP for routing offload on FortiSwitch.
     */
    switchControllerOffloadIp?: pulumi.Input<string>;
    /**
     * Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface. Valid values: `disable`, `enable`.
     */
    switchControllerRspanMode?: pulumi.Input<string>;
    /**
     * Source IP address used in FortiLink over L3 connections. Valid values: `outbound`, `fixed`.
     */
    switchControllerSourceIp?: pulumi.Input<string>;
    /**
     * Switch controller traffic policy for the VLAN.
     */
    switchControllerTrafficPolicy?: pulumi.Input<string>;
    /**
     * Define a system ID for the aggregate interface.
     */
    systemId?: pulumi.Input<string>;
    /**
     * Method in which system ID is generated. Valid values: `auto`, `user`.
     */
    systemIdType?: pulumi.Input<string>;
    /**
     * Config object tagging. The structure of `tagging` block is documented below.
     */
    taggings?: pulumi.Input<pulumi.Input<inputs.system.InterfaceTagging>[]>;
    /**
     * TCP maximum segment size. 0 means do not change segment size.
     */
    tcpMss?: pulumi.Input<number>;
    /**
     * Enable/disable VLAN trunk. Valid values: `enable`, `disable`.
     */
    trunk?: pulumi.Input<string>;
    /**
     * Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
     */
    trustIp1?: pulumi.Input<string>;
    /**
     * Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
     */
    trustIp2?: pulumi.Input<string>;
    /**
     * Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
     */
    trustIp3?: pulumi.Input<string>;
    /**
     * Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
     */
    trustIp61?: pulumi.Input<string>;
    /**
     * Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
     */
    trustIp62?: pulumi.Input<string>;
    /**
     * Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
     */
    trustIp63?: pulumi.Input<string>;
    /**
     * Interface type.
     */
    type?: pulumi.Input<string>;
    /**
     * Username of the PPPoE account, provided by your ISP.
     */
    username?: pulumi.Input<string>;
    /**
     * Interface is in this virtual domain (VDOM).
     */
    vdom: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Switch control interface VLAN ID.
     */
    vindex?: pulumi.Input<number>;
    /**
     * Ethernet protocol of VLAN. Valid values: `8021q`, `8021ad`.
     */
    vlanProtocol?: pulumi.Input<string>;
    /**
     * Enable/disable traffic forwarding between VLANs on this interface. Valid values: `enable`, `disable`.
     */
    vlanforward?: pulumi.Input<string>;
    /**
     * VLAN ID (1 - 4094).
     */
    vlanid?: pulumi.Input<number>;
    /**
     * Virtual Routing Forwarding ID.
     */
    vrf?: pulumi.Input<number>;
    /**
     * Enable/disable use of virtual MAC for VRRP. Valid values: `enable`, `disable`.
     */
    vrrpVirtualMac?: pulumi.Input<string>;
    /**
     * VRRP configuration. The structure of `vrrp` block is documented below.
     */
    vrrps?: pulumi.Input<pulumi.Input<inputs.system.InterfaceVrrp>[]>;
    /**
     * Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers. Valid values: `enable`, `disable`.
     */
    wccp?: pulumi.Input<string>;
    /**
     * Default weight for static routes (if route has no weight configured).
     */
    weight?: pulumi.Input<number>;
    /**
     * WINS server IP.
     */
    winsIp?: pulumi.Input<string>;
}
