// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Configure MODEM. Applies to FortiOS Version `7.0.4`.
 *
 * ## Import
 *
 * System Modem can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:system/modem:Modem labelname SystemModem
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:system/modem:Modem labelname SystemModem
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Modem extends pulumi.CustomResource {
    /**
     * Get an existing Modem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ModemState, opts?: pulumi.CustomResourceOptions): Modem {
        return new Modem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:system/modem:Modem';

    /**
     * Returns true if the given object is an instance of Modem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Modem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Modem.__pulumiType;
    }

    /**
     * Dial up/stop MODEM. Valid values: `dial`, `stop`, `none`.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Enable/disable altmode for installations using PPP in China. Valid values: `enable`, `disable`.
     */
    public readonly altmode!: pulumi.Output<string>;
    /**
     * Allowed authentication types for ISP 1. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
     */
    public readonly authtype1!: pulumi.Output<string>;
    /**
     * Allowed authentication types for ISP 2. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
     */
    public readonly authtype2!: pulumi.Output<string>;
    /**
     * Allowed authentication types for ISP 3. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
     */
    public readonly authtype3!: pulumi.Output<string>;
    /**
     * Enable/disable auto-dial after a reboot or disconnection. Valid values: `enable`, `disable`.
     */
    public readonly autoDial!: pulumi.Output<string>;
    /**
     * Connection completion timeout (30 - 255 sec, default = 90).
     */
    public readonly connectTimeout!: pulumi.Output<number>;
    /**
     * Dial command (this is often an ATD or ATDT command).
     */
    public readonly dialCmd1!: pulumi.Output<string>;
    /**
     * Dial command (this is often an ATD or ATDT command).
     */
    public readonly dialCmd2!: pulumi.Output<string>;
    /**
     * Dial command (this is often an ATD or ATDT command).
     */
    public readonly dialCmd3!: pulumi.Output<string>;
    /**
     * Enable/disable to dial the modem when packets are routed to the modem interface. Valid values: `enable`, `disable`.
     */
    public readonly dialOnDemand!: pulumi.Output<string>;
    /**
     * Distance of learned routes (1 - 255, default = 1).
     */
    public readonly distance!: pulumi.Output<number>;
    /**
     * Do not send CR when connected (ISP1). Valid values: `enable`, `disable`.
     */
    public readonly dontSendCr1!: pulumi.Output<string>;
    /**
     * Do not send CR when connected (ISP2). Valid values: `enable`, `disable`.
     */
    public readonly dontSendCr2!: pulumi.Output<string>;
    /**
     * Do not send CR when connected (ISP3). Valid values: `enable`, `disable`.
     */
    public readonly dontSendCr3!: pulumi.Output<string>;
    /**
     * Extra initialization string to ISP 1.
     */
    public readonly extraInit1!: pulumi.Output<string>;
    /**
     * Extra initialization string to ISP 2.
     */
    public readonly extraInit2!: pulumi.Output<string>;
    /**
     * Extra initialization string to ISP 3.
     */
    public readonly extraInit3!: pulumi.Output<string>;
    /**
     * Hold down timer in seconds (1 - 60 sec).
     */
    public readonly holddownTimer!: pulumi.Output<number>;
    /**
     * MODEM connection idle time (1 - 9999 min, default = 5).
     */
    public readonly idleTimer!: pulumi.Output<number>;
    /**
     * Name of redundant interface.
     */
    public readonly interface!: pulumi.Output<string>;
    /**
     * Allow connection only to the specified Location Area Code (LAC).
     */
    public readonly lockdownLac!: pulumi.Output<string>;
    /**
     * Set MODEM operation mode to redundant or standalone. Valid values: `standalone`, `redundant`.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * AT command to set the Network name/type (AT+COPS=<mode>,[<format>,<oper>[,<AcT>]]).
     */
    public readonly networkInit!: pulumi.Output<string>;
    /**
     * Password to access the specified dialup account.
     */
    public readonly passwd1!: pulumi.Output<string | undefined>;
    /**
     * Password to access the specified dialup account.
     */
    public readonly passwd2!: pulumi.Output<string | undefined>;
    /**
     * Password to access the specified dialup account.
     */
    public readonly passwd3!: pulumi.Output<string | undefined>;
    /**
     * Specify peer MODEM type for phone1. Valid values: `generic`, `actiontec`, `ascend_TNT`.
     */
    public readonly peerModem1!: pulumi.Output<string>;
    /**
     * Specify peer MODEM type for phone2. Valid values: `generic`, `actiontec`, `ascend_TNT`.
     */
    public readonly peerModem2!: pulumi.Output<string>;
    /**
     * Specify peer MODEM type for phone3. Valid values: `generic`, `actiontec`, `ascend_TNT`.
     */
    public readonly peerModem3!: pulumi.Output<string>;
    /**
     * Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
     */
    public readonly phone1!: pulumi.Output<string>;
    /**
     * Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
     */
    public readonly phone2!: pulumi.Output<string>;
    /**
     * Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
     */
    public readonly phone3!: pulumi.Output<string>;
    /**
     * AT command to set the PIN (AT+PIN=<pin>).
     */
    public readonly pinInit!: pulumi.Output<string>;
    /**
     * Enable/disable PPP echo-request to ISP 1. Valid values: `enable`, `disable`.
     */
    public readonly pppEchoRequest1!: pulumi.Output<string>;
    /**
     * Enable/disable PPP echo-request to ISP 2. Valid values: `enable`, `disable`.
     */
    public readonly pppEchoRequest2!: pulumi.Output<string>;
    /**
     * Enable/disable PPP echo-request to ISP 3. Valid values: `enable`, `disable`.
     */
    public readonly pppEchoRequest3!: pulumi.Output<string>;
    /**
     * Priority of learned routes (0 - 4294967295, default = 0).
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Redial limit (1 - 10 attempts, none = redial forever). Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
     */
    public readonly redial!: pulumi.Output<string>;
    /**
     * Number of dial attempts before resetting modem (0 = never reset).
     */
    public readonly reset!: pulumi.Output<number>;
    /**
     * Enable/disable Modem support (equivalent to bringing an interface up or down). Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Enable/disable traffic-check. Valid values: `enable`, `disable`.
     */
    public readonly trafficCheck!: pulumi.Output<string>;
    /**
     * User name to access the specified dialup account.
     */
    public readonly username1!: pulumi.Output<string>;
    /**
     * User name to access the specified dialup account.
     */
    public readonly username2!: pulumi.Output<string>;
    /**
     * User name to access the specified dialup account.
     */
    public readonly username3!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string>;
    /**
     * Enter wireless port number, 0 for default, 1 for first port, ... (0 - 4294967295, default = 0)
     */
    public readonly wirelessPort!: pulumi.Output<number>;

    /**
     * Create a Modem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ModemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ModemArgs | ModemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ModemState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["altmode"] = state ? state.altmode : undefined;
            resourceInputs["authtype1"] = state ? state.authtype1 : undefined;
            resourceInputs["authtype2"] = state ? state.authtype2 : undefined;
            resourceInputs["authtype3"] = state ? state.authtype3 : undefined;
            resourceInputs["autoDial"] = state ? state.autoDial : undefined;
            resourceInputs["connectTimeout"] = state ? state.connectTimeout : undefined;
            resourceInputs["dialCmd1"] = state ? state.dialCmd1 : undefined;
            resourceInputs["dialCmd2"] = state ? state.dialCmd2 : undefined;
            resourceInputs["dialCmd3"] = state ? state.dialCmd3 : undefined;
            resourceInputs["dialOnDemand"] = state ? state.dialOnDemand : undefined;
            resourceInputs["distance"] = state ? state.distance : undefined;
            resourceInputs["dontSendCr1"] = state ? state.dontSendCr1 : undefined;
            resourceInputs["dontSendCr2"] = state ? state.dontSendCr2 : undefined;
            resourceInputs["dontSendCr3"] = state ? state.dontSendCr3 : undefined;
            resourceInputs["extraInit1"] = state ? state.extraInit1 : undefined;
            resourceInputs["extraInit2"] = state ? state.extraInit2 : undefined;
            resourceInputs["extraInit3"] = state ? state.extraInit3 : undefined;
            resourceInputs["holddownTimer"] = state ? state.holddownTimer : undefined;
            resourceInputs["idleTimer"] = state ? state.idleTimer : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["lockdownLac"] = state ? state.lockdownLac : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["networkInit"] = state ? state.networkInit : undefined;
            resourceInputs["passwd1"] = state ? state.passwd1 : undefined;
            resourceInputs["passwd2"] = state ? state.passwd2 : undefined;
            resourceInputs["passwd3"] = state ? state.passwd3 : undefined;
            resourceInputs["peerModem1"] = state ? state.peerModem1 : undefined;
            resourceInputs["peerModem2"] = state ? state.peerModem2 : undefined;
            resourceInputs["peerModem3"] = state ? state.peerModem3 : undefined;
            resourceInputs["phone1"] = state ? state.phone1 : undefined;
            resourceInputs["phone2"] = state ? state.phone2 : undefined;
            resourceInputs["phone3"] = state ? state.phone3 : undefined;
            resourceInputs["pinInit"] = state ? state.pinInit : undefined;
            resourceInputs["pppEchoRequest1"] = state ? state.pppEchoRequest1 : undefined;
            resourceInputs["pppEchoRequest2"] = state ? state.pppEchoRequest2 : undefined;
            resourceInputs["pppEchoRequest3"] = state ? state.pppEchoRequest3 : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["redial"] = state ? state.redial : undefined;
            resourceInputs["reset"] = state ? state.reset : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["trafficCheck"] = state ? state.trafficCheck : undefined;
            resourceInputs["username1"] = state ? state.username1 : undefined;
            resourceInputs["username2"] = state ? state.username2 : undefined;
            resourceInputs["username3"] = state ? state.username3 : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["wirelessPort"] = state ? state.wirelessPort : undefined;
        } else {
            const args = argsOrState as ModemArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["altmode"] = args ? args.altmode : undefined;
            resourceInputs["authtype1"] = args ? args.authtype1 : undefined;
            resourceInputs["authtype2"] = args ? args.authtype2 : undefined;
            resourceInputs["authtype3"] = args ? args.authtype3 : undefined;
            resourceInputs["autoDial"] = args ? args.autoDial : undefined;
            resourceInputs["connectTimeout"] = args ? args.connectTimeout : undefined;
            resourceInputs["dialCmd1"] = args ? args.dialCmd1 : undefined;
            resourceInputs["dialCmd2"] = args ? args.dialCmd2 : undefined;
            resourceInputs["dialCmd3"] = args ? args.dialCmd3 : undefined;
            resourceInputs["dialOnDemand"] = args ? args.dialOnDemand : undefined;
            resourceInputs["distance"] = args ? args.distance : undefined;
            resourceInputs["dontSendCr1"] = args ? args.dontSendCr1 : undefined;
            resourceInputs["dontSendCr2"] = args ? args.dontSendCr2 : undefined;
            resourceInputs["dontSendCr3"] = args ? args.dontSendCr3 : undefined;
            resourceInputs["extraInit1"] = args ? args.extraInit1 : undefined;
            resourceInputs["extraInit2"] = args ? args.extraInit2 : undefined;
            resourceInputs["extraInit3"] = args ? args.extraInit3 : undefined;
            resourceInputs["holddownTimer"] = args ? args.holddownTimer : undefined;
            resourceInputs["idleTimer"] = args ? args.idleTimer : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["lockdownLac"] = args ? args.lockdownLac : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["networkInit"] = args ? args.networkInit : undefined;
            resourceInputs["passwd1"] = args ? args.passwd1 : undefined;
            resourceInputs["passwd2"] = args ? args.passwd2 : undefined;
            resourceInputs["passwd3"] = args ? args.passwd3 : undefined;
            resourceInputs["peerModem1"] = args ? args.peerModem1 : undefined;
            resourceInputs["peerModem2"] = args ? args.peerModem2 : undefined;
            resourceInputs["peerModem3"] = args ? args.peerModem3 : undefined;
            resourceInputs["phone1"] = args ? args.phone1 : undefined;
            resourceInputs["phone2"] = args ? args.phone2 : undefined;
            resourceInputs["phone3"] = args ? args.phone3 : undefined;
            resourceInputs["pinInit"] = args ? args.pinInit : undefined;
            resourceInputs["pppEchoRequest1"] = args ? args.pppEchoRequest1 : undefined;
            resourceInputs["pppEchoRequest2"] = args ? args.pppEchoRequest2 : undefined;
            resourceInputs["pppEchoRequest3"] = args ? args.pppEchoRequest3 : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["redial"] = args ? args.redial : undefined;
            resourceInputs["reset"] = args ? args.reset : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["trafficCheck"] = args ? args.trafficCheck : undefined;
            resourceInputs["username1"] = args ? args.username1 : undefined;
            resourceInputs["username2"] = args ? args.username2 : undefined;
            resourceInputs["username3"] = args ? args.username3 : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["wirelessPort"] = args ? args.wirelessPort : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Modem.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Modem resources.
 */
export interface ModemState {
    /**
     * Dial up/stop MODEM. Valid values: `dial`, `stop`, `none`.
     */
    action?: pulumi.Input<string>;
    /**
     * Enable/disable altmode for installations using PPP in China. Valid values: `enable`, `disable`.
     */
    altmode?: pulumi.Input<string>;
    /**
     * Allowed authentication types for ISP 1. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
     */
    authtype1?: pulumi.Input<string>;
    /**
     * Allowed authentication types for ISP 2. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
     */
    authtype2?: pulumi.Input<string>;
    /**
     * Allowed authentication types for ISP 3. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
     */
    authtype3?: pulumi.Input<string>;
    /**
     * Enable/disable auto-dial after a reboot or disconnection. Valid values: `enable`, `disable`.
     */
    autoDial?: pulumi.Input<string>;
    /**
     * Connection completion timeout (30 - 255 sec, default = 90).
     */
    connectTimeout?: pulumi.Input<number>;
    /**
     * Dial command (this is often an ATD or ATDT command).
     */
    dialCmd1?: pulumi.Input<string>;
    /**
     * Dial command (this is often an ATD or ATDT command).
     */
    dialCmd2?: pulumi.Input<string>;
    /**
     * Dial command (this is often an ATD or ATDT command).
     */
    dialCmd3?: pulumi.Input<string>;
    /**
     * Enable/disable to dial the modem when packets are routed to the modem interface. Valid values: `enable`, `disable`.
     */
    dialOnDemand?: pulumi.Input<string>;
    /**
     * Distance of learned routes (1 - 255, default = 1).
     */
    distance?: pulumi.Input<number>;
    /**
     * Do not send CR when connected (ISP1). Valid values: `enable`, `disable`.
     */
    dontSendCr1?: pulumi.Input<string>;
    /**
     * Do not send CR when connected (ISP2). Valid values: `enable`, `disable`.
     */
    dontSendCr2?: pulumi.Input<string>;
    /**
     * Do not send CR when connected (ISP3). Valid values: `enable`, `disable`.
     */
    dontSendCr3?: pulumi.Input<string>;
    /**
     * Extra initialization string to ISP 1.
     */
    extraInit1?: pulumi.Input<string>;
    /**
     * Extra initialization string to ISP 2.
     */
    extraInit2?: pulumi.Input<string>;
    /**
     * Extra initialization string to ISP 3.
     */
    extraInit3?: pulumi.Input<string>;
    /**
     * Hold down timer in seconds (1 - 60 sec).
     */
    holddownTimer?: pulumi.Input<number>;
    /**
     * MODEM connection idle time (1 - 9999 min, default = 5).
     */
    idleTimer?: pulumi.Input<number>;
    /**
     * Name of redundant interface.
     */
    interface?: pulumi.Input<string>;
    /**
     * Allow connection only to the specified Location Area Code (LAC).
     */
    lockdownLac?: pulumi.Input<string>;
    /**
     * Set MODEM operation mode to redundant or standalone. Valid values: `standalone`, `redundant`.
     */
    mode?: pulumi.Input<string>;
    /**
     * AT command to set the Network name/type (AT+COPS=<mode>,[<format>,<oper>[,<AcT>]]).
     */
    networkInit?: pulumi.Input<string>;
    /**
     * Password to access the specified dialup account.
     */
    passwd1?: pulumi.Input<string>;
    /**
     * Password to access the specified dialup account.
     */
    passwd2?: pulumi.Input<string>;
    /**
     * Password to access the specified dialup account.
     */
    passwd3?: pulumi.Input<string>;
    /**
     * Specify peer MODEM type for phone1. Valid values: `generic`, `actiontec`, `ascend_TNT`.
     */
    peerModem1?: pulumi.Input<string>;
    /**
     * Specify peer MODEM type for phone2. Valid values: `generic`, `actiontec`, `ascend_TNT`.
     */
    peerModem2?: pulumi.Input<string>;
    /**
     * Specify peer MODEM type for phone3. Valid values: `generic`, `actiontec`, `ascend_TNT`.
     */
    peerModem3?: pulumi.Input<string>;
    /**
     * Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
     */
    phone1?: pulumi.Input<string>;
    /**
     * Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
     */
    phone2?: pulumi.Input<string>;
    /**
     * Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
     */
    phone3?: pulumi.Input<string>;
    /**
     * AT command to set the PIN (AT+PIN=<pin>).
     */
    pinInit?: pulumi.Input<string>;
    /**
     * Enable/disable PPP echo-request to ISP 1. Valid values: `enable`, `disable`.
     */
    pppEchoRequest1?: pulumi.Input<string>;
    /**
     * Enable/disable PPP echo-request to ISP 2. Valid values: `enable`, `disable`.
     */
    pppEchoRequest2?: pulumi.Input<string>;
    /**
     * Enable/disable PPP echo-request to ISP 3. Valid values: `enable`, `disable`.
     */
    pppEchoRequest3?: pulumi.Input<string>;
    /**
     * Priority of learned routes (0 - 4294967295, default = 0).
     */
    priority?: pulumi.Input<number>;
    /**
     * Redial limit (1 - 10 attempts, none = redial forever). Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
     */
    redial?: pulumi.Input<string>;
    /**
     * Number of dial attempts before resetting modem (0 = never reset).
     */
    reset?: pulumi.Input<number>;
    /**
     * Enable/disable Modem support (equivalent to bringing an interface up or down). Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Enable/disable traffic-check. Valid values: `enable`, `disable`.
     */
    trafficCheck?: pulumi.Input<string>;
    /**
     * User name to access the specified dialup account.
     */
    username1?: pulumi.Input<string>;
    /**
     * User name to access the specified dialup account.
     */
    username2?: pulumi.Input<string>;
    /**
     * User name to access the specified dialup account.
     */
    username3?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Enter wireless port number, 0 for default, 1 for first port, ... (0 - 4294967295, default = 0)
     */
    wirelessPort?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Modem resource.
 */
export interface ModemArgs {
    /**
     * Dial up/stop MODEM. Valid values: `dial`, `stop`, `none`.
     */
    action?: pulumi.Input<string>;
    /**
     * Enable/disable altmode for installations using PPP in China. Valid values: `enable`, `disable`.
     */
    altmode?: pulumi.Input<string>;
    /**
     * Allowed authentication types for ISP 1. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
     */
    authtype1?: pulumi.Input<string>;
    /**
     * Allowed authentication types for ISP 2. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
     */
    authtype2?: pulumi.Input<string>;
    /**
     * Allowed authentication types for ISP 3. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
     */
    authtype3?: pulumi.Input<string>;
    /**
     * Enable/disable auto-dial after a reboot or disconnection. Valid values: `enable`, `disable`.
     */
    autoDial?: pulumi.Input<string>;
    /**
     * Connection completion timeout (30 - 255 sec, default = 90).
     */
    connectTimeout?: pulumi.Input<number>;
    /**
     * Dial command (this is often an ATD or ATDT command).
     */
    dialCmd1?: pulumi.Input<string>;
    /**
     * Dial command (this is often an ATD or ATDT command).
     */
    dialCmd2?: pulumi.Input<string>;
    /**
     * Dial command (this is often an ATD or ATDT command).
     */
    dialCmd3?: pulumi.Input<string>;
    /**
     * Enable/disable to dial the modem when packets are routed to the modem interface. Valid values: `enable`, `disable`.
     */
    dialOnDemand?: pulumi.Input<string>;
    /**
     * Distance of learned routes (1 - 255, default = 1).
     */
    distance?: pulumi.Input<number>;
    /**
     * Do not send CR when connected (ISP1). Valid values: `enable`, `disable`.
     */
    dontSendCr1?: pulumi.Input<string>;
    /**
     * Do not send CR when connected (ISP2). Valid values: `enable`, `disable`.
     */
    dontSendCr2?: pulumi.Input<string>;
    /**
     * Do not send CR when connected (ISP3). Valid values: `enable`, `disable`.
     */
    dontSendCr3?: pulumi.Input<string>;
    /**
     * Extra initialization string to ISP 1.
     */
    extraInit1?: pulumi.Input<string>;
    /**
     * Extra initialization string to ISP 2.
     */
    extraInit2?: pulumi.Input<string>;
    /**
     * Extra initialization string to ISP 3.
     */
    extraInit3?: pulumi.Input<string>;
    /**
     * Hold down timer in seconds (1 - 60 sec).
     */
    holddownTimer?: pulumi.Input<number>;
    /**
     * MODEM connection idle time (1 - 9999 min, default = 5).
     */
    idleTimer?: pulumi.Input<number>;
    /**
     * Name of redundant interface.
     */
    interface?: pulumi.Input<string>;
    /**
     * Allow connection only to the specified Location Area Code (LAC).
     */
    lockdownLac?: pulumi.Input<string>;
    /**
     * Set MODEM operation mode to redundant or standalone. Valid values: `standalone`, `redundant`.
     */
    mode?: pulumi.Input<string>;
    /**
     * AT command to set the Network name/type (AT+COPS=<mode>,[<format>,<oper>[,<AcT>]]).
     */
    networkInit?: pulumi.Input<string>;
    /**
     * Password to access the specified dialup account.
     */
    passwd1?: pulumi.Input<string>;
    /**
     * Password to access the specified dialup account.
     */
    passwd2?: pulumi.Input<string>;
    /**
     * Password to access the specified dialup account.
     */
    passwd3?: pulumi.Input<string>;
    /**
     * Specify peer MODEM type for phone1. Valid values: `generic`, `actiontec`, `ascend_TNT`.
     */
    peerModem1?: pulumi.Input<string>;
    /**
     * Specify peer MODEM type for phone2. Valid values: `generic`, `actiontec`, `ascend_TNT`.
     */
    peerModem2?: pulumi.Input<string>;
    /**
     * Specify peer MODEM type for phone3. Valid values: `generic`, `actiontec`, `ascend_TNT`.
     */
    peerModem3?: pulumi.Input<string>;
    /**
     * Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
     */
    phone1?: pulumi.Input<string>;
    /**
     * Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
     */
    phone2?: pulumi.Input<string>;
    /**
     * Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
     */
    phone3?: pulumi.Input<string>;
    /**
     * AT command to set the PIN (AT+PIN=<pin>).
     */
    pinInit?: pulumi.Input<string>;
    /**
     * Enable/disable PPP echo-request to ISP 1. Valid values: `enable`, `disable`.
     */
    pppEchoRequest1?: pulumi.Input<string>;
    /**
     * Enable/disable PPP echo-request to ISP 2. Valid values: `enable`, `disable`.
     */
    pppEchoRequest2?: pulumi.Input<string>;
    /**
     * Enable/disable PPP echo-request to ISP 3. Valid values: `enable`, `disable`.
     */
    pppEchoRequest3?: pulumi.Input<string>;
    /**
     * Priority of learned routes (0 - 4294967295, default = 0).
     */
    priority?: pulumi.Input<number>;
    /**
     * Redial limit (1 - 10 attempts, none = redial forever). Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
     */
    redial?: pulumi.Input<string>;
    /**
     * Number of dial attempts before resetting modem (0 = never reset).
     */
    reset?: pulumi.Input<number>;
    /**
     * Enable/disable Modem support (equivalent to bringing an interface up or down). Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Enable/disable traffic-check. Valid values: `enable`, `disable`.
     */
    trafficCheck?: pulumi.Input<string>;
    /**
     * User name to access the specified dialup account.
     */
    username1?: pulumi.Input<string>;
    /**
     * User name to access the specified dialup account.
     */
    username2?: pulumi.Input<string>;
    /**
     * User name to access the specified dialup account.
     */
    username3?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Enter wireless port number, 0 for default, 1 for first port, ... (0 - 4294967295, default = 0)
     */
    wirelessPort?: pulumi.Input<number>;
}
