// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Independent upgrades for managed devices. Applies to FortiOS Version `>= 7.2.4`.
 *
 * ## Import
 *
 * System DeviceUpgrade can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:system/deviceupgrade:Deviceupgrade labelname {{serial}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:system/deviceupgrade:Deviceupgrade labelname {{serial}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Deviceupgrade extends pulumi.CustomResource {
    /**
     * Get an existing Deviceupgrade resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceupgradeState, opts?: pulumi.CustomResourceOptions): Deviceupgrade {
        return new Deviceupgrade(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:system/deviceupgrade:Deviceupgrade';

    /**
     * Returns true if the given object is an instance of Deviceupgrade.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Deviceupgrade {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Deviceupgrade.__pulumiType;
    }

    /**
     * Fortinet device type.
     */
    public readonly deviceType!: pulumi.Output<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Upgrade failure reason.
     */
    public readonly failureReason!: pulumi.Output<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
     */
    public readonly haRebootController!: pulumi.Output<string>;
    /**
     * Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `knownHaMembers` block is documented below.
     */
    public readonly knownHaMembers!: pulumi.Output<outputs.system.DeviceupgradeKnownHaMember[] | undefined>;
    /**
     * Maximum number of minutes to allow for immediate upgrade preparation.
     */
    public readonly maximumMinutes!: pulumi.Output<number>;
    /**
     * Serial number of the node to include.
     */
    public readonly serial!: pulumi.Output<string>;
    /**
     * Upgrade configuration time in UTC (hh:mm yyyy/mm/dd UTC).
     */
    public readonly setupTime!: pulumi.Output<string>;
    /**
     * Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `device-disconnected`, `ready`, `coordinating`, `staging`, `final-check`, `upgrade-devices`, `cancelled`, `confirmed`, `done`, `failed`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Scheduled upgrade execution time in UTC (hh:mm yyyy/mm/dd UTC).
     */
    public readonly time!: pulumi.Output<string>;
    /**
     * Run immediately or at a scheduled time. Valid values: `immediate`, `scheduled`.
     */
    public readonly timing!: pulumi.Output<string>;
    /**
     * Fortinet OS image versions to upgrade through in major-minor-patch format, such as 7-0-4.
     */
    public readonly upgradePath!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a Deviceupgrade resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DeviceupgradeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceupgradeArgs | DeviceupgradeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceupgradeState | undefined;
            resourceInputs["deviceType"] = state ? state.deviceType : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["failureReason"] = state ? state.failureReason : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["haRebootController"] = state ? state.haRebootController : undefined;
            resourceInputs["knownHaMembers"] = state ? state.knownHaMembers : undefined;
            resourceInputs["maximumMinutes"] = state ? state.maximumMinutes : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["setupTime"] = state ? state.setupTime : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["time"] = state ? state.time : undefined;
            resourceInputs["timing"] = state ? state.timing : undefined;
            resourceInputs["upgradePath"] = state ? state.upgradePath : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as DeviceupgradeArgs | undefined;
            resourceInputs["deviceType"] = args ? args.deviceType : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["failureReason"] = args ? args.failureReason : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["haRebootController"] = args ? args.haRebootController : undefined;
            resourceInputs["knownHaMembers"] = args ? args.knownHaMembers : undefined;
            resourceInputs["maximumMinutes"] = args ? args.maximumMinutes : undefined;
            resourceInputs["serial"] = args ? args.serial : undefined;
            resourceInputs["setupTime"] = args ? args.setupTime : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["time"] = args ? args.time : undefined;
            resourceInputs["timing"] = args ? args.timing : undefined;
            resourceInputs["upgradePath"] = args ? args.upgradePath : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Deviceupgrade.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Deviceupgrade resources.
 */
export interface DeviceupgradeState {
    /**
     * Fortinet device type.
     */
    deviceType?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Upgrade failure reason.
     */
    failureReason?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
     */
    haRebootController?: pulumi.Input<string>;
    /**
     * Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `knownHaMembers` block is documented below.
     */
    knownHaMembers?: pulumi.Input<pulumi.Input<inputs.system.DeviceupgradeKnownHaMember>[]>;
    /**
     * Maximum number of minutes to allow for immediate upgrade preparation.
     */
    maximumMinutes?: pulumi.Input<number>;
    /**
     * Serial number of the node to include.
     */
    serial?: pulumi.Input<string>;
    /**
     * Upgrade configuration time in UTC (hh:mm yyyy/mm/dd UTC).
     */
    setupTime?: pulumi.Input<string>;
    /**
     * Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `device-disconnected`, `ready`, `coordinating`, `staging`, `final-check`, `upgrade-devices`, `cancelled`, `confirmed`, `done`, `failed`.
     */
    status?: pulumi.Input<string>;
    /**
     * Scheduled upgrade execution time in UTC (hh:mm yyyy/mm/dd UTC).
     */
    time?: pulumi.Input<string>;
    /**
     * Run immediately or at a scheduled time. Valid values: `immediate`, `scheduled`.
     */
    timing?: pulumi.Input<string>;
    /**
     * Fortinet OS image versions to upgrade through in major-minor-patch format, such as 7-0-4.
     */
    upgradePath?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Deviceupgrade resource.
 */
export interface DeviceupgradeArgs {
    /**
     * Fortinet device type.
     */
    deviceType?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Upgrade failure reason.
     */
    failureReason?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
     */
    haRebootController?: pulumi.Input<string>;
    /**
     * Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `knownHaMembers` block is documented below.
     */
    knownHaMembers?: pulumi.Input<pulumi.Input<inputs.system.DeviceupgradeKnownHaMember>[]>;
    /**
     * Maximum number of minutes to allow for immediate upgrade preparation.
     */
    maximumMinutes?: pulumi.Input<number>;
    /**
     * Serial number of the node to include.
     */
    serial?: pulumi.Input<string>;
    /**
     * Upgrade configuration time in UTC (hh:mm yyyy/mm/dd UTC).
     */
    setupTime?: pulumi.Input<string>;
    /**
     * Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `device-disconnected`, `ready`, `coordinating`, `staging`, `final-check`, `upgrade-devices`, `cancelled`, `confirmed`, `done`, `failed`.
     */
    status?: pulumi.Input<string>;
    /**
     * Scheduled upgrade execution time in UTC (hh:mm yyyy/mm/dd UTC).
     */
    time?: pulumi.Input<string>;
    /**
     * Run immediately or at a scheduled time. Valid values: `immediate`, `scheduled`.
     */
    timing?: pulumi.Input<string>;
    /**
     * Fortinet OS image versions to upgrade through in major-minor-patch format, such as 7-0-4.
     */
    upgradePath?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
