// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to download VM license using uploaded FortiFlex token for FortiOS. Reboots immediately if successful.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const test = new fortios.system.LicenseFortiflex("test", {token: "5FE7B3CE6B606DEB20E3"});
 * ```
 */
export class LicenseFortiflex extends pulumi.CustomResource {
    /**
     * Get an existing LicenseFortiflex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LicenseFortiflexState, opts?: pulumi.CustomResourceOptions): LicenseFortiflex {
        return new LicenseFortiflex(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:system/licenseFortiflex:LicenseFortiflex';

    /**
     * Returns true if the given object is an instance of LicenseFortiflex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LicenseFortiflex {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LicenseFortiflex.__pulumiType;
    }

    /**
     * HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
     */
    public readonly proxyUrl!: pulumi.Output<string | undefined>;
    /**
     * FortiFlex VM license token.
     */
    public readonly token!: pulumi.Output<string>;

    /**
     * Create a LicenseFortiflex resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LicenseFortiflexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LicenseFortiflexArgs | LicenseFortiflexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LicenseFortiflexState | undefined;
            resourceInputs["proxyUrl"] = state ? state.proxyUrl : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as LicenseFortiflexArgs | undefined;
            if ((!args || args.token === undefined) && !opts.urn) {
                throw new Error("Missing required property 'token'");
            }
            resourceInputs["proxyUrl"] = args ? args.proxyUrl : undefined;
            resourceInputs["token"] = args ? args.token : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LicenseFortiflex.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LicenseFortiflex resources.
 */
export interface LicenseFortiflexState {
    /**
     * HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
     */
    proxyUrl?: pulumi.Input<string>;
    /**
     * FortiFlex VM license token.
     */
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LicenseFortiflex resource.
 */
export interface LicenseFortiflexArgs {
    /**
     * HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
     */
    proxyUrl?: pulumi.Input<string>;
    /**
     * FortiFlex VM license token.
     */
    token: pulumi.Input<string>;
}
