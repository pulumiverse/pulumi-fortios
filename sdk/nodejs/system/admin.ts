// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Configure admin users.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trname = new fortios.system.Admin("trname", {
 *     accprofile: "super_admin",
 *     accprofileOverride: "disable",
 *     allowRemoveAdminSession: "enable",
 *     forcePasswordChange: "disable",
 *     guestAuth: "disable",
 *     hidden: 0,
 *     password: "fdafdace",
 *     passwordExpire: "0000-00-00 00:00:00",
 *     peerAuth: "disable",
 *     radiusVdomOverride: "disable",
 *     remoteAuth: "disable",
 *     twoFactor: "disable",
 *     vdoms: [{
 *         name: "root",
 *     }],
 *     wildcard: "disable",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * System Admin can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:system/admin:Admin labelname {{name}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:system/admin:Admin labelname {{name}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Admin extends pulumi.CustomResource {
    /**
     * Get an existing Admin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AdminState, opts?: pulumi.CustomResourceOptions): Admin {
        return new Admin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:system/admin:Admin';

    /**
     * Returns true if the given object is an instance of Admin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Admin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Admin.__pulumiType;
    }

    /**
     * Access profile for this administrator. Access profiles control administrator access to FortiGate features.
     */
    public readonly accprofile!: pulumi.Output<string>;
    /**
     * Enable to use the name of an access profile provided by the remote authentication server to control the FortiGate features that this administrator can access. Valid values: `enable`, `disable`.
     */
    public readonly accprofileOverride!: pulumi.Output<string>;
    /**
     * Enable/disable allow admin session to be removed by privileged admin users. Valid values: `enable`, `disable`.
     */
    public readonly allowRemoveAdminSession!: pulumi.Output<string>;
    /**
     * Comment.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * This administrator's email address.
     */
    public readonly emailTo!: pulumi.Output<string>;
    /**
     * Enable/disable force password change on next login. Valid values: `enable`, `disable`.
     */
    public readonly forcePasswordChange!: pulumi.Output<string>;
    /**
     * This administrator's FortiToken serial number.
     */
    public readonly fortitoken!: pulumi.Output<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable guest authentication. Valid values: `disable`, `enable`.
     */
    public readonly guestAuth!: pulumi.Output<string>;
    /**
     * Guest management portal language.
     */
    public readonly guestLang!: pulumi.Output<string>;
    /**
     * Select guest user groups. The structure of `guestUsergroups` block is documented below.
     */
    public readonly guestUsergroups!: pulumi.Output<outputs.system.AdminGuestUsergroup[] | undefined>;
    /**
     * GUI dashboards. The structure of `guiDashboard` block is documented below.
     */
    public readonly guiDashboards!: pulumi.Output<outputs.system.AdminGuiDashboard[] | undefined>;
    /**
     * Favorite GUI menu IDs for the global VDOM. The structure of `guiGlobalMenuFavorites` block is documented below.
     */
    public readonly guiGlobalMenuFavorites!: pulumi.Output<outputs.system.AdminGuiGlobalMenuFavorite[] | undefined>;
    /**
     * Acknowledgement of new features. The structure of `guiNewFeatureAcknowledge` block is documented below.
     */
    public readonly guiNewFeatureAcknowledges!: pulumi.Output<outputs.system.AdminGuiNewFeatureAcknowledge[] | undefined>;
    /**
     * Favorite GUI menu IDs for VDOMs. The structure of `guiVdomMenuFavorites` block is documented below.
     */
    public readonly guiVdomMenuFavorites!: pulumi.Output<outputs.system.AdminGuiVdomMenuFavorite[] | undefined>;
    /**
     * Admin user hidden attribute.
     */
    public readonly hidden!: pulumi.Output<number>;
    /**
     * history0
     */
    public readonly history0!: pulumi.Output<string | undefined>;
    /**
     * history1
     */
    public readonly history1!: pulumi.Output<string | undefined>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    public readonly ip6Trusthost1!: pulumi.Output<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    public readonly ip6Trusthost10!: pulumi.Output<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    public readonly ip6Trusthost2!: pulumi.Output<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    public readonly ip6Trusthost3!: pulumi.Output<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    public readonly ip6Trusthost4!: pulumi.Output<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    public readonly ip6Trusthost5!: pulumi.Output<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    public readonly ip6Trusthost6!: pulumi.Output<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    public readonly ip6Trusthost7!: pulumi.Output<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    public readonly ip6Trusthost8!: pulumi.Output<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    public readonly ip6Trusthost9!: pulumi.Output<string>;
    /**
     * Record user login time. The structure of `loginTime` block is documented below.
     */
    public readonly loginTimes!: pulumi.Output<outputs.system.AdminLoginTime[] | undefined>;
    /**
     * User name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Admin user password. :warning: **Due security reason and API's design, you need to use Generic resource with the monitor API [/api/v2/monitor/system/change-password/select](https://fndn.fortinet.net/index.php?/fortiapi/1-fortios/2271/1/system) to update the password for existing admin user. `Create` and `Delete` operation will works using this resource.**
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Password expire time.
     */
    public readonly passwordExpire!: pulumi.Output<string>;
    /**
     * Set to enable peer certificate authentication (for HTTPS admin access). Valid values: `enable`, `disable`.
     */
    public readonly peerAuth!: pulumi.Output<string>;
    /**
     * Name of peer group defined under config user group which has PKI members. Used for peer certificate authentication (for HTTPS admin access).
     */
    public readonly peerGroup!: pulumi.Output<string>;
    /**
     * Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
     */
    public readonly radiusVdomOverride!: pulumi.Output<string>;
    /**
     * Enable/disable authentication using a remote RADIUS, LDAP, or TACACS+ server. Valid values: `enable`, `disable`.
     */
    public readonly remoteAuth!: pulumi.Output<string>;
    /**
     * User group name used for remote auth.
     */
    public readonly remoteGroup!: pulumi.Output<string>;
    /**
     * Firewall schedule used to restrict when the administrator can log in. No schedule means no restrictions.
     */
    public readonly schedule!: pulumi.Output<string>;
    /**
     * Custom SMS server to send SMS messages to.
     */
    public readonly smsCustomServer!: pulumi.Output<string>;
    /**
     * Phone number on which the administrator receives SMS messages.
     */
    public readonly smsPhone!: pulumi.Output<string>;
    /**
     * Send SMS messages using the FortiGuard SMS server or a custom server. Valid values: `fortiguard`, `custom`.
     */
    public readonly smsServer!: pulumi.Output<string>;
    /**
     * Select the certificate to be used by the FortiGate for authentication with an SSH client.
     */
    public readonly sshCertificate!: pulumi.Output<string>;
    /**
     * Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
     */
    public readonly sshPublicKey1!: pulumi.Output<string>;
    /**
     * Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
     */
    public readonly sshPublicKey2!: pulumi.Output<string>;
    /**
     * Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
     */
    public readonly sshPublicKey3!: pulumi.Output<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    public readonly trusthost1!: pulumi.Output<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    public readonly trusthost10!: pulumi.Output<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    public readonly trusthost2!: pulumi.Output<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    public readonly trusthost3!: pulumi.Output<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    public readonly trusthost4!: pulumi.Output<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    public readonly trusthost5!: pulumi.Output<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    public readonly trusthost6!: pulumi.Output<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    public readonly trusthost7!: pulumi.Output<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    public readonly trusthost8!: pulumi.Output<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    public readonly trusthost9!: pulumi.Output<string>;
    /**
     * Enable/disable two-factor authentication.
     */
    public readonly twoFactor!: pulumi.Output<string>;
    /**
     * Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
     */
    public readonly twoFactorAuthentication!: pulumi.Output<string>;
    /**
     * Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
     */
    public readonly twoFactorNotification!: pulumi.Output<string>;
    /**
     * Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
     */
    public readonly vdomOverride!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * Virtual domain(s) that the administrator can access. The structure of `vdom` block is documented below.
     */
    public readonly vdoms!: pulumi.Output<outputs.system.AdminVdom[] | undefined>;
    /**
     * Enable/disable wildcard RADIUS authentication. Valid values: `enable`, `disable`.
     */
    public readonly wildcard!: pulumi.Output<string>;

    /**
     * Create a Admin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AdminArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AdminArgs | AdminState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AdminState | undefined;
            resourceInputs["accprofile"] = state ? state.accprofile : undefined;
            resourceInputs["accprofileOverride"] = state ? state.accprofileOverride : undefined;
            resourceInputs["allowRemoveAdminSession"] = state ? state.allowRemoveAdminSession : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["emailTo"] = state ? state.emailTo : undefined;
            resourceInputs["forcePasswordChange"] = state ? state.forcePasswordChange : undefined;
            resourceInputs["fortitoken"] = state ? state.fortitoken : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["guestAuth"] = state ? state.guestAuth : undefined;
            resourceInputs["guestLang"] = state ? state.guestLang : undefined;
            resourceInputs["guestUsergroups"] = state ? state.guestUsergroups : undefined;
            resourceInputs["guiDashboards"] = state ? state.guiDashboards : undefined;
            resourceInputs["guiGlobalMenuFavorites"] = state ? state.guiGlobalMenuFavorites : undefined;
            resourceInputs["guiNewFeatureAcknowledges"] = state ? state.guiNewFeatureAcknowledges : undefined;
            resourceInputs["guiVdomMenuFavorites"] = state ? state.guiVdomMenuFavorites : undefined;
            resourceInputs["hidden"] = state ? state.hidden : undefined;
            resourceInputs["history0"] = state ? state.history0 : undefined;
            resourceInputs["history1"] = state ? state.history1 : undefined;
            resourceInputs["ip6Trusthost1"] = state ? state.ip6Trusthost1 : undefined;
            resourceInputs["ip6Trusthost10"] = state ? state.ip6Trusthost10 : undefined;
            resourceInputs["ip6Trusthost2"] = state ? state.ip6Trusthost2 : undefined;
            resourceInputs["ip6Trusthost3"] = state ? state.ip6Trusthost3 : undefined;
            resourceInputs["ip6Trusthost4"] = state ? state.ip6Trusthost4 : undefined;
            resourceInputs["ip6Trusthost5"] = state ? state.ip6Trusthost5 : undefined;
            resourceInputs["ip6Trusthost6"] = state ? state.ip6Trusthost6 : undefined;
            resourceInputs["ip6Trusthost7"] = state ? state.ip6Trusthost7 : undefined;
            resourceInputs["ip6Trusthost8"] = state ? state.ip6Trusthost8 : undefined;
            resourceInputs["ip6Trusthost9"] = state ? state.ip6Trusthost9 : undefined;
            resourceInputs["loginTimes"] = state ? state.loginTimes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordExpire"] = state ? state.passwordExpire : undefined;
            resourceInputs["peerAuth"] = state ? state.peerAuth : undefined;
            resourceInputs["peerGroup"] = state ? state.peerGroup : undefined;
            resourceInputs["radiusVdomOverride"] = state ? state.radiusVdomOverride : undefined;
            resourceInputs["remoteAuth"] = state ? state.remoteAuth : undefined;
            resourceInputs["remoteGroup"] = state ? state.remoteGroup : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["smsCustomServer"] = state ? state.smsCustomServer : undefined;
            resourceInputs["smsPhone"] = state ? state.smsPhone : undefined;
            resourceInputs["smsServer"] = state ? state.smsServer : undefined;
            resourceInputs["sshCertificate"] = state ? state.sshCertificate : undefined;
            resourceInputs["sshPublicKey1"] = state ? state.sshPublicKey1 : undefined;
            resourceInputs["sshPublicKey2"] = state ? state.sshPublicKey2 : undefined;
            resourceInputs["sshPublicKey3"] = state ? state.sshPublicKey3 : undefined;
            resourceInputs["trusthost1"] = state ? state.trusthost1 : undefined;
            resourceInputs["trusthost10"] = state ? state.trusthost10 : undefined;
            resourceInputs["trusthost2"] = state ? state.trusthost2 : undefined;
            resourceInputs["trusthost3"] = state ? state.trusthost3 : undefined;
            resourceInputs["trusthost4"] = state ? state.trusthost4 : undefined;
            resourceInputs["trusthost5"] = state ? state.trusthost5 : undefined;
            resourceInputs["trusthost6"] = state ? state.trusthost6 : undefined;
            resourceInputs["trusthost7"] = state ? state.trusthost7 : undefined;
            resourceInputs["trusthost8"] = state ? state.trusthost8 : undefined;
            resourceInputs["trusthost9"] = state ? state.trusthost9 : undefined;
            resourceInputs["twoFactor"] = state ? state.twoFactor : undefined;
            resourceInputs["twoFactorAuthentication"] = state ? state.twoFactorAuthentication : undefined;
            resourceInputs["twoFactorNotification"] = state ? state.twoFactorNotification : undefined;
            resourceInputs["vdomOverride"] = state ? state.vdomOverride : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["vdoms"] = state ? state.vdoms : undefined;
            resourceInputs["wildcard"] = state ? state.wildcard : undefined;
        } else {
            const args = argsOrState as AdminArgs | undefined;
            resourceInputs["accprofile"] = args ? args.accprofile : undefined;
            resourceInputs["accprofileOverride"] = args ? args.accprofileOverride : undefined;
            resourceInputs["allowRemoveAdminSession"] = args ? args.allowRemoveAdminSession : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["emailTo"] = args ? args.emailTo : undefined;
            resourceInputs["forcePasswordChange"] = args ? args.forcePasswordChange : undefined;
            resourceInputs["fortitoken"] = args ? args.fortitoken : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["guestAuth"] = args ? args.guestAuth : undefined;
            resourceInputs["guestLang"] = args ? args.guestLang : undefined;
            resourceInputs["guestUsergroups"] = args ? args.guestUsergroups : undefined;
            resourceInputs["guiDashboards"] = args ? args.guiDashboards : undefined;
            resourceInputs["guiGlobalMenuFavorites"] = args ? args.guiGlobalMenuFavorites : undefined;
            resourceInputs["guiNewFeatureAcknowledges"] = args ? args.guiNewFeatureAcknowledges : undefined;
            resourceInputs["guiVdomMenuFavorites"] = args ? args.guiVdomMenuFavorites : undefined;
            resourceInputs["hidden"] = args ? args.hidden : undefined;
            resourceInputs["history0"] = args?.history0 ? pulumi.secret(args.history0) : undefined;
            resourceInputs["history1"] = args?.history1 ? pulumi.secret(args.history1) : undefined;
            resourceInputs["ip6Trusthost1"] = args ? args.ip6Trusthost1 : undefined;
            resourceInputs["ip6Trusthost10"] = args ? args.ip6Trusthost10 : undefined;
            resourceInputs["ip6Trusthost2"] = args ? args.ip6Trusthost2 : undefined;
            resourceInputs["ip6Trusthost3"] = args ? args.ip6Trusthost3 : undefined;
            resourceInputs["ip6Trusthost4"] = args ? args.ip6Trusthost4 : undefined;
            resourceInputs["ip6Trusthost5"] = args ? args.ip6Trusthost5 : undefined;
            resourceInputs["ip6Trusthost6"] = args ? args.ip6Trusthost6 : undefined;
            resourceInputs["ip6Trusthost7"] = args ? args.ip6Trusthost7 : undefined;
            resourceInputs["ip6Trusthost8"] = args ? args.ip6Trusthost8 : undefined;
            resourceInputs["ip6Trusthost9"] = args ? args.ip6Trusthost9 : undefined;
            resourceInputs["loginTimes"] = args ? args.loginTimes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["passwordExpire"] = args ? args.passwordExpire : undefined;
            resourceInputs["peerAuth"] = args ? args.peerAuth : undefined;
            resourceInputs["peerGroup"] = args ? args.peerGroup : undefined;
            resourceInputs["radiusVdomOverride"] = args ? args.radiusVdomOverride : undefined;
            resourceInputs["remoteAuth"] = args ? args.remoteAuth : undefined;
            resourceInputs["remoteGroup"] = args ? args.remoteGroup : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["smsCustomServer"] = args ? args.smsCustomServer : undefined;
            resourceInputs["smsPhone"] = args ? args.smsPhone : undefined;
            resourceInputs["smsServer"] = args ? args.smsServer : undefined;
            resourceInputs["sshCertificate"] = args ? args.sshCertificate : undefined;
            resourceInputs["sshPublicKey1"] = args?.sshPublicKey1 ? pulumi.secret(args.sshPublicKey1) : undefined;
            resourceInputs["sshPublicKey2"] = args?.sshPublicKey2 ? pulumi.secret(args.sshPublicKey2) : undefined;
            resourceInputs["sshPublicKey3"] = args?.sshPublicKey3 ? pulumi.secret(args.sshPublicKey3) : undefined;
            resourceInputs["trusthost1"] = args ? args.trusthost1 : undefined;
            resourceInputs["trusthost10"] = args ? args.trusthost10 : undefined;
            resourceInputs["trusthost2"] = args ? args.trusthost2 : undefined;
            resourceInputs["trusthost3"] = args ? args.trusthost3 : undefined;
            resourceInputs["trusthost4"] = args ? args.trusthost4 : undefined;
            resourceInputs["trusthost5"] = args ? args.trusthost5 : undefined;
            resourceInputs["trusthost6"] = args ? args.trusthost6 : undefined;
            resourceInputs["trusthost7"] = args ? args.trusthost7 : undefined;
            resourceInputs["trusthost8"] = args ? args.trusthost8 : undefined;
            resourceInputs["trusthost9"] = args ? args.trusthost9 : undefined;
            resourceInputs["twoFactor"] = args ? args.twoFactor : undefined;
            resourceInputs["twoFactorAuthentication"] = args ? args.twoFactorAuthentication : undefined;
            resourceInputs["twoFactorNotification"] = args ? args.twoFactorNotification : undefined;
            resourceInputs["vdomOverride"] = args ? args.vdomOverride : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["vdoms"] = args ? args.vdoms : undefined;
            resourceInputs["wildcard"] = args ? args.wildcard : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["history0", "history1", "password", "sshPublicKey1", "sshPublicKey2", "sshPublicKey3"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Admin.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Admin resources.
 */
export interface AdminState {
    /**
     * Access profile for this administrator. Access profiles control administrator access to FortiGate features.
     */
    accprofile?: pulumi.Input<string>;
    /**
     * Enable to use the name of an access profile provided by the remote authentication server to control the FortiGate features that this administrator can access. Valid values: `enable`, `disable`.
     */
    accprofileOverride?: pulumi.Input<string>;
    /**
     * Enable/disable allow admin session to be removed by privileged admin users. Valid values: `enable`, `disable`.
     */
    allowRemoveAdminSession?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * This administrator's email address.
     */
    emailTo?: pulumi.Input<string>;
    /**
     * Enable/disable force password change on next login. Valid values: `enable`, `disable`.
     */
    forcePasswordChange?: pulumi.Input<string>;
    /**
     * This administrator's FortiToken serial number.
     */
    fortitoken?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Enable/disable guest authentication. Valid values: `disable`, `enable`.
     */
    guestAuth?: pulumi.Input<string>;
    /**
     * Guest management portal language.
     */
    guestLang?: pulumi.Input<string>;
    /**
     * Select guest user groups. The structure of `guestUsergroups` block is documented below.
     */
    guestUsergroups?: pulumi.Input<pulumi.Input<inputs.system.AdminGuestUsergroup>[]>;
    /**
     * GUI dashboards. The structure of `guiDashboard` block is documented below.
     */
    guiDashboards?: pulumi.Input<pulumi.Input<inputs.system.AdminGuiDashboard>[]>;
    /**
     * Favorite GUI menu IDs for the global VDOM. The structure of `guiGlobalMenuFavorites` block is documented below.
     */
    guiGlobalMenuFavorites?: pulumi.Input<pulumi.Input<inputs.system.AdminGuiGlobalMenuFavorite>[]>;
    /**
     * Acknowledgement of new features. The structure of `guiNewFeatureAcknowledge` block is documented below.
     */
    guiNewFeatureAcknowledges?: pulumi.Input<pulumi.Input<inputs.system.AdminGuiNewFeatureAcknowledge>[]>;
    /**
     * Favorite GUI menu IDs for VDOMs. The structure of `guiVdomMenuFavorites` block is documented below.
     */
    guiVdomMenuFavorites?: pulumi.Input<pulumi.Input<inputs.system.AdminGuiVdomMenuFavorite>[]>;
    /**
     * Admin user hidden attribute.
     */
    hidden?: pulumi.Input<number>;
    /**
     * history0
     */
    history0?: pulumi.Input<string>;
    /**
     * history1
     */
    history1?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost1?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost10?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost2?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost3?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost4?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost5?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost6?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost7?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost8?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost9?: pulumi.Input<string>;
    /**
     * Record user login time. The structure of `loginTime` block is documented below.
     */
    loginTimes?: pulumi.Input<pulumi.Input<inputs.system.AdminLoginTime>[]>;
    /**
     * User name.
     */
    name?: pulumi.Input<string>;
    /**
     * Admin user password. :warning: **Due security reason and API's design, you need to use Generic resource with the monitor API [/api/v2/monitor/system/change-password/select](https://fndn.fortinet.net/index.php?/fortiapi/1-fortios/2271/1/system) to update the password for existing admin user. `Create` and `Delete` operation will works using this resource.**
     */
    password?: pulumi.Input<string>;
    /**
     * Password expire time.
     */
    passwordExpire?: pulumi.Input<string>;
    /**
     * Set to enable peer certificate authentication (for HTTPS admin access). Valid values: `enable`, `disable`.
     */
    peerAuth?: pulumi.Input<string>;
    /**
     * Name of peer group defined under config user group which has PKI members. Used for peer certificate authentication (for HTTPS admin access).
     */
    peerGroup?: pulumi.Input<string>;
    /**
     * Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
     */
    radiusVdomOverride?: pulumi.Input<string>;
    /**
     * Enable/disable authentication using a remote RADIUS, LDAP, or TACACS+ server. Valid values: `enable`, `disable`.
     */
    remoteAuth?: pulumi.Input<string>;
    /**
     * User group name used for remote auth.
     */
    remoteGroup?: pulumi.Input<string>;
    /**
     * Firewall schedule used to restrict when the administrator can log in. No schedule means no restrictions.
     */
    schedule?: pulumi.Input<string>;
    /**
     * Custom SMS server to send SMS messages to.
     */
    smsCustomServer?: pulumi.Input<string>;
    /**
     * Phone number on which the administrator receives SMS messages.
     */
    smsPhone?: pulumi.Input<string>;
    /**
     * Send SMS messages using the FortiGuard SMS server or a custom server. Valid values: `fortiguard`, `custom`.
     */
    smsServer?: pulumi.Input<string>;
    /**
     * Select the certificate to be used by the FortiGate for authentication with an SSH client.
     */
    sshCertificate?: pulumi.Input<string>;
    /**
     * Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
     */
    sshPublicKey1?: pulumi.Input<string>;
    /**
     * Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
     */
    sshPublicKey2?: pulumi.Input<string>;
    /**
     * Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
     */
    sshPublicKey3?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost1?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost10?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost2?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost3?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost4?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost5?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost6?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost7?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost8?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost9?: pulumi.Input<string>;
    /**
     * Enable/disable two-factor authentication.
     */
    twoFactor?: pulumi.Input<string>;
    /**
     * Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
     */
    twoFactorAuthentication?: pulumi.Input<string>;
    /**
     * Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
     */
    twoFactorNotification?: pulumi.Input<string>;
    /**
     * Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
     */
    vdomOverride?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Virtual domain(s) that the administrator can access. The structure of `vdom` block is documented below.
     */
    vdoms?: pulumi.Input<pulumi.Input<inputs.system.AdminVdom>[]>;
    /**
     * Enable/disable wildcard RADIUS authentication. Valid values: `enable`, `disable`.
     */
    wildcard?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Admin resource.
 */
export interface AdminArgs {
    /**
     * Access profile for this administrator. Access profiles control administrator access to FortiGate features.
     */
    accprofile?: pulumi.Input<string>;
    /**
     * Enable to use the name of an access profile provided by the remote authentication server to control the FortiGate features that this administrator can access. Valid values: `enable`, `disable`.
     */
    accprofileOverride?: pulumi.Input<string>;
    /**
     * Enable/disable allow admin session to be removed by privileged admin users. Valid values: `enable`, `disable`.
     */
    allowRemoveAdminSession?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * This administrator's email address.
     */
    emailTo?: pulumi.Input<string>;
    /**
     * Enable/disable force password change on next login. Valid values: `enable`, `disable`.
     */
    forcePasswordChange?: pulumi.Input<string>;
    /**
     * This administrator's FortiToken serial number.
     */
    fortitoken?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Enable/disable guest authentication. Valid values: `disable`, `enable`.
     */
    guestAuth?: pulumi.Input<string>;
    /**
     * Guest management portal language.
     */
    guestLang?: pulumi.Input<string>;
    /**
     * Select guest user groups. The structure of `guestUsergroups` block is documented below.
     */
    guestUsergroups?: pulumi.Input<pulumi.Input<inputs.system.AdminGuestUsergroup>[]>;
    /**
     * GUI dashboards. The structure of `guiDashboard` block is documented below.
     */
    guiDashboards?: pulumi.Input<pulumi.Input<inputs.system.AdminGuiDashboard>[]>;
    /**
     * Favorite GUI menu IDs for the global VDOM. The structure of `guiGlobalMenuFavorites` block is documented below.
     */
    guiGlobalMenuFavorites?: pulumi.Input<pulumi.Input<inputs.system.AdminGuiGlobalMenuFavorite>[]>;
    /**
     * Acknowledgement of new features. The structure of `guiNewFeatureAcknowledge` block is documented below.
     */
    guiNewFeatureAcknowledges?: pulumi.Input<pulumi.Input<inputs.system.AdminGuiNewFeatureAcknowledge>[]>;
    /**
     * Favorite GUI menu IDs for VDOMs. The structure of `guiVdomMenuFavorites` block is documented below.
     */
    guiVdomMenuFavorites?: pulumi.Input<pulumi.Input<inputs.system.AdminGuiVdomMenuFavorite>[]>;
    /**
     * Admin user hidden attribute.
     */
    hidden?: pulumi.Input<number>;
    /**
     * history0
     */
    history0?: pulumi.Input<string>;
    /**
     * history1
     */
    history1?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost1?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost10?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost2?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost3?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost4?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost5?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost6?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost7?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost8?: pulumi.Input<string>;
    /**
     * Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
     */
    ip6Trusthost9?: pulumi.Input<string>;
    /**
     * Record user login time. The structure of `loginTime` block is documented below.
     */
    loginTimes?: pulumi.Input<pulumi.Input<inputs.system.AdminLoginTime>[]>;
    /**
     * User name.
     */
    name?: pulumi.Input<string>;
    /**
     * Admin user password. :warning: **Due security reason and API's design, you need to use Generic resource with the monitor API [/api/v2/monitor/system/change-password/select](https://fndn.fortinet.net/index.php?/fortiapi/1-fortios/2271/1/system) to update the password for existing admin user. `Create` and `Delete` operation will works using this resource.**
     */
    password?: pulumi.Input<string>;
    /**
     * Password expire time.
     */
    passwordExpire?: pulumi.Input<string>;
    /**
     * Set to enable peer certificate authentication (for HTTPS admin access). Valid values: `enable`, `disable`.
     */
    peerAuth?: pulumi.Input<string>;
    /**
     * Name of peer group defined under config user group which has PKI members. Used for peer certificate authentication (for HTTPS admin access).
     */
    peerGroup?: pulumi.Input<string>;
    /**
     * Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
     */
    radiusVdomOverride?: pulumi.Input<string>;
    /**
     * Enable/disable authentication using a remote RADIUS, LDAP, or TACACS+ server. Valid values: `enable`, `disable`.
     */
    remoteAuth?: pulumi.Input<string>;
    /**
     * User group name used for remote auth.
     */
    remoteGroup?: pulumi.Input<string>;
    /**
     * Firewall schedule used to restrict when the administrator can log in. No schedule means no restrictions.
     */
    schedule?: pulumi.Input<string>;
    /**
     * Custom SMS server to send SMS messages to.
     */
    smsCustomServer?: pulumi.Input<string>;
    /**
     * Phone number on which the administrator receives SMS messages.
     */
    smsPhone?: pulumi.Input<string>;
    /**
     * Send SMS messages using the FortiGuard SMS server or a custom server. Valid values: `fortiguard`, `custom`.
     */
    smsServer?: pulumi.Input<string>;
    /**
     * Select the certificate to be used by the FortiGate for authentication with an SSH client.
     */
    sshCertificate?: pulumi.Input<string>;
    /**
     * Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
     */
    sshPublicKey1?: pulumi.Input<string>;
    /**
     * Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
     */
    sshPublicKey2?: pulumi.Input<string>;
    /**
     * Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
     */
    sshPublicKey3?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost1?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost10?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost2?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost3?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost4?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost5?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost6?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost7?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost8?: pulumi.Input<string>;
    /**
     * Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
     */
    trusthost9?: pulumi.Input<string>;
    /**
     * Enable/disable two-factor authentication.
     */
    twoFactor?: pulumi.Input<string>;
    /**
     * Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
     */
    twoFactorAuthentication?: pulumi.Input<string>;
    /**
     * Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
     */
    twoFactorNotification?: pulumi.Input<string>;
    /**
     * Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
     */
    vdomOverride?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Virtual domain(s) that the administrator can access. The structure of `vdom` block is documented below.
     */
    vdoms?: pulumi.Input<pulumi.Input<inputs.system.AdminVdom>[]>;
    /**
     * Enable/disable wildcard RADIUS authentication. Valid values: `enable`, `disable`.
     */
    wildcard?: pulumi.Input<string>;
}
