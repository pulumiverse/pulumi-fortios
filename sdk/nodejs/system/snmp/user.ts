// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * SNMP user configuration.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trname = new fortios.system.snmp.User("trname", {
 *     authProto: "sha",
 *     events: "cpu-high mem-low log-full intf-ip vpn-tun-up vpn-tun-down ha-switch ha-hb-failure ips-signature ips-anomaly av-virus av-oversize av-pattern av-fragmented fm-if-change bgp-established bgp-backward-transition ha-member-up ha-member-down ent-conf-change av-conserve av-bypass av-oversize-passed av-oversize-blocked ips-pkg-update ips-fail-open faz-disconnect wc-ap-up wc-ap-down fswctl-session-up fswctl-session-down load-balance-real-server-down per-cpu-high",
 *     haDirect: "disable",
 *     privProto: "aes",
 *     queries: "disable",
 *     queryPort: 161,
 *     securityLevel: "no-auth-no-priv",
 *     sourceIp: "0.0.0.0",
 *     sourceIpv6: "::",
 *     status: "disable",
 *     trapLport: 162,
 *     trapRport: 162,
 *     trapStatus: "enable",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * SystemSnmp User can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:system/snmp/user:User labelname {{name}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:system/snmp/user:User labelname {{name}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:system/snmp/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * Authentication protocol.
     */
    public readonly authProto!: pulumi.Output<string>;
    /**
     * Password for authentication protocol.
     */
    public readonly authPwd!: pulumi.Output<string | undefined>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * SNMP notifications (traps) to send.
     */
    public readonly events!: pulumi.Output<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
     */
    public readonly haDirect!: pulumi.Output<string>;
    /**
     * SNMP access control MIB view.
     */
    public readonly mibView!: pulumi.Output<string>;
    /**
     * SNMP user name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * SNMP managers to send notifications (traps) to.
     */
    public readonly notifyHosts!: pulumi.Output<string>;
    /**
     * IPv6 SNMP managers to send notifications (traps) to.
     */
    public readonly notifyHosts6!: pulumi.Output<string>;
    /**
     * Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
     */
    public readonly privProto!: pulumi.Output<string>;
    /**
     * Password for privacy (encryption) protocol.
     */
    public readonly privPwd!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
     */
    public readonly queries!: pulumi.Output<string>;
    /**
     * SNMPv3 query port (default = 161).
     */
    public readonly queryPort!: pulumi.Output<number>;
    /**
     * Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
     */
    public readonly securityLevel!: pulumi.Output<string>;
    /**
     * Source IP for SNMP trap.
     */
    public readonly sourceIp!: pulumi.Output<string>;
    /**
     * Source IPv6 for SNMP trap.
     */
    public readonly sourceIpv6!: pulumi.Output<string>;
    /**
     * Enable/disable this SNMP user. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * SNMPv3 local trap port (default = 162).
     */
    public readonly trapLport!: pulumi.Output<number>;
    /**
     * SNMPv3 trap remote port (default = 162).
     */
    public readonly trapRport!: pulumi.Output<number>;
    /**
     * Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
     */
    public readonly trapStatus!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * SNMP access control VDOMs. The structure of `vdoms` block is documented below.
     */
    public readonly vdoms!: pulumi.Output<outputs.system.snmp.UserVdom[] | undefined>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["authProto"] = state ? state.authProto : undefined;
            resourceInputs["authPwd"] = state ? state.authPwd : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["events"] = state ? state.events : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["haDirect"] = state ? state.haDirect : undefined;
            resourceInputs["mibView"] = state ? state.mibView : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifyHosts"] = state ? state.notifyHosts : undefined;
            resourceInputs["notifyHosts6"] = state ? state.notifyHosts6 : undefined;
            resourceInputs["privProto"] = state ? state.privProto : undefined;
            resourceInputs["privPwd"] = state ? state.privPwd : undefined;
            resourceInputs["queries"] = state ? state.queries : undefined;
            resourceInputs["queryPort"] = state ? state.queryPort : undefined;
            resourceInputs["securityLevel"] = state ? state.securityLevel : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["sourceIpv6"] = state ? state.sourceIpv6 : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["trapLport"] = state ? state.trapLport : undefined;
            resourceInputs["trapRport"] = state ? state.trapRport : undefined;
            resourceInputs["trapStatus"] = state ? state.trapStatus : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["vdoms"] = state ? state.vdoms : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            resourceInputs["authProto"] = args ? args.authProto : undefined;
            resourceInputs["authPwd"] = args?.authPwd ? pulumi.secret(args.authPwd) : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["events"] = args ? args.events : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["haDirect"] = args ? args.haDirect : undefined;
            resourceInputs["mibView"] = args ? args.mibView : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifyHosts"] = args ? args.notifyHosts : undefined;
            resourceInputs["notifyHosts6"] = args ? args.notifyHosts6 : undefined;
            resourceInputs["privProto"] = args ? args.privProto : undefined;
            resourceInputs["privPwd"] = args?.privPwd ? pulumi.secret(args.privPwd) : undefined;
            resourceInputs["queries"] = args ? args.queries : undefined;
            resourceInputs["queryPort"] = args ? args.queryPort : undefined;
            resourceInputs["securityLevel"] = args ? args.securityLevel : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["sourceIpv6"] = args ? args.sourceIpv6 : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["trapLport"] = args ? args.trapLport : undefined;
            resourceInputs["trapRport"] = args ? args.trapRport : undefined;
            resourceInputs["trapStatus"] = args ? args.trapStatus : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["vdoms"] = args ? args.vdoms : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authPwd", "privPwd"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * Authentication protocol.
     */
    authProto?: pulumi.Input<string>;
    /**
     * Password for authentication protocol.
     */
    authPwd?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * SNMP notifications (traps) to send.
     */
    events?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
     */
    haDirect?: pulumi.Input<string>;
    /**
     * SNMP access control MIB view.
     */
    mibView?: pulumi.Input<string>;
    /**
     * SNMP user name.
     */
    name?: pulumi.Input<string>;
    /**
     * SNMP managers to send notifications (traps) to.
     */
    notifyHosts?: pulumi.Input<string>;
    /**
     * IPv6 SNMP managers to send notifications (traps) to.
     */
    notifyHosts6?: pulumi.Input<string>;
    /**
     * Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
     */
    privProto?: pulumi.Input<string>;
    /**
     * Password for privacy (encryption) protocol.
     */
    privPwd?: pulumi.Input<string>;
    /**
     * Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
     */
    queries?: pulumi.Input<string>;
    /**
     * SNMPv3 query port (default = 161).
     */
    queryPort?: pulumi.Input<number>;
    /**
     * Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
     */
    securityLevel?: pulumi.Input<string>;
    /**
     * Source IP for SNMP trap.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * Source IPv6 for SNMP trap.
     */
    sourceIpv6?: pulumi.Input<string>;
    /**
     * Enable/disable this SNMP user. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * SNMPv3 local trap port (default = 162).
     */
    trapLport?: pulumi.Input<number>;
    /**
     * SNMPv3 trap remote port (default = 162).
     */
    trapRport?: pulumi.Input<number>;
    /**
     * Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
     */
    trapStatus?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * SNMP access control VDOMs. The structure of `vdoms` block is documented below.
     */
    vdoms?: pulumi.Input<pulumi.Input<inputs.system.snmp.UserVdom>[]>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Authentication protocol.
     */
    authProto?: pulumi.Input<string>;
    /**
     * Password for authentication protocol.
     */
    authPwd?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * SNMP notifications (traps) to send.
     */
    events?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
     */
    haDirect?: pulumi.Input<string>;
    /**
     * SNMP access control MIB view.
     */
    mibView?: pulumi.Input<string>;
    /**
     * SNMP user name.
     */
    name?: pulumi.Input<string>;
    /**
     * SNMP managers to send notifications (traps) to.
     */
    notifyHosts?: pulumi.Input<string>;
    /**
     * IPv6 SNMP managers to send notifications (traps) to.
     */
    notifyHosts6?: pulumi.Input<string>;
    /**
     * Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
     */
    privProto?: pulumi.Input<string>;
    /**
     * Password for privacy (encryption) protocol.
     */
    privPwd?: pulumi.Input<string>;
    /**
     * Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
     */
    queries?: pulumi.Input<string>;
    /**
     * SNMPv3 query port (default = 161).
     */
    queryPort?: pulumi.Input<number>;
    /**
     * Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
     */
    securityLevel?: pulumi.Input<string>;
    /**
     * Source IP for SNMP trap.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * Source IPv6 for SNMP trap.
     */
    sourceIpv6?: pulumi.Input<string>;
    /**
     * Enable/disable this SNMP user. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * SNMPv3 local trap port (default = 162).
     */
    trapLport?: pulumi.Input<number>;
    /**
     * SNMPv3 trap remote port (default = 162).
     */
    trapRport?: pulumi.Input<number>;
    /**
     * Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
     */
    trapStatus?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * SNMP access control VDOMs. The structure of `vdoms` block is documented below.
     */
    vdoms?: pulumi.Input<pulumi.Input<inputs.system.snmp.UserVdom>[]>;
}
