// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * FortiExtender wifi vap configuration. Applies to FortiOS Version `>= 7.4.4`.
 *
 * ## Import
 *
 * ExtensionController ExtenderVap can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:extensioncontroller/extendervap:Extendervap labelname {{name}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:extensioncontroller/extendervap:Extendervap labelname {{name}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Extendervap extends pulumi.CustomResource {
    /**
     * Get an existing Extendervap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExtendervapState, opts?: pulumi.CustomResourceOptions): Extendervap {
        return new Extendervap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:extensioncontroller/extendervap:Extendervap';

    /**
     * Returns true if the given object is an instance of Extendervap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Extendervap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Extendervap.__pulumiType;
    }

    /**
     * Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
     */
    public readonly allowaccess!: pulumi.Output<string>;
    /**
     * Wi-Fi Authentication Server Address (IPv4 format).
     */
    public readonly authServerAddress!: pulumi.Output<string>;
    /**
     * Wi-Fi Authentication Server Port.
     */
    public readonly authServerPort!: pulumi.Output<number>;
    /**
     * Wi-Fi Authentication Server Secret.
     */
    public readonly authServerSecret!: pulumi.Output<string>;
    /**
     * Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
     */
    public readonly broadcastSsid!: pulumi.Output<string>;
    /**
     * Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
     */
    public readonly bssColorPartial!: pulumi.Output<string>;
    /**
     * Wi-Fi DTIM (1 - 255) default = 1.
     */
    public readonly dtim!: pulumi.Output<number>;
    /**
     * End ip address.
     */
    public readonly endIp!: pulumi.Output<string>;
    /**
     * Extender ip address.
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * Wi-Fi max clients (0 - 512), default = 0 (no limit)
     */
    public readonly maxClients!: pulumi.Output<number>;
    /**
     * Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
     */
    public readonly muMimo!: pulumi.Output<string>;
    /**
     * Wi-Fi VAP name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Wi-Fi passphrase.
     */
    public readonly passphrase!: pulumi.Output<string | undefined>;
    /**
     * Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
     */
    public readonly pmf!: pulumi.Output<string>;
    /**
     * Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
     */
    public readonly rtsThreshold!: pulumi.Output<number>;
    /**
     * Wi-Fi SAE Password.
     */
    public readonly saePassword!: pulumi.Output<string | undefined>;
    /**
     * Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
     */
    public readonly security!: pulumi.Output<string>;
    /**
     * Wi-Fi SSID.
     */
    public readonly ssid!: pulumi.Output<string>;
    /**
     * Start ip address.
     */
    public readonly startIp!: pulumi.Output<string>;
    /**
     * Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
     */
    public readonly targetWakeTime!: pulumi.Output<string>;
    /**
     * Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a Extendervap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ExtendervapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExtendervapArgs | ExtendervapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExtendervapState | undefined;
            resourceInputs["allowaccess"] = state ? state.allowaccess : undefined;
            resourceInputs["authServerAddress"] = state ? state.authServerAddress : undefined;
            resourceInputs["authServerPort"] = state ? state.authServerPort : undefined;
            resourceInputs["authServerSecret"] = state ? state.authServerSecret : undefined;
            resourceInputs["broadcastSsid"] = state ? state.broadcastSsid : undefined;
            resourceInputs["bssColorPartial"] = state ? state.bssColorPartial : undefined;
            resourceInputs["dtim"] = state ? state.dtim : undefined;
            resourceInputs["endIp"] = state ? state.endIp : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["maxClients"] = state ? state.maxClients : undefined;
            resourceInputs["muMimo"] = state ? state.muMimo : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["pmf"] = state ? state.pmf : undefined;
            resourceInputs["rtsThreshold"] = state ? state.rtsThreshold : undefined;
            resourceInputs["saePassword"] = state ? state.saePassword : undefined;
            resourceInputs["security"] = state ? state.security : undefined;
            resourceInputs["ssid"] = state ? state.ssid : undefined;
            resourceInputs["startIp"] = state ? state.startIp : undefined;
            resourceInputs["targetWakeTime"] = state ? state.targetWakeTime : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as ExtendervapArgs | undefined;
            resourceInputs["allowaccess"] = args ? args.allowaccess : undefined;
            resourceInputs["authServerAddress"] = args ? args.authServerAddress : undefined;
            resourceInputs["authServerPort"] = args ? args.authServerPort : undefined;
            resourceInputs["authServerSecret"] = args ? args.authServerSecret : undefined;
            resourceInputs["broadcastSsid"] = args ? args.broadcastSsid : undefined;
            resourceInputs["bssColorPartial"] = args ? args.bssColorPartial : undefined;
            resourceInputs["dtim"] = args ? args.dtim : undefined;
            resourceInputs["endIp"] = args ? args.endIp : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["maxClients"] = args ? args.maxClients : undefined;
            resourceInputs["muMimo"] = args ? args.muMimo : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passphrase"] = args ? args.passphrase : undefined;
            resourceInputs["pmf"] = args ? args.pmf : undefined;
            resourceInputs["rtsThreshold"] = args ? args.rtsThreshold : undefined;
            resourceInputs["saePassword"] = args ? args.saePassword : undefined;
            resourceInputs["security"] = args ? args.security : undefined;
            resourceInputs["ssid"] = args ? args.ssid : undefined;
            resourceInputs["startIp"] = args ? args.startIp : undefined;
            resourceInputs["targetWakeTime"] = args ? args.targetWakeTime : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Extendervap.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Extendervap resources.
 */
export interface ExtendervapState {
    /**
     * Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
     */
    allowaccess?: pulumi.Input<string>;
    /**
     * Wi-Fi Authentication Server Address (IPv4 format).
     */
    authServerAddress?: pulumi.Input<string>;
    /**
     * Wi-Fi Authentication Server Port.
     */
    authServerPort?: pulumi.Input<number>;
    /**
     * Wi-Fi Authentication Server Secret.
     */
    authServerSecret?: pulumi.Input<string>;
    /**
     * Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
     */
    broadcastSsid?: pulumi.Input<string>;
    /**
     * Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
     */
    bssColorPartial?: pulumi.Input<string>;
    /**
     * Wi-Fi DTIM (1 - 255) default = 1.
     */
    dtim?: pulumi.Input<number>;
    /**
     * End ip address.
     */
    endIp?: pulumi.Input<string>;
    /**
     * Extender ip address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Wi-Fi max clients (0 - 512), default = 0 (no limit)
     */
    maxClients?: pulumi.Input<number>;
    /**
     * Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
     */
    muMimo?: pulumi.Input<string>;
    /**
     * Wi-Fi VAP name.
     */
    name?: pulumi.Input<string>;
    /**
     * Wi-Fi passphrase.
     */
    passphrase?: pulumi.Input<string>;
    /**
     * Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
     */
    pmf?: pulumi.Input<string>;
    /**
     * Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
     */
    rtsThreshold?: pulumi.Input<number>;
    /**
     * Wi-Fi SAE Password.
     */
    saePassword?: pulumi.Input<string>;
    /**
     * Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
     */
    security?: pulumi.Input<string>;
    /**
     * Wi-Fi SSID.
     */
    ssid?: pulumi.Input<string>;
    /**
     * Start ip address.
     */
    startIp?: pulumi.Input<string>;
    /**
     * Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
     */
    targetWakeTime?: pulumi.Input<string>;
    /**
     * Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Extendervap resource.
 */
export interface ExtendervapArgs {
    /**
     * Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
     */
    allowaccess?: pulumi.Input<string>;
    /**
     * Wi-Fi Authentication Server Address (IPv4 format).
     */
    authServerAddress?: pulumi.Input<string>;
    /**
     * Wi-Fi Authentication Server Port.
     */
    authServerPort?: pulumi.Input<number>;
    /**
     * Wi-Fi Authentication Server Secret.
     */
    authServerSecret?: pulumi.Input<string>;
    /**
     * Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
     */
    broadcastSsid?: pulumi.Input<string>;
    /**
     * Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
     */
    bssColorPartial?: pulumi.Input<string>;
    /**
     * Wi-Fi DTIM (1 - 255) default = 1.
     */
    dtim?: pulumi.Input<number>;
    /**
     * End ip address.
     */
    endIp?: pulumi.Input<string>;
    /**
     * Extender ip address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Wi-Fi max clients (0 - 512), default = 0 (no limit)
     */
    maxClients?: pulumi.Input<number>;
    /**
     * Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
     */
    muMimo?: pulumi.Input<string>;
    /**
     * Wi-Fi VAP name.
     */
    name?: pulumi.Input<string>;
    /**
     * Wi-Fi passphrase.
     */
    passphrase?: pulumi.Input<string>;
    /**
     * Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
     */
    pmf?: pulumi.Input<string>;
    /**
     * Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
     */
    rtsThreshold?: pulumi.Input<number>;
    /**
     * Wi-Fi SAE Password.
     */
    saePassword?: pulumi.Input<string>;
    /**
     * Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
     */
    security?: pulumi.Input<string>;
    /**
     * Wi-Fi SSID.
     */
    ssid?: pulumi.Input<string>;
    /**
     * Start ip address.
     */
    startIp?: pulumi.Input<string>;
    /**
     * Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
     */
    targetWakeTime?: pulumi.Input<string>;
    /**
     * Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
