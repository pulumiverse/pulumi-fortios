// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Configure UTM (Unified Threat Management) profile.
 *
 * ## Import
 *
 * WirelessController UtmProfile can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:wirelesscontroller/utmprofile:Utmprofile labelname {{name}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:wirelesscontroller/utmprofile:Utmprofile labelname {{name}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Utmprofile extends pulumi.CustomResource {
    /**
     * Get an existing Utmprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UtmprofileState, opts?: pulumi.CustomResourceOptions): Utmprofile {
        return new Utmprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:wirelesscontroller/utmprofile:Utmprofile';

    /**
     * Returns true if the given object is an instance of Utmprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Utmprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Utmprofile.__pulumiType;
    }

    /**
     * AntiVirus profile name.
     */
    public readonly antivirusProfile!: pulumi.Output<string>;
    /**
     * Application control list name.
     */
    public readonly applicationList!: pulumi.Output<string>;
    /**
     * Comment.
     */
    public readonly comment!: pulumi.Output<string>;
    /**
     * IPS sensor name.
     */
    public readonly ipsSensor!: pulumi.Output<string>;
    /**
     * UTM profile name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
     */
    public readonly scanBotnetConnections!: pulumi.Output<string>;
    /**
     * Enable/disable UTM logging. Valid values: `enable`, `disable`.
     */
    public readonly utmLog!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string>;
    /**
     * WebFilter profile name.
     */
    public readonly webfilterProfile!: pulumi.Output<string>;

    /**
     * Create a Utmprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UtmprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UtmprofileArgs | UtmprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UtmprofileState | undefined;
            resourceInputs["antivirusProfile"] = state ? state.antivirusProfile : undefined;
            resourceInputs["applicationList"] = state ? state.applicationList : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["ipsSensor"] = state ? state.ipsSensor : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scanBotnetConnections"] = state ? state.scanBotnetConnections : undefined;
            resourceInputs["utmLog"] = state ? state.utmLog : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["webfilterProfile"] = state ? state.webfilterProfile : undefined;
        } else {
            const args = argsOrState as UtmprofileArgs | undefined;
            resourceInputs["antivirusProfile"] = args ? args.antivirusProfile : undefined;
            resourceInputs["applicationList"] = args ? args.applicationList : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["ipsSensor"] = args ? args.ipsSensor : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scanBotnetConnections"] = args ? args.scanBotnetConnections : undefined;
            resourceInputs["utmLog"] = args ? args.utmLog : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["webfilterProfile"] = args ? args.webfilterProfile : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Utmprofile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Utmprofile resources.
 */
export interface UtmprofileState {
    /**
     * AntiVirus profile name.
     */
    antivirusProfile?: pulumi.Input<string>;
    /**
     * Application control list name.
     */
    applicationList?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * IPS sensor name.
     */
    ipsSensor?: pulumi.Input<string>;
    /**
     * UTM profile name.
     */
    name?: pulumi.Input<string>;
    /**
     * Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
     */
    scanBotnetConnections?: pulumi.Input<string>;
    /**
     * Enable/disable UTM logging. Valid values: `enable`, `disable`.
     */
    utmLog?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * WebFilter profile name.
     */
    webfilterProfile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Utmprofile resource.
 */
export interface UtmprofileArgs {
    /**
     * AntiVirus profile name.
     */
    antivirusProfile?: pulumi.Input<string>;
    /**
     * Application control list name.
     */
    applicationList?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * IPS sensor name.
     */
    ipsSensor?: pulumi.Input<string>;
    /**
     * UTM profile name.
     */
    name?: pulumi.Input<string>;
    /**
     * Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
     */
    scanBotnetConnections?: pulumi.Input<string>;
    /**
     * Enable/disable UTM logging. Valid values: `enable`, `disable`.
     */
    utmLog?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * WebFilter profile name.
     */
    webfilterProfile?: pulumi.Input<string>;
}
