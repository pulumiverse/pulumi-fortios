// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Configure CAPWAP timers.
 *
 * ## Import
 *
 * WirelessController Timers can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:wirelesscontroller/timers:Timers labelname WirelessControllerTimers
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:wirelesscontroller/timers:Timers labelname WirelessControllerTimers
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Timers extends pulumi.CustomResource {
    /**
     * Get an existing Timers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TimersState, opts?: pulumi.CustomResourceOptions): Timers {
        return new Timers(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:wirelesscontroller/timers:Timers';

    /**
     * Returns true if the given object is an instance of Timers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Timers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Timers.__pulumiType;
    }

    /**
     * Time in minutes to wait before AP reboots when there is no controller detected (5 - 65535, default = 0, 0 for no reboot).
     */
    public readonly apRebootWaitInterval1!: pulumi.Output<number>;
    /**
     * Time in minutes to wait before AP reboots when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session (5 - 65535, default = 0, 0 for no reboot).
     */
    public readonly apRebootWaitInterval2!: pulumi.Output<number>;
    /**
     * Time to reboot the AP when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session, format hh:mm.
     */
    public readonly apRebootWaitTime!: pulumi.Output<string>;
    /**
     * Time after which a client is considered failed in RADIUS authentication and times out (5 - 30 sec, default = 5).
     */
    public readonly authTimeout!: pulumi.Output<number>;
    /**
     * Time between running Bluetooth Low Energy (BLE) reports (10 - 3600 sec, default = 30).
     */
    public readonly bleScanReportIntv!: pulumi.Output<number>;
    /**
     * Time after which a client is considered idle and disconnected from the home controller (2 - 3600 sec, default = 20, 0 for no timeout).
     */
    public readonly clientIdleRehomeTimeout!: pulumi.Output<number>;
    /**
     * Time after which a client is considered idle and times out (20 - 3600 sec, default = 300, 0 for no timeout).
     */
    public readonly clientIdleTimeout!: pulumi.Output<number>;
    /**
     * Weekday on which to run DARRP optimization. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
     */
    public readonly darrpDay!: pulumi.Output<string>;
    /**
     * Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 1800).
     */
    public readonly darrpOptimize!: pulumi.Output<number>;
    /**
     * Time at which DARRP optimizations run (you can add up to 8 times). The structure of `darrpTime` block is documented below.
     */
    public readonly darrpTimes!: pulumi.Output<outputs.wirelesscontroller.TimersDarrpTime[] | undefined>;
    /**
     * Time between discovery requests (2 - 180 sec, default = 5).
     */
    public readonly discoveryInterval!: pulumi.Output<number>;
    /**
     * Dynamic radio mode assignment (DRMA) schedule interval in minutes (10 - 1440, default = 60).
     */
    public readonly drmaInterval!: pulumi.Output<number>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Time between echo requests sent by the managed WTP, AP, or FortiAP (1 - 255 sec, default = 30).
     */
    public readonly echoInterval!: pulumi.Output<number>;
    /**
     * Time between recording logs about fake APs if periodic fake AP logging is configured (0 - 1440 min, default = 1).
     */
    public readonly fakeApLog!: pulumi.Output<number>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Time period to keep IPsec VPN interfaces up after WTP sessions are disconnected (30 - 3600 sec, default = 120).
     */
    public readonly ipsecIntfCleanup!: pulumi.Output<number>;
    /**
     * Maximal time in seconds between control requests sent by the managed WTP, AP, or FortiAP (0 - 255 sec, default = 0).
     */
    public readonly natSessionKeepAlive!: pulumi.Output<number>;
    /**
     * Time between running radio reports (1 - 255 sec, default = 15).
     */
    public readonly radioStatsInterval!: pulumi.Output<number>;
    /**
     * Time period in minutes to keep rogue AP after it is gone (default = 0).
     */
    public readonly rogueApCleanup!: pulumi.Output<number>;
    /**
     * Time between logging rogue AP messages if periodic rogue AP logging is configured (0 - 1440 min, default = 0).
     */
    public readonly rogueApLog!: pulumi.Output<number>;
    /**
     * Time between running station capability reports (1 - 255 sec, default = 30).
     */
    public readonly staCapabilityInterval!: pulumi.Output<number>;
    /**
     * Time between running client presence flushes to remove clients that are listed but no longer present (0 - 86400 sec, default = 1800).
     */
    public readonly staLocateTimer!: pulumi.Output<number>;
    /**
     * Time between running client (station) reports (1 - 255 sec, default = 1).
     */
    public readonly staStatsInterval!: pulumi.Output<number>;
    /**
     * Time between running Virtual Access Point (VAP) reports (1 - 255 sec, default = 15).
     */
    public readonly vapStatsInterval!: pulumi.Output<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a Timers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TimersArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TimersArgs | TimersState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TimersState | undefined;
            resourceInputs["apRebootWaitInterval1"] = state ? state.apRebootWaitInterval1 : undefined;
            resourceInputs["apRebootWaitInterval2"] = state ? state.apRebootWaitInterval2 : undefined;
            resourceInputs["apRebootWaitTime"] = state ? state.apRebootWaitTime : undefined;
            resourceInputs["authTimeout"] = state ? state.authTimeout : undefined;
            resourceInputs["bleScanReportIntv"] = state ? state.bleScanReportIntv : undefined;
            resourceInputs["clientIdleRehomeTimeout"] = state ? state.clientIdleRehomeTimeout : undefined;
            resourceInputs["clientIdleTimeout"] = state ? state.clientIdleTimeout : undefined;
            resourceInputs["darrpDay"] = state ? state.darrpDay : undefined;
            resourceInputs["darrpOptimize"] = state ? state.darrpOptimize : undefined;
            resourceInputs["darrpTimes"] = state ? state.darrpTimes : undefined;
            resourceInputs["discoveryInterval"] = state ? state.discoveryInterval : undefined;
            resourceInputs["drmaInterval"] = state ? state.drmaInterval : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["echoInterval"] = state ? state.echoInterval : undefined;
            resourceInputs["fakeApLog"] = state ? state.fakeApLog : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["ipsecIntfCleanup"] = state ? state.ipsecIntfCleanup : undefined;
            resourceInputs["natSessionKeepAlive"] = state ? state.natSessionKeepAlive : undefined;
            resourceInputs["radioStatsInterval"] = state ? state.radioStatsInterval : undefined;
            resourceInputs["rogueApCleanup"] = state ? state.rogueApCleanup : undefined;
            resourceInputs["rogueApLog"] = state ? state.rogueApLog : undefined;
            resourceInputs["staCapabilityInterval"] = state ? state.staCapabilityInterval : undefined;
            resourceInputs["staLocateTimer"] = state ? state.staLocateTimer : undefined;
            resourceInputs["staStatsInterval"] = state ? state.staStatsInterval : undefined;
            resourceInputs["vapStatsInterval"] = state ? state.vapStatsInterval : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as TimersArgs | undefined;
            resourceInputs["apRebootWaitInterval1"] = args ? args.apRebootWaitInterval1 : undefined;
            resourceInputs["apRebootWaitInterval2"] = args ? args.apRebootWaitInterval2 : undefined;
            resourceInputs["apRebootWaitTime"] = args ? args.apRebootWaitTime : undefined;
            resourceInputs["authTimeout"] = args ? args.authTimeout : undefined;
            resourceInputs["bleScanReportIntv"] = args ? args.bleScanReportIntv : undefined;
            resourceInputs["clientIdleRehomeTimeout"] = args ? args.clientIdleRehomeTimeout : undefined;
            resourceInputs["clientIdleTimeout"] = args ? args.clientIdleTimeout : undefined;
            resourceInputs["darrpDay"] = args ? args.darrpDay : undefined;
            resourceInputs["darrpOptimize"] = args ? args.darrpOptimize : undefined;
            resourceInputs["darrpTimes"] = args ? args.darrpTimes : undefined;
            resourceInputs["discoveryInterval"] = args ? args.discoveryInterval : undefined;
            resourceInputs["drmaInterval"] = args ? args.drmaInterval : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["echoInterval"] = args ? args.echoInterval : undefined;
            resourceInputs["fakeApLog"] = args ? args.fakeApLog : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["ipsecIntfCleanup"] = args ? args.ipsecIntfCleanup : undefined;
            resourceInputs["natSessionKeepAlive"] = args ? args.natSessionKeepAlive : undefined;
            resourceInputs["radioStatsInterval"] = args ? args.radioStatsInterval : undefined;
            resourceInputs["rogueApCleanup"] = args ? args.rogueApCleanup : undefined;
            resourceInputs["rogueApLog"] = args ? args.rogueApLog : undefined;
            resourceInputs["staCapabilityInterval"] = args ? args.staCapabilityInterval : undefined;
            resourceInputs["staLocateTimer"] = args ? args.staLocateTimer : undefined;
            resourceInputs["staStatsInterval"] = args ? args.staStatsInterval : undefined;
            resourceInputs["vapStatsInterval"] = args ? args.vapStatsInterval : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Timers.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Timers resources.
 */
export interface TimersState {
    /**
     * Time in minutes to wait before AP reboots when there is no controller detected (5 - 65535, default = 0, 0 for no reboot).
     */
    apRebootWaitInterval1?: pulumi.Input<number>;
    /**
     * Time in minutes to wait before AP reboots when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session (5 - 65535, default = 0, 0 for no reboot).
     */
    apRebootWaitInterval2?: pulumi.Input<number>;
    /**
     * Time to reboot the AP when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session, format hh:mm.
     */
    apRebootWaitTime?: pulumi.Input<string>;
    /**
     * Time after which a client is considered failed in RADIUS authentication and times out (5 - 30 sec, default = 5).
     */
    authTimeout?: pulumi.Input<number>;
    /**
     * Time between running Bluetooth Low Energy (BLE) reports (10 - 3600 sec, default = 30).
     */
    bleScanReportIntv?: pulumi.Input<number>;
    /**
     * Time after which a client is considered idle and disconnected from the home controller (2 - 3600 sec, default = 20, 0 for no timeout).
     */
    clientIdleRehomeTimeout?: pulumi.Input<number>;
    /**
     * Time after which a client is considered idle and times out (20 - 3600 sec, default = 300, 0 for no timeout).
     */
    clientIdleTimeout?: pulumi.Input<number>;
    /**
     * Weekday on which to run DARRP optimization. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
     */
    darrpDay?: pulumi.Input<string>;
    /**
     * Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 1800).
     */
    darrpOptimize?: pulumi.Input<number>;
    /**
     * Time at which DARRP optimizations run (you can add up to 8 times). The structure of `darrpTime` block is documented below.
     */
    darrpTimes?: pulumi.Input<pulumi.Input<inputs.wirelesscontroller.TimersDarrpTime>[]>;
    /**
     * Time between discovery requests (2 - 180 sec, default = 5).
     */
    discoveryInterval?: pulumi.Input<number>;
    /**
     * Dynamic radio mode assignment (DRMA) schedule interval in minutes (10 - 1440, default = 60).
     */
    drmaInterval?: pulumi.Input<number>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Time between echo requests sent by the managed WTP, AP, or FortiAP (1 - 255 sec, default = 30).
     */
    echoInterval?: pulumi.Input<number>;
    /**
     * Time between recording logs about fake APs if periodic fake AP logging is configured (0 - 1440 min, default = 1).
     */
    fakeApLog?: pulumi.Input<number>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Time period to keep IPsec VPN interfaces up after WTP sessions are disconnected (30 - 3600 sec, default = 120).
     */
    ipsecIntfCleanup?: pulumi.Input<number>;
    /**
     * Maximal time in seconds between control requests sent by the managed WTP, AP, or FortiAP (0 - 255 sec, default = 0).
     */
    natSessionKeepAlive?: pulumi.Input<number>;
    /**
     * Time between running radio reports (1 - 255 sec, default = 15).
     */
    radioStatsInterval?: pulumi.Input<number>;
    /**
     * Time period in minutes to keep rogue AP after it is gone (default = 0).
     */
    rogueApCleanup?: pulumi.Input<number>;
    /**
     * Time between logging rogue AP messages if periodic rogue AP logging is configured (0 - 1440 min, default = 0).
     */
    rogueApLog?: pulumi.Input<number>;
    /**
     * Time between running station capability reports (1 - 255 sec, default = 30).
     */
    staCapabilityInterval?: pulumi.Input<number>;
    /**
     * Time between running client presence flushes to remove clients that are listed but no longer present (0 - 86400 sec, default = 1800).
     */
    staLocateTimer?: pulumi.Input<number>;
    /**
     * Time between running client (station) reports (1 - 255 sec, default = 1).
     */
    staStatsInterval?: pulumi.Input<number>;
    /**
     * Time between running Virtual Access Point (VAP) reports (1 - 255 sec, default = 15).
     */
    vapStatsInterval?: pulumi.Input<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Timers resource.
 */
export interface TimersArgs {
    /**
     * Time in minutes to wait before AP reboots when there is no controller detected (5 - 65535, default = 0, 0 for no reboot).
     */
    apRebootWaitInterval1?: pulumi.Input<number>;
    /**
     * Time in minutes to wait before AP reboots when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session (5 - 65535, default = 0, 0 for no reboot).
     */
    apRebootWaitInterval2?: pulumi.Input<number>;
    /**
     * Time to reboot the AP when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session, format hh:mm.
     */
    apRebootWaitTime?: pulumi.Input<string>;
    /**
     * Time after which a client is considered failed in RADIUS authentication and times out (5 - 30 sec, default = 5).
     */
    authTimeout?: pulumi.Input<number>;
    /**
     * Time between running Bluetooth Low Energy (BLE) reports (10 - 3600 sec, default = 30).
     */
    bleScanReportIntv?: pulumi.Input<number>;
    /**
     * Time after which a client is considered idle and disconnected from the home controller (2 - 3600 sec, default = 20, 0 for no timeout).
     */
    clientIdleRehomeTimeout?: pulumi.Input<number>;
    /**
     * Time after which a client is considered idle and times out (20 - 3600 sec, default = 300, 0 for no timeout).
     */
    clientIdleTimeout?: pulumi.Input<number>;
    /**
     * Weekday on which to run DARRP optimization. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
     */
    darrpDay?: pulumi.Input<string>;
    /**
     * Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 1800).
     */
    darrpOptimize?: pulumi.Input<number>;
    /**
     * Time at which DARRP optimizations run (you can add up to 8 times). The structure of `darrpTime` block is documented below.
     */
    darrpTimes?: pulumi.Input<pulumi.Input<inputs.wirelesscontroller.TimersDarrpTime>[]>;
    /**
     * Time between discovery requests (2 - 180 sec, default = 5).
     */
    discoveryInterval?: pulumi.Input<number>;
    /**
     * Dynamic radio mode assignment (DRMA) schedule interval in minutes (10 - 1440, default = 60).
     */
    drmaInterval?: pulumi.Input<number>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Time between echo requests sent by the managed WTP, AP, or FortiAP (1 - 255 sec, default = 30).
     */
    echoInterval?: pulumi.Input<number>;
    /**
     * Time between recording logs about fake APs if periodic fake AP logging is configured (0 - 1440 min, default = 1).
     */
    fakeApLog?: pulumi.Input<number>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Time period to keep IPsec VPN interfaces up after WTP sessions are disconnected (30 - 3600 sec, default = 120).
     */
    ipsecIntfCleanup?: pulumi.Input<number>;
    /**
     * Maximal time in seconds between control requests sent by the managed WTP, AP, or FortiAP (0 - 255 sec, default = 0).
     */
    natSessionKeepAlive?: pulumi.Input<number>;
    /**
     * Time between running radio reports (1 - 255 sec, default = 15).
     */
    radioStatsInterval?: pulumi.Input<number>;
    /**
     * Time period in minutes to keep rogue AP after it is gone (default = 0).
     */
    rogueApCleanup?: pulumi.Input<number>;
    /**
     * Time between logging rogue AP messages if periodic rogue AP logging is configured (0 - 1440 min, default = 0).
     */
    rogueApLog?: pulumi.Input<number>;
    /**
     * Time between running station capability reports (1 - 255 sec, default = 30).
     */
    staCapabilityInterval?: pulumi.Input<number>;
    /**
     * Time between running client presence flushes to remove clients that are listed but no longer present (0 - 86400 sec, default = 1800).
     */
    staLocateTimer?: pulumi.Input<number>;
    /**
     * Time between running client (station) reports (1 - 255 sec, default = 1).
     */
    staStatsInterval?: pulumi.Input<number>;
    /**
     * Time between running Virtual Access Point (VAP) reports (1 - 255 sec, default = 15).
     */
    vapStatsInterval?: pulumi.Input<number>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
