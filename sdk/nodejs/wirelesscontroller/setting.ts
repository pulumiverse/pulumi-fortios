// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * VDOM wireless controller configuration.
 *
 * ## Import
 *
 * WirelessController Setting can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:wirelesscontroller/setting:Setting labelname WirelessControllerSetting
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:wirelesscontroller/setting:Setting labelname WirelessControllerSetting
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Setting extends pulumi.CustomResource {
    /**
     * Get an existing Setting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingState, opts?: pulumi.CustomResourceOptions): Setting {
        return new Setting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:wirelesscontroller/setting:Setting';

    /**
     * Returns true if the given object is an instance of Setting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Setting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Setting.__pulumiType;
    }

    /**
     * FortiCloud customer account ID.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Country or region in which the FortiGate is located. The country determines the 802.11 bands and channels that are available.
     */
    public readonly country!: pulumi.Output<string>;
    /**
     * Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 86400, 0 = disable).
     */
    public readonly darrpOptimize!: pulumi.Output<number>;
    /**
     * Firewall schedules for DARRP running time. DARRP will run periodically based on darrp-optimize within the schedules. Separate multiple schedule names with a space. The structure of `darrpOptimizeSchedules` block is documented below.
     */
    public readonly darrpOptimizeSchedules!: pulumi.Output<outputs.wirelesscontroller.SettingDarrpOptimizeSchedule[] | undefined>;
    /**
     * Lower limit of creation time of device for identification in minutes (0 - 60, default = 5).
     */
    public readonly deviceHoldoff!: pulumi.Output<number>;
    /**
     * Upper limit of idle time of device for identification in minutes (0 - 14400, default = 1440).
     */
    public readonly deviceIdle!: pulumi.Output<number>;
    /**
     * Upper limit of confidence of device for identification (0 - 255, default = 1, 0 = disable).
     */
    public readonly deviceWeight!: pulumi.Output<number>;
    /**
     * Enable/disable allowing Virtual Access Points (VAPs) to use the same SSID name in the same VDOM. Valid values: `enable`, `disable`.
     */
    public readonly duplicateSsid!: pulumi.Output<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Actions taken for detected fake SSID. Valid values: `log`, `suppress`.
     */
    public readonly fakeSsidAction!: pulumi.Output<string>;
    /**
     * Enable/disable FAP-C series compatibility. Valid values: `enable`, `disable`.
     */
    public readonly fapcCompatibility!: pulumi.Output<string>;
    /**
     * Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
     */
    public readonly firmwareProvisionOnAuthorization!: pulumi.Output<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Configure offending SSID. The structure of `offendingSsid` block is documented below.
     */
    public readonly offendingSsids!: pulumi.Output<outputs.wirelesscontroller.SettingOffendingSsid[] | undefined>;
    /**
     * Enable/disable phishing SSID detection. Valid values: `enable`, `disable`.
     */
    public readonly phishingSsidDetect!: pulumi.Output<string>;
    /**
     * Enable/disable rolling WTP upgrade (default = disable). Valid values: `enable`, `disable`.
     */
    public readonly rollingWtpUpgrade!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable WFA compatibility. Valid values: `enable`, `disable`.
     */
    public readonly wfaCompatibility!: pulumi.Output<string>;

    /**
     * Create a Setting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingArgs | SettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["country"] = state ? state.country : undefined;
            resourceInputs["darrpOptimize"] = state ? state.darrpOptimize : undefined;
            resourceInputs["darrpOptimizeSchedules"] = state ? state.darrpOptimizeSchedules : undefined;
            resourceInputs["deviceHoldoff"] = state ? state.deviceHoldoff : undefined;
            resourceInputs["deviceIdle"] = state ? state.deviceIdle : undefined;
            resourceInputs["deviceWeight"] = state ? state.deviceWeight : undefined;
            resourceInputs["duplicateSsid"] = state ? state.duplicateSsid : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["fakeSsidAction"] = state ? state.fakeSsidAction : undefined;
            resourceInputs["fapcCompatibility"] = state ? state.fapcCompatibility : undefined;
            resourceInputs["firmwareProvisionOnAuthorization"] = state ? state.firmwareProvisionOnAuthorization : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["offendingSsids"] = state ? state.offendingSsids : undefined;
            resourceInputs["phishingSsidDetect"] = state ? state.phishingSsidDetect : undefined;
            resourceInputs["rollingWtpUpgrade"] = state ? state.rollingWtpUpgrade : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["wfaCompatibility"] = state ? state.wfaCompatibility : undefined;
        } else {
            const args = argsOrState as SettingArgs | undefined;
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["country"] = args ? args.country : undefined;
            resourceInputs["darrpOptimize"] = args ? args.darrpOptimize : undefined;
            resourceInputs["darrpOptimizeSchedules"] = args ? args.darrpOptimizeSchedules : undefined;
            resourceInputs["deviceHoldoff"] = args ? args.deviceHoldoff : undefined;
            resourceInputs["deviceIdle"] = args ? args.deviceIdle : undefined;
            resourceInputs["deviceWeight"] = args ? args.deviceWeight : undefined;
            resourceInputs["duplicateSsid"] = args ? args.duplicateSsid : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["fakeSsidAction"] = args ? args.fakeSsidAction : undefined;
            resourceInputs["fapcCompatibility"] = args ? args.fapcCompatibility : undefined;
            resourceInputs["firmwareProvisionOnAuthorization"] = args ? args.firmwareProvisionOnAuthorization : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["offendingSsids"] = args ? args.offendingSsids : undefined;
            resourceInputs["phishingSsidDetect"] = args ? args.phishingSsidDetect : undefined;
            resourceInputs["rollingWtpUpgrade"] = args ? args.rollingWtpUpgrade : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["wfaCompatibility"] = args ? args.wfaCompatibility : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Setting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Setting resources.
 */
export interface SettingState {
    /**
     * FortiCloud customer account ID.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Country or region in which the FortiGate is located. The country determines the 802.11 bands and channels that are available.
     */
    country?: pulumi.Input<string>;
    /**
     * Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 86400, 0 = disable).
     */
    darrpOptimize?: pulumi.Input<number>;
    /**
     * Firewall schedules for DARRP running time. DARRP will run periodically based on darrp-optimize within the schedules. Separate multiple schedule names with a space. The structure of `darrpOptimizeSchedules` block is documented below.
     */
    darrpOptimizeSchedules?: pulumi.Input<pulumi.Input<inputs.wirelesscontroller.SettingDarrpOptimizeSchedule>[]>;
    /**
     * Lower limit of creation time of device for identification in minutes (0 - 60, default = 5).
     */
    deviceHoldoff?: pulumi.Input<number>;
    /**
     * Upper limit of idle time of device for identification in minutes (0 - 14400, default = 1440).
     */
    deviceIdle?: pulumi.Input<number>;
    /**
     * Upper limit of confidence of device for identification (0 - 255, default = 1, 0 = disable).
     */
    deviceWeight?: pulumi.Input<number>;
    /**
     * Enable/disable allowing Virtual Access Points (VAPs) to use the same SSID name in the same VDOM. Valid values: `enable`, `disable`.
     */
    duplicateSsid?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Actions taken for detected fake SSID. Valid values: `log`, `suppress`.
     */
    fakeSsidAction?: pulumi.Input<string>;
    /**
     * Enable/disable FAP-C series compatibility. Valid values: `enable`, `disable`.
     */
    fapcCompatibility?: pulumi.Input<string>;
    /**
     * Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
     */
    firmwareProvisionOnAuthorization?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Configure offending SSID. The structure of `offendingSsid` block is documented below.
     */
    offendingSsids?: pulumi.Input<pulumi.Input<inputs.wirelesscontroller.SettingOffendingSsid>[]>;
    /**
     * Enable/disable phishing SSID detection. Valid values: `enable`, `disable`.
     */
    phishingSsidDetect?: pulumi.Input<string>;
    /**
     * Enable/disable rolling WTP upgrade (default = disable). Valid values: `enable`, `disable`.
     */
    rollingWtpUpgrade?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Enable/disable WFA compatibility. Valid values: `enable`, `disable`.
     */
    wfaCompatibility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Setting resource.
 */
export interface SettingArgs {
    /**
     * FortiCloud customer account ID.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Country or region in which the FortiGate is located. The country determines the 802.11 bands and channels that are available.
     */
    country?: pulumi.Input<string>;
    /**
     * Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 86400, 0 = disable).
     */
    darrpOptimize?: pulumi.Input<number>;
    /**
     * Firewall schedules for DARRP running time. DARRP will run periodically based on darrp-optimize within the schedules. Separate multiple schedule names with a space. The structure of `darrpOptimizeSchedules` block is documented below.
     */
    darrpOptimizeSchedules?: pulumi.Input<pulumi.Input<inputs.wirelesscontroller.SettingDarrpOptimizeSchedule>[]>;
    /**
     * Lower limit of creation time of device for identification in minutes (0 - 60, default = 5).
     */
    deviceHoldoff?: pulumi.Input<number>;
    /**
     * Upper limit of idle time of device for identification in minutes (0 - 14400, default = 1440).
     */
    deviceIdle?: pulumi.Input<number>;
    /**
     * Upper limit of confidence of device for identification (0 - 255, default = 1, 0 = disable).
     */
    deviceWeight?: pulumi.Input<number>;
    /**
     * Enable/disable allowing Virtual Access Points (VAPs) to use the same SSID name in the same VDOM. Valid values: `enable`, `disable`.
     */
    duplicateSsid?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Actions taken for detected fake SSID. Valid values: `log`, `suppress`.
     */
    fakeSsidAction?: pulumi.Input<string>;
    /**
     * Enable/disable FAP-C series compatibility. Valid values: `enable`, `disable`.
     */
    fapcCompatibility?: pulumi.Input<string>;
    /**
     * Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
     */
    firmwareProvisionOnAuthorization?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Configure offending SSID. The structure of `offendingSsid` block is documented below.
     */
    offendingSsids?: pulumi.Input<pulumi.Input<inputs.wirelesscontroller.SettingOffendingSsid>[]>;
    /**
     * Enable/disable phishing SSID detection. Valid values: `enable`, `disable`.
     */
    phishingSsidDetect?: pulumi.Input<string>;
    /**
     * Enable/disable rolling WTP upgrade (default = disable). Valid values: `enable`, `disable`.
     */
    rollingWtpUpgrade?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Enable/disable WFA compatibility. Valid values: `enable`, `disable`.
     */
    wfaCompatibility?: pulumi.Input<string>;
}
