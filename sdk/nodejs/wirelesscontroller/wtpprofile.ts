// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Configure WTP profiles or FortiAP profiles that define radio settings for manageable FortiAP platforms.
 *
 * ## Import
 *
 * WirelessController WtpProfile can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:wirelesscontroller/wtpprofile:Wtpprofile labelname {{name}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:wirelesscontroller/wtpprofile:Wtpprofile labelname {{name}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Wtpprofile extends pulumi.CustomResource {
    /**
     * Get an existing Wtpprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WtpprofileState, opts?: pulumi.CustomResourceOptions): Wtpprofile {
        return new Wtpprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:wirelesscontroller/wtpprofile:Wtpprofile';

    /**
     * Returns true if the given object is an instance of Wtpprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Wtpprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Wtpprofile.__pulumiType;
    }

    /**
     * Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
     */
    public readonly allowaccess!: pulumi.Output<string>;
    /**
     * Country in which this WTP, FortiAP or AP will operate (default = NA, automatically use the country configured for the current VDOM).
     */
    public readonly apCountry!: pulumi.Output<string>;
    /**
     * Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
     */
    public readonly apHandoff!: pulumi.Output<string>;
    /**
     * AP local configuration profile name.
     */
    public readonly apcfgProfile!: pulumi.Output<string>;
    /**
     * Bluetooth Low Energy profile name.
     */
    public readonly bleProfile!: pulumi.Output<string>;
    /**
     * Bonjour profile name.
     */
    public readonly bonjourProfile!: pulumi.Output<string>;
    /**
     * Comment.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable FAP console login access (default = enable). Valid values: `enable`, `disable`.
     */
    public readonly consoleLogin!: pulumi.Output<string>;
    /**
     * Enable/disable CAPWAP control message data channel offload.
     */
    public readonly controlMessageOffload!: pulumi.Output<string>;
    /**
     * List of MAC addresses that are denied access to this WTP, FortiAP, or AP. The structure of `denyMacList` block is documented below.
     */
    public readonly denyMacLists!: pulumi.Output<outputs.wirelesscontroller.WtpprofileDenyMacList[] | undefined>;
    /**
     * Enable/disable data channel DTLS in kernel. Valid values: `enable`, `disable`.
     */
    public readonly dtlsInKernel!: pulumi.Output<string>;
    /**
     * WTP data channel DTLS policy (default = clear-text).
     */
    public readonly dtlsPolicy!: pulumi.Output<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable use of energy efficient Ethernet on WTP. Valid values: `enable`, `disable`.
     */
    public readonly energyEfficientEthernet!: pulumi.Output<string>;
    /**
     * ESL SES-imagotag dongle configuration. The structure of `eslSesDongle` block is documented below.
     */
    public readonly eslSesDongle!: pulumi.Output<outputs.wirelesscontroller.WtpprofileEslSesDongle>;
    /**
     * Enable/disable station/VAP/radio extension information. Valid values: `enable`, `disable`.
     */
    public readonly extInfoEnable!: pulumi.Output<string>;
    /**
     * Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
     */
    public readonly frequencyHandoff!: pulumi.Output<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable client load balancing during roaming to avoid roaming delay (default = disable). Valid values: `enable`, `disable`.
     */
    public readonly handoffRoaming!: pulumi.Output<string>;
    /**
     * Minimum received signal strength indicator (RSSI) value for handoff (20 - 30, default = 25).
     */
    public readonly handoffRssi!: pulumi.Output<number>;
    /**
     * Threshold value for AP handoff.
     */
    public readonly handoffStaThresh!: pulumi.Output<number>;
    /**
     * Set to allow indoor/outdoor-only channels under regulatory rules (default = platform-determined). Valid values: `platform-determined`, `outdoor`, `indoor`.
     */
    public readonly indoorOutdoorDeployment!: pulumi.Output<string>;
    /**
     * Select how to prevent IP fragmentation for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
     */
    public readonly ipFragmentPreventing!: pulumi.Output<string>;
    /**
     * WTP LAN port mapping. The structure of `lan` block is documented below.
     */
    public readonly lan!: pulumi.Output<outputs.wirelesscontroller.WtpprofileLan>;
    /**
     * Set various location based service (LBS) options. The structure of `lbs` block is documented below.
     */
    public readonly lbs!: pulumi.Output<outputs.wirelesscontroller.WtpprofileLbs>;
    /**
     * Recurring firewall schedules for illuminating LEDs on the FortiAP. If led-state is enabled, LEDs will be visible when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ledSchedules` block is documented below.
     */
    public readonly ledSchedules!: pulumi.Output<outputs.wirelesscontroller.WtpprofileLedSchedule[] | undefined>;
    /**
     * Enable/disable use of LEDs on WTP (default = disable). Valid values: `enable`, `disable`.
     */
    public readonly ledState!: pulumi.Output<string>;
    /**
     * Enable/disable Link Layer Discovery Protocol (LLDP) for the WTP, FortiAP, or AP (default = disable). Valid values: `enable`, `disable`.
     */
    public readonly lldp!: pulumi.Output<string>;
    /**
     * Set the managed WTP, FortiAP, or AP's administrator password.
     */
    public readonly loginPasswd!: pulumi.Output<string | undefined>;
    /**
     * Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
     */
    public readonly loginPasswdChange!: pulumi.Output<string>;
    /**
     * Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
     */
    public readonly maxClients!: pulumi.Output<number>;
    /**
     * WTP (or FortiAP or AP) profile name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * WTP, FortiAP, or AP platform. The structure of `platform` block is documented below.
     */
    public readonly platform!: pulumi.Output<outputs.wirelesscontroller.WtpprofilePlatform>;
    /**
     * Set the WTP, FortiAP, or AP's PoE mode.
     */
    public readonly poeMode!: pulumi.Output<string>;
    /**
     * Configuration options for radio 1. The structure of `radio1` block is documented below.
     */
    public readonly radio1!: pulumi.Output<outputs.wirelesscontroller.WtpprofileRadio1>;
    /**
     * Configuration options for radio 2. The structure of `radio2` block is documented below.
     */
    public readonly radio2!: pulumi.Output<outputs.wirelesscontroller.WtpprofileRadio2>;
    /**
     * Configuration options for radio 3. The structure of `radio3` block is documented below.
     */
    public readonly radio3!: pulumi.Output<outputs.wirelesscontroller.WtpprofileRadio3>;
    /**
     * Configuration options for radio 4. The structure of `radio4` block is documented below.
     */
    public readonly radio4!: pulumi.Output<outputs.wirelesscontroller.WtpprofileRadio4>;
    /**
     * Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
     */
    public readonly splitTunnelingAclLocalApSubnet!: pulumi.Output<string>;
    /**
     * Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
     */
    public readonly splitTunnelingAclPath!: pulumi.Output<string>;
    /**
     * Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
     */
    public readonly splitTunnelingAcls!: pulumi.Output<outputs.wirelesscontroller.WtpprofileSplitTunnelingAcl[] | undefined>;
    /**
     * System log server configuration profile name.
     */
    public readonly syslogProfile!: pulumi.Output<string>;
    /**
     * Downlink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
     */
    public readonly tunMtuDownlink!: pulumi.Output<number>;
    /**
     * Uplink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
     */
    public readonly tunMtuUplink!: pulumi.Output<number>;
    /**
     * Enable/disable UNII-4 5Ghz band channels (default = disable). Valid values: `enable`, `disable`.
     */
    public readonly unii45ghzBand!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * Set WAN port authentication mode (default = none). Valid values: `none`, `802.1x`.
     */
    public readonly wanPortAuth!: pulumi.Output<string>;
    /**
     * Enable/disable WAN port 802.1x supplicant MACsec policy (default = disable). Valid values: `enable`, `disable`.
     */
    public readonly wanPortAuthMacsec!: pulumi.Output<string>;
    /**
     * WAN port 802.1x supplicant EAP methods (default = all). Valid values: `all`, `EAP-FAST`, `EAP-TLS`, `EAP-PEAP`.
     */
    public readonly wanPortAuthMethods!: pulumi.Output<string>;
    /**
     * Set WAN port 802.1x supplicant password.
     */
    public readonly wanPortAuthPassword!: pulumi.Output<string | undefined>;
    /**
     * Set WAN port 802.1x supplicant user name.
     */
    public readonly wanPortAuthUsrname!: pulumi.Output<string>;
    /**
     * Enable/disable using a WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
     */
    public readonly wanPortMode!: pulumi.Output<string>;

    /**
     * Create a Wtpprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WtpprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WtpprofileArgs | WtpprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WtpprofileState | undefined;
            resourceInputs["allowaccess"] = state ? state.allowaccess : undefined;
            resourceInputs["apCountry"] = state ? state.apCountry : undefined;
            resourceInputs["apHandoff"] = state ? state.apHandoff : undefined;
            resourceInputs["apcfgProfile"] = state ? state.apcfgProfile : undefined;
            resourceInputs["bleProfile"] = state ? state.bleProfile : undefined;
            resourceInputs["bonjourProfile"] = state ? state.bonjourProfile : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["consoleLogin"] = state ? state.consoleLogin : undefined;
            resourceInputs["controlMessageOffload"] = state ? state.controlMessageOffload : undefined;
            resourceInputs["denyMacLists"] = state ? state.denyMacLists : undefined;
            resourceInputs["dtlsInKernel"] = state ? state.dtlsInKernel : undefined;
            resourceInputs["dtlsPolicy"] = state ? state.dtlsPolicy : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["energyEfficientEthernet"] = state ? state.energyEfficientEthernet : undefined;
            resourceInputs["eslSesDongle"] = state ? state.eslSesDongle : undefined;
            resourceInputs["extInfoEnable"] = state ? state.extInfoEnable : undefined;
            resourceInputs["frequencyHandoff"] = state ? state.frequencyHandoff : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["handoffRoaming"] = state ? state.handoffRoaming : undefined;
            resourceInputs["handoffRssi"] = state ? state.handoffRssi : undefined;
            resourceInputs["handoffStaThresh"] = state ? state.handoffStaThresh : undefined;
            resourceInputs["indoorOutdoorDeployment"] = state ? state.indoorOutdoorDeployment : undefined;
            resourceInputs["ipFragmentPreventing"] = state ? state.ipFragmentPreventing : undefined;
            resourceInputs["lan"] = state ? state.lan : undefined;
            resourceInputs["lbs"] = state ? state.lbs : undefined;
            resourceInputs["ledSchedules"] = state ? state.ledSchedules : undefined;
            resourceInputs["ledState"] = state ? state.ledState : undefined;
            resourceInputs["lldp"] = state ? state.lldp : undefined;
            resourceInputs["loginPasswd"] = state ? state.loginPasswd : undefined;
            resourceInputs["loginPasswdChange"] = state ? state.loginPasswdChange : undefined;
            resourceInputs["maxClients"] = state ? state.maxClients : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["poeMode"] = state ? state.poeMode : undefined;
            resourceInputs["radio1"] = state ? state.radio1 : undefined;
            resourceInputs["radio2"] = state ? state.radio2 : undefined;
            resourceInputs["radio3"] = state ? state.radio3 : undefined;
            resourceInputs["radio4"] = state ? state.radio4 : undefined;
            resourceInputs["splitTunnelingAclLocalApSubnet"] = state ? state.splitTunnelingAclLocalApSubnet : undefined;
            resourceInputs["splitTunnelingAclPath"] = state ? state.splitTunnelingAclPath : undefined;
            resourceInputs["splitTunnelingAcls"] = state ? state.splitTunnelingAcls : undefined;
            resourceInputs["syslogProfile"] = state ? state.syslogProfile : undefined;
            resourceInputs["tunMtuDownlink"] = state ? state.tunMtuDownlink : undefined;
            resourceInputs["tunMtuUplink"] = state ? state.tunMtuUplink : undefined;
            resourceInputs["unii45ghzBand"] = state ? state.unii45ghzBand : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["wanPortAuth"] = state ? state.wanPortAuth : undefined;
            resourceInputs["wanPortAuthMacsec"] = state ? state.wanPortAuthMacsec : undefined;
            resourceInputs["wanPortAuthMethods"] = state ? state.wanPortAuthMethods : undefined;
            resourceInputs["wanPortAuthPassword"] = state ? state.wanPortAuthPassword : undefined;
            resourceInputs["wanPortAuthUsrname"] = state ? state.wanPortAuthUsrname : undefined;
            resourceInputs["wanPortMode"] = state ? state.wanPortMode : undefined;
        } else {
            const args = argsOrState as WtpprofileArgs | undefined;
            resourceInputs["allowaccess"] = args ? args.allowaccess : undefined;
            resourceInputs["apCountry"] = args ? args.apCountry : undefined;
            resourceInputs["apHandoff"] = args ? args.apHandoff : undefined;
            resourceInputs["apcfgProfile"] = args ? args.apcfgProfile : undefined;
            resourceInputs["bleProfile"] = args ? args.bleProfile : undefined;
            resourceInputs["bonjourProfile"] = args ? args.bonjourProfile : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["consoleLogin"] = args ? args.consoleLogin : undefined;
            resourceInputs["controlMessageOffload"] = args ? args.controlMessageOffload : undefined;
            resourceInputs["denyMacLists"] = args ? args.denyMacLists : undefined;
            resourceInputs["dtlsInKernel"] = args ? args.dtlsInKernel : undefined;
            resourceInputs["dtlsPolicy"] = args ? args.dtlsPolicy : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["energyEfficientEthernet"] = args ? args.energyEfficientEthernet : undefined;
            resourceInputs["eslSesDongle"] = args ? args.eslSesDongle : undefined;
            resourceInputs["extInfoEnable"] = args ? args.extInfoEnable : undefined;
            resourceInputs["frequencyHandoff"] = args ? args.frequencyHandoff : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["handoffRoaming"] = args ? args.handoffRoaming : undefined;
            resourceInputs["handoffRssi"] = args ? args.handoffRssi : undefined;
            resourceInputs["handoffStaThresh"] = args ? args.handoffStaThresh : undefined;
            resourceInputs["indoorOutdoorDeployment"] = args ? args.indoorOutdoorDeployment : undefined;
            resourceInputs["ipFragmentPreventing"] = args ? args.ipFragmentPreventing : undefined;
            resourceInputs["lan"] = args ? args.lan : undefined;
            resourceInputs["lbs"] = args ? args.lbs : undefined;
            resourceInputs["ledSchedules"] = args ? args.ledSchedules : undefined;
            resourceInputs["ledState"] = args ? args.ledState : undefined;
            resourceInputs["lldp"] = args ? args.lldp : undefined;
            resourceInputs["loginPasswd"] = args?.loginPasswd ? pulumi.secret(args.loginPasswd) : undefined;
            resourceInputs["loginPasswdChange"] = args ? args.loginPasswdChange : undefined;
            resourceInputs["maxClients"] = args ? args.maxClients : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["poeMode"] = args ? args.poeMode : undefined;
            resourceInputs["radio1"] = args ? args.radio1 : undefined;
            resourceInputs["radio2"] = args ? args.radio2 : undefined;
            resourceInputs["radio3"] = args ? args.radio3 : undefined;
            resourceInputs["radio4"] = args ? args.radio4 : undefined;
            resourceInputs["splitTunnelingAclLocalApSubnet"] = args ? args.splitTunnelingAclLocalApSubnet : undefined;
            resourceInputs["splitTunnelingAclPath"] = args ? args.splitTunnelingAclPath : undefined;
            resourceInputs["splitTunnelingAcls"] = args ? args.splitTunnelingAcls : undefined;
            resourceInputs["syslogProfile"] = args ? args.syslogProfile : undefined;
            resourceInputs["tunMtuDownlink"] = args ? args.tunMtuDownlink : undefined;
            resourceInputs["tunMtuUplink"] = args ? args.tunMtuUplink : undefined;
            resourceInputs["unii45ghzBand"] = args ? args.unii45ghzBand : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["wanPortAuth"] = args ? args.wanPortAuth : undefined;
            resourceInputs["wanPortAuthMacsec"] = args ? args.wanPortAuthMacsec : undefined;
            resourceInputs["wanPortAuthMethods"] = args ? args.wanPortAuthMethods : undefined;
            resourceInputs["wanPortAuthPassword"] = args ? args.wanPortAuthPassword : undefined;
            resourceInputs["wanPortAuthUsrname"] = args ? args.wanPortAuthUsrname : undefined;
            resourceInputs["wanPortMode"] = args ? args.wanPortMode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["loginPasswd"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Wtpprofile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Wtpprofile resources.
 */
export interface WtpprofileState {
    /**
     * Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
     */
    allowaccess?: pulumi.Input<string>;
    /**
     * Country in which this WTP, FortiAP or AP will operate (default = NA, automatically use the country configured for the current VDOM).
     */
    apCountry?: pulumi.Input<string>;
    /**
     * Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
     */
    apHandoff?: pulumi.Input<string>;
    /**
     * AP local configuration profile name.
     */
    apcfgProfile?: pulumi.Input<string>;
    /**
     * Bluetooth Low Energy profile name.
     */
    bleProfile?: pulumi.Input<string>;
    /**
     * Bonjour profile name.
     */
    bonjourProfile?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * Enable/disable FAP console login access (default = enable). Valid values: `enable`, `disable`.
     */
    consoleLogin?: pulumi.Input<string>;
    /**
     * Enable/disable CAPWAP control message data channel offload.
     */
    controlMessageOffload?: pulumi.Input<string>;
    /**
     * List of MAC addresses that are denied access to this WTP, FortiAP, or AP. The structure of `denyMacList` block is documented below.
     */
    denyMacLists?: pulumi.Input<pulumi.Input<inputs.wirelesscontroller.WtpprofileDenyMacList>[]>;
    /**
     * Enable/disable data channel DTLS in kernel. Valid values: `enable`, `disable`.
     */
    dtlsInKernel?: pulumi.Input<string>;
    /**
     * WTP data channel DTLS policy (default = clear-text).
     */
    dtlsPolicy?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Enable/disable use of energy efficient Ethernet on WTP. Valid values: `enable`, `disable`.
     */
    energyEfficientEthernet?: pulumi.Input<string>;
    /**
     * ESL SES-imagotag dongle configuration. The structure of `eslSesDongle` block is documented below.
     */
    eslSesDongle?: pulumi.Input<inputs.wirelesscontroller.WtpprofileEslSesDongle>;
    /**
     * Enable/disable station/VAP/radio extension information. Valid values: `enable`, `disable`.
     */
    extInfoEnable?: pulumi.Input<string>;
    /**
     * Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
     */
    frequencyHandoff?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Enable/disable client load balancing during roaming to avoid roaming delay (default = disable). Valid values: `enable`, `disable`.
     */
    handoffRoaming?: pulumi.Input<string>;
    /**
     * Minimum received signal strength indicator (RSSI) value for handoff (20 - 30, default = 25).
     */
    handoffRssi?: pulumi.Input<number>;
    /**
     * Threshold value for AP handoff.
     */
    handoffStaThresh?: pulumi.Input<number>;
    /**
     * Set to allow indoor/outdoor-only channels under regulatory rules (default = platform-determined). Valid values: `platform-determined`, `outdoor`, `indoor`.
     */
    indoorOutdoorDeployment?: pulumi.Input<string>;
    /**
     * Select how to prevent IP fragmentation for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
     */
    ipFragmentPreventing?: pulumi.Input<string>;
    /**
     * WTP LAN port mapping. The structure of `lan` block is documented below.
     */
    lan?: pulumi.Input<inputs.wirelesscontroller.WtpprofileLan>;
    /**
     * Set various location based service (LBS) options. The structure of `lbs` block is documented below.
     */
    lbs?: pulumi.Input<inputs.wirelesscontroller.WtpprofileLbs>;
    /**
     * Recurring firewall schedules for illuminating LEDs on the FortiAP. If led-state is enabled, LEDs will be visible when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ledSchedules` block is documented below.
     */
    ledSchedules?: pulumi.Input<pulumi.Input<inputs.wirelesscontroller.WtpprofileLedSchedule>[]>;
    /**
     * Enable/disable use of LEDs on WTP (default = disable). Valid values: `enable`, `disable`.
     */
    ledState?: pulumi.Input<string>;
    /**
     * Enable/disable Link Layer Discovery Protocol (LLDP) for the WTP, FortiAP, or AP (default = disable). Valid values: `enable`, `disable`.
     */
    lldp?: pulumi.Input<string>;
    /**
     * Set the managed WTP, FortiAP, or AP's administrator password.
     */
    loginPasswd?: pulumi.Input<string>;
    /**
     * Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
     */
    loginPasswdChange?: pulumi.Input<string>;
    /**
     * Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
     */
    maxClients?: pulumi.Input<number>;
    /**
     * WTP (or FortiAP or AP) profile name.
     */
    name?: pulumi.Input<string>;
    /**
     * WTP, FortiAP, or AP platform. The structure of `platform` block is documented below.
     */
    platform?: pulumi.Input<inputs.wirelesscontroller.WtpprofilePlatform>;
    /**
     * Set the WTP, FortiAP, or AP's PoE mode.
     */
    poeMode?: pulumi.Input<string>;
    /**
     * Configuration options for radio 1. The structure of `radio1` block is documented below.
     */
    radio1?: pulumi.Input<inputs.wirelesscontroller.WtpprofileRadio1>;
    /**
     * Configuration options for radio 2. The structure of `radio2` block is documented below.
     */
    radio2?: pulumi.Input<inputs.wirelesscontroller.WtpprofileRadio2>;
    /**
     * Configuration options for radio 3. The structure of `radio3` block is documented below.
     */
    radio3?: pulumi.Input<inputs.wirelesscontroller.WtpprofileRadio3>;
    /**
     * Configuration options for radio 4. The structure of `radio4` block is documented below.
     */
    radio4?: pulumi.Input<inputs.wirelesscontroller.WtpprofileRadio4>;
    /**
     * Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
     */
    splitTunnelingAclLocalApSubnet?: pulumi.Input<string>;
    /**
     * Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
     */
    splitTunnelingAclPath?: pulumi.Input<string>;
    /**
     * Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
     */
    splitTunnelingAcls?: pulumi.Input<pulumi.Input<inputs.wirelesscontroller.WtpprofileSplitTunnelingAcl>[]>;
    /**
     * System log server configuration profile name.
     */
    syslogProfile?: pulumi.Input<string>;
    /**
     * Downlink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
     */
    tunMtuDownlink?: pulumi.Input<number>;
    /**
     * Uplink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
     */
    tunMtuUplink?: pulumi.Input<number>;
    /**
     * Enable/disable UNII-4 5Ghz band channels (default = disable). Valid values: `enable`, `disable`.
     */
    unii45ghzBand?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Set WAN port authentication mode (default = none). Valid values: `none`, `802.1x`.
     */
    wanPortAuth?: pulumi.Input<string>;
    /**
     * Enable/disable WAN port 802.1x supplicant MACsec policy (default = disable). Valid values: `enable`, `disable`.
     */
    wanPortAuthMacsec?: pulumi.Input<string>;
    /**
     * WAN port 802.1x supplicant EAP methods (default = all). Valid values: `all`, `EAP-FAST`, `EAP-TLS`, `EAP-PEAP`.
     */
    wanPortAuthMethods?: pulumi.Input<string>;
    /**
     * Set WAN port 802.1x supplicant password.
     */
    wanPortAuthPassword?: pulumi.Input<string>;
    /**
     * Set WAN port 802.1x supplicant user name.
     */
    wanPortAuthUsrname?: pulumi.Input<string>;
    /**
     * Enable/disable using a WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
     */
    wanPortMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Wtpprofile resource.
 */
export interface WtpprofileArgs {
    /**
     * Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
     */
    allowaccess?: pulumi.Input<string>;
    /**
     * Country in which this WTP, FortiAP or AP will operate (default = NA, automatically use the country configured for the current VDOM).
     */
    apCountry?: pulumi.Input<string>;
    /**
     * Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
     */
    apHandoff?: pulumi.Input<string>;
    /**
     * AP local configuration profile name.
     */
    apcfgProfile?: pulumi.Input<string>;
    /**
     * Bluetooth Low Energy profile name.
     */
    bleProfile?: pulumi.Input<string>;
    /**
     * Bonjour profile name.
     */
    bonjourProfile?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * Enable/disable FAP console login access (default = enable). Valid values: `enable`, `disable`.
     */
    consoleLogin?: pulumi.Input<string>;
    /**
     * Enable/disable CAPWAP control message data channel offload.
     */
    controlMessageOffload?: pulumi.Input<string>;
    /**
     * List of MAC addresses that are denied access to this WTP, FortiAP, or AP. The structure of `denyMacList` block is documented below.
     */
    denyMacLists?: pulumi.Input<pulumi.Input<inputs.wirelesscontroller.WtpprofileDenyMacList>[]>;
    /**
     * Enable/disable data channel DTLS in kernel. Valid values: `enable`, `disable`.
     */
    dtlsInKernel?: pulumi.Input<string>;
    /**
     * WTP data channel DTLS policy (default = clear-text).
     */
    dtlsPolicy?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Enable/disable use of energy efficient Ethernet on WTP. Valid values: `enable`, `disable`.
     */
    energyEfficientEthernet?: pulumi.Input<string>;
    /**
     * ESL SES-imagotag dongle configuration. The structure of `eslSesDongle` block is documented below.
     */
    eslSesDongle?: pulumi.Input<inputs.wirelesscontroller.WtpprofileEslSesDongle>;
    /**
     * Enable/disable station/VAP/radio extension information. Valid values: `enable`, `disable`.
     */
    extInfoEnable?: pulumi.Input<string>;
    /**
     * Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
     */
    frequencyHandoff?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Enable/disable client load balancing during roaming to avoid roaming delay (default = disable). Valid values: `enable`, `disable`.
     */
    handoffRoaming?: pulumi.Input<string>;
    /**
     * Minimum received signal strength indicator (RSSI) value for handoff (20 - 30, default = 25).
     */
    handoffRssi?: pulumi.Input<number>;
    /**
     * Threshold value for AP handoff.
     */
    handoffStaThresh?: pulumi.Input<number>;
    /**
     * Set to allow indoor/outdoor-only channels under regulatory rules (default = platform-determined). Valid values: `platform-determined`, `outdoor`, `indoor`.
     */
    indoorOutdoorDeployment?: pulumi.Input<string>;
    /**
     * Select how to prevent IP fragmentation for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
     */
    ipFragmentPreventing?: pulumi.Input<string>;
    /**
     * WTP LAN port mapping. The structure of `lan` block is documented below.
     */
    lan?: pulumi.Input<inputs.wirelesscontroller.WtpprofileLan>;
    /**
     * Set various location based service (LBS) options. The structure of `lbs` block is documented below.
     */
    lbs?: pulumi.Input<inputs.wirelesscontroller.WtpprofileLbs>;
    /**
     * Recurring firewall schedules for illuminating LEDs on the FortiAP. If led-state is enabled, LEDs will be visible when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ledSchedules` block is documented below.
     */
    ledSchedules?: pulumi.Input<pulumi.Input<inputs.wirelesscontroller.WtpprofileLedSchedule>[]>;
    /**
     * Enable/disable use of LEDs on WTP (default = disable). Valid values: `enable`, `disable`.
     */
    ledState?: pulumi.Input<string>;
    /**
     * Enable/disable Link Layer Discovery Protocol (LLDP) for the WTP, FortiAP, or AP (default = disable). Valid values: `enable`, `disable`.
     */
    lldp?: pulumi.Input<string>;
    /**
     * Set the managed WTP, FortiAP, or AP's administrator password.
     */
    loginPasswd?: pulumi.Input<string>;
    /**
     * Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
     */
    loginPasswdChange?: pulumi.Input<string>;
    /**
     * Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
     */
    maxClients?: pulumi.Input<number>;
    /**
     * WTP (or FortiAP or AP) profile name.
     */
    name?: pulumi.Input<string>;
    /**
     * WTP, FortiAP, or AP platform. The structure of `platform` block is documented below.
     */
    platform?: pulumi.Input<inputs.wirelesscontroller.WtpprofilePlatform>;
    /**
     * Set the WTP, FortiAP, or AP's PoE mode.
     */
    poeMode?: pulumi.Input<string>;
    /**
     * Configuration options for radio 1. The structure of `radio1` block is documented below.
     */
    radio1?: pulumi.Input<inputs.wirelesscontroller.WtpprofileRadio1>;
    /**
     * Configuration options for radio 2. The structure of `radio2` block is documented below.
     */
    radio2?: pulumi.Input<inputs.wirelesscontroller.WtpprofileRadio2>;
    /**
     * Configuration options for radio 3. The structure of `radio3` block is documented below.
     */
    radio3?: pulumi.Input<inputs.wirelesscontroller.WtpprofileRadio3>;
    /**
     * Configuration options for radio 4. The structure of `radio4` block is documented below.
     */
    radio4?: pulumi.Input<inputs.wirelesscontroller.WtpprofileRadio4>;
    /**
     * Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
     */
    splitTunnelingAclLocalApSubnet?: pulumi.Input<string>;
    /**
     * Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
     */
    splitTunnelingAclPath?: pulumi.Input<string>;
    /**
     * Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
     */
    splitTunnelingAcls?: pulumi.Input<pulumi.Input<inputs.wirelesscontroller.WtpprofileSplitTunnelingAcl>[]>;
    /**
     * System log server configuration profile name.
     */
    syslogProfile?: pulumi.Input<string>;
    /**
     * Downlink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
     */
    tunMtuDownlink?: pulumi.Input<number>;
    /**
     * Uplink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
     */
    tunMtuUplink?: pulumi.Input<number>;
    /**
     * Enable/disable UNII-4 5Ghz band channels (default = disable). Valid values: `enable`, `disable`.
     */
    unii45ghzBand?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Set WAN port authentication mode (default = none). Valid values: `none`, `802.1x`.
     */
    wanPortAuth?: pulumi.Input<string>;
    /**
     * Enable/disable WAN port 802.1x supplicant MACsec policy (default = disable). Valid values: `enable`, `disable`.
     */
    wanPortAuthMacsec?: pulumi.Input<string>;
    /**
     * WAN port 802.1x supplicant EAP methods (default = all). Valid values: `all`, `EAP-FAST`, `EAP-TLS`, `EAP-PEAP`.
     */
    wanPortAuthMethods?: pulumi.Input<string>;
    /**
     * Set WAN port 802.1x supplicant password.
     */
    wanPortAuthPassword?: pulumi.Input<string>;
    /**
     * Set WAN port 802.1x supplicant user name.
     */
    wanPortAuthUsrname?: pulumi.Input<string>;
    /**
     * Enable/disable using a WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
     */
    wanPortMode?: pulumi.Input<string>;
}
