// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DatatypeArgs, DatatypeState } from "./datatype";
export type Datatype = import("./datatype").Datatype;
export const Datatype: typeof import("./datatype").Datatype = null as any;
utilities.lazyLoad(exports, ["Datatype"], () => require("./datatype"));

export { DictionaryArgs, DictionaryState } from "./dictionary";
export type Dictionary = import("./dictionary").Dictionary;
export const Dictionary: typeof import("./dictionary").Dictionary = null as any;
utilities.lazyLoad(exports, ["Dictionary"], () => require("./dictionary"));

export { ExactdatamatchArgs, ExactdatamatchState } from "./exactdatamatch";
export type Exactdatamatch = import("./exactdatamatch").Exactdatamatch;
export const Exactdatamatch: typeof import("./exactdatamatch").Exactdatamatch = null as any;
utilities.lazyLoad(exports, ["Exactdatamatch"], () => require("./exactdatamatch"));

export { FilepatternArgs, FilepatternState } from "./filepattern";
export type Filepattern = import("./filepattern").Filepattern;
export const Filepattern: typeof import("./filepattern").Filepattern = null as any;
utilities.lazyLoad(exports, ["Filepattern"], () => require("./filepattern"));

export { FpdocsourceArgs, FpdocsourceState } from "./fpdocsource";
export type Fpdocsource = import("./fpdocsource").Fpdocsource;
export const Fpdocsource: typeof import("./fpdocsource").Fpdocsource = null as any;
utilities.lazyLoad(exports, ["Fpdocsource"], () => require("./fpdocsource"));

export { FpsensitivityArgs, FpsensitivityState } from "./fpsensitivity";
export type Fpsensitivity = import("./fpsensitivity").Fpsensitivity;
export const Fpsensitivity: typeof import("./fpsensitivity").Fpsensitivity = null as any;
utilities.lazyLoad(exports, ["Fpsensitivity"], () => require("./fpsensitivity"));

export { ProfileArgs, ProfileState } from "./profile";
export type Profile = import("./profile").Profile;
export const Profile: typeof import("./profile").Profile = null as any;
utilities.lazyLoad(exports, ["Profile"], () => require("./profile"));

export { SensitivityArgs, SensitivityState } from "./sensitivity";
export type Sensitivity = import("./sensitivity").Sensitivity;
export const Sensitivity: typeof import("./sensitivity").Sensitivity = null as any;
utilities.lazyLoad(exports, ["Sensitivity"], () => require("./sensitivity"));

export { SensorArgs, SensorState } from "./sensor";
export type Sensor = import("./sensor").Sensor;
export const Sensor: typeof import("./sensor").Sensor = null as any;
utilities.lazyLoad(exports, ["Sensor"], () => require("./sensor"));

export { SettingsArgs, SettingsState } from "./settings";
export type Settings = import("./settings").Settings;
export const Settings: typeof import("./settings").Settings = null as any;
utilities.lazyLoad(exports, ["Settings"], () => require("./settings"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fortios:dlp/datatype:Datatype":
                return new Datatype(name, <any>undefined, { urn })
            case "fortios:dlp/dictionary:Dictionary":
                return new Dictionary(name, <any>undefined, { urn })
            case "fortios:dlp/exactdatamatch:Exactdatamatch":
                return new Exactdatamatch(name, <any>undefined, { urn })
            case "fortios:dlp/filepattern:Filepattern":
                return new Filepattern(name, <any>undefined, { urn })
            case "fortios:dlp/fpdocsource:Fpdocsource":
                return new Fpdocsource(name, <any>undefined, { urn })
            case "fortios:dlp/fpsensitivity:Fpsensitivity":
                return new Fpsensitivity(name, <any>undefined, { urn })
            case "fortios:dlp/profile:Profile":
                return new Profile(name, <any>undefined, { urn })
            case "fortios:dlp/sensitivity:Sensitivity":
                return new Sensitivity(name, <any>undefined, { urn })
            case "fortios:dlp/sensor:Sensor":
                return new Sensor(name, <any>undefined, { urn })
            case "fortios:dlp/settings:Settings":
                return new Settings(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fortios", "dlp/datatype", _module)
pulumi.runtime.registerResourceModule("fortios", "dlp/dictionary", _module)
pulumi.runtime.registerResourceModule("fortios", "dlp/exactdatamatch", _module)
pulumi.runtime.registerResourceModule("fortios", "dlp/filepattern", _module)
pulumi.runtime.registerResourceModule("fortios", "dlp/fpdocsource", _module)
pulumi.runtime.registerResourceModule("fortios", "dlp/fpsensitivity", _module)
pulumi.runtime.registerResourceModule("fortios", "dlp/profile", _module)
pulumi.runtime.registerResourceModule("fortios", "dlp/sensitivity", _module)
pulumi.runtime.registerResourceModule("fortios", "dlp/sensor", _module)
pulumi.runtime.registerResourceModule("fortios", "dlp/settings", _module)
