// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Configure IPS VDOM parameter.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trname = new fortios.ips.Settings("trname", {
 *     ipsPacketQuota: 0,
 *     packetLogHistory: 1,
 *     packetLogMemory: 256,
 *     packetLogPostAttack: 0,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Ips Settings can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:ips/settings:Settings labelname IpsSettings
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:ips/settings:Settings labelname IpsSettings
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Settings extends pulumi.CustomResource {
    /**
     * Get an existing Settings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingsState, opts?: pulumi.CustomResourceOptions): Settings {
        return new Settings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:ips/settings:Settings';

    /**
     * Returns true if the given object is an instance of Settings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Settings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Settings.__pulumiType;
    }

    /**
     * Maximum amount of disk space in MB for logged packets when logging to disk. Range depends on disk size.
     */
    public readonly ipsPacketQuota!: pulumi.Output<number>;
    /**
     * Number of packets to capture before and including the one in which the IPS signature is detected (1 - 255).
     */
    public readonly packetLogHistory!: pulumi.Output<number>;
    /**
     * Maximum memory can be used by packet log (64 - 8192 kB).
     */
    public readonly packetLogMemory!: pulumi.Output<number>;
    /**
     * Number of packets to log after the IPS signature is detected (0 - 255).
     */
    public readonly packetLogPostAttack!: pulumi.Output<number>;
    /**
     * Enable/disable proxy-mode policy inline IPS support. Valid values: `disable`, `enable`.
     */
    public readonly proxyInlineIps!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a Settings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingsArgs | SettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingsState | undefined;
            resourceInputs["ipsPacketQuota"] = state ? state.ipsPacketQuota : undefined;
            resourceInputs["packetLogHistory"] = state ? state.packetLogHistory : undefined;
            resourceInputs["packetLogMemory"] = state ? state.packetLogMemory : undefined;
            resourceInputs["packetLogPostAttack"] = state ? state.packetLogPostAttack : undefined;
            resourceInputs["proxyInlineIps"] = state ? state.proxyInlineIps : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SettingsArgs | undefined;
            resourceInputs["ipsPacketQuota"] = args ? args.ipsPacketQuota : undefined;
            resourceInputs["packetLogHistory"] = args ? args.packetLogHistory : undefined;
            resourceInputs["packetLogMemory"] = args ? args.packetLogMemory : undefined;
            resourceInputs["packetLogPostAttack"] = args ? args.packetLogPostAttack : undefined;
            resourceInputs["proxyInlineIps"] = args ? args.proxyInlineIps : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Settings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Settings resources.
 */
export interface SettingsState {
    /**
     * Maximum amount of disk space in MB for logged packets when logging to disk. Range depends on disk size.
     */
    ipsPacketQuota?: pulumi.Input<number>;
    /**
     * Number of packets to capture before and including the one in which the IPS signature is detected (1 - 255).
     */
    packetLogHistory?: pulumi.Input<number>;
    /**
     * Maximum memory can be used by packet log (64 - 8192 kB).
     */
    packetLogMemory?: pulumi.Input<number>;
    /**
     * Number of packets to log after the IPS signature is detected (0 - 255).
     */
    packetLogPostAttack?: pulumi.Input<number>;
    /**
     * Enable/disable proxy-mode policy inline IPS support. Valid values: `disable`, `enable`.
     */
    proxyInlineIps?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Settings resource.
 */
export interface SettingsArgs {
    /**
     * Maximum amount of disk space in MB for logged packets when logging to disk. Range depends on disk size.
     */
    ipsPacketQuota?: pulumi.Input<number>;
    /**
     * Number of packets to capture before and including the one in which the IPS signature is detected (1 - 255).
     */
    packetLogHistory?: pulumi.Input<number>;
    /**
     * Maximum memory can be used by packet log (64 - 8192 kB).
     */
    packetLogMemory?: pulumi.Input<number>;
    /**
     * Number of packets to log after the IPS signature is detected (0 - 255).
     */
    packetLogPostAttack?: pulumi.Input<number>;
    /**
     * Enable/disable proxy-mode policy inline IPS support. Valid values: `disable`, `enable`.
     */
    proxyInlineIps?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
