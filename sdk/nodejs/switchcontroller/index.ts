// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CustomcommandArgs, CustomcommandState } from "./customcommand";
export type Customcommand = import("./customcommand").Customcommand;
export const Customcommand: typeof import("./customcommand").Customcommand = null as any;
utilities.lazyLoad(exports, ["Customcommand"], () => require("./customcommand"));

export { DynamicportpolicyArgs, DynamicportpolicyState } from "./dynamicportpolicy";
export type Dynamicportpolicy = import("./dynamicportpolicy").Dynamicportpolicy;
export const Dynamicportpolicy: typeof import("./dynamicportpolicy").Dynamicportpolicy = null as any;
utilities.lazyLoad(exports, ["Dynamicportpolicy"], () => require("./dynamicportpolicy"));

export { FlowtrackingArgs, FlowtrackingState } from "./flowtracking";
export type Flowtracking = import("./flowtracking").Flowtracking;
export const Flowtracking: typeof import("./flowtracking").Flowtracking = null as any;
utilities.lazyLoad(exports, ["Flowtracking"], () => require("./flowtracking"));

export { FortilinksettingsArgs, FortilinksettingsState } from "./fortilinksettings";
export type Fortilinksettings = import("./fortilinksettings").Fortilinksettings;
export const Fortilinksettings: typeof import("./fortilinksettings").Fortilinksettings = null as any;
utilities.lazyLoad(exports, ["Fortilinksettings"], () => require("./fortilinksettings"));

export { GlobalArgs, GlobalState } from "./global";
export type Global = import("./global").Global;
export const Global: typeof import("./global").Global = null as any;
utilities.lazyLoad(exports, ["Global"], () => require("./global"));

export { IgmpsnoopingArgs, IgmpsnoopingState } from "./igmpsnooping";
export type Igmpsnooping = import("./igmpsnooping").Igmpsnooping;
export const Igmpsnooping: typeof import("./igmpsnooping").Igmpsnooping = null as any;
utilities.lazyLoad(exports, ["Igmpsnooping"], () => require("./igmpsnooping"));

export { LldpprofileArgs, LldpprofileState } from "./lldpprofile";
export type Lldpprofile = import("./lldpprofile").Lldpprofile;
export const Lldpprofile: typeof import("./lldpprofile").Lldpprofile = null as any;
utilities.lazyLoad(exports, ["Lldpprofile"], () => require("./lldpprofile"));

export { LldpsettingsArgs, LldpsettingsState } from "./lldpsettings";
export type Lldpsettings = import("./lldpsettings").Lldpsettings;
export const Lldpsettings: typeof import("./lldpsettings").Lldpsettings = null as any;
utilities.lazyLoad(exports, ["Lldpsettings"], () => require("./lldpsettings"));

export { LocationArgs, LocationState } from "./location";
export type Location = import("./location").Location;
export const Location: typeof import("./location").Location = null as any;
utilities.lazyLoad(exports, ["Location"], () => require("./location"));

export { MacsyncsettingsArgs, MacsyncsettingsState } from "./macsyncsettings";
export type Macsyncsettings = import("./macsyncsettings").Macsyncsettings;
export const Macsyncsettings: typeof import("./macsyncsettings").Macsyncsettings = null as any;
utilities.lazyLoad(exports, ["Macsyncsettings"], () => require("./macsyncsettings"));

export { ManagedswitchArgs, ManagedswitchState } from "./managedswitch";
export type Managedswitch = import("./managedswitch").Managedswitch;
export const Managedswitch: typeof import("./managedswitch").Managedswitch = null as any;
utilities.lazyLoad(exports, ["Managedswitch"], () => require("./managedswitch"));

export { NacdeviceArgs, NacdeviceState } from "./nacdevice";
export type Nacdevice = import("./nacdevice").Nacdevice;
export const Nacdevice: typeof import("./nacdevice").Nacdevice = null as any;
utilities.lazyLoad(exports, ["Nacdevice"], () => require("./nacdevice"));

export { NacsettingsArgs, NacsettingsState } from "./nacsettings";
export type Nacsettings = import("./nacsettings").Nacsettings;
export const Nacsettings: typeof import("./nacsettings").Nacsettings = null as any;
utilities.lazyLoad(exports, ["Nacsettings"], () => require("./nacsettings"));

export { NetworkmonitorsettingsArgs, NetworkmonitorsettingsState } from "./networkmonitorsettings";
export type Networkmonitorsettings = import("./networkmonitorsettings").Networkmonitorsettings;
export const Networkmonitorsettings: typeof import("./networkmonitorsettings").Networkmonitorsettings = null as any;
utilities.lazyLoad(exports, ["Networkmonitorsettings"], () => require("./networkmonitorsettings"));

export { PortpolicyArgs, PortpolicyState } from "./portpolicy";
export type Portpolicy = import("./portpolicy").Portpolicy;
export const Portpolicy: typeof import("./portpolicy").Portpolicy = null as any;
utilities.lazyLoad(exports, ["Portpolicy"], () => require("./portpolicy"));

export { QuarantineArgs, QuarantineState } from "./quarantine";
export type Quarantine = import("./quarantine").Quarantine;
export const Quarantine: typeof import("./quarantine").Quarantine = null as any;
utilities.lazyLoad(exports, ["Quarantine"], () => require("./quarantine"));

export { RemotelogArgs, RemotelogState } from "./remotelog";
export type Remotelog = import("./remotelog").Remotelog;
export const Remotelog: typeof import("./remotelog").Remotelog = null as any;
utilities.lazyLoad(exports, ["Remotelog"], () => require("./remotelog"));

export { Settings8021XArgs, Settings8021XState } from "./settings8021X";
export type Settings8021X = import("./settings8021X").Settings8021X;
export const Settings8021X: typeof import("./settings8021X").Settings8021X = null as any;
utilities.lazyLoad(exports, ["Settings8021X"], () => require("./settings8021X"));

export { SflowArgs, SflowState } from "./sflow";
export type Sflow = import("./sflow").Sflow;
export const Sflow: typeof import("./sflow").Sflow = null as any;
utilities.lazyLoad(exports, ["Sflow"], () => require("./sflow"));

export { SnmpcommunityArgs, SnmpcommunityState } from "./snmpcommunity";
export type Snmpcommunity = import("./snmpcommunity").Snmpcommunity;
export const Snmpcommunity: typeof import("./snmpcommunity").Snmpcommunity = null as any;
utilities.lazyLoad(exports, ["Snmpcommunity"], () => require("./snmpcommunity"));

export { SnmpsysinfoArgs, SnmpsysinfoState } from "./snmpsysinfo";
export type Snmpsysinfo = import("./snmpsysinfo").Snmpsysinfo;
export const Snmpsysinfo: typeof import("./snmpsysinfo").Snmpsysinfo = null as any;
utilities.lazyLoad(exports, ["Snmpsysinfo"], () => require("./snmpsysinfo"));

export { SnmptrapthresholdArgs, SnmptrapthresholdState } from "./snmptrapthreshold";
export type Snmptrapthreshold = import("./snmptrapthreshold").Snmptrapthreshold;
export const Snmptrapthreshold: typeof import("./snmptrapthreshold").Snmptrapthreshold = null as any;
utilities.lazyLoad(exports, ["Snmptrapthreshold"], () => require("./snmptrapthreshold"));

export { SnmpuserArgs, SnmpuserState } from "./snmpuser";
export type Snmpuser = import("./snmpuser").Snmpuser;
export const Snmpuser: typeof import("./snmpuser").Snmpuser = null as any;
utilities.lazyLoad(exports, ["Snmpuser"], () => require("./snmpuser"));

export { StormcontrolArgs, StormcontrolState } from "./stormcontrol";
export type Stormcontrol = import("./stormcontrol").Stormcontrol;
export const Stormcontrol: typeof import("./stormcontrol").Stormcontrol = null as any;
utilities.lazyLoad(exports, ["Stormcontrol"], () => require("./stormcontrol"));

export { StormcontrolpolicyArgs, StormcontrolpolicyState } from "./stormcontrolpolicy";
export type Stormcontrolpolicy = import("./stormcontrolpolicy").Stormcontrolpolicy;
export const Stormcontrolpolicy: typeof import("./stormcontrolpolicy").Stormcontrolpolicy = null as any;
utilities.lazyLoad(exports, ["Stormcontrolpolicy"], () => require("./stormcontrolpolicy"));

export { StpinstanceArgs, StpinstanceState } from "./stpinstance";
export type Stpinstance = import("./stpinstance").Stpinstance;
export const Stpinstance: typeof import("./stpinstance").Stpinstance = null as any;
utilities.lazyLoad(exports, ["Stpinstance"], () => require("./stpinstance"));

export { StpsettingsArgs, StpsettingsState } from "./stpsettings";
export type Stpsettings = import("./stpsettings").Stpsettings;
export const Stpsettings: typeof import("./stpsettings").Stpsettings = null as any;
utilities.lazyLoad(exports, ["Stpsettings"], () => require("./stpsettings"));

export { SwitchgroupArgs, SwitchgroupState } from "./switchgroup";
export type Switchgroup = import("./switchgroup").Switchgroup;
export const Switchgroup: typeof import("./switchgroup").Switchgroup = null as any;
utilities.lazyLoad(exports, ["Switchgroup"], () => require("./switchgroup"));

export { SwitchinterfacetagArgs, SwitchinterfacetagState } from "./switchinterfacetag";
export type Switchinterfacetag = import("./switchinterfacetag").Switchinterfacetag;
export const Switchinterfacetag: typeof import("./switchinterfacetag").Switchinterfacetag = null as any;
utilities.lazyLoad(exports, ["Switchinterfacetag"], () => require("./switchinterfacetag"));

export { SwitchlogArgs, SwitchlogState } from "./switchlog";
export type Switchlog = import("./switchlog").Switchlog;
export const Switchlog: typeof import("./switchlog").Switchlog = null as any;
utilities.lazyLoad(exports, ["Switchlog"], () => require("./switchlog"));

export { SwitchprofileArgs, SwitchprofileState } from "./switchprofile";
export type Switchprofile = import("./switchprofile").Switchprofile;
export const Switchprofile: typeof import("./switchprofile").Switchprofile = null as any;
utilities.lazyLoad(exports, ["Switchprofile"], () => require("./switchprofile"));

export { SystemArgs, SystemState } from "./system";
export type System = import("./system").System;
export const System: typeof import("./system").System = null as any;
utilities.lazyLoad(exports, ["System"], () => require("./system"));

export { TrafficpolicyArgs, TrafficpolicyState } from "./trafficpolicy";
export type Trafficpolicy = import("./trafficpolicy").Trafficpolicy;
export const Trafficpolicy: typeof import("./trafficpolicy").Trafficpolicy = null as any;
utilities.lazyLoad(exports, ["Trafficpolicy"], () => require("./trafficpolicy"));

export { TrafficsnifferArgs, TrafficsnifferState } from "./trafficsniffer";
export type Trafficsniffer = import("./trafficsniffer").Trafficsniffer;
export const Trafficsniffer: typeof import("./trafficsniffer").Trafficsniffer = null as any;
utilities.lazyLoad(exports, ["Trafficsniffer"], () => require("./trafficsniffer"));

export { VirtualportpoolArgs, VirtualportpoolState } from "./virtualportpool";
export type Virtualportpool = import("./virtualportpool").Virtualportpool;
export const Virtualportpool: typeof import("./virtualportpool").Virtualportpool = null as any;
utilities.lazyLoad(exports, ["Virtualportpool"], () => require("./virtualportpool"));

export { VlanArgs, VlanState } from "./vlan";
export type Vlan = import("./vlan").Vlan;
export const Vlan: typeof import("./vlan").Vlan = null as any;
utilities.lazyLoad(exports, ["Vlan"], () => require("./vlan"));

export { VlanpolicyArgs, VlanpolicyState } from "./vlanpolicy";
export type Vlanpolicy = import("./vlanpolicy").Vlanpolicy;
export const Vlanpolicy: typeof import("./vlanpolicy").Vlanpolicy = null as any;
utilities.lazyLoad(exports, ["Vlanpolicy"], () => require("./vlanpolicy"));


// Export sub-modules:
import * as acl from "./acl";
import * as autoconfig from "./autoconfig";
import * as initialconfig from "./initialconfig";
import * as ptp from "./ptp";
import * as qos from "./qos";
import * as securitypolicy from "./securitypolicy";

export {
    acl,
    autoconfig,
    initialconfig,
    ptp,
    qos,
    securitypolicy,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fortios:switchcontroller/customcommand:Customcommand":
                return new Customcommand(name, <any>undefined, { urn })
            case "fortios:switchcontroller/dynamicportpolicy:Dynamicportpolicy":
                return new Dynamicportpolicy(name, <any>undefined, { urn })
            case "fortios:switchcontroller/flowtracking:Flowtracking":
                return new Flowtracking(name, <any>undefined, { urn })
            case "fortios:switchcontroller/fortilinksettings:Fortilinksettings":
                return new Fortilinksettings(name, <any>undefined, { urn })
            case "fortios:switchcontroller/global:Global":
                return new Global(name, <any>undefined, { urn })
            case "fortios:switchcontroller/igmpsnooping:Igmpsnooping":
                return new Igmpsnooping(name, <any>undefined, { urn })
            case "fortios:switchcontroller/lldpprofile:Lldpprofile":
                return new Lldpprofile(name, <any>undefined, { urn })
            case "fortios:switchcontroller/lldpsettings:Lldpsettings":
                return new Lldpsettings(name, <any>undefined, { urn })
            case "fortios:switchcontroller/location:Location":
                return new Location(name, <any>undefined, { urn })
            case "fortios:switchcontroller/macsyncsettings:Macsyncsettings":
                return new Macsyncsettings(name, <any>undefined, { urn })
            case "fortios:switchcontroller/managedswitch:Managedswitch":
                return new Managedswitch(name, <any>undefined, { urn })
            case "fortios:switchcontroller/nacdevice:Nacdevice":
                return new Nacdevice(name, <any>undefined, { urn })
            case "fortios:switchcontroller/nacsettings:Nacsettings":
                return new Nacsettings(name, <any>undefined, { urn })
            case "fortios:switchcontroller/networkmonitorsettings:Networkmonitorsettings":
                return new Networkmonitorsettings(name, <any>undefined, { urn })
            case "fortios:switchcontroller/portpolicy:Portpolicy":
                return new Portpolicy(name, <any>undefined, { urn })
            case "fortios:switchcontroller/quarantine:Quarantine":
                return new Quarantine(name, <any>undefined, { urn })
            case "fortios:switchcontroller/remotelog:Remotelog":
                return new Remotelog(name, <any>undefined, { urn })
            case "fortios:switchcontroller/settings8021X:Settings8021X":
                return new Settings8021X(name, <any>undefined, { urn })
            case "fortios:switchcontroller/sflow:Sflow":
                return new Sflow(name, <any>undefined, { urn })
            case "fortios:switchcontroller/snmpcommunity:Snmpcommunity":
                return new Snmpcommunity(name, <any>undefined, { urn })
            case "fortios:switchcontroller/snmpsysinfo:Snmpsysinfo":
                return new Snmpsysinfo(name, <any>undefined, { urn })
            case "fortios:switchcontroller/snmptrapthreshold:Snmptrapthreshold":
                return new Snmptrapthreshold(name, <any>undefined, { urn })
            case "fortios:switchcontroller/snmpuser:Snmpuser":
                return new Snmpuser(name, <any>undefined, { urn })
            case "fortios:switchcontroller/stormcontrol:Stormcontrol":
                return new Stormcontrol(name, <any>undefined, { urn })
            case "fortios:switchcontroller/stormcontrolpolicy:Stormcontrolpolicy":
                return new Stormcontrolpolicy(name, <any>undefined, { urn })
            case "fortios:switchcontroller/stpinstance:Stpinstance":
                return new Stpinstance(name, <any>undefined, { urn })
            case "fortios:switchcontroller/stpsettings:Stpsettings":
                return new Stpsettings(name, <any>undefined, { urn })
            case "fortios:switchcontroller/switchgroup:Switchgroup":
                return new Switchgroup(name, <any>undefined, { urn })
            case "fortios:switchcontroller/switchinterfacetag:Switchinterfacetag":
                return new Switchinterfacetag(name, <any>undefined, { urn })
            case "fortios:switchcontroller/switchlog:Switchlog":
                return new Switchlog(name, <any>undefined, { urn })
            case "fortios:switchcontroller/switchprofile:Switchprofile":
                return new Switchprofile(name, <any>undefined, { urn })
            case "fortios:switchcontroller/system:System":
                return new System(name, <any>undefined, { urn })
            case "fortios:switchcontroller/trafficpolicy:Trafficpolicy":
                return new Trafficpolicy(name, <any>undefined, { urn })
            case "fortios:switchcontroller/trafficsniffer:Trafficsniffer":
                return new Trafficsniffer(name, <any>undefined, { urn })
            case "fortios:switchcontroller/virtualportpool:Virtualportpool":
                return new Virtualportpool(name, <any>undefined, { urn })
            case "fortios:switchcontroller/vlan:Vlan":
                return new Vlan(name, <any>undefined, { urn })
            case "fortios:switchcontroller/vlanpolicy:Vlanpolicy":
                return new Vlanpolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/customcommand", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/dynamicportpolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/flowtracking", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/fortilinksettings", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/global", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/igmpsnooping", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/lldpprofile", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/lldpsettings", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/location", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/macsyncsettings", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/managedswitch", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/nacdevice", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/nacsettings", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/networkmonitorsettings", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/portpolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/quarantine", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/remotelog", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/settings8021X", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/sflow", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/snmpcommunity", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/snmpsysinfo", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/snmptrapthreshold", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/snmpuser", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/stormcontrol", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/stormcontrolpolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/stpinstance", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/stpsettings", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/switchgroup", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/switchinterfacetag", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/switchlog", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/switchprofile", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/system", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/trafficpolicy", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/trafficsniffer", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/virtualportpool", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/vlan", _module)
pulumi.runtime.registerResourceModule("fortios", "switchcontroller/vlanpolicy", _module)
