// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Configure L2TP.
 *
 * ## Import
 *
 * Vpn L2Tp can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:vpn/l2tp:L2tp labelname VpnL2Tp
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:vpn/l2tp:L2tp labelname VpnL2Tp
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class L2tp extends pulumi.CustomResource {
    /**
     * Get an existing L2tp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: L2tpState, opts?: pulumi.CustomResourceOptions): L2tp {
        return new L2tp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:vpn/l2tp:L2tp';

    /**
     * Returns true if the given object is an instance of L2tp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is L2tp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === L2tp.__pulumiType;
    }

    /**
     * Enable/disable data compression. Valid values: `enable`, `disable`.
     */
    public readonly compress!: pulumi.Output<string>;
    /**
     * End IP.
     */
    public readonly eip!: pulumi.Output<string>;
    /**
     * Enable/disable IPsec enforcement. Valid values: `enable`, `disable`.
     */
    public readonly enforceIpsec!: pulumi.Output<string>;
    /**
     * L2TP hello message interval in seconds (0 - 3600 sec, default = 60).
     */
    public readonly helloInterval!: pulumi.Output<number>;
    /**
     * Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
     */
    public readonly lcpEchoInterval!: pulumi.Output<number>;
    /**
     * Maximum number of missed LCP echo messages before disconnect.
     */
    public readonly lcpMaxEchoFails!: pulumi.Output<number>;
    /**
     * Start IP.
     */
    public readonly sip!: pulumi.Output<string>;
    /**
     * Enable/disable FortiGate as a L2TP gateway. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * User group.
     */
    public readonly usrgrp!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a L2tp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: L2tpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: L2tpArgs | L2tpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as L2tpState | undefined;
            resourceInputs["compress"] = state ? state.compress : undefined;
            resourceInputs["eip"] = state ? state.eip : undefined;
            resourceInputs["enforceIpsec"] = state ? state.enforceIpsec : undefined;
            resourceInputs["helloInterval"] = state ? state.helloInterval : undefined;
            resourceInputs["lcpEchoInterval"] = state ? state.lcpEchoInterval : undefined;
            resourceInputs["lcpMaxEchoFails"] = state ? state.lcpMaxEchoFails : undefined;
            resourceInputs["sip"] = state ? state.sip : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["usrgrp"] = state ? state.usrgrp : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as L2tpArgs | undefined;
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            resourceInputs["compress"] = args ? args.compress : undefined;
            resourceInputs["eip"] = args ? args.eip : undefined;
            resourceInputs["enforceIpsec"] = args ? args.enforceIpsec : undefined;
            resourceInputs["helloInterval"] = args ? args.helloInterval : undefined;
            resourceInputs["lcpEchoInterval"] = args ? args.lcpEchoInterval : undefined;
            resourceInputs["lcpMaxEchoFails"] = args ? args.lcpMaxEchoFails : undefined;
            resourceInputs["sip"] = args ? args.sip : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["usrgrp"] = args ? args.usrgrp : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(L2tp.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering L2tp resources.
 */
export interface L2tpState {
    /**
     * Enable/disable data compression. Valid values: `enable`, `disable`.
     */
    compress?: pulumi.Input<string>;
    /**
     * End IP.
     */
    eip?: pulumi.Input<string>;
    /**
     * Enable/disable IPsec enforcement. Valid values: `enable`, `disable`.
     */
    enforceIpsec?: pulumi.Input<string>;
    /**
     * L2TP hello message interval in seconds (0 - 3600 sec, default = 60).
     */
    helloInterval?: pulumi.Input<number>;
    /**
     * Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
     */
    lcpEchoInterval?: pulumi.Input<number>;
    /**
     * Maximum number of missed LCP echo messages before disconnect.
     */
    lcpMaxEchoFails?: pulumi.Input<number>;
    /**
     * Start IP.
     */
    sip?: pulumi.Input<string>;
    /**
     * Enable/disable FortiGate as a L2TP gateway. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * User group.
     */
    usrgrp?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a L2tp resource.
 */
export interface L2tpArgs {
    /**
     * Enable/disable data compression. Valid values: `enable`, `disable`.
     */
    compress?: pulumi.Input<string>;
    /**
     * End IP.
     */
    eip?: pulumi.Input<string>;
    /**
     * Enable/disable IPsec enforcement. Valid values: `enable`, `disable`.
     */
    enforceIpsec?: pulumi.Input<string>;
    /**
     * L2TP hello message interval in seconds (0 - 3600 sec, default = 60).
     */
    helloInterval?: pulumi.Input<number>;
    /**
     * Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
     */
    lcpEchoInterval?: pulumi.Input<number>;
    /**
     * Maximum number of missed LCP echo messages before disconnect.
     */
    lcpMaxEchoFails?: pulumi.Input<number>;
    /**
     * Start IP.
     */
    sip?: pulumi.Input<string>;
    /**
     * Enable/disable FortiGate as a L2TP gateway. Valid values: `enable`, `disable`.
     */
    status: pulumi.Input<string>;
    /**
     * User group.
     */
    usrgrp?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
