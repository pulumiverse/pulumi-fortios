// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * Use this data source to get information on fortios vpnssl settings
 */
export function getSettings(args?: GetSettingsArgs, opts?: pulumi.InvokeOptions): Promise<GetSettingsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortios:vpn/ssl/getSettings:getSettings", {
        "vdomparam": args.vdomparam,
    }, opts);
}

/**
 * A collection of arguments for invoking getSettings.
 */
export interface GetSettingsArgs {
    /**
     * Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: string;
}

/**
 * A collection of values returned by getSettings.
 */
export interface GetSettingsResult {
    /**
     * Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any.
     */
    readonly algorithm: string;
    /**
     * Enable/disable checking of source IP for authentication session.
     */
    readonly authSessionCheckSourceIp: string;
    /**
     * SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
     */
    readonly authTimeout: number;
    /**
     * Authentication rule for SSL VPN. The structure of `authenticationRule` block is documented below.
     */
    readonly authenticationRules: outputs.vpn.ssl.GetSettingsAuthenticationRule[];
    /**
     * Enable to auto-create static routes for the SSL-VPN tunnel IP addresses.
     */
    readonly autoTunnelStaticRoute: string;
    /**
     * Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
     */
    readonly bannedCipher: string;
    /**
     * Enable/disable overriding the configured system language based on the preferred language of the browser.
     */
    readonly browserLanguageDetection: string;
    /**
     * Enable/disable verification of referer field in HTTP request header.
     */
    readonly checkReferer: string;
    /**
     * Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below.
     */
    readonly ciphersuite: string;
    /**
     * Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only.
     */
    readonly clientSigalgs: string;
    /**
     * Default SSL VPN portal.
     */
    readonly defaultPortal: string;
    /**
     * Compression level (0~9).
     */
    readonly deflateCompressionLevel: number;
    /**
     * Minimum amount of data that triggers compression (200 - 65535 bytes).
     */
    readonly deflateMinDataSize: number;
    /**
     * DNS server 1.
     */
    readonly dnsServer1: string;
    /**
     * DNS server 2.
     */
    readonly dnsServer2: string;
    /**
     * DNS suffix used for SSL-VPN clients.
     */
    readonly dnsSuffix: string;
    /**
     * Number of missing heartbeats before the connection is considered dropped.
     */
    readonly dtlsHeartbeatFailCount: number;
    /**
     * Idle timeout before DTLS heartbeat is sent.
     */
    readonly dtlsHeartbeatIdleTimeout: number;
    /**
     * Interval between DTLS heartbeat.
     */
    readonly dtlsHeartbeatInterval: number;
    /**
     * SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
     */
    readonly dtlsHelloTimeout: number;
    /**
     * DTLS maximum protocol version.
     */
    readonly dtlsMaxProtoVer: string;
    /**
     * DTLS minimum protocol version.
     */
    readonly dtlsMinProtoVer: string;
    /**
     * Enable DTLS to prevent eavesdropping, tampering, or message forgery.
     */
    readonly dtlsTunnel: string;
    /**
     * Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal.
     */
    readonly dualStackMode: string;
    /**
     * Encode \2F sequence to forward slash in URLs.
     */
    readonly encode2fSequence: string;
    /**
     * Encrypt and store user passwords for SSL-VPN web sessions.
     */
    readonly encryptAndStorePassword: string;
    /**
     * Enable to force two-factor authentication for all SSL-VPNs.
     */
    readonly forceTwoFactorAuth: string;
    /**
     * Forward the same, add, or remove HTTP header.
     */
    readonly headerXForwardedFor: string;
    /**
     * Add HSTS includeSubDomains response header.
     */
    readonly hstsIncludeSubdomains: string;
    /**
     * Enable to allow HTTP compression over SSL-VPN tunnels.
     */
    readonly httpCompression: string;
    /**
     * Enable/disable SSL-VPN support for HttpOnly cookies.
     */
    readonly httpOnlyCookie: string;
    /**
     * SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
     */
    readonly httpRequestBodyTimeout: number;
    /**
     * SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
     */
    readonly httpRequestHeaderTimeout: number;
    /**
     * Enable/disable redirect of port 80 to SSL-VPN port.
     */
    readonly httpsRedirect: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * SSL VPN disconnects if idle for specified time in seconds.
     */
    readonly idleTimeout: number;
    /**
     * IPv6 DNS server 1.
     */
    readonly ipv6DnsServer1: string;
    /**
     * IPv6 DNS server 2.
     */
    readonly ipv6DnsServer2: string;
    /**
     * IPv6 WINS server 1.
     */
    readonly ipv6WinsServer1: string;
    /**
     * IPv6 WINS server 2.
     */
    readonly ipv6WinsServer2: string;
    /**
     * SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
     */
    readonly loginAttemptLimit: number;
    /**
     * Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
     */
    readonly loginBlockTime: number;
    /**
     * SSLVPN maximum login timeout (10 - 180 sec, default = 30).
     */
    readonly loginTimeout: number;
    /**
     * SSL-VPN access port (1 - 65535).
     */
    readonly port: number;
    /**
     * Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface.
     */
    readonly portPrecedence: string;
    /**
     * Enable to require client certificates for all SSL-VPN users.
     */
    readonly reqclientcert: string;
    /**
     * Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface.
     */
    readonly routeSourceInterface: string;
    /**
     * SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
     */
    readonly samlRedirectPort: number;
    /**
     * Server hostname for HTTPS. When set, will be used for SSL VPN web proxy host header for any redirection.
     */
    readonly serverHostname: string;
    /**
     * Name of the server certificate to be used for SSL-VPNs.
     */
    readonly servercert: string;
    /**
     * Enable/disable negated source IPv6 address match.
     */
    readonly sourceAddress6Negate: string;
    /**
     * IPv6 source address of incoming traffic. The structure of `sourceAddress6` block is documented below.
     */
    readonly sourceAddress6s: outputs.vpn.ssl.GetSettingsSourceAddress6[];
    /**
     * Enable/disable negated source address match.
     */
    readonly sourceAddressNegate: string;
    /**
     * Source address of incoming traffic. The structure of `sourceAddress` block is documented below.
     */
    readonly sourceAddresses: outputs.vpn.ssl.GetSettingsSourceAddress[];
    /**
     * SSL VPN source interface of incoming traffic. The structure of `sourceInterface` block is documented below.
     */
    readonly sourceInterfaces: outputs.vpn.ssl.GetSettingsSourceInterface[];
    /**
     * Enable to allow client renegotiation by the server if the tunnel goes down.
     */
    readonly sslClientRenegotiation: string;
    /**
     * Enable/disable insertion of empty fragment.
     */
    readonly sslInsertEmptyFragment: string;
    /**
     * SSL maximum protocol version.
     */
    readonly sslMaxProtoVer: string;
    /**
     * SSL minimum protocol version.
     */
    readonly sslMinProtoVer: string;
    /**
     * Enable/disable SSL-VPN.
     */
    readonly status: string;
    /**
     * Enable/disable TLSv1.0.
     */
    readonly tlsv10: string;
    /**
     * Enable/disable TLSv1.1.
     */
    readonly tlsv11: string;
    /**
     * Enable/disable TLSv1.2.
     */
    readonly tlsv12: string;
    /**
     * Enable/disable TLSv1.3.
     */
    readonly tlsv13: string;
    /**
     * Transform backward slashes to forward slashes in URLs.
     */
    readonly transformBackwardSlashes: string;
    /**
     * Method used for assigning address for tunnel.
     */
    readonly tunnelAddrAssignedMethod: string;
    /**
     * Enable/disable tunnel connection without re-authorization if previous connection dropped.
     */
    readonly tunnelConnectWithoutReauth: string;
    /**
     * Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpPools` block is documented below.
     */
    readonly tunnelIpPools: outputs.vpn.ssl.GetSettingsTunnelIpPool[];
    /**
     * Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpv6Pools` block is documented below.
     */
    readonly tunnelIpv6Pools: outputs.vpn.ssl.GetSettingsTunnelIpv6Pool[];
    /**
     * Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
     */
    readonly tunnelUserSessionTimeout: number;
    /**
     * Enable/disable unsafe legacy re-negotiation.
     */
    readonly unsafeLegacyRenegotiation: string;
    /**
     * Enable to obscure the host name of the URL of the web browser display.
     */
    readonly urlObscuration: string;
    /**
     * Name of user peer.
     */
    readonly userPeer: string;
    readonly vdomparam?: string;
    /**
     * Enable/disable use of IP pools defined in firewall policy while using web-mode.
     */
    readonly webModeSnat: string;
    /**
     * WINS server 1.
     */
    readonly winsServer1: string;
    /**
     * WINS server 2.
     */
    readonly winsServer2: string;
    /**
     * Add HTTP X-Content-Type-Options header.
     */
    readonly xContentTypeOptions: string;
    /**
     * Enable/disable verification of device certificate for SSLVPN ZTNA session.
     */
    readonly ztnaTrustedClient: string;
}
/**
 * Use this data source to get information on fortios vpnssl settings
 */
export function getSettingsOutput(args?: GetSettingsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSettingsResult> {
    return pulumi.output(args).apply((a: any) => getSettings(a, opts))
}

/**
 * A collection of arguments for invoking getSettings.
 */
export interface GetSettingsOutputArgs {
    /**
     * Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
