// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * Configure SSL VPN.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trname = new fortios.vpn.ssl.Settings("trname", {
 *     loginAttemptLimit: 2,
 *     loginBlockTime: 60,
 *     loginTimeout: 30,
 *     port: 443,
 *     servercert: "self-sign",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * VpnSsl Settings can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:vpn/ssl/settings:Settings labelname VpnSslSettings
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:vpn/ssl/settings:Settings labelname VpnSslSettings
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Settings extends pulumi.CustomResource {
    /**
     * Get an existing Settings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingsState, opts?: pulumi.CustomResourceOptions): Settings {
        return new Settings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:vpn/ssl/settings:Settings';

    /**
     * Returns true if the given object is an instance of Settings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Settings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Settings.__pulumiType;
    }

    /**
     * Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any. Valid values: `high`, `medium`, `default`, `low`.
     */
    public readonly algorithm!: pulumi.Output<string>;
    /**
     * Enable/disable checking of source IP for authentication session. Valid values: `enable`, `disable`.
     */
    public readonly authSessionCheckSourceIp!: pulumi.Output<string>;
    /**
     * SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
     */
    public readonly authTimeout!: pulumi.Output<number>;
    /**
     * Authentication rule for SSL VPN. The structure of `authenticationRule` block is documented below.
     */
    public readonly authenticationRules!: pulumi.Output<outputs.vpn.ssl.SettingsAuthenticationRule[] | undefined>;
    /**
     * Enable to auto-create static routes for the SSL-VPN tunnel IP addresses. Valid values: `enable`, `disable`.
     */
    public readonly autoTunnelStaticRoute!: pulumi.Output<string>;
    /**
     * Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
     */
    public readonly bannedCipher!: pulumi.Output<string>;
    /**
     * Enable/disable overriding the configured system language based on the preferred language of the browser. Valid values: `enable`, `disable`.
     */
    public readonly browserLanguageDetection!: pulumi.Output<string>;
    /**
     * Enable/disable verification of referer field in HTTP request header. Valid values: `enable`, `disable`.
     */
    public readonly checkReferer!: pulumi.Output<string>;
    /**
     * Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-AES-128-CCM-SHA256`, `TLS-AES-128-CCM-8-SHA256`.
     */
    public readonly ciphersuite!: pulumi.Output<string>;
    /**
     * Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only. Valid values: `no-rsa-pss`, `all`.
     */
    public readonly clientSigalgs!: pulumi.Output<string>;
    /**
     * Default SSL VPN portal.
     */
    public readonly defaultPortal!: pulumi.Output<string>;
    /**
     * Compression level (0~9).
     */
    public readonly deflateCompressionLevel!: pulumi.Output<number>;
    /**
     * Minimum amount of data that triggers compression (200 - 65535 bytes).
     */
    public readonly deflateMinDataSize!: pulumi.Output<number>;
    /**
     * DNS server 1.
     */
    public readonly dnsServer1!: pulumi.Output<string>;
    /**
     * DNS server 2.
     */
    public readonly dnsServer2!: pulumi.Output<string>;
    /**
     * DNS suffix used for SSL-VPN clients.
     */
    public readonly dnsSuffix!: pulumi.Output<string | undefined>;
    /**
     * Number of missing heartbeats before the connection is considered dropped.
     */
    public readonly dtlsHeartbeatFailCount!: pulumi.Output<number>;
    /**
     * Idle timeout before DTLS heartbeat is sent.
     */
    public readonly dtlsHeartbeatIdleTimeout!: pulumi.Output<number>;
    /**
     * Interval between DTLS heartbeat.
     */
    public readonly dtlsHeartbeatInterval!: pulumi.Output<number>;
    /**
     * SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
     */
    public readonly dtlsHelloTimeout!: pulumi.Output<number>;
    /**
     * DTLS maximum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
     */
    public readonly dtlsMaxProtoVer!: pulumi.Output<string>;
    /**
     * DTLS minimum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
     */
    public readonly dtlsMinProtoVer!: pulumi.Output<string>;
    /**
     * Enable DTLS to prevent eavesdropping, tampering, or message forgery. Valid values: `enable`, `disable`.
     */
    public readonly dtlsTunnel!: pulumi.Output<string>;
    /**
     * Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal. Valid values: `enable`, `disable`.
     */
    public readonly dualStackMode!: pulumi.Output<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Encode \2F sequence to forward slash in URLs. Valid values: `enable`, `disable`.
     */
    public readonly encode2fSequence!: pulumi.Output<string>;
    /**
     * Encrypt and store user passwords for SSL-VPN web sessions. Valid values: `enable`, `disable`.
     */
    public readonly encryptAndStorePassword!: pulumi.Output<string>;
    /**
     * Enable to force two-factor authentication for all SSL-VPNs. Valid values: `enable`, `disable`.
     */
    public readonly forceTwoFactorAuth!: pulumi.Output<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Forward the same, add, or remove HTTP header. Valid values: `pass`, `add`, `remove`.
     */
    public readonly headerXForwardedFor!: pulumi.Output<string>;
    /**
     * Add HSTS includeSubDomains response header. Valid values: `enable`, `disable`.
     */
    public readonly hstsIncludeSubdomains!: pulumi.Output<string>;
    /**
     * Enable to allow HTTP compression over SSL-VPN tunnels. Valid values: `enable`, `disable`.
     */
    public readonly httpCompression!: pulumi.Output<string>;
    /**
     * Enable/disable SSL-VPN support for HttpOnly cookies. Valid values: `enable`, `disable`.
     */
    public readonly httpOnlyCookie!: pulumi.Output<string>;
    /**
     * SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
     */
    public readonly httpRequestBodyTimeout!: pulumi.Output<number>;
    /**
     * SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
     */
    public readonly httpRequestHeaderTimeout!: pulumi.Output<number>;
    /**
     * Enable/disable redirect of port 80 to SSL-VPN port. Valid values: `enable`, `disable`.
     */
    public readonly httpsRedirect!: pulumi.Output<string>;
    /**
     * SSL VPN disconnects if idle for specified time in seconds.
     */
    public readonly idleTimeout!: pulumi.Output<number>;
    /**
     * IPv6 DNS server 1.
     */
    public readonly ipv6DnsServer1!: pulumi.Output<string>;
    /**
     * IPv6 DNS server 2.
     */
    public readonly ipv6DnsServer2!: pulumi.Output<string>;
    /**
     * IPv6 WINS server 1.
     */
    public readonly ipv6WinsServer1!: pulumi.Output<string>;
    /**
     * IPv6 WINS server 2.
     */
    public readonly ipv6WinsServer2!: pulumi.Output<string>;
    /**
     * SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
     */
    public readonly loginAttemptLimit!: pulumi.Output<number>;
    /**
     * Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
     */
    public readonly loginBlockTime!: pulumi.Output<number>;
    /**
     * SSLVPN maximum login timeout (10 - 180 sec, default = 30).
     */
    public readonly loginTimeout!: pulumi.Output<number>;
    /**
     * SSL-VPN access port (1 - 65535).
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface. Valid values: `enable`, `disable`.
     */
    public readonly portPrecedence!: pulumi.Output<string>;
    /**
     * Enable to require client certificates for all SSL-VPN users. Valid values: `enable`, `disable`.
     */
    public readonly reqclientcert!: pulumi.Output<string>;
    /**
     * Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface. Valid values: `enable`, `disable`.
     */
    public readonly routeSourceInterface!: pulumi.Output<string>;
    /**
     * SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
     */
    public readonly samlRedirectPort!: pulumi.Output<number>;
    /**
     * Server hostname for HTTPS. When set, will be used for SSL VPN web proxy host header for any redirection.
     */
    public readonly serverHostname!: pulumi.Output<string>;
    /**
     * Name of the server certificate to be used for SSL-VPNs.
     */
    public readonly servercert!: pulumi.Output<string>;
    /**
     * Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
     */
    public readonly sourceAddress6Negate!: pulumi.Output<string>;
    /**
     * IPv6 source address of incoming traffic. The structure of `sourceAddress6` block is documented below.
     */
    public readonly sourceAddress6s!: pulumi.Output<outputs.vpn.ssl.SettingsSourceAddress6[] | undefined>;
    /**
     * Enable/disable negated source address match. Valid values: `enable`, `disable`.
     */
    public readonly sourceAddressNegate!: pulumi.Output<string>;
    /**
     * Source address of incoming traffic. The structure of `sourceAddress` block is documented below.
     */
    public readonly sourceAddresses!: pulumi.Output<outputs.vpn.ssl.SettingsSourceAddress[] | undefined>;
    /**
     * SSL VPN source interface of incoming traffic. The structure of `sourceInterface` block is documented below.
     */
    public readonly sourceInterfaces!: pulumi.Output<outputs.vpn.ssl.SettingsSourceInterface[] | undefined>;
    /**
     * Enable to allow client renegotiation by the server if the tunnel goes down. Valid values: `disable`, `enable`.
     */
    public readonly sslClientRenegotiation!: pulumi.Output<string>;
    /**
     * Enable/disable insertion of empty fragment. Valid values: `enable`, `disable`.
     */
    public readonly sslInsertEmptyFragment!: pulumi.Output<string>;
    /**
     * SSL maximum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
     */
    public readonly sslMaxProtoVer!: pulumi.Output<string>;
    /**
     * SSL minimum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
     */
    public readonly sslMinProtoVer!: pulumi.Output<string>;
    /**
     * Enable/disable SSL-VPN. Valid values: `enable`, `disable`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Enable/disable TLSv1.0. Valid values: `enable`, `disable`.
     */
    public readonly tlsv10!: pulumi.Output<string>;
    /**
     * Enable/disable TLSv1.1. Valid values: `enable`, `disable`.
     */
    public readonly tlsv11!: pulumi.Output<string>;
    /**
     * Enable/disable TLSv1.2. Valid values: `enable`, `disable`.
     */
    public readonly tlsv12!: pulumi.Output<string>;
    /**
     * Enable/disable TLSv1.3. Valid values: `enable`, `disable`.
     */
    public readonly tlsv13!: pulumi.Output<string>;
    /**
     * Transform backward slashes to forward slashes in URLs. Valid values: `enable`, `disable`.
     */
    public readonly transformBackwardSlashes!: pulumi.Output<string>;
    /**
     * Method used for assigning address for tunnel. Valid values: `first-available`, `round-robin`.
     */
    public readonly tunnelAddrAssignedMethod!: pulumi.Output<string>;
    /**
     * Enable/disable tunnel connection without re-authorization if previous connection dropped. Valid values: `enable`, `disable`.
     */
    public readonly tunnelConnectWithoutReauth!: pulumi.Output<string>;
    /**
     * Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpPools` block is documented below.
     */
    public readonly tunnelIpPools!: pulumi.Output<outputs.vpn.ssl.SettingsTunnelIpPool[] | undefined>;
    /**
     * Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpv6Pools` block is documented below.
     */
    public readonly tunnelIpv6Pools!: pulumi.Output<outputs.vpn.ssl.SettingsTunnelIpv6Pool[] | undefined>;
    /**
     * Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
     */
    public readonly tunnelUserSessionTimeout!: pulumi.Output<number>;
    /**
     * Enable/disable unsafe legacy re-negotiation. Valid values: `enable`, `disable`.
     */
    public readonly unsafeLegacyRenegotiation!: pulumi.Output<string>;
    /**
     * Enable to obscure the host name of the URL of the web browser display. Valid values: `enable`, `disable`.
     */
    public readonly urlObscuration!: pulumi.Output<string>;
    /**
     * Name of user peer.
     */
    public readonly userPeer!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable use of IP pools defined in firewall policy while using web-mode. Valid values: `enable`, `disable`.
     */
    public readonly webModeSnat!: pulumi.Output<string>;
    /**
     * WINS server 1.
     */
    public readonly winsServer1!: pulumi.Output<string>;
    /**
     * WINS server 2.
     */
    public readonly winsServer2!: pulumi.Output<string>;
    /**
     * Add HTTP X-Content-Type-Options header. Valid values: `enable`, `disable`.
     */
    public readonly xContentTypeOptions!: pulumi.Output<string>;
    /**
     * Enable/disable verification of device certificate for SSLVPN ZTNA session. Valid values: `enable`, `disable`.
     */
    public readonly ztnaTrustedClient!: pulumi.Output<string>;

    /**
     * Create a Settings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingsArgs | SettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingsState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["authSessionCheckSourceIp"] = state ? state.authSessionCheckSourceIp : undefined;
            resourceInputs["authTimeout"] = state ? state.authTimeout : undefined;
            resourceInputs["authenticationRules"] = state ? state.authenticationRules : undefined;
            resourceInputs["autoTunnelStaticRoute"] = state ? state.autoTunnelStaticRoute : undefined;
            resourceInputs["bannedCipher"] = state ? state.bannedCipher : undefined;
            resourceInputs["browserLanguageDetection"] = state ? state.browserLanguageDetection : undefined;
            resourceInputs["checkReferer"] = state ? state.checkReferer : undefined;
            resourceInputs["ciphersuite"] = state ? state.ciphersuite : undefined;
            resourceInputs["clientSigalgs"] = state ? state.clientSigalgs : undefined;
            resourceInputs["defaultPortal"] = state ? state.defaultPortal : undefined;
            resourceInputs["deflateCompressionLevel"] = state ? state.deflateCompressionLevel : undefined;
            resourceInputs["deflateMinDataSize"] = state ? state.deflateMinDataSize : undefined;
            resourceInputs["dnsServer1"] = state ? state.dnsServer1 : undefined;
            resourceInputs["dnsServer2"] = state ? state.dnsServer2 : undefined;
            resourceInputs["dnsSuffix"] = state ? state.dnsSuffix : undefined;
            resourceInputs["dtlsHeartbeatFailCount"] = state ? state.dtlsHeartbeatFailCount : undefined;
            resourceInputs["dtlsHeartbeatIdleTimeout"] = state ? state.dtlsHeartbeatIdleTimeout : undefined;
            resourceInputs["dtlsHeartbeatInterval"] = state ? state.dtlsHeartbeatInterval : undefined;
            resourceInputs["dtlsHelloTimeout"] = state ? state.dtlsHelloTimeout : undefined;
            resourceInputs["dtlsMaxProtoVer"] = state ? state.dtlsMaxProtoVer : undefined;
            resourceInputs["dtlsMinProtoVer"] = state ? state.dtlsMinProtoVer : undefined;
            resourceInputs["dtlsTunnel"] = state ? state.dtlsTunnel : undefined;
            resourceInputs["dualStackMode"] = state ? state.dualStackMode : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["encode2fSequence"] = state ? state.encode2fSequence : undefined;
            resourceInputs["encryptAndStorePassword"] = state ? state.encryptAndStorePassword : undefined;
            resourceInputs["forceTwoFactorAuth"] = state ? state.forceTwoFactorAuth : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["headerXForwardedFor"] = state ? state.headerXForwardedFor : undefined;
            resourceInputs["hstsIncludeSubdomains"] = state ? state.hstsIncludeSubdomains : undefined;
            resourceInputs["httpCompression"] = state ? state.httpCompression : undefined;
            resourceInputs["httpOnlyCookie"] = state ? state.httpOnlyCookie : undefined;
            resourceInputs["httpRequestBodyTimeout"] = state ? state.httpRequestBodyTimeout : undefined;
            resourceInputs["httpRequestHeaderTimeout"] = state ? state.httpRequestHeaderTimeout : undefined;
            resourceInputs["httpsRedirect"] = state ? state.httpsRedirect : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["ipv6DnsServer1"] = state ? state.ipv6DnsServer1 : undefined;
            resourceInputs["ipv6DnsServer2"] = state ? state.ipv6DnsServer2 : undefined;
            resourceInputs["ipv6WinsServer1"] = state ? state.ipv6WinsServer1 : undefined;
            resourceInputs["ipv6WinsServer2"] = state ? state.ipv6WinsServer2 : undefined;
            resourceInputs["loginAttemptLimit"] = state ? state.loginAttemptLimit : undefined;
            resourceInputs["loginBlockTime"] = state ? state.loginBlockTime : undefined;
            resourceInputs["loginTimeout"] = state ? state.loginTimeout : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["portPrecedence"] = state ? state.portPrecedence : undefined;
            resourceInputs["reqclientcert"] = state ? state.reqclientcert : undefined;
            resourceInputs["routeSourceInterface"] = state ? state.routeSourceInterface : undefined;
            resourceInputs["samlRedirectPort"] = state ? state.samlRedirectPort : undefined;
            resourceInputs["serverHostname"] = state ? state.serverHostname : undefined;
            resourceInputs["servercert"] = state ? state.servercert : undefined;
            resourceInputs["sourceAddress6Negate"] = state ? state.sourceAddress6Negate : undefined;
            resourceInputs["sourceAddress6s"] = state ? state.sourceAddress6s : undefined;
            resourceInputs["sourceAddressNegate"] = state ? state.sourceAddressNegate : undefined;
            resourceInputs["sourceAddresses"] = state ? state.sourceAddresses : undefined;
            resourceInputs["sourceInterfaces"] = state ? state.sourceInterfaces : undefined;
            resourceInputs["sslClientRenegotiation"] = state ? state.sslClientRenegotiation : undefined;
            resourceInputs["sslInsertEmptyFragment"] = state ? state.sslInsertEmptyFragment : undefined;
            resourceInputs["sslMaxProtoVer"] = state ? state.sslMaxProtoVer : undefined;
            resourceInputs["sslMinProtoVer"] = state ? state.sslMinProtoVer : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tlsv10"] = state ? state.tlsv10 : undefined;
            resourceInputs["tlsv11"] = state ? state.tlsv11 : undefined;
            resourceInputs["tlsv12"] = state ? state.tlsv12 : undefined;
            resourceInputs["tlsv13"] = state ? state.tlsv13 : undefined;
            resourceInputs["transformBackwardSlashes"] = state ? state.transformBackwardSlashes : undefined;
            resourceInputs["tunnelAddrAssignedMethod"] = state ? state.tunnelAddrAssignedMethod : undefined;
            resourceInputs["tunnelConnectWithoutReauth"] = state ? state.tunnelConnectWithoutReauth : undefined;
            resourceInputs["tunnelIpPools"] = state ? state.tunnelIpPools : undefined;
            resourceInputs["tunnelIpv6Pools"] = state ? state.tunnelIpv6Pools : undefined;
            resourceInputs["tunnelUserSessionTimeout"] = state ? state.tunnelUserSessionTimeout : undefined;
            resourceInputs["unsafeLegacyRenegotiation"] = state ? state.unsafeLegacyRenegotiation : undefined;
            resourceInputs["urlObscuration"] = state ? state.urlObscuration : undefined;
            resourceInputs["userPeer"] = state ? state.userPeer : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["webModeSnat"] = state ? state.webModeSnat : undefined;
            resourceInputs["winsServer1"] = state ? state.winsServer1 : undefined;
            resourceInputs["winsServer2"] = state ? state.winsServer2 : undefined;
            resourceInputs["xContentTypeOptions"] = state ? state.xContentTypeOptions : undefined;
            resourceInputs["ztnaTrustedClient"] = state ? state.ztnaTrustedClient : undefined;
        } else {
            const args = argsOrState as SettingsArgs | undefined;
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["authSessionCheckSourceIp"] = args ? args.authSessionCheckSourceIp : undefined;
            resourceInputs["authTimeout"] = args ? args.authTimeout : undefined;
            resourceInputs["authenticationRules"] = args ? args.authenticationRules : undefined;
            resourceInputs["autoTunnelStaticRoute"] = args ? args.autoTunnelStaticRoute : undefined;
            resourceInputs["bannedCipher"] = args ? args.bannedCipher : undefined;
            resourceInputs["browserLanguageDetection"] = args ? args.browserLanguageDetection : undefined;
            resourceInputs["checkReferer"] = args ? args.checkReferer : undefined;
            resourceInputs["ciphersuite"] = args ? args.ciphersuite : undefined;
            resourceInputs["clientSigalgs"] = args ? args.clientSigalgs : undefined;
            resourceInputs["defaultPortal"] = args ? args.defaultPortal : undefined;
            resourceInputs["deflateCompressionLevel"] = args ? args.deflateCompressionLevel : undefined;
            resourceInputs["deflateMinDataSize"] = args ? args.deflateMinDataSize : undefined;
            resourceInputs["dnsServer1"] = args ? args.dnsServer1 : undefined;
            resourceInputs["dnsServer2"] = args ? args.dnsServer2 : undefined;
            resourceInputs["dnsSuffix"] = args ? args.dnsSuffix : undefined;
            resourceInputs["dtlsHeartbeatFailCount"] = args ? args.dtlsHeartbeatFailCount : undefined;
            resourceInputs["dtlsHeartbeatIdleTimeout"] = args ? args.dtlsHeartbeatIdleTimeout : undefined;
            resourceInputs["dtlsHeartbeatInterval"] = args ? args.dtlsHeartbeatInterval : undefined;
            resourceInputs["dtlsHelloTimeout"] = args ? args.dtlsHelloTimeout : undefined;
            resourceInputs["dtlsMaxProtoVer"] = args ? args.dtlsMaxProtoVer : undefined;
            resourceInputs["dtlsMinProtoVer"] = args ? args.dtlsMinProtoVer : undefined;
            resourceInputs["dtlsTunnel"] = args ? args.dtlsTunnel : undefined;
            resourceInputs["dualStackMode"] = args ? args.dualStackMode : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["encode2fSequence"] = args ? args.encode2fSequence : undefined;
            resourceInputs["encryptAndStorePassword"] = args ? args.encryptAndStorePassword : undefined;
            resourceInputs["forceTwoFactorAuth"] = args ? args.forceTwoFactorAuth : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["headerXForwardedFor"] = args ? args.headerXForwardedFor : undefined;
            resourceInputs["hstsIncludeSubdomains"] = args ? args.hstsIncludeSubdomains : undefined;
            resourceInputs["httpCompression"] = args ? args.httpCompression : undefined;
            resourceInputs["httpOnlyCookie"] = args ? args.httpOnlyCookie : undefined;
            resourceInputs["httpRequestBodyTimeout"] = args ? args.httpRequestBodyTimeout : undefined;
            resourceInputs["httpRequestHeaderTimeout"] = args ? args.httpRequestHeaderTimeout : undefined;
            resourceInputs["httpsRedirect"] = args ? args.httpsRedirect : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["ipv6DnsServer1"] = args ? args.ipv6DnsServer1 : undefined;
            resourceInputs["ipv6DnsServer2"] = args ? args.ipv6DnsServer2 : undefined;
            resourceInputs["ipv6WinsServer1"] = args ? args.ipv6WinsServer1 : undefined;
            resourceInputs["ipv6WinsServer2"] = args ? args.ipv6WinsServer2 : undefined;
            resourceInputs["loginAttemptLimit"] = args ? args.loginAttemptLimit : undefined;
            resourceInputs["loginBlockTime"] = args ? args.loginBlockTime : undefined;
            resourceInputs["loginTimeout"] = args ? args.loginTimeout : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["portPrecedence"] = args ? args.portPrecedence : undefined;
            resourceInputs["reqclientcert"] = args ? args.reqclientcert : undefined;
            resourceInputs["routeSourceInterface"] = args ? args.routeSourceInterface : undefined;
            resourceInputs["samlRedirectPort"] = args ? args.samlRedirectPort : undefined;
            resourceInputs["serverHostname"] = args ? args.serverHostname : undefined;
            resourceInputs["servercert"] = args ? args.servercert : undefined;
            resourceInputs["sourceAddress6Negate"] = args ? args.sourceAddress6Negate : undefined;
            resourceInputs["sourceAddress6s"] = args ? args.sourceAddress6s : undefined;
            resourceInputs["sourceAddressNegate"] = args ? args.sourceAddressNegate : undefined;
            resourceInputs["sourceAddresses"] = args ? args.sourceAddresses : undefined;
            resourceInputs["sourceInterfaces"] = args ? args.sourceInterfaces : undefined;
            resourceInputs["sslClientRenegotiation"] = args ? args.sslClientRenegotiation : undefined;
            resourceInputs["sslInsertEmptyFragment"] = args ? args.sslInsertEmptyFragment : undefined;
            resourceInputs["sslMaxProtoVer"] = args ? args.sslMaxProtoVer : undefined;
            resourceInputs["sslMinProtoVer"] = args ? args.sslMinProtoVer : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tlsv10"] = args ? args.tlsv10 : undefined;
            resourceInputs["tlsv11"] = args ? args.tlsv11 : undefined;
            resourceInputs["tlsv12"] = args ? args.tlsv12 : undefined;
            resourceInputs["tlsv13"] = args ? args.tlsv13 : undefined;
            resourceInputs["transformBackwardSlashes"] = args ? args.transformBackwardSlashes : undefined;
            resourceInputs["tunnelAddrAssignedMethod"] = args ? args.tunnelAddrAssignedMethod : undefined;
            resourceInputs["tunnelConnectWithoutReauth"] = args ? args.tunnelConnectWithoutReauth : undefined;
            resourceInputs["tunnelIpPools"] = args ? args.tunnelIpPools : undefined;
            resourceInputs["tunnelIpv6Pools"] = args ? args.tunnelIpv6Pools : undefined;
            resourceInputs["tunnelUserSessionTimeout"] = args ? args.tunnelUserSessionTimeout : undefined;
            resourceInputs["unsafeLegacyRenegotiation"] = args ? args.unsafeLegacyRenegotiation : undefined;
            resourceInputs["urlObscuration"] = args ? args.urlObscuration : undefined;
            resourceInputs["userPeer"] = args ? args.userPeer : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["webModeSnat"] = args ? args.webModeSnat : undefined;
            resourceInputs["winsServer1"] = args ? args.winsServer1 : undefined;
            resourceInputs["winsServer2"] = args ? args.winsServer2 : undefined;
            resourceInputs["xContentTypeOptions"] = args ? args.xContentTypeOptions : undefined;
            resourceInputs["ztnaTrustedClient"] = args ? args.ztnaTrustedClient : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Settings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Settings resources.
 */
export interface SettingsState {
    /**
     * Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any. Valid values: `high`, `medium`, `default`, `low`.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * Enable/disable checking of source IP for authentication session. Valid values: `enable`, `disable`.
     */
    authSessionCheckSourceIp?: pulumi.Input<string>;
    /**
     * SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
     */
    authTimeout?: pulumi.Input<number>;
    /**
     * Authentication rule for SSL VPN. The structure of `authenticationRule` block is documented below.
     */
    authenticationRules?: pulumi.Input<pulumi.Input<inputs.vpn.ssl.SettingsAuthenticationRule>[]>;
    /**
     * Enable to auto-create static routes for the SSL-VPN tunnel IP addresses. Valid values: `enable`, `disable`.
     */
    autoTunnelStaticRoute?: pulumi.Input<string>;
    /**
     * Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
     */
    bannedCipher?: pulumi.Input<string>;
    /**
     * Enable/disable overriding the configured system language based on the preferred language of the browser. Valid values: `enable`, `disable`.
     */
    browserLanguageDetection?: pulumi.Input<string>;
    /**
     * Enable/disable verification of referer field in HTTP request header. Valid values: `enable`, `disable`.
     */
    checkReferer?: pulumi.Input<string>;
    /**
     * Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-AES-128-CCM-SHA256`, `TLS-AES-128-CCM-8-SHA256`.
     */
    ciphersuite?: pulumi.Input<string>;
    /**
     * Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only. Valid values: `no-rsa-pss`, `all`.
     */
    clientSigalgs?: pulumi.Input<string>;
    /**
     * Default SSL VPN portal.
     */
    defaultPortal?: pulumi.Input<string>;
    /**
     * Compression level (0~9).
     */
    deflateCompressionLevel?: pulumi.Input<number>;
    /**
     * Minimum amount of data that triggers compression (200 - 65535 bytes).
     */
    deflateMinDataSize?: pulumi.Input<number>;
    /**
     * DNS server 1.
     */
    dnsServer1?: pulumi.Input<string>;
    /**
     * DNS server 2.
     */
    dnsServer2?: pulumi.Input<string>;
    /**
     * DNS suffix used for SSL-VPN clients.
     */
    dnsSuffix?: pulumi.Input<string>;
    /**
     * Number of missing heartbeats before the connection is considered dropped.
     */
    dtlsHeartbeatFailCount?: pulumi.Input<number>;
    /**
     * Idle timeout before DTLS heartbeat is sent.
     */
    dtlsHeartbeatIdleTimeout?: pulumi.Input<number>;
    /**
     * Interval between DTLS heartbeat.
     */
    dtlsHeartbeatInterval?: pulumi.Input<number>;
    /**
     * SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
     */
    dtlsHelloTimeout?: pulumi.Input<number>;
    /**
     * DTLS maximum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
     */
    dtlsMaxProtoVer?: pulumi.Input<string>;
    /**
     * DTLS minimum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
     */
    dtlsMinProtoVer?: pulumi.Input<string>;
    /**
     * Enable DTLS to prevent eavesdropping, tampering, or message forgery. Valid values: `enable`, `disable`.
     */
    dtlsTunnel?: pulumi.Input<string>;
    /**
     * Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal. Valid values: `enable`, `disable`.
     */
    dualStackMode?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Encode \2F sequence to forward slash in URLs. Valid values: `enable`, `disable`.
     */
    encode2fSequence?: pulumi.Input<string>;
    /**
     * Encrypt and store user passwords for SSL-VPN web sessions. Valid values: `enable`, `disable`.
     */
    encryptAndStorePassword?: pulumi.Input<string>;
    /**
     * Enable to force two-factor authentication for all SSL-VPNs. Valid values: `enable`, `disable`.
     */
    forceTwoFactorAuth?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Forward the same, add, or remove HTTP header. Valid values: `pass`, `add`, `remove`.
     */
    headerXForwardedFor?: pulumi.Input<string>;
    /**
     * Add HSTS includeSubDomains response header. Valid values: `enable`, `disable`.
     */
    hstsIncludeSubdomains?: pulumi.Input<string>;
    /**
     * Enable to allow HTTP compression over SSL-VPN tunnels. Valid values: `enable`, `disable`.
     */
    httpCompression?: pulumi.Input<string>;
    /**
     * Enable/disable SSL-VPN support for HttpOnly cookies. Valid values: `enable`, `disable`.
     */
    httpOnlyCookie?: pulumi.Input<string>;
    /**
     * SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
     */
    httpRequestBodyTimeout?: pulumi.Input<number>;
    /**
     * SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
     */
    httpRequestHeaderTimeout?: pulumi.Input<number>;
    /**
     * Enable/disable redirect of port 80 to SSL-VPN port. Valid values: `enable`, `disable`.
     */
    httpsRedirect?: pulumi.Input<string>;
    /**
     * SSL VPN disconnects if idle for specified time in seconds.
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * IPv6 DNS server 1.
     */
    ipv6DnsServer1?: pulumi.Input<string>;
    /**
     * IPv6 DNS server 2.
     */
    ipv6DnsServer2?: pulumi.Input<string>;
    /**
     * IPv6 WINS server 1.
     */
    ipv6WinsServer1?: pulumi.Input<string>;
    /**
     * IPv6 WINS server 2.
     */
    ipv6WinsServer2?: pulumi.Input<string>;
    /**
     * SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
     */
    loginAttemptLimit?: pulumi.Input<number>;
    /**
     * Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
     */
    loginBlockTime?: pulumi.Input<number>;
    /**
     * SSLVPN maximum login timeout (10 - 180 sec, default = 30).
     */
    loginTimeout?: pulumi.Input<number>;
    /**
     * SSL-VPN access port (1 - 65535).
     */
    port?: pulumi.Input<number>;
    /**
     * Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface. Valid values: `enable`, `disable`.
     */
    portPrecedence?: pulumi.Input<string>;
    /**
     * Enable to require client certificates for all SSL-VPN users. Valid values: `enable`, `disable`.
     */
    reqclientcert?: pulumi.Input<string>;
    /**
     * Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface. Valid values: `enable`, `disable`.
     */
    routeSourceInterface?: pulumi.Input<string>;
    /**
     * SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
     */
    samlRedirectPort?: pulumi.Input<number>;
    /**
     * Server hostname for HTTPS. When set, will be used for SSL VPN web proxy host header for any redirection.
     */
    serverHostname?: pulumi.Input<string>;
    /**
     * Name of the server certificate to be used for SSL-VPNs.
     */
    servercert?: pulumi.Input<string>;
    /**
     * Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
     */
    sourceAddress6Negate?: pulumi.Input<string>;
    /**
     * IPv6 source address of incoming traffic. The structure of `sourceAddress6` block is documented below.
     */
    sourceAddress6s?: pulumi.Input<pulumi.Input<inputs.vpn.ssl.SettingsSourceAddress6>[]>;
    /**
     * Enable/disable negated source address match. Valid values: `enable`, `disable`.
     */
    sourceAddressNegate?: pulumi.Input<string>;
    /**
     * Source address of incoming traffic. The structure of `sourceAddress` block is documented below.
     */
    sourceAddresses?: pulumi.Input<pulumi.Input<inputs.vpn.ssl.SettingsSourceAddress>[]>;
    /**
     * SSL VPN source interface of incoming traffic. The structure of `sourceInterface` block is documented below.
     */
    sourceInterfaces?: pulumi.Input<pulumi.Input<inputs.vpn.ssl.SettingsSourceInterface>[]>;
    /**
     * Enable to allow client renegotiation by the server if the tunnel goes down. Valid values: `disable`, `enable`.
     */
    sslClientRenegotiation?: pulumi.Input<string>;
    /**
     * Enable/disable insertion of empty fragment. Valid values: `enable`, `disable`.
     */
    sslInsertEmptyFragment?: pulumi.Input<string>;
    /**
     * SSL maximum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
     */
    sslMaxProtoVer?: pulumi.Input<string>;
    /**
     * SSL minimum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
     */
    sslMinProtoVer?: pulumi.Input<string>;
    /**
     * Enable/disable SSL-VPN. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Enable/disable TLSv1.0. Valid values: `enable`, `disable`.
     */
    tlsv10?: pulumi.Input<string>;
    /**
     * Enable/disable TLSv1.1. Valid values: `enable`, `disable`.
     */
    tlsv11?: pulumi.Input<string>;
    /**
     * Enable/disable TLSv1.2. Valid values: `enable`, `disable`.
     */
    tlsv12?: pulumi.Input<string>;
    /**
     * Enable/disable TLSv1.3. Valid values: `enable`, `disable`.
     */
    tlsv13?: pulumi.Input<string>;
    /**
     * Transform backward slashes to forward slashes in URLs. Valid values: `enable`, `disable`.
     */
    transformBackwardSlashes?: pulumi.Input<string>;
    /**
     * Method used for assigning address for tunnel. Valid values: `first-available`, `round-robin`.
     */
    tunnelAddrAssignedMethod?: pulumi.Input<string>;
    /**
     * Enable/disable tunnel connection without re-authorization if previous connection dropped. Valid values: `enable`, `disable`.
     */
    tunnelConnectWithoutReauth?: pulumi.Input<string>;
    /**
     * Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpPools` block is documented below.
     */
    tunnelIpPools?: pulumi.Input<pulumi.Input<inputs.vpn.ssl.SettingsTunnelIpPool>[]>;
    /**
     * Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpv6Pools` block is documented below.
     */
    tunnelIpv6Pools?: pulumi.Input<pulumi.Input<inputs.vpn.ssl.SettingsTunnelIpv6Pool>[]>;
    /**
     * Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
     */
    tunnelUserSessionTimeout?: pulumi.Input<number>;
    /**
     * Enable/disable unsafe legacy re-negotiation. Valid values: `enable`, `disable`.
     */
    unsafeLegacyRenegotiation?: pulumi.Input<string>;
    /**
     * Enable to obscure the host name of the URL of the web browser display. Valid values: `enable`, `disable`.
     */
    urlObscuration?: pulumi.Input<string>;
    /**
     * Name of user peer.
     */
    userPeer?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Enable/disable use of IP pools defined in firewall policy while using web-mode. Valid values: `enable`, `disable`.
     */
    webModeSnat?: pulumi.Input<string>;
    /**
     * WINS server 1.
     */
    winsServer1?: pulumi.Input<string>;
    /**
     * WINS server 2.
     */
    winsServer2?: pulumi.Input<string>;
    /**
     * Add HTTP X-Content-Type-Options header. Valid values: `enable`, `disable`.
     */
    xContentTypeOptions?: pulumi.Input<string>;
    /**
     * Enable/disable verification of device certificate for SSLVPN ZTNA session. Valid values: `enable`, `disable`.
     */
    ztnaTrustedClient?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Settings resource.
 */
export interface SettingsArgs {
    /**
     * Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any. Valid values: `high`, `medium`, `default`, `low`.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * Enable/disable checking of source IP for authentication session. Valid values: `enable`, `disable`.
     */
    authSessionCheckSourceIp?: pulumi.Input<string>;
    /**
     * SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
     */
    authTimeout?: pulumi.Input<number>;
    /**
     * Authentication rule for SSL VPN. The structure of `authenticationRule` block is documented below.
     */
    authenticationRules?: pulumi.Input<pulumi.Input<inputs.vpn.ssl.SettingsAuthenticationRule>[]>;
    /**
     * Enable to auto-create static routes for the SSL-VPN tunnel IP addresses. Valid values: `enable`, `disable`.
     */
    autoTunnelStaticRoute?: pulumi.Input<string>;
    /**
     * Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
     */
    bannedCipher?: pulumi.Input<string>;
    /**
     * Enable/disable overriding the configured system language based on the preferred language of the browser. Valid values: `enable`, `disable`.
     */
    browserLanguageDetection?: pulumi.Input<string>;
    /**
     * Enable/disable verification of referer field in HTTP request header. Valid values: `enable`, `disable`.
     */
    checkReferer?: pulumi.Input<string>;
    /**
     * Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-AES-128-CCM-SHA256`, `TLS-AES-128-CCM-8-SHA256`.
     */
    ciphersuite?: pulumi.Input<string>;
    /**
     * Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only. Valid values: `no-rsa-pss`, `all`.
     */
    clientSigalgs?: pulumi.Input<string>;
    /**
     * Default SSL VPN portal.
     */
    defaultPortal?: pulumi.Input<string>;
    /**
     * Compression level (0~9).
     */
    deflateCompressionLevel?: pulumi.Input<number>;
    /**
     * Minimum amount of data that triggers compression (200 - 65535 bytes).
     */
    deflateMinDataSize?: pulumi.Input<number>;
    /**
     * DNS server 1.
     */
    dnsServer1?: pulumi.Input<string>;
    /**
     * DNS server 2.
     */
    dnsServer2?: pulumi.Input<string>;
    /**
     * DNS suffix used for SSL-VPN clients.
     */
    dnsSuffix?: pulumi.Input<string>;
    /**
     * Number of missing heartbeats before the connection is considered dropped.
     */
    dtlsHeartbeatFailCount?: pulumi.Input<number>;
    /**
     * Idle timeout before DTLS heartbeat is sent.
     */
    dtlsHeartbeatIdleTimeout?: pulumi.Input<number>;
    /**
     * Interval between DTLS heartbeat.
     */
    dtlsHeartbeatInterval?: pulumi.Input<number>;
    /**
     * SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
     */
    dtlsHelloTimeout?: pulumi.Input<number>;
    /**
     * DTLS maximum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
     */
    dtlsMaxProtoVer?: pulumi.Input<string>;
    /**
     * DTLS minimum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
     */
    dtlsMinProtoVer?: pulumi.Input<string>;
    /**
     * Enable DTLS to prevent eavesdropping, tampering, or message forgery. Valid values: `enable`, `disable`.
     */
    dtlsTunnel?: pulumi.Input<string>;
    /**
     * Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal. Valid values: `enable`, `disable`.
     */
    dualStackMode?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Encode \2F sequence to forward slash in URLs. Valid values: `enable`, `disable`.
     */
    encode2fSequence?: pulumi.Input<string>;
    /**
     * Encrypt and store user passwords for SSL-VPN web sessions. Valid values: `enable`, `disable`.
     */
    encryptAndStorePassword?: pulumi.Input<string>;
    /**
     * Enable to force two-factor authentication for all SSL-VPNs. Valid values: `enable`, `disable`.
     */
    forceTwoFactorAuth?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Forward the same, add, or remove HTTP header. Valid values: `pass`, `add`, `remove`.
     */
    headerXForwardedFor?: pulumi.Input<string>;
    /**
     * Add HSTS includeSubDomains response header. Valid values: `enable`, `disable`.
     */
    hstsIncludeSubdomains?: pulumi.Input<string>;
    /**
     * Enable to allow HTTP compression over SSL-VPN tunnels. Valid values: `enable`, `disable`.
     */
    httpCompression?: pulumi.Input<string>;
    /**
     * Enable/disable SSL-VPN support for HttpOnly cookies. Valid values: `enable`, `disable`.
     */
    httpOnlyCookie?: pulumi.Input<string>;
    /**
     * SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
     */
    httpRequestBodyTimeout?: pulumi.Input<number>;
    /**
     * SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
     */
    httpRequestHeaderTimeout?: pulumi.Input<number>;
    /**
     * Enable/disable redirect of port 80 to SSL-VPN port. Valid values: `enable`, `disable`.
     */
    httpsRedirect?: pulumi.Input<string>;
    /**
     * SSL VPN disconnects if idle for specified time in seconds.
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * IPv6 DNS server 1.
     */
    ipv6DnsServer1?: pulumi.Input<string>;
    /**
     * IPv6 DNS server 2.
     */
    ipv6DnsServer2?: pulumi.Input<string>;
    /**
     * IPv6 WINS server 1.
     */
    ipv6WinsServer1?: pulumi.Input<string>;
    /**
     * IPv6 WINS server 2.
     */
    ipv6WinsServer2?: pulumi.Input<string>;
    /**
     * SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
     */
    loginAttemptLimit?: pulumi.Input<number>;
    /**
     * Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
     */
    loginBlockTime?: pulumi.Input<number>;
    /**
     * SSLVPN maximum login timeout (10 - 180 sec, default = 30).
     */
    loginTimeout?: pulumi.Input<number>;
    /**
     * SSL-VPN access port (1 - 65535).
     */
    port?: pulumi.Input<number>;
    /**
     * Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface. Valid values: `enable`, `disable`.
     */
    portPrecedence?: pulumi.Input<string>;
    /**
     * Enable to require client certificates for all SSL-VPN users. Valid values: `enable`, `disable`.
     */
    reqclientcert?: pulumi.Input<string>;
    /**
     * Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface. Valid values: `enable`, `disable`.
     */
    routeSourceInterface?: pulumi.Input<string>;
    /**
     * SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
     */
    samlRedirectPort?: pulumi.Input<number>;
    /**
     * Server hostname for HTTPS. When set, will be used for SSL VPN web proxy host header for any redirection.
     */
    serverHostname?: pulumi.Input<string>;
    /**
     * Name of the server certificate to be used for SSL-VPNs.
     */
    servercert?: pulumi.Input<string>;
    /**
     * Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
     */
    sourceAddress6Negate?: pulumi.Input<string>;
    /**
     * IPv6 source address of incoming traffic. The structure of `sourceAddress6` block is documented below.
     */
    sourceAddress6s?: pulumi.Input<pulumi.Input<inputs.vpn.ssl.SettingsSourceAddress6>[]>;
    /**
     * Enable/disable negated source address match. Valid values: `enable`, `disable`.
     */
    sourceAddressNegate?: pulumi.Input<string>;
    /**
     * Source address of incoming traffic. The structure of `sourceAddress` block is documented below.
     */
    sourceAddresses?: pulumi.Input<pulumi.Input<inputs.vpn.ssl.SettingsSourceAddress>[]>;
    /**
     * SSL VPN source interface of incoming traffic. The structure of `sourceInterface` block is documented below.
     */
    sourceInterfaces?: pulumi.Input<pulumi.Input<inputs.vpn.ssl.SettingsSourceInterface>[]>;
    /**
     * Enable to allow client renegotiation by the server if the tunnel goes down. Valid values: `disable`, `enable`.
     */
    sslClientRenegotiation?: pulumi.Input<string>;
    /**
     * Enable/disable insertion of empty fragment. Valid values: `enable`, `disable`.
     */
    sslInsertEmptyFragment?: pulumi.Input<string>;
    /**
     * SSL maximum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
     */
    sslMaxProtoVer?: pulumi.Input<string>;
    /**
     * SSL minimum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
     */
    sslMinProtoVer?: pulumi.Input<string>;
    /**
     * Enable/disable SSL-VPN. Valid values: `enable`, `disable`.
     */
    status?: pulumi.Input<string>;
    /**
     * Enable/disable TLSv1.0. Valid values: `enable`, `disable`.
     */
    tlsv10?: pulumi.Input<string>;
    /**
     * Enable/disable TLSv1.1. Valid values: `enable`, `disable`.
     */
    tlsv11?: pulumi.Input<string>;
    /**
     * Enable/disable TLSv1.2. Valid values: `enable`, `disable`.
     */
    tlsv12?: pulumi.Input<string>;
    /**
     * Enable/disable TLSv1.3. Valid values: `enable`, `disable`.
     */
    tlsv13?: pulumi.Input<string>;
    /**
     * Transform backward slashes to forward slashes in URLs. Valid values: `enable`, `disable`.
     */
    transformBackwardSlashes?: pulumi.Input<string>;
    /**
     * Method used for assigning address for tunnel. Valid values: `first-available`, `round-robin`.
     */
    tunnelAddrAssignedMethod?: pulumi.Input<string>;
    /**
     * Enable/disable tunnel connection without re-authorization if previous connection dropped. Valid values: `enable`, `disable`.
     */
    tunnelConnectWithoutReauth?: pulumi.Input<string>;
    /**
     * Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpPools` block is documented below.
     */
    tunnelIpPools?: pulumi.Input<pulumi.Input<inputs.vpn.ssl.SettingsTunnelIpPool>[]>;
    /**
     * Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpv6Pools` block is documented below.
     */
    tunnelIpv6Pools?: pulumi.Input<pulumi.Input<inputs.vpn.ssl.SettingsTunnelIpv6Pool>[]>;
    /**
     * Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
     */
    tunnelUserSessionTimeout?: pulumi.Input<number>;
    /**
     * Enable/disable unsafe legacy re-negotiation. Valid values: `enable`, `disable`.
     */
    unsafeLegacyRenegotiation?: pulumi.Input<string>;
    /**
     * Enable to obscure the host name of the URL of the web browser display. Valid values: `enable`, `disable`.
     */
    urlObscuration?: pulumi.Input<string>;
    /**
     * Name of user peer.
     */
    userPeer?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
    /**
     * Enable/disable use of IP pools defined in firewall policy while using web-mode. Valid values: `enable`, `disable`.
     */
    webModeSnat?: pulumi.Input<string>;
    /**
     * WINS server 1.
     */
    winsServer1?: pulumi.Input<string>;
    /**
     * WINS server 2.
     */
    winsServer2?: pulumi.Input<string>;
    /**
     * Add HTTP X-Content-Type-Options header. Valid values: `enable`, `disable`.
     */
    xContentTypeOptions?: pulumi.Input<string>;
    /**
     * Enable/disable verification of device certificate for SSLVPN ZTNA session. Valid values: `enable`, `disable`.
     */
    ztnaTrustedClient?: pulumi.Input<string>;
}
