// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Configure Quantum Key Distribution servers Applies to FortiOS Version `>= 7.4.2`.
 *
 * ## Import
 *
 * Vpn Qkd can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:vpn/qkd:Qkd labelname {{name}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:vpn/qkd:Qkd labelname {{name}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Qkd extends pulumi.CustomResource {
    /**
     * Get an existing Qkd resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QkdState, opts?: pulumi.CustomResourceOptions): Qkd {
        return new Qkd(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:vpn/qkd:Qkd';

    /**
     * Returns true if the given object is an instance of Qkd.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Qkd {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Qkd.__pulumiType;
    }

    /**
     * Names of up to 4 certificates to offer to the KME. The structure of `certificate` block is documented below.
     */
    public readonly certificates!: pulumi.Output<outputs.vpn.QkdCertificate[] | undefined>;
    /**
     * Comment.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    /**
     * Quantum Key Distribution ID assigned by the KME.
     */
    public readonly fosid!: pulumi.Output<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Quantum Key Distribution configuration name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Authenticate Quantum Key Device's certificate with the peer/peergrp.
     */
    public readonly peer!: pulumi.Output<string>;
    /**
     * Port to connect to on the KME.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * IPv4, IPv6 or DNS address of the KME.
     */
    public readonly server!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a Qkd resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: QkdArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QkdArgs | QkdState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QkdState | undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peer"] = state ? state.peer : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as QkdArgs | undefined;
            resourceInputs["certificates"] = args ? args.certificates : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peer"] = args ? args.peer : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Qkd.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Qkd resources.
 */
export interface QkdState {
    /**
     * Names of up to 4 certificates to offer to the KME. The structure of `certificate` block is documented below.
     */
    certificates?: pulumi.Input<pulumi.Input<inputs.vpn.QkdCertificate>[]>;
    /**
     * Comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Quantum Key Distribution ID assigned by the KME.
     */
    fosid?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Quantum Key Distribution configuration name.
     */
    name?: pulumi.Input<string>;
    /**
     * Authenticate Quantum Key Device's certificate with the peer/peergrp.
     */
    peer?: pulumi.Input<string>;
    /**
     * Port to connect to on the KME.
     */
    port?: pulumi.Input<number>;
    /**
     * IPv4, IPv6 or DNS address of the KME.
     */
    server?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Qkd resource.
 */
export interface QkdArgs {
    /**
     * Names of up to 4 certificates to offer to the KME. The structure of `certificate` block is documented below.
     */
    certificates?: pulumi.Input<pulumi.Input<inputs.vpn.QkdCertificate>[]>;
    /**
     * Comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
     */
    dynamicSortSubtable?: pulumi.Input<string>;
    /**
     * Quantum Key Distribution ID assigned by the KME.
     */
    fosid?: pulumi.Input<string>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Quantum Key Distribution configuration name.
     */
    name?: pulumi.Input<string>;
    /**
     * Authenticate Quantum Key Device's certificate with the peer/peergrp.
     */
    peer?: pulumi.Input<string>;
    /**
     * Port to connect to on the KME.
     */
    port?: pulumi.Input<number>;
    /**
     * IPv4, IPv6 or DNS address of the KME.
     */
    server?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
