// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * VPN certificate setting.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trname = new fortios.vpn.certificate.Setting("trname", {
 *     certnameDsa1024: "Fortinet_SSL_DSA1024",
 *     certnameDsa2048: "Fortinet_SSL_DSA2048",
 *     certnameEcdsa256: "Fortinet_SSL_ECDSA256",
 *     certnameEcdsa384: "Fortinet_SSL_ECDSA384",
 *     certnameRsa1024: "Fortinet_SSL_RSA1024",
 *     certnameRsa2048: "Fortinet_SSL_RSA2048",
 *     checkCaCert: "enable",
 *     checkCaChain: "disable",
 *     cmpSaveExtraCerts: "disable",
 *     cnMatch: "substring",
 *     ocspOption: "server",
 *     ocspStatus: "disable",
 *     sslMinProtoVersion: "default",
 *     strictCrlCheck: "disable",
 *     strictOcspCheck: "disable",
 *     subjectMatch: "substring",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * VpnCertificate Setting can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:vpn/certificate/setting:Setting labelname VpnCertificateSetting
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:vpn/certificate/setting:Setting labelname VpnCertificateSetting
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Setting extends pulumi.CustomResource {
    /**
     * Get an existing Setting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingState, opts?: pulumi.CustomResourceOptions): Setting {
        return new Setting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:vpn/certificate/setting:Setting';

    /**
     * Returns true if the given object is an instance of Setting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Setting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Setting.__pulumiType;
    }

    /**
     * Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
     */
    public readonly certExpireWarning!: pulumi.Output<number>;
    /**
     * 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameDsa1024!: pulumi.Output<string>;
    /**
     * 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameDsa2048!: pulumi.Output<string>;
    /**
     * 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameEcdsa256!: pulumi.Output<string>;
    /**
     * 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameEcdsa384!: pulumi.Output<string>;
    /**
     * 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameEcdsa521!: pulumi.Output<string>;
    /**
     * 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameEd25519!: pulumi.Output<string>;
    /**
     * 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameEd448!: pulumi.Output<string>;
    /**
     * 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameRsa1024!: pulumi.Output<string>;
    /**
     * 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameRsa2048!: pulumi.Output<string>;
    /**
     * 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    public readonly certnameRsa4096!: pulumi.Output<string>;
    /**
     * Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
     */
    public readonly checkCaCert!: pulumi.Output<string>;
    /**
     * Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
     */
    public readonly checkCaChain!: pulumi.Output<string>;
    /**
     * Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
     */
    public readonly cmpKeyUsageChecking!: pulumi.Output<string>;
    /**
     * Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
     */
    public readonly cmpSaveExtraCerts!: pulumi.Output<string>;
    /**
     * When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
     */
    public readonly cnAllowMulti!: pulumi.Output<string>;
    /**
     * When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
     */
    public readonly cnMatch!: pulumi.Output<string>;
    /**
     * CRL verification options. The structure of `crlVerification` block is documented below.
     */
    public readonly crlVerification!: pulumi.Output<outputs.vpn.certificate.SettingCrlVerification>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    /**
     * Specify outgoing interface to reach server.
     */
    public readonly interface!: pulumi.Output<string>;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    public readonly interfaceSelectMethod!: pulumi.Output<string>;
    /**
     * Default OCSP server.
     */
    public readonly ocspDefaultServer!: pulumi.Output<string>;
    /**
     * Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
     */
    public readonly ocspOption!: pulumi.Output<string>;
    /**
     * Enable/disable receiving certificates using the OCSP.
     */
    public readonly ocspStatus!: pulumi.Output<string>;
    /**
     * Proxy server FQDN or IP for OCSP/CA queries during certificate verification.
     */
    public readonly proxy!: pulumi.Output<string>;
    /**
     * Proxy server password.
     */
    public readonly proxyPassword!: pulumi.Output<string | undefined>;
    /**
     * Proxy server port (1 - 65535, default = 8080).
     */
    public readonly proxyPort!: pulumi.Output<number>;
    /**
     * Proxy server user name.
     */
    public readonly proxyUsername!: pulumi.Output<string>;
    /**
     * Source IP address for dynamic AIA and OCSP queries.
     */
    public readonly sourceIp!: pulumi.Output<string>;
    /**
     * Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
     */
    public readonly sslMinProtoVersion!: pulumi.Output<string>;
    /**
     * Source IP address to use to communicate with the OCSP server.
     */
    public readonly sslOcspSourceIp!: pulumi.Output<string>;
    /**
     * Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
     */
    public readonly strictCrlCheck!: pulumi.Output<string>;
    /**
     * Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
     */
    public readonly strictOcspCheck!: pulumi.Output<string>;
    /**
     * When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
     */
    public readonly subjectMatch!: pulumi.Output<string>;
    /**
     * When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
     */
    public readonly subjectSet!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a Setting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingArgs | SettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingState | undefined;
            resourceInputs["certExpireWarning"] = state ? state.certExpireWarning : undefined;
            resourceInputs["certnameDsa1024"] = state ? state.certnameDsa1024 : undefined;
            resourceInputs["certnameDsa2048"] = state ? state.certnameDsa2048 : undefined;
            resourceInputs["certnameEcdsa256"] = state ? state.certnameEcdsa256 : undefined;
            resourceInputs["certnameEcdsa384"] = state ? state.certnameEcdsa384 : undefined;
            resourceInputs["certnameEcdsa521"] = state ? state.certnameEcdsa521 : undefined;
            resourceInputs["certnameEd25519"] = state ? state.certnameEd25519 : undefined;
            resourceInputs["certnameEd448"] = state ? state.certnameEd448 : undefined;
            resourceInputs["certnameRsa1024"] = state ? state.certnameRsa1024 : undefined;
            resourceInputs["certnameRsa2048"] = state ? state.certnameRsa2048 : undefined;
            resourceInputs["certnameRsa4096"] = state ? state.certnameRsa4096 : undefined;
            resourceInputs["checkCaCert"] = state ? state.checkCaCert : undefined;
            resourceInputs["checkCaChain"] = state ? state.checkCaChain : undefined;
            resourceInputs["cmpKeyUsageChecking"] = state ? state.cmpKeyUsageChecking : undefined;
            resourceInputs["cmpSaveExtraCerts"] = state ? state.cmpSaveExtraCerts : undefined;
            resourceInputs["cnAllowMulti"] = state ? state.cnAllowMulti : undefined;
            resourceInputs["cnMatch"] = state ? state.cnMatch : undefined;
            resourceInputs["crlVerification"] = state ? state.crlVerification : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["interfaceSelectMethod"] = state ? state.interfaceSelectMethod : undefined;
            resourceInputs["ocspDefaultServer"] = state ? state.ocspDefaultServer : undefined;
            resourceInputs["ocspOption"] = state ? state.ocspOption : undefined;
            resourceInputs["ocspStatus"] = state ? state.ocspStatus : undefined;
            resourceInputs["proxy"] = state ? state.proxy : undefined;
            resourceInputs["proxyPassword"] = state ? state.proxyPassword : undefined;
            resourceInputs["proxyPort"] = state ? state.proxyPort : undefined;
            resourceInputs["proxyUsername"] = state ? state.proxyUsername : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["sslMinProtoVersion"] = state ? state.sslMinProtoVersion : undefined;
            resourceInputs["sslOcspSourceIp"] = state ? state.sslOcspSourceIp : undefined;
            resourceInputs["strictCrlCheck"] = state ? state.strictCrlCheck : undefined;
            resourceInputs["strictOcspCheck"] = state ? state.strictOcspCheck : undefined;
            resourceInputs["subjectMatch"] = state ? state.subjectMatch : undefined;
            resourceInputs["subjectSet"] = state ? state.subjectSet : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SettingArgs | undefined;
            if ((!args || args.certnameDsa1024 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameDsa1024'");
            }
            if ((!args || args.certnameDsa2048 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameDsa2048'");
            }
            if ((!args || args.certnameEcdsa256 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameEcdsa256'");
            }
            if ((!args || args.certnameEcdsa384 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameEcdsa384'");
            }
            if ((!args || args.certnameRsa1024 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameRsa1024'");
            }
            if ((!args || args.certnameRsa2048 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameRsa2048'");
            }
            resourceInputs["certExpireWarning"] = args ? args.certExpireWarning : undefined;
            resourceInputs["certnameDsa1024"] = args ? args.certnameDsa1024 : undefined;
            resourceInputs["certnameDsa2048"] = args ? args.certnameDsa2048 : undefined;
            resourceInputs["certnameEcdsa256"] = args ? args.certnameEcdsa256 : undefined;
            resourceInputs["certnameEcdsa384"] = args ? args.certnameEcdsa384 : undefined;
            resourceInputs["certnameEcdsa521"] = args ? args.certnameEcdsa521 : undefined;
            resourceInputs["certnameEd25519"] = args ? args.certnameEd25519 : undefined;
            resourceInputs["certnameEd448"] = args ? args.certnameEd448 : undefined;
            resourceInputs["certnameRsa1024"] = args ? args.certnameRsa1024 : undefined;
            resourceInputs["certnameRsa2048"] = args ? args.certnameRsa2048 : undefined;
            resourceInputs["certnameRsa4096"] = args ? args.certnameRsa4096 : undefined;
            resourceInputs["checkCaCert"] = args ? args.checkCaCert : undefined;
            resourceInputs["checkCaChain"] = args ? args.checkCaChain : undefined;
            resourceInputs["cmpKeyUsageChecking"] = args ? args.cmpKeyUsageChecking : undefined;
            resourceInputs["cmpSaveExtraCerts"] = args ? args.cmpSaveExtraCerts : undefined;
            resourceInputs["cnAllowMulti"] = args ? args.cnAllowMulti : undefined;
            resourceInputs["cnMatch"] = args ? args.cnMatch : undefined;
            resourceInputs["crlVerification"] = args ? args.crlVerification : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["interfaceSelectMethod"] = args ? args.interfaceSelectMethod : undefined;
            resourceInputs["ocspDefaultServer"] = args ? args.ocspDefaultServer : undefined;
            resourceInputs["ocspOption"] = args ? args.ocspOption : undefined;
            resourceInputs["ocspStatus"] = args ? args.ocspStatus : undefined;
            resourceInputs["proxy"] = args ? args.proxy : undefined;
            resourceInputs["proxyPassword"] = args ? args.proxyPassword : undefined;
            resourceInputs["proxyPort"] = args ? args.proxyPort : undefined;
            resourceInputs["proxyUsername"] = args ? args.proxyUsername : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["sslMinProtoVersion"] = args ? args.sslMinProtoVersion : undefined;
            resourceInputs["sslOcspSourceIp"] = args ? args.sslOcspSourceIp : undefined;
            resourceInputs["strictCrlCheck"] = args ? args.strictCrlCheck : undefined;
            resourceInputs["strictOcspCheck"] = args ? args.strictOcspCheck : undefined;
            resourceInputs["subjectMatch"] = args ? args.subjectMatch : undefined;
            resourceInputs["subjectSet"] = args ? args.subjectSet : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Setting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Setting resources.
 */
export interface SettingState {
    /**
     * Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
     */
    certExpireWarning?: pulumi.Input<number>;
    /**
     * 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameDsa1024?: pulumi.Input<string>;
    /**
     * 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameDsa2048?: pulumi.Input<string>;
    /**
     * 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEcdsa256?: pulumi.Input<string>;
    /**
     * 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEcdsa384?: pulumi.Input<string>;
    /**
     * 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEcdsa521?: pulumi.Input<string>;
    /**
     * 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEd25519?: pulumi.Input<string>;
    /**
     * 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEd448?: pulumi.Input<string>;
    /**
     * 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameRsa1024?: pulumi.Input<string>;
    /**
     * 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameRsa2048?: pulumi.Input<string>;
    /**
     * 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameRsa4096?: pulumi.Input<string>;
    /**
     * Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
     */
    checkCaCert?: pulumi.Input<string>;
    /**
     * Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
     */
    checkCaChain?: pulumi.Input<string>;
    /**
     * Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
     */
    cmpKeyUsageChecking?: pulumi.Input<string>;
    /**
     * Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
     */
    cmpSaveExtraCerts?: pulumi.Input<string>;
    /**
     * When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
     */
    cnAllowMulti?: pulumi.Input<string>;
    /**
     * When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
     */
    cnMatch?: pulumi.Input<string>;
    /**
     * CRL verification options. The structure of `crlVerification` block is documented below.
     */
    crlVerification?: pulumi.Input<inputs.vpn.certificate.SettingCrlVerification>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Specify outgoing interface to reach server.
     */
    interface?: pulumi.Input<string>;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    interfaceSelectMethod?: pulumi.Input<string>;
    /**
     * Default OCSP server.
     */
    ocspDefaultServer?: pulumi.Input<string>;
    /**
     * Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
     */
    ocspOption?: pulumi.Input<string>;
    /**
     * Enable/disable receiving certificates using the OCSP.
     */
    ocspStatus?: pulumi.Input<string>;
    /**
     * Proxy server FQDN or IP for OCSP/CA queries during certificate verification.
     */
    proxy?: pulumi.Input<string>;
    /**
     * Proxy server password.
     */
    proxyPassword?: pulumi.Input<string>;
    /**
     * Proxy server port (1 - 65535, default = 8080).
     */
    proxyPort?: pulumi.Input<number>;
    /**
     * Proxy server user name.
     */
    proxyUsername?: pulumi.Input<string>;
    /**
     * Source IP address for dynamic AIA and OCSP queries.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
     */
    sslMinProtoVersion?: pulumi.Input<string>;
    /**
     * Source IP address to use to communicate with the OCSP server.
     */
    sslOcspSourceIp?: pulumi.Input<string>;
    /**
     * Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
     */
    strictCrlCheck?: pulumi.Input<string>;
    /**
     * Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
     */
    strictOcspCheck?: pulumi.Input<string>;
    /**
     * When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
     */
    subjectMatch?: pulumi.Input<string>;
    /**
     * When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
     */
    subjectSet?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Setting resource.
 */
export interface SettingArgs {
    /**
     * Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
     */
    certExpireWarning?: pulumi.Input<number>;
    /**
     * 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameDsa1024: pulumi.Input<string>;
    /**
     * 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameDsa2048: pulumi.Input<string>;
    /**
     * 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEcdsa256: pulumi.Input<string>;
    /**
     * 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEcdsa384: pulumi.Input<string>;
    /**
     * 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEcdsa521?: pulumi.Input<string>;
    /**
     * 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEd25519?: pulumi.Input<string>;
    /**
     * 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameEd448?: pulumi.Input<string>;
    /**
     * 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameRsa1024: pulumi.Input<string>;
    /**
     * 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameRsa2048: pulumi.Input<string>;
    /**
     * 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
     */
    certnameRsa4096?: pulumi.Input<string>;
    /**
     * Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
     */
    checkCaCert?: pulumi.Input<string>;
    /**
     * Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
     */
    checkCaChain?: pulumi.Input<string>;
    /**
     * Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
     */
    cmpKeyUsageChecking?: pulumi.Input<string>;
    /**
     * Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
     */
    cmpSaveExtraCerts?: pulumi.Input<string>;
    /**
     * When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
     */
    cnAllowMulti?: pulumi.Input<string>;
    /**
     * When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
     */
    cnMatch?: pulumi.Input<string>;
    /**
     * CRL verification options. The structure of `crlVerification` block is documented below.
     */
    crlVerification?: pulumi.Input<inputs.vpn.certificate.SettingCrlVerification>;
    /**
     * Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
     */
    getAllTables?: pulumi.Input<string>;
    /**
     * Specify outgoing interface to reach server.
     */
    interface?: pulumi.Input<string>;
    /**
     * Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
     */
    interfaceSelectMethod?: pulumi.Input<string>;
    /**
     * Default OCSP server.
     */
    ocspDefaultServer?: pulumi.Input<string>;
    /**
     * Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
     */
    ocspOption?: pulumi.Input<string>;
    /**
     * Enable/disable receiving certificates using the OCSP.
     */
    ocspStatus?: pulumi.Input<string>;
    /**
     * Proxy server FQDN or IP for OCSP/CA queries during certificate verification.
     */
    proxy?: pulumi.Input<string>;
    /**
     * Proxy server password.
     */
    proxyPassword?: pulumi.Input<string>;
    /**
     * Proxy server port (1 - 65535, default = 8080).
     */
    proxyPort?: pulumi.Input<number>;
    /**
     * Proxy server user name.
     */
    proxyUsername?: pulumi.Input<string>;
    /**
     * Source IP address for dynamic AIA and OCSP queries.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
     */
    sslMinProtoVersion?: pulumi.Input<string>;
    /**
     * Source IP address to use to communicate with the OCSP server.
     */
    sslOcspSourceIp?: pulumi.Input<string>;
    /**
     * Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
     */
    strictCrlCheck?: pulumi.Input<string>;
    /**
     * Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
     */
    strictOcspCheck?: pulumi.Input<string>;
    /**
     * When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
     */
    subjectMatch?: pulumi.Input<string>;
    /**
     * When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
     */
    subjectSet?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
