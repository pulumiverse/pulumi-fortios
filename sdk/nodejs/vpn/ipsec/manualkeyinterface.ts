// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Configure IPsec manual keys.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trname = new fortios.vpn.ipsec.Manualkeyinterface("trname", {
 *     addrType: "4",
 *     authAlg: "null",
 *     authKey: "-",
 *     encAlg: "des",
 *     encKey: "CECA2184ACADAEEF",
 *     "interface": "port3",
 *     ipVersion: "4",
 *     localGw: "0.0.0.0",
 *     localGw6: "::",
 *     localSpi: "0x100",
 *     remoteGw: "2.2.2.2",
 *     remoteGw6: "::",
 *     remoteSpi: "0x100",
 * });
 * ```
 *
 * ## Import
 *
 * VpnIpsec ManualkeyInterface can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:vpn/ipsec/manualkeyinterface:Manualkeyinterface labelname {{name}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:vpn/ipsec/manualkeyinterface:Manualkeyinterface labelname {{name}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Manualkeyinterface extends pulumi.CustomResource {
    /**
     * Get an existing Manualkeyinterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManualkeyinterfaceState, opts?: pulumi.CustomResourceOptions): Manualkeyinterface {
        return new Manualkeyinterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:vpn/ipsec/manualkeyinterface:Manualkeyinterface';

    /**
     * Returns true if the given object is an instance of Manualkeyinterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Manualkeyinterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Manualkeyinterface.__pulumiType;
    }

    /**
     * IP version to use for IP packets. Valid values: `4`, `6`.
     */
    public readonly addrType!: pulumi.Output<string>;
    /**
     * Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
     */
    public readonly authAlg!: pulumi.Output<string>;
    /**
     * Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
     */
    public readonly authKey!: pulumi.Output<string>;
    /**
     * Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
     */
    public readonly encAlg!: pulumi.Output<string>;
    /**
     * Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
     */
    public readonly encKey!: pulumi.Output<string>;
    /**
     * Name of the physical, aggregate, or VLAN interface.
     */
    public readonly interface!: pulumi.Output<string>;
    /**
     * IP version to use for VPN interface. Valid values: `4`, `6`.
     */
    public readonly ipVersion!: pulumi.Output<string>;
    /**
     * IPv4 address of the local gateway's external interface.
     */
    public readonly localGw!: pulumi.Output<string>;
    /**
     * Local IPv6 address of VPN gateway.
     */
    public readonly localGw6!: pulumi.Output<string>;
    /**
     * Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
     */
    public readonly localSpi!: pulumi.Output<string>;
    /**
     * IPsec tunnel name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
     */
    public readonly npuOffload!: pulumi.Output<string>;
    /**
     * IPv4 address of the remote gateway's external interface.
     */
    public readonly remoteGw!: pulumi.Output<string>;
    /**
     * Remote IPv6 address of VPN gateway.
     */
    public readonly remoteGw6!: pulumi.Output<string>;
    /**
     * Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
     */
    public readonly remoteSpi!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a Manualkeyinterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManualkeyinterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManualkeyinterfaceArgs | ManualkeyinterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManualkeyinterfaceState | undefined;
            resourceInputs["addrType"] = state ? state.addrType : undefined;
            resourceInputs["authAlg"] = state ? state.authAlg : undefined;
            resourceInputs["authKey"] = state ? state.authKey : undefined;
            resourceInputs["encAlg"] = state ? state.encAlg : undefined;
            resourceInputs["encKey"] = state ? state.encKey : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["ipVersion"] = state ? state.ipVersion : undefined;
            resourceInputs["localGw"] = state ? state.localGw : undefined;
            resourceInputs["localGw6"] = state ? state.localGw6 : undefined;
            resourceInputs["localSpi"] = state ? state.localSpi : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["npuOffload"] = state ? state.npuOffload : undefined;
            resourceInputs["remoteGw"] = state ? state.remoteGw : undefined;
            resourceInputs["remoteGw6"] = state ? state.remoteGw6 : undefined;
            resourceInputs["remoteSpi"] = state ? state.remoteSpi : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as ManualkeyinterfaceArgs | undefined;
            if ((!args || args.authAlg === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authAlg'");
            }
            if ((!args || args.encAlg === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encAlg'");
            }
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            if ((!args || args.remoteGw === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteGw'");
            }
            if ((!args || args.remoteGw6 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteGw6'");
            }
            resourceInputs["addrType"] = args ? args.addrType : undefined;
            resourceInputs["authAlg"] = args ? args.authAlg : undefined;
            resourceInputs["authKey"] = args?.authKey ? pulumi.secret(args.authKey) : undefined;
            resourceInputs["encAlg"] = args ? args.encAlg : undefined;
            resourceInputs["encKey"] = args?.encKey ? pulumi.secret(args.encKey) : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["ipVersion"] = args ? args.ipVersion : undefined;
            resourceInputs["localGw"] = args ? args.localGw : undefined;
            resourceInputs["localGw6"] = args ? args.localGw6 : undefined;
            resourceInputs["localSpi"] = args ? args.localSpi : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["npuOffload"] = args ? args.npuOffload : undefined;
            resourceInputs["remoteGw"] = args ? args.remoteGw : undefined;
            resourceInputs["remoteGw6"] = args ? args.remoteGw6 : undefined;
            resourceInputs["remoteSpi"] = args ? args.remoteSpi : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authKey", "encKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Manualkeyinterface.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Manualkeyinterface resources.
 */
export interface ManualkeyinterfaceState {
    /**
     * IP version to use for IP packets. Valid values: `4`, `6`.
     */
    addrType?: pulumi.Input<string>;
    /**
     * Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
     */
    authAlg?: pulumi.Input<string>;
    /**
     * Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
     */
    authKey?: pulumi.Input<string>;
    /**
     * Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
     */
    encAlg?: pulumi.Input<string>;
    /**
     * Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
     */
    encKey?: pulumi.Input<string>;
    /**
     * Name of the physical, aggregate, or VLAN interface.
     */
    interface?: pulumi.Input<string>;
    /**
     * IP version to use for VPN interface. Valid values: `4`, `6`.
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * IPv4 address of the local gateway's external interface.
     */
    localGw?: pulumi.Input<string>;
    /**
     * Local IPv6 address of VPN gateway.
     */
    localGw6?: pulumi.Input<string>;
    /**
     * Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
     */
    localSpi?: pulumi.Input<string>;
    /**
     * IPsec tunnel name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
     */
    npuOffload?: pulumi.Input<string>;
    /**
     * IPv4 address of the remote gateway's external interface.
     */
    remoteGw?: pulumi.Input<string>;
    /**
     * Remote IPv6 address of VPN gateway.
     */
    remoteGw6?: pulumi.Input<string>;
    /**
     * Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
     */
    remoteSpi?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Manualkeyinterface resource.
 */
export interface ManualkeyinterfaceArgs {
    /**
     * IP version to use for IP packets. Valid values: `4`, `6`.
     */
    addrType?: pulumi.Input<string>;
    /**
     * Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
     */
    authAlg: pulumi.Input<string>;
    /**
     * Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
     */
    authKey?: pulumi.Input<string>;
    /**
     * Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
     */
    encAlg: pulumi.Input<string>;
    /**
     * Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
     */
    encKey?: pulumi.Input<string>;
    /**
     * Name of the physical, aggregate, or VLAN interface.
     */
    interface: pulumi.Input<string>;
    /**
     * IP version to use for VPN interface. Valid values: `4`, `6`.
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * IPv4 address of the local gateway's external interface.
     */
    localGw?: pulumi.Input<string>;
    /**
     * Local IPv6 address of VPN gateway.
     */
    localGw6?: pulumi.Input<string>;
    /**
     * Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
     */
    localSpi?: pulumi.Input<string>;
    /**
     * IPsec tunnel name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
     */
    npuOffload?: pulumi.Input<string>;
    /**
     * IPv4 address of the remote gateway's external interface.
     */
    remoteGw: pulumi.Input<string>;
    /**
     * Remote IPv6 address of VPN gateway.
     */
    remoteGw6: pulumi.Input<string>;
    /**
     * Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
     */
    remoteSpi?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
