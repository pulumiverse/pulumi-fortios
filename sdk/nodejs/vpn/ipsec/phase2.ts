// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Configure VPN autokey tunnel.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumiverse/fortios";
 *
 * const trnamex2 = new fortios.vpn.ipsec.Phase1("trnamex2", {
 *     acctVerify: "disable",
 *     addGwRoute: "disable",
 *     addRoute: "disable",
 *     assignIp: "enable",
 *     assignIpFrom: "range",
 *     authmethod: "psk",
 *     autoNegotiate: "enable",
 *     certIdValidation: "enable",
 *     childlessIke: "disable",
 *     clientAutoNegotiate: "disable",
 *     clientKeepAlive: "disable",
 *     dhgrp: "14 5",
 *     digitalSignatureAuth: "disable",
 *     distance: 15,
 *     dnsMode: "manual",
 *     dpd: "on-demand",
 *     dpdRetrycount: 3,
 *     dpdRetryinterval: "20",
 *     eap: "disable",
 *     eapIdentity: "use-id-payload",
 *     enforceUniqueId: "disable",
 *     forticlientEnforcement: "disable",
 *     fragmentation: "enable",
 *     fragmentationMtu: 1200,
 *     groupAuthentication: "disable",
 *     haSyncEspSeqno: "enable",
 *     idleTimeout: "disable",
 *     idleTimeoutinterval: 15,
 *     ikeVersion: "1",
 *     includeLocalLan: "disable",
 *     "interface": "port4",
 *     ipv4DnsServer1: "0.0.0.0",
 *     ipv4DnsServer2: "0.0.0.0",
 *     ipv4DnsServer3: "0.0.0.0",
 *     ipv4EndIp: "0.0.0.0",
 *     ipv4Netmask: "255.255.255.255",
 *     ipv4StartIp: "0.0.0.0",
 *     ipv4WinsServer1: "0.0.0.0",
 *     ipv4WinsServer2: "0.0.0.0",
 *     ipv6DnsServer1: "::",
 *     ipv6DnsServer2: "::",
 *     ipv6DnsServer3: "::",
 *     ipv6EndIp: "::",
 *     ipv6Prefix: 128,
 *     ipv6StartIp: "::",
 *     keepalive: 10,
 *     keylife: 86400,
 *     localGw: "0.0.0.0",
 *     localidType: "auto",
 *     meshSelectorType: "disable",
 *     mode: "main",
 *     modeCfg: "disable",
 *     nattraversal: "enable",
 *     negotiateTimeout: 30,
 *     peertype: "any",
 *     ppk: "disable",
 *     priority: 0,
 *     proposal: "aes128-sha256 aes256-sha256 aes128-sha1 aes256-sha1",
 *     psksecret: "dewcEde2112",
 *     reauth: "disable",
 *     rekey: "enable",
 *     remoteGw: "2.1.1.1",
 *     rsaSignatureFormat: "pkcs1",
 *     savePassword: "disable",
 *     sendCertChain: "enable",
 *     signatureHashAlg: "sha2-512 sha2-384 sha2-256 sha1",
 *     suiteB: "disable",
 *     type: "static",
 *     unitySupport: "enable",
 *     wizardType: "custom",
 *     xauthtype: "disable",
 * });
 * const trname = new fortios.vpn.ipsec.Phase2("trname", {
 *     addRoute: "phase1",
 *     autoNegotiate: "disable",
 *     dhcpIpsec: "disable",
 *     dhgrp: "14 5",
 *     dstAddrType: "subnet",
 *     dstEndIp: "0.0.0.0",
 *     dstEndIp6: "::",
 *     dstPort: 0,
 *     dstStartIp: "0.0.0.0",
 *     dstStartIp6: "::",
 *     dstSubnet: "0.0.0.0 0.0.0.0",
 *     dstSubnet6: "::/0",
 *     encapsulation: "tunnel-mode",
 *     keepalive: "disable",
 *     keylifeType: "seconds",
 *     keylifekbs: 5120,
 *     keylifeseconds: 43200,
 *     l2tp: "disable",
 *     pfs: "enable",
 *     phase1name: trnamex2.name,
 *     proposal: "null-md5 null-sha1 null-sha256",
 *     protocol: 0,
 *     replay: "enable",
 *     routeOverlap: "use-new",
 *     selectorMatch: "auto",
 *     singleSource: "disable",
 *     srcAddrType: "subnet",
 *     srcEndIp: "0.0.0.0",
 *     srcEndIp6: "::",
 *     srcPort: 0,
 *     srcStartIp: "0.0.0.0",
 *     srcStartIp6: "::",
 *     srcSubnet: "0.0.0.0 0.0.0.0",
 *     srcSubnet6: "::/0",
 *     useNatip: "disable",
 * });
 * ```
 *
 * ## Import
 *
 * VpnIpsec Phase2 can be imported using any of these accepted formats:
 *
 * ```sh
 * $ pulumi import fortios:vpn/ipsec/phase2:Phase2 labelname {{name}}
 * ```
 *
 * If you do not want to import arguments of block:
 *
 * $ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 * $ pulumi import fortios:vpn/ipsec/phase2:Phase2 labelname {{name}}
 * ```
 *
 * $ unset "FORTIOS_IMPORT_TABLE"
 */
export class Phase2 extends pulumi.CustomResource {
    /**
     * Get an existing Phase2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Phase2State, opts?: pulumi.CustomResourceOptions): Phase2 {
        return new Phase2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:vpn/ipsec/phase2:Phase2';

    /**
     * Returns true if the given object is an instance of Phase2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Phase2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Phase2.__pulumiType;
    }

    /**
     * Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
     */
    public readonly addRoute!: pulumi.Output<string>;
    /**
     * Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
     */
    public readonly autoNegotiate!: pulumi.Output<string>;
    /**
     * Comment.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
     */
    public readonly dhcpIpsec!: pulumi.Output<string>;
    /**
     * Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
     */
    public readonly dhgrp!: pulumi.Output<string>;
    /**
     * Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
     */
    public readonly diffserv!: pulumi.Output<string>;
    /**
     * DSCP value to be applied to the IPsec tunnel outer IP header.
     */
    public readonly diffservcode!: pulumi.Output<string>;
    /**
     * Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
     */
    public readonly dstAddrType!: pulumi.Output<string>;
    /**
     * Remote proxy ID IPv4 end.
     */
    public readonly dstEndIp!: pulumi.Output<string>;
    /**
     * Remote proxy ID IPv6 end.
     */
    public readonly dstEndIp6!: pulumi.Output<string>;
    /**
     * Remote proxy ID name.
     */
    public readonly dstName!: pulumi.Output<string>;
    /**
     * Remote proxy ID name.
     */
    public readonly dstName6!: pulumi.Output<string>;
    /**
     * Quick mode destination port (1 - 65535 or 0 for all).
     */
    public readonly dstPort!: pulumi.Output<number>;
    /**
     * Remote proxy ID IPv4 start.
     */
    public readonly dstStartIp!: pulumi.Output<string>;
    /**
     * Remote proxy ID IPv6 start.
     */
    public readonly dstStartIp6!: pulumi.Output<string>;
    /**
     * Remote proxy ID IPv4 subnet.
     */
    public readonly dstSubnet!: pulumi.Output<string>;
    /**
     * Remote proxy ID IPv6 subnet.
     */
    public readonly dstSubnet6!: pulumi.Output<string>;
    /**
     * ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
     */
    public readonly encapsulation!: pulumi.Output<string>;
    /**
     * Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
     */
    public readonly inboundDscpCopy!: pulumi.Output<string>;
    /**
     * Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
     */
    public readonly initiatorTsNarrow!: pulumi.Output<string>;
    /**
     * Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
     */
    public readonly ipv4Df!: pulumi.Output<string>;
    /**
     * Enable/disable keep alive. Valid values: `enable`, `disable`.
     */
    public readonly keepalive!: pulumi.Output<string>;
    /**
     * Keylife type. Valid values: `seconds`, `kbs`, `both`.
     */
    public readonly keylifeType!: pulumi.Output<string>;
    /**
     * Phase2 key life in number of kilobytes of traffic (5120 - 4294967295).
     */
    public readonly keylifekbs!: pulumi.Output<number>;
    /**
     * Phase2 key life in time in seconds (120 - 172800).
     */
    public readonly keylifeseconds!: pulumi.Output<number>;
    /**
     * Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
     */
    public readonly l2tp!: pulumi.Output<string>;
    /**
     * IPsec tunnel name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable/disable PFS feature. Valid values: `enable`, `disable`.
     */
    public readonly pfs!: pulumi.Output<string>;
    /**
     * Phase 1 determines the options required for phase 2.
     */
    public readonly phase1name!: pulumi.Output<string>;
    /**
     * Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
     */
    public readonly proposal!: pulumi.Output<string>;
    /**
     * Quick mode protocol selector (1 - 255 or 0 for all).
     */
    public readonly protocol!: pulumi.Output<number>;
    /**
     * Enable/disable replay detection. Valid values: `enable`, `disable`.
     */
    public readonly replay!: pulumi.Output<string>;
    /**
     * Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
     */
    public readonly routeOverlap!: pulumi.Output<string>;
    /**
     * Match type to use when comparing selectors. Valid values: `exact`, `subset`, `auto`.
     */
    public readonly selectorMatch!: pulumi.Output<string>;
    /**
     * Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
     */
    public readonly singleSource!: pulumi.Output<string>;
    /**
     * Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
     */
    public readonly srcAddrType!: pulumi.Output<string>;
    /**
     * Local proxy ID end.
     */
    public readonly srcEndIp!: pulumi.Output<string>;
    /**
     * Local proxy ID IPv6 end.
     */
    public readonly srcEndIp6!: pulumi.Output<string>;
    /**
     * Local proxy ID name.
     */
    public readonly srcName!: pulumi.Output<string>;
    /**
     * Local proxy ID name.
     */
    public readonly srcName6!: pulumi.Output<string>;
    /**
     * Quick mode source port (1 - 65535 or 0 for all).
     */
    public readonly srcPort!: pulumi.Output<number>;
    /**
     * Local proxy ID start.
     */
    public readonly srcStartIp!: pulumi.Output<string>;
    /**
     * Local proxy ID IPv6 start.
     */
    public readonly srcStartIp6!: pulumi.Output<string>;
    /**
     * Local proxy ID subnet.
     */
    public readonly srcSubnet!: pulumi.Output<string>;
    /**
     * Local proxy ID IPv6 subnet.
     */
    public readonly srcSubnet6!: pulumi.Output<string>;
    /**
     * Enable to use the FortiGate public IP as the source selector when outbound NAT is used. Valid values: `enable`, `disable`.
     */
    public readonly useNatip!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a Phase2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Phase2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Phase2Args | Phase2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Phase2State | undefined;
            resourceInputs["addRoute"] = state ? state.addRoute : undefined;
            resourceInputs["autoNegotiate"] = state ? state.autoNegotiate : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["dhcpIpsec"] = state ? state.dhcpIpsec : undefined;
            resourceInputs["dhgrp"] = state ? state.dhgrp : undefined;
            resourceInputs["diffserv"] = state ? state.diffserv : undefined;
            resourceInputs["diffservcode"] = state ? state.diffservcode : undefined;
            resourceInputs["dstAddrType"] = state ? state.dstAddrType : undefined;
            resourceInputs["dstEndIp"] = state ? state.dstEndIp : undefined;
            resourceInputs["dstEndIp6"] = state ? state.dstEndIp6 : undefined;
            resourceInputs["dstName"] = state ? state.dstName : undefined;
            resourceInputs["dstName6"] = state ? state.dstName6 : undefined;
            resourceInputs["dstPort"] = state ? state.dstPort : undefined;
            resourceInputs["dstStartIp"] = state ? state.dstStartIp : undefined;
            resourceInputs["dstStartIp6"] = state ? state.dstStartIp6 : undefined;
            resourceInputs["dstSubnet"] = state ? state.dstSubnet : undefined;
            resourceInputs["dstSubnet6"] = state ? state.dstSubnet6 : undefined;
            resourceInputs["encapsulation"] = state ? state.encapsulation : undefined;
            resourceInputs["inboundDscpCopy"] = state ? state.inboundDscpCopy : undefined;
            resourceInputs["initiatorTsNarrow"] = state ? state.initiatorTsNarrow : undefined;
            resourceInputs["ipv4Df"] = state ? state.ipv4Df : undefined;
            resourceInputs["keepalive"] = state ? state.keepalive : undefined;
            resourceInputs["keylifeType"] = state ? state.keylifeType : undefined;
            resourceInputs["keylifekbs"] = state ? state.keylifekbs : undefined;
            resourceInputs["keylifeseconds"] = state ? state.keylifeseconds : undefined;
            resourceInputs["l2tp"] = state ? state.l2tp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pfs"] = state ? state.pfs : undefined;
            resourceInputs["phase1name"] = state ? state.phase1name : undefined;
            resourceInputs["proposal"] = state ? state.proposal : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["replay"] = state ? state.replay : undefined;
            resourceInputs["routeOverlap"] = state ? state.routeOverlap : undefined;
            resourceInputs["selectorMatch"] = state ? state.selectorMatch : undefined;
            resourceInputs["singleSource"] = state ? state.singleSource : undefined;
            resourceInputs["srcAddrType"] = state ? state.srcAddrType : undefined;
            resourceInputs["srcEndIp"] = state ? state.srcEndIp : undefined;
            resourceInputs["srcEndIp6"] = state ? state.srcEndIp6 : undefined;
            resourceInputs["srcName"] = state ? state.srcName : undefined;
            resourceInputs["srcName6"] = state ? state.srcName6 : undefined;
            resourceInputs["srcPort"] = state ? state.srcPort : undefined;
            resourceInputs["srcStartIp"] = state ? state.srcStartIp : undefined;
            resourceInputs["srcStartIp6"] = state ? state.srcStartIp6 : undefined;
            resourceInputs["srcSubnet"] = state ? state.srcSubnet : undefined;
            resourceInputs["srcSubnet6"] = state ? state.srcSubnet6 : undefined;
            resourceInputs["useNatip"] = state ? state.useNatip : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as Phase2Args | undefined;
            if ((!args || args.phase1name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'phase1name'");
            }
            if ((!args || args.proposal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'proposal'");
            }
            resourceInputs["addRoute"] = args ? args.addRoute : undefined;
            resourceInputs["autoNegotiate"] = args ? args.autoNegotiate : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["dhcpIpsec"] = args ? args.dhcpIpsec : undefined;
            resourceInputs["dhgrp"] = args ? args.dhgrp : undefined;
            resourceInputs["diffserv"] = args ? args.diffserv : undefined;
            resourceInputs["diffservcode"] = args ? args.diffservcode : undefined;
            resourceInputs["dstAddrType"] = args ? args.dstAddrType : undefined;
            resourceInputs["dstEndIp"] = args ? args.dstEndIp : undefined;
            resourceInputs["dstEndIp6"] = args ? args.dstEndIp6 : undefined;
            resourceInputs["dstName"] = args ? args.dstName : undefined;
            resourceInputs["dstName6"] = args ? args.dstName6 : undefined;
            resourceInputs["dstPort"] = args ? args.dstPort : undefined;
            resourceInputs["dstStartIp"] = args ? args.dstStartIp : undefined;
            resourceInputs["dstStartIp6"] = args ? args.dstStartIp6 : undefined;
            resourceInputs["dstSubnet"] = args ? args.dstSubnet : undefined;
            resourceInputs["dstSubnet6"] = args ? args.dstSubnet6 : undefined;
            resourceInputs["encapsulation"] = args ? args.encapsulation : undefined;
            resourceInputs["inboundDscpCopy"] = args ? args.inboundDscpCopy : undefined;
            resourceInputs["initiatorTsNarrow"] = args ? args.initiatorTsNarrow : undefined;
            resourceInputs["ipv4Df"] = args ? args.ipv4Df : undefined;
            resourceInputs["keepalive"] = args ? args.keepalive : undefined;
            resourceInputs["keylifeType"] = args ? args.keylifeType : undefined;
            resourceInputs["keylifekbs"] = args ? args.keylifekbs : undefined;
            resourceInputs["keylifeseconds"] = args ? args.keylifeseconds : undefined;
            resourceInputs["l2tp"] = args ? args.l2tp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pfs"] = args ? args.pfs : undefined;
            resourceInputs["phase1name"] = args ? args.phase1name : undefined;
            resourceInputs["proposal"] = args ? args.proposal : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["replay"] = args ? args.replay : undefined;
            resourceInputs["routeOverlap"] = args ? args.routeOverlap : undefined;
            resourceInputs["selectorMatch"] = args ? args.selectorMatch : undefined;
            resourceInputs["singleSource"] = args ? args.singleSource : undefined;
            resourceInputs["srcAddrType"] = args ? args.srcAddrType : undefined;
            resourceInputs["srcEndIp"] = args ? args.srcEndIp : undefined;
            resourceInputs["srcEndIp6"] = args ? args.srcEndIp6 : undefined;
            resourceInputs["srcName"] = args ? args.srcName : undefined;
            resourceInputs["srcName6"] = args ? args.srcName6 : undefined;
            resourceInputs["srcPort"] = args ? args.srcPort : undefined;
            resourceInputs["srcStartIp"] = args ? args.srcStartIp : undefined;
            resourceInputs["srcStartIp6"] = args ? args.srcStartIp6 : undefined;
            resourceInputs["srcSubnet"] = args ? args.srcSubnet : undefined;
            resourceInputs["srcSubnet6"] = args ? args.srcSubnet6 : undefined;
            resourceInputs["useNatip"] = args ? args.useNatip : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Phase2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Phase2 resources.
 */
export interface Phase2State {
    /**
     * Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
     */
    addRoute?: pulumi.Input<string>;
    /**
     * Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
     */
    autoNegotiate?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
     */
    dhcpIpsec?: pulumi.Input<string>;
    /**
     * Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
     */
    dhgrp?: pulumi.Input<string>;
    /**
     * Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
     */
    diffserv?: pulumi.Input<string>;
    /**
     * DSCP value to be applied to the IPsec tunnel outer IP header.
     */
    diffservcode?: pulumi.Input<string>;
    /**
     * Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
     */
    dstAddrType?: pulumi.Input<string>;
    /**
     * Remote proxy ID IPv4 end.
     */
    dstEndIp?: pulumi.Input<string>;
    /**
     * Remote proxy ID IPv6 end.
     */
    dstEndIp6?: pulumi.Input<string>;
    /**
     * Remote proxy ID name.
     */
    dstName?: pulumi.Input<string>;
    /**
     * Remote proxy ID name.
     */
    dstName6?: pulumi.Input<string>;
    /**
     * Quick mode destination port (1 - 65535 or 0 for all).
     */
    dstPort?: pulumi.Input<number>;
    /**
     * Remote proxy ID IPv4 start.
     */
    dstStartIp?: pulumi.Input<string>;
    /**
     * Remote proxy ID IPv6 start.
     */
    dstStartIp6?: pulumi.Input<string>;
    /**
     * Remote proxy ID IPv4 subnet.
     */
    dstSubnet?: pulumi.Input<string>;
    /**
     * Remote proxy ID IPv6 subnet.
     */
    dstSubnet6?: pulumi.Input<string>;
    /**
     * ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
     */
    encapsulation?: pulumi.Input<string>;
    /**
     * Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
     */
    inboundDscpCopy?: pulumi.Input<string>;
    /**
     * Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
     */
    initiatorTsNarrow?: pulumi.Input<string>;
    /**
     * Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
     */
    ipv4Df?: pulumi.Input<string>;
    /**
     * Enable/disable keep alive. Valid values: `enable`, `disable`.
     */
    keepalive?: pulumi.Input<string>;
    /**
     * Keylife type. Valid values: `seconds`, `kbs`, `both`.
     */
    keylifeType?: pulumi.Input<string>;
    /**
     * Phase2 key life in number of kilobytes of traffic (5120 - 4294967295).
     */
    keylifekbs?: pulumi.Input<number>;
    /**
     * Phase2 key life in time in seconds (120 - 172800).
     */
    keylifeseconds?: pulumi.Input<number>;
    /**
     * Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
     */
    l2tp?: pulumi.Input<string>;
    /**
     * IPsec tunnel name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable PFS feature. Valid values: `enable`, `disable`.
     */
    pfs?: pulumi.Input<string>;
    /**
     * Phase 1 determines the options required for phase 2.
     */
    phase1name?: pulumi.Input<string>;
    /**
     * Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
     */
    proposal?: pulumi.Input<string>;
    /**
     * Quick mode protocol selector (1 - 255 or 0 for all).
     */
    protocol?: pulumi.Input<number>;
    /**
     * Enable/disable replay detection. Valid values: `enable`, `disable`.
     */
    replay?: pulumi.Input<string>;
    /**
     * Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
     */
    routeOverlap?: pulumi.Input<string>;
    /**
     * Match type to use when comparing selectors. Valid values: `exact`, `subset`, `auto`.
     */
    selectorMatch?: pulumi.Input<string>;
    /**
     * Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
     */
    singleSource?: pulumi.Input<string>;
    /**
     * Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
     */
    srcAddrType?: pulumi.Input<string>;
    /**
     * Local proxy ID end.
     */
    srcEndIp?: pulumi.Input<string>;
    /**
     * Local proxy ID IPv6 end.
     */
    srcEndIp6?: pulumi.Input<string>;
    /**
     * Local proxy ID name.
     */
    srcName?: pulumi.Input<string>;
    /**
     * Local proxy ID name.
     */
    srcName6?: pulumi.Input<string>;
    /**
     * Quick mode source port (1 - 65535 or 0 for all).
     */
    srcPort?: pulumi.Input<number>;
    /**
     * Local proxy ID start.
     */
    srcStartIp?: pulumi.Input<string>;
    /**
     * Local proxy ID IPv6 start.
     */
    srcStartIp6?: pulumi.Input<string>;
    /**
     * Local proxy ID subnet.
     */
    srcSubnet?: pulumi.Input<string>;
    /**
     * Local proxy ID IPv6 subnet.
     */
    srcSubnet6?: pulumi.Input<string>;
    /**
     * Enable to use the FortiGate public IP as the source selector when outbound NAT is used. Valid values: `enable`, `disable`.
     */
    useNatip?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Phase2 resource.
 */
export interface Phase2Args {
    /**
     * Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
     */
    addRoute?: pulumi.Input<string>;
    /**
     * Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
     */
    autoNegotiate?: pulumi.Input<string>;
    /**
     * Comment.
     */
    comments?: pulumi.Input<string>;
    /**
     * Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
     */
    dhcpIpsec?: pulumi.Input<string>;
    /**
     * Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
     */
    dhgrp?: pulumi.Input<string>;
    /**
     * Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
     */
    diffserv?: pulumi.Input<string>;
    /**
     * DSCP value to be applied to the IPsec tunnel outer IP header.
     */
    diffservcode?: pulumi.Input<string>;
    /**
     * Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
     */
    dstAddrType?: pulumi.Input<string>;
    /**
     * Remote proxy ID IPv4 end.
     */
    dstEndIp?: pulumi.Input<string>;
    /**
     * Remote proxy ID IPv6 end.
     */
    dstEndIp6?: pulumi.Input<string>;
    /**
     * Remote proxy ID name.
     */
    dstName?: pulumi.Input<string>;
    /**
     * Remote proxy ID name.
     */
    dstName6?: pulumi.Input<string>;
    /**
     * Quick mode destination port (1 - 65535 or 0 for all).
     */
    dstPort?: pulumi.Input<number>;
    /**
     * Remote proxy ID IPv4 start.
     */
    dstStartIp?: pulumi.Input<string>;
    /**
     * Remote proxy ID IPv6 start.
     */
    dstStartIp6?: pulumi.Input<string>;
    /**
     * Remote proxy ID IPv4 subnet.
     */
    dstSubnet?: pulumi.Input<string>;
    /**
     * Remote proxy ID IPv6 subnet.
     */
    dstSubnet6?: pulumi.Input<string>;
    /**
     * ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
     */
    encapsulation?: pulumi.Input<string>;
    /**
     * Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
     */
    inboundDscpCopy?: pulumi.Input<string>;
    /**
     * Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
     */
    initiatorTsNarrow?: pulumi.Input<string>;
    /**
     * Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
     */
    ipv4Df?: pulumi.Input<string>;
    /**
     * Enable/disable keep alive. Valid values: `enable`, `disable`.
     */
    keepalive?: pulumi.Input<string>;
    /**
     * Keylife type. Valid values: `seconds`, `kbs`, `both`.
     */
    keylifeType?: pulumi.Input<string>;
    /**
     * Phase2 key life in number of kilobytes of traffic (5120 - 4294967295).
     */
    keylifekbs?: pulumi.Input<number>;
    /**
     * Phase2 key life in time in seconds (120 - 172800).
     */
    keylifeseconds?: pulumi.Input<number>;
    /**
     * Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
     */
    l2tp?: pulumi.Input<string>;
    /**
     * IPsec tunnel name.
     */
    name?: pulumi.Input<string>;
    /**
     * Enable/disable PFS feature. Valid values: `enable`, `disable`.
     */
    pfs?: pulumi.Input<string>;
    /**
     * Phase 1 determines the options required for phase 2.
     */
    phase1name: pulumi.Input<string>;
    /**
     * Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
     */
    proposal: pulumi.Input<string>;
    /**
     * Quick mode protocol selector (1 - 255 or 0 for all).
     */
    protocol?: pulumi.Input<number>;
    /**
     * Enable/disable replay detection. Valid values: `enable`, `disable`.
     */
    replay?: pulumi.Input<string>;
    /**
     * Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
     */
    routeOverlap?: pulumi.Input<string>;
    /**
     * Match type to use when comparing selectors. Valid values: `exact`, `subset`, `auto`.
     */
    selectorMatch?: pulumi.Input<string>;
    /**
     * Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
     */
    singleSource?: pulumi.Input<string>;
    /**
     * Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
     */
    srcAddrType?: pulumi.Input<string>;
    /**
     * Local proxy ID end.
     */
    srcEndIp?: pulumi.Input<string>;
    /**
     * Local proxy ID IPv6 end.
     */
    srcEndIp6?: pulumi.Input<string>;
    /**
     * Local proxy ID name.
     */
    srcName?: pulumi.Input<string>;
    /**
     * Local proxy ID name.
     */
    srcName6?: pulumi.Input<string>;
    /**
     * Quick mode source port (1 - 65535 or 0 for all).
     */
    srcPort?: pulumi.Input<number>;
    /**
     * Local proxy ID start.
     */
    srcStartIp?: pulumi.Input<string>;
    /**
     * Local proxy ID IPv6 start.
     */
    srcStartIp6?: pulumi.Input<string>;
    /**
     * Local proxy ID subnet.
     */
    srcSubnet?: pulumi.Input<string>;
    /**
     * Local proxy ID IPv6 subnet.
     */
    srcSubnet6?: pulumi.Input<string>;
    /**
     * Enable to use the FortiGate public IP as the source selector when outbound NAT is used. Valid values: `enable`, `disable`.
     */
    useNatip?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
