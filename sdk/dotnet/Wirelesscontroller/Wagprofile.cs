// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Wirelesscontroller
{
    /// <summary>
    /// Configure wireless access gateway (WAG) profiles used for tunnels on AP. Applies to FortiOS Version `&gt;= 6.2.4`.
    /// 
    /// ## Import
    /// 
    /// WirelessController WagProfile can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:wirelesscontroller/wagprofile:Wagprofile labelname {{name}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:wirelesscontroller/wagprofile:Wagprofile labelname {{name}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:wirelesscontroller/wagprofile:Wagprofile")]
    public partial class Wagprofile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Comment.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// IP address of the monitoring DHCP request packet sent through the tunnel.
        /// </summary>
        [Output("dhcpIpAddr")]
        public Output<string> DhcpIpAddr { get; private set; } = null!;

        /// <summary>
        /// Tunnel profile name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Interval between two tunnel monitoring echo packets (1 - 65535 sec, default = 1).
        /// </summary>
        [Output("pingInterval")]
        public Output<int> PingInterval { get; private set; } = null!;

        /// <summary>
        /// Number of the tunnel mointoring echo packets (1 - 65535, default = 5).
        /// </summary>
        [Output("pingNumber")]
        public Output<int> PingNumber { get; private set; } = null!;

        /// <summary>
        /// Window of time for the return packets from the tunnel's remote end (1 - 65535 sec, default = 160).
        /// </summary>
        [Output("returnPacketTimeout")]
        public Output<int> ReturnPacketTimeout { get; private set; } = null!;

        /// <summary>
        /// Tunnel type. Valid values: `l2tpv3`, `gre`.
        /// </summary>
        [Output("tunnelType")]
        public Output<string> TunnelType { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// IP Address of the wireless access gateway.
        /// </summary>
        [Output("wagIp")]
        public Output<string> WagIp { get; private set; } = null!;

        /// <summary>
        /// UDP port of the wireless access gateway.
        /// </summary>
        [Output("wagPort")]
        public Output<int> WagPort { get; private set; } = null!;


        /// <summary>
        /// Create a Wagprofile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Wagprofile(string name, WagprofileArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:wirelesscontroller/wagprofile:Wagprofile", name, args ?? new WagprofileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Wagprofile(string name, Input<string> id, WagprofileState? state = null, CustomResourceOptions? options = null)
            : base("fortios:wirelesscontroller/wagprofile:Wagprofile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Wagprofile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Wagprofile Get(string name, Input<string> id, WagprofileState? state = null, CustomResourceOptions? options = null)
        {
            return new Wagprofile(name, id, state, options);
        }
    }

    public sealed class WagprofileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// IP address of the monitoring DHCP request packet sent through the tunnel.
        /// </summary>
        [Input("dhcpIpAddr")]
        public Input<string>? DhcpIpAddr { get; set; }

        /// <summary>
        /// Tunnel profile name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Interval between two tunnel monitoring echo packets (1 - 65535 sec, default = 1).
        /// </summary>
        [Input("pingInterval")]
        public Input<int>? PingInterval { get; set; }

        /// <summary>
        /// Number of the tunnel mointoring echo packets (1 - 65535, default = 5).
        /// </summary>
        [Input("pingNumber")]
        public Input<int>? PingNumber { get; set; }

        /// <summary>
        /// Window of time for the return packets from the tunnel's remote end (1 - 65535 sec, default = 160).
        /// </summary>
        [Input("returnPacketTimeout")]
        public Input<int>? ReturnPacketTimeout { get; set; }

        /// <summary>
        /// Tunnel type. Valid values: `l2tpv3`, `gre`.
        /// </summary>
        [Input("tunnelType")]
        public Input<string>? TunnelType { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// IP Address of the wireless access gateway.
        /// </summary>
        [Input("wagIp")]
        public Input<string>? WagIp { get; set; }

        /// <summary>
        /// UDP port of the wireless access gateway.
        /// </summary>
        [Input("wagPort")]
        public Input<int>? WagPort { get; set; }

        public WagprofileArgs()
        {
        }
        public static new WagprofileArgs Empty => new WagprofileArgs();
    }

    public sealed class WagprofileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// IP address of the monitoring DHCP request packet sent through the tunnel.
        /// </summary>
        [Input("dhcpIpAddr")]
        public Input<string>? DhcpIpAddr { get; set; }

        /// <summary>
        /// Tunnel profile name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Interval between two tunnel monitoring echo packets (1 - 65535 sec, default = 1).
        /// </summary>
        [Input("pingInterval")]
        public Input<int>? PingInterval { get; set; }

        /// <summary>
        /// Number of the tunnel mointoring echo packets (1 - 65535, default = 5).
        /// </summary>
        [Input("pingNumber")]
        public Input<int>? PingNumber { get; set; }

        /// <summary>
        /// Window of time for the return packets from the tunnel's remote end (1 - 65535 sec, default = 160).
        /// </summary>
        [Input("returnPacketTimeout")]
        public Input<int>? ReturnPacketTimeout { get; set; }

        /// <summary>
        /// Tunnel type. Valid values: `l2tpv3`, `gre`.
        /// </summary>
        [Input("tunnelType")]
        public Input<string>? TunnelType { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// IP Address of the wireless access gateway.
        /// </summary>
        [Input("wagIp")]
        public Input<string>? WagIp { get; set; }

        /// <summary>
        /// UDP port of the wireless access gateway.
        /// </summary>
        [Input("wagPort")]
        public Input<int>? WagPort { get; set; }

        public WagprofileState()
        {
        }
        public static new WagprofileState Empty => new WagprofileState();
    }
}
