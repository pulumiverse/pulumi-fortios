// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Wirelesscontroller
{
    /// <summary>
    /// Configure Bluetooth Low Energy profile.
    /// 
    /// ## Import
    /// 
    /// WirelessController BleProfile can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:wirelesscontroller/bleprofile:Bleprofile labelname {{name}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:wirelesscontroller/bleprofile:Bleprofile labelname {{name}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:wirelesscontroller/bleprofile:Bleprofile")]
    public partial class Bleprofile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Advertising type. Valid values: `ibeacon`, `eddystone-uid`, `eddystone-url`.
        /// </summary>
        [Output("advertising")]
        public Output<string> Advertising { get; private set; } = null!;

        /// <summary>
        /// Beacon interval (default = 100 msec).
        /// </summary>
        [Output("beaconInterval")]
        public Output<int> BeaconInterval { get; private set; } = null!;

        /// <summary>
        /// Enable/disable Bluetooth Low Energy (BLE) scanning. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("bleScanning")]
        public Output<string> BleScanning { get; private set; } = null!;

        /// <summary>
        /// Comment.
        /// </summary>
        [Output("comment")]
        public Output<string> Comment { get; private set; } = null!;

        /// <summary>
        /// Eddystone instance ID.
        /// </summary>
        [Output("eddystoneInstance")]
        public Output<string> EddystoneInstance { get; private set; } = null!;

        /// <summary>
        /// Eddystone namespace ID.
        /// </summary>
        [Output("eddystoneNamespace")]
        public Output<string> EddystoneNamespace { get; private set; } = null!;

        /// <summary>
        /// Eddystone URL.
        /// </summary>
        [Output("eddystoneUrl")]
        public Output<string> EddystoneUrl { get; private set; } = null!;

        /// <summary>
        /// Eddystone encoded URL hexadecimal string
        /// </summary>
        [Output("eddystoneUrlEncodeHex")]
        public Output<string> EddystoneUrlEncodeHex { get; private set; } = null!;

        /// <summary>
        /// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        /// </summary>
        [Output("ibeaconUuid")]
        public Output<string> IbeaconUuid { get; private set; } = null!;

        /// <summary>
        /// Major ID.
        /// </summary>
        [Output("majorId")]
        public Output<int> MajorId { get; private set; } = null!;

        /// <summary>
        /// Minor ID.
        /// </summary>
        [Output("minorId")]
        public Output<int> MinorId { get; private set; } = null!;

        /// <summary>
        /// Bluetooth Low Energy profile name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Scan Interval (default = 50 msec).
        /// </summary>
        [Output("scanInterval")]
        public Output<int> ScanInterval { get; private set; } = null!;

        /// <summary>
        /// Scan Period (default = 4000 msec).
        /// </summary>
        [Output("scanPeriod")]
        public Output<int> ScanPeriod { get; private set; } = null!;

        /// <summary>
        /// Minimum signal level/threshold in dBm required for the AP to report detected BLE device (-95 to -20, default = -90).
        /// </summary>
        [Output("scanThreshold")]
        public Output<string> ScanThreshold { get; private set; } = null!;

        /// <summary>
        /// Scan Time (default = 1000 msec).
        /// </summary>
        [Output("scanTime")]
        public Output<int> ScanTime { get; private set; } = null!;

        /// <summary>
        /// Scan Type (default = active). Valid values: `active`, `passive`.
        /// </summary>
        [Output("scanType")]
        public Output<string> ScanType { get; private set; } = null!;

        /// <summary>
        /// Scan Windows (default = 50 msec).
        /// </summary>
        [Output("scanWindow")]
        public Output<int> ScanWindow { get; private set; } = null!;

        /// <summary>
        /// Transmit power level (default = 0). Valid values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`.
        /// </summary>
        [Output("txpower")]
        public Output<string> Txpower { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Bleprofile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Bleprofile(string name, BleprofileArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:wirelesscontroller/bleprofile:Bleprofile", name, args ?? new BleprofileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Bleprofile(string name, Input<string> id, BleprofileState? state = null, CustomResourceOptions? options = null)
            : base("fortios:wirelesscontroller/bleprofile:Bleprofile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Bleprofile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Bleprofile Get(string name, Input<string> id, BleprofileState? state = null, CustomResourceOptions? options = null)
        {
            return new Bleprofile(name, id, state, options);
        }
    }

    public sealed class BleprofileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Advertising type. Valid values: `ibeacon`, `eddystone-uid`, `eddystone-url`.
        /// </summary>
        [Input("advertising")]
        public Input<string>? Advertising { get; set; }

        /// <summary>
        /// Beacon interval (default = 100 msec).
        /// </summary>
        [Input("beaconInterval")]
        public Input<int>? BeaconInterval { get; set; }

        /// <summary>
        /// Enable/disable Bluetooth Low Energy (BLE) scanning. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("bleScanning")]
        public Input<string>? BleScanning { get; set; }

        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Eddystone instance ID.
        /// </summary>
        [Input("eddystoneInstance")]
        public Input<string>? EddystoneInstance { get; set; }

        /// <summary>
        /// Eddystone namespace ID.
        /// </summary>
        [Input("eddystoneNamespace")]
        public Input<string>? EddystoneNamespace { get; set; }

        /// <summary>
        /// Eddystone URL.
        /// </summary>
        [Input("eddystoneUrl")]
        public Input<string>? EddystoneUrl { get; set; }

        /// <summary>
        /// Eddystone encoded URL hexadecimal string
        /// </summary>
        [Input("eddystoneUrlEncodeHex")]
        public Input<string>? EddystoneUrlEncodeHex { get; set; }

        /// <summary>
        /// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        /// </summary>
        [Input("ibeaconUuid")]
        public Input<string>? IbeaconUuid { get; set; }

        /// <summary>
        /// Major ID.
        /// </summary>
        [Input("majorId")]
        public Input<int>? MajorId { get; set; }

        /// <summary>
        /// Minor ID.
        /// </summary>
        [Input("minorId")]
        public Input<int>? MinorId { get; set; }

        /// <summary>
        /// Bluetooth Low Energy profile name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Scan Interval (default = 50 msec).
        /// </summary>
        [Input("scanInterval")]
        public Input<int>? ScanInterval { get; set; }

        /// <summary>
        /// Scan Period (default = 4000 msec).
        /// </summary>
        [Input("scanPeriod")]
        public Input<int>? ScanPeriod { get; set; }

        /// <summary>
        /// Minimum signal level/threshold in dBm required for the AP to report detected BLE device (-95 to -20, default = -90).
        /// </summary>
        [Input("scanThreshold")]
        public Input<string>? ScanThreshold { get; set; }

        /// <summary>
        /// Scan Time (default = 1000 msec).
        /// </summary>
        [Input("scanTime")]
        public Input<int>? ScanTime { get; set; }

        /// <summary>
        /// Scan Type (default = active). Valid values: `active`, `passive`.
        /// </summary>
        [Input("scanType")]
        public Input<string>? ScanType { get; set; }

        /// <summary>
        /// Scan Windows (default = 50 msec).
        /// </summary>
        [Input("scanWindow")]
        public Input<int>? ScanWindow { get; set; }

        /// <summary>
        /// Transmit power level (default = 0). Valid values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`.
        /// </summary>
        [Input("txpower")]
        public Input<string>? Txpower { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public BleprofileArgs()
        {
        }
        public static new BleprofileArgs Empty => new BleprofileArgs();
    }

    public sealed class BleprofileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Advertising type. Valid values: `ibeacon`, `eddystone-uid`, `eddystone-url`.
        /// </summary>
        [Input("advertising")]
        public Input<string>? Advertising { get; set; }

        /// <summary>
        /// Beacon interval (default = 100 msec).
        /// </summary>
        [Input("beaconInterval")]
        public Input<int>? BeaconInterval { get; set; }

        /// <summary>
        /// Enable/disable Bluetooth Low Energy (BLE) scanning. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("bleScanning")]
        public Input<string>? BleScanning { get; set; }

        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Eddystone instance ID.
        /// </summary>
        [Input("eddystoneInstance")]
        public Input<string>? EddystoneInstance { get; set; }

        /// <summary>
        /// Eddystone namespace ID.
        /// </summary>
        [Input("eddystoneNamespace")]
        public Input<string>? EddystoneNamespace { get; set; }

        /// <summary>
        /// Eddystone URL.
        /// </summary>
        [Input("eddystoneUrl")]
        public Input<string>? EddystoneUrl { get; set; }

        /// <summary>
        /// Eddystone encoded URL hexadecimal string
        /// </summary>
        [Input("eddystoneUrlEncodeHex")]
        public Input<string>? EddystoneUrlEncodeHex { get; set; }

        /// <summary>
        /// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        /// </summary>
        [Input("ibeaconUuid")]
        public Input<string>? IbeaconUuid { get; set; }

        /// <summary>
        /// Major ID.
        /// </summary>
        [Input("majorId")]
        public Input<int>? MajorId { get; set; }

        /// <summary>
        /// Minor ID.
        /// </summary>
        [Input("minorId")]
        public Input<int>? MinorId { get; set; }

        /// <summary>
        /// Bluetooth Low Energy profile name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Scan Interval (default = 50 msec).
        /// </summary>
        [Input("scanInterval")]
        public Input<int>? ScanInterval { get; set; }

        /// <summary>
        /// Scan Period (default = 4000 msec).
        /// </summary>
        [Input("scanPeriod")]
        public Input<int>? ScanPeriod { get; set; }

        /// <summary>
        /// Minimum signal level/threshold in dBm required for the AP to report detected BLE device (-95 to -20, default = -90).
        /// </summary>
        [Input("scanThreshold")]
        public Input<string>? ScanThreshold { get; set; }

        /// <summary>
        /// Scan Time (default = 1000 msec).
        /// </summary>
        [Input("scanTime")]
        public Input<int>? ScanTime { get; set; }

        /// <summary>
        /// Scan Type (default = active). Valid values: `active`, `passive`.
        /// </summary>
        [Input("scanType")]
        public Input<string>? ScanType { get; set; }

        /// <summary>
        /// Scan Windows (default = 50 msec).
        /// </summary>
        [Input("scanWindow")]
        public Input<int>? ScanWindow { get; set; }

        /// <summary>
        /// Transmit power level (default = 0). Valid values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`.
        /// </summary>
        [Input("txpower")]
        public Input<string>? Txpower { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public BleprofileState()
        {
        }
        public static new BleprofileState Empty => new BleprofileState();
    }
}
