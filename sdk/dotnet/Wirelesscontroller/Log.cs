// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Wirelesscontroller
{
    /// <summary>
    /// Configure wireless controller event log filters. Applies to FortiOS Version `&gt;= 6.2.4`.
    /// 
    /// ## Import
    /// 
    /// WirelessController Log can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:wirelesscontroller/log:Log labelname WirelessControllerLog
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:wirelesscontroller/log:Log labelname WirelessControllerLog
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:wirelesscontroller/log:Log")]
    public partial class Log : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Output("addrgrpLog")]
        public Output<string> AddrgrpLog { get; private set; } = null!;

        /// <summary>
        /// Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Output("bleLog")]
        public Output<string> BleLog { get; private set; } = null!;

        /// <summary>
        /// Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Output("clbLog")]
        public Output<string> ClbLog { get; private set; } = null!;

        /// <summary>
        /// Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Output("dhcpStarvLog")]
        public Output<string> DhcpStarvLog { get; private set; } = null!;

        /// <summary>
        /// Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Output("ledSchedLog")]
        public Output<string> LedSchedLog { get; private set; } = null!;

        /// <summary>
        /// Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Output("radioEventLog")]
        public Output<string> RadioEventLog { get; private set; } = null!;

        /// <summary>
        /// Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Output("rogueEventLog")]
        public Output<string> RogueEventLog { get; private set; } = null!;

        /// <summary>
        /// Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Output("staEventLog")]
        public Output<string> StaEventLog { get; private set; } = null!;

        /// <summary>
        /// Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Output("staLocateLog")]
        public Output<string> StaLocateLog { get; private set; } = null!;

        /// <summary>
        /// Enable/disable wireless event logging. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Output("widsLog")]
        public Output<string> WidsLog { get; private set; } = null!;

        /// <summary>
        /// Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Output("wtpEventLog")]
        public Output<string> WtpEventLog { get; private set; } = null!;

        /// <summary>
        /// Lowest severity level to log FAP fips event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Output("wtpFipsEventLog")]
        public Output<string> WtpFipsEventLog { get; private set; } = null!;


        /// <summary>
        /// Create a Log resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Log(string name, LogArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:wirelesscontroller/log:Log", name, args ?? new LogArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Log(string name, Input<string> id, LogState? state = null, CustomResourceOptions? options = null)
            : base("fortios:wirelesscontroller/log:Log", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Log resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Log Get(string name, Input<string> id, LogState? state = null, CustomResourceOptions? options = null)
        {
            return new Log(name, id, state, options);
        }
    }

    public sealed class LogArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("addrgrpLog")]
        public Input<string>? AddrgrpLog { get; set; }

        /// <summary>
        /// Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("bleLog")]
        public Input<string>? BleLog { get; set; }

        /// <summary>
        /// Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("clbLog")]
        public Input<string>? ClbLog { get; set; }

        /// <summary>
        /// Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("dhcpStarvLog")]
        public Input<string>? DhcpStarvLog { get; set; }

        /// <summary>
        /// Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("ledSchedLog")]
        public Input<string>? LedSchedLog { get; set; }

        /// <summary>
        /// Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("radioEventLog")]
        public Input<string>? RadioEventLog { get; set; }

        /// <summary>
        /// Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("rogueEventLog")]
        public Input<string>? RogueEventLog { get; set; }

        /// <summary>
        /// Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("staEventLog")]
        public Input<string>? StaEventLog { get; set; }

        /// <summary>
        /// Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("staLocateLog")]
        public Input<string>? StaLocateLog { get; set; }

        /// <summary>
        /// Enable/disable wireless event logging. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("widsLog")]
        public Input<string>? WidsLog { get; set; }

        /// <summary>
        /// Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("wtpEventLog")]
        public Input<string>? WtpEventLog { get; set; }

        /// <summary>
        /// Lowest severity level to log FAP fips event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("wtpFipsEventLog")]
        public Input<string>? WtpFipsEventLog { get; set; }

        public LogArgs()
        {
        }
        public static new LogArgs Empty => new LogArgs();
    }

    public sealed class LogState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("addrgrpLog")]
        public Input<string>? AddrgrpLog { get; set; }

        /// <summary>
        /// Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("bleLog")]
        public Input<string>? BleLog { get; set; }

        /// <summary>
        /// Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("clbLog")]
        public Input<string>? ClbLog { get; set; }

        /// <summary>
        /// Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("dhcpStarvLog")]
        public Input<string>? DhcpStarvLog { get; set; }

        /// <summary>
        /// Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("ledSchedLog")]
        public Input<string>? LedSchedLog { get; set; }

        /// <summary>
        /// Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("radioEventLog")]
        public Input<string>? RadioEventLog { get; set; }

        /// <summary>
        /// Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("rogueEventLog")]
        public Input<string>? RogueEventLog { get; set; }

        /// <summary>
        /// Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("staEventLog")]
        public Input<string>? StaEventLog { get; set; }

        /// <summary>
        /// Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("staLocateLog")]
        public Input<string>? StaLocateLog { get; set; }

        /// <summary>
        /// Enable/disable wireless event logging. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("widsLog")]
        public Input<string>? WidsLog { get; set; }

        /// <summary>
        /// Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("wtpEventLog")]
        public Input<string>? WtpEventLog { get; set; }

        /// <summary>
        /// Lowest severity level to log FAP fips event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        /// </summary>
        [Input("wtpFipsEventLog")]
        public Input<string>? WtpFipsEventLog { get; set; }

        public LogState()
        {
        }
        public static new LogState Empty => new LogState();
    }
}
