// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Wirelesscontroller.Outputs
{

    [OutputType]
    public sealed class WtpprofileRadio3
    {
        public readonly string? AirtimeFairness;
        public readonly string? Amsdu;
        /// <summary>
        /// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
        /// </summary>
        public readonly string? ApHandoff;
        public readonly string? ApSnifferAddr;
        public readonly int? ApSnifferBufsize;
        public readonly int? ApSnifferChan;
        public readonly string? ApSnifferCtl;
        public readonly string? ApSnifferData;
        public readonly string? ApSnifferMgmtBeacon;
        public readonly string? ApSnifferMgmtOther;
        public readonly string? ApSnifferMgmtProbe;
        public readonly string? ArrpProfile;
        public readonly int? AutoPowerHigh;
        public readonly string? AutoPowerLevel;
        public readonly int? AutoPowerLow;
        public readonly string? AutoPowerTarget;
        public readonly string? Band;
        public readonly string? Band5gType;
        public readonly string? BandwidthAdmissionControl;
        public readonly int? BandwidthCapacity;
        public readonly int? BeaconInterval;
        public readonly int? BssColor;
        public readonly string? BssColorMode;
        public readonly string? CallAdmissionControl;
        public readonly int? CallCapacity;
        public readonly string? ChannelBonding;
        public readonly string? ChannelUtilization;
        public readonly ImmutableArray<Outputs.WtpprofileRadio3Channel> Channels;
        public readonly string? Coexistence;
        public readonly string? Darrp;
        public readonly string? Drma;
        public readonly string? DrmaSensitivity;
        public readonly int? Dtim;
        public readonly int? FragThreshold;
        /// <summary>
        /// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
        /// </summary>
        public readonly string? FrequencyHandoff;
        public readonly string? IperfProtocol;
        public readonly int? IperfServerPort;
        /// <summary>
        /// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
        /// </summary>
        public readonly int? MaxClients;
        public readonly int? MaxDistance;
        public readonly string? MimoMode;
        public readonly string? Mode;
        public readonly string? N80211d;
        public readonly string? OptionalAntenna;
        public readonly string? OptionalAntennaGain;
        public readonly int? PowerLevel;
        public readonly string? PowerMode;
        public readonly int? PowerValue;
        public readonly string? PowersaveOptimize;
        public readonly string? ProtectionMode;
        public readonly int? RtsThreshold;
        public readonly string? SamBssid;
        public readonly string? SamCaCertificate;
        public readonly string? SamCaptivePortal;
        public readonly string? SamClientCertificate;
        public readonly string? SamCwpFailureString;
        public readonly string? SamCwpMatchString;
        public readonly string? SamCwpPassword;
        public readonly string? SamCwpSuccessString;
        public readonly string? SamCwpTestUrl;
        public readonly string? SamCwpUsername;
        public readonly string? SamEapMethod;
        public readonly string? SamPassword;
        public readonly string? SamPrivateKey;
        public readonly string? SamPrivateKeyPassword;
        public readonly int? SamReportIntv;
        public readonly string? SamSecurityType;
        public readonly string? SamServerFqdn;
        public readonly string? SamServerIp;
        public readonly string? SamServerType;
        public readonly string? SamSsid;
        public readonly string? SamTest;
        public readonly string? SamUsername;
        public readonly string? ShortGuardInterval;
        public readonly string? SpectrumAnalysis;
        public readonly string? TransmitOptimize;
        public readonly string? VapAll;
        public readonly ImmutableArray<Outputs.WtpprofileRadio3Vap> Vaps;
        public readonly string? WidsProfile;
        public readonly string? ZeroWaitDfs;

        [OutputConstructor]
        private WtpprofileRadio3(
            string? airtimeFairness,

            string? amsdu,

            string? apHandoff,

            string? apSnifferAddr,

            int? apSnifferBufsize,

            int? apSnifferChan,

            string? apSnifferCtl,

            string? apSnifferData,

            string? apSnifferMgmtBeacon,

            string? apSnifferMgmtOther,

            string? apSnifferMgmtProbe,

            string? arrpProfile,

            int? autoPowerHigh,

            string? autoPowerLevel,

            int? autoPowerLow,

            string? autoPowerTarget,

            string? band,

            string? band5gType,

            string? bandwidthAdmissionControl,

            int? bandwidthCapacity,

            int? beaconInterval,

            int? bssColor,

            string? bssColorMode,

            string? callAdmissionControl,

            int? callCapacity,

            string? channelBonding,

            string? channelUtilization,

            ImmutableArray<Outputs.WtpprofileRadio3Channel> channels,

            string? coexistence,

            string? darrp,

            string? drma,

            string? drmaSensitivity,

            int? dtim,

            int? fragThreshold,

            string? frequencyHandoff,

            string? iperfProtocol,

            int? iperfServerPort,

            int? maxClients,

            int? maxDistance,

            string? mimoMode,

            string? mode,

            string? n80211d,

            string? optionalAntenna,

            string? optionalAntennaGain,

            int? powerLevel,

            string? powerMode,

            int? powerValue,

            string? powersaveOptimize,

            string? protectionMode,

            int? rtsThreshold,

            string? samBssid,

            string? samCaCertificate,

            string? samCaptivePortal,

            string? samClientCertificate,

            string? samCwpFailureString,

            string? samCwpMatchString,

            string? samCwpPassword,

            string? samCwpSuccessString,

            string? samCwpTestUrl,

            string? samCwpUsername,

            string? samEapMethod,

            string? samPassword,

            string? samPrivateKey,

            string? samPrivateKeyPassword,

            int? samReportIntv,

            string? samSecurityType,

            string? samServerFqdn,

            string? samServerIp,

            string? samServerType,

            string? samSsid,

            string? samTest,

            string? samUsername,

            string? shortGuardInterval,

            string? spectrumAnalysis,

            string? transmitOptimize,

            string? vapAll,

            ImmutableArray<Outputs.WtpprofileRadio3Vap> vaps,

            string? widsProfile,

            string? zeroWaitDfs)
        {
            AirtimeFairness = airtimeFairness;
            Amsdu = amsdu;
            ApHandoff = apHandoff;
            ApSnifferAddr = apSnifferAddr;
            ApSnifferBufsize = apSnifferBufsize;
            ApSnifferChan = apSnifferChan;
            ApSnifferCtl = apSnifferCtl;
            ApSnifferData = apSnifferData;
            ApSnifferMgmtBeacon = apSnifferMgmtBeacon;
            ApSnifferMgmtOther = apSnifferMgmtOther;
            ApSnifferMgmtProbe = apSnifferMgmtProbe;
            ArrpProfile = arrpProfile;
            AutoPowerHigh = autoPowerHigh;
            AutoPowerLevel = autoPowerLevel;
            AutoPowerLow = autoPowerLow;
            AutoPowerTarget = autoPowerTarget;
            Band = band;
            Band5gType = band5gType;
            BandwidthAdmissionControl = bandwidthAdmissionControl;
            BandwidthCapacity = bandwidthCapacity;
            BeaconInterval = beaconInterval;
            BssColor = bssColor;
            BssColorMode = bssColorMode;
            CallAdmissionControl = callAdmissionControl;
            CallCapacity = callCapacity;
            ChannelBonding = channelBonding;
            ChannelUtilization = channelUtilization;
            Channels = channels;
            Coexistence = coexistence;
            Darrp = darrp;
            Drma = drma;
            DrmaSensitivity = drmaSensitivity;
            Dtim = dtim;
            FragThreshold = fragThreshold;
            FrequencyHandoff = frequencyHandoff;
            IperfProtocol = iperfProtocol;
            IperfServerPort = iperfServerPort;
            MaxClients = maxClients;
            MaxDistance = maxDistance;
            MimoMode = mimoMode;
            Mode = mode;
            N80211d = n80211d;
            OptionalAntenna = optionalAntenna;
            OptionalAntennaGain = optionalAntennaGain;
            PowerLevel = powerLevel;
            PowerMode = powerMode;
            PowerValue = powerValue;
            PowersaveOptimize = powersaveOptimize;
            ProtectionMode = protectionMode;
            RtsThreshold = rtsThreshold;
            SamBssid = samBssid;
            SamCaCertificate = samCaCertificate;
            SamCaptivePortal = samCaptivePortal;
            SamClientCertificate = samClientCertificate;
            SamCwpFailureString = samCwpFailureString;
            SamCwpMatchString = samCwpMatchString;
            SamCwpPassword = samCwpPassword;
            SamCwpSuccessString = samCwpSuccessString;
            SamCwpTestUrl = samCwpTestUrl;
            SamCwpUsername = samCwpUsername;
            SamEapMethod = samEapMethod;
            SamPassword = samPassword;
            SamPrivateKey = samPrivateKey;
            SamPrivateKeyPassword = samPrivateKeyPassword;
            SamReportIntv = samReportIntv;
            SamSecurityType = samSecurityType;
            SamServerFqdn = samServerFqdn;
            SamServerIp = samServerIp;
            SamServerType = samServerType;
            SamSsid = samSsid;
            SamTest = samTest;
            SamUsername = samUsername;
            ShortGuardInterval = shortGuardInterval;
            SpectrumAnalysis = spectrumAnalysis;
            TransmitOptimize = transmitOptimize;
            VapAll = vapAll;
            Vaps = vaps;
            WidsProfile = widsProfile;
            ZeroWaitDfs = zeroWaitDfs;
        }
    }
}
