// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Firewall
{
    /// <summary>
    /// Configure IPv6 access proxy. Applies to FortiOS Version `&gt;= 7.0.1`.
    /// 
    /// ## Import
    /// 
    /// Firewall AccessProxy6 can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:firewall/accessproxy6:Accessproxy6 labelname {{name}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:firewall/accessproxy6:Accessproxy6 labelname {{name}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:firewall/accessproxy6:Accessproxy6")]
    public partial class Accessproxy6 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable/disable adding vhost/domain to dnsdb for ztna dox tunnel. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("addVhostDomainToDnsdb")]
        public Output<string> AddVhostDomainToDnsdb { get; private set; } = null!;

        /// <summary>
        /// Set IPv6 API Gateway. The structure of `api_gateway6` block is documented below.
        /// </summary>
        [Output("apiGateway6s")]
        public Output<ImmutableArray<Outputs.Accessproxy6ApiGateway6>> ApiGateway6s { get; private set; } = null!;

        /// <summary>
        /// Set IPv4 API Gateway. The structure of `api_gateway` block is documented below.
        /// </summary>
        [Output("apiGateways")]
        public Output<ImmutableArray<Outputs.Accessproxy6ApiGateway>> ApiGateways { get; private set; } = null!;

        /// <summary>
        /// Enable/disable authentication portal. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("authPortal")]
        public Output<string> AuthPortal { get; private set; } = null!;

        /// <summary>
        /// Virtual host for authentication portal.
        /// </summary>
        [Output("authVirtualHost")]
        public Output<string> AuthVirtualHost { get; private set; } = null!;

        /// <summary>
        /// Enable/disable to request client certificate. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("clientCert")]
        public Output<string> ClientCert { get; private set; } = null!;

        /// <summary>
        /// Decrypted traffic mirror.
        /// </summary>
        [Output("decryptedTrafficMirror")]
        public Output<string> DecryptedTrafficMirror { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Action of an empty client certificate.
        /// </summary>
        [Output("emptyCertAction")]
        public Output<string> EmptyCertAction { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// Maximum supported HTTP versions. default = HTTP2 Valid values: `http1`, `http2`.
        /// </summary>
        [Output("httpSupportedMaxVersion")]
        public Output<string> HttpSupportedMaxVersion { get; private set; } = null!;

        /// <summary>
        /// Enable/disable logging of blocked traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("logBlockedTraffic")]
        public Output<string> LogBlockedTraffic { get; private set; } = null!;

        /// <summary>
        /// Access Proxy name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Enable/disable server pool multiplexing. Share connected server in HTTP, HTTPS, and web-portal api-gateway. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("svrPoolMultiplex")]
        public Output<string> SvrPoolMultiplex { get; private set; } = null!;

        /// <summary>
        /// Maximum number of concurrent requests that servers in server pool could handle (default = unlimited).
        /// </summary>
        [Output("svrPoolServerMaxConcurrentRequest")]
        public Output<int> SvrPoolServerMaxConcurrentRequest { get; private set; } = null!;

        /// <summary>
        /// Maximum number of requests that servers in server pool handle before disconnecting (default = unlimited).
        /// </summary>
        [Output("svrPoolServerMaxRequest")]
        public Output<int> SvrPoolServerMaxRequest { get; private set; } = null!;

        /// <summary>
        /// Time-to-live in the server pool for idle connections to servers.
        /// </summary>
        [Output("svrPoolTtl")]
        public Output<int> SvrPoolTtl { get; private set; } = null!;

        /// <summary>
        /// Enable/disable to detect device type by HTTP user-agent if no client certificate provided. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("userAgentDetect")]
        public Output<string> UserAgentDetect { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// Virtual IP name.
        /// </summary>
        [Output("vip")]
        public Output<string> Vip { get; private set; } = null!;


        /// <summary>
        /// Create a Accessproxy6 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Accessproxy6(string name, Accessproxy6Args? args = null, CustomResourceOptions? options = null)
            : base("fortios:firewall/accessproxy6:Accessproxy6", name, args ?? new Accessproxy6Args(), MakeResourceOptions(options, ""))
        {
        }

        private Accessproxy6(string name, Input<string> id, Accessproxy6State? state = null, CustomResourceOptions? options = null)
            : base("fortios:firewall/accessproxy6:Accessproxy6", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Accessproxy6 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Accessproxy6 Get(string name, Input<string> id, Accessproxy6State? state = null, CustomResourceOptions? options = null)
        {
            return new Accessproxy6(name, id, state, options);
        }
    }

    public sealed class Accessproxy6Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable adding vhost/domain to dnsdb for ztna dox tunnel. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("addVhostDomainToDnsdb")]
        public Input<string>? AddVhostDomainToDnsdb { get; set; }

        [Input("apiGateway6s")]
        private InputList<Inputs.Accessproxy6ApiGateway6Args>? _apiGateway6s;

        /// <summary>
        /// Set IPv6 API Gateway. The structure of `api_gateway6` block is documented below.
        /// </summary>
        public InputList<Inputs.Accessproxy6ApiGateway6Args> ApiGateway6s
        {
            get => _apiGateway6s ?? (_apiGateway6s = new InputList<Inputs.Accessproxy6ApiGateway6Args>());
            set => _apiGateway6s = value;
        }

        [Input("apiGateways")]
        private InputList<Inputs.Accessproxy6ApiGatewayArgs>? _apiGateways;

        /// <summary>
        /// Set IPv4 API Gateway. The structure of `api_gateway` block is documented below.
        /// </summary>
        public InputList<Inputs.Accessproxy6ApiGatewayArgs> ApiGateways
        {
            get => _apiGateways ?? (_apiGateways = new InputList<Inputs.Accessproxy6ApiGatewayArgs>());
            set => _apiGateways = value;
        }

        /// <summary>
        /// Enable/disable authentication portal. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("authPortal")]
        public Input<string>? AuthPortal { get; set; }

        /// <summary>
        /// Virtual host for authentication portal.
        /// </summary>
        [Input("authVirtualHost")]
        public Input<string>? AuthVirtualHost { get; set; }

        /// <summary>
        /// Enable/disable to request client certificate. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("clientCert")]
        public Input<string>? ClientCert { get; set; }

        /// <summary>
        /// Decrypted traffic mirror.
        /// </summary>
        [Input("decryptedTrafficMirror")]
        public Input<string>? DecryptedTrafficMirror { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Action of an empty client certificate.
        /// </summary>
        [Input("emptyCertAction")]
        public Input<string>? EmptyCertAction { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Maximum supported HTTP versions. default = HTTP2 Valid values: `http1`, `http2`.
        /// </summary>
        [Input("httpSupportedMaxVersion")]
        public Input<string>? HttpSupportedMaxVersion { get; set; }

        /// <summary>
        /// Enable/disable logging of blocked traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("logBlockedTraffic")]
        public Input<string>? LogBlockedTraffic { get; set; }

        /// <summary>
        /// Access Proxy name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable/disable server pool multiplexing. Share connected server in HTTP, HTTPS, and web-portal api-gateway. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("svrPoolMultiplex")]
        public Input<string>? SvrPoolMultiplex { get; set; }

        /// <summary>
        /// Maximum number of concurrent requests that servers in server pool could handle (default = unlimited).
        /// </summary>
        [Input("svrPoolServerMaxConcurrentRequest")]
        public Input<int>? SvrPoolServerMaxConcurrentRequest { get; set; }

        /// <summary>
        /// Maximum number of requests that servers in server pool handle before disconnecting (default = unlimited).
        /// </summary>
        [Input("svrPoolServerMaxRequest")]
        public Input<int>? SvrPoolServerMaxRequest { get; set; }

        /// <summary>
        /// Time-to-live in the server pool for idle connections to servers.
        /// </summary>
        [Input("svrPoolTtl")]
        public Input<int>? SvrPoolTtl { get; set; }

        /// <summary>
        /// Enable/disable to detect device type by HTTP user-agent if no client certificate provided. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("userAgentDetect")]
        public Input<string>? UserAgentDetect { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// Virtual IP name.
        /// </summary>
        [Input("vip")]
        public Input<string>? Vip { get; set; }

        public Accessproxy6Args()
        {
        }
        public static new Accessproxy6Args Empty => new Accessproxy6Args();
    }

    public sealed class Accessproxy6State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable adding vhost/domain to dnsdb for ztna dox tunnel. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("addVhostDomainToDnsdb")]
        public Input<string>? AddVhostDomainToDnsdb { get; set; }

        [Input("apiGateway6s")]
        private InputList<Inputs.Accessproxy6ApiGateway6GetArgs>? _apiGateway6s;

        /// <summary>
        /// Set IPv6 API Gateway. The structure of `api_gateway6` block is documented below.
        /// </summary>
        public InputList<Inputs.Accessproxy6ApiGateway6GetArgs> ApiGateway6s
        {
            get => _apiGateway6s ?? (_apiGateway6s = new InputList<Inputs.Accessproxy6ApiGateway6GetArgs>());
            set => _apiGateway6s = value;
        }

        [Input("apiGateways")]
        private InputList<Inputs.Accessproxy6ApiGatewayGetArgs>? _apiGateways;

        /// <summary>
        /// Set IPv4 API Gateway. The structure of `api_gateway` block is documented below.
        /// </summary>
        public InputList<Inputs.Accessproxy6ApiGatewayGetArgs> ApiGateways
        {
            get => _apiGateways ?? (_apiGateways = new InputList<Inputs.Accessproxy6ApiGatewayGetArgs>());
            set => _apiGateways = value;
        }

        /// <summary>
        /// Enable/disable authentication portal. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("authPortal")]
        public Input<string>? AuthPortal { get; set; }

        /// <summary>
        /// Virtual host for authentication portal.
        /// </summary>
        [Input("authVirtualHost")]
        public Input<string>? AuthVirtualHost { get; set; }

        /// <summary>
        /// Enable/disable to request client certificate. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("clientCert")]
        public Input<string>? ClientCert { get; set; }

        /// <summary>
        /// Decrypted traffic mirror.
        /// </summary>
        [Input("decryptedTrafficMirror")]
        public Input<string>? DecryptedTrafficMirror { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Action of an empty client certificate.
        /// </summary>
        [Input("emptyCertAction")]
        public Input<string>? EmptyCertAction { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Maximum supported HTTP versions. default = HTTP2 Valid values: `http1`, `http2`.
        /// </summary>
        [Input("httpSupportedMaxVersion")]
        public Input<string>? HttpSupportedMaxVersion { get; set; }

        /// <summary>
        /// Enable/disable logging of blocked traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("logBlockedTraffic")]
        public Input<string>? LogBlockedTraffic { get; set; }

        /// <summary>
        /// Access Proxy name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable/disable server pool multiplexing. Share connected server in HTTP, HTTPS, and web-portal api-gateway. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("svrPoolMultiplex")]
        public Input<string>? SvrPoolMultiplex { get; set; }

        /// <summary>
        /// Maximum number of concurrent requests that servers in server pool could handle (default = unlimited).
        /// </summary>
        [Input("svrPoolServerMaxConcurrentRequest")]
        public Input<int>? SvrPoolServerMaxConcurrentRequest { get; set; }

        /// <summary>
        /// Maximum number of requests that servers in server pool handle before disconnecting (default = unlimited).
        /// </summary>
        [Input("svrPoolServerMaxRequest")]
        public Input<int>? SvrPoolServerMaxRequest { get; set; }

        /// <summary>
        /// Time-to-live in the server pool for idle connections to servers.
        /// </summary>
        [Input("svrPoolTtl")]
        public Input<int>? SvrPoolTtl { get; set; }

        /// <summary>
        /// Enable/disable to detect device type by HTTP user-agent if no client certificate provided. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("userAgentDetect")]
        public Input<string>? UserAgentDetect { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// Virtual IP name.
        /// </summary>
        [Input("vip")]
        public Input<string>? Vip { get; set; }

        public Accessproxy6State()
        {
        }
        public static new Accessproxy6State Empty => new Accessproxy6State();
    }
}
