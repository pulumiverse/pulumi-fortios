// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Firewall
{
    /// <summary>
    /// Configure decrypted traffic mirror. Applies to FortiOS Version `&gt;= 6.4.0`.
    /// 
    /// ## Import
    /// 
    /// Firewall DecryptedTrafficMirror can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:firewall/decryptedtrafficmirror:Decryptedtrafficmirror labelname {{name}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:firewall/decryptedtrafficmirror:Decryptedtrafficmirror labelname {{name}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:firewall/decryptedtrafficmirror:Decryptedtrafficmirror")]
    public partial class Decryptedtrafficmirror : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set destination MAC address for mirrored traffic.
        /// </summary>
        [Output("dstmac")]
        public Output<string> Dstmac { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// Decrypted traffic mirror interface The structure of `interface` block is documented below.
        /// </summary>
        [Output("interfaces")]
        public Output<ImmutableArray<Outputs.DecryptedtrafficmirrorInterface>> Interfaces { get; private set; } = null!;

        /// <summary>
        /// Name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Source of decrypted traffic to be mirrored. Valid values: `client`, `server`, `both`.
        /// </summary>
        [Output("trafficSource")]
        public Output<string> TrafficSource { get; private set; } = null!;

        /// <summary>
        /// Types of decrypted traffic to be mirrored. Valid values: `ssl`, `ssh`.
        /// </summary>
        [Output("trafficType")]
        public Output<string> TrafficType { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Decryptedtrafficmirror resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Decryptedtrafficmirror(string name, DecryptedtrafficmirrorArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:firewall/decryptedtrafficmirror:Decryptedtrafficmirror", name, args ?? new DecryptedtrafficmirrorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Decryptedtrafficmirror(string name, Input<string> id, DecryptedtrafficmirrorState? state = null, CustomResourceOptions? options = null)
            : base("fortios:firewall/decryptedtrafficmirror:Decryptedtrafficmirror", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Decryptedtrafficmirror resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Decryptedtrafficmirror Get(string name, Input<string> id, DecryptedtrafficmirrorState? state = null, CustomResourceOptions? options = null)
        {
            return new Decryptedtrafficmirror(name, id, state, options);
        }
    }

    public sealed class DecryptedtrafficmirrorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set destination MAC address for mirrored traffic.
        /// </summary>
        [Input("dstmac")]
        public Input<string>? Dstmac { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        [Input("interfaces")]
        private InputList<Inputs.DecryptedtrafficmirrorInterfaceArgs>? _interfaces;

        /// <summary>
        /// Decrypted traffic mirror interface The structure of `interface` block is documented below.
        /// </summary>
        public InputList<Inputs.DecryptedtrafficmirrorInterfaceArgs> Interfaces
        {
            get => _interfaces ?? (_interfaces = new InputList<Inputs.DecryptedtrafficmirrorInterfaceArgs>());
            set => _interfaces = value;
        }

        /// <summary>
        /// Name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Source of decrypted traffic to be mirrored. Valid values: `client`, `server`, `both`.
        /// </summary>
        [Input("trafficSource")]
        public Input<string>? TrafficSource { get; set; }

        /// <summary>
        /// Types of decrypted traffic to be mirrored. Valid values: `ssl`, `ssh`.
        /// </summary>
        [Input("trafficType")]
        public Input<string>? TrafficType { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public DecryptedtrafficmirrorArgs()
        {
        }
        public static new DecryptedtrafficmirrorArgs Empty => new DecryptedtrafficmirrorArgs();
    }

    public sealed class DecryptedtrafficmirrorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set destination MAC address for mirrored traffic.
        /// </summary>
        [Input("dstmac")]
        public Input<string>? Dstmac { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        [Input("interfaces")]
        private InputList<Inputs.DecryptedtrafficmirrorInterfaceGetArgs>? _interfaces;

        /// <summary>
        /// Decrypted traffic mirror interface The structure of `interface` block is documented below.
        /// </summary>
        public InputList<Inputs.DecryptedtrafficmirrorInterfaceGetArgs> Interfaces
        {
            get => _interfaces ?? (_interfaces = new InputList<Inputs.DecryptedtrafficmirrorInterfaceGetArgs>());
            set => _interfaces = value;
        }

        /// <summary>
        /// Name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Source of decrypted traffic to be mirrored. Valid values: `client`, `server`, `both`.
        /// </summary>
        [Input("trafficSource")]
        public Input<string>? TrafficSource { get; set; }

        /// <summary>
        /// Types of decrypted traffic to be mirrored. Valid values: `ssl`, `ssh`.
        /// </summary>
        [Input("trafficType")]
        public Input<string>? TrafficType { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public DecryptedtrafficmirrorState()
        {
        }
        public static new DecryptedtrafficmirrorState Empty => new DecryptedtrafficmirrorState();
    }
}
