// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Firewall
{
    /// <summary>
    /// Configure on-demand packet sniffer. Applies to FortiOS Version `&gt;= 7.4.4`.
    /// 
    /// ## Import
    /// 
    /// Firewall OnDemandSniffer can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:firewall/ondemandsniffer:Ondemandsniffer labelname {{name}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:firewall/ondemandsniffer:Ondemandsniffer labelname {{name}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:firewall/ondemandsniffer:Ondemandsniffer")]
    public partial class Ondemandsniffer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Advanced freeform filter that will be used over existing filter settings if set. Can only be used by super admin.
        /// </summary>
        [Output("advancedFilter")]
        public Output<string?> AdvancedFilter { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwise, conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// IPv4 or IPv6 hosts to filter in this traffic sniffer. The structure of `hosts` block is documented below.
        /// </summary>
        [Output("hosts")]
        public Output<ImmutableArray<Outputs.OndemandsnifferHost>> Hosts { get; private set; } = null!;

        /// <summary>
        /// Interface name that on-demand packet sniffer will take place.
        /// </summary>
        [Output("interface")]
        public Output<string> Interface { get; private set; } = null!;

        /// <summary>
        /// Maximum number of packets to capture per on-demand packet sniffer.
        /// </summary>
        [Output("maxPacketCount")]
        public Output<int> MaxPacketCount { get; private set; } = null!;

        /// <summary>
        /// On-demand packet sniffer name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Include non-IP packets. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("nonIpPacket")]
        public Output<string> NonIpPacket { get; private set; } = null!;

        /// <summary>
        /// Ports to filter for in this traffic sniffer. The structure of `ports` block is documented below.
        /// </summary>
        [Output("ports")]
        public Output<ImmutableArray<Outputs.OndemandsnifferPort>> Ports { get; private set; } = null!;

        /// <summary>
        /// Protocols to filter in this traffic sniffer. The structure of `protocols` block is documented below.
        /// </summary>
        [Output("protocols")]
        public Output<ImmutableArray<Outputs.OndemandsnifferProtocol>> Protocols { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Ondemandsniffer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Ondemandsniffer(string name, OndemandsnifferArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:firewall/ondemandsniffer:Ondemandsniffer", name, args ?? new OndemandsnifferArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Ondemandsniffer(string name, Input<string> id, OndemandsnifferState? state = null, CustomResourceOptions? options = null)
            : base("fortios:firewall/ondemandsniffer:Ondemandsniffer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Ondemandsniffer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Ondemandsniffer Get(string name, Input<string> id, OndemandsnifferState? state = null, CustomResourceOptions? options = null)
        {
            return new Ondemandsniffer(name, id, state, options);
        }
    }

    public sealed class OndemandsnifferArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Advanced freeform filter that will be used over existing filter settings if set. Can only be used by super admin.
        /// </summary>
        [Input("advancedFilter")]
        public Input<string>? AdvancedFilter { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwise, conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        [Input("hosts")]
        private InputList<Inputs.OndemandsnifferHostArgs>? _hosts;

        /// <summary>
        /// IPv4 or IPv6 hosts to filter in this traffic sniffer. The structure of `hosts` block is documented below.
        /// </summary>
        public InputList<Inputs.OndemandsnifferHostArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.OndemandsnifferHostArgs>());
            set => _hosts = value;
        }

        /// <summary>
        /// Interface name that on-demand packet sniffer will take place.
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// Maximum number of packets to capture per on-demand packet sniffer.
        /// </summary>
        [Input("maxPacketCount")]
        public Input<int>? MaxPacketCount { get; set; }

        /// <summary>
        /// On-demand packet sniffer name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Include non-IP packets. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("nonIpPacket")]
        public Input<string>? NonIpPacket { get; set; }

        [Input("ports")]
        private InputList<Inputs.OndemandsnifferPortArgs>? _ports;

        /// <summary>
        /// Ports to filter for in this traffic sniffer. The structure of `ports` block is documented below.
        /// </summary>
        public InputList<Inputs.OndemandsnifferPortArgs> Ports
        {
            get => _ports ?? (_ports = new InputList<Inputs.OndemandsnifferPortArgs>());
            set => _ports = value;
        }

        [Input("protocols")]
        private InputList<Inputs.OndemandsnifferProtocolArgs>? _protocols;

        /// <summary>
        /// Protocols to filter in this traffic sniffer. The structure of `protocols` block is documented below.
        /// </summary>
        public InputList<Inputs.OndemandsnifferProtocolArgs> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<Inputs.OndemandsnifferProtocolArgs>());
            set => _protocols = value;
        }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public OndemandsnifferArgs()
        {
        }
        public static new OndemandsnifferArgs Empty => new OndemandsnifferArgs();
    }

    public sealed class OndemandsnifferState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Advanced freeform filter that will be used over existing filter settings if set. Can only be used by super admin.
        /// </summary>
        [Input("advancedFilter")]
        public Input<string>? AdvancedFilter { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwise, conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        [Input("hosts")]
        private InputList<Inputs.OndemandsnifferHostGetArgs>? _hosts;

        /// <summary>
        /// IPv4 or IPv6 hosts to filter in this traffic sniffer. The structure of `hosts` block is documented below.
        /// </summary>
        public InputList<Inputs.OndemandsnifferHostGetArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.OndemandsnifferHostGetArgs>());
            set => _hosts = value;
        }

        /// <summary>
        /// Interface name that on-demand packet sniffer will take place.
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// Maximum number of packets to capture per on-demand packet sniffer.
        /// </summary>
        [Input("maxPacketCount")]
        public Input<int>? MaxPacketCount { get; set; }

        /// <summary>
        /// On-demand packet sniffer name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Include non-IP packets. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("nonIpPacket")]
        public Input<string>? NonIpPacket { get; set; }

        [Input("ports")]
        private InputList<Inputs.OndemandsnifferPortGetArgs>? _ports;

        /// <summary>
        /// Ports to filter for in this traffic sniffer. The structure of `ports` block is documented below.
        /// </summary>
        public InputList<Inputs.OndemandsnifferPortGetArgs> Ports
        {
            get => _ports ?? (_ports = new InputList<Inputs.OndemandsnifferPortGetArgs>());
            set => _ports = value;
        }

        [Input("protocols")]
        private InputList<Inputs.OndemandsnifferProtocolGetArgs>? _protocols;

        /// <summary>
        /// Protocols to filter in this traffic sniffer. The structure of `protocols` block is documented below.
        /// </summary>
        public InputList<Inputs.OndemandsnifferProtocolGetArgs> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<Inputs.OndemandsnifferProtocolGetArgs>());
            set => _protocols = value;
        }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public OndemandsnifferState()
        {
        }
        public static new OndemandsnifferState Empty => new OndemandsnifferState();
    }
}
