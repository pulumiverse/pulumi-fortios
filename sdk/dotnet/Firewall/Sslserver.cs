// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Firewall
{
    /// <summary>
    /// Configure SSL servers.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.Firewall.Sslserver("trname", new()
    ///     {
    ///         AddHeaderXForwardedProto = "enable",
    ///         Ip = "1.1.1.1",
    ///         MappedPort = 2234,
    ///         Port = 32321,
    ///         SslAlgorithm = "high",
    ///         SslCert = "Fortinet_CA_SSL",
    ///         SslClientRenegotiation = "allow",
    ///         SslDhBits = "2048",
    ///         SslMaxVersion = "tls-1.2",
    ///         SslMinVersion = "tls-1.1",
    ///         SslMode = "half",
    ///         SslSendEmptyFrags = "enable",
    ///         UrlRewrite = "disable",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Firewall SslServer can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:firewall/sslserver:Sslserver labelname {{name}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:firewall/sslserver:Sslserver labelname {{name}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:firewall/sslserver:Sslserver")]
    public partial class Sslserver : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable/disable adding an X-Forwarded-Proto header to forwarded requests. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("addHeaderXForwardedProto")]
        public Output<string> AddHeaderXForwardedProto { get; private set; } = null!;

        /// <summary>
        /// IPv4 address of the SSL server.
        /// </summary>
        [Output("ip")]
        public Output<string> Ip { get; private set; } = null!;

        /// <summary>
        /// Mapped server service port (1 - 65535, default = 80).
        /// </summary>
        [Output("mappedPort")]
        public Output<int> MappedPort { get; private set; } = null!;

        /// <summary>
        /// Server name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Server service port (1 - 65535, default = 443).
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// Relative strength of encryption algorithms accepted in negotiation. Valid values: `high`, `medium`, `low`.
        /// </summary>
        [Output("sslAlgorithm")]
        public Output<string> SslAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Name of certificate for SSL connections to this server. On FortiOS versions 6.2.0-7.2.6: default = "Fortinet_CA_SSL". On FortiOS versions 7.4.0-7.4.1: default = "Fortinet_SSL".
        /// </summary>
        [Output("sslCert")]
        public Output<string> SslCert { get; private set; } = null!;

        /// <summary>
        /// Allow or block client renegotiation by server. Valid values: `allow`, `deny`, `secure`.
        /// </summary>
        [Output("sslClientRenegotiation")]
        public Output<string> SslClientRenegotiation { get; private set; } = null!;

        /// <summary>
        /// Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
        /// </summary>
        [Output("sslDhBits")]
        public Output<string> SslDhBits { get; private set; } = null!;

        /// <summary>
        /// Highest SSL/TLS version to negotiate.
        /// </summary>
        [Output("sslMaxVersion")]
        public Output<string> SslMaxVersion { get; private set; } = null!;

        /// <summary>
        /// Lowest SSL/TLS version to negotiate.
        /// </summary>
        [Output("sslMinVersion")]
        public Output<string> SslMinVersion { get; private set; } = null!;

        /// <summary>
        /// SSL/TLS mode for encryption and decryption of traffic. Valid values: `half`, `full`.
        /// </summary>
        [Output("sslMode")]
        public Output<string> SslMode { get; private set; } = null!;

        /// <summary>
        /// Enable/disable sending empty fragments to avoid attack on CBC IV. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("sslSendEmptyFrags")]
        public Output<string> SslSendEmptyFrags { get; private set; } = null!;

        /// <summary>
        /// Enable/disable rewriting the URL. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("urlRewrite")]
        public Output<string> UrlRewrite { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Sslserver resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Sslserver(string name, SslserverArgs args, CustomResourceOptions? options = null)
            : base("fortios:firewall/sslserver:Sslserver", name, args ?? new SslserverArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Sslserver(string name, Input<string> id, SslserverState? state = null, CustomResourceOptions? options = null)
            : base("fortios:firewall/sslserver:Sslserver", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Sslserver resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Sslserver Get(string name, Input<string> id, SslserverState? state = null, CustomResourceOptions? options = null)
        {
            return new Sslserver(name, id, state, options);
        }
    }

    public sealed class SslserverArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable adding an X-Forwarded-Proto header to forwarded requests. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("addHeaderXForwardedProto")]
        public Input<string>? AddHeaderXForwardedProto { get; set; }

        /// <summary>
        /// IPv4 address of the SSL server.
        /// </summary>
        [Input("ip", required: true)]
        public Input<string> Ip { get; set; } = null!;

        /// <summary>
        /// Mapped server service port (1 - 65535, default = 80).
        /// </summary>
        [Input("mappedPort")]
        public Input<int>? MappedPort { get; set; }

        /// <summary>
        /// Server name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Server service port (1 - 65535, default = 443).
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// Relative strength of encryption algorithms accepted in negotiation. Valid values: `high`, `medium`, `low`.
        /// </summary>
        [Input("sslAlgorithm")]
        public Input<string>? SslAlgorithm { get; set; }

        /// <summary>
        /// Name of certificate for SSL connections to this server. On FortiOS versions 6.2.0-7.2.6: default = "Fortinet_CA_SSL". On FortiOS versions 7.4.0-7.4.1: default = "Fortinet_SSL".
        /// </summary>
        [Input("sslCert", required: true)]
        public Input<string> SslCert { get; set; } = null!;

        /// <summary>
        /// Allow or block client renegotiation by server. Valid values: `allow`, `deny`, `secure`.
        /// </summary>
        [Input("sslClientRenegotiation")]
        public Input<string>? SslClientRenegotiation { get; set; }

        /// <summary>
        /// Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
        /// </summary>
        [Input("sslDhBits")]
        public Input<string>? SslDhBits { get; set; }

        /// <summary>
        /// Highest SSL/TLS version to negotiate.
        /// </summary>
        [Input("sslMaxVersion")]
        public Input<string>? SslMaxVersion { get; set; }

        /// <summary>
        /// Lowest SSL/TLS version to negotiate.
        /// </summary>
        [Input("sslMinVersion")]
        public Input<string>? SslMinVersion { get; set; }

        /// <summary>
        /// SSL/TLS mode for encryption and decryption of traffic. Valid values: `half`, `full`.
        /// </summary>
        [Input("sslMode")]
        public Input<string>? SslMode { get; set; }

        /// <summary>
        /// Enable/disable sending empty fragments to avoid attack on CBC IV. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("sslSendEmptyFrags")]
        public Input<string>? SslSendEmptyFrags { get; set; }

        /// <summary>
        /// Enable/disable rewriting the URL. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("urlRewrite")]
        public Input<string>? UrlRewrite { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public SslserverArgs()
        {
        }
        public static new SslserverArgs Empty => new SslserverArgs();
    }

    public sealed class SslserverState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable adding an X-Forwarded-Proto header to forwarded requests. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("addHeaderXForwardedProto")]
        public Input<string>? AddHeaderXForwardedProto { get; set; }

        /// <summary>
        /// IPv4 address of the SSL server.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// Mapped server service port (1 - 65535, default = 80).
        /// </summary>
        [Input("mappedPort")]
        public Input<int>? MappedPort { get; set; }

        /// <summary>
        /// Server name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Server service port (1 - 65535, default = 443).
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Relative strength of encryption algorithms accepted in negotiation. Valid values: `high`, `medium`, `low`.
        /// </summary>
        [Input("sslAlgorithm")]
        public Input<string>? SslAlgorithm { get; set; }

        /// <summary>
        /// Name of certificate for SSL connections to this server. On FortiOS versions 6.2.0-7.2.6: default = "Fortinet_CA_SSL". On FortiOS versions 7.4.0-7.4.1: default = "Fortinet_SSL".
        /// </summary>
        [Input("sslCert")]
        public Input<string>? SslCert { get; set; }

        /// <summary>
        /// Allow or block client renegotiation by server. Valid values: `allow`, `deny`, `secure`.
        /// </summary>
        [Input("sslClientRenegotiation")]
        public Input<string>? SslClientRenegotiation { get; set; }

        /// <summary>
        /// Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
        /// </summary>
        [Input("sslDhBits")]
        public Input<string>? SslDhBits { get; set; }

        /// <summary>
        /// Highest SSL/TLS version to negotiate.
        /// </summary>
        [Input("sslMaxVersion")]
        public Input<string>? SslMaxVersion { get; set; }

        /// <summary>
        /// Lowest SSL/TLS version to negotiate.
        /// </summary>
        [Input("sslMinVersion")]
        public Input<string>? SslMinVersion { get; set; }

        /// <summary>
        /// SSL/TLS mode for encryption and decryption of traffic. Valid values: `half`, `full`.
        /// </summary>
        [Input("sslMode")]
        public Input<string>? SslMode { get; set; }

        /// <summary>
        /// Enable/disable sending empty fragments to avoid attack on CBC IV. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("sslSendEmptyFrags")]
        public Input<string>? SslSendEmptyFrags { get; set; }

        /// <summary>
        /// Enable/disable rewriting the URL. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("urlRewrite")]
        public Input<string>? UrlRewrite { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public SslserverState()
        {
        }
        public static new SslserverState Empty => new SslserverState();
    }
}
