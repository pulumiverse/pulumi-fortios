// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Firewall
{
    public static class GetCentralsnatmap
    {
        /// <summary>
        /// Use this data source to get information on an fortios firewall centralsnatmap
        /// </summary>
        public static Task<GetCentralsnatmapResult> InvokeAsync(GetCentralsnatmapArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCentralsnatmapResult>("fortios:firewall/getCentralsnatmap:getCentralsnatmap", args ?? new GetCentralsnatmapArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information on an fortios firewall centralsnatmap
        /// </summary>
        public static Output<GetCentralsnatmapResult> Invoke(GetCentralsnatmapInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCentralsnatmapResult>("fortios:firewall/getCentralsnatmap:getCentralsnatmap", args ?? new GetCentralsnatmapInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCentralsnatmapArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the policyid of the desired firewall centralsnatmap.
        /// </summary>
        [Input("policyid", required: true)]
        public int Policyid { get; set; }

        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public string? Vdomparam { get; set; }

        public GetCentralsnatmapArgs()
        {
        }
        public static new GetCentralsnatmapArgs Empty => new GetCentralsnatmapArgs();
    }

    public sealed class GetCentralsnatmapInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the policyid of the desired firewall centralsnatmap.
        /// </summary>
        [Input("policyid", required: true)]
        public Input<int> Policyid { get; set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public GetCentralsnatmapInvokeArgs()
        {
        }
        public static new GetCentralsnatmapInvokeArgs Empty => new GetCentralsnatmapInvokeArgs();
    }


    [OutputType]
    public sealed class GetCentralsnatmapResult
    {
        /// <summary>
        /// Comment.
        /// </summary>
        public readonly string Comments;
        /// <summary>
        /// IPv6 Destination address. The structure of `dst_addr6` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCentralsnatmapDstAddr6Result> DstAddr6s;
        /// <summary>
        /// Destination address name from available addresses. The structure of `dst_addr` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCentralsnatmapDstAddrResult> DstAddrs;
        /// <summary>
        /// Destination port or port range (1 to 65535, 0 means any port).
        /// </summary>
        public readonly string DstPort;
        /// <summary>
        /// Destination interface name from available interfaces. The structure of `dstintf` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCentralsnatmapDstintfResult> Dstintfs;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Enable/disable source NAT.
        /// </summary>
        public readonly string Nat;
        /// <summary>
        /// Enable/disable NAT46.
        /// </summary>
        public readonly string Nat46;
        /// <summary>
        /// Enable/disable NAT64.
        /// </summary>
        public readonly string Nat64;
        /// <summary>
        /// IPv6 pools to be used for source NAT. The structure of `nat_ippool6` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCentralsnatmapNatIppool6Result> NatIppool6s;
        /// <summary>
        /// Name of the IP pools to be used to translate addresses from available IP Pools. The structure of `nat_ippool` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCentralsnatmapNatIppoolResult> NatIppools;
        /// <summary>
        /// Translated port or port range (0 to 65535).
        /// </summary>
        public readonly string NatPort;
        /// <summary>
        /// IPv6 Original address. The structure of `orig_addr6` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCentralsnatmapOrigAddr6Result> OrigAddr6s;
        /// <summary>
        /// Original address. The structure of `orig_addr` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCentralsnatmapOrigAddrResult> OrigAddrs;
        /// <summary>
        /// Original TCP port (0 to 65535).
        /// </summary>
        public readonly string OrigPort;
        /// <summary>
        /// Policy ID.
        /// </summary>
        public readonly int Policyid;
        /// <summary>
        /// Integer value for the protocol type (0 - 255).
        /// </summary>
        public readonly int Protocol;
        /// <summary>
        /// Source interface name from available interfaces. The structure of `srcintf` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCentralsnatmapSrcintfResult> Srcintfs;
        /// <summary>
        /// Enable/disable the active status of this policy.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// IPv4/IPv6 source NAT.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        /// </summary>
        public readonly string Uuid;
        public readonly string? Vdomparam;

        [OutputConstructor]
        private GetCentralsnatmapResult(
            string comments,

            ImmutableArray<Outputs.GetCentralsnatmapDstAddr6Result> dstAddr6s,

            ImmutableArray<Outputs.GetCentralsnatmapDstAddrResult> dstAddrs,

            string dstPort,

            ImmutableArray<Outputs.GetCentralsnatmapDstintfResult> dstintfs,

            string id,

            string nat,

            string nat46,

            string nat64,

            ImmutableArray<Outputs.GetCentralsnatmapNatIppool6Result> natIppool6s,

            ImmutableArray<Outputs.GetCentralsnatmapNatIppoolResult> natIppools,

            string natPort,

            ImmutableArray<Outputs.GetCentralsnatmapOrigAddr6Result> origAddr6s,

            ImmutableArray<Outputs.GetCentralsnatmapOrigAddrResult> origAddrs,

            string origPort,

            int policyid,

            int protocol,

            ImmutableArray<Outputs.GetCentralsnatmapSrcintfResult> srcintfs,

            string status,

            string type,

            string uuid,

            string? vdomparam)
        {
            Comments = comments;
            DstAddr6s = dstAddr6s;
            DstAddrs = dstAddrs;
            DstPort = dstPort;
            Dstintfs = dstintfs;
            Id = id;
            Nat = nat;
            Nat46 = nat46;
            Nat64 = nat64;
            NatIppool6s = natIppool6s;
            NatIppools = natIppools;
            NatPort = natPort;
            OrigAddr6s = origAddr6s;
            OrigAddrs = origAddrs;
            OrigPort = origPort;
            Policyid = policyid;
            Protocol = protocol;
            Srcintfs = srcintfs;
            Status = status;
            Type = type;
            Uuid = uuid;
            Vdomparam = vdomparam;
        }
    }
}
