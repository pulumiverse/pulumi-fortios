// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Firewall
{
    /// <summary>
    /// Configure proxy policies.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.Firewall.Proxypolicy("trname", new()
    ///     {
    ///         Action = "deny",
    ///         Disclaimer = "disable",
    ///         Dstaddrs = new[]
    ///         {
    ///             new Fortios.Firewall.Inputs.ProxypolicyDstaddrArgs
    ///             {
    ///                 Name = "all",
    ///             },
    ///         },
    ///         DstaddrNegate = "disable",
    ///         Dstintfs = new[]
    ///         {
    ///             new Fortios.Firewall.Inputs.ProxypolicyDstintfArgs
    ///             {
    ///                 Name = "port4",
    ///             },
    ///         },
    ///         HttpTunnelAuth = "disable",
    ///         InternetService = "disable",
    ///         InternetServiceNegate = "disable",
    ///         Logtraffic = "disable",
    ///         LogtrafficStart = "disable",
    ///         Policyid = 1,
    ///         ProfileProtocolOptions = "default",
    ///         ProfileType = "single",
    ///         Proxy = "transparent-web",
    ///         ScanBotnetConnections = "disable",
    ///         Schedule = "always",
    ///         Services = new[]
    ///         {
    ///             new Fortios.Firewall.Inputs.ProxypolicyServiceArgs
    ///             {
    ///                 Name = "webproxy",
    ///             },
    ///         },
    ///         ServiceNegate = "disable",
    ///         Srcaddrs = new[]
    ///         {
    ///             new Fortios.Firewall.Inputs.ProxypolicySrcaddrArgs
    ///             {
    ///                 Name = "all",
    ///             },
    ///         },
    ///         SrcaddrNegate = "disable",
    ///         Srcintfs = new[]
    ///         {
    ///             new Fortios.Firewall.Inputs.ProxypolicySrcintfArgs
    ///             {
    ///                 Name = "port3",
    ///             },
    ///         },
    ///         Status = "enable",
    ///         Transparent = "disable",
    ///         UtmStatus = "disable",
    ///         Webcache = "disable",
    ///         WebcacheHttps = "disable",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Firewall ProxyPolicy can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:firewall/proxypolicy:Proxypolicy labelname {{policyid}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:firewall/proxypolicy:Proxypolicy labelname {{policyid}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:firewall/proxypolicy:Proxypolicy")]
    public partial class Proxypolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// IPv4 access proxy. The structure of `access_proxy` block is documented below.
        /// </summary>
        [Output("accessProxies")]
        public Output<ImmutableArray<Outputs.ProxypolicyAccessProxy>> AccessProxies { get; private set; } = null!;

        /// <summary>
        /// IPv6 access proxy. The structure of `access_proxy6` block is documented below.
        /// </summary>
        [Output("accessProxy6s")]
        public Output<ImmutableArray<Outputs.ProxypolicyAccessProxy6>> AccessProxy6s { get; private set; } = null!;

        /// <summary>
        /// Accept or deny traffic matching the policy parameters. Valid values: `accept`, `deny`, `redirect`.
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// Name of an existing Application list.
        /// </summary>
        [Output("applicationList")]
        public Output<string> ApplicationList { get; private set; } = null!;

        /// <summary>
        /// Name of an existing Antivirus profile.
        /// </summary>
        [Output("avProfile")]
        public Output<string> AvProfile { get; private set; } = null!;

        /// <summary>
        /// Enable/disable block notification. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("blockNotification")]
        public Output<string> BlockNotification { get; private set; } = null!;

        /// <summary>
        /// Name of an existing CASB profile.
        /// </summary>
        [Output("casbProfile")]
        public Output<string> CasbProfile { get; private set; } = null!;

        /// <summary>
        /// Name of an existing CIFS profile.
        /// </summary>
        [Output("cifsProfile")]
        public Output<string> CifsProfile { get; private set; } = null!;

        /// <summary>
        /// Optional comments.
        /// </summary>
        [Output("comments")]
        public Output<string?> Comments { get; private set; } = null!;

        /// <summary>
        /// Decrypted traffic mirror.
        /// </summary>
        [Output("decryptedTrafficMirror")]
        public Output<string> DecryptedTrafficMirror { get; private set; } = null!;

        /// <summary>
        /// Enable/disable detection of HTTPS in HTTP request. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("detectHttpsInHttpRequest")]
        public Output<string> DetectHttpsInHttpRequest { get; private set; } = null!;

        /// <summary>
        /// When enabled, the ownership enforcement will be done at policy level. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("deviceOwnership")]
        public Output<string> DeviceOwnership { get; private set; } = null!;

        /// <summary>
        /// Name of an existing Diameter filter profile.
        /// </summary>
        [Output("diameterFilterProfile")]
        public Output<string> DiameterFilterProfile { get; private set; } = null!;

        /// <summary>
        /// Web proxy disclaimer setting: by domain, policy, or user. Valid values: `disable`, `domain`, `policy`, `user`.
        /// </summary>
        [Output("disclaimer")]
        public Output<string> Disclaimer { get; private set; } = null!;

        /// <summary>
        /// Name of an existing DLP profile.
        /// </summary>
        [Output("dlpProfile")]
        public Output<string> DlpProfile { get; private set; } = null!;

        /// <summary>
        /// Name of an existing DLP sensor.
        /// </summary>
        [Output("dlpSensor")]
        public Output<string> DlpSensor { get; private set; } = null!;

        /// <summary>
        /// IPv6 destination address objects. The structure of `dstaddr6` block is documented below.
        /// </summary>
        [Output("dstaddr6s")]
        public Output<ImmutableArray<Outputs.ProxypolicyDstaddr6>> Dstaddr6s { get; private set; } = null!;

        /// <summary>
        /// When enabled, destination addresses match against any address EXCEPT the specified destination addresses. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("dstaddrNegate")]
        public Output<string> DstaddrNegate { get; private set; } = null!;

        /// <summary>
        /// Destination address objects. The structure of `dstaddr` block is documented below.
        /// </summary>
        [Output("dstaddrs")]
        public Output<ImmutableArray<Outputs.ProxypolicyDstaddr>> Dstaddrs { get; private set; } = null!;

        /// <summary>
        /// Destination interface names. The structure of `dstintf` block is documented below.
        /// </summary>
        [Output("dstintfs")]
        public Output<ImmutableArray<Outputs.ProxypolicyDstintf>> Dstintfs { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Name of an existing email filter profile.
        /// </summary>
        [Output("emailfilterProfile")]
        public Output<string> EmailfilterProfile { get; private set; } = null!;

        /// <summary>
        /// Name of an existing file-filter profile.
        /// </summary>
        [Output("fileFilterProfile")]
        public Output<string> FileFilterProfile { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// Global web-based manager visible label.
        /// </summary>
        [Output("globalLabel")]
        public Output<string> GlobalLabel { get; private set; } = null!;

        /// <summary>
        /// Names of group objects. The structure of `groups` block is documented below.
        /// </summary>
        [Output("groups")]
        public Output<ImmutableArray<Outputs.ProxypolicyGroup>> Groups { get; private set; } = null!;

        /// <summary>
        /// Enable/disable HTTP tunnel authentication. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("httpTunnelAuth")]
        public Output<string> HttpTunnelAuth { get; private set; } = null!;

        /// <summary>
        /// Name of an existing ICAP profile.
        /// </summary>
        [Output("icapProfile")]
        public Output<string> IcapProfile { get; private set; } = null!;

        /// <summary>
        /// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("internetService")]
        public Output<string> InternetService { get; private set; } = null!;

        /// <summary>
        /// Enable/disable use of Internet Services IPv6 for this policy. If enabled, destination IPv6 address and service are not used. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("internetService6")]
        public Output<string> InternetService6 { get; private set; } = null!;

        /// <summary>
        /// Custom Internet Service IPv6 group name. The structure of `internet_service6_custom_group` block is documented below.
        /// </summary>
        [Output("internetService6CustomGroups")]
        public Output<ImmutableArray<Outputs.ProxypolicyInternetService6CustomGroup>> InternetService6CustomGroups { get; private set; } = null!;

        /// <summary>
        /// Custom Internet Service IPv6 name. The structure of `internet_service6_custom` block is documented below.
        /// </summary>
        [Output("internetService6Customs")]
        public Output<ImmutableArray<Outputs.ProxypolicyInternetService6Custom>> InternetService6Customs { get; private set; } = null!;

        /// <summary>
        /// Internet Service IPv6 group name. The structure of `internet_service6_group` block is documented below.
        /// </summary>
        [Output("internetService6Groups")]
        public Output<ImmutableArray<Outputs.ProxypolicyInternetService6Group>> InternetService6Groups { get; private set; } = null!;

        /// <summary>
        /// Internet Service IPv6 name. The structure of `internet_service6_name` block is documented below.
        /// </summary>
        [Output("internetService6Names")]
        public Output<ImmutableArray<Outputs.ProxypolicyInternetService6Name>> InternetService6Names { get; private set; } = null!;

        /// <summary>
        /// When enabled, Internet Services match against any internet service IPv6 EXCEPT the selected Internet Service IPv6. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("internetService6Negate")]
        public Output<string> InternetService6Negate { get; private set; } = null!;

        /// <summary>
        /// Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        /// </summary>
        [Output("internetServiceCustomGroups")]
        public Output<ImmutableArray<Outputs.ProxypolicyInternetServiceCustomGroup>> InternetServiceCustomGroups { get; private set; } = null!;

        /// <summary>
        /// Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        /// </summary>
        [Output("internetServiceCustoms")]
        public Output<ImmutableArray<Outputs.ProxypolicyInternetServiceCustom>> InternetServiceCustoms { get; private set; } = null!;

        /// <summary>
        /// Internet Service group name. The structure of `internet_service_group` block is documented below.
        /// </summary>
        [Output("internetServiceGroups")]
        public Output<ImmutableArray<Outputs.ProxypolicyInternetServiceGroup>> InternetServiceGroups { get; private set; } = null!;

        /// <summary>
        /// Internet Service ID. The structure of `internet_service_id` block is documented below.
        /// </summary>
        [Output("internetServiceIds")]
        public Output<ImmutableArray<Outputs.ProxypolicyInternetServiceId>> InternetServiceIds { get; private set; } = null!;

        /// <summary>
        /// Internet Service name. The structure of `internet_service_name` block is documented below.
        /// </summary>
        [Output("internetServiceNames")]
        public Output<ImmutableArray<Outputs.ProxypolicyInternetServiceName>> InternetServiceNames { get; private set; } = null!;

        /// <summary>
        /// When enabled, Internet Services match against any internet service EXCEPT the selected Internet Service. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("internetServiceNegate")]
        public Output<string> InternetServiceNegate { get; private set; } = null!;

        /// <summary>
        /// Name of an existing IPS sensor.
        /// </summary>
        [Output("ipsSensor")]
        public Output<string> IpsSensor { get; private set; } = null!;

        /// <summary>
        /// Name of an existing VoIP (ips) profile.
        /// </summary>
        [Output("ipsVoipFilter")]
        public Output<string> IpsVoipFilter { get; private set; } = null!;

        /// <summary>
        /// VDOM-specific GUI visible label.
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// Enable/disable logging traffic through the policy. Valid values: `all`, `utm`, `disable`.
        /// </summary>
        [Output("logtraffic")]
        public Output<string> Logtraffic { get; private set; } = null!;

        /// <summary>
        /// Enable/disable policy log traffic start. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("logtrafficStart")]
        public Output<string> LogtrafficStart { get; private set; } = null!;

        /// <summary>
        /// Policy name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Output("policyid")]
        public Output<int> Policyid { get; private set; } = null!;

        /// <summary>
        /// Name of IP pool object. The structure of `poolname` block is documented below.
        /// </summary>
        [Output("poolnames")]
        public Output<ImmutableArray<Outputs.ProxypolicyPoolname>> Poolnames { get; private set; } = null!;

        /// <summary>
        /// Name of profile group.
        /// </summary>
        [Output("profileGroup")]
        public Output<string> ProfileGroup { get; private set; } = null!;

        /// <summary>
        /// Name of an existing Protocol options profile.
        /// </summary>
        [Output("profileProtocolOptions")]
        public Output<string> ProfileProtocolOptions { get; private set; } = null!;

        /// <summary>
        /// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        /// </summary>
        [Output("profileType")]
        public Output<string> ProfileType { get; private set; } = null!;

        /// <summary>
        /// Type of explicit proxy.
        /// </summary>
        [Output("proxy")]
        public Output<string> Proxy { get; private set; } = null!;

        /// <summary>
        /// Redirect URL for further explicit web proxy processing.
        /// </summary>
        [Output("redirectUrl")]
        public Output<string?> RedirectUrl { get; private set; } = null!;

        /// <summary>
        /// Authentication replacement message override group.
        /// </summary>
        [Output("replacemsgOverrideGroup")]
        public Output<string> ReplacemsgOverrideGroup { get; private set; } = null!;

        /// <summary>
        /// Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        /// </summary>
        [Output("scanBotnetConnections")]
        public Output<string> ScanBotnetConnections { get; private set; } = null!;

        /// <summary>
        /// Name of schedule object.
        /// </summary>
        [Output("schedule")]
        public Output<string> Schedule { get; private set; } = null!;

        /// <summary>
        /// Name of an existing SCTP filter profile.
        /// </summary>
        [Output("sctpFilterProfile")]
        public Output<string> SctpFilterProfile { get; private set; } = null!;

        /// <summary>
        /// When enabled, services match against any service EXCEPT the specified destination services. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("serviceNegate")]
        public Output<string> ServiceNegate { get; private set; } = null!;

        /// <summary>
        /// Name of service objects. The structure of `service` block is documented below.
        /// </summary>
        [Output("services")]
        public Output<ImmutableArray<Outputs.ProxypolicyService>> Services { get; private set; } = null!;

        /// <summary>
        /// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        /// </summary>
        [Output("sessionTtl")]
        public Output<int> SessionTtl { get; private set; } = null!;

        /// <summary>
        /// Name of an existing Spam filter profile.
        /// </summary>
        [Output("spamfilterProfile")]
        public Output<string> SpamfilterProfile { get; private set; } = null!;

        /// <summary>
        /// IPv6 source address objects. The structure of `srcaddr6` block is documented below.
        /// </summary>
        [Output("srcaddr6s")]
        public Output<ImmutableArray<Outputs.ProxypolicySrcaddr6>> Srcaddr6s { get; private set; } = null!;

        /// <summary>
        /// When enabled, source addresses match against any address EXCEPT the specified source addresses. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("srcaddrNegate")]
        public Output<string> SrcaddrNegate { get; private set; } = null!;

        /// <summary>
        /// Source address objects. The structure of `srcaddr` block is documented below.
        /// </summary>
        [Output("srcaddrs")]
        public Output<ImmutableArray<Outputs.ProxypolicySrcaddr>> Srcaddrs { get; private set; } = null!;

        /// <summary>
        /// Source interface names. The structure of `srcintf` block is documented below.
        /// </summary>
        [Output("srcintfs")]
        public Output<ImmutableArray<Outputs.ProxypolicySrcintf>> Srcintfs { get; private set; } = null!;

        /// <summary>
        /// Name of an existing SSH filter profile.
        /// </summary>
        [Output("sshFilterProfile")]
        public Output<string> SshFilterProfile { get; private set; } = null!;

        /// <summary>
        /// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("sshPolicyRedirect")]
        public Output<string> SshPolicyRedirect { get; private set; } = null!;

        /// <summary>
        /// Name of an existing SSL SSH profile.
        /// </summary>
        [Output("sslSshProfile")]
        public Output<string> SslSshProfile { get; private set; } = null!;

        /// <summary>
        /// Enable/disable the active status of the policy. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Enable to use the IP address of the client to connect to the server. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("transparent")]
        public Output<string> Transparent { get; private set; } = null!;

        /// <summary>
        /// Names of user objects. The structure of `users` block is documented below.
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<Outputs.ProxypolicyUser>> Users { get; private set; } = null!;

        /// <summary>
        /// Enable the use of UTM profiles/sensors/lists. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("utmStatus")]
        public Output<string> UtmStatus { get; private set; } = null!;

        /// <summary>
        /// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// Name of an existing VideoFilter profile.
        /// </summary>
        [Output("videofilterProfile")]
        public Output<string> VideofilterProfile { get; private set; } = null!;

        /// <summary>
        /// Name of an existing virtual-patch profile.
        /// </summary>
        [Output("virtualPatchProfile")]
        public Output<string> VirtualPatchProfile { get; private set; } = null!;

        /// <summary>
        /// Name of an existing VoIP profile.
        /// </summary>
        [Output("voipProfile")]
        public Output<string> VoipProfile { get; private set; } = null!;

        /// <summary>
        /// Name of an existing Web application firewall profile.
        /// </summary>
        [Output("wafProfile")]
        public Output<string> WafProfile { get; private set; } = null!;

        /// <summary>
        /// Enable/disable web caching. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("webcache")]
        public Output<string> Webcache { get; private set; } = null!;

        /// <summary>
        /// Enable/disable web caching for HTTPS (Requires deep-inspection enabled in ssl-ssh-profile). Valid values: `disable`, `enable`.
        /// </summary>
        [Output("webcacheHttps")]
        public Output<string> WebcacheHttps { get; private set; } = null!;

        /// <summary>
        /// Name of an existing Web filter profile.
        /// </summary>
        [Output("webfilterProfile")]
        public Output<string> WebfilterProfile { get; private set; } = null!;

        /// <summary>
        /// Web proxy forward server name.
        /// </summary>
        [Output("webproxyForwardServer")]
        public Output<string> WebproxyForwardServer { get; private set; } = null!;

        /// <summary>
        /// Name of web proxy profile.
        /// </summary>
        [Output("webproxyProfile")]
        public Output<string> WebproxyProfile { get; private set; } = null!;

        /// <summary>
        /// ZTNA EMS Tag names. The structure of `ztna_ems_tag` block is documented below.
        /// </summary>
        [Output("ztnaEmsTags")]
        public Output<ImmutableArray<Outputs.ProxypolicyZtnaEmsTag>> ZtnaEmsTags { get; private set; } = null!;

        /// <summary>
        /// ZTNA tag matching logic. Valid values: `or`, `and`.
        /// </summary>
        [Output("ztnaTagsMatchLogic")]
        public Output<string> ZtnaTagsMatchLogic { get; private set; } = null!;


        /// <summary>
        /// Create a Proxypolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Proxypolicy(string name, ProxypolicyArgs args, CustomResourceOptions? options = null)
            : base("fortios:firewall/proxypolicy:Proxypolicy", name, args ?? new ProxypolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Proxypolicy(string name, Input<string> id, ProxypolicyState? state = null, CustomResourceOptions? options = null)
            : base("fortios:firewall/proxypolicy:Proxypolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Proxypolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Proxypolicy Get(string name, Input<string> id, ProxypolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new Proxypolicy(name, id, state, options);
        }
    }

    public sealed class ProxypolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessProxies")]
        private InputList<Inputs.ProxypolicyAccessProxyArgs>? _accessProxies;

        /// <summary>
        /// IPv4 access proxy. The structure of `access_proxy` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyAccessProxyArgs> AccessProxies
        {
            get => _accessProxies ?? (_accessProxies = new InputList<Inputs.ProxypolicyAccessProxyArgs>());
            set => _accessProxies = value;
        }

        [Input("accessProxy6s")]
        private InputList<Inputs.ProxypolicyAccessProxy6Args>? _accessProxy6s;

        /// <summary>
        /// IPv6 access proxy. The structure of `access_proxy6` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyAccessProxy6Args> AccessProxy6s
        {
            get => _accessProxy6s ?? (_accessProxy6s = new InputList<Inputs.ProxypolicyAccessProxy6Args>());
            set => _accessProxy6s = value;
        }

        /// <summary>
        /// Accept or deny traffic matching the policy parameters. Valid values: `accept`, `deny`, `redirect`.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Name of an existing Application list.
        /// </summary>
        [Input("applicationList")]
        public Input<string>? ApplicationList { get; set; }

        /// <summary>
        /// Name of an existing Antivirus profile.
        /// </summary>
        [Input("avProfile")]
        public Input<string>? AvProfile { get; set; }

        /// <summary>
        /// Enable/disable block notification. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("blockNotification")]
        public Input<string>? BlockNotification { get; set; }

        /// <summary>
        /// Name of an existing CASB profile.
        /// </summary>
        [Input("casbProfile")]
        public Input<string>? CasbProfile { get; set; }

        /// <summary>
        /// Name of an existing CIFS profile.
        /// </summary>
        [Input("cifsProfile")]
        public Input<string>? CifsProfile { get; set; }

        /// <summary>
        /// Optional comments.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// Decrypted traffic mirror.
        /// </summary>
        [Input("decryptedTrafficMirror")]
        public Input<string>? DecryptedTrafficMirror { get; set; }

        /// <summary>
        /// Enable/disable detection of HTTPS in HTTP request. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("detectHttpsInHttpRequest")]
        public Input<string>? DetectHttpsInHttpRequest { get; set; }

        /// <summary>
        /// When enabled, the ownership enforcement will be done at policy level. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("deviceOwnership")]
        public Input<string>? DeviceOwnership { get; set; }

        /// <summary>
        /// Name of an existing Diameter filter profile.
        /// </summary>
        [Input("diameterFilterProfile")]
        public Input<string>? DiameterFilterProfile { get; set; }

        /// <summary>
        /// Web proxy disclaimer setting: by domain, policy, or user. Valid values: `disable`, `domain`, `policy`, `user`.
        /// </summary>
        [Input("disclaimer")]
        public Input<string>? Disclaimer { get; set; }

        /// <summary>
        /// Name of an existing DLP profile.
        /// </summary>
        [Input("dlpProfile")]
        public Input<string>? DlpProfile { get; set; }

        /// <summary>
        /// Name of an existing DLP sensor.
        /// </summary>
        [Input("dlpSensor")]
        public Input<string>? DlpSensor { get; set; }

        [Input("dstaddr6s")]
        private InputList<Inputs.ProxypolicyDstaddr6Args>? _dstaddr6s;

        /// <summary>
        /// IPv6 destination address objects. The structure of `dstaddr6` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyDstaddr6Args> Dstaddr6s
        {
            get => _dstaddr6s ?? (_dstaddr6s = new InputList<Inputs.ProxypolicyDstaddr6Args>());
            set => _dstaddr6s = value;
        }

        /// <summary>
        /// When enabled, destination addresses match against any address EXCEPT the specified destination addresses. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("dstaddrNegate")]
        public Input<string>? DstaddrNegate { get; set; }

        [Input("dstaddrs")]
        private InputList<Inputs.ProxypolicyDstaddrArgs>? _dstaddrs;

        /// <summary>
        /// Destination address objects. The structure of `dstaddr` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyDstaddrArgs> Dstaddrs
        {
            get => _dstaddrs ?? (_dstaddrs = new InputList<Inputs.ProxypolicyDstaddrArgs>());
            set => _dstaddrs = value;
        }

        [Input("dstintfs", required: true)]
        private InputList<Inputs.ProxypolicyDstintfArgs>? _dstintfs;

        /// <summary>
        /// Destination interface names. The structure of `dstintf` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyDstintfArgs> Dstintfs
        {
            get => _dstintfs ?? (_dstintfs = new InputList<Inputs.ProxypolicyDstintfArgs>());
            set => _dstintfs = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Name of an existing email filter profile.
        /// </summary>
        [Input("emailfilterProfile")]
        public Input<string>? EmailfilterProfile { get; set; }

        /// <summary>
        /// Name of an existing file-filter profile.
        /// </summary>
        [Input("fileFilterProfile")]
        public Input<string>? FileFilterProfile { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Global web-based manager visible label.
        /// </summary>
        [Input("globalLabel")]
        public Input<string>? GlobalLabel { get; set; }

        [Input("groups")]
        private InputList<Inputs.ProxypolicyGroupArgs>? _groups;

        /// <summary>
        /// Names of group objects. The structure of `groups` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyGroupArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.ProxypolicyGroupArgs>());
            set => _groups = value;
        }

        /// <summary>
        /// Enable/disable HTTP tunnel authentication. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("httpTunnelAuth")]
        public Input<string>? HttpTunnelAuth { get; set; }

        /// <summary>
        /// Name of an existing ICAP profile.
        /// </summary>
        [Input("icapProfile")]
        public Input<string>? IcapProfile { get; set; }

        /// <summary>
        /// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("internetService")]
        public Input<string>? InternetService { get; set; }

        /// <summary>
        /// Enable/disable use of Internet Services IPv6 for this policy. If enabled, destination IPv6 address and service are not used. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("internetService6")]
        public Input<string>? InternetService6 { get; set; }

        [Input("internetService6CustomGroups")]
        private InputList<Inputs.ProxypolicyInternetService6CustomGroupArgs>? _internetService6CustomGroups;

        /// <summary>
        /// Custom Internet Service IPv6 group name. The structure of `internet_service6_custom_group` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetService6CustomGroupArgs> InternetService6CustomGroups
        {
            get => _internetService6CustomGroups ?? (_internetService6CustomGroups = new InputList<Inputs.ProxypolicyInternetService6CustomGroupArgs>());
            set => _internetService6CustomGroups = value;
        }

        [Input("internetService6Customs")]
        private InputList<Inputs.ProxypolicyInternetService6CustomArgs>? _internetService6Customs;

        /// <summary>
        /// Custom Internet Service IPv6 name. The structure of `internet_service6_custom` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetService6CustomArgs> InternetService6Customs
        {
            get => _internetService6Customs ?? (_internetService6Customs = new InputList<Inputs.ProxypolicyInternetService6CustomArgs>());
            set => _internetService6Customs = value;
        }

        [Input("internetService6Groups")]
        private InputList<Inputs.ProxypolicyInternetService6GroupArgs>? _internetService6Groups;

        /// <summary>
        /// Internet Service IPv6 group name. The structure of `internet_service6_group` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetService6GroupArgs> InternetService6Groups
        {
            get => _internetService6Groups ?? (_internetService6Groups = new InputList<Inputs.ProxypolicyInternetService6GroupArgs>());
            set => _internetService6Groups = value;
        }

        [Input("internetService6Names")]
        private InputList<Inputs.ProxypolicyInternetService6NameArgs>? _internetService6Names;

        /// <summary>
        /// Internet Service IPv6 name. The structure of `internet_service6_name` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetService6NameArgs> InternetService6Names
        {
            get => _internetService6Names ?? (_internetService6Names = new InputList<Inputs.ProxypolicyInternetService6NameArgs>());
            set => _internetService6Names = value;
        }

        /// <summary>
        /// When enabled, Internet Services match against any internet service IPv6 EXCEPT the selected Internet Service IPv6. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("internetService6Negate")]
        public Input<string>? InternetService6Negate { get; set; }

        [Input("internetServiceCustomGroups")]
        private InputList<Inputs.ProxypolicyInternetServiceCustomGroupArgs>? _internetServiceCustomGroups;

        /// <summary>
        /// Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetServiceCustomGroupArgs> InternetServiceCustomGroups
        {
            get => _internetServiceCustomGroups ?? (_internetServiceCustomGroups = new InputList<Inputs.ProxypolicyInternetServiceCustomGroupArgs>());
            set => _internetServiceCustomGroups = value;
        }

        [Input("internetServiceCustoms")]
        private InputList<Inputs.ProxypolicyInternetServiceCustomArgs>? _internetServiceCustoms;

        /// <summary>
        /// Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetServiceCustomArgs> InternetServiceCustoms
        {
            get => _internetServiceCustoms ?? (_internetServiceCustoms = new InputList<Inputs.ProxypolicyInternetServiceCustomArgs>());
            set => _internetServiceCustoms = value;
        }

        [Input("internetServiceGroups")]
        private InputList<Inputs.ProxypolicyInternetServiceGroupArgs>? _internetServiceGroups;

        /// <summary>
        /// Internet Service group name. The structure of `internet_service_group` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetServiceGroupArgs> InternetServiceGroups
        {
            get => _internetServiceGroups ?? (_internetServiceGroups = new InputList<Inputs.ProxypolicyInternetServiceGroupArgs>());
            set => _internetServiceGroups = value;
        }

        [Input("internetServiceIds")]
        private InputList<Inputs.ProxypolicyInternetServiceIdArgs>? _internetServiceIds;

        /// <summary>
        /// Internet Service ID. The structure of `internet_service_id` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetServiceIdArgs> InternetServiceIds
        {
            get => _internetServiceIds ?? (_internetServiceIds = new InputList<Inputs.ProxypolicyInternetServiceIdArgs>());
            set => _internetServiceIds = value;
        }

        [Input("internetServiceNames")]
        private InputList<Inputs.ProxypolicyInternetServiceNameArgs>? _internetServiceNames;

        /// <summary>
        /// Internet Service name. The structure of `internet_service_name` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetServiceNameArgs> InternetServiceNames
        {
            get => _internetServiceNames ?? (_internetServiceNames = new InputList<Inputs.ProxypolicyInternetServiceNameArgs>());
            set => _internetServiceNames = value;
        }

        /// <summary>
        /// When enabled, Internet Services match against any internet service EXCEPT the selected Internet Service. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("internetServiceNegate")]
        public Input<string>? InternetServiceNegate { get; set; }

        /// <summary>
        /// Name of an existing IPS sensor.
        /// </summary>
        [Input("ipsSensor")]
        public Input<string>? IpsSensor { get; set; }

        /// <summary>
        /// Name of an existing VoIP (ips) profile.
        /// </summary>
        [Input("ipsVoipFilter")]
        public Input<string>? IpsVoipFilter { get; set; }

        /// <summary>
        /// VDOM-specific GUI visible label.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// Enable/disable logging traffic through the policy. Valid values: `all`, `utm`, `disable`.
        /// </summary>
        [Input("logtraffic")]
        public Input<string>? Logtraffic { get; set; }

        /// <summary>
        /// Enable/disable policy log traffic start. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("logtrafficStart")]
        public Input<string>? LogtrafficStart { get; set; }

        /// <summary>
        /// Policy name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyid")]
        public Input<int>? Policyid { get; set; }

        [Input("poolnames")]
        private InputList<Inputs.ProxypolicyPoolnameArgs>? _poolnames;

        /// <summary>
        /// Name of IP pool object. The structure of `poolname` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyPoolnameArgs> Poolnames
        {
            get => _poolnames ?? (_poolnames = new InputList<Inputs.ProxypolicyPoolnameArgs>());
            set => _poolnames = value;
        }

        /// <summary>
        /// Name of profile group.
        /// </summary>
        [Input("profileGroup")]
        public Input<string>? ProfileGroup { get; set; }

        /// <summary>
        /// Name of an existing Protocol options profile.
        /// </summary>
        [Input("profileProtocolOptions")]
        public Input<string>? ProfileProtocolOptions { get; set; }

        /// <summary>
        /// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        /// </summary>
        [Input("profileType")]
        public Input<string>? ProfileType { get; set; }

        /// <summary>
        /// Type of explicit proxy.
        /// </summary>
        [Input("proxy", required: true)]
        public Input<string> Proxy { get; set; } = null!;

        /// <summary>
        /// Redirect URL for further explicit web proxy processing.
        /// </summary>
        [Input("redirectUrl")]
        public Input<string>? RedirectUrl { get; set; }

        /// <summary>
        /// Authentication replacement message override group.
        /// </summary>
        [Input("replacemsgOverrideGroup")]
        public Input<string>? ReplacemsgOverrideGroup { get; set; }

        /// <summary>
        /// Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        /// </summary>
        [Input("scanBotnetConnections")]
        public Input<string>? ScanBotnetConnections { get; set; }

        /// <summary>
        /// Name of schedule object.
        /// </summary>
        [Input("schedule", required: true)]
        public Input<string> Schedule { get; set; } = null!;

        /// <summary>
        /// Name of an existing SCTP filter profile.
        /// </summary>
        [Input("sctpFilterProfile")]
        public Input<string>? SctpFilterProfile { get; set; }

        /// <summary>
        /// When enabled, services match against any service EXCEPT the specified destination services. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("serviceNegate")]
        public Input<string>? ServiceNegate { get; set; }

        [Input("services")]
        private InputList<Inputs.ProxypolicyServiceArgs>? _services;

        /// <summary>
        /// Name of service objects. The structure of `service` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyServiceArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.ProxypolicyServiceArgs>());
            set => _services = value;
        }

        /// <summary>
        /// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        /// </summary>
        [Input("sessionTtl")]
        public Input<int>? SessionTtl { get; set; }

        /// <summary>
        /// Name of an existing Spam filter profile.
        /// </summary>
        [Input("spamfilterProfile")]
        public Input<string>? SpamfilterProfile { get; set; }

        [Input("srcaddr6s")]
        private InputList<Inputs.ProxypolicySrcaddr6Args>? _srcaddr6s;

        /// <summary>
        /// IPv6 source address objects. The structure of `srcaddr6` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicySrcaddr6Args> Srcaddr6s
        {
            get => _srcaddr6s ?? (_srcaddr6s = new InputList<Inputs.ProxypolicySrcaddr6Args>());
            set => _srcaddr6s = value;
        }

        /// <summary>
        /// When enabled, source addresses match against any address EXCEPT the specified source addresses. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("srcaddrNegate")]
        public Input<string>? SrcaddrNegate { get; set; }

        [Input("srcaddrs")]
        private InputList<Inputs.ProxypolicySrcaddrArgs>? _srcaddrs;

        /// <summary>
        /// Source address objects. The structure of `srcaddr` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicySrcaddrArgs> Srcaddrs
        {
            get => _srcaddrs ?? (_srcaddrs = new InputList<Inputs.ProxypolicySrcaddrArgs>());
            set => _srcaddrs = value;
        }

        [Input("srcintfs")]
        private InputList<Inputs.ProxypolicySrcintfArgs>? _srcintfs;

        /// <summary>
        /// Source interface names. The structure of `srcintf` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicySrcintfArgs> Srcintfs
        {
            get => _srcintfs ?? (_srcintfs = new InputList<Inputs.ProxypolicySrcintfArgs>());
            set => _srcintfs = value;
        }

        /// <summary>
        /// Name of an existing SSH filter profile.
        /// </summary>
        [Input("sshFilterProfile")]
        public Input<string>? SshFilterProfile { get; set; }

        /// <summary>
        /// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("sshPolicyRedirect")]
        public Input<string>? SshPolicyRedirect { get; set; }

        /// <summary>
        /// Name of an existing SSL SSH profile.
        /// </summary>
        [Input("sslSshProfile")]
        public Input<string>? SslSshProfile { get; set; }

        /// <summary>
        /// Enable/disable the active status of the policy. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Enable to use the IP address of the client to connect to the server. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("transparent")]
        public Input<string>? Transparent { get; set; }

        [Input("users")]
        private InputList<Inputs.ProxypolicyUserArgs>? _users;

        /// <summary>
        /// Names of user objects. The structure of `users` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyUserArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.ProxypolicyUserArgs>());
            set => _users = value;
        }

        /// <summary>
        /// Enable the use of UTM profiles/sensors/lists. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("utmStatus")]
        public Input<string>? UtmStatus { get; set; }

        /// <summary>
        /// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// Name of an existing VideoFilter profile.
        /// </summary>
        [Input("videofilterProfile")]
        public Input<string>? VideofilterProfile { get; set; }

        /// <summary>
        /// Name of an existing virtual-patch profile.
        /// </summary>
        [Input("virtualPatchProfile")]
        public Input<string>? VirtualPatchProfile { get; set; }

        /// <summary>
        /// Name of an existing VoIP profile.
        /// </summary>
        [Input("voipProfile")]
        public Input<string>? VoipProfile { get; set; }

        /// <summary>
        /// Name of an existing Web application firewall profile.
        /// </summary>
        [Input("wafProfile")]
        public Input<string>? WafProfile { get; set; }

        /// <summary>
        /// Enable/disable web caching. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("webcache")]
        public Input<string>? Webcache { get; set; }

        /// <summary>
        /// Enable/disable web caching for HTTPS (Requires deep-inspection enabled in ssl-ssh-profile). Valid values: `disable`, `enable`.
        /// </summary>
        [Input("webcacheHttps")]
        public Input<string>? WebcacheHttps { get; set; }

        /// <summary>
        /// Name of an existing Web filter profile.
        /// </summary>
        [Input("webfilterProfile")]
        public Input<string>? WebfilterProfile { get; set; }

        /// <summary>
        /// Web proxy forward server name.
        /// </summary>
        [Input("webproxyForwardServer")]
        public Input<string>? WebproxyForwardServer { get; set; }

        /// <summary>
        /// Name of web proxy profile.
        /// </summary>
        [Input("webproxyProfile")]
        public Input<string>? WebproxyProfile { get; set; }

        [Input("ztnaEmsTags")]
        private InputList<Inputs.ProxypolicyZtnaEmsTagArgs>? _ztnaEmsTags;

        /// <summary>
        /// ZTNA EMS Tag names. The structure of `ztna_ems_tag` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyZtnaEmsTagArgs> ZtnaEmsTags
        {
            get => _ztnaEmsTags ?? (_ztnaEmsTags = new InputList<Inputs.ProxypolicyZtnaEmsTagArgs>());
            set => _ztnaEmsTags = value;
        }

        /// <summary>
        /// ZTNA tag matching logic. Valid values: `or`, `and`.
        /// </summary>
        [Input("ztnaTagsMatchLogic")]
        public Input<string>? ZtnaTagsMatchLogic { get; set; }

        public ProxypolicyArgs()
        {
        }
        public static new ProxypolicyArgs Empty => new ProxypolicyArgs();
    }

    public sealed class ProxypolicyState : global::Pulumi.ResourceArgs
    {
        [Input("accessProxies")]
        private InputList<Inputs.ProxypolicyAccessProxyGetArgs>? _accessProxies;

        /// <summary>
        /// IPv4 access proxy. The structure of `access_proxy` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyAccessProxyGetArgs> AccessProxies
        {
            get => _accessProxies ?? (_accessProxies = new InputList<Inputs.ProxypolicyAccessProxyGetArgs>());
            set => _accessProxies = value;
        }

        [Input("accessProxy6s")]
        private InputList<Inputs.ProxypolicyAccessProxy6GetArgs>? _accessProxy6s;

        /// <summary>
        /// IPv6 access proxy. The structure of `access_proxy6` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyAccessProxy6GetArgs> AccessProxy6s
        {
            get => _accessProxy6s ?? (_accessProxy6s = new InputList<Inputs.ProxypolicyAccessProxy6GetArgs>());
            set => _accessProxy6s = value;
        }

        /// <summary>
        /// Accept or deny traffic matching the policy parameters. Valid values: `accept`, `deny`, `redirect`.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Name of an existing Application list.
        /// </summary>
        [Input("applicationList")]
        public Input<string>? ApplicationList { get; set; }

        /// <summary>
        /// Name of an existing Antivirus profile.
        /// </summary>
        [Input("avProfile")]
        public Input<string>? AvProfile { get; set; }

        /// <summary>
        /// Enable/disable block notification. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("blockNotification")]
        public Input<string>? BlockNotification { get; set; }

        /// <summary>
        /// Name of an existing CASB profile.
        /// </summary>
        [Input("casbProfile")]
        public Input<string>? CasbProfile { get; set; }

        /// <summary>
        /// Name of an existing CIFS profile.
        /// </summary>
        [Input("cifsProfile")]
        public Input<string>? CifsProfile { get; set; }

        /// <summary>
        /// Optional comments.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// Decrypted traffic mirror.
        /// </summary>
        [Input("decryptedTrafficMirror")]
        public Input<string>? DecryptedTrafficMirror { get; set; }

        /// <summary>
        /// Enable/disable detection of HTTPS in HTTP request. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("detectHttpsInHttpRequest")]
        public Input<string>? DetectHttpsInHttpRequest { get; set; }

        /// <summary>
        /// When enabled, the ownership enforcement will be done at policy level. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("deviceOwnership")]
        public Input<string>? DeviceOwnership { get; set; }

        /// <summary>
        /// Name of an existing Diameter filter profile.
        /// </summary>
        [Input("diameterFilterProfile")]
        public Input<string>? DiameterFilterProfile { get; set; }

        /// <summary>
        /// Web proxy disclaimer setting: by domain, policy, or user. Valid values: `disable`, `domain`, `policy`, `user`.
        /// </summary>
        [Input("disclaimer")]
        public Input<string>? Disclaimer { get; set; }

        /// <summary>
        /// Name of an existing DLP profile.
        /// </summary>
        [Input("dlpProfile")]
        public Input<string>? DlpProfile { get; set; }

        /// <summary>
        /// Name of an existing DLP sensor.
        /// </summary>
        [Input("dlpSensor")]
        public Input<string>? DlpSensor { get; set; }

        [Input("dstaddr6s")]
        private InputList<Inputs.ProxypolicyDstaddr6GetArgs>? _dstaddr6s;

        /// <summary>
        /// IPv6 destination address objects. The structure of `dstaddr6` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyDstaddr6GetArgs> Dstaddr6s
        {
            get => _dstaddr6s ?? (_dstaddr6s = new InputList<Inputs.ProxypolicyDstaddr6GetArgs>());
            set => _dstaddr6s = value;
        }

        /// <summary>
        /// When enabled, destination addresses match against any address EXCEPT the specified destination addresses. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("dstaddrNegate")]
        public Input<string>? DstaddrNegate { get; set; }

        [Input("dstaddrs")]
        private InputList<Inputs.ProxypolicyDstaddrGetArgs>? _dstaddrs;

        /// <summary>
        /// Destination address objects. The structure of `dstaddr` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyDstaddrGetArgs> Dstaddrs
        {
            get => _dstaddrs ?? (_dstaddrs = new InputList<Inputs.ProxypolicyDstaddrGetArgs>());
            set => _dstaddrs = value;
        }

        [Input("dstintfs")]
        private InputList<Inputs.ProxypolicyDstintfGetArgs>? _dstintfs;

        /// <summary>
        /// Destination interface names. The structure of `dstintf` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyDstintfGetArgs> Dstintfs
        {
            get => _dstintfs ?? (_dstintfs = new InputList<Inputs.ProxypolicyDstintfGetArgs>());
            set => _dstintfs = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Name of an existing email filter profile.
        /// </summary>
        [Input("emailfilterProfile")]
        public Input<string>? EmailfilterProfile { get; set; }

        /// <summary>
        /// Name of an existing file-filter profile.
        /// </summary>
        [Input("fileFilterProfile")]
        public Input<string>? FileFilterProfile { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Global web-based manager visible label.
        /// </summary>
        [Input("globalLabel")]
        public Input<string>? GlobalLabel { get; set; }

        [Input("groups")]
        private InputList<Inputs.ProxypolicyGroupGetArgs>? _groups;

        /// <summary>
        /// Names of group objects. The structure of `groups` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyGroupGetArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.ProxypolicyGroupGetArgs>());
            set => _groups = value;
        }

        /// <summary>
        /// Enable/disable HTTP tunnel authentication. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("httpTunnelAuth")]
        public Input<string>? HttpTunnelAuth { get; set; }

        /// <summary>
        /// Name of an existing ICAP profile.
        /// </summary>
        [Input("icapProfile")]
        public Input<string>? IcapProfile { get; set; }

        /// <summary>
        /// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("internetService")]
        public Input<string>? InternetService { get; set; }

        /// <summary>
        /// Enable/disable use of Internet Services IPv6 for this policy. If enabled, destination IPv6 address and service are not used. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("internetService6")]
        public Input<string>? InternetService6 { get; set; }

        [Input("internetService6CustomGroups")]
        private InputList<Inputs.ProxypolicyInternetService6CustomGroupGetArgs>? _internetService6CustomGroups;

        /// <summary>
        /// Custom Internet Service IPv6 group name. The structure of `internet_service6_custom_group` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetService6CustomGroupGetArgs> InternetService6CustomGroups
        {
            get => _internetService6CustomGroups ?? (_internetService6CustomGroups = new InputList<Inputs.ProxypolicyInternetService6CustomGroupGetArgs>());
            set => _internetService6CustomGroups = value;
        }

        [Input("internetService6Customs")]
        private InputList<Inputs.ProxypolicyInternetService6CustomGetArgs>? _internetService6Customs;

        /// <summary>
        /// Custom Internet Service IPv6 name. The structure of `internet_service6_custom` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetService6CustomGetArgs> InternetService6Customs
        {
            get => _internetService6Customs ?? (_internetService6Customs = new InputList<Inputs.ProxypolicyInternetService6CustomGetArgs>());
            set => _internetService6Customs = value;
        }

        [Input("internetService6Groups")]
        private InputList<Inputs.ProxypolicyInternetService6GroupGetArgs>? _internetService6Groups;

        /// <summary>
        /// Internet Service IPv6 group name. The structure of `internet_service6_group` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetService6GroupGetArgs> InternetService6Groups
        {
            get => _internetService6Groups ?? (_internetService6Groups = new InputList<Inputs.ProxypolicyInternetService6GroupGetArgs>());
            set => _internetService6Groups = value;
        }

        [Input("internetService6Names")]
        private InputList<Inputs.ProxypolicyInternetService6NameGetArgs>? _internetService6Names;

        /// <summary>
        /// Internet Service IPv6 name. The structure of `internet_service6_name` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetService6NameGetArgs> InternetService6Names
        {
            get => _internetService6Names ?? (_internetService6Names = new InputList<Inputs.ProxypolicyInternetService6NameGetArgs>());
            set => _internetService6Names = value;
        }

        /// <summary>
        /// When enabled, Internet Services match against any internet service IPv6 EXCEPT the selected Internet Service IPv6. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("internetService6Negate")]
        public Input<string>? InternetService6Negate { get; set; }

        [Input("internetServiceCustomGroups")]
        private InputList<Inputs.ProxypolicyInternetServiceCustomGroupGetArgs>? _internetServiceCustomGroups;

        /// <summary>
        /// Custom Internet Service group name. The structure of `internet_service_custom_group` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetServiceCustomGroupGetArgs> InternetServiceCustomGroups
        {
            get => _internetServiceCustomGroups ?? (_internetServiceCustomGroups = new InputList<Inputs.ProxypolicyInternetServiceCustomGroupGetArgs>());
            set => _internetServiceCustomGroups = value;
        }

        [Input("internetServiceCustoms")]
        private InputList<Inputs.ProxypolicyInternetServiceCustomGetArgs>? _internetServiceCustoms;

        /// <summary>
        /// Custom Internet Service name. The structure of `internet_service_custom` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetServiceCustomGetArgs> InternetServiceCustoms
        {
            get => _internetServiceCustoms ?? (_internetServiceCustoms = new InputList<Inputs.ProxypolicyInternetServiceCustomGetArgs>());
            set => _internetServiceCustoms = value;
        }

        [Input("internetServiceGroups")]
        private InputList<Inputs.ProxypolicyInternetServiceGroupGetArgs>? _internetServiceGroups;

        /// <summary>
        /// Internet Service group name. The structure of `internet_service_group` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetServiceGroupGetArgs> InternetServiceGroups
        {
            get => _internetServiceGroups ?? (_internetServiceGroups = new InputList<Inputs.ProxypolicyInternetServiceGroupGetArgs>());
            set => _internetServiceGroups = value;
        }

        [Input("internetServiceIds")]
        private InputList<Inputs.ProxypolicyInternetServiceIdGetArgs>? _internetServiceIds;

        /// <summary>
        /// Internet Service ID. The structure of `internet_service_id` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetServiceIdGetArgs> InternetServiceIds
        {
            get => _internetServiceIds ?? (_internetServiceIds = new InputList<Inputs.ProxypolicyInternetServiceIdGetArgs>());
            set => _internetServiceIds = value;
        }

        [Input("internetServiceNames")]
        private InputList<Inputs.ProxypolicyInternetServiceNameGetArgs>? _internetServiceNames;

        /// <summary>
        /// Internet Service name. The structure of `internet_service_name` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyInternetServiceNameGetArgs> InternetServiceNames
        {
            get => _internetServiceNames ?? (_internetServiceNames = new InputList<Inputs.ProxypolicyInternetServiceNameGetArgs>());
            set => _internetServiceNames = value;
        }

        /// <summary>
        /// When enabled, Internet Services match against any internet service EXCEPT the selected Internet Service. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("internetServiceNegate")]
        public Input<string>? InternetServiceNegate { get; set; }

        /// <summary>
        /// Name of an existing IPS sensor.
        /// </summary>
        [Input("ipsSensor")]
        public Input<string>? IpsSensor { get; set; }

        /// <summary>
        /// Name of an existing VoIP (ips) profile.
        /// </summary>
        [Input("ipsVoipFilter")]
        public Input<string>? IpsVoipFilter { get; set; }

        /// <summary>
        /// VDOM-specific GUI visible label.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// Enable/disable logging traffic through the policy. Valid values: `all`, `utm`, `disable`.
        /// </summary>
        [Input("logtraffic")]
        public Input<string>? Logtraffic { get; set; }

        /// <summary>
        /// Enable/disable policy log traffic start. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("logtrafficStart")]
        public Input<string>? LogtrafficStart { get; set; }

        /// <summary>
        /// Policy name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyid")]
        public Input<int>? Policyid { get; set; }

        [Input("poolnames")]
        private InputList<Inputs.ProxypolicyPoolnameGetArgs>? _poolnames;

        /// <summary>
        /// Name of IP pool object. The structure of `poolname` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyPoolnameGetArgs> Poolnames
        {
            get => _poolnames ?? (_poolnames = new InputList<Inputs.ProxypolicyPoolnameGetArgs>());
            set => _poolnames = value;
        }

        /// <summary>
        /// Name of profile group.
        /// </summary>
        [Input("profileGroup")]
        public Input<string>? ProfileGroup { get; set; }

        /// <summary>
        /// Name of an existing Protocol options profile.
        /// </summary>
        [Input("profileProtocolOptions")]
        public Input<string>? ProfileProtocolOptions { get; set; }

        /// <summary>
        /// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
        /// </summary>
        [Input("profileType")]
        public Input<string>? ProfileType { get; set; }

        /// <summary>
        /// Type of explicit proxy.
        /// </summary>
        [Input("proxy")]
        public Input<string>? Proxy { get; set; }

        /// <summary>
        /// Redirect URL for further explicit web proxy processing.
        /// </summary>
        [Input("redirectUrl")]
        public Input<string>? RedirectUrl { get; set; }

        /// <summary>
        /// Authentication replacement message override group.
        /// </summary>
        [Input("replacemsgOverrideGroup")]
        public Input<string>? ReplacemsgOverrideGroup { get; set; }

        /// <summary>
        /// Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
        /// </summary>
        [Input("scanBotnetConnections")]
        public Input<string>? ScanBotnetConnections { get; set; }

        /// <summary>
        /// Name of schedule object.
        /// </summary>
        [Input("schedule")]
        public Input<string>? Schedule { get; set; }

        /// <summary>
        /// Name of an existing SCTP filter profile.
        /// </summary>
        [Input("sctpFilterProfile")]
        public Input<string>? SctpFilterProfile { get; set; }

        /// <summary>
        /// When enabled, services match against any service EXCEPT the specified destination services. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("serviceNegate")]
        public Input<string>? ServiceNegate { get; set; }

        [Input("services")]
        private InputList<Inputs.ProxypolicyServiceGetArgs>? _services;

        /// <summary>
        /// Name of service objects. The structure of `service` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyServiceGetArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.ProxypolicyServiceGetArgs>());
            set => _services = value;
        }

        /// <summary>
        /// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
        /// </summary>
        [Input("sessionTtl")]
        public Input<int>? SessionTtl { get; set; }

        /// <summary>
        /// Name of an existing Spam filter profile.
        /// </summary>
        [Input("spamfilterProfile")]
        public Input<string>? SpamfilterProfile { get; set; }

        [Input("srcaddr6s")]
        private InputList<Inputs.ProxypolicySrcaddr6GetArgs>? _srcaddr6s;

        /// <summary>
        /// IPv6 source address objects. The structure of `srcaddr6` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicySrcaddr6GetArgs> Srcaddr6s
        {
            get => _srcaddr6s ?? (_srcaddr6s = new InputList<Inputs.ProxypolicySrcaddr6GetArgs>());
            set => _srcaddr6s = value;
        }

        /// <summary>
        /// When enabled, source addresses match against any address EXCEPT the specified source addresses. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("srcaddrNegate")]
        public Input<string>? SrcaddrNegate { get; set; }

        [Input("srcaddrs")]
        private InputList<Inputs.ProxypolicySrcaddrGetArgs>? _srcaddrs;

        /// <summary>
        /// Source address objects. The structure of `srcaddr` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicySrcaddrGetArgs> Srcaddrs
        {
            get => _srcaddrs ?? (_srcaddrs = new InputList<Inputs.ProxypolicySrcaddrGetArgs>());
            set => _srcaddrs = value;
        }

        [Input("srcintfs")]
        private InputList<Inputs.ProxypolicySrcintfGetArgs>? _srcintfs;

        /// <summary>
        /// Source interface names. The structure of `srcintf` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicySrcintfGetArgs> Srcintfs
        {
            get => _srcintfs ?? (_srcintfs = new InputList<Inputs.ProxypolicySrcintfGetArgs>());
            set => _srcintfs = value;
        }

        /// <summary>
        /// Name of an existing SSH filter profile.
        /// </summary>
        [Input("sshFilterProfile")]
        public Input<string>? SshFilterProfile { get; set; }

        /// <summary>
        /// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("sshPolicyRedirect")]
        public Input<string>? SshPolicyRedirect { get; set; }

        /// <summary>
        /// Name of an existing SSL SSH profile.
        /// </summary>
        [Input("sslSshProfile")]
        public Input<string>? SslSshProfile { get; set; }

        /// <summary>
        /// Enable/disable the active status of the policy. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Enable to use the IP address of the client to connect to the server. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("transparent")]
        public Input<string>? Transparent { get; set; }

        [Input("users")]
        private InputList<Inputs.ProxypolicyUserGetArgs>? _users;

        /// <summary>
        /// Names of user objects. The structure of `users` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyUserGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.ProxypolicyUserGetArgs>());
            set => _users = value;
        }

        /// <summary>
        /// Enable the use of UTM profiles/sensors/lists. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("utmStatus")]
        public Input<string>? UtmStatus { get; set; }

        /// <summary>
        /// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// Name of an existing VideoFilter profile.
        /// </summary>
        [Input("videofilterProfile")]
        public Input<string>? VideofilterProfile { get; set; }

        /// <summary>
        /// Name of an existing virtual-patch profile.
        /// </summary>
        [Input("virtualPatchProfile")]
        public Input<string>? VirtualPatchProfile { get; set; }

        /// <summary>
        /// Name of an existing VoIP profile.
        /// </summary>
        [Input("voipProfile")]
        public Input<string>? VoipProfile { get; set; }

        /// <summary>
        /// Name of an existing Web application firewall profile.
        /// </summary>
        [Input("wafProfile")]
        public Input<string>? WafProfile { get; set; }

        /// <summary>
        /// Enable/disable web caching. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("webcache")]
        public Input<string>? Webcache { get; set; }

        /// <summary>
        /// Enable/disable web caching for HTTPS (Requires deep-inspection enabled in ssl-ssh-profile). Valid values: `disable`, `enable`.
        /// </summary>
        [Input("webcacheHttps")]
        public Input<string>? WebcacheHttps { get; set; }

        /// <summary>
        /// Name of an existing Web filter profile.
        /// </summary>
        [Input("webfilterProfile")]
        public Input<string>? WebfilterProfile { get; set; }

        /// <summary>
        /// Web proxy forward server name.
        /// </summary>
        [Input("webproxyForwardServer")]
        public Input<string>? WebproxyForwardServer { get; set; }

        /// <summary>
        /// Name of web proxy profile.
        /// </summary>
        [Input("webproxyProfile")]
        public Input<string>? WebproxyProfile { get; set; }

        [Input("ztnaEmsTags")]
        private InputList<Inputs.ProxypolicyZtnaEmsTagGetArgs>? _ztnaEmsTags;

        /// <summary>
        /// ZTNA EMS Tag names. The structure of `ztna_ems_tag` block is documented below.
        /// </summary>
        public InputList<Inputs.ProxypolicyZtnaEmsTagGetArgs> ZtnaEmsTags
        {
            get => _ztnaEmsTags ?? (_ztnaEmsTags = new InputList<Inputs.ProxypolicyZtnaEmsTagGetArgs>());
            set => _ztnaEmsTags = value;
        }

        /// <summary>
        /// ZTNA tag matching logic. Valid values: `or`, `and`.
        /// </summary>
        [Input("ztnaTagsMatchLogic")]
        public Input<string>? ZtnaTagsMatchLogic { get; set; }

        public ProxypolicyState()
        {
        }
        public static new ProxypolicyState Empty => new ProxypolicyState();
    }
}
