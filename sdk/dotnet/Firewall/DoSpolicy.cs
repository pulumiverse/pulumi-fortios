// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Firewall
{
    /// <summary>
    /// Configure IPv4 DoS policies.
    /// 
    /// ## Import
    /// 
    /// Firewall DosPolicy can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:firewall/doSpolicy:DoSpolicy labelname {{policyid}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:firewall/doSpolicy:DoSpolicy labelname {{policyid}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:firewall/doSpolicy:DoSpolicy")]
    public partial class DoSpolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Anomaly name. The structure of `anomaly` block is documented below.
        /// </summary>
        [Output("anomalies")]
        public Output<ImmutableArray<Outputs.DoSpolicyAnomaly>> Anomalies { get; private set; } = null!;

        /// <summary>
        /// Comment.
        /// </summary>
        [Output("comments")]
        public Output<string?> Comments { get; private set; } = null!;

        /// <summary>
        /// Destination address name from available addresses. The structure of `dstaddr` block is documented below.
        /// </summary>
        [Output("dstaddrs")]
        public Output<ImmutableArray<Outputs.DoSpolicyDstaddr>> Dstaddrs { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// Incoming interface name from available interfaces.
        /// </summary>
        [Output("interface")]
        public Output<string> Interface { get; private set; } = null!;

        /// <summary>
        /// Policy name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Output("policyid")]
        public Output<int> Policyid { get; private set; } = null!;

        /// <summary>
        /// Service object from available options. The structure of `service` block is documented below.
        /// </summary>
        [Output("services")]
        public Output<ImmutableArray<Outputs.DoSpolicyService>> Services { get; private set; } = null!;

        /// <summary>
        /// Source address name from available addresses. The structure of `srcaddr` block is documented below.
        /// </summary>
        [Output("srcaddrs")]
        public Output<ImmutableArray<Outputs.DoSpolicySrcaddr>> Srcaddrs { get; private set; } = null!;

        /// <summary>
        /// Enable/disable this policy. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a DoSpolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DoSpolicy(string name, DoSpolicyArgs args, CustomResourceOptions? options = null)
            : base("fortios:firewall/doSpolicy:DoSpolicy", name, args ?? new DoSpolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DoSpolicy(string name, Input<string> id, DoSpolicyState? state = null, CustomResourceOptions? options = null)
            : base("fortios:firewall/doSpolicy:DoSpolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DoSpolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DoSpolicy Get(string name, Input<string> id, DoSpolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new DoSpolicy(name, id, state, options);
        }
    }

    public sealed class DoSpolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("anomalies")]
        private InputList<Inputs.DoSpolicyAnomalyArgs>? _anomalies;

        /// <summary>
        /// Anomaly name. The structure of `anomaly` block is documented below.
        /// </summary>
        public InputList<Inputs.DoSpolicyAnomalyArgs> Anomalies
        {
            get => _anomalies ?? (_anomalies = new InputList<Inputs.DoSpolicyAnomalyArgs>());
            set => _anomalies = value;
        }

        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        [Input("dstaddrs", required: true)]
        private InputList<Inputs.DoSpolicyDstaddrArgs>? _dstaddrs;

        /// <summary>
        /// Destination address name from available addresses. The structure of `dstaddr` block is documented below.
        /// </summary>
        public InputList<Inputs.DoSpolicyDstaddrArgs> Dstaddrs
        {
            get => _dstaddrs ?? (_dstaddrs = new InputList<Inputs.DoSpolicyDstaddrArgs>());
            set => _dstaddrs = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Incoming interface name from available interfaces.
        /// </summary>
        [Input("interface", required: true)]
        public Input<string> Interface { get; set; } = null!;

        /// <summary>
        /// Policy name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyid")]
        public Input<int>? Policyid { get; set; }

        [Input("services")]
        private InputList<Inputs.DoSpolicyServiceArgs>? _services;

        /// <summary>
        /// Service object from available options. The structure of `service` block is documented below.
        /// </summary>
        public InputList<Inputs.DoSpolicyServiceArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.DoSpolicyServiceArgs>());
            set => _services = value;
        }

        [Input("srcaddrs", required: true)]
        private InputList<Inputs.DoSpolicySrcaddrArgs>? _srcaddrs;

        /// <summary>
        /// Source address name from available addresses. The structure of `srcaddr` block is documented below.
        /// </summary>
        public InputList<Inputs.DoSpolicySrcaddrArgs> Srcaddrs
        {
            get => _srcaddrs ?? (_srcaddrs = new InputList<Inputs.DoSpolicySrcaddrArgs>());
            set => _srcaddrs = value;
        }

        /// <summary>
        /// Enable/disable this policy. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public DoSpolicyArgs()
        {
        }
        public static new DoSpolicyArgs Empty => new DoSpolicyArgs();
    }

    public sealed class DoSpolicyState : global::Pulumi.ResourceArgs
    {
        [Input("anomalies")]
        private InputList<Inputs.DoSpolicyAnomalyGetArgs>? _anomalies;

        /// <summary>
        /// Anomaly name. The structure of `anomaly` block is documented below.
        /// </summary>
        public InputList<Inputs.DoSpolicyAnomalyGetArgs> Anomalies
        {
            get => _anomalies ?? (_anomalies = new InputList<Inputs.DoSpolicyAnomalyGetArgs>());
            set => _anomalies = value;
        }

        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        [Input("dstaddrs")]
        private InputList<Inputs.DoSpolicyDstaddrGetArgs>? _dstaddrs;

        /// <summary>
        /// Destination address name from available addresses. The structure of `dstaddr` block is documented below.
        /// </summary>
        public InputList<Inputs.DoSpolicyDstaddrGetArgs> Dstaddrs
        {
            get => _dstaddrs ?? (_dstaddrs = new InputList<Inputs.DoSpolicyDstaddrGetArgs>());
            set => _dstaddrs = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Incoming interface name from available interfaces.
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// Policy name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyid")]
        public Input<int>? Policyid { get; set; }

        [Input("services")]
        private InputList<Inputs.DoSpolicyServiceGetArgs>? _services;

        /// <summary>
        /// Service object from available options. The structure of `service` block is documented below.
        /// </summary>
        public InputList<Inputs.DoSpolicyServiceGetArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.DoSpolicyServiceGetArgs>());
            set => _services = value;
        }

        [Input("srcaddrs")]
        private InputList<Inputs.DoSpolicySrcaddrGetArgs>? _srcaddrs;

        /// <summary>
        /// Source address name from available addresses. The structure of `srcaddr` block is documented below.
        /// </summary>
        public InputList<Inputs.DoSpolicySrcaddrGetArgs> Srcaddrs
        {
            get => _srcaddrs ?? (_srcaddrs = new InputList<Inputs.DoSpolicySrcaddrGetArgs>());
            set => _srcaddrs = value;
        }

        /// <summary>
        /// Enable/disable this policy. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public DoSpolicyState()
        {
        }
        public static new DoSpolicyState Empty => new DoSpolicyState();
    }
}
