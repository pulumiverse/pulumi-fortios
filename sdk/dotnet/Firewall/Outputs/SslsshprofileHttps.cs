// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Firewall.Outputs
{

    [OutputType]
    public sealed class SslsshprofileHttps
    {
        /// <summary>
        /// Action based on certificate probe failure. Valid values: `allow`, `block`.
        /// </summary>
        public readonly string? CertProbeFailure;
        /// <summary>
        /// Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        /// </summary>
        public readonly string? CertValidationFailure;
        /// <summary>
        /// Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        /// </summary>
        public readonly string? CertValidationTimeout;
        /// <summary>
        /// Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        /// </summary>
        public readonly string? ClientCertRequest;
        /// <summary>
        /// Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        /// </summary>
        public readonly string? ClientCertificate;
        /// <summary>
        /// Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        /// </summary>
        public readonly string? ExpiredServerCert;
        /// <summary>
        /// Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        /// </summary>
        public readonly string? InvalidServerCert;
        /// <summary>
        /// Minimum SSL version to be allowed. Valid values: `ssl-3.0`, `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        /// </summary>
        public readonly string? MinAllowedSslVersion;
        /// <summary>
        /// Ports to use for scanning (1 - 65535, default = 443).
        /// </summary>
        public readonly string? Ports;
        /// <summary>
        /// Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        /// </summary>
        public readonly string? ProxyAfterTcpHandshake;
        /// <summary>
        /// QUIC inspection status. On FortiOS versions 7.4.1: default = disable. On FortiOS versions &gt;= 7.4.2: default = inspect.
        /// </summary>
        public readonly string? Quic;
        /// <summary>
        /// Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        /// </summary>
        public readonly string? RevokedServerCert;
        /// <summary>
        /// Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        /// </summary>
        public readonly string? SniServerCertCheck;
        /// <summary>
        /// Configure protocol inspection status. Valid values: `disable`, `certificate-inspection`, `deep-inspection`.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        /// </summary>
        public readonly string? UnsupportedSsl;
        /// <summary>
        /// Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        /// </summary>
        public readonly string? UnsupportedSslCipher;
        /// <summary>
        /// Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        /// </summary>
        public readonly string? UnsupportedSslNegotiation;
        /// <summary>
        /// Action based on the SSL version used being unsupported.
        /// </summary>
        public readonly string? UnsupportedSslVersion;
        /// <summary>
        /// Allow, ignore, or block the untrusted SSL session server certificate. Valid values: `allow`, `block`, `ignore`.
        /// </summary>
        public readonly string? UntrustedServerCert;

        [OutputConstructor]
        private SslsshprofileHttps(
            string? certProbeFailure,

            string? certValidationFailure,

            string? certValidationTimeout,

            string? clientCertRequest,

            string? clientCertificate,

            string? expiredServerCert,

            string? invalidServerCert,

            string? minAllowedSslVersion,

            string? ports,

            string? proxyAfterTcpHandshake,

            string? quic,

            string? revokedServerCert,

            string? sniServerCertCheck,

            string? status,

            string? unsupportedSsl,

            string? unsupportedSslCipher,

            string? unsupportedSslNegotiation,

            string? unsupportedSslVersion,

            string? untrustedServerCert)
        {
            CertProbeFailure = certProbeFailure;
            CertValidationFailure = certValidationFailure;
            CertValidationTimeout = certValidationTimeout;
            ClientCertRequest = clientCertRequest;
            ClientCertificate = clientCertificate;
            ExpiredServerCert = expiredServerCert;
            InvalidServerCert = invalidServerCert;
            MinAllowedSslVersion = minAllowedSslVersion;
            Ports = ports;
            ProxyAfterTcpHandshake = proxyAfterTcpHandshake;
            Quic = quic;
            RevokedServerCert = revokedServerCert;
            SniServerCertCheck = sniServerCertCheck;
            Status = status;
            UnsupportedSsl = unsupportedSsl;
            UnsupportedSslCipher = unsupportedSslCipher;
            UnsupportedSslNegotiation = unsupportedSslNegotiation;
            UnsupportedSslVersion = unsupportedSslVersion;
            UntrustedServerCert = untrustedServerCert;
        }
    }
}
