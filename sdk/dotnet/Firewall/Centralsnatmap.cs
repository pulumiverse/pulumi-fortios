// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Firewall
{
    /// <summary>
    /// Configure central SNAT policies.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.Firewall.Centralsnatmap("trname", new()
    ///     {
    ///         DstAddrs = new[]
    ///         {
    ///             new Fortios.Firewall.Inputs.CentralsnatmapDstAddrArgs
    ///             {
    ///                 Name = "all",
    ///             },
    ///         },
    ///         Dstintfs = new[]
    ///         {
    ///             new Fortios.Firewall.Inputs.CentralsnatmapDstintfArgs
    ///             {
    ///                 Name = "port3",
    ///             },
    ///         },
    ///         Nat = "enable",
    ///         NatPort = "0",
    ///         OrigAddrs = new[]
    ///         {
    ///             new Fortios.Firewall.Inputs.CentralsnatmapOrigAddrArgs
    ///             {
    ///                 Name = "all",
    ///             },
    ///         },
    ///         OrigPort = "0",
    ///         Policyid = 1,
    ///         Protocol = 33,
    ///         Srcintfs = new[]
    ///         {
    ///             new Fortios.Firewall.Inputs.CentralsnatmapSrcintfArgs
    ///             {
    ///                 Name = "port1",
    ///             },
    ///         },
    ///         Status = "enable",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Firewall CentralSnatMap can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:firewall/centralsnatmap:Centralsnatmap labelname {{policyid}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:firewall/centralsnatmap:Centralsnatmap labelname {{policyid}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:firewall/centralsnatmap:Centralsnatmap")]
    public partial class Centralsnatmap : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Comment.
        /// </summary>
        [Output("comments")]
        public Output<string?> Comments { get; private set; } = null!;

        /// <summary>
        /// IPv6 Destination address. The structure of `dst_addr6` block is documented below.
        /// </summary>
        [Output("dstAddr6s")]
        public Output<ImmutableArray<Outputs.CentralsnatmapDstAddr6>> DstAddr6s { get; private set; } = null!;

        /// <summary>
        /// Destination address name from available addresses. The structure of `dst_addr` block is documented below.
        /// </summary>
        [Output("dstAddrs")]
        public Output<ImmutableArray<Outputs.CentralsnatmapDstAddr>> DstAddrs { get; private set; } = null!;

        /// <summary>
        /// Destination port or port range (1 to 65535, 0 means any port).
        /// </summary>
        [Output("dstPort")]
        public Output<string> DstPort { get; private set; } = null!;

        /// <summary>
        /// Destination interface name from available interfaces. The structure of `dstintf` block is documented below.
        /// </summary>
        [Output("dstintfs")]
        public Output<ImmutableArray<Outputs.CentralsnatmapDstintf>> Dstintfs { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// Enable/disable source NAT. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("nat")]
        public Output<string> Nat { get; private set; } = null!;

        /// <summary>
        /// Enable/disable NAT46. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("nat46")]
        public Output<string> Nat46 { get; private set; } = null!;

        /// <summary>
        /// Enable/disable NAT64. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("nat64")]
        public Output<string> Nat64 { get; private set; } = null!;

        /// <summary>
        /// IPv6 pools to be used for source NAT. The structure of `nat_ippool6` block is documented below.
        /// </summary>
        [Output("natIppool6s")]
        public Output<ImmutableArray<Outputs.CentralsnatmapNatIppool6>> NatIppool6s { get; private set; } = null!;

        /// <summary>
        /// Name of the IP pools to be used to translate addresses from available IP Pools. The structure of `nat_ippool` block is documented below.
        /// </summary>
        [Output("natIppools")]
        public Output<ImmutableArray<Outputs.CentralsnatmapNatIppool>> NatIppools { get; private set; } = null!;

        /// <summary>
        /// Translated port or port range (0 to 65535, 0 means any port).
        /// </summary>
        [Output("natPort")]
        public Output<string> NatPort { get; private set; } = null!;

        /// <summary>
        /// IPv6 Original address. The structure of `orig_addr6` block is documented below.
        /// </summary>
        [Output("origAddr6s")]
        public Output<ImmutableArray<Outputs.CentralsnatmapOrigAddr6>> OrigAddr6s { get; private set; } = null!;

        /// <summary>
        /// Original address. The structure of `orig_addr` block is documented below.
        /// </summary>
        [Output("origAddrs")]
        public Output<ImmutableArray<Outputs.CentralsnatmapOrigAddr>> OrigAddrs { get; private set; } = null!;

        /// <summary>
        /// Original TCP port (1 to 65535, 0 means any port).
        /// </summary>
        [Output("origPort")]
        public Output<string> OrigPort { get; private set; } = null!;

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Output("policyid")]
        public Output<int> Policyid { get; private set; } = null!;

        /// <summary>
        /// Integer value for the protocol type (0 - 255).
        /// </summary>
        [Output("protocol")]
        public Output<int> Protocol { get; private set; } = null!;

        /// <summary>
        /// Source interface name from available interfaces. The structure of `srcintf` block is documented below.
        /// </summary>
        [Output("srcintfs")]
        public Output<ImmutableArray<Outputs.CentralsnatmapSrcintf>> Srcintfs { get; private set; } = null!;

        /// <summary>
        /// Enable/disable the active status of this policy. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// IPv4/IPv6 source NAT. Valid values: `ipv4`, `ipv6`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Centralsnatmap resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Centralsnatmap(string name, CentralsnatmapArgs args, CustomResourceOptions? options = null)
            : base("fortios:firewall/centralsnatmap:Centralsnatmap", name, args ?? new CentralsnatmapArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Centralsnatmap(string name, Input<string> id, CentralsnatmapState? state = null, CustomResourceOptions? options = null)
            : base("fortios:firewall/centralsnatmap:Centralsnatmap", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Centralsnatmap resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Centralsnatmap Get(string name, Input<string> id, CentralsnatmapState? state = null, CustomResourceOptions? options = null)
        {
            return new Centralsnatmap(name, id, state, options);
        }
    }

    public sealed class CentralsnatmapArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        [Input("dstAddr6s")]
        private InputList<Inputs.CentralsnatmapDstAddr6Args>? _dstAddr6s;

        /// <summary>
        /// IPv6 Destination address. The structure of `dst_addr6` block is documented below.
        /// </summary>
        public InputList<Inputs.CentralsnatmapDstAddr6Args> DstAddr6s
        {
            get => _dstAddr6s ?? (_dstAddr6s = new InputList<Inputs.CentralsnatmapDstAddr6Args>());
            set => _dstAddr6s = value;
        }

        [Input("dstAddrs", required: true)]
        private InputList<Inputs.CentralsnatmapDstAddrArgs>? _dstAddrs;

        /// <summary>
        /// Destination address name from available addresses. The structure of `dst_addr` block is documented below.
        /// </summary>
        public InputList<Inputs.CentralsnatmapDstAddrArgs> DstAddrs
        {
            get => _dstAddrs ?? (_dstAddrs = new InputList<Inputs.CentralsnatmapDstAddrArgs>());
            set => _dstAddrs = value;
        }

        /// <summary>
        /// Destination port or port range (1 to 65535, 0 means any port).
        /// </summary>
        [Input("dstPort")]
        public Input<string>? DstPort { get; set; }

        [Input("dstintfs", required: true)]
        private InputList<Inputs.CentralsnatmapDstintfArgs>? _dstintfs;

        /// <summary>
        /// Destination interface name from available interfaces. The structure of `dstintf` block is documented below.
        /// </summary>
        public InputList<Inputs.CentralsnatmapDstintfArgs> Dstintfs
        {
            get => _dstintfs ?? (_dstintfs = new InputList<Inputs.CentralsnatmapDstintfArgs>());
            set => _dstintfs = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Enable/disable source NAT. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("nat", required: true)]
        public Input<string> Nat { get; set; } = null!;

        /// <summary>
        /// Enable/disable NAT46. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("nat46")]
        public Input<string>? Nat46 { get; set; }

        /// <summary>
        /// Enable/disable NAT64. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("nat64")]
        public Input<string>? Nat64 { get; set; }

        [Input("natIppool6s")]
        private InputList<Inputs.CentralsnatmapNatIppool6Args>? _natIppool6s;

        /// <summary>
        /// IPv6 pools to be used for source NAT. The structure of `nat_ippool6` block is documented below.
        /// </summary>
        public InputList<Inputs.CentralsnatmapNatIppool6Args> NatIppool6s
        {
            get => _natIppool6s ?? (_natIppool6s = new InputList<Inputs.CentralsnatmapNatIppool6Args>());
            set => _natIppool6s = value;
        }

        [Input("natIppools")]
        private InputList<Inputs.CentralsnatmapNatIppoolArgs>? _natIppools;

        /// <summary>
        /// Name of the IP pools to be used to translate addresses from available IP Pools. The structure of `nat_ippool` block is documented below.
        /// </summary>
        public InputList<Inputs.CentralsnatmapNatIppoolArgs> NatIppools
        {
            get => _natIppools ?? (_natIppools = new InputList<Inputs.CentralsnatmapNatIppoolArgs>());
            set => _natIppools = value;
        }

        /// <summary>
        /// Translated port or port range (0 to 65535, 0 means any port).
        /// </summary>
        [Input("natPort")]
        public Input<string>? NatPort { get; set; }

        [Input("origAddr6s")]
        private InputList<Inputs.CentralsnatmapOrigAddr6Args>? _origAddr6s;

        /// <summary>
        /// IPv6 Original address. The structure of `orig_addr6` block is documented below.
        /// </summary>
        public InputList<Inputs.CentralsnatmapOrigAddr6Args> OrigAddr6s
        {
            get => _origAddr6s ?? (_origAddr6s = new InputList<Inputs.CentralsnatmapOrigAddr6Args>());
            set => _origAddr6s = value;
        }

        [Input("origAddrs", required: true)]
        private InputList<Inputs.CentralsnatmapOrigAddrArgs>? _origAddrs;

        /// <summary>
        /// Original address. The structure of `orig_addr` block is documented below.
        /// </summary>
        public InputList<Inputs.CentralsnatmapOrigAddrArgs> OrigAddrs
        {
            get => _origAddrs ?? (_origAddrs = new InputList<Inputs.CentralsnatmapOrigAddrArgs>());
            set => _origAddrs = value;
        }

        /// <summary>
        /// Original TCP port (1 to 65535, 0 means any port).
        /// </summary>
        [Input("origPort", required: true)]
        public Input<string> OrigPort { get; set; } = null!;

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyid")]
        public Input<int>? Policyid { get; set; }

        /// <summary>
        /// Integer value for the protocol type (0 - 255).
        /// </summary>
        [Input("protocol", required: true)]
        public Input<int> Protocol { get; set; } = null!;

        [Input("srcintfs", required: true)]
        private InputList<Inputs.CentralsnatmapSrcintfArgs>? _srcintfs;

        /// <summary>
        /// Source interface name from available interfaces. The structure of `srcintf` block is documented below.
        /// </summary>
        public InputList<Inputs.CentralsnatmapSrcintfArgs> Srcintfs
        {
            get => _srcintfs ?? (_srcintfs = new InputList<Inputs.CentralsnatmapSrcintfArgs>());
            set => _srcintfs = value;
        }

        /// <summary>
        /// Enable/disable the active status of this policy. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// IPv4/IPv6 source NAT. Valid values: `ipv4`, `ipv6`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public CentralsnatmapArgs()
        {
        }
        public static new CentralsnatmapArgs Empty => new CentralsnatmapArgs();
    }

    public sealed class CentralsnatmapState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        [Input("dstAddr6s")]
        private InputList<Inputs.CentralsnatmapDstAddr6GetArgs>? _dstAddr6s;

        /// <summary>
        /// IPv6 Destination address. The structure of `dst_addr6` block is documented below.
        /// </summary>
        public InputList<Inputs.CentralsnatmapDstAddr6GetArgs> DstAddr6s
        {
            get => _dstAddr6s ?? (_dstAddr6s = new InputList<Inputs.CentralsnatmapDstAddr6GetArgs>());
            set => _dstAddr6s = value;
        }

        [Input("dstAddrs")]
        private InputList<Inputs.CentralsnatmapDstAddrGetArgs>? _dstAddrs;

        /// <summary>
        /// Destination address name from available addresses. The structure of `dst_addr` block is documented below.
        /// </summary>
        public InputList<Inputs.CentralsnatmapDstAddrGetArgs> DstAddrs
        {
            get => _dstAddrs ?? (_dstAddrs = new InputList<Inputs.CentralsnatmapDstAddrGetArgs>());
            set => _dstAddrs = value;
        }

        /// <summary>
        /// Destination port or port range (1 to 65535, 0 means any port).
        /// </summary>
        [Input("dstPort")]
        public Input<string>? DstPort { get; set; }

        [Input("dstintfs")]
        private InputList<Inputs.CentralsnatmapDstintfGetArgs>? _dstintfs;

        /// <summary>
        /// Destination interface name from available interfaces. The structure of `dstintf` block is documented below.
        /// </summary>
        public InputList<Inputs.CentralsnatmapDstintfGetArgs> Dstintfs
        {
            get => _dstintfs ?? (_dstintfs = new InputList<Inputs.CentralsnatmapDstintfGetArgs>());
            set => _dstintfs = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Enable/disable source NAT. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("nat")]
        public Input<string>? Nat { get; set; }

        /// <summary>
        /// Enable/disable NAT46. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("nat46")]
        public Input<string>? Nat46 { get; set; }

        /// <summary>
        /// Enable/disable NAT64. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("nat64")]
        public Input<string>? Nat64 { get; set; }

        [Input("natIppool6s")]
        private InputList<Inputs.CentralsnatmapNatIppool6GetArgs>? _natIppool6s;

        /// <summary>
        /// IPv6 pools to be used for source NAT. The structure of `nat_ippool6` block is documented below.
        /// </summary>
        public InputList<Inputs.CentralsnatmapNatIppool6GetArgs> NatIppool6s
        {
            get => _natIppool6s ?? (_natIppool6s = new InputList<Inputs.CentralsnatmapNatIppool6GetArgs>());
            set => _natIppool6s = value;
        }

        [Input("natIppools")]
        private InputList<Inputs.CentralsnatmapNatIppoolGetArgs>? _natIppools;

        /// <summary>
        /// Name of the IP pools to be used to translate addresses from available IP Pools. The structure of `nat_ippool` block is documented below.
        /// </summary>
        public InputList<Inputs.CentralsnatmapNatIppoolGetArgs> NatIppools
        {
            get => _natIppools ?? (_natIppools = new InputList<Inputs.CentralsnatmapNatIppoolGetArgs>());
            set => _natIppools = value;
        }

        /// <summary>
        /// Translated port or port range (0 to 65535, 0 means any port).
        /// </summary>
        [Input("natPort")]
        public Input<string>? NatPort { get; set; }

        [Input("origAddr6s")]
        private InputList<Inputs.CentralsnatmapOrigAddr6GetArgs>? _origAddr6s;

        /// <summary>
        /// IPv6 Original address. The structure of `orig_addr6` block is documented below.
        /// </summary>
        public InputList<Inputs.CentralsnatmapOrigAddr6GetArgs> OrigAddr6s
        {
            get => _origAddr6s ?? (_origAddr6s = new InputList<Inputs.CentralsnatmapOrigAddr6GetArgs>());
            set => _origAddr6s = value;
        }

        [Input("origAddrs")]
        private InputList<Inputs.CentralsnatmapOrigAddrGetArgs>? _origAddrs;

        /// <summary>
        /// Original address. The structure of `orig_addr` block is documented below.
        /// </summary>
        public InputList<Inputs.CentralsnatmapOrigAddrGetArgs> OrigAddrs
        {
            get => _origAddrs ?? (_origAddrs = new InputList<Inputs.CentralsnatmapOrigAddrGetArgs>());
            set => _origAddrs = value;
        }

        /// <summary>
        /// Original TCP port (1 to 65535, 0 means any port).
        /// </summary>
        [Input("origPort")]
        public Input<string>? OrigPort { get; set; }

        /// <summary>
        /// Policy ID.
        /// </summary>
        [Input("policyid")]
        public Input<int>? Policyid { get; set; }

        /// <summary>
        /// Integer value for the protocol type (0 - 255).
        /// </summary>
        [Input("protocol")]
        public Input<int>? Protocol { get; set; }

        [Input("srcintfs")]
        private InputList<Inputs.CentralsnatmapSrcintfGetArgs>? _srcintfs;

        /// <summary>
        /// Source interface name from available interfaces. The structure of `srcintf` block is documented below.
        /// </summary>
        public InputList<Inputs.CentralsnatmapSrcintfGetArgs> Srcintfs
        {
            get => _srcintfs ?? (_srcintfs = new InputList<Inputs.CentralsnatmapSrcintfGetArgs>());
            set => _srcintfs = value;
        }

        /// <summary>
        /// Enable/disable the active status of this policy. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// IPv4/IPv6 source NAT. Valid values: `ipv4`, `ipv6`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public CentralsnatmapState()
        {
        }
        public static new CentralsnatmapState Empty => new CentralsnatmapState();
    }
}
