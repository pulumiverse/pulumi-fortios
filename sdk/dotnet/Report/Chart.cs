// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Report
{
    /// <summary>
    /// Report chart widget configuration. Applies to FortiOS Version `&lt;= 7.0.0`.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.Report.Chart("trname", new()
    ///     {
    ///         Category = "misc",
    ///         Comments = "test report chart",
    ///         Dataset = "s1",
    ///         Dimension = "3D",
    ///         Favorite = "no",
    ///         GraphType = "none",
    ///         Legend = "enable",
    ///         LegendFontSize = 0,
    ///         Period = "last24h",
    ///         Policy = 0,
    ///         Style = "auto",
    ///         TitleFontSize = 0,
    ///         Type = "graph",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Report Chart can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:report/chart:Chart labelname {{name}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:report/chart:Chart labelname {{name}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:report/chart:Chart")]
    public partial class Chart : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Chart background.
        /// </summary>
        [Output("background")]
        public Output<string> Background { get; private set; } = null!;

        /// <summary>
        /// Category. Valid values: `misc`, `traffic`, `event`, `virus`, `webfilter`, `attack`, `spam`, `dlp`, `app-ctrl`, `vulnerability`.
        /// </summary>
        [Output("category")]
        public Output<string> Category { get; private set; } = null!;

        /// <summary>
        /// Category series of pie chart. The structure of `category_series` block is documented below.
        /// </summary>
        [Output("categorySeries")]
        public Output<Outputs.ChartCategorySeries> CategorySeries { get; private set; } = null!;

        /// <summary>
        /// Color palette (system will pick color automatically by default).
        /// </summary>
        [Output("colorPalette")]
        public Output<string> ColorPalette { get; private set; } = null!;

        /// <summary>
        /// Table column definition. The structure of `column` block is documented below.
        /// </summary>
        [Output("columns")]
        public Output<ImmutableArray<Outputs.ChartColumn>> Columns { get; private set; } = null!;

        /// <summary>
        /// Comment.
        /// </summary>
        [Output("comments")]
        public Output<string> Comments { get; private set; } = null!;

        /// <summary>
        /// Bind dataset to chart.
        /// </summary>
        [Output("dataset")]
        public Output<string> Dataset { get; private set; } = null!;

        /// <summary>
        /// Dimension. Valid values: `2D`, `3D`.
        /// </summary>
        [Output("dimension")]
        public Output<string> Dimension { get; private set; } = null!;

        /// <summary>
        /// Drill down charts. The structure of `drill_down_charts` block is documented below.
        /// </summary>
        [Output("drillDownCharts")]
        public Output<ImmutableArray<Outputs.ChartDrillDownChart>> DrillDownCharts { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Favorite. Valid values: `no`, `yes`.
        /// </summary>
        [Output("favorite")]
        public Output<string> Favorite { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// Graph type. Valid values: `none`, `bar`, `pie`, `line`, `flow`.
        /// </summary>
        [Output("graphType")]
        public Output<string> GraphType { get; private set; } = null!;

        /// <summary>
        /// Enable/Disable Legend area. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("legend")]
        public Output<string> Legend { get; private set; } = null!;

        /// <summary>
        /// Font size of legend area.
        /// </summary>
        [Output("legendFontSize")]
        public Output<int> LegendFontSize { get; private set; } = null!;

        /// <summary>
        /// Chart Widget Name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Time period. Valid values: `last24h`, `last7d`.
        /// </summary>
        [Output("period")]
        public Output<string> Period { get; private set; } = null!;

        /// <summary>
        /// Used by monitor policy.
        /// </summary>
        [Output("policy")]
        public Output<int> Policy { get; private set; } = null!;

        /// <summary>
        /// Style. Valid values: `auto`, `manual`.
        /// </summary>
        [Output("style")]
        public Output<string> Style { get; private set; } = null!;

        /// <summary>
        /// Chart title.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// Font size of chart title.
        /// </summary>
        [Output("titleFontSize")]
        public Output<int> TitleFontSize { get; private set; } = null!;

        /// <summary>
        /// Chart type. Valid values: `graph`, `table`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Value series of pie chart. The structure of `value_series` block is documented below.
        /// </summary>
        [Output("valueSeries")]
        public Output<Outputs.ChartValueSeries> ValueSeries { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// X-series of chart. The structure of `x_series` block is documented below.
        /// </summary>
        [Output("xSeries")]
        public Output<Outputs.ChartXSeries> XSeries { get; private set; } = null!;

        /// <summary>
        /// Y-series of chart. The structure of `y_series` block is documented below.
        /// </summary>
        [Output("ySeries")]
        public Output<Outputs.ChartYSeries> YSeries { get; private set; } = null!;


        /// <summary>
        /// Create a Chart resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Chart(string name, ChartArgs args, CustomResourceOptions? options = null)
            : base("fortios:report/chart:Chart", name, args ?? new ChartArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Chart(string name, Input<string> id, ChartState? state = null, CustomResourceOptions? options = null)
            : base("fortios:report/chart:Chart", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Chart resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Chart Get(string name, Input<string> id, ChartState? state = null, CustomResourceOptions? options = null)
        {
            return new Chart(name, id, state, options);
        }
    }

    public sealed class ChartArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Chart background.
        /// </summary>
        [Input("background")]
        public Input<string>? Background { get; set; }

        /// <summary>
        /// Category. Valid values: `misc`, `traffic`, `event`, `virus`, `webfilter`, `attack`, `spam`, `dlp`, `app-ctrl`, `vulnerability`.
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// Category series of pie chart. The structure of `category_series` block is documented below.
        /// </summary>
        [Input("categorySeries")]
        public Input<Inputs.ChartCategorySeriesArgs>? CategorySeries { get; set; }

        /// <summary>
        /// Color palette (system will pick color automatically by default).
        /// </summary>
        [Input("colorPalette")]
        public Input<string>? ColorPalette { get; set; }

        [Input("columns")]
        private InputList<Inputs.ChartColumnArgs>? _columns;

        /// <summary>
        /// Table column definition. The structure of `column` block is documented below.
        /// </summary>
        public InputList<Inputs.ChartColumnArgs> Columns
        {
            get => _columns ?? (_columns = new InputList<Inputs.ChartColumnArgs>());
            set => _columns = value;
        }

        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comments", required: true)]
        public Input<string> Comments { get; set; } = null!;

        /// <summary>
        /// Bind dataset to chart.
        /// </summary>
        [Input("dataset", required: true)]
        public Input<string> Dataset { get; set; } = null!;

        /// <summary>
        /// Dimension. Valid values: `2D`, `3D`.
        /// </summary>
        [Input("dimension")]
        public Input<string>? Dimension { get; set; }

        [Input("drillDownCharts")]
        private InputList<Inputs.ChartDrillDownChartArgs>? _drillDownCharts;

        /// <summary>
        /// Drill down charts. The structure of `drill_down_charts` block is documented below.
        /// </summary>
        public InputList<Inputs.ChartDrillDownChartArgs> DrillDownCharts
        {
            get => _drillDownCharts ?? (_drillDownCharts = new InputList<Inputs.ChartDrillDownChartArgs>());
            set => _drillDownCharts = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Favorite. Valid values: `no`, `yes`.
        /// </summary>
        [Input("favorite")]
        public Input<string>? Favorite { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Graph type. Valid values: `none`, `bar`, `pie`, `line`, `flow`.
        /// </summary>
        [Input("graphType")]
        public Input<string>? GraphType { get; set; }

        /// <summary>
        /// Enable/Disable Legend area. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("legend")]
        public Input<string>? Legend { get; set; }

        /// <summary>
        /// Font size of legend area.
        /// </summary>
        [Input("legendFontSize")]
        public Input<int>? LegendFontSize { get; set; }

        /// <summary>
        /// Chart Widget Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Time period. Valid values: `last24h`, `last7d`.
        /// </summary>
        [Input("period")]
        public Input<string>? Period { get; set; }

        /// <summary>
        /// Used by monitor policy.
        /// </summary>
        [Input("policy")]
        public Input<int>? Policy { get; set; }

        /// <summary>
        /// Style. Valid values: `auto`, `manual`.
        /// </summary>
        [Input("style")]
        public Input<string>? Style { get; set; }

        /// <summary>
        /// Chart title.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// Font size of chart title.
        /// </summary>
        [Input("titleFontSize")]
        public Input<int>? TitleFontSize { get; set; }

        /// <summary>
        /// Chart type. Valid values: `graph`, `table`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Value series of pie chart. The structure of `value_series` block is documented below.
        /// </summary>
        [Input("valueSeries")]
        public Input<Inputs.ChartValueSeriesArgs>? ValueSeries { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// X-series of chart. The structure of `x_series` block is documented below.
        /// </summary>
        [Input("xSeries")]
        public Input<Inputs.ChartXSeriesArgs>? XSeries { get; set; }

        /// <summary>
        /// Y-series of chart. The structure of `y_series` block is documented below.
        /// </summary>
        [Input("ySeries")]
        public Input<Inputs.ChartYSeriesArgs>? YSeries { get; set; }

        public ChartArgs()
        {
        }
        public static new ChartArgs Empty => new ChartArgs();
    }

    public sealed class ChartState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Chart background.
        /// </summary>
        [Input("background")]
        public Input<string>? Background { get; set; }

        /// <summary>
        /// Category. Valid values: `misc`, `traffic`, `event`, `virus`, `webfilter`, `attack`, `spam`, `dlp`, `app-ctrl`, `vulnerability`.
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// Category series of pie chart. The structure of `category_series` block is documented below.
        /// </summary>
        [Input("categorySeries")]
        public Input<Inputs.ChartCategorySeriesGetArgs>? CategorySeries { get; set; }

        /// <summary>
        /// Color palette (system will pick color automatically by default).
        /// </summary>
        [Input("colorPalette")]
        public Input<string>? ColorPalette { get; set; }

        [Input("columns")]
        private InputList<Inputs.ChartColumnGetArgs>? _columns;

        /// <summary>
        /// Table column definition. The structure of `column` block is documented below.
        /// </summary>
        public InputList<Inputs.ChartColumnGetArgs> Columns
        {
            get => _columns ?? (_columns = new InputList<Inputs.ChartColumnGetArgs>());
            set => _columns = value;
        }

        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// Bind dataset to chart.
        /// </summary>
        [Input("dataset")]
        public Input<string>? Dataset { get; set; }

        /// <summary>
        /// Dimension. Valid values: `2D`, `3D`.
        /// </summary>
        [Input("dimension")]
        public Input<string>? Dimension { get; set; }

        [Input("drillDownCharts")]
        private InputList<Inputs.ChartDrillDownChartGetArgs>? _drillDownCharts;

        /// <summary>
        /// Drill down charts. The structure of `drill_down_charts` block is documented below.
        /// </summary>
        public InputList<Inputs.ChartDrillDownChartGetArgs> DrillDownCharts
        {
            get => _drillDownCharts ?? (_drillDownCharts = new InputList<Inputs.ChartDrillDownChartGetArgs>());
            set => _drillDownCharts = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Favorite. Valid values: `no`, `yes`.
        /// </summary>
        [Input("favorite")]
        public Input<string>? Favorite { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Graph type. Valid values: `none`, `bar`, `pie`, `line`, `flow`.
        /// </summary>
        [Input("graphType")]
        public Input<string>? GraphType { get; set; }

        /// <summary>
        /// Enable/Disable Legend area. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("legend")]
        public Input<string>? Legend { get; set; }

        /// <summary>
        /// Font size of legend area.
        /// </summary>
        [Input("legendFontSize")]
        public Input<int>? LegendFontSize { get; set; }

        /// <summary>
        /// Chart Widget Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Time period. Valid values: `last24h`, `last7d`.
        /// </summary>
        [Input("period")]
        public Input<string>? Period { get; set; }

        /// <summary>
        /// Used by monitor policy.
        /// </summary>
        [Input("policy")]
        public Input<int>? Policy { get; set; }

        /// <summary>
        /// Style. Valid values: `auto`, `manual`.
        /// </summary>
        [Input("style")]
        public Input<string>? Style { get; set; }

        /// <summary>
        /// Chart title.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// Font size of chart title.
        /// </summary>
        [Input("titleFontSize")]
        public Input<int>? TitleFontSize { get; set; }

        /// <summary>
        /// Chart type. Valid values: `graph`, `table`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Value series of pie chart. The structure of `value_series` block is documented below.
        /// </summary>
        [Input("valueSeries")]
        public Input<Inputs.ChartValueSeriesGetArgs>? ValueSeries { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// X-series of chart. The structure of `x_series` block is documented below.
        /// </summary>
        [Input("xSeries")]
        public Input<Inputs.ChartXSeriesGetArgs>? XSeries { get; set; }

        /// <summary>
        /// Y-series of chart. The structure of `y_series` block is documented below.
        /// </summary>
        [Input("ySeries")]
        public Input<Inputs.ChartYSeriesGetArgs>? YSeries { get; set; }

        public ChartState()
        {
        }
        public static new ChartState Empty => new ChartState();
    }
}
