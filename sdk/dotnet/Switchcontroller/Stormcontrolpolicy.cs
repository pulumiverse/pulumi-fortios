// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Switchcontroller
{
    /// <summary>
    /// Configure FortiSwitch storm control policy to be applied on managed-switch ports. Applies to FortiOS Version `&gt;= 6.2.4`.
    /// 
    /// ## Import
    /// 
    /// SwitchController StormControlPolicy can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:switchcontroller/stormcontrolpolicy:Stormcontrolpolicy labelname {{name}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:switchcontroller/stormcontrolpolicy:Stormcontrolpolicy labelname {{name}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:switchcontroller/stormcontrolpolicy:Stormcontrolpolicy")]
    public partial class Stormcontrolpolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable/disable storm control to drop/allow broadcast traffic in override mode. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("broadcast")]
        public Output<string> Broadcast { get; private set; } = null!;

        /// <summary>
        /// Description of the storm control policy.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Storm control policy name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Threshold rate in packets per second at which storm traffic is controlled in override mode (default=500, 0 to drop all).
        /// </summary>
        [Output("rate")]
        public Output<int> Rate { get; private set; } = null!;

        /// <summary>
        /// Set Storm control mode. Valid values: `global`, `override`, `disabled`.
        /// </summary>
        [Output("stormControlMode")]
        public Output<string> StormControlMode { get; private set; } = null!;

        /// <summary>
        /// Enable/disable storm control to drop/allow unknown multicast traffic in override mode. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("unknownMulticast")]
        public Output<string> UnknownMulticast { get; private set; } = null!;

        /// <summary>
        /// Enable/disable storm control to drop/allow unknown unicast traffic in override mode. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("unknownUnicast")]
        public Output<string> UnknownUnicast { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Stormcontrolpolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Stormcontrolpolicy(string name, StormcontrolpolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:switchcontroller/stormcontrolpolicy:Stormcontrolpolicy", name, args ?? new StormcontrolpolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Stormcontrolpolicy(string name, Input<string> id, StormcontrolpolicyState? state = null, CustomResourceOptions? options = null)
            : base("fortios:switchcontroller/stormcontrolpolicy:Stormcontrolpolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Stormcontrolpolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Stormcontrolpolicy Get(string name, Input<string> id, StormcontrolpolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new Stormcontrolpolicy(name, id, state, options);
        }
    }

    public sealed class StormcontrolpolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable storm control to drop/allow broadcast traffic in override mode. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("broadcast")]
        public Input<string>? Broadcast { get; set; }

        /// <summary>
        /// Description of the storm control policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Storm control policy name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Threshold rate in packets per second at which storm traffic is controlled in override mode (default=500, 0 to drop all).
        /// </summary>
        [Input("rate")]
        public Input<int>? Rate { get; set; }

        /// <summary>
        /// Set Storm control mode. Valid values: `global`, `override`, `disabled`.
        /// </summary>
        [Input("stormControlMode")]
        public Input<string>? StormControlMode { get; set; }

        /// <summary>
        /// Enable/disable storm control to drop/allow unknown multicast traffic in override mode. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("unknownMulticast")]
        public Input<string>? UnknownMulticast { get; set; }

        /// <summary>
        /// Enable/disable storm control to drop/allow unknown unicast traffic in override mode. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("unknownUnicast")]
        public Input<string>? UnknownUnicast { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public StormcontrolpolicyArgs()
        {
        }
        public static new StormcontrolpolicyArgs Empty => new StormcontrolpolicyArgs();
    }

    public sealed class StormcontrolpolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable storm control to drop/allow broadcast traffic in override mode. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("broadcast")]
        public Input<string>? Broadcast { get; set; }

        /// <summary>
        /// Description of the storm control policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Storm control policy name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Threshold rate in packets per second at which storm traffic is controlled in override mode (default=500, 0 to drop all).
        /// </summary>
        [Input("rate")]
        public Input<int>? Rate { get; set; }

        /// <summary>
        /// Set Storm control mode. Valid values: `global`, `override`, `disabled`.
        /// </summary>
        [Input("stormControlMode")]
        public Input<string>? StormControlMode { get; set; }

        /// <summary>
        /// Enable/disable storm control to drop/allow unknown multicast traffic in override mode. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("unknownMulticast")]
        public Input<string>? UnknownMulticast { get; set; }

        /// <summary>
        /// Enable/disable storm control to drop/allow unknown unicast traffic in override mode. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("unknownUnicast")]
        public Input<string>? UnknownUnicast { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public StormcontrolpolicyState()
        {
        }
        public static new StormcontrolpolicyState Empty => new StormcontrolpolicyState();
    }
}
