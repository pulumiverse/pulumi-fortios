// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Switchcontroller
{
    /// <summary>
    /// Configure VLANs for switch controller. Applies to FortiOS Version `&lt;= 6.2.0`.
    /// 
    /// ## Import
    /// 
    /// SwitchController Vlan can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:switchcontroller/vlan:Vlan labelname {{name}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:switchcontroller/vlan:Vlan labelname {{name}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:switchcontroller/vlan:Vlan")]
    public partial class Vlan : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Authentication. Valid values: `radius`, `usergroup`.
        /// </summary>
        [Output("auth")]
        public Output<string> Auth { get; private set; } = null!;

        /// <summary>
        /// Color of icon on the GUI.
        /// </summary>
        [Output("color")]
        public Output<int> Color { get; private set; } = null!;

        /// <summary>
        /// Comment.
        /// </summary>
        [Output("comments")]
        public Output<string> Comments { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// Switch VLAN name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specify captive portal replacement message override group.
        /// </summary>
        [Output("portalMessageOverrideGroup")]
        public Output<string> PortalMessageOverrideGroup { get; private set; } = null!;

        /// <summary>
        /// Individual message overrides. The structure of `portal_message_overrides` block is documented below.
        /// </summary>
        [Output("portalMessageOverrides")]
        public Output<Outputs.VlanPortalMessageOverrides> PortalMessageOverrides { get; private set; } = null!;

        /// <summary>
        /// Authentication radius server.
        /// </summary>
        [Output("radiusServer")]
        public Output<string> RadiusServer { get; private set; } = null!;

        /// <summary>
        /// Security. Valid values: `open`, `captive-portal`, `8021x`.
        /// </summary>
        [Output("security")]
        public Output<string> Security { get; private set; } = null!;

        /// <summary>
        /// Selected user group. The structure of `selected_usergroups` block is documented below.
        /// </summary>
        [Output("selectedUsergroups")]
        public Output<ImmutableArray<Outputs.VlanSelectedUsergroup>> SelectedUsergroups { get; private set; } = null!;

        /// <summary>
        /// Authentication usergroup.
        /// </summary>
        [Output("usergroup")]
        public Output<string> Usergroup { get; private set; } = null!;

        /// <summary>
        /// Virtual domain,
        /// </summary>
        [Output("vdom")]
        public Output<string> Vdom { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// VLAN ID.
        /// </summary>
        [Output("vlanid")]
        public Output<int> Vlanid { get; private set; } = null!;


        /// <summary>
        /// Create a Vlan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Vlan(string name, VlanArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:switchcontroller/vlan:Vlan", name, args ?? new VlanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Vlan(string name, Input<string> id, VlanState? state = null, CustomResourceOptions? options = null)
            : base("fortios:switchcontroller/vlan:Vlan", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Vlan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Vlan Get(string name, Input<string> id, VlanState? state = null, CustomResourceOptions? options = null)
        {
            return new Vlan(name, id, state, options);
        }
    }

    public sealed class VlanArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authentication. Valid values: `radius`, `usergroup`.
        /// </summary>
        [Input("auth")]
        public Input<string>? Auth { get; set; }

        /// <summary>
        /// Color of icon on the GUI.
        /// </summary>
        [Input("color")]
        public Input<int>? Color { get; set; }

        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Switch VLAN name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specify captive portal replacement message override group.
        /// </summary>
        [Input("portalMessageOverrideGroup")]
        public Input<string>? PortalMessageOverrideGroup { get; set; }

        /// <summary>
        /// Individual message overrides. The structure of `portal_message_overrides` block is documented below.
        /// </summary>
        [Input("portalMessageOverrides")]
        public Input<Inputs.VlanPortalMessageOverridesArgs>? PortalMessageOverrides { get; set; }

        /// <summary>
        /// Authentication radius server.
        /// </summary>
        [Input("radiusServer")]
        public Input<string>? RadiusServer { get; set; }

        /// <summary>
        /// Security. Valid values: `open`, `captive-portal`, `8021x`.
        /// </summary>
        [Input("security")]
        public Input<string>? Security { get; set; }

        [Input("selectedUsergroups")]
        private InputList<Inputs.VlanSelectedUsergroupArgs>? _selectedUsergroups;

        /// <summary>
        /// Selected user group. The structure of `selected_usergroups` block is documented below.
        /// </summary>
        public InputList<Inputs.VlanSelectedUsergroupArgs> SelectedUsergroups
        {
            get => _selectedUsergroups ?? (_selectedUsergroups = new InputList<Inputs.VlanSelectedUsergroupArgs>());
            set => _selectedUsergroups = value;
        }

        /// <summary>
        /// Authentication usergroup.
        /// </summary>
        [Input("usergroup")]
        public Input<string>? Usergroup { get; set; }

        /// <summary>
        /// Virtual domain,
        /// </summary>
        [Input("vdom")]
        public Input<string>? Vdom { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// VLAN ID.
        /// </summary>
        [Input("vlanid")]
        public Input<int>? Vlanid { get; set; }

        public VlanArgs()
        {
        }
        public static new VlanArgs Empty => new VlanArgs();
    }

    public sealed class VlanState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authentication. Valid values: `radius`, `usergroup`.
        /// </summary>
        [Input("auth")]
        public Input<string>? Auth { get; set; }

        /// <summary>
        /// Color of icon on the GUI.
        /// </summary>
        [Input("color")]
        public Input<int>? Color { get; set; }

        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Switch VLAN name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specify captive portal replacement message override group.
        /// </summary>
        [Input("portalMessageOverrideGroup")]
        public Input<string>? PortalMessageOverrideGroup { get; set; }

        /// <summary>
        /// Individual message overrides. The structure of `portal_message_overrides` block is documented below.
        /// </summary>
        [Input("portalMessageOverrides")]
        public Input<Inputs.VlanPortalMessageOverridesGetArgs>? PortalMessageOverrides { get; set; }

        /// <summary>
        /// Authentication radius server.
        /// </summary>
        [Input("radiusServer")]
        public Input<string>? RadiusServer { get; set; }

        /// <summary>
        /// Security. Valid values: `open`, `captive-portal`, `8021x`.
        /// </summary>
        [Input("security")]
        public Input<string>? Security { get; set; }

        [Input("selectedUsergroups")]
        private InputList<Inputs.VlanSelectedUsergroupGetArgs>? _selectedUsergroups;

        /// <summary>
        /// Selected user group. The structure of `selected_usergroups` block is documented below.
        /// </summary>
        public InputList<Inputs.VlanSelectedUsergroupGetArgs> SelectedUsergroups
        {
            get => _selectedUsergroups ?? (_selectedUsergroups = new InputList<Inputs.VlanSelectedUsergroupGetArgs>());
            set => _selectedUsergroups = value;
        }

        /// <summary>
        /// Authentication usergroup.
        /// </summary>
        [Input("usergroup")]
        public Input<string>? Usergroup { get; set; }

        /// <summary>
        /// Virtual domain,
        /// </summary>
        [Input("vdom")]
        public Input<string>? Vdom { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// VLAN ID.
        /// </summary>
        [Input("vlanid")]
        public Input<int>? Vlanid { get; set; }

        public VlanState()
        {
        }
        public static new VlanState Empty => new VlanState();
    }
}
