// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Switchcontroller
{
    /// <summary>
    /// Configure FortiSwitch global settings.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.Switchcontroller.Global("trname", new()
    ///     {
    ///         AllowMultipleInterfaces = "disable",
    ///         HttpsImagePush = "disable",
    ///         LogMacLimitViolations = "disable",
    ///         MacAgingInterval = 332,
    ///         MacRetentionPeriod = 24,
    ///         MacViolationTimer = 0,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// SwitchController Global can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:switchcontroller/global:Global labelname SwitchControllerGlobal
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:switchcontroller/global:Global labelname SwitchControllerGlobal
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:switchcontroller/global:Global")]
    public partial class Global : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable/disable multiple FortiLink interfaces for redundant connections between a managed FortiSwitch and FortiGate. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("allowMultipleInterfaces")]
        public Output<string> AllowMultipleInterfaces { get; private set; } = null!;

        /// <summary>
        /// Enable/disable bouncing (administratively bring the link down, up) of a switch port where a quarantined device was seen last. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("bounceQuarantinedLink")]
        public Output<string> BounceQuarantinedLink { get; private set; } = null!;

        /// <summary>
        /// List of custom commands to be pushed to all FortiSwitches in the VDOM. The structure of `custom_command` block is documented below.
        /// </summary>
        [Output("customCommands")]
        public Output<ImmutableArray<Outputs.GlobalCustomCommand>> CustomCommands { get; private set; } = null!;

        /// <summary>
        /// Default VLAN for ports when added to the virtual-switch.
        /// </summary>
        [Output("defaultVirtualSwitchVlan")]
        public Output<string> DefaultVirtualSwitchVlan { get; private set; } = null!;

        /// <summary>
        /// List the parameters to be included to inform about client identification. Valid values: `intfname`, `vlan`, `hostname`, `mode`, `description`.
        /// </summary>
        [Output("dhcpOption82CircuitId")]
        public Output<string> DhcpOption82CircuitId { get; private set; } = null!;

        /// <summary>
        /// DHCP option-82 format string. Valid values: `ascii`, `legacy`.
        /// </summary>
        [Output("dhcpOption82Format")]
        public Output<string> DhcpOption82Format { get; private set; } = null!;

        /// <summary>
        /// List the parameters to be included to inform about client identification. Valid values: `mac`, `hostname`, `ip`.
        /// </summary>
        [Output("dhcpOption82RemoteId")]
        public Output<string> DhcpOption82RemoteId { get; private set; } = null!;

        /// <summary>
        /// Enable/disable DHCP snooping server access list. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("dhcpServerAccessList")]
        public Output<string> DhcpServerAccessList { get; private set; } = null!;

        /// <summary>
        /// Expiry time for DHCP snooping server database entries (300 - 259200 sec, default = 86400 sec).
        /// </summary>
        [Output("dhcpSnoopClientDbExp")]
        public Output<int> DhcpSnoopClientDbExp { get; private set; } = null!;

        /// <summary>
        /// Client DHCP packet broadcast mode. Valid values: `drop-untrusted`, `forward-untrusted`.
        /// </summary>
        [Output("dhcpSnoopClientReq")]
        public Output<string> DhcpSnoopClientReq { get; private set; } = null!;

        /// <summary>
        /// Per Interface dhcp-server entries learn limit (0 - 1024, default = 64).
        /// </summary>
        [Output("dhcpSnoopDbPerPortLearnLimit")]
        public Output<int> DhcpSnoopDbPerPortLearnLimit { get; private set; } = null!;

        /// <summary>
        /// Prevent this FortiSwitch from discovering. The structure of `disable_discovery` block is documented below.
        /// </summary>
        [Output("disableDiscoveries")]
        public Output<ImmutableArray<Outputs.GlobalDisableDiscovery>> DisableDiscoveries { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Enable/disable enforcement of FIPS on managed FortiSwitch devices. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("fipsEnforce")]
        public Output<string> FipsEnforce { get; private set; } = null!;

        /// <summary>
        /// Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("firmwareProvisionOnAuthorization")]
        public Output<string> FirmwareProvisionOnAuthorization { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// Enable/disable image push to FortiSwitch using HTTPS. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("httpsImagePush")]
        public Output<string> HttpsImagePush { get; private set; } = null!;

        /// <summary>
        /// Enable/disable logs for Learning Limit Violations. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("logMacLimitViolations")]
        public Output<string> LogMacLimitViolations { get; private set; } = null!;

        /// <summary>
        /// Time after which an inactive MAC is aged out (10 - 1000000 sec, default = 300, 0 = disable).
        /// </summary>
        [Output("macAgingInterval")]
        public Output<int> MacAgingInterval { get; private set; } = null!;

        /// <summary>
        /// Enable/disable MAC address event logging. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("macEventLogging")]
        public Output<string> MacEventLogging { get; private set; } = null!;

        /// <summary>
        /// Time in hours after which an inactive MAC is removed from client DB.
        /// </summary>
        [Output("macRetentionPeriod")]
        public Output<int> MacRetentionPeriod { get; private set; } = null!;

        /// <summary>
        /// Set timeout for Learning Limit Violations (0 = disabled).
        /// </summary>
        [Output("macViolationTimer")]
        public Output<int> MacViolationTimer { get; private set; } = null!;

        /// <summary>
        /// Quarantine mode. Valid values: `by-vlan`, `by-redirect`.
        /// </summary>
        [Output("quarantineMode")]
        public Output<string> QuarantineMode { get; private set; } = null!;

        /// <summary>
        /// Enable/disable DNS resolution of the FortiSwitch unit's IP address by use of its serial number. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("snDnsResolution")]
        public Output<string> SnDnsResolution { get; private set; } = null!;

        /// <summary>
        /// Control which sources update the device user list. Valid values: `mac-cache`, `lldp`, `dhcp-snooping`, `l2-db`, `l3-db`.
        /// </summary>
        [Output("updateUserDevice")]
        public Output<string> UpdateUserDevice { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// VLAN configuration mode, user-defined-vlans or all-possible-vlans. Valid values: `all`, `defined`.
        /// </summary>
        [Output("vlanAllMode")]
        public Output<string> VlanAllMode { get; private set; } = null!;

        /// <summary>
        /// Identity of the VLAN. Commonly used for RADIUS Tunnel-Private-Group-Id. Valid values: `description`, `name`.
        /// </summary>
        [Output("vlanIdentity")]
        public Output<string> VlanIdentity { get; private set; } = null!;

        /// <summary>
        /// FortiLink VLAN optimization. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("vlanOptimization")]
        public Output<string> VlanOptimization { get; private set; } = null!;


        /// <summary>
        /// Create a Global resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Global(string name, GlobalArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:switchcontroller/global:Global", name, args ?? new GlobalArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Global(string name, Input<string> id, GlobalState? state = null, CustomResourceOptions? options = null)
            : base("fortios:switchcontroller/global:Global", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Global resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Global Get(string name, Input<string> id, GlobalState? state = null, CustomResourceOptions? options = null)
        {
            return new Global(name, id, state, options);
        }
    }

    public sealed class GlobalArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable multiple FortiLink interfaces for redundant connections between a managed FortiSwitch and FortiGate. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("allowMultipleInterfaces")]
        public Input<string>? AllowMultipleInterfaces { get; set; }

        /// <summary>
        /// Enable/disable bouncing (administratively bring the link down, up) of a switch port where a quarantined device was seen last. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("bounceQuarantinedLink")]
        public Input<string>? BounceQuarantinedLink { get; set; }

        [Input("customCommands")]
        private InputList<Inputs.GlobalCustomCommandArgs>? _customCommands;

        /// <summary>
        /// List of custom commands to be pushed to all FortiSwitches in the VDOM. The structure of `custom_command` block is documented below.
        /// </summary>
        public InputList<Inputs.GlobalCustomCommandArgs> CustomCommands
        {
            get => _customCommands ?? (_customCommands = new InputList<Inputs.GlobalCustomCommandArgs>());
            set => _customCommands = value;
        }

        /// <summary>
        /// Default VLAN for ports when added to the virtual-switch.
        /// </summary>
        [Input("defaultVirtualSwitchVlan")]
        public Input<string>? DefaultVirtualSwitchVlan { get; set; }

        /// <summary>
        /// List the parameters to be included to inform about client identification. Valid values: `intfname`, `vlan`, `hostname`, `mode`, `description`.
        /// </summary>
        [Input("dhcpOption82CircuitId")]
        public Input<string>? DhcpOption82CircuitId { get; set; }

        /// <summary>
        /// DHCP option-82 format string. Valid values: `ascii`, `legacy`.
        /// </summary>
        [Input("dhcpOption82Format")]
        public Input<string>? DhcpOption82Format { get; set; }

        /// <summary>
        /// List the parameters to be included to inform about client identification. Valid values: `mac`, `hostname`, `ip`.
        /// </summary>
        [Input("dhcpOption82RemoteId")]
        public Input<string>? DhcpOption82RemoteId { get; set; }

        /// <summary>
        /// Enable/disable DHCP snooping server access list. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("dhcpServerAccessList")]
        public Input<string>? DhcpServerAccessList { get; set; }

        /// <summary>
        /// Expiry time for DHCP snooping server database entries (300 - 259200 sec, default = 86400 sec).
        /// </summary>
        [Input("dhcpSnoopClientDbExp")]
        public Input<int>? DhcpSnoopClientDbExp { get; set; }

        /// <summary>
        /// Client DHCP packet broadcast mode. Valid values: `drop-untrusted`, `forward-untrusted`.
        /// </summary>
        [Input("dhcpSnoopClientReq")]
        public Input<string>? DhcpSnoopClientReq { get; set; }

        /// <summary>
        /// Per Interface dhcp-server entries learn limit (0 - 1024, default = 64).
        /// </summary>
        [Input("dhcpSnoopDbPerPortLearnLimit")]
        public Input<int>? DhcpSnoopDbPerPortLearnLimit { get; set; }

        [Input("disableDiscoveries")]
        private InputList<Inputs.GlobalDisableDiscoveryArgs>? _disableDiscoveries;

        /// <summary>
        /// Prevent this FortiSwitch from discovering. The structure of `disable_discovery` block is documented below.
        /// </summary>
        public InputList<Inputs.GlobalDisableDiscoveryArgs> DisableDiscoveries
        {
            get => _disableDiscoveries ?? (_disableDiscoveries = new InputList<Inputs.GlobalDisableDiscoveryArgs>());
            set => _disableDiscoveries = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Enable/disable enforcement of FIPS on managed FortiSwitch devices. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("fipsEnforce")]
        public Input<string>? FipsEnforce { get; set; }

        /// <summary>
        /// Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("firmwareProvisionOnAuthorization")]
        public Input<string>? FirmwareProvisionOnAuthorization { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Enable/disable image push to FortiSwitch using HTTPS. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("httpsImagePush")]
        public Input<string>? HttpsImagePush { get; set; }

        /// <summary>
        /// Enable/disable logs for Learning Limit Violations. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("logMacLimitViolations")]
        public Input<string>? LogMacLimitViolations { get; set; }

        /// <summary>
        /// Time after which an inactive MAC is aged out (10 - 1000000 sec, default = 300, 0 = disable).
        /// </summary>
        [Input("macAgingInterval")]
        public Input<int>? MacAgingInterval { get; set; }

        /// <summary>
        /// Enable/disable MAC address event logging. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("macEventLogging")]
        public Input<string>? MacEventLogging { get; set; }

        /// <summary>
        /// Time in hours after which an inactive MAC is removed from client DB.
        /// </summary>
        [Input("macRetentionPeriod")]
        public Input<int>? MacRetentionPeriod { get; set; }

        /// <summary>
        /// Set timeout for Learning Limit Violations (0 = disabled).
        /// </summary>
        [Input("macViolationTimer")]
        public Input<int>? MacViolationTimer { get; set; }

        /// <summary>
        /// Quarantine mode. Valid values: `by-vlan`, `by-redirect`.
        /// </summary>
        [Input("quarantineMode")]
        public Input<string>? QuarantineMode { get; set; }

        /// <summary>
        /// Enable/disable DNS resolution of the FortiSwitch unit's IP address by use of its serial number. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("snDnsResolution")]
        public Input<string>? SnDnsResolution { get; set; }

        /// <summary>
        /// Control which sources update the device user list. Valid values: `mac-cache`, `lldp`, `dhcp-snooping`, `l2-db`, `l3-db`.
        /// </summary>
        [Input("updateUserDevice")]
        public Input<string>? UpdateUserDevice { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// VLAN configuration mode, user-defined-vlans or all-possible-vlans. Valid values: `all`, `defined`.
        /// </summary>
        [Input("vlanAllMode")]
        public Input<string>? VlanAllMode { get; set; }

        /// <summary>
        /// Identity of the VLAN. Commonly used for RADIUS Tunnel-Private-Group-Id. Valid values: `description`, `name`.
        /// </summary>
        [Input("vlanIdentity")]
        public Input<string>? VlanIdentity { get; set; }

        /// <summary>
        /// FortiLink VLAN optimization. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("vlanOptimization")]
        public Input<string>? VlanOptimization { get; set; }

        public GlobalArgs()
        {
        }
        public static new GlobalArgs Empty => new GlobalArgs();
    }

    public sealed class GlobalState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable multiple FortiLink interfaces for redundant connections between a managed FortiSwitch and FortiGate. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("allowMultipleInterfaces")]
        public Input<string>? AllowMultipleInterfaces { get; set; }

        /// <summary>
        /// Enable/disable bouncing (administratively bring the link down, up) of a switch port where a quarantined device was seen last. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("bounceQuarantinedLink")]
        public Input<string>? BounceQuarantinedLink { get; set; }

        [Input("customCommands")]
        private InputList<Inputs.GlobalCustomCommandGetArgs>? _customCommands;

        /// <summary>
        /// List of custom commands to be pushed to all FortiSwitches in the VDOM. The structure of `custom_command` block is documented below.
        /// </summary>
        public InputList<Inputs.GlobalCustomCommandGetArgs> CustomCommands
        {
            get => _customCommands ?? (_customCommands = new InputList<Inputs.GlobalCustomCommandGetArgs>());
            set => _customCommands = value;
        }

        /// <summary>
        /// Default VLAN for ports when added to the virtual-switch.
        /// </summary>
        [Input("defaultVirtualSwitchVlan")]
        public Input<string>? DefaultVirtualSwitchVlan { get; set; }

        /// <summary>
        /// List the parameters to be included to inform about client identification. Valid values: `intfname`, `vlan`, `hostname`, `mode`, `description`.
        /// </summary>
        [Input("dhcpOption82CircuitId")]
        public Input<string>? DhcpOption82CircuitId { get; set; }

        /// <summary>
        /// DHCP option-82 format string. Valid values: `ascii`, `legacy`.
        /// </summary>
        [Input("dhcpOption82Format")]
        public Input<string>? DhcpOption82Format { get; set; }

        /// <summary>
        /// List the parameters to be included to inform about client identification. Valid values: `mac`, `hostname`, `ip`.
        /// </summary>
        [Input("dhcpOption82RemoteId")]
        public Input<string>? DhcpOption82RemoteId { get; set; }

        /// <summary>
        /// Enable/disable DHCP snooping server access list. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("dhcpServerAccessList")]
        public Input<string>? DhcpServerAccessList { get; set; }

        /// <summary>
        /// Expiry time for DHCP snooping server database entries (300 - 259200 sec, default = 86400 sec).
        /// </summary>
        [Input("dhcpSnoopClientDbExp")]
        public Input<int>? DhcpSnoopClientDbExp { get; set; }

        /// <summary>
        /// Client DHCP packet broadcast mode. Valid values: `drop-untrusted`, `forward-untrusted`.
        /// </summary>
        [Input("dhcpSnoopClientReq")]
        public Input<string>? DhcpSnoopClientReq { get; set; }

        /// <summary>
        /// Per Interface dhcp-server entries learn limit (0 - 1024, default = 64).
        /// </summary>
        [Input("dhcpSnoopDbPerPortLearnLimit")]
        public Input<int>? DhcpSnoopDbPerPortLearnLimit { get; set; }

        [Input("disableDiscoveries")]
        private InputList<Inputs.GlobalDisableDiscoveryGetArgs>? _disableDiscoveries;

        /// <summary>
        /// Prevent this FortiSwitch from discovering. The structure of `disable_discovery` block is documented below.
        /// </summary>
        public InputList<Inputs.GlobalDisableDiscoveryGetArgs> DisableDiscoveries
        {
            get => _disableDiscoveries ?? (_disableDiscoveries = new InputList<Inputs.GlobalDisableDiscoveryGetArgs>());
            set => _disableDiscoveries = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Enable/disable enforcement of FIPS on managed FortiSwitch devices. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("fipsEnforce")]
        public Input<string>? FipsEnforce { get; set; }

        /// <summary>
        /// Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("firmwareProvisionOnAuthorization")]
        public Input<string>? FirmwareProvisionOnAuthorization { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Enable/disable image push to FortiSwitch using HTTPS. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("httpsImagePush")]
        public Input<string>? HttpsImagePush { get; set; }

        /// <summary>
        /// Enable/disable logs for Learning Limit Violations. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("logMacLimitViolations")]
        public Input<string>? LogMacLimitViolations { get; set; }

        /// <summary>
        /// Time after which an inactive MAC is aged out (10 - 1000000 sec, default = 300, 0 = disable).
        /// </summary>
        [Input("macAgingInterval")]
        public Input<int>? MacAgingInterval { get; set; }

        /// <summary>
        /// Enable/disable MAC address event logging. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("macEventLogging")]
        public Input<string>? MacEventLogging { get; set; }

        /// <summary>
        /// Time in hours after which an inactive MAC is removed from client DB.
        /// </summary>
        [Input("macRetentionPeriod")]
        public Input<int>? MacRetentionPeriod { get; set; }

        /// <summary>
        /// Set timeout for Learning Limit Violations (0 = disabled).
        /// </summary>
        [Input("macViolationTimer")]
        public Input<int>? MacViolationTimer { get; set; }

        /// <summary>
        /// Quarantine mode. Valid values: `by-vlan`, `by-redirect`.
        /// </summary>
        [Input("quarantineMode")]
        public Input<string>? QuarantineMode { get; set; }

        /// <summary>
        /// Enable/disable DNS resolution of the FortiSwitch unit's IP address by use of its serial number. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("snDnsResolution")]
        public Input<string>? SnDnsResolution { get; set; }

        /// <summary>
        /// Control which sources update the device user list. Valid values: `mac-cache`, `lldp`, `dhcp-snooping`, `l2-db`, `l3-db`.
        /// </summary>
        [Input("updateUserDevice")]
        public Input<string>? UpdateUserDevice { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// VLAN configuration mode, user-defined-vlans or all-possible-vlans. Valid values: `all`, `defined`.
        /// </summary>
        [Input("vlanAllMode")]
        public Input<string>? VlanAllMode { get; set; }

        /// <summary>
        /// Identity of the VLAN. Commonly used for RADIUS Tunnel-Private-Group-Id. Valid values: `description`, `name`.
        /// </summary>
        [Input("vlanIdentity")]
        public Input<string>? VlanIdentity { get; set; }

        /// <summary>
        /// FortiLink VLAN optimization. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("vlanOptimization")]
        public Input<string>? VlanOptimization { get; set; }

        public GlobalState()
        {
        }
        public static new GlobalState Empty => new GlobalState();
    }
}
