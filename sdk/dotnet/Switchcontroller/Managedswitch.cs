// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Switchcontroller
{
    /// <summary>
    /// Configure FortiSwitch devices that are managed by this FortiGate.
    /// 
    /// ## Import
    /// 
    /// SwitchController ManagedSwitch can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:switchcontroller/managedswitch:Managedswitch labelname {{switch_id}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:switchcontroller/managedswitch:Managedswitch labelname {{switch_id}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:switchcontroller/managedswitch:Managedswitch")]
    public partial class Managedswitch : global::Pulumi.CustomResource
    {
        /// <summary>
        /// FortiSwitch access profile.
        /// </summary>
        [Output("accessProfile")]
        public Output<string> AccessProfile { get; private set; } = null!;

        /// <summary>
        /// Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `custom_command` block is documented below.
        /// </summary>
        [Output("customCommands")]
        public Output<ImmutableArray<Outputs.ManagedswitchCustomCommand>> CustomCommands { get; private set; } = null!;

        /// <summary>
        /// Delayed restart triggered for this FortiSwitch.
        /// </summary>
        [Output("delayedRestartTrigger")]
        public Output<int> DelayedRestartTrigger { get; private set; } = null!;

        /// <summary>
        /// Description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
        /// </summary>
        [Output("dhcpServerAccessList")]
        public Output<string> DhcpServerAccessList { get; private set; } = null!;

        /// <summary>
        /// Configure FortiSwitch DHCP snooping static clients. The structure of `dhcp_snooping_static_client` block is documented below.
        /// </summary>
        [Output("dhcpSnoopingStaticClients")]
        public Output<ImmutableArray<Outputs.ManagedswitchDhcpSnoopingStaticClient>> DhcpSnoopingStaticClients { get; private set; } = null!;

        /// <summary>
        /// Directly connected FortiSwitch.
        /// </summary>
        [Output("directlyConnected")]
        public Output<int> DirectlyConnected { get; private set; } = null!;

        /// <summary>
        /// List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
        /// </summary>
        [Output("dynamicCapability")]
        public Output<int> DynamicCapability { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Dynamically discovered FortiSwitch.
        /// </summary>
        [Output("dynamicallyDiscovered")]
        public Output<int> DynamicallyDiscovered { get; private set; } = null!;

        /// <summary>
        /// Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("firmwareProvision")]
        public Output<string> FirmwareProvision { get; private set; } = null!;

        /// <summary>
        /// Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
        /// </summary>
        [Output("firmwareProvisionLatest")]
        public Output<string> FirmwareProvisionLatest { get; private set; } = null!;

        /// <summary>
        /// Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
        /// </summary>
        [Output("firmwareProvisionVersion")]
        public Output<string> FirmwareProvisionVersion { get; private set; } = null!;

        /// <summary>
        /// Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
        /// </summary>
        [Output("flowIdentity")]
        public Output<string> FlowIdentity { get; private set; } = null!;

        /// <summary>
        /// FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        /// </summary>
        [Output("fswWan1Admin")]
        public Output<string> FswWan1Admin { get; private set; } = null!;

        /// <summary>
        /// Fortiswitch WAN1 peer port.
        /// </summary>
        [Output("fswWan1Peer")]
        public Output<string> FswWan1Peer { get; private set; } = null!;

        /// <summary>
        /// FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        /// </summary>
        [Output("fswWan2Admin")]
        public Output<string> FswWan2Admin { get; private set; } = null!;

        /// <summary>
        /// FortiSwitch WAN2 peer port.
        /// </summary>
        [Output("fswWan2Peer")]
        public Output<string> FswWan2Peer { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// Configure FortiSwitch IGMP snooping global settings. The structure of `igmp_snooping` block is documented below.
        /// </summary>
        [Output("igmpSnooping")]
        public Output<Outputs.ManagedswitchIgmpSnooping> IgmpSnooping { get; private set; } = null!;

        /// <summary>
        /// IP source guard. The structure of `ip_source_guard` block is documented below.
        /// </summary>
        [Output("ipSourceGuards")]
        public Output<ImmutableArray<Outputs.ManagedswitchIpSourceGuard>> IpSourceGuards { get; private set; } = null!;

        /// <summary>
        /// Layer 3 management discovered.
        /// </summary>
        [Output("l3Discovered")]
        public Output<int> L3Discovered { get; private set; } = null!;

        /// <summary>
        /// FortiSwitch maximum allowed trunk members.
        /// </summary>
        [Output("maxAllowedTrunkMembers")]
        public Output<int> MaxAllowedTrunkMembers { get; private set; } = null!;

        /// <summary>
        /// Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("mclagIgmpSnoopingAware")]
        public Output<string> MclagIgmpSnoopingAware { get; private set; } = null!;

        /// <summary>
        /// FortiLink management mode.
        /// </summary>
        [Output("mgmtMode")]
        public Output<int> MgmtMode { get; private set; } = null!;

        /// <summary>
        /// Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
        /// </summary>
        [Output("mirrors")]
        public Output<ImmutableArray<Outputs.ManagedswitchMirror>> Mirrors { get; private set; } = null!;

        /// <summary>
        /// Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n802_1x_settings` block is documented below.
        /// </summary>
        [Output("n8021xSettings")]
        public Output<Outputs.ManagedswitchN8021xSettings> N8021xSettings { get; private set; } = null!;

        /// <summary>
        /// Managed-switch name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("overrideSnmpCommunity")]
        public Output<string> OverrideSnmpCommunity { get; private set; } = null!;

        /// <summary>
        /// Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("overrideSnmpSysinfo")]
        public Output<string> OverrideSnmpSysinfo { get; private set; } = null!;

        /// <summary>
        /// Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("overrideSnmpTrapThreshold")]
        public Output<string> OverrideSnmpTrapThreshold { get; private set; } = null!;

        /// <summary>
        /// Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("overrideSnmpUser")]
        public Output<string> OverrideSnmpUser { get; private set; } = null!;

        /// <summary>
        /// VDOM which owner of port belongs to.
        /// </summary>
        [Output("ownerVdom")]
        public Output<string> OwnerVdom { get; private set; } = null!;

        /// <summary>
        /// PoE detection type for FortiSwitch.
        /// </summary>
        [Output("poeDetectionType")]
        public Output<int> PoeDetectionType { get; private set; } = null!;

        /// <summary>
        /// Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("poeLldpDetection")]
        public Output<string> PoeLldpDetection { get; private set; } = null!;

        /// <summary>
        /// Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("poePreStandardDetection")]
        public Output<string> PoePreStandardDetection { get; private set; } = null!;

        /// <summary>
        /// Managed-switch port list. The structure of `ports` block is documented below.
        /// </summary>
        [Output("ports")]
        public Output<ImmutableArray<Outputs.ManagedswitchPort>> Ports { get; private set; } = null!;

        /// <summary>
        /// Pre-provisioned managed switch.
        /// </summary>
        [Output("preProvisioned")]
        public Output<int> PreProvisioned { get; private set; } = null!;

        /// <summary>
        /// PTP profile configuration.
        /// </summary>
        [Output("ptpProfile")]
        public Output<string> PtpProfile { get; private set; } = null!;

        /// <summary>
        /// Enable/disable PTP profile on this FortiSwitch. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("ptpStatus")]
        public Output<string> PtpStatus { get; private set; } = null!;

        /// <summary>
        /// Purdue Level of this FortiSwitch. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
        /// </summary>
        [Output("purdueLevel")]
        public Output<string> PurdueLevel { get; private set; } = null!;

        /// <summary>
        /// Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
        /// </summary>
        [Output("qosDropPolicy")]
        public Output<string> QosDropPolicy { get; private set; } = null!;

        /// <summary>
        /// Set QoS RED/WRED drop probability.
        /// </summary>
        [Output("qosRedProbability")]
        public Output<int> QosRedProbability { get; private set; } = null!;

        /// <summary>
        /// NAS-IP address.
        /// </summary>
        [Output("radiusNasIp")]
        public Output<string> RadiusNasIp { get; private set; } = null!;

        /// <summary>
        /// Use locally defined NAS-IP. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("radiusNasIpOverride")]
        public Output<string> RadiusNasIpOverride { get; private set; } = null!;

        /// <summary>
        /// Configure logging by FortiSwitch device to a remote syslog server. The structure of `remote_log` block is documented below.
        /// </summary>
        [Output("remoteLogs")]
        public Output<ImmutableArray<Outputs.ManagedswitchRemoteLog>> RemoteLogs { get; private set; } = null!;

        /// <summary>
        /// Enable/disable route offload on this FortiSwitch. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("routeOffload")]
        public Output<string> RouteOffload { get; private set; } = null!;

        /// <summary>
        /// Enable/disable route offload MCLAG on this FortiSwitch. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("routeOffloadMclag")]
        public Output<string> RouteOffloadMclag { get; private set; } = null!;

        /// <summary>
        /// Configure route offload MCLAG IP address. The structure of `route_offload_router` block is documented below.
        /// </summary>
        [Output("routeOffloadRouters")]
        public Output<ImmutableArray<Outputs.ManagedswitchRouteOffloadRouter>> RouteOffloadRouters { get; private set; } = null!;

        /// <summary>
        /// Managed-switch serial number.
        /// </summary>
        [Output("sn")]
        public Output<string> Sn { get; private set; } = null!;

        /// <summary>
        /// Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmp_community` block is documented below.
        /// </summary>
        [Output("snmpCommunities")]
        public Output<ImmutableArray<Outputs.ManagedswitchSnmpCommunity>> SnmpCommunities { get; private set; } = null!;

        /// <summary>
        /// Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmp_sysinfo` block is documented below.
        /// </summary>
        [Output("snmpSysinfo")]
        public Output<Outputs.ManagedswitchSnmpSysinfo> SnmpSysinfo { get; private set; } = null!;

        /// <summary>
        /// Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmp_trap_threshold` block is documented below.
        /// </summary>
        [Output("snmpTrapThreshold")]
        public Output<Outputs.ManagedswitchSnmpTrapThreshold> SnmpTrapThreshold { get; private set; } = null!;

        /// <summary>
        /// Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmp_user` block is documented below.
        /// </summary>
        [Output("snmpUsers")]
        public Output<ImmutableArray<Outputs.ManagedswitchSnmpUser>> SnmpUsers { get; private set; } = null!;

        /// <summary>
        /// Staged image version for FortiSwitch.
        /// </summary>
        [Output("stagedImageVersion")]
        public Output<string> StagedImageVersion { get; private set; } = null!;

        /// <summary>
        /// Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `static_mac` block is documented below.
        /// </summary>
        [Output("staticMacs")]
        public Output<ImmutableArray<Outputs.ManagedswitchStaticMac>> StaticMacs { get; private set; } = null!;

        /// <summary>
        /// Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `storm_control` block is documented below.
        /// </summary>
        [Output("stormControl")]
        public Output<Outputs.ManagedswitchStormControl> StormControl { get; private set; } = null!;

        /// <summary>
        /// Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stp_instance` block is documented below.
        /// </summary>
        [Output("stpInstances")]
        public Output<ImmutableArray<Outputs.ManagedswitchStpInstance>> StpInstances { get; private set; } = null!;

        /// <summary>
        /// Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stp_settings` block is documented below.
        /// </summary>
        [Output("stpSettings")]
        public Output<Outputs.ManagedswitchStpSettings> StpSettings { get; private set; } = null!;

        /// <summary>
        /// User definable label/tag.
        /// </summary>
        [Output("switchDeviceTag")]
        public Output<string> SwitchDeviceTag { get; private set; } = null!;

        /// <summary>
        /// DHCP option43 key.
        /// </summary>
        [Output("switchDhcpOpt43Key")]
        public Output<string> SwitchDhcpOpt43Key { get; private set; } = null!;

        /// <summary>
        /// Managed-switch id.
        /// </summary>
        [Output("switchId")]
        public Output<string> SwitchId { get; private set; } = null!;

        /// <summary>
        /// Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switch_log` block is documented below.
        /// </summary>
        [Output("switchLog")]
        public Output<Outputs.ManagedswitchSwitchLog> SwitchLog { get; private set; } = null!;

        /// <summary>
        /// FortiSwitch profile.
        /// </summary>
        [Output("switchProfile")]
        public Output<string> SwitchProfile { get; private set; } = null!;

        /// <summary>
        /// Configure spanning tree protocol (STP). The structure of `switch_stp_settings` block is documented below.
        /// </summary>
        [Output("switchStpSettings")]
        public Output<Outputs.ManagedswitchSwitchStpSettings> SwitchStpSettings { get; private set; } = null!;

        /// <summary>
        /// TDR supported.
        /// </summary>
        [Output("tdrSupported")]
        public Output<string> TdrSupported { get; private set; } = null!;

        /// <summary>
        /// SOCKS tunnel management discovered.
        /// </summary>
        [Output("tunnelDiscovered")]
        public Output<int> TunnelDiscovered { get; private set; } = null!;

        /// <summary>
        /// Indication of switch type, physical or virtual. Valid values: `virtual`, `physical`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// FortiSwitch version.
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// Configure VLAN assignment priority. The structure of `vlan` block is documented below.
        /// </summary>
        [Output("vlans")]
        public Output<ImmutableArray<Outputs.ManagedswitchVlan>> Vlans { get; private set; } = null!;


        /// <summary>
        /// Create a Managedswitch resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Managedswitch(string name, ManagedswitchArgs args, CustomResourceOptions? options = null)
            : base("fortios:switchcontroller/managedswitch:Managedswitch", name, args ?? new ManagedswitchArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Managedswitch(string name, Input<string> id, ManagedswitchState? state = null, CustomResourceOptions? options = null)
            : base("fortios:switchcontroller/managedswitch:Managedswitch", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Managedswitch resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Managedswitch Get(string name, Input<string> id, ManagedswitchState? state = null, CustomResourceOptions? options = null)
        {
            return new Managedswitch(name, id, state, options);
        }
    }

    public sealed class ManagedswitchArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// FortiSwitch access profile.
        /// </summary>
        [Input("accessProfile")]
        public Input<string>? AccessProfile { get; set; }

        [Input("customCommands")]
        private InputList<Inputs.ManagedswitchCustomCommandArgs>? _customCommands;

        /// <summary>
        /// Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `custom_command` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchCustomCommandArgs> CustomCommands
        {
            get => _customCommands ?? (_customCommands = new InputList<Inputs.ManagedswitchCustomCommandArgs>());
            set => _customCommands = value;
        }

        /// <summary>
        /// Delayed restart triggered for this FortiSwitch.
        /// </summary>
        [Input("delayedRestartTrigger")]
        public Input<int>? DelayedRestartTrigger { get; set; }

        /// <summary>
        /// Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
        /// </summary>
        [Input("dhcpServerAccessList")]
        public Input<string>? DhcpServerAccessList { get; set; }

        [Input("dhcpSnoopingStaticClients")]
        private InputList<Inputs.ManagedswitchDhcpSnoopingStaticClientArgs>? _dhcpSnoopingStaticClients;

        /// <summary>
        /// Configure FortiSwitch DHCP snooping static clients. The structure of `dhcp_snooping_static_client` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchDhcpSnoopingStaticClientArgs> DhcpSnoopingStaticClients
        {
            get => _dhcpSnoopingStaticClients ?? (_dhcpSnoopingStaticClients = new InputList<Inputs.ManagedswitchDhcpSnoopingStaticClientArgs>());
            set => _dhcpSnoopingStaticClients = value;
        }

        /// <summary>
        /// Directly connected FortiSwitch.
        /// </summary>
        [Input("directlyConnected")]
        public Input<int>? DirectlyConnected { get; set; }

        /// <summary>
        /// List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
        /// </summary>
        [Input("dynamicCapability")]
        public Input<int>? DynamicCapability { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Dynamically discovered FortiSwitch.
        /// </summary>
        [Input("dynamicallyDiscovered")]
        public Input<int>? DynamicallyDiscovered { get; set; }

        /// <summary>
        /// Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("firmwareProvision")]
        public Input<string>? FirmwareProvision { get; set; }

        /// <summary>
        /// Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
        /// </summary>
        [Input("firmwareProvisionLatest")]
        public Input<string>? FirmwareProvisionLatest { get; set; }

        /// <summary>
        /// Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
        /// </summary>
        [Input("firmwareProvisionVersion")]
        public Input<string>? FirmwareProvisionVersion { get; set; }

        /// <summary>
        /// Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
        /// </summary>
        [Input("flowIdentity")]
        public Input<string>? FlowIdentity { get; set; }

        /// <summary>
        /// FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        /// </summary>
        [Input("fswWan1Admin")]
        public Input<string>? FswWan1Admin { get; set; }

        /// <summary>
        /// Fortiswitch WAN1 peer port.
        /// </summary>
        [Input("fswWan1Peer", required: true)]
        public Input<string> FswWan1Peer { get; set; } = null!;

        /// <summary>
        /// FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        /// </summary>
        [Input("fswWan2Admin")]
        public Input<string>? FswWan2Admin { get; set; }

        /// <summary>
        /// FortiSwitch WAN2 peer port.
        /// </summary>
        [Input("fswWan2Peer")]
        public Input<string>? FswWan2Peer { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Configure FortiSwitch IGMP snooping global settings. The structure of `igmp_snooping` block is documented below.
        /// </summary>
        [Input("igmpSnooping")]
        public Input<Inputs.ManagedswitchIgmpSnoopingArgs>? IgmpSnooping { get; set; }

        [Input("ipSourceGuards")]
        private InputList<Inputs.ManagedswitchIpSourceGuardArgs>? _ipSourceGuards;

        /// <summary>
        /// IP source guard. The structure of `ip_source_guard` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchIpSourceGuardArgs> IpSourceGuards
        {
            get => _ipSourceGuards ?? (_ipSourceGuards = new InputList<Inputs.ManagedswitchIpSourceGuardArgs>());
            set => _ipSourceGuards = value;
        }

        /// <summary>
        /// Layer 3 management discovered.
        /// </summary>
        [Input("l3Discovered")]
        public Input<int>? L3Discovered { get; set; }

        /// <summary>
        /// FortiSwitch maximum allowed trunk members.
        /// </summary>
        [Input("maxAllowedTrunkMembers")]
        public Input<int>? MaxAllowedTrunkMembers { get; set; }

        /// <summary>
        /// Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("mclagIgmpSnoopingAware")]
        public Input<string>? MclagIgmpSnoopingAware { get; set; }

        /// <summary>
        /// FortiLink management mode.
        /// </summary>
        [Input("mgmtMode")]
        public Input<int>? MgmtMode { get; set; }

        [Input("mirrors")]
        private InputList<Inputs.ManagedswitchMirrorArgs>? _mirrors;

        /// <summary>
        /// Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchMirrorArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new InputList<Inputs.ManagedswitchMirrorArgs>());
            set => _mirrors = value;
        }

        /// <summary>
        /// Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n802_1x_settings` block is documented below.
        /// </summary>
        [Input("n8021xSettings")]
        public Input<Inputs.ManagedswitchN8021xSettingsArgs>? N8021xSettings { get; set; }

        /// <summary>
        /// Managed-switch name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("overrideSnmpCommunity")]
        public Input<string>? OverrideSnmpCommunity { get; set; }

        /// <summary>
        /// Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("overrideSnmpSysinfo")]
        public Input<string>? OverrideSnmpSysinfo { get; set; }

        /// <summary>
        /// Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("overrideSnmpTrapThreshold")]
        public Input<string>? OverrideSnmpTrapThreshold { get; set; }

        /// <summary>
        /// Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("overrideSnmpUser")]
        public Input<string>? OverrideSnmpUser { get; set; }

        /// <summary>
        /// VDOM which owner of port belongs to.
        /// </summary>
        [Input("ownerVdom")]
        public Input<string>? OwnerVdom { get; set; }

        /// <summary>
        /// PoE detection type for FortiSwitch.
        /// </summary>
        [Input("poeDetectionType")]
        public Input<int>? PoeDetectionType { get; set; }

        /// <summary>
        /// Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("poeLldpDetection")]
        public Input<string>? PoeLldpDetection { get; set; }

        /// <summary>
        /// Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("poePreStandardDetection")]
        public Input<string>? PoePreStandardDetection { get; set; }

        [Input("ports")]
        private InputList<Inputs.ManagedswitchPortArgs>? _ports;

        /// <summary>
        /// Managed-switch port list. The structure of `ports` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchPortArgs> Ports
        {
            get => _ports ?? (_ports = new InputList<Inputs.ManagedswitchPortArgs>());
            set => _ports = value;
        }

        /// <summary>
        /// Pre-provisioned managed switch.
        /// </summary>
        [Input("preProvisioned")]
        public Input<int>? PreProvisioned { get; set; }

        /// <summary>
        /// PTP profile configuration.
        /// </summary>
        [Input("ptpProfile")]
        public Input<string>? PtpProfile { get; set; }

        /// <summary>
        /// Enable/disable PTP profile on this FortiSwitch. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("ptpStatus")]
        public Input<string>? PtpStatus { get; set; }

        /// <summary>
        /// Purdue Level of this FortiSwitch. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
        /// </summary>
        [Input("purdueLevel")]
        public Input<string>? PurdueLevel { get; set; }

        /// <summary>
        /// Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
        /// </summary>
        [Input("qosDropPolicy")]
        public Input<string>? QosDropPolicy { get; set; }

        /// <summary>
        /// Set QoS RED/WRED drop probability.
        /// </summary>
        [Input("qosRedProbability")]
        public Input<int>? QosRedProbability { get; set; }

        /// <summary>
        /// NAS-IP address.
        /// </summary>
        [Input("radiusNasIp")]
        public Input<string>? RadiusNasIp { get; set; }

        /// <summary>
        /// Use locally defined NAS-IP. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("radiusNasIpOverride")]
        public Input<string>? RadiusNasIpOverride { get; set; }

        [Input("remoteLogs")]
        private InputList<Inputs.ManagedswitchRemoteLogArgs>? _remoteLogs;

        /// <summary>
        /// Configure logging by FortiSwitch device to a remote syslog server. The structure of `remote_log` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchRemoteLogArgs> RemoteLogs
        {
            get => _remoteLogs ?? (_remoteLogs = new InputList<Inputs.ManagedswitchRemoteLogArgs>());
            set => _remoteLogs = value;
        }

        /// <summary>
        /// Enable/disable route offload on this FortiSwitch. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("routeOffload")]
        public Input<string>? RouteOffload { get; set; }

        /// <summary>
        /// Enable/disable route offload MCLAG on this FortiSwitch. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("routeOffloadMclag")]
        public Input<string>? RouteOffloadMclag { get; set; }

        [Input("routeOffloadRouters")]
        private InputList<Inputs.ManagedswitchRouteOffloadRouterArgs>? _routeOffloadRouters;

        /// <summary>
        /// Configure route offload MCLAG IP address. The structure of `route_offload_router` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchRouteOffloadRouterArgs> RouteOffloadRouters
        {
            get => _routeOffloadRouters ?? (_routeOffloadRouters = new InputList<Inputs.ManagedswitchRouteOffloadRouterArgs>());
            set => _routeOffloadRouters = value;
        }

        /// <summary>
        /// Managed-switch serial number.
        /// </summary>
        [Input("sn")]
        public Input<string>? Sn { get; set; }

        [Input("snmpCommunities")]
        private InputList<Inputs.ManagedswitchSnmpCommunityArgs>? _snmpCommunities;

        /// <summary>
        /// Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmp_community` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchSnmpCommunityArgs> SnmpCommunities
        {
            get => _snmpCommunities ?? (_snmpCommunities = new InputList<Inputs.ManagedswitchSnmpCommunityArgs>());
            set => _snmpCommunities = value;
        }

        /// <summary>
        /// Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmp_sysinfo` block is documented below.
        /// </summary>
        [Input("snmpSysinfo")]
        public Input<Inputs.ManagedswitchSnmpSysinfoArgs>? SnmpSysinfo { get; set; }

        /// <summary>
        /// Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmp_trap_threshold` block is documented below.
        /// </summary>
        [Input("snmpTrapThreshold")]
        public Input<Inputs.ManagedswitchSnmpTrapThresholdArgs>? SnmpTrapThreshold { get; set; }

        [Input("snmpUsers")]
        private InputList<Inputs.ManagedswitchSnmpUserArgs>? _snmpUsers;

        /// <summary>
        /// Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmp_user` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchSnmpUserArgs> SnmpUsers
        {
            get => _snmpUsers ?? (_snmpUsers = new InputList<Inputs.ManagedswitchSnmpUserArgs>());
            set => _snmpUsers = value;
        }

        /// <summary>
        /// Staged image version for FortiSwitch.
        /// </summary>
        [Input("stagedImageVersion")]
        public Input<string>? StagedImageVersion { get; set; }

        [Input("staticMacs")]
        private InputList<Inputs.ManagedswitchStaticMacArgs>? _staticMacs;

        /// <summary>
        /// Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `static_mac` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchStaticMacArgs> StaticMacs
        {
            get => _staticMacs ?? (_staticMacs = new InputList<Inputs.ManagedswitchStaticMacArgs>());
            set => _staticMacs = value;
        }

        /// <summary>
        /// Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `storm_control` block is documented below.
        /// </summary>
        [Input("stormControl")]
        public Input<Inputs.ManagedswitchStormControlArgs>? StormControl { get; set; }

        [Input("stpInstances")]
        private InputList<Inputs.ManagedswitchStpInstanceArgs>? _stpInstances;

        /// <summary>
        /// Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stp_instance` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchStpInstanceArgs> StpInstances
        {
            get => _stpInstances ?? (_stpInstances = new InputList<Inputs.ManagedswitchStpInstanceArgs>());
            set => _stpInstances = value;
        }

        /// <summary>
        /// Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stp_settings` block is documented below.
        /// </summary>
        [Input("stpSettings")]
        public Input<Inputs.ManagedswitchStpSettingsArgs>? StpSettings { get; set; }

        /// <summary>
        /// User definable label/tag.
        /// </summary>
        [Input("switchDeviceTag")]
        public Input<string>? SwitchDeviceTag { get; set; }

        /// <summary>
        /// DHCP option43 key.
        /// </summary>
        [Input("switchDhcpOpt43Key")]
        public Input<string>? SwitchDhcpOpt43Key { get; set; }

        /// <summary>
        /// Managed-switch id.
        /// </summary>
        [Input("switchId", required: true)]
        public Input<string> SwitchId { get; set; } = null!;

        /// <summary>
        /// Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switch_log` block is documented below.
        /// </summary>
        [Input("switchLog")]
        public Input<Inputs.ManagedswitchSwitchLogArgs>? SwitchLog { get; set; }

        /// <summary>
        /// FortiSwitch profile.
        /// </summary>
        [Input("switchProfile")]
        public Input<string>? SwitchProfile { get; set; }

        /// <summary>
        /// Configure spanning tree protocol (STP). The structure of `switch_stp_settings` block is documented below.
        /// </summary>
        [Input("switchStpSettings")]
        public Input<Inputs.ManagedswitchSwitchStpSettingsArgs>? SwitchStpSettings { get; set; }

        /// <summary>
        /// TDR supported.
        /// </summary>
        [Input("tdrSupported")]
        public Input<string>? TdrSupported { get; set; }

        /// <summary>
        /// SOCKS tunnel management discovered.
        /// </summary>
        [Input("tunnelDiscovered")]
        public Input<int>? TunnelDiscovered { get; set; }

        /// <summary>
        /// Indication of switch type, physical or virtual. Valid values: `virtual`, `physical`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// FortiSwitch version.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        [Input("vlans")]
        private InputList<Inputs.ManagedswitchVlanArgs>? _vlans;

        /// <summary>
        /// Configure VLAN assignment priority. The structure of `vlan` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchVlanArgs> Vlans
        {
            get => _vlans ?? (_vlans = new InputList<Inputs.ManagedswitchVlanArgs>());
            set => _vlans = value;
        }

        public ManagedswitchArgs()
        {
        }
        public static new ManagedswitchArgs Empty => new ManagedswitchArgs();
    }

    public sealed class ManagedswitchState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// FortiSwitch access profile.
        /// </summary>
        [Input("accessProfile")]
        public Input<string>? AccessProfile { get; set; }

        [Input("customCommands")]
        private InputList<Inputs.ManagedswitchCustomCommandGetArgs>? _customCommands;

        /// <summary>
        /// Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `custom_command` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchCustomCommandGetArgs> CustomCommands
        {
            get => _customCommands ?? (_customCommands = new InputList<Inputs.ManagedswitchCustomCommandGetArgs>());
            set => _customCommands = value;
        }

        /// <summary>
        /// Delayed restart triggered for this FortiSwitch.
        /// </summary>
        [Input("delayedRestartTrigger")]
        public Input<int>? DelayedRestartTrigger { get; set; }

        /// <summary>
        /// Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
        /// </summary>
        [Input("dhcpServerAccessList")]
        public Input<string>? DhcpServerAccessList { get; set; }

        [Input("dhcpSnoopingStaticClients")]
        private InputList<Inputs.ManagedswitchDhcpSnoopingStaticClientGetArgs>? _dhcpSnoopingStaticClients;

        /// <summary>
        /// Configure FortiSwitch DHCP snooping static clients. The structure of `dhcp_snooping_static_client` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchDhcpSnoopingStaticClientGetArgs> DhcpSnoopingStaticClients
        {
            get => _dhcpSnoopingStaticClients ?? (_dhcpSnoopingStaticClients = new InputList<Inputs.ManagedswitchDhcpSnoopingStaticClientGetArgs>());
            set => _dhcpSnoopingStaticClients = value;
        }

        /// <summary>
        /// Directly connected FortiSwitch.
        /// </summary>
        [Input("directlyConnected")]
        public Input<int>? DirectlyConnected { get; set; }

        /// <summary>
        /// List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
        /// </summary>
        [Input("dynamicCapability")]
        public Input<int>? DynamicCapability { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Dynamically discovered FortiSwitch.
        /// </summary>
        [Input("dynamicallyDiscovered")]
        public Input<int>? DynamicallyDiscovered { get; set; }

        /// <summary>
        /// Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("firmwareProvision")]
        public Input<string>? FirmwareProvision { get; set; }

        /// <summary>
        /// Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
        /// </summary>
        [Input("firmwareProvisionLatest")]
        public Input<string>? FirmwareProvisionLatest { get; set; }

        /// <summary>
        /// Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
        /// </summary>
        [Input("firmwareProvisionVersion")]
        public Input<string>? FirmwareProvisionVersion { get; set; }

        /// <summary>
        /// Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
        /// </summary>
        [Input("flowIdentity")]
        public Input<string>? FlowIdentity { get; set; }

        /// <summary>
        /// FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        /// </summary>
        [Input("fswWan1Admin")]
        public Input<string>? FswWan1Admin { get; set; }

        /// <summary>
        /// Fortiswitch WAN1 peer port.
        /// </summary>
        [Input("fswWan1Peer")]
        public Input<string>? FswWan1Peer { get; set; }

        /// <summary>
        /// FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        /// </summary>
        [Input("fswWan2Admin")]
        public Input<string>? FswWan2Admin { get; set; }

        /// <summary>
        /// FortiSwitch WAN2 peer port.
        /// </summary>
        [Input("fswWan2Peer")]
        public Input<string>? FswWan2Peer { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Configure FortiSwitch IGMP snooping global settings. The structure of `igmp_snooping` block is documented below.
        /// </summary>
        [Input("igmpSnooping")]
        public Input<Inputs.ManagedswitchIgmpSnoopingGetArgs>? IgmpSnooping { get; set; }

        [Input("ipSourceGuards")]
        private InputList<Inputs.ManagedswitchIpSourceGuardGetArgs>? _ipSourceGuards;

        /// <summary>
        /// IP source guard. The structure of `ip_source_guard` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchIpSourceGuardGetArgs> IpSourceGuards
        {
            get => _ipSourceGuards ?? (_ipSourceGuards = new InputList<Inputs.ManagedswitchIpSourceGuardGetArgs>());
            set => _ipSourceGuards = value;
        }

        /// <summary>
        /// Layer 3 management discovered.
        /// </summary>
        [Input("l3Discovered")]
        public Input<int>? L3Discovered { get; set; }

        /// <summary>
        /// FortiSwitch maximum allowed trunk members.
        /// </summary>
        [Input("maxAllowedTrunkMembers")]
        public Input<int>? MaxAllowedTrunkMembers { get; set; }

        /// <summary>
        /// Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("mclagIgmpSnoopingAware")]
        public Input<string>? MclagIgmpSnoopingAware { get; set; }

        /// <summary>
        /// FortiLink management mode.
        /// </summary>
        [Input("mgmtMode")]
        public Input<int>? MgmtMode { get; set; }

        [Input("mirrors")]
        private InputList<Inputs.ManagedswitchMirrorGetArgs>? _mirrors;

        /// <summary>
        /// Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchMirrorGetArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new InputList<Inputs.ManagedswitchMirrorGetArgs>());
            set => _mirrors = value;
        }

        /// <summary>
        /// Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n802_1x_settings` block is documented below.
        /// </summary>
        [Input("n8021xSettings")]
        public Input<Inputs.ManagedswitchN8021xSettingsGetArgs>? N8021xSettings { get; set; }

        /// <summary>
        /// Managed-switch name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("overrideSnmpCommunity")]
        public Input<string>? OverrideSnmpCommunity { get; set; }

        /// <summary>
        /// Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("overrideSnmpSysinfo")]
        public Input<string>? OverrideSnmpSysinfo { get; set; }

        /// <summary>
        /// Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("overrideSnmpTrapThreshold")]
        public Input<string>? OverrideSnmpTrapThreshold { get; set; }

        /// <summary>
        /// Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("overrideSnmpUser")]
        public Input<string>? OverrideSnmpUser { get; set; }

        /// <summary>
        /// VDOM which owner of port belongs to.
        /// </summary>
        [Input("ownerVdom")]
        public Input<string>? OwnerVdom { get; set; }

        /// <summary>
        /// PoE detection type for FortiSwitch.
        /// </summary>
        [Input("poeDetectionType")]
        public Input<int>? PoeDetectionType { get; set; }

        /// <summary>
        /// Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("poeLldpDetection")]
        public Input<string>? PoeLldpDetection { get; set; }

        /// <summary>
        /// Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("poePreStandardDetection")]
        public Input<string>? PoePreStandardDetection { get; set; }

        [Input("ports")]
        private InputList<Inputs.ManagedswitchPortGetArgs>? _ports;

        /// <summary>
        /// Managed-switch port list. The structure of `ports` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchPortGetArgs> Ports
        {
            get => _ports ?? (_ports = new InputList<Inputs.ManagedswitchPortGetArgs>());
            set => _ports = value;
        }

        /// <summary>
        /// Pre-provisioned managed switch.
        /// </summary>
        [Input("preProvisioned")]
        public Input<int>? PreProvisioned { get; set; }

        /// <summary>
        /// PTP profile configuration.
        /// </summary>
        [Input("ptpProfile")]
        public Input<string>? PtpProfile { get; set; }

        /// <summary>
        /// Enable/disable PTP profile on this FortiSwitch. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("ptpStatus")]
        public Input<string>? PtpStatus { get; set; }

        /// <summary>
        /// Purdue Level of this FortiSwitch. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
        /// </summary>
        [Input("purdueLevel")]
        public Input<string>? PurdueLevel { get; set; }

        /// <summary>
        /// Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
        /// </summary>
        [Input("qosDropPolicy")]
        public Input<string>? QosDropPolicy { get; set; }

        /// <summary>
        /// Set QoS RED/WRED drop probability.
        /// </summary>
        [Input("qosRedProbability")]
        public Input<int>? QosRedProbability { get; set; }

        /// <summary>
        /// NAS-IP address.
        /// </summary>
        [Input("radiusNasIp")]
        public Input<string>? RadiusNasIp { get; set; }

        /// <summary>
        /// Use locally defined NAS-IP. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("radiusNasIpOverride")]
        public Input<string>? RadiusNasIpOverride { get; set; }

        [Input("remoteLogs")]
        private InputList<Inputs.ManagedswitchRemoteLogGetArgs>? _remoteLogs;

        /// <summary>
        /// Configure logging by FortiSwitch device to a remote syslog server. The structure of `remote_log` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchRemoteLogGetArgs> RemoteLogs
        {
            get => _remoteLogs ?? (_remoteLogs = new InputList<Inputs.ManagedswitchRemoteLogGetArgs>());
            set => _remoteLogs = value;
        }

        /// <summary>
        /// Enable/disable route offload on this FortiSwitch. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("routeOffload")]
        public Input<string>? RouteOffload { get; set; }

        /// <summary>
        /// Enable/disable route offload MCLAG on this FortiSwitch. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("routeOffloadMclag")]
        public Input<string>? RouteOffloadMclag { get; set; }

        [Input("routeOffloadRouters")]
        private InputList<Inputs.ManagedswitchRouteOffloadRouterGetArgs>? _routeOffloadRouters;

        /// <summary>
        /// Configure route offload MCLAG IP address. The structure of `route_offload_router` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchRouteOffloadRouterGetArgs> RouteOffloadRouters
        {
            get => _routeOffloadRouters ?? (_routeOffloadRouters = new InputList<Inputs.ManagedswitchRouteOffloadRouterGetArgs>());
            set => _routeOffloadRouters = value;
        }

        /// <summary>
        /// Managed-switch serial number.
        /// </summary>
        [Input("sn")]
        public Input<string>? Sn { get; set; }

        [Input("snmpCommunities")]
        private InputList<Inputs.ManagedswitchSnmpCommunityGetArgs>? _snmpCommunities;

        /// <summary>
        /// Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmp_community` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchSnmpCommunityGetArgs> SnmpCommunities
        {
            get => _snmpCommunities ?? (_snmpCommunities = new InputList<Inputs.ManagedswitchSnmpCommunityGetArgs>());
            set => _snmpCommunities = value;
        }

        /// <summary>
        /// Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmp_sysinfo` block is documented below.
        /// </summary>
        [Input("snmpSysinfo")]
        public Input<Inputs.ManagedswitchSnmpSysinfoGetArgs>? SnmpSysinfo { get; set; }

        /// <summary>
        /// Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmp_trap_threshold` block is documented below.
        /// </summary>
        [Input("snmpTrapThreshold")]
        public Input<Inputs.ManagedswitchSnmpTrapThresholdGetArgs>? SnmpTrapThreshold { get; set; }

        [Input("snmpUsers")]
        private InputList<Inputs.ManagedswitchSnmpUserGetArgs>? _snmpUsers;

        /// <summary>
        /// Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmp_user` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchSnmpUserGetArgs> SnmpUsers
        {
            get => _snmpUsers ?? (_snmpUsers = new InputList<Inputs.ManagedswitchSnmpUserGetArgs>());
            set => _snmpUsers = value;
        }

        /// <summary>
        /// Staged image version for FortiSwitch.
        /// </summary>
        [Input("stagedImageVersion")]
        public Input<string>? StagedImageVersion { get; set; }

        [Input("staticMacs")]
        private InputList<Inputs.ManagedswitchStaticMacGetArgs>? _staticMacs;

        /// <summary>
        /// Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `static_mac` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchStaticMacGetArgs> StaticMacs
        {
            get => _staticMacs ?? (_staticMacs = new InputList<Inputs.ManagedswitchStaticMacGetArgs>());
            set => _staticMacs = value;
        }

        /// <summary>
        /// Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `storm_control` block is documented below.
        /// </summary>
        [Input("stormControl")]
        public Input<Inputs.ManagedswitchStormControlGetArgs>? StormControl { get; set; }

        [Input("stpInstances")]
        private InputList<Inputs.ManagedswitchStpInstanceGetArgs>? _stpInstances;

        /// <summary>
        /// Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stp_instance` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchStpInstanceGetArgs> StpInstances
        {
            get => _stpInstances ?? (_stpInstances = new InputList<Inputs.ManagedswitchStpInstanceGetArgs>());
            set => _stpInstances = value;
        }

        /// <summary>
        /// Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stp_settings` block is documented below.
        /// </summary>
        [Input("stpSettings")]
        public Input<Inputs.ManagedswitchStpSettingsGetArgs>? StpSettings { get; set; }

        /// <summary>
        /// User definable label/tag.
        /// </summary>
        [Input("switchDeviceTag")]
        public Input<string>? SwitchDeviceTag { get; set; }

        /// <summary>
        /// DHCP option43 key.
        /// </summary>
        [Input("switchDhcpOpt43Key")]
        public Input<string>? SwitchDhcpOpt43Key { get; set; }

        /// <summary>
        /// Managed-switch id.
        /// </summary>
        [Input("switchId")]
        public Input<string>? SwitchId { get; set; }

        /// <summary>
        /// Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switch_log` block is documented below.
        /// </summary>
        [Input("switchLog")]
        public Input<Inputs.ManagedswitchSwitchLogGetArgs>? SwitchLog { get; set; }

        /// <summary>
        /// FortiSwitch profile.
        /// </summary>
        [Input("switchProfile")]
        public Input<string>? SwitchProfile { get; set; }

        /// <summary>
        /// Configure spanning tree protocol (STP). The structure of `switch_stp_settings` block is documented below.
        /// </summary>
        [Input("switchStpSettings")]
        public Input<Inputs.ManagedswitchSwitchStpSettingsGetArgs>? SwitchStpSettings { get; set; }

        /// <summary>
        /// TDR supported.
        /// </summary>
        [Input("tdrSupported")]
        public Input<string>? TdrSupported { get; set; }

        /// <summary>
        /// SOCKS tunnel management discovered.
        /// </summary>
        [Input("tunnelDiscovered")]
        public Input<int>? TunnelDiscovered { get; set; }

        /// <summary>
        /// Indication of switch type, physical or virtual. Valid values: `virtual`, `physical`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// FortiSwitch version.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        [Input("vlans")]
        private InputList<Inputs.ManagedswitchVlanGetArgs>? _vlans;

        /// <summary>
        /// Configure VLAN assignment priority. The structure of `vlan` block is documented below.
        /// </summary>
        public InputList<Inputs.ManagedswitchVlanGetArgs> Vlans
        {
            get => _vlans ?? (_vlans = new InputList<Inputs.ManagedswitchVlanGetArgs>());
            set => _vlans = value;
        }

        public ManagedswitchState()
        {
        }
        public static new ManagedswitchState Empty => new ManagedswitchState();
    }
}
