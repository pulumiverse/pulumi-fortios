// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Switchcontroller
{
    /// <summary>
    /// Configure FortiSwitch LLDP profiles.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.Switchcontroller.Lldpprofile("trname", new()
    ///     {
    ///         AutoIsl = "enable",
    ///         AutoIslHelloTimer = 3,
    ///         AutoIslPortGroup = 0,
    ///         AutoIslReceiveTimeout = 60,
    ///         MedTlvs = "inventory-management network-policy",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// SwitchController LldpProfile can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:switchcontroller/lldpprofile:Lldpprofile labelname {{name}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:switchcontroller/lldpprofile:Lldpprofile labelname {{name}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:switchcontroller/lldpprofile:Lldpprofile")]
    public partial class Lldpprofile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable/disable auto inter-switch LAG. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("autoIsl")]
        public Output<string> AutoIsl { get; private set; } = null!;

        /// <summary>
        /// Auto inter-switch LAG authentication mode. Valid values: `legacy`, `strict`, `relax`.
        /// </summary>
        [Output("autoIslAuth")]
        public Output<string> AutoIslAuth { get; private set; } = null!;

        /// <summary>
        /// Auto inter-switch LAG encryption mode. Valid values: `none`, `mixed`, `must`.
        /// </summary>
        [Output("autoIslAuthEncrypt")]
        public Output<string> AutoIslAuthEncrypt { get; private set; } = null!;

        /// <summary>
        /// Auto inter-switch LAG authentication identity.
        /// </summary>
        [Output("autoIslAuthIdentity")]
        public Output<string> AutoIslAuthIdentity { get; private set; } = null!;

        /// <summary>
        /// Auto inter-switch LAG macsec profile for encryption.
        /// </summary>
        [Output("autoIslAuthMacsecProfile")]
        public Output<string> AutoIslAuthMacsecProfile { get; private set; } = null!;

        /// <summary>
        /// Auto inter-switch LAG authentication reauth period in seconds(10 - 3600, default = 3600).
        /// </summary>
        [Output("autoIslAuthReauth")]
        public Output<int> AutoIslAuthReauth { get; private set; } = null!;

        /// <summary>
        /// Auto inter-switch LAG authentication user certificate.
        /// </summary>
        [Output("autoIslAuthUser")]
        public Output<string> AutoIslAuthUser { get; private set; } = null!;

        /// <summary>
        /// Auto inter-switch LAG hello timer duration (1 - 30 sec, default = 3).
        /// </summary>
        [Output("autoIslHelloTimer")]
        public Output<int> AutoIslHelloTimer { get; private set; } = null!;

        /// <summary>
        /// Auto inter-switch LAG port group ID (0 - 9).
        /// </summary>
        [Output("autoIslPortGroup")]
        public Output<int> AutoIslPortGroup { get; private set; } = null!;

        /// <summary>
        /// Auto inter-switch LAG timeout if no response is received (3 - 90 sec, default = 9).
        /// </summary>
        [Output("autoIslReceiveTimeout")]
        public Output<int> AutoIslReceiveTimeout { get; private set; } = null!;

        /// <summary>
        /// Enable/disable MCLAG inter chassis link. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("autoMclagIcl")]
        public Output<string> AutoMclagIcl { get; private set; } = null!;

        /// <summary>
        /// Configuration method to edit custom TLV entries. The structure of `custom_tlvs` block is documented below.
        /// </summary>
        [Output("customTlvs")]
        public Output<ImmutableArray<Outputs.LldpprofileCustomTlv>> CustomTlvs { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// Configuration method to edit Media Endpoint Discovery (MED) location service type-length-value (TLV) categories. The structure of `med_location_service` block is documented below.
        /// </summary>
        [Output("medLocationServices")]
        public Output<ImmutableArray<Outputs.LldpprofileMedLocationService>> MedLocationServices { get; private set; } = null!;

        /// <summary>
        /// Configuration method to edit Media Endpoint Discovery (MED) network policy type-length-value (TLV) categories. The structure of `med_network_policy` block is documented below.
        /// </summary>
        [Output("medNetworkPolicies")]
        public Output<ImmutableArray<Outputs.LldpprofileMedNetworkPolicy>> MedNetworkPolicies { get; private set; } = null!;

        /// <summary>
        /// Transmitted LLDP-MED TLVs (type-length-value descriptions): inventory management TLV and/or network policy TLV.
        /// </summary>
        [Output("medTlvs")]
        public Output<string> MedTlvs { get; private set; } = null!;

        /// <summary>
        /// Transmitted IEEE 802.1 TLVs. Valid values: `port-vlan-id`.
        /// </summary>
        [Output("n8021Tlvs")]
        public Output<string> N8021Tlvs { get; private set; } = null!;

        /// <summary>
        /// Transmitted IEEE 802.3 TLVs.
        /// </summary>
        [Output("n8023Tlvs")]
        public Output<string> N8023Tlvs { get; private set; } = null!;

        /// <summary>
        /// Profile name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Lldpprofile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Lldpprofile(string name, LldpprofileArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:switchcontroller/lldpprofile:Lldpprofile", name, args ?? new LldpprofileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Lldpprofile(string name, Input<string> id, LldpprofileState? state = null, CustomResourceOptions? options = null)
            : base("fortios:switchcontroller/lldpprofile:Lldpprofile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Lldpprofile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Lldpprofile Get(string name, Input<string> id, LldpprofileState? state = null, CustomResourceOptions? options = null)
        {
            return new Lldpprofile(name, id, state, options);
        }
    }

    public sealed class LldpprofileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable auto inter-switch LAG. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("autoIsl")]
        public Input<string>? AutoIsl { get; set; }

        /// <summary>
        /// Auto inter-switch LAG authentication mode. Valid values: `legacy`, `strict`, `relax`.
        /// </summary>
        [Input("autoIslAuth")]
        public Input<string>? AutoIslAuth { get; set; }

        /// <summary>
        /// Auto inter-switch LAG encryption mode. Valid values: `none`, `mixed`, `must`.
        /// </summary>
        [Input("autoIslAuthEncrypt")]
        public Input<string>? AutoIslAuthEncrypt { get; set; }

        /// <summary>
        /// Auto inter-switch LAG authentication identity.
        /// </summary>
        [Input("autoIslAuthIdentity")]
        public Input<string>? AutoIslAuthIdentity { get; set; }

        /// <summary>
        /// Auto inter-switch LAG macsec profile for encryption.
        /// </summary>
        [Input("autoIslAuthMacsecProfile")]
        public Input<string>? AutoIslAuthMacsecProfile { get; set; }

        /// <summary>
        /// Auto inter-switch LAG authentication reauth period in seconds(10 - 3600, default = 3600).
        /// </summary>
        [Input("autoIslAuthReauth")]
        public Input<int>? AutoIslAuthReauth { get; set; }

        /// <summary>
        /// Auto inter-switch LAG authentication user certificate.
        /// </summary>
        [Input("autoIslAuthUser")]
        public Input<string>? AutoIslAuthUser { get; set; }

        /// <summary>
        /// Auto inter-switch LAG hello timer duration (1 - 30 sec, default = 3).
        /// </summary>
        [Input("autoIslHelloTimer")]
        public Input<int>? AutoIslHelloTimer { get; set; }

        /// <summary>
        /// Auto inter-switch LAG port group ID (0 - 9).
        /// </summary>
        [Input("autoIslPortGroup")]
        public Input<int>? AutoIslPortGroup { get; set; }

        /// <summary>
        /// Auto inter-switch LAG timeout if no response is received (3 - 90 sec, default = 9).
        /// </summary>
        [Input("autoIslReceiveTimeout")]
        public Input<int>? AutoIslReceiveTimeout { get; set; }

        /// <summary>
        /// Enable/disable MCLAG inter chassis link. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("autoMclagIcl")]
        public Input<string>? AutoMclagIcl { get; set; }

        [Input("customTlvs")]
        private InputList<Inputs.LldpprofileCustomTlvArgs>? _customTlvs;

        /// <summary>
        /// Configuration method to edit custom TLV entries. The structure of `custom_tlvs` block is documented below.
        /// </summary>
        public InputList<Inputs.LldpprofileCustomTlvArgs> CustomTlvs
        {
            get => _customTlvs ?? (_customTlvs = new InputList<Inputs.LldpprofileCustomTlvArgs>());
            set => _customTlvs = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        [Input("medLocationServices")]
        private InputList<Inputs.LldpprofileMedLocationServiceArgs>? _medLocationServices;

        /// <summary>
        /// Configuration method to edit Media Endpoint Discovery (MED) location service type-length-value (TLV) categories. The structure of `med_location_service` block is documented below.
        /// </summary>
        public InputList<Inputs.LldpprofileMedLocationServiceArgs> MedLocationServices
        {
            get => _medLocationServices ?? (_medLocationServices = new InputList<Inputs.LldpprofileMedLocationServiceArgs>());
            set => _medLocationServices = value;
        }

        [Input("medNetworkPolicies")]
        private InputList<Inputs.LldpprofileMedNetworkPolicyArgs>? _medNetworkPolicies;

        /// <summary>
        /// Configuration method to edit Media Endpoint Discovery (MED) network policy type-length-value (TLV) categories. The structure of `med_network_policy` block is documented below.
        /// </summary>
        public InputList<Inputs.LldpprofileMedNetworkPolicyArgs> MedNetworkPolicies
        {
            get => _medNetworkPolicies ?? (_medNetworkPolicies = new InputList<Inputs.LldpprofileMedNetworkPolicyArgs>());
            set => _medNetworkPolicies = value;
        }

        /// <summary>
        /// Transmitted LLDP-MED TLVs (type-length-value descriptions): inventory management TLV and/or network policy TLV.
        /// </summary>
        [Input("medTlvs")]
        public Input<string>? MedTlvs { get; set; }

        /// <summary>
        /// Transmitted IEEE 802.1 TLVs. Valid values: `port-vlan-id`.
        /// </summary>
        [Input("n8021Tlvs")]
        public Input<string>? N8021Tlvs { get; set; }

        /// <summary>
        /// Transmitted IEEE 802.3 TLVs.
        /// </summary>
        [Input("n8023Tlvs")]
        public Input<string>? N8023Tlvs { get; set; }

        /// <summary>
        /// Profile name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public LldpprofileArgs()
        {
        }
        public static new LldpprofileArgs Empty => new LldpprofileArgs();
    }

    public sealed class LldpprofileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable auto inter-switch LAG. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("autoIsl")]
        public Input<string>? AutoIsl { get; set; }

        /// <summary>
        /// Auto inter-switch LAG authentication mode. Valid values: `legacy`, `strict`, `relax`.
        /// </summary>
        [Input("autoIslAuth")]
        public Input<string>? AutoIslAuth { get; set; }

        /// <summary>
        /// Auto inter-switch LAG encryption mode. Valid values: `none`, `mixed`, `must`.
        /// </summary>
        [Input("autoIslAuthEncrypt")]
        public Input<string>? AutoIslAuthEncrypt { get; set; }

        /// <summary>
        /// Auto inter-switch LAG authentication identity.
        /// </summary>
        [Input("autoIslAuthIdentity")]
        public Input<string>? AutoIslAuthIdentity { get; set; }

        /// <summary>
        /// Auto inter-switch LAG macsec profile for encryption.
        /// </summary>
        [Input("autoIslAuthMacsecProfile")]
        public Input<string>? AutoIslAuthMacsecProfile { get; set; }

        /// <summary>
        /// Auto inter-switch LAG authentication reauth period in seconds(10 - 3600, default = 3600).
        /// </summary>
        [Input("autoIslAuthReauth")]
        public Input<int>? AutoIslAuthReauth { get; set; }

        /// <summary>
        /// Auto inter-switch LAG authentication user certificate.
        /// </summary>
        [Input("autoIslAuthUser")]
        public Input<string>? AutoIslAuthUser { get; set; }

        /// <summary>
        /// Auto inter-switch LAG hello timer duration (1 - 30 sec, default = 3).
        /// </summary>
        [Input("autoIslHelloTimer")]
        public Input<int>? AutoIslHelloTimer { get; set; }

        /// <summary>
        /// Auto inter-switch LAG port group ID (0 - 9).
        /// </summary>
        [Input("autoIslPortGroup")]
        public Input<int>? AutoIslPortGroup { get; set; }

        /// <summary>
        /// Auto inter-switch LAG timeout if no response is received (3 - 90 sec, default = 9).
        /// </summary>
        [Input("autoIslReceiveTimeout")]
        public Input<int>? AutoIslReceiveTimeout { get; set; }

        /// <summary>
        /// Enable/disable MCLAG inter chassis link. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("autoMclagIcl")]
        public Input<string>? AutoMclagIcl { get; set; }

        [Input("customTlvs")]
        private InputList<Inputs.LldpprofileCustomTlvGetArgs>? _customTlvs;

        /// <summary>
        /// Configuration method to edit custom TLV entries. The structure of `custom_tlvs` block is documented below.
        /// </summary>
        public InputList<Inputs.LldpprofileCustomTlvGetArgs> CustomTlvs
        {
            get => _customTlvs ?? (_customTlvs = new InputList<Inputs.LldpprofileCustomTlvGetArgs>());
            set => _customTlvs = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        [Input("medLocationServices")]
        private InputList<Inputs.LldpprofileMedLocationServiceGetArgs>? _medLocationServices;

        /// <summary>
        /// Configuration method to edit Media Endpoint Discovery (MED) location service type-length-value (TLV) categories. The structure of `med_location_service` block is documented below.
        /// </summary>
        public InputList<Inputs.LldpprofileMedLocationServiceGetArgs> MedLocationServices
        {
            get => _medLocationServices ?? (_medLocationServices = new InputList<Inputs.LldpprofileMedLocationServiceGetArgs>());
            set => _medLocationServices = value;
        }

        [Input("medNetworkPolicies")]
        private InputList<Inputs.LldpprofileMedNetworkPolicyGetArgs>? _medNetworkPolicies;

        /// <summary>
        /// Configuration method to edit Media Endpoint Discovery (MED) network policy type-length-value (TLV) categories. The structure of `med_network_policy` block is documented below.
        /// </summary>
        public InputList<Inputs.LldpprofileMedNetworkPolicyGetArgs> MedNetworkPolicies
        {
            get => _medNetworkPolicies ?? (_medNetworkPolicies = new InputList<Inputs.LldpprofileMedNetworkPolicyGetArgs>());
            set => _medNetworkPolicies = value;
        }

        /// <summary>
        /// Transmitted LLDP-MED TLVs (type-length-value descriptions): inventory management TLV and/or network policy TLV.
        /// </summary>
        [Input("medTlvs")]
        public Input<string>? MedTlvs { get; set; }

        /// <summary>
        /// Transmitted IEEE 802.1 TLVs. Valid values: `port-vlan-id`.
        /// </summary>
        [Input("n8021Tlvs")]
        public Input<string>? N8021Tlvs { get; set; }

        /// <summary>
        /// Transmitted IEEE 802.3 TLVs.
        /// </summary>
        [Input("n8023Tlvs")]
        public Input<string>? N8023Tlvs { get; set; }

        /// <summary>
        /// Profile name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public LldpprofileState()
        {
        }
        public static new LldpprofileState Empty => new LldpprofileState();
    }
}
