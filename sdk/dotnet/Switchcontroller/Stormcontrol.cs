// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Switchcontroller
{
    /// <summary>
    /// Configure FortiSwitch storm control.
    /// 
    /// ## Import
    /// 
    /// SwitchController StormControl can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:switchcontroller/stormcontrol:Stormcontrol labelname SwitchControllerStormControl
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:switchcontroller/stormcontrol:Stormcontrol labelname SwitchControllerStormControl
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:switchcontroller/stormcontrol:Stormcontrol")]
    public partial class Stormcontrol : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("broadcast")]
        public Output<string> Broadcast { get; private set; } = null!;

        /// <summary>
        /// Rate in packets per second at which storm control drops excess traffic, default=500. On FortiOS versions 6.2.0-7.2.8: 1 - 10000000. On FortiOS versions &gt;= 7.4.0: 0-10000000, drop-all=0.
        /// </summary>
        [Output("rate")]
        public Output<int> Rate { get; private set; } = null!;

        /// <summary>
        /// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("unknownMulticast")]
        public Output<string> UnknownMulticast { get; private set; } = null!;

        /// <summary>
        /// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("unknownUnicast")]
        public Output<string> UnknownUnicast { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Stormcontrol resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Stormcontrol(string name, StormcontrolArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:switchcontroller/stormcontrol:Stormcontrol", name, args ?? new StormcontrolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Stormcontrol(string name, Input<string> id, StormcontrolState? state = null, CustomResourceOptions? options = null)
            : base("fortios:switchcontroller/stormcontrol:Stormcontrol", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Stormcontrol resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Stormcontrol Get(string name, Input<string> id, StormcontrolState? state = null, CustomResourceOptions? options = null)
        {
            return new Stormcontrol(name, id, state, options);
        }
    }

    public sealed class StormcontrolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("broadcast")]
        public Input<string>? Broadcast { get; set; }

        /// <summary>
        /// Rate in packets per second at which storm control drops excess traffic, default=500. On FortiOS versions 6.2.0-7.2.8: 1 - 10000000. On FortiOS versions &gt;= 7.4.0: 0-10000000, drop-all=0.
        /// </summary>
        [Input("rate")]
        public Input<int>? Rate { get; set; }

        /// <summary>
        /// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("unknownMulticast")]
        public Input<string>? UnknownMulticast { get; set; }

        /// <summary>
        /// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("unknownUnicast")]
        public Input<string>? UnknownUnicast { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public StormcontrolArgs()
        {
        }
        public static new StormcontrolArgs Empty => new StormcontrolArgs();
    }

    public sealed class StormcontrolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("broadcast")]
        public Input<string>? Broadcast { get; set; }

        /// <summary>
        /// Rate in packets per second at which storm control drops excess traffic, default=500. On FortiOS versions 6.2.0-7.2.8: 1 - 10000000. On FortiOS versions &gt;= 7.4.0: 0-10000000, drop-all=0.
        /// </summary>
        [Input("rate")]
        public Input<int>? Rate { get; set; }

        /// <summary>
        /// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("unknownMulticast")]
        public Input<string>? UnknownMulticast { get; set; }

        /// <summary>
        /// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("unknownUnicast")]
        public Input<string>? UnknownUnicast { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public StormcontrolState()
        {
        }
        public static new StormcontrolState Empty => new StormcontrolState();
    }
}
