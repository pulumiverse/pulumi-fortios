// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Extensioncontroller
{
    /// <summary>
    /// FortiExtender wifi vap configuration. Applies to FortiOS Version `&gt;= 7.4.4`.
    /// 
    /// ## Import
    /// 
    /// ExtensionController ExtenderVap can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:extensioncontroller/extendervap:Extendervap labelname {{name}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:extensioncontroller/extendervap:Extendervap labelname {{name}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:extensioncontroller/extendervap:Extendervap")]
    public partial class Extendervap : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        /// </summary>
        [Output("allowaccess")]
        public Output<string> Allowaccess { get; private set; } = null!;

        /// <summary>
        /// Wi-Fi Authentication Server Address (IPv4 format).
        /// </summary>
        [Output("authServerAddress")]
        public Output<string> AuthServerAddress { get; private set; } = null!;

        /// <summary>
        /// Wi-Fi Authentication Server Port.
        /// </summary>
        [Output("authServerPort")]
        public Output<int> AuthServerPort { get; private set; } = null!;

        /// <summary>
        /// Wi-Fi Authentication Server Secret.
        /// </summary>
        [Output("authServerSecret")]
        public Output<string> AuthServerSecret { get; private set; } = null!;

        /// <summary>
        /// Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("broadcastSsid")]
        public Output<string> BroadcastSsid { get; private set; } = null!;

        /// <summary>
        /// Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("bssColorPartial")]
        public Output<string> BssColorPartial { get; private set; } = null!;

        /// <summary>
        /// Wi-Fi DTIM (1 - 255) default = 1.
        /// </summary>
        [Output("dtim")]
        public Output<int> Dtim { get; private set; } = null!;

        /// <summary>
        /// End ip address.
        /// </summary>
        [Output("endIp")]
        public Output<string> EndIp { get; private set; } = null!;

        /// <summary>
        /// Extender ip address.
        /// </summary>
        [Output("ipAddress")]
        public Output<string> IpAddress { get; private set; } = null!;

        /// <summary>
        /// Wi-Fi max clients (0 - 512), default = 0 (no limit)
        /// </summary>
        [Output("maxClients")]
        public Output<int> MaxClients { get; private set; } = null!;

        /// <summary>
        /// Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("muMimo")]
        public Output<string> MuMimo { get; private set; } = null!;

        /// <summary>
        /// Wi-Fi VAP name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Wi-Fi passphrase.
        /// </summary>
        [Output("passphrase")]
        public Output<string?> Passphrase { get; private set; } = null!;

        /// <summary>
        /// Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
        /// </summary>
        [Output("pmf")]
        public Output<string> Pmf { get; private set; } = null!;

        /// <summary>
        /// Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
        /// </summary>
        [Output("rtsThreshold")]
        public Output<int> RtsThreshold { get; private set; } = null!;

        /// <summary>
        /// Wi-Fi SAE Password.
        /// </summary>
        [Output("saePassword")]
        public Output<string?> SaePassword { get; private set; } = null!;

        /// <summary>
        /// Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
        /// </summary>
        [Output("security")]
        public Output<string> Security { get; private set; } = null!;

        /// <summary>
        /// Wi-Fi SSID.
        /// </summary>
        [Output("ssid")]
        public Output<string> Ssid { get; private set; } = null!;

        /// <summary>
        /// Start ip address.
        /// </summary>
        [Output("startIp")]
        public Output<string> StartIp { get; private set; } = null!;

        /// <summary>
        /// Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("targetWakeTime")]
        public Output<string> TargetWakeTime { get; private set; } = null!;

        /// <summary>
        /// Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Extendervap resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Extendervap(string name, ExtendervapArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:extensioncontroller/extendervap:Extendervap", name, args ?? new ExtendervapArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Extendervap(string name, Input<string> id, ExtendervapState? state = null, CustomResourceOptions? options = null)
            : base("fortios:extensioncontroller/extendervap:Extendervap", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Extendervap resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Extendervap Get(string name, Input<string> id, ExtendervapState? state = null, CustomResourceOptions? options = null)
        {
            return new Extendervap(name, id, state, options);
        }
    }

    public sealed class ExtendervapArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        /// </summary>
        [Input("allowaccess")]
        public Input<string>? Allowaccess { get; set; }

        /// <summary>
        /// Wi-Fi Authentication Server Address (IPv4 format).
        /// </summary>
        [Input("authServerAddress")]
        public Input<string>? AuthServerAddress { get; set; }

        /// <summary>
        /// Wi-Fi Authentication Server Port.
        /// </summary>
        [Input("authServerPort")]
        public Input<int>? AuthServerPort { get; set; }

        /// <summary>
        /// Wi-Fi Authentication Server Secret.
        /// </summary>
        [Input("authServerSecret")]
        public Input<string>? AuthServerSecret { get; set; }

        /// <summary>
        /// Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("broadcastSsid")]
        public Input<string>? BroadcastSsid { get; set; }

        /// <summary>
        /// Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("bssColorPartial")]
        public Input<string>? BssColorPartial { get; set; }

        /// <summary>
        /// Wi-Fi DTIM (1 - 255) default = 1.
        /// </summary>
        [Input("dtim")]
        public Input<int>? Dtim { get; set; }

        /// <summary>
        /// End ip address.
        /// </summary>
        [Input("endIp")]
        public Input<string>? EndIp { get; set; }

        /// <summary>
        /// Extender ip address.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// Wi-Fi max clients (0 - 512), default = 0 (no limit)
        /// </summary>
        [Input("maxClients")]
        public Input<int>? MaxClients { get; set; }

        /// <summary>
        /// Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("muMimo")]
        public Input<string>? MuMimo { get; set; }

        /// <summary>
        /// Wi-Fi VAP name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Wi-Fi passphrase.
        /// </summary>
        [Input("passphrase")]
        public Input<string>? Passphrase { get; set; }

        /// <summary>
        /// Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
        /// </summary>
        [Input("pmf")]
        public Input<string>? Pmf { get; set; }

        /// <summary>
        /// Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
        /// </summary>
        [Input("rtsThreshold")]
        public Input<int>? RtsThreshold { get; set; }

        /// <summary>
        /// Wi-Fi SAE Password.
        /// </summary>
        [Input("saePassword")]
        public Input<string>? SaePassword { get; set; }

        /// <summary>
        /// Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
        /// </summary>
        [Input("security")]
        public Input<string>? Security { get; set; }

        /// <summary>
        /// Wi-Fi SSID.
        /// </summary>
        [Input("ssid")]
        public Input<string>? Ssid { get; set; }

        /// <summary>
        /// Start ip address.
        /// </summary>
        [Input("startIp")]
        public Input<string>? StartIp { get; set; }

        /// <summary>
        /// Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("targetWakeTime")]
        public Input<string>? TargetWakeTime { get; set; }

        /// <summary>
        /// Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public ExtendervapArgs()
        {
        }
        public static new ExtendervapArgs Empty => new ExtendervapArgs();
    }

    public sealed class ExtendervapState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        /// </summary>
        [Input("allowaccess")]
        public Input<string>? Allowaccess { get; set; }

        /// <summary>
        /// Wi-Fi Authentication Server Address (IPv4 format).
        /// </summary>
        [Input("authServerAddress")]
        public Input<string>? AuthServerAddress { get; set; }

        /// <summary>
        /// Wi-Fi Authentication Server Port.
        /// </summary>
        [Input("authServerPort")]
        public Input<int>? AuthServerPort { get; set; }

        /// <summary>
        /// Wi-Fi Authentication Server Secret.
        /// </summary>
        [Input("authServerSecret")]
        public Input<string>? AuthServerSecret { get; set; }

        /// <summary>
        /// Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("broadcastSsid")]
        public Input<string>? BroadcastSsid { get; set; }

        /// <summary>
        /// Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("bssColorPartial")]
        public Input<string>? BssColorPartial { get; set; }

        /// <summary>
        /// Wi-Fi DTIM (1 - 255) default = 1.
        /// </summary>
        [Input("dtim")]
        public Input<int>? Dtim { get; set; }

        /// <summary>
        /// End ip address.
        /// </summary>
        [Input("endIp")]
        public Input<string>? EndIp { get; set; }

        /// <summary>
        /// Extender ip address.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// Wi-Fi max clients (0 - 512), default = 0 (no limit)
        /// </summary>
        [Input("maxClients")]
        public Input<int>? MaxClients { get; set; }

        /// <summary>
        /// Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("muMimo")]
        public Input<string>? MuMimo { get; set; }

        /// <summary>
        /// Wi-Fi VAP name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Wi-Fi passphrase.
        /// </summary>
        [Input("passphrase")]
        public Input<string>? Passphrase { get; set; }

        /// <summary>
        /// Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
        /// </summary>
        [Input("pmf")]
        public Input<string>? Pmf { get; set; }

        /// <summary>
        /// Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
        /// </summary>
        [Input("rtsThreshold")]
        public Input<int>? RtsThreshold { get; set; }

        /// <summary>
        /// Wi-Fi SAE Password.
        /// </summary>
        [Input("saePassword")]
        public Input<string>? SaePassword { get; set; }

        /// <summary>
        /// Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
        /// </summary>
        [Input("security")]
        public Input<string>? Security { get; set; }

        /// <summary>
        /// Wi-Fi SSID.
        /// </summary>
        [Input("ssid")]
        public Input<string>? Ssid { get; set; }

        /// <summary>
        /// Start ip address.
        /// </summary>
        [Input("startIp")]
        public Input<string>? StartIp { get; set; }

        /// <summary>
        /// Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("targetWakeTime")]
        public Input<string>? TargetWakeTime { get; set; }

        /// <summary>
        /// Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public ExtendervapState()
        {
        }
        public static new ExtendervapState Empty => new ExtendervapState();
    }
}
