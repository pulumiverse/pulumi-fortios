// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Wanopt
{
    /// <summary>
    /// Configure a remote cache device as Web cache storage.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.Wanopt.Remotestorage("trname", new()
    ///     {
    ///         RemoteCacheIp = "0.0.0.0",
    ///         Status = "disable",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Wanopt RemoteStorage can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:wanopt/remotestorage:Remotestorage labelname WanoptRemoteStorage
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:wanopt/remotestorage:Remotestorage labelname WanoptRemoteStorage
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:wanopt/remotestorage:Remotestorage")]
    public partial class Remotestorage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID that this device uses to connect to the remote device.
        /// </summary>
        [Output("localCacheId")]
        public Output<string> LocalCacheId { get; private set; } = null!;

        /// <summary>
        /// ID of the remote device to which the device connects.
        /// </summary>
        [Output("remoteCacheId")]
        public Output<string> RemoteCacheId { get; private set; } = null!;

        /// <summary>
        /// IP address of the remote device to which the device connects.
        /// </summary>
        [Output("remoteCacheIp")]
        public Output<string> RemoteCacheIp { get; private set; } = null!;

        /// <summary>
        /// Enable/disable using remote device as Web cache storage. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Remotestorage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Remotestorage(string name, RemotestorageArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:wanopt/remotestorage:Remotestorage", name, args ?? new RemotestorageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Remotestorage(string name, Input<string> id, RemotestorageState? state = null, CustomResourceOptions? options = null)
            : base("fortios:wanopt/remotestorage:Remotestorage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Remotestorage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Remotestorage Get(string name, Input<string> id, RemotestorageState? state = null, CustomResourceOptions? options = null)
        {
            return new Remotestorage(name, id, state, options);
        }
    }

    public sealed class RemotestorageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID that this device uses to connect to the remote device.
        /// </summary>
        [Input("localCacheId")]
        public Input<string>? LocalCacheId { get; set; }

        /// <summary>
        /// ID of the remote device to which the device connects.
        /// </summary>
        [Input("remoteCacheId")]
        public Input<string>? RemoteCacheId { get; set; }

        /// <summary>
        /// IP address of the remote device to which the device connects.
        /// </summary>
        [Input("remoteCacheIp")]
        public Input<string>? RemoteCacheIp { get; set; }

        /// <summary>
        /// Enable/disable using remote device as Web cache storage. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public RemotestorageArgs()
        {
        }
        public static new RemotestorageArgs Empty => new RemotestorageArgs();
    }

    public sealed class RemotestorageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID that this device uses to connect to the remote device.
        /// </summary>
        [Input("localCacheId")]
        public Input<string>? LocalCacheId { get; set; }

        /// <summary>
        /// ID of the remote device to which the device connects.
        /// </summary>
        [Input("remoteCacheId")]
        public Input<string>? RemoteCacheId { get; set; }

        /// <summary>
        /// IP address of the remote device to which the device connects.
        /// </summary>
        [Input("remoteCacheIp")]
        public Input<string>? RemoteCacheIp { get; set; }

        /// <summary>
        /// Enable/disable using remote device as Web cache storage. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public RemotestorageState()
        {
        }
        public static new RemotestorageState Empty => new RemotestorageState();
    }
}
