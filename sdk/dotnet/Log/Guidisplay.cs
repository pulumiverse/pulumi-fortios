// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Log
{
    /// <summary>
    /// Configure how log messages are displayed on the GUI.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.Log.Guidisplay("trname", new()
    ///     {
    ///         FortiviewUnscannedApps = "disable",
    ///         ResolveApps = "enable",
    ///         ResolveHosts = "enable",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Log GuiDisplay can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:log/guidisplay:Guidisplay labelname LogGuiDisplay
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:log/guidisplay:Guidisplay labelname LogGuiDisplay
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:log/guidisplay:Guidisplay")]
    public partial class Guidisplay : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable/disable showing unscanned traffic in FortiView application charts. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("fortiviewUnscannedApps")]
        public Output<string> FortiviewUnscannedApps { get; private set; } = null!;

        /// <summary>
        /// Resolve unknown applications on the GUI using Fortinet's remote application database. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("resolveApps")]
        public Output<string> ResolveApps { get; private set; } = null!;

        /// <summary>
        /// Enable/disable resolving IP addresses to hostname in log messages on the GUI using reverse DNS lookup Valid values: `enable`, `disable`.
        /// </summary>
        [Output("resolveHosts")]
        public Output<string> ResolveHosts { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Guidisplay resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Guidisplay(string name, GuidisplayArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:log/guidisplay:Guidisplay", name, args ?? new GuidisplayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Guidisplay(string name, Input<string> id, GuidisplayState? state = null, CustomResourceOptions? options = null)
            : base("fortios:log/guidisplay:Guidisplay", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Guidisplay resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Guidisplay Get(string name, Input<string> id, GuidisplayState? state = null, CustomResourceOptions? options = null)
        {
            return new Guidisplay(name, id, state, options);
        }
    }

    public sealed class GuidisplayArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable showing unscanned traffic in FortiView application charts. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("fortiviewUnscannedApps")]
        public Input<string>? FortiviewUnscannedApps { get; set; }

        /// <summary>
        /// Resolve unknown applications on the GUI using Fortinet's remote application database. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("resolveApps")]
        public Input<string>? ResolveApps { get; set; }

        /// <summary>
        /// Enable/disable resolving IP addresses to hostname in log messages on the GUI using reverse DNS lookup Valid values: `enable`, `disable`.
        /// </summary>
        [Input("resolveHosts")]
        public Input<string>? ResolveHosts { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public GuidisplayArgs()
        {
        }
        public static new GuidisplayArgs Empty => new GuidisplayArgs();
    }

    public sealed class GuidisplayState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable showing unscanned traffic in FortiView application charts. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("fortiviewUnscannedApps")]
        public Input<string>? FortiviewUnscannedApps { get; set; }

        /// <summary>
        /// Resolve unknown applications on the GUI using Fortinet's remote application database. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("resolveApps")]
        public Input<string>? ResolveApps { get; set; }

        /// <summary>
        /// Enable/disable resolving IP addresses to hostname in log messages on the GUI using reverse DNS lookup Valid values: `enable`, `disable`.
        /// </summary>
        [Input("resolveHosts")]
        public Input<string>? ResolveHosts { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public GuidisplayState()
        {
        }
        public static new GuidisplayState Empty => new GuidisplayState();
    }
}
