// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Log.Memory
{
    /// <summary>
    /// Global settings for memory logging.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.Log.Memory.Globalsetting("trname", new()
    ///     {
    ///         FullFinalWarningThreshold = 95,
    ///         FullFirstWarningThreshold = 75,
    ///         FullSecondWarningThreshold = 90,
    ///         MaxSize = 163840,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// LogMemory GlobalSetting can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:log/memory/globalsetting:Globalsetting labelname LogMemoryGlobalSetting
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:log/memory/globalsetting:Globalsetting labelname LogMemoryGlobalSetting
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:log/memory/globalsetting:Globalsetting")]
    public partial class Globalsetting : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Log full final warning threshold as a percent (3 - 100, default = 95).
        /// </summary>
        [Output("fullFinalWarningThreshold")]
        public Output<int> FullFinalWarningThreshold { get; private set; } = null!;

        /// <summary>
        /// Log full first warning threshold as a percent (1 - 98, default = 75).
        /// </summary>
        [Output("fullFirstWarningThreshold")]
        public Output<int> FullFirstWarningThreshold { get; private set; } = null!;

        /// <summary>
        /// Log full second warning threshold as a percent (2 - 99, default = 90).
        /// </summary>
        [Output("fullSecondWarningThreshold")]
        public Output<int> FullSecondWarningThreshold { get; private set; } = null!;

        /// <summary>
        /// Maximum amount of memory that can be used for memory logging in bytes.
        /// </summary>
        [Output("maxSize")]
        public Output<int> MaxSize { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Globalsetting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Globalsetting(string name, GlobalsettingArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:log/memory/globalsetting:Globalsetting", name, args ?? new GlobalsettingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Globalsetting(string name, Input<string> id, GlobalsettingState? state = null, CustomResourceOptions? options = null)
            : base("fortios:log/memory/globalsetting:Globalsetting", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Globalsetting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Globalsetting Get(string name, Input<string> id, GlobalsettingState? state = null, CustomResourceOptions? options = null)
        {
            return new Globalsetting(name, id, state, options);
        }
    }

    public sealed class GlobalsettingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Log full final warning threshold as a percent (3 - 100, default = 95).
        /// </summary>
        [Input("fullFinalWarningThreshold")]
        public Input<int>? FullFinalWarningThreshold { get; set; }

        /// <summary>
        /// Log full first warning threshold as a percent (1 - 98, default = 75).
        /// </summary>
        [Input("fullFirstWarningThreshold")]
        public Input<int>? FullFirstWarningThreshold { get; set; }

        /// <summary>
        /// Log full second warning threshold as a percent (2 - 99, default = 90).
        /// </summary>
        [Input("fullSecondWarningThreshold")]
        public Input<int>? FullSecondWarningThreshold { get; set; }

        /// <summary>
        /// Maximum amount of memory that can be used for memory logging in bytes.
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public GlobalsettingArgs()
        {
        }
        public static new GlobalsettingArgs Empty => new GlobalsettingArgs();
    }

    public sealed class GlobalsettingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Log full final warning threshold as a percent (3 - 100, default = 95).
        /// </summary>
        [Input("fullFinalWarningThreshold")]
        public Input<int>? FullFinalWarningThreshold { get; set; }

        /// <summary>
        /// Log full first warning threshold as a percent (1 - 98, default = 75).
        /// </summary>
        [Input("fullFirstWarningThreshold")]
        public Input<int>? FullFirstWarningThreshold { get; set; }

        /// <summary>
        /// Log full second warning threshold as a percent (2 - 99, default = 90).
        /// </summary>
        [Input("fullSecondWarningThreshold")]
        public Input<int>? FullSecondWarningThreshold { get; set; }

        /// <summary>
        /// Maximum amount of memory that can be used for memory logging in bytes.
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public GlobalsettingState()
        {
        }
        public static new GlobalsettingState Empty => new GlobalsettingState();
    }
}
