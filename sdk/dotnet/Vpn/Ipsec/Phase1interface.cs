// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Vpn.Ipsec
{
    /// <summary>
    /// Configure VPN remote gateway.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname2 = new Fortios.Vpn.Ipsec.Phase1interface("trname2", new()
    ///     {
    ///         AcctVerify = "disable",
    ///         AddGwRoute = "disable",
    ///         AddRoute = "enable",
    ///         AssignIp = "enable",
    ///         AssignIpFrom = "range",
    ///         Authmethod = "psk",
    ///         AutoDiscoveryForwarder = "disable",
    ///         AutoDiscoveryPsk = "disable",
    ///         AutoDiscoveryReceiver = "disable",
    ///         AutoDiscoverySender = "disable",
    ///         AutoNegotiate = "enable",
    ///         CertIdValidation = "enable",
    ///         ChildlessIke = "disable",
    ///         ClientAutoNegotiate = "disable",
    ///         ClientKeepAlive = "disable",
    ///         DefaultGw = "0.0.0.0",
    ///         DefaultGwPriority = 0,
    ///         Dhgrp = "14 5",
    ///         DigitalSignatureAuth = "disable",
    ///         Distance = 15,
    ///         DnsMode = "manual",
    ///         Dpd = "on-demand",
    ///         DpdRetrycount = 3,
    ///         DpdRetryinterval = "20",
    ///         Eap = "disable",
    ///         EapIdentity = "use-id-payload",
    ///         EncapLocalGw4 = "0.0.0.0",
    ///         EncapLocalGw6 = "::",
    ///         EncapRemoteGw4 = "0.0.0.0",
    ///         EncapRemoteGw6 = "::",
    ///         Encapsulation = "none",
    ///         EncapsulationAddress = "ike",
    ///         EnforceUniqueId = "disable",
    ///         ExchangeInterfaceIp = "disable",
    ///         ExchangeIpAddr4 = "0.0.0.0",
    ///         ExchangeIpAddr6 = "::",
    ///         ForticlientEnforcement = "disable",
    ///         Fragmentation = "enable",
    ///         FragmentationMtu = 1200,
    ///         GroupAuthentication = "disable",
    ///         HaSyncEspSeqno = "enable",
    ///         IdleTimeout = "disable",
    ///         IdleTimeoutinterval = 15,
    ///         IkeVersion = "1",
    ///         IncludeLocalLan = "disable",
    ///         Interface = "port3",
    ///         IpVersion = "4",
    ///         Ipv4DnsServer1 = "0.0.0.0",
    ///         Ipv4DnsServer2 = "0.0.0.0",
    ///         Ipv4DnsServer3 = "0.0.0.0",
    ///         Ipv4EndIp = "0.0.0.0",
    ///         Ipv4Netmask = "255.255.255.255",
    ///         Ipv4StartIp = "0.0.0.0",
    ///         Ipv4WinsServer1 = "0.0.0.0",
    ///         Ipv4WinsServer2 = "0.0.0.0",
    ///         Ipv6DnsServer1 = "::",
    ///         Ipv6DnsServer2 = "::",
    ///         Ipv6DnsServer3 = "::",
    ///         Ipv6EndIp = "::",
    ///         Ipv6Prefix = 128,
    ///         Ipv6StartIp = "::",
    ///         Keepalive = 10,
    ///         Keylife = 86400,
    ///         LocalGw = "0.0.0.0",
    ///         LocalGw6 = "::",
    ///         LocalidType = "auto",
    ///         MeshSelectorType = "disable",
    ///         Mode = "main",
    ///         ModeCfg = "disable",
    ///         MonitorHoldDownDelay = 0,
    ///         MonitorHoldDownTime = "00:00",
    ///         MonitorHoldDownType = "immediate",
    ///         MonitorHoldDownWeekday = "sunday",
    ///         Nattraversal = "enable",
    ///         NegotiateTimeout = 30,
    ///         NetDevice = "disable",
    ///         PassiveMode = "disable",
    ///         Peertype = "any",
    ///         Ppk = "disable",
    ///         Priority = 0,
    ///         Proposal = "aes128-sha256 aes256-sha256 aes128-sha1 aes256-sha1",
    ///         Psksecret = "eweeeeeeeecee",
    ///         Reauth = "disable",
    ///         Rekey = "enable",
    ///         RemoteGw = "102.2.2.12",
    ///         RemoteGw6 = "::",
    ///         RsaSignatureFormat = "pkcs1",
    ///         SavePassword = "disable",
    ///         SendCertChain = "enable",
    ///         SignatureHashAlg = "sha2-512 sha2-384 sha2-256 sha1",
    ///         SuiteB = "disable",
    ///         TunnelSearch = "selectors",
    ///         Type = "static",
    ///         UnitySupport = "enable",
    ///         WizardType = "custom",
    ///         Xauthtype = "disable",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// VpnIpsec Phase1Interface can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:vpn/ipsec/phase1interface:Phase1interface labelname {{name}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:vpn/ipsec/phase1interface:Phase1interface labelname {{name}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:vpn/ipsec/phase1interface:Phase1interface")]
    public partial class Phase1interface : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable/disable verification of RADIUS accounting record. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("acctVerify")]
        public Output<string> AcctVerify { get; private set; } = null!;

        /// <summary>
        /// Enable/disable automatically add a route to the remote gateway. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("addGwRoute")]
        public Output<string> AddGwRoute { get; private set; } = null!;

        /// <summary>
        /// Enable/disable control addition of a route to peer destination selector. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("addRoute")]
        public Output<string> AddRoute { get; private set; } = null!;

        /// <summary>
        /// Enable/disable use as an aggregate member. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("aggregateMember")]
        public Output<string> AggregateMember { get; private set; } = null!;

        /// <summary>
        /// Link weight for aggregate.
        /// </summary>
        [Output("aggregateWeight")]
        public Output<int> AggregateWeight { get; private set; } = null!;

        /// <summary>
        /// Enable/disable assignment of IP to IPsec interface via configuration method. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("assignIp")]
        public Output<string> AssignIp { get; private set; } = null!;

        /// <summary>
        /// Method by which the IP address will be assigned. Valid values: `range`, `usrgrp`, `dhcp`, `name`.
        /// </summary>
        [Output("assignIpFrom")]
        public Output<string> AssignIpFrom { get; private set; } = null!;

        /// <summary>
        /// Authentication method. Valid values: `psk`, `signature`.
        /// </summary>
        [Output("authmethod")]
        public Output<string> Authmethod { get; private set; } = null!;

        /// <summary>
        /// Authentication method (remote side). Valid values: `psk`, `signature`.
        /// </summary>
        [Output("authmethodRemote")]
        public Output<string> AuthmethodRemote { get; private set; } = null!;

        /// <summary>
        /// XAuth password (max 35 characters).
        /// </summary>
        [Output("authpasswd")]
        public Output<string?> Authpasswd { get; private set; } = null!;

        /// <summary>
        /// XAuth user name.
        /// </summary>
        [Output("authusr")]
        public Output<string> Authusr { get; private set; } = null!;

        /// <summary>
        /// Authentication user group.
        /// </summary>
        [Output("authusrgrp")]
        public Output<string> Authusrgrp { get; private set; } = null!;

        /// <summary>
        /// Allow/block set-up of short-cut tunnels between different network IDs. Valid values: `allow`, `block`.
        /// </summary>
        [Output("autoDiscoveryCrossover")]
        public Output<string> AutoDiscoveryCrossover { get; private set; } = null!;

        /// <summary>
        /// Enable/disable forwarding auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("autoDiscoveryForwarder")]
        public Output<string> AutoDiscoveryForwarder { get; private set; } = null!;

        /// <summary>
        /// Interval between shortcut offer messages in seconds (1 - 300, default = 5).
        /// </summary>
        [Output("autoDiscoveryOfferInterval")]
        public Output<int> AutoDiscoveryOfferInterval { get; private set; } = null!;

        /// <summary>
        /// Enable/disable use of pre-shared secrets for authentication of auto-discovery tunnels. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("autoDiscoveryPsk")]
        public Output<string> AutoDiscoveryPsk { get; private set; } = null!;

        /// <summary>
        /// Enable/disable accepting auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("autoDiscoveryReceiver")]
        public Output<string> AutoDiscoveryReceiver { get; private set; } = null!;

        /// <summary>
        /// Enable/disable sending auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("autoDiscoverySender")]
        public Output<string> AutoDiscoverySender { get; private set; } = null!;

        /// <summary>
        /// Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
        /// </summary>
        [Output("autoDiscoveryShortcuts")]
        public Output<string> AutoDiscoveryShortcuts { get; private set; } = null!;

        /// <summary>
        /// Enable/disable automatic initiation of IKE SA negotiation. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("autoNegotiate")]
        public Output<string> AutoNegotiate { get; private set; } = null!;

        /// <summary>
        /// Enable/disable Azure AD Auto-Connect for FortiClient. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("azureAdAutoconnect")]
        public Output<string> AzureAdAutoconnect { get; private set; } = null!;

        /// <summary>
        /// Instruct unity clients about the backup gateway address(es). The structure of `backup_gateway` block is documented below.
        /// </summary>
        [Output("backupGateways")]
        public Output<ImmutableArray<Outputs.Phase1interfaceBackupGateway>> BackupGateways { get; private set; } = null!;

        /// <summary>
        /// Message that unity client should display after connecting.
        /// </summary>
        [Output("banner")]
        public Output<string?> Banner { get; private set; } = null!;

        /// <summary>
        /// Enable/disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("certIdValidation")]
        public Output<string> CertIdValidation { get; private set; } = null!;

        /// <summary>
        /// CA certificate trust store. Valid values: `local`, `ems`.
        /// </summary>
        [Output("certTrustStore")]
        public Output<string> CertTrustStore { get; private set; } = null!;

        /// <summary>
        /// The names of up to 4 signed personal certificates. The structure of `certificate` block is documented below.
        /// </summary>
        [Output("certificates")]
        public Output<ImmutableArray<Outputs.Phase1interfaceCertificate>> Certificates { get; private set; } = null!;

        /// <summary>
        /// Enable/disable childless IKEv2 initiation (RFC 6023). Valid values: `enable`, `disable`.
        /// </summary>
        [Output("childlessIke")]
        public Output<string> ChildlessIke { get; private set; } = null!;

        /// <summary>
        /// Enable/disable allowing the VPN client to bring up the tunnel when there is no traffic. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("clientAutoNegotiate")]
        public Output<string> ClientAutoNegotiate { get; private set; } = null!;

        /// <summary>
        /// Enable/disable allowing the VPN client to keep the tunnel up when there is no traffic. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("clientKeepAlive")]
        public Output<string> ClientKeepAlive { get; private set; } = null!;

        /// <summary>
        /// Comment.
        /// </summary>
        [Output("comments")]
        public Output<string?> Comments { get; private set; } = null!;

        /// <summary>
        /// IPv4 address of default route gateway to use for traffic exiting the interface.
        /// </summary>
        [Output("defaultGw")]
        public Output<string> DefaultGw { get; private set; } = null!;

        /// <summary>
        /// Priority for default gateway route. A higher priority number signifies a less preferred route.
        /// </summary>
        [Output("defaultGwPriority")]
        public Output<int> DefaultGwPriority { get; private set; } = null!;

        /// <summary>
        /// Device ID carried by the device ID notification.
        /// </summary>
        [Output("devId")]
        public Output<string> DevId { get; private set; } = null!;

        /// <summary>
        /// Enable/disable device ID notification. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("devIdNotification")]
        public Output<string> DevIdNotification { get; private set; } = null!;

        /// <summary>
        /// Relay agent IPv6 link address to use in DHCP6 requests.
        /// </summary>
        [Output("dhcp6RaLinkaddr")]
        public Output<string> Dhcp6RaLinkaddr { get; private set; } = null!;

        /// <summary>
        /// Relay agent gateway IP address to use in the giaddr field of DHCP requests.
        /// </summary>
        [Output("dhcpRaGiaddr")]
        public Output<string> DhcpRaGiaddr { get; private set; } = null!;

        /// <summary>
        /// DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
        /// </summary>
        [Output("dhgrp")]
        public Output<string> Dhgrp { get; private set; } = null!;

        /// <summary>
        /// Enable/disable IKEv2 Digital Signature Authentication (RFC 7427). Valid values: `enable`, `disable`.
        /// </summary>
        [Output("digitalSignatureAuth")]
        public Output<string> DigitalSignatureAuth { get; private set; } = null!;

        /// <summary>
        /// Distance for routes added by IKE (1 - 255).
        /// </summary>
        [Output("distance")]
        public Output<int> Distance { get; private set; } = null!;

        /// <summary>
        /// DNS server mode. Valid values: `manual`, `auto`.
        /// </summary>
        [Output("dnsMode")]
        public Output<string> DnsMode { get; private set; } = null!;

        /// <summary>
        /// Instruct unity clients about the default DNS domain.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// Dead Peer Detection mode. Valid values: `disable`, `on-idle`, `on-demand`.
        /// </summary>
        [Output("dpd")]
        public Output<string> Dpd { get; private set; } = null!;

        /// <summary>
        /// Number of DPD retry attempts.
        /// </summary>
        [Output("dpdRetrycount")]
        public Output<int> DpdRetrycount { get; private set; } = null!;

        /// <summary>
        /// DPD retry interval.
        /// </summary>
        [Output("dpdRetryinterval")]
        public Output<string> DpdRetryinterval { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Enable/disable IKEv2 EAP authentication. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("eap")]
        public Output<string> Eap { get; private set; } = null!;

        /// <summary>
        /// Enable/disable peer certificate authentication in addition to EAP if peer is a FortiClient endpoint. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("eapCertAuth")]
        public Output<string> EapCertAuth { get; private set; } = null!;

        /// <summary>
        /// Peer group excluded from EAP authentication.
        /// </summary>
        [Output("eapExcludePeergrp")]
        public Output<string> EapExcludePeergrp { get; private set; } = null!;

        /// <summary>
        /// IKEv2 EAP peer identity type. Valid values: `use-id-payload`, `send-request`.
        /// </summary>
        [Output("eapIdentity")]
        public Output<string> EapIdentity { get; private set; } = null!;

        /// <summary>
        /// Enable/disable verification of EMS serial number. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("emsSnCheck")]
        public Output<string> EmsSnCheck { get; private set; } = null!;

        /// <summary>
        /// Local IPv4 address of GRE/VXLAN tunnel.
        /// </summary>
        [Output("encapLocalGw4")]
        public Output<string> EncapLocalGw4 { get; private set; } = null!;

        /// <summary>
        /// Local IPv6 address of GRE/VXLAN tunnel.
        /// </summary>
        [Output("encapLocalGw6")]
        public Output<string> EncapLocalGw6 { get; private set; } = null!;

        /// <summary>
        /// Remote IPv4 address of GRE/VXLAN tunnel.
        /// </summary>
        [Output("encapRemoteGw4")]
        public Output<string> EncapRemoteGw4 { get; private set; } = null!;

        /// <summary>
        /// Remote IPv6 address of GRE/VXLAN tunnel.
        /// </summary>
        [Output("encapRemoteGw6")]
        public Output<string> EncapRemoteGw6 { get; private set; } = null!;

        /// <summary>
        /// Enable/disable GRE/VXLAN encapsulation.
        /// </summary>
        [Output("encapsulation")]
        public Output<string> Encapsulation { get; private set; } = null!;

        /// <summary>
        /// Source for GRE/VXLAN tunnel address. Valid values: `ike`, `ipv4`, `ipv6`.
        /// </summary>
        [Output("encapsulationAddress")]
        public Output<string> EncapsulationAddress { get; private set; } = null!;

        /// <summary>
        /// Enable/disable peer ID uniqueness check. Valid values: `disable`, `keep-new`, `keep-old`.
        /// </summary>
        [Output("enforceUniqueId")]
        public Output<string> EnforceUniqueId { get; private set; } = null!;

        /// <summary>
        /// Extended sequence number (ESN) negotiation. Valid values: `require`, `allow`, `disable`.
        /// </summary>
        [Output("esn")]
        public Output<string> Esn { get; private set; } = null!;

        /// <summary>
        /// Enable/disable device identifier exchange with peer FortiGate units for use of VPN monitor data by FortiManager. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("exchangeFgtDeviceId")]
        public Output<string> ExchangeFgtDeviceId { get; private set; } = null!;

        /// <summary>
        /// Enable/disable exchange of IPsec interface IP address. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("exchangeInterfaceIp")]
        public Output<string> ExchangeInterfaceIp { get; private set; } = null!;

        /// <summary>
        /// IPv4 address to exchange with peers.
        /// </summary>
        [Output("exchangeIpAddr4")]
        public Output<string> ExchangeIpAddr4 { get; private set; } = null!;

        /// <summary>
        /// IPv6 address to exchange with peers
        /// </summary>
        [Output("exchangeIpAddr6")]
        public Output<string> ExchangeIpAddr6 { get; private set; } = null!;

        /// <summary>
        /// Timeout in seconds before falling back IKE/IPsec traffic to tcp.
        /// </summary>
        [Output("fallbackTcpThreshold")]
        public Output<int> FallbackTcpThreshold { get; private set; } = null!;

        /// <summary>
        /// Number of base Forward Error Correction packets (1 - 100).
        /// </summary>
        [Output("fecBase")]
        public Output<int> FecBase { get; private set; } = null!;

        /// <summary>
        /// ipsec fec encoding/decoding algorithm (0: reed-solomon, 1: xor).
        /// </summary>
        [Output("fecCodec")]
        public Output<int> FecCodec { get; private set; } = null!;

        /// <summary>
        /// Forward Error Correction encoding/decoding algorithm. Valid values: `rs`, `xor`.
        /// </summary>
        [Output("fecCodecString")]
        public Output<string> FecCodecString { get; private set; } = null!;

        /// <summary>
        /// Enable/disable Forward Error Correction for egress IPsec traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("fecEgress")]
        public Output<string> FecEgress { get; private set; } = null!;

        /// <summary>
        /// SD-WAN health check.
        /// </summary>
        [Output("fecHealthCheck")]
        public Output<string> FecHealthCheck { get; private set; } = null!;

        /// <summary>
        /// Enable/disable Forward Error Correction for ingress IPsec traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("fecIngress")]
        public Output<string> FecIngress { get; private set; } = null!;

        /// <summary>
        /// Forward Error Correction (FEC) mapping profile.
        /// </summary>
        [Output("fecMappingProfile")]
        public Output<string> FecMappingProfile { get; private set; } = null!;

        /// <summary>
        /// Timeout in milliseconds before dropping Forward Error Correction packets (1 - 10000).
        /// </summary>
        [Output("fecReceiveTimeout")]
        public Output<int> FecReceiveTimeout { get; private set; } = null!;

        /// <summary>
        /// Number of redundant Forward Error Correction packets (1 - 100).
        /// </summary>
        [Output("fecRedundant")]
        public Output<int> FecRedundant { get; private set; } = null!;

        /// <summary>
        /// Timeout in milliseconds before sending Forward Error Correction packets (1 - 1000).
        /// </summary>
        [Output("fecSendTimeout")]
        public Output<int> FecSendTimeout { get; private set; } = null!;

        /// <summary>
        /// Enable/disable IPsec syncing of tunnels for FGSP IPsec. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("fgspSync")]
        public Output<string> FgspSync { get; private set; } = null!;

        /// <summary>
        /// Enable/disable FortiClient enforcement. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("forticlientEnforcement")]
        public Output<string> ForticlientEnforcement { get; private set; } = null!;

        /// <summary>
        /// Enable/disable Fortinet ESP encapsulaton. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("fortinetEsp")]
        public Output<string> FortinetEsp { get; private set; } = null!;

        /// <summary>
        /// Enable/disable fragment IKE message on re-transmission. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("fragmentation")]
        public Output<string> Fragmentation { get; private set; } = null!;

        /// <summary>
        /// IKE fragmentation MTU (500 - 16000).
        /// </summary>
        [Output("fragmentationMtu")]
        public Output<int> FragmentationMtu { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// Enable/disable IKEv2 IDi group authentication. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("groupAuthentication")]
        public Output<string> GroupAuthentication { get; private set; } = null!;

        /// <summary>
        /// Password for IKEv2 IDi group authentication.  (ASCII string or hexadecimal indicated by a leading 0x.)
        /// </summary>
        [Output("groupAuthenticationSecret")]
        public Output<string?> GroupAuthenticationSecret { get; private set; } = null!;

        /// <summary>
        /// Enable/disable sequence number jump ahead for IPsec HA. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("haSyncEspSeqno")]
        public Output<string> HaSyncEspSeqno { get; private set; } = null!;

        /// <summary>
        /// Enable/disable IPsec tunnel idle timeout. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("idleTimeout")]
        public Output<string> IdleTimeout { get; private set; } = null!;

        /// <summary>
        /// IPsec tunnel idle timeout in minutes (5 - 43200).
        /// </summary>
        [Output("idleTimeoutinterval")]
        public Output<int> IdleTimeoutinterval { get; private set; } = null!;

        /// <summary>
        /// IKE protocol version. Valid values: `1`, `2`.
        /// </summary>
        [Output("ikeVersion")]
        public Output<string> IkeVersion { get; private set; } = null!;

        /// <summary>
        /// Enable/disable copy the dscp in the ESP header to the inner IP Header. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("inboundDscpCopy")]
        public Output<string> InboundDscpCopy { get; private set; } = null!;

        /// <summary>
        /// Enable/disable allow local LAN access on unity clients. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("includeLocalLan")]
        public Output<string> IncludeLocalLan { get; private set; } = null!;

        /// <summary>
        /// Local physical, aggregate, or VLAN outgoing interface.
        /// </summary>
        [Output("interface")]
        public Output<string> Interface { get; private set; } = null!;

        /// <summary>
        /// One or more internal domain names in quotes separated by spaces. The structure of `internal_domain_list` block is documented below.
        /// </summary>
        [Output("internalDomainLists")]
        public Output<ImmutableArray<Outputs.Phase1interfaceInternalDomainList>> InternalDomainLists { get; private set; } = null!;

        /// <summary>
        /// IP address reuse delay interval in seconds (0 - 28800).
        /// </summary>
        [Output("ipDelayInterval")]
        public Output<int> IpDelayInterval { get; private set; } = null!;

        /// <summary>
        /// Determine whether IP packets are fragmented before or after IPsec encapsulation. Valid values: `pre-encapsulation`, `post-encapsulation`.
        /// </summary>
        [Output("ipFragmentation")]
        public Output<string> IpFragmentation { get; private set; } = null!;

        /// <summary>
        /// IP version to use for VPN interface. Valid values: `4`, `6`.
        /// </summary>
        [Output("ipVersion")]
        public Output<string> IpVersion { get; private set; } = null!;

        /// <summary>
        /// IPv4 DNS server 1.
        /// </summary>
        [Output("ipv4DnsServer1")]
        public Output<string> Ipv4DnsServer1 { get; private set; } = null!;

        /// <summary>
        /// IPv4 DNS server 2.
        /// </summary>
        [Output("ipv4DnsServer2")]
        public Output<string> Ipv4DnsServer2 { get; private set; } = null!;

        /// <summary>
        /// IPv4 DNS server 3.
        /// </summary>
        [Output("ipv4DnsServer3")]
        public Output<string> Ipv4DnsServer3 { get; private set; } = null!;

        /// <summary>
        /// End of IPv4 range.
        /// </summary>
        [Output("ipv4EndIp")]
        public Output<string> Ipv4EndIp { get; private set; } = null!;

        /// <summary>
        /// Configuration Method IPv4 exclude ranges. The structure of `ipv4_exclude_range` block is documented below.
        /// </summary>
        [Output("ipv4ExcludeRanges")]
        public Output<ImmutableArray<Outputs.Phase1interfaceIpv4ExcludeRange>> Ipv4ExcludeRanges { get; private set; } = null!;

        /// <summary>
        /// IPv4 address name.
        /// </summary>
        [Output("ipv4Name")]
        public Output<string> Ipv4Name { get; private set; } = null!;

        /// <summary>
        /// IPv4 Netmask.
        /// </summary>
        [Output("ipv4Netmask")]
        public Output<string> Ipv4Netmask { get; private set; } = null!;

        /// <summary>
        /// IPv4 subnets that should not be sent over the IPsec tunnel.
        /// </summary>
        [Output("ipv4SplitExclude")]
        public Output<string> Ipv4SplitExclude { get; private set; } = null!;

        /// <summary>
        /// IPv4 split-include subnets.
        /// </summary>
        [Output("ipv4SplitInclude")]
        public Output<string> Ipv4SplitInclude { get; private set; } = null!;

        /// <summary>
        /// Start of IPv4 range.
        /// </summary>
        [Output("ipv4StartIp")]
        public Output<string> Ipv4StartIp { get; private set; } = null!;

        /// <summary>
        /// WINS server 1.
        /// </summary>
        [Output("ipv4WinsServer1")]
        public Output<string> Ipv4WinsServer1 { get; private set; } = null!;

        /// <summary>
        /// WINS server 2.
        /// </summary>
        [Output("ipv4WinsServer2")]
        public Output<string> Ipv4WinsServer2 { get; private set; } = null!;

        /// <summary>
        /// IPv6 DNS server 1.
        /// </summary>
        [Output("ipv6DnsServer1")]
        public Output<string> Ipv6DnsServer1 { get; private set; } = null!;

        /// <summary>
        /// IPv6 DNS server 2.
        /// </summary>
        [Output("ipv6DnsServer2")]
        public Output<string> Ipv6DnsServer2 { get; private set; } = null!;

        /// <summary>
        /// IPv6 DNS server 3.
        /// </summary>
        [Output("ipv6DnsServer3")]
        public Output<string> Ipv6DnsServer3 { get; private set; } = null!;

        /// <summary>
        /// End of IPv6 range.
        /// </summary>
        [Output("ipv6EndIp")]
        public Output<string> Ipv6EndIp { get; private set; } = null!;

        /// <summary>
        /// Configuration method IPv6 exclude ranges. The structure of `ipv6_exclude_range` block is documented below.
        /// </summary>
        [Output("ipv6ExcludeRanges")]
        public Output<ImmutableArray<Outputs.Phase1interfaceIpv6ExcludeRange>> Ipv6ExcludeRanges { get; private set; } = null!;

        /// <summary>
        /// IPv6 address name.
        /// </summary>
        [Output("ipv6Name")]
        public Output<string> Ipv6Name { get; private set; } = null!;

        /// <summary>
        /// IPv6 prefix.
        /// </summary>
        [Output("ipv6Prefix")]
        public Output<int> Ipv6Prefix { get; private set; } = null!;

        /// <summary>
        /// IPv6 subnets that should not be sent over the IPsec tunnel.
        /// </summary>
        [Output("ipv6SplitExclude")]
        public Output<string> Ipv6SplitExclude { get; private set; } = null!;

        /// <summary>
        /// IPv6 split-include subnets.
        /// </summary>
        [Output("ipv6SplitInclude")]
        public Output<string> Ipv6SplitInclude { get; private set; } = null!;

        /// <summary>
        /// Start of IPv6 range.
        /// </summary>
        [Output("ipv6StartIp")]
        public Output<string> Ipv6StartIp { get; private set; } = null!;

        /// <summary>
        /// NAT-T keep alive interval.
        /// </summary>
        [Output("keepalive")]
        public Output<int> Keepalive { get; private set; } = null!;

        /// <summary>
        /// Time to wait in seconds before phase 1 encryption key expires.
        /// </summary>
        [Output("keylife")]
        public Output<int> Keylife { get; private set; } = null!;

        /// <summary>
        /// Key Management Services server.
        /// </summary>
        [Output("kms")]
        public Output<string> Kms { get; private set; } = null!;

        /// <summary>
        /// VPN tunnel underlay link cost.
        /// </summary>
        [Output("linkCost")]
        public Output<int> LinkCost { get; private set; } = null!;

        /// <summary>
        /// IPv4 address of the local gateway's external interface.
        /// </summary>
        [Output("localGw")]
        public Output<string> LocalGw { get; private set; } = null!;

        /// <summary>
        /// IPv6 address of the local gateway's external interface.
        /// </summary>
        [Output("localGw6")]
        public Output<string> LocalGw6 { get; private set; } = null!;

        /// <summary>
        /// Local ID.
        /// </summary>
        [Output("localid")]
        public Output<string> Localid { get; private set; } = null!;

        /// <summary>
        /// Local ID type. Valid values: `auto`, `fqdn`, `user-fqdn`, `keyid`, `address`, `asn1dn`.
        /// </summary>
        [Output("localidType")]
        public Output<string> LocalidType { get; private set; } = null!;

        /// <summary>
        /// Enable/disable asymmetric routing for IKE traffic on loopback interface. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("loopbackAsymroute")]
        public Output<string> LoopbackAsymroute { get; private set; } = null!;

        /// <summary>
        /// Add selectors containing subsets of the configuration depending on traffic. Valid values: `disable`, `subnet`, `host`.
        /// </summary>
        [Output("meshSelectorType")]
        public Output<string> MeshSelectorType { get; private set; } = null!;

        /// <summary>
        /// The ID protection mode used to establish a secure channel. Valid values: `aggressive`, `main`.
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// Enable/disable configuration method. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("modeCfg")]
        public Output<string> ModeCfg { get; private set; } = null!;

        /// <summary>
        /// Enable/disable mode-cfg client to use custom phase2 selectors. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("modeCfgAllowClientSelector")]
        public Output<string> ModeCfgAllowClientSelector { get; private set; } = null!;

        /// <summary>
        /// IPsec interface as backup for primary interface.
        /// </summary>
        [Output("monitor")]
        public Output<string> Monitor { get; private set; } = null!;

        /// <summary>
        /// Time to wait in seconds before recovery once primary re-establishes.
        /// </summary>
        [Output("monitorHoldDownDelay")]
        public Output<int> MonitorHoldDownDelay { get; private set; } = null!;

        /// <summary>
        /// Time of day at which to fail back to primary after it re-establishes.
        /// </summary>
        [Output("monitorHoldDownTime")]
        public Output<string> MonitorHoldDownTime { get; private set; } = null!;

        /// <summary>
        /// Recovery time method when primary interface re-establishes. Valid values: `immediate`, `delay`, `time`.
        /// </summary>
        [Output("monitorHoldDownType")]
        public Output<string> MonitorHoldDownType { get; private set; } = null!;

        /// <summary>
        /// Day of the week to recover once primary re-establishes. Valid values: `everyday`, `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        /// </summary>
        [Output("monitorHoldDownWeekday")]
        public Output<string> MonitorHoldDownWeekday { get; private set; } = null!;

        /// <summary>
        /// Minimum number of links to become degraded before activating this interface.  Zero (0) means all links must be down before activating this interface.
        /// </summary>
        [Output("monitorMin")]
        public Output<int> MonitorMin { get; private set; } = null!;

        /// <summary>
        /// IPsec remote gateway name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Enable/disable NAT traversal. Valid values: `enable`, `disable`, `forced`.
        /// </summary>
        [Output("nattraversal")]
        public Output<string> Nattraversal { get; private set; } = null!;

        /// <summary>
        /// IKE SA negotiation timeout in seconds (1 - 300).
        /// </summary>
        [Output("negotiateTimeout")]
        public Output<int> NegotiateTimeout { get; private set; } = null!;

        /// <summary>
        /// Enable/disable kernel device creation. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("netDevice")]
        public Output<string> NetDevice { get; private set; } = null!;

        /// <summary>
        /// VPN gateway network ID.
        /// </summary>
        [Output("networkId")]
        public Output<int> NetworkId { get; private set; } = null!;

        /// <summary>
        /// Enable/disable network overlays. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("networkOverlay")]
        public Output<string> NetworkOverlay { get; private set; } = null!;

        /// <summary>
        /// Enable/disable offloading NPU. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("npuOffload")]
        public Output<string> NpuOffload { get; private set; } = null!;

        /// <summary>
        /// Enable/disable packet distribution (RPS) on the IPsec interface. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("packetRedistribution")]
        public Output<string> PacketRedistribution { get; private set; } = null!;

        /// <summary>
        /// Enable/disable IPsec passive mode for static tunnels. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("passiveMode")]
        public Output<string> PassiveMode { get; private set; } = null!;

        /// <summary>
        /// Accept this peer certificate.
        /// </summary>
        [Output("peer")]
        public Output<string> Peer { get; private set; } = null!;

        /// <summary>
        /// Accept this peer certificate group.
        /// </summary>
        [Output("peergrp")]
        public Output<string> Peergrp { get; private set; } = null!;

        /// <summary>
        /// Accept this peer identity.
        /// </summary>
        [Output("peerid")]
        public Output<string> Peerid { get; private set; } = null!;

        /// <summary>
        /// Accept this peer type. Valid values: `any`, `one`, `dialup`, `peer`, `peergrp`.
        /// </summary>
        [Output("peertype")]
        public Output<string> Peertype { get; private set; } = null!;

        /// <summary>
        /// Enable/disable IKEv2 Postquantum Preshared Key (PPK). Valid values: `disable`, `allow`, `require`.
        /// </summary>
        [Output("ppk")]
        public Output<string> Ppk { get; private set; } = null!;

        /// <summary>
        /// IKEv2 Postquantum Preshared Key Identity.
        /// </summary>
        [Output("ppkIdentity")]
        public Output<string> PpkIdentity { get; private set; } = null!;

        /// <summary>
        /// IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
        /// </summary>
        [Output("ppkSecret")]
        public Output<string?> PpkSecret { get; private set; } = null!;

        /// <summary>
        /// Priority for routes added by IKE (0 - 4294967295).
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;

        /// <summary>
        /// Phase1 proposal. Valid values: `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm-prfsha1`, `aes128gcm-prfsha256`, `aes128gcm-prfsha384`, `aes128gcm-prfsha512`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm-prfsha1`, `aes256gcm-prfsha256`, `aes256gcm-prfsha384`, `aes256gcm-prfsha512`, `chacha20poly1305-prfsha1`, `chacha20poly1305-prfsha256`, `chacha20poly1305-prfsha384`, `chacha20poly1305-prfsha512`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
        /// </summary>
        [Output("proposal")]
        public Output<string> Proposal { get; private set; } = null!;

        /// <summary>
        /// Pre-shared secret for PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        /// </summary>
        [Output("psksecret")]
        public Output<string?> Psksecret { get; private set; } = null!;

        /// <summary>
        /// Pre-shared secret for remote side PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        /// </summary>
        [Output("psksecretRemote")]
        public Output<string?> PsksecretRemote { get; private set; } = null!;

        /// <summary>
        /// Enable/disable use of Quantum Key Distribution (QKD) server. Valid values: `disable`, `allow`, `require`.
        /// </summary>
        [Output("qkd")]
        public Output<string> Qkd { get; private set; } = null!;

        /// <summary>
        /// Quantum Key Distribution (QKD) server profile.
        /// </summary>
        [Output("qkdProfile")]
        public Output<string> QkdProfile { get; private set; } = null!;

        /// <summary>
        /// Enable/disable re-authentication upon IKE SA lifetime expiration. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("reauth")]
        public Output<string> Reauth { get; private set; } = null!;

        /// <summary>
        /// Enable/disable phase1 rekey. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("rekey")]
        public Output<string> Rekey { get; private set; } = null!;

        /// <summary>
        /// IPv4 address of the remote gateway's external interface.
        /// </summary>
        [Output("remoteGw")]
        public Output<string> RemoteGw { get; private set; } = null!;

        /// <summary>
        /// IPv6 address of the remote gateway's external interface.
        /// </summary>
        [Output("remoteGw6")]
        public Output<string> RemoteGw6 { get; private set; } = null!;

        /// <summary>
        /// Domain name of remote gateway (eg. name.DDNS.com).
        /// </summary>
        [Output("remotegwDdns")]
        public Output<string> RemotegwDdns { get; private set; } = null!;

        /// <summary>
        /// Digital Signature Authentication RSA signature format. Valid values: `pkcs1`, `pss`.
        /// </summary>
        [Output("rsaSignatureFormat")]
        public Output<string> RsaSignatureFormat { get; private set; } = null!;

        /// <summary>
        /// Enable/disable IKEv2 RSA signature hash algorithm override. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("rsaSignatureHashOverride")]
        public Output<string> RsaSignatureHashOverride { get; private set; } = null!;

        /// <summary>
        /// Enable/disable saving XAuth username and password on VPN clients. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("savePassword")]
        public Output<string> SavePassword { get; private set; } = null!;

        /// <summary>
        /// Enable/disable sending certificate chain. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("sendCertChain")]
        public Output<string> SendCertChain { get; private set; } = null!;

        /// <summary>
        /// Digital Signature Authentication hash algorithms. Valid values: `sha1`, `sha2-256`, `sha2-384`, `sha2-512`.
        /// </summary>
        [Output("signatureHashAlg")]
        public Output<string> SignatureHashAlg { get; private set; } = null!;

        /// <summary>
        /// Split-include services.
        /// </summary>
        [Output("splitIncludeService")]
        public Output<string> SplitIncludeService { get; private set; } = null!;

        /// <summary>
        /// Use Suite-B. Valid values: `disable`, `suite-b-gcm-128`, `suite-b-gcm-256`.
        /// </summary>
        [Output("suiteB")]
        public Output<string> SuiteB { get; private set; } = null!;

        /// <summary>
        /// Set IKE transport protocol. Valid values: `udp`, `udp-fallback-tcp`, `tcp`.
        /// </summary>
        [Output("transport")]
        public Output<string> Transport { get; private set; } = null!;

        /// <summary>
        /// Tunnel search method for when the interface is shared. Valid values: `selectors`, `nexthop`.
        /// </summary>
        [Output("tunnelSearch")]
        public Output<string> TunnelSearch { get; private set; } = null!;

        /// <summary>
        /// Remote gateway type. Valid values: `static`, `dynamic`, `ddns`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Enable/disable support for Cisco UNITY Configuration Method extensions. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("unitySupport")]
        public Output<string> UnitySupport { get; private set; } = null!;

        /// <summary>
        /// User group name for dialup peers.
        /// </summary>
        [Output("usrgrp")]
        public Output<string> Usrgrp { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// VNI of VXLAN tunnel.
        /// </summary>
        [Output("vni")]
        public Output<int> Vni { get; private set; } = null!;

        /// <summary>
        /// GUI VPN Wizard Type.
        /// </summary>
        [Output("wizardType")]
        public Output<string> WizardType { get; private set; } = null!;

        /// <summary>
        /// XAuth type. Valid values: `disable`, `client`, `pap`, `chap`, `auto`.
        /// </summary>
        [Output("xauthtype")]
        public Output<string> Xauthtype { get; private set; } = null!;


        /// <summary>
        /// Create a Phase1interface resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Phase1interface(string name, Phase1interfaceArgs args, CustomResourceOptions? options = null)
            : base("fortios:vpn/ipsec/phase1interface:Phase1interface", name, args ?? new Phase1interfaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Phase1interface(string name, Input<string> id, Phase1interfaceState? state = null, CustomResourceOptions? options = null)
            : base("fortios:vpn/ipsec/phase1interface:Phase1interface", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
                AdditionalSecretOutputs =
                {
                    "authpasswd",
                    "groupAuthenticationSecret",
                    "ppkSecret",
                    "psksecret",
                    "psksecretRemote",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Phase1interface resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Phase1interface Get(string name, Input<string> id, Phase1interfaceState? state = null, CustomResourceOptions? options = null)
        {
            return new Phase1interface(name, id, state, options);
        }
    }

    public sealed class Phase1interfaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable verification of RADIUS accounting record. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("acctVerify")]
        public Input<string>? AcctVerify { get; set; }

        /// <summary>
        /// Enable/disable automatically add a route to the remote gateway. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("addGwRoute")]
        public Input<string>? AddGwRoute { get; set; }

        /// <summary>
        /// Enable/disable control addition of a route to peer destination selector. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("addRoute")]
        public Input<string>? AddRoute { get; set; }

        /// <summary>
        /// Enable/disable use as an aggregate member. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("aggregateMember")]
        public Input<string>? AggregateMember { get; set; }

        /// <summary>
        /// Link weight for aggregate.
        /// </summary>
        [Input("aggregateWeight")]
        public Input<int>? AggregateWeight { get; set; }

        /// <summary>
        /// Enable/disable assignment of IP to IPsec interface via configuration method. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("assignIp")]
        public Input<string>? AssignIp { get; set; }

        /// <summary>
        /// Method by which the IP address will be assigned. Valid values: `range`, `usrgrp`, `dhcp`, `name`.
        /// </summary>
        [Input("assignIpFrom")]
        public Input<string>? AssignIpFrom { get; set; }

        /// <summary>
        /// Authentication method. Valid values: `psk`, `signature`.
        /// </summary>
        [Input("authmethod")]
        public Input<string>? Authmethod { get; set; }

        /// <summary>
        /// Authentication method (remote side). Valid values: `psk`, `signature`.
        /// </summary>
        [Input("authmethodRemote")]
        public Input<string>? AuthmethodRemote { get; set; }

        [Input("authpasswd")]
        private Input<string>? _authpasswd;

        /// <summary>
        /// XAuth password (max 35 characters).
        /// </summary>
        public Input<string>? Authpasswd
        {
            get => _authpasswd;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _authpasswd = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// XAuth user name.
        /// </summary>
        [Input("authusr")]
        public Input<string>? Authusr { get; set; }

        /// <summary>
        /// Authentication user group.
        /// </summary>
        [Input("authusrgrp")]
        public Input<string>? Authusrgrp { get; set; }

        /// <summary>
        /// Allow/block set-up of short-cut tunnels between different network IDs. Valid values: `allow`, `block`.
        /// </summary>
        [Input("autoDiscoveryCrossover")]
        public Input<string>? AutoDiscoveryCrossover { get; set; }

        /// <summary>
        /// Enable/disable forwarding auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("autoDiscoveryForwarder")]
        public Input<string>? AutoDiscoveryForwarder { get; set; }

        /// <summary>
        /// Interval between shortcut offer messages in seconds (1 - 300, default = 5).
        /// </summary>
        [Input("autoDiscoveryOfferInterval")]
        public Input<int>? AutoDiscoveryOfferInterval { get; set; }

        /// <summary>
        /// Enable/disable use of pre-shared secrets for authentication of auto-discovery tunnels. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("autoDiscoveryPsk")]
        public Input<string>? AutoDiscoveryPsk { get; set; }

        /// <summary>
        /// Enable/disable accepting auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("autoDiscoveryReceiver")]
        public Input<string>? AutoDiscoveryReceiver { get; set; }

        /// <summary>
        /// Enable/disable sending auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("autoDiscoverySender")]
        public Input<string>? AutoDiscoverySender { get; set; }

        /// <summary>
        /// Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
        /// </summary>
        [Input("autoDiscoveryShortcuts")]
        public Input<string>? AutoDiscoveryShortcuts { get; set; }

        /// <summary>
        /// Enable/disable automatic initiation of IKE SA negotiation. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("autoNegotiate")]
        public Input<string>? AutoNegotiate { get; set; }

        /// <summary>
        /// Enable/disable Azure AD Auto-Connect for FortiClient. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("azureAdAutoconnect")]
        public Input<string>? AzureAdAutoconnect { get; set; }

        [Input("backupGateways")]
        private InputList<Inputs.Phase1interfaceBackupGatewayArgs>? _backupGateways;

        /// <summary>
        /// Instruct unity clients about the backup gateway address(es). The structure of `backup_gateway` block is documented below.
        /// </summary>
        public InputList<Inputs.Phase1interfaceBackupGatewayArgs> BackupGateways
        {
            get => _backupGateways ?? (_backupGateways = new InputList<Inputs.Phase1interfaceBackupGatewayArgs>());
            set => _backupGateways = value;
        }

        /// <summary>
        /// Message that unity client should display after connecting.
        /// </summary>
        [Input("banner")]
        public Input<string>? Banner { get; set; }

        /// <summary>
        /// Enable/disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("certIdValidation")]
        public Input<string>? CertIdValidation { get; set; }

        /// <summary>
        /// CA certificate trust store. Valid values: `local`, `ems`.
        /// </summary>
        [Input("certTrustStore")]
        public Input<string>? CertTrustStore { get; set; }

        [Input("certificates")]
        private InputList<Inputs.Phase1interfaceCertificateArgs>? _certificates;

        /// <summary>
        /// The names of up to 4 signed personal certificates. The structure of `certificate` block is documented below.
        /// </summary>
        public InputList<Inputs.Phase1interfaceCertificateArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<Inputs.Phase1interfaceCertificateArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// Enable/disable childless IKEv2 initiation (RFC 6023). Valid values: `enable`, `disable`.
        /// </summary>
        [Input("childlessIke")]
        public Input<string>? ChildlessIke { get; set; }

        /// <summary>
        /// Enable/disable allowing the VPN client to bring up the tunnel when there is no traffic. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("clientAutoNegotiate")]
        public Input<string>? ClientAutoNegotiate { get; set; }

        /// <summary>
        /// Enable/disable allowing the VPN client to keep the tunnel up when there is no traffic. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("clientKeepAlive")]
        public Input<string>? ClientKeepAlive { get; set; }

        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// IPv4 address of default route gateway to use for traffic exiting the interface.
        /// </summary>
        [Input("defaultGw")]
        public Input<string>? DefaultGw { get; set; }

        /// <summary>
        /// Priority for default gateway route. A higher priority number signifies a less preferred route.
        /// </summary>
        [Input("defaultGwPriority")]
        public Input<int>? DefaultGwPriority { get; set; }

        /// <summary>
        /// Device ID carried by the device ID notification.
        /// </summary>
        [Input("devId")]
        public Input<string>? DevId { get; set; }

        /// <summary>
        /// Enable/disable device ID notification. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("devIdNotification")]
        public Input<string>? DevIdNotification { get; set; }

        /// <summary>
        /// Relay agent IPv6 link address to use in DHCP6 requests.
        /// </summary>
        [Input("dhcp6RaLinkaddr")]
        public Input<string>? Dhcp6RaLinkaddr { get; set; }

        /// <summary>
        /// Relay agent gateway IP address to use in the giaddr field of DHCP requests.
        /// </summary>
        [Input("dhcpRaGiaddr")]
        public Input<string>? DhcpRaGiaddr { get; set; }

        /// <summary>
        /// DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
        /// </summary>
        [Input("dhgrp")]
        public Input<string>? Dhgrp { get; set; }

        /// <summary>
        /// Enable/disable IKEv2 Digital Signature Authentication (RFC 7427). Valid values: `enable`, `disable`.
        /// </summary>
        [Input("digitalSignatureAuth")]
        public Input<string>? DigitalSignatureAuth { get; set; }

        /// <summary>
        /// Distance for routes added by IKE (1 - 255).
        /// </summary>
        [Input("distance")]
        public Input<int>? Distance { get; set; }

        /// <summary>
        /// DNS server mode. Valid values: `manual`, `auto`.
        /// </summary>
        [Input("dnsMode")]
        public Input<string>? DnsMode { get; set; }

        /// <summary>
        /// Instruct unity clients about the default DNS domain.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Dead Peer Detection mode. Valid values: `disable`, `on-idle`, `on-demand`.
        /// </summary>
        [Input("dpd")]
        public Input<string>? Dpd { get; set; }

        /// <summary>
        /// Number of DPD retry attempts.
        /// </summary>
        [Input("dpdRetrycount")]
        public Input<int>? DpdRetrycount { get; set; }

        /// <summary>
        /// DPD retry interval.
        /// </summary>
        [Input("dpdRetryinterval")]
        public Input<string>? DpdRetryinterval { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Enable/disable IKEv2 EAP authentication. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("eap")]
        public Input<string>? Eap { get; set; }

        /// <summary>
        /// Enable/disable peer certificate authentication in addition to EAP if peer is a FortiClient endpoint. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("eapCertAuth")]
        public Input<string>? EapCertAuth { get; set; }

        /// <summary>
        /// Peer group excluded from EAP authentication.
        /// </summary>
        [Input("eapExcludePeergrp")]
        public Input<string>? EapExcludePeergrp { get; set; }

        /// <summary>
        /// IKEv2 EAP peer identity type. Valid values: `use-id-payload`, `send-request`.
        /// </summary>
        [Input("eapIdentity")]
        public Input<string>? EapIdentity { get; set; }

        /// <summary>
        /// Enable/disable verification of EMS serial number. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("emsSnCheck")]
        public Input<string>? EmsSnCheck { get; set; }

        /// <summary>
        /// Local IPv4 address of GRE/VXLAN tunnel.
        /// </summary>
        [Input("encapLocalGw4")]
        public Input<string>? EncapLocalGw4 { get; set; }

        /// <summary>
        /// Local IPv6 address of GRE/VXLAN tunnel.
        /// </summary>
        [Input("encapLocalGw6")]
        public Input<string>? EncapLocalGw6 { get; set; }

        /// <summary>
        /// Remote IPv4 address of GRE/VXLAN tunnel.
        /// </summary>
        [Input("encapRemoteGw4")]
        public Input<string>? EncapRemoteGw4 { get; set; }

        /// <summary>
        /// Remote IPv6 address of GRE/VXLAN tunnel.
        /// </summary>
        [Input("encapRemoteGw6")]
        public Input<string>? EncapRemoteGw6 { get; set; }

        /// <summary>
        /// Enable/disable GRE/VXLAN encapsulation.
        /// </summary>
        [Input("encapsulation")]
        public Input<string>? Encapsulation { get; set; }

        /// <summary>
        /// Source for GRE/VXLAN tunnel address. Valid values: `ike`, `ipv4`, `ipv6`.
        /// </summary>
        [Input("encapsulationAddress")]
        public Input<string>? EncapsulationAddress { get; set; }

        /// <summary>
        /// Enable/disable peer ID uniqueness check. Valid values: `disable`, `keep-new`, `keep-old`.
        /// </summary>
        [Input("enforceUniqueId")]
        public Input<string>? EnforceUniqueId { get; set; }

        /// <summary>
        /// Extended sequence number (ESN) negotiation. Valid values: `require`, `allow`, `disable`.
        /// </summary>
        [Input("esn")]
        public Input<string>? Esn { get; set; }

        /// <summary>
        /// Enable/disable device identifier exchange with peer FortiGate units for use of VPN monitor data by FortiManager. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("exchangeFgtDeviceId")]
        public Input<string>? ExchangeFgtDeviceId { get; set; }

        /// <summary>
        /// Enable/disable exchange of IPsec interface IP address. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("exchangeInterfaceIp")]
        public Input<string>? ExchangeInterfaceIp { get; set; }

        /// <summary>
        /// IPv4 address to exchange with peers.
        /// </summary>
        [Input("exchangeIpAddr4")]
        public Input<string>? ExchangeIpAddr4 { get; set; }

        /// <summary>
        /// IPv6 address to exchange with peers
        /// </summary>
        [Input("exchangeIpAddr6")]
        public Input<string>? ExchangeIpAddr6 { get; set; }

        /// <summary>
        /// Timeout in seconds before falling back IKE/IPsec traffic to tcp.
        /// </summary>
        [Input("fallbackTcpThreshold")]
        public Input<int>? FallbackTcpThreshold { get; set; }

        /// <summary>
        /// Number of base Forward Error Correction packets (1 - 100).
        /// </summary>
        [Input("fecBase")]
        public Input<int>? FecBase { get; set; }

        /// <summary>
        /// ipsec fec encoding/decoding algorithm (0: reed-solomon, 1: xor).
        /// </summary>
        [Input("fecCodec")]
        public Input<int>? FecCodec { get; set; }

        /// <summary>
        /// Forward Error Correction encoding/decoding algorithm. Valid values: `rs`, `xor`.
        /// </summary>
        [Input("fecCodecString")]
        public Input<string>? FecCodecString { get; set; }

        /// <summary>
        /// Enable/disable Forward Error Correction for egress IPsec traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("fecEgress")]
        public Input<string>? FecEgress { get; set; }

        /// <summary>
        /// SD-WAN health check.
        /// </summary>
        [Input("fecHealthCheck")]
        public Input<string>? FecHealthCheck { get; set; }

        /// <summary>
        /// Enable/disable Forward Error Correction for ingress IPsec traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("fecIngress")]
        public Input<string>? FecIngress { get; set; }

        /// <summary>
        /// Forward Error Correction (FEC) mapping profile.
        /// </summary>
        [Input("fecMappingProfile")]
        public Input<string>? FecMappingProfile { get; set; }

        /// <summary>
        /// Timeout in milliseconds before dropping Forward Error Correction packets (1 - 10000).
        /// </summary>
        [Input("fecReceiveTimeout")]
        public Input<int>? FecReceiveTimeout { get; set; }

        /// <summary>
        /// Number of redundant Forward Error Correction packets (1 - 100).
        /// </summary>
        [Input("fecRedundant")]
        public Input<int>? FecRedundant { get; set; }

        /// <summary>
        /// Timeout in milliseconds before sending Forward Error Correction packets (1 - 1000).
        /// </summary>
        [Input("fecSendTimeout")]
        public Input<int>? FecSendTimeout { get; set; }

        /// <summary>
        /// Enable/disable IPsec syncing of tunnels for FGSP IPsec. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("fgspSync")]
        public Input<string>? FgspSync { get; set; }

        /// <summary>
        /// Enable/disable FortiClient enforcement. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("forticlientEnforcement")]
        public Input<string>? ForticlientEnforcement { get; set; }

        /// <summary>
        /// Enable/disable Fortinet ESP encapsulaton. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("fortinetEsp")]
        public Input<string>? FortinetEsp { get; set; }

        /// <summary>
        /// Enable/disable fragment IKE message on re-transmission. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("fragmentation")]
        public Input<string>? Fragmentation { get; set; }

        /// <summary>
        /// IKE fragmentation MTU (500 - 16000).
        /// </summary>
        [Input("fragmentationMtu")]
        public Input<int>? FragmentationMtu { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Enable/disable IKEv2 IDi group authentication. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("groupAuthentication")]
        public Input<string>? GroupAuthentication { get; set; }

        [Input("groupAuthenticationSecret")]
        private Input<string>? _groupAuthenticationSecret;

        /// <summary>
        /// Password for IKEv2 IDi group authentication.  (ASCII string or hexadecimal indicated by a leading 0x.)
        /// </summary>
        public Input<string>? GroupAuthenticationSecret
        {
            get => _groupAuthenticationSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _groupAuthenticationSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Enable/disable sequence number jump ahead for IPsec HA. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("haSyncEspSeqno")]
        public Input<string>? HaSyncEspSeqno { get; set; }

        /// <summary>
        /// Enable/disable IPsec tunnel idle timeout. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("idleTimeout")]
        public Input<string>? IdleTimeout { get; set; }

        /// <summary>
        /// IPsec tunnel idle timeout in minutes (5 - 43200).
        /// </summary>
        [Input("idleTimeoutinterval")]
        public Input<int>? IdleTimeoutinterval { get; set; }

        /// <summary>
        /// IKE protocol version. Valid values: `1`, `2`.
        /// </summary>
        [Input("ikeVersion")]
        public Input<string>? IkeVersion { get; set; }

        /// <summary>
        /// Enable/disable copy the dscp in the ESP header to the inner IP Header. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("inboundDscpCopy")]
        public Input<string>? InboundDscpCopy { get; set; }

        /// <summary>
        /// Enable/disable allow local LAN access on unity clients. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("includeLocalLan")]
        public Input<string>? IncludeLocalLan { get; set; }

        /// <summary>
        /// Local physical, aggregate, or VLAN outgoing interface.
        /// </summary>
        [Input("interface", required: true)]
        public Input<string> Interface { get; set; } = null!;

        [Input("internalDomainLists")]
        private InputList<Inputs.Phase1interfaceInternalDomainListArgs>? _internalDomainLists;

        /// <summary>
        /// One or more internal domain names in quotes separated by spaces. The structure of `internal_domain_list` block is documented below.
        /// </summary>
        public InputList<Inputs.Phase1interfaceInternalDomainListArgs> InternalDomainLists
        {
            get => _internalDomainLists ?? (_internalDomainLists = new InputList<Inputs.Phase1interfaceInternalDomainListArgs>());
            set => _internalDomainLists = value;
        }

        /// <summary>
        /// IP address reuse delay interval in seconds (0 - 28800).
        /// </summary>
        [Input("ipDelayInterval")]
        public Input<int>? IpDelayInterval { get; set; }

        /// <summary>
        /// Determine whether IP packets are fragmented before or after IPsec encapsulation. Valid values: `pre-encapsulation`, `post-encapsulation`.
        /// </summary>
        [Input("ipFragmentation")]
        public Input<string>? IpFragmentation { get; set; }

        /// <summary>
        /// IP version to use for VPN interface. Valid values: `4`, `6`.
        /// </summary>
        [Input("ipVersion")]
        public Input<string>? IpVersion { get; set; }

        /// <summary>
        /// IPv4 DNS server 1.
        /// </summary>
        [Input("ipv4DnsServer1")]
        public Input<string>? Ipv4DnsServer1 { get; set; }

        /// <summary>
        /// IPv4 DNS server 2.
        /// </summary>
        [Input("ipv4DnsServer2")]
        public Input<string>? Ipv4DnsServer2 { get; set; }

        /// <summary>
        /// IPv4 DNS server 3.
        /// </summary>
        [Input("ipv4DnsServer3")]
        public Input<string>? Ipv4DnsServer3 { get; set; }

        /// <summary>
        /// End of IPv4 range.
        /// </summary>
        [Input("ipv4EndIp")]
        public Input<string>? Ipv4EndIp { get; set; }

        [Input("ipv4ExcludeRanges")]
        private InputList<Inputs.Phase1interfaceIpv4ExcludeRangeArgs>? _ipv4ExcludeRanges;

        /// <summary>
        /// Configuration Method IPv4 exclude ranges. The structure of `ipv4_exclude_range` block is documented below.
        /// </summary>
        public InputList<Inputs.Phase1interfaceIpv4ExcludeRangeArgs> Ipv4ExcludeRanges
        {
            get => _ipv4ExcludeRanges ?? (_ipv4ExcludeRanges = new InputList<Inputs.Phase1interfaceIpv4ExcludeRangeArgs>());
            set => _ipv4ExcludeRanges = value;
        }

        /// <summary>
        /// IPv4 address name.
        /// </summary>
        [Input("ipv4Name")]
        public Input<string>? Ipv4Name { get; set; }

        /// <summary>
        /// IPv4 Netmask.
        /// </summary>
        [Input("ipv4Netmask")]
        public Input<string>? Ipv4Netmask { get; set; }

        /// <summary>
        /// IPv4 subnets that should not be sent over the IPsec tunnel.
        /// </summary>
        [Input("ipv4SplitExclude")]
        public Input<string>? Ipv4SplitExclude { get; set; }

        /// <summary>
        /// IPv4 split-include subnets.
        /// </summary>
        [Input("ipv4SplitInclude")]
        public Input<string>? Ipv4SplitInclude { get; set; }

        /// <summary>
        /// Start of IPv4 range.
        /// </summary>
        [Input("ipv4StartIp")]
        public Input<string>? Ipv4StartIp { get; set; }

        /// <summary>
        /// WINS server 1.
        /// </summary>
        [Input("ipv4WinsServer1")]
        public Input<string>? Ipv4WinsServer1 { get; set; }

        /// <summary>
        /// WINS server 2.
        /// </summary>
        [Input("ipv4WinsServer2")]
        public Input<string>? Ipv4WinsServer2 { get; set; }

        /// <summary>
        /// IPv6 DNS server 1.
        /// </summary>
        [Input("ipv6DnsServer1")]
        public Input<string>? Ipv6DnsServer1 { get; set; }

        /// <summary>
        /// IPv6 DNS server 2.
        /// </summary>
        [Input("ipv6DnsServer2")]
        public Input<string>? Ipv6DnsServer2 { get; set; }

        /// <summary>
        /// IPv6 DNS server 3.
        /// </summary>
        [Input("ipv6DnsServer3")]
        public Input<string>? Ipv6DnsServer3 { get; set; }

        /// <summary>
        /// End of IPv6 range.
        /// </summary>
        [Input("ipv6EndIp")]
        public Input<string>? Ipv6EndIp { get; set; }

        [Input("ipv6ExcludeRanges")]
        private InputList<Inputs.Phase1interfaceIpv6ExcludeRangeArgs>? _ipv6ExcludeRanges;

        /// <summary>
        /// Configuration method IPv6 exclude ranges. The structure of `ipv6_exclude_range` block is documented below.
        /// </summary>
        public InputList<Inputs.Phase1interfaceIpv6ExcludeRangeArgs> Ipv6ExcludeRanges
        {
            get => _ipv6ExcludeRanges ?? (_ipv6ExcludeRanges = new InputList<Inputs.Phase1interfaceIpv6ExcludeRangeArgs>());
            set => _ipv6ExcludeRanges = value;
        }

        /// <summary>
        /// IPv6 address name.
        /// </summary>
        [Input("ipv6Name")]
        public Input<string>? Ipv6Name { get; set; }

        /// <summary>
        /// IPv6 prefix.
        /// </summary>
        [Input("ipv6Prefix")]
        public Input<int>? Ipv6Prefix { get; set; }

        /// <summary>
        /// IPv6 subnets that should not be sent over the IPsec tunnel.
        /// </summary>
        [Input("ipv6SplitExclude")]
        public Input<string>? Ipv6SplitExclude { get; set; }

        /// <summary>
        /// IPv6 split-include subnets.
        /// </summary>
        [Input("ipv6SplitInclude")]
        public Input<string>? Ipv6SplitInclude { get; set; }

        /// <summary>
        /// Start of IPv6 range.
        /// </summary>
        [Input("ipv6StartIp")]
        public Input<string>? Ipv6StartIp { get; set; }

        /// <summary>
        /// NAT-T keep alive interval.
        /// </summary>
        [Input("keepalive")]
        public Input<int>? Keepalive { get; set; }

        /// <summary>
        /// Time to wait in seconds before phase 1 encryption key expires.
        /// </summary>
        [Input("keylife")]
        public Input<int>? Keylife { get; set; }

        /// <summary>
        /// Key Management Services server.
        /// </summary>
        [Input("kms")]
        public Input<string>? Kms { get; set; }

        /// <summary>
        /// VPN tunnel underlay link cost.
        /// </summary>
        [Input("linkCost")]
        public Input<int>? LinkCost { get; set; }

        /// <summary>
        /// IPv4 address of the local gateway's external interface.
        /// </summary>
        [Input("localGw")]
        public Input<string>? LocalGw { get; set; }

        /// <summary>
        /// IPv6 address of the local gateway's external interface.
        /// </summary>
        [Input("localGw6")]
        public Input<string>? LocalGw6 { get; set; }

        /// <summary>
        /// Local ID.
        /// </summary>
        [Input("localid")]
        public Input<string>? Localid { get; set; }

        /// <summary>
        /// Local ID type. Valid values: `auto`, `fqdn`, `user-fqdn`, `keyid`, `address`, `asn1dn`.
        /// </summary>
        [Input("localidType")]
        public Input<string>? LocalidType { get; set; }

        /// <summary>
        /// Enable/disable asymmetric routing for IKE traffic on loopback interface. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("loopbackAsymroute")]
        public Input<string>? LoopbackAsymroute { get; set; }

        /// <summary>
        /// Add selectors containing subsets of the configuration depending on traffic. Valid values: `disable`, `subnet`, `host`.
        /// </summary>
        [Input("meshSelectorType")]
        public Input<string>? MeshSelectorType { get; set; }

        /// <summary>
        /// The ID protection mode used to establish a secure channel. Valid values: `aggressive`, `main`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// Enable/disable configuration method. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("modeCfg")]
        public Input<string>? ModeCfg { get; set; }

        /// <summary>
        /// Enable/disable mode-cfg client to use custom phase2 selectors. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("modeCfgAllowClientSelector")]
        public Input<string>? ModeCfgAllowClientSelector { get; set; }

        /// <summary>
        /// IPsec interface as backup for primary interface.
        /// </summary>
        [Input("monitor")]
        public Input<string>? Monitor { get; set; }

        /// <summary>
        /// Time to wait in seconds before recovery once primary re-establishes.
        /// </summary>
        [Input("monitorHoldDownDelay")]
        public Input<int>? MonitorHoldDownDelay { get; set; }

        /// <summary>
        /// Time of day at which to fail back to primary after it re-establishes.
        /// </summary>
        [Input("monitorHoldDownTime")]
        public Input<string>? MonitorHoldDownTime { get; set; }

        /// <summary>
        /// Recovery time method when primary interface re-establishes. Valid values: `immediate`, `delay`, `time`.
        /// </summary>
        [Input("monitorHoldDownType")]
        public Input<string>? MonitorHoldDownType { get; set; }

        /// <summary>
        /// Day of the week to recover once primary re-establishes. Valid values: `everyday`, `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        /// </summary>
        [Input("monitorHoldDownWeekday")]
        public Input<string>? MonitorHoldDownWeekday { get; set; }

        /// <summary>
        /// Minimum number of links to become degraded before activating this interface.  Zero (0) means all links must be down before activating this interface.
        /// </summary>
        [Input("monitorMin")]
        public Input<int>? MonitorMin { get; set; }

        /// <summary>
        /// IPsec remote gateway name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable/disable NAT traversal. Valid values: `enable`, `disable`, `forced`.
        /// </summary>
        [Input("nattraversal")]
        public Input<string>? Nattraversal { get; set; }

        /// <summary>
        /// IKE SA negotiation timeout in seconds (1 - 300).
        /// </summary>
        [Input("negotiateTimeout")]
        public Input<int>? NegotiateTimeout { get; set; }

        /// <summary>
        /// Enable/disable kernel device creation. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("netDevice")]
        public Input<string>? NetDevice { get; set; }

        /// <summary>
        /// VPN gateway network ID.
        /// </summary>
        [Input("networkId")]
        public Input<int>? NetworkId { get; set; }

        /// <summary>
        /// Enable/disable network overlays. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("networkOverlay")]
        public Input<string>? NetworkOverlay { get; set; }

        /// <summary>
        /// Enable/disable offloading NPU. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("npuOffload")]
        public Input<string>? NpuOffload { get; set; }

        /// <summary>
        /// Enable/disable packet distribution (RPS) on the IPsec interface. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("packetRedistribution")]
        public Input<string>? PacketRedistribution { get; set; }

        /// <summary>
        /// Enable/disable IPsec passive mode for static tunnels. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("passiveMode")]
        public Input<string>? PassiveMode { get; set; }

        /// <summary>
        /// Accept this peer certificate.
        /// </summary>
        [Input("peer")]
        public Input<string>? Peer { get; set; }

        /// <summary>
        /// Accept this peer certificate group.
        /// </summary>
        [Input("peergrp")]
        public Input<string>? Peergrp { get; set; }

        /// <summary>
        /// Accept this peer identity.
        /// </summary>
        [Input("peerid")]
        public Input<string>? Peerid { get; set; }

        /// <summary>
        /// Accept this peer type. Valid values: `any`, `one`, `dialup`, `peer`, `peergrp`.
        /// </summary>
        [Input("peertype")]
        public Input<string>? Peertype { get; set; }

        /// <summary>
        /// Enable/disable IKEv2 Postquantum Preshared Key (PPK). Valid values: `disable`, `allow`, `require`.
        /// </summary>
        [Input("ppk")]
        public Input<string>? Ppk { get; set; }

        /// <summary>
        /// IKEv2 Postquantum Preshared Key Identity.
        /// </summary>
        [Input("ppkIdentity")]
        public Input<string>? PpkIdentity { get; set; }

        [Input("ppkSecret")]
        private Input<string>? _ppkSecret;

        /// <summary>
        /// IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
        /// </summary>
        public Input<string>? PpkSecret
        {
            get => _ppkSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _ppkSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Priority for routes added by IKE (0 - 4294967295).
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Phase1 proposal. Valid values: `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm-prfsha1`, `aes128gcm-prfsha256`, `aes128gcm-prfsha384`, `aes128gcm-prfsha512`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm-prfsha1`, `aes256gcm-prfsha256`, `aes256gcm-prfsha384`, `aes256gcm-prfsha512`, `chacha20poly1305-prfsha1`, `chacha20poly1305-prfsha256`, `chacha20poly1305-prfsha384`, `chacha20poly1305-prfsha512`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
        /// </summary>
        [Input("proposal", required: true)]
        public Input<string> Proposal { get; set; } = null!;

        [Input("psksecret")]
        private Input<string>? _psksecret;

        /// <summary>
        /// Pre-shared secret for PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        /// </summary>
        public Input<string>? Psksecret
        {
            get => _psksecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _psksecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("psksecretRemote")]
        private Input<string>? _psksecretRemote;

        /// <summary>
        /// Pre-shared secret for remote side PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        /// </summary>
        public Input<string>? PsksecretRemote
        {
            get => _psksecretRemote;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _psksecretRemote = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Enable/disable use of Quantum Key Distribution (QKD) server. Valid values: `disable`, `allow`, `require`.
        /// </summary>
        [Input("qkd")]
        public Input<string>? Qkd { get; set; }

        /// <summary>
        /// Quantum Key Distribution (QKD) server profile.
        /// </summary>
        [Input("qkdProfile")]
        public Input<string>? QkdProfile { get; set; }

        /// <summary>
        /// Enable/disable re-authentication upon IKE SA lifetime expiration. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("reauth")]
        public Input<string>? Reauth { get; set; }

        /// <summary>
        /// Enable/disable phase1 rekey. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("rekey")]
        public Input<string>? Rekey { get; set; }

        /// <summary>
        /// IPv4 address of the remote gateway's external interface.
        /// </summary>
        [Input("remoteGw")]
        public Input<string>? RemoteGw { get; set; }

        /// <summary>
        /// IPv6 address of the remote gateway's external interface.
        /// </summary>
        [Input("remoteGw6")]
        public Input<string>? RemoteGw6 { get; set; }

        /// <summary>
        /// Domain name of remote gateway (eg. name.DDNS.com).
        /// </summary>
        [Input("remotegwDdns")]
        public Input<string>? RemotegwDdns { get; set; }

        /// <summary>
        /// Digital Signature Authentication RSA signature format. Valid values: `pkcs1`, `pss`.
        /// </summary>
        [Input("rsaSignatureFormat")]
        public Input<string>? RsaSignatureFormat { get; set; }

        /// <summary>
        /// Enable/disable IKEv2 RSA signature hash algorithm override. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("rsaSignatureHashOverride")]
        public Input<string>? RsaSignatureHashOverride { get; set; }

        /// <summary>
        /// Enable/disable saving XAuth username and password on VPN clients. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("savePassword")]
        public Input<string>? SavePassword { get; set; }

        /// <summary>
        /// Enable/disable sending certificate chain. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("sendCertChain")]
        public Input<string>? SendCertChain { get; set; }

        /// <summary>
        /// Digital Signature Authentication hash algorithms. Valid values: `sha1`, `sha2-256`, `sha2-384`, `sha2-512`.
        /// </summary>
        [Input("signatureHashAlg")]
        public Input<string>? SignatureHashAlg { get; set; }

        /// <summary>
        /// Split-include services.
        /// </summary>
        [Input("splitIncludeService")]
        public Input<string>? SplitIncludeService { get; set; }

        /// <summary>
        /// Use Suite-B. Valid values: `disable`, `suite-b-gcm-128`, `suite-b-gcm-256`.
        /// </summary>
        [Input("suiteB")]
        public Input<string>? SuiteB { get; set; }

        /// <summary>
        /// Set IKE transport protocol. Valid values: `udp`, `udp-fallback-tcp`, `tcp`.
        /// </summary>
        [Input("transport")]
        public Input<string>? Transport { get; set; }

        /// <summary>
        /// Tunnel search method for when the interface is shared. Valid values: `selectors`, `nexthop`.
        /// </summary>
        [Input("tunnelSearch")]
        public Input<string>? TunnelSearch { get; set; }

        /// <summary>
        /// Remote gateway type. Valid values: `static`, `dynamic`, `ddns`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Enable/disable support for Cisco UNITY Configuration Method extensions. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("unitySupport")]
        public Input<string>? UnitySupport { get; set; }

        /// <summary>
        /// User group name for dialup peers.
        /// </summary>
        [Input("usrgrp")]
        public Input<string>? Usrgrp { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// VNI of VXLAN tunnel.
        /// </summary>
        [Input("vni")]
        public Input<int>? Vni { get; set; }

        /// <summary>
        /// GUI VPN Wizard Type.
        /// </summary>
        [Input("wizardType")]
        public Input<string>? WizardType { get; set; }

        /// <summary>
        /// XAuth type. Valid values: `disable`, `client`, `pap`, `chap`, `auto`.
        /// </summary>
        [Input("xauthtype")]
        public Input<string>? Xauthtype { get; set; }

        public Phase1interfaceArgs()
        {
        }
        public static new Phase1interfaceArgs Empty => new Phase1interfaceArgs();
    }

    public sealed class Phase1interfaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable verification of RADIUS accounting record. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("acctVerify")]
        public Input<string>? AcctVerify { get; set; }

        /// <summary>
        /// Enable/disable automatically add a route to the remote gateway. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("addGwRoute")]
        public Input<string>? AddGwRoute { get; set; }

        /// <summary>
        /// Enable/disable control addition of a route to peer destination selector. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("addRoute")]
        public Input<string>? AddRoute { get; set; }

        /// <summary>
        /// Enable/disable use as an aggregate member. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("aggregateMember")]
        public Input<string>? AggregateMember { get; set; }

        /// <summary>
        /// Link weight for aggregate.
        /// </summary>
        [Input("aggregateWeight")]
        public Input<int>? AggregateWeight { get; set; }

        /// <summary>
        /// Enable/disable assignment of IP to IPsec interface via configuration method. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("assignIp")]
        public Input<string>? AssignIp { get; set; }

        /// <summary>
        /// Method by which the IP address will be assigned. Valid values: `range`, `usrgrp`, `dhcp`, `name`.
        /// </summary>
        [Input("assignIpFrom")]
        public Input<string>? AssignIpFrom { get; set; }

        /// <summary>
        /// Authentication method. Valid values: `psk`, `signature`.
        /// </summary>
        [Input("authmethod")]
        public Input<string>? Authmethod { get; set; }

        /// <summary>
        /// Authentication method (remote side). Valid values: `psk`, `signature`.
        /// </summary>
        [Input("authmethodRemote")]
        public Input<string>? AuthmethodRemote { get; set; }

        [Input("authpasswd")]
        private Input<string>? _authpasswd;

        /// <summary>
        /// XAuth password (max 35 characters).
        /// </summary>
        public Input<string>? Authpasswd
        {
            get => _authpasswd;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _authpasswd = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// XAuth user name.
        /// </summary>
        [Input("authusr")]
        public Input<string>? Authusr { get; set; }

        /// <summary>
        /// Authentication user group.
        /// </summary>
        [Input("authusrgrp")]
        public Input<string>? Authusrgrp { get; set; }

        /// <summary>
        /// Allow/block set-up of short-cut tunnels between different network IDs. Valid values: `allow`, `block`.
        /// </summary>
        [Input("autoDiscoveryCrossover")]
        public Input<string>? AutoDiscoveryCrossover { get; set; }

        /// <summary>
        /// Enable/disable forwarding auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("autoDiscoveryForwarder")]
        public Input<string>? AutoDiscoveryForwarder { get; set; }

        /// <summary>
        /// Interval between shortcut offer messages in seconds (1 - 300, default = 5).
        /// </summary>
        [Input("autoDiscoveryOfferInterval")]
        public Input<int>? AutoDiscoveryOfferInterval { get; set; }

        /// <summary>
        /// Enable/disable use of pre-shared secrets for authentication of auto-discovery tunnels. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("autoDiscoveryPsk")]
        public Input<string>? AutoDiscoveryPsk { get; set; }

        /// <summary>
        /// Enable/disable accepting auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("autoDiscoveryReceiver")]
        public Input<string>? AutoDiscoveryReceiver { get; set; }

        /// <summary>
        /// Enable/disable sending auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("autoDiscoverySender")]
        public Input<string>? AutoDiscoverySender { get; set; }

        /// <summary>
        /// Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
        /// </summary>
        [Input("autoDiscoveryShortcuts")]
        public Input<string>? AutoDiscoveryShortcuts { get; set; }

        /// <summary>
        /// Enable/disable automatic initiation of IKE SA negotiation. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("autoNegotiate")]
        public Input<string>? AutoNegotiate { get; set; }

        /// <summary>
        /// Enable/disable Azure AD Auto-Connect for FortiClient. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("azureAdAutoconnect")]
        public Input<string>? AzureAdAutoconnect { get; set; }

        [Input("backupGateways")]
        private InputList<Inputs.Phase1interfaceBackupGatewayGetArgs>? _backupGateways;

        /// <summary>
        /// Instruct unity clients about the backup gateway address(es). The structure of `backup_gateway` block is documented below.
        /// </summary>
        public InputList<Inputs.Phase1interfaceBackupGatewayGetArgs> BackupGateways
        {
            get => _backupGateways ?? (_backupGateways = new InputList<Inputs.Phase1interfaceBackupGatewayGetArgs>());
            set => _backupGateways = value;
        }

        /// <summary>
        /// Message that unity client should display after connecting.
        /// </summary>
        [Input("banner")]
        public Input<string>? Banner { get; set; }

        /// <summary>
        /// Enable/disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("certIdValidation")]
        public Input<string>? CertIdValidation { get; set; }

        /// <summary>
        /// CA certificate trust store. Valid values: `local`, `ems`.
        /// </summary>
        [Input("certTrustStore")]
        public Input<string>? CertTrustStore { get; set; }

        [Input("certificates")]
        private InputList<Inputs.Phase1interfaceCertificateGetArgs>? _certificates;

        /// <summary>
        /// The names of up to 4 signed personal certificates. The structure of `certificate` block is documented below.
        /// </summary>
        public InputList<Inputs.Phase1interfaceCertificateGetArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<Inputs.Phase1interfaceCertificateGetArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// Enable/disable childless IKEv2 initiation (RFC 6023). Valid values: `enable`, `disable`.
        /// </summary>
        [Input("childlessIke")]
        public Input<string>? ChildlessIke { get; set; }

        /// <summary>
        /// Enable/disable allowing the VPN client to bring up the tunnel when there is no traffic. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("clientAutoNegotiate")]
        public Input<string>? ClientAutoNegotiate { get; set; }

        /// <summary>
        /// Enable/disable allowing the VPN client to keep the tunnel up when there is no traffic. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("clientKeepAlive")]
        public Input<string>? ClientKeepAlive { get; set; }

        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// IPv4 address of default route gateway to use for traffic exiting the interface.
        /// </summary>
        [Input("defaultGw")]
        public Input<string>? DefaultGw { get; set; }

        /// <summary>
        /// Priority for default gateway route. A higher priority number signifies a less preferred route.
        /// </summary>
        [Input("defaultGwPriority")]
        public Input<int>? DefaultGwPriority { get; set; }

        /// <summary>
        /// Device ID carried by the device ID notification.
        /// </summary>
        [Input("devId")]
        public Input<string>? DevId { get; set; }

        /// <summary>
        /// Enable/disable device ID notification. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("devIdNotification")]
        public Input<string>? DevIdNotification { get; set; }

        /// <summary>
        /// Relay agent IPv6 link address to use in DHCP6 requests.
        /// </summary>
        [Input("dhcp6RaLinkaddr")]
        public Input<string>? Dhcp6RaLinkaddr { get; set; }

        /// <summary>
        /// Relay agent gateway IP address to use in the giaddr field of DHCP requests.
        /// </summary>
        [Input("dhcpRaGiaddr")]
        public Input<string>? DhcpRaGiaddr { get; set; }

        /// <summary>
        /// DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
        /// </summary>
        [Input("dhgrp")]
        public Input<string>? Dhgrp { get; set; }

        /// <summary>
        /// Enable/disable IKEv2 Digital Signature Authentication (RFC 7427). Valid values: `enable`, `disable`.
        /// </summary>
        [Input("digitalSignatureAuth")]
        public Input<string>? DigitalSignatureAuth { get; set; }

        /// <summary>
        /// Distance for routes added by IKE (1 - 255).
        /// </summary>
        [Input("distance")]
        public Input<int>? Distance { get; set; }

        /// <summary>
        /// DNS server mode. Valid values: `manual`, `auto`.
        /// </summary>
        [Input("dnsMode")]
        public Input<string>? DnsMode { get; set; }

        /// <summary>
        /// Instruct unity clients about the default DNS domain.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Dead Peer Detection mode. Valid values: `disable`, `on-idle`, `on-demand`.
        /// </summary>
        [Input("dpd")]
        public Input<string>? Dpd { get; set; }

        /// <summary>
        /// Number of DPD retry attempts.
        /// </summary>
        [Input("dpdRetrycount")]
        public Input<int>? DpdRetrycount { get; set; }

        /// <summary>
        /// DPD retry interval.
        /// </summary>
        [Input("dpdRetryinterval")]
        public Input<string>? DpdRetryinterval { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Enable/disable IKEv2 EAP authentication. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("eap")]
        public Input<string>? Eap { get; set; }

        /// <summary>
        /// Enable/disable peer certificate authentication in addition to EAP if peer is a FortiClient endpoint. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("eapCertAuth")]
        public Input<string>? EapCertAuth { get; set; }

        /// <summary>
        /// Peer group excluded from EAP authentication.
        /// </summary>
        [Input("eapExcludePeergrp")]
        public Input<string>? EapExcludePeergrp { get; set; }

        /// <summary>
        /// IKEv2 EAP peer identity type. Valid values: `use-id-payload`, `send-request`.
        /// </summary>
        [Input("eapIdentity")]
        public Input<string>? EapIdentity { get; set; }

        /// <summary>
        /// Enable/disable verification of EMS serial number. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("emsSnCheck")]
        public Input<string>? EmsSnCheck { get; set; }

        /// <summary>
        /// Local IPv4 address of GRE/VXLAN tunnel.
        /// </summary>
        [Input("encapLocalGw4")]
        public Input<string>? EncapLocalGw4 { get; set; }

        /// <summary>
        /// Local IPv6 address of GRE/VXLAN tunnel.
        /// </summary>
        [Input("encapLocalGw6")]
        public Input<string>? EncapLocalGw6 { get; set; }

        /// <summary>
        /// Remote IPv4 address of GRE/VXLAN tunnel.
        /// </summary>
        [Input("encapRemoteGw4")]
        public Input<string>? EncapRemoteGw4 { get; set; }

        /// <summary>
        /// Remote IPv6 address of GRE/VXLAN tunnel.
        /// </summary>
        [Input("encapRemoteGw6")]
        public Input<string>? EncapRemoteGw6 { get; set; }

        /// <summary>
        /// Enable/disable GRE/VXLAN encapsulation.
        /// </summary>
        [Input("encapsulation")]
        public Input<string>? Encapsulation { get; set; }

        /// <summary>
        /// Source for GRE/VXLAN tunnel address. Valid values: `ike`, `ipv4`, `ipv6`.
        /// </summary>
        [Input("encapsulationAddress")]
        public Input<string>? EncapsulationAddress { get; set; }

        /// <summary>
        /// Enable/disable peer ID uniqueness check. Valid values: `disable`, `keep-new`, `keep-old`.
        /// </summary>
        [Input("enforceUniqueId")]
        public Input<string>? EnforceUniqueId { get; set; }

        /// <summary>
        /// Extended sequence number (ESN) negotiation. Valid values: `require`, `allow`, `disable`.
        /// </summary>
        [Input("esn")]
        public Input<string>? Esn { get; set; }

        /// <summary>
        /// Enable/disable device identifier exchange with peer FortiGate units for use of VPN monitor data by FortiManager. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("exchangeFgtDeviceId")]
        public Input<string>? ExchangeFgtDeviceId { get; set; }

        /// <summary>
        /// Enable/disable exchange of IPsec interface IP address. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("exchangeInterfaceIp")]
        public Input<string>? ExchangeInterfaceIp { get; set; }

        /// <summary>
        /// IPv4 address to exchange with peers.
        /// </summary>
        [Input("exchangeIpAddr4")]
        public Input<string>? ExchangeIpAddr4 { get; set; }

        /// <summary>
        /// IPv6 address to exchange with peers
        /// </summary>
        [Input("exchangeIpAddr6")]
        public Input<string>? ExchangeIpAddr6 { get; set; }

        /// <summary>
        /// Timeout in seconds before falling back IKE/IPsec traffic to tcp.
        /// </summary>
        [Input("fallbackTcpThreshold")]
        public Input<int>? FallbackTcpThreshold { get; set; }

        /// <summary>
        /// Number of base Forward Error Correction packets (1 - 100).
        /// </summary>
        [Input("fecBase")]
        public Input<int>? FecBase { get; set; }

        /// <summary>
        /// ipsec fec encoding/decoding algorithm (0: reed-solomon, 1: xor).
        /// </summary>
        [Input("fecCodec")]
        public Input<int>? FecCodec { get; set; }

        /// <summary>
        /// Forward Error Correction encoding/decoding algorithm. Valid values: `rs`, `xor`.
        /// </summary>
        [Input("fecCodecString")]
        public Input<string>? FecCodecString { get; set; }

        /// <summary>
        /// Enable/disable Forward Error Correction for egress IPsec traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("fecEgress")]
        public Input<string>? FecEgress { get; set; }

        /// <summary>
        /// SD-WAN health check.
        /// </summary>
        [Input("fecHealthCheck")]
        public Input<string>? FecHealthCheck { get; set; }

        /// <summary>
        /// Enable/disable Forward Error Correction for ingress IPsec traffic. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("fecIngress")]
        public Input<string>? FecIngress { get; set; }

        /// <summary>
        /// Forward Error Correction (FEC) mapping profile.
        /// </summary>
        [Input("fecMappingProfile")]
        public Input<string>? FecMappingProfile { get; set; }

        /// <summary>
        /// Timeout in milliseconds before dropping Forward Error Correction packets (1 - 10000).
        /// </summary>
        [Input("fecReceiveTimeout")]
        public Input<int>? FecReceiveTimeout { get; set; }

        /// <summary>
        /// Number of redundant Forward Error Correction packets (1 - 100).
        /// </summary>
        [Input("fecRedundant")]
        public Input<int>? FecRedundant { get; set; }

        /// <summary>
        /// Timeout in milliseconds before sending Forward Error Correction packets (1 - 1000).
        /// </summary>
        [Input("fecSendTimeout")]
        public Input<int>? FecSendTimeout { get; set; }

        /// <summary>
        /// Enable/disable IPsec syncing of tunnels for FGSP IPsec. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("fgspSync")]
        public Input<string>? FgspSync { get; set; }

        /// <summary>
        /// Enable/disable FortiClient enforcement. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("forticlientEnforcement")]
        public Input<string>? ForticlientEnforcement { get; set; }

        /// <summary>
        /// Enable/disable Fortinet ESP encapsulaton. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("fortinetEsp")]
        public Input<string>? FortinetEsp { get; set; }

        /// <summary>
        /// Enable/disable fragment IKE message on re-transmission. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("fragmentation")]
        public Input<string>? Fragmentation { get; set; }

        /// <summary>
        /// IKE fragmentation MTU (500 - 16000).
        /// </summary>
        [Input("fragmentationMtu")]
        public Input<int>? FragmentationMtu { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Enable/disable IKEv2 IDi group authentication. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("groupAuthentication")]
        public Input<string>? GroupAuthentication { get; set; }

        [Input("groupAuthenticationSecret")]
        private Input<string>? _groupAuthenticationSecret;

        /// <summary>
        /// Password for IKEv2 IDi group authentication.  (ASCII string or hexadecimal indicated by a leading 0x.)
        /// </summary>
        public Input<string>? GroupAuthenticationSecret
        {
            get => _groupAuthenticationSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _groupAuthenticationSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Enable/disable sequence number jump ahead for IPsec HA. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("haSyncEspSeqno")]
        public Input<string>? HaSyncEspSeqno { get; set; }

        /// <summary>
        /// Enable/disable IPsec tunnel idle timeout. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("idleTimeout")]
        public Input<string>? IdleTimeout { get; set; }

        /// <summary>
        /// IPsec tunnel idle timeout in minutes (5 - 43200).
        /// </summary>
        [Input("idleTimeoutinterval")]
        public Input<int>? IdleTimeoutinterval { get; set; }

        /// <summary>
        /// IKE protocol version. Valid values: `1`, `2`.
        /// </summary>
        [Input("ikeVersion")]
        public Input<string>? IkeVersion { get; set; }

        /// <summary>
        /// Enable/disable copy the dscp in the ESP header to the inner IP Header. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("inboundDscpCopy")]
        public Input<string>? InboundDscpCopy { get; set; }

        /// <summary>
        /// Enable/disable allow local LAN access on unity clients. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("includeLocalLan")]
        public Input<string>? IncludeLocalLan { get; set; }

        /// <summary>
        /// Local physical, aggregate, or VLAN outgoing interface.
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        [Input("internalDomainLists")]
        private InputList<Inputs.Phase1interfaceInternalDomainListGetArgs>? _internalDomainLists;

        /// <summary>
        /// One or more internal domain names in quotes separated by spaces. The structure of `internal_domain_list` block is documented below.
        /// </summary>
        public InputList<Inputs.Phase1interfaceInternalDomainListGetArgs> InternalDomainLists
        {
            get => _internalDomainLists ?? (_internalDomainLists = new InputList<Inputs.Phase1interfaceInternalDomainListGetArgs>());
            set => _internalDomainLists = value;
        }

        /// <summary>
        /// IP address reuse delay interval in seconds (0 - 28800).
        /// </summary>
        [Input("ipDelayInterval")]
        public Input<int>? IpDelayInterval { get; set; }

        /// <summary>
        /// Determine whether IP packets are fragmented before or after IPsec encapsulation. Valid values: `pre-encapsulation`, `post-encapsulation`.
        /// </summary>
        [Input("ipFragmentation")]
        public Input<string>? IpFragmentation { get; set; }

        /// <summary>
        /// IP version to use for VPN interface. Valid values: `4`, `6`.
        /// </summary>
        [Input("ipVersion")]
        public Input<string>? IpVersion { get; set; }

        /// <summary>
        /// IPv4 DNS server 1.
        /// </summary>
        [Input("ipv4DnsServer1")]
        public Input<string>? Ipv4DnsServer1 { get; set; }

        /// <summary>
        /// IPv4 DNS server 2.
        /// </summary>
        [Input("ipv4DnsServer2")]
        public Input<string>? Ipv4DnsServer2 { get; set; }

        /// <summary>
        /// IPv4 DNS server 3.
        /// </summary>
        [Input("ipv4DnsServer3")]
        public Input<string>? Ipv4DnsServer3 { get; set; }

        /// <summary>
        /// End of IPv4 range.
        /// </summary>
        [Input("ipv4EndIp")]
        public Input<string>? Ipv4EndIp { get; set; }

        [Input("ipv4ExcludeRanges")]
        private InputList<Inputs.Phase1interfaceIpv4ExcludeRangeGetArgs>? _ipv4ExcludeRanges;

        /// <summary>
        /// Configuration Method IPv4 exclude ranges. The structure of `ipv4_exclude_range` block is documented below.
        /// </summary>
        public InputList<Inputs.Phase1interfaceIpv4ExcludeRangeGetArgs> Ipv4ExcludeRanges
        {
            get => _ipv4ExcludeRanges ?? (_ipv4ExcludeRanges = new InputList<Inputs.Phase1interfaceIpv4ExcludeRangeGetArgs>());
            set => _ipv4ExcludeRanges = value;
        }

        /// <summary>
        /// IPv4 address name.
        /// </summary>
        [Input("ipv4Name")]
        public Input<string>? Ipv4Name { get; set; }

        /// <summary>
        /// IPv4 Netmask.
        /// </summary>
        [Input("ipv4Netmask")]
        public Input<string>? Ipv4Netmask { get; set; }

        /// <summary>
        /// IPv4 subnets that should not be sent over the IPsec tunnel.
        /// </summary>
        [Input("ipv4SplitExclude")]
        public Input<string>? Ipv4SplitExclude { get; set; }

        /// <summary>
        /// IPv4 split-include subnets.
        /// </summary>
        [Input("ipv4SplitInclude")]
        public Input<string>? Ipv4SplitInclude { get; set; }

        /// <summary>
        /// Start of IPv4 range.
        /// </summary>
        [Input("ipv4StartIp")]
        public Input<string>? Ipv4StartIp { get; set; }

        /// <summary>
        /// WINS server 1.
        /// </summary>
        [Input("ipv4WinsServer1")]
        public Input<string>? Ipv4WinsServer1 { get; set; }

        /// <summary>
        /// WINS server 2.
        /// </summary>
        [Input("ipv4WinsServer2")]
        public Input<string>? Ipv4WinsServer2 { get; set; }

        /// <summary>
        /// IPv6 DNS server 1.
        /// </summary>
        [Input("ipv6DnsServer1")]
        public Input<string>? Ipv6DnsServer1 { get; set; }

        /// <summary>
        /// IPv6 DNS server 2.
        /// </summary>
        [Input("ipv6DnsServer2")]
        public Input<string>? Ipv6DnsServer2 { get; set; }

        /// <summary>
        /// IPv6 DNS server 3.
        /// </summary>
        [Input("ipv6DnsServer3")]
        public Input<string>? Ipv6DnsServer3 { get; set; }

        /// <summary>
        /// End of IPv6 range.
        /// </summary>
        [Input("ipv6EndIp")]
        public Input<string>? Ipv6EndIp { get; set; }

        [Input("ipv6ExcludeRanges")]
        private InputList<Inputs.Phase1interfaceIpv6ExcludeRangeGetArgs>? _ipv6ExcludeRanges;

        /// <summary>
        /// Configuration method IPv6 exclude ranges. The structure of `ipv6_exclude_range` block is documented below.
        /// </summary>
        public InputList<Inputs.Phase1interfaceIpv6ExcludeRangeGetArgs> Ipv6ExcludeRanges
        {
            get => _ipv6ExcludeRanges ?? (_ipv6ExcludeRanges = new InputList<Inputs.Phase1interfaceIpv6ExcludeRangeGetArgs>());
            set => _ipv6ExcludeRanges = value;
        }

        /// <summary>
        /// IPv6 address name.
        /// </summary>
        [Input("ipv6Name")]
        public Input<string>? Ipv6Name { get; set; }

        /// <summary>
        /// IPv6 prefix.
        /// </summary>
        [Input("ipv6Prefix")]
        public Input<int>? Ipv6Prefix { get; set; }

        /// <summary>
        /// IPv6 subnets that should not be sent over the IPsec tunnel.
        /// </summary>
        [Input("ipv6SplitExclude")]
        public Input<string>? Ipv6SplitExclude { get; set; }

        /// <summary>
        /// IPv6 split-include subnets.
        /// </summary>
        [Input("ipv6SplitInclude")]
        public Input<string>? Ipv6SplitInclude { get; set; }

        /// <summary>
        /// Start of IPv6 range.
        /// </summary>
        [Input("ipv6StartIp")]
        public Input<string>? Ipv6StartIp { get; set; }

        /// <summary>
        /// NAT-T keep alive interval.
        /// </summary>
        [Input("keepalive")]
        public Input<int>? Keepalive { get; set; }

        /// <summary>
        /// Time to wait in seconds before phase 1 encryption key expires.
        /// </summary>
        [Input("keylife")]
        public Input<int>? Keylife { get; set; }

        /// <summary>
        /// Key Management Services server.
        /// </summary>
        [Input("kms")]
        public Input<string>? Kms { get; set; }

        /// <summary>
        /// VPN tunnel underlay link cost.
        /// </summary>
        [Input("linkCost")]
        public Input<int>? LinkCost { get; set; }

        /// <summary>
        /// IPv4 address of the local gateway's external interface.
        /// </summary>
        [Input("localGw")]
        public Input<string>? LocalGw { get; set; }

        /// <summary>
        /// IPv6 address of the local gateway's external interface.
        /// </summary>
        [Input("localGw6")]
        public Input<string>? LocalGw6 { get; set; }

        /// <summary>
        /// Local ID.
        /// </summary>
        [Input("localid")]
        public Input<string>? Localid { get; set; }

        /// <summary>
        /// Local ID type. Valid values: `auto`, `fqdn`, `user-fqdn`, `keyid`, `address`, `asn1dn`.
        /// </summary>
        [Input("localidType")]
        public Input<string>? LocalidType { get; set; }

        /// <summary>
        /// Enable/disable asymmetric routing for IKE traffic on loopback interface. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("loopbackAsymroute")]
        public Input<string>? LoopbackAsymroute { get; set; }

        /// <summary>
        /// Add selectors containing subsets of the configuration depending on traffic. Valid values: `disable`, `subnet`, `host`.
        /// </summary>
        [Input("meshSelectorType")]
        public Input<string>? MeshSelectorType { get; set; }

        /// <summary>
        /// The ID protection mode used to establish a secure channel. Valid values: `aggressive`, `main`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// Enable/disable configuration method. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("modeCfg")]
        public Input<string>? ModeCfg { get; set; }

        /// <summary>
        /// Enable/disable mode-cfg client to use custom phase2 selectors. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("modeCfgAllowClientSelector")]
        public Input<string>? ModeCfgAllowClientSelector { get; set; }

        /// <summary>
        /// IPsec interface as backup for primary interface.
        /// </summary>
        [Input("monitor")]
        public Input<string>? Monitor { get; set; }

        /// <summary>
        /// Time to wait in seconds before recovery once primary re-establishes.
        /// </summary>
        [Input("monitorHoldDownDelay")]
        public Input<int>? MonitorHoldDownDelay { get; set; }

        /// <summary>
        /// Time of day at which to fail back to primary after it re-establishes.
        /// </summary>
        [Input("monitorHoldDownTime")]
        public Input<string>? MonitorHoldDownTime { get; set; }

        /// <summary>
        /// Recovery time method when primary interface re-establishes. Valid values: `immediate`, `delay`, `time`.
        /// </summary>
        [Input("monitorHoldDownType")]
        public Input<string>? MonitorHoldDownType { get; set; }

        /// <summary>
        /// Day of the week to recover once primary re-establishes. Valid values: `everyday`, `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        /// </summary>
        [Input("monitorHoldDownWeekday")]
        public Input<string>? MonitorHoldDownWeekday { get; set; }

        /// <summary>
        /// Minimum number of links to become degraded before activating this interface.  Zero (0) means all links must be down before activating this interface.
        /// </summary>
        [Input("monitorMin")]
        public Input<int>? MonitorMin { get; set; }

        /// <summary>
        /// IPsec remote gateway name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable/disable NAT traversal. Valid values: `enable`, `disable`, `forced`.
        /// </summary>
        [Input("nattraversal")]
        public Input<string>? Nattraversal { get; set; }

        /// <summary>
        /// IKE SA negotiation timeout in seconds (1 - 300).
        /// </summary>
        [Input("negotiateTimeout")]
        public Input<int>? NegotiateTimeout { get; set; }

        /// <summary>
        /// Enable/disable kernel device creation. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("netDevice")]
        public Input<string>? NetDevice { get; set; }

        /// <summary>
        /// VPN gateway network ID.
        /// </summary>
        [Input("networkId")]
        public Input<int>? NetworkId { get; set; }

        /// <summary>
        /// Enable/disable network overlays. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("networkOverlay")]
        public Input<string>? NetworkOverlay { get; set; }

        /// <summary>
        /// Enable/disable offloading NPU. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("npuOffload")]
        public Input<string>? NpuOffload { get; set; }

        /// <summary>
        /// Enable/disable packet distribution (RPS) on the IPsec interface. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("packetRedistribution")]
        public Input<string>? PacketRedistribution { get; set; }

        /// <summary>
        /// Enable/disable IPsec passive mode for static tunnels. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("passiveMode")]
        public Input<string>? PassiveMode { get; set; }

        /// <summary>
        /// Accept this peer certificate.
        /// </summary>
        [Input("peer")]
        public Input<string>? Peer { get; set; }

        /// <summary>
        /// Accept this peer certificate group.
        /// </summary>
        [Input("peergrp")]
        public Input<string>? Peergrp { get; set; }

        /// <summary>
        /// Accept this peer identity.
        /// </summary>
        [Input("peerid")]
        public Input<string>? Peerid { get; set; }

        /// <summary>
        /// Accept this peer type. Valid values: `any`, `one`, `dialup`, `peer`, `peergrp`.
        /// </summary>
        [Input("peertype")]
        public Input<string>? Peertype { get; set; }

        /// <summary>
        /// Enable/disable IKEv2 Postquantum Preshared Key (PPK). Valid values: `disable`, `allow`, `require`.
        /// </summary>
        [Input("ppk")]
        public Input<string>? Ppk { get; set; }

        /// <summary>
        /// IKEv2 Postquantum Preshared Key Identity.
        /// </summary>
        [Input("ppkIdentity")]
        public Input<string>? PpkIdentity { get; set; }

        [Input("ppkSecret")]
        private Input<string>? _ppkSecret;

        /// <summary>
        /// IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
        /// </summary>
        public Input<string>? PpkSecret
        {
            get => _ppkSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _ppkSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Priority for routes added by IKE (0 - 4294967295).
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Phase1 proposal. Valid values: `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm-prfsha1`, `aes128gcm-prfsha256`, `aes128gcm-prfsha384`, `aes128gcm-prfsha512`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm-prfsha1`, `aes256gcm-prfsha256`, `aes256gcm-prfsha384`, `aes256gcm-prfsha512`, `chacha20poly1305-prfsha1`, `chacha20poly1305-prfsha256`, `chacha20poly1305-prfsha384`, `chacha20poly1305-prfsha512`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
        /// </summary>
        [Input("proposal")]
        public Input<string>? Proposal { get; set; }

        [Input("psksecret")]
        private Input<string>? _psksecret;

        /// <summary>
        /// Pre-shared secret for PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        /// </summary>
        public Input<string>? Psksecret
        {
            get => _psksecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _psksecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("psksecretRemote")]
        private Input<string>? _psksecretRemote;

        /// <summary>
        /// Pre-shared secret for remote side PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        /// </summary>
        public Input<string>? PsksecretRemote
        {
            get => _psksecretRemote;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _psksecretRemote = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Enable/disable use of Quantum Key Distribution (QKD) server. Valid values: `disable`, `allow`, `require`.
        /// </summary>
        [Input("qkd")]
        public Input<string>? Qkd { get; set; }

        /// <summary>
        /// Quantum Key Distribution (QKD) server profile.
        /// </summary>
        [Input("qkdProfile")]
        public Input<string>? QkdProfile { get; set; }

        /// <summary>
        /// Enable/disable re-authentication upon IKE SA lifetime expiration. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("reauth")]
        public Input<string>? Reauth { get; set; }

        /// <summary>
        /// Enable/disable phase1 rekey. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("rekey")]
        public Input<string>? Rekey { get; set; }

        /// <summary>
        /// IPv4 address of the remote gateway's external interface.
        /// </summary>
        [Input("remoteGw")]
        public Input<string>? RemoteGw { get; set; }

        /// <summary>
        /// IPv6 address of the remote gateway's external interface.
        /// </summary>
        [Input("remoteGw6")]
        public Input<string>? RemoteGw6 { get; set; }

        /// <summary>
        /// Domain name of remote gateway (eg. name.DDNS.com).
        /// </summary>
        [Input("remotegwDdns")]
        public Input<string>? RemotegwDdns { get; set; }

        /// <summary>
        /// Digital Signature Authentication RSA signature format. Valid values: `pkcs1`, `pss`.
        /// </summary>
        [Input("rsaSignatureFormat")]
        public Input<string>? RsaSignatureFormat { get; set; }

        /// <summary>
        /// Enable/disable IKEv2 RSA signature hash algorithm override. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("rsaSignatureHashOverride")]
        public Input<string>? RsaSignatureHashOverride { get; set; }

        /// <summary>
        /// Enable/disable saving XAuth username and password on VPN clients. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("savePassword")]
        public Input<string>? SavePassword { get; set; }

        /// <summary>
        /// Enable/disable sending certificate chain. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("sendCertChain")]
        public Input<string>? SendCertChain { get; set; }

        /// <summary>
        /// Digital Signature Authentication hash algorithms. Valid values: `sha1`, `sha2-256`, `sha2-384`, `sha2-512`.
        /// </summary>
        [Input("signatureHashAlg")]
        public Input<string>? SignatureHashAlg { get; set; }

        /// <summary>
        /// Split-include services.
        /// </summary>
        [Input("splitIncludeService")]
        public Input<string>? SplitIncludeService { get; set; }

        /// <summary>
        /// Use Suite-B. Valid values: `disable`, `suite-b-gcm-128`, `suite-b-gcm-256`.
        /// </summary>
        [Input("suiteB")]
        public Input<string>? SuiteB { get; set; }

        /// <summary>
        /// Set IKE transport protocol. Valid values: `udp`, `udp-fallback-tcp`, `tcp`.
        /// </summary>
        [Input("transport")]
        public Input<string>? Transport { get; set; }

        /// <summary>
        /// Tunnel search method for when the interface is shared. Valid values: `selectors`, `nexthop`.
        /// </summary>
        [Input("tunnelSearch")]
        public Input<string>? TunnelSearch { get; set; }

        /// <summary>
        /// Remote gateway type. Valid values: `static`, `dynamic`, `ddns`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Enable/disable support for Cisco UNITY Configuration Method extensions. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("unitySupport")]
        public Input<string>? UnitySupport { get; set; }

        /// <summary>
        /// User group name for dialup peers.
        /// </summary>
        [Input("usrgrp")]
        public Input<string>? Usrgrp { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// VNI of VXLAN tunnel.
        /// </summary>
        [Input("vni")]
        public Input<int>? Vni { get; set; }

        /// <summary>
        /// GUI VPN Wizard Type.
        /// </summary>
        [Input("wizardType")]
        public Input<string>? WizardType { get; set; }

        /// <summary>
        /// XAuth type. Valid values: `disable`, `client`, `pap`, `chap`, `auto`.
        /// </summary>
        [Input("xauthtype")]
        public Input<string>? Xauthtype { get; set; }

        public Phase1interfaceState()
        {
        }
        public static new Phase1interfaceState Empty => new Phase1interfaceState();
    }
}
