// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Vpn.Ipsec
{
    /// <summary>
    /// Configure FortiClient policy realm.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // fortios_vpnipsec_phase1interface.trname2:
    ///     var trname4 = new Fortios.Vpn.Ipsec.Phase1interface("trname4", new()
    ///     {
    ///         AcctVerify = "disable",
    ///         AddGwRoute = "disable",
    ///         AddRoute = "enable",
    ///         AssignIp = "enable",
    ///         AssignIpFrom = "range",
    ///         Authmethod = "psk",
    ///         Authusrgrp = "Guest-group",
    ///         AutoDiscoveryForwarder = "disable",
    ///         AutoDiscoveryPsk = "disable",
    ///         AutoDiscoveryReceiver = "disable",
    ///         AutoDiscoverySender = "disable",
    ///         AutoNegotiate = "enable",
    ///         CertIdValidation = "enable",
    ///         ChildlessIke = "disable",
    ///         ClientAutoNegotiate = "disable",
    ///         ClientKeepAlive = "disable",
    ///         Comments = "VPN: Dialup_IPsec (Created by VPN wizard)",
    ///         DefaultGw = "0.0.0.0",
    ///         DefaultGwPriority = 0,
    ///         Dhgrp = "14 5",
    ///         DigitalSignatureAuth = "disable",
    ///         Distance = 15,
    ///         DnsMode = "auto",
    ///         Dpd = "on-idle",
    ///         DpdRetrycount = 3,
    ///         DpdRetryinterval = "60",
    ///         Eap = "disable",
    ///         EapIdentity = "use-id-payload",
    ///         EncapLocalGw4 = "0.0.0.0",
    ///         EncapLocalGw6 = "::",
    ///         EncapRemoteGw4 = "0.0.0.0",
    ///         EncapRemoteGw6 = "::",
    ///         Encapsulation = "none",
    ///         EncapsulationAddress = "ike",
    ///         EnforceUniqueId = "disable",
    ///         ExchangeInterfaceIp = "disable",
    ///         ExchangeIpAddr4 = "0.0.0.0",
    ///         ExchangeIpAddr6 = "::",
    ///         ForticlientEnforcement = "disable",
    ///         Fragmentation = "enable",
    ///         FragmentationMtu = 1200,
    ///         GroupAuthentication = "disable",
    ///         HaSyncEspSeqno = "enable",
    ///         IdleTimeout = "disable",
    ///         IdleTimeoutinterval = 15,
    ///         IkeVersion = "1",
    ///         IncludeLocalLan = "disable",
    ///         Interface = "port4",
    ///         IpVersion = "4",
    ///         Ipv4DnsServer1 = "0.0.0.0",
    ///         Ipv4DnsServer2 = "0.0.0.0",
    ///         Ipv4DnsServer3 = "0.0.0.0",
    ///         Ipv4EndIp = "10.10.10.10",
    ///         Ipv4Netmask = "255.255.255.192",
    ///         Ipv4SplitInclude = "FIREWALL_AUTH_PORTAL_ADDRESS",
    ///         Ipv4StartIp = "10.10.10.1",
    ///         Ipv4WinsServer1 = "0.0.0.0",
    ///         Ipv4WinsServer2 = "0.0.0.0",
    ///         Ipv6DnsServer1 = "::",
    ///         Ipv6DnsServer2 = "::",
    ///         Ipv6DnsServer3 = "::",
    ///         Ipv6EndIp = "::",
    ///         Ipv6Prefix = 128,
    ///         Ipv6StartIp = "::",
    ///         Keepalive = 10,
    ///         Keylife = 86400,
    ///         LocalGw = "0.0.0.0",
    ///         LocalGw6 = "::",
    ///         LocalidType = "auto",
    ///         MeshSelectorType = "disable",
    ///         Mode = "aggressive",
    ///         ModeCfg = "enable",
    ///         MonitorHoldDownDelay = 0,
    ///         MonitorHoldDownTime = "00:00",
    ///         MonitorHoldDownType = "immediate",
    ///         MonitorHoldDownWeekday = "sunday",
    ///         Nattraversal = "enable",
    ///         NegotiateTimeout = 30,
    ///         NetDevice = "enable",
    ///         PassiveMode = "disable",
    ///         Peertype = "any",
    ///         Psksecret = "NCIEW32930293203932",
    ///         Ppk = "disable",
    ///         Priority = 0,
    ///         Proposal = "aes128-sha256 aes256-sha256 aes128-sha1 aes256-sha1",
    ///         Reauth = "disable",
    ///         Rekey = "enable",
    ///         RemoteGw = "0.0.0.0",
    ///         RemoteGw6 = "::",
    ///         RsaSignatureFormat = "pkcs1",
    ///         SavePassword = "enable",
    ///         SendCertChain = "enable",
    ///         SignatureHashAlg = "sha2-512 sha2-384 sha2-256 sha1",
    ///         SuiteB = "disable",
    ///         TunnelSearch = "selectors",
    ///         Type = "dynamic",
    ///         UnitySupport = "enable",
    ///         WizardType = "dialup-forticlient",
    ///         Xauthtype = "auto",
    ///     });
    /// 
    ///     // fortios_vpnipsec_phase2interface.trname1:
    ///     var trname3 = new Fortios.Vpn.Ipsec.Phase2interface("trname3", new()
    ///     {
    ///         AddRoute = "phase1",
    ///         AutoDiscoveryForwarder = "phase1",
    ///         AutoDiscoverySender = "phase1",
    ///         AutoNegotiate = "disable",
    ///         DhcpIpsec = "disable",
    ///         Dhgrp = "14 5",
    ///         DstAddrType = "subnet",
    ///         DstEndIp = "0.0.0.0",
    ///         DstEndIp6 = "::",
    ///         DstPort = 0,
    ///         DstStartIp = "0.0.0.0",
    ///         DstStartIp6 = "::",
    ///         DstSubnet = "0.0.0.0 0.0.0.0",
    ///         DstSubnet6 = "::/0",
    ///         Encapsulation = "tunnel-mode",
    ///         Keepalive = "disable",
    ///         KeylifeType = "seconds",
    ///         Keylifekbs = 5120,
    ///         Keylifeseconds = 43200,
    ///         L2tp = "disable",
    ///         Pfs = "enable",
    ///         Phase1name = trname4.Name,
    ///         Proposal = "aes128-sha1 aes256-sha1 aes128-sha256 aes256-sha256 aes128gcm aes256gcm chacha20poly1305",
    ///         Protocol = 0,
    ///         Replay = "enable",
    ///         RouteOverlap = "use-new",
    ///         SingleSource = "disable",
    ///         SrcAddrType = "subnet",
    ///         SrcEndIp = "0.0.0.0",
    ///         SrcEndIp6 = "::",
    ///         SrcPort = 0,
    ///         SrcStartIp = "0.0.0.0",
    ///         SrcStartIp6 = "::",
    ///         SrcSubnet = "0.0.0.0 0.0.0.0",
    ///         SrcSubnet6 = "::/0",
    ///     });
    /// 
    ///     var trname = new Fortios.Vpn.Ipsec.Forticlient("trname", new()
    ///     {
    ///         Phase2name = trname3.Name,
    ///         Realm = "1",
    ///         Status = "enable",
    ///         Usergroupname = "Guest-group",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VpnIpsec Forticlient can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:vpn/ipsec/forticlient:Forticlient labelname {{realm}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:vpn/ipsec/forticlient:Forticlient labelname {{realm}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:vpn/ipsec/forticlient:Forticlient")]
    public partial class Forticlient : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Phase 2 tunnel name that you defined in the FortiClient dialup configuration.
        /// </summary>
        [Output("phase2name")]
        public Output<string> Phase2name { get; private set; } = null!;

        /// <summary>
        /// FortiClient realm name.
        /// </summary>
        [Output("realm")]
        public Output<string> Realm { get; private set; } = null!;

        /// <summary>
        /// Enable/disable this FortiClient configuration. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// User group name for FortiClient users.
        /// </summary>
        [Output("usergroupname")]
        public Output<string> Usergroupname { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Forticlient resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Forticlient(string name, ForticlientArgs args, CustomResourceOptions? options = null)
            : base("fortios:vpn/ipsec/forticlient:Forticlient", name, args ?? new ForticlientArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Forticlient(string name, Input<string> id, ForticlientState? state = null, CustomResourceOptions? options = null)
            : base("fortios:vpn/ipsec/forticlient:Forticlient", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Forticlient resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Forticlient Get(string name, Input<string> id, ForticlientState? state = null, CustomResourceOptions? options = null)
        {
            return new Forticlient(name, id, state, options);
        }
    }

    public sealed class ForticlientArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Phase 2 tunnel name that you defined in the FortiClient dialup configuration.
        /// </summary>
        [Input("phase2name", required: true)]
        public Input<string> Phase2name { get; set; } = null!;

        /// <summary>
        /// FortiClient realm name.
        /// </summary>
        [Input("realm")]
        public Input<string>? Realm { get; set; }

        /// <summary>
        /// Enable/disable this FortiClient configuration. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// User group name for FortiClient users.
        /// </summary>
        [Input("usergroupname", required: true)]
        public Input<string> Usergroupname { get; set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public ForticlientArgs()
        {
        }
        public static new ForticlientArgs Empty => new ForticlientArgs();
    }

    public sealed class ForticlientState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Phase 2 tunnel name that you defined in the FortiClient dialup configuration.
        /// </summary>
        [Input("phase2name")]
        public Input<string>? Phase2name { get; set; }

        /// <summary>
        /// FortiClient realm name.
        /// </summary>
        [Input("realm")]
        public Input<string>? Realm { get; set; }

        /// <summary>
        /// Enable/disable this FortiClient configuration. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// User group name for FortiClient users.
        /// </summary>
        [Input("usergroupname")]
        public Input<string>? Usergroupname { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public ForticlientState()
        {
        }
        public static new ForticlientState Empty => new ForticlientState();
    }
}
