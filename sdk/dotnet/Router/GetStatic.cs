// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Router
{
    public static class GetStatic
    {
        /// <summary>
        /// Use this data source to get information on an fortios router static
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fortios = Pulumi.Fortios;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sample1 = Fortios.Router.GetStatic.Invoke(new()
        ///     {
        ///         SeqNum = 1,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["output1"] = sample1,
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetStaticResult> InvokeAsync(GetStaticArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStaticResult>("fortios:router/getStatic:getStatic", args ?? new GetStaticArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information on an fortios router static
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fortios = Pulumi.Fortios;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sample1 = Fortios.Router.GetStatic.Invoke(new()
        ///     {
        ///         SeqNum = 1,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["output1"] = sample1,
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetStaticResult> Invoke(GetStaticInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStaticResult>("fortios:router/getStatic:getStatic", args ?? new GetStaticInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStaticArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the seq_num of the desired router static.
        /// </summary>
        [Input("seqNum", required: true)]
        public int SeqNum { get; set; }

        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public string? Vdomparam { get; set; }

        public GetStaticArgs()
        {
        }
        public static new GetStaticArgs Empty => new GetStaticArgs();
    }

    public sealed class GetStaticInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the seq_num of the desired router static.
        /// </summary>
        [Input("seqNum", required: true)]
        public Input<int> SeqNum { get; set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public GetStaticInvokeArgs()
        {
        }
        public static new GetStaticInvokeArgs Empty => new GetStaticInvokeArgs();
    }


    [OutputType]
    public sealed class GetStaticResult
    {
        /// <summary>
        /// Enable/disable Bidirectional Forwarding Detection (BFD).
        /// </summary>
        public readonly string Bfd;
        /// <summary>
        /// Enable/disable black hole.
        /// </summary>
        public readonly string Blackhole;
        /// <summary>
        /// Optional comments.
        /// </summary>
        public readonly string Comment;
        /// <summary>
        /// Gateway out interface or tunnel.
        /// </summary>
        public readonly string Device;
        /// <summary>
        /// Administrative distance (1 - 255).
        /// </summary>
        public readonly int Distance;
        /// <summary>
        /// Destination IP and mask for this route.
        /// </summary>
        public readonly string Dst;
        /// <summary>
        /// Name of firewall address or address group.
        /// </summary>
        public readonly string Dstaddr;
        /// <summary>
        /// Enable use of dynamic gateway retrieved from a DHCP or PPP server.
        /// </summary>
        public readonly string DynamicGateway;
        /// <summary>
        /// Gateway IP for this route.
        /// </summary>
        public readonly string Gateway;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Application ID in the Internet service database.
        /// </summary>
        public readonly int InternetService;
        /// <summary>
        /// Application name in the Internet service custom database.
        /// </summary>
        public readonly string InternetServiceCustom;
        /// <summary>
        /// Enable/disable withdrawing this route when link monitor or health check is down.
        /// </summary>
        public readonly string LinkMonitorExempt;
        /// <summary>
        /// Preferred source IP for this route.
        /// </summary>
        public readonly string PreferredSource;
        /// <summary>
        /// Administrative priority (0 - 4294967295).
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// Enable/disable egress through SD-WAN.
        /// </summary>
        public readonly string Sdwan;
        /// <summary>
        /// Choose SD-WAN Zone. The structure of `sdwan_zone` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStaticSdwanZoneResult> SdwanZones;
        /// <summary>
        /// Sequence number.
        /// </summary>
        public readonly int SeqNum;
        /// <summary>
        /// Source prefix for this route.
        /// </summary>
        public readonly string Src;
        /// <summary>
        /// Enable/disable this static route.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Route tag.
        /// </summary>
        public readonly int Tag;
        public readonly string? Vdomparam;
        /// <summary>
        /// Enable/disable egress through the virtual-wan-link.
        /// </summary>
        public readonly string VirtualWanLink;
        /// <summary>
        /// Virtual Routing Forwarding ID.
        /// </summary>
        public readonly int Vrf;
        /// <summary>
        /// Administrative weight (0 - 255).
        /// </summary>
        public readonly int Weight;

        [OutputConstructor]
        private GetStaticResult(
            string bfd,

            string blackhole,

            string comment,

            string device,

            int distance,

            string dst,

            string dstaddr,

            string dynamicGateway,

            string gateway,

            string id,

            int internetService,

            string internetServiceCustom,

            string linkMonitorExempt,

            string preferredSource,

            int priority,

            string sdwan,

            ImmutableArray<Outputs.GetStaticSdwanZoneResult> sdwanZones,

            int seqNum,

            string src,

            string status,

            int tag,

            string? vdomparam,

            string virtualWanLink,

            int vrf,

            int weight)
        {
            Bfd = bfd;
            Blackhole = blackhole;
            Comment = comment;
            Device = device;
            Distance = distance;
            Dst = dst;
            Dstaddr = dstaddr;
            DynamicGateway = dynamicGateway;
            Gateway = gateway;
            Id = id;
            InternetService = internetService;
            InternetServiceCustom = internetServiceCustom;
            LinkMonitorExempt = linkMonitorExempt;
            PreferredSource = preferredSource;
            Priority = priority;
            Sdwan = sdwan;
            SdwanZones = sdwanZones;
            SeqNum = seqNum;
            Src = src;
            Status = status;
            Tag = tag;
            Vdomparam = vdomparam;
            VirtualWanLink = virtualWanLink;
            Vrf = vrf;
            Weight = weight;
        }
    }
}
