// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Router
{
    /// <summary>
    /// Configure RIP.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.Router.Rip("trname", new()
    ///     {
    ///         DefaultInformationOriginate = "disable",
    ///         DefaultMetric = 1,
    ///         GarbageTimer = 120,
    ///         MaxOutMetric = 0,
    ///         RecvBufferSize = 655360,
    ///         Redistributes = new[]
    ///         {
    ///             new Fortios.Router.Inputs.RipRedistributeArgs
    ///             {
    ///                 Metric = 10,
    ///                 Name = "connected",
    ///                 Status = "disable",
    ///             },
    ///             new Fortios.Router.Inputs.RipRedistributeArgs
    ///             {
    ///                 Metric = 10,
    ///                 Name = "static",
    ///                 Status = "disable",
    ///             },
    ///             new Fortios.Router.Inputs.RipRedistributeArgs
    ///             {
    ///                 Metric = 10,
    ///                 Name = "ospf",
    ///                 Status = "disable",
    ///             },
    ///             new Fortios.Router.Inputs.RipRedistributeArgs
    ///             {
    ///                 Metric = 10,
    ///                 Name = "bgp",
    ///                 Status = "disable",
    ///             },
    ///             new Fortios.Router.Inputs.RipRedistributeArgs
    ///             {
    ///                 Metric = 10,
    ///                 Name = "isis",
    ///                 Status = "disable",
    ///             },
    ///         },
    ///         TimeoutTimer = 180,
    ///         UpdateTimer = 30,
    ///         Version = "2",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Router Rip can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:router/rip:Rip labelname RouterRip
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:router/rip:Rip labelname RouterRip
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:router/rip:Rip")]
    public partial class Rip : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable/disable generation of default route. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("defaultInformationOriginate")]
        public Output<string> DefaultInformationOriginate { get; private set; } = null!;

        /// <summary>
        /// Default metric.
        /// </summary>
        [Output("defaultMetric")]
        public Output<int> DefaultMetric { get; private set; } = null!;

        /// <summary>
        /// distance The structure of `distance` block is documented below.
        /// </summary>
        [Output("distances")]
        public Output<ImmutableArray<Outputs.RipDistance>> Distances { get; private set; } = null!;

        /// <summary>
        /// Distribute list. The structure of `distribute_list` block is documented below.
        /// </summary>
        [Output("distributeLists")]
        public Output<ImmutableArray<Outputs.RipDistributeList>> DistributeLists { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Garbage timer in seconds.
        /// </summary>
        [Output("garbageTimer")]
        public Output<int> GarbageTimer { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// RIP interface configuration. The structure of `interface` block is documented below.
        /// </summary>
        [Output("interfaces")]
        public Output<ImmutableArray<Outputs.RipInterface>> Interfaces { get; private set; } = null!;

        /// <summary>
        /// Maximum metric allowed to output(0 means 'not set').
        /// </summary>
        [Output("maxOutMetric")]
        public Output<int> MaxOutMetric { get; private set; } = null!;

        /// <summary>
        /// neighbor The structure of `neighbor` block is documented below.
        /// </summary>
        [Output("neighbors")]
        public Output<ImmutableArray<Outputs.RipNeighbor>> Neighbors { get; private set; } = null!;

        /// <summary>
        /// network The structure of `network` block is documented below.
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<Outputs.RipNetwork>> Networks { get; private set; } = null!;

        /// <summary>
        /// Offset list. The structure of `offset_list` block is documented below.
        /// </summary>
        [Output("offsetLists")]
        public Output<ImmutableArray<Outputs.RipOffsetList>> OffsetLists { get; private set; } = null!;

        /// <summary>
        /// Passive interface configuration. The structure of `passive_interface` block is documented below.
        /// </summary>
        [Output("passiveInterfaces")]
        public Output<ImmutableArray<Outputs.RipPassiveInterface>> PassiveInterfaces { get; private set; } = null!;

        /// <summary>
        /// Receiving buffer size.
        /// </summary>
        [Output("recvBufferSize")]
        public Output<int> RecvBufferSize { get; private set; } = null!;

        /// <summary>
        /// Redistribute configuration. The structure of `redistribute` block is documented below.
        /// </summary>
        [Output("redistributes")]
        public Output<ImmutableArray<Outputs.RipRedistribute>> Redistributes { get; private set; } = null!;

        /// <summary>
        /// Timeout timer in seconds.
        /// </summary>
        [Output("timeoutTimer")]
        public Output<int> TimeoutTimer { get; private set; } = null!;

        /// <summary>
        /// Update timer in seconds.
        /// </summary>
        [Output("updateTimer")]
        public Output<int> UpdateTimer { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// RIP version. Valid values: `1`, `2`.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Rip resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Rip(string name, RipArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:router/rip:Rip", name, args ?? new RipArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Rip(string name, Input<string> id, RipState? state = null, CustomResourceOptions? options = null)
            : base("fortios:router/rip:Rip", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Rip resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Rip Get(string name, Input<string> id, RipState? state = null, CustomResourceOptions? options = null)
        {
            return new Rip(name, id, state, options);
        }
    }

    public sealed class RipArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable generation of default route. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("defaultInformationOriginate")]
        public Input<string>? DefaultInformationOriginate { get; set; }

        /// <summary>
        /// Default metric.
        /// </summary>
        [Input("defaultMetric")]
        public Input<int>? DefaultMetric { get; set; }

        [Input("distances")]
        private InputList<Inputs.RipDistanceArgs>? _distances;

        /// <summary>
        /// distance The structure of `distance` block is documented below.
        /// </summary>
        public InputList<Inputs.RipDistanceArgs> Distances
        {
            get => _distances ?? (_distances = new InputList<Inputs.RipDistanceArgs>());
            set => _distances = value;
        }

        [Input("distributeLists")]
        private InputList<Inputs.RipDistributeListArgs>? _distributeLists;

        /// <summary>
        /// Distribute list. The structure of `distribute_list` block is documented below.
        /// </summary>
        public InputList<Inputs.RipDistributeListArgs> DistributeLists
        {
            get => _distributeLists ?? (_distributeLists = new InputList<Inputs.RipDistributeListArgs>());
            set => _distributeLists = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Garbage timer in seconds.
        /// </summary>
        [Input("garbageTimer")]
        public Input<int>? GarbageTimer { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        [Input("interfaces")]
        private InputList<Inputs.RipInterfaceArgs>? _interfaces;

        /// <summary>
        /// RIP interface configuration. The structure of `interface` block is documented below.
        /// </summary>
        public InputList<Inputs.RipInterfaceArgs> Interfaces
        {
            get => _interfaces ?? (_interfaces = new InputList<Inputs.RipInterfaceArgs>());
            set => _interfaces = value;
        }

        /// <summary>
        /// Maximum metric allowed to output(0 means 'not set').
        /// </summary>
        [Input("maxOutMetric")]
        public Input<int>? MaxOutMetric { get; set; }

        [Input("neighbors")]
        private InputList<Inputs.RipNeighborArgs>? _neighbors;

        /// <summary>
        /// neighbor The structure of `neighbor` block is documented below.
        /// </summary>
        public InputList<Inputs.RipNeighborArgs> Neighbors
        {
            get => _neighbors ?? (_neighbors = new InputList<Inputs.RipNeighborArgs>());
            set => _neighbors = value;
        }

        [Input("networks")]
        private InputList<Inputs.RipNetworkArgs>? _networks;

        /// <summary>
        /// network The structure of `network` block is documented below.
        /// </summary>
        public InputList<Inputs.RipNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.RipNetworkArgs>());
            set => _networks = value;
        }

        [Input("offsetLists")]
        private InputList<Inputs.RipOffsetListArgs>? _offsetLists;

        /// <summary>
        /// Offset list. The structure of `offset_list` block is documented below.
        /// </summary>
        public InputList<Inputs.RipOffsetListArgs> OffsetLists
        {
            get => _offsetLists ?? (_offsetLists = new InputList<Inputs.RipOffsetListArgs>());
            set => _offsetLists = value;
        }

        [Input("passiveInterfaces")]
        private InputList<Inputs.RipPassiveInterfaceArgs>? _passiveInterfaces;

        /// <summary>
        /// Passive interface configuration. The structure of `passive_interface` block is documented below.
        /// </summary>
        public InputList<Inputs.RipPassiveInterfaceArgs> PassiveInterfaces
        {
            get => _passiveInterfaces ?? (_passiveInterfaces = new InputList<Inputs.RipPassiveInterfaceArgs>());
            set => _passiveInterfaces = value;
        }

        /// <summary>
        /// Receiving buffer size.
        /// </summary>
        [Input("recvBufferSize")]
        public Input<int>? RecvBufferSize { get; set; }

        [Input("redistributes")]
        private InputList<Inputs.RipRedistributeArgs>? _redistributes;

        /// <summary>
        /// Redistribute configuration. The structure of `redistribute` block is documented below.
        /// </summary>
        public InputList<Inputs.RipRedistributeArgs> Redistributes
        {
            get => _redistributes ?? (_redistributes = new InputList<Inputs.RipRedistributeArgs>());
            set => _redistributes = value;
        }

        /// <summary>
        /// Timeout timer in seconds.
        /// </summary>
        [Input("timeoutTimer")]
        public Input<int>? TimeoutTimer { get; set; }

        /// <summary>
        /// Update timer in seconds.
        /// </summary>
        [Input("updateTimer")]
        public Input<int>? UpdateTimer { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// RIP version. Valid values: `1`, `2`.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public RipArgs()
        {
        }
        public static new RipArgs Empty => new RipArgs();
    }

    public sealed class RipState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable generation of default route. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("defaultInformationOriginate")]
        public Input<string>? DefaultInformationOriginate { get; set; }

        /// <summary>
        /// Default metric.
        /// </summary>
        [Input("defaultMetric")]
        public Input<int>? DefaultMetric { get; set; }

        [Input("distances")]
        private InputList<Inputs.RipDistanceGetArgs>? _distances;

        /// <summary>
        /// distance The structure of `distance` block is documented below.
        /// </summary>
        public InputList<Inputs.RipDistanceGetArgs> Distances
        {
            get => _distances ?? (_distances = new InputList<Inputs.RipDistanceGetArgs>());
            set => _distances = value;
        }

        [Input("distributeLists")]
        private InputList<Inputs.RipDistributeListGetArgs>? _distributeLists;

        /// <summary>
        /// Distribute list. The structure of `distribute_list` block is documented below.
        /// </summary>
        public InputList<Inputs.RipDistributeListGetArgs> DistributeLists
        {
            get => _distributeLists ?? (_distributeLists = new InputList<Inputs.RipDistributeListGetArgs>());
            set => _distributeLists = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Garbage timer in seconds.
        /// </summary>
        [Input("garbageTimer")]
        public Input<int>? GarbageTimer { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        [Input("interfaces")]
        private InputList<Inputs.RipInterfaceGetArgs>? _interfaces;

        /// <summary>
        /// RIP interface configuration. The structure of `interface` block is documented below.
        /// </summary>
        public InputList<Inputs.RipInterfaceGetArgs> Interfaces
        {
            get => _interfaces ?? (_interfaces = new InputList<Inputs.RipInterfaceGetArgs>());
            set => _interfaces = value;
        }

        /// <summary>
        /// Maximum metric allowed to output(0 means 'not set').
        /// </summary>
        [Input("maxOutMetric")]
        public Input<int>? MaxOutMetric { get; set; }

        [Input("neighbors")]
        private InputList<Inputs.RipNeighborGetArgs>? _neighbors;

        /// <summary>
        /// neighbor The structure of `neighbor` block is documented below.
        /// </summary>
        public InputList<Inputs.RipNeighborGetArgs> Neighbors
        {
            get => _neighbors ?? (_neighbors = new InputList<Inputs.RipNeighborGetArgs>());
            set => _neighbors = value;
        }

        [Input("networks")]
        private InputList<Inputs.RipNetworkGetArgs>? _networks;

        /// <summary>
        /// network The structure of `network` block is documented below.
        /// </summary>
        public InputList<Inputs.RipNetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.RipNetworkGetArgs>());
            set => _networks = value;
        }

        [Input("offsetLists")]
        private InputList<Inputs.RipOffsetListGetArgs>? _offsetLists;

        /// <summary>
        /// Offset list. The structure of `offset_list` block is documented below.
        /// </summary>
        public InputList<Inputs.RipOffsetListGetArgs> OffsetLists
        {
            get => _offsetLists ?? (_offsetLists = new InputList<Inputs.RipOffsetListGetArgs>());
            set => _offsetLists = value;
        }

        [Input("passiveInterfaces")]
        private InputList<Inputs.RipPassiveInterfaceGetArgs>? _passiveInterfaces;

        /// <summary>
        /// Passive interface configuration. The structure of `passive_interface` block is documented below.
        /// </summary>
        public InputList<Inputs.RipPassiveInterfaceGetArgs> PassiveInterfaces
        {
            get => _passiveInterfaces ?? (_passiveInterfaces = new InputList<Inputs.RipPassiveInterfaceGetArgs>());
            set => _passiveInterfaces = value;
        }

        /// <summary>
        /// Receiving buffer size.
        /// </summary>
        [Input("recvBufferSize")]
        public Input<int>? RecvBufferSize { get; set; }

        [Input("redistributes")]
        private InputList<Inputs.RipRedistributeGetArgs>? _redistributes;

        /// <summary>
        /// Redistribute configuration. The structure of `redistribute` block is documented below.
        /// </summary>
        public InputList<Inputs.RipRedistributeGetArgs> Redistributes
        {
            get => _redistributes ?? (_redistributes = new InputList<Inputs.RipRedistributeGetArgs>());
            set => _redistributes = value;
        }

        /// <summary>
        /// Timeout timer in seconds.
        /// </summary>
        [Input("timeoutTimer")]
        public Input<int>? TimeoutTimer { get; set; }

        /// <summary>
        /// Update timer in seconds.
        /// </summary>
        [Input("updateTimer")]
        public Input<int>? UpdateTimer { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// RIP version. Valid values: `1`, `2`.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public RipState()
        {
        }
        public static new RipState Empty => new RipState();
    }
}
