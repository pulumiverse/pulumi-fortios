// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Authentication
{
    /// <summary>
    /// Configure Authentication Rules.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.Authentication.Rule("trname", new()
    ///     {
    ///         IpBased = "enable",
    ///         Protocol = "ftp",
    ///         Status = "enable",
    ///         TransactionBased = "disable",
    ///         WebAuthCookie = "disable",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Authentication Rule can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:authentication/rule:Rule labelname {{name}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:authentication/rule:Rule labelname {{name}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:authentication/rule:Rule")]
    public partial class Rule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Select an active authentication method.
        /// </summary>
        [Output("activeAuthMethod")]
        public Output<string> ActiveAuthMethod { get; private set; } = null!;

        /// <summary>
        /// Comment.
        /// </summary>
        [Output("comments")]
        public Output<string?> Comments { get; private set; } = null!;

        /// <summary>
        /// Depth to allow CORS access (default = 3).
        /// </summary>
        [Output("corsDepth")]
        public Output<int> CorsDepth { get; private set; } = null!;

        /// <summary>
        /// Enable/disable allowance of CORS access (default = disable). Valid values: `enable`, `disable`.
        /// </summary>
        [Output("corsStateful")]
        public Output<string> CorsStateful { get; private set; } = null!;

        /// <summary>
        /// Select an IPv6 destination address from available options. Required for web proxy authentication. The structure of `dstaddr6` block is documented below.
        /// </summary>
        [Output("dstaddr6s")]
        public Output<ImmutableArray<Outputs.RuleDstaddr6>> Dstaddr6s { get; private set; } = null!;

        /// <summary>
        /// Select an IPv4 destination address from available options. Required for web proxy authentication. The structure of `dstaddr` block is documented below.
        /// </summary>
        [Output("dstaddrs")]
        public Output<ImmutableArray<Outputs.RuleDstaddr>> Dstaddrs { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// Enable/disable IP-based authentication. Once a user authenticates all traffic from the IP address the user authenticated from is allowed. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("ipBased")]
        public Output<string> IpBased { get; private set; } = null!;

        /// <summary>
        /// Authentication rule name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Authentication is required for the selected protocol (default = http). Valid values: `http`, `ftp`, `socks`, `ssh`.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// Select an IPv6 source address. Required for web proxy authentication. The structure of `srcaddr6` block is documented below.
        /// </summary>
        [Output("srcaddr6s")]
        public Output<ImmutableArray<Outputs.RuleSrcaddr6>> Srcaddr6s { get; private set; } = null!;

        /// <summary>
        /// Select an IPv4 source address from available options. Required for web proxy authentication. The structure of `srcaddr` block is documented below.
        /// </summary>
        [Output("srcaddrs")]
        public Output<ImmutableArray<Outputs.RuleSrcaddr>> Srcaddrs { get; private set; } = null!;

        /// <summary>
        /// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        /// </summary>
        [Output("srcintfs")]
        public Output<ImmutableArray<Outputs.RuleSrcintf>> Srcintfs { get; private set; } = null!;

        /// <summary>
        /// Select a single-sign on (SSO) authentication method.
        /// </summary>
        [Output("ssoAuthMethod")]
        public Output<string> SsoAuthMethod { get; private set; } = null!;

        /// <summary>
        /// Enable/disable this authentication rule. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Enable/disable transaction based authentication (default = disable). Valid values: `enable`, `disable`.
        /// </summary>
        [Output("transactionBased")]
        public Output<string> TransactionBased { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// Enable/disable Web authentication cookies (default = disable). Valid values: `enable`, `disable`.
        /// </summary>
        [Output("webAuthCookie")]
        public Output<string> WebAuthCookie { get; private set; } = null!;

        /// <summary>
        /// Enable/disable web portal for proxy transparent policy (default = enable). Valid values: `enable`, `disable`.
        /// </summary>
        [Output("webPortal")]
        public Output<string> WebPortal { get; private set; } = null!;


        /// <summary>
        /// Create a Rule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Rule(string name, RuleArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:authentication/rule:Rule", name, args ?? new RuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Rule(string name, Input<string> id, RuleState? state = null, CustomResourceOptions? options = null)
            : base("fortios:authentication/rule:Rule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Rule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Rule Get(string name, Input<string> id, RuleState? state = null, CustomResourceOptions? options = null)
        {
            return new Rule(name, id, state, options);
        }
    }

    public sealed class RuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Select an active authentication method.
        /// </summary>
        [Input("activeAuthMethod")]
        public Input<string>? ActiveAuthMethod { get; set; }

        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// Depth to allow CORS access (default = 3).
        /// </summary>
        [Input("corsDepth")]
        public Input<int>? CorsDepth { get; set; }

        /// <summary>
        /// Enable/disable allowance of CORS access (default = disable). Valid values: `enable`, `disable`.
        /// </summary>
        [Input("corsStateful")]
        public Input<string>? CorsStateful { get; set; }

        [Input("dstaddr6s")]
        private InputList<Inputs.RuleDstaddr6Args>? _dstaddr6s;

        /// <summary>
        /// Select an IPv6 destination address from available options. Required for web proxy authentication. The structure of `dstaddr6` block is documented below.
        /// </summary>
        public InputList<Inputs.RuleDstaddr6Args> Dstaddr6s
        {
            get => _dstaddr6s ?? (_dstaddr6s = new InputList<Inputs.RuleDstaddr6Args>());
            set => _dstaddr6s = value;
        }

        [Input("dstaddrs")]
        private InputList<Inputs.RuleDstaddrArgs>? _dstaddrs;

        /// <summary>
        /// Select an IPv4 destination address from available options. Required for web proxy authentication. The structure of `dstaddr` block is documented below.
        /// </summary>
        public InputList<Inputs.RuleDstaddrArgs> Dstaddrs
        {
            get => _dstaddrs ?? (_dstaddrs = new InputList<Inputs.RuleDstaddrArgs>());
            set => _dstaddrs = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Enable/disable IP-based authentication. Once a user authenticates all traffic from the IP address the user authenticated from is allowed. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("ipBased")]
        public Input<string>? IpBased { get; set; }

        /// <summary>
        /// Authentication rule name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Authentication is required for the selected protocol (default = http). Valid values: `http`, `ftp`, `socks`, `ssh`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("srcaddr6s")]
        private InputList<Inputs.RuleSrcaddr6Args>? _srcaddr6s;

        /// <summary>
        /// Select an IPv6 source address. Required for web proxy authentication. The structure of `srcaddr6` block is documented below.
        /// </summary>
        public InputList<Inputs.RuleSrcaddr6Args> Srcaddr6s
        {
            get => _srcaddr6s ?? (_srcaddr6s = new InputList<Inputs.RuleSrcaddr6Args>());
            set => _srcaddr6s = value;
        }

        [Input("srcaddrs")]
        private InputList<Inputs.RuleSrcaddrArgs>? _srcaddrs;

        /// <summary>
        /// Select an IPv4 source address from available options. Required for web proxy authentication. The structure of `srcaddr` block is documented below.
        /// </summary>
        public InputList<Inputs.RuleSrcaddrArgs> Srcaddrs
        {
            get => _srcaddrs ?? (_srcaddrs = new InputList<Inputs.RuleSrcaddrArgs>());
            set => _srcaddrs = value;
        }

        [Input("srcintfs")]
        private InputList<Inputs.RuleSrcintfArgs>? _srcintfs;

        /// <summary>
        /// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        /// </summary>
        public InputList<Inputs.RuleSrcintfArgs> Srcintfs
        {
            get => _srcintfs ?? (_srcintfs = new InputList<Inputs.RuleSrcintfArgs>());
            set => _srcintfs = value;
        }

        /// <summary>
        /// Select a single-sign on (SSO) authentication method.
        /// </summary>
        [Input("ssoAuthMethod")]
        public Input<string>? SsoAuthMethod { get; set; }

        /// <summary>
        /// Enable/disable this authentication rule. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Enable/disable transaction based authentication (default = disable). Valid values: `enable`, `disable`.
        /// </summary>
        [Input("transactionBased")]
        public Input<string>? TransactionBased { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// Enable/disable Web authentication cookies (default = disable). Valid values: `enable`, `disable`.
        /// </summary>
        [Input("webAuthCookie")]
        public Input<string>? WebAuthCookie { get; set; }

        /// <summary>
        /// Enable/disable web portal for proxy transparent policy (default = enable). Valid values: `enable`, `disable`.
        /// </summary>
        [Input("webPortal")]
        public Input<string>? WebPortal { get; set; }

        public RuleArgs()
        {
        }
        public static new RuleArgs Empty => new RuleArgs();
    }

    public sealed class RuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Select an active authentication method.
        /// </summary>
        [Input("activeAuthMethod")]
        public Input<string>? ActiveAuthMethod { get; set; }

        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// Depth to allow CORS access (default = 3).
        /// </summary>
        [Input("corsDepth")]
        public Input<int>? CorsDepth { get; set; }

        /// <summary>
        /// Enable/disable allowance of CORS access (default = disable). Valid values: `enable`, `disable`.
        /// </summary>
        [Input("corsStateful")]
        public Input<string>? CorsStateful { get; set; }

        [Input("dstaddr6s")]
        private InputList<Inputs.RuleDstaddr6GetArgs>? _dstaddr6s;

        /// <summary>
        /// Select an IPv6 destination address from available options. Required for web proxy authentication. The structure of `dstaddr6` block is documented below.
        /// </summary>
        public InputList<Inputs.RuleDstaddr6GetArgs> Dstaddr6s
        {
            get => _dstaddr6s ?? (_dstaddr6s = new InputList<Inputs.RuleDstaddr6GetArgs>());
            set => _dstaddr6s = value;
        }

        [Input("dstaddrs")]
        private InputList<Inputs.RuleDstaddrGetArgs>? _dstaddrs;

        /// <summary>
        /// Select an IPv4 destination address from available options. Required for web proxy authentication. The structure of `dstaddr` block is documented below.
        /// </summary>
        public InputList<Inputs.RuleDstaddrGetArgs> Dstaddrs
        {
            get => _dstaddrs ?? (_dstaddrs = new InputList<Inputs.RuleDstaddrGetArgs>());
            set => _dstaddrs = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Enable/disable IP-based authentication. Once a user authenticates all traffic from the IP address the user authenticated from is allowed. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("ipBased")]
        public Input<string>? IpBased { get; set; }

        /// <summary>
        /// Authentication rule name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Authentication is required for the selected protocol (default = http). Valid values: `http`, `ftp`, `socks`, `ssh`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("srcaddr6s")]
        private InputList<Inputs.RuleSrcaddr6GetArgs>? _srcaddr6s;

        /// <summary>
        /// Select an IPv6 source address. Required for web proxy authentication. The structure of `srcaddr6` block is documented below.
        /// </summary>
        public InputList<Inputs.RuleSrcaddr6GetArgs> Srcaddr6s
        {
            get => _srcaddr6s ?? (_srcaddr6s = new InputList<Inputs.RuleSrcaddr6GetArgs>());
            set => _srcaddr6s = value;
        }

        [Input("srcaddrs")]
        private InputList<Inputs.RuleSrcaddrGetArgs>? _srcaddrs;

        /// <summary>
        /// Select an IPv4 source address from available options. Required for web proxy authentication. The structure of `srcaddr` block is documented below.
        /// </summary>
        public InputList<Inputs.RuleSrcaddrGetArgs> Srcaddrs
        {
            get => _srcaddrs ?? (_srcaddrs = new InputList<Inputs.RuleSrcaddrGetArgs>());
            set => _srcaddrs = value;
        }

        [Input("srcintfs")]
        private InputList<Inputs.RuleSrcintfGetArgs>? _srcintfs;

        /// <summary>
        /// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
        /// </summary>
        public InputList<Inputs.RuleSrcintfGetArgs> Srcintfs
        {
            get => _srcintfs ?? (_srcintfs = new InputList<Inputs.RuleSrcintfGetArgs>());
            set => _srcintfs = value;
        }

        /// <summary>
        /// Select a single-sign on (SSO) authentication method.
        /// </summary>
        [Input("ssoAuthMethod")]
        public Input<string>? SsoAuthMethod { get; set; }

        /// <summary>
        /// Enable/disable this authentication rule. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Enable/disable transaction based authentication (default = disable). Valid values: `enable`, `disable`.
        /// </summary>
        [Input("transactionBased")]
        public Input<string>? TransactionBased { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// Enable/disable Web authentication cookies (default = disable). Valid values: `enable`, `disable`.
        /// </summary>
        [Input("webAuthCookie")]
        public Input<string>? WebAuthCookie { get; set; }

        /// <summary>
        /// Enable/disable web portal for proxy transparent policy (default = enable). Valid values: `enable`, `disable`.
        /// </summary>
        [Input("webPortal")]
        public Input<string>? WebPortal { get; set; }

        public RuleState()
        {
        }
        public static new RuleState Empty => new RuleState();
    }
}
