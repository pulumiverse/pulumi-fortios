// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Voip.Outputs
{

    [OutputType]
    public sealed class ProfileSip
    {
        /// <summary>
        /// ACK request rate limit (per second, per policy).
        /// </summary>
        public readonly int? AckRate;
        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        public readonly string? AckRateTrack;
        /// <summary>
        /// Enable/disable block ACK requests. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? BlockAck;
        /// <summary>
        /// Enable/disable block BYE requests. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? BlockBye;
        /// <summary>
        /// Enable/disable block CANCEL requests. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? BlockCancel;
        /// <summary>
        /// Enable/disable block OPTIONS requests, but OPTIONS requests still notify for redundancy. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? BlockGeoRedOptions;
        /// <summary>
        /// Enable/disable block INFO requests. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? BlockInfo;
        /// <summary>
        /// Enable/disable block INVITE requests. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? BlockInvite;
        /// <summary>
        /// Enable/disable block requests with headers exceeding max-line-length. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? BlockLongLines;
        /// <summary>
        /// Enable/disable block MESSAGE requests. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? BlockMessage;
        /// <summary>
        /// Enable/disable block NOTIFY requests. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? BlockNotify;
        /// <summary>
        /// Enable/disable block OPTIONS requests and no OPTIONS as notifying message for redundancy either. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? BlockOptions;
        /// <summary>
        /// Enable/disable block prack requests. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? BlockPrack;
        /// <summary>
        /// Enable/disable block PUBLISH requests. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? BlockPublish;
        /// <summary>
        /// Enable/disable block REFER requests. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? BlockRefer;
        /// <summary>
        /// Enable/disable block REGISTER requests. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? BlockRegister;
        /// <summary>
        /// Enable/disable block SUBSCRIBE requests. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? BlockSubscribe;
        /// <summary>
        /// Block unrecognized SIP requests (enabled by default). Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? BlockUnknown;
        /// <summary>
        /// Enable/disable block UPDATE requests. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? BlockUpdate;
        /// <summary>
        /// BYE request rate limit (per second, per policy).
        /// </summary>
        public readonly int? ByeRate;
        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        public readonly string? ByeRateTrack;
        /// <summary>
        /// Validate PCRE regular expression for Call-Id header value.
        /// </summary>
        public readonly string? CallIdRegex;
        /// <summary>
        /// Continue tracking calls with no RTP for this many minutes.
        /// </summary>
        public readonly int? CallKeepalive;
        /// <summary>
        /// CANCEL request rate limit (per second, per policy).
        /// </summary>
        public readonly int? CancelRate;
        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        public readonly string? CancelRateTrack;
        /// <summary>
        /// Fixup contact anyway even if contact's IP:port doesn't match session's IP:port. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? ContactFixup;
        /// <summary>
        /// Validate PCRE regular expression for Content-Type header value.
        /// </summary>
        public readonly string? ContentTypeRegex;
        /// <summary>
        /// Enable/disable restrict RTP source IP to be the same as SIP source IP when HNT is enabled. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? HntRestrictSourceIp;
        /// <summary>
        /// Hosted NAT Traversal (HNT). Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? HostedNatTraversal;
        /// <summary>
        /// INFO request rate limit (per second, per policy).
        /// </summary>
        public readonly int? InfoRate;
        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        public readonly string? InfoRateTrack;
        /// <summary>
        /// INVITE request rate limit (per second, per policy).
        /// </summary>
        public readonly int? InviteRate;
        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        public readonly string? InviteRateTrack;
        /// <summary>
        /// Enable/disable allow IPS on RTP. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? IpsRtp;
        /// <summary>
        /// Enable/disable logging of SIP call summary. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? LogCallSummary;
        /// <summary>
        /// Enable/disable logging of SIP violations. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? LogViolations;
        /// <summary>
        /// Action for malformed Allow header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderAllow;
        /// <summary>
        /// Action for malformed Call-ID header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderCallId;
        /// <summary>
        /// Action for malformed Contact header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderContact;
        /// <summary>
        /// Action for malformed Content-Length header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderContentLength;
        /// <summary>
        /// Action for malformed Content-Type header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderContentType;
        /// <summary>
        /// Action for malformed CSeq header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderCseq;
        /// <summary>
        /// Action for malformed Expires header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderExpires;
        /// <summary>
        /// Action for malformed From header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderFrom;
        /// <summary>
        /// Action for malformed Max-Forwards header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderMaxForwards;
        /// <summary>
        /// Action for malformed SIP messages without Proxy-Require header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderNoProxyRequire;
        /// <summary>
        /// Action for malformed SIP messages without Require header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderNoRequire;
        /// <summary>
        /// Action for malformed P-Asserted-Identity header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderPAssertedIdentity;
        /// <summary>
        /// Action for malformed RAck header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderRack;
        /// <summary>
        /// Action for malformed Record-Route header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderRecordRoute;
        /// <summary>
        /// Action for malformed Route header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderRoute;
        /// <summary>
        /// Action for malformed RSeq header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderRseq;
        /// <summary>
        /// Action for malformed SDP a line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderSdpA;
        /// <summary>
        /// Action for malformed SDP b line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderSdpB;
        /// <summary>
        /// Action for malformed SDP c line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderSdpC;
        /// <summary>
        /// Action for malformed SDP i line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderSdpI;
        /// <summary>
        /// Action for malformed SDP k line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderSdpK;
        /// <summary>
        /// Action for malformed SDP m line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderSdpM;
        /// <summary>
        /// Action for malformed SDP o line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderSdpO;
        /// <summary>
        /// Action for malformed SDP r line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderSdpR;
        /// <summary>
        /// Action for malformed SDP s line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderSdpS;
        /// <summary>
        /// Action for malformed SDP t line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderSdpT;
        /// <summary>
        /// Action for malformed SDP v line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderSdpV;
        /// <summary>
        /// Action for malformed SDP z line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderSdpZ;
        /// <summary>
        /// Action for malformed To header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderTo;
        /// <summary>
        /// Action for malformed VIA header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedHeaderVia;
        /// <summary>
        /// Action for malformed request line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? MalformedRequestLine;
        /// <summary>
        /// Maximum SIP message body length (0 meaning no limit).
        /// </summary>
        public readonly int? MaxBodyLength;
        /// <summary>
        /// Maximum number of concurrent calls/dialogs (per policy).
        /// </summary>
        public readonly int? MaxDialogs;
        /// <summary>
        /// Maximum number established but idle dialogs to retain (per policy).
        /// </summary>
        public readonly int? MaxIdleDialogs;
        /// <summary>
        /// Maximum SIP header line length (78-4096).
        /// </summary>
        public readonly int? MaxLineLength;
        /// <summary>
        /// MESSAGE request rate limit (per second, per policy).
        /// </summary>
        public readonly int? MessageRate;
        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        public readonly string? MessageRateTrack;
        /// <summary>
        /// RTP NAT port range.
        /// </summary>
        public readonly string? NatPortRange;
        /// <summary>
        /// Enable/disable preservation of original IP in SDP i line. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? NatTrace;
        /// <summary>
        /// Enable/disable no SDP fix-up. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? NoSdpFixup;
        /// <summary>
        /// NOTIFY request rate limit (per second, per policy).
        /// </summary>
        public readonly int? NotifyRate;
        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        public readonly string? NotifyRateTrack;
        /// <summary>
        /// Enable/disable open pinhole for non-REGISTER Contact port. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? OpenContactPinhole;
        /// <summary>
        /// Enable/disable open pinhole for Record-Route port. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? OpenRecordRoutePinhole;
        /// <summary>
        /// Enable/disable open pinhole for REGISTER Contact port. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? OpenRegisterPinhole;
        /// <summary>
        /// Enable/disable open pinhole for Via port. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? OpenViaPinhole;
        /// <summary>
        /// OPTIONS request rate limit (per second, per policy).
        /// </summary>
        public readonly int? OptionsRate;
        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        public readonly string? OptionsRateTrack;
        /// <summary>
        /// PRACK request rate limit (per second, per policy).
        /// </summary>
        public readonly int? PrackRate;
        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        public readonly string? PrackRateTrack;
        /// <summary>
        /// Override i line to preserve original IPS (default: append). Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? PreserveOverride;
        /// <summary>
        /// Expiry time for provisional INVITE (10 - 3600 sec).
        /// </summary>
        public readonly int? ProvisionalInviteExpiryTime;
        /// <summary>
        /// PUBLISH request rate limit (per second, per policy).
        /// </summary>
        public readonly int? PublishRate;
        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        public readonly string? PublishRateTrack;
        /// <summary>
        /// REFER request rate limit (per second, per policy).
        /// </summary>
        public readonly int? ReferRate;
        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        public readonly string? ReferRateTrack;
        /// <summary>
        /// Enable/disable trace original IP/port within the contact header of REGISTER requests. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? RegisterContactTrace;
        /// <summary>
        /// REGISTER request rate limit (per second, per policy).
        /// </summary>
        public readonly int? RegisterRate;
        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        public readonly string? RegisterRateTrack;
        /// <summary>
        /// Enable/disable support via branch compliant with RFC 2543. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? Rfc2543Branch;
        /// <summary>
        /// Enable/disable create pinholes for RTP traffic to traverse firewall. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? Rtp;
        /// <summary>
        /// Relative strength of encryption algorithms accepted in negotiation. Valid values: `high`, `medium`, `low`.
        /// </summary>
        public readonly string? SslAlgorithm;
        /// <summary>
        /// Require a client certificate and authenticate it with the peer/peergrp.
        /// </summary>
        public readonly string? SslAuthClient;
        /// <summary>
        /// Authenticate the server's certificate with the peer/peergrp.
        /// </summary>
        public readonly string? SslAuthServer;
        /// <summary>
        /// Name of Certificate to offer to server if requested.
        /// </summary>
        public readonly string? SslClientCertificate;
        /// <summary>
        /// Allow/block client renegotiation by server. Valid values: `allow`, `deny`, `secure`.
        /// </summary>
        public readonly string? SslClientRenegotiation;
        /// <summary>
        /// Highest SSL/TLS version to negotiate.
        /// </summary>
        public readonly string? SslMaxVersion;
        /// <summary>
        /// Lowest SSL/TLS version to negotiate.
        /// </summary>
        public readonly string? SslMinVersion;
        /// <summary>
        /// SSL/TLS mode for encryption &amp; decryption of traffic. Valid values: `off`, `full`.
        /// </summary>
        public readonly string? SslMode;
        /// <summary>
        /// SSL Perfect Forward Secrecy. Valid values: `require`, `deny`, `allow`.
        /// </summary>
        public readonly string? SslPfs;
        /// <summary>
        /// Send empty fragments to avoid attack on CBC IV (SSL 3.0 &amp; TLS 1.0 only). Valid values: `enable`, `disable`.
        /// </summary>
        public readonly string? SslSendEmptyFrags;
        /// <summary>
        /// Name of Certificate return to the client in every SSL connection.
        /// </summary>
        public readonly string? SslServerCertificate;
        /// <summary>
        /// Enable/disable SIP. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Enable/disable only allow the registrar to connect. Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? StrictRegister;
        /// <summary>
        /// SUBSCRIBE request rate limit (per second, per policy).
        /// </summary>
        public readonly int? SubscribeRate;
        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        public readonly string? SubscribeRateTrack;
        /// <summary>
        /// Action for unknown SIP header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        public readonly string? UnknownHeader;
        /// <summary>
        /// UPDATE request rate limit (per second, per policy).
        /// </summary>
        public readonly int? UpdateRate;
        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        public readonly string? UpdateRateTrack;

        [OutputConstructor]
        private ProfileSip(
            int? ackRate,

            string? ackRateTrack,

            string? blockAck,

            string? blockBye,

            string? blockCancel,

            string? blockGeoRedOptions,

            string? blockInfo,

            string? blockInvite,

            string? blockLongLines,

            string? blockMessage,

            string? blockNotify,

            string? blockOptions,

            string? blockPrack,

            string? blockPublish,

            string? blockRefer,

            string? blockRegister,

            string? blockSubscribe,

            string? blockUnknown,

            string? blockUpdate,

            int? byeRate,

            string? byeRateTrack,

            string? callIdRegex,

            int? callKeepalive,

            int? cancelRate,

            string? cancelRateTrack,

            string? contactFixup,

            string? contentTypeRegex,

            string? hntRestrictSourceIp,

            string? hostedNatTraversal,

            int? infoRate,

            string? infoRateTrack,

            int? inviteRate,

            string? inviteRateTrack,

            string? ipsRtp,

            string? logCallSummary,

            string? logViolations,

            string? malformedHeaderAllow,

            string? malformedHeaderCallId,

            string? malformedHeaderContact,

            string? malformedHeaderContentLength,

            string? malformedHeaderContentType,

            string? malformedHeaderCseq,

            string? malformedHeaderExpires,

            string? malformedHeaderFrom,

            string? malformedHeaderMaxForwards,

            string? malformedHeaderNoProxyRequire,

            string? malformedHeaderNoRequire,

            string? malformedHeaderPAssertedIdentity,

            string? malformedHeaderRack,

            string? malformedHeaderRecordRoute,

            string? malformedHeaderRoute,

            string? malformedHeaderRseq,

            string? malformedHeaderSdpA,

            string? malformedHeaderSdpB,

            string? malformedHeaderSdpC,

            string? malformedHeaderSdpI,

            string? malformedHeaderSdpK,

            string? malformedHeaderSdpM,

            string? malformedHeaderSdpO,

            string? malformedHeaderSdpR,

            string? malformedHeaderSdpS,

            string? malformedHeaderSdpT,

            string? malformedHeaderSdpV,

            string? malformedHeaderSdpZ,

            string? malformedHeaderTo,

            string? malformedHeaderVia,

            string? malformedRequestLine,

            int? maxBodyLength,

            int? maxDialogs,

            int? maxIdleDialogs,

            int? maxLineLength,

            int? messageRate,

            string? messageRateTrack,

            string? natPortRange,

            string? natTrace,

            string? noSdpFixup,

            int? notifyRate,

            string? notifyRateTrack,

            string? openContactPinhole,

            string? openRecordRoutePinhole,

            string? openRegisterPinhole,

            string? openViaPinhole,

            int? optionsRate,

            string? optionsRateTrack,

            int? prackRate,

            string? prackRateTrack,

            string? preserveOverride,

            int? provisionalInviteExpiryTime,

            int? publishRate,

            string? publishRateTrack,

            int? referRate,

            string? referRateTrack,

            string? registerContactTrace,

            int? registerRate,

            string? registerRateTrack,

            string? rfc2543Branch,

            string? rtp,

            string? sslAlgorithm,

            string? sslAuthClient,

            string? sslAuthServer,

            string? sslClientCertificate,

            string? sslClientRenegotiation,

            string? sslMaxVersion,

            string? sslMinVersion,

            string? sslMode,

            string? sslPfs,

            string? sslSendEmptyFrags,

            string? sslServerCertificate,

            string? status,

            string? strictRegister,

            int? subscribeRate,

            string? subscribeRateTrack,

            string? unknownHeader,

            int? updateRate,

            string? updateRateTrack)
        {
            AckRate = ackRate;
            AckRateTrack = ackRateTrack;
            BlockAck = blockAck;
            BlockBye = blockBye;
            BlockCancel = blockCancel;
            BlockGeoRedOptions = blockGeoRedOptions;
            BlockInfo = blockInfo;
            BlockInvite = blockInvite;
            BlockLongLines = blockLongLines;
            BlockMessage = blockMessage;
            BlockNotify = blockNotify;
            BlockOptions = blockOptions;
            BlockPrack = blockPrack;
            BlockPublish = blockPublish;
            BlockRefer = blockRefer;
            BlockRegister = blockRegister;
            BlockSubscribe = blockSubscribe;
            BlockUnknown = blockUnknown;
            BlockUpdate = blockUpdate;
            ByeRate = byeRate;
            ByeRateTrack = byeRateTrack;
            CallIdRegex = callIdRegex;
            CallKeepalive = callKeepalive;
            CancelRate = cancelRate;
            CancelRateTrack = cancelRateTrack;
            ContactFixup = contactFixup;
            ContentTypeRegex = contentTypeRegex;
            HntRestrictSourceIp = hntRestrictSourceIp;
            HostedNatTraversal = hostedNatTraversal;
            InfoRate = infoRate;
            InfoRateTrack = infoRateTrack;
            InviteRate = inviteRate;
            InviteRateTrack = inviteRateTrack;
            IpsRtp = ipsRtp;
            LogCallSummary = logCallSummary;
            LogViolations = logViolations;
            MalformedHeaderAllow = malformedHeaderAllow;
            MalformedHeaderCallId = malformedHeaderCallId;
            MalformedHeaderContact = malformedHeaderContact;
            MalformedHeaderContentLength = malformedHeaderContentLength;
            MalformedHeaderContentType = malformedHeaderContentType;
            MalformedHeaderCseq = malformedHeaderCseq;
            MalformedHeaderExpires = malformedHeaderExpires;
            MalformedHeaderFrom = malformedHeaderFrom;
            MalformedHeaderMaxForwards = malformedHeaderMaxForwards;
            MalformedHeaderNoProxyRequire = malformedHeaderNoProxyRequire;
            MalformedHeaderNoRequire = malformedHeaderNoRequire;
            MalformedHeaderPAssertedIdentity = malformedHeaderPAssertedIdentity;
            MalformedHeaderRack = malformedHeaderRack;
            MalformedHeaderRecordRoute = malformedHeaderRecordRoute;
            MalformedHeaderRoute = malformedHeaderRoute;
            MalformedHeaderRseq = malformedHeaderRseq;
            MalformedHeaderSdpA = malformedHeaderSdpA;
            MalformedHeaderSdpB = malformedHeaderSdpB;
            MalformedHeaderSdpC = malformedHeaderSdpC;
            MalformedHeaderSdpI = malformedHeaderSdpI;
            MalformedHeaderSdpK = malformedHeaderSdpK;
            MalformedHeaderSdpM = malformedHeaderSdpM;
            MalformedHeaderSdpO = malformedHeaderSdpO;
            MalformedHeaderSdpR = malformedHeaderSdpR;
            MalformedHeaderSdpS = malformedHeaderSdpS;
            MalformedHeaderSdpT = malformedHeaderSdpT;
            MalformedHeaderSdpV = malformedHeaderSdpV;
            MalformedHeaderSdpZ = malformedHeaderSdpZ;
            MalformedHeaderTo = malformedHeaderTo;
            MalformedHeaderVia = malformedHeaderVia;
            MalformedRequestLine = malformedRequestLine;
            MaxBodyLength = maxBodyLength;
            MaxDialogs = maxDialogs;
            MaxIdleDialogs = maxIdleDialogs;
            MaxLineLength = maxLineLength;
            MessageRate = messageRate;
            MessageRateTrack = messageRateTrack;
            NatPortRange = natPortRange;
            NatTrace = natTrace;
            NoSdpFixup = noSdpFixup;
            NotifyRate = notifyRate;
            NotifyRateTrack = notifyRateTrack;
            OpenContactPinhole = openContactPinhole;
            OpenRecordRoutePinhole = openRecordRoutePinhole;
            OpenRegisterPinhole = openRegisterPinhole;
            OpenViaPinhole = openViaPinhole;
            OptionsRate = optionsRate;
            OptionsRateTrack = optionsRateTrack;
            PrackRate = prackRate;
            PrackRateTrack = prackRateTrack;
            PreserveOverride = preserveOverride;
            ProvisionalInviteExpiryTime = provisionalInviteExpiryTime;
            PublishRate = publishRate;
            PublishRateTrack = publishRateTrack;
            ReferRate = referRate;
            ReferRateTrack = referRateTrack;
            RegisterContactTrace = registerContactTrace;
            RegisterRate = registerRate;
            RegisterRateTrack = registerRateTrack;
            Rfc2543Branch = rfc2543Branch;
            Rtp = rtp;
            SslAlgorithm = sslAlgorithm;
            SslAuthClient = sslAuthClient;
            SslAuthServer = sslAuthServer;
            SslClientCertificate = sslClientCertificate;
            SslClientRenegotiation = sslClientRenegotiation;
            SslMaxVersion = sslMaxVersion;
            SslMinVersion = sslMinVersion;
            SslMode = sslMode;
            SslPfs = sslPfs;
            SslSendEmptyFrags = sslSendEmptyFrags;
            SslServerCertificate = sslServerCertificate;
            Status = status;
            StrictRegister = strictRegister;
            SubscribeRate = subscribeRate;
            SubscribeRateTrack = subscribeRateTrack;
            UnknownHeader = unknownHeader;
            UpdateRate = updateRate;
            UpdateRateTrack = updateRateTrack;
        }
    }
}
