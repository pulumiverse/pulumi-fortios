// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Voip.Inputs
{

    public sealed class ProfileSipArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ACK request rate limit (per second, per policy).
        /// </summary>
        [Input("ackRate")]
        public Input<int>? AckRate { get; set; }

        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        [Input("ackRateTrack")]
        public Input<string>? AckRateTrack { get; set; }

        /// <summary>
        /// Enable/disable block ACK requests. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("blockAck")]
        public Input<string>? BlockAck { get; set; }

        /// <summary>
        /// Enable/disable block BYE requests. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("blockBye")]
        public Input<string>? BlockBye { get; set; }

        /// <summary>
        /// Enable/disable block CANCEL requests. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("blockCancel")]
        public Input<string>? BlockCancel { get; set; }

        /// <summary>
        /// Enable/disable block OPTIONS requests, but OPTIONS requests still notify for redundancy. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("blockGeoRedOptions")]
        public Input<string>? BlockGeoRedOptions { get; set; }

        /// <summary>
        /// Enable/disable block INFO requests. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("blockInfo")]
        public Input<string>? BlockInfo { get; set; }

        /// <summary>
        /// Enable/disable block INVITE requests. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("blockInvite")]
        public Input<string>? BlockInvite { get; set; }

        /// <summary>
        /// Enable/disable block requests with headers exceeding max-line-length. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("blockLongLines")]
        public Input<string>? BlockLongLines { get; set; }

        /// <summary>
        /// Enable/disable block MESSAGE requests. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("blockMessage")]
        public Input<string>? BlockMessage { get; set; }

        /// <summary>
        /// Enable/disable block NOTIFY requests. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("blockNotify")]
        public Input<string>? BlockNotify { get; set; }

        /// <summary>
        /// Enable/disable block OPTIONS requests and no OPTIONS as notifying message for redundancy either. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("blockOptions")]
        public Input<string>? BlockOptions { get; set; }

        /// <summary>
        /// Enable/disable block prack requests. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("blockPrack")]
        public Input<string>? BlockPrack { get; set; }

        /// <summary>
        /// Enable/disable block PUBLISH requests. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("blockPublish")]
        public Input<string>? BlockPublish { get; set; }

        /// <summary>
        /// Enable/disable block REFER requests. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("blockRefer")]
        public Input<string>? BlockRefer { get; set; }

        /// <summary>
        /// Enable/disable block REGISTER requests. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("blockRegister")]
        public Input<string>? BlockRegister { get; set; }

        /// <summary>
        /// Enable/disable block SUBSCRIBE requests. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("blockSubscribe")]
        public Input<string>? BlockSubscribe { get; set; }

        /// <summary>
        /// Block unrecognized SIP requests (enabled by default). Valid values: `disable`, `enable`.
        /// </summary>
        [Input("blockUnknown")]
        public Input<string>? BlockUnknown { get; set; }

        /// <summary>
        /// Enable/disable block UPDATE requests. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("blockUpdate")]
        public Input<string>? BlockUpdate { get; set; }

        /// <summary>
        /// BYE request rate limit (per second, per policy).
        /// </summary>
        [Input("byeRate")]
        public Input<int>? ByeRate { get; set; }

        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        [Input("byeRateTrack")]
        public Input<string>? ByeRateTrack { get; set; }

        /// <summary>
        /// Validate PCRE regular expression for Call-Id header value.
        /// </summary>
        [Input("callIdRegex")]
        public Input<string>? CallIdRegex { get; set; }

        /// <summary>
        /// Continue tracking calls with no RTP for this many minutes.
        /// </summary>
        [Input("callKeepalive")]
        public Input<int>? CallKeepalive { get; set; }

        /// <summary>
        /// CANCEL request rate limit (per second, per policy).
        /// </summary>
        [Input("cancelRate")]
        public Input<int>? CancelRate { get; set; }

        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        [Input("cancelRateTrack")]
        public Input<string>? CancelRateTrack { get; set; }

        /// <summary>
        /// Fixup contact anyway even if contact's IP:port doesn't match session's IP:port. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("contactFixup")]
        public Input<string>? ContactFixup { get; set; }

        /// <summary>
        /// Validate PCRE regular expression for Content-Type header value.
        /// </summary>
        [Input("contentTypeRegex")]
        public Input<string>? ContentTypeRegex { get; set; }

        /// <summary>
        /// Enable/disable restrict RTP source IP to be the same as SIP source IP when HNT is enabled. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("hntRestrictSourceIp")]
        public Input<string>? HntRestrictSourceIp { get; set; }

        /// <summary>
        /// Hosted NAT Traversal (HNT). Valid values: `disable`, `enable`.
        /// </summary>
        [Input("hostedNatTraversal")]
        public Input<string>? HostedNatTraversal { get; set; }

        /// <summary>
        /// INFO request rate limit (per second, per policy).
        /// </summary>
        [Input("infoRate")]
        public Input<int>? InfoRate { get; set; }

        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        [Input("infoRateTrack")]
        public Input<string>? InfoRateTrack { get; set; }

        /// <summary>
        /// INVITE request rate limit (per second, per policy).
        /// </summary>
        [Input("inviteRate")]
        public Input<int>? InviteRate { get; set; }

        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        [Input("inviteRateTrack")]
        public Input<string>? InviteRateTrack { get; set; }

        /// <summary>
        /// Enable/disable allow IPS on RTP. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("ipsRtp")]
        public Input<string>? IpsRtp { get; set; }

        /// <summary>
        /// Enable/disable logging of SIP call summary. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("logCallSummary")]
        public Input<string>? LogCallSummary { get; set; }

        /// <summary>
        /// Enable/disable logging of SIP violations. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("logViolations")]
        public Input<string>? LogViolations { get; set; }

        /// <summary>
        /// Action for malformed Allow header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderAllow")]
        public Input<string>? MalformedHeaderAllow { get; set; }

        /// <summary>
        /// Action for malformed Call-ID header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderCallId")]
        public Input<string>? MalformedHeaderCallId { get; set; }

        /// <summary>
        /// Action for malformed Contact header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderContact")]
        public Input<string>? MalformedHeaderContact { get; set; }

        /// <summary>
        /// Action for malformed Content-Length header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderContentLength")]
        public Input<string>? MalformedHeaderContentLength { get; set; }

        /// <summary>
        /// Action for malformed Content-Type header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderContentType")]
        public Input<string>? MalformedHeaderContentType { get; set; }

        /// <summary>
        /// Action for malformed CSeq header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderCseq")]
        public Input<string>? MalformedHeaderCseq { get; set; }

        /// <summary>
        /// Action for malformed Expires header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderExpires")]
        public Input<string>? MalformedHeaderExpires { get; set; }

        /// <summary>
        /// Action for malformed From header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderFrom")]
        public Input<string>? MalformedHeaderFrom { get; set; }

        /// <summary>
        /// Action for malformed Max-Forwards header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderMaxForwards")]
        public Input<string>? MalformedHeaderMaxForwards { get; set; }

        /// <summary>
        /// Action for malformed SIP messages without Proxy-Require header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderNoProxyRequire")]
        public Input<string>? MalformedHeaderNoProxyRequire { get; set; }

        /// <summary>
        /// Action for malformed SIP messages without Require header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderNoRequire")]
        public Input<string>? MalformedHeaderNoRequire { get; set; }

        /// <summary>
        /// Action for malformed P-Asserted-Identity header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderPAssertedIdentity")]
        public Input<string>? MalformedHeaderPAssertedIdentity { get; set; }

        /// <summary>
        /// Action for malformed RAck header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderRack")]
        public Input<string>? MalformedHeaderRack { get; set; }

        /// <summary>
        /// Action for malformed Record-Route header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderRecordRoute")]
        public Input<string>? MalformedHeaderRecordRoute { get; set; }

        /// <summary>
        /// Action for malformed Route header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderRoute")]
        public Input<string>? MalformedHeaderRoute { get; set; }

        /// <summary>
        /// Action for malformed RSeq header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderRseq")]
        public Input<string>? MalformedHeaderRseq { get; set; }

        /// <summary>
        /// Action for malformed SDP a line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderSdpA")]
        public Input<string>? MalformedHeaderSdpA { get; set; }

        /// <summary>
        /// Action for malformed SDP b line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderSdpB")]
        public Input<string>? MalformedHeaderSdpB { get; set; }

        /// <summary>
        /// Action for malformed SDP c line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderSdpC")]
        public Input<string>? MalformedHeaderSdpC { get; set; }

        /// <summary>
        /// Action for malformed SDP i line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderSdpI")]
        public Input<string>? MalformedHeaderSdpI { get; set; }

        /// <summary>
        /// Action for malformed SDP k line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderSdpK")]
        public Input<string>? MalformedHeaderSdpK { get; set; }

        /// <summary>
        /// Action for malformed SDP m line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderSdpM")]
        public Input<string>? MalformedHeaderSdpM { get; set; }

        /// <summary>
        /// Action for malformed SDP o line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderSdpO")]
        public Input<string>? MalformedHeaderSdpO { get; set; }

        /// <summary>
        /// Action for malformed SDP r line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderSdpR")]
        public Input<string>? MalformedHeaderSdpR { get; set; }

        /// <summary>
        /// Action for malformed SDP s line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderSdpS")]
        public Input<string>? MalformedHeaderSdpS { get; set; }

        /// <summary>
        /// Action for malformed SDP t line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderSdpT")]
        public Input<string>? MalformedHeaderSdpT { get; set; }

        /// <summary>
        /// Action for malformed SDP v line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderSdpV")]
        public Input<string>? MalformedHeaderSdpV { get; set; }

        /// <summary>
        /// Action for malformed SDP z line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderSdpZ")]
        public Input<string>? MalformedHeaderSdpZ { get; set; }

        /// <summary>
        /// Action for malformed To header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderTo")]
        public Input<string>? MalformedHeaderTo { get; set; }

        /// <summary>
        /// Action for malformed VIA header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedHeaderVia")]
        public Input<string>? MalformedHeaderVia { get; set; }

        /// <summary>
        /// Action for malformed request line. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("malformedRequestLine")]
        public Input<string>? MalformedRequestLine { get; set; }

        /// <summary>
        /// Maximum SIP message body length (0 meaning no limit).
        /// </summary>
        [Input("maxBodyLength")]
        public Input<int>? MaxBodyLength { get; set; }

        /// <summary>
        /// Maximum number of concurrent calls/dialogs (per policy).
        /// </summary>
        [Input("maxDialogs")]
        public Input<int>? MaxDialogs { get; set; }

        /// <summary>
        /// Maximum number established but idle dialogs to retain (per policy).
        /// </summary>
        [Input("maxIdleDialogs")]
        public Input<int>? MaxIdleDialogs { get; set; }

        /// <summary>
        /// Maximum SIP header line length (78-4096).
        /// </summary>
        [Input("maxLineLength")]
        public Input<int>? MaxLineLength { get; set; }

        /// <summary>
        /// MESSAGE request rate limit (per second, per policy).
        /// </summary>
        [Input("messageRate")]
        public Input<int>? MessageRate { get; set; }

        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        [Input("messageRateTrack")]
        public Input<string>? MessageRateTrack { get; set; }

        /// <summary>
        /// RTP NAT port range.
        /// </summary>
        [Input("natPortRange")]
        public Input<string>? NatPortRange { get; set; }

        /// <summary>
        /// Enable/disable preservation of original IP in SDP i line. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("natTrace")]
        public Input<string>? NatTrace { get; set; }

        /// <summary>
        /// Enable/disable no SDP fix-up. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("noSdpFixup")]
        public Input<string>? NoSdpFixup { get; set; }

        /// <summary>
        /// NOTIFY request rate limit (per second, per policy).
        /// </summary>
        [Input("notifyRate")]
        public Input<int>? NotifyRate { get; set; }

        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        [Input("notifyRateTrack")]
        public Input<string>? NotifyRateTrack { get; set; }

        /// <summary>
        /// Enable/disable open pinhole for non-REGISTER Contact port. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("openContactPinhole")]
        public Input<string>? OpenContactPinhole { get; set; }

        /// <summary>
        /// Enable/disable open pinhole for Record-Route port. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("openRecordRoutePinhole")]
        public Input<string>? OpenRecordRoutePinhole { get; set; }

        /// <summary>
        /// Enable/disable open pinhole for REGISTER Contact port. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("openRegisterPinhole")]
        public Input<string>? OpenRegisterPinhole { get; set; }

        /// <summary>
        /// Enable/disable open pinhole for Via port. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("openViaPinhole")]
        public Input<string>? OpenViaPinhole { get; set; }

        /// <summary>
        /// OPTIONS request rate limit (per second, per policy).
        /// </summary>
        [Input("optionsRate")]
        public Input<int>? OptionsRate { get; set; }

        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        [Input("optionsRateTrack")]
        public Input<string>? OptionsRateTrack { get; set; }

        /// <summary>
        /// PRACK request rate limit (per second, per policy).
        /// </summary>
        [Input("prackRate")]
        public Input<int>? PrackRate { get; set; }

        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        [Input("prackRateTrack")]
        public Input<string>? PrackRateTrack { get; set; }

        /// <summary>
        /// Override i line to preserve original IPS (default: append). Valid values: `disable`, `enable`.
        /// </summary>
        [Input("preserveOverride")]
        public Input<string>? PreserveOverride { get; set; }

        /// <summary>
        /// Expiry time for provisional INVITE (10 - 3600 sec).
        /// </summary>
        [Input("provisionalInviteExpiryTime")]
        public Input<int>? ProvisionalInviteExpiryTime { get; set; }

        /// <summary>
        /// PUBLISH request rate limit (per second, per policy).
        /// </summary>
        [Input("publishRate")]
        public Input<int>? PublishRate { get; set; }

        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        [Input("publishRateTrack")]
        public Input<string>? PublishRateTrack { get; set; }

        /// <summary>
        /// REFER request rate limit (per second, per policy).
        /// </summary>
        [Input("referRate")]
        public Input<int>? ReferRate { get; set; }

        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        [Input("referRateTrack")]
        public Input<string>? ReferRateTrack { get; set; }

        /// <summary>
        /// Enable/disable trace original IP/port within the contact header of REGISTER requests. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("registerContactTrace")]
        public Input<string>? RegisterContactTrace { get; set; }

        /// <summary>
        /// REGISTER request rate limit (per second, per policy).
        /// </summary>
        [Input("registerRate")]
        public Input<int>? RegisterRate { get; set; }

        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        [Input("registerRateTrack")]
        public Input<string>? RegisterRateTrack { get; set; }

        /// <summary>
        /// Enable/disable support via branch compliant with RFC 2543. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("rfc2543Branch")]
        public Input<string>? Rfc2543Branch { get; set; }

        /// <summary>
        /// Enable/disable create pinholes for RTP traffic to traverse firewall. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("rtp")]
        public Input<string>? Rtp { get; set; }

        /// <summary>
        /// Relative strength of encryption algorithms accepted in negotiation. Valid values: `high`, `medium`, `low`.
        /// </summary>
        [Input("sslAlgorithm")]
        public Input<string>? SslAlgorithm { get; set; }

        /// <summary>
        /// Require a client certificate and authenticate it with the peer/peergrp.
        /// </summary>
        [Input("sslAuthClient")]
        public Input<string>? SslAuthClient { get; set; }

        /// <summary>
        /// Authenticate the server's certificate with the peer/peergrp.
        /// </summary>
        [Input("sslAuthServer")]
        public Input<string>? SslAuthServer { get; set; }

        /// <summary>
        /// Name of Certificate to offer to server if requested.
        /// </summary>
        [Input("sslClientCertificate")]
        public Input<string>? SslClientCertificate { get; set; }

        /// <summary>
        /// Allow/block client renegotiation by server. Valid values: `allow`, `deny`, `secure`.
        /// </summary>
        [Input("sslClientRenegotiation")]
        public Input<string>? SslClientRenegotiation { get; set; }

        /// <summary>
        /// Highest SSL/TLS version to negotiate.
        /// </summary>
        [Input("sslMaxVersion")]
        public Input<string>? SslMaxVersion { get; set; }

        /// <summary>
        /// Lowest SSL/TLS version to negotiate.
        /// </summary>
        [Input("sslMinVersion")]
        public Input<string>? SslMinVersion { get; set; }

        /// <summary>
        /// SSL/TLS mode for encryption &amp; decryption of traffic. Valid values: `off`, `full`.
        /// </summary>
        [Input("sslMode")]
        public Input<string>? SslMode { get; set; }

        /// <summary>
        /// SSL Perfect Forward Secrecy. Valid values: `require`, `deny`, `allow`.
        /// </summary>
        [Input("sslPfs")]
        public Input<string>? SslPfs { get; set; }

        /// <summary>
        /// Send empty fragments to avoid attack on CBC IV (SSL 3.0 &amp; TLS 1.0 only). Valid values: `enable`, `disable`.
        /// </summary>
        [Input("sslSendEmptyFrags")]
        public Input<string>? SslSendEmptyFrags { get; set; }

        /// <summary>
        /// Name of Certificate return to the client in every SSL connection.
        /// </summary>
        [Input("sslServerCertificate")]
        public Input<string>? SslServerCertificate { get; set; }

        /// <summary>
        /// Enable/disable SIP. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Enable/disable only allow the registrar to connect. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("strictRegister")]
        public Input<string>? StrictRegister { get; set; }

        /// <summary>
        /// SUBSCRIBE request rate limit (per second, per policy).
        /// </summary>
        [Input("subscribeRate")]
        public Input<int>? SubscribeRate { get; set; }

        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        [Input("subscribeRateTrack")]
        public Input<string>? SubscribeRateTrack { get; set; }

        /// <summary>
        /// Action for unknown SIP header. Valid values: `discard`, `pass`, `respond`.
        /// </summary>
        [Input("unknownHeader")]
        public Input<string>? UnknownHeader { get; set; }

        /// <summary>
        /// UPDATE request rate limit (per second, per policy).
        /// </summary>
        [Input("updateRate")]
        public Input<int>? UpdateRate { get; set; }

        /// <summary>
        /// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        /// </summary>
        [Input("updateRateTrack")]
        public Input<string>? UpdateRateTrack { get; set; }

        public ProfileSipArgs()
        {
        }
        public static new ProfileSipArgs Empty => new ProfileSipArgs();
    }
}
