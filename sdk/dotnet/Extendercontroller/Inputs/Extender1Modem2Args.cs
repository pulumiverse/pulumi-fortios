// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Extendercontroller.Inputs
{

    public sealed class Extender1Modem2Args : global::Pulumi.ResourceArgs
    {
        [Input("autoSwitch")]
        public Input<Inputs.Extender1Modem2AutoSwitchArgs>? AutoSwitch { get; set; }

        [Input("connStatus")]
        public Input<int>? ConnStatus { get; set; }

        [Input("defaultSim")]
        public Input<string>? DefaultSim { get; set; }

        [Input("gps")]
        public Input<string>? Gps { get; set; }

        [Input("ifname")]
        public Input<string>? Ifname { get; set; }

        [Input("preferredCarrier")]
        public Input<string>? PreferredCarrier { get; set; }

        [Input("redundantIntf")]
        public Input<string>? RedundantIntf { get; set; }

        [Input("redundantMode")]
        public Input<string>? RedundantMode { get; set; }

        [Input("sim1Pin")]
        public Input<string>? Sim1Pin { get; set; }

        [Input("sim1PinCode")]
        private Input<string>? _sim1PinCode;
        public Input<string>? Sim1PinCode
        {
            get => _sim1PinCode;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sim1PinCode = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("sim2Pin")]
        public Input<string>? Sim2Pin { get; set; }

        [Input("sim2PinCode")]
        private Input<string>? _sim2PinCode;
        public Input<string>? Sim2PinCode
        {
            get => _sim2PinCode;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sim2PinCode = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public Extender1Modem2Args()
        {
        }
        public static new Extender1Modem2Args Empty => new Extender1Modem2Args();
    }
}
