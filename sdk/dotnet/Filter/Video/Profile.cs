// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Filter.Video
{
    /// <summary>
    /// Configure VideoFilter profile. Applies to FortiOS Version `&gt;= 7.0.1`.
    /// 
    /// ## Import
    /// 
    /// Videofilter Profile can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:filter/video/profile:Profile labelname {{name}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:filter/video/profile:Profile labelname {{name}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:filter/video/profile:Profile")]
    public partial class Profile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Comment.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Enable/disable Dailymotion video source. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("dailymotion")]
        public Output<string> Dailymotion { get; private set; } = null!;

        /// <summary>
        /// Video filter default action. Valid values: `allow`, `monitor`, `block`.
        /// </summary>
        [Output("defaultAction")]
        public Output<string> DefaultAction { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// YouTube filter entries. The structure of `filters` block is documented below.
        /// </summary>
        [Output("filters")]
        public Output<ImmutableArray<Outputs.ProfileFilter>> Filters { get; private set; } = null!;

        /// <summary>
        /// Configure FortiGuard categories. The structure of `fortiguard_category` block is documented below.
        /// </summary>
        [Output("fortiguardCategory")]
        public Output<Outputs.ProfileFortiguardCategory> FortiguardCategory { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// Enable/disable logging. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("log")]
        public Output<string> Log { get; private set; } = null!;

        /// <summary>
        /// Name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Replacement message group.
        /// </summary>
        [Output("replacemsgGroup")]
        public Output<string> ReplacemsgGroup { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// Enable/disable Vimeo video source. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("vimeo")]
        public Output<string> Vimeo { get; private set; } = null!;

        /// <summary>
        /// Enable/disable YouTube video source. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("youtube")]
        public Output<string> Youtube { get; private set; } = null!;

        /// <summary>
        /// Set YouTube channel filter.
        /// </summary>
        [Output("youtubeChannelFilter")]
        public Output<int> YoutubeChannelFilter { get; private set; } = null!;


        /// <summary>
        /// Create a Profile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Profile(string name, ProfileArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:filter/video/profile:Profile", name, args ?? new ProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Profile(string name, Input<string> id, ProfileState? state = null, CustomResourceOptions? options = null)
            : base("fortios:filter/video/profile:Profile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Profile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Profile Get(string name, Input<string> id, ProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new Profile(name, id, state, options);
        }
    }

    public sealed class ProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Enable/disable Dailymotion video source. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("dailymotion")]
        public Input<string>? Dailymotion { get; set; }

        /// <summary>
        /// Video filter default action. Valid values: `allow`, `monitor`, `block`.
        /// </summary>
        [Input("defaultAction")]
        public Input<string>? DefaultAction { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        [Input("filters")]
        private InputList<Inputs.ProfileFilterArgs>? _filters;

        /// <summary>
        /// YouTube filter entries. The structure of `filters` block is documented below.
        /// </summary>
        public InputList<Inputs.ProfileFilterArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.ProfileFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Configure FortiGuard categories. The structure of `fortiguard_category` block is documented below.
        /// </summary>
        [Input("fortiguardCategory")]
        public Input<Inputs.ProfileFortiguardCategoryArgs>? FortiguardCategory { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Enable/disable logging. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("log")]
        public Input<string>? Log { get; set; }

        /// <summary>
        /// Name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Replacement message group.
        /// </summary>
        [Input("replacemsgGroup")]
        public Input<string>? ReplacemsgGroup { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// Enable/disable Vimeo video source. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("vimeo")]
        public Input<string>? Vimeo { get; set; }

        /// <summary>
        /// Enable/disable YouTube video source. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("youtube")]
        public Input<string>? Youtube { get; set; }

        /// <summary>
        /// Set YouTube channel filter.
        /// </summary>
        [Input("youtubeChannelFilter")]
        public Input<int>? YoutubeChannelFilter { get; set; }

        public ProfileArgs()
        {
        }
        public static new ProfileArgs Empty => new ProfileArgs();
    }

    public sealed class ProfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Enable/disable Dailymotion video source. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("dailymotion")]
        public Input<string>? Dailymotion { get; set; }

        /// <summary>
        /// Video filter default action. Valid values: `allow`, `monitor`, `block`.
        /// </summary>
        [Input("defaultAction")]
        public Input<string>? DefaultAction { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        [Input("filters")]
        private InputList<Inputs.ProfileFilterGetArgs>? _filters;

        /// <summary>
        /// YouTube filter entries. The structure of `filters` block is documented below.
        /// </summary>
        public InputList<Inputs.ProfileFilterGetArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.ProfileFilterGetArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Configure FortiGuard categories. The structure of `fortiguard_category` block is documented below.
        /// </summary>
        [Input("fortiguardCategory")]
        public Input<Inputs.ProfileFortiguardCategoryGetArgs>? FortiguardCategory { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Enable/disable logging. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("log")]
        public Input<string>? Log { get; set; }

        /// <summary>
        /// Name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Replacement message group.
        /// </summary>
        [Input("replacemsgGroup")]
        public Input<string>? ReplacemsgGroup { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// Enable/disable Vimeo video source. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("vimeo")]
        public Input<string>? Vimeo { get; set; }

        /// <summary>
        /// Enable/disable YouTube video source. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("youtube")]
        public Input<string>? Youtube { get; set; }

        /// <summary>
        /// Set YouTube channel filter.
        /// </summary>
        [Input("youtubeChannelFilter")]
        public Input<int>? YoutubeChannelFilter { get; set; }

        public ProfileState()
        {
        }
        public static new ProfileState Empty => new ProfileState();
    }
}
