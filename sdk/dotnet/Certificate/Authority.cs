// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.Certificate
{
    /// <summary>
    /// CA certificate.
    /// 
    /// ## Import
    /// 
    /// Certificate Ca can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:certificate/ca:Ca labelname {{name}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:certificate/ca:Ca labelname {{name}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:certificate/ca:Ca")]
    public partial class Authority : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Number of days to wait before requesting an updated CA certificate (0 - 4294967295, 0 = disabled).
        /// </summary>
        [Output("autoUpdateDays")]
        public Output<int> AutoUpdateDays { get; private set; } = null!;

        /// <summary>
        /// Number of days before an expiry-warning message is generated (0 - 4294967295, 0 = disabled).
        /// </summary>
        [Output("autoUpdateDaysWarning")]
        public Output<int> AutoUpdateDaysWarning { get; private set; } = null!;

        /// <summary>
        /// CA certificate as a PEM file.
        /// </summary>
        [Output("ca")]
        public Output<string> Certificate { get; private set; } = null!;

        /// <summary>
        /// CA identifier of the SCEP server.
        /// </summary>
        [Output("caIdentifier")]
        public Output<string> CaIdentifier { get; private set; } = null!;

        /// <summary>
        /// URL of the EST server.
        /// </summary>
        [Output("estUrl")]
        public Output<string> EstUrl { get; private set; } = null!;

        /// <summary>
        /// Time at which CA was last updated.
        /// </summary>
        [Output("lastUpdated")]
        public Output<int> LastUpdated { get; private set; } = null!;

        /// <summary>
        /// Name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Enable/disable this CA as obsoleted. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("obsolete")]
        public Output<string> Obsolete { get; private set; } = null!;

        /// <summary>
        /// Either global or VDOM IP address range for the CA certificate. Valid values: `global`, `vdom`.
        /// </summary>
        [Output("range")]
        public Output<string> Range { get; private set; } = null!;

        /// <summary>
        /// URL of the SCEP server.
        /// </summary>
        [Output("scepUrl")]
        public Output<string> ScepUrl { get; private set; } = null!;

        /// <summary>
        /// CA certificate source type.
        /// </summary>
        [Output("source")]
        public Output<string> Source { get; private set; } = null!;

        /// <summary>
        /// Source IP address for communications to the SCEP server.
        /// </summary>
        [Output("sourceIp")]
        public Output<string> SourceIp { get; private set; } = null!;

        /// <summary>
        /// Enable/disable this CA as a trusted CA for SSL inspection. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("sslInspectionTrusted")]
        public Output<string> SslInspectionTrusted { get; private set; } = null!;

        /// <summary>
        /// Enable/disable as a trusted CA. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("trusted")]
        public Output<string> Trusted { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Authority resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Authority(string name, AuthorityArgs args, CustomResourceOptions? options = null)
            : base("fortios:certificate/ca:Ca", name, args ?? new AuthorityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Authority(string name, Input<string> id, AuthorityState? state = null, CustomResourceOptions? options = null)
            : base("fortios:certificate/ca:Ca", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
                AdditionalSecretOutputs =
                {
                    "ca",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Authority resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Authority Get(string name, Input<string> id, AuthorityState? state = null, CustomResourceOptions? options = null)
        {
            return new Authority(name, id, state, options);
        }
    }

    public sealed class AuthorityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Number of days to wait before requesting an updated CA certificate (0 - 4294967295, 0 = disabled).
        /// </summary>
        [Input("autoUpdateDays")]
        public Input<int>? AutoUpdateDays { get; set; }

        /// <summary>
        /// Number of days before an expiry-warning message is generated (0 - 4294967295, 0 = disabled).
        /// </summary>
        [Input("autoUpdateDaysWarning")]
        public Input<int>? AutoUpdateDaysWarning { get; set; }

        [Input("ca", required: true)]
        private Input<string>? _ca;

        /// <summary>
        /// CA certificate as a PEM file.
        /// </summary>
        public Input<string>? Certificate
        {
            get => _ca;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _ca = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// CA identifier of the SCEP server.
        /// </summary>
        [Input("caIdentifier")]
        public Input<string>? CaIdentifier { get; set; }

        /// <summary>
        /// URL of the EST server.
        /// </summary>
        [Input("estUrl")]
        public Input<string>? EstUrl { get; set; }

        /// <summary>
        /// Time at which CA was last updated.
        /// </summary>
        [Input("lastUpdated")]
        public Input<int>? LastUpdated { get; set; }

        /// <summary>
        /// Name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable/disable this CA as obsoleted. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("obsolete")]
        public Input<string>? Obsolete { get; set; }

        /// <summary>
        /// Either global or VDOM IP address range for the CA certificate. Valid values: `global`, `vdom`.
        /// </summary>
        [Input("range")]
        public Input<string>? Range { get; set; }

        /// <summary>
        /// URL of the SCEP server.
        /// </summary>
        [Input("scepUrl")]
        public Input<string>? ScepUrl { get; set; }

        /// <summary>
        /// CA certificate source type.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// Source IP address for communications to the SCEP server.
        /// </summary>
        [Input("sourceIp")]
        public Input<string>? SourceIp { get; set; }

        /// <summary>
        /// Enable/disable this CA as a trusted CA for SSL inspection. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("sslInspectionTrusted")]
        public Input<string>? SslInspectionTrusted { get; set; }

        /// <summary>
        /// Enable/disable as a trusted CA. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("trusted")]
        public Input<string>? Trusted { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public AuthorityArgs()
        {
        }
        public static new AuthorityArgs Empty => new AuthorityArgs();
    }

    public sealed class AuthorityState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Number of days to wait before requesting an updated CA certificate (0 - 4294967295, 0 = disabled).
        /// </summary>
        [Input("autoUpdateDays")]
        public Input<int>? AutoUpdateDays { get; set; }

        /// <summary>
        /// Number of days before an expiry-warning message is generated (0 - 4294967295, 0 = disabled).
        /// </summary>
        [Input("autoUpdateDaysWarning")]
        public Input<int>? AutoUpdateDaysWarning { get; set; }

        [Input("ca")]
        private Input<string>? _ca;

        /// <summary>
        /// CA certificate as a PEM file.
        /// </summary>
        public Input<string>? Certificate
        {
            get => _ca;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _ca = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// CA identifier of the SCEP server.
        /// </summary>
        [Input("caIdentifier")]
        public Input<string>? CaIdentifier { get; set; }

        /// <summary>
        /// URL of the EST server.
        /// </summary>
        [Input("estUrl")]
        public Input<string>? EstUrl { get; set; }

        /// <summary>
        /// Time at which CA was last updated.
        /// </summary>
        [Input("lastUpdated")]
        public Input<int>? LastUpdated { get; set; }

        /// <summary>
        /// Name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable/disable this CA as obsoleted. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("obsolete")]
        public Input<string>? Obsolete { get; set; }

        /// <summary>
        /// Either global or VDOM IP address range for the CA certificate. Valid values: `global`, `vdom`.
        /// </summary>
        [Input("range")]
        public Input<string>? Range { get; set; }

        /// <summary>
        /// URL of the SCEP server.
        /// </summary>
        [Input("scepUrl")]
        public Input<string>? ScepUrl { get; set; }

        /// <summary>
        /// CA certificate source type.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// Source IP address for communications to the SCEP server.
        /// </summary>
        [Input("sourceIp")]
        public Input<string>? SourceIp { get; set; }

        /// <summary>
        /// Enable/disable this CA as a trusted CA for SSL inspection. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("sslInspectionTrusted")]
        public Input<string>? SslInspectionTrusted { get; set; }

        /// <summary>
        /// Enable/disable as a trusted CA. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("trusted")]
        public Input<string>? Trusted { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public AuthorityState()
        {
        }
        public static new AuthorityState Empty => new AuthorityState();
    }
}
