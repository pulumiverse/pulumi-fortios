// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System
{
    public static class GetNetflow
    {
        /// <summary>
        /// Use this data source to get information on fortios system netflow
        /// </summary>
        public static Task<GetNetflowResult> InvokeAsync(GetNetflowArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetflowResult>("fortios:system/getNetflow:getNetflow", args ?? new GetNetflowArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information on fortios system netflow
        /// </summary>
        public static Output<GetNetflowResult> Invoke(GetNetflowInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetflowResult>("fortios:system/getNetflow:getNetflow", args ?? new GetNetflowInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetflowArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public string? Vdomparam { get; set; }

        public GetNetflowArgs()
        {
        }
        public static new GetNetflowArgs Empty => new GetNetflowArgs();
    }

    public sealed class GetNetflowInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public GetNetflowInvokeArgs()
        {
        }
        public static new GetNetflowInvokeArgs Empty => new GetNetflowInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetflowResult
    {
        /// <summary>
        /// Timeout to report active flows (1 - 60 min, default = 30).
        /// </summary>
        public readonly int ActiveFlowTimeout;
        /// <summary>
        /// Collector IP.
        /// </summary>
        public readonly string CollectorIp;
        /// <summary>
        /// NetFlow collector port number.
        /// </summary>
        public readonly int CollectorPort;
        /// <summary>
        /// Netflow collectors. The structure of `collectors` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetflowCollectorResult> Collectors;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Timeout for periodic report of finished flows (10 - 600 sec, default = 15).
        /// </summary>
        public readonly int InactiveFlowTimeout;
        /// <summary>
        /// Specify outgoing interface to reach server.
        /// </summary>
        public readonly string Interface;
        /// <summary>
        /// Specify how to select outgoing interface to reach server.
        /// </summary>
        public readonly string InterfaceSelectMethod;
        /// <summary>
        /// Source IP address for communication with the NetFlow agent.
        /// </summary>
        public readonly string SourceIp;
        /// <summary>
        /// Counter of flowset records before resending a template flowset record.
        /// </summary>
        public readonly int TemplateTxCounter;
        /// <summary>
        /// Timeout for periodic template flowset transmission (1 - 1440 min, default = 30).
        /// </summary>
        public readonly int TemplateTxTimeout;
        public readonly string? Vdomparam;

        [OutputConstructor]
        private GetNetflowResult(
            int activeFlowTimeout,

            string collectorIp,

            int collectorPort,

            ImmutableArray<Outputs.GetNetflowCollectorResult> collectors,

            string id,

            int inactiveFlowTimeout,

            string @interface,

            string interfaceSelectMethod,

            string sourceIp,

            int templateTxCounter,

            int templateTxTimeout,

            string? vdomparam)
        {
            ActiveFlowTimeout = activeFlowTimeout;
            CollectorIp = collectorIp;
            CollectorPort = collectorPort;
            Collectors = collectors;
            Id = id;
            InactiveFlowTimeout = inactiveFlowTimeout;
            Interface = @interface;
            InterfaceSelectMethod = interfaceSelectMethod;
            SourceIp = sourceIp;
            TemplateTxCounter = templateTxCounter;
            TemplateTxTimeout = templateTxTimeout;
            Vdomparam = vdomparam;
        }
    }
}
