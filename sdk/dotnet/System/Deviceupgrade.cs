// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System
{
    /// <summary>
    /// Independent upgrades for managed devices. Applies to FortiOS Version `&gt;= 7.2.4`.
    /// 
    /// ## Import
    /// 
    /// System DeviceUpgrade can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/deviceupgrade:Deviceupgrade labelname {{serial}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/deviceupgrade:Deviceupgrade labelname {{serial}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:system/deviceupgrade:Deviceupgrade")]
    public partial class Deviceupgrade : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Fortinet device type.
        /// </summary>
        [Output("deviceType")]
        public Output<string> DeviceType { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Upgrade failure reason.
        /// </summary>
        [Output("failureReason")]
        public Output<string> FailureReason { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
        /// </summary>
        [Output("haRebootController")]
        public Output<string> HaRebootController { get; private set; } = null!;

        /// <summary>
        /// Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `known_ha_members` block is documented below.
        /// </summary>
        [Output("knownHaMembers")]
        public Output<ImmutableArray<Outputs.DeviceupgradeKnownHaMember>> KnownHaMembers { get; private set; } = null!;

        /// <summary>
        /// Maximum number of minutes to allow for immediate upgrade preparation.
        /// </summary>
        [Output("maximumMinutes")]
        public Output<int> MaximumMinutes { get; private set; } = null!;

        /// <summary>
        /// Serial number of the node to include.
        /// </summary>
        [Output("serial")]
        public Output<string> Serial { get; private set; } = null!;

        /// <summary>
        /// Upgrade configuration time in UTC (hh:mm yyyy/mm/dd UTC).
        /// </summary>
        [Output("setupTime")]
        public Output<string> SetupTime { get; private set; } = null!;

        /// <summary>
        /// Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `device-disconnected`, `ready`, `coordinating`, `staging`, `final-check`, `upgrade-devices`, `cancelled`, `confirmed`, `done`, `failed`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Scheduled upgrade execution time in UTC (hh:mm yyyy/mm/dd UTC).
        /// </summary>
        [Output("time")]
        public Output<string> Time { get; private set; } = null!;

        /// <summary>
        /// Run immediately or at a scheduled time. Valid values: `immediate`, `scheduled`.
        /// </summary>
        [Output("timing")]
        public Output<string> Timing { get; private set; } = null!;

        /// <summary>
        /// Fortinet OS image versions to upgrade through in major-minor-patch format, such as 7-0-4.
        /// </summary>
        [Output("upgradePath")]
        public Output<string> UpgradePath { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Deviceupgrade resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Deviceupgrade(string name, DeviceupgradeArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:system/deviceupgrade:Deviceupgrade", name, args ?? new DeviceupgradeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Deviceupgrade(string name, Input<string> id, DeviceupgradeState? state = null, CustomResourceOptions? options = null)
            : base("fortios:system/deviceupgrade:Deviceupgrade", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Deviceupgrade resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Deviceupgrade Get(string name, Input<string> id, DeviceupgradeState? state = null, CustomResourceOptions? options = null)
        {
            return new Deviceupgrade(name, id, state, options);
        }
    }

    public sealed class DeviceupgradeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Fortinet device type.
        /// </summary>
        [Input("deviceType")]
        public Input<string>? DeviceType { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Upgrade failure reason.
        /// </summary>
        [Input("failureReason")]
        public Input<string>? FailureReason { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
        /// </summary>
        [Input("haRebootController")]
        public Input<string>? HaRebootController { get; set; }

        [Input("knownHaMembers")]
        private InputList<Inputs.DeviceupgradeKnownHaMemberArgs>? _knownHaMembers;

        /// <summary>
        /// Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `known_ha_members` block is documented below.
        /// </summary>
        public InputList<Inputs.DeviceupgradeKnownHaMemberArgs> KnownHaMembers
        {
            get => _knownHaMembers ?? (_knownHaMembers = new InputList<Inputs.DeviceupgradeKnownHaMemberArgs>());
            set => _knownHaMembers = value;
        }

        /// <summary>
        /// Maximum number of minutes to allow for immediate upgrade preparation.
        /// </summary>
        [Input("maximumMinutes")]
        public Input<int>? MaximumMinutes { get; set; }

        /// <summary>
        /// Serial number of the node to include.
        /// </summary>
        [Input("serial")]
        public Input<string>? Serial { get; set; }

        /// <summary>
        /// Upgrade configuration time in UTC (hh:mm yyyy/mm/dd UTC).
        /// </summary>
        [Input("setupTime")]
        public Input<string>? SetupTime { get; set; }

        /// <summary>
        /// Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `device-disconnected`, `ready`, `coordinating`, `staging`, `final-check`, `upgrade-devices`, `cancelled`, `confirmed`, `done`, `failed`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Scheduled upgrade execution time in UTC (hh:mm yyyy/mm/dd UTC).
        /// </summary>
        [Input("time")]
        public Input<string>? Time { get; set; }

        /// <summary>
        /// Run immediately or at a scheduled time. Valid values: `immediate`, `scheduled`.
        /// </summary>
        [Input("timing")]
        public Input<string>? Timing { get; set; }

        /// <summary>
        /// Fortinet OS image versions to upgrade through in major-minor-patch format, such as 7-0-4.
        /// </summary>
        [Input("upgradePath")]
        public Input<string>? UpgradePath { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public DeviceupgradeArgs()
        {
        }
        public static new DeviceupgradeArgs Empty => new DeviceupgradeArgs();
    }

    public sealed class DeviceupgradeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Fortinet device type.
        /// </summary>
        [Input("deviceType")]
        public Input<string>? DeviceType { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Upgrade failure reason.
        /// </summary>
        [Input("failureReason")]
        public Input<string>? FailureReason { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
        /// </summary>
        [Input("haRebootController")]
        public Input<string>? HaRebootController { get; set; }

        [Input("knownHaMembers")]
        private InputList<Inputs.DeviceupgradeKnownHaMemberGetArgs>? _knownHaMembers;

        /// <summary>
        /// Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `known_ha_members` block is documented below.
        /// </summary>
        public InputList<Inputs.DeviceupgradeKnownHaMemberGetArgs> KnownHaMembers
        {
            get => _knownHaMembers ?? (_knownHaMembers = new InputList<Inputs.DeviceupgradeKnownHaMemberGetArgs>());
            set => _knownHaMembers = value;
        }

        /// <summary>
        /// Maximum number of minutes to allow for immediate upgrade preparation.
        /// </summary>
        [Input("maximumMinutes")]
        public Input<int>? MaximumMinutes { get; set; }

        /// <summary>
        /// Serial number of the node to include.
        /// </summary>
        [Input("serial")]
        public Input<string>? Serial { get; set; }

        /// <summary>
        /// Upgrade configuration time in UTC (hh:mm yyyy/mm/dd UTC).
        /// </summary>
        [Input("setupTime")]
        public Input<string>? SetupTime { get; set; }

        /// <summary>
        /// Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `device-disconnected`, `ready`, `coordinating`, `staging`, `final-check`, `upgrade-devices`, `cancelled`, `confirmed`, `done`, `failed`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Scheduled upgrade execution time in UTC (hh:mm yyyy/mm/dd UTC).
        /// </summary>
        [Input("time")]
        public Input<string>? Time { get; set; }

        /// <summary>
        /// Run immediately or at a scheduled time. Valid values: `immediate`, `scheduled`.
        /// </summary>
        [Input("timing")]
        public Input<string>? Timing { get; set; }

        /// <summary>
        /// Fortinet OS image versions to upgrade through in major-minor-patch format, such as 7-0-4.
        /// </summary>
        [Input("upgradePath")]
        public Input<string>? UpgradePath { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public DeviceupgradeState()
        {
        }
        public static new DeviceupgradeState Empty => new DeviceupgradeState();
    }
}
