// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System.Snmp
{
    /// <summary>
    /// SNMP community configuration.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.System.Snmp.Community("trname", new()
    ///     {
    ///         Events = "cpu-high mem-low log-full intf-ip vpn-tun-up vpn-tun-down ha-switch ha-hb-failure ips-signature ips-anomaly av-virus av-oversize av-pattern av-fragmented fm-if-change bgp-established bgp-backward-transition ha-member-up ha-member-down ent-conf-change av-conserve av-bypass av-oversize-passed av-oversize-blocked ips-pkg-update ips-fail-open faz-disconnect wc-ap-up wc-ap-down fswctl-session-up fswctl-session-down load-balance-real-server-down per-cpu-high",
    ///         Fosid = 1,
    ///         QueryV1Port = 161,
    ///         QueryV1Status = "enable",
    ///         QueryV2cPort = 161,
    ///         QueryV2cStatus = "enable",
    ///         Status = "enable",
    ///         TrapV1Lport = 162,
    ///         TrapV1Rport = 162,
    ///         TrapV1Status = "enable",
    ///         TrapV2cLport = 162,
    ///         TrapV2cRport = 162,
    ///         TrapV2cStatus = "enable",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// SystemSnmp Community can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/snmp/community:Community labelname {{fosid}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/snmp/community:Community labelname {{fosid}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:system/snmp/community:Community")]
    public partial class Community : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// SNMP trap events.
        /// </summary>
        [Output("events")]
        public Output<string> Events { get; private set; } = null!;

        /// <summary>
        /// Community ID.
        /// </summary>
        [Output("fosid")]
        public Output<int> Fosid { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
        /// </summary>
        [Output("hosts")]
        public Output<ImmutableArray<Outputs.CommunityHost>> Hosts { get; private set; } = null!;

        /// <summary>
        /// Configure IPv6 SNMP managers. The structure of `hosts6` block is documented below.
        /// </summary>
        [Output("hosts6s")]
        public Output<ImmutableArray<Outputs.CommunityHosts6>> Hosts6s { get; private set; } = null!;

        /// <summary>
        /// SNMP access control MIB view.
        /// </summary>
        [Output("mibView")]
        public Output<string> MibView { get; private set; } = null!;

        /// <summary>
        /// Community name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// SNMP v1 query port (default = 161).
        /// </summary>
        [Output("queryV1Port")]
        public Output<int> QueryV1Port { get; private set; } = null!;

        /// <summary>
        /// Enable/disable SNMP v1 queries. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("queryV1Status")]
        public Output<string> QueryV1Status { get; private set; } = null!;

        /// <summary>
        /// SNMP v2c query port (default = 161).
        /// </summary>
        [Output("queryV2cPort")]
        public Output<int> QueryV2cPort { get; private set; } = null!;

        /// <summary>
        /// Enable/disable SNMP v2c queries. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("queryV2cStatus")]
        public Output<string> QueryV2cStatus { get; private set; } = null!;

        /// <summary>
        /// Enable/disable this SNMP community. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// SNMP v1 trap local port (default = 162).
        /// </summary>
        [Output("trapV1Lport")]
        public Output<int> TrapV1Lport { get; private set; } = null!;

        /// <summary>
        /// SNMP v1 trap remote port (default = 162).
        /// </summary>
        [Output("trapV1Rport")]
        public Output<int> TrapV1Rport { get; private set; } = null!;

        /// <summary>
        /// Enable/disable SNMP v1 traps. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("trapV1Status")]
        public Output<string> TrapV1Status { get; private set; } = null!;

        /// <summary>
        /// SNMP v2c trap local port (default = 162).
        /// </summary>
        [Output("trapV2cLport")]
        public Output<int> TrapV2cLport { get; private set; } = null!;

        /// <summary>
        /// SNMP v2c trap remote port (default = 162).
        /// </summary>
        [Output("trapV2cRport")]
        public Output<int> TrapV2cRport { get; private set; } = null!;

        /// <summary>
        /// Enable/disable SNMP v2c traps. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("trapV2cStatus")]
        public Output<string> TrapV2cStatus { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// SNMP access control VDOMs. The structure of `vdoms` block is documented below.
        /// </summary>
        [Output("vdoms")]
        public Output<ImmutableArray<Outputs.CommunityVdom>> Vdoms { get; private set; } = null!;


        /// <summary>
        /// Create a Community resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Community(string name, CommunityArgs args, CustomResourceOptions? options = null)
            : base("fortios:system/snmp/community:Community", name, args ?? new CommunityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Community(string name, Input<string> id, CommunityState? state = null, CustomResourceOptions? options = null)
            : base("fortios:system/snmp/community:Community", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Community resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Community Get(string name, Input<string> id, CommunityState? state = null, CustomResourceOptions? options = null)
        {
            return new Community(name, id, state, options);
        }
    }

    public sealed class CommunityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// SNMP trap events.
        /// </summary>
        [Input("events")]
        public Input<string>? Events { get; set; }

        /// <summary>
        /// Community ID.
        /// </summary>
        [Input("fosid", required: true)]
        public Input<int> Fosid { get; set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        [Input("hosts")]
        private InputList<Inputs.CommunityHostArgs>? _hosts;

        /// <summary>
        /// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
        /// </summary>
        public InputList<Inputs.CommunityHostArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.CommunityHostArgs>());
            set => _hosts = value;
        }

        [Input("hosts6s")]
        private InputList<Inputs.CommunityHosts6Args>? _hosts6s;

        /// <summary>
        /// Configure IPv6 SNMP managers. The structure of `hosts6` block is documented below.
        /// </summary>
        public InputList<Inputs.CommunityHosts6Args> Hosts6s
        {
            get => _hosts6s ?? (_hosts6s = new InputList<Inputs.CommunityHosts6Args>());
            set => _hosts6s = value;
        }

        /// <summary>
        /// SNMP access control MIB view.
        /// </summary>
        [Input("mibView")]
        public Input<string>? MibView { get; set; }

        /// <summary>
        /// Community name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// SNMP v1 query port (default = 161).
        /// </summary>
        [Input("queryV1Port")]
        public Input<int>? QueryV1Port { get; set; }

        /// <summary>
        /// Enable/disable SNMP v1 queries. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("queryV1Status")]
        public Input<string>? QueryV1Status { get; set; }

        /// <summary>
        /// SNMP v2c query port (default = 161).
        /// </summary>
        [Input("queryV2cPort")]
        public Input<int>? QueryV2cPort { get; set; }

        /// <summary>
        /// Enable/disable SNMP v2c queries. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("queryV2cStatus")]
        public Input<string>? QueryV2cStatus { get; set; }

        /// <summary>
        /// Enable/disable this SNMP community. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// SNMP v1 trap local port (default = 162).
        /// </summary>
        [Input("trapV1Lport")]
        public Input<int>? TrapV1Lport { get; set; }

        /// <summary>
        /// SNMP v1 trap remote port (default = 162).
        /// </summary>
        [Input("trapV1Rport")]
        public Input<int>? TrapV1Rport { get; set; }

        /// <summary>
        /// Enable/disable SNMP v1 traps. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("trapV1Status")]
        public Input<string>? TrapV1Status { get; set; }

        /// <summary>
        /// SNMP v2c trap local port (default = 162).
        /// </summary>
        [Input("trapV2cLport")]
        public Input<int>? TrapV2cLport { get; set; }

        /// <summary>
        /// SNMP v2c trap remote port (default = 162).
        /// </summary>
        [Input("trapV2cRport")]
        public Input<int>? TrapV2cRport { get; set; }

        /// <summary>
        /// Enable/disable SNMP v2c traps. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("trapV2cStatus")]
        public Input<string>? TrapV2cStatus { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        [Input("vdoms")]
        private InputList<Inputs.CommunityVdomArgs>? _vdoms;

        /// <summary>
        /// SNMP access control VDOMs. The structure of `vdoms` block is documented below.
        /// </summary>
        public InputList<Inputs.CommunityVdomArgs> Vdoms
        {
            get => _vdoms ?? (_vdoms = new InputList<Inputs.CommunityVdomArgs>());
            set => _vdoms = value;
        }

        public CommunityArgs()
        {
        }
        public static new CommunityArgs Empty => new CommunityArgs();
    }

    public sealed class CommunityState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// SNMP trap events.
        /// </summary>
        [Input("events")]
        public Input<string>? Events { get; set; }

        /// <summary>
        /// Community ID.
        /// </summary>
        [Input("fosid")]
        public Input<int>? Fosid { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        [Input("hosts")]
        private InputList<Inputs.CommunityHostGetArgs>? _hosts;

        /// <summary>
        /// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
        /// </summary>
        public InputList<Inputs.CommunityHostGetArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.CommunityHostGetArgs>());
            set => _hosts = value;
        }

        [Input("hosts6s")]
        private InputList<Inputs.CommunityHosts6GetArgs>? _hosts6s;

        /// <summary>
        /// Configure IPv6 SNMP managers. The structure of `hosts6` block is documented below.
        /// </summary>
        public InputList<Inputs.CommunityHosts6GetArgs> Hosts6s
        {
            get => _hosts6s ?? (_hosts6s = new InputList<Inputs.CommunityHosts6GetArgs>());
            set => _hosts6s = value;
        }

        /// <summary>
        /// SNMP access control MIB view.
        /// </summary>
        [Input("mibView")]
        public Input<string>? MibView { get; set; }

        /// <summary>
        /// Community name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// SNMP v1 query port (default = 161).
        /// </summary>
        [Input("queryV1Port")]
        public Input<int>? QueryV1Port { get; set; }

        /// <summary>
        /// Enable/disable SNMP v1 queries. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("queryV1Status")]
        public Input<string>? QueryV1Status { get; set; }

        /// <summary>
        /// SNMP v2c query port (default = 161).
        /// </summary>
        [Input("queryV2cPort")]
        public Input<int>? QueryV2cPort { get; set; }

        /// <summary>
        /// Enable/disable SNMP v2c queries. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("queryV2cStatus")]
        public Input<string>? QueryV2cStatus { get; set; }

        /// <summary>
        /// Enable/disable this SNMP community. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// SNMP v1 trap local port (default = 162).
        /// </summary>
        [Input("trapV1Lport")]
        public Input<int>? TrapV1Lport { get; set; }

        /// <summary>
        /// SNMP v1 trap remote port (default = 162).
        /// </summary>
        [Input("trapV1Rport")]
        public Input<int>? TrapV1Rport { get; set; }

        /// <summary>
        /// Enable/disable SNMP v1 traps. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("trapV1Status")]
        public Input<string>? TrapV1Status { get; set; }

        /// <summary>
        /// SNMP v2c trap local port (default = 162).
        /// </summary>
        [Input("trapV2cLport")]
        public Input<int>? TrapV2cLport { get; set; }

        /// <summary>
        /// SNMP v2c trap remote port (default = 162).
        /// </summary>
        [Input("trapV2cRport")]
        public Input<int>? TrapV2cRport { get; set; }

        /// <summary>
        /// Enable/disable SNMP v2c traps. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("trapV2cStatus")]
        public Input<string>? TrapV2cStatus { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        [Input("vdoms")]
        private InputList<Inputs.CommunityVdomGetArgs>? _vdoms;

        /// <summary>
        /// SNMP access control VDOMs. The structure of `vdoms` block is documented below.
        /// </summary>
        public InputList<Inputs.CommunityVdomGetArgs> Vdoms
        {
            get => _vdoms ?? (_vdoms = new InputList<Inputs.CommunityVdomGetArgs>());
            set => _vdoms = value;
        }

        public CommunityState()
        {
        }
        public static new CommunityState Empty => new CommunityState();
    }
}
