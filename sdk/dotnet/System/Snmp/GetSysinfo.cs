// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System.Snmp
{
    public static class GetSysinfo
    {
        /// <summary>
        /// Use this data source to get information on fortios systemsnmp sysinfo
        /// </summary>
        public static Task<GetSysinfoResult> InvokeAsync(GetSysinfoArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSysinfoResult>("fortios:system/snmp/getSysinfo:getSysinfo", args ?? new GetSysinfoArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information on fortios systemsnmp sysinfo
        /// </summary>
        public static Output<GetSysinfoResult> Invoke(GetSysinfoInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSysinfoResult>("fortios:system/snmp/getSysinfo:getSysinfo", args ?? new GetSysinfoInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSysinfoArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public string? Vdomparam { get; set; }

        public GetSysinfoArgs()
        {
        }
        public static new GetSysinfoArgs Empty => new GetSysinfoArgs();
    }

    public sealed class GetSysinfoInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public GetSysinfoInvokeArgs()
        {
        }
        public static new GetSysinfoInvokeArgs Empty => new GetSysinfoInvokeArgs();
    }


    [OutputType]
    public sealed class GetSysinfoResult
    {
        /// <summary>
        /// Contact information.
        /// </summary>
        public readonly string ContactInfo;
        /// <summary>
        /// System description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Local SNMP engineID string (maximum 24 characters).
        /// </summary>
        public readonly string EngineId;
        /// <summary>
        /// Local SNMP engineID type (text/hex/mac).
        /// </summary>
        public readonly string EngineIdType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// System location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Enable/disable SNMP.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Free memory usage when trap is sent.
        /// </summary>
        public readonly int TrapFreeMemoryThreshold;
        /// <summary>
        /// Freeable memory usage when trap is sent.
        /// </summary>
        public readonly int TrapFreeableMemoryThreshold;
        /// <summary>
        /// CPU usage when trap is sent.
        /// </summary>
        public readonly int TrapHighCpuThreshold;
        /// <summary>
        /// Log disk usage when trap is sent.
        /// </summary>
        public readonly int TrapLogFullThreshold;
        /// <summary>
        /// Memory usage when trap is sent.
        /// </summary>
        public readonly int TrapLowMemoryThreshold;
        public readonly string? Vdomparam;

        [OutputConstructor]
        private GetSysinfoResult(
            string contactInfo,

            string description,

            string engineId,

            string engineIdType,

            string id,

            string location,

            string status,

            int trapFreeMemoryThreshold,

            int trapFreeableMemoryThreshold,

            int trapHighCpuThreshold,

            int trapLogFullThreshold,

            int trapLowMemoryThreshold,

            string? vdomparam)
        {
            ContactInfo = contactInfo;
            Description = description;
            EngineId = engineId;
            EngineIdType = engineIdType;
            Id = id;
            Location = location;
            Status = status;
            TrapFreeMemoryThreshold = trapFreeMemoryThreshold;
            TrapFreeableMemoryThreshold = trapFreeableMemoryThreshold;
            TrapHighCpuThreshold = trapHighCpuThreshold;
            TrapLogFullThreshold = trapLogFullThreshold;
            TrapLowMemoryThreshold = trapLowMemoryThreshold;
            Vdomparam = vdomparam;
        }
    }
}
