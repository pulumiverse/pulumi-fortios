// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System
{
    public static class GetInterface
    {
        /// <summary>
        /// Use this data source to get information on an fortios system interface
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fortios = Pulumi.Fortios;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sample1 = Fortios.System.GetInterface.Invoke(new()
        ///     {
        ///         Name = "port1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["output1"] = sample1.Apply(getInterfaceResult =&gt; getInterfaceResult.Ip),
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetInterfaceResult> InvokeAsync(GetInterfaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInterfaceResult>("fortios:system/getInterface:getInterface", args ?? new GetInterfaceArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information on an fortios system interface
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fortios = Pulumi.Fortios;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sample1 = Fortios.System.GetInterface.Invoke(new()
        ///     {
        ///         Name = "port1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["output1"] = sample1.Apply(getInterfaceResult =&gt; getInterfaceResult.Ip),
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetInterfaceResult> Invoke(GetInterfaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInterfaceResult>("fortios:system/getInterface:getInterface", args ?? new GetInterfaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInterfaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the name of the desired system interface.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public string? Vdomparam { get; set; }

        public GetInterfaceArgs()
        {
        }
        public static new GetInterfaceArgs Empty => new GetInterfaceArgs();
    }

    public sealed class GetInterfaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the name of the desired system interface.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public GetInterfaceInvokeArgs()
        {
        }
        public static new GetInterfaceInvokeArgs Empty => new GetInterfaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInterfaceResult
    {
        /// <summary>
        /// PPPoE server name.
        /// </summary>
        public readonly string AcName;
        /// <summary>
        /// Aggregate interface.
        /// </summary>
        public readonly string Aggregate;
        /// <summary>
        /// Type of aggregation.
        /// </summary>
        public readonly string AggregateType;
        /// <summary>
        /// Frame distribution algorithm.
        /// </summary>
        public readonly string Algorithm;
        /// <summary>
        /// Alias will be displayed with the interface name to make it easier to distinguish.
        /// </summary>
        public readonly string Alias;
        /// <summary>
        /// Management access settings for the secondary IP address.
        /// </summary>
        public readonly string Allowaccess;
        /// <summary>
        /// Enable/disable automatic registration of unknown FortiAP devices.
        /// </summary>
        public readonly string ApDiscover;
        /// <summary>
        /// Enable/disable ARP forwarding.
        /// </summary>
        public readonly string Arpforward;
        /// <summary>
        /// HTTPS server certificate.
        /// </summary>
        public readonly string AuthCert;
        /// <summary>
        /// Address of captive portal.
        /// </summary>
        public readonly string AuthPortalAddr;
        /// <summary>
        /// PPP authentication type to use.
        /// </summary>
        public readonly string AuthType;
        /// <summary>
        /// Enable/disable automatic authorization of dedicated Fortinet extension device on this interface.
        /// </summary>
        public readonly string AutoAuthExtensionDevice;
        /// <summary>
        /// Bandwidth measure time
        /// </summary>
        public readonly int BandwidthMeasureTime;
        /// <summary>
        /// Bidirectional Forwarding Detection (BFD) settings.
        /// </summary>
        public readonly string Bfd;
        /// <summary>
        /// BFD desired minimal transmit interval.
        /// </summary>
        public readonly int BfdDesiredMinTx;
        /// <summary>
        /// BFD detection multiplier.
        /// </summary>
        public readonly int BfdDetectMult;
        /// <summary>
        /// BFD required minimal receive interval.
        /// </summary>
        public readonly int BfdRequiredMinRx;
        /// <summary>
        /// Enable/disable broadcasting FortiClient discovery messages.
        /// </summary>
        public readonly string BroadcastForticlientDiscovery;
        /// <summary>
        /// Enable/disable broadcast forwarding.
        /// </summary>
        public readonly string BroadcastForward;
        /// <summary>
        /// Enable/disable captive portal.
        /// </summary>
        public readonly int CaptivePortal;
        /// <summary>
        /// CLI connection status.
        /// </summary>
        public readonly int CliConnStatus;
        /// <summary>
        /// DHCP client options. The structure of `client_options` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInterfaceClientOptionResult> ClientOptions;
        /// <summary>
        /// Color of icon on the GUI.
        /// </summary>
        public readonly int Color;
        /// <summary>
        /// Configure interface for single purpose.
        /// </summary>
        public readonly string DedicatedTo;
        /// <summary>
        /// default purdue level of device detected on this interface.
        /// </summary>
        public readonly string DefaultPurdueLevel;
        /// <summary>
        /// Enable to get the gateway IP from the DHCP or PPPoE server.
        /// </summary>
        public readonly string Defaultgw;
        /// <summary>
        /// Description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// MTU of detected peer (0 - 4294967295).
        /// </summary>
        public readonly int DetectedPeerMtu;
        /// <summary>
        /// Protocols used to detect the server.
        /// </summary>
        public readonly string Detectprotocol;
        /// <summary>
        /// Gateway's ping server for this IP.
        /// </summary>
        public readonly string Detectserver;
        /// <summary>
        /// Device access list.
        /// </summary>
        public readonly string DeviceAccessList;
        /// <summary>
        /// Enable/disable passively gathering of device identity information about the devices on the network connected to this interface.
        /// </summary>
        public readonly string DeviceIdentification;
        /// <summary>
        /// Enable/disable active gathering of device identity information about the devices on the network connected to this interface.
        /// </summary>
        public readonly string DeviceIdentificationActiveScan;
        /// <summary>
        /// Enable/disable inclusion of devices detected on this interface in network vulnerability scans.
        /// </summary>
        public readonly string DeviceNetscan;
        /// <summary>
        /// Enable/disable passive gathering of user identity information about users on this interface.
        /// </summary>
        public readonly string DeviceUserIdentification;
        /// <summary>
        /// Device Index.
        /// </summary>
        public readonly int Devindex;
        /// <summary>
        /// Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable).
        /// </summary>
        public readonly string DhcpBroadcastFlag;
        /// <summary>
        /// Enable/disable addition of classless static routes retrieved from DHCP server.
        /// </summary>
        public readonly string DhcpClasslessRouteAddition;
        /// <summary>
        /// DHCP client identifier.
        /// </summary>
        public readonly string DhcpClientIdentifier;
        /// <summary>
        /// Enable/disable DHCP relay agent option.
        /// </summary>
        public readonly string DhcpRelayAgentOption;
        /// <summary>
        /// DHCP relay circuit ID.
        /// </summary>
        public readonly string DhcpRelayCircuitId;
        /// <summary>
        /// Specify outgoing interface to reach server.
        /// </summary>
        public readonly string DhcpRelayInterface;
        /// <summary>
        /// Specify how to select outgoing interface to reach server.
        /// </summary>
        public readonly string DhcpRelayInterfaceSelectMethod;
        /// <summary>
        /// DHCP relay IP address.
        /// </summary>
        public readonly string DhcpRelayIp;
        /// <summary>
        /// DHCP relay link selection.
        /// </summary>
        public readonly string DhcpRelayLinkSelection;
        /// <summary>
        /// Enable/disable sending DHCP request to all servers.
        /// </summary>
        public readonly string DhcpRelayRequestAllServer;
        /// <summary>
        /// Enable/disable allowing this interface to act as a DHCP relay.
        /// </summary>
        public readonly string DhcpRelayService;
        /// <summary>
        /// IP address used by the DHCP relay as its source IP.
        /// </summary>
        public readonly string DhcpRelaySourceIp;
        /// <summary>
        /// DHCP relay type (regular or IPsec).
        /// </summary>
        public readonly string DhcpRelayType;
        /// <summary>
        /// DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
        /// </summary>
        public readonly int DhcpRenewTime;
        /// <summary>
        /// Enable/disable DHCP smart relay.
        /// </summary>
        public readonly string DhcpSmartRelay;
        /// <summary>
        /// Configure DHCP server access list. The structure of `dhcp_snooping_server_list` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInterfaceDhcpSnoopingServerListResult> DhcpSnoopingServerLists;
        /// <summary>
        /// Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
        /// </summary>
        public readonly int DiscRetryTimeout;
        /// <summary>
        /// Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
        /// </summary>
        public readonly int DisconnectThreshold;
        /// <summary>
        /// Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
        /// </summary>
        public readonly int Distance;
        /// <summary>
        /// Enable/disable use DNS acquired by DHCP or PPPoE.
        /// </summary>
        public readonly string DnsServerOverride;
        /// <summary>
        /// DNS transport protocols.
        /// </summary>
        public readonly string DnsServerProtocol;
        /// <summary>
        /// Enable/disable drop fragment packets.
        /// </summary>
        public readonly string DropFragment;
        /// <summary>
        /// Enable/disable drop overlapped fragment packets.
        /// </summary>
        public readonly string DropOverlappedFragment;
        /// <summary>
        /// EAP CA certificate name.
        /// </summary>
        public readonly string EapCaCert;
        /// <summary>
        /// EAP identity.
        /// </summary>
        public readonly string EapIdentity;
        /// <summary>
        /// EAP method.
        /// </summary>
        public readonly string EapMethod;
        /// <summary>
        /// EAP password.
        /// </summary>
        public readonly string EapPassword;
        /// <summary>
        /// Enable/disable EAP-Supplicant.
        /// </summary>
        public readonly string EapSupplicant;
        /// <summary>
        /// EAP user certificate name.
        /// </summary>
        public readonly string EapUserCert;
        /// <summary>
        /// Outgoing traffic shaping profile.
        /// </summary>
        public readonly string EgressShapingProfile;
        /// <summary>
        /// Enable/disable endpoint compliance enforcement.
        /// </summary>
        public readonly string EndpointCompliance;
        /// <summary>
        /// Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
        /// </summary>
        public readonly int EstimatedDownstreamBandwidth;
        /// <summary>
        /// Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
        /// </summary>
        public readonly int EstimatedUpstreamBandwidth;
        /// <summary>
        /// Enable/disable the explicit FTP proxy on this interface.
        /// </summary>
        public readonly string ExplicitFtpProxy;
        /// <summary>
        /// Enable/disable the explicit web proxy on this interface.
        /// </summary>
        public readonly string ExplicitWebProxy;
        /// <summary>
        /// Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet).
        /// </summary>
        public readonly string External;
        /// <summary>
        /// Action on extender when interface fail .
        /// </summary>
        public readonly string FailActionOnExtender;
        /// <summary>
        /// Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `fail_alert_interfaces` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInterfaceFailAlertInterfaceResult> FailAlertInterfaces;
        /// <summary>
        /// Select link-failed-signal or link-down method to alert about a failed link.
        /// </summary>
        public readonly string FailAlertMethod;
        /// <summary>
        /// Enable/disable fail detection features for this interface.
        /// </summary>
        public readonly string FailDetect;
        /// <summary>
        /// Options for detecting that this interface has failed.
        /// </summary>
        public readonly string FailDetectOption;
        /// <summary>
        /// Enable/disable FortiHeartBeat (FortiTelemetry on GUI).
        /// </summary>
        public readonly string Fortiheartbeat;
        /// <summary>
        /// Enable FortiLink to dedicate this interface to manage other Fortinet devices.
        /// </summary>
        public readonly string Fortilink;
        /// <summary>
        /// fortilink split interface backup link.
        /// </summary>
        public readonly int FortilinkBackupLink;
        /// <summary>
        /// Protocol for FortiGate neighbor discovery.
        /// </summary>
        public readonly string FortilinkNeighborDetect;
        /// <summary>
        /// Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy.
        /// </summary>
        public readonly string FortilinkSplitInterface;
        /// <summary>
        /// Enable/disable FortiLink switch-stacking on this interface.
        /// </summary>
        public readonly string FortilinkStacking;
        /// <summary>
        /// Transparent mode forward domain.
        /// </summary>
        public readonly int ForwardDomain;
        /// <summary>
        /// Configure forward error correction (FEC).
        /// </summary>
        public readonly string ForwardErrorCorrection;
        /// <summary>
        /// Enable/disable detect gateway alive for first.
        /// </summary>
        public readonly string Gwdetect;
        /// <summary>
        /// HA election priority for the PING server.
        /// </summary>
        public readonly int HaPriority;
        /// <summary>
        /// Enable/disable ICMP accept redirect.
        /// </summary>
        public readonly string IcmpAcceptRedirect;
        /// <summary>
        /// Enable/disable ICMP send redirect.
        /// </summary>
        public readonly string IcmpSendRedirect;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Enable/disable authentication for this interface.
        /// </summary>
        public readonly string IdentAccept;
        /// <summary>
        /// PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
        /// </summary>
        public readonly int IdleTimeout;
        /// <summary>
        /// Configure IKE authentication SAML server.
        /// </summary>
        public readonly string IkeSamlServer;
        /// <summary>
        /// Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
        /// </summary>
        public readonly int Inbandwidth;
        /// <summary>
        /// Incoming traffic shaping profile.
        /// </summary>
        public readonly string IngressShapingProfile;
        /// <summary>
        /// Ingress Spillover threshold (0 - 16776000 kbps).
        /// </summary>
        public readonly int IngressSpilloverThreshold;
        /// <summary>
        /// Interface name.
        /// </summary>
        public readonly string Data;
        /// <summary>
        /// Implicitly created.
        /// </summary>
        public readonly int Internal;
        /// <summary>
        /// Secondary IP address of the interface.
        /// </summary>
        public readonly string Ip;
        /// <summary>
        /// Enable/disable automatic IP address assignment of this interface by FortiIPAM.
        /// </summary>
        public readonly string IpManagedByFortiipam;
        /// <summary>
        /// Enable/disable IP/MAC binding.
        /// </summary>
        public readonly string Ipmac;
        /// <summary>
        /// Enable/disable the use of this interface as a one-armed sniffer.
        /// </summary>
        public readonly string IpsSnifferMode;
        /// <summary>
        /// Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
        /// </summary>
        public readonly string Ipunnumbered;
        /// <summary>
        /// IPv6 of interface. The structure of `ipv6` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInterfaceIpv6Result> Ipv6s;
        /// <summary>
        /// Enable/disable l2 forwarding.
        /// </summary>
        public readonly string L2forward;
        /// <summary>
        /// LACP HA secondary member.
        /// </summary>
        public readonly string LacpHaSecondary;
        /// <summary>
        /// LACP HA slave.
        /// </summary>
        public readonly string LacpHaSlave;
        /// <summary>
        /// LACP mode.
        /// </summary>
        public readonly string LacpMode;
        /// <summary>
        /// How often the interface sends LACP messages.
        /// </summary>
        public readonly string LacpSpeed;
        /// <summary>
        /// Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
        /// </summary>
        public readonly int LcpEchoInterval;
        /// <summary>
        /// Maximum missed LCP echo messages before disconnect.
        /// </summary>
        public readonly int LcpMaxEchoFails;
        /// <summary>
        /// Number of milliseconds to wait before considering a link is up.
        /// </summary>
        public readonly int LinkUpDelay;
        /// <summary>
        /// LLDP-MED network policy profile.
        /// </summary>
        public readonly string LldpNetworkPolicy;
        /// <summary>
        /// Enable/disable Link Layer Discovery Protocol (LLDP) reception.
        /// </summary>
        public readonly string LldpReception;
        /// <summary>
        /// Enable/disable Link Layer Discovery Protocol (LLDP) transmission.
        /// </summary>
        public readonly string LldpTransmission;
        /// <summary>
        /// Change the interface's MAC address.
        /// </summary>
        public readonly string Macaddr;
        /// <summary>
        /// Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managed_device` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInterfaceManagedDeviceResult> ManagedDevices;
        /// <summary>
        /// Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
        /// </summary>
        public readonly string ManagedSubnetworkSize;
        /// <summary>
        /// High Availability in-band management IP address of this interface.
        /// </summary>
        public readonly string ManagementIp;
        /// <summary>
        /// Measured downstream bandwidth (kbps).
        /// </summary>
        public readonly int MeasuredDownstreamBandwidth;
        /// <summary>
        /// Measured upstream bandwidth (kbps).
        /// </summary>
        public readonly int MeasuredUpstreamBandwidth;
        /// <summary>
        /// Select SFP media interface type
        /// </summary>
        public readonly string Mediatype;
        /// <summary>
        /// Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInterfaceMemberResult> Members;
        /// <summary>
        /// Minimum number of aggregated ports that must be up.
        /// </summary>
        public readonly int MinLinks;
        /// <summary>
        /// Action to take when less than the configured minimum number of links are active.
        /// </summary>
        public readonly string MinLinksDown;
        /// <summary>
        /// Addressing mode (static, DHCP, PPPoE).
        /// </summary>
        public readonly string Mode;
        /// <summary>
        /// Enable monitoring bandwidth on this interface.
        /// </summary>
        public readonly string MonitorBandwidth;
        /// <summary>
        /// MTU value for this interface.
        /// </summary>
        public readonly int Mtu;
        /// <summary>
        /// Enable to set a custom MTU for this interface.
        /// </summary>
        public readonly string MtuOverride;
        /// <summary>
        /// Tag name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Enable/disable NDISC forwarding.
        /// </summary>
        public readonly string Ndiscforward;
        /// <summary>
        /// Enable/disable NETBIOS forwarding.
        /// </summary>
        public readonly string NetbiosForward;
        /// <summary>
        /// Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both).
        /// </summary>
        public readonly string NetflowSampler;
        /// <summary>
        /// Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
        /// </summary>
        public readonly int Outbandwidth;
        /// <summary>
        /// PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
        /// </summary>
        public readonly int PadtRetryTimeout;
        /// <summary>
        /// PPPoE account's password.
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// PING server status.
        /// </summary>
        public readonly int PingServStatus;
        /// <summary>
        /// sFlow polling interval (1 - 255 sec).
        /// </summary>
        public readonly int PollingInterval;
        /// <summary>
        /// Enable/disable PPPoE unnumbered negotiation.
        /// </summary>
        public readonly string PppoeUnnumberedNegotiate;
        /// <summary>
        /// PPTP authentication type.
        /// </summary>
        public readonly string PptpAuthType;
        /// <summary>
        /// Enable/disable PPTP client.
        /// </summary>
        public readonly string PptpClient;
        /// <summary>
        /// PPTP password.
        /// </summary>
        public readonly string PptpPassword;
        /// <summary>
        /// PPTP server IP address.
        /// </summary>
        public readonly string PptpServerIp;
        /// <summary>
        /// Idle timer in minutes (0 for disabled).
        /// </summary>
        public readonly int PptpTimeout;
        /// <summary>
        /// PPTP user name.
        /// </summary>
        public readonly string PptpUser;
        /// <summary>
        /// Enable/disable preservation of session route when dirty.
        /// </summary>
        public readonly string PreserveSessionRoute;
        /// <summary>
        /// Priority of the virtual router (1 - 255).
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// Enable/disable fail back to higher priority port once recovered.
        /// </summary>
        public readonly string PriorityOverride;
        /// <summary>
        /// Enable/disable proxy captive portal on this interface.
        /// </summary>
        public readonly string ProxyCaptivePortal;
        /// <summary>
        /// IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
        /// </summary>
        public readonly int ReachableTime;
        /// <summary>
        /// Redundant interface.
        /// </summary>
        public readonly string RedundantInterface;
        /// <summary>
        /// Remote IP address of tunnel.
        /// </summary>
        public readonly string RemoteIp;
        /// <summary>
        /// Replacement message override group.
        /// </summary>
        public readonly string ReplacemsgOverrideGroup;
        /// <summary>
        /// RX ring size.
        /// </summary>
        public readonly int RingRx;
        /// <summary>
        /// TX ring size.
        /// </summary>
        public readonly int RingTx;
        /// <summary>
        /// Interface role.
        /// </summary>
        public readonly string Role;
        /// <summary>
        /// Data that NetFlow collects (rx, tx, or both).
        /// </summary>
        public readonly string SampleDirection;
        /// <summary>
        /// sFlow sample rate (10 - 99999).
        /// </summary>
        public readonly int SampleRate;
        /// <summary>
        /// Enable monitoring or blocking connections to Botnet servers through this interface.
        /// </summary>
        public readonly string ScanBotnetConnections;
        /// <summary>
        /// Enable/disable adding a secondary IP to this interface.
        /// </summary>
        public readonly string SecondaryIp;
        /// <summary>
        /// Second IP address of interface. The structure of `secondaryip` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInterfaceSecondaryipResult> Secondaryips;
        /// <summary>
        /// Name of security-exempt-list.
        /// </summary>
        public readonly string SecurityExemptList;
        /// <summary>
        /// URL of external authentication logout server.
        /// </summary>
        public readonly string SecurityExternalLogout;
        /// <summary>
        /// URL of external authentication web server.
        /// </summary>
        public readonly string SecurityExternalWeb;
        /// <summary>
        /// User groups that can authenticate with the captive portal. The structure of `security_groups` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInterfaceSecurityGroupResult> SecurityGroups;
        /// <summary>
        /// Enable/disable MAC authentication bypass.
        /// </summary>
        public readonly string SecurityMacAuthBypass;
        /// <summary>
        /// Turn on captive portal authentication for this interface.
        /// </summary>
        public readonly string SecurityMode;
        /// <summary>
        /// URL redirection after disclaimer/authentication.
        /// </summary>
        public readonly string SecurityRedirectUrl;
        /// <summary>
        /// PPPoE service name.
        /// </summary>
        public readonly string ServiceName;
        /// <summary>
        /// Enable/disable sFlow on this interface.
        /// </summary>
        public readonly string SflowSampler;
        /// <summary>
        /// Permanent SNMP Index of the interface.
        /// </summary>
        public readonly int SnmpIndex;
        /// <summary>
        /// Interface speed. The default setting and the options available depend on the interface hardware.
        /// </summary>
        public readonly string Speed;
        /// <summary>
        /// Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
        /// </summary>
        public readonly int SpilloverThreshold;
        /// <summary>
        /// Enable/disable source IP check.
        /// </summary>
        public readonly string SrcCheck;
        /// <summary>
        /// Enable/disable VRRP.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Enable/disable STP.
        /// </summary>
        public readonly string Stp;
        /// <summary>
        /// Control STP behaviour on HA secondary.
        /// </summary>
        public readonly string StpHaSecondary;
        /// <summary>
        /// Enable/disable STP forwarding.
        /// </summary>
        public readonly string Stpforward;
        /// <summary>
        /// Configure STP forwarding mode.
        /// </summary>
        public readonly string StpforwardMode;
        /// <summary>
        /// Enable to always send packets from this interface to a destination MAC address.
        /// </summary>
        public readonly string Subst;
        /// <summary>
        /// Destination MAC address that all packets are sent to from this interface.
        /// </summary>
        public readonly string SubstituteDstMac;
        /// <summary>
        /// Initial create for switch-controller VLANs.
        /// </summary>
        public readonly int SwcFirstCreate;
        /// <summary>
        /// Creation status for switch-controller VLANs.
        /// </summary>
        public readonly int SwcVlan;
        /// <summary>
        /// Contained in switch.
        /// </summary>
        public readonly string Switch;
        /// <summary>
        /// Block FortiSwitch port-to-port traffic.
        /// </summary>
        public readonly string SwitchControllerAccessVlan;
        /// <summary>
        /// Enable/disable FortiSwitch ARP inspection.
        /// </summary>
        public readonly string SwitchControllerArpInspection;
        /// <summary>
        /// Switch controller DHCP snooping.
        /// </summary>
        public readonly string SwitchControllerDhcpSnooping;
        /// <summary>
        /// Switch controller DHCP snooping option82.
        /// </summary>
        public readonly string SwitchControllerDhcpSnoopingOption82;
        /// <summary>
        /// Switch controller DHCP snooping verify MAC.
        /// </summary>
        public readonly string SwitchControllerDhcpSnoopingVerifyMac;
        /// <summary>
        /// Integrated FortiLink settings for managed FortiSwitch.
        /// </summary>
        public readonly string SwitchControllerDynamic;
        /// <summary>
        /// Interface's purpose when assigning traffic (read only).
        /// </summary>
        public readonly string SwitchControllerFeature;
        /// <summary>
        /// Switch controller IGMP snooping.
        /// </summary>
        public readonly string SwitchControllerIgmpSnooping;
        /// <summary>
        /// Switch controller IGMP snooping fast-leave.
        /// </summary>
        public readonly string SwitchControllerIgmpSnoopingFastLeave;
        /// <summary>
        /// Switch controller IGMP snooping proxy.
        /// </summary>
        public readonly string SwitchControllerIgmpSnoopingProxy;
        /// <summary>
        /// Enable/disable managed FortiSwitch IoT scanning.
        /// </summary>
        public readonly string SwitchControllerIotScanning;
        /// <summary>
        /// Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
        /// </summary>
        public readonly int SwitchControllerLearningLimit;
        /// <summary>
        /// VLAN to use for FortiLink management purposes.
        /// </summary>
        public readonly int SwitchControllerMgmtVlan;
        /// <summary>
        /// Integrated NAC settings for managed FortiSwitch.
        /// </summary>
        public readonly string SwitchControllerNac;
        /// <summary>
        /// NetFlow collection and processing.
        /// </summary>
        public readonly string SwitchControllerNetflowCollect;
        /// <summary>
        /// Enable/disable managed FortiSwitch routing offload.
        /// </summary>
        public readonly string SwitchControllerOffload;
        /// <summary>
        /// Enable/disable managed FortiSwitch routing offload gateway.
        /// </summary>
        public readonly string SwitchControllerOffloadGw;
        /// <summary>
        /// IP for routing offload on FortiSwitch.
        /// </summary>
        public readonly string SwitchControllerOffloadIp;
        /// <summary>
        /// Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface.
        /// </summary>
        public readonly string SwitchControllerRspanMode;
        /// <summary>
        /// Source IP address used in FortiLink over L3 connections.
        /// </summary>
        public readonly string SwitchControllerSourceIp;
        /// <summary>
        /// Switch controller traffic policy for the VLAN.
        /// </summary>
        public readonly string SwitchControllerTrafficPolicy;
        /// <summary>
        /// Define a system ID for the aggregate interface.
        /// </summary>
        public readonly string SystemId;
        /// <summary>
        /// Method in which system ID is generated.
        /// </summary>
        public readonly string SystemIdType;
        /// <summary>
        /// Config object tagging. The structure of `tagging` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInterfaceTaggingResult> Taggings;
        /// <summary>
        /// TCP maximum segment size. 0 means do not change segment size.
        /// </summary>
        public readonly int TcpMss;
        /// <summary>
        /// Enable/disable VLAN trunk.
        /// </summary>
        public readonly string Trunk;
        /// <summary>
        /// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        /// </summary>
        public readonly string TrustIp1;
        /// <summary>
        /// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        /// </summary>
        public readonly string TrustIp2;
        /// <summary>
        /// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        /// </summary>
        public readonly string TrustIp3;
        /// <summary>
        /// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        /// </summary>
        public readonly string TrustIp61;
        /// <summary>
        /// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        /// </summary>
        public readonly string TrustIp62;
        /// <summary>
        /// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        /// </summary>
        public readonly string TrustIp63;
        /// <summary>
        /// DHCP client option type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Username of the PPPoE account, provided by your ISP.
        /// </summary>
        public readonly string Username;
        /// <summary>
        /// Interface is in this virtual domain (VDOM).
        /// </summary>
        public readonly string Vdom;
        public readonly string? Vdomparam;
        /// <summary>
        /// Switch control interface VLAN ID.
        /// </summary>
        public readonly int Vindex;
        /// <summary>
        /// Ethernet protocol of VLAN.
        /// </summary>
        public readonly string VlanProtocol;
        /// <summary>
        /// Enable/disable traffic forwarding between VLANs on this interface.
        /// </summary>
        public readonly string Vlanforward;
        /// <summary>
        /// VLAN ID (1 - 4094).
        /// </summary>
        public readonly int Vlanid;
        /// <summary>
        /// Virtual Routing Forwarding ID.
        /// </summary>
        public readonly int Vrf;
        /// <summary>
        /// Enable/disable use of virtual MAC for VRRP.
        /// </summary>
        public readonly string VrrpVirtualMac;
        /// <summary>
        /// VRRP configuration. The structure of `vrrp` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInterfaceVrrpResult> Vrrps;
        /// <summary>
        /// Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers.
        /// </summary>
        public readonly string Wccp;
        /// <summary>
        /// Default weight for static routes (if route has no weight configured).
        /// </summary>
        public readonly int Weight;
        /// <summary>
        /// WINS server IP.
        /// </summary>
        public readonly string WinsIp;

        [OutputConstructor]
        private GetInterfaceResult(
            string acName,

            string aggregate,

            string aggregateType,

            string algorithm,

            string alias,

            string allowaccess,

            string apDiscover,

            string arpforward,

            string authCert,

            string authPortalAddr,

            string authType,

            string autoAuthExtensionDevice,

            int bandwidthMeasureTime,

            string bfd,

            int bfdDesiredMinTx,

            int bfdDetectMult,

            int bfdRequiredMinRx,

            string broadcastForticlientDiscovery,

            string broadcastForward,

            int captivePortal,

            int cliConnStatus,

            ImmutableArray<Outputs.GetInterfaceClientOptionResult> clientOptions,

            int color,

            string dedicatedTo,

            string defaultPurdueLevel,

            string defaultgw,

            string description,

            int detectedPeerMtu,

            string detectprotocol,

            string detectserver,

            string deviceAccessList,

            string deviceIdentification,

            string deviceIdentificationActiveScan,

            string deviceNetscan,

            string deviceUserIdentification,

            int devindex,

            string dhcpBroadcastFlag,

            string dhcpClasslessRouteAddition,

            string dhcpClientIdentifier,

            string dhcpRelayAgentOption,

            string dhcpRelayCircuitId,

            string dhcpRelayInterface,

            string dhcpRelayInterfaceSelectMethod,

            string dhcpRelayIp,

            string dhcpRelayLinkSelection,

            string dhcpRelayRequestAllServer,

            string dhcpRelayService,

            string dhcpRelaySourceIp,

            string dhcpRelayType,

            int dhcpRenewTime,

            string dhcpSmartRelay,

            ImmutableArray<Outputs.GetInterfaceDhcpSnoopingServerListResult> dhcpSnoopingServerLists,

            int discRetryTimeout,

            int disconnectThreshold,

            int distance,

            string dnsServerOverride,

            string dnsServerProtocol,

            string dropFragment,

            string dropOverlappedFragment,

            string eapCaCert,

            string eapIdentity,

            string eapMethod,

            string eapPassword,

            string eapSupplicant,

            string eapUserCert,

            string egressShapingProfile,

            string endpointCompliance,

            int estimatedDownstreamBandwidth,

            int estimatedUpstreamBandwidth,

            string explicitFtpProxy,

            string explicitWebProxy,

            string external,

            string failActionOnExtender,

            ImmutableArray<Outputs.GetInterfaceFailAlertInterfaceResult> failAlertInterfaces,

            string failAlertMethod,

            string failDetect,

            string failDetectOption,

            string fortiheartbeat,

            string fortilink,

            int fortilinkBackupLink,

            string fortilinkNeighborDetect,

            string fortilinkSplitInterface,

            string fortilinkStacking,

            int forwardDomain,

            string forwardErrorCorrection,

            string gwdetect,

            int haPriority,

            string icmpAcceptRedirect,

            string icmpSendRedirect,

            string id,

            string identAccept,

            int idleTimeout,

            string ikeSamlServer,

            int inbandwidth,

            string ingressShapingProfile,

            int ingressSpilloverThreshold,

            string @interface,

            int @internal,

            string ip,

            string ipManagedByFortiipam,

            string ipmac,

            string ipsSnifferMode,

            string ipunnumbered,

            ImmutableArray<Outputs.GetInterfaceIpv6Result> ipv6s,

            string l2forward,

            string lacpHaSecondary,

            string lacpHaSlave,

            string lacpMode,

            string lacpSpeed,

            int lcpEchoInterval,

            int lcpMaxEchoFails,

            int linkUpDelay,

            string lldpNetworkPolicy,

            string lldpReception,

            string lldpTransmission,

            string macaddr,

            ImmutableArray<Outputs.GetInterfaceManagedDeviceResult> managedDevices,

            string managedSubnetworkSize,

            string managementIp,

            int measuredDownstreamBandwidth,

            int measuredUpstreamBandwidth,

            string mediatype,

            ImmutableArray<Outputs.GetInterfaceMemberResult> members,

            int minLinks,

            string minLinksDown,

            string mode,

            string monitorBandwidth,

            int mtu,

            string mtuOverride,

            string name,

            string ndiscforward,

            string netbiosForward,

            string netflowSampler,

            int outbandwidth,

            int padtRetryTimeout,

            string password,

            int pingServStatus,

            int pollingInterval,

            string pppoeUnnumberedNegotiate,

            string pptpAuthType,

            string pptpClient,

            string pptpPassword,

            string pptpServerIp,

            int pptpTimeout,

            string pptpUser,

            string preserveSessionRoute,

            int priority,

            string priorityOverride,

            string proxyCaptivePortal,

            int reachableTime,

            string redundantInterface,

            string remoteIp,

            string replacemsgOverrideGroup,

            int ringRx,

            int ringTx,

            string role,

            string sampleDirection,

            int sampleRate,

            string scanBotnetConnections,

            string secondaryIp,

            ImmutableArray<Outputs.GetInterfaceSecondaryipResult> secondaryips,

            string securityExemptList,

            string securityExternalLogout,

            string securityExternalWeb,

            ImmutableArray<Outputs.GetInterfaceSecurityGroupResult> securityGroups,

            string securityMacAuthBypass,

            string securityMode,

            string securityRedirectUrl,

            string serviceName,

            string sflowSampler,

            int snmpIndex,

            string speed,

            int spilloverThreshold,

            string srcCheck,

            string status,

            string stp,

            string stpHaSecondary,

            string stpforward,

            string stpforwardMode,

            string subst,

            string substituteDstMac,

            int swcFirstCreate,

            int swcVlan,

            string @switch,

            string switchControllerAccessVlan,

            string switchControllerArpInspection,

            string switchControllerDhcpSnooping,

            string switchControllerDhcpSnoopingOption82,

            string switchControllerDhcpSnoopingVerifyMac,

            string switchControllerDynamic,

            string switchControllerFeature,

            string switchControllerIgmpSnooping,

            string switchControllerIgmpSnoopingFastLeave,

            string switchControllerIgmpSnoopingProxy,

            string switchControllerIotScanning,

            int switchControllerLearningLimit,

            int switchControllerMgmtVlan,

            string switchControllerNac,

            string switchControllerNetflowCollect,

            string switchControllerOffload,

            string switchControllerOffloadGw,

            string switchControllerOffloadIp,

            string switchControllerRspanMode,

            string switchControllerSourceIp,

            string switchControllerTrafficPolicy,

            string systemId,

            string systemIdType,

            ImmutableArray<Outputs.GetInterfaceTaggingResult> taggings,

            int tcpMss,

            string trunk,

            string trustIp1,

            string trustIp2,

            string trustIp3,

            string trustIp61,

            string trustIp62,

            string trustIp63,

            string type,

            string username,

            string vdom,

            string? vdomparam,

            int vindex,

            string vlanProtocol,

            string vlanforward,

            int vlanid,

            int vrf,

            string vrrpVirtualMac,

            ImmutableArray<Outputs.GetInterfaceVrrpResult> vrrps,

            string wccp,

            int weight,

            string winsIp)
        {
            AcName = acName;
            Aggregate = aggregate;
            AggregateType = aggregateType;
            Algorithm = algorithm;
            Alias = alias;
            Allowaccess = allowaccess;
            ApDiscover = apDiscover;
            Arpforward = arpforward;
            AuthCert = authCert;
            AuthPortalAddr = authPortalAddr;
            AuthType = authType;
            AutoAuthExtensionDevice = autoAuthExtensionDevice;
            BandwidthMeasureTime = bandwidthMeasureTime;
            Bfd = bfd;
            BfdDesiredMinTx = bfdDesiredMinTx;
            BfdDetectMult = bfdDetectMult;
            BfdRequiredMinRx = bfdRequiredMinRx;
            BroadcastForticlientDiscovery = broadcastForticlientDiscovery;
            BroadcastForward = broadcastForward;
            CaptivePortal = captivePortal;
            CliConnStatus = cliConnStatus;
            ClientOptions = clientOptions;
            Color = color;
            DedicatedTo = dedicatedTo;
            DefaultPurdueLevel = defaultPurdueLevel;
            Defaultgw = defaultgw;
            Description = description;
            DetectedPeerMtu = detectedPeerMtu;
            Detectprotocol = detectprotocol;
            Detectserver = detectserver;
            DeviceAccessList = deviceAccessList;
            DeviceIdentification = deviceIdentification;
            DeviceIdentificationActiveScan = deviceIdentificationActiveScan;
            DeviceNetscan = deviceNetscan;
            DeviceUserIdentification = deviceUserIdentification;
            Devindex = devindex;
            DhcpBroadcastFlag = dhcpBroadcastFlag;
            DhcpClasslessRouteAddition = dhcpClasslessRouteAddition;
            DhcpClientIdentifier = dhcpClientIdentifier;
            DhcpRelayAgentOption = dhcpRelayAgentOption;
            DhcpRelayCircuitId = dhcpRelayCircuitId;
            DhcpRelayInterface = dhcpRelayInterface;
            DhcpRelayInterfaceSelectMethod = dhcpRelayInterfaceSelectMethod;
            DhcpRelayIp = dhcpRelayIp;
            DhcpRelayLinkSelection = dhcpRelayLinkSelection;
            DhcpRelayRequestAllServer = dhcpRelayRequestAllServer;
            DhcpRelayService = dhcpRelayService;
            DhcpRelaySourceIp = dhcpRelaySourceIp;
            DhcpRelayType = dhcpRelayType;
            DhcpRenewTime = dhcpRenewTime;
            DhcpSmartRelay = dhcpSmartRelay;
            DhcpSnoopingServerLists = dhcpSnoopingServerLists;
            DiscRetryTimeout = discRetryTimeout;
            DisconnectThreshold = disconnectThreshold;
            Distance = distance;
            DnsServerOverride = dnsServerOverride;
            DnsServerProtocol = dnsServerProtocol;
            DropFragment = dropFragment;
            DropOverlappedFragment = dropOverlappedFragment;
            EapCaCert = eapCaCert;
            EapIdentity = eapIdentity;
            EapMethod = eapMethod;
            EapPassword = eapPassword;
            EapSupplicant = eapSupplicant;
            EapUserCert = eapUserCert;
            EgressShapingProfile = egressShapingProfile;
            EndpointCompliance = endpointCompliance;
            EstimatedDownstreamBandwidth = estimatedDownstreamBandwidth;
            EstimatedUpstreamBandwidth = estimatedUpstreamBandwidth;
            ExplicitFtpProxy = explicitFtpProxy;
            ExplicitWebProxy = explicitWebProxy;
            External = external;
            FailActionOnExtender = failActionOnExtender;
            FailAlertInterfaces = failAlertInterfaces;
            FailAlertMethod = failAlertMethod;
            FailDetect = failDetect;
            FailDetectOption = failDetectOption;
            Fortiheartbeat = fortiheartbeat;
            Fortilink = fortilink;
            FortilinkBackupLink = fortilinkBackupLink;
            FortilinkNeighborDetect = fortilinkNeighborDetect;
            FortilinkSplitInterface = fortilinkSplitInterface;
            FortilinkStacking = fortilinkStacking;
            ForwardDomain = forwardDomain;
            ForwardErrorCorrection = forwardErrorCorrection;
            Gwdetect = gwdetect;
            HaPriority = haPriority;
            IcmpAcceptRedirect = icmpAcceptRedirect;
            IcmpSendRedirect = icmpSendRedirect;
            Id = id;
            IdentAccept = identAccept;
            IdleTimeout = idleTimeout;
            IkeSamlServer = ikeSamlServer;
            Inbandwidth = inbandwidth;
            IngressShapingProfile = ingressShapingProfile;
            IngressSpilloverThreshold = ingressSpilloverThreshold;
            Data = @interface;
            Internal = @internal;
            Ip = ip;
            IpManagedByFortiipam = ipManagedByFortiipam;
            Ipmac = ipmac;
            IpsSnifferMode = ipsSnifferMode;
            Ipunnumbered = ipunnumbered;
            Ipv6s = ipv6s;
            L2forward = l2forward;
            LacpHaSecondary = lacpHaSecondary;
            LacpHaSlave = lacpHaSlave;
            LacpMode = lacpMode;
            LacpSpeed = lacpSpeed;
            LcpEchoInterval = lcpEchoInterval;
            LcpMaxEchoFails = lcpMaxEchoFails;
            LinkUpDelay = linkUpDelay;
            LldpNetworkPolicy = lldpNetworkPolicy;
            LldpReception = lldpReception;
            LldpTransmission = lldpTransmission;
            Macaddr = macaddr;
            ManagedDevices = managedDevices;
            ManagedSubnetworkSize = managedSubnetworkSize;
            ManagementIp = managementIp;
            MeasuredDownstreamBandwidth = measuredDownstreamBandwidth;
            MeasuredUpstreamBandwidth = measuredUpstreamBandwidth;
            Mediatype = mediatype;
            Members = members;
            MinLinks = minLinks;
            MinLinksDown = minLinksDown;
            Mode = mode;
            MonitorBandwidth = monitorBandwidth;
            Mtu = mtu;
            MtuOverride = mtuOverride;
            Name = name;
            Ndiscforward = ndiscforward;
            NetbiosForward = netbiosForward;
            NetflowSampler = netflowSampler;
            Outbandwidth = outbandwidth;
            PadtRetryTimeout = padtRetryTimeout;
            Password = password;
            PingServStatus = pingServStatus;
            PollingInterval = pollingInterval;
            PppoeUnnumberedNegotiate = pppoeUnnumberedNegotiate;
            PptpAuthType = pptpAuthType;
            PptpClient = pptpClient;
            PptpPassword = pptpPassword;
            PptpServerIp = pptpServerIp;
            PptpTimeout = pptpTimeout;
            PptpUser = pptpUser;
            PreserveSessionRoute = preserveSessionRoute;
            Priority = priority;
            PriorityOverride = priorityOverride;
            ProxyCaptivePortal = proxyCaptivePortal;
            ReachableTime = reachableTime;
            RedundantInterface = redundantInterface;
            RemoteIp = remoteIp;
            ReplacemsgOverrideGroup = replacemsgOverrideGroup;
            RingRx = ringRx;
            RingTx = ringTx;
            Role = role;
            SampleDirection = sampleDirection;
            SampleRate = sampleRate;
            ScanBotnetConnections = scanBotnetConnections;
            SecondaryIp = secondaryIp;
            Secondaryips = secondaryips;
            SecurityExemptList = securityExemptList;
            SecurityExternalLogout = securityExternalLogout;
            SecurityExternalWeb = securityExternalWeb;
            SecurityGroups = securityGroups;
            SecurityMacAuthBypass = securityMacAuthBypass;
            SecurityMode = securityMode;
            SecurityRedirectUrl = securityRedirectUrl;
            ServiceName = serviceName;
            SflowSampler = sflowSampler;
            SnmpIndex = snmpIndex;
            Speed = speed;
            SpilloverThreshold = spilloverThreshold;
            SrcCheck = srcCheck;
            Status = status;
            Stp = stp;
            StpHaSecondary = stpHaSecondary;
            Stpforward = stpforward;
            StpforwardMode = stpforwardMode;
            Subst = subst;
            SubstituteDstMac = substituteDstMac;
            SwcFirstCreate = swcFirstCreate;
            SwcVlan = swcVlan;
            Switch = @switch;
            SwitchControllerAccessVlan = switchControllerAccessVlan;
            SwitchControllerArpInspection = switchControllerArpInspection;
            SwitchControllerDhcpSnooping = switchControllerDhcpSnooping;
            SwitchControllerDhcpSnoopingOption82 = switchControllerDhcpSnoopingOption82;
            SwitchControllerDhcpSnoopingVerifyMac = switchControllerDhcpSnoopingVerifyMac;
            SwitchControllerDynamic = switchControllerDynamic;
            SwitchControllerFeature = switchControllerFeature;
            SwitchControllerIgmpSnooping = switchControllerIgmpSnooping;
            SwitchControllerIgmpSnoopingFastLeave = switchControllerIgmpSnoopingFastLeave;
            SwitchControllerIgmpSnoopingProxy = switchControllerIgmpSnoopingProxy;
            SwitchControllerIotScanning = switchControllerIotScanning;
            SwitchControllerLearningLimit = switchControllerLearningLimit;
            SwitchControllerMgmtVlan = switchControllerMgmtVlan;
            SwitchControllerNac = switchControllerNac;
            SwitchControllerNetflowCollect = switchControllerNetflowCollect;
            SwitchControllerOffload = switchControllerOffload;
            SwitchControllerOffloadGw = switchControllerOffloadGw;
            SwitchControllerOffloadIp = switchControllerOffloadIp;
            SwitchControllerRspanMode = switchControllerRspanMode;
            SwitchControllerSourceIp = switchControllerSourceIp;
            SwitchControllerTrafficPolicy = switchControllerTrafficPolicy;
            SystemId = systemId;
            SystemIdType = systemIdType;
            Taggings = taggings;
            TcpMss = tcpMss;
            Trunk = trunk;
            TrustIp1 = trustIp1;
            TrustIp2 = trustIp2;
            TrustIp3 = trustIp3;
            TrustIp61 = trustIp61;
            TrustIp62 = trustIp62;
            TrustIp63 = trustIp63;
            Type = type;
            Username = username;
            Vdom = vdom;
            Vdomparam = vdomparam;
            Vindex = vindex;
            VlanProtocol = vlanProtocol;
            Vlanforward = vlanforward;
            Vlanid = vlanid;
            Vrf = vrf;
            VrrpVirtualMac = vrrpVirtualMac;
            Vrrps = vrrps;
            Wccp = wccp;
            Weight = weight;
            WinsIp = winsIp;
        }
    }
}
