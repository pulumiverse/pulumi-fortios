// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System.Dhcp
{
    /// <summary>
    /// Configure DHCP servers.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.System.Dhcp.Server("trname", new()
    ///     {
    ///         DnsService = "default",
    ///         Fosid = 1,
    ///         Interface = "port2",
    ///         IpRanges = new[]
    ///         {
    ///             new Fortios.System.Dhcp.Inputs.ServerIpRangeArgs
    ///             {
    ///                 EndIp = "1.1.1.22",
    ///                 Id = 1,
    ///                 StartIp = "1.1.1.1",
    ///             },
    ///         },
    ///         Netmask = "255.255.255.0",
    ///         NtpServer1 = "192.168.52.22",
    ///         Status = "disable",
    ///         Timezone = "00",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// SystemDhcp Server can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/dhcp/server:Server labelname {{fosid}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/dhcp/server:Server labelname {{fosid}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:system/dhcp/server:Server")]
    public partial class Server : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable/disable auto configuration. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("autoConfiguration")]
        public Output<string> AutoConfiguration { get; private set; } = null!;

        /// <summary>
        /// Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("autoManagedStatus")]
        public Output<string> AutoManagedStatus { get; private set; } = null!;

        /// <summary>
        /// Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
        /// </summary>
        [Output("conflictedIpTimeout")]
        public Output<int> ConflictedIpTimeout { get; private set; } = null!;

        /// <summary>
        /// DDNS authentication mode. Valid values: `disable`, `tsig`.
        /// </summary>
        [Output("ddnsAuth")]
        public Output<string> DdnsAuth { get; private set; } = null!;

        /// <summary>
        /// DDNS update key (base 64 encoding).
        /// </summary>
        [Output("ddnsKey")]
        public Output<string> DdnsKey { get; private set; } = null!;

        /// <summary>
        /// DDNS update key name.
        /// </summary>
        [Output("ddnsKeyname")]
        public Output<string> DdnsKeyname { get; private set; } = null!;

        /// <summary>
        /// DDNS server IP.
        /// </summary>
        [Output("ddnsServerIp")]
        public Output<string> DdnsServerIp { get; private set; } = null!;

        /// <summary>
        /// TTL.
        /// </summary>
        [Output("ddnsTtl")]
        public Output<int> DdnsTtl { get; private set; } = null!;

        /// <summary>
        /// Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("ddnsUpdate")]
        public Output<string> DdnsUpdate { get; private set; } = null!;

        /// <summary>
        /// Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("ddnsUpdateOverride")]
        public Output<string> DdnsUpdateOverride { get; private set; } = null!;

        /// <summary>
        /// Zone of your domain name (ex. DDNS.com).
        /// </summary>
        [Output("ddnsZone")]
        public Output<string> DdnsZone { get; private set; } = null!;

        /// <summary>
        /// Default gateway IP address assigned by the DHCP server.
        /// </summary>
        [Output("defaultGateway")]
        public Output<string> DefaultGateway { get; private set; } = null!;

        /// <summary>
        /// Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("dhcpSettingsFromFortiipam")]
        public Output<string> DhcpSettingsFromFortiipam { get; private set; } = null!;

        /// <summary>
        /// DNS server 1.
        /// </summary>
        [Output("dnsServer1")]
        public Output<string> DnsServer1 { get; private set; } = null!;

        /// <summary>
        /// DNS server 2.
        /// </summary>
        [Output("dnsServer2")]
        public Output<string> DnsServer2 { get; private set; } = null!;

        /// <summary>
        /// DNS server 3.
        /// </summary>
        [Output("dnsServer3")]
        public Output<string> DnsServer3 { get; private set; } = null!;

        /// <summary>
        /// DNS server 4.
        /// </summary>
        [Output("dnsServer4")]
        public Output<string> DnsServer4 { get; private set; } = null!;

        /// <summary>
        /// Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        /// </summary>
        [Output("dnsService")]
        public Output<string> DnsService { get; private set; } = null!;

        /// <summary>
        /// Domain name suffix for the IP addresses that the DHCP server assigns to clients.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `exclude_range` block is documented below.
        /// </summary>
        [Output("excludeRanges")]
        public Output<ImmutableArray<Outputs.ServerExcludeRange>> ExcludeRanges { get; private set; } = null!;

        /// <summary>
        /// Name of the boot file on the TFTP server.
        /// </summary>
        [Output("filename")]
        public Output<string> Filename { get; private set; } = null!;

        /// <summary>
        /// Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("forticlientOnNetStatus")]
        public Output<string> ForticlientOnNetStatus { get; private set; } = null!;

        /// <summary>
        /// ID.
        /// </summary>
        [Output("fosid")]
        public Output<int> Fosid { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// DHCP server can assign IP configurations to clients connected to this interface.
        /// </summary>
        [Output("interface")]
        public Output<string> Interface { get; private set; } = null!;

        /// <summary>
        /// Method used to assign client IP. Valid values: `range`, `usrgrp`.
        /// </summary>
        [Output("ipMode")]
        public Output<string> IpMode { get; private set; } = null!;

        /// <summary>
        /// DHCP IP range configuration. The structure of `ip_range` block is documented below.
        /// </summary>
        [Output("ipRanges")]
        public Output<ImmutableArray<Outputs.ServerIpRange>> IpRanges { get; private set; } = null!;

        /// <summary>
        /// DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
        /// </summary>
        [Output("ipsecLeaseHold")]
        public Output<int> IpsecLeaseHold { get; private set; } = null!;

        /// <summary>
        /// Lease time in seconds, 0 means unlimited.
        /// </summary>
        [Output("leaseTime")]
        public Output<int> LeaseTime { get; private set; } = null!;

        /// <summary>
        /// MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
        /// </summary>
        [Output("macAclDefaultAction")]
        public Output<string> MacAclDefaultAction { get; private set; } = null!;

        /// <summary>
        /// Netmask assigned by the DHCP server.
        /// </summary>
        [Output("netmask")]
        public Output<string> Netmask { get; private set; } = null!;

        /// <summary>
        /// IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
        /// </summary>
        [Output("nextServer")]
        public Output<string> NextServer { get; private set; } = null!;

        /// <summary>
        /// NTP server 1.
        /// </summary>
        [Output("ntpServer1")]
        public Output<string> NtpServer1 { get; private set; } = null!;

        /// <summary>
        /// NTP server 2.
        /// </summary>
        [Output("ntpServer2")]
        public Output<string> NtpServer2 { get; private set; } = null!;

        /// <summary>
        /// NTP server 3.
        /// </summary>
        [Output("ntpServer3")]
        public Output<string> NtpServer3 { get; private set; } = null!;

        /// <summary>
        /// Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        /// </summary>
        [Output("ntpService")]
        public Output<string> NtpService { get; private set; } = null!;

        /// <summary>
        /// DHCP options. The structure of `options` block is documented below.
        /// </summary>
        [Output("options")]
        public Output<ImmutableArray<Outputs.ServerOption>> Options { get; private set; } = null!;

        /// <summary>
        /// Relay agent IP.
        /// </summary>
        [Output("relayAgent")]
        public Output<string> RelayAgent { get; private set; } = null!;

        /// <summary>
        /// Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reserved_address` block is documented below.
        /// </summary>
        [Output("reservedAddresses")]
        public Output<ImmutableArray<Outputs.ServerReservedAddress>> ReservedAddresses { get; private set; } = null!;

        /// <summary>
        /// DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
        /// </summary>
        [Output("serverType")]
        public Output<string> ServerType { get; private set; } = null!;

        /// <summary>
        /// Enable/disable shared subnet. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("sharedSubnet")]
        public Output<string> SharedSubnet { get; private set; } = null!;

        /// <summary>
        /// Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftp_server` block is documented below.
        /// </summary>
        [Output("tftpServers")]
        public Output<ImmutableArray<Outputs.ServerTftpServer>> TftpServers { get; private set; } = null!;

        /// <summary>
        /// Select the time zone to be assigned to DHCP clients.
        /// </summary>
        [Output("timezone")]
        public Output<string> Timezone { get; private set; } = null!;

        /// <summary>
        /// Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
        /// </summary>
        [Output("timezoneOption")]
        public Output<string> TimezoneOption { get; private set; } = null!;

        /// <summary>
        /// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("vciMatch")]
        public Output<string> VciMatch { get; private set; } = null!;

        /// <summary>
        /// One or more VCI strings in quotes separated by spaces. The structure of `vci_string` block is documented below.
        /// </summary>
        [Output("vciStrings")]
        public Output<ImmutableArray<Outputs.ServerVciString>> VciStrings { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
        /// </summary>
        [Output("wifiAc1")]
        public Output<string> WifiAc1 { get; private set; } = null!;

        /// <summary>
        /// WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
        /// </summary>
        [Output("wifiAc2")]
        public Output<string> WifiAc2 { get; private set; } = null!;

        /// <summary>
        /// WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
        /// </summary>
        [Output("wifiAc3")]
        public Output<string> WifiAc3 { get; private set; } = null!;

        /// <summary>
        /// Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
        /// </summary>
        [Output("wifiAcService")]
        public Output<string> WifiAcService { get; private set; } = null!;

        /// <summary>
        /// WINS server 1.
        /// </summary>
        [Output("winsServer1")]
        public Output<string> WinsServer1 { get; private set; } = null!;

        /// <summary>
        /// WINS server 2.
        /// </summary>
        [Output("winsServer2")]
        public Output<string> WinsServer2 { get; private set; } = null!;


        /// <summary>
        /// Create a Server resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Server(string name, ServerArgs args, CustomResourceOptions? options = null)
            : base("fortios:system/dhcp/server:Server", name, args ?? new ServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Server(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
            : base("fortios:system/dhcp/server:Server", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
                AdditionalSecretOutputs =
                {
                    "ddnsKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Server resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Server Get(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
        {
            return new Server(name, id, state, options);
        }
    }

    public sealed class ServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable auto configuration. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("autoConfiguration")]
        public Input<string>? AutoConfiguration { get; set; }

        /// <summary>
        /// Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("autoManagedStatus")]
        public Input<string>? AutoManagedStatus { get; set; }

        /// <summary>
        /// Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
        /// </summary>
        [Input("conflictedIpTimeout")]
        public Input<int>? ConflictedIpTimeout { get; set; }

        /// <summary>
        /// DDNS authentication mode. Valid values: `disable`, `tsig`.
        /// </summary>
        [Input("ddnsAuth")]
        public Input<string>? DdnsAuth { get; set; }

        [Input("ddnsKey")]
        private Input<string>? _ddnsKey;

        /// <summary>
        /// DDNS update key (base 64 encoding).
        /// </summary>
        public Input<string>? DdnsKey
        {
            get => _ddnsKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _ddnsKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// DDNS update key name.
        /// </summary>
        [Input("ddnsKeyname")]
        public Input<string>? DdnsKeyname { get; set; }

        /// <summary>
        /// DDNS server IP.
        /// </summary>
        [Input("ddnsServerIp")]
        public Input<string>? DdnsServerIp { get; set; }

        /// <summary>
        /// TTL.
        /// </summary>
        [Input("ddnsTtl")]
        public Input<int>? DdnsTtl { get; set; }

        /// <summary>
        /// Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("ddnsUpdate")]
        public Input<string>? DdnsUpdate { get; set; }

        /// <summary>
        /// Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("ddnsUpdateOverride")]
        public Input<string>? DdnsUpdateOverride { get; set; }

        /// <summary>
        /// Zone of your domain name (ex. DDNS.com).
        /// </summary>
        [Input("ddnsZone")]
        public Input<string>? DdnsZone { get; set; }

        /// <summary>
        /// Default gateway IP address assigned by the DHCP server.
        /// </summary>
        [Input("defaultGateway")]
        public Input<string>? DefaultGateway { get; set; }

        /// <summary>
        /// Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("dhcpSettingsFromFortiipam")]
        public Input<string>? DhcpSettingsFromFortiipam { get; set; }

        /// <summary>
        /// DNS server 1.
        /// </summary>
        [Input("dnsServer1")]
        public Input<string>? DnsServer1 { get; set; }

        /// <summary>
        /// DNS server 2.
        /// </summary>
        [Input("dnsServer2")]
        public Input<string>? DnsServer2 { get; set; }

        /// <summary>
        /// DNS server 3.
        /// </summary>
        [Input("dnsServer3")]
        public Input<string>? DnsServer3 { get; set; }

        /// <summary>
        /// DNS server 4.
        /// </summary>
        [Input("dnsServer4")]
        public Input<string>? DnsServer4 { get; set; }

        /// <summary>
        /// Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        /// </summary>
        [Input("dnsService")]
        public Input<string>? DnsService { get; set; }

        /// <summary>
        /// Domain name suffix for the IP addresses that the DHCP server assigns to clients.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        [Input("excludeRanges")]
        private InputList<Inputs.ServerExcludeRangeArgs>? _excludeRanges;

        /// <summary>
        /// Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `exclude_range` block is documented below.
        /// </summary>
        public InputList<Inputs.ServerExcludeRangeArgs> ExcludeRanges
        {
            get => _excludeRanges ?? (_excludeRanges = new InputList<Inputs.ServerExcludeRangeArgs>());
            set => _excludeRanges = value;
        }

        /// <summary>
        /// Name of the boot file on the TFTP server.
        /// </summary>
        [Input("filename")]
        public Input<string>? Filename { get; set; }

        /// <summary>
        /// Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("forticlientOnNetStatus")]
        public Input<string>? ForticlientOnNetStatus { get; set; }

        /// <summary>
        /// ID.
        /// </summary>
        [Input("fosid")]
        public Input<int>? Fosid { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// DHCP server can assign IP configurations to clients connected to this interface.
        /// </summary>
        [Input("interface", required: true)]
        public Input<string> Interface { get; set; } = null!;

        /// <summary>
        /// Method used to assign client IP. Valid values: `range`, `usrgrp`.
        /// </summary>
        [Input("ipMode")]
        public Input<string>? IpMode { get; set; }

        [Input("ipRanges")]
        private InputList<Inputs.ServerIpRangeArgs>? _ipRanges;

        /// <summary>
        /// DHCP IP range configuration. The structure of `ip_range` block is documented below.
        /// </summary>
        public InputList<Inputs.ServerIpRangeArgs> IpRanges
        {
            get => _ipRanges ?? (_ipRanges = new InputList<Inputs.ServerIpRangeArgs>());
            set => _ipRanges = value;
        }

        /// <summary>
        /// DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
        /// </summary>
        [Input("ipsecLeaseHold")]
        public Input<int>? IpsecLeaseHold { get; set; }

        /// <summary>
        /// Lease time in seconds, 0 means unlimited.
        /// </summary>
        [Input("leaseTime")]
        public Input<int>? LeaseTime { get; set; }

        /// <summary>
        /// MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
        /// </summary>
        [Input("macAclDefaultAction")]
        public Input<string>? MacAclDefaultAction { get; set; }

        /// <summary>
        /// Netmask assigned by the DHCP server.
        /// </summary>
        [Input("netmask", required: true)]
        public Input<string> Netmask { get; set; } = null!;

        /// <summary>
        /// IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
        /// </summary>
        [Input("nextServer")]
        public Input<string>? NextServer { get; set; }

        /// <summary>
        /// NTP server 1.
        /// </summary>
        [Input("ntpServer1")]
        public Input<string>? NtpServer1 { get; set; }

        /// <summary>
        /// NTP server 2.
        /// </summary>
        [Input("ntpServer2")]
        public Input<string>? NtpServer2 { get; set; }

        /// <summary>
        /// NTP server 3.
        /// </summary>
        [Input("ntpServer3")]
        public Input<string>? NtpServer3 { get; set; }

        /// <summary>
        /// Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        /// </summary>
        [Input("ntpService")]
        public Input<string>? NtpService { get; set; }

        [Input("options")]
        private InputList<Inputs.ServerOptionArgs>? _options;

        /// <summary>
        /// DHCP options. The structure of `options` block is documented below.
        /// </summary>
        public InputList<Inputs.ServerOptionArgs> Options
        {
            get => _options ?? (_options = new InputList<Inputs.ServerOptionArgs>());
            set => _options = value;
        }

        /// <summary>
        /// Relay agent IP.
        /// </summary>
        [Input("relayAgent")]
        public Input<string>? RelayAgent { get; set; }

        [Input("reservedAddresses")]
        private InputList<Inputs.ServerReservedAddressArgs>? _reservedAddresses;

        /// <summary>
        /// Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reserved_address` block is documented below.
        /// </summary>
        public InputList<Inputs.ServerReservedAddressArgs> ReservedAddresses
        {
            get => _reservedAddresses ?? (_reservedAddresses = new InputList<Inputs.ServerReservedAddressArgs>());
            set => _reservedAddresses = value;
        }

        /// <summary>
        /// DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
        /// </summary>
        [Input("serverType")]
        public Input<string>? ServerType { get; set; }

        /// <summary>
        /// Enable/disable shared subnet. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("sharedSubnet")]
        public Input<string>? SharedSubnet { get; set; }

        /// <summary>
        /// Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tftpServers")]
        private InputList<Inputs.ServerTftpServerArgs>? _tftpServers;

        /// <summary>
        /// One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftp_server` block is documented below.
        /// </summary>
        public InputList<Inputs.ServerTftpServerArgs> TftpServers
        {
            get => _tftpServers ?? (_tftpServers = new InputList<Inputs.ServerTftpServerArgs>());
            set => _tftpServers = value;
        }

        /// <summary>
        /// Select the time zone to be assigned to DHCP clients.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
        /// </summary>
        [Input("timezoneOption")]
        public Input<string>? TimezoneOption { get; set; }

        /// <summary>
        /// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("vciMatch")]
        public Input<string>? VciMatch { get; set; }

        [Input("vciStrings")]
        private InputList<Inputs.ServerVciStringArgs>? _vciStrings;

        /// <summary>
        /// One or more VCI strings in quotes separated by spaces. The structure of `vci_string` block is documented below.
        /// </summary>
        public InputList<Inputs.ServerVciStringArgs> VciStrings
        {
            get => _vciStrings ?? (_vciStrings = new InputList<Inputs.ServerVciStringArgs>());
            set => _vciStrings = value;
        }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
        /// </summary>
        [Input("wifiAc1")]
        public Input<string>? WifiAc1 { get; set; }

        /// <summary>
        /// WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
        /// </summary>
        [Input("wifiAc2")]
        public Input<string>? WifiAc2 { get; set; }

        /// <summary>
        /// WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
        /// </summary>
        [Input("wifiAc3")]
        public Input<string>? WifiAc3 { get; set; }

        /// <summary>
        /// Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
        /// </summary>
        [Input("wifiAcService")]
        public Input<string>? WifiAcService { get; set; }

        /// <summary>
        /// WINS server 1.
        /// </summary>
        [Input("winsServer1")]
        public Input<string>? WinsServer1 { get; set; }

        /// <summary>
        /// WINS server 2.
        /// </summary>
        [Input("winsServer2")]
        public Input<string>? WinsServer2 { get; set; }

        public ServerArgs()
        {
        }
        public static new ServerArgs Empty => new ServerArgs();
    }

    public sealed class ServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable auto configuration. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("autoConfiguration")]
        public Input<string>? AutoConfiguration { get; set; }

        /// <summary>
        /// Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("autoManagedStatus")]
        public Input<string>? AutoManagedStatus { get; set; }

        /// <summary>
        /// Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
        /// </summary>
        [Input("conflictedIpTimeout")]
        public Input<int>? ConflictedIpTimeout { get; set; }

        /// <summary>
        /// DDNS authentication mode. Valid values: `disable`, `tsig`.
        /// </summary>
        [Input("ddnsAuth")]
        public Input<string>? DdnsAuth { get; set; }

        [Input("ddnsKey")]
        private Input<string>? _ddnsKey;

        /// <summary>
        /// DDNS update key (base 64 encoding).
        /// </summary>
        public Input<string>? DdnsKey
        {
            get => _ddnsKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _ddnsKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// DDNS update key name.
        /// </summary>
        [Input("ddnsKeyname")]
        public Input<string>? DdnsKeyname { get; set; }

        /// <summary>
        /// DDNS server IP.
        /// </summary>
        [Input("ddnsServerIp")]
        public Input<string>? DdnsServerIp { get; set; }

        /// <summary>
        /// TTL.
        /// </summary>
        [Input("ddnsTtl")]
        public Input<int>? DdnsTtl { get; set; }

        /// <summary>
        /// Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("ddnsUpdate")]
        public Input<string>? DdnsUpdate { get; set; }

        /// <summary>
        /// Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("ddnsUpdateOverride")]
        public Input<string>? DdnsUpdateOverride { get; set; }

        /// <summary>
        /// Zone of your domain name (ex. DDNS.com).
        /// </summary>
        [Input("ddnsZone")]
        public Input<string>? DdnsZone { get; set; }

        /// <summary>
        /// Default gateway IP address assigned by the DHCP server.
        /// </summary>
        [Input("defaultGateway")]
        public Input<string>? DefaultGateway { get; set; }

        /// <summary>
        /// Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("dhcpSettingsFromFortiipam")]
        public Input<string>? DhcpSettingsFromFortiipam { get; set; }

        /// <summary>
        /// DNS server 1.
        /// </summary>
        [Input("dnsServer1")]
        public Input<string>? DnsServer1 { get; set; }

        /// <summary>
        /// DNS server 2.
        /// </summary>
        [Input("dnsServer2")]
        public Input<string>? DnsServer2 { get; set; }

        /// <summary>
        /// DNS server 3.
        /// </summary>
        [Input("dnsServer3")]
        public Input<string>? DnsServer3 { get; set; }

        /// <summary>
        /// DNS server 4.
        /// </summary>
        [Input("dnsServer4")]
        public Input<string>? DnsServer4 { get; set; }

        /// <summary>
        /// Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        /// </summary>
        [Input("dnsService")]
        public Input<string>? DnsService { get; set; }

        /// <summary>
        /// Domain name suffix for the IP addresses that the DHCP server assigns to clients.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        [Input("excludeRanges")]
        private InputList<Inputs.ServerExcludeRangeGetArgs>? _excludeRanges;

        /// <summary>
        /// Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `exclude_range` block is documented below.
        /// </summary>
        public InputList<Inputs.ServerExcludeRangeGetArgs> ExcludeRanges
        {
            get => _excludeRanges ?? (_excludeRanges = new InputList<Inputs.ServerExcludeRangeGetArgs>());
            set => _excludeRanges = value;
        }

        /// <summary>
        /// Name of the boot file on the TFTP server.
        /// </summary>
        [Input("filename")]
        public Input<string>? Filename { get; set; }

        /// <summary>
        /// Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("forticlientOnNetStatus")]
        public Input<string>? ForticlientOnNetStatus { get; set; }

        /// <summary>
        /// ID.
        /// </summary>
        [Input("fosid")]
        public Input<int>? Fosid { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// DHCP server can assign IP configurations to clients connected to this interface.
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// Method used to assign client IP. Valid values: `range`, `usrgrp`.
        /// </summary>
        [Input("ipMode")]
        public Input<string>? IpMode { get; set; }

        [Input("ipRanges")]
        private InputList<Inputs.ServerIpRangeGetArgs>? _ipRanges;

        /// <summary>
        /// DHCP IP range configuration. The structure of `ip_range` block is documented below.
        /// </summary>
        public InputList<Inputs.ServerIpRangeGetArgs> IpRanges
        {
            get => _ipRanges ?? (_ipRanges = new InputList<Inputs.ServerIpRangeGetArgs>());
            set => _ipRanges = value;
        }

        /// <summary>
        /// DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
        /// </summary>
        [Input("ipsecLeaseHold")]
        public Input<int>? IpsecLeaseHold { get; set; }

        /// <summary>
        /// Lease time in seconds, 0 means unlimited.
        /// </summary>
        [Input("leaseTime")]
        public Input<int>? LeaseTime { get; set; }

        /// <summary>
        /// MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
        /// </summary>
        [Input("macAclDefaultAction")]
        public Input<string>? MacAclDefaultAction { get; set; }

        /// <summary>
        /// Netmask assigned by the DHCP server.
        /// </summary>
        [Input("netmask")]
        public Input<string>? Netmask { get; set; }

        /// <summary>
        /// IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
        /// </summary>
        [Input("nextServer")]
        public Input<string>? NextServer { get; set; }

        /// <summary>
        /// NTP server 1.
        /// </summary>
        [Input("ntpServer1")]
        public Input<string>? NtpServer1 { get; set; }

        /// <summary>
        /// NTP server 2.
        /// </summary>
        [Input("ntpServer2")]
        public Input<string>? NtpServer2 { get; set; }

        /// <summary>
        /// NTP server 3.
        /// </summary>
        [Input("ntpServer3")]
        public Input<string>? NtpServer3 { get; set; }

        /// <summary>
        /// Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        /// </summary>
        [Input("ntpService")]
        public Input<string>? NtpService { get; set; }

        [Input("options")]
        private InputList<Inputs.ServerOptionGetArgs>? _options;

        /// <summary>
        /// DHCP options. The structure of `options` block is documented below.
        /// </summary>
        public InputList<Inputs.ServerOptionGetArgs> Options
        {
            get => _options ?? (_options = new InputList<Inputs.ServerOptionGetArgs>());
            set => _options = value;
        }

        /// <summary>
        /// Relay agent IP.
        /// </summary>
        [Input("relayAgent")]
        public Input<string>? RelayAgent { get; set; }

        [Input("reservedAddresses")]
        private InputList<Inputs.ServerReservedAddressGetArgs>? _reservedAddresses;

        /// <summary>
        /// Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reserved_address` block is documented below.
        /// </summary>
        public InputList<Inputs.ServerReservedAddressGetArgs> ReservedAddresses
        {
            get => _reservedAddresses ?? (_reservedAddresses = new InputList<Inputs.ServerReservedAddressGetArgs>());
            set => _reservedAddresses = value;
        }

        /// <summary>
        /// DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
        /// </summary>
        [Input("serverType")]
        public Input<string>? ServerType { get; set; }

        /// <summary>
        /// Enable/disable shared subnet. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("sharedSubnet")]
        public Input<string>? SharedSubnet { get; set; }

        /// <summary>
        /// Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tftpServers")]
        private InputList<Inputs.ServerTftpServerGetArgs>? _tftpServers;

        /// <summary>
        /// One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftp_server` block is documented below.
        /// </summary>
        public InputList<Inputs.ServerTftpServerGetArgs> TftpServers
        {
            get => _tftpServers ?? (_tftpServers = new InputList<Inputs.ServerTftpServerGetArgs>());
            set => _tftpServers = value;
        }

        /// <summary>
        /// Select the time zone to be assigned to DHCP clients.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
        /// </summary>
        [Input("timezoneOption")]
        public Input<string>? TimezoneOption { get; set; }

        /// <summary>
        /// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("vciMatch")]
        public Input<string>? VciMatch { get; set; }

        [Input("vciStrings")]
        private InputList<Inputs.ServerVciStringGetArgs>? _vciStrings;

        /// <summary>
        /// One or more VCI strings in quotes separated by spaces. The structure of `vci_string` block is documented below.
        /// </summary>
        public InputList<Inputs.ServerVciStringGetArgs> VciStrings
        {
            get => _vciStrings ?? (_vciStrings = new InputList<Inputs.ServerVciStringGetArgs>());
            set => _vciStrings = value;
        }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
        /// </summary>
        [Input("wifiAc1")]
        public Input<string>? WifiAc1 { get; set; }

        /// <summary>
        /// WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
        /// </summary>
        [Input("wifiAc2")]
        public Input<string>? WifiAc2 { get; set; }

        /// <summary>
        /// WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
        /// </summary>
        [Input("wifiAc3")]
        public Input<string>? WifiAc3 { get; set; }

        /// <summary>
        /// Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
        /// </summary>
        [Input("wifiAcService")]
        public Input<string>? WifiAcService { get; set; }

        /// <summary>
        /// WINS server 1.
        /// </summary>
        [Input("winsServer1")]
        public Input<string>? WinsServer1 { get; set; }

        /// <summary>
        /// WINS server 2.
        /// </summary>
        [Input("winsServer2")]
        public Input<string>? WinsServer2 { get; set; }

        public ServerState()
        {
        }
        public static new ServerState Empty => new ServerState();
    }
}
