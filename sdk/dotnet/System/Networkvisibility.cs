// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System
{
    /// <summary>
    /// Configure network visibility settings.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.System.Networkvisibility("trname", new()
    ///     {
    ///         DestinationHostnameVisibility = "enable",
    ///         DestinationLocation = "enable",
    ///         DestinationVisibility = "enable",
    ///         HostnameLimit = 5000,
    ///         HostnameTtl = 86400,
    ///         SourceLocation = "enable",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// System NetworkVisibility can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/networkvisibility:Networkvisibility labelname SystemNetworkVisibility
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/networkvisibility:Networkvisibility labelname SystemNetworkVisibility
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:system/networkvisibility:Networkvisibility")]
    public partial class Networkvisibility : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable/disable logging of destination hostname visibility. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("destinationHostnameVisibility")]
        public Output<string> DestinationHostnameVisibility { get; private set; } = null!;

        /// <summary>
        /// Enable/disable logging of destination geographical location visibility. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("destinationLocation")]
        public Output<string> DestinationLocation { get; private set; } = null!;

        /// <summary>
        /// Enable/disable logging of destination visibility. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("destinationVisibility")]
        public Output<string> DestinationVisibility { get; private set; } = null!;

        /// <summary>
        /// Limit of the number of hostname table entries (0 - 50000).
        /// </summary>
        [Output("hostnameLimit")]
        public Output<int> HostnameLimit { get; private set; } = null!;

        /// <summary>
        /// TTL of hostname table entries (60 - 86400).
        /// </summary>
        [Output("hostnameTtl")]
        public Output<int> HostnameTtl { get; private set; } = null!;

        /// <summary>
        /// Enable/disable logging of source geographical location visibility. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("sourceLocation")]
        public Output<string> SourceLocation { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Networkvisibility resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Networkvisibility(string name, NetworkvisibilityArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:system/networkvisibility:Networkvisibility", name, args ?? new NetworkvisibilityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Networkvisibility(string name, Input<string> id, NetworkvisibilityState? state = null, CustomResourceOptions? options = null)
            : base("fortios:system/networkvisibility:Networkvisibility", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Networkvisibility resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Networkvisibility Get(string name, Input<string> id, NetworkvisibilityState? state = null, CustomResourceOptions? options = null)
        {
            return new Networkvisibility(name, id, state, options);
        }
    }

    public sealed class NetworkvisibilityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable logging of destination hostname visibility. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("destinationHostnameVisibility")]
        public Input<string>? DestinationHostnameVisibility { get; set; }

        /// <summary>
        /// Enable/disable logging of destination geographical location visibility. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("destinationLocation")]
        public Input<string>? DestinationLocation { get; set; }

        /// <summary>
        /// Enable/disable logging of destination visibility. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("destinationVisibility")]
        public Input<string>? DestinationVisibility { get; set; }

        /// <summary>
        /// Limit of the number of hostname table entries (0 - 50000).
        /// </summary>
        [Input("hostnameLimit")]
        public Input<int>? HostnameLimit { get; set; }

        /// <summary>
        /// TTL of hostname table entries (60 - 86400).
        /// </summary>
        [Input("hostnameTtl")]
        public Input<int>? HostnameTtl { get; set; }

        /// <summary>
        /// Enable/disable logging of source geographical location visibility. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("sourceLocation")]
        public Input<string>? SourceLocation { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public NetworkvisibilityArgs()
        {
        }
        public static new NetworkvisibilityArgs Empty => new NetworkvisibilityArgs();
    }

    public sealed class NetworkvisibilityState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable logging of destination hostname visibility. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("destinationHostnameVisibility")]
        public Input<string>? DestinationHostnameVisibility { get; set; }

        /// <summary>
        /// Enable/disable logging of destination geographical location visibility. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("destinationLocation")]
        public Input<string>? DestinationLocation { get; set; }

        /// <summary>
        /// Enable/disable logging of destination visibility. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("destinationVisibility")]
        public Input<string>? DestinationVisibility { get; set; }

        /// <summary>
        /// Limit of the number of hostname table entries (0 - 50000).
        /// </summary>
        [Input("hostnameLimit")]
        public Input<int>? HostnameLimit { get; set; }

        /// <summary>
        /// TTL of hostname table entries (60 - 86400).
        /// </summary>
        [Input("hostnameTtl")]
        public Input<int>? HostnameTtl { get; set; }

        /// <summary>
        /// Enable/disable logging of source geographical location visibility. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("sourceLocation")]
        public Input<string>? SourceLocation { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public NetworkvisibilityState()
        {
        }
        public static new NetworkvisibilityState Empty => new NetworkvisibilityState();
    }
}
