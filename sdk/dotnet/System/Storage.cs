// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System
{
    /// <summary>
    /// Configure logical storage.
    /// 
    /// ## Import
    /// 
    /// System Storage can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/storage:Storage labelname {{name}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/storage:Storage labelname {{name}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:system/storage:Storage")]
    public partial class Storage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Partition device.
        /// </summary>
        [Output("device")]
        public Output<string> Device { get; private set; } = null!;

        /// <summary>
        /// The physical status of current media. Valid values: `enable`, `disable`, `fail`.
        /// </summary>
        [Output("mediaStatus")]
        public Output<string> MediaStatus { get; private set; } = null!;

        /// <summary>
        /// Storage name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Set storage order.
        /// </summary>
        [Output("order")]
        public Output<int> Order { get; private set; } = null!;

        /// <summary>
        /// Label of underlying partition.
        /// </summary>
        [Output("partition")]
        public Output<string> Partition { get; private set; } = null!;

        /// <summary>
        /// Partition size.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// Enable/disable storage. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Use hard disk for logging or WAN Optimization (default = log).
        /// </summary>
        [Output("usage")]
        public Output<string> Usage { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// WAN Optimization mode (default = mix). Valid values: `mix`, `wanopt`, `webcache`.
        /// </summary>
        [Output("wanoptMode")]
        public Output<string> WanoptMode { get; private set; } = null!;


        /// <summary>
        /// Create a Storage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Storage(string name, StorageArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:system/storage:Storage", name, args ?? new StorageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Storage(string name, Input<string> id, StorageState? state = null, CustomResourceOptions? options = null)
            : base("fortios:system/storage:Storage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Storage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Storage Get(string name, Input<string> id, StorageState? state = null, CustomResourceOptions? options = null)
        {
            return new Storage(name, id, state, options);
        }
    }

    public sealed class StorageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Partition device.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// The physical status of current media. Valid values: `enable`, `disable`, `fail`.
        /// </summary>
        [Input("mediaStatus")]
        public Input<string>? MediaStatus { get; set; }

        /// <summary>
        /// Storage name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Set storage order.
        /// </summary>
        [Input("order")]
        public Input<int>? Order { get; set; }

        /// <summary>
        /// Label of underlying partition.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        /// <summary>
        /// Partition size.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// Enable/disable storage. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Use hard disk for logging or WAN Optimization (default = log).
        /// </summary>
        [Input("usage")]
        public Input<string>? Usage { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// WAN Optimization mode (default = mix). Valid values: `mix`, `wanopt`, `webcache`.
        /// </summary>
        [Input("wanoptMode")]
        public Input<string>? WanoptMode { get; set; }

        public StorageArgs()
        {
        }
        public static new StorageArgs Empty => new StorageArgs();
    }

    public sealed class StorageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Partition device.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// The physical status of current media. Valid values: `enable`, `disable`, `fail`.
        /// </summary>
        [Input("mediaStatus")]
        public Input<string>? MediaStatus { get; set; }

        /// <summary>
        /// Storage name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Set storage order.
        /// </summary>
        [Input("order")]
        public Input<int>? Order { get; set; }

        /// <summary>
        /// Label of underlying partition.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        /// <summary>
        /// Partition size.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// Enable/disable storage. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Use hard disk for logging or WAN Optimization (default = log).
        /// </summary>
        [Input("usage")]
        public Input<string>? Usage { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// WAN Optimization mode (default = mix). Valid values: `mix`, `wanopt`, `webcache`.
        /// </summary>
        [Input("wanoptMode")]
        public Input<string>? WanoptMode { get; set; }

        public StorageState()
        {
        }
        public static new StorageState Empty => new StorageState();
    }
}
