// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System
{
    /// <summary>
    /// Configure speed test setting. Applies to FortiOS Version `7.2.6,7.4.1,7.4.2`.
    /// 
    /// ## Import
    /// 
    /// System SpeedTestSetting can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/speedtestsetting:Speedtestsetting labelname SystemSpeedTestSetting
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/speedtestsetting:Speedtestsetting labelname SystemSpeedTestSetting
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:system/speedtestsetting:Speedtestsetting")]
    public partial class Speedtestsetting : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Speed test latency threshold in milliseconds (0 - 2000, default = 60) for the Auto mode. If the latency exceeds this threshold, the speed test will use the UDP protocol; otherwise, it will use the TCP protocol.
        /// </summary>
        [Output("latencyThreshold")]
        public Output<int> LatencyThreshold { get; private set; } = null!;

        /// <summary>
        /// Number of parallel client streams (1 - 64, default = 4) for the TCP protocol to run during the speed test.
        /// </summary>
        [Output("multipleTcpStream")]
        public Output<int> MultipleTcpStream { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Speedtestsetting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Speedtestsetting(string name, SpeedtestsettingArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:system/speedtestsetting:Speedtestsetting", name, args ?? new SpeedtestsettingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Speedtestsetting(string name, Input<string> id, SpeedtestsettingState? state = null, CustomResourceOptions? options = null)
            : base("fortios:system/speedtestsetting:Speedtestsetting", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Speedtestsetting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Speedtestsetting Get(string name, Input<string> id, SpeedtestsettingState? state = null, CustomResourceOptions? options = null)
        {
            return new Speedtestsetting(name, id, state, options);
        }
    }

    public sealed class SpeedtestsettingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Speed test latency threshold in milliseconds (0 - 2000, default = 60) for the Auto mode. If the latency exceeds this threshold, the speed test will use the UDP protocol; otherwise, it will use the TCP protocol.
        /// </summary>
        [Input("latencyThreshold")]
        public Input<int>? LatencyThreshold { get; set; }

        /// <summary>
        /// Number of parallel client streams (1 - 64, default = 4) for the TCP protocol to run during the speed test.
        /// </summary>
        [Input("multipleTcpStream")]
        public Input<int>? MultipleTcpStream { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public SpeedtestsettingArgs()
        {
        }
        public static new SpeedtestsettingArgs Empty => new SpeedtestsettingArgs();
    }

    public sealed class SpeedtestsettingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Speed test latency threshold in milliseconds (0 - 2000, default = 60) for the Auto mode. If the latency exceeds this threshold, the speed test will use the UDP protocol; otherwise, it will use the TCP protocol.
        /// </summary>
        [Input("latencyThreshold")]
        public Input<int>? LatencyThreshold { get; set; }

        /// <summary>
        /// Number of parallel client streams (1 - 64, default = 4) for the TCP protocol to run during the speed test.
        /// </summary>
        [Input("multipleTcpStream")]
        public Input<int>? MultipleTcpStream { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public SpeedtestsettingState()
        {
        }
        public static new SpeedtestsettingState Empty => new SpeedtestsettingState();
    }
}
