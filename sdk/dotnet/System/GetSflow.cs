// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System
{
    public static class GetSflow
    {
        /// <summary>
        /// Use this data source to get information on fortios system sflow
        /// </summary>
        public static Task<GetSflowResult> InvokeAsync(GetSflowArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSflowResult>("fortios:system/getSflow:getSflow", args ?? new GetSflowArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information on fortios system sflow
        /// </summary>
        public static Output<GetSflowResult> Invoke(GetSflowInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSflowResult>("fortios:system/getSflow:getSflow", args ?? new GetSflowInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSflowArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public string? Vdomparam { get; set; }

        public GetSflowArgs()
        {
        }
        public static new GetSflowArgs Empty => new GetSflowArgs();
    }

    public sealed class GetSflowInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public GetSflowInvokeArgs()
        {
        }
        public static new GetSflowInvokeArgs Empty => new GetSflowInvokeArgs();
    }


    [OutputType]
    public sealed class GetSflowResult
    {
        /// <summary>
        /// IP addresses of the sFlow collectors that sFlow agents added to interfaces in this VDOM send sFlow datagrams to.
        /// </summary>
        public readonly string CollectorIp;
        /// <summary>
        /// UDP port number used for sending sFlow datagrams (configure only if required by your sFlow collector or your network configuration) (0 - 65535, default = 6343).
        /// </summary>
        public readonly int CollectorPort;
        /// <summary>
        /// sFlow collectors. The structure of `collectors` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSflowCollectorResult> Collectors;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specify outgoing interface to reach server.
        /// </summary>
        public readonly string Interface;
        /// <summary>
        /// Specify how to select outgoing interface to reach server.
        /// </summary>
        public readonly string InterfaceSelectMethod;
        /// <summary>
        /// Source IP address for sFlow agent.
        /// </summary>
        public readonly string SourceIp;
        public readonly string? Vdomparam;

        [OutputConstructor]
        private GetSflowResult(
            string collectorIp,

            int collectorPort,

            ImmutableArray<Outputs.GetSflowCollectorResult> collectors,

            string id,

            string @interface,

            string interfaceSelectMethod,

            string sourceIp,

            string? vdomparam)
        {
            CollectorIp = collectorIp;
            CollectorPort = collectorPort;
            Collectors = collectors;
            Id = id;
            Interface = @interface;
            InterfaceSelectMethod = interfaceSelectMethod;
            SourceIp = sourceIp;
            Vdomparam = vdomparam;
        }
    }
}
