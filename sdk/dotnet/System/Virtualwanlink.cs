// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System
{
    /// <summary>
    /// Configure redundant internet connections using SD-WAN (formerly virtual WAN link). Applies to FortiOS Version `&lt;= 6.4.0`.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.System.Virtualwanlink("trname", new()
    ///     {
    ///         FailDetect = "disable",
    ///         LoadBalanceMode = "source-ip-based",
    ///         Status = "disable",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// System VirtualWanLink can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/virtualwanlink:Virtualwanlink labelname SystemVirtualWanLink
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/virtualwanlink:Virtualwanlink labelname SystemVirtualWanLink
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:system/virtualwanlink:Virtualwanlink")]
    public partial class Virtualwanlink : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Physical interfaces that will be alerted. The structure of `fail_alert_interfaces` block is documented below.
        /// </summary>
        [Output("failAlertInterfaces")]
        public Output<ImmutableArray<Outputs.VirtualwanlinkFailAlertInterface>> FailAlertInterfaces { get; private set; } = null!;

        /// <summary>
        /// Enable/disable SD-WAN Internet connection status checking (failure detection). Valid values: `enable`, `disable`.
        /// </summary>
        [Output("failDetect")]
        public Output<string> FailDetect { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// SD-WAN status checking or health checking. Identify a server on the Internet and determine how SD-WAN verifies that the FortiGate can communicate with it. The structure of `health_check` block is documented below.
        /// </summary>
        [Output("healthChecks")]
        public Output<ImmutableArray<Outputs.VirtualwanlinkHealthCheck>> HealthChecks { get; private set; } = null!;

        /// <summary>
        /// Algorithm or mode to use for load balancing Internet traffic to SD-WAN members. Valid values: `source-ip-based`, `weight-based`, `usage-based`, `source-dest-ip-based`, `measured-volume-based`.
        /// </summary>
        [Output("loadBalanceMode")]
        public Output<string> LoadBalanceMode { get; private set; } = null!;

        /// <summary>
        /// Physical FortiGate interfaces added to the virtual-wan-link. The structure of `members` block is documented below.
        /// </summary>
        [Output("members")]
        public Output<ImmutableArray<Outputs.VirtualwanlinkMember>> Members { get; private set; } = null!;

        /// <summary>
        /// Waiting period in seconds when switching from the primary neighbor to the secondary neighbor from the neighbor start. (0 - 10000000, default = 0).
        /// </summary>
        [Output("neighborHoldBootTime")]
        public Output<int> NeighborHoldBootTime { get; private set; } = null!;

        /// <summary>
        /// Enable/disable hold switching from the secondary neighbor to the primary neighbor. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("neighborHoldDown")]
        public Output<string> NeighborHoldDown { get; private set; } = null!;

        /// <summary>
        /// Waiting period in seconds when switching from the secondary neighbor to the primary neighbor when hold-down is disabled. (0 - 10000000, default = 0).
        /// </summary>
        [Output("neighborHoldDownTime")]
        public Output<int> NeighborHoldDownTime { get; private set; } = null!;

        /// <summary>
        /// Create SD-WAN neighbor from BGP neighbor table to control route advertisements according to SLA status. The structure of `neighbor` block is documented below.
        /// </summary>
        [Output("neighbors")]
        public Output<ImmutableArray<Outputs.VirtualwanlinkNeighbor>> Neighbors { get; private set; } = null!;

        /// <summary>
        /// Create SD-WAN rules or priority rules (also called services) to control how sessions are distributed to physical interfaces in the SD-WAN. The structure of `service` block is documented below.
        /// </summary>
        [Output("services")]
        public Output<ImmutableArray<Outputs.VirtualwanlinkService>> Services { get; private set; } = null!;

        /// <summary>
        /// Enable/disable SD-WAN. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// Configure SD-WAN zones. The structure of `zone` block is documented below.
        /// </summary>
        [Output("zones")]
        public Output<ImmutableArray<Outputs.VirtualwanlinkZone>> Zones { get; private set; } = null!;


        /// <summary>
        /// Create a Virtualwanlink resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Virtualwanlink(string name, VirtualwanlinkArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:system/virtualwanlink:Virtualwanlink", name, args ?? new VirtualwanlinkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Virtualwanlink(string name, Input<string> id, VirtualwanlinkState? state = null, CustomResourceOptions? options = null)
            : base("fortios:system/virtualwanlink:Virtualwanlink", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Virtualwanlink resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Virtualwanlink Get(string name, Input<string> id, VirtualwanlinkState? state = null, CustomResourceOptions? options = null)
        {
            return new Virtualwanlink(name, id, state, options);
        }
    }

    public sealed class VirtualwanlinkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        [Input("failAlertInterfaces")]
        private InputList<Inputs.VirtualwanlinkFailAlertInterfaceArgs>? _failAlertInterfaces;

        /// <summary>
        /// Physical interfaces that will be alerted. The structure of `fail_alert_interfaces` block is documented below.
        /// </summary>
        public InputList<Inputs.VirtualwanlinkFailAlertInterfaceArgs> FailAlertInterfaces
        {
            get => _failAlertInterfaces ?? (_failAlertInterfaces = new InputList<Inputs.VirtualwanlinkFailAlertInterfaceArgs>());
            set => _failAlertInterfaces = value;
        }

        /// <summary>
        /// Enable/disable SD-WAN Internet connection status checking (failure detection). Valid values: `enable`, `disable`.
        /// </summary>
        [Input("failDetect")]
        public Input<string>? FailDetect { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        [Input("healthChecks")]
        private InputList<Inputs.VirtualwanlinkHealthCheckArgs>? _healthChecks;

        /// <summary>
        /// SD-WAN status checking or health checking. Identify a server on the Internet and determine how SD-WAN verifies that the FortiGate can communicate with it. The structure of `health_check` block is documented below.
        /// </summary>
        public InputList<Inputs.VirtualwanlinkHealthCheckArgs> HealthChecks
        {
            get => _healthChecks ?? (_healthChecks = new InputList<Inputs.VirtualwanlinkHealthCheckArgs>());
            set => _healthChecks = value;
        }

        /// <summary>
        /// Algorithm or mode to use for load balancing Internet traffic to SD-WAN members. Valid values: `source-ip-based`, `weight-based`, `usage-based`, `source-dest-ip-based`, `measured-volume-based`.
        /// </summary>
        [Input("loadBalanceMode")]
        public Input<string>? LoadBalanceMode { get; set; }

        [Input("members")]
        private InputList<Inputs.VirtualwanlinkMemberArgs>? _members;

        /// <summary>
        /// Physical FortiGate interfaces added to the virtual-wan-link. The structure of `members` block is documented below.
        /// </summary>
        public InputList<Inputs.VirtualwanlinkMemberArgs> Members
        {
            get => _members ?? (_members = new InputList<Inputs.VirtualwanlinkMemberArgs>());
            set => _members = value;
        }

        /// <summary>
        /// Waiting period in seconds when switching from the primary neighbor to the secondary neighbor from the neighbor start. (0 - 10000000, default = 0).
        /// </summary>
        [Input("neighborHoldBootTime")]
        public Input<int>? NeighborHoldBootTime { get; set; }

        /// <summary>
        /// Enable/disable hold switching from the secondary neighbor to the primary neighbor. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("neighborHoldDown")]
        public Input<string>? NeighborHoldDown { get; set; }

        /// <summary>
        /// Waiting period in seconds when switching from the secondary neighbor to the primary neighbor when hold-down is disabled. (0 - 10000000, default = 0).
        /// </summary>
        [Input("neighborHoldDownTime")]
        public Input<int>? NeighborHoldDownTime { get; set; }

        [Input("neighbors")]
        private InputList<Inputs.VirtualwanlinkNeighborArgs>? _neighbors;

        /// <summary>
        /// Create SD-WAN neighbor from BGP neighbor table to control route advertisements according to SLA status. The structure of `neighbor` block is documented below.
        /// </summary>
        public InputList<Inputs.VirtualwanlinkNeighborArgs> Neighbors
        {
            get => _neighbors ?? (_neighbors = new InputList<Inputs.VirtualwanlinkNeighborArgs>());
            set => _neighbors = value;
        }

        [Input("services")]
        private InputList<Inputs.VirtualwanlinkServiceArgs>? _services;

        /// <summary>
        /// Create SD-WAN rules or priority rules (also called services) to control how sessions are distributed to physical interfaces in the SD-WAN. The structure of `service` block is documented below.
        /// </summary>
        public InputList<Inputs.VirtualwanlinkServiceArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.VirtualwanlinkServiceArgs>());
            set => _services = value;
        }

        /// <summary>
        /// Enable/disable SD-WAN. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        [Input("zones")]
        private InputList<Inputs.VirtualwanlinkZoneArgs>? _zones;

        /// <summary>
        /// Configure SD-WAN zones. The structure of `zone` block is documented below.
        /// </summary>
        public InputList<Inputs.VirtualwanlinkZoneArgs> Zones
        {
            get => _zones ?? (_zones = new InputList<Inputs.VirtualwanlinkZoneArgs>());
            set => _zones = value;
        }

        public VirtualwanlinkArgs()
        {
        }
        public static new VirtualwanlinkArgs Empty => new VirtualwanlinkArgs();
    }

    public sealed class VirtualwanlinkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        [Input("failAlertInterfaces")]
        private InputList<Inputs.VirtualwanlinkFailAlertInterfaceGetArgs>? _failAlertInterfaces;

        /// <summary>
        /// Physical interfaces that will be alerted. The structure of `fail_alert_interfaces` block is documented below.
        /// </summary>
        public InputList<Inputs.VirtualwanlinkFailAlertInterfaceGetArgs> FailAlertInterfaces
        {
            get => _failAlertInterfaces ?? (_failAlertInterfaces = new InputList<Inputs.VirtualwanlinkFailAlertInterfaceGetArgs>());
            set => _failAlertInterfaces = value;
        }

        /// <summary>
        /// Enable/disable SD-WAN Internet connection status checking (failure detection). Valid values: `enable`, `disable`.
        /// </summary>
        [Input("failDetect")]
        public Input<string>? FailDetect { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        [Input("healthChecks")]
        private InputList<Inputs.VirtualwanlinkHealthCheckGetArgs>? _healthChecks;

        /// <summary>
        /// SD-WAN status checking or health checking. Identify a server on the Internet and determine how SD-WAN verifies that the FortiGate can communicate with it. The structure of `health_check` block is documented below.
        /// </summary>
        public InputList<Inputs.VirtualwanlinkHealthCheckGetArgs> HealthChecks
        {
            get => _healthChecks ?? (_healthChecks = new InputList<Inputs.VirtualwanlinkHealthCheckGetArgs>());
            set => _healthChecks = value;
        }

        /// <summary>
        /// Algorithm or mode to use for load balancing Internet traffic to SD-WAN members. Valid values: `source-ip-based`, `weight-based`, `usage-based`, `source-dest-ip-based`, `measured-volume-based`.
        /// </summary>
        [Input("loadBalanceMode")]
        public Input<string>? LoadBalanceMode { get; set; }

        [Input("members")]
        private InputList<Inputs.VirtualwanlinkMemberGetArgs>? _members;

        /// <summary>
        /// Physical FortiGate interfaces added to the virtual-wan-link. The structure of `members` block is documented below.
        /// </summary>
        public InputList<Inputs.VirtualwanlinkMemberGetArgs> Members
        {
            get => _members ?? (_members = new InputList<Inputs.VirtualwanlinkMemberGetArgs>());
            set => _members = value;
        }

        /// <summary>
        /// Waiting period in seconds when switching from the primary neighbor to the secondary neighbor from the neighbor start. (0 - 10000000, default = 0).
        /// </summary>
        [Input("neighborHoldBootTime")]
        public Input<int>? NeighborHoldBootTime { get; set; }

        /// <summary>
        /// Enable/disable hold switching from the secondary neighbor to the primary neighbor. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("neighborHoldDown")]
        public Input<string>? NeighborHoldDown { get; set; }

        /// <summary>
        /// Waiting period in seconds when switching from the secondary neighbor to the primary neighbor when hold-down is disabled. (0 - 10000000, default = 0).
        /// </summary>
        [Input("neighborHoldDownTime")]
        public Input<int>? NeighborHoldDownTime { get; set; }

        [Input("neighbors")]
        private InputList<Inputs.VirtualwanlinkNeighborGetArgs>? _neighbors;

        /// <summary>
        /// Create SD-WAN neighbor from BGP neighbor table to control route advertisements according to SLA status. The structure of `neighbor` block is documented below.
        /// </summary>
        public InputList<Inputs.VirtualwanlinkNeighborGetArgs> Neighbors
        {
            get => _neighbors ?? (_neighbors = new InputList<Inputs.VirtualwanlinkNeighborGetArgs>());
            set => _neighbors = value;
        }

        [Input("services")]
        private InputList<Inputs.VirtualwanlinkServiceGetArgs>? _services;

        /// <summary>
        /// Create SD-WAN rules or priority rules (also called services) to control how sessions are distributed to physical interfaces in the SD-WAN. The structure of `service` block is documented below.
        /// </summary>
        public InputList<Inputs.VirtualwanlinkServiceGetArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.VirtualwanlinkServiceGetArgs>());
            set => _services = value;
        }

        /// <summary>
        /// Enable/disable SD-WAN. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        [Input("zones")]
        private InputList<Inputs.VirtualwanlinkZoneGetArgs>? _zones;

        /// <summary>
        /// Configure SD-WAN zones. The structure of `zone` block is documented below.
        /// </summary>
        public InputList<Inputs.VirtualwanlinkZoneGetArgs> Zones
        {
            get => _zones ?? (_zones = new InputList<Inputs.VirtualwanlinkZoneGetArgs>());
            set => _zones = value;
        }

        public VirtualwanlinkState()
        {
        }
        public static new VirtualwanlinkState Empty => new VirtualwanlinkState();
    }
}
