// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System.Outputs
{

    [OutputType]
    public sealed class PcpserverPool
    {
        /// <summary>
        /// Allowed PCP opcode. Valid values: `map`, `peer`, `announce`.
        /// </summary>
        public readonly string? AllowOpcode;
        /// <summary>
        /// Number of multicast announcements.
        /// </summary>
        public readonly int? AnnouncementCount;
        /// <summary>
        /// Enable to respond to ARP requests for external IP (default = enable). Valid values: `disable`, `enable`.
        /// </summary>
        public readonly string? ArpReply;
        /// <summary>
        /// Mapping limit per client (0 - 65535, default = 0, 0 = unlimited).
        /// </summary>
        public readonly int? ClientMappingLimit;
        /// <summary>
        /// Subnets from which PCP requests are accepted. The structure of `client_subnet` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.PcpserverPoolClientSubnet> ClientSubnets;
        /// <summary>
        /// Description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// External interface name.
        /// </summary>
        public readonly string? ExtIntf;
        /// <summary>
        /// IP address or address range on the external interface that you want to map to an address on the internal network.
        /// </summary>
        public readonly string? Extip;
        /// <summary>
        /// Incoming port number range that you want to map to a port number on the internal network.
        /// </summary>
        public readonly string? Extport;
        /// <summary>
        /// ID.
        /// </summary>
        public readonly int? Id;
        /// <summary>
        /// Internal interface name. The structure of `intl_intf` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.PcpserverPoolIntlIntf> IntlIntfs;
        /// <summary>
        /// Filter limit per mapping (0 - 5, default = 1).
        /// </summary>
        public readonly int? MappingFilterLimit;
        /// <summary>
        /// Maximal lifetime of a PCP mapping in seconds (3600 - 604800, default = 86400).
        /// </summary>
        public readonly int? MaximalLifetime;
        /// <summary>
        /// Minimal lifetime of a PCP mapping in seconds (60 - 300, default = 120).
        /// </summary>
        public readonly int? MinimalLifetime;
        /// <summary>
        /// Enable/disable multicast announcements. Valid values: `enable`, `disable`.
        /// </summary>
        public readonly string? MulticastAnnouncement;
        /// <summary>
        /// PCP pool name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Minimum delay (in seconds) the PCP Server will wait before recycling mappings that have expired (0 - 3600, default = 0).
        /// </summary>
        public readonly int? RecycleDelay;
        /// <summary>
        /// Allow/disallow third party option. Valid values: `allow`, `disallow`.
        /// </summary>
        public readonly string? ThirdParty;
        /// <summary>
        /// Subnets from which third party requests are accepted. The structure of `third_party_subnet` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.PcpserverPoolThirdPartySubnet> ThirdPartySubnets;

        [OutputConstructor]
        private PcpserverPool(
            string? allowOpcode,

            int? announcementCount,

            string? arpReply,

            int? clientMappingLimit,

            ImmutableArray<Outputs.PcpserverPoolClientSubnet> clientSubnets,

            string? description,

            string? extIntf,

            string? extip,

            string? extport,

            int? id,

            ImmutableArray<Outputs.PcpserverPoolIntlIntf> intlIntfs,

            int? mappingFilterLimit,

            int? maximalLifetime,

            int? minimalLifetime,

            string? multicastAnnouncement,

            string? name,

            int? recycleDelay,

            string? thirdParty,

            ImmutableArray<Outputs.PcpserverPoolThirdPartySubnet> thirdPartySubnets)
        {
            AllowOpcode = allowOpcode;
            AnnouncementCount = announcementCount;
            ArpReply = arpReply;
            ClientMappingLimit = clientMappingLimit;
            ClientSubnets = clientSubnets;
            Description = description;
            ExtIntf = extIntf;
            Extip = extip;
            Extport = extport;
            Id = id;
            IntlIntfs = intlIntfs;
            MappingFilterLimit = mappingFilterLimit;
            MaximalLifetime = maximalLifetime;
            MinimalLifetime = minimalLifetime;
            MulticastAnnouncement = multicastAnnouncement;
            Name = name;
            RecycleDelay = recycleDelay;
            ThirdParty = thirdParty;
            ThirdPartySubnets = thirdPartySubnets;
        }
    }
}
