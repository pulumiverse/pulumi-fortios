// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System
{
    /// <summary>
    /// Provides a resource to configure administrator accounts of FortiOS.
    /// 
    /// !&gt; **Warning:** The resource will be deprecated and replaced by new resource `fortios.system.Admin`, we recommend that you use the new resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var admintest = new Fortios.System.AdminAdministrator("admintest", new()
    ///     {
    ///         Accprofile = "3d3",
    ///         Comments = "comments",
    ///         Password = "cc37331AC1",
    ///         Trusthost1 = "1.1.1.0 255.255.255.0",
    ///         Trusthost2 = "2.2.2.0 255.255.255.0",
    ///         Vdoms = new[]
    ///         {
    ///             "root",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [FortiosResourceType("fortios:system/adminAdministrator:AdminAdministrator")]
    public partial class AdminAdministrator : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Access profile for this administrator. Access profiles control administrator access to FortiGate features.
        /// </summary>
        [Output("accprofile")]
        public Output<string> Accprofile { get; private set; } = null!;

        /// <summary>
        /// Comment.
        /// </summary>
        [Output("comments")]
        public Output<string?> Comments { get; private set; } = null!;

        /// <summary>
        /// User name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Admin user password.
        /// * `trusthostN` - Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        [Output("trusthost1")]
        public Output<string> Trusthost1 { get; private set; } = null!;

        [Output("trusthost10")]
        public Output<string> Trusthost10 { get; private set; } = null!;

        [Output("trusthost2")]
        public Output<string> Trusthost2 { get; private set; } = null!;

        [Output("trusthost3")]
        public Output<string> Trusthost3 { get; private set; } = null!;

        [Output("trusthost4")]
        public Output<string> Trusthost4 { get; private set; } = null!;

        [Output("trusthost5")]
        public Output<string> Trusthost5 { get; private set; } = null!;

        [Output("trusthost6")]
        public Output<string> Trusthost6 { get; private set; } = null!;

        [Output("trusthost7")]
        public Output<string> Trusthost7 { get; private set; } = null!;

        [Output("trusthost8")]
        public Output<string> Trusthost8 { get; private set; } = null!;

        [Output("trusthost9")]
        public Output<string> Trusthost9 { get; private set; } = null!;

        /// <summary>
        /// Virtual domain(s) that the administrator can access.
        /// </summary>
        [Output("vdoms")]
        public Output<ImmutableArray<string>> Vdoms { get; private set; } = null!;


        /// <summary>
        /// Create a AdminAdministrator resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AdminAdministrator(string name, AdminAdministratorArgs args, CustomResourceOptions? options = null)
            : base("fortios:system/adminAdministrator:AdminAdministrator", name, args ?? new AdminAdministratorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AdminAdministrator(string name, Input<string> id, AdminAdministratorState? state = null, CustomResourceOptions? options = null)
            : base("fortios:system/adminAdministrator:AdminAdministrator", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AdminAdministrator resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AdminAdministrator Get(string name, Input<string> id, AdminAdministratorState? state = null, CustomResourceOptions? options = null)
        {
            return new AdminAdministrator(name, id, state, options);
        }
    }

    public sealed class AdminAdministratorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access profile for this administrator. Access profiles control administrator access to FortiGate features.
        /// </summary>
        [Input("accprofile", required: true)]
        public Input<string> Accprofile { get; set; } = null!;

        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// User name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Admin user password.
        /// * `trusthostN` - Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit.
        /// </summary>
        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        [Input("trusthost1")]
        public Input<string>? Trusthost1 { get; set; }

        [Input("trusthost10")]
        public Input<string>? Trusthost10 { get; set; }

        [Input("trusthost2")]
        public Input<string>? Trusthost2 { get; set; }

        [Input("trusthost3")]
        public Input<string>? Trusthost3 { get; set; }

        [Input("trusthost4")]
        public Input<string>? Trusthost4 { get; set; }

        [Input("trusthost5")]
        public Input<string>? Trusthost5 { get; set; }

        [Input("trusthost6")]
        public Input<string>? Trusthost6 { get; set; }

        [Input("trusthost7")]
        public Input<string>? Trusthost7 { get; set; }

        [Input("trusthost8")]
        public Input<string>? Trusthost8 { get; set; }

        [Input("trusthost9")]
        public Input<string>? Trusthost9 { get; set; }

        [Input("vdoms")]
        private InputList<string>? _vdoms;

        /// <summary>
        /// Virtual domain(s) that the administrator can access.
        /// </summary>
        public InputList<string> Vdoms
        {
            get => _vdoms ?? (_vdoms = new InputList<string>());
            set => _vdoms = value;
        }

        public AdminAdministratorArgs()
        {
        }
        public static new AdminAdministratorArgs Empty => new AdminAdministratorArgs();
    }

    public sealed class AdminAdministratorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access profile for this administrator. Access profiles control administrator access to FortiGate features.
        /// </summary>
        [Input("accprofile")]
        public Input<string>? Accprofile { get; set; }

        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// User name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Admin user password.
        /// * `trusthostN` - Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("trusthost1")]
        public Input<string>? Trusthost1 { get; set; }

        [Input("trusthost10")]
        public Input<string>? Trusthost10 { get; set; }

        [Input("trusthost2")]
        public Input<string>? Trusthost2 { get; set; }

        [Input("trusthost3")]
        public Input<string>? Trusthost3 { get; set; }

        [Input("trusthost4")]
        public Input<string>? Trusthost4 { get; set; }

        [Input("trusthost5")]
        public Input<string>? Trusthost5 { get; set; }

        [Input("trusthost6")]
        public Input<string>? Trusthost6 { get; set; }

        [Input("trusthost7")]
        public Input<string>? Trusthost7 { get; set; }

        [Input("trusthost8")]
        public Input<string>? Trusthost8 { get; set; }

        [Input("trusthost9")]
        public Input<string>? Trusthost9 { get; set; }

        [Input("vdoms")]
        private InputList<string>? _vdoms;

        /// <summary>
        /// Virtual domain(s) that the administrator can access.
        /// </summary>
        public InputList<string> Vdoms
        {
            get => _vdoms ?? (_vdoms = new InputList<string>());
            set => _vdoms = value;
        }

        public AdminAdministratorState()
        {
        }
        public static new AdminAdministratorState Empty => new AdminAdministratorState();
    }
}
