// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System
{
    /// <summary>
    /// Configure SMS server for sending SMS messages to support user authentication.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.System.Smsserver("trname", new()
    ///     {
    ///         MailServer = "1.1.1.2",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// System SmsServer can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/smsserver:Smsserver labelname {{name}}
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/smsserver:Smsserver labelname {{name}}
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:system/smsserver:Smsserver")]
    public partial class Smsserver : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Email-to-SMS server domain name.
        /// </summary>
        [Output("mailServer")]
        public Output<string> MailServer { get; private set; } = null!;

        /// <summary>
        /// Name of SMS server.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Smsserver resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Smsserver(string name, SmsserverArgs args, CustomResourceOptions? options = null)
            : base("fortios:system/smsserver:Smsserver", name, args ?? new SmsserverArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Smsserver(string name, Input<string> id, SmsserverState? state = null, CustomResourceOptions? options = null)
            : base("fortios:system/smsserver:Smsserver", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Smsserver resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Smsserver Get(string name, Input<string> id, SmsserverState? state = null, CustomResourceOptions? options = null)
        {
            return new Smsserver(name, id, state, options);
        }
    }

    public sealed class SmsserverArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Email-to-SMS server domain name.
        /// </summary>
        [Input("mailServer", required: true)]
        public Input<string> MailServer { get; set; } = null!;

        /// <summary>
        /// Name of SMS server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public SmsserverArgs()
        {
        }
        public static new SmsserverArgs Empty => new SmsserverArgs();
    }

    public sealed class SmsserverState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Email-to-SMS server domain name.
        /// </summary>
        [Input("mailServer")]
        public Input<string>? MailServer { get; set; }

        /// <summary>
        /// Name of SMS server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public SmsserverState()
        {
        }
        public static new SmsserverState Empty => new SmsserverState();
    }
}
