// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System
{
    /// <summary>
    /// Setup for self orchestrated fabric auto discovery VPN. Applies to FortiOS Version `&gt;= 7.2.4`.
    /// 
    /// ## Import
    /// 
    /// System FabricVpn can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/fabricvpn:Fabricvpn labelname SystemFabricVpn
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/fabricvpn:Fabricvpn labelname SystemFabricVpn
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:system/fabricvpn:Fabricvpn")]
    public partial class Fabricvpn : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Local advertised subnets. The structure of `advertised_subnets` block is documented below.
        /// </summary>
        [Output("advertisedSubnets")]
        public Output<ImmutableArray<Outputs.FabricvpnAdvertisedSubnet>> AdvertisedSubnets { get; private set; } = null!;

        /// <summary>
        /// BGP Router AS number, valid from 1 to 4294967295.
        /// </summary>
        [Output("bgpAs")]
        public Output<int> BgpAs { get; private set; } = null!;

        /// <summary>
        /// Branch name.
        /// </summary>
        [Output("branchName")]
        public Output<string> BranchName { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Output("getAllTables")]
        public Output<string?> GetAllTables { get; private set; } = null!;

        /// <summary>
        /// Underlying health checks.
        /// </summary>
        [Output("healthChecks")]
        public Output<string> HealthChecks { get; private set; } = null!;

        /// <summary>
        /// IPv4 address and subnet mask for hub's loopback address, syntax: X.X.X.X/24.
        /// </summary>
        [Output("loopbackAddressBlock")]
        public Output<string> LoopbackAddressBlock { get; private set; } = null!;

        /// <summary>
        /// Loopback advertised subnet reference.
        /// </summary>
        [Output("loopbackAdvertisedSubnet")]
        public Output<int> LoopbackAdvertisedSubnet { get; private set; } = null!;

        /// <summary>
        /// Loopback interface.
        /// </summary>
        [Output("loopbackInterface")]
        public Output<string> LoopbackInterface { get; private set; } = null!;

        /// <summary>
        /// Local overlay interfaces table. The structure of `overlays` block is documented below.
        /// </summary>
        [Output("overlays")]
        public Output<ImmutableArray<Outputs.FabricvpnOverlay>> Overlays { get; private set; } = null!;

        /// <summary>
        /// Policy creation rule. Valid values: `health-check`, `manual`, `auto`.
        /// </summary>
        [Output("policyRule")]
        public Output<string> PolicyRule { get; private set; } = null!;

        /// <summary>
        /// Pre-shared secret for ADVPN.
        /// </summary>
        [Output("psksecret")]
        public Output<string?> Psksecret { get; private set; } = null!;

        /// <summary>
        /// Reference to created SD-WAN zone.
        /// </summary>
        [Output("sdwanZone")]
        public Output<string> SdwanZone { get; private set; } = null!;

        /// <summary>
        /// Enable/disable Fabric VPN. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Setting synchronised by fabric or manual. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("syncMode")]
        public Output<string> SyncMode { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// Fabric VPN role. Valid values: `hub`, `spoke`.
        /// </summary>
        [Output("vpnRole")]
        public Output<string> VpnRole { get; private set; } = null!;


        /// <summary>
        /// Create a Fabricvpn resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Fabricvpn(string name, FabricvpnArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:system/fabricvpn:Fabricvpn", name, args ?? new FabricvpnArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Fabricvpn(string name, Input<string> id, FabricvpnState? state = null, CustomResourceOptions? options = null)
            : base("fortios:system/fabricvpn:Fabricvpn", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Fabricvpn resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Fabricvpn Get(string name, Input<string> id, FabricvpnState? state = null, CustomResourceOptions? options = null)
        {
            return new Fabricvpn(name, id, state, options);
        }
    }

    public sealed class FabricvpnArgs : global::Pulumi.ResourceArgs
    {
        [Input("advertisedSubnets")]
        private InputList<Inputs.FabricvpnAdvertisedSubnetArgs>? _advertisedSubnets;

        /// <summary>
        /// Local advertised subnets. The structure of `advertised_subnets` block is documented below.
        /// </summary>
        public InputList<Inputs.FabricvpnAdvertisedSubnetArgs> AdvertisedSubnets
        {
            get => _advertisedSubnets ?? (_advertisedSubnets = new InputList<Inputs.FabricvpnAdvertisedSubnetArgs>());
            set => _advertisedSubnets = value;
        }

        /// <summary>
        /// BGP Router AS number, valid from 1 to 4294967295.
        /// </summary>
        [Input("bgpAs")]
        public Input<int>? BgpAs { get; set; }

        /// <summary>
        /// Branch name.
        /// </summary>
        [Input("branchName")]
        public Input<string>? BranchName { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Underlying health checks.
        /// </summary>
        [Input("healthChecks")]
        public Input<string>? HealthChecks { get; set; }

        /// <summary>
        /// IPv4 address and subnet mask for hub's loopback address, syntax: X.X.X.X/24.
        /// </summary>
        [Input("loopbackAddressBlock")]
        public Input<string>? LoopbackAddressBlock { get; set; }

        /// <summary>
        /// Loopback advertised subnet reference.
        /// </summary>
        [Input("loopbackAdvertisedSubnet")]
        public Input<int>? LoopbackAdvertisedSubnet { get; set; }

        /// <summary>
        /// Loopback interface.
        /// </summary>
        [Input("loopbackInterface")]
        public Input<string>? LoopbackInterface { get; set; }

        [Input("overlays")]
        private InputList<Inputs.FabricvpnOverlayArgs>? _overlays;

        /// <summary>
        /// Local overlay interfaces table. The structure of `overlays` block is documented below.
        /// </summary>
        public InputList<Inputs.FabricvpnOverlayArgs> Overlays
        {
            get => _overlays ?? (_overlays = new InputList<Inputs.FabricvpnOverlayArgs>());
            set => _overlays = value;
        }

        /// <summary>
        /// Policy creation rule. Valid values: `health-check`, `manual`, `auto`.
        /// </summary>
        [Input("policyRule")]
        public Input<string>? PolicyRule { get; set; }

        /// <summary>
        /// Pre-shared secret for ADVPN.
        /// </summary>
        [Input("psksecret")]
        public Input<string>? Psksecret { get; set; }

        /// <summary>
        /// Reference to created SD-WAN zone.
        /// </summary>
        [Input("sdwanZone")]
        public Input<string>? SdwanZone { get; set; }

        /// <summary>
        /// Enable/disable Fabric VPN. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Setting synchronised by fabric or manual. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("syncMode")]
        public Input<string>? SyncMode { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// Fabric VPN role. Valid values: `hub`, `spoke`.
        /// </summary>
        [Input("vpnRole")]
        public Input<string>? VpnRole { get; set; }

        public FabricvpnArgs()
        {
        }
        public static new FabricvpnArgs Empty => new FabricvpnArgs();
    }

    public sealed class FabricvpnState : global::Pulumi.ResourceArgs
    {
        [Input("advertisedSubnets")]
        private InputList<Inputs.FabricvpnAdvertisedSubnetGetArgs>? _advertisedSubnets;

        /// <summary>
        /// Local advertised subnets. The structure of `advertised_subnets` block is documented below.
        /// </summary>
        public InputList<Inputs.FabricvpnAdvertisedSubnetGetArgs> AdvertisedSubnets
        {
            get => _advertisedSubnets ?? (_advertisedSubnets = new InputList<Inputs.FabricvpnAdvertisedSubnetGetArgs>());
            set => _advertisedSubnets = value;
        }

        /// <summary>
        /// BGP Router AS number, valid from 1 to 4294967295.
        /// </summary>
        [Input("bgpAs")]
        public Input<int>? BgpAs { get; set; }

        /// <summary>
        /// Branch name.
        /// </summary>
        [Input("branchName")]
        public Input<string>? BranchName { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        /// </summary>
        [Input("getAllTables")]
        public Input<string>? GetAllTables { get; set; }

        /// <summary>
        /// Underlying health checks.
        /// </summary>
        [Input("healthChecks")]
        public Input<string>? HealthChecks { get; set; }

        /// <summary>
        /// IPv4 address and subnet mask for hub's loopback address, syntax: X.X.X.X/24.
        /// </summary>
        [Input("loopbackAddressBlock")]
        public Input<string>? LoopbackAddressBlock { get; set; }

        /// <summary>
        /// Loopback advertised subnet reference.
        /// </summary>
        [Input("loopbackAdvertisedSubnet")]
        public Input<int>? LoopbackAdvertisedSubnet { get; set; }

        /// <summary>
        /// Loopback interface.
        /// </summary>
        [Input("loopbackInterface")]
        public Input<string>? LoopbackInterface { get; set; }

        [Input("overlays")]
        private InputList<Inputs.FabricvpnOverlayGetArgs>? _overlays;

        /// <summary>
        /// Local overlay interfaces table. The structure of `overlays` block is documented below.
        /// </summary>
        public InputList<Inputs.FabricvpnOverlayGetArgs> Overlays
        {
            get => _overlays ?? (_overlays = new InputList<Inputs.FabricvpnOverlayGetArgs>());
            set => _overlays = value;
        }

        /// <summary>
        /// Policy creation rule. Valid values: `health-check`, `manual`, `auto`.
        /// </summary>
        [Input("policyRule")]
        public Input<string>? PolicyRule { get; set; }

        /// <summary>
        /// Pre-shared secret for ADVPN.
        /// </summary>
        [Input("psksecret")]
        public Input<string>? Psksecret { get; set; }

        /// <summary>
        /// Reference to created SD-WAN zone.
        /// </summary>
        [Input("sdwanZone")]
        public Input<string>? SdwanZone { get; set; }

        /// <summary>
        /// Enable/disable Fabric VPN. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Setting synchronised by fabric or manual. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("syncMode")]
        public Input<string>? SyncMode { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// Fabric VPN role. Valid values: `hub`, `spoke`.
        /// </summary>
        [Input("vpnRole")]
        public Input<string>? VpnRole { get; set; }

        public FabricvpnState()
        {
        }
        public static new FabricvpnState Empty => new FabricvpnState();
    }
}
