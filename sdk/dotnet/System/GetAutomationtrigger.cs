// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System
{
    public static class GetAutomationtrigger
    {
        /// <summary>
        /// Use this data source to get information on an fortios system automationtrigger
        /// </summary>
        public static Task<GetAutomationtriggerResult> InvokeAsync(GetAutomationtriggerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAutomationtriggerResult>("fortios:system/getAutomationtrigger:getAutomationtrigger", args ?? new GetAutomationtriggerArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information on an fortios system automationtrigger
        /// </summary>
        public static Output<GetAutomationtriggerResult> Invoke(GetAutomationtriggerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAutomationtriggerResult>("fortios:system/getAutomationtrigger:getAutomationtrigger", args ?? new GetAutomationtriggerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAutomationtriggerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the name of the desired system automationtrigger.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public string? Vdomparam { get; set; }

        public GetAutomationtriggerArgs()
        {
        }
        public static new GetAutomationtriggerArgs Empty => new GetAutomationtriggerArgs();
    }

    public sealed class GetAutomationtriggerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the name of the desired system automationtrigger.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public GetAutomationtriggerInvokeArgs()
        {
        }
        public static new GetAutomationtriggerInvokeArgs Empty => new GetAutomationtriggerInvokeArgs();
    }


    [OutputType]
    public sealed class GetAutomationtriggerResult
    {
        /// <summary>
        /// Description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Event type.
        /// </summary>
        public readonly string EventType;
        /// <summary>
        /// Fabric connector event handler name.
        /// </summary>
        public readonly string FabricEventName;
        /// <summary>
        /// Fabric connector event severity.
        /// </summary>
        public readonly string FabricEventSeverity;
        /// <summary>
        /// FortiAnalyzer event handler name.
        /// </summary>
        public readonly string FazEventName;
        /// <summary>
        /// FortiAnalyzer event severity.
        /// </summary>
        public readonly string FazEventSeverity;
        /// <summary>
        /// FortiAnalyzer event tags.
        /// </summary>
        public readonly string FazEventTags;
        /// <summary>
        /// Customized trigger field settings. The structure of `fields` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAutomationtriggerFieldResult> Fields;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IOC threat level.
        /// </summary>
        public readonly string IocLevel;
        /// <summary>
        /// License type.
        /// </summary>
        public readonly string LicenseType;
        /// <summary>
        /// Log ID to trigger event.
        /// </summary>
        public readonly int Logid;
        /// <summary>
        /// Log IDs to trigger event. The structure of `logid_block` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAutomationtriggerLogidBlockResult> LogidBlocks;
        /// <summary>
        /// Name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Security Rating report.
        /// </summary>
        public readonly string ReportType;
        /// <summary>
        /// Fabric connector serial number.
        /// </summary>
        public readonly string Serial;
        /// <summary>
        /// Trigger date and time (YYYY-MM-DD HH:MM:SS).
        /// </summary>
        public readonly string TriggerDatetime;
        /// <summary>
        /// Day within a month to trigger.
        /// </summary>
        public readonly int TriggerDay;
        /// <summary>
        /// Scheduled trigger frequency (default = daily).
        /// </summary>
        public readonly string TriggerFrequency;
        /// <summary>
        /// Hour of the day on which to trigger (0 - 23, default = 1).
        /// </summary>
        public readonly int TriggerHour;
        /// <summary>
        /// Minute of the hour on which to trigger (0 - 59, 60 to randomize).
        /// </summary>
        public readonly int TriggerMinute;
        /// <summary>
        /// Trigger type.
        /// </summary>
        public readonly string TriggerType;
        /// <summary>
        /// Day of week for trigger.
        /// </summary>
        public readonly string TriggerWeekday;
        public readonly string? Vdomparam;
        /// <summary>
        /// Virtual domain(s) that this trigger is valid for. The structure of `vdom` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAutomationtriggerVdomResult> Vdoms;

        [OutputConstructor]
        private GetAutomationtriggerResult(
            string description,

            string eventType,

            string fabricEventName,

            string fabricEventSeverity,

            string fazEventName,

            string fazEventSeverity,

            string fazEventTags,

            ImmutableArray<Outputs.GetAutomationtriggerFieldResult> fields,

            string id,

            string iocLevel,

            string licenseType,

            int logid,

            ImmutableArray<Outputs.GetAutomationtriggerLogidBlockResult> logidBlocks,

            string name,

            string reportType,

            string serial,

            string triggerDatetime,

            int triggerDay,

            string triggerFrequency,

            int triggerHour,

            int triggerMinute,

            string triggerType,

            string triggerWeekday,

            string? vdomparam,

            ImmutableArray<Outputs.GetAutomationtriggerVdomResult> vdoms)
        {
            Description = description;
            EventType = eventType;
            FabricEventName = fabricEventName;
            FabricEventSeverity = fabricEventSeverity;
            FazEventName = fazEventName;
            FazEventSeverity = fazEventSeverity;
            FazEventTags = fazEventTags;
            Fields = fields;
            Id = id;
            IocLevel = iocLevel;
            LicenseType = licenseType;
            Logid = logid;
            LogidBlocks = logidBlocks;
            Name = name;
            ReportType = reportType;
            Serial = serial;
            TriggerDatetime = triggerDatetime;
            TriggerDay = triggerDay;
            TriggerFrequency = triggerFrequency;
            TriggerHour = triggerHour;
            TriggerMinute = triggerMinute;
            TriggerType = triggerType;
            TriggerWeekday = triggerWeekday;
            Vdomparam = vdomparam;
            Vdoms = vdoms;
        }
    }
}
