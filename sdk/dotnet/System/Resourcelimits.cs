// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System
{
    /// <summary>
    /// Configure resource limits.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.System.Resourcelimits("trname", new()
    ///     {
    ///         CustomService = 0,
    ///         DialupTunnel = 0,
    ///         FirewallAddress = 41024,
    ///         FirewallAddrgrp = 10692,
    ///         FirewallPolicy = 41024,
    ///         IpsecPhase1 = 2000,
    ///         IpsecPhase1Interface = 0,
    ///         IpsecPhase2 = 2000,
    ///         IpsecPhase2Interface = 0,
    ///         LogDiskQuota = 30235,
    ///         OnetimeSchedule = 0,
    ///         Proxy = 64000,
    ///         RecurringSchedule = 0,
    ///         ServiceGroup = 0,
    ///         Session = 0,
    ///         Sslvpn = 0,
    ///         User = 0,
    ///         UserGroup = 0,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// System ResourceLimits can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/resourcelimits:Resourcelimits labelname SystemResourceLimits
    /// ```
    /// 
    /// If you do not want to import arguments of block:
    /// 
    /// $ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    /// $ pulumi import fortios:system/resourcelimits:Resourcelimits labelname SystemResourceLimits
    /// ```
    /// 
    /// $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:system/resourcelimits:Resourcelimits")]
    public partial class Resourcelimits : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Maximum number of firewall custom services.
        /// </summary>
        [Output("customService")]
        public Output<int> CustomService { get; private set; } = null!;

        /// <summary>
        /// Maximum number of dial-up tunnels.
        /// </summary>
        [Output("dialupTunnel")]
        public Output<int> DialupTunnel { get; private set; } = null!;

        /// <summary>
        /// Maximum number of firewall addresses (IPv4, IPv6, multicast).
        /// </summary>
        [Output("firewallAddress")]
        public Output<int> FirewallAddress { get; private set; } = null!;

        /// <summary>
        /// Maximum number of firewall address groups (IPv4, IPv6).
        /// </summary>
        [Output("firewallAddrgrp")]
        public Output<int> FirewallAddrgrp { get; private set; } = null!;

        /// <summary>
        /// Maximum number of firewall policies (IPv4, IPv6, policy46, policy64, DoS-policy4, DoS-policy6, multicast).
        /// </summary>
        [Output("firewallPolicy")]
        public Output<int> FirewallPolicy { get; private set; } = null!;

        /// <summary>
        /// Maximum number of VPN IPsec phase1 tunnels.
        /// </summary>
        [Output("ipsecPhase1")]
        public Output<int> IpsecPhase1 { get; private set; } = null!;

        /// <summary>
        /// Maximum number of VPN IPsec phase1 interface tunnels.
        /// </summary>
        [Output("ipsecPhase1Interface")]
        public Output<int> IpsecPhase1Interface { get; private set; } = null!;

        /// <summary>
        /// Maximum number of VPN IPsec phase2 tunnels.
        /// </summary>
        [Output("ipsecPhase2")]
        public Output<int> IpsecPhase2 { get; private set; } = null!;

        /// <summary>
        /// Maximum number of VPN IPsec phase2 interface tunnels.
        /// </summary>
        [Output("ipsecPhase2Interface")]
        public Output<int> IpsecPhase2Interface { get; private set; } = null!;

        /// <summary>
        /// Log disk quota in MB.
        /// </summary>
        [Output("logDiskQuota")]
        public Output<int> LogDiskQuota { get; private set; } = null!;

        /// <summary>
        /// Maximum number of firewall one-time schedules.
        /// </summary>
        [Output("onetimeSchedule")]
        public Output<int> OnetimeSchedule { get; private set; } = null!;

        /// <summary>
        /// Maximum number of concurrent proxy users.
        /// </summary>
        [Output("proxy")]
        public Output<int> Proxy { get; private set; } = null!;

        /// <summary>
        /// Maximum number of firewall recurring schedules.
        /// </summary>
        [Output("recurringSchedule")]
        public Output<int> RecurringSchedule { get; private set; } = null!;

        /// <summary>
        /// Maximum number of firewall service groups.
        /// </summary>
        [Output("serviceGroup")]
        public Output<int> ServiceGroup { get; private set; } = null!;

        /// <summary>
        /// Maximum number of sessions.
        /// </summary>
        [Output("session")]
        public Output<int> Session { get; private set; } = null!;

        /// <summary>
        /// Maximum number of SSL-VPN.
        /// </summary>
        [Output("sslvpn")]
        public Output<int> Sslvpn { get; private set; } = null!;

        /// <summary>
        /// Maximum number of local users.
        /// </summary>
        [Output("user")]
        public Output<int> User { get; private set; } = null!;

        /// <summary>
        /// Maximum number of user groups.
        /// </summary>
        [Output("userGroup")]
        public Output<int> UserGroup { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a Resourcelimits resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Resourcelimits(string name, ResourcelimitsArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:system/resourcelimits:Resourcelimits", name, args ?? new ResourcelimitsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Resourcelimits(string name, Input<string> id, ResourcelimitsState? state = null, CustomResourceOptions? options = null)
            : base("fortios:system/resourcelimits:Resourcelimits", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Resourcelimits resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Resourcelimits Get(string name, Input<string> id, ResourcelimitsState? state = null, CustomResourceOptions? options = null)
        {
            return new Resourcelimits(name, id, state, options);
        }
    }

    public sealed class ResourcelimitsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Maximum number of firewall custom services.
        /// </summary>
        [Input("customService")]
        public Input<int>? CustomService { get; set; }

        /// <summary>
        /// Maximum number of dial-up tunnels.
        /// </summary>
        [Input("dialupTunnel")]
        public Input<int>? DialupTunnel { get; set; }

        /// <summary>
        /// Maximum number of firewall addresses (IPv4, IPv6, multicast).
        /// </summary>
        [Input("firewallAddress")]
        public Input<int>? FirewallAddress { get; set; }

        /// <summary>
        /// Maximum number of firewall address groups (IPv4, IPv6).
        /// </summary>
        [Input("firewallAddrgrp")]
        public Input<int>? FirewallAddrgrp { get; set; }

        /// <summary>
        /// Maximum number of firewall policies (IPv4, IPv6, policy46, policy64, DoS-policy4, DoS-policy6, multicast).
        /// </summary>
        [Input("firewallPolicy")]
        public Input<int>? FirewallPolicy { get; set; }

        /// <summary>
        /// Maximum number of VPN IPsec phase1 tunnels.
        /// </summary>
        [Input("ipsecPhase1")]
        public Input<int>? IpsecPhase1 { get; set; }

        /// <summary>
        /// Maximum number of VPN IPsec phase1 interface tunnels.
        /// </summary>
        [Input("ipsecPhase1Interface")]
        public Input<int>? IpsecPhase1Interface { get; set; }

        /// <summary>
        /// Maximum number of VPN IPsec phase2 tunnels.
        /// </summary>
        [Input("ipsecPhase2")]
        public Input<int>? IpsecPhase2 { get; set; }

        /// <summary>
        /// Maximum number of VPN IPsec phase2 interface tunnels.
        /// </summary>
        [Input("ipsecPhase2Interface")]
        public Input<int>? IpsecPhase2Interface { get; set; }

        /// <summary>
        /// Log disk quota in MB.
        /// </summary>
        [Input("logDiskQuota")]
        public Input<int>? LogDiskQuota { get; set; }

        /// <summary>
        /// Maximum number of firewall one-time schedules.
        /// </summary>
        [Input("onetimeSchedule")]
        public Input<int>? OnetimeSchedule { get; set; }

        /// <summary>
        /// Maximum number of concurrent proxy users.
        /// </summary>
        [Input("proxy")]
        public Input<int>? Proxy { get; set; }

        /// <summary>
        /// Maximum number of firewall recurring schedules.
        /// </summary>
        [Input("recurringSchedule")]
        public Input<int>? RecurringSchedule { get; set; }

        /// <summary>
        /// Maximum number of firewall service groups.
        /// </summary>
        [Input("serviceGroup")]
        public Input<int>? ServiceGroup { get; set; }

        /// <summary>
        /// Maximum number of sessions.
        /// </summary>
        [Input("session")]
        public Input<int>? Session { get; set; }

        /// <summary>
        /// Maximum number of SSL-VPN.
        /// </summary>
        [Input("sslvpn")]
        public Input<int>? Sslvpn { get; set; }

        /// <summary>
        /// Maximum number of local users.
        /// </summary>
        [Input("user")]
        public Input<int>? User { get; set; }

        /// <summary>
        /// Maximum number of user groups.
        /// </summary>
        [Input("userGroup")]
        public Input<int>? UserGroup { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public ResourcelimitsArgs()
        {
        }
        public static new ResourcelimitsArgs Empty => new ResourcelimitsArgs();
    }

    public sealed class ResourcelimitsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Maximum number of firewall custom services.
        /// </summary>
        [Input("customService")]
        public Input<int>? CustomService { get; set; }

        /// <summary>
        /// Maximum number of dial-up tunnels.
        /// </summary>
        [Input("dialupTunnel")]
        public Input<int>? DialupTunnel { get; set; }

        /// <summary>
        /// Maximum number of firewall addresses (IPv4, IPv6, multicast).
        /// </summary>
        [Input("firewallAddress")]
        public Input<int>? FirewallAddress { get; set; }

        /// <summary>
        /// Maximum number of firewall address groups (IPv4, IPv6).
        /// </summary>
        [Input("firewallAddrgrp")]
        public Input<int>? FirewallAddrgrp { get; set; }

        /// <summary>
        /// Maximum number of firewall policies (IPv4, IPv6, policy46, policy64, DoS-policy4, DoS-policy6, multicast).
        /// </summary>
        [Input("firewallPolicy")]
        public Input<int>? FirewallPolicy { get; set; }

        /// <summary>
        /// Maximum number of VPN IPsec phase1 tunnels.
        /// </summary>
        [Input("ipsecPhase1")]
        public Input<int>? IpsecPhase1 { get; set; }

        /// <summary>
        /// Maximum number of VPN IPsec phase1 interface tunnels.
        /// </summary>
        [Input("ipsecPhase1Interface")]
        public Input<int>? IpsecPhase1Interface { get; set; }

        /// <summary>
        /// Maximum number of VPN IPsec phase2 tunnels.
        /// </summary>
        [Input("ipsecPhase2")]
        public Input<int>? IpsecPhase2 { get; set; }

        /// <summary>
        /// Maximum number of VPN IPsec phase2 interface tunnels.
        /// </summary>
        [Input("ipsecPhase2Interface")]
        public Input<int>? IpsecPhase2Interface { get; set; }

        /// <summary>
        /// Log disk quota in MB.
        /// </summary>
        [Input("logDiskQuota")]
        public Input<int>? LogDiskQuota { get; set; }

        /// <summary>
        /// Maximum number of firewall one-time schedules.
        /// </summary>
        [Input("onetimeSchedule")]
        public Input<int>? OnetimeSchedule { get; set; }

        /// <summary>
        /// Maximum number of concurrent proxy users.
        /// </summary>
        [Input("proxy")]
        public Input<int>? Proxy { get; set; }

        /// <summary>
        /// Maximum number of firewall recurring schedules.
        /// </summary>
        [Input("recurringSchedule")]
        public Input<int>? RecurringSchedule { get; set; }

        /// <summary>
        /// Maximum number of firewall service groups.
        /// </summary>
        [Input("serviceGroup")]
        public Input<int>? ServiceGroup { get; set; }

        /// <summary>
        /// Maximum number of sessions.
        /// </summary>
        [Input("session")]
        public Input<int>? Session { get; set; }

        /// <summary>
        /// Maximum number of SSL-VPN.
        /// </summary>
        [Input("sslvpn")]
        public Input<int>? Sslvpn { get; set; }

        /// <summary>
        /// Maximum number of local users.
        /// </summary>
        [Input("user")]
        public Input<int>? User { get; set; }

        /// <summary>
        /// Maximum number of user groups.
        /// </summary>
        [Input("userGroup")]
        public Input<int>? UserGroup { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public ResourcelimitsState()
        {
        }
        public static new ResourcelimitsState Empty => new ResourcelimitsState();
    }
}
