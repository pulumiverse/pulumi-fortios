// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System.Inputs
{

    public sealed class PcpserverPoolGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allowed PCP opcode. Valid values: `map`, `peer`, `announce`.
        /// </summary>
        [Input("allowOpcode")]
        public Input<string>? AllowOpcode { get; set; }

        /// <summary>
        /// Number of multicast announcements.
        /// </summary>
        [Input("announcementCount")]
        public Input<int>? AnnouncementCount { get; set; }

        /// <summary>
        /// Enable to respond to ARP requests for external IP (default = enable). Valid values: `disable`, `enable`.
        /// </summary>
        [Input("arpReply")]
        public Input<string>? ArpReply { get; set; }

        /// <summary>
        /// Mapping limit per client (0 - 65535, default = 0, 0 = unlimited).
        /// </summary>
        [Input("clientMappingLimit")]
        public Input<int>? ClientMappingLimit { get; set; }

        [Input("clientSubnets")]
        private InputList<Inputs.PcpserverPoolClientSubnetGetArgs>? _clientSubnets;

        /// <summary>
        /// Subnets from which PCP requests are accepted. The structure of `client_subnet` block is documented below.
        /// </summary>
        public InputList<Inputs.PcpserverPoolClientSubnetGetArgs> ClientSubnets
        {
            get => _clientSubnets ?? (_clientSubnets = new InputList<Inputs.PcpserverPoolClientSubnetGetArgs>());
            set => _clientSubnets = value;
        }

        /// <summary>
        /// Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// External interface name.
        /// </summary>
        [Input("extIntf")]
        public Input<string>? ExtIntf { get; set; }

        /// <summary>
        /// IP address or address range on the external interface that you want to map to an address on the internal network.
        /// </summary>
        [Input("extip")]
        public Input<string>? Extip { get; set; }

        /// <summary>
        /// Incoming port number range that you want to map to a port number on the internal network.
        /// </summary>
        [Input("extport")]
        public Input<string>? Extport { get; set; }

        /// <summary>
        /// ID.
        /// </summary>
        [Input("id")]
        public Input<int>? Id { get; set; }

        [Input("intlIntfs")]
        private InputList<Inputs.PcpserverPoolIntlIntfGetArgs>? _intlIntfs;

        /// <summary>
        /// Internal interface name. The structure of `intl_intf` block is documented below.
        /// </summary>
        public InputList<Inputs.PcpserverPoolIntlIntfGetArgs> IntlIntfs
        {
            get => _intlIntfs ?? (_intlIntfs = new InputList<Inputs.PcpserverPoolIntlIntfGetArgs>());
            set => _intlIntfs = value;
        }

        /// <summary>
        /// Filter limit per mapping (0 - 5, default = 1).
        /// </summary>
        [Input("mappingFilterLimit")]
        public Input<int>? MappingFilterLimit { get; set; }

        /// <summary>
        /// Maximal lifetime of a PCP mapping in seconds (3600 - 604800, default = 86400).
        /// </summary>
        [Input("maximalLifetime")]
        public Input<int>? MaximalLifetime { get; set; }

        /// <summary>
        /// Minimal lifetime of a PCP mapping in seconds (60 - 300, default = 120).
        /// </summary>
        [Input("minimalLifetime")]
        public Input<int>? MinimalLifetime { get; set; }

        /// <summary>
        /// Enable/disable multicast announcements. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("multicastAnnouncement")]
        public Input<string>? MulticastAnnouncement { get; set; }

        /// <summary>
        /// PCP pool name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Minimum delay (in seconds) the PCP Server will wait before recycling mappings that have expired (0 - 3600, default = 0).
        /// </summary>
        [Input("recycleDelay")]
        public Input<int>? RecycleDelay { get; set; }

        /// <summary>
        /// Allow/disallow third party option. Valid values: `allow`, `disallow`.
        /// </summary>
        [Input("thirdParty")]
        public Input<string>? ThirdParty { get; set; }

        [Input("thirdPartySubnets")]
        private InputList<Inputs.PcpserverPoolThirdPartySubnetGetArgs>? _thirdPartySubnets;

        /// <summary>
        /// Subnets from which third party requests are accepted. The structure of `third_party_subnet` block is documented below.
        /// </summary>
        public InputList<Inputs.PcpserverPoolThirdPartySubnetGetArgs> ThirdPartySubnets
        {
            get => _thirdPartySubnets ?? (_thirdPartySubnets = new InputList<Inputs.PcpserverPoolThirdPartySubnetGetArgs>());
            set => _thirdPartySubnets = value;
        }

        public PcpserverPoolGetArgs()
        {
        }
        public static new PcpserverPoolGetArgs Empty => new PcpserverPoolGetArgs();
    }
}
