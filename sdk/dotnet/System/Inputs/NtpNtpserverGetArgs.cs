// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System.Inputs
{

    public sealed class NtpNtpserverGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable MD5/SHA1 authentication. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("authentication")]
        public Input<string>? Authentication { get; set; }

        /// <summary>
        /// NTP server ID.
        /// </summary>
        [Input("id")]
        public Input<int>? Id { get; set; }

        /// <summary>
        /// Specify outgoing interface to reach server.
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        /// </summary>
        [Input("interfaceSelectMethod")]
        public Input<string>? InterfaceSelectMethod { get; set; }

        /// <summary>
        /// Choose to connect to IPv4 or/and IPv6 NTP server. Valid values: `IPv6`, `IPv4`, `Both`.
        /// </summary>
        [Input("ipType")]
        public Input<string>? IpType { get; set; }

        [Input("key")]
        private Input<string>? _key;

        /// <summary>
        /// Key for MD5/SHA1 authentication.
        /// </summary>
        public Input<string>? Key
        {
            get => _key;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _key = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Key ID for authentication.
        /// </summary>
        [Input("keyId")]
        public Input<int>? KeyId { get; set; }

        /// <summary>
        /// Enable to use NTPv3 instead of NTPv4. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("ntpv3")]
        public Input<string>? Ntpv3 { get; set; }

        /// <summary>
        /// IP address or hostname of the NTP Server.
        /// </summary>
        [Input("server")]
        public Input<string>? Server { get; set; }

        public NtpNtpserverGetArgs()
        {
        }
        public static new NtpNtpserverGetArgs Empty => new NtpNtpserverGetArgs();
    }
}
