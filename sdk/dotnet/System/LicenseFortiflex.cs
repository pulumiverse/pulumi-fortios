// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios.System
{
    /// <summary>
    /// Provides a resource to download VM license using uploaded FortiFlex token for FortiOS. Reboots immediately if successful.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Fortios.System.LicenseFortiflex("test", new()
    ///     {
    ///         Token = "5FE7B3CE6B606DEB20E3",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [FortiosResourceType("fortios:system/licenseFortiflex:LicenseFortiflex")]
    public partial class LicenseFortiflex : global::Pulumi.CustomResource
    {
        /// <summary>
        /// HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
        /// </summary>
        [Output("proxyUrl")]
        public Output<string?> ProxyUrl { get; private set; } = null!;

        /// <summary>
        /// FortiFlex VM license token.
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;


        /// <summary>
        /// Create a LicenseFortiflex resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LicenseFortiflex(string name, LicenseFortiflexArgs args, CustomResourceOptions? options = null)
            : base("fortios:system/licenseFortiflex:LicenseFortiflex", name, args ?? new LicenseFortiflexArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LicenseFortiflex(string name, Input<string> id, LicenseFortiflexState? state = null, CustomResourceOptions? options = null)
            : base("fortios:system/licenseFortiflex:LicenseFortiflex", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LicenseFortiflex resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LicenseFortiflex Get(string name, Input<string> id, LicenseFortiflexState? state = null, CustomResourceOptions? options = null)
        {
            return new LicenseFortiflex(name, id, state, options);
        }
    }

    public sealed class LicenseFortiflexArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
        /// </summary>
        [Input("proxyUrl")]
        public Input<string>? ProxyUrl { get; set; }

        /// <summary>
        /// FortiFlex VM license token.
        /// </summary>
        [Input("token", required: true)]
        public Input<string> Token { get; set; } = null!;

        public LicenseFortiflexArgs()
        {
        }
        public static new LicenseFortiflexArgs Empty => new LicenseFortiflexArgs();
    }

    public sealed class LicenseFortiflexState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
        /// </summary>
        [Input("proxyUrl")]
        public Input<string>? ProxyUrl { get; set; }

        /// <summary>
        /// FortiFlex VM license token.
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        public LicenseFortiflexState()
        {
        }
        public static new LicenseFortiflexState Empty => new LicenseFortiflexState();
    }
}
