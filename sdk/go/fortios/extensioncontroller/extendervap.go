// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package extensioncontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// FortiExtender wifi vap configuration. Applies to FortiOS Version `>= 7.4.4`.
//
// ## Import
//
// ExtensionController ExtenderVap can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:extensioncontroller/extendervap:Extendervap labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:extensioncontroller/extendervap:Extendervap labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Extendervap struct {
	pulumi.CustomResourceState

	// Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
	Allowaccess pulumi.StringOutput `pulumi:"allowaccess"`
	// Wi-Fi Authentication Server Address (IPv4 format).
	AuthServerAddress pulumi.StringOutput `pulumi:"authServerAddress"`
	// Wi-Fi Authentication Server Port.
	AuthServerPort pulumi.IntOutput `pulumi:"authServerPort"`
	// Wi-Fi Authentication Server Secret.
	AuthServerSecret pulumi.StringOutput `pulumi:"authServerSecret"`
	// Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
	BroadcastSsid pulumi.StringOutput `pulumi:"broadcastSsid"`
	// Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
	BssColorPartial pulumi.StringOutput `pulumi:"bssColorPartial"`
	// Wi-Fi DTIM (1 - 255) default = 1.
	Dtim pulumi.IntOutput `pulumi:"dtim"`
	// End ip address.
	EndIp pulumi.StringOutput `pulumi:"endIp"`
	// Extender ip address.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// Wi-Fi max clients (0 - 512), default = 0 (no limit)
	MaxClients pulumi.IntOutput `pulumi:"maxClients"`
	// Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
	MuMimo pulumi.StringOutput `pulumi:"muMimo"`
	// Wi-Fi VAP name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Wi-Fi passphrase.
	Passphrase pulumi.StringPtrOutput `pulumi:"passphrase"`
	// Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
	Pmf pulumi.StringOutput `pulumi:"pmf"`
	// Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
	RtsThreshold pulumi.IntOutput `pulumi:"rtsThreshold"`
	// Wi-Fi SAE Password.
	SaePassword pulumi.StringPtrOutput `pulumi:"saePassword"`
	// Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
	Security pulumi.StringOutput `pulumi:"security"`
	// Wi-Fi SSID.
	Ssid pulumi.StringOutput `pulumi:"ssid"`
	// Start ip address.
	StartIp pulumi.StringOutput `pulumi:"startIp"`
	// Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
	TargetWakeTime pulumi.StringOutput `pulumi:"targetWakeTime"`
	// Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewExtendervap registers a new resource with the given unique name, arguments, and options.
func NewExtendervap(ctx *pulumi.Context,
	name string, args *ExtendervapArgs, opts ...pulumi.ResourceOption) (*Extendervap, error) {
	if args == nil {
		args = &ExtendervapArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Extendervap
	err := ctx.RegisterResource("fortios:extensioncontroller/extendervap:Extendervap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtendervap gets an existing Extendervap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtendervap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtendervapState, opts ...pulumi.ResourceOption) (*Extendervap, error) {
	var resource Extendervap
	err := ctx.ReadResource("fortios:extensioncontroller/extendervap:Extendervap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Extendervap resources.
type extendervapState struct {
	// Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
	Allowaccess *string `pulumi:"allowaccess"`
	// Wi-Fi Authentication Server Address (IPv4 format).
	AuthServerAddress *string `pulumi:"authServerAddress"`
	// Wi-Fi Authentication Server Port.
	AuthServerPort *int `pulumi:"authServerPort"`
	// Wi-Fi Authentication Server Secret.
	AuthServerSecret *string `pulumi:"authServerSecret"`
	// Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
	BroadcastSsid *string `pulumi:"broadcastSsid"`
	// Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
	BssColorPartial *string `pulumi:"bssColorPartial"`
	// Wi-Fi DTIM (1 - 255) default = 1.
	Dtim *int `pulumi:"dtim"`
	// End ip address.
	EndIp *string `pulumi:"endIp"`
	// Extender ip address.
	IpAddress *string `pulumi:"ipAddress"`
	// Wi-Fi max clients (0 - 512), default = 0 (no limit)
	MaxClients *int `pulumi:"maxClients"`
	// Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
	MuMimo *string `pulumi:"muMimo"`
	// Wi-Fi VAP name.
	Name *string `pulumi:"name"`
	// Wi-Fi passphrase.
	Passphrase *string `pulumi:"passphrase"`
	// Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
	Pmf *string `pulumi:"pmf"`
	// Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
	RtsThreshold *int `pulumi:"rtsThreshold"`
	// Wi-Fi SAE Password.
	SaePassword *string `pulumi:"saePassword"`
	// Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
	Security *string `pulumi:"security"`
	// Wi-Fi SSID.
	Ssid *string `pulumi:"ssid"`
	// Start ip address.
	StartIp *string `pulumi:"startIp"`
	// Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
	TargetWakeTime *string `pulumi:"targetWakeTime"`
	// Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type ExtendervapState struct {
	// Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
	Allowaccess pulumi.StringPtrInput
	// Wi-Fi Authentication Server Address (IPv4 format).
	AuthServerAddress pulumi.StringPtrInput
	// Wi-Fi Authentication Server Port.
	AuthServerPort pulumi.IntPtrInput
	// Wi-Fi Authentication Server Secret.
	AuthServerSecret pulumi.StringPtrInput
	// Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
	BroadcastSsid pulumi.StringPtrInput
	// Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
	BssColorPartial pulumi.StringPtrInput
	// Wi-Fi DTIM (1 - 255) default = 1.
	Dtim pulumi.IntPtrInput
	// End ip address.
	EndIp pulumi.StringPtrInput
	// Extender ip address.
	IpAddress pulumi.StringPtrInput
	// Wi-Fi max clients (0 - 512), default = 0 (no limit)
	MaxClients pulumi.IntPtrInput
	// Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
	MuMimo pulumi.StringPtrInput
	// Wi-Fi VAP name.
	Name pulumi.StringPtrInput
	// Wi-Fi passphrase.
	Passphrase pulumi.StringPtrInput
	// Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
	Pmf pulumi.StringPtrInput
	// Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
	RtsThreshold pulumi.IntPtrInput
	// Wi-Fi SAE Password.
	SaePassword pulumi.StringPtrInput
	// Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
	Security pulumi.StringPtrInput
	// Wi-Fi SSID.
	Ssid pulumi.StringPtrInput
	// Start ip address.
	StartIp pulumi.StringPtrInput
	// Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
	TargetWakeTime pulumi.StringPtrInput
	// Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ExtendervapState) ElementType() reflect.Type {
	return reflect.TypeOf((*extendervapState)(nil)).Elem()
}

type extendervapArgs struct {
	// Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
	Allowaccess *string `pulumi:"allowaccess"`
	// Wi-Fi Authentication Server Address (IPv4 format).
	AuthServerAddress *string `pulumi:"authServerAddress"`
	// Wi-Fi Authentication Server Port.
	AuthServerPort *int `pulumi:"authServerPort"`
	// Wi-Fi Authentication Server Secret.
	AuthServerSecret *string `pulumi:"authServerSecret"`
	// Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
	BroadcastSsid *string `pulumi:"broadcastSsid"`
	// Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
	BssColorPartial *string `pulumi:"bssColorPartial"`
	// Wi-Fi DTIM (1 - 255) default = 1.
	Dtim *int `pulumi:"dtim"`
	// End ip address.
	EndIp *string `pulumi:"endIp"`
	// Extender ip address.
	IpAddress *string `pulumi:"ipAddress"`
	// Wi-Fi max clients (0 - 512), default = 0 (no limit)
	MaxClients *int `pulumi:"maxClients"`
	// Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
	MuMimo *string `pulumi:"muMimo"`
	// Wi-Fi VAP name.
	Name *string `pulumi:"name"`
	// Wi-Fi passphrase.
	Passphrase *string `pulumi:"passphrase"`
	// Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
	Pmf *string `pulumi:"pmf"`
	// Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
	RtsThreshold *int `pulumi:"rtsThreshold"`
	// Wi-Fi SAE Password.
	SaePassword *string `pulumi:"saePassword"`
	// Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
	Security *string `pulumi:"security"`
	// Wi-Fi SSID.
	Ssid *string `pulumi:"ssid"`
	// Start ip address.
	StartIp *string `pulumi:"startIp"`
	// Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
	TargetWakeTime *string `pulumi:"targetWakeTime"`
	// Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Extendervap resource.
type ExtendervapArgs struct {
	// Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
	Allowaccess pulumi.StringPtrInput
	// Wi-Fi Authentication Server Address (IPv4 format).
	AuthServerAddress pulumi.StringPtrInput
	// Wi-Fi Authentication Server Port.
	AuthServerPort pulumi.IntPtrInput
	// Wi-Fi Authentication Server Secret.
	AuthServerSecret pulumi.StringPtrInput
	// Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
	BroadcastSsid pulumi.StringPtrInput
	// Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
	BssColorPartial pulumi.StringPtrInput
	// Wi-Fi DTIM (1 - 255) default = 1.
	Dtim pulumi.IntPtrInput
	// End ip address.
	EndIp pulumi.StringPtrInput
	// Extender ip address.
	IpAddress pulumi.StringPtrInput
	// Wi-Fi max clients (0 - 512), default = 0 (no limit)
	MaxClients pulumi.IntPtrInput
	// Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
	MuMimo pulumi.StringPtrInput
	// Wi-Fi VAP name.
	Name pulumi.StringPtrInput
	// Wi-Fi passphrase.
	Passphrase pulumi.StringPtrInput
	// Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
	Pmf pulumi.StringPtrInput
	// Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
	RtsThreshold pulumi.IntPtrInput
	// Wi-Fi SAE Password.
	SaePassword pulumi.StringPtrInput
	// Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
	Security pulumi.StringPtrInput
	// Wi-Fi SSID.
	Ssid pulumi.StringPtrInput
	// Start ip address.
	StartIp pulumi.StringPtrInput
	// Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
	TargetWakeTime pulumi.StringPtrInput
	// Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ExtendervapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*extendervapArgs)(nil)).Elem()
}

type ExtendervapInput interface {
	pulumi.Input

	ToExtendervapOutput() ExtendervapOutput
	ToExtendervapOutputWithContext(ctx context.Context) ExtendervapOutput
}

func (*Extendervap) ElementType() reflect.Type {
	return reflect.TypeOf((**Extendervap)(nil)).Elem()
}

func (i *Extendervap) ToExtendervapOutput() ExtendervapOutput {
	return i.ToExtendervapOutputWithContext(context.Background())
}

func (i *Extendervap) ToExtendervapOutputWithContext(ctx context.Context) ExtendervapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendervapOutput)
}

// ExtendervapArrayInput is an input type that accepts ExtendervapArray and ExtendervapArrayOutput values.
// You can construct a concrete instance of `ExtendervapArrayInput` via:
//
//	ExtendervapArray{ ExtendervapArgs{...} }
type ExtendervapArrayInput interface {
	pulumi.Input

	ToExtendervapArrayOutput() ExtendervapArrayOutput
	ToExtendervapArrayOutputWithContext(context.Context) ExtendervapArrayOutput
}

type ExtendervapArray []ExtendervapInput

func (ExtendervapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Extendervap)(nil)).Elem()
}

func (i ExtendervapArray) ToExtendervapArrayOutput() ExtendervapArrayOutput {
	return i.ToExtendervapArrayOutputWithContext(context.Background())
}

func (i ExtendervapArray) ToExtendervapArrayOutputWithContext(ctx context.Context) ExtendervapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendervapArrayOutput)
}

// ExtendervapMapInput is an input type that accepts ExtendervapMap and ExtendervapMapOutput values.
// You can construct a concrete instance of `ExtendervapMapInput` via:
//
//	ExtendervapMap{ "key": ExtendervapArgs{...} }
type ExtendervapMapInput interface {
	pulumi.Input

	ToExtendervapMapOutput() ExtendervapMapOutput
	ToExtendervapMapOutputWithContext(context.Context) ExtendervapMapOutput
}

type ExtendervapMap map[string]ExtendervapInput

func (ExtendervapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Extendervap)(nil)).Elem()
}

func (i ExtendervapMap) ToExtendervapMapOutput() ExtendervapMapOutput {
	return i.ToExtendervapMapOutputWithContext(context.Background())
}

func (i ExtendervapMap) ToExtendervapMapOutputWithContext(ctx context.Context) ExtendervapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendervapMapOutput)
}

type ExtendervapOutput struct{ *pulumi.OutputState }

func (ExtendervapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Extendervap)(nil)).Elem()
}

func (o ExtendervapOutput) ToExtendervapOutput() ExtendervapOutput {
	return o
}

func (o ExtendervapOutput) ToExtendervapOutputWithContext(ctx context.Context) ExtendervapOutput {
	return o
}

// Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
func (o ExtendervapOutput) Allowaccess() pulumi.StringOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringOutput { return v.Allowaccess }).(pulumi.StringOutput)
}

// Wi-Fi Authentication Server Address (IPv4 format).
func (o ExtendervapOutput) AuthServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringOutput { return v.AuthServerAddress }).(pulumi.StringOutput)
}

// Wi-Fi Authentication Server Port.
func (o ExtendervapOutput) AuthServerPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.IntOutput { return v.AuthServerPort }).(pulumi.IntOutput)
}

// Wi-Fi Authentication Server Secret.
func (o ExtendervapOutput) AuthServerSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringOutput { return v.AuthServerSecret }).(pulumi.StringOutput)
}

// Wi-Fi broadcast SSID enable / disable. Valid values: `disable`, `enable`.
func (o ExtendervapOutput) BroadcastSsid() pulumi.StringOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringOutput { return v.BroadcastSsid }).(pulumi.StringOutput)
}

// Wi-Fi 802.11AX bss color partial enable / disable, default = enable. Valid values: `disable`, `enable`.
func (o ExtendervapOutput) BssColorPartial() pulumi.StringOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringOutput { return v.BssColorPartial }).(pulumi.StringOutput)
}

// Wi-Fi DTIM (1 - 255) default = 1.
func (o ExtendervapOutput) Dtim() pulumi.IntOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.IntOutput { return v.Dtim }).(pulumi.IntOutput)
}

// End ip address.
func (o ExtendervapOutput) EndIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringOutput { return v.EndIp }).(pulumi.StringOutput)
}

// Extender ip address.
func (o ExtendervapOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// Wi-Fi max clients (0 - 512), default = 0 (no limit)
func (o ExtendervapOutput) MaxClients() pulumi.IntOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.IntOutput { return v.MaxClients }).(pulumi.IntOutput)
}

// Wi-Fi multi-user MIMO enable / disable, default = enable. Valid values: `disable`, `enable`.
func (o ExtendervapOutput) MuMimo() pulumi.StringOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringOutput { return v.MuMimo }).(pulumi.StringOutput)
}

// Wi-Fi VAP name.
func (o ExtendervapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Wi-Fi passphrase.
func (o ExtendervapOutput) Passphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringPtrOutput { return v.Passphrase }).(pulumi.StringPtrOutput)
}

// Wi-Fi pmf enable/disable, default = disable. Valid values: `disabled`, `optional`, `required`.
func (o ExtendervapOutput) Pmf() pulumi.StringOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringOutput { return v.Pmf }).(pulumi.StringOutput)
}

// Wi-Fi RTS Threshold (256 - 2347), default = 2347 (RTS/CTS disabled).
func (o ExtendervapOutput) RtsThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.IntOutput { return v.RtsThreshold }).(pulumi.IntOutput)
}

// Wi-Fi SAE Password.
func (o ExtendervapOutput) SaePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringPtrOutput { return v.SaePassword }).(pulumi.StringPtrOutput)
}

// Wi-Fi security. Valid values: `OPEN`, `WPA2-Personal`, `WPA-WPA2-Personal`, `WPA3-SAE`, `WPA3-SAE-Transition`, `WPA2-Enterprise`, `WPA3-Enterprise-only`, `WPA3-Enterprise-transition`, `WPA3-Enterprise-192-bit`.
func (o ExtendervapOutput) Security() pulumi.StringOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringOutput { return v.Security }).(pulumi.StringOutput)
}

// Wi-Fi SSID.
func (o ExtendervapOutput) Ssid() pulumi.StringOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringOutput { return v.Ssid }).(pulumi.StringOutput)
}

// Start ip address.
func (o ExtendervapOutput) StartIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringOutput { return v.StartIp }).(pulumi.StringOutput)
}

// Wi-Fi 802.11AX target wake time enable / disable, default = enable. Valid values: `disable`, `enable`.
func (o ExtendervapOutput) TargetWakeTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringOutput { return v.TargetWakeTime }).(pulumi.StringOutput)
}

// Wi-Fi VAP type local-vap / lan-extension-vap. Valid values: `local-vap`, `lan-ext-vap`.
func (o ExtendervapOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ExtendervapOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Extendervap) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type ExtendervapArrayOutput struct{ *pulumi.OutputState }

func (ExtendervapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Extendervap)(nil)).Elem()
}

func (o ExtendervapArrayOutput) ToExtendervapArrayOutput() ExtendervapArrayOutput {
	return o
}

func (o ExtendervapArrayOutput) ToExtendervapArrayOutputWithContext(ctx context.Context) ExtendervapArrayOutput {
	return o
}

func (o ExtendervapArrayOutput) Index(i pulumi.IntInput) ExtendervapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Extendervap {
		return vs[0].([]*Extendervap)[vs[1].(int)]
	}).(ExtendervapOutput)
}

type ExtendervapMapOutput struct{ *pulumi.OutputState }

func (ExtendervapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Extendervap)(nil)).Elem()
}

func (o ExtendervapMapOutput) ToExtendervapMapOutput() ExtendervapMapOutput {
	return o
}

func (o ExtendervapMapOutput) ToExtendervapMapOutputWithContext(ctx context.Context) ExtendervapMapOutput {
	return o
}

func (o ExtendervapMapOutput) MapIndex(k pulumi.StringInput) ExtendervapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Extendervap {
		return vs[0].(map[string]*Extendervap)[vs[1].(string)]
	}).(ExtendervapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExtendervapInput)(nil)).Elem(), &Extendervap{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtendervapArrayInput)(nil)).Elem(), ExtendervapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtendervapMapInput)(nil)).Elem(), ExtendervapMap{})
	pulumi.RegisterOutputType(ExtendervapOutput{})
	pulumi.RegisterOutputType(ExtendervapArrayOutput{})
	pulumi.RegisterOutputType(ExtendervapMapOutput{})
}
