// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fmg

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// This resource supports installing devicemanager script from FortiManager to the related device
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/fmg"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fmg.NewDevicemanagerInstallDevice(ctx, "test1", &fmg.DevicemanagerInstallDeviceArgs{
//				TargetDevname: pulumi.String("FGVM64-test"),
//				Timeout:       pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DevicemanagerInstallDevice struct {
	pulumi.CustomResourceState

	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrOutput `pulumi:"adom"`
	// Target device name.
	TargetDevname pulumi.StringOutput `pulumi:"targetDevname"`
	// Timeout for installing the script to the target, default: 3 minutes.
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// Vdom of managed device. default is 'root'
	Vdom pulumi.StringPtrOutput `pulumi:"vdom"`
}

// NewDevicemanagerInstallDevice registers a new resource with the given unique name, arguments, and options.
func NewDevicemanagerInstallDevice(ctx *pulumi.Context,
	name string, args *DevicemanagerInstallDeviceArgs, opts ...pulumi.ResourceOption) (*DevicemanagerInstallDevice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TargetDevname == nil {
		return nil, errors.New("invalid value for required argument 'TargetDevname'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevicemanagerInstallDevice
	err := ctx.RegisterResource("fortios:fmg/devicemanagerInstallDevice:DevicemanagerInstallDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevicemanagerInstallDevice gets an existing DevicemanagerInstallDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevicemanagerInstallDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevicemanagerInstallDeviceState, opts ...pulumi.ResourceOption) (*DevicemanagerInstallDevice, error) {
	var resource DevicemanagerInstallDevice
	err := ctx.ReadResource("fortios:fmg/devicemanagerInstallDevice:DevicemanagerInstallDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevicemanagerInstallDevice resources.
type devicemanagerInstallDeviceState struct {
	// Source ADOM name. default is 'root'
	Adom *string `pulumi:"adom"`
	// Target device name.
	TargetDevname *string `pulumi:"targetDevname"`
	// Timeout for installing the script to the target, default: 3 minutes.
	Timeout *int `pulumi:"timeout"`
	// Vdom of managed device. default is 'root'
	Vdom *string `pulumi:"vdom"`
}

type DevicemanagerInstallDeviceState struct {
	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrInput
	// Target device name.
	TargetDevname pulumi.StringPtrInput
	// Timeout for installing the script to the target, default: 3 minutes.
	Timeout pulumi.IntPtrInput
	// Vdom of managed device. default is 'root'
	Vdom pulumi.StringPtrInput
}

func (DevicemanagerInstallDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*devicemanagerInstallDeviceState)(nil)).Elem()
}

type devicemanagerInstallDeviceArgs struct {
	// Source ADOM name. default is 'root'
	Adom *string `pulumi:"adom"`
	// Target device name.
	TargetDevname string `pulumi:"targetDevname"`
	// Timeout for installing the script to the target, default: 3 minutes.
	Timeout *int `pulumi:"timeout"`
	// Vdom of managed device. default is 'root'
	Vdom *string `pulumi:"vdom"`
}

// The set of arguments for constructing a DevicemanagerInstallDevice resource.
type DevicemanagerInstallDeviceArgs struct {
	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrInput
	// Target device name.
	TargetDevname pulumi.StringInput
	// Timeout for installing the script to the target, default: 3 minutes.
	Timeout pulumi.IntPtrInput
	// Vdom of managed device. default is 'root'
	Vdom pulumi.StringPtrInput
}

func (DevicemanagerInstallDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devicemanagerInstallDeviceArgs)(nil)).Elem()
}

type DevicemanagerInstallDeviceInput interface {
	pulumi.Input

	ToDevicemanagerInstallDeviceOutput() DevicemanagerInstallDeviceOutput
	ToDevicemanagerInstallDeviceOutputWithContext(ctx context.Context) DevicemanagerInstallDeviceOutput
}

func (*DevicemanagerInstallDevice) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicemanagerInstallDevice)(nil)).Elem()
}

func (i *DevicemanagerInstallDevice) ToDevicemanagerInstallDeviceOutput() DevicemanagerInstallDeviceOutput {
	return i.ToDevicemanagerInstallDeviceOutputWithContext(context.Background())
}

func (i *DevicemanagerInstallDevice) ToDevicemanagerInstallDeviceOutputWithContext(ctx context.Context) DevicemanagerInstallDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicemanagerInstallDeviceOutput)
}

// DevicemanagerInstallDeviceArrayInput is an input type that accepts DevicemanagerInstallDeviceArray and DevicemanagerInstallDeviceArrayOutput values.
// You can construct a concrete instance of `DevicemanagerInstallDeviceArrayInput` via:
//
//	DevicemanagerInstallDeviceArray{ DevicemanagerInstallDeviceArgs{...} }
type DevicemanagerInstallDeviceArrayInput interface {
	pulumi.Input

	ToDevicemanagerInstallDeviceArrayOutput() DevicemanagerInstallDeviceArrayOutput
	ToDevicemanagerInstallDeviceArrayOutputWithContext(context.Context) DevicemanagerInstallDeviceArrayOutput
}

type DevicemanagerInstallDeviceArray []DevicemanagerInstallDeviceInput

func (DevicemanagerInstallDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicemanagerInstallDevice)(nil)).Elem()
}

func (i DevicemanagerInstallDeviceArray) ToDevicemanagerInstallDeviceArrayOutput() DevicemanagerInstallDeviceArrayOutput {
	return i.ToDevicemanagerInstallDeviceArrayOutputWithContext(context.Background())
}

func (i DevicemanagerInstallDeviceArray) ToDevicemanagerInstallDeviceArrayOutputWithContext(ctx context.Context) DevicemanagerInstallDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicemanagerInstallDeviceArrayOutput)
}

// DevicemanagerInstallDeviceMapInput is an input type that accepts DevicemanagerInstallDeviceMap and DevicemanagerInstallDeviceMapOutput values.
// You can construct a concrete instance of `DevicemanagerInstallDeviceMapInput` via:
//
//	DevicemanagerInstallDeviceMap{ "key": DevicemanagerInstallDeviceArgs{...} }
type DevicemanagerInstallDeviceMapInput interface {
	pulumi.Input

	ToDevicemanagerInstallDeviceMapOutput() DevicemanagerInstallDeviceMapOutput
	ToDevicemanagerInstallDeviceMapOutputWithContext(context.Context) DevicemanagerInstallDeviceMapOutput
}

type DevicemanagerInstallDeviceMap map[string]DevicemanagerInstallDeviceInput

func (DevicemanagerInstallDeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicemanagerInstallDevice)(nil)).Elem()
}

func (i DevicemanagerInstallDeviceMap) ToDevicemanagerInstallDeviceMapOutput() DevicemanagerInstallDeviceMapOutput {
	return i.ToDevicemanagerInstallDeviceMapOutputWithContext(context.Background())
}

func (i DevicemanagerInstallDeviceMap) ToDevicemanagerInstallDeviceMapOutputWithContext(ctx context.Context) DevicemanagerInstallDeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicemanagerInstallDeviceMapOutput)
}

type DevicemanagerInstallDeviceOutput struct{ *pulumi.OutputState }

func (DevicemanagerInstallDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicemanagerInstallDevice)(nil)).Elem()
}

func (o DevicemanagerInstallDeviceOutput) ToDevicemanagerInstallDeviceOutput() DevicemanagerInstallDeviceOutput {
	return o
}

func (o DevicemanagerInstallDeviceOutput) ToDevicemanagerInstallDeviceOutputWithContext(ctx context.Context) DevicemanagerInstallDeviceOutput {
	return o
}

// Source ADOM name. default is 'root'
func (o DevicemanagerInstallDeviceOutput) Adom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicemanagerInstallDevice) pulumi.StringPtrOutput { return v.Adom }).(pulumi.StringPtrOutput)
}

// Target device name.
func (o DevicemanagerInstallDeviceOutput) TargetDevname() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicemanagerInstallDevice) pulumi.StringOutput { return v.TargetDevname }).(pulumi.StringOutput)
}

// Timeout for installing the script to the target, default: 3 minutes.
func (o DevicemanagerInstallDeviceOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DevicemanagerInstallDevice) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Vdom of managed device. default is 'root'
func (o DevicemanagerInstallDeviceOutput) Vdom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicemanagerInstallDevice) pulumi.StringPtrOutput { return v.Vdom }).(pulumi.StringPtrOutput)
}

type DevicemanagerInstallDeviceArrayOutput struct{ *pulumi.OutputState }

func (DevicemanagerInstallDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicemanagerInstallDevice)(nil)).Elem()
}

func (o DevicemanagerInstallDeviceArrayOutput) ToDevicemanagerInstallDeviceArrayOutput() DevicemanagerInstallDeviceArrayOutput {
	return o
}

func (o DevicemanagerInstallDeviceArrayOutput) ToDevicemanagerInstallDeviceArrayOutputWithContext(ctx context.Context) DevicemanagerInstallDeviceArrayOutput {
	return o
}

func (o DevicemanagerInstallDeviceArrayOutput) Index(i pulumi.IntInput) DevicemanagerInstallDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DevicemanagerInstallDevice {
		return vs[0].([]*DevicemanagerInstallDevice)[vs[1].(int)]
	}).(DevicemanagerInstallDeviceOutput)
}

type DevicemanagerInstallDeviceMapOutput struct{ *pulumi.OutputState }

func (DevicemanagerInstallDeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicemanagerInstallDevice)(nil)).Elem()
}

func (o DevicemanagerInstallDeviceMapOutput) ToDevicemanagerInstallDeviceMapOutput() DevicemanagerInstallDeviceMapOutput {
	return o
}

func (o DevicemanagerInstallDeviceMapOutput) ToDevicemanagerInstallDeviceMapOutputWithContext(ctx context.Context) DevicemanagerInstallDeviceMapOutput {
	return o
}

func (o DevicemanagerInstallDeviceMapOutput) MapIndex(k pulumi.StringInput) DevicemanagerInstallDeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DevicemanagerInstallDevice {
		return vs[0].(map[string]*DevicemanagerInstallDevice)[vs[1].(string)]
	}).(DevicemanagerInstallDeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevicemanagerInstallDeviceInput)(nil)).Elem(), &DevicemanagerInstallDevice{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicemanagerInstallDeviceArrayInput)(nil)).Elem(), DevicemanagerInstallDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicemanagerInstallDeviceMapInput)(nil)).Elem(), DevicemanagerInstallDeviceMap{})
	pulumi.RegisterOutputType(DevicemanagerInstallDeviceOutput{})
	pulumi.RegisterOutputType(DevicemanagerInstallDeviceArrayOutput{})
	pulumi.RegisterOutputType(DevicemanagerInstallDeviceMapOutput{})
}
