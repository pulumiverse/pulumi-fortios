// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fmg

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// This resource supports updating system network route for FortiManager.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/fmg"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fmg.NewSystemNetworkRoute(ctx, "test1", &fmg.SystemNetworkRouteArgs{
//				Destination: pulumi.String("192.168.2.0 255.255.255.0"),
//				Device:      pulumi.String("port4"),
//				Gateway:     pulumi.String("192.168.2.1"),
//				RouteId:     pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SystemNetworkRoute struct {
	pulumi.CustomResourceState

	// Destination Ip/Mask.
	Destination pulumi.StringOutput `pulumi:"destination"`
	// Gateway out interface.
	Device pulumi.StringOutput `pulumi:"device"`
	// Gateway Ip.
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Route id.
	RouteId pulumi.IntOutput `pulumi:"routeId"`
}

// NewSystemNetworkRoute registers a new resource with the given unique name, arguments, and options.
func NewSystemNetworkRoute(ctx *pulumi.Context,
	name string, args *SystemNetworkRouteArgs, opts ...pulumi.ResourceOption) (*SystemNetworkRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.Device == nil {
		return nil, errors.New("invalid value for required argument 'Device'")
	}
	if args.Gateway == nil {
		return nil, errors.New("invalid value for required argument 'Gateway'")
	}
	if args.RouteId == nil {
		return nil, errors.New("invalid value for required argument 'RouteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemNetworkRoute
	err := ctx.RegisterResource("fortios:fmg/systemNetworkRoute:SystemNetworkRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemNetworkRoute gets an existing SystemNetworkRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemNetworkRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemNetworkRouteState, opts ...pulumi.ResourceOption) (*SystemNetworkRoute, error) {
	var resource SystemNetworkRoute
	err := ctx.ReadResource("fortios:fmg/systemNetworkRoute:SystemNetworkRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemNetworkRoute resources.
type systemNetworkRouteState struct {
	// Destination Ip/Mask.
	Destination *string `pulumi:"destination"`
	// Gateway out interface.
	Device *string `pulumi:"device"`
	// Gateway Ip.
	Gateway *string `pulumi:"gateway"`
	// Route id.
	RouteId *int `pulumi:"routeId"`
}

type SystemNetworkRouteState struct {
	// Destination Ip/Mask.
	Destination pulumi.StringPtrInput
	// Gateway out interface.
	Device pulumi.StringPtrInput
	// Gateway Ip.
	Gateway pulumi.StringPtrInput
	// Route id.
	RouteId pulumi.IntPtrInput
}

func (SystemNetworkRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemNetworkRouteState)(nil)).Elem()
}

type systemNetworkRouteArgs struct {
	// Destination Ip/Mask.
	Destination string `pulumi:"destination"`
	// Gateway out interface.
	Device string `pulumi:"device"`
	// Gateway Ip.
	Gateway string `pulumi:"gateway"`
	// Route id.
	RouteId int `pulumi:"routeId"`
}

// The set of arguments for constructing a SystemNetworkRoute resource.
type SystemNetworkRouteArgs struct {
	// Destination Ip/Mask.
	Destination pulumi.StringInput
	// Gateway out interface.
	Device pulumi.StringInput
	// Gateway Ip.
	Gateway pulumi.StringInput
	// Route id.
	RouteId pulumi.IntInput
}

func (SystemNetworkRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemNetworkRouteArgs)(nil)).Elem()
}

type SystemNetworkRouteInput interface {
	pulumi.Input

	ToSystemNetworkRouteOutput() SystemNetworkRouteOutput
	ToSystemNetworkRouteOutputWithContext(ctx context.Context) SystemNetworkRouteOutput
}

func (*SystemNetworkRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemNetworkRoute)(nil)).Elem()
}

func (i *SystemNetworkRoute) ToSystemNetworkRouteOutput() SystemNetworkRouteOutput {
	return i.ToSystemNetworkRouteOutputWithContext(context.Background())
}

func (i *SystemNetworkRoute) ToSystemNetworkRouteOutputWithContext(ctx context.Context) SystemNetworkRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNetworkRouteOutput)
}

// SystemNetworkRouteArrayInput is an input type that accepts SystemNetworkRouteArray and SystemNetworkRouteArrayOutput values.
// You can construct a concrete instance of `SystemNetworkRouteArrayInput` via:
//
//	SystemNetworkRouteArray{ SystemNetworkRouteArgs{...} }
type SystemNetworkRouteArrayInput interface {
	pulumi.Input

	ToSystemNetworkRouteArrayOutput() SystemNetworkRouteArrayOutput
	ToSystemNetworkRouteArrayOutputWithContext(context.Context) SystemNetworkRouteArrayOutput
}

type SystemNetworkRouteArray []SystemNetworkRouteInput

func (SystemNetworkRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemNetworkRoute)(nil)).Elem()
}

func (i SystemNetworkRouteArray) ToSystemNetworkRouteArrayOutput() SystemNetworkRouteArrayOutput {
	return i.ToSystemNetworkRouteArrayOutputWithContext(context.Background())
}

func (i SystemNetworkRouteArray) ToSystemNetworkRouteArrayOutputWithContext(ctx context.Context) SystemNetworkRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNetworkRouteArrayOutput)
}

// SystemNetworkRouteMapInput is an input type that accepts SystemNetworkRouteMap and SystemNetworkRouteMapOutput values.
// You can construct a concrete instance of `SystemNetworkRouteMapInput` via:
//
//	SystemNetworkRouteMap{ "key": SystemNetworkRouteArgs{...} }
type SystemNetworkRouteMapInput interface {
	pulumi.Input

	ToSystemNetworkRouteMapOutput() SystemNetworkRouteMapOutput
	ToSystemNetworkRouteMapOutputWithContext(context.Context) SystemNetworkRouteMapOutput
}

type SystemNetworkRouteMap map[string]SystemNetworkRouteInput

func (SystemNetworkRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemNetworkRoute)(nil)).Elem()
}

func (i SystemNetworkRouteMap) ToSystemNetworkRouteMapOutput() SystemNetworkRouteMapOutput {
	return i.ToSystemNetworkRouteMapOutputWithContext(context.Background())
}

func (i SystemNetworkRouteMap) ToSystemNetworkRouteMapOutputWithContext(ctx context.Context) SystemNetworkRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemNetworkRouteMapOutput)
}

type SystemNetworkRouteOutput struct{ *pulumi.OutputState }

func (SystemNetworkRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemNetworkRoute)(nil)).Elem()
}

func (o SystemNetworkRouteOutput) ToSystemNetworkRouteOutput() SystemNetworkRouteOutput {
	return o
}

func (o SystemNetworkRouteOutput) ToSystemNetworkRouteOutputWithContext(ctx context.Context) SystemNetworkRouteOutput {
	return o
}

// Destination Ip/Mask.
func (o SystemNetworkRouteOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNetworkRoute) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

// Gateway out interface.
func (o SystemNetworkRouteOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNetworkRoute) pulumi.StringOutput { return v.Device }).(pulumi.StringOutput)
}

// Gateway Ip.
func (o SystemNetworkRouteOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemNetworkRoute) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// Route id.
func (o SystemNetworkRouteOutput) RouteId() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemNetworkRoute) pulumi.IntOutput { return v.RouteId }).(pulumi.IntOutput)
}

type SystemNetworkRouteArrayOutput struct{ *pulumi.OutputState }

func (SystemNetworkRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemNetworkRoute)(nil)).Elem()
}

func (o SystemNetworkRouteArrayOutput) ToSystemNetworkRouteArrayOutput() SystemNetworkRouteArrayOutput {
	return o
}

func (o SystemNetworkRouteArrayOutput) ToSystemNetworkRouteArrayOutputWithContext(ctx context.Context) SystemNetworkRouteArrayOutput {
	return o
}

func (o SystemNetworkRouteArrayOutput) Index(i pulumi.IntInput) SystemNetworkRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemNetworkRoute {
		return vs[0].([]*SystemNetworkRoute)[vs[1].(int)]
	}).(SystemNetworkRouteOutput)
}

type SystemNetworkRouteMapOutput struct{ *pulumi.OutputState }

func (SystemNetworkRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemNetworkRoute)(nil)).Elem()
}

func (o SystemNetworkRouteMapOutput) ToSystemNetworkRouteMapOutput() SystemNetworkRouteMapOutput {
	return o
}

func (o SystemNetworkRouteMapOutput) ToSystemNetworkRouteMapOutputWithContext(ctx context.Context) SystemNetworkRouteMapOutput {
	return o
}

func (o SystemNetworkRouteMapOutput) MapIndex(k pulumi.StringInput) SystemNetworkRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemNetworkRoute {
		return vs[0].(map[string]*SystemNetworkRoute)[vs[1].(string)]
	}).(SystemNetworkRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNetworkRouteInput)(nil)).Elem(), &SystemNetworkRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNetworkRouteArrayInput)(nil)).Elem(), SystemNetworkRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemNetworkRouteMapInput)(nil)).Elem(), SystemNetworkRouteMap{})
	pulumi.RegisterOutputType(SystemNetworkRouteOutput{})
	pulumi.RegisterOutputType(SystemNetworkRouteArrayOutput{})
	pulumi.RegisterOutputType(SystemNetworkRouteMapOutput{})
}
