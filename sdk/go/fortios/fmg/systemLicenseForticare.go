// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fmg

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// This resource supports uploading FortiCare registration code to FortiGate through FortiManager.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/fmg"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fmg.NewSystemLicenseForticare(ctx, "test1", &fmg.SystemLicenseForticareArgs{
//				RegistrationCode: pulumi.String("jn3t3Nw7qckQzt955Htkfj5hwQ6aaa"),
//				Target:           pulumi.String("fortigate-test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SystemLicenseForticare struct {
	pulumi.CustomResourceState

	// ADOM that the target device belongs to. default is 'root'.
	Adom pulumi.StringPtrOutput `pulumi:"adom"`
	// Registration code.
	RegistrationCode pulumi.StringOutput `pulumi:"registrationCode"`
	// Target name, which is managed by FortiManager.
	Target pulumi.StringOutput `pulumi:"target"`
}

// NewSystemLicenseForticare registers a new resource with the given unique name, arguments, and options.
func NewSystemLicenseForticare(ctx *pulumi.Context,
	name string, args *SystemLicenseForticareArgs, opts ...pulumi.ResourceOption) (*SystemLicenseForticare, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegistrationCode == nil {
		return nil, errors.New("invalid value for required argument 'RegistrationCode'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemLicenseForticare
	err := ctx.RegisterResource("fortios:fmg/systemLicenseForticare:SystemLicenseForticare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemLicenseForticare gets an existing SystemLicenseForticare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemLicenseForticare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemLicenseForticareState, opts ...pulumi.ResourceOption) (*SystemLicenseForticare, error) {
	var resource SystemLicenseForticare
	err := ctx.ReadResource("fortios:fmg/systemLicenseForticare:SystemLicenseForticare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemLicenseForticare resources.
type systemLicenseForticareState struct {
	// ADOM that the target device belongs to. default is 'root'.
	Adom *string `pulumi:"adom"`
	// Registration code.
	RegistrationCode *string `pulumi:"registrationCode"`
	// Target name, which is managed by FortiManager.
	Target *string `pulumi:"target"`
}

type SystemLicenseForticareState struct {
	// ADOM that the target device belongs to. default is 'root'.
	Adom pulumi.StringPtrInput
	// Registration code.
	RegistrationCode pulumi.StringPtrInput
	// Target name, which is managed by FortiManager.
	Target pulumi.StringPtrInput
}

func (SystemLicenseForticareState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLicenseForticareState)(nil)).Elem()
}

type systemLicenseForticareArgs struct {
	// ADOM that the target device belongs to. default is 'root'.
	Adom *string `pulumi:"adom"`
	// Registration code.
	RegistrationCode string `pulumi:"registrationCode"`
	// Target name, which is managed by FortiManager.
	Target string `pulumi:"target"`
}

// The set of arguments for constructing a SystemLicenseForticare resource.
type SystemLicenseForticareArgs struct {
	// ADOM that the target device belongs to. default is 'root'.
	Adom pulumi.StringPtrInput
	// Registration code.
	RegistrationCode pulumi.StringInput
	// Target name, which is managed by FortiManager.
	Target pulumi.StringInput
}

func (SystemLicenseForticareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLicenseForticareArgs)(nil)).Elem()
}

type SystemLicenseForticareInput interface {
	pulumi.Input

	ToSystemLicenseForticareOutput() SystemLicenseForticareOutput
	ToSystemLicenseForticareOutputWithContext(ctx context.Context) SystemLicenseForticareOutput
}

func (*SystemLicenseForticare) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLicenseForticare)(nil)).Elem()
}

func (i *SystemLicenseForticare) ToSystemLicenseForticareOutput() SystemLicenseForticareOutput {
	return i.ToSystemLicenseForticareOutputWithContext(context.Background())
}

func (i *SystemLicenseForticare) ToSystemLicenseForticareOutputWithContext(ctx context.Context) SystemLicenseForticareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLicenseForticareOutput)
}

// SystemLicenseForticareArrayInput is an input type that accepts SystemLicenseForticareArray and SystemLicenseForticareArrayOutput values.
// You can construct a concrete instance of `SystemLicenseForticareArrayInput` via:
//
//	SystemLicenseForticareArray{ SystemLicenseForticareArgs{...} }
type SystemLicenseForticareArrayInput interface {
	pulumi.Input

	ToSystemLicenseForticareArrayOutput() SystemLicenseForticareArrayOutput
	ToSystemLicenseForticareArrayOutputWithContext(context.Context) SystemLicenseForticareArrayOutput
}

type SystemLicenseForticareArray []SystemLicenseForticareInput

func (SystemLicenseForticareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemLicenseForticare)(nil)).Elem()
}

func (i SystemLicenseForticareArray) ToSystemLicenseForticareArrayOutput() SystemLicenseForticareArrayOutput {
	return i.ToSystemLicenseForticareArrayOutputWithContext(context.Background())
}

func (i SystemLicenseForticareArray) ToSystemLicenseForticareArrayOutputWithContext(ctx context.Context) SystemLicenseForticareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLicenseForticareArrayOutput)
}

// SystemLicenseForticareMapInput is an input type that accepts SystemLicenseForticareMap and SystemLicenseForticareMapOutput values.
// You can construct a concrete instance of `SystemLicenseForticareMapInput` via:
//
//	SystemLicenseForticareMap{ "key": SystemLicenseForticareArgs{...} }
type SystemLicenseForticareMapInput interface {
	pulumi.Input

	ToSystemLicenseForticareMapOutput() SystemLicenseForticareMapOutput
	ToSystemLicenseForticareMapOutputWithContext(context.Context) SystemLicenseForticareMapOutput
}

type SystemLicenseForticareMap map[string]SystemLicenseForticareInput

func (SystemLicenseForticareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemLicenseForticare)(nil)).Elem()
}

func (i SystemLicenseForticareMap) ToSystemLicenseForticareMapOutput() SystemLicenseForticareMapOutput {
	return i.ToSystemLicenseForticareMapOutputWithContext(context.Background())
}

func (i SystemLicenseForticareMap) ToSystemLicenseForticareMapOutputWithContext(ctx context.Context) SystemLicenseForticareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLicenseForticareMapOutput)
}

type SystemLicenseForticareOutput struct{ *pulumi.OutputState }

func (SystemLicenseForticareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLicenseForticare)(nil)).Elem()
}

func (o SystemLicenseForticareOutput) ToSystemLicenseForticareOutput() SystemLicenseForticareOutput {
	return o
}

func (o SystemLicenseForticareOutput) ToSystemLicenseForticareOutputWithContext(ctx context.Context) SystemLicenseForticareOutput {
	return o
}

// ADOM that the target device belongs to. default is 'root'.
func (o SystemLicenseForticareOutput) Adom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemLicenseForticare) pulumi.StringPtrOutput { return v.Adom }).(pulumi.StringPtrOutput)
}

// Registration code.
func (o SystemLicenseForticareOutput) RegistrationCode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLicenseForticare) pulumi.StringOutput { return v.RegistrationCode }).(pulumi.StringOutput)
}

// Target name, which is managed by FortiManager.
func (o SystemLicenseForticareOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLicenseForticare) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

type SystemLicenseForticareArrayOutput struct{ *pulumi.OutputState }

func (SystemLicenseForticareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemLicenseForticare)(nil)).Elem()
}

func (o SystemLicenseForticareArrayOutput) ToSystemLicenseForticareArrayOutput() SystemLicenseForticareArrayOutput {
	return o
}

func (o SystemLicenseForticareArrayOutput) ToSystemLicenseForticareArrayOutputWithContext(ctx context.Context) SystemLicenseForticareArrayOutput {
	return o
}

func (o SystemLicenseForticareArrayOutput) Index(i pulumi.IntInput) SystemLicenseForticareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemLicenseForticare {
		return vs[0].([]*SystemLicenseForticare)[vs[1].(int)]
	}).(SystemLicenseForticareOutput)
}

type SystemLicenseForticareMapOutput struct{ *pulumi.OutputState }

func (SystemLicenseForticareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemLicenseForticare)(nil)).Elem()
}

func (o SystemLicenseForticareMapOutput) ToSystemLicenseForticareMapOutput() SystemLicenseForticareMapOutput {
	return o
}

func (o SystemLicenseForticareMapOutput) ToSystemLicenseForticareMapOutputWithContext(ctx context.Context) SystemLicenseForticareMapOutput {
	return o
}

func (o SystemLicenseForticareMapOutput) MapIndex(k pulumi.StringInput) SystemLicenseForticareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemLicenseForticare {
		return vs[0].(map[string]*SystemLicenseForticare)[vs[1].(string)]
	}).(SystemLicenseForticareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLicenseForticareInput)(nil)).Elem(), &SystemLicenseForticare{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLicenseForticareArrayInput)(nil)).Elem(), SystemLicenseForticareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLicenseForticareMapInput)(nil)).Elem(), SystemLicenseForticareMap{})
	pulumi.RegisterOutputType(SystemLicenseForticareOutput{})
	pulumi.RegisterOutputType(SystemLicenseForticareArrayOutput{})
	pulumi.RegisterOutputType(SystemLicenseForticareMapOutput{})
}
