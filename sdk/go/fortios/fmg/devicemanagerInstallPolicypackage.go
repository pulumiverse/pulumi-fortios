// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fmg

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// This resource supports installing devicemanager policy package from FortiManager to the related FortiGate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/fmg"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fmg.NewDevicemanagerInstallPolicypackage(ctx, "test1", &fmg.DevicemanagerInstallPolicypackageArgs{
//				PackageName: pulumi.String("test-pkg1"),
//				Timeout:     pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DevicemanagerInstallPolicypackage struct {
	pulumi.CustomResourceState

	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrOutput `pulumi:"adom"`
	// The installation package name.
	PackageName pulumi.StringOutput `pulumi:"packageName"`
	// Timeout for installing the package to the target, default: 3 minutes.
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
}

// NewDevicemanagerInstallPolicypackage registers a new resource with the given unique name, arguments, and options.
func NewDevicemanagerInstallPolicypackage(ctx *pulumi.Context,
	name string, args *DevicemanagerInstallPolicypackageArgs, opts ...pulumi.ResourceOption) (*DevicemanagerInstallPolicypackage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PackageName == nil {
		return nil, errors.New("invalid value for required argument 'PackageName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevicemanagerInstallPolicypackage
	err := ctx.RegisterResource("fortios:fmg/devicemanagerInstallPolicypackage:DevicemanagerInstallPolicypackage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevicemanagerInstallPolicypackage gets an existing DevicemanagerInstallPolicypackage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevicemanagerInstallPolicypackage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevicemanagerInstallPolicypackageState, opts ...pulumi.ResourceOption) (*DevicemanagerInstallPolicypackage, error) {
	var resource DevicemanagerInstallPolicypackage
	err := ctx.ReadResource("fortios:fmg/devicemanagerInstallPolicypackage:DevicemanagerInstallPolicypackage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevicemanagerInstallPolicypackage resources.
type devicemanagerInstallPolicypackageState struct {
	// Source ADOM name. default is 'root'
	Adom *string `pulumi:"adom"`
	// The installation package name.
	PackageName *string `pulumi:"packageName"`
	// Timeout for installing the package to the target, default: 3 minutes.
	Timeout *int `pulumi:"timeout"`
}

type DevicemanagerInstallPolicypackageState struct {
	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrInput
	// The installation package name.
	PackageName pulumi.StringPtrInput
	// Timeout for installing the package to the target, default: 3 minutes.
	Timeout pulumi.IntPtrInput
}

func (DevicemanagerInstallPolicypackageState) ElementType() reflect.Type {
	return reflect.TypeOf((*devicemanagerInstallPolicypackageState)(nil)).Elem()
}

type devicemanagerInstallPolicypackageArgs struct {
	// Source ADOM name. default is 'root'
	Adom *string `pulumi:"adom"`
	// The installation package name.
	PackageName string `pulumi:"packageName"`
	// Timeout for installing the package to the target, default: 3 minutes.
	Timeout *int `pulumi:"timeout"`
}

// The set of arguments for constructing a DevicemanagerInstallPolicypackage resource.
type DevicemanagerInstallPolicypackageArgs struct {
	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrInput
	// The installation package name.
	PackageName pulumi.StringInput
	// Timeout for installing the package to the target, default: 3 minutes.
	Timeout pulumi.IntPtrInput
}

func (DevicemanagerInstallPolicypackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devicemanagerInstallPolicypackageArgs)(nil)).Elem()
}

type DevicemanagerInstallPolicypackageInput interface {
	pulumi.Input

	ToDevicemanagerInstallPolicypackageOutput() DevicemanagerInstallPolicypackageOutput
	ToDevicemanagerInstallPolicypackageOutputWithContext(ctx context.Context) DevicemanagerInstallPolicypackageOutput
}

func (*DevicemanagerInstallPolicypackage) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicemanagerInstallPolicypackage)(nil)).Elem()
}

func (i *DevicemanagerInstallPolicypackage) ToDevicemanagerInstallPolicypackageOutput() DevicemanagerInstallPolicypackageOutput {
	return i.ToDevicemanagerInstallPolicypackageOutputWithContext(context.Background())
}

func (i *DevicemanagerInstallPolicypackage) ToDevicemanagerInstallPolicypackageOutputWithContext(ctx context.Context) DevicemanagerInstallPolicypackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicemanagerInstallPolicypackageOutput)
}

// DevicemanagerInstallPolicypackageArrayInput is an input type that accepts DevicemanagerInstallPolicypackageArray and DevicemanagerInstallPolicypackageArrayOutput values.
// You can construct a concrete instance of `DevicemanagerInstallPolicypackageArrayInput` via:
//
//	DevicemanagerInstallPolicypackageArray{ DevicemanagerInstallPolicypackageArgs{...} }
type DevicemanagerInstallPolicypackageArrayInput interface {
	pulumi.Input

	ToDevicemanagerInstallPolicypackageArrayOutput() DevicemanagerInstallPolicypackageArrayOutput
	ToDevicemanagerInstallPolicypackageArrayOutputWithContext(context.Context) DevicemanagerInstallPolicypackageArrayOutput
}

type DevicemanagerInstallPolicypackageArray []DevicemanagerInstallPolicypackageInput

func (DevicemanagerInstallPolicypackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicemanagerInstallPolicypackage)(nil)).Elem()
}

func (i DevicemanagerInstallPolicypackageArray) ToDevicemanagerInstallPolicypackageArrayOutput() DevicemanagerInstallPolicypackageArrayOutput {
	return i.ToDevicemanagerInstallPolicypackageArrayOutputWithContext(context.Background())
}

func (i DevicemanagerInstallPolicypackageArray) ToDevicemanagerInstallPolicypackageArrayOutputWithContext(ctx context.Context) DevicemanagerInstallPolicypackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicemanagerInstallPolicypackageArrayOutput)
}

// DevicemanagerInstallPolicypackageMapInput is an input type that accepts DevicemanagerInstallPolicypackageMap and DevicemanagerInstallPolicypackageMapOutput values.
// You can construct a concrete instance of `DevicemanagerInstallPolicypackageMapInput` via:
//
//	DevicemanagerInstallPolicypackageMap{ "key": DevicemanagerInstallPolicypackageArgs{...} }
type DevicemanagerInstallPolicypackageMapInput interface {
	pulumi.Input

	ToDevicemanagerInstallPolicypackageMapOutput() DevicemanagerInstallPolicypackageMapOutput
	ToDevicemanagerInstallPolicypackageMapOutputWithContext(context.Context) DevicemanagerInstallPolicypackageMapOutput
}

type DevicemanagerInstallPolicypackageMap map[string]DevicemanagerInstallPolicypackageInput

func (DevicemanagerInstallPolicypackageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicemanagerInstallPolicypackage)(nil)).Elem()
}

func (i DevicemanagerInstallPolicypackageMap) ToDevicemanagerInstallPolicypackageMapOutput() DevicemanagerInstallPolicypackageMapOutput {
	return i.ToDevicemanagerInstallPolicypackageMapOutputWithContext(context.Background())
}

func (i DevicemanagerInstallPolicypackageMap) ToDevicemanagerInstallPolicypackageMapOutputWithContext(ctx context.Context) DevicemanagerInstallPolicypackageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicemanagerInstallPolicypackageMapOutput)
}

type DevicemanagerInstallPolicypackageOutput struct{ *pulumi.OutputState }

func (DevicemanagerInstallPolicypackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicemanagerInstallPolicypackage)(nil)).Elem()
}

func (o DevicemanagerInstallPolicypackageOutput) ToDevicemanagerInstallPolicypackageOutput() DevicemanagerInstallPolicypackageOutput {
	return o
}

func (o DevicemanagerInstallPolicypackageOutput) ToDevicemanagerInstallPolicypackageOutputWithContext(ctx context.Context) DevicemanagerInstallPolicypackageOutput {
	return o
}

// Source ADOM name. default is 'root'
func (o DevicemanagerInstallPolicypackageOutput) Adom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicemanagerInstallPolicypackage) pulumi.StringPtrOutput { return v.Adom }).(pulumi.StringPtrOutput)
}

// The installation package name.
func (o DevicemanagerInstallPolicypackageOutput) PackageName() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicemanagerInstallPolicypackage) pulumi.StringOutput { return v.PackageName }).(pulumi.StringOutput)
}

// Timeout for installing the package to the target, default: 3 minutes.
func (o DevicemanagerInstallPolicypackageOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DevicemanagerInstallPolicypackage) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

type DevicemanagerInstallPolicypackageArrayOutput struct{ *pulumi.OutputState }

func (DevicemanagerInstallPolicypackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicemanagerInstallPolicypackage)(nil)).Elem()
}

func (o DevicemanagerInstallPolicypackageArrayOutput) ToDevicemanagerInstallPolicypackageArrayOutput() DevicemanagerInstallPolicypackageArrayOutput {
	return o
}

func (o DevicemanagerInstallPolicypackageArrayOutput) ToDevicemanagerInstallPolicypackageArrayOutputWithContext(ctx context.Context) DevicemanagerInstallPolicypackageArrayOutput {
	return o
}

func (o DevicemanagerInstallPolicypackageArrayOutput) Index(i pulumi.IntInput) DevicemanagerInstallPolicypackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DevicemanagerInstallPolicypackage {
		return vs[0].([]*DevicemanagerInstallPolicypackage)[vs[1].(int)]
	}).(DevicemanagerInstallPolicypackageOutput)
}

type DevicemanagerInstallPolicypackageMapOutput struct{ *pulumi.OutputState }

func (DevicemanagerInstallPolicypackageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicemanagerInstallPolicypackage)(nil)).Elem()
}

func (o DevicemanagerInstallPolicypackageMapOutput) ToDevicemanagerInstallPolicypackageMapOutput() DevicemanagerInstallPolicypackageMapOutput {
	return o
}

func (o DevicemanagerInstallPolicypackageMapOutput) ToDevicemanagerInstallPolicypackageMapOutputWithContext(ctx context.Context) DevicemanagerInstallPolicypackageMapOutput {
	return o
}

func (o DevicemanagerInstallPolicypackageMapOutput) MapIndex(k pulumi.StringInput) DevicemanagerInstallPolicypackageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DevicemanagerInstallPolicypackage {
		return vs[0].(map[string]*DevicemanagerInstallPolicypackage)[vs[1].(string)]
	}).(DevicemanagerInstallPolicypackageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevicemanagerInstallPolicypackageInput)(nil)).Elem(), &DevicemanagerInstallPolicypackage{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicemanagerInstallPolicypackageArrayInput)(nil)).Elem(), DevicemanagerInstallPolicypackageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicemanagerInstallPolicypackageMapInput)(nil)).Elem(), DevicemanagerInstallPolicypackageMap{})
	pulumi.RegisterOutputType(DevicemanagerInstallPolicypackageOutput{})
	pulumi.RegisterOutputType(DevicemanagerInstallPolicypackageArrayOutput{})
	pulumi.RegisterOutputType(DevicemanagerInstallPolicypackageMapOutput{})
}
