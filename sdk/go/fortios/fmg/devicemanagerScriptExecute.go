// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fmg

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// This resource supports executing devicemanager script on Fortimanager.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/fmg"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fmg.NewDevicemanagerScriptExecute(ctx, "test3", &fmg.DevicemanagerScriptExecuteArgs{
//				ScriptName:    pulumi.String("config-intf3"),
//				TargetDevname: pulumi.String("devname"),
//				Timeout:       pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DevicemanagerScriptExecute struct {
	pulumi.CustomResourceState

	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrOutput `pulumi:"adom"`
	// Policy package.
	Package pulumi.StringPtrOutput `pulumi:"package"`
	// Script name.
	ScriptName pulumi.StringOutput `pulumi:"scriptName"`
	// Target device name, which the script will be installed.
	TargetDevname pulumi.StringPtrOutput `pulumi:"targetDevname"`
	// Timeout(minute) for executing the script, default is 3 minutes.
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// Vdom of managed device. default is 'root'
	Vdom pulumi.StringPtrOutput `pulumi:"vdom"`
}

// NewDevicemanagerScriptExecute registers a new resource with the given unique name, arguments, and options.
func NewDevicemanagerScriptExecute(ctx *pulumi.Context,
	name string, args *DevicemanagerScriptExecuteArgs, opts ...pulumi.ResourceOption) (*DevicemanagerScriptExecute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScriptName == nil {
		return nil, errors.New("invalid value for required argument 'ScriptName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevicemanagerScriptExecute
	err := ctx.RegisterResource("fortios:fmg/devicemanagerScriptExecute:DevicemanagerScriptExecute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevicemanagerScriptExecute gets an existing DevicemanagerScriptExecute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevicemanagerScriptExecute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevicemanagerScriptExecuteState, opts ...pulumi.ResourceOption) (*DevicemanagerScriptExecute, error) {
	var resource DevicemanagerScriptExecute
	err := ctx.ReadResource("fortios:fmg/devicemanagerScriptExecute:DevicemanagerScriptExecute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevicemanagerScriptExecute resources.
type devicemanagerScriptExecuteState struct {
	// Source ADOM name. default is 'root'
	Adom *string `pulumi:"adom"`
	// Policy package.
	Package *string `pulumi:"package"`
	// Script name.
	ScriptName *string `pulumi:"scriptName"`
	// Target device name, which the script will be installed.
	TargetDevname *string `pulumi:"targetDevname"`
	// Timeout(minute) for executing the script, default is 3 minutes.
	Timeout *int `pulumi:"timeout"`
	// Vdom of managed device. default is 'root'
	Vdom *string `pulumi:"vdom"`
}

type DevicemanagerScriptExecuteState struct {
	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrInput
	// Policy package.
	Package pulumi.StringPtrInput
	// Script name.
	ScriptName pulumi.StringPtrInput
	// Target device name, which the script will be installed.
	TargetDevname pulumi.StringPtrInput
	// Timeout(minute) for executing the script, default is 3 minutes.
	Timeout pulumi.IntPtrInput
	// Vdom of managed device. default is 'root'
	Vdom pulumi.StringPtrInput
}

func (DevicemanagerScriptExecuteState) ElementType() reflect.Type {
	return reflect.TypeOf((*devicemanagerScriptExecuteState)(nil)).Elem()
}

type devicemanagerScriptExecuteArgs struct {
	// Source ADOM name. default is 'root'
	Adom *string `pulumi:"adom"`
	// Policy package.
	Package *string `pulumi:"package"`
	// Script name.
	ScriptName string `pulumi:"scriptName"`
	// Target device name, which the script will be installed.
	TargetDevname *string `pulumi:"targetDevname"`
	// Timeout(minute) for executing the script, default is 3 minutes.
	Timeout *int `pulumi:"timeout"`
	// Vdom of managed device. default is 'root'
	Vdom *string `pulumi:"vdom"`
}

// The set of arguments for constructing a DevicemanagerScriptExecute resource.
type DevicemanagerScriptExecuteArgs struct {
	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrInput
	// Policy package.
	Package pulumi.StringPtrInput
	// Script name.
	ScriptName pulumi.StringInput
	// Target device name, which the script will be installed.
	TargetDevname pulumi.StringPtrInput
	// Timeout(minute) for executing the script, default is 3 minutes.
	Timeout pulumi.IntPtrInput
	// Vdom of managed device. default is 'root'
	Vdom pulumi.StringPtrInput
}

func (DevicemanagerScriptExecuteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devicemanagerScriptExecuteArgs)(nil)).Elem()
}

type DevicemanagerScriptExecuteInput interface {
	pulumi.Input

	ToDevicemanagerScriptExecuteOutput() DevicemanagerScriptExecuteOutput
	ToDevicemanagerScriptExecuteOutputWithContext(ctx context.Context) DevicemanagerScriptExecuteOutput
}

func (*DevicemanagerScriptExecute) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicemanagerScriptExecute)(nil)).Elem()
}

func (i *DevicemanagerScriptExecute) ToDevicemanagerScriptExecuteOutput() DevicemanagerScriptExecuteOutput {
	return i.ToDevicemanagerScriptExecuteOutputWithContext(context.Background())
}

func (i *DevicemanagerScriptExecute) ToDevicemanagerScriptExecuteOutputWithContext(ctx context.Context) DevicemanagerScriptExecuteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicemanagerScriptExecuteOutput)
}

// DevicemanagerScriptExecuteArrayInput is an input type that accepts DevicemanagerScriptExecuteArray and DevicemanagerScriptExecuteArrayOutput values.
// You can construct a concrete instance of `DevicemanagerScriptExecuteArrayInput` via:
//
//	DevicemanagerScriptExecuteArray{ DevicemanagerScriptExecuteArgs{...} }
type DevicemanagerScriptExecuteArrayInput interface {
	pulumi.Input

	ToDevicemanagerScriptExecuteArrayOutput() DevicemanagerScriptExecuteArrayOutput
	ToDevicemanagerScriptExecuteArrayOutputWithContext(context.Context) DevicemanagerScriptExecuteArrayOutput
}

type DevicemanagerScriptExecuteArray []DevicemanagerScriptExecuteInput

func (DevicemanagerScriptExecuteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicemanagerScriptExecute)(nil)).Elem()
}

func (i DevicemanagerScriptExecuteArray) ToDevicemanagerScriptExecuteArrayOutput() DevicemanagerScriptExecuteArrayOutput {
	return i.ToDevicemanagerScriptExecuteArrayOutputWithContext(context.Background())
}

func (i DevicemanagerScriptExecuteArray) ToDevicemanagerScriptExecuteArrayOutputWithContext(ctx context.Context) DevicemanagerScriptExecuteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicemanagerScriptExecuteArrayOutput)
}

// DevicemanagerScriptExecuteMapInput is an input type that accepts DevicemanagerScriptExecuteMap and DevicemanagerScriptExecuteMapOutput values.
// You can construct a concrete instance of `DevicemanagerScriptExecuteMapInput` via:
//
//	DevicemanagerScriptExecuteMap{ "key": DevicemanagerScriptExecuteArgs{...} }
type DevicemanagerScriptExecuteMapInput interface {
	pulumi.Input

	ToDevicemanagerScriptExecuteMapOutput() DevicemanagerScriptExecuteMapOutput
	ToDevicemanagerScriptExecuteMapOutputWithContext(context.Context) DevicemanagerScriptExecuteMapOutput
}

type DevicemanagerScriptExecuteMap map[string]DevicemanagerScriptExecuteInput

func (DevicemanagerScriptExecuteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicemanagerScriptExecute)(nil)).Elem()
}

func (i DevicemanagerScriptExecuteMap) ToDevicemanagerScriptExecuteMapOutput() DevicemanagerScriptExecuteMapOutput {
	return i.ToDevicemanagerScriptExecuteMapOutputWithContext(context.Background())
}

func (i DevicemanagerScriptExecuteMap) ToDevicemanagerScriptExecuteMapOutputWithContext(ctx context.Context) DevicemanagerScriptExecuteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicemanagerScriptExecuteMapOutput)
}

type DevicemanagerScriptExecuteOutput struct{ *pulumi.OutputState }

func (DevicemanagerScriptExecuteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicemanagerScriptExecute)(nil)).Elem()
}

func (o DevicemanagerScriptExecuteOutput) ToDevicemanagerScriptExecuteOutput() DevicemanagerScriptExecuteOutput {
	return o
}

func (o DevicemanagerScriptExecuteOutput) ToDevicemanagerScriptExecuteOutputWithContext(ctx context.Context) DevicemanagerScriptExecuteOutput {
	return o
}

// Source ADOM name. default is 'root'
func (o DevicemanagerScriptExecuteOutput) Adom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicemanagerScriptExecute) pulumi.StringPtrOutput { return v.Adom }).(pulumi.StringPtrOutput)
}

// Policy package.
func (o DevicemanagerScriptExecuteOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicemanagerScriptExecute) pulumi.StringPtrOutput { return v.Package }).(pulumi.StringPtrOutput)
}

// Script name.
func (o DevicemanagerScriptExecuteOutput) ScriptName() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicemanagerScriptExecute) pulumi.StringOutput { return v.ScriptName }).(pulumi.StringOutput)
}

// Target device name, which the script will be installed.
func (o DevicemanagerScriptExecuteOutput) TargetDevname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicemanagerScriptExecute) pulumi.StringPtrOutput { return v.TargetDevname }).(pulumi.StringPtrOutput)
}

// Timeout(minute) for executing the script, default is 3 minutes.
func (o DevicemanagerScriptExecuteOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DevicemanagerScriptExecute) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Vdom of managed device. default is 'root'
func (o DevicemanagerScriptExecuteOutput) Vdom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicemanagerScriptExecute) pulumi.StringPtrOutput { return v.Vdom }).(pulumi.StringPtrOutput)
}

type DevicemanagerScriptExecuteArrayOutput struct{ *pulumi.OutputState }

func (DevicemanagerScriptExecuteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicemanagerScriptExecute)(nil)).Elem()
}

func (o DevicemanagerScriptExecuteArrayOutput) ToDevicemanagerScriptExecuteArrayOutput() DevicemanagerScriptExecuteArrayOutput {
	return o
}

func (o DevicemanagerScriptExecuteArrayOutput) ToDevicemanagerScriptExecuteArrayOutputWithContext(ctx context.Context) DevicemanagerScriptExecuteArrayOutput {
	return o
}

func (o DevicemanagerScriptExecuteArrayOutput) Index(i pulumi.IntInput) DevicemanagerScriptExecuteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DevicemanagerScriptExecute {
		return vs[0].([]*DevicemanagerScriptExecute)[vs[1].(int)]
	}).(DevicemanagerScriptExecuteOutput)
}

type DevicemanagerScriptExecuteMapOutput struct{ *pulumi.OutputState }

func (DevicemanagerScriptExecuteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicemanagerScriptExecute)(nil)).Elem()
}

func (o DevicemanagerScriptExecuteMapOutput) ToDevicemanagerScriptExecuteMapOutput() DevicemanagerScriptExecuteMapOutput {
	return o
}

func (o DevicemanagerScriptExecuteMapOutput) ToDevicemanagerScriptExecuteMapOutputWithContext(ctx context.Context) DevicemanagerScriptExecuteMapOutput {
	return o
}

func (o DevicemanagerScriptExecuteMapOutput) MapIndex(k pulumi.StringInput) DevicemanagerScriptExecuteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DevicemanagerScriptExecute {
		return vs[0].(map[string]*DevicemanagerScriptExecute)[vs[1].(string)]
	}).(DevicemanagerScriptExecuteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevicemanagerScriptExecuteInput)(nil)).Elem(), &DevicemanagerScriptExecute{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicemanagerScriptExecuteArrayInput)(nil)).Elem(), DevicemanagerScriptExecuteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicemanagerScriptExecuteMapInput)(nil)).Elem(), DevicemanagerScriptExecuteMap{})
	pulumi.RegisterOutputType(DevicemanagerScriptExecuteOutput{})
	pulumi.RegisterOutputType(DevicemanagerScriptExecuteArrayOutput{})
	pulumi.RegisterOutputType(DevicemanagerScriptExecuteMapOutput{})
}
