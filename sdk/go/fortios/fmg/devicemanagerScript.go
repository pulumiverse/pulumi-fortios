// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fmg

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// This resource supports Create/Read/Update/Delete devicemanager script for FortiManager.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/fmg"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fmg.NewDevicemanagerScript(ctx, "test1", &fmg.DevicemanagerScriptArgs{
//				Content: pulumi.String(`config system interface
//	 edit port3
//		 set vdom "root"
//		 set ip 10.7.0.200 255.255.0.0
//		 set allowaccess ping http https
//		 next
//	 end
//
// `),
//
//				Description: pulumi.String("description"),
//				Target:      pulumi.String("remote_device"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DevicemanagerScript struct {
	pulumi.CustomResourceState

	// ADOM name. default is 'root'.
	Adom pulumi.StringPtrOutput `pulumi:"adom"`
	// Script content, only cli script is supported now
	Content pulumi.StringOutput `pulumi:"content"`
	// Description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Script name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Script target, Enum: ["deviceDatabase", "remoteDevice", "adomDatabase"]
	Target pulumi.StringPtrOutput `pulumi:"target"`
}

// NewDevicemanagerScript registers a new resource with the given unique name, arguments, and options.
func NewDevicemanagerScript(ctx *pulumi.Context,
	name string, args *DevicemanagerScriptArgs, opts ...pulumi.ResourceOption) (*DevicemanagerScript, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevicemanagerScript
	err := ctx.RegisterResource("fortios:fmg/devicemanagerScript:DevicemanagerScript", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevicemanagerScript gets an existing DevicemanagerScript resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevicemanagerScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevicemanagerScriptState, opts ...pulumi.ResourceOption) (*DevicemanagerScript, error) {
	var resource DevicemanagerScript
	err := ctx.ReadResource("fortios:fmg/devicemanagerScript:DevicemanagerScript", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevicemanagerScript resources.
type devicemanagerScriptState struct {
	// ADOM name. default is 'root'.
	Adom *string `pulumi:"adom"`
	// Script content, only cli script is supported now
	Content *string `pulumi:"content"`
	// Description.
	Description *string `pulumi:"description"`
	// Script name.
	Name *string `pulumi:"name"`
	// Script target, Enum: ["deviceDatabase", "remoteDevice", "adomDatabase"]
	Target *string `pulumi:"target"`
}

type DevicemanagerScriptState struct {
	// ADOM name. default is 'root'.
	Adom pulumi.StringPtrInput
	// Script content, only cli script is supported now
	Content pulumi.StringPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// Script name.
	Name pulumi.StringPtrInput
	// Script target, Enum: ["deviceDatabase", "remoteDevice", "adomDatabase"]
	Target pulumi.StringPtrInput
}

func (DevicemanagerScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*devicemanagerScriptState)(nil)).Elem()
}

type devicemanagerScriptArgs struct {
	// ADOM name. default is 'root'.
	Adom *string `pulumi:"adom"`
	// Script content, only cli script is supported now
	Content string `pulumi:"content"`
	// Description.
	Description *string `pulumi:"description"`
	// Script name.
	Name *string `pulumi:"name"`
	// Script target, Enum: ["deviceDatabase", "remoteDevice", "adomDatabase"]
	Target *string `pulumi:"target"`
}

// The set of arguments for constructing a DevicemanagerScript resource.
type DevicemanagerScriptArgs struct {
	// ADOM name. default is 'root'.
	Adom pulumi.StringPtrInput
	// Script content, only cli script is supported now
	Content pulumi.StringInput
	// Description.
	Description pulumi.StringPtrInput
	// Script name.
	Name pulumi.StringPtrInput
	// Script target, Enum: ["deviceDatabase", "remoteDevice", "adomDatabase"]
	Target pulumi.StringPtrInput
}

func (DevicemanagerScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devicemanagerScriptArgs)(nil)).Elem()
}

type DevicemanagerScriptInput interface {
	pulumi.Input

	ToDevicemanagerScriptOutput() DevicemanagerScriptOutput
	ToDevicemanagerScriptOutputWithContext(ctx context.Context) DevicemanagerScriptOutput
}

func (*DevicemanagerScript) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicemanagerScript)(nil)).Elem()
}

func (i *DevicemanagerScript) ToDevicemanagerScriptOutput() DevicemanagerScriptOutput {
	return i.ToDevicemanagerScriptOutputWithContext(context.Background())
}

func (i *DevicemanagerScript) ToDevicemanagerScriptOutputWithContext(ctx context.Context) DevicemanagerScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicemanagerScriptOutput)
}

// DevicemanagerScriptArrayInput is an input type that accepts DevicemanagerScriptArray and DevicemanagerScriptArrayOutput values.
// You can construct a concrete instance of `DevicemanagerScriptArrayInput` via:
//
//	DevicemanagerScriptArray{ DevicemanagerScriptArgs{...} }
type DevicemanagerScriptArrayInput interface {
	pulumi.Input

	ToDevicemanagerScriptArrayOutput() DevicemanagerScriptArrayOutput
	ToDevicemanagerScriptArrayOutputWithContext(context.Context) DevicemanagerScriptArrayOutput
}

type DevicemanagerScriptArray []DevicemanagerScriptInput

func (DevicemanagerScriptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicemanagerScript)(nil)).Elem()
}

func (i DevicemanagerScriptArray) ToDevicemanagerScriptArrayOutput() DevicemanagerScriptArrayOutput {
	return i.ToDevicemanagerScriptArrayOutputWithContext(context.Background())
}

func (i DevicemanagerScriptArray) ToDevicemanagerScriptArrayOutputWithContext(ctx context.Context) DevicemanagerScriptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicemanagerScriptArrayOutput)
}

// DevicemanagerScriptMapInput is an input type that accepts DevicemanagerScriptMap and DevicemanagerScriptMapOutput values.
// You can construct a concrete instance of `DevicemanagerScriptMapInput` via:
//
//	DevicemanagerScriptMap{ "key": DevicemanagerScriptArgs{...} }
type DevicemanagerScriptMapInput interface {
	pulumi.Input

	ToDevicemanagerScriptMapOutput() DevicemanagerScriptMapOutput
	ToDevicemanagerScriptMapOutputWithContext(context.Context) DevicemanagerScriptMapOutput
}

type DevicemanagerScriptMap map[string]DevicemanagerScriptInput

func (DevicemanagerScriptMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicemanagerScript)(nil)).Elem()
}

func (i DevicemanagerScriptMap) ToDevicemanagerScriptMapOutput() DevicemanagerScriptMapOutput {
	return i.ToDevicemanagerScriptMapOutputWithContext(context.Background())
}

func (i DevicemanagerScriptMap) ToDevicemanagerScriptMapOutputWithContext(ctx context.Context) DevicemanagerScriptMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicemanagerScriptMapOutput)
}

type DevicemanagerScriptOutput struct{ *pulumi.OutputState }

func (DevicemanagerScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicemanagerScript)(nil)).Elem()
}

func (o DevicemanagerScriptOutput) ToDevicemanagerScriptOutput() DevicemanagerScriptOutput {
	return o
}

func (o DevicemanagerScriptOutput) ToDevicemanagerScriptOutputWithContext(ctx context.Context) DevicemanagerScriptOutput {
	return o
}

// ADOM name. default is 'root'.
func (o DevicemanagerScriptOutput) Adom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicemanagerScript) pulumi.StringPtrOutput { return v.Adom }).(pulumi.StringPtrOutput)
}

// Script content, only cli script is supported now
func (o DevicemanagerScriptOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicemanagerScript) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// Description.
func (o DevicemanagerScriptOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicemanagerScript) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Script name.
func (o DevicemanagerScriptOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicemanagerScript) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Script target, Enum: ["deviceDatabase", "remoteDevice", "adomDatabase"]
func (o DevicemanagerScriptOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicemanagerScript) pulumi.StringPtrOutput { return v.Target }).(pulumi.StringPtrOutput)
}

type DevicemanagerScriptArrayOutput struct{ *pulumi.OutputState }

func (DevicemanagerScriptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicemanagerScript)(nil)).Elem()
}

func (o DevicemanagerScriptArrayOutput) ToDevicemanagerScriptArrayOutput() DevicemanagerScriptArrayOutput {
	return o
}

func (o DevicemanagerScriptArrayOutput) ToDevicemanagerScriptArrayOutputWithContext(ctx context.Context) DevicemanagerScriptArrayOutput {
	return o
}

func (o DevicemanagerScriptArrayOutput) Index(i pulumi.IntInput) DevicemanagerScriptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DevicemanagerScript {
		return vs[0].([]*DevicemanagerScript)[vs[1].(int)]
	}).(DevicemanagerScriptOutput)
}

type DevicemanagerScriptMapOutput struct{ *pulumi.OutputState }

func (DevicemanagerScriptMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicemanagerScript)(nil)).Elem()
}

func (o DevicemanagerScriptMapOutput) ToDevicemanagerScriptMapOutput() DevicemanagerScriptMapOutput {
	return o
}

func (o DevicemanagerScriptMapOutput) ToDevicemanagerScriptMapOutputWithContext(ctx context.Context) DevicemanagerScriptMapOutput {
	return o
}

func (o DevicemanagerScriptMapOutput) MapIndex(k pulumi.StringInput) DevicemanagerScriptOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DevicemanagerScript {
		return vs[0].(map[string]*DevicemanagerScript)[vs[1].(string)]
	}).(DevicemanagerScriptOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevicemanagerScriptInput)(nil)).Elem(), &DevicemanagerScript{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicemanagerScriptArrayInput)(nil)).Elem(), DevicemanagerScriptArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicemanagerScriptMapInput)(nil)).Elem(), DevicemanagerScriptMap{})
	pulumi.RegisterOutputType(DevicemanagerScriptOutput{})
	pulumi.RegisterOutputType(DevicemanagerScriptArrayOutput{})
	pulumi.RegisterOutputType(DevicemanagerScriptMapOutput{})
}
