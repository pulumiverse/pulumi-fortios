// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fmg

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// This resource supports modifying system dns setting for FortiManager.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/fmg"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fmg.NewSystemDns(ctx, "test1", &fmg.SystemDnsArgs{
//				Primary:   pulumi.String("208.91.112.52"),
//				Secondary: pulumi.String("208.91.112.54"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SystemDns struct {
	pulumi.CustomResourceState

	// Primary DNS IP.
	Primary pulumi.StringPtrOutput `pulumi:"primary"`
	// Secondary DNS IP.
	Secondary pulumi.StringPtrOutput `pulumi:"secondary"`
}

// NewSystemDns registers a new resource with the given unique name, arguments, and options.
func NewSystemDns(ctx *pulumi.Context,
	name string, args *SystemDnsArgs, opts ...pulumi.ResourceOption) (*SystemDns, error) {
	if args == nil {
		args = &SystemDnsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemDns
	err := ctx.RegisterResource("fortios:fmg/systemDns:SystemDns", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemDns gets an existing SystemDns resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemDns(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemDnsState, opts ...pulumi.ResourceOption) (*SystemDns, error) {
	var resource SystemDns
	err := ctx.ReadResource("fortios:fmg/systemDns:SystemDns", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemDns resources.
type systemDnsState struct {
	// Primary DNS IP.
	Primary *string `pulumi:"primary"`
	// Secondary DNS IP.
	Secondary *string `pulumi:"secondary"`
}

type SystemDnsState struct {
	// Primary DNS IP.
	Primary pulumi.StringPtrInput
	// Secondary DNS IP.
	Secondary pulumi.StringPtrInput
}

func (SystemDnsState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemDnsState)(nil)).Elem()
}

type systemDnsArgs struct {
	// Primary DNS IP.
	Primary *string `pulumi:"primary"`
	// Secondary DNS IP.
	Secondary *string `pulumi:"secondary"`
}

// The set of arguments for constructing a SystemDns resource.
type SystemDnsArgs struct {
	// Primary DNS IP.
	Primary pulumi.StringPtrInput
	// Secondary DNS IP.
	Secondary pulumi.StringPtrInput
}

func (SystemDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemDnsArgs)(nil)).Elem()
}

type SystemDnsInput interface {
	pulumi.Input

	ToSystemDnsOutput() SystemDnsOutput
	ToSystemDnsOutputWithContext(ctx context.Context) SystemDnsOutput
}

func (*SystemDns) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDns)(nil)).Elem()
}

func (i *SystemDns) ToSystemDnsOutput() SystemDnsOutput {
	return i.ToSystemDnsOutputWithContext(context.Background())
}

func (i *SystemDns) ToSystemDnsOutputWithContext(ctx context.Context) SystemDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDnsOutput)
}

// SystemDnsArrayInput is an input type that accepts SystemDnsArray and SystemDnsArrayOutput values.
// You can construct a concrete instance of `SystemDnsArrayInput` via:
//
//	SystemDnsArray{ SystemDnsArgs{...} }
type SystemDnsArrayInput interface {
	pulumi.Input

	ToSystemDnsArrayOutput() SystemDnsArrayOutput
	ToSystemDnsArrayOutputWithContext(context.Context) SystemDnsArrayOutput
}

type SystemDnsArray []SystemDnsInput

func (SystemDnsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemDns)(nil)).Elem()
}

func (i SystemDnsArray) ToSystemDnsArrayOutput() SystemDnsArrayOutput {
	return i.ToSystemDnsArrayOutputWithContext(context.Background())
}

func (i SystemDnsArray) ToSystemDnsArrayOutputWithContext(ctx context.Context) SystemDnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDnsArrayOutput)
}

// SystemDnsMapInput is an input type that accepts SystemDnsMap and SystemDnsMapOutput values.
// You can construct a concrete instance of `SystemDnsMapInput` via:
//
//	SystemDnsMap{ "key": SystemDnsArgs{...} }
type SystemDnsMapInput interface {
	pulumi.Input

	ToSystemDnsMapOutput() SystemDnsMapOutput
	ToSystemDnsMapOutputWithContext(context.Context) SystemDnsMapOutput
}

type SystemDnsMap map[string]SystemDnsInput

func (SystemDnsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemDns)(nil)).Elem()
}

func (i SystemDnsMap) ToSystemDnsMapOutput() SystemDnsMapOutput {
	return i.ToSystemDnsMapOutputWithContext(context.Background())
}

func (i SystemDnsMap) ToSystemDnsMapOutputWithContext(ctx context.Context) SystemDnsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDnsMapOutput)
}

type SystemDnsOutput struct{ *pulumi.OutputState }

func (SystemDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDns)(nil)).Elem()
}

func (o SystemDnsOutput) ToSystemDnsOutput() SystemDnsOutput {
	return o
}

func (o SystemDnsOutput) ToSystemDnsOutputWithContext(ctx context.Context) SystemDnsOutput {
	return o
}

// Primary DNS IP.
func (o SystemDnsOutput) Primary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDns) pulumi.StringPtrOutput { return v.Primary }).(pulumi.StringPtrOutput)
}

// Secondary DNS IP.
func (o SystemDnsOutput) Secondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDns) pulumi.StringPtrOutput { return v.Secondary }).(pulumi.StringPtrOutput)
}

type SystemDnsArrayOutput struct{ *pulumi.OutputState }

func (SystemDnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemDns)(nil)).Elem()
}

func (o SystemDnsArrayOutput) ToSystemDnsArrayOutput() SystemDnsArrayOutput {
	return o
}

func (o SystemDnsArrayOutput) ToSystemDnsArrayOutputWithContext(ctx context.Context) SystemDnsArrayOutput {
	return o
}

func (o SystemDnsArrayOutput) Index(i pulumi.IntInput) SystemDnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemDns {
		return vs[0].([]*SystemDns)[vs[1].(int)]
	}).(SystemDnsOutput)
}

type SystemDnsMapOutput struct{ *pulumi.OutputState }

func (SystemDnsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemDns)(nil)).Elem()
}

func (o SystemDnsMapOutput) ToSystemDnsMapOutput() SystemDnsMapOutput {
	return o
}

func (o SystemDnsMapOutput) ToSystemDnsMapOutputWithContext(ctx context.Context) SystemDnsMapOutput {
	return o
}

func (o SystemDnsMapOutput) MapIndex(k pulumi.StringInput) SystemDnsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemDns {
		return vs[0].(map[string]*SystemDns)[vs[1].(string)]
	}).(SystemDnsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDnsInput)(nil)).Elem(), &SystemDns{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDnsArrayInput)(nil)).Elem(), SystemDnsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDnsMapInput)(nil)).Elem(), SystemDnsMap{})
	pulumi.RegisterOutputType(SystemDnsOutput{})
	pulumi.RegisterOutputType(SystemDnsArrayOutput{})
	pulumi.RegisterOutputType(SystemDnsMapOutput{})
}
