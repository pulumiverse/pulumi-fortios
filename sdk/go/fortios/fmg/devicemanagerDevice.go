// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fmg

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// This resource supports adding/deleting online FortiGate to/from FortiManager
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/fmg"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fmg.NewDevicemanagerDevice(ctx, "test1", &fmg.DevicemanagerDeviceArgs{
//				DeviceName: pulumi.String("FGVM64-test"),
//				Ipaddr:     pulumi.String("192.168.88.101"),
//				Password:   pulumi.String(""),
//				Userid:     pulumi.String("admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DevicemanagerDevice struct {
	pulumi.CustomResourceState

	// Name or ID of the ADOM where the command is to be executed on.
	Adom pulumi.StringPtrOutput `pulumi:"adom"`
	// Fortigate's device name.
	DeviceName pulumi.StringOutput `pulumi:"deviceName"`
	// Fortigate's ipaddress.
	Ipaddr pulumi.StringOutput `pulumi:"ipaddr"`
	// Password.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// User name.
	Userid pulumi.StringOutput `pulumi:"userid"`
}

// NewDevicemanagerDevice registers a new resource with the given unique name, arguments, and options.
func NewDevicemanagerDevice(ctx *pulumi.Context,
	name string, args *DevicemanagerDeviceArgs, opts ...pulumi.ResourceOption) (*DevicemanagerDevice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceName == nil {
		return nil, errors.New("invalid value for required argument 'DeviceName'")
	}
	if args.Ipaddr == nil {
		return nil, errors.New("invalid value for required argument 'Ipaddr'")
	}
	if args.Userid == nil {
		return nil, errors.New("invalid value for required argument 'Userid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevicemanagerDevice
	err := ctx.RegisterResource("fortios:fmg/devicemanagerDevice:DevicemanagerDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevicemanagerDevice gets an existing DevicemanagerDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevicemanagerDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevicemanagerDeviceState, opts ...pulumi.ResourceOption) (*DevicemanagerDevice, error) {
	var resource DevicemanagerDevice
	err := ctx.ReadResource("fortios:fmg/devicemanagerDevice:DevicemanagerDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevicemanagerDevice resources.
type devicemanagerDeviceState struct {
	// Name or ID of the ADOM where the command is to be executed on.
	Adom *string `pulumi:"adom"`
	// Fortigate's device name.
	DeviceName *string `pulumi:"deviceName"`
	// Fortigate's ipaddress.
	Ipaddr *string `pulumi:"ipaddr"`
	// Password.
	Password *string `pulumi:"password"`
	// User name.
	Userid *string `pulumi:"userid"`
}

type DevicemanagerDeviceState struct {
	// Name or ID of the ADOM where the command is to be executed on.
	Adom pulumi.StringPtrInput
	// Fortigate's device name.
	DeviceName pulumi.StringPtrInput
	// Fortigate's ipaddress.
	Ipaddr pulumi.StringPtrInput
	// Password.
	Password pulumi.StringPtrInput
	// User name.
	Userid pulumi.StringPtrInput
}

func (DevicemanagerDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*devicemanagerDeviceState)(nil)).Elem()
}

type devicemanagerDeviceArgs struct {
	// Name or ID of the ADOM where the command is to be executed on.
	Adom *string `pulumi:"adom"`
	// Fortigate's device name.
	DeviceName string `pulumi:"deviceName"`
	// Fortigate's ipaddress.
	Ipaddr string `pulumi:"ipaddr"`
	// Password.
	Password *string `pulumi:"password"`
	// User name.
	Userid string `pulumi:"userid"`
}

// The set of arguments for constructing a DevicemanagerDevice resource.
type DevicemanagerDeviceArgs struct {
	// Name or ID of the ADOM where the command is to be executed on.
	Adom pulumi.StringPtrInput
	// Fortigate's device name.
	DeviceName pulumi.StringInput
	// Fortigate's ipaddress.
	Ipaddr pulumi.StringInput
	// Password.
	Password pulumi.StringPtrInput
	// User name.
	Userid pulumi.StringInput
}

func (DevicemanagerDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devicemanagerDeviceArgs)(nil)).Elem()
}

type DevicemanagerDeviceInput interface {
	pulumi.Input

	ToDevicemanagerDeviceOutput() DevicemanagerDeviceOutput
	ToDevicemanagerDeviceOutputWithContext(ctx context.Context) DevicemanagerDeviceOutput
}

func (*DevicemanagerDevice) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicemanagerDevice)(nil)).Elem()
}

func (i *DevicemanagerDevice) ToDevicemanagerDeviceOutput() DevicemanagerDeviceOutput {
	return i.ToDevicemanagerDeviceOutputWithContext(context.Background())
}

func (i *DevicemanagerDevice) ToDevicemanagerDeviceOutputWithContext(ctx context.Context) DevicemanagerDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicemanagerDeviceOutput)
}

// DevicemanagerDeviceArrayInput is an input type that accepts DevicemanagerDeviceArray and DevicemanagerDeviceArrayOutput values.
// You can construct a concrete instance of `DevicemanagerDeviceArrayInput` via:
//
//	DevicemanagerDeviceArray{ DevicemanagerDeviceArgs{...} }
type DevicemanagerDeviceArrayInput interface {
	pulumi.Input

	ToDevicemanagerDeviceArrayOutput() DevicemanagerDeviceArrayOutput
	ToDevicemanagerDeviceArrayOutputWithContext(context.Context) DevicemanagerDeviceArrayOutput
}

type DevicemanagerDeviceArray []DevicemanagerDeviceInput

func (DevicemanagerDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicemanagerDevice)(nil)).Elem()
}

func (i DevicemanagerDeviceArray) ToDevicemanagerDeviceArrayOutput() DevicemanagerDeviceArrayOutput {
	return i.ToDevicemanagerDeviceArrayOutputWithContext(context.Background())
}

func (i DevicemanagerDeviceArray) ToDevicemanagerDeviceArrayOutputWithContext(ctx context.Context) DevicemanagerDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicemanagerDeviceArrayOutput)
}

// DevicemanagerDeviceMapInput is an input type that accepts DevicemanagerDeviceMap and DevicemanagerDeviceMapOutput values.
// You can construct a concrete instance of `DevicemanagerDeviceMapInput` via:
//
//	DevicemanagerDeviceMap{ "key": DevicemanagerDeviceArgs{...} }
type DevicemanagerDeviceMapInput interface {
	pulumi.Input

	ToDevicemanagerDeviceMapOutput() DevicemanagerDeviceMapOutput
	ToDevicemanagerDeviceMapOutputWithContext(context.Context) DevicemanagerDeviceMapOutput
}

type DevicemanagerDeviceMap map[string]DevicemanagerDeviceInput

func (DevicemanagerDeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicemanagerDevice)(nil)).Elem()
}

func (i DevicemanagerDeviceMap) ToDevicemanagerDeviceMapOutput() DevicemanagerDeviceMapOutput {
	return i.ToDevicemanagerDeviceMapOutputWithContext(context.Background())
}

func (i DevicemanagerDeviceMap) ToDevicemanagerDeviceMapOutputWithContext(ctx context.Context) DevicemanagerDeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicemanagerDeviceMapOutput)
}

type DevicemanagerDeviceOutput struct{ *pulumi.OutputState }

func (DevicemanagerDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicemanagerDevice)(nil)).Elem()
}

func (o DevicemanagerDeviceOutput) ToDevicemanagerDeviceOutput() DevicemanagerDeviceOutput {
	return o
}

func (o DevicemanagerDeviceOutput) ToDevicemanagerDeviceOutputWithContext(ctx context.Context) DevicemanagerDeviceOutput {
	return o
}

// Name or ID of the ADOM where the command is to be executed on.
func (o DevicemanagerDeviceOutput) Adom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicemanagerDevice) pulumi.StringPtrOutput { return v.Adom }).(pulumi.StringPtrOutput)
}

// Fortigate's device name.
func (o DevicemanagerDeviceOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicemanagerDevice) pulumi.StringOutput { return v.DeviceName }).(pulumi.StringOutput)
}

// Fortigate's ipaddress.
func (o DevicemanagerDeviceOutput) Ipaddr() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicemanagerDevice) pulumi.StringOutput { return v.Ipaddr }).(pulumi.StringOutput)
}

// Password.
func (o DevicemanagerDeviceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicemanagerDevice) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// User name.
func (o DevicemanagerDeviceOutput) Userid() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicemanagerDevice) pulumi.StringOutput { return v.Userid }).(pulumi.StringOutput)
}

type DevicemanagerDeviceArrayOutput struct{ *pulumi.OutputState }

func (DevicemanagerDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicemanagerDevice)(nil)).Elem()
}

func (o DevicemanagerDeviceArrayOutput) ToDevicemanagerDeviceArrayOutput() DevicemanagerDeviceArrayOutput {
	return o
}

func (o DevicemanagerDeviceArrayOutput) ToDevicemanagerDeviceArrayOutputWithContext(ctx context.Context) DevicemanagerDeviceArrayOutput {
	return o
}

func (o DevicemanagerDeviceArrayOutput) Index(i pulumi.IntInput) DevicemanagerDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DevicemanagerDevice {
		return vs[0].([]*DevicemanagerDevice)[vs[1].(int)]
	}).(DevicemanagerDeviceOutput)
}

type DevicemanagerDeviceMapOutput struct{ *pulumi.OutputState }

func (DevicemanagerDeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicemanagerDevice)(nil)).Elem()
}

func (o DevicemanagerDeviceMapOutput) ToDevicemanagerDeviceMapOutput() DevicemanagerDeviceMapOutput {
	return o
}

func (o DevicemanagerDeviceMapOutput) ToDevicemanagerDeviceMapOutputWithContext(ctx context.Context) DevicemanagerDeviceMapOutput {
	return o
}

func (o DevicemanagerDeviceMapOutput) MapIndex(k pulumi.StringInput) DevicemanagerDeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DevicemanagerDevice {
		return vs[0].(map[string]*DevicemanagerDevice)[vs[1].(string)]
	}).(DevicemanagerDeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevicemanagerDeviceInput)(nil)).Elem(), &DevicemanagerDevice{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicemanagerDeviceArrayInput)(nil)).Elem(), DevicemanagerDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicemanagerDeviceMapInput)(nil)).Elem(), DevicemanagerDeviceMap{})
	pulumi.RegisterOutputType(DevicemanagerDeviceOutput{})
	pulumi.RegisterOutputType(DevicemanagerDeviceArrayOutput{})
	pulumi.RegisterOutputType(DevicemanagerDeviceMapOutput{})
}
