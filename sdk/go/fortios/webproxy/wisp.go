// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package webproxy

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure Wireless Internet service provider (WISP) servers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/webproxy"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := webproxy.NewWisp(ctx, "trname", &webproxy.WispArgs{
//				MaxConnections: pulumi.Int(64),
//				OutgoingIp:     pulumi.String("0.0.0.0"),
//				ServerIp:       pulumi.String("1.1.1.1"),
//				ServerPort:     pulumi.Int(15868),
//				Timeout:        pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// WebProxy Wisp can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:webproxy/wisp:Wisp labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:webproxy/wisp:Wisp labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Wisp struct {
	pulumi.CustomResourceState

	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Maximum number of web proxy WISP connections (4 - 4096, default = 64).
	MaxConnections pulumi.IntOutput `pulumi:"maxConnections"`
	// Server name.
	Name pulumi.StringOutput `pulumi:"name"`
	// WISP outgoing IP address.
	OutgoingIp pulumi.StringOutput `pulumi:"outgoingIp"`
	// WISP server IP address.
	ServerIp pulumi.StringOutput `pulumi:"serverIp"`
	// WISP server port (1 - 65535, default = 15868).
	ServerPort pulumi.IntOutput `pulumi:"serverPort"`
	// Period of time before WISP requests time out (1 - 15 sec, default = 5).
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWisp registers a new resource with the given unique name, arguments, and options.
func NewWisp(ctx *pulumi.Context,
	name string, args *WispArgs, opts ...pulumi.ResourceOption) (*Wisp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServerIp == nil {
		return nil, errors.New("invalid value for required argument 'ServerIp'")
	}
	if args.ServerPort == nil {
		return nil, errors.New("invalid value for required argument 'ServerPort'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Wisp
	err := ctx.RegisterResource("fortios:webproxy/wisp:Wisp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWisp gets an existing Wisp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWisp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WispState, opts ...pulumi.ResourceOption) (*Wisp, error) {
	var resource Wisp
	err := ctx.ReadResource("fortios:webproxy/wisp:Wisp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Wisp resources.
type wispState struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Maximum number of web proxy WISP connections (4 - 4096, default = 64).
	MaxConnections *int `pulumi:"maxConnections"`
	// Server name.
	Name *string `pulumi:"name"`
	// WISP outgoing IP address.
	OutgoingIp *string `pulumi:"outgoingIp"`
	// WISP server IP address.
	ServerIp *string `pulumi:"serverIp"`
	// WISP server port (1 - 65535, default = 15868).
	ServerPort *int `pulumi:"serverPort"`
	// Period of time before WISP requests time out (1 - 15 sec, default = 5).
	Timeout *int `pulumi:"timeout"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WispState struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Maximum number of web proxy WISP connections (4 - 4096, default = 64).
	MaxConnections pulumi.IntPtrInput
	// Server name.
	Name pulumi.StringPtrInput
	// WISP outgoing IP address.
	OutgoingIp pulumi.StringPtrInput
	// WISP server IP address.
	ServerIp pulumi.StringPtrInput
	// WISP server port (1 - 65535, default = 15868).
	ServerPort pulumi.IntPtrInput
	// Period of time before WISP requests time out (1 - 15 sec, default = 5).
	Timeout pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WispState) ElementType() reflect.Type {
	return reflect.TypeOf((*wispState)(nil)).Elem()
}

type wispArgs struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Maximum number of web proxy WISP connections (4 - 4096, default = 64).
	MaxConnections *int `pulumi:"maxConnections"`
	// Server name.
	Name *string `pulumi:"name"`
	// WISP outgoing IP address.
	OutgoingIp *string `pulumi:"outgoingIp"`
	// WISP server IP address.
	ServerIp string `pulumi:"serverIp"`
	// WISP server port (1 - 65535, default = 15868).
	ServerPort int `pulumi:"serverPort"`
	// Period of time before WISP requests time out (1 - 15 sec, default = 5).
	Timeout *int `pulumi:"timeout"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Wisp resource.
type WispArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Maximum number of web proxy WISP connections (4 - 4096, default = 64).
	MaxConnections pulumi.IntPtrInput
	// Server name.
	Name pulumi.StringPtrInput
	// WISP outgoing IP address.
	OutgoingIp pulumi.StringPtrInput
	// WISP server IP address.
	ServerIp pulumi.StringInput
	// WISP server port (1 - 65535, default = 15868).
	ServerPort pulumi.IntInput
	// Period of time before WISP requests time out (1 - 15 sec, default = 5).
	Timeout pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WispArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wispArgs)(nil)).Elem()
}

type WispInput interface {
	pulumi.Input

	ToWispOutput() WispOutput
	ToWispOutputWithContext(ctx context.Context) WispOutput
}

func (*Wisp) ElementType() reflect.Type {
	return reflect.TypeOf((**Wisp)(nil)).Elem()
}

func (i *Wisp) ToWispOutput() WispOutput {
	return i.ToWispOutputWithContext(context.Background())
}

func (i *Wisp) ToWispOutputWithContext(ctx context.Context) WispOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WispOutput)
}

// WispArrayInput is an input type that accepts WispArray and WispArrayOutput values.
// You can construct a concrete instance of `WispArrayInput` via:
//
//	WispArray{ WispArgs{...} }
type WispArrayInput interface {
	pulumi.Input

	ToWispArrayOutput() WispArrayOutput
	ToWispArrayOutputWithContext(context.Context) WispArrayOutput
}

type WispArray []WispInput

func (WispArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Wisp)(nil)).Elem()
}

func (i WispArray) ToWispArrayOutput() WispArrayOutput {
	return i.ToWispArrayOutputWithContext(context.Background())
}

func (i WispArray) ToWispArrayOutputWithContext(ctx context.Context) WispArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WispArrayOutput)
}

// WispMapInput is an input type that accepts WispMap and WispMapOutput values.
// You can construct a concrete instance of `WispMapInput` via:
//
//	WispMap{ "key": WispArgs{...} }
type WispMapInput interface {
	pulumi.Input

	ToWispMapOutput() WispMapOutput
	ToWispMapOutputWithContext(context.Context) WispMapOutput
}

type WispMap map[string]WispInput

func (WispMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Wisp)(nil)).Elem()
}

func (i WispMap) ToWispMapOutput() WispMapOutput {
	return i.ToWispMapOutputWithContext(context.Background())
}

func (i WispMap) ToWispMapOutputWithContext(ctx context.Context) WispMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WispMapOutput)
}

type WispOutput struct{ *pulumi.OutputState }

func (WispOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Wisp)(nil)).Elem()
}

func (o WispOutput) ToWispOutput() WispOutput {
	return o
}

func (o WispOutput) ToWispOutputWithContext(ctx context.Context) WispOutput {
	return o
}

// Comment.
func (o WispOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Wisp) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Maximum number of web proxy WISP connections (4 - 4096, default = 64).
func (o WispOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v *Wisp) pulumi.IntOutput { return v.MaxConnections }).(pulumi.IntOutput)
}

// Server name.
func (o WispOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Wisp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// WISP outgoing IP address.
func (o WispOutput) OutgoingIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Wisp) pulumi.StringOutput { return v.OutgoingIp }).(pulumi.StringOutput)
}

// WISP server IP address.
func (o WispOutput) ServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Wisp) pulumi.StringOutput { return v.ServerIp }).(pulumi.StringOutput)
}

// WISP server port (1 - 65535, default = 15868).
func (o WispOutput) ServerPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Wisp) pulumi.IntOutput { return v.ServerPort }).(pulumi.IntOutput)
}

// Period of time before WISP requests time out (1 - 15 sec, default = 5).
func (o WispOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Wisp) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o WispOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Wisp) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WispArrayOutput struct{ *pulumi.OutputState }

func (WispArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Wisp)(nil)).Elem()
}

func (o WispArrayOutput) ToWispArrayOutput() WispArrayOutput {
	return o
}

func (o WispArrayOutput) ToWispArrayOutputWithContext(ctx context.Context) WispArrayOutput {
	return o
}

func (o WispArrayOutput) Index(i pulumi.IntInput) WispOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Wisp {
		return vs[0].([]*Wisp)[vs[1].(int)]
	}).(WispOutput)
}

type WispMapOutput struct{ *pulumi.OutputState }

func (WispMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Wisp)(nil)).Elem()
}

func (o WispMapOutput) ToWispMapOutput() WispMapOutput {
	return o
}

func (o WispMapOutput) ToWispMapOutputWithContext(ctx context.Context) WispMapOutput {
	return o
}

func (o WispMapOutput) MapIndex(k pulumi.StringInput) WispOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Wisp {
		return vs[0].(map[string]*Wisp)[vs[1].(string)]
	}).(WispOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WispInput)(nil)).Elem(), &Wisp{})
	pulumi.RegisterInputType(reflect.TypeOf((*WispArrayInput)(nil)).Elem(), WispArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WispMapInput)(nil)).Elem(), WispMap{})
	pulumi.RegisterOutputType(WispOutput{})
	pulumi.RegisterOutputType(WispArrayOutput{})
	pulumi.RegisterOutputType(WispMapOutput{})
}
