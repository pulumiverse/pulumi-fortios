// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package webproxy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure explicit Web proxy settings.
//
// ## Import
//
// WebProxy Explicit can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:webproxy/explicit:Explicit labelname WebProxyExplicit
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:webproxy/explicit:Explicit labelname WebProxyExplicit
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Explicit struct {
	pulumi.CustomResourceState

	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Accept incoming FTP-over-HTTP requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
	FtpIncomingPort pulumi.StringOutput `pulumi:"ftpIncomingPort"`
	// Enable to proxy FTP-over-HTTP sessions sent from a web browser. Valid values: `enable`, `disable`.
	FtpOverHttp pulumi.StringOutput `pulumi:"ftpOverHttp"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// HTTP connection mode (default = static). Valid values: `static`, `multiplex`, `serverpool`.
	HttpConnectionMode pulumi.StringOutput `pulumi:"httpConnectionMode"`
	// Accept incoming HTTP requests on one or more ports (0 - 65535, default = 8080).
	HttpIncomingPort pulumi.StringOutput `pulumi:"httpIncomingPort"`
	// Accept incoming HTTPS requests on one or more ports (0 - 65535, default = 0, use the same as HTTP).
	HttpsIncomingPort pulumi.StringOutput `pulumi:"httpsIncomingPort"`
	// Enable/disable sending the client a replacement message for HTTPS requests. Valid values: `enable`, `disable`.
	HttpsReplacementMessage pulumi.StringOutput `pulumi:"httpsReplacementMessage"`
	// Restrict the explicit HTTP proxy to only accept sessions from this IP address. An interface must have this IP address.
	IncomingIp pulumi.StringOutput `pulumi:"incomingIp"`
	// Restrict the explicit web proxy to only accept sessions from this IPv6 address. An interface must have this IPv6 address.
	IncomingIp6 pulumi.StringOutput `pulumi:"incomingIp6"`
	// Enable/disable allowing an IPv6 web proxy destination in policies and all IPv6 related entries in this command. Valid values: `enable`, `disable`.
	Ipv6Status pulumi.StringOutput `pulumi:"ipv6Status"`
	// Enable/disable displaying a replacement message when a server error is detected. Valid values: `enable`, `disable`.
	MessageUponServerError pulumi.StringOutput `pulumi:"messageUponServerError"`
	// Outgoing HTTP requests will have this IP address as their source address. An interface must have this IP address.
	OutgoingIp pulumi.StringOutput `pulumi:"outgoingIp"`
	// Outgoing HTTP requests will leave this IPv6. Multiple interfaces can be specified. Interfaces must have these IPv6 addresses.
	OutgoingIp6 pulumi.StringOutput `pulumi:"outgoingIp6"`
	// PAC file contents enclosed in quotes (maximum of 256K bytes).
	PacFileData pulumi.StringOutput `pulumi:"pacFileData"`
	// Pac file name.
	PacFileName pulumi.StringOutput `pulumi:"pacFileName"`
	// Port number that PAC traffic from client web browsers uses to connect to the explicit web proxy (0 - 65535, default = 0; use the same as HTTP).
	PacFileServerPort pulumi.StringOutput `pulumi:"pacFileServerPort"`
	// Enable/disable Proxy Auto-Configuration (PAC) for users of this explicit proxy profile. Valid values: `enable`, `disable`.
	PacFileServerStatus pulumi.StringOutput `pulumi:"pacFileServerStatus"`
	// Enable/disable to get Proxy Auto-Configuration (PAC) through HTTPS. Valid values: `enable`, `disable`.
	PacFileThroughHttps pulumi.StringOutput `pulumi:"pacFileThroughHttps"`
	// PAC file access URL.
	PacFileUrl pulumi.StringOutput `pulumi:"pacFileUrl"`
	// PAC policies. The structure of `pacPolicy` block is documented below.
	PacPolicies ExplicitPacPolicyArrayOutput `pulumi:"pacPolicies"`
	// Prefer resolving addresses using the configured IPv4 or IPv6 DNS server (default = ipv4). Valid values: `ipv4`, `ipv6`.
	PrefDnsResult pulumi.StringOutput `pulumi:"prefDnsResult"`
	// Authentication realm used to identify the explicit web proxy (maximum of 63 characters).
	Realm pulumi.StringOutput `pulumi:"realm"`
	// Accept or deny explicit web proxy sessions when no web proxy firewall policy exists. Valid values: `accept`, `deny`.
	SecDefaultAction pulumi.StringOutput `pulumi:"secDefaultAction"`
	// Enable/disable/require the secure web proxy for HTTP and HTTPS session. Valid values: `disable`, `enable`, `secure`.
	SecureWebProxy pulumi.StringOutput `pulumi:"secureWebProxy"`
	// Name of certificates for secure web proxy. The structure of `secureWebProxyCert` block is documented below.
	SecureWebProxyCerts ExplicitSecureWebProxyCertArrayOutput `pulumi:"secureWebProxyCerts"`
	// Enable/disable the SOCKS proxy. Valid values: `enable`, `disable`.
	Socks pulumi.StringOutput `pulumi:"socks"`
	// Accept incoming SOCKS proxy requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
	SocksIncomingPort pulumi.StringOutput `pulumi:"socksIncomingPort"`
	// Relative strength of encryption algorithms accepted in HTTPS deep scan: high, medium, or low. Valid values: `high`, `medium`, `low`.
	SslAlgorithm pulumi.StringOutput `pulumi:"sslAlgorithm"`
	// Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
	SslDhBits pulumi.StringOutput `pulumi:"sslDhBits"`
	// Enable/disable the explicit Web proxy for HTTP and HTTPS session. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Enable/disable strict guest user checking by the explicit web proxy. Valid values: `enable`, `disable`.
	StrictGuest pulumi.StringOutput `pulumi:"strictGuest"`
	// Enable/disable logging timed-out authentication requests. Valid values: `enable`, `disable`.
	TraceAuthNoRsp pulumi.StringOutput `pulumi:"traceAuthNoRsp"`
	// Either reject unknown HTTP traffic as malformed or handle unknown HTTP traffic as best as the proxy server can.
	UnknownHttpVersion pulumi.StringOutput `pulumi:"unknownHttpVersion"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewExplicit registers a new resource with the given unique name, arguments, and options.
func NewExplicit(ctx *pulumi.Context,
	name string, args *ExplicitArgs, opts ...pulumi.ResourceOption) (*Explicit, error) {
	if args == nil {
		args = &ExplicitArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Explicit
	err := ctx.RegisterResource("fortios:webproxy/explicit:Explicit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExplicit gets an existing Explicit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExplicit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExplicitState, opts ...pulumi.ResourceOption) (*Explicit, error) {
	var resource Explicit
	err := ctx.ReadResource("fortios:webproxy/explicit:Explicit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Explicit resources.
type explicitState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Accept incoming FTP-over-HTTP requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
	FtpIncomingPort *string `pulumi:"ftpIncomingPort"`
	// Enable to proxy FTP-over-HTTP sessions sent from a web browser. Valid values: `enable`, `disable`.
	FtpOverHttp *string `pulumi:"ftpOverHttp"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// HTTP connection mode (default = static). Valid values: `static`, `multiplex`, `serverpool`.
	HttpConnectionMode *string `pulumi:"httpConnectionMode"`
	// Accept incoming HTTP requests on one or more ports (0 - 65535, default = 8080).
	HttpIncomingPort *string `pulumi:"httpIncomingPort"`
	// Accept incoming HTTPS requests on one or more ports (0 - 65535, default = 0, use the same as HTTP).
	HttpsIncomingPort *string `pulumi:"httpsIncomingPort"`
	// Enable/disable sending the client a replacement message for HTTPS requests. Valid values: `enable`, `disable`.
	HttpsReplacementMessage *string `pulumi:"httpsReplacementMessage"`
	// Restrict the explicit HTTP proxy to only accept sessions from this IP address. An interface must have this IP address.
	IncomingIp *string `pulumi:"incomingIp"`
	// Restrict the explicit web proxy to only accept sessions from this IPv6 address. An interface must have this IPv6 address.
	IncomingIp6 *string `pulumi:"incomingIp6"`
	// Enable/disable allowing an IPv6 web proxy destination in policies and all IPv6 related entries in this command. Valid values: `enable`, `disable`.
	Ipv6Status *string `pulumi:"ipv6Status"`
	// Enable/disable displaying a replacement message when a server error is detected. Valid values: `enable`, `disable`.
	MessageUponServerError *string `pulumi:"messageUponServerError"`
	// Outgoing HTTP requests will have this IP address as their source address. An interface must have this IP address.
	OutgoingIp *string `pulumi:"outgoingIp"`
	// Outgoing HTTP requests will leave this IPv6. Multiple interfaces can be specified. Interfaces must have these IPv6 addresses.
	OutgoingIp6 *string `pulumi:"outgoingIp6"`
	// PAC file contents enclosed in quotes (maximum of 256K bytes).
	PacFileData *string `pulumi:"pacFileData"`
	// Pac file name.
	PacFileName *string `pulumi:"pacFileName"`
	// Port number that PAC traffic from client web browsers uses to connect to the explicit web proxy (0 - 65535, default = 0; use the same as HTTP).
	PacFileServerPort *string `pulumi:"pacFileServerPort"`
	// Enable/disable Proxy Auto-Configuration (PAC) for users of this explicit proxy profile. Valid values: `enable`, `disable`.
	PacFileServerStatus *string `pulumi:"pacFileServerStatus"`
	// Enable/disable to get Proxy Auto-Configuration (PAC) through HTTPS. Valid values: `enable`, `disable`.
	PacFileThroughHttps *string `pulumi:"pacFileThroughHttps"`
	// PAC file access URL.
	PacFileUrl *string `pulumi:"pacFileUrl"`
	// PAC policies. The structure of `pacPolicy` block is documented below.
	PacPolicies []ExplicitPacPolicy `pulumi:"pacPolicies"`
	// Prefer resolving addresses using the configured IPv4 or IPv6 DNS server (default = ipv4). Valid values: `ipv4`, `ipv6`.
	PrefDnsResult *string `pulumi:"prefDnsResult"`
	// Authentication realm used to identify the explicit web proxy (maximum of 63 characters).
	Realm *string `pulumi:"realm"`
	// Accept or deny explicit web proxy sessions when no web proxy firewall policy exists. Valid values: `accept`, `deny`.
	SecDefaultAction *string `pulumi:"secDefaultAction"`
	// Enable/disable/require the secure web proxy for HTTP and HTTPS session. Valid values: `disable`, `enable`, `secure`.
	SecureWebProxy *string `pulumi:"secureWebProxy"`
	// Name of certificates for secure web proxy. The structure of `secureWebProxyCert` block is documented below.
	SecureWebProxyCerts []ExplicitSecureWebProxyCert `pulumi:"secureWebProxyCerts"`
	// Enable/disable the SOCKS proxy. Valid values: `enable`, `disable`.
	Socks *string `pulumi:"socks"`
	// Accept incoming SOCKS proxy requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
	SocksIncomingPort *string `pulumi:"socksIncomingPort"`
	// Relative strength of encryption algorithms accepted in HTTPS deep scan: high, medium, or low. Valid values: `high`, `medium`, `low`.
	SslAlgorithm *string `pulumi:"sslAlgorithm"`
	// Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
	SslDhBits *string `pulumi:"sslDhBits"`
	// Enable/disable the explicit Web proxy for HTTP and HTTPS session. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Enable/disable strict guest user checking by the explicit web proxy. Valid values: `enable`, `disable`.
	StrictGuest *string `pulumi:"strictGuest"`
	// Enable/disable logging timed-out authentication requests. Valid values: `enable`, `disable`.
	TraceAuthNoRsp *string `pulumi:"traceAuthNoRsp"`
	// Either reject unknown HTTP traffic as malformed or handle unknown HTTP traffic as best as the proxy server can.
	UnknownHttpVersion *string `pulumi:"unknownHttpVersion"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type ExplicitState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Accept incoming FTP-over-HTTP requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
	FtpIncomingPort pulumi.StringPtrInput
	// Enable to proxy FTP-over-HTTP sessions sent from a web browser. Valid values: `enable`, `disable`.
	FtpOverHttp pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// HTTP connection mode (default = static). Valid values: `static`, `multiplex`, `serverpool`.
	HttpConnectionMode pulumi.StringPtrInput
	// Accept incoming HTTP requests on one or more ports (0 - 65535, default = 8080).
	HttpIncomingPort pulumi.StringPtrInput
	// Accept incoming HTTPS requests on one or more ports (0 - 65535, default = 0, use the same as HTTP).
	HttpsIncomingPort pulumi.StringPtrInput
	// Enable/disable sending the client a replacement message for HTTPS requests. Valid values: `enable`, `disable`.
	HttpsReplacementMessage pulumi.StringPtrInput
	// Restrict the explicit HTTP proxy to only accept sessions from this IP address. An interface must have this IP address.
	IncomingIp pulumi.StringPtrInput
	// Restrict the explicit web proxy to only accept sessions from this IPv6 address. An interface must have this IPv6 address.
	IncomingIp6 pulumi.StringPtrInput
	// Enable/disable allowing an IPv6 web proxy destination in policies and all IPv6 related entries in this command. Valid values: `enable`, `disable`.
	Ipv6Status pulumi.StringPtrInput
	// Enable/disable displaying a replacement message when a server error is detected. Valid values: `enable`, `disable`.
	MessageUponServerError pulumi.StringPtrInput
	// Outgoing HTTP requests will have this IP address as their source address. An interface must have this IP address.
	OutgoingIp pulumi.StringPtrInput
	// Outgoing HTTP requests will leave this IPv6. Multiple interfaces can be specified. Interfaces must have these IPv6 addresses.
	OutgoingIp6 pulumi.StringPtrInput
	// PAC file contents enclosed in quotes (maximum of 256K bytes).
	PacFileData pulumi.StringPtrInput
	// Pac file name.
	PacFileName pulumi.StringPtrInput
	// Port number that PAC traffic from client web browsers uses to connect to the explicit web proxy (0 - 65535, default = 0; use the same as HTTP).
	PacFileServerPort pulumi.StringPtrInput
	// Enable/disable Proxy Auto-Configuration (PAC) for users of this explicit proxy profile. Valid values: `enable`, `disable`.
	PacFileServerStatus pulumi.StringPtrInput
	// Enable/disable to get Proxy Auto-Configuration (PAC) through HTTPS. Valid values: `enable`, `disable`.
	PacFileThroughHttps pulumi.StringPtrInput
	// PAC file access URL.
	PacFileUrl pulumi.StringPtrInput
	// PAC policies. The structure of `pacPolicy` block is documented below.
	PacPolicies ExplicitPacPolicyArrayInput
	// Prefer resolving addresses using the configured IPv4 or IPv6 DNS server (default = ipv4). Valid values: `ipv4`, `ipv6`.
	PrefDnsResult pulumi.StringPtrInput
	// Authentication realm used to identify the explicit web proxy (maximum of 63 characters).
	Realm pulumi.StringPtrInput
	// Accept or deny explicit web proxy sessions when no web proxy firewall policy exists. Valid values: `accept`, `deny`.
	SecDefaultAction pulumi.StringPtrInput
	// Enable/disable/require the secure web proxy for HTTP and HTTPS session. Valid values: `disable`, `enable`, `secure`.
	SecureWebProxy pulumi.StringPtrInput
	// Name of certificates for secure web proxy. The structure of `secureWebProxyCert` block is documented below.
	SecureWebProxyCerts ExplicitSecureWebProxyCertArrayInput
	// Enable/disable the SOCKS proxy. Valid values: `enable`, `disable`.
	Socks pulumi.StringPtrInput
	// Accept incoming SOCKS proxy requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
	SocksIncomingPort pulumi.StringPtrInput
	// Relative strength of encryption algorithms accepted in HTTPS deep scan: high, medium, or low. Valid values: `high`, `medium`, `low`.
	SslAlgorithm pulumi.StringPtrInput
	// Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
	SslDhBits pulumi.StringPtrInput
	// Enable/disable the explicit Web proxy for HTTP and HTTPS session. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Enable/disable strict guest user checking by the explicit web proxy. Valid values: `enable`, `disable`.
	StrictGuest pulumi.StringPtrInput
	// Enable/disable logging timed-out authentication requests. Valid values: `enable`, `disable`.
	TraceAuthNoRsp pulumi.StringPtrInput
	// Either reject unknown HTTP traffic as malformed or handle unknown HTTP traffic as best as the proxy server can.
	UnknownHttpVersion pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ExplicitState) ElementType() reflect.Type {
	return reflect.TypeOf((*explicitState)(nil)).Elem()
}

type explicitArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Accept incoming FTP-over-HTTP requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
	FtpIncomingPort *string `pulumi:"ftpIncomingPort"`
	// Enable to proxy FTP-over-HTTP sessions sent from a web browser. Valid values: `enable`, `disable`.
	FtpOverHttp *string `pulumi:"ftpOverHttp"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// HTTP connection mode (default = static). Valid values: `static`, `multiplex`, `serverpool`.
	HttpConnectionMode *string `pulumi:"httpConnectionMode"`
	// Accept incoming HTTP requests on one or more ports (0 - 65535, default = 8080).
	HttpIncomingPort *string `pulumi:"httpIncomingPort"`
	// Accept incoming HTTPS requests on one or more ports (0 - 65535, default = 0, use the same as HTTP).
	HttpsIncomingPort *string `pulumi:"httpsIncomingPort"`
	// Enable/disable sending the client a replacement message for HTTPS requests. Valid values: `enable`, `disable`.
	HttpsReplacementMessage *string `pulumi:"httpsReplacementMessage"`
	// Restrict the explicit HTTP proxy to only accept sessions from this IP address. An interface must have this IP address.
	IncomingIp *string `pulumi:"incomingIp"`
	// Restrict the explicit web proxy to only accept sessions from this IPv6 address. An interface must have this IPv6 address.
	IncomingIp6 *string `pulumi:"incomingIp6"`
	// Enable/disable allowing an IPv6 web proxy destination in policies and all IPv6 related entries in this command. Valid values: `enable`, `disable`.
	Ipv6Status *string `pulumi:"ipv6Status"`
	// Enable/disable displaying a replacement message when a server error is detected. Valid values: `enable`, `disable`.
	MessageUponServerError *string `pulumi:"messageUponServerError"`
	// Outgoing HTTP requests will have this IP address as their source address. An interface must have this IP address.
	OutgoingIp *string `pulumi:"outgoingIp"`
	// Outgoing HTTP requests will leave this IPv6. Multiple interfaces can be specified. Interfaces must have these IPv6 addresses.
	OutgoingIp6 *string `pulumi:"outgoingIp6"`
	// PAC file contents enclosed in quotes (maximum of 256K bytes).
	PacFileData *string `pulumi:"pacFileData"`
	// Pac file name.
	PacFileName *string `pulumi:"pacFileName"`
	// Port number that PAC traffic from client web browsers uses to connect to the explicit web proxy (0 - 65535, default = 0; use the same as HTTP).
	PacFileServerPort *string `pulumi:"pacFileServerPort"`
	// Enable/disable Proxy Auto-Configuration (PAC) for users of this explicit proxy profile. Valid values: `enable`, `disable`.
	PacFileServerStatus *string `pulumi:"pacFileServerStatus"`
	// Enable/disable to get Proxy Auto-Configuration (PAC) through HTTPS. Valid values: `enable`, `disable`.
	PacFileThroughHttps *string `pulumi:"pacFileThroughHttps"`
	// PAC file access URL.
	PacFileUrl *string `pulumi:"pacFileUrl"`
	// PAC policies. The structure of `pacPolicy` block is documented below.
	PacPolicies []ExplicitPacPolicy `pulumi:"pacPolicies"`
	// Prefer resolving addresses using the configured IPv4 or IPv6 DNS server (default = ipv4). Valid values: `ipv4`, `ipv6`.
	PrefDnsResult *string `pulumi:"prefDnsResult"`
	// Authentication realm used to identify the explicit web proxy (maximum of 63 characters).
	Realm *string `pulumi:"realm"`
	// Accept or deny explicit web proxy sessions when no web proxy firewall policy exists. Valid values: `accept`, `deny`.
	SecDefaultAction *string `pulumi:"secDefaultAction"`
	// Enable/disable/require the secure web proxy for HTTP and HTTPS session. Valid values: `disable`, `enable`, `secure`.
	SecureWebProxy *string `pulumi:"secureWebProxy"`
	// Name of certificates for secure web proxy. The structure of `secureWebProxyCert` block is documented below.
	SecureWebProxyCerts []ExplicitSecureWebProxyCert `pulumi:"secureWebProxyCerts"`
	// Enable/disable the SOCKS proxy. Valid values: `enable`, `disable`.
	Socks *string `pulumi:"socks"`
	// Accept incoming SOCKS proxy requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
	SocksIncomingPort *string `pulumi:"socksIncomingPort"`
	// Relative strength of encryption algorithms accepted in HTTPS deep scan: high, medium, or low. Valid values: `high`, `medium`, `low`.
	SslAlgorithm *string `pulumi:"sslAlgorithm"`
	// Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
	SslDhBits *string `pulumi:"sslDhBits"`
	// Enable/disable the explicit Web proxy for HTTP and HTTPS session. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Enable/disable strict guest user checking by the explicit web proxy. Valid values: `enable`, `disable`.
	StrictGuest *string `pulumi:"strictGuest"`
	// Enable/disable logging timed-out authentication requests. Valid values: `enable`, `disable`.
	TraceAuthNoRsp *string `pulumi:"traceAuthNoRsp"`
	// Either reject unknown HTTP traffic as malformed or handle unknown HTTP traffic as best as the proxy server can.
	UnknownHttpVersion *string `pulumi:"unknownHttpVersion"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Explicit resource.
type ExplicitArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Accept incoming FTP-over-HTTP requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
	FtpIncomingPort pulumi.StringPtrInput
	// Enable to proxy FTP-over-HTTP sessions sent from a web browser. Valid values: `enable`, `disable`.
	FtpOverHttp pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// HTTP connection mode (default = static). Valid values: `static`, `multiplex`, `serverpool`.
	HttpConnectionMode pulumi.StringPtrInput
	// Accept incoming HTTP requests on one or more ports (0 - 65535, default = 8080).
	HttpIncomingPort pulumi.StringPtrInput
	// Accept incoming HTTPS requests on one or more ports (0 - 65535, default = 0, use the same as HTTP).
	HttpsIncomingPort pulumi.StringPtrInput
	// Enable/disable sending the client a replacement message for HTTPS requests. Valid values: `enable`, `disable`.
	HttpsReplacementMessage pulumi.StringPtrInput
	// Restrict the explicit HTTP proxy to only accept sessions from this IP address. An interface must have this IP address.
	IncomingIp pulumi.StringPtrInput
	// Restrict the explicit web proxy to only accept sessions from this IPv6 address. An interface must have this IPv6 address.
	IncomingIp6 pulumi.StringPtrInput
	// Enable/disable allowing an IPv6 web proxy destination in policies and all IPv6 related entries in this command. Valid values: `enable`, `disable`.
	Ipv6Status pulumi.StringPtrInput
	// Enable/disable displaying a replacement message when a server error is detected. Valid values: `enable`, `disable`.
	MessageUponServerError pulumi.StringPtrInput
	// Outgoing HTTP requests will have this IP address as their source address. An interface must have this IP address.
	OutgoingIp pulumi.StringPtrInput
	// Outgoing HTTP requests will leave this IPv6. Multiple interfaces can be specified. Interfaces must have these IPv6 addresses.
	OutgoingIp6 pulumi.StringPtrInput
	// PAC file contents enclosed in quotes (maximum of 256K bytes).
	PacFileData pulumi.StringPtrInput
	// Pac file name.
	PacFileName pulumi.StringPtrInput
	// Port number that PAC traffic from client web browsers uses to connect to the explicit web proxy (0 - 65535, default = 0; use the same as HTTP).
	PacFileServerPort pulumi.StringPtrInput
	// Enable/disable Proxy Auto-Configuration (PAC) for users of this explicit proxy profile. Valid values: `enable`, `disable`.
	PacFileServerStatus pulumi.StringPtrInput
	// Enable/disable to get Proxy Auto-Configuration (PAC) through HTTPS. Valid values: `enable`, `disable`.
	PacFileThroughHttps pulumi.StringPtrInput
	// PAC file access URL.
	PacFileUrl pulumi.StringPtrInput
	// PAC policies. The structure of `pacPolicy` block is documented below.
	PacPolicies ExplicitPacPolicyArrayInput
	// Prefer resolving addresses using the configured IPv4 or IPv6 DNS server (default = ipv4). Valid values: `ipv4`, `ipv6`.
	PrefDnsResult pulumi.StringPtrInput
	// Authentication realm used to identify the explicit web proxy (maximum of 63 characters).
	Realm pulumi.StringPtrInput
	// Accept or deny explicit web proxy sessions when no web proxy firewall policy exists. Valid values: `accept`, `deny`.
	SecDefaultAction pulumi.StringPtrInput
	// Enable/disable/require the secure web proxy for HTTP and HTTPS session. Valid values: `disable`, `enable`, `secure`.
	SecureWebProxy pulumi.StringPtrInput
	// Name of certificates for secure web proxy. The structure of `secureWebProxyCert` block is documented below.
	SecureWebProxyCerts ExplicitSecureWebProxyCertArrayInput
	// Enable/disable the SOCKS proxy. Valid values: `enable`, `disable`.
	Socks pulumi.StringPtrInput
	// Accept incoming SOCKS proxy requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
	SocksIncomingPort pulumi.StringPtrInput
	// Relative strength of encryption algorithms accepted in HTTPS deep scan: high, medium, or low. Valid values: `high`, `medium`, `low`.
	SslAlgorithm pulumi.StringPtrInput
	// Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
	SslDhBits pulumi.StringPtrInput
	// Enable/disable the explicit Web proxy for HTTP and HTTPS session. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Enable/disable strict guest user checking by the explicit web proxy. Valid values: `enable`, `disable`.
	StrictGuest pulumi.StringPtrInput
	// Enable/disable logging timed-out authentication requests. Valid values: `enable`, `disable`.
	TraceAuthNoRsp pulumi.StringPtrInput
	// Either reject unknown HTTP traffic as malformed or handle unknown HTTP traffic as best as the proxy server can.
	UnknownHttpVersion pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ExplicitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*explicitArgs)(nil)).Elem()
}

type ExplicitInput interface {
	pulumi.Input

	ToExplicitOutput() ExplicitOutput
	ToExplicitOutputWithContext(ctx context.Context) ExplicitOutput
}

func (*Explicit) ElementType() reflect.Type {
	return reflect.TypeOf((**Explicit)(nil)).Elem()
}

func (i *Explicit) ToExplicitOutput() ExplicitOutput {
	return i.ToExplicitOutputWithContext(context.Background())
}

func (i *Explicit) ToExplicitOutputWithContext(ctx context.Context) ExplicitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExplicitOutput)
}

// ExplicitArrayInput is an input type that accepts ExplicitArray and ExplicitArrayOutput values.
// You can construct a concrete instance of `ExplicitArrayInput` via:
//
//	ExplicitArray{ ExplicitArgs{...} }
type ExplicitArrayInput interface {
	pulumi.Input

	ToExplicitArrayOutput() ExplicitArrayOutput
	ToExplicitArrayOutputWithContext(context.Context) ExplicitArrayOutput
}

type ExplicitArray []ExplicitInput

func (ExplicitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Explicit)(nil)).Elem()
}

func (i ExplicitArray) ToExplicitArrayOutput() ExplicitArrayOutput {
	return i.ToExplicitArrayOutputWithContext(context.Background())
}

func (i ExplicitArray) ToExplicitArrayOutputWithContext(ctx context.Context) ExplicitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExplicitArrayOutput)
}

// ExplicitMapInput is an input type that accepts ExplicitMap and ExplicitMapOutput values.
// You can construct a concrete instance of `ExplicitMapInput` via:
//
//	ExplicitMap{ "key": ExplicitArgs{...} }
type ExplicitMapInput interface {
	pulumi.Input

	ToExplicitMapOutput() ExplicitMapOutput
	ToExplicitMapOutputWithContext(context.Context) ExplicitMapOutput
}

type ExplicitMap map[string]ExplicitInput

func (ExplicitMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Explicit)(nil)).Elem()
}

func (i ExplicitMap) ToExplicitMapOutput() ExplicitMapOutput {
	return i.ToExplicitMapOutputWithContext(context.Background())
}

func (i ExplicitMap) ToExplicitMapOutputWithContext(ctx context.Context) ExplicitMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExplicitMapOutput)
}

type ExplicitOutput struct{ *pulumi.OutputState }

func (ExplicitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Explicit)(nil)).Elem()
}

func (o ExplicitOutput) ToExplicitOutput() ExplicitOutput {
	return o
}

func (o ExplicitOutput) ToExplicitOutputWithContext(ctx context.Context) ExplicitOutput {
	return o
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o ExplicitOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Accept incoming FTP-over-HTTP requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
func (o ExplicitOutput) FtpIncomingPort() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.FtpIncomingPort }).(pulumi.StringOutput)
}

// Enable to proxy FTP-over-HTTP sessions sent from a web browser. Valid values: `enable`, `disable`.
func (o ExplicitOutput) FtpOverHttp() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.FtpOverHttp }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o ExplicitOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// HTTP connection mode (default = static). Valid values: `static`, `multiplex`, `serverpool`.
func (o ExplicitOutput) HttpConnectionMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.HttpConnectionMode }).(pulumi.StringOutput)
}

// Accept incoming HTTP requests on one or more ports (0 - 65535, default = 8080).
func (o ExplicitOutput) HttpIncomingPort() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.HttpIncomingPort }).(pulumi.StringOutput)
}

// Accept incoming HTTPS requests on one or more ports (0 - 65535, default = 0, use the same as HTTP).
func (o ExplicitOutput) HttpsIncomingPort() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.HttpsIncomingPort }).(pulumi.StringOutput)
}

// Enable/disable sending the client a replacement message for HTTPS requests. Valid values: `enable`, `disable`.
func (o ExplicitOutput) HttpsReplacementMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.HttpsReplacementMessage }).(pulumi.StringOutput)
}

// Restrict the explicit HTTP proxy to only accept sessions from this IP address. An interface must have this IP address.
func (o ExplicitOutput) IncomingIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.IncomingIp }).(pulumi.StringOutput)
}

// Restrict the explicit web proxy to only accept sessions from this IPv6 address. An interface must have this IPv6 address.
func (o ExplicitOutput) IncomingIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.IncomingIp6 }).(pulumi.StringOutput)
}

// Enable/disable allowing an IPv6 web proxy destination in policies and all IPv6 related entries in this command. Valid values: `enable`, `disable`.
func (o ExplicitOutput) Ipv6Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.Ipv6Status }).(pulumi.StringOutput)
}

// Enable/disable displaying a replacement message when a server error is detected. Valid values: `enable`, `disable`.
func (o ExplicitOutput) MessageUponServerError() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.MessageUponServerError }).(pulumi.StringOutput)
}

// Outgoing HTTP requests will have this IP address as their source address. An interface must have this IP address.
func (o ExplicitOutput) OutgoingIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.OutgoingIp }).(pulumi.StringOutput)
}

// Outgoing HTTP requests will leave this IPv6. Multiple interfaces can be specified. Interfaces must have these IPv6 addresses.
func (o ExplicitOutput) OutgoingIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.OutgoingIp6 }).(pulumi.StringOutput)
}

// PAC file contents enclosed in quotes (maximum of 256K bytes).
func (o ExplicitOutput) PacFileData() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.PacFileData }).(pulumi.StringOutput)
}

// Pac file name.
func (o ExplicitOutput) PacFileName() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.PacFileName }).(pulumi.StringOutput)
}

// Port number that PAC traffic from client web browsers uses to connect to the explicit web proxy (0 - 65535, default = 0; use the same as HTTP).
func (o ExplicitOutput) PacFileServerPort() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.PacFileServerPort }).(pulumi.StringOutput)
}

// Enable/disable Proxy Auto-Configuration (PAC) for users of this explicit proxy profile. Valid values: `enable`, `disable`.
func (o ExplicitOutput) PacFileServerStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.PacFileServerStatus }).(pulumi.StringOutput)
}

// Enable/disable to get Proxy Auto-Configuration (PAC) through HTTPS. Valid values: `enable`, `disable`.
func (o ExplicitOutput) PacFileThroughHttps() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.PacFileThroughHttps }).(pulumi.StringOutput)
}

// PAC file access URL.
func (o ExplicitOutput) PacFileUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.PacFileUrl }).(pulumi.StringOutput)
}

// PAC policies. The structure of `pacPolicy` block is documented below.
func (o ExplicitOutput) PacPolicies() ExplicitPacPolicyArrayOutput {
	return o.ApplyT(func(v *Explicit) ExplicitPacPolicyArrayOutput { return v.PacPolicies }).(ExplicitPacPolicyArrayOutput)
}

// Prefer resolving addresses using the configured IPv4 or IPv6 DNS server (default = ipv4). Valid values: `ipv4`, `ipv6`.
func (o ExplicitOutput) PrefDnsResult() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.PrefDnsResult }).(pulumi.StringOutput)
}

// Authentication realm used to identify the explicit web proxy (maximum of 63 characters).
func (o ExplicitOutput) Realm() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.Realm }).(pulumi.StringOutput)
}

// Accept or deny explicit web proxy sessions when no web proxy firewall policy exists. Valid values: `accept`, `deny`.
func (o ExplicitOutput) SecDefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.SecDefaultAction }).(pulumi.StringOutput)
}

// Enable/disable/require the secure web proxy for HTTP and HTTPS session. Valid values: `disable`, `enable`, `secure`.
func (o ExplicitOutput) SecureWebProxy() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.SecureWebProxy }).(pulumi.StringOutput)
}

// Name of certificates for secure web proxy. The structure of `secureWebProxyCert` block is documented below.
func (o ExplicitOutput) SecureWebProxyCerts() ExplicitSecureWebProxyCertArrayOutput {
	return o.ApplyT(func(v *Explicit) ExplicitSecureWebProxyCertArrayOutput { return v.SecureWebProxyCerts }).(ExplicitSecureWebProxyCertArrayOutput)
}

// Enable/disable the SOCKS proxy. Valid values: `enable`, `disable`.
func (o ExplicitOutput) Socks() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.Socks }).(pulumi.StringOutput)
}

// Accept incoming SOCKS proxy requests on one or more ports (0 - 65535, default = 0; use the same as HTTP).
func (o ExplicitOutput) SocksIncomingPort() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.SocksIncomingPort }).(pulumi.StringOutput)
}

// Relative strength of encryption algorithms accepted in HTTPS deep scan: high, medium, or low. Valid values: `high`, `medium`, `low`.
func (o ExplicitOutput) SslAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.SslAlgorithm }).(pulumi.StringOutput)
}

// Bit-size of Diffie-Hellman (DH) prime used in DHE-RSA negotiation (default = 2048). Valid values: `768`, `1024`, `1536`, `2048`.
func (o ExplicitOutput) SslDhBits() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.SslDhBits }).(pulumi.StringOutput)
}

// Enable/disable the explicit Web proxy for HTTP and HTTPS session. Valid values: `enable`, `disable`.
func (o ExplicitOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Enable/disable strict guest user checking by the explicit web proxy. Valid values: `enable`, `disable`.
func (o ExplicitOutput) StrictGuest() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.StrictGuest }).(pulumi.StringOutput)
}

// Enable/disable logging timed-out authentication requests. Valid values: `enable`, `disable`.
func (o ExplicitOutput) TraceAuthNoRsp() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.TraceAuthNoRsp }).(pulumi.StringOutput)
}

// Either reject unknown HTTP traffic as malformed or handle unknown HTTP traffic as best as the proxy server can.
func (o ExplicitOutput) UnknownHttpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringOutput { return v.UnknownHttpVersion }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ExplicitOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Explicit) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type ExplicitArrayOutput struct{ *pulumi.OutputState }

func (ExplicitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Explicit)(nil)).Elem()
}

func (o ExplicitArrayOutput) ToExplicitArrayOutput() ExplicitArrayOutput {
	return o
}

func (o ExplicitArrayOutput) ToExplicitArrayOutputWithContext(ctx context.Context) ExplicitArrayOutput {
	return o
}

func (o ExplicitArrayOutput) Index(i pulumi.IntInput) ExplicitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Explicit {
		return vs[0].([]*Explicit)[vs[1].(int)]
	}).(ExplicitOutput)
}

type ExplicitMapOutput struct{ *pulumi.OutputState }

func (ExplicitMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Explicit)(nil)).Elem()
}

func (o ExplicitMapOutput) ToExplicitMapOutput() ExplicitMapOutput {
	return o
}

func (o ExplicitMapOutput) ToExplicitMapOutputWithContext(ctx context.Context) ExplicitMapOutput {
	return o
}

func (o ExplicitMapOutput) MapIndex(k pulumi.StringInput) ExplicitOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Explicit {
		return vs[0].(map[string]*Explicit)[vs[1].(string)]
	}).(ExplicitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExplicitInput)(nil)).Elem(), &Explicit{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExplicitArrayInput)(nil)).Elem(), ExplicitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExplicitMapInput)(nil)).Elem(), ExplicitMap{})
	pulumi.RegisterOutputType(ExplicitOutput{})
	pulumi.RegisterOutputType(ExplicitArrayOutput{})
	pulumi.RegisterOutputType(ExplicitMapOutput{})
}
