// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package webproxy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure forward-server addresses.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/webproxy"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := webproxy.NewForwardserver(ctx, "trname", &webproxy.ForwardserverArgs{
//				AddrType:         pulumi.String("fqdn"),
//				Healthcheck:      pulumi.String("disable"),
//				Ip:               pulumi.String("0.0.0.0"),
//				Monitor:          pulumi.String("http://www.google.com"),
//				Port:             pulumi.Int(3128),
//				ServerDownOption: pulumi.String("block"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// WebProxy ForwardServer can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:webproxy/forwardserver:Forwardserver labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:webproxy/forwardserver:Forwardserver labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Forwardserver struct {
	pulumi.CustomResourceState

	// Address type of the forwarding proxy server: IP or FQDN.
	AddrType pulumi.StringOutput `pulumi:"addrType"`
	// Comment.
	Comment pulumi.StringOutput `pulumi:"comment"`
	// Forward server Fully Qualified Domain Name (FQDN).
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// Enable/disable forward server health checking. Attempts to connect through the remote forwarding server to a destination to verify that the forwarding server is operating normally. Valid values: `disable`, `enable`.
	Healthcheck pulumi.StringOutput `pulumi:"healthcheck"`
	// Forward proxy server IP address.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Forward proxy server IPv6 address.
	Ipv6 pulumi.StringOutput `pulumi:"ipv6"`
	// Enable/disable use of the of the IP address of the outgoing interface as the client IP address (default = enable) Valid values: `enable`, `disable`.
	Masquerade pulumi.StringOutput `pulumi:"masquerade"`
	// URL for forward server health check monitoring (default = http://www.google.com).
	Monitor pulumi.StringOutput `pulumi:"monitor"`
	// Server name.
	Name pulumi.StringOutput `pulumi:"name"`
	// HTTP authentication password.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Port number that the forwarding server expects to receive HTTP sessions on (1 - 65535, default = 3128).
	Port pulumi.IntOutput `pulumi:"port"`
	// Action to take when the forward server is found to be down: block sessions until the server is back up or pass sessions to their destination. Valid values: `block`, `pass`.
	ServerDownOption pulumi.StringOutput `pulumi:"serverDownOption"`
	// HTTP authentication user name.
	Username pulumi.StringOutput `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewForwardserver registers a new resource with the given unique name, arguments, and options.
func NewForwardserver(ctx *pulumi.Context,
	name string, args *ForwardserverArgs, opts ...pulumi.ResourceOption) (*Forwardserver, error) {
	if args == nil {
		args = &ForwardserverArgs{}
	}

	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Forwardserver
	err := ctx.RegisterResource("fortios:webproxy/forwardserver:Forwardserver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetForwardserver gets an existing Forwardserver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetForwardserver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ForwardserverState, opts ...pulumi.ResourceOption) (*Forwardserver, error) {
	var resource Forwardserver
	err := ctx.ReadResource("fortios:webproxy/forwardserver:Forwardserver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Forwardserver resources.
type forwardserverState struct {
	// Address type of the forwarding proxy server: IP or FQDN.
	AddrType *string `pulumi:"addrType"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Forward server Fully Qualified Domain Name (FQDN).
	Fqdn *string `pulumi:"fqdn"`
	// Enable/disable forward server health checking. Attempts to connect through the remote forwarding server to a destination to verify that the forwarding server is operating normally. Valid values: `disable`, `enable`.
	Healthcheck *string `pulumi:"healthcheck"`
	// Forward proxy server IP address.
	Ip *string `pulumi:"ip"`
	// Forward proxy server IPv6 address.
	Ipv6 *string `pulumi:"ipv6"`
	// Enable/disable use of the of the IP address of the outgoing interface as the client IP address (default = enable) Valid values: `enable`, `disable`.
	Masquerade *string `pulumi:"masquerade"`
	// URL for forward server health check monitoring (default = http://www.google.com).
	Monitor *string `pulumi:"monitor"`
	// Server name.
	Name *string `pulumi:"name"`
	// HTTP authentication password.
	Password *string `pulumi:"password"`
	// Port number that the forwarding server expects to receive HTTP sessions on (1 - 65535, default = 3128).
	Port *int `pulumi:"port"`
	// Action to take when the forward server is found to be down: block sessions until the server is back up or pass sessions to their destination. Valid values: `block`, `pass`.
	ServerDownOption *string `pulumi:"serverDownOption"`
	// HTTP authentication user name.
	Username *string `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type ForwardserverState struct {
	// Address type of the forwarding proxy server: IP or FQDN.
	AddrType pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Forward server Fully Qualified Domain Name (FQDN).
	Fqdn pulumi.StringPtrInput
	// Enable/disable forward server health checking. Attempts to connect through the remote forwarding server to a destination to verify that the forwarding server is operating normally. Valid values: `disable`, `enable`.
	Healthcheck pulumi.StringPtrInput
	// Forward proxy server IP address.
	Ip pulumi.StringPtrInput
	// Forward proxy server IPv6 address.
	Ipv6 pulumi.StringPtrInput
	// Enable/disable use of the of the IP address of the outgoing interface as the client IP address (default = enable) Valid values: `enable`, `disable`.
	Masquerade pulumi.StringPtrInput
	// URL for forward server health check monitoring (default = http://www.google.com).
	Monitor pulumi.StringPtrInput
	// Server name.
	Name pulumi.StringPtrInput
	// HTTP authentication password.
	Password pulumi.StringPtrInput
	// Port number that the forwarding server expects to receive HTTP sessions on (1 - 65535, default = 3128).
	Port pulumi.IntPtrInput
	// Action to take when the forward server is found to be down: block sessions until the server is back up or pass sessions to their destination. Valid values: `block`, `pass`.
	ServerDownOption pulumi.StringPtrInput
	// HTTP authentication user name.
	Username pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ForwardserverState) ElementType() reflect.Type {
	return reflect.TypeOf((*forwardserverState)(nil)).Elem()
}

type forwardserverArgs struct {
	// Address type of the forwarding proxy server: IP or FQDN.
	AddrType *string `pulumi:"addrType"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Forward server Fully Qualified Domain Name (FQDN).
	Fqdn *string `pulumi:"fqdn"`
	// Enable/disable forward server health checking. Attempts to connect through the remote forwarding server to a destination to verify that the forwarding server is operating normally. Valid values: `disable`, `enable`.
	Healthcheck *string `pulumi:"healthcheck"`
	// Forward proxy server IP address.
	Ip *string `pulumi:"ip"`
	// Forward proxy server IPv6 address.
	Ipv6 *string `pulumi:"ipv6"`
	// Enable/disable use of the of the IP address of the outgoing interface as the client IP address (default = enable) Valid values: `enable`, `disable`.
	Masquerade *string `pulumi:"masquerade"`
	// URL for forward server health check monitoring (default = http://www.google.com).
	Monitor *string `pulumi:"monitor"`
	// Server name.
	Name *string `pulumi:"name"`
	// HTTP authentication password.
	Password *string `pulumi:"password"`
	// Port number that the forwarding server expects to receive HTTP sessions on (1 - 65535, default = 3128).
	Port *int `pulumi:"port"`
	// Action to take when the forward server is found to be down: block sessions until the server is back up or pass sessions to their destination. Valid values: `block`, `pass`.
	ServerDownOption *string `pulumi:"serverDownOption"`
	// HTTP authentication user name.
	Username *string `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Forwardserver resource.
type ForwardserverArgs struct {
	// Address type of the forwarding proxy server: IP or FQDN.
	AddrType pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Forward server Fully Qualified Domain Name (FQDN).
	Fqdn pulumi.StringPtrInput
	// Enable/disable forward server health checking. Attempts to connect through the remote forwarding server to a destination to verify that the forwarding server is operating normally. Valid values: `disable`, `enable`.
	Healthcheck pulumi.StringPtrInput
	// Forward proxy server IP address.
	Ip pulumi.StringPtrInput
	// Forward proxy server IPv6 address.
	Ipv6 pulumi.StringPtrInput
	// Enable/disable use of the of the IP address of the outgoing interface as the client IP address (default = enable) Valid values: `enable`, `disable`.
	Masquerade pulumi.StringPtrInput
	// URL for forward server health check monitoring (default = http://www.google.com).
	Monitor pulumi.StringPtrInput
	// Server name.
	Name pulumi.StringPtrInput
	// HTTP authentication password.
	Password pulumi.StringPtrInput
	// Port number that the forwarding server expects to receive HTTP sessions on (1 - 65535, default = 3128).
	Port pulumi.IntPtrInput
	// Action to take when the forward server is found to be down: block sessions until the server is back up or pass sessions to their destination. Valid values: `block`, `pass`.
	ServerDownOption pulumi.StringPtrInput
	// HTTP authentication user name.
	Username pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ForwardserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*forwardserverArgs)(nil)).Elem()
}

type ForwardserverInput interface {
	pulumi.Input

	ToForwardserverOutput() ForwardserverOutput
	ToForwardserverOutputWithContext(ctx context.Context) ForwardserverOutput
}

func (*Forwardserver) ElementType() reflect.Type {
	return reflect.TypeOf((**Forwardserver)(nil)).Elem()
}

func (i *Forwardserver) ToForwardserverOutput() ForwardserverOutput {
	return i.ToForwardserverOutputWithContext(context.Background())
}

func (i *Forwardserver) ToForwardserverOutputWithContext(ctx context.Context) ForwardserverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardserverOutput)
}

// ForwardserverArrayInput is an input type that accepts ForwardserverArray and ForwardserverArrayOutput values.
// You can construct a concrete instance of `ForwardserverArrayInput` via:
//
//	ForwardserverArray{ ForwardserverArgs{...} }
type ForwardserverArrayInput interface {
	pulumi.Input

	ToForwardserverArrayOutput() ForwardserverArrayOutput
	ToForwardserverArrayOutputWithContext(context.Context) ForwardserverArrayOutput
}

type ForwardserverArray []ForwardserverInput

func (ForwardserverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Forwardserver)(nil)).Elem()
}

func (i ForwardserverArray) ToForwardserverArrayOutput() ForwardserverArrayOutput {
	return i.ToForwardserverArrayOutputWithContext(context.Background())
}

func (i ForwardserverArray) ToForwardserverArrayOutputWithContext(ctx context.Context) ForwardserverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardserverArrayOutput)
}

// ForwardserverMapInput is an input type that accepts ForwardserverMap and ForwardserverMapOutput values.
// You can construct a concrete instance of `ForwardserverMapInput` via:
//
//	ForwardserverMap{ "key": ForwardserverArgs{...} }
type ForwardserverMapInput interface {
	pulumi.Input

	ToForwardserverMapOutput() ForwardserverMapOutput
	ToForwardserverMapOutputWithContext(context.Context) ForwardserverMapOutput
}

type ForwardserverMap map[string]ForwardserverInput

func (ForwardserverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Forwardserver)(nil)).Elem()
}

func (i ForwardserverMap) ToForwardserverMapOutput() ForwardserverMapOutput {
	return i.ToForwardserverMapOutputWithContext(context.Background())
}

func (i ForwardserverMap) ToForwardserverMapOutputWithContext(ctx context.Context) ForwardserverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardserverMapOutput)
}

type ForwardserverOutput struct{ *pulumi.OutputState }

func (ForwardserverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Forwardserver)(nil)).Elem()
}

func (o ForwardserverOutput) ToForwardserverOutput() ForwardserverOutput {
	return o
}

func (o ForwardserverOutput) ToForwardserverOutputWithContext(ctx context.Context) ForwardserverOutput {
	return o
}

// Address type of the forwarding proxy server: IP or FQDN.
func (o ForwardserverOutput) AddrType() pulumi.StringOutput {
	return o.ApplyT(func(v *Forwardserver) pulumi.StringOutput { return v.AddrType }).(pulumi.StringOutput)
}

// Comment.
func (o ForwardserverOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v *Forwardserver) pulumi.StringOutput { return v.Comment }).(pulumi.StringOutput)
}

// Forward server Fully Qualified Domain Name (FQDN).
func (o ForwardserverOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *Forwardserver) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// Enable/disable forward server health checking. Attempts to connect through the remote forwarding server to a destination to verify that the forwarding server is operating normally. Valid values: `disable`, `enable`.
func (o ForwardserverOutput) Healthcheck() pulumi.StringOutput {
	return o.ApplyT(func(v *Forwardserver) pulumi.StringOutput { return v.Healthcheck }).(pulumi.StringOutput)
}

// Forward proxy server IP address.
func (o ForwardserverOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *Forwardserver) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// Forward proxy server IPv6 address.
func (o ForwardserverOutput) Ipv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Forwardserver) pulumi.StringOutput { return v.Ipv6 }).(pulumi.StringOutput)
}

// Enable/disable use of the of the IP address of the outgoing interface as the client IP address (default = enable) Valid values: `enable`, `disable`.
func (o ForwardserverOutput) Masquerade() pulumi.StringOutput {
	return o.ApplyT(func(v *Forwardserver) pulumi.StringOutput { return v.Masquerade }).(pulumi.StringOutput)
}

// URL for forward server health check monitoring (default = http://www.google.com).
func (o ForwardserverOutput) Monitor() pulumi.StringOutput {
	return o.ApplyT(func(v *Forwardserver) pulumi.StringOutput { return v.Monitor }).(pulumi.StringOutput)
}

// Server name.
func (o ForwardserverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Forwardserver) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// HTTP authentication password.
func (o ForwardserverOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Forwardserver) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Port number that the forwarding server expects to receive HTTP sessions on (1 - 65535, default = 3128).
func (o ForwardserverOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Forwardserver) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Action to take when the forward server is found to be down: block sessions until the server is back up or pass sessions to their destination. Valid values: `block`, `pass`.
func (o ForwardserverOutput) ServerDownOption() pulumi.StringOutput {
	return o.ApplyT(func(v *Forwardserver) pulumi.StringOutput { return v.ServerDownOption }).(pulumi.StringOutput)
}

// HTTP authentication user name.
func (o ForwardserverOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *Forwardserver) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ForwardserverOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Forwardserver) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type ForwardserverArrayOutput struct{ *pulumi.OutputState }

func (ForwardserverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Forwardserver)(nil)).Elem()
}

func (o ForwardserverArrayOutput) ToForwardserverArrayOutput() ForwardserverArrayOutput {
	return o
}

func (o ForwardserverArrayOutput) ToForwardserverArrayOutputWithContext(ctx context.Context) ForwardserverArrayOutput {
	return o
}

func (o ForwardserverArrayOutput) Index(i pulumi.IntInput) ForwardserverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Forwardserver {
		return vs[0].([]*Forwardserver)[vs[1].(int)]
	}).(ForwardserverOutput)
}

type ForwardserverMapOutput struct{ *pulumi.OutputState }

func (ForwardserverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Forwardserver)(nil)).Elem()
}

func (o ForwardserverMapOutput) ToForwardserverMapOutput() ForwardserverMapOutput {
	return o
}

func (o ForwardserverMapOutput) ToForwardserverMapOutputWithContext(ctx context.Context) ForwardserverMapOutput {
	return o
}

func (o ForwardserverMapOutput) MapIndex(k pulumi.StringInput) ForwardserverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Forwardserver {
		return vs[0].(map[string]*Forwardserver)[vs[1].(string)]
	}).(ForwardserverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardserverInput)(nil)).Elem(), &Forwardserver{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardserverArrayInput)(nil)).Elem(), ForwardserverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardserverMapInput)(nil)).Elem(), ForwardserverMap{})
	pulumi.RegisterOutputType(ForwardserverOutput{})
	pulumi.RegisterOutputType(ForwardserverArrayOutput{})
	pulumi.RegisterOutputType(ForwardserverMapOutput{})
}
