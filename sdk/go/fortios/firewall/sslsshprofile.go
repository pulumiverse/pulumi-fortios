// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure SSL/SSH protocol options.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewSslsshprofile(ctx, "t1", &firewall.SslsshprofileArgs{
//				Ftps: &firewall.SslsshprofileFtpsArgs{
//					Ports: pulumi.String("990"),
//				},
//				Https: &firewall.SslsshprofileHttpsArgs{
//					Ports: pulumi.String("443 127 422 392"),
//				},
//				Imaps: &firewall.SslsshprofileImapsArgs{
//					Ports: pulumi.String("993 1123"),
//				},
//				Pop3s: &firewall.SslsshprofilePop3sArgs{
//					Ports: pulumi.String("995"),
//				},
//				Smtps: &firewall.SslsshprofileSmtpsArgs{
//					Ports: pulumi.String("465"),
//				},
//				Ssl: &firewall.SslsshprofileSslArgs{
//					InspectAll: pulumi.String("disable"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firewall.NewSslsshprofile(ctx, "t2", &firewall.SslsshprofileArgs{
//				Https: &firewall.SslsshprofileHttpsArgs{
//					Ports: pulumi.String("443"),
//				},
//				Ssl: &firewall.SslsshprofileSslArgs{
//					InspectAll: pulumi.String("deep-inspection"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Firewall SslSshProfile can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/sslsshprofile:Sslsshprofile labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/sslsshprofile:Sslsshprofile labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Sslsshprofile struct {
	pulumi.CustomResourceState

	// Enable/disable exempting servers by FortiGuard allowlist. Valid values: `enable`, `disable`.
	Allowlist pulumi.StringOutput `pulumi:"allowlist"`
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blacklist. Valid values: `disable`, `enable`.
	BlockBlacklistedCertificates pulumi.StringOutput `pulumi:"blockBlacklistedCertificates"`
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blocklist. Valid values: `disable`, `enable`.
	BlockBlocklistedCertificates pulumi.StringOutput `pulumi:"blockBlocklistedCertificates"`
	// CA certificate used by SSL Inspection.
	Caname pulumi.StringOutput `pulumi:"caname"`
	// Optional comments.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Configure DNS over TLS options. The structure of `dot` block is documented below.
	Dot SslsshprofileDotOutput `pulumi:"dot"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Configure FTPS options. The structure of `ftps` block is documented below.
	Ftps SslsshprofileFtpsOutput `pulumi:"ftps"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Configure HTTPS options. The structure of `https` block is documented below.
	Https SslsshprofileHttpsOutput `pulumi:"https"`
	// Configure IMAPS options. The structure of `imaps` block is documented below.
	Imaps SslsshprofileImapsOutput `pulumi:"imaps"`
	// Enable/disable inspection of MAPI over HTTPS. Valid values: `enable`, `disable`.
	MapiOverHttps pulumi.StringOutput `pulumi:"mapiOverHttps"`
	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configure POP3S options. The structure of `pop3s` block is documented below.
	Pop3s SslsshprofilePop3sOutput `pulumi:"pop3s"`
	// Enable/disable inspection of RPC over HTTPS. Valid values: `enable`, `disable`.
	RpcOverHttps pulumi.StringOutput `pulumi:"rpcOverHttps"`
	// Certificate used by SSL Inspection to replace server certificate.
	ServerCert pulumi.StringOutput `pulumi:"serverCert"`
	// Re-sign or replace the server's certificate. Valid values: `re-sign`, `replace`.
	ServerCertMode pulumi.StringOutput `pulumi:"serverCertMode"`
	// Configure SMTPS options. The structure of `smtps` block is documented below.
	Smtps SslsshprofileSmtpsOutput `pulumi:"smtps"`
	// Configure SSH options. The structure of `ssh` block is documented below.
	Ssh SslsshprofileSshOutput `pulumi:"ssh"`
	// Configure SSL options. The structure of `ssl` block is documented below.
	Ssl SslsshprofileSslOutput `pulumi:"ssl"`
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomaliesLog pulumi.StringOutput `pulumi:"sslAnomaliesLog"`
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomalyLog pulumi.StringOutput `pulumi:"sslAnomalyLog"`
	// Enable/disable IP based URL rating. Valid values: `enable`, `disable`.
	SslExemptionIpRating pulumi.StringOutput `pulumi:"sslExemptionIpRating"`
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionLog pulumi.StringOutput `pulumi:"sslExemptionLog"`
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionsLog pulumi.StringOutput `pulumi:"sslExemptionsLog"`
	// Servers to exempt from SSL inspection. The structure of `sslExempt` block is documented below.
	SslExempts SslsshprofileSslExemptArrayOutput `pulumi:"sslExempts"`
	// Enable/disable logging of TLS handshakes. Valid values: `disable`, `enable`.
	SslHandshakeLog pulumi.StringOutput `pulumi:"sslHandshakeLog"`
	// Enable/disable logging SSL negotiation. Valid values: `disable`, `enable`.
	SslNegotiationLog pulumi.StringOutput `pulumi:"sslNegotiationLog"`
	// Enable/disable logging of server certificate information. Valid values: `disable`, `enable`.
	SslServerCertLog pulumi.StringOutput `pulumi:"sslServerCertLog"`
	// SSL servers. The structure of `sslServer` block is documented below.
	SslServers SslsshprofileSslServerArrayOutput `pulumi:"sslServers"`
	// Configure ALPN option. Valid values: `http1-1`, `http2`, `all`, `none`.
	SupportedAlpn pulumi.StringOutput `pulumi:"supportedAlpn"`
	// Untrusted CA certificate used by SSL Inspection.
	UntrustedCaname pulumi.StringOutput `pulumi:"untrustedCaname"`
	// Enable/disable the use of SSL server table for SSL offloading. Valid values: `disable`, `enable`.
	UseSslServer pulumi.StringOutput `pulumi:"useSslServer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Enable/disable exempting servers by FortiGuard whitelist. Valid values: `enable`, `disable`.
	Whitelist pulumi.StringOutput `pulumi:"whitelist"`
}

// NewSslsshprofile registers a new resource with the given unique name, arguments, and options.
func NewSslsshprofile(ctx *pulumi.Context,
	name string, args *SslsshprofileArgs, opts ...pulumi.ResourceOption) (*Sslsshprofile, error) {
	if args == nil {
		args = &SslsshprofileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Sslsshprofile
	err := ctx.RegisterResource("fortios:firewall/sslsshprofile:Sslsshprofile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSslsshprofile gets an existing Sslsshprofile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSslsshprofile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SslsshprofileState, opts ...pulumi.ResourceOption) (*Sslsshprofile, error) {
	var resource Sslsshprofile
	err := ctx.ReadResource("fortios:firewall/sslsshprofile:Sslsshprofile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sslsshprofile resources.
type sslsshprofileState struct {
	// Enable/disable exempting servers by FortiGuard allowlist. Valid values: `enable`, `disable`.
	Allowlist *string `pulumi:"allowlist"`
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blacklist. Valid values: `disable`, `enable`.
	BlockBlacklistedCertificates *string `pulumi:"blockBlacklistedCertificates"`
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blocklist. Valid values: `disable`, `enable`.
	BlockBlocklistedCertificates *string `pulumi:"blockBlocklistedCertificates"`
	// CA certificate used by SSL Inspection.
	Caname *string `pulumi:"caname"`
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Configure DNS over TLS options. The structure of `dot` block is documented below.
	Dot *SslsshprofileDot `pulumi:"dot"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Configure FTPS options. The structure of `ftps` block is documented below.
	Ftps *SslsshprofileFtps `pulumi:"ftps"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Configure HTTPS options. The structure of `https` block is documented below.
	Https *SslsshprofileHttps `pulumi:"https"`
	// Configure IMAPS options. The structure of `imaps` block is documented below.
	Imaps *SslsshprofileImaps `pulumi:"imaps"`
	// Enable/disable inspection of MAPI over HTTPS. Valid values: `enable`, `disable`.
	MapiOverHttps *string `pulumi:"mapiOverHttps"`
	// Name.
	Name *string `pulumi:"name"`
	// Configure POP3S options. The structure of `pop3s` block is documented below.
	Pop3s *SslsshprofilePop3s `pulumi:"pop3s"`
	// Enable/disable inspection of RPC over HTTPS. Valid values: `enable`, `disable`.
	RpcOverHttps *string `pulumi:"rpcOverHttps"`
	// Certificate used by SSL Inspection to replace server certificate.
	ServerCert *string `pulumi:"serverCert"`
	// Re-sign or replace the server's certificate. Valid values: `re-sign`, `replace`.
	ServerCertMode *string `pulumi:"serverCertMode"`
	// Configure SMTPS options. The structure of `smtps` block is documented below.
	Smtps *SslsshprofileSmtps `pulumi:"smtps"`
	// Configure SSH options. The structure of `ssh` block is documented below.
	Ssh *SslsshprofileSsh `pulumi:"ssh"`
	// Configure SSL options. The structure of `ssl` block is documented below.
	Ssl *SslsshprofileSsl `pulumi:"ssl"`
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomaliesLog *string `pulumi:"sslAnomaliesLog"`
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomalyLog *string `pulumi:"sslAnomalyLog"`
	// Enable/disable IP based URL rating. Valid values: `enable`, `disable`.
	SslExemptionIpRating *string `pulumi:"sslExemptionIpRating"`
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionLog *string `pulumi:"sslExemptionLog"`
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionsLog *string `pulumi:"sslExemptionsLog"`
	// Servers to exempt from SSL inspection. The structure of `sslExempt` block is documented below.
	SslExempts []SslsshprofileSslExempt `pulumi:"sslExempts"`
	// Enable/disable logging of TLS handshakes. Valid values: `disable`, `enable`.
	SslHandshakeLog *string `pulumi:"sslHandshakeLog"`
	// Enable/disable logging SSL negotiation. Valid values: `disable`, `enable`.
	SslNegotiationLog *string `pulumi:"sslNegotiationLog"`
	// Enable/disable logging of server certificate information. Valid values: `disable`, `enable`.
	SslServerCertLog *string `pulumi:"sslServerCertLog"`
	// SSL servers. The structure of `sslServer` block is documented below.
	SslServers []SslsshprofileSslServer `pulumi:"sslServers"`
	// Configure ALPN option. Valid values: `http1-1`, `http2`, `all`, `none`.
	SupportedAlpn *string `pulumi:"supportedAlpn"`
	// Untrusted CA certificate used by SSL Inspection.
	UntrustedCaname *string `pulumi:"untrustedCaname"`
	// Enable/disable the use of SSL server table for SSL offloading. Valid values: `disable`, `enable`.
	UseSslServer *string `pulumi:"useSslServer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable exempting servers by FortiGuard whitelist. Valid values: `enable`, `disable`.
	Whitelist *string `pulumi:"whitelist"`
}

type SslsshprofileState struct {
	// Enable/disable exempting servers by FortiGuard allowlist. Valid values: `enable`, `disable`.
	Allowlist pulumi.StringPtrInput
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blacklist. Valid values: `disable`, `enable`.
	BlockBlacklistedCertificates pulumi.StringPtrInput
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blocklist. Valid values: `disable`, `enable`.
	BlockBlocklistedCertificates pulumi.StringPtrInput
	// CA certificate used by SSL Inspection.
	Caname pulumi.StringPtrInput
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Configure DNS over TLS options. The structure of `dot` block is documented below.
	Dot SslsshprofileDotPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Configure FTPS options. The structure of `ftps` block is documented below.
	Ftps SslsshprofileFtpsPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Configure HTTPS options. The structure of `https` block is documented below.
	Https SslsshprofileHttpsPtrInput
	// Configure IMAPS options. The structure of `imaps` block is documented below.
	Imaps SslsshprofileImapsPtrInput
	// Enable/disable inspection of MAPI over HTTPS. Valid values: `enable`, `disable`.
	MapiOverHttps pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Configure POP3S options. The structure of `pop3s` block is documented below.
	Pop3s SslsshprofilePop3sPtrInput
	// Enable/disable inspection of RPC over HTTPS. Valid values: `enable`, `disable`.
	RpcOverHttps pulumi.StringPtrInput
	// Certificate used by SSL Inspection to replace server certificate.
	ServerCert pulumi.StringPtrInput
	// Re-sign or replace the server's certificate. Valid values: `re-sign`, `replace`.
	ServerCertMode pulumi.StringPtrInput
	// Configure SMTPS options. The structure of `smtps` block is documented below.
	Smtps SslsshprofileSmtpsPtrInput
	// Configure SSH options. The structure of `ssh` block is documented below.
	Ssh SslsshprofileSshPtrInput
	// Configure SSL options. The structure of `ssl` block is documented below.
	Ssl SslsshprofileSslPtrInput
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomaliesLog pulumi.StringPtrInput
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomalyLog pulumi.StringPtrInput
	// Enable/disable IP based URL rating. Valid values: `enable`, `disable`.
	SslExemptionIpRating pulumi.StringPtrInput
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionLog pulumi.StringPtrInput
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionsLog pulumi.StringPtrInput
	// Servers to exempt from SSL inspection. The structure of `sslExempt` block is documented below.
	SslExempts SslsshprofileSslExemptArrayInput
	// Enable/disable logging of TLS handshakes. Valid values: `disable`, `enable`.
	SslHandshakeLog pulumi.StringPtrInput
	// Enable/disable logging SSL negotiation. Valid values: `disable`, `enable`.
	SslNegotiationLog pulumi.StringPtrInput
	// Enable/disable logging of server certificate information. Valid values: `disable`, `enable`.
	SslServerCertLog pulumi.StringPtrInput
	// SSL servers. The structure of `sslServer` block is documented below.
	SslServers SslsshprofileSslServerArrayInput
	// Configure ALPN option. Valid values: `http1-1`, `http2`, `all`, `none`.
	SupportedAlpn pulumi.StringPtrInput
	// Untrusted CA certificate used by SSL Inspection.
	UntrustedCaname pulumi.StringPtrInput
	// Enable/disable the use of SSL server table for SSL offloading. Valid values: `disable`, `enable`.
	UseSslServer pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable exempting servers by FortiGuard whitelist. Valid values: `enable`, `disable`.
	Whitelist pulumi.StringPtrInput
}

func (SslsshprofileState) ElementType() reflect.Type {
	return reflect.TypeOf((*sslsshprofileState)(nil)).Elem()
}

type sslsshprofileArgs struct {
	// Enable/disable exempting servers by FortiGuard allowlist. Valid values: `enable`, `disable`.
	Allowlist *string `pulumi:"allowlist"`
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blacklist. Valid values: `disable`, `enable`.
	BlockBlacklistedCertificates *string `pulumi:"blockBlacklistedCertificates"`
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blocklist. Valid values: `disable`, `enable`.
	BlockBlocklistedCertificates *string `pulumi:"blockBlocklistedCertificates"`
	// CA certificate used by SSL Inspection.
	Caname *string `pulumi:"caname"`
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Configure DNS over TLS options. The structure of `dot` block is documented below.
	Dot *SslsshprofileDot `pulumi:"dot"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Configure FTPS options. The structure of `ftps` block is documented below.
	Ftps *SslsshprofileFtps `pulumi:"ftps"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Configure HTTPS options. The structure of `https` block is documented below.
	Https *SslsshprofileHttps `pulumi:"https"`
	// Configure IMAPS options. The structure of `imaps` block is documented below.
	Imaps *SslsshprofileImaps `pulumi:"imaps"`
	// Enable/disable inspection of MAPI over HTTPS. Valid values: `enable`, `disable`.
	MapiOverHttps *string `pulumi:"mapiOverHttps"`
	// Name.
	Name *string `pulumi:"name"`
	// Configure POP3S options. The structure of `pop3s` block is documented below.
	Pop3s *SslsshprofilePop3s `pulumi:"pop3s"`
	// Enable/disable inspection of RPC over HTTPS. Valid values: `enable`, `disable`.
	RpcOverHttps *string `pulumi:"rpcOverHttps"`
	// Certificate used by SSL Inspection to replace server certificate.
	ServerCert *string `pulumi:"serverCert"`
	// Re-sign or replace the server's certificate. Valid values: `re-sign`, `replace`.
	ServerCertMode *string `pulumi:"serverCertMode"`
	// Configure SMTPS options. The structure of `smtps` block is documented below.
	Smtps *SslsshprofileSmtps `pulumi:"smtps"`
	// Configure SSH options. The structure of `ssh` block is documented below.
	Ssh *SslsshprofileSsh `pulumi:"ssh"`
	// Configure SSL options. The structure of `ssl` block is documented below.
	Ssl *SslsshprofileSsl `pulumi:"ssl"`
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomaliesLog *string `pulumi:"sslAnomaliesLog"`
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomalyLog *string `pulumi:"sslAnomalyLog"`
	// Enable/disable IP based URL rating. Valid values: `enable`, `disable`.
	SslExemptionIpRating *string `pulumi:"sslExemptionIpRating"`
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionLog *string `pulumi:"sslExemptionLog"`
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionsLog *string `pulumi:"sslExemptionsLog"`
	// Servers to exempt from SSL inspection. The structure of `sslExempt` block is documented below.
	SslExempts []SslsshprofileSslExempt `pulumi:"sslExempts"`
	// Enable/disable logging of TLS handshakes. Valid values: `disable`, `enable`.
	SslHandshakeLog *string `pulumi:"sslHandshakeLog"`
	// Enable/disable logging SSL negotiation. Valid values: `disable`, `enable`.
	SslNegotiationLog *string `pulumi:"sslNegotiationLog"`
	// Enable/disable logging of server certificate information. Valid values: `disable`, `enable`.
	SslServerCertLog *string `pulumi:"sslServerCertLog"`
	// SSL servers. The structure of `sslServer` block is documented below.
	SslServers []SslsshprofileSslServer `pulumi:"sslServers"`
	// Configure ALPN option. Valid values: `http1-1`, `http2`, `all`, `none`.
	SupportedAlpn *string `pulumi:"supportedAlpn"`
	// Untrusted CA certificate used by SSL Inspection.
	UntrustedCaname *string `pulumi:"untrustedCaname"`
	// Enable/disable the use of SSL server table for SSL offloading. Valid values: `disable`, `enable`.
	UseSslServer *string `pulumi:"useSslServer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable exempting servers by FortiGuard whitelist. Valid values: `enable`, `disable`.
	Whitelist *string `pulumi:"whitelist"`
}

// The set of arguments for constructing a Sslsshprofile resource.
type SslsshprofileArgs struct {
	// Enable/disable exempting servers by FortiGuard allowlist. Valid values: `enable`, `disable`.
	Allowlist pulumi.StringPtrInput
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blacklist. Valid values: `disable`, `enable`.
	BlockBlacklistedCertificates pulumi.StringPtrInput
	// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blocklist. Valid values: `disable`, `enable`.
	BlockBlocklistedCertificates pulumi.StringPtrInput
	// CA certificate used by SSL Inspection.
	Caname pulumi.StringPtrInput
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Configure DNS over TLS options. The structure of `dot` block is documented below.
	Dot SslsshprofileDotPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Configure FTPS options. The structure of `ftps` block is documented below.
	Ftps SslsshprofileFtpsPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Configure HTTPS options. The structure of `https` block is documented below.
	Https SslsshprofileHttpsPtrInput
	// Configure IMAPS options. The structure of `imaps` block is documented below.
	Imaps SslsshprofileImapsPtrInput
	// Enable/disable inspection of MAPI over HTTPS. Valid values: `enable`, `disable`.
	MapiOverHttps pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Configure POP3S options. The structure of `pop3s` block is documented below.
	Pop3s SslsshprofilePop3sPtrInput
	// Enable/disable inspection of RPC over HTTPS. Valid values: `enable`, `disable`.
	RpcOverHttps pulumi.StringPtrInput
	// Certificate used by SSL Inspection to replace server certificate.
	ServerCert pulumi.StringPtrInput
	// Re-sign or replace the server's certificate. Valid values: `re-sign`, `replace`.
	ServerCertMode pulumi.StringPtrInput
	// Configure SMTPS options. The structure of `smtps` block is documented below.
	Smtps SslsshprofileSmtpsPtrInput
	// Configure SSH options. The structure of `ssh` block is documented below.
	Ssh SslsshprofileSshPtrInput
	// Configure SSL options. The structure of `ssl` block is documented below.
	Ssl SslsshprofileSslPtrInput
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomaliesLog pulumi.StringPtrInput
	// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
	SslAnomalyLog pulumi.StringPtrInput
	// Enable/disable IP based URL rating. Valid values: `enable`, `disable`.
	SslExemptionIpRating pulumi.StringPtrInput
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionLog pulumi.StringPtrInput
	// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
	SslExemptionsLog pulumi.StringPtrInput
	// Servers to exempt from SSL inspection. The structure of `sslExempt` block is documented below.
	SslExempts SslsshprofileSslExemptArrayInput
	// Enable/disable logging of TLS handshakes. Valid values: `disable`, `enable`.
	SslHandshakeLog pulumi.StringPtrInput
	// Enable/disable logging SSL negotiation. Valid values: `disable`, `enable`.
	SslNegotiationLog pulumi.StringPtrInput
	// Enable/disable logging of server certificate information. Valid values: `disable`, `enable`.
	SslServerCertLog pulumi.StringPtrInput
	// SSL servers. The structure of `sslServer` block is documented below.
	SslServers SslsshprofileSslServerArrayInput
	// Configure ALPN option. Valid values: `http1-1`, `http2`, `all`, `none`.
	SupportedAlpn pulumi.StringPtrInput
	// Untrusted CA certificate used by SSL Inspection.
	UntrustedCaname pulumi.StringPtrInput
	// Enable/disable the use of SSL server table for SSL offloading. Valid values: `disable`, `enable`.
	UseSslServer pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable exempting servers by FortiGuard whitelist. Valid values: `enable`, `disable`.
	Whitelist pulumi.StringPtrInput
}

func (SslsshprofileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sslsshprofileArgs)(nil)).Elem()
}

type SslsshprofileInput interface {
	pulumi.Input

	ToSslsshprofileOutput() SslsshprofileOutput
	ToSslsshprofileOutputWithContext(ctx context.Context) SslsshprofileOutput
}

func (*Sslsshprofile) ElementType() reflect.Type {
	return reflect.TypeOf((**Sslsshprofile)(nil)).Elem()
}

func (i *Sslsshprofile) ToSslsshprofileOutput() SslsshprofileOutput {
	return i.ToSslsshprofileOutputWithContext(context.Background())
}

func (i *Sslsshprofile) ToSslsshprofileOutputWithContext(ctx context.Context) SslsshprofileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslsshprofileOutput)
}

// SslsshprofileArrayInput is an input type that accepts SslsshprofileArray and SslsshprofileArrayOutput values.
// You can construct a concrete instance of `SslsshprofileArrayInput` via:
//
//	SslsshprofileArray{ SslsshprofileArgs{...} }
type SslsshprofileArrayInput interface {
	pulumi.Input

	ToSslsshprofileArrayOutput() SslsshprofileArrayOutput
	ToSslsshprofileArrayOutputWithContext(context.Context) SslsshprofileArrayOutput
}

type SslsshprofileArray []SslsshprofileInput

func (SslsshprofileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sslsshprofile)(nil)).Elem()
}

func (i SslsshprofileArray) ToSslsshprofileArrayOutput() SslsshprofileArrayOutput {
	return i.ToSslsshprofileArrayOutputWithContext(context.Background())
}

func (i SslsshprofileArray) ToSslsshprofileArrayOutputWithContext(ctx context.Context) SslsshprofileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslsshprofileArrayOutput)
}

// SslsshprofileMapInput is an input type that accepts SslsshprofileMap and SslsshprofileMapOutput values.
// You can construct a concrete instance of `SslsshprofileMapInput` via:
//
//	SslsshprofileMap{ "key": SslsshprofileArgs{...} }
type SslsshprofileMapInput interface {
	pulumi.Input

	ToSslsshprofileMapOutput() SslsshprofileMapOutput
	ToSslsshprofileMapOutputWithContext(context.Context) SslsshprofileMapOutput
}

type SslsshprofileMap map[string]SslsshprofileInput

func (SslsshprofileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sslsshprofile)(nil)).Elem()
}

func (i SslsshprofileMap) ToSslsshprofileMapOutput() SslsshprofileMapOutput {
	return i.ToSslsshprofileMapOutputWithContext(context.Background())
}

func (i SslsshprofileMap) ToSslsshprofileMapOutputWithContext(ctx context.Context) SslsshprofileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslsshprofileMapOutput)
}

type SslsshprofileOutput struct{ *pulumi.OutputState }

func (SslsshprofileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sslsshprofile)(nil)).Elem()
}

func (o SslsshprofileOutput) ToSslsshprofileOutput() SslsshprofileOutput {
	return o
}

func (o SslsshprofileOutput) ToSslsshprofileOutputWithContext(ctx context.Context) SslsshprofileOutput {
	return o
}

// Enable/disable exempting servers by FortiGuard allowlist. Valid values: `enable`, `disable`.
func (o SslsshprofileOutput) Allowlist() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.Allowlist }).(pulumi.StringOutput)
}

// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blacklist. Valid values: `disable`, `enable`.
func (o SslsshprofileOutput) BlockBlacklistedCertificates() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.BlockBlacklistedCertificates }).(pulumi.StringOutput)
}

// Enable/disable blocking SSL-based botnet communication by FortiGuard certificate blocklist. Valid values: `disable`, `enable`.
func (o SslsshprofileOutput) BlockBlocklistedCertificates() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.BlockBlocklistedCertificates }).(pulumi.StringOutput)
}

// CA certificate used by SSL Inspection.
func (o SslsshprofileOutput) Caname() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.Caname }).(pulumi.StringOutput)
}

// Optional comments.
func (o SslsshprofileOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Configure DNS over TLS options. The structure of `dot` block is documented below.
func (o SslsshprofileOutput) Dot() SslsshprofileDotOutput {
	return o.ApplyT(func(v *Sslsshprofile) SslsshprofileDotOutput { return v.Dot }).(SslsshprofileDotOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SslsshprofileOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Configure FTPS options. The structure of `ftps` block is documented below.
func (o SslsshprofileOutput) Ftps() SslsshprofileFtpsOutput {
	return o.ApplyT(func(v *Sslsshprofile) SslsshprofileFtpsOutput { return v.Ftps }).(SslsshprofileFtpsOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o SslsshprofileOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Configure HTTPS options. The structure of `https` block is documented below.
func (o SslsshprofileOutput) Https() SslsshprofileHttpsOutput {
	return o.ApplyT(func(v *Sslsshprofile) SslsshprofileHttpsOutput { return v.Https }).(SslsshprofileHttpsOutput)
}

// Configure IMAPS options. The structure of `imaps` block is documented below.
func (o SslsshprofileOutput) Imaps() SslsshprofileImapsOutput {
	return o.ApplyT(func(v *Sslsshprofile) SslsshprofileImapsOutput { return v.Imaps }).(SslsshprofileImapsOutput)
}

// Enable/disable inspection of MAPI over HTTPS. Valid values: `enable`, `disable`.
func (o SslsshprofileOutput) MapiOverHttps() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.MapiOverHttps }).(pulumi.StringOutput)
}

// Name.
func (o SslsshprofileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configure POP3S options. The structure of `pop3s` block is documented below.
func (o SslsshprofileOutput) Pop3s() SslsshprofilePop3sOutput {
	return o.ApplyT(func(v *Sslsshprofile) SslsshprofilePop3sOutput { return v.Pop3s }).(SslsshprofilePop3sOutput)
}

// Enable/disable inspection of RPC over HTTPS. Valid values: `enable`, `disable`.
func (o SslsshprofileOutput) RpcOverHttps() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.RpcOverHttps }).(pulumi.StringOutput)
}

// Certificate used by SSL Inspection to replace server certificate.
func (o SslsshprofileOutput) ServerCert() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.ServerCert }).(pulumi.StringOutput)
}

// Re-sign or replace the server's certificate. Valid values: `re-sign`, `replace`.
func (o SslsshprofileOutput) ServerCertMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.ServerCertMode }).(pulumi.StringOutput)
}

// Configure SMTPS options. The structure of `smtps` block is documented below.
func (o SslsshprofileOutput) Smtps() SslsshprofileSmtpsOutput {
	return o.ApplyT(func(v *Sslsshprofile) SslsshprofileSmtpsOutput { return v.Smtps }).(SslsshprofileSmtpsOutput)
}

// Configure SSH options. The structure of `ssh` block is documented below.
func (o SslsshprofileOutput) Ssh() SslsshprofileSshOutput {
	return o.ApplyT(func(v *Sslsshprofile) SslsshprofileSshOutput { return v.Ssh }).(SslsshprofileSshOutput)
}

// Configure SSL options. The structure of `ssl` block is documented below.
func (o SslsshprofileOutput) Ssl() SslsshprofileSslOutput {
	return o.ApplyT(func(v *Sslsshprofile) SslsshprofileSslOutput { return v.Ssl }).(SslsshprofileSslOutput)
}

// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
func (o SslsshprofileOutput) SslAnomaliesLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.SslAnomaliesLog }).(pulumi.StringOutput)
}

// Enable/disable logging SSL anomalies. Valid values: `disable`, `enable`.
func (o SslsshprofileOutput) SslAnomalyLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.SslAnomalyLog }).(pulumi.StringOutput)
}

// Enable/disable IP based URL rating. Valid values: `enable`, `disable`.
func (o SslsshprofileOutput) SslExemptionIpRating() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.SslExemptionIpRating }).(pulumi.StringOutput)
}

// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
func (o SslsshprofileOutput) SslExemptionLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.SslExemptionLog }).(pulumi.StringOutput)
}

// Enable/disable logging SSL exemptions. Valid values: `disable`, `enable`.
func (o SslsshprofileOutput) SslExemptionsLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.SslExemptionsLog }).(pulumi.StringOutput)
}

// Servers to exempt from SSL inspection. The structure of `sslExempt` block is documented below.
func (o SslsshprofileOutput) SslExempts() SslsshprofileSslExemptArrayOutput {
	return o.ApplyT(func(v *Sslsshprofile) SslsshprofileSslExemptArrayOutput { return v.SslExempts }).(SslsshprofileSslExemptArrayOutput)
}

// Enable/disable logging of TLS handshakes. Valid values: `disable`, `enable`.
func (o SslsshprofileOutput) SslHandshakeLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.SslHandshakeLog }).(pulumi.StringOutput)
}

// Enable/disable logging SSL negotiation. Valid values: `disable`, `enable`.
func (o SslsshprofileOutput) SslNegotiationLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.SslNegotiationLog }).(pulumi.StringOutput)
}

// Enable/disable logging of server certificate information. Valid values: `disable`, `enable`.
func (o SslsshprofileOutput) SslServerCertLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.SslServerCertLog }).(pulumi.StringOutput)
}

// SSL servers. The structure of `sslServer` block is documented below.
func (o SslsshprofileOutput) SslServers() SslsshprofileSslServerArrayOutput {
	return o.ApplyT(func(v *Sslsshprofile) SslsshprofileSslServerArrayOutput { return v.SslServers }).(SslsshprofileSslServerArrayOutput)
}

// Configure ALPN option. Valid values: `http1-1`, `http2`, `all`, `none`.
func (o SslsshprofileOutput) SupportedAlpn() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.SupportedAlpn }).(pulumi.StringOutput)
}

// Untrusted CA certificate used by SSL Inspection.
func (o SslsshprofileOutput) UntrustedCaname() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.UntrustedCaname }).(pulumi.StringOutput)
}

// Enable/disable the use of SSL server table for SSL offloading. Valid values: `disable`, `enable`.
func (o SslsshprofileOutput) UseSslServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.UseSslServer }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SslsshprofileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Enable/disable exempting servers by FortiGuard whitelist. Valid values: `enable`, `disable`.
func (o SslsshprofileOutput) Whitelist() pulumi.StringOutput {
	return o.ApplyT(func(v *Sslsshprofile) pulumi.StringOutput { return v.Whitelist }).(pulumi.StringOutput)
}

type SslsshprofileArrayOutput struct{ *pulumi.OutputState }

func (SslsshprofileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sslsshprofile)(nil)).Elem()
}

func (o SslsshprofileArrayOutput) ToSslsshprofileArrayOutput() SslsshprofileArrayOutput {
	return o
}

func (o SslsshprofileArrayOutput) ToSslsshprofileArrayOutputWithContext(ctx context.Context) SslsshprofileArrayOutput {
	return o
}

func (o SslsshprofileArrayOutput) Index(i pulumi.IntInput) SslsshprofileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Sslsshprofile {
		return vs[0].([]*Sslsshprofile)[vs[1].(int)]
	}).(SslsshprofileOutput)
}

type SslsshprofileMapOutput struct{ *pulumi.OutputState }

func (SslsshprofileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sslsshprofile)(nil)).Elem()
}

func (o SslsshprofileMapOutput) ToSslsshprofileMapOutput() SslsshprofileMapOutput {
	return o
}

func (o SslsshprofileMapOutput) ToSslsshprofileMapOutputWithContext(ctx context.Context) SslsshprofileMapOutput {
	return o
}

func (o SslsshprofileMapOutput) MapIndex(k pulumi.StringInput) SslsshprofileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Sslsshprofile {
		return vs[0].(map[string]*Sslsshprofile)[vs[1].(string)]
	}).(SslsshprofileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SslsshprofileInput)(nil)).Elem(), &Sslsshprofile{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslsshprofileArrayInput)(nil)).Elem(), SslsshprofileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslsshprofileMapInput)(nil)).Elem(), SslsshprofileMap{})
	pulumi.RegisterOutputType(SslsshprofileOutput{})
	pulumi.RegisterOutputType(SslsshprofileArrayOutput{})
	pulumi.RegisterOutputType(SslsshprofileMapOutput{})
}
