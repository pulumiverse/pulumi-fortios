// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure multicast addresses.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewMulticastaddress(ctx, "trname", &firewall.MulticastaddressArgs{
//				Color:      pulumi.Int(0),
//				EndIp:      pulumi.String("224.0.0.22"),
//				StartIp:    pulumi.String("224.0.0.11"),
//				Subnet:     pulumi.String("224.0.0.11 224.0.0.22"),
//				Type:       pulumi.String("multicastrange"),
//				Visibility: pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Firewall MulticastAddress can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/multicastaddress:Multicastaddress labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/multicastaddress:Multicastaddress labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Multicastaddress struct {
	pulumi.CustomResourceState

	// Interface associated with the address object. When setting up a policy, only addresses associated with this interface are available.
	AssociatedInterface pulumi.StringOutput `pulumi:"associatedInterface"`
	// Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
	Color pulumi.IntOutput `pulumi:"color"`
	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Final IPv4 address (inclusive) in the range for the address.
	EndIp pulumi.StringOutput `pulumi:"endIp"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Multicast address name.
	Name pulumi.StringOutput `pulumi:"name"`
	// First IPv4 address (inclusive) in the range for the address.
	StartIp pulumi.StringOutput `pulumi:"startIp"`
	// Broadcast address and subnet.
	Subnet pulumi.StringOutput `pulumi:"subnet"`
	// Config object tagging. The structure of `tagging` block is documented below.
	Taggings MulticastaddressTaggingArrayOutput `pulumi:"taggings"`
	// Type of address object: multicast IP address range or broadcast IP/mask to be treated as a multicast address. Valid values: `multicastrange`, `broadcastmask`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Enable/disable visibility of the multicast address on the GUI. Valid values: `enable`, `disable`.
	Visibility pulumi.StringOutput `pulumi:"visibility"`
}

// NewMulticastaddress registers a new resource with the given unique name, arguments, and options.
func NewMulticastaddress(ctx *pulumi.Context,
	name string, args *MulticastaddressArgs, opts ...pulumi.ResourceOption) (*Multicastaddress, error) {
	if args == nil {
		args = &MulticastaddressArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Multicastaddress
	err := ctx.RegisterResource("fortios:firewall/multicastaddress:Multicastaddress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMulticastaddress gets an existing Multicastaddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMulticastaddress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MulticastaddressState, opts ...pulumi.ResourceOption) (*Multicastaddress, error) {
	var resource Multicastaddress
	err := ctx.ReadResource("fortios:firewall/multicastaddress:Multicastaddress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Multicastaddress resources.
type multicastaddressState struct {
	// Interface associated with the address object. When setting up a policy, only addresses associated with this interface are available.
	AssociatedInterface *string `pulumi:"associatedInterface"`
	// Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
	Color *int `pulumi:"color"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Final IPv4 address (inclusive) in the range for the address.
	EndIp *string `pulumi:"endIp"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Multicast address name.
	Name *string `pulumi:"name"`
	// First IPv4 address (inclusive) in the range for the address.
	StartIp *string `pulumi:"startIp"`
	// Broadcast address and subnet.
	Subnet *string `pulumi:"subnet"`
	// Config object tagging. The structure of `tagging` block is documented below.
	Taggings []MulticastaddressTagging `pulumi:"taggings"`
	// Type of address object: multicast IP address range or broadcast IP/mask to be treated as a multicast address. Valid values: `multicastrange`, `broadcastmask`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable visibility of the multicast address on the GUI. Valid values: `enable`, `disable`.
	Visibility *string `pulumi:"visibility"`
}

type MulticastaddressState struct {
	// Interface associated with the address object. When setting up a policy, only addresses associated with this interface are available.
	AssociatedInterface pulumi.StringPtrInput
	// Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
	Color pulumi.IntPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Final IPv4 address (inclusive) in the range for the address.
	EndIp pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Multicast address name.
	Name pulumi.StringPtrInput
	// First IPv4 address (inclusive) in the range for the address.
	StartIp pulumi.StringPtrInput
	// Broadcast address and subnet.
	Subnet pulumi.StringPtrInput
	// Config object tagging. The structure of `tagging` block is documented below.
	Taggings MulticastaddressTaggingArrayInput
	// Type of address object: multicast IP address range or broadcast IP/mask to be treated as a multicast address. Valid values: `multicastrange`, `broadcastmask`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable visibility of the multicast address on the GUI. Valid values: `enable`, `disable`.
	Visibility pulumi.StringPtrInput
}

func (MulticastaddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*multicastaddressState)(nil)).Elem()
}

type multicastaddressArgs struct {
	// Interface associated with the address object. When setting up a policy, only addresses associated with this interface are available.
	AssociatedInterface *string `pulumi:"associatedInterface"`
	// Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
	Color *int `pulumi:"color"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Final IPv4 address (inclusive) in the range for the address.
	EndIp *string `pulumi:"endIp"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Multicast address name.
	Name *string `pulumi:"name"`
	// First IPv4 address (inclusive) in the range for the address.
	StartIp *string `pulumi:"startIp"`
	// Broadcast address and subnet.
	Subnet *string `pulumi:"subnet"`
	// Config object tagging. The structure of `tagging` block is documented below.
	Taggings []MulticastaddressTagging `pulumi:"taggings"`
	// Type of address object: multicast IP address range or broadcast IP/mask to be treated as a multicast address. Valid values: `multicastrange`, `broadcastmask`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable visibility of the multicast address on the GUI. Valid values: `enable`, `disable`.
	Visibility *string `pulumi:"visibility"`
}

// The set of arguments for constructing a Multicastaddress resource.
type MulticastaddressArgs struct {
	// Interface associated with the address object. When setting up a policy, only addresses associated with this interface are available.
	AssociatedInterface pulumi.StringPtrInput
	// Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
	Color pulumi.IntPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Final IPv4 address (inclusive) in the range for the address.
	EndIp pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Multicast address name.
	Name pulumi.StringPtrInput
	// First IPv4 address (inclusive) in the range for the address.
	StartIp pulumi.StringPtrInput
	// Broadcast address and subnet.
	Subnet pulumi.StringPtrInput
	// Config object tagging. The structure of `tagging` block is documented below.
	Taggings MulticastaddressTaggingArrayInput
	// Type of address object: multicast IP address range or broadcast IP/mask to be treated as a multicast address. Valid values: `multicastrange`, `broadcastmask`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable visibility of the multicast address on the GUI. Valid values: `enable`, `disable`.
	Visibility pulumi.StringPtrInput
}

func (MulticastaddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multicastaddressArgs)(nil)).Elem()
}

type MulticastaddressInput interface {
	pulumi.Input

	ToMulticastaddressOutput() MulticastaddressOutput
	ToMulticastaddressOutputWithContext(ctx context.Context) MulticastaddressOutput
}

func (*Multicastaddress) ElementType() reflect.Type {
	return reflect.TypeOf((**Multicastaddress)(nil)).Elem()
}

func (i *Multicastaddress) ToMulticastaddressOutput() MulticastaddressOutput {
	return i.ToMulticastaddressOutputWithContext(context.Background())
}

func (i *Multicastaddress) ToMulticastaddressOutputWithContext(ctx context.Context) MulticastaddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MulticastaddressOutput)
}

// MulticastaddressArrayInput is an input type that accepts MulticastaddressArray and MulticastaddressArrayOutput values.
// You can construct a concrete instance of `MulticastaddressArrayInput` via:
//
//	MulticastaddressArray{ MulticastaddressArgs{...} }
type MulticastaddressArrayInput interface {
	pulumi.Input

	ToMulticastaddressArrayOutput() MulticastaddressArrayOutput
	ToMulticastaddressArrayOutputWithContext(context.Context) MulticastaddressArrayOutput
}

type MulticastaddressArray []MulticastaddressInput

func (MulticastaddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Multicastaddress)(nil)).Elem()
}

func (i MulticastaddressArray) ToMulticastaddressArrayOutput() MulticastaddressArrayOutput {
	return i.ToMulticastaddressArrayOutputWithContext(context.Background())
}

func (i MulticastaddressArray) ToMulticastaddressArrayOutputWithContext(ctx context.Context) MulticastaddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MulticastaddressArrayOutput)
}

// MulticastaddressMapInput is an input type that accepts MulticastaddressMap and MulticastaddressMapOutput values.
// You can construct a concrete instance of `MulticastaddressMapInput` via:
//
//	MulticastaddressMap{ "key": MulticastaddressArgs{...} }
type MulticastaddressMapInput interface {
	pulumi.Input

	ToMulticastaddressMapOutput() MulticastaddressMapOutput
	ToMulticastaddressMapOutputWithContext(context.Context) MulticastaddressMapOutput
}

type MulticastaddressMap map[string]MulticastaddressInput

func (MulticastaddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Multicastaddress)(nil)).Elem()
}

func (i MulticastaddressMap) ToMulticastaddressMapOutput() MulticastaddressMapOutput {
	return i.ToMulticastaddressMapOutputWithContext(context.Background())
}

func (i MulticastaddressMap) ToMulticastaddressMapOutputWithContext(ctx context.Context) MulticastaddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MulticastaddressMapOutput)
}

type MulticastaddressOutput struct{ *pulumi.OutputState }

func (MulticastaddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Multicastaddress)(nil)).Elem()
}

func (o MulticastaddressOutput) ToMulticastaddressOutput() MulticastaddressOutput {
	return o
}

func (o MulticastaddressOutput) ToMulticastaddressOutputWithContext(ctx context.Context) MulticastaddressOutput {
	return o
}

// Interface associated with the address object. When setting up a policy, only addresses associated with this interface are available.
func (o MulticastaddressOutput) AssociatedInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastaddress) pulumi.StringOutput { return v.AssociatedInterface }).(pulumi.StringOutput)
}

// Integer value to determine the color of the icon in the GUI (1 - 32, default = 0, which sets value to 1).
func (o MulticastaddressOutput) Color() pulumi.IntOutput {
	return o.ApplyT(func(v *Multicastaddress) pulumi.IntOutput { return v.Color }).(pulumi.IntOutput)
}

// Comment.
func (o MulticastaddressOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Multicastaddress) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o MulticastaddressOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Multicastaddress) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Final IPv4 address (inclusive) in the range for the address.
func (o MulticastaddressOutput) EndIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastaddress) pulumi.StringOutput { return v.EndIp }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o MulticastaddressOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Multicastaddress) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Multicast address name.
func (o MulticastaddressOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastaddress) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// First IPv4 address (inclusive) in the range for the address.
func (o MulticastaddressOutput) StartIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastaddress) pulumi.StringOutput { return v.StartIp }).(pulumi.StringOutput)
}

// Broadcast address and subnet.
func (o MulticastaddressOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastaddress) pulumi.StringOutput { return v.Subnet }).(pulumi.StringOutput)
}

// Config object tagging. The structure of `tagging` block is documented below.
func (o MulticastaddressOutput) Taggings() MulticastaddressTaggingArrayOutput {
	return o.ApplyT(func(v *Multicastaddress) MulticastaddressTaggingArrayOutput { return v.Taggings }).(MulticastaddressTaggingArrayOutput)
}

// Type of address object: multicast IP address range or broadcast IP/mask to be treated as a multicast address. Valid values: `multicastrange`, `broadcastmask`.
func (o MulticastaddressOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastaddress) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o MulticastaddressOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Multicastaddress) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Enable/disable visibility of the multicast address on the GUI. Valid values: `enable`, `disable`.
func (o MulticastaddressOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastaddress) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

type MulticastaddressArrayOutput struct{ *pulumi.OutputState }

func (MulticastaddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Multicastaddress)(nil)).Elem()
}

func (o MulticastaddressArrayOutput) ToMulticastaddressArrayOutput() MulticastaddressArrayOutput {
	return o
}

func (o MulticastaddressArrayOutput) ToMulticastaddressArrayOutputWithContext(ctx context.Context) MulticastaddressArrayOutput {
	return o
}

func (o MulticastaddressArrayOutput) Index(i pulumi.IntInput) MulticastaddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Multicastaddress {
		return vs[0].([]*Multicastaddress)[vs[1].(int)]
	}).(MulticastaddressOutput)
}

type MulticastaddressMapOutput struct{ *pulumi.OutputState }

func (MulticastaddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Multicastaddress)(nil)).Elem()
}

func (o MulticastaddressMapOutput) ToMulticastaddressMapOutput() MulticastaddressMapOutput {
	return o
}

func (o MulticastaddressMapOutput) ToMulticastaddressMapOutputWithContext(ctx context.Context) MulticastaddressMapOutput {
	return o
}

func (o MulticastaddressMapOutput) MapIndex(k pulumi.StringInput) MulticastaddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Multicastaddress {
		return vs[0].(map[string]*Multicastaddress)[vs[1].(string)]
	}).(MulticastaddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MulticastaddressInput)(nil)).Elem(), &Multicastaddress{})
	pulumi.RegisterInputType(reflect.TypeOf((*MulticastaddressArrayInput)(nil)).Elem(), MulticastaddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MulticastaddressMapInput)(nil)).Elem(), MulticastaddressMap{})
	pulumi.RegisterOutputType(MulticastaddressOutput{})
	pulumi.RegisterOutputType(MulticastaddressArrayOutput{})
	pulumi.RegisterOutputType(MulticastaddressMapOutput{})
}
