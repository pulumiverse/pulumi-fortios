// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Provides a resource to configure virtual IP groups of FortiOS.
//
// !> **Warning:** The resource will be deprecated and replaced by new resource `firewall.Vipgrp`, we recommend that you use the new resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewObjectVipgroup(ctx, "v11", &firewall.ObjectVipgroupArgs{
//				Comments:  pulumi.String("comments"),
//				Interface: pulumi.String("port3"),
//				Members: pulumi.StringArray{
//					pulumi.String("vip1"),
//					pulumi.String("vip3"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ObjectVipgroup struct {
	pulumi.CustomResourceState

	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Interface name.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Member VIP objects of the group.
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// VIP group name.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewObjectVipgroup registers a new resource with the given unique name, arguments, and options.
func NewObjectVipgroup(ctx *pulumi.Context,
	name string, args *ObjectVipgroupArgs, opts ...pulumi.ResourceOption) (*ObjectVipgroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ObjectVipgroup
	err := ctx.RegisterResource("fortios:firewall/objectVipgroup:ObjectVipgroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObjectVipgroup gets an existing ObjectVipgroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObjectVipgroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObjectVipgroupState, opts ...pulumi.ResourceOption) (*ObjectVipgroup, error) {
	var resource ObjectVipgroup
	err := ctx.ReadResource("fortios:firewall/objectVipgroup:ObjectVipgroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObjectVipgroup resources.
type objectVipgroupState struct {
	// Comment.
	Comments *string `pulumi:"comments"`
	// Interface name.
	Interface *string `pulumi:"interface"`
	// Member VIP objects of the group.
	Members []string `pulumi:"members"`
	// VIP group name.
	Name *string `pulumi:"name"`
}

type ObjectVipgroupState struct {
	// Comment.
	Comments pulumi.StringPtrInput
	// Interface name.
	Interface pulumi.StringPtrInput
	// Member VIP objects of the group.
	Members pulumi.StringArrayInput
	// VIP group name.
	Name pulumi.StringPtrInput
}

func (ObjectVipgroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*objectVipgroupState)(nil)).Elem()
}

type objectVipgroupArgs struct {
	// Comment.
	Comments *string `pulumi:"comments"`
	// Interface name.
	Interface *string `pulumi:"interface"`
	// Member VIP objects of the group.
	Members []string `pulumi:"members"`
	// VIP group name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ObjectVipgroup resource.
type ObjectVipgroupArgs struct {
	// Comment.
	Comments pulumi.StringPtrInput
	// Interface name.
	Interface pulumi.StringPtrInput
	// Member VIP objects of the group.
	Members pulumi.StringArrayInput
	// VIP group name.
	Name pulumi.StringPtrInput
}

func (ObjectVipgroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*objectVipgroupArgs)(nil)).Elem()
}

type ObjectVipgroupInput interface {
	pulumi.Input

	ToObjectVipgroupOutput() ObjectVipgroupOutput
	ToObjectVipgroupOutputWithContext(ctx context.Context) ObjectVipgroupOutput
}

func (*ObjectVipgroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectVipgroup)(nil)).Elem()
}

func (i *ObjectVipgroup) ToObjectVipgroupOutput() ObjectVipgroupOutput {
	return i.ToObjectVipgroupOutputWithContext(context.Background())
}

func (i *ObjectVipgroup) ToObjectVipgroupOutputWithContext(ctx context.Context) ObjectVipgroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectVipgroupOutput)
}

// ObjectVipgroupArrayInput is an input type that accepts ObjectVipgroupArray and ObjectVipgroupArrayOutput values.
// You can construct a concrete instance of `ObjectVipgroupArrayInput` via:
//
//	ObjectVipgroupArray{ ObjectVipgroupArgs{...} }
type ObjectVipgroupArrayInput interface {
	pulumi.Input

	ToObjectVipgroupArrayOutput() ObjectVipgroupArrayOutput
	ToObjectVipgroupArrayOutputWithContext(context.Context) ObjectVipgroupArrayOutput
}

type ObjectVipgroupArray []ObjectVipgroupInput

func (ObjectVipgroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectVipgroup)(nil)).Elem()
}

func (i ObjectVipgroupArray) ToObjectVipgroupArrayOutput() ObjectVipgroupArrayOutput {
	return i.ToObjectVipgroupArrayOutputWithContext(context.Background())
}

func (i ObjectVipgroupArray) ToObjectVipgroupArrayOutputWithContext(ctx context.Context) ObjectVipgroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectVipgroupArrayOutput)
}

// ObjectVipgroupMapInput is an input type that accepts ObjectVipgroupMap and ObjectVipgroupMapOutput values.
// You can construct a concrete instance of `ObjectVipgroupMapInput` via:
//
//	ObjectVipgroupMap{ "key": ObjectVipgroupArgs{...} }
type ObjectVipgroupMapInput interface {
	pulumi.Input

	ToObjectVipgroupMapOutput() ObjectVipgroupMapOutput
	ToObjectVipgroupMapOutputWithContext(context.Context) ObjectVipgroupMapOutput
}

type ObjectVipgroupMap map[string]ObjectVipgroupInput

func (ObjectVipgroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectVipgroup)(nil)).Elem()
}

func (i ObjectVipgroupMap) ToObjectVipgroupMapOutput() ObjectVipgroupMapOutput {
	return i.ToObjectVipgroupMapOutputWithContext(context.Background())
}

func (i ObjectVipgroupMap) ToObjectVipgroupMapOutputWithContext(ctx context.Context) ObjectVipgroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectVipgroupMapOutput)
}

type ObjectVipgroupOutput struct{ *pulumi.OutputState }

func (ObjectVipgroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectVipgroup)(nil)).Elem()
}

func (o ObjectVipgroupOutput) ToObjectVipgroupOutput() ObjectVipgroupOutput {
	return o
}

func (o ObjectVipgroupOutput) ToObjectVipgroupOutputWithContext(ctx context.Context) ObjectVipgroupOutput {
	return o
}

// Comment.
func (o ObjectVipgroupOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectVipgroup) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Interface name.
func (o ObjectVipgroupOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectVipgroup) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Member VIP objects of the group.
func (o ObjectVipgroupOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ObjectVipgroup) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// VIP group name.
func (o ObjectVipgroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectVipgroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type ObjectVipgroupArrayOutput struct{ *pulumi.OutputState }

func (ObjectVipgroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectVipgroup)(nil)).Elem()
}

func (o ObjectVipgroupArrayOutput) ToObjectVipgroupArrayOutput() ObjectVipgroupArrayOutput {
	return o
}

func (o ObjectVipgroupArrayOutput) ToObjectVipgroupArrayOutputWithContext(ctx context.Context) ObjectVipgroupArrayOutput {
	return o
}

func (o ObjectVipgroupArrayOutput) Index(i pulumi.IntInput) ObjectVipgroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObjectVipgroup {
		return vs[0].([]*ObjectVipgroup)[vs[1].(int)]
	}).(ObjectVipgroupOutput)
}

type ObjectVipgroupMapOutput struct{ *pulumi.OutputState }

func (ObjectVipgroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectVipgroup)(nil)).Elem()
}

func (o ObjectVipgroupMapOutput) ToObjectVipgroupMapOutput() ObjectVipgroupMapOutput {
	return o
}

func (o ObjectVipgroupMapOutput) ToObjectVipgroupMapOutputWithContext(ctx context.Context) ObjectVipgroupMapOutput {
	return o
}

func (o ObjectVipgroupMapOutput) MapIndex(k pulumi.StringInput) ObjectVipgroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObjectVipgroup {
		return vs[0].(map[string]*ObjectVipgroup)[vs[1].(string)]
	}).(ObjectVipgroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectVipgroupInput)(nil)).Elem(), &ObjectVipgroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectVipgroupArrayInput)(nil)).Elem(), ObjectVipgroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectVipgroupMapInput)(nil)).Elem(), ObjectVipgroupMap{})
	pulumi.RegisterOutputType(ObjectVipgroupOutput{})
	pulumi.RegisterOutputType(ObjectVipgroupArrayOutput{})
	pulumi.RegisterOutputType(ObjectVipgroupMapOutput{})
}
