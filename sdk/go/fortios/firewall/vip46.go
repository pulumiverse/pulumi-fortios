// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure IPv4 to IPv6 virtual IPs. Applies to FortiOS Version `<= 7.0.0`.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewVip46(ctx, "trname", &firewall.Vip46Args{
//				ArpReply:    pulumi.String("enable"),
//				Color:       pulumi.Int(0),
//				Extip:       pulumi.String("10.202.1.200"),
//				Extport:     pulumi.String("0-65535"),
//				Fosid:       pulumi.Int(0),
//				LdbMethod:   pulumi.String("static"),
//				Mappedip:    pulumi.String("2001:1:1:2::200"),
//				Mappedport:  pulumi.String("0-65535"),
//				Portforward: pulumi.String("disable"),
//				Protocol:    pulumi.String("tcp"),
//				Type:        pulumi.String("static-nat"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Firewall Vip46 can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/vip46:Vip46 labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/vip46:Vip46 labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Vip46 struct {
	pulumi.CustomResourceState

	// Enable ARP reply. Valid values: `disable`, `enable`.
	ArpReply pulumi.StringOutput `pulumi:"arpReply"`
	// Color of icon on the GUI.
	Color pulumi.IntOutput `pulumi:"color"`
	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Start-external-IP [-end-external-IP].
	Extip pulumi.StringOutput `pulumi:"extip"`
	// External service port.
	Extport pulumi.StringOutput `pulumi:"extport"`
	// Custom defined id.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Load balance method. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`.
	LdbMethod pulumi.StringOutput `pulumi:"ldbMethod"`
	// Start-mapped-IP [-end mapped-IP].
	Mappedip pulumi.StringOutput `pulumi:"mappedip"`
	// Mapped service port.
	Mappedport pulumi.StringOutput `pulumi:"mappedport"`
	// Health monitors. The structure of `monitor` block is documented below.
	Monitors Vip46MonitorArrayOutput `pulumi:"monitors"`
	// VIP46 name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable port forwarding. Valid values: `disable`, `enable`.
	Portforward pulumi.StringOutput `pulumi:"portforward"`
	// Mapped port protocol. Valid values: `tcp`, `udp`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Real servers. The structure of `realservers` block is documented below.
	Realservers Vip46RealserverArrayOutput `pulumi:"realservers"`
	// Server type. Valid values: `http`, `tcp`, `udp`, `ip`.
	ServerType pulumi.StringOutput `pulumi:"serverType"`
	// Source IP filter (x.x.x.x/x). The structure of `srcFilter` block is documented below.
	SrcFilters Vip46SrcFilterArrayOutput `pulumi:"srcFilters"`
	// Interfaces to which the VIP46 applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
	SrcintfFilters Vip46SrcintfFilterArrayOutput `pulumi:"srcintfFilters"`
	// VIP type: static NAT or server load balance. Valid values: `static-nat`, `server-load-balance`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVip46 registers a new resource with the given unique name, arguments, and options.
func NewVip46(ctx *pulumi.Context,
	name string, args *Vip46Args, opts ...pulumi.ResourceOption) (*Vip46, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Extip == nil {
		return nil, errors.New("invalid value for required argument 'Extip'")
	}
	if args.Mappedip == nil {
		return nil, errors.New("invalid value for required argument 'Mappedip'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vip46
	err := ctx.RegisterResource("fortios:firewall/vip46:Vip46", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVip46 gets an existing Vip46 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVip46(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Vip46State, opts ...pulumi.ResourceOption) (*Vip46, error) {
	var resource Vip46
	err := ctx.ReadResource("fortios:firewall/vip46:Vip46", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vip46 resources.
type vip46State struct {
	// Enable ARP reply. Valid values: `disable`, `enable`.
	ArpReply *string `pulumi:"arpReply"`
	// Color of icon on the GUI.
	Color *int `pulumi:"color"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Start-external-IP [-end-external-IP].
	Extip *string `pulumi:"extip"`
	// External service port.
	Extport *string `pulumi:"extport"`
	// Custom defined id.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Load balance method. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`.
	LdbMethod *string `pulumi:"ldbMethod"`
	// Start-mapped-IP [-end mapped-IP].
	Mappedip *string `pulumi:"mappedip"`
	// Mapped service port.
	Mappedport *string `pulumi:"mappedport"`
	// Health monitors. The structure of `monitor` block is documented below.
	Monitors []Vip46Monitor `pulumi:"monitors"`
	// VIP46 name.
	Name *string `pulumi:"name"`
	// Enable port forwarding. Valid values: `disable`, `enable`.
	Portforward *string `pulumi:"portforward"`
	// Mapped port protocol. Valid values: `tcp`, `udp`.
	Protocol *string `pulumi:"protocol"`
	// Real servers. The structure of `realservers` block is documented below.
	Realservers []Vip46Realserver `pulumi:"realservers"`
	// Server type. Valid values: `http`, `tcp`, `udp`, `ip`.
	ServerType *string `pulumi:"serverType"`
	// Source IP filter (x.x.x.x/x). The structure of `srcFilter` block is documented below.
	SrcFilters []Vip46SrcFilter `pulumi:"srcFilters"`
	// Interfaces to which the VIP46 applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
	SrcintfFilters []Vip46SrcintfFilter `pulumi:"srcintfFilters"`
	// VIP type: static NAT or server load balance. Valid values: `static-nat`, `server-load-balance`.
	Type *string `pulumi:"type"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type Vip46State struct {
	// Enable ARP reply. Valid values: `disable`, `enable`.
	ArpReply pulumi.StringPtrInput
	// Color of icon on the GUI.
	Color pulumi.IntPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Start-external-IP [-end-external-IP].
	Extip pulumi.StringPtrInput
	// External service port.
	Extport pulumi.StringPtrInput
	// Custom defined id.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Load balance method. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`.
	LdbMethod pulumi.StringPtrInput
	// Start-mapped-IP [-end mapped-IP].
	Mappedip pulumi.StringPtrInput
	// Mapped service port.
	Mappedport pulumi.StringPtrInput
	// Health monitors. The structure of `monitor` block is documented below.
	Monitors Vip46MonitorArrayInput
	// VIP46 name.
	Name pulumi.StringPtrInput
	// Enable port forwarding. Valid values: `disable`, `enable`.
	Portforward pulumi.StringPtrInput
	// Mapped port protocol. Valid values: `tcp`, `udp`.
	Protocol pulumi.StringPtrInput
	// Real servers. The structure of `realservers` block is documented below.
	Realservers Vip46RealserverArrayInput
	// Server type. Valid values: `http`, `tcp`, `udp`, `ip`.
	ServerType pulumi.StringPtrInput
	// Source IP filter (x.x.x.x/x). The structure of `srcFilter` block is documented below.
	SrcFilters Vip46SrcFilterArrayInput
	// Interfaces to which the VIP46 applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
	SrcintfFilters Vip46SrcintfFilterArrayInput
	// VIP type: static NAT or server load balance. Valid values: `static-nat`, `server-load-balance`.
	Type pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Vip46State) ElementType() reflect.Type {
	return reflect.TypeOf((*vip46State)(nil)).Elem()
}

type vip46Args struct {
	// Enable ARP reply. Valid values: `disable`, `enable`.
	ArpReply *string `pulumi:"arpReply"`
	// Color of icon on the GUI.
	Color *int `pulumi:"color"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Start-external-IP [-end-external-IP].
	Extip string `pulumi:"extip"`
	// External service port.
	Extport *string `pulumi:"extport"`
	// Custom defined id.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Load balance method. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`.
	LdbMethod *string `pulumi:"ldbMethod"`
	// Start-mapped-IP [-end mapped-IP].
	Mappedip string `pulumi:"mappedip"`
	// Mapped service port.
	Mappedport *string `pulumi:"mappedport"`
	// Health monitors. The structure of `monitor` block is documented below.
	Monitors []Vip46Monitor `pulumi:"monitors"`
	// VIP46 name.
	Name *string `pulumi:"name"`
	// Enable port forwarding. Valid values: `disable`, `enable`.
	Portforward *string `pulumi:"portforward"`
	// Mapped port protocol. Valid values: `tcp`, `udp`.
	Protocol *string `pulumi:"protocol"`
	// Real servers. The structure of `realservers` block is documented below.
	Realservers []Vip46Realserver `pulumi:"realservers"`
	// Server type. Valid values: `http`, `tcp`, `udp`, `ip`.
	ServerType *string `pulumi:"serverType"`
	// Source IP filter (x.x.x.x/x). The structure of `srcFilter` block is documented below.
	SrcFilters []Vip46SrcFilter `pulumi:"srcFilters"`
	// Interfaces to which the VIP46 applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
	SrcintfFilters []Vip46SrcintfFilter `pulumi:"srcintfFilters"`
	// VIP type: static NAT or server load balance. Valid values: `static-nat`, `server-load-balance`.
	Type *string `pulumi:"type"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Vip46 resource.
type Vip46Args struct {
	// Enable ARP reply. Valid values: `disable`, `enable`.
	ArpReply pulumi.StringPtrInput
	// Color of icon on the GUI.
	Color pulumi.IntPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Start-external-IP [-end-external-IP].
	Extip pulumi.StringInput
	// External service port.
	Extport pulumi.StringPtrInput
	// Custom defined id.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Load balance method. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`.
	LdbMethod pulumi.StringPtrInput
	// Start-mapped-IP [-end mapped-IP].
	Mappedip pulumi.StringInput
	// Mapped service port.
	Mappedport pulumi.StringPtrInput
	// Health monitors. The structure of `monitor` block is documented below.
	Monitors Vip46MonitorArrayInput
	// VIP46 name.
	Name pulumi.StringPtrInput
	// Enable port forwarding. Valid values: `disable`, `enable`.
	Portforward pulumi.StringPtrInput
	// Mapped port protocol. Valid values: `tcp`, `udp`.
	Protocol pulumi.StringPtrInput
	// Real servers. The structure of `realservers` block is documented below.
	Realservers Vip46RealserverArrayInput
	// Server type. Valid values: `http`, `tcp`, `udp`, `ip`.
	ServerType pulumi.StringPtrInput
	// Source IP filter (x.x.x.x/x). The structure of `srcFilter` block is documented below.
	SrcFilters Vip46SrcFilterArrayInput
	// Interfaces to which the VIP46 applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
	SrcintfFilters Vip46SrcintfFilterArrayInput
	// VIP type: static NAT or server load balance. Valid values: `static-nat`, `server-load-balance`.
	Type pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Vip46Args) ElementType() reflect.Type {
	return reflect.TypeOf((*vip46Args)(nil)).Elem()
}

type Vip46Input interface {
	pulumi.Input

	ToVip46Output() Vip46Output
	ToVip46OutputWithContext(ctx context.Context) Vip46Output
}

func (*Vip46) ElementType() reflect.Type {
	return reflect.TypeOf((**Vip46)(nil)).Elem()
}

func (i *Vip46) ToVip46Output() Vip46Output {
	return i.ToVip46OutputWithContext(context.Background())
}

func (i *Vip46) ToVip46OutputWithContext(ctx context.Context) Vip46Output {
	return pulumi.ToOutputWithContext(ctx, i).(Vip46Output)
}

// Vip46ArrayInput is an input type that accepts Vip46Array and Vip46ArrayOutput values.
// You can construct a concrete instance of `Vip46ArrayInput` via:
//
//	Vip46Array{ Vip46Args{...} }
type Vip46ArrayInput interface {
	pulumi.Input

	ToVip46ArrayOutput() Vip46ArrayOutput
	ToVip46ArrayOutputWithContext(context.Context) Vip46ArrayOutput
}

type Vip46Array []Vip46Input

func (Vip46Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vip46)(nil)).Elem()
}

func (i Vip46Array) ToVip46ArrayOutput() Vip46ArrayOutput {
	return i.ToVip46ArrayOutputWithContext(context.Background())
}

func (i Vip46Array) ToVip46ArrayOutputWithContext(ctx context.Context) Vip46ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vip46ArrayOutput)
}

// Vip46MapInput is an input type that accepts Vip46Map and Vip46MapOutput values.
// You can construct a concrete instance of `Vip46MapInput` via:
//
//	Vip46Map{ "key": Vip46Args{...} }
type Vip46MapInput interface {
	pulumi.Input

	ToVip46MapOutput() Vip46MapOutput
	ToVip46MapOutputWithContext(context.Context) Vip46MapOutput
}

type Vip46Map map[string]Vip46Input

func (Vip46Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vip46)(nil)).Elem()
}

func (i Vip46Map) ToVip46MapOutput() Vip46MapOutput {
	return i.ToVip46MapOutputWithContext(context.Background())
}

func (i Vip46Map) ToVip46MapOutputWithContext(ctx context.Context) Vip46MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vip46MapOutput)
}

type Vip46Output struct{ *pulumi.OutputState }

func (Vip46Output) ElementType() reflect.Type {
	return reflect.TypeOf((**Vip46)(nil)).Elem()
}

func (o Vip46Output) ToVip46Output() Vip46Output {
	return o
}

func (o Vip46Output) ToVip46OutputWithContext(ctx context.Context) Vip46Output {
	return o
}

// Enable ARP reply. Valid values: `disable`, `enable`.
func (o Vip46Output) ArpReply() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip46) pulumi.StringOutput { return v.ArpReply }).(pulumi.StringOutput)
}

// Color of icon on the GUI.
func (o Vip46Output) Color() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip46) pulumi.IntOutput { return v.Color }).(pulumi.IntOutput)
}

// Comment.
func (o Vip46Output) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vip46) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o Vip46Output) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vip46) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Start-external-IP [-end-external-IP].
func (o Vip46Output) Extip() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip46) pulumi.StringOutput { return v.Extip }).(pulumi.StringOutput)
}

// External service port.
func (o Vip46Output) Extport() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip46) pulumi.StringOutput { return v.Extport }).(pulumi.StringOutput)
}

// Custom defined id.
func (o Vip46Output) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip46) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o Vip46Output) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vip46) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Load balance method. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`.
func (o Vip46Output) LdbMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip46) pulumi.StringOutput { return v.LdbMethod }).(pulumi.StringOutput)
}

// Start-mapped-IP [-end mapped-IP].
func (o Vip46Output) Mappedip() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip46) pulumi.StringOutput { return v.Mappedip }).(pulumi.StringOutput)
}

// Mapped service port.
func (o Vip46Output) Mappedport() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip46) pulumi.StringOutput { return v.Mappedport }).(pulumi.StringOutput)
}

// Health monitors. The structure of `monitor` block is documented below.
func (o Vip46Output) Monitors() Vip46MonitorArrayOutput {
	return o.ApplyT(func(v *Vip46) Vip46MonitorArrayOutput { return v.Monitors }).(Vip46MonitorArrayOutput)
}

// VIP46 name.
func (o Vip46Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip46) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable port forwarding. Valid values: `disable`, `enable`.
func (o Vip46Output) Portforward() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip46) pulumi.StringOutput { return v.Portforward }).(pulumi.StringOutput)
}

// Mapped port protocol. Valid values: `tcp`, `udp`.
func (o Vip46Output) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip46) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Real servers. The structure of `realservers` block is documented below.
func (o Vip46Output) Realservers() Vip46RealserverArrayOutput {
	return o.ApplyT(func(v *Vip46) Vip46RealserverArrayOutput { return v.Realservers }).(Vip46RealserverArrayOutput)
}

// Server type. Valid values: `http`, `tcp`, `udp`, `ip`.
func (o Vip46Output) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip46) pulumi.StringOutput { return v.ServerType }).(pulumi.StringOutput)
}

// Source IP filter (x.x.x.x/x). The structure of `srcFilter` block is documented below.
func (o Vip46Output) SrcFilters() Vip46SrcFilterArrayOutput {
	return o.ApplyT(func(v *Vip46) Vip46SrcFilterArrayOutput { return v.SrcFilters }).(Vip46SrcFilterArrayOutput)
}

// Interfaces to which the VIP46 applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
func (o Vip46Output) SrcintfFilters() Vip46SrcintfFilterArrayOutput {
	return o.ApplyT(func(v *Vip46) Vip46SrcintfFilterArrayOutput { return v.SrcintfFilters }).(Vip46SrcintfFilterArrayOutput)
}

// VIP type: static NAT or server load balance. Valid values: `static-nat`, `server-load-balance`.
func (o Vip46Output) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip46) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o Vip46Output) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip46) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o Vip46Output) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vip46) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type Vip46ArrayOutput struct{ *pulumi.OutputState }

func (Vip46ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vip46)(nil)).Elem()
}

func (o Vip46ArrayOutput) ToVip46ArrayOutput() Vip46ArrayOutput {
	return o
}

func (o Vip46ArrayOutput) ToVip46ArrayOutputWithContext(ctx context.Context) Vip46ArrayOutput {
	return o
}

func (o Vip46ArrayOutput) Index(i pulumi.IntInput) Vip46Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vip46 {
		return vs[0].([]*Vip46)[vs[1].(int)]
	}).(Vip46Output)
}

type Vip46MapOutput struct{ *pulumi.OutputState }

func (Vip46MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vip46)(nil)).Elem()
}

func (o Vip46MapOutput) ToVip46MapOutput() Vip46MapOutput {
	return o
}

func (o Vip46MapOutput) ToVip46MapOutputWithContext(ctx context.Context) Vip46MapOutput {
	return o
}

func (o Vip46MapOutput) MapIndex(k pulumi.StringInput) Vip46Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vip46 {
		return vs[0].(map[string]*Vip46)[vs[1].(string)]
	}).(Vip46Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Vip46Input)(nil)).Elem(), &Vip46{})
	pulumi.RegisterInputType(reflect.TypeOf((*Vip46ArrayInput)(nil)).Elem(), Vip46Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*Vip46MapInput)(nil)).Elem(), Vip46Map{})
	pulumi.RegisterOutputType(Vip46Output{})
	pulumi.RegisterOutputType(Vip46ArrayOutput{})
	pulumi.RegisterOutputType(Vip46MapOutput{})
}
