// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure IPv6 to IPv4 policies. Applies to FortiOS Version `<= 7.0.0`.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewPolicy64(ctx, "trname", &firewall.Policy64Args{
//				Action: pulumi.String("accept"),
//				Dstaddrs: firewall.Policy64DstaddrArray{
//					&firewall.Policy64DstaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Dstintf:       pulumi.String("port4"),
//				Fixedport:     pulumi.String("disable"),
//				Ippool:        pulumi.String("disable"),
//				Logtraffic:    pulumi.String("disable"),
//				PermitAnyHost: pulumi.String("disable"),
//				Policyid:      pulumi.Int(1),
//				Schedule:      pulumi.String("always"),
//				Services: firewall.Policy64ServiceArray{
//					&firewall.Policy64ServiceArgs{
//						Name: pulumi.String("ALL"),
//					},
//				},
//				Srcaddrs: firewall.Policy64SrcaddrArray{
//					&firewall.Policy64SrcaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Srcintf:        pulumi.String("port3"),
//				Status:         pulumi.String("enable"),
//				TcpMssReceiver: pulumi.Int(0),
//				TcpMssSender:   pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Firewall Policy64 can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/policy64:Policy64 labelname {{policyid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/policy64:Policy64 labelname {{policyid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Policy64 struct {
	pulumi.CustomResourceState

	// Policy action. Valid values: `accept`, `deny`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs Policy64DstaddrArrayOutput `pulumi:"dstaddrs"`
	// Destination interface name.
	Dstintf pulumi.StringOutput `pulumi:"dstintf"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Enable/disable policy fixed port. Valid values: `enable`, `disable`.
	Fixedport pulumi.StringOutput `pulumi:"fixedport"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Enable/disable policy64 IP pool. Valid values: `enable`, `disable`.
	Ippool pulumi.StringOutput `pulumi:"ippool"`
	// Enable/disable policy log traffic. Valid values: `enable`, `disable`.
	Logtraffic pulumi.StringOutput `pulumi:"logtraffic"`
	// Record logs when a session starts and ends. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringOutput `pulumi:"logtrafficStart"`
	// Policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Per-IP traffic shaper.
	PerIpShaper pulumi.StringOutput `pulumi:"perIpShaper"`
	// Enable/disable permit any host in. Valid values: `enable`, `disable`.
	PermitAnyHost pulumi.StringOutput `pulumi:"permitAnyHost"`
	// Policy ID.
	Policyid pulumi.IntOutput `pulumi:"policyid"`
	// Policy IP pool names. The structure of `poolname` block is documented below.
	Poolnames Policy64PoolnameArrayOutput `pulumi:"poolnames"`
	// Schedule name.
	Schedule pulumi.StringOutput `pulumi:"schedule"`
	// Service name. The structure of `service` block is documented below.
	Services Policy64ServiceArrayOutput `pulumi:"services"`
	// Source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs Policy64SrcaddrArrayOutput `pulumi:"srcaddrs"`
	// Source interface name.
	Srcintf pulumi.StringOutput `pulumi:"srcintf"`
	// Enable/disable policy status. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// TCP MSS value of receiver.
	TcpMssReceiver pulumi.IntOutput `pulumi:"tcpMssReceiver"`
	// TCP MSS value of sender.
	TcpMssSender pulumi.IntOutput `pulumi:"tcpMssSender"`
	// Traffic shaper.
	TrafficShaper pulumi.StringOutput `pulumi:"trafficShaper"`
	// Reverse traffic shaper.
	TrafficShaperReverse pulumi.StringOutput `pulumi:"trafficShaperReverse"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewPolicy64 registers a new resource with the given unique name, arguments, and options.
func NewPolicy64(ctx *pulumi.Context,
	name string, args *Policy64Args, opts ...pulumi.ResourceOption) (*Policy64, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dstaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Dstaddrs'")
	}
	if args.Dstintf == nil {
		return nil, errors.New("invalid value for required argument 'Dstintf'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	if args.Srcaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Srcaddrs'")
	}
	if args.Srcintf == nil {
		return nil, errors.New("invalid value for required argument 'Srcintf'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Policy64
	err := ctx.RegisterResource("fortios:firewall/policy64:Policy64", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy64 gets an existing Policy64 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy64(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Policy64State, opts ...pulumi.ResourceOption) (*Policy64, error) {
	var resource Policy64
	err := ctx.ReadResource("fortios:firewall/policy64:Policy64", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy64 resources.
type policy64State struct {
	// Policy action. Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs []Policy64Dstaddr `pulumi:"dstaddrs"`
	// Destination interface name.
	Dstintf *string `pulumi:"dstintf"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable policy fixed port. Valid values: `enable`, `disable`.
	Fixedport *string `pulumi:"fixedport"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable policy64 IP pool. Valid values: `enable`, `disable`.
	Ippool *string `pulumi:"ippool"`
	// Enable/disable policy log traffic. Valid values: `enable`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts and ends. Valid values: `enable`, `disable`.
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Per-IP traffic shaper.
	PerIpShaper *string `pulumi:"perIpShaper"`
	// Enable/disable permit any host in. Valid values: `enable`, `disable`.
	PermitAnyHost *string `pulumi:"permitAnyHost"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// Policy IP pool names. The structure of `poolname` block is documented below.
	Poolnames []Policy64Poolname `pulumi:"poolnames"`
	// Schedule name.
	Schedule *string `pulumi:"schedule"`
	// Service name. The structure of `service` block is documented below.
	Services []Policy64Service `pulumi:"services"`
	// Source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs []Policy64Srcaddr `pulumi:"srcaddrs"`
	// Source interface name.
	Srcintf *string `pulumi:"srcintf"`
	// Enable/disable policy status. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// TCP MSS value of receiver.
	TcpMssReceiver *int `pulumi:"tcpMssReceiver"`
	// TCP MSS value of sender.
	TcpMssSender *int `pulumi:"tcpMssSender"`
	// Traffic shaper.
	TrafficShaper *string `pulumi:"trafficShaper"`
	// Reverse traffic shaper.
	TrafficShaperReverse *string `pulumi:"trafficShaperReverse"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type Policy64State struct {
	// Policy action. Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs Policy64DstaddrArrayInput
	// Destination interface name.
	Dstintf pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable policy fixed port. Valid values: `enable`, `disable`.
	Fixedport pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable policy64 IP pool. Valid values: `enable`, `disable`.
	Ippool pulumi.StringPtrInput
	// Enable/disable policy log traffic. Valid values: `enable`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts and ends. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Per-IP traffic shaper.
	PerIpShaper pulumi.StringPtrInput
	// Enable/disable permit any host in. Valid values: `enable`, `disable`.
	PermitAnyHost pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// Policy IP pool names. The structure of `poolname` block is documented below.
	Poolnames Policy64PoolnameArrayInput
	// Schedule name.
	Schedule pulumi.StringPtrInput
	// Service name. The structure of `service` block is documented below.
	Services Policy64ServiceArrayInput
	// Source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs Policy64SrcaddrArrayInput
	// Source interface name.
	Srcintf pulumi.StringPtrInput
	// Enable/disable policy status. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// TCP MSS value of receiver.
	TcpMssReceiver pulumi.IntPtrInput
	// TCP MSS value of sender.
	TcpMssSender pulumi.IntPtrInput
	// Traffic shaper.
	TrafficShaper pulumi.StringPtrInput
	// Reverse traffic shaper.
	TrafficShaperReverse pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Policy64State) ElementType() reflect.Type {
	return reflect.TypeOf((*policy64State)(nil)).Elem()
}

type policy64Args struct {
	// Policy action. Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs []Policy64Dstaddr `pulumi:"dstaddrs"`
	// Destination interface name.
	Dstintf string `pulumi:"dstintf"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable policy fixed port. Valid values: `enable`, `disable`.
	Fixedport *string `pulumi:"fixedport"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable policy64 IP pool. Valid values: `enable`, `disable`.
	Ippool *string `pulumi:"ippool"`
	// Enable/disable policy log traffic. Valid values: `enable`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts and ends. Valid values: `enable`, `disable`.
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Per-IP traffic shaper.
	PerIpShaper *string `pulumi:"perIpShaper"`
	// Enable/disable permit any host in. Valid values: `enable`, `disable`.
	PermitAnyHost *string `pulumi:"permitAnyHost"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// Policy IP pool names. The structure of `poolname` block is documented below.
	Poolnames []Policy64Poolname `pulumi:"poolnames"`
	// Schedule name.
	Schedule string `pulumi:"schedule"`
	// Service name. The structure of `service` block is documented below.
	Services []Policy64Service `pulumi:"services"`
	// Source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs []Policy64Srcaddr `pulumi:"srcaddrs"`
	// Source interface name.
	Srcintf string `pulumi:"srcintf"`
	// Enable/disable policy status. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// TCP MSS value of receiver.
	TcpMssReceiver *int `pulumi:"tcpMssReceiver"`
	// TCP MSS value of sender.
	TcpMssSender *int `pulumi:"tcpMssSender"`
	// Traffic shaper.
	TrafficShaper *string `pulumi:"trafficShaper"`
	// Reverse traffic shaper.
	TrafficShaperReverse *string `pulumi:"trafficShaperReverse"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Policy64 resource.
type Policy64Args struct {
	// Policy action. Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs Policy64DstaddrArrayInput
	// Destination interface name.
	Dstintf pulumi.StringInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable policy fixed port. Valid values: `enable`, `disable`.
	Fixedport pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable policy64 IP pool. Valid values: `enable`, `disable`.
	Ippool pulumi.StringPtrInput
	// Enable/disable policy log traffic. Valid values: `enable`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts and ends. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Per-IP traffic shaper.
	PerIpShaper pulumi.StringPtrInput
	// Enable/disable permit any host in. Valid values: `enable`, `disable`.
	PermitAnyHost pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// Policy IP pool names. The structure of `poolname` block is documented below.
	Poolnames Policy64PoolnameArrayInput
	// Schedule name.
	Schedule pulumi.StringInput
	// Service name. The structure of `service` block is documented below.
	Services Policy64ServiceArrayInput
	// Source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs Policy64SrcaddrArrayInput
	// Source interface name.
	Srcintf pulumi.StringInput
	// Enable/disable policy status. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// TCP MSS value of receiver.
	TcpMssReceiver pulumi.IntPtrInput
	// TCP MSS value of sender.
	TcpMssSender pulumi.IntPtrInput
	// Traffic shaper.
	TrafficShaper pulumi.StringPtrInput
	// Reverse traffic shaper.
	TrafficShaperReverse pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Policy64Args) ElementType() reflect.Type {
	return reflect.TypeOf((*policy64Args)(nil)).Elem()
}

type Policy64Input interface {
	pulumi.Input

	ToPolicy64Output() Policy64Output
	ToPolicy64OutputWithContext(ctx context.Context) Policy64Output
}

func (*Policy64) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy64)(nil)).Elem()
}

func (i *Policy64) ToPolicy64Output() Policy64Output {
	return i.ToPolicy64OutputWithContext(context.Background())
}

func (i *Policy64) ToPolicy64OutputWithContext(ctx context.Context) Policy64Output {
	return pulumi.ToOutputWithContext(ctx, i).(Policy64Output)
}

// Policy64ArrayInput is an input type that accepts Policy64Array and Policy64ArrayOutput values.
// You can construct a concrete instance of `Policy64ArrayInput` via:
//
//	Policy64Array{ Policy64Args{...} }
type Policy64ArrayInput interface {
	pulumi.Input

	ToPolicy64ArrayOutput() Policy64ArrayOutput
	ToPolicy64ArrayOutputWithContext(context.Context) Policy64ArrayOutput
}

type Policy64Array []Policy64Input

func (Policy64Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy64)(nil)).Elem()
}

func (i Policy64Array) ToPolicy64ArrayOutput() Policy64ArrayOutput {
	return i.ToPolicy64ArrayOutputWithContext(context.Background())
}

func (i Policy64Array) ToPolicy64ArrayOutputWithContext(ctx context.Context) Policy64ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Policy64ArrayOutput)
}

// Policy64MapInput is an input type that accepts Policy64Map and Policy64MapOutput values.
// You can construct a concrete instance of `Policy64MapInput` via:
//
//	Policy64Map{ "key": Policy64Args{...} }
type Policy64MapInput interface {
	pulumi.Input

	ToPolicy64MapOutput() Policy64MapOutput
	ToPolicy64MapOutputWithContext(context.Context) Policy64MapOutput
}

type Policy64Map map[string]Policy64Input

func (Policy64Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy64)(nil)).Elem()
}

func (i Policy64Map) ToPolicy64MapOutput() Policy64MapOutput {
	return i.ToPolicy64MapOutputWithContext(context.Background())
}

func (i Policy64Map) ToPolicy64MapOutputWithContext(ctx context.Context) Policy64MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Policy64MapOutput)
}

type Policy64Output struct{ *pulumi.OutputState }

func (Policy64Output) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy64)(nil)).Elem()
}

func (o Policy64Output) ToPolicy64Output() Policy64Output {
	return o
}

func (o Policy64Output) ToPolicy64OutputWithContext(ctx context.Context) Policy64Output {
	return o
}

// Policy action. Valid values: `accept`, `deny`.
func (o Policy64Output) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Comment.
func (o Policy64Output) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Destination address name. The structure of `dstaddr` block is documented below.
func (o Policy64Output) Dstaddrs() Policy64DstaddrArrayOutput {
	return o.ApplyT(func(v *Policy64) Policy64DstaddrArrayOutput { return v.Dstaddrs }).(Policy64DstaddrArrayOutput)
}

// Destination interface name.
func (o Policy64Output) Dstintf() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringOutput { return v.Dstintf }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o Policy64Output) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Enable/disable policy fixed port. Valid values: `enable`, `disable`.
func (o Policy64Output) Fixedport() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringOutput { return v.Fixedport }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o Policy64Output) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Enable/disable policy64 IP pool. Valid values: `enable`, `disable`.
func (o Policy64Output) Ippool() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringOutput { return v.Ippool }).(pulumi.StringOutput)
}

// Enable/disable policy log traffic. Valid values: `enable`, `disable`.
func (o Policy64Output) Logtraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringOutput { return v.Logtraffic }).(pulumi.StringOutput)
}

// Record logs when a session starts and ends. Valid values: `enable`, `disable`.
func (o Policy64Output) LogtrafficStart() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringOutput { return v.LogtrafficStart }).(pulumi.StringOutput)
}

// Policy name.
func (o Policy64Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Per-IP traffic shaper.
func (o Policy64Output) PerIpShaper() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringOutput { return v.PerIpShaper }).(pulumi.StringOutput)
}

// Enable/disable permit any host in. Valid values: `enable`, `disable`.
func (o Policy64Output) PermitAnyHost() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringOutput { return v.PermitAnyHost }).(pulumi.StringOutput)
}

// Policy ID.
func (o Policy64Output) Policyid() pulumi.IntOutput {
	return o.ApplyT(func(v *Policy64) pulumi.IntOutput { return v.Policyid }).(pulumi.IntOutput)
}

// Policy IP pool names. The structure of `poolname` block is documented below.
func (o Policy64Output) Poolnames() Policy64PoolnameArrayOutput {
	return o.ApplyT(func(v *Policy64) Policy64PoolnameArrayOutput { return v.Poolnames }).(Policy64PoolnameArrayOutput)
}

// Schedule name.
func (o Policy64Output) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringOutput { return v.Schedule }).(pulumi.StringOutput)
}

// Service name. The structure of `service` block is documented below.
func (o Policy64Output) Services() Policy64ServiceArrayOutput {
	return o.ApplyT(func(v *Policy64) Policy64ServiceArrayOutput { return v.Services }).(Policy64ServiceArrayOutput)
}

// Source address name. The structure of `srcaddr` block is documented below.
func (o Policy64Output) Srcaddrs() Policy64SrcaddrArrayOutput {
	return o.ApplyT(func(v *Policy64) Policy64SrcaddrArrayOutput { return v.Srcaddrs }).(Policy64SrcaddrArrayOutput)
}

// Source interface name.
func (o Policy64Output) Srcintf() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringOutput { return v.Srcintf }).(pulumi.StringOutput)
}

// Enable/disable policy status. Valid values: `enable`, `disable`.
func (o Policy64Output) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// TCP MSS value of receiver.
func (o Policy64Output) TcpMssReceiver() pulumi.IntOutput {
	return o.ApplyT(func(v *Policy64) pulumi.IntOutput { return v.TcpMssReceiver }).(pulumi.IntOutput)
}

// TCP MSS value of sender.
func (o Policy64Output) TcpMssSender() pulumi.IntOutput {
	return o.ApplyT(func(v *Policy64) pulumi.IntOutput { return v.TcpMssSender }).(pulumi.IntOutput)
}

// Traffic shaper.
func (o Policy64Output) TrafficShaper() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringOutput { return v.TrafficShaper }).(pulumi.StringOutput)
}

// Reverse traffic shaper.
func (o Policy64Output) TrafficShaperReverse() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringOutput { return v.TrafficShaperReverse }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o Policy64Output) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o Policy64Output) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy64) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type Policy64ArrayOutput struct{ *pulumi.OutputState }

func (Policy64ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy64)(nil)).Elem()
}

func (o Policy64ArrayOutput) ToPolicy64ArrayOutput() Policy64ArrayOutput {
	return o
}

func (o Policy64ArrayOutput) ToPolicy64ArrayOutputWithContext(ctx context.Context) Policy64ArrayOutput {
	return o
}

func (o Policy64ArrayOutput) Index(i pulumi.IntInput) Policy64Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Policy64 {
		return vs[0].([]*Policy64)[vs[1].(int)]
	}).(Policy64Output)
}

type Policy64MapOutput struct{ *pulumi.OutputState }

func (Policy64MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy64)(nil)).Elem()
}

func (o Policy64MapOutput) ToPolicy64MapOutput() Policy64MapOutput {
	return o
}

func (o Policy64MapOutput) ToPolicy64MapOutputWithContext(ctx context.Context) Policy64MapOutput {
	return o
}

func (o Policy64MapOutput) MapIndex(k pulumi.StringInput) Policy64Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Policy64 {
		return vs[0].(map[string]*Policy64)[vs[1].(string)]
	}).(Policy64Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Policy64Input)(nil)).Elem(), &Policy64{})
	pulumi.RegisterInputType(reflect.TypeOf((*Policy64ArrayInput)(nil)).Elem(), Policy64Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*Policy64MapInput)(nil)).Elem(), Policy64Map{})
	pulumi.RegisterOutputType(Policy64Output{})
	pulumi.RegisterOutputType(Policy64ArrayOutput{})
	pulumi.RegisterOutputType(Policy64MapOutput{})
}
