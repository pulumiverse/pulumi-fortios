// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Use this data source to get information on an fortios firewall policy
func LookupPolicy(ctx *pulumi.Context, args *LookupPolicyArgs, opts ...pulumi.InvokeOption) (*LookupPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPolicyResult
	err := ctx.Invoke("fortios:firewall/getPolicy:getPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPolicy.
type LookupPolicyArgs struct {
	// Specify the policyid of the desired firewall policy.
	Policyid int `pulumi:"policyid"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by getPolicy.
type LookupPolicyResult struct {
	// Policy action (allow/deny/ipsec).
	Action string `pulumi:"action"`
	// Enable/disable anti-replay check.
	AntiReplay string `pulumi:"antiReplay"`
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories []GetPolicyAppCategory `pulumi:"appCategories"`
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups []GetPolicyAppGroup `pulumi:"appGroups"`
	// Name of an existing Application list.
	ApplicationList string `pulumi:"applicationList"`
	// Application ID list. The structure of `application` block is documented below.
	Applications []GetPolicyApplication `pulumi:"applications"`
	// HTTPS server certificate for policy authentication.
	AuthCert string `pulumi:"authCert"`
	// Enable/disable authentication-based routing.
	AuthPath string `pulumi:"authPath"`
	// HTTP-to-HTTPS redirect address for firewall authentication.
	AuthRedirectAddr string `pulumi:"authRedirectAddr"`
	// Enable/disable policy traffic ASIC offloading.
	AutoAsicOffload string `pulumi:"autoAsicOffload"`
	// Name of an existing Antivirus profile.
	AvProfile string `pulumi:"avProfile"`
	// Enable/disable block notification.
	BlockNotification string `pulumi:"blockNotification"`
	// Enable to exempt some users from the captive portal.
	CaptivePortalExempt string `pulumi:"captivePortalExempt"`
	// Enable/disable capture packets.
	CapturePacket string `pulumi:"capturePacket"`
	// Name of an existing CASB profile.
	CasbProfile string `pulumi:"casbProfile"`
	// Name of an existing CIFS profile.
	CifsProfile string `pulumi:"cifsProfile"`
	// Comment.
	Comments string `pulumi:"comments"`
	// Custom fields to append to log messages for this policy. The structure of `customLogFields` block is documented below.
	CustomLogFields []GetPolicyCustomLogField `pulumi:"customLogFields"`
	// Decrypted traffic mirror.
	DecryptedTrafficMirror string `pulumi:"decryptedTrafficMirror"`
	// Enable TCP NPU session delay to guarantee packet order of 3-way handshake.
	DelayTcpNpuSession string `pulumi:"delayTcpNpuSession"`
	// Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
	Devices []GetPolicyDevice `pulumi:"devices"`
	// Name of an existing Diameter filter profile.
	DiameterFilterProfile string `pulumi:"diameterFilterProfile"`
	// Enable to copy packet's DiffServ values from session's original direction to its reply direction.
	DiffservCopy string `pulumi:"diffservCopy"`
	// Enable to change packet's DiffServ values to the specified diffservcode-forward value.
	DiffservForward string `pulumi:"diffservForward"`
	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.
	DiffservReverse string `pulumi:"diffservReverse"`
	// Change packet's DiffServ to this value.
	DiffservcodeForward string `pulumi:"diffservcodeForward"`
	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev string `pulumi:"diffservcodeRev"`
	// Enable/disable user authentication disclaimer.
	Disclaimer string `pulumi:"disclaimer"`
	// Name of an existing DLP profile.
	DlpProfile string `pulumi:"dlpProfile"`
	// Name of an existing DLP sensor.
	DlpSensor string `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile string `pulumi:"dnsfilterProfile"`
	// Enable DSRI to ignore HTTP server responses.
	Dsri string `pulumi:"dsri"`
	// When enabled dstaddr6 specifies what the destination address must NOT be.
	Dstaddr6Negate string `pulumi:"dstaddr6Negate"`
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s []GetPolicyDstaddr6 `pulumi:"dstaddr6s"`
	// When enabled dstaddr specifies what the destination address must NOT be.
	DstaddrNegate string `pulumi:"dstaddrNegate"`
	// Destination address and address group names. The structure of `dstaddr` block is documented below.
	Dstaddrs []GetPolicyDstaddr `pulumi:"dstaddrs"`
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs []GetPolicyDstintf `pulumi:"dstintfs"`
	// Enable/disable dynamic RADIUS defined traffic shaping.
	DynamicShaping string `pulumi:"dynamicShaping"`
	// Enable/disable email collection.
	EmailCollect string `pulumi:"emailCollect"`
	// Name of an existing email filter profile.
	EmailfilterProfile string `pulumi:"emailfilterProfile"`
	// Enable/disable Forward Error Correction on traffic matching this policy on a FEC device.
	Fec string `pulumi:"fec"`
	// Name of an existing file-filter profile.
	FileFilterProfile string `pulumi:"fileFilterProfile"`
	// How to handle sessions if the configuration of this firewall policy changes.
	FirewallSessionDirty string `pulumi:"firewallSessionDirty"`
	// Enable to prevent source NAT from changing a session's source port.
	Fixedport string `pulumi:"fixedport"`
	// Enable/disable Fortinet Single Sign-On.
	Fsso string `pulumi:"fsso"`
	// FSSO agent to use for NTLM authentication.
	FssoAgentForNtlm string `pulumi:"fssoAgentForNtlm"`
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups []GetPolicyFssoGroup `pulumi:"fssoGroups"`
	// Enable/disable recognition of anycast IP addresses using the geography IP database.
	GeoipAnycast string `pulumi:"geoipAnycast"`
	// Match geography address based either on its physical location or registered location.
	GeoipMatch string `pulumi:"geoipMatch"`
	// Label for the policy that appears when the GUI is in Global View mode.
	GlobalLabel string `pulumi:"globalLabel"`
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups []GetPolicyGroup `pulumi:"groups"`
	// Redirect HTTP(S) traffic to matching transparent web proxy policy.
	HttpPolicyRedirect string `pulumi:"httpPolicyRedirect"`
	// Name of an existing ICAP profile.
	IcapProfile string `pulumi:"icapProfile"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of identity-based routing rule.
	IdentityBasedRoute string `pulumi:"identityBasedRoute"`
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN.
	Inbound string `pulumi:"inbound"`
	// Policy inspection mode (Flow/proxy). Default is Flow mode.
	InspectionMode string `pulumi:"inspectionMode"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
	InternetService string `pulumi:"internetService"`
	// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used.
	InternetService6 string `pulumi:"internetService6"`
	// Custom Internet Service6 group name. The structure of `internetService6CustomGroup` block is documented below.
	InternetService6CustomGroups []GetPolicyInternetService6CustomGroup `pulumi:"internetService6CustomGroups"`
	// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
	InternetService6Customs []GetPolicyInternetService6Custom `pulumi:"internetService6Customs"`
	// Internet Service group name. The structure of `internetService6Group` block is documented below.
	InternetService6Groups []GetPolicyInternetService6Group `pulumi:"internetService6Groups"`
	// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
	InternetService6Names []GetPolicyInternetService6Name `pulumi:"internetService6Names"`
	// When enabled internet-service6 specifies what the service must NOT be.
	InternetService6Negate string `pulumi:"internetService6Negate"`
	// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used.
	InternetService6Src string `pulumi:"internetService6Src"`
	// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
	InternetService6SrcCustomGroups []GetPolicyInternetService6SrcCustomGroup `pulumi:"internetService6SrcCustomGroups"`
	// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
	InternetService6SrcCustoms []GetPolicyInternetService6SrcCustom `pulumi:"internetService6SrcCustoms"`
	// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
	InternetService6SrcGroups []GetPolicyInternetService6SrcGroup `pulumi:"internetService6SrcGroups"`
	// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
	InternetService6SrcNames []GetPolicyInternetService6SrcName `pulumi:"internetService6SrcNames"`
	// When enabled internet-service6-src specifies what the service must NOT be.
	InternetService6SrcNegate string `pulumi:"internetService6SrcNegate"`
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups []GetPolicyInternetServiceCustomGroup `pulumi:"internetServiceCustomGroups"`
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms []GetPolicyInternetServiceCustom `pulumi:"internetServiceCustoms"`
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups []GetPolicyInternetServiceGroup `pulumi:"internetServiceGroups"`
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds []GetPolicyInternetServiceId `pulumi:"internetServiceIds"`
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames []GetPolicyInternetServiceName `pulumi:"internetServiceNames"`
	// When enabled internet-service specifies what the service must NOT be.
	InternetServiceNegate string `pulumi:"internetServiceNegate"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.
	InternetServiceSrc string `pulumi:"internetServiceSrc"`
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups []GetPolicyInternetServiceSrcCustomGroup `pulumi:"internetServiceSrcCustomGroups"`
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms []GetPolicyInternetServiceSrcCustom `pulumi:"internetServiceSrcCustoms"`
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups []GetPolicyInternetServiceSrcGroup `pulumi:"internetServiceSrcGroups"`
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds []GetPolicyInternetServiceSrcId `pulumi:"internetServiceSrcIds"`
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames []GetPolicyInternetServiceSrcName `pulumi:"internetServiceSrcNames"`
	// When enabled internet-service-src specifies what the service must NOT be.
	InternetServiceSrcNegate string `pulumi:"internetServiceSrcNegate"`
	// Enable to use IP Pools for source NAT.
	Ippool string `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensor string `pulumi:"ipsSensor"`
	// Name of an existing VoIP (ips) profile.
	IpsVoipFilter string `pulumi:"ipsVoipFilter"`
	// Label for the policy that appears when the GUI is in Section View mode.
	Label string `pulumi:"label"`
	// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated.
	LearningMode string `pulumi:"learningMode"`
	// Enable or disable logging. Log all sessions or security profile sessions.
	Logtraffic string `pulumi:"logtraffic"`
	// Record logs when a session starts.
	LogtrafficStart string `pulumi:"logtrafficStart"`
	// Enable to match packets that have had their destination addresses changed by a VIP.
	MatchVip string `pulumi:"matchVip"`
	// Enable/disable matching of only those packets that have had their destination addresses changed by a VIP.
	MatchVipOnly string `pulumi:"matchVipOnly"`
	// Mirror Interface name.
	Name string `pulumi:"name"`
	// Enable/disable source NAT.
	Nat string `pulumi:"nat"`
	// Enable/disable NAT46.
	Nat46 string `pulumi:"nat46"`
	// Enable/disable NAT64.
	Nat64 string `pulumi:"nat64"`
	// Policy-based IPsec VPN: apply destination NAT to inbound traffic.
	Natinbound string `pulumi:"natinbound"`
	// Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
	Natip string `pulumi:"natip"`
	// Policy-based IPsec VPN: apply source NAT to outbound traffic.
	Natoutbound string `pulumi:"natoutbound"`
	// Dynamic Network Service name. The structure of `networkServiceDynamic` block is documented below.
	NetworkServiceDynamics []GetPolicyNetworkServiceDynamic `pulumi:"networkServiceDynamics"`
	// Dynamic Network Service source name. The structure of `networkServiceSrcDynamic` block is documented below.
	NetworkServiceSrcDynamics []GetPolicyNetworkServiceSrcDynamic `pulumi:"networkServiceSrcDynamics"`
	// Enable/disable UTM Network Processor acceleration.
	NpAcceleration string `pulumi:"npAcceleration"`
	// Enable/disable NTLM authentication.
	Ntlm string `pulumi:"ntlm"`
	// HTTP-User-Agent value of supported browsers. The structure of `ntlmEnabledBrowsers` block is documented below.
	NtlmEnabledBrowsers []GetPolicyNtlmEnabledBrowser `pulumi:"ntlmEnabledBrowsers"`
	// Enable/disable NTLM guest user access.
	NtlmGuest string `pulumi:"ntlmGuest"`
	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN.
	Outbound string `pulumi:"outbound"`
	// Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled.
	PassiveWanHealthMeasurement string `pulumi:"passiveWanHealthMeasurement"`
	// Enable/disable PCP inbound DNAT.
	PcpInbound string `pulumi:"pcpInbound"`
	// Enable/disable PCP outbound SNAT.
	PcpOutbound string `pulumi:"pcpOutbound"`
	// PCP pool names. The structure of `pcpPoolname` block is documented below.
	PcpPoolnames []GetPolicyPcpPoolname `pulumi:"pcpPoolnames"`
	// Per-IP traffic shaper.
	PerIpShaper string `pulumi:"perIpShaper"`
	// Accept UDP packets from any host.
	PermitAnyHost string `pulumi:"permitAnyHost"`
	// Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host.
	PermitStunHost string `pulumi:"permitStunHost"`
	// Enable/disable policy expiry.
	PolicyExpiry string `pulumi:"policyExpiry"`
	// Policy expiry date (YYYY-MM-DD HH:MM:SS).
	PolicyExpiryDate string `pulumi:"policyExpiryDate"`
	// Policy expiry date and time, in epoch format.
	PolicyExpiryDateUtc string `pulumi:"policyExpiryDateUtc"`
	// Policy ID.
	Policyid int `pulumi:"policyid"`
	// IPv6 pool names. The structure of `poolname6` block is documented below.
	Poolname6s []GetPolicyPoolname6 `pulumi:"poolname6s"`
	// IP Pool names. The structure of `poolname` block is documented below.
	Poolnames []GetPolicyPoolname `pulumi:"poolnames"`
	// Name of profile group.
	ProfileGroup string `pulumi:"profileGroup"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions string `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only.
	ProfileType string `pulumi:"profileType"`
	// Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server.
	RadiusMacAuthBypass string `pulumi:"radiusMacAuthBypass"`
	// URL users are directed to after seeing and accepting the disclaimer or authenticating.
	RedirectUrl string `pulumi:"redirectUrl"`
	// Override the default replacement message group for this policy.
	ReplacemsgOverrideGroup string `pulumi:"replacemsgOverrideGroup"`
	// Direction of the initial traffic for reputation to take effect.
	ReputationDirection string `pulumi:"reputationDirection"`
	// Direction of the initial traffic for IPv6 reputation to take effect.
	ReputationDirection6 string `pulumi:"reputationDirection6"`
	// Minimum Reputation to take action.
	ReputationMinimum int `pulumi:"reputationMinimum"`
	// IPv6 Minimum Reputation to take action.
	ReputationMinimum6 int `pulumi:"reputationMinimum6"`
	// Enable/disable RADIUS single sign-on (RSSO).
	Rsso string `pulumi:"rsso"`
	// Address names if this is an RTP NAT policy. The structure of `rtpAddr` block is documented below.
	RtpAddrs []GetPolicyRtpAddr `pulumi:"rtpAddrs"`
	// Enable Real Time Protocol (RTP) NAT.
	RtpNat string `pulumi:"rtpNat"`
	// Block or monitor connections to Botnet servers or disable Botnet scanning.
	ScanBotnetConnections string `pulumi:"scanBotnetConnections"`
	// Schedule name.
	Schedule string `pulumi:"schedule"`
	// Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity.
	ScheduleTimeout string `pulumi:"scheduleTimeout"`
	// Name of an existing SCTP filter profile.
	SctpFilterProfile string `pulumi:"sctpFilterProfile"`
	// Enable to send a reply when a session is denied or blocked by a firewall policy.
	SendDenyPacket string `pulumi:"sendDenyPacket"`
	// When enabled service specifies what the service must NOT be.
	ServiceNegate string `pulumi:"serviceNegate"`
	// Service and service group names. The structure of `service` block is documented below.
	Services []GetPolicyService `pulumi:"services"`
	// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
	SessionTtl int `pulumi:"sessionTtl"`
	// Enable/disable security group tags (SGT) check.
	SgtCheck string `pulumi:"sgtCheck"`
	// Security group tags. The structure of `sgt` block is documented below.
	Sgts []GetPolicySgt `pulumi:"sgts"`
	// Name of an existing Spam filter profile.
	SpamfilterProfile string `pulumi:"spamfilterProfile"`
	// Vendor MAC source ID. The structure of `srcVendorMac` block is documented below.
	SrcVendorMacs []GetPolicySrcVendorMac `pulumi:"srcVendorMacs"`
	// When enabled srcaddr6 specifies what the source address must NOT be.
	Srcaddr6Negate string `pulumi:"srcaddr6Negate"`
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s []GetPolicySrcaddr6 `pulumi:"srcaddr6s"`
	// When enabled srcaddr specifies what the source address must NOT be.
	SrcaddrNegate string `pulumi:"srcaddrNegate"`
	// Source address and address group names. The structure of `srcaddr` block is documented below.
	Srcaddrs []GetPolicySrcaddr `pulumi:"srcaddrs"`
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs []GetPolicySrcintf `pulumi:"srcintfs"`
	// Name of an existing SSH filter profile.
	SshFilterProfile string `pulumi:"sshFilterProfile"`
	// Redirect SSH traffic to matching transparent proxy policy.
	SshPolicyRedirect string `pulumi:"sshPolicyRedirect"`
	// Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring).
	SslMirror string `pulumi:"sslMirror"`
	// SSL mirror interface name. The structure of `sslMirrorIntf` block is documented below.
	SslMirrorIntfs []GetPolicySslMirrorIntf `pulumi:"sslMirrorIntfs"`
	// Name of an existing SSL SSH profile.
	SslSshProfile string `pulumi:"sslSshProfile"`
	// Enable or disable this policy.
	Status string `pulumi:"status"`
	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver int `pulumi:"tcpMssReceiver"`
	// Sender TCP maximum segment size (MSS).
	TcpMssSender int `pulumi:"tcpMssSender"`
	// Enable/disable creation of TCP session without SYN flag.
	TcpSessionWithoutSyn string `pulumi:"tcpSessionWithoutSyn"`
	// Enable/disable sending RST packets when TCP sessions expire.
	TimeoutSendRst string `pulumi:"timeoutSendRst"`
	// ToS (Type of Service) value used for comparison.
	Tos string `pulumi:"tos"`
	// Non-zero bit positions are used for comparison while zero bit positions are ignored.
	TosMask string `pulumi:"tosMask"`
	// Enable negated TOS match.
	TosNegate string `pulumi:"tosNegate"`
	// Traffic shaper.
	TrafficShaper string `pulumi:"trafficShaper"`
	// Reverse traffic shaper.
	TrafficShaperReverse string `pulumi:"trafficShaperReverse"`
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories []GetPolicyUrlCategory `pulumi:"urlCategories"`
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users []GetPolicyUser `pulumi:"users"`
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
	UtmStatus string `pulumi:"utmStatus"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid      string  `pulumi:"uuid"`
	Vdomparam *string `pulumi:"vdomparam"`
	// Name of an existing VideoFilter profile.
	VideofilterProfile string `pulumi:"videofilterProfile"`
	// Name of an existing virtual-patch profile.
	VirtualPatchProfile string `pulumi:"virtualPatchProfile"`
	// VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
	VlanCosFwd int `pulumi:"vlanCosFwd"`
	// VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
	VlanCosRev int `pulumi:"vlanCosRev"`
	// Set VLAN filters.
	VlanFilter string `pulumi:"vlanFilter"`
	// Name of an existing VoIP profile.
	VoipProfile string `pulumi:"voipProfile"`
	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel string `pulumi:"vpntunnel"`
	// Name of an existing Web application firewall profile.
	WafProfile string `pulumi:"wafProfile"`
	// Enable/disable WAN optimization.
	Wanopt string `pulumi:"wanopt"`
	// WAN optimization auto-detection mode.
	WanoptDetection string `pulumi:"wanoptDetection"`
	// WAN optimization passive mode options. This option decides what IP address will be used to connect server.
	WanoptPassiveOpt string `pulumi:"wanoptPassiveOpt"`
	// WAN optimization peer.
	WanoptPeer string `pulumi:"wanoptPeer"`
	// WAN optimization profile.
	WanoptProfile string `pulumi:"wanoptProfile"`
	// Enable/disable forwarding traffic matching this policy to a configured WCCP server.
	Wccp string `pulumi:"wccp"`
	// Enable/disable web cache.
	Webcache string `pulumi:"webcache"`
	// Enable/disable web cache for HTTPS.
	WebcacheHttps string `pulumi:"webcacheHttps"`
	// Name of an existing Web filter profile.
	WebfilterProfile string `pulumi:"webfilterProfile"`
	// Web proxy forward server name.
	WebproxyForwardServer string `pulumi:"webproxyForwardServer"`
	// Webproxy profile name.
	WebproxyProfile string `pulumi:"webproxyProfile"`
	// Enable/disable WiFi Single Sign On (WSSO).
	Wsso string `pulumi:"wsso"`
	// Enable/disable zero trust device ownership.
	ZtnaDeviceOwnership string `pulumi:"ztnaDeviceOwnership"`
	// Source ztna-ems-tag-secondary names. The structure of `ztnaEmsTagSecondary` block is documented below.
	ZtnaEmsTagSecondaries []GetPolicyZtnaEmsTagSecondary `pulumi:"ztnaEmsTagSecondaries"`
	// Source ztna-ems-tag names. The structure of `ztnaEmsTag` block is documented below.
	ZtnaEmsTags []GetPolicyZtnaEmsTag `pulumi:"ztnaEmsTags"`
	// Source ztna-geo-tag names. The structure of `ztnaGeoTag` block is documented below.
	ZtnaGeoTags []GetPolicyZtnaGeoTag `pulumi:"ztnaGeoTags"`
	// Redirect ZTNA traffic to matching Access-Proxy proxy-policy.
	ZtnaPolicyRedirect string `pulumi:"ztnaPolicyRedirect"`
	// Enable/disable zero trust access.
	ZtnaStatus string `pulumi:"ztnaStatus"`
	// ZTNA tag matching logic.
	ZtnaTagsMatchLogic string `pulumi:"ztnaTagsMatchLogic"`
}

func LookupPolicyOutput(ctx *pulumi.Context, args LookupPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPolicyResult, error) {
			args := v.(LookupPolicyArgs)
			r, err := LookupPolicy(ctx, &args, opts...)
			var s LookupPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPolicyResultOutput)
}

// A collection of arguments for invoking getPolicy.
type LookupPolicyOutputArgs struct {
	// Specify the policyid of the desired firewall policy.
	Policyid pulumi.IntInput `pulumi:"policyid"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getPolicy.
type LookupPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyResult)(nil)).Elem()
}

func (o LookupPolicyResultOutput) ToLookupPolicyResultOutput() LookupPolicyResultOutput {
	return o
}

func (o LookupPolicyResultOutput) ToLookupPolicyResultOutputWithContext(ctx context.Context) LookupPolicyResultOutput {
	return o
}

// Policy action (allow/deny/ipsec).
func (o LookupPolicyResultOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Action }).(pulumi.StringOutput)
}

// Enable/disable anti-replay check.
func (o LookupPolicyResultOutput) AntiReplay() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.AntiReplay }).(pulumi.StringOutput)
}

// Application category ID list. The structure of `appCategory` block is documented below.
func (o LookupPolicyResultOutput) AppCategories() GetPolicyAppCategoryArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyAppCategory { return v.AppCategories }).(GetPolicyAppCategoryArrayOutput)
}

// Application group names. The structure of `appGroup` block is documented below.
func (o LookupPolicyResultOutput) AppGroups() GetPolicyAppGroupArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyAppGroup { return v.AppGroups }).(GetPolicyAppGroupArrayOutput)
}

// Name of an existing Application list.
func (o LookupPolicyResultOutput) ApplicationList() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.ApplicationList }).(pulumi.StringOutput)
}

// Application ID list. The structure of `application` block is documented below.
func (o LookupPolicyResultOutput) Applications() GetPolicyApplicationArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyApplication { return v.Applications }).(GetPolicyApplicationArrayOutput)
}

// HTTPS server certificate for policy authentication.
func (o LookupPolicyResultOutput) AuthCert() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.AuthCert }).(pulumi.StringOutput)
}

// Enable/disable authentication-based routing.
func (o LookupPolicyResultOutput) AuthPath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.AuthPath }).(pulumi.StringOutput)
}

// HTTP-to-HTTPS redirect address for firewall authentication.
func (o LookupPolicyResultOutput) AuthRedirectAddr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.AuthRedirectAddr }).(pulumi.StringOutput)
}

// Enable/disable policy traffic ASIC offloading.
func (o LookupPolicyResultOutput) AutoAsicOffload() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.AutoAsicOffload }).(pulumi.StringOutput)
}

// Name of an existing Antivirus profile.
func (o LookupPolicyResultOutput) AvProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.AvProfile }).(pulumi.StringOutput)
}

// Enable/disable block notification.
func (o LookupPolicyResultOutput) BlockNotification() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.BlockNotification }).(pulumi.StringOutput)
}

// Enable to exempt some users from the captive portal.
func (o LookupPolicyResultOutput) CaptivePortalExempt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.CaptivePortalExempt }).(pulumi.StringOutput)
}

// Enable/disable capture packets.
func (o LookupPolicyResultOutput) CapturePacket() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.CapturePacket }).(pulumi.StringOutput)
}

// Name of an existing CASB profile.
func (o LookupPolicyResultOutput) CasbProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.CasbProfile }).(pulumi.StringOutput)
}

// Name of an existing CIFS profile.
func (o LookupPolicyResultOutput) CifsProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.CifsProfile }).(pulumi.StringOutput)
}

// Comment.
func (o LookupPolicyResultOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Comments }).(pulumi.StringOutput)
}

// Custom fields to append to log messages for this policy. The structure of `customLogFields` block is documented below.
func (o LookupPolicyResultOutput) CustomLogFields() GetPolicyCustomLogFieldArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyCustomLogField { return v.CustomLogFields }).(GetPolicyCustomLogFieldArrayOutput)
}

// Decrypted traffic mirror.
func (o LookupPolicyResultOutput) DecryptedTrafficMirror() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.DecryptedTrafficMirror }).(pulumi.StringOutput)
}

// Enable TCP NPU session delay to guarantee packet order of 3-way handshake.
func (o LookupPolicyResultOutput) DelayTcpNpuSession() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.DelayTcpNpuSession }).(pulumi.StringOutput)
}

// Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
func (o LookupPolicyResultOutput) Devices() GetPolicyDeviceArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyDevice { return v.Devices }).(GetPolicyDeviceArrayOutput)
}

// Name of an existing Diameter filter profile.
func (o LookupPolicyResultOutput) DiameterFilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.DiameterFilterProfile }).(pulumi.StringOutput)
}

// Enable to copy packet's DiffServ values from session's original direction to its reply direction.
func (o LookupPolicyResultOutput) DiffservCopy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.DiffservCopy }).(pulumi.StringOutput)
}

// Enable to change packet's DiffServ values to the specified diffservcode-forward value.
func (o LookupPolicyResultOutput) DiffservForward() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.DiffservForward }).(pulumi.StringOutput)
}

// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.
func (o LookupPolicyResultOutput) DiffservReverse() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.DiffservReverse }).(pulumi.StringOutput)
}

// Change packet's DiffServ to this value.
func (o LookupPolicyResultOutput) DiffservcodeForward() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.DiffservcodeForward }).(pulumi.StringOutput)
}

// Change packet's reverse (reply) DiffServ to this value.
func (o LookupPolicyResultOutput) DiffservcodeRev() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.DiffservcodeRev }).(pulumi.StringOutput)
}

// Enable/disable user authentication disclaimer.
func (o LookupPolicyResultOutput) Disclaimer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Disclaimer }).(pulumi.StringOutput)
}

// Name of an existing DLP profile.
func (o LookupPolicyResultOutput) DlpProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.DlpProfile }).(pulumi.StringOutput)
}

// Name of an existing DLP sensor.
func (o LookupPolicyResultOutput) DlpSensor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.DlpSensor }).(pulumi.StringOutput)
}

// Name of an existing DNS filter profile.
func (o LookupPolicyResultOutput) DnsfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.DnsfilterProfile }).(pulumi.StringOutput)
}

// Enable DSRI to ignore HTTP server responses.
func (o LookupPolicyResultOutput) Dsri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Dsri }).(pulumi.StringOutput)
}

// When enabled dstaddr6 specifies what the destination address must NOT be.
func (o LookupPolicyResultOutput) Dstaddr6Negate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Dstaddr6Negate }).(pulumi.StringOutput)
}

// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
func (o LookupPolicyResultOutput) Dstaddr6s() GetPolicyDstaddr6ArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyDstaddr6 { return v.Dstaddr6s }).(GetPolicyDstaddr6ArrayOutput)
}

// When enabled dstaddr specifies what the destination address must NOT be.
func (o LookupPolicyResultOutput) DstaddrNegate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.DstaddrNegate }).(pulumi.StringOutput)
}

// Destination address and address group names. The structure of `dstaddr` block is documented below.
func (o LookupPolicyResultOutput) Dstaddrs() GetPolicyDstaddrArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyDstaddr { return v.Dstaddrs }).(GetPolicyDstaddrArrayOutput)
}

// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
func (o LookupPolicyResultOutput) Dstintfs() GetPolicyDstintfArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyDstintf { return v.Dstintfs }).(GetPolicyDstintfArrayOutput)
}

// Enable/disable dynamic RADIUS defined traffic shaping.
func (o LookupPolicyResultOutput) DynamicShaping() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.DynamicShaping }).(pulumi.StringOutput)
}

// Enable/disable email collection.
func (o LookupPolicyResultOutput) EmailCollect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.EmailCollect }).(pulumi.StringOutput)
}

// Name of an existing email filter profile.
func (o LookupPolicyResultOutput) EmailfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.EmailfilterProfile }).(pulumi.StringOutput)
}

// Enable/disable Forward Error Correction on traffic matching this policy on a FEC device.
func (o LookupPolicyResultOutput) Fec() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Fec }).(pulumi.StringOutput)
}

// Name of an existing file-filter profile.
func (o LookupPolicyResultOutput) FileFilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.FileFilterProfile }).(pulumi.StringOutput)
}

// How to handle sessions if the configuration of this firewall policy changes.
func (o LookupPolicyResultOutput) FirewallSessionDirty() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.FirewallSessionDirty }).(pulumi.StringOutput)
}

// Enable to prevent source NAT from changing a session's source port.
func (o LookupPolicyResultOutput) Fixedport() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Fixedport }).(pulumi.StringOutput)
}

// Enable/disable Fortinet Single Sign-On.
func (o LookupPolicyResultOutput) Fsso() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Fsso }).(pulumi.StringOutput)
}

// FSSO agent to use for NTLM authentication.
func (o LookupPolicyResultOutput) FssoAgentForNtlm() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.FssoAgentForNtlm }).(pulumi.StringOutput)
}

// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
func (o LookupPolicyResultOutput) FssoGroups() GetPolicyFssoGroupArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyFssoGroup { return v.FssoGroups }).(GetPolicyFssoGroupArrayOutput)
}

// Enable/disable recognition of anycast IP addresses using the geography IP database.
func (o LookupPolicyResultOutput) GeoipAnycast() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.GeoipAnycast }).(pulumi.StringOutput)
}

// Match geography address based either on its physical location or registered location.
func (o LookupPolicyResultOutput) GeoipMatch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.GeoipMatch }).(pulumi.StringOutput)
}

// Label for the policy that appears when the GUI is in Global View mode.
func (o LookupPolicyResultOutput) GlobalLabel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.GlobalLabel }).(pulumi.StringOutput)
}

// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
func (o LookupPolicyResultOutput) Groups() GetPolicyGroupArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyGroup { return v.Groups }).(GetPolicyGroupArrayOutput)
}

// Redirect HTTP(S) traffic to matching transparent web proxy policy.
func (o LookupPolicyResultOutput) HttpPolicyRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.HttpPolicyRedirect }).(pulumi.StringOutput)
}

// Name of an existing ICAP profile.
func (o LookupPolicyResultOutput) IcapProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.IcapProfile }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of identity-based routing rule.
func (o LookupPolicyResultOutput) IdentityBasedRoute() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.IdentityBasedRoute }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN.
func (o LookupPolicyResultOutput) Inbound() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Inbound }).(pulumi.StringOutput)
}

// Policy inspection mode (Flow/proxy). Default is Flow mode.
func (o LookupPolicyResultOutput) InspectionMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.InspectionMode }).(pulumi.StringOutput)
}

// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
func (o LookupPolicyResultOutput) InternetService() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.InternetService }).(pulumi.StringOutput)
}

// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used.
func (o LookupPolicyResultOutput) InternetService6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.InternetService6 }).(pulumi.StringOutput)
}

// Custom Internet Service6 group name. The structure of `internetService6CustomGroup` block is documented below.
func (o LookupPolicyResultOutput) InternetService6CustomGroups() GetPolicyInternetService6CustomGroupArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetService6CustomGroup {
		return v.InternetService6CustomGroups
	}).(GetPolicyInternetService6CustomGroupArrayOutput)
}

// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
func (o LookupPolicyResultOutput) InternetService6Customs() GetPolicyInternetService6CustomArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetService6Custom { return v.InternetService6Customs }).(GetPolicyInternetService6CustomArrayOutput)
}

// Internet Service group name. The structure of `internetService6Group` block is documented below.
func (o LookupPolicyResultOutput) InternetService6Groups() GetPolicyInternetService6GroupArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetService6Group { return v.InternetService6Groups }).(GetPolicyInternetService6GroupArrayOutput)
}

// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
func (o LookupPolicyResultOutput) InternetService6Names() GetPolicyInternetService6NameArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetService6Name { return v.InternetService6Names }).(GetPolicyInternetService6NameArrayOutput)
}

// When enabled internet-service6 specifies what the service must NOT be.
func (o LookupPolicyResultOutput) InternetService6Negate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.InternetService6Negate }).(pulumi.StringOutput)
}

// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used.
func (o LookupPolicyResultOutput) InternetService6Src() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.InternetService6Src }).(pulumi.StringOutput)
}

// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
func (o LookupPolicyResultOutput) InternetService6SrcCustomGroups() GetPolicyInternetService6SrcCustomGroupArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetService6SrcCustomGroup {
		return v.InternetService6SrcCustomGroups
	}).(GetPolicyInternetService6SrcCustomGroupArrayOutput)
}

// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
func (o LookupPolicyResultOutput) InternetService6SrcCustoms() GetPolicyInternetService6SrcCustomArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetService6SrcCustom { return v.InternetService6SrcCustoms }).(GetPolicyInternetService6SrcCustomArrayOutput)
}

// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
func (o LookupPolicyResultOutput) InternetService6SrcGroups() GetPolicyInternetService6SrcGroupArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetService6SrcGroup { return v.InternetService6SrcGroups }).(GetPolicyInternetService6SrcGroupArrayOutput)
}

// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
func (o LookupPolicyResultOutput) InternetService6SrcNames() GetPolicyInternetService6SrcNameArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetService6SrcName { return v.InternetService6SrcNames }).(GetPolicyInternetService6SrcNameArrayOutput)
}

// When enabled internet-service6-src specifies what the service must NOT be.
func (o LookupPolicyResultOutput) InternetService6SrcNegate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.InternetService6SrcNegate }).(pulumi.StringOutput)
}

// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
func (o LookupPolicyResultOutput) InternetServiceCustomGroups() GetPolicyInternetServiceCustomGroupArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetServiceCustomGroup { return v.InternetServiceCustomGroups }).(GetPolicyInternetServiceCustomGroupArrayOutput)
}

// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
func (o LookupPolicyResultOutput) InternetServiceCustoms() GetPolicyInternetServiceCustomArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetServiceCustom { return v.InternetServiceCustoms }).(GetPolicyInternetServiceCustomArrayOutput)
}

// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
func (o LookupPolicyResultOutput) InternetServiceGroups() GetPolicyInternetServiceGroupArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetServiceGroup { return v.InternetServiceGroups }).(GetPolicyInternetServiceGroupArrayOutput)
}

// Internet Service ID. The structure of `internetServiceId` block is documented below.
func (o LookupPolicyResultOutput) InternetServiceIds() GetPolicyInternetServiceIdArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetServiceId { return v.InternetServiceIds }).(GetPolicyInternetServiceIdArrayOutput)
}

// Internet Service name. The structure of `internetServiceName` block is documented below.
func (o LookupPolicyResultOutput) InternetServiceNames() GetPolicyInternetServiceNameArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetServiceName { return v.InternetServiceNames }).(GetPolicyInternetServiceNameArrayOutput)
}

// When enabled internet-service specifies what the service must NOT be.
func (o LookupPolicyResultOutput) InternetServiceNegate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.InternetServiceNegate }).(pulumi.StringOutput)
}

// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.
func (o LookupPolicyResultOutput) InternetServiceSrc() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.InternetServiceSrc }).(pulumi.StringOutput)
}

// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
func (o LookupPolicyResultOutput) InternetServiceSrcCustomGroups() GetPolicyInternetServiceSrcCustomGroupArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetServiceSrcCustomGroup {
		return v.InternetServiceSrcCustomGroups
	}).(GetPolicyInternetServiceSrcCustomGroupArrayOutput)
}

// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
func (o LookupPolicyResultOutput) InternetServiceSrcCustoms() GetPolicyInternetServiceSrcCustomArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetServiceSrcCustom { return v.InternetServiceSrcCustoms }).(GetPolicyInternetServiceSrcCustomArrayOutput)
}

// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
func (o LookupPolicyResultOutput) InternetServiceSrcGroups() GetPolicyInternetServiceSrcGroupArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetServiceSrcGroup { return v.InternetServiceSrcGroups }).(GetPolicyInternetServiceSrcGroupArrayOutput)
}

// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
func (o LookupPolicyResultOutput) InternetServiceSrcIds() GetPolicyInternetServiceSrcIdArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetServiceSrcId { return v.InternetServiceSrcIds }).(GetPolicyInternetServiceSrcIdArrayOutput)
}

// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
func (o LookupPolicyResultOutput) InternetServiceSrcNames() GetPolicyInternetServiceSrcNameArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyInternetServiceSrcName { return v.InternetServiceSrcNames }).(GetPolicyInternetServiceSrcNameArrayOutput)
}

// When enabled internet-service-src specifies what the service must NOT be.
func (o LookupPolicyResultOutput) InternetServiceSrcNegate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.InternetServiceSrcNegate }).(pulumi.StringOutput)
}

// Enable to use IP Pools for source NAT.
func (o LookupPolicyResultOutput) Ippool() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Ippool }).(pulumi.StringOutput)
}

// Name of an existing IPS sensor.
func (o LookupPolicyResultOutput) IpsSensor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.IpsSensor }).(pulumi.StringOutput)
}

// Name of an existing VoIP (ips) profile.
func (o LookupPolicyResultOutput) IpsVoipFilter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.IpsVoipFilter }).(pulumi.StringOutput)
}

// Label for the policy that appears when the GUI is in Section View mode.
func (o LookupPolicyResultOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Label }).(pulumi.StringOutput)
}

// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated.
func (o LookupPolicyResultOutput) LearningMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.LearningMode }).(pulumi.StringOutput)
}

// Enable or disable logging. Log all sessions or security profile sessions.
func (o LookupPolicyResultOutput) Logtraffic() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Logtraffic }).(pulumi.StringOutput)
}

// Record logs when a session starts.
func (o LookupPolicyResultOutput) LogtrafficStart() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.LogtrafficStart }).(pulumi.StringOutput)
}

// Enable to match packets that have had their destination addresses changed by a VIP.
func (o LookupPolicyResultOutput) MatchVip() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.MatchVip }).(pulumi.StringOutput)
}

// Enable/disable matching of only those packets that have had their destination addresses changed by a VIP.
func (o LookupPolicyResultOutput) MatchVipOnly() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.MatchVipOnly }).(pulumi.StringOutput)
}

// Mirror Interface name.
func (o LookupPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable source NAT.
func (o LookupPolicyResultOutput) Nat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Nat }).(pulumi.StringOutput)
}

// Enable/disable NAT46.
func (o LookupPolicyResultOutput) Nat46() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Nat46 }).(pulumi.StringOutput)
}

// Enable/disable NAT64.
func (o LookupPolicyResultOutput) Nat64() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Nat64 }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: apply destination NAT to inbound traffic.
func (o LookupPolicyResultOutput) Natinbound() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Natinbound }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
func (o LookupPolicyResultOutput) Natip() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Natip }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: apply source NAT to outbound traffic.
func (o LookupPolicyResultOutput) Natoutbound() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Natoutbound }).(pulumi.StringOutput)
}

// Dynamic Network Service name. The structure of `networkServiceDynamic` block is documented below.
func (o LookupPolicyResultOutput) NetworkServiceDynamics() GetPolicyNetworkServiceDynamicArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyNetworkServiceDynamic { return v.NetworkServiceDynamics }).(GetPolicyNetworkServiceDynamicArrayOutput)
}

// Dynamic Network Service source name. The structure of `networkServiceSrcDynamic` block is documented below.
func (o LookupPolicyResultOutput) NetworkServiceSrcDynamics() GetPolicyNetworkServiceSrcDynamicArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyNetworkServiceSrcDynamic { return v.NetworkServiceSrcDynamics }).(GetPolicyNetworkServiceSrcDynamicArrayOutput)
}

// Enable/disable UTM Network Processor acceleration.
func (o LookupPolicyResultOutput) NpAcceleration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.NpAcceleration }).(pulumi.StringOutput)
}

// Enable/disable NTLM authentication.
func (o LookupPolicyResultOutput) Ntlm() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Ntlm }).(pulumi.StringOutput)
}

// HTTP-User-Agent value of supported browsers. The structure of `ntlmEnabledBrowsers` block is documented below.
func (o LookupPolicyResultOutput) NtlmEnabledBrowsers() GetPolicyNtlmEnabledBrowserArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyNtlmEnabledBrowser { return v.NtlmEnabledBrowsers }).(GetPolicyNtlmEnabledBrowserArrayOutput)
}

// Enable/disable NTLM guest user access.
func (o LookupPolicyResultOutput) NtlmGuest() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.NtlmGuest }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN.
func (o LookupPolicyResultOutput) Outbound() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Outbound }).(pulumi.StringOutput)
}

// Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled.
func (o LookupPolicyResultOutput) PassiveWanHealthMeasurement() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.PassiveWanHealthMeasurement }).(pulumi.StringOutput)
}

// Enable/disable PCP inbound DNAT.
func (o LookupPolicyResultOutput) PcpInbound() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.PcpInbound }).(pulumi.StringOutput)
}

// Enable/disable PCP outbound SNAT.
func (o LookupPolicyResultOutput) PcpOutbound() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.PcpOutbound }).(pulumi.StringOutput)
}

// PCP pool names. The structure of `pcpPoolname` block is documented below.
func (o LookupPolicyResultOutput) PcpPoolnames() GetPolicyPcpPoolnameArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyPcpPoolname { return v.PcpPoolnames }).(GetPolicyPcpPoolnameArrayOutput)
}

// Per-IP traffic shaper.
func (o LookupPolicyResultOutput) PerIpShaper() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.PerIpShaper }).(pulumi.StringOutput)
}

// Accept UDP packets from any host.
func (o LookupPolicyResultOutput) PermitAnyHost() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.PermitAnyHost }).(pulumi.StringOutput)
}

// Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host.
func (o LookupPolicyResultOutput) PermitStunHost() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.PermitStunHost }).(pulumi.StringOutput)
}

// Enable/disable policy expiry.
func (o LookupPolicyResultOutput) PolicyExpiry() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.PolicyExpiry }).(pulumi.StringOutput)
}

// Policy expiry date (YYYY-MM-DD HH:MM:SS).
func (o LookupPolicyResultOutput) PolicyExpiryDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.PolicyExpiryDate }).(pulumi.StringOutput)
}

// Policy expiry date and time, in epoch format.
func (o LookupPolicyResultOutput) PolicyExpiryDateUtc() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.PolicyExpiryDateUtc }).(pulumi.StringOutput)
}

// Policy ID.
func (o LookupPolicyResultOutput) Policyid() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPolicyResult) int { return v.Policyid }).(pulumi.IntOutput)
}

// IPv6 pool names. The structure of `poolname6` block is documented below.
func (o LookupPolicyResultOutput) Poolname6s() GetPolicyPoolname6ArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyPoolname6 { return v.Poolname6s }).(GetPolicyPoolname6ArrayOutput)
}

// IP Pool names. The structure of `poolname` block is documented below.
func (o LookupPolicyResultOutput) Poolnames() GetPolicyPoolnameArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyPoolname { return v.Poolnames }).(GetPolicyPoolnameArrayOutput)
}

// Name of profile group.
func (o LookupPolicyResultOutput) ProfileGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.ProfileGroup }).(pulumi.StringOutput)
}

// Name of an existing Protocol options profile.
func (o LookupPolicyResultOutput) ProfileProtocolOptions() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.ProfileProtocolOptions }).(pulumi.StringOutput)
}

// Determine whether the firewall policy allows security profile groups or single profiles only.
func (o LookupPolicyResultOutput) ProfileType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.ProfileType }).(pulumi.StringOutput)
}

// Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server.
func (o LookupPolicyResultOutput) RadiusMacAuthBypass() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.RadiusMacAuthBypass }).(pulumi.StringOutput)
}

// URL users are directed to after seeing and accepting the disclaimer or authenticating.
func (o LookupPolicyResultOutput) RedirectUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.RedirectUrl }).(pulumi.StringOutput)
}

// Override the default replacement message group for this policy.
func (o LookupPolicyResultOutput) ReplacemsgOverrideGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.ReplacemsgOverrideGroup }).(pulumi.StringOutput)
}

// Direction of the initial traffic for reputation to take effect.
func (o LookupPolicyResultOutput) ReputationDirection() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.ReputationDirection }).(pulumi.StringOutput)
}

// Direction of the initial traffic for IPv6 reputation to take effect.
func (o LookupPolicyResultOutput) ReputationDirection6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.ReputationDirection6 }).(pulumi.StringOutput)
}

// Minimum Reputation to take action.
func (o LookupPolicyResultOutput) ReputationMinimum() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPolicyResult) int { return v.ReputationMinimum }).(pulumi.IntOutput)
}

// IPv6 Minimum Reputation to take action.
func (o LookupPolicyResultOutput) ReputationMinimum6() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPolicyResult) int { return v.ReputationMinimum6 }).(pulumi.IntOutput)
}

// Enable/disable RADIUS single sign-on (RSSO).
func (o LookupPolicyResultOutput) Rsso() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Rsso }).(pulumi.StringOutput)
}

// Address names if this is an RTP NAT policy. The structure of `rtpAddr` block is documented below.
func (o LookupPolicyResultOutput) RtpAddrs() GetPolicyRtpAddrArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyRtpAddr { return v.RtpAddrs }).(GetPolicyRtpAddrArrayOutput)
}

// Enable Real Time Protocol (RTP) NAT.
func (o LookupPolicyResultOutput) RtpNat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.RtpNat }).(pulumi.StringOutput)
}

// Block or monitor connections to Botnet servers or disable Botnet scanning.
func (o LookupPolicyResultOutput) ScanBotnetConnections() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.ScanBotnetConnections }).(pulumi.StringOutput)
}

// Schedule name.
func (o LookupPolicyResultOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Schedule }).(pulumi.StringOutput)
}

// Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity.
func (o LookupPolicyResultOutput) ScheduleTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.ScheduleTimeout }).(pulumi.StringOutput)
}

// Name of an existing SCTP filter profile.
func (o LookupPolicyResultOutput) SctpFilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.SctpFilterProfile }).(pulumi.StringOutput)
}

// Enable to send a reply when a session is denied or blocked by a firewall policy.
func (o LookupPolicyResultOutput) SendDenyPacket() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.SendDenyPacket }).(pulumi.StringOutput)
}

// When enabled service specifies what the service must NOT be.
func (o LookupPolicyResultOutput) ServiceNegate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.ServiceNegate }).(pulumi.StringOutput)
}

// Service and service group names. The structure of `service` block is documented below.
func (o LookupPolicyResultOutput) Services() GetPolicyServiceArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyService { return v.Services }).(GetPolicyServiceArrayOutput)
}

// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
func (o LookupPolicyResultOutput) SessionTtl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPolicyResult) int { return v.SessionTtl }).(pulumi.IntOutput)
}

// Enable/disable security group tags (SGT) check.
func (o LookupPolicyResultOutput) SgtCheck() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.SgtCheck }).(pulumi.StringOutput)
}

// Security group tags. The structure of `sgt` block is documented below.
func (o LookupPolicyResultOutput) Sgts() GetPolicySgtArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicySgt { return v.Sgts }).(GetPolicySgtArrayOutput)
}

// Name of an existing Spam filter profile.
func (o LookupPolicyResultOutput) SpamfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.SpamfilterProfile }).(pulumi.StringOutput)
}

// Vendor MAC source ID. The structure of `srcVendorMac` block is documented below.
func (o LookupPolicyResultOutput) SrcVendorMacs() GetPolicySrcVendorMacArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicySrcVendorMac { return v.SrcVendorMacs }).(GetPolicySrcVendorMacArrayOutput)
}

// When enabled srcaddr6 specifies what the source address must NOT be.
func (o LookupPolicyResultOutput) Srcaddr6Negate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Srcaddr6Negate }).(pulumi.StringOutput)
}

// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
func (o LookupPolicyResultOutput) Srcaddr6s() GetPolicySrcaddr6ArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicySrcaddr6 { return v.Srcaddr6s }).(GetPolicySrcaddr6ArrayOutput)
}

// When enabled srcaddr specifies what the source address must NOT be.
func (o LookupPolicyResultOutput) SrcaddrNegate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.SrcaddrNegate }).(pulumi.StringOutput)
}

// Source address and address group names. The structure of `srcaddr` block is documented below.
func (o LookupPolicyResultOutput) Srcaddrs() GetPolicySrcaddrArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicySrcaddr { return v.Srcaddrs }).(GetPolicySrcaddrArrayOutput)
}

// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
func (o LookupPolicyResultOutput) Srcintfs() GetPolicySrcintfArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicySrcintf { return v.Srcintfs }).(GetPolicySrcintfArrayOutput)
}

// Name of an existing SSH filter profile.
func (o LookupPolicyResultOutput) SshFilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.SshFilterProfile }).(pulumi.StringOutput)
}

// Redirect SSH traffic to matching transparent proxy policy.
func (o LookupPolicyResultOutput) SshPolicyRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.SshPolicyRedirect }).(pulumi.StringOutput)
}

// Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring).
func (o LookupPolicyResultOutput) SslMirror() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.SslMirror }).(pulumi.StringOutput)
}

// SSL mirror interface name. The structure of `sslMirrorIntf` block is documented below.
func (o LookupPolicyResultOutput) SslMirrorIntfs() GetPolicySslMirrorIntfArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicySslMirrorIntf { return v.SslMirrorIntfs }).(GetPolicySslMirrorIntfArrayOutput)
}

// Name of an existing SSL SSH profile.
func (o LookupPolicyResultOutput) SslSshProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.SslSshProfile }).(pulumi.StringOutput)
}

// Enable or disable this policy.
func (o LookupPolicyResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Status }).(pulumi.StringOutput)
}

// Receiver TCP maximum segment size (MSS).
func (o LookupPolicyResultOutput) TcpMssReceiver() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPolicyResult) int { return v.TcpMssReceiver }).(pulumi.IntOutput)
}

// Sender TCP maximum segment size (MSS).
func (o LookupPolicyResultOutput) TcpMssSender() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPolicyResult) int { return v.TcpMssSender }).(pulumi.IntOutput)
}

// Enable/disable creation of TCP session without SYN flag.
func (o LookupPolicyResultOutput) TcpSessionWithoutSyn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.TcpSessionWithoutSyn }).(pulumi.StringOutput)
}

// Enable/disable sending RST packets when TCP sessions expire.
func (o LookupPolicyResultOutput) TimeoutSendRst() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.TimeoutSendRst }).(pulumi.StringOutput)
}

// ToS (Type of Service) value used for comparison.
func (o LookupPolicyResultOutput) Tos() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Tos }).(pulumi.StringOutput)
}

// Non-zero bit positions are used for comparison while zero bit positions are ignored.
func (o LookupPolicyResultOutput) TosMask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.TosMask }).(pulumi.StringOutput)
}

// Enable negated TOS match.
func (o LookupPolicyResultOutput) TosNegate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.TosNegate }).(pulumi.StringOutput)
}

// Traffic shaper.
func (o LookupPolicyResultOutput) TrafficShaper() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.TrafficShaper }).(pulumi.StringOutput)
}

// Reverse traffic shaper.
func (o LookupPolicyResultOutput) TrafficShaperReverse() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.TrafficShaperReverse }).(pulumi.StringOutput)
}

// URL category ID list. The structure of `urlCategory` block is documented below.
func (o LookupPolicyResultOutput) UrlCategories() GetPolicyUrlCategoryArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyUrlCategory { return v.UrlCategories }).(GetPolicyUrlCategoryArrayOutput)
}

// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
func (o LookupPolicyResultOutput) Users() GetPolicyUserArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyUser { return v.Users }).(GetPolicyUserArrayOutput)
}

// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
func (o LookupPolicyResultOutput) UtmStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.UtmStatus }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o LookupPolicyResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Uuid }).(pulumi.StringOutput)
}

func (o LookupPolicyResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyResult) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Name of an existing VideoFilter profile.
func (o LookupPolicyResultOutput) VideofilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.VideofilterProfile }).(pulumi.StringOutput)
}

// Name of an existing virtual-patch profile.
func (o LookupPolicyResultOutput) VirtualPatchProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.VirtualPatchProfile }).(pulumi.StringOutput)
}

// VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
func (o LookupPolicyResultOutput) VlanCosFwd() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPolicyResult) int { return v.VlanCosFwd }).(pulumi.IntOutput)
}

// VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
func (o LookupPolicyResultOutput) VlanCosRev() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPolicyResult) int { return v.VlanCosRev }).(pulumi.IntOutput)
}

// Set VLAN filters.
func (o LookupPolicyResultOutput) VlanFilter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.VlanFilter }).(pulumi.StringOutput)
}

// Name of an existing VoIP profile.
func (o LookupPolicyResultOutput) VoipProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.VoipProfile }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
func (o LookupPolicyResultOutput) Vpntunnel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Vpntunnel }).(pulumi.StringOutput)
}

// Name of an existing Web application firewall profile.
func (o LookupPolicyResultOutput) WafProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.WafProfile }).(pulumi.StringOutput)
}

// Enable/disable WAN optimization.
func (o LookupPolicyResultOutput) Wanopt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Wanopt }).(pulumi.StringOutput)
}

// WAN optimization auto-detection mode.
func (o LookupPolicyResultOutput) WanoptDetection() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.WanoptDetection }).(pulumi.StringOutput)
}

// WAN optimization passive mode options. This option decides what IP address will be used to connect server.
func (o LookupPolicyResultOutput) WanoptPassiveOpt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.WanoptPassiveOpt }).(pulumi.StringOutput)
}

// WAN optimization peer.
func (o LookupPolicyResultOutput) WanoptPeer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.WanoptPeer }).(pulumi.StringOutput)
}

// WAN optimization profile.
func (o LookupPolicyResultOutput) WanoptProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.WanoptProfile }).(pulumi.StringOutput)
}

// Enable/disable forwarding traffic matching this policy to a configured WCCP server.
func (o LookupPolicyResultOutput) Wccp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Wccp }).(pulumi.StringOutput)
}

// Enable/disable web cache.
func (o LookupPolicyResultOutput) Webcache() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Webcache }).(pulumi.StringOutput)
}

// Enable/disable web cache for HTTPS.
func (o LookupPolicyResultOutput) WebcacheHttps() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.WebcacheHttps }).(pulumi.StringOutput)
}

// Name of an existing Web filter profile.
func (o LookupPolicyResultOutput) WebfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.WebfilterProfile }).(pulumi.StringOutput)
}

// Web proxy forward server name.
func (o LookupPolicyResultOutput) WebproxyForwardServer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.WebproxyForwardServer }).(pulumi.StringOutput)
}

// Webproxy profile name.
func (o LookupPolicyResultOutput) WebproxyProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.WebproxyProfile }).(pulumi.StringOutput)
}

// Enable/disable WiFi Single Sign On (WSSO).
func (o LookupPolicyResultOutput) Wsso() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.Wsso }).(pulumi.StringOutput)
}

// Enable/disable zero trust device ownership.
func (o LookupPolicyResultOutput) ZtnaDeviceOwnership() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.ZtnaDeviceOwnership }).(pulumi.StringOutput)
}

// Source ztna-ems-tag-secondary names. The structure of `ztnaEmsTagSecondary` block is documented below.
func (o LookupPolicyResultOutput) ZtnaEmsTagSecondaries() GetPolicyZtnaEmsTagSecondaryArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyZtnaEmsTagSecondary { return v.ZtnaEmsTagSecondaries }).(GetPolicyZtnaEmsTagSecondaryArrayOutput)
}

// Source ztna-ems-tag names. The structure of `ztnaEmsTag` block is documented below.
func (o LookupPolicyResultOutput) ZtnaEmsTags() GetPolicyZtnaEmsTagArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyZtnaEmsTag { return v.ZtnaEmsTags }).(GetPolicyZtnaEmsTagArrayOutput)
}

// Source ztna-geo-tag names. The structure of `ztnaGeoTag` block is documented below.
func (o LookupPolicyResultOutput) ZtnaGeoTags() GetPolicyZtnaGeoTagArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyZtnaGeoTag { return v.ZtnaGeoTags }).(GetPolicyZtnaGeoTagArrayOutput)
}

// Redirect ZTNA traffic to matching Access-Proxy proxy-policy.
func (o LookupPolicyResultOutput) ZtnaPolicyRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.ZtnaPolicyRedirect }).(pulumi.StringOutput)
}

// Enable/disable zero trust access.
func (o LookupPolicyResultOutput) ZtnaStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.ZtnaStatus }).(pulumi.StringOutput)
}

// ZTNA tag matching logic.
func (o LookupPolicyResultOutput) ZtnaTagsMatchLogic() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyResult) string { return v.ZtnaTagsMatchLogic }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPolicyResultOutput{})
}
