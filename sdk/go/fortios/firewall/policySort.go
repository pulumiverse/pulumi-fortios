// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

type PolicySort struct {
	pulumi.CustomResourceState

	Comment          pulumi.StringPtrOutput               `pulumi:"comment"`
	ForceRecreate    pulumi.StringOutput                  `pulumi:"forceRecreate"`
	ManualOrders     pulumi.StringArrayOutput             `pulumi:"manualOrders"`
	Sortby           pulumi.StringOutput                  `pulumi:"sortby"`
	Sortdirection    pulumi.StringOutput                  `pulumi:"sortdirection"`
	StatePolicyLists PolicySortStatePolicyListArrayOutput `pulumi:"statePolicyLists"`
	Status           pulumi.StringOutput                  `pulumi:"status"`
	Vdomparam        pulumi.StringPtrOutput               `pulumi:"vdomparam"`
}

// NewPolicySort registers a new resource with the given unique name, arguments, and options.
func NewPolicySort(ctx *pulumi.Context,
	name string, args *PolicySortArgs, opts ...pulumi.ResourceOption) (*PolicySort, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Sortby == nil {
		return nil, errors.New("invalid value for required argument 'Sortby'")
	}
	if args.Sortdirection == nil {
		return nil, errors.New("invalid value for required argument 'Sortdirection'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicySort
	err := ctx.RegisterResource("fortios:firewall/policySort:PolicySort", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicySort gets an existing PolicySort resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicySort(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicySortState, opts ...pulumi.ResourceOption) (*PolicySort, error) {
	var resource PolicySort
	err := ctx.ReadResource("fortios:firewall/policySort:PolicySort", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicySort resources.
type policySortState struct {
	Comment          *string                     `pulumi:"comment"`
	ForceRecreate    *string                     `pulumi:"forceRecreate"`
	ManualOrders     []string                    `pulumi:"manualOrders"`
	Sortby           *string                     `pulumi:"sortby"`
	Sortdirection    *string                     `pulumi:"sortdirection"`
	StatePolicyLists []PolicySortStatePolicyList `pulumi:"statePolicyLists"`
	Status           *string                     `pulumi:"status"`
	Vdomparam        *string                     `pulumi:"vdomparam"`
}

type PolicySortState struct {
	Comment          pulumi.StringPtrInput
	ForceRecreate    pulumi.StringPtrInput
	ManualOrders     pulumi.StringArrayInput
	Sortby           pulumi.StringPtrInput
	Sortdirection    pulumi.StringPtrInput
	StatePolicyLists PolicySortStatePolicyListArrayInput
	Status           pulumi.StringPtrInput
	Vdomparam        pulumi.StringPtrInput
}

func (PolicySortState) ElementType() reflect.Type {
	return reflect.TypeOf((*policySortState)(nil)).Elem()
}

type policySortArgs struct {
	Comment       *string  `pulumi:"comment"`
	ForceRecreate *string  `pulumi:"forceRecreate"`
	ManualOrders  []string `pulumi:"manualOrders"`
	Sortby        string   `pulumi:"sortby"`
	Sortdirection string   `pulumi:"sortdirection"`
	Status        *string  `pulumi:"status"`
	Vdomparam     *string  `pulumi:"vdomparam"`
}

// The set of arguments for constructing a PolicySort resource.
type PolicySortArgs struct {
	Comment       pulumi.StringPtrInput
	ForceRecreate pulumi.StringPtrInput
	ManualOrders  pulumi.StringArrayInput
	Sortby        pulumi.StringInput
	Sortdirection pulumi.StringInput
	Status        pulumi.StringPtrInput
	Vdomparam     pulumi.StringPtrInput
}

func (PolicySortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policySortArgs)(nil)).Elem()
}

type PolicySortInput interface {
	pulumi.Input

	ToPolicySortOutput() PolicySortOutput
	ToPolicySortOutputWithContext(ctx context.Context) PolicySortOutput
}

func (*PolicySort) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySort)(nil)).Elem()
}

func (i *PolicySort) ToPolicySortOutput() PolicySortOutput {
	return i.ToPolicySortOutputWithContext(context.Background())
}

func (i *PolicySort) ToPolicySortOutputWithContext(ctx context.Context) PolicySortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySortOutput)
}

// PolicySortArrayInput is an input type that accepts PolicySortArray and PolicySortArrayOutput values.
// You can construct a concrete instance of `PolicySortArrayInput` via:
//
//	PolicySortArray{ PolicySortArgs{...} }
type PolicySortArrayInput interface {
	pulumi.Input

	ToPolicySortArrayOutput() PolicySortArrayOutput
	ToPolicySortArrayOutputWithContext(context.Context) PolicySortArrayOutput
}

type PolicySortArray []PolicySortInput

func (PolicySortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicySort)(nil)).Elem()
}

func (i PolicySortArray) ToPolicySortArrayOutput() PolicySortArrayOutput {
	return i.ToPolicySortArrayOutputWithContext(context.Background())
}

func (i PolicySortArray) ToPolicySortArrayOutputWithContext(ctx context.Context) PolicySortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySortArrayOutput)
}

// PolicySortMapInput is an input type that accepts PolicySortMap and PolicySortMapOutput values.
// You can construct a concrete instance of `PolicySortMapInput` via:
//
//	PolicySortMap{ "key": PolicySortArgs{...} }
type PolicySortMapInput interface {
	pulumi.Input

	ToPolicySortMapOutput() PolicySortMapOutput
	ToPolicySortMapOutputWithContext(context.Context) PolicySortMapOutput
}

type PolicySortMap map[string]PolicySortInput

func (PolicySortMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicySort)(nil)).Elem()
}

func (i PolicySortMap) ToPolicySortMapOutput() PolicySortMapOutput {
	return i.ToPolicySortMapOutputWithContext(context.Background())
}

func (i PolicySortMap) ToPolicySortMapOutputWithContext(ctx context.Context) PolicySortMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySortMapOutput)
}

type PolicySortOutput struct{ *pulumi.OutputState }

func (PolicySortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySort)(nil)).Elem()
}

func (o PolicySortOutput) ToPolicySortOutput() PolicySortOutput {
	return o
}

func (o PolicySortOutput) ToPolicySortOutputWithContext(ctx context.Context) PolicySortOutput {
	return o
}

func (o PolicySortOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySort) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o PolicySortOutput) ForceRecreate() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicySort) pulumi.StringOutput { return v.ForceRecreate }).(pulumi.StringOutput)
}

func (o PolicySortOutput) ManualOrders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicySort) pulumi.StringArrayOutput { return v.ManualOrders }).(pulumi.StringArrayOutput)
}

func (o PolicySortOutput) Sortby() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicySort) pulumi.StringOutput { return v.Sortby }).(pulumi.StringOutput)
}

func (o PolicySortOutput) Sortdirection() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicySort) pulumi.StringOutput { return v.Sortdirection }).(pulumi.StringOutput)
}

func (o PolicySortOutput) StatePolicyLists() PolicySortStatePolicyListArrayOutput {
	return o.ApplyT(func(v *PolicySort) PolicySortStatePolicyListArrayOutput { return v.StatePolicyLists }).(PolicySortStatePolicyListArrayOutput)
}

func (o PolicySortOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicySort) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o PolicySortOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySort) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type PolicySortArrayOutput struct{ *pulumi.OutputState }

func (PolicySortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicySort)(nil)).Elem()
}

func (o PolicySortArrayOutput) ToPolicySortArrayOutput() PolicySortArrayOutput {
	return o
}

func (o PolicySortArrayOutput) ToPolicySortArrayOutputWithContext(ctx context.Context) PolicySortArrayOutput {
	return o
}

func (o PolicySortArrayOutput) Index(i pulumi.IntInput) PolicySortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicySort {
		return vs[0].([]*PolicySort)[vs[1].(int)]
	}).(PolicySortOutput)
}

type PolicySortMapOutput struct{ *pulumi.OutputState }

func (PolicySortMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicySort)(nil)).Elem()
}

func (o PolicySortMapOutput) ToPolicySortMapOutput() PolicySortMapOutput {
	return o
}

func (o PolicySortMapOutput) ToPolicySortMapOutputWithContext(ctx context.Context) PolicySortMapOutput {
	return o
}

func (o PolicySortMapOutput) MapIndex(k pulumi.StringInput) PolicySortOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicySort {
		return vs[0].(map[string]*PolicySort)[vs[1].(string)]
	}).(PolicySortOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicySortInput)(nil)).Elem(), &PolicySort{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicySortArrayInput)(nil)).Elem(), PolicySortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicySortMapInput)(nil)).Elem(), PolicySortMap{})
	pulumi.RegisterOutputType(PolicySortOutput{})
	pulumi.RegisterOutputType(PolicySortArrayOutput{})
	pulumi.RegisterOutputType(PolicySortMapOutput{})
}
