// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure virtual IP for IPv4.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewVip(ctx, "trname", &firewall.VipArgs{
//				ArpReply:                 pulumi.String("enable"),
//				Color:                    pulumi.Int(0),
//				DnsMappingTtl:            pulumi.Int(0),
//				Extintf:                  pulumi.String("any"),
//				Extip:                    pulumi.String("1.0.0.1-1.0.0.2"),
//				Extport:                  pulumi.String("0-65535"),
//				Fosid:                    pulumi.Int(0),
//				HttpCookieAge:            pulumi.Int(60),
//				HttpCookieDomainFromHost: pulumi.String("disable"),
//				HttpCookieGeneration:     pulumi.Int(0),
//				HttpCookieShare:          pulumi.String("same-ip"),
//				HttpIpHeader:             pulumi.String("disable"),
//				HttpMultiplex:            pulumi.String("disable"),
//				HttpsCookieSecure:        pulumi.String("disable"),
//				LdbMethod:                pulumi.String("static"),
//				Mappedips: firewall.VipMappedipArray{
//					&firewall.VipMappedipArgs{
//						Range: pulumi.String("3.0.0.0-3.0.0.1"),
//					},
//				},
//				Mappedport:                   pulumi.String("0-65535"),
//				MaxEmbryonicConnections:      pulumi.Int(1000),
//				NatSourceVip:                 pulumi.String("disable"),
//				OutlookWebAccess:             pulumi.String("disable"),
//				Persistence:                  pulumi.String("none"),
//				Portforward:                  pulumi.String("disable"),
//				PortmappingType:              pulumi.String("1-to-1"),
//				Protocol:                     pulumi.String("tcp"),
//				SslAlgorithm:                 pulumi.String("high"),
//				SslClientFallback:            pulumi.String("enable"),
//				SslClientRenegotiation:       pulumi.String("secure"),
//				SslClientSessionStateMax:     pulumi.Int(1000),
//				SslClientSessionStateTimeout: pulumi.Int(30),
//				SslClientSessionStateType:    pulumi.String("both"),
//				SslDhBits:                    pulumi.String("2048"),
//				SslHpkp:                      pulumi.String("disable"),
//				SslHpkpAge:                   pulumi.Int(5184000),
//				SslHpkpIncludeSubdomains:     pulumi.String("disable"),
//				SslHsts:                      pulumi.String("disable"),
//				SslHstsAge:                   pulumi.Int(5184000),
//				SslHstsIncludeSubdomains:     pulumi.String("disable"),
//				SslHttpLocationConversion:    pulumi.String("disable"),
//				SslHttpMatchHost:             pulumi.String("enable"),
//				SslMaxVersion:                pulumi.String("tls-1.2"),
//				SslMinVersion:                pulumi.String("tls-1.1"),
//				SslMode:                      pulumi.String("half"),
//				SslPfs:                       pulumi.String("require"),
//				SslSendEmptyFrags:            pulumi.String("enable"),
//				SslServerAlgorithm:           pulumi.String("client"),
//				SslServerMaxVersion:          pulumi.String("client"),
//				SslServerMinVersion:          pulumi.String("client"),
//				SslServerSessionStateMax:     pulumi.Int(100),
//				SslServerSessionStateTimeout: pulumi.Int(60),
//				SslServerSessionStateType:    pulumi.String("both"),
//				Type:                         pulumi.String("static-nat"),
//				WeblogicServer:               pulumi.String("disable"),
//				WebsphereServer:              pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Firewall Vip can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/vip:Vip labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/vip:Vip labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Vip struct {
	pulumi.CustomResourceState

	// Enable/disable adding NAT46 route. Valid values: `disable`, `enable`.
	AddNat46Route pulumi.StringOutput `pulumi:"addNat46Route"`
	// Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
	ArpReply pulumi.StringOutput `pulumi:"arpReply"`
	// Color of icon on the GUI.
	Color pulumi.IntOutput `pulumi:"color"`
	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// DNS mapping TTL (Set to zero to use TTL in DNS response, default = 0).
	DnsMappingTtl pulumi.IntOutput `pulumi:"dnsMappingTtl"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// External FQDN address name. The structure of `extaddr` block is documented below.
	Extaddrs VipExtaddrArrayOutput `pulumi:"extaddrs"`
	// Interface connected to the source network that receives the packets that will be forwarded to the destination network.
	Extintf pulumi.StringOutput `pulumi:"extintf"`
	// IP address or address range on the external interface that you want to map to an address or address range on the destination network.
	Extip pulumi.StringOutput `pulumi:"extip"`
	// Incoming port number range that you want to map to a port number range on the destination network.
	Extport pulumi.StringOutput `pulumi:"extport"`
	// Custom defined ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Enable to have the VIP send gratuitous ARPs. 0=disabled. Set from 5 up to 8640000 seconds to enable.
	GratuitousArpInterval pulumi.IntOutput `pulumi:"gratuitousArpInterval"`
	// Domain to use when integrating with FortiGSLB.
	GslbDomainName pulumi.StringOutput `pulumi:"gslbDomainName"`
	// Hostname to use within the configured FortiGSLB domain.
	GslbHostname pulumi.StringOutput `pulumi:"gslbHostname"`
	// Publicly accessible IP addresses for the FortiGSLB service. The structure of `gslbPublicIps` block is documented below.
	GslbPublicIps VipGslbPublicIpArrayOutput `pulumi:"gslbPublicIps"`
	// Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
	H2Support pulumi.StringOutput `pulumi:"h2Support"`
	// Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
	H3Support pulumi.StringOutput `pulumi:"h3Support"`
	// Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
	HttpCookieAge pulumi.IntOutput `pulumi:"httpCookieAge"`
	// Domain that HTTP cookie persistence should apply to.
	HttpCookieDomain pulumi.StringOutput `pulumi:"httpCookieDomain"`
	// Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
	HttpCookieDomainFromHost pulumi.StringOutput `pulumi:"httpCookieDomainFromHost"`
	// Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
	HttpCookieGeneration pulumi.IntOutput `pulumi:"httpCookieGeneration"`
	// Limit HTTP cookie persistence to the specified path.
	HttpCookiePath pulumi.StringOutput `pulumi:"httpCookiePath"`
	// Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
	HttpCookieShare pulumi.StringOutput `pulumi:"httpCookieShare"`
	// For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
	HttpIpHeader pulumi.StringOutput `pulumi:"httpIpHeader"`
	// For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
	HttpIpHeaderName pulumi.StringOutput `pulumi:"httpIpHeaderName"`
	// Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
	HttpMultiplex pulumi.StringOutput `pulumi:"httpMultiplex"`
	// Maximum number of concurrent requests that a multiplex server can handle (default = unlimited).
	HttpMultiplexMaxConcurrentRequest pulumi.IntOutput `pulumi:"httpMultiplexMaxConcurrentRequest"`
	// Maximum number of requests that a multiplex server can handle before disconnecting sessions (default = unlimited).
	HttpMultiplexMaxRequest pulumi.IntOutput `pulumi:"httpMultiplexMaxRequest"`
	// Time-to-live for idle connections to servers.
	HttpMultiplexTtl pulumi.IntOutput `pulumi:"httpMultiplexTtl"`
	// Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
	HttpRedirect pulumi.StringOutput `pulumi:"httpRedirect"`
	// Maximum supported HTTP versions. default = HTTP2 Valid values: `http1`, `http2`.
	HttpSupportedMaxVersion pulumi.StringOutput `pulumi:"httpSupportedMaxVersion"`
	// Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
	HttpsCookieSecure pulumi.StringOutput `pulumi:"httpsCookieSecure"`
	// Start-mapped-IPv6-address [-end mapped-IPv6-address].
	Ipv6Mappedip pulumi.StringOutput `pulumi:"ipv6Mappedip"`
	// IPv6 port number range on the destination network to which the external port number range is mapped.
	Ipv6Mappedport pulumi.StringOutput `pulumi:"ipv6Mappedport"`
	// Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
	LdbMethod pulumi.StringOutput `pulumi:"ldbMethod"`
	// Mapped FQDN address name.
	MappedAddr pulumi.StringOutput `pulumi:"mappedAddr"`
	// IP address or address range on the destination network to which the external IP address is mapped. The structure of `mappedip` block is documented below.
	Mappedips VipMappedipArrayOutput `pulumi:"mappedips"`
	// Port number range on the destination network to which the external port number range is mapped.
	Mappedport pulumi.StringOutput `pulumi:"mappedport"`
	// Maximum number of incomplete connections.
	MaxEmbryonicConnections pulumi.IntOutput `pulumi:"maxEmbryonicConnections"`
	// Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
	Monitors VipMonitorArrayOutput `pulumi:"monitors"`
	// Virtual IP name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable NAT44. Valid values: `disable`, `enable`.
	Nat44 pulumi.StringOutput `pulumi:"nat44"`
	// Enable/disable NAT46. Valid values: `disable`, `enable`.
	Nat46 pulumi.StringOutput `pulumi:"nat46"`
	// Enable/disable forcing the source NAT mapped IP to the external IP for all traffic. Valid values: `disable`, `enable`.
	NatSourceVip pulumi.StringOutput `pulumi:"natSourceVip"`
	// Enable/disable one click GSLB server integration with FortiGSLB. Valid values: `disable`, `enable`.
	OneClickGslbServer pulumi.StringOutput `pulumi:"oneClickGslbServer"`
	// Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
	OutlookWebAccess pulumi.StringOutput `pulumi:"outlookWebAccess"`
	// Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
	Persistence pulumi.StringOutput `pulumi:"persistence"`
	// Enable/disable port forwarding. Valid values: `disable`, `enable`.
	Portforward pulumi.StringOutput `pulumi:"portforward"`
	// Port mapping type. Valid values: `1-to-1`, `m-to-n`.
	PortmappingType pulumi.StringOutput `pulumi:"portmappingType"`
	// Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`, `icmp`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// QUIC setting. The structure of `quic` block is documented below.
	Quic VipQuicOutput `pulumi:"quic"`
	// Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
	Realservers VipRealserverArrayOutput `pulumi:"realservers"`
	// Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
	ServerType pulumi.StringOutput `pulumi:"serverType"`
	// Service name. The structure of `service` block is documented below.
	Services VipServiceArrayOutput `pulumi:"services"`
	// Source address filter. Each address must be either an IP/subnet (x.x.x.x/n) or a range (x.x.x.x-y.y.y.y). Separate addresses with spaces. The structure of `srcFilter` block is documented below.
	SrcFilters VipSrcFilterArrayOutput `pulumi:"srcFilters"`
	// Interfaces to which the VIP applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
	SrcintfFilters VipSrcintfFilterArrayOutput `pulumi:"srcintfFilters"`
	// Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
	SslAcceptFfdheGroups pulumi.StringOutput `pulumi:"sslAcceptFfdheGroups"`
	// Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
	SslAlgorithm pulumi.StringOutput `pulumi:"sslAlgorithm"`
	// The name of the SSL certificate to use for SSL acceleration.
	SslCertificate pulumi.StringOutput `pulumi:"sslCertificate"`
	// SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `sslCipherSuites` block is documented below.
	SslCipherSuites VipSslCipherSuiteArrayOutput `pulumi:"sslCipherSuites"`
	// Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
	SslClientFallback pulumi.StringOutput `pulumi:"sslClientFallback"`
	// Maximum length of data in MB before triggering a client rekey (0 = disable).
	SslClientRekeyCount pulumi.IntOutput `pulumi:"sslClientRekeyCount"`
	// Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
	SslClientRenegotiation pulumi.StringOutput `pulumi:"sslClientRenegotiation"`
	// Maximum number of client to FortiGate SSL session states to keep.
	SslClientSessionStateMax pulumi.IntOutput `pulumi:"sslClientSessionStateMax"`
	// Number of minutes to keep client to FortiGate SSL session state.
	SslClientSessionStateTimeout pulumi.IntOutput `pulumi:"sslClientSessionStateTimeout"`
	// How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslClientSessionStateType pulumi.StringOutput `pulumi:"sslClientSessionStateType"`
	// Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
	SslDhBits pulumi.StringOutput `pulumi:"sslDhBits"`
	// Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
	SslHpkp pulumi.StringOutput `pulumi:"sslHpkp"`
	// Number of seconds the client should honour the HPKP setting.
	SslHpkpAge pulumi.IntOutput `pulumi:"sslHpkpAge"`
	// Certificate to generate backup HPKP pin from.
	SslHpkpBackup pulumi.StringOutput `pulumi:"sslHpkpBackup"`
	// Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHpkpIncludeSubdomains pulumi.StringOutput `pulumi:"sslHpkpIncludeSubdomains"`
	// Certificate to generate primary HPKP pin from.
	SslHpkpPrimary pulumi.StringOutput `pulumi:"sslHpkpPrimary"`
	// URL to report HPKP violations to.
	SslHpkpReportUri pulumi.StringPtrOutput `pulumi:"sslHpkpReportUri"`
	// Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
	SslHsts pulumi.StringOutput `pulumi:"sslHsts"`
	// Number of seconds the client should honour the HSTS setting.
	SslHstsAge pulumi.IntOutput `pulumi:"sslHstsAge"`
	// Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHstsIncludeSubdomains pulumi.StringOutput `pulumi:"sslHstsIncludeSubdomains"`
	// Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
	SslHttpLocationConversion pulumi.StringOutput `pulumi:"sslHttpLocationConversion"`
	// Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
	SslHttpMatchHost pulumi.StringOutput `pulumi:"sslHttpMatchHost"`
	// Highest SSL/TLS version acceptable from a client.
	SslMaxVersion pulumi.StringOutput `pulumi:"sslMaxVersion"`
	// Lowest SSL/TLS version acceptable from a client.
	SslMinVersion pulumi.StringOutput `pulumi:"sslMinVersion"`
	// Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
	SslMode pulumi.StringOutput `pulumi:"sslMode"`
	// Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
	SslPfs pulumi.StringOutput `pulumi:"sslPfs"`
	// Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
	SslSendEmptyFrags pulumi.StringOutput `pulumi:"sslSendEmptyFrags"`
	// Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
	SslServerAlgorithm pulumi.StringOutput `pulumi:"sslServerAlgorithm"`
	// SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslServerCipherSuites` block is documented below.
	SslServerCipherSuites VipSslServerCipherSuiteArrayOutput `pulumi:"sslServerCipherSuites"`
	// Highest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMaxVersion pulumi.StringOutput `pulumi:"sslServerMaxVersion"`
	// Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMinVersion pulumi.StringOutput `pulumi:"sslServerMinVersion"`
	// Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
	SslServerRenegotiation pulumi.StringOutput `pulumi:"sslServerRenegotiation"`
	// Maximum number of FortiGate to Server SSL session states to keep.
	SslServerSessionStateMax pulumi.IntOutput `pulumi:"sslServerSessionStateMax"`
	// Number of minutes to keep FortiGate to Server SSL session state.
	SslServerSessionStateTimeout pulumi.IntOutput `pulumi:"sslServerSessionStateTimeout"`
	// How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslServerSessionStateType pulumi.StringOutput `pulumi:"sslServerSessionStateType"`
	// Enable/disable VIP. Valid values: `disable`, `enable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Configure a static NAT, load balance, server load balance, DNS translation, or FQDN VIP.
	Type pulumi.StringOutput `pulumi:"type"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
	WeblogicServer pulumi.StringOutput `pulumi:"weblogicServer"`
	// Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
	WebsphereServer pulumi.StringOutput `pulumi:"websphereServer"`
}

// NewVip registers a new resource with the given unique name, arguments, and options.
func NewVip(ctx *pulumi.Context,
	name string, args *VipArgs, opts ...pulumi.ResourceOption) (*Vip, error) {
	if args == nil {
		args = &VipArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vip
	err := ctx.RegisterResource("fortios:firewall/vip:Vip", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVip gets an existing Vip resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVip(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VipState, opts ...pulumi.ResourceOption) (*Vip, error) {
	var resource Vip
	err := ctx.ReadResource("fortios:firewall/vip:Vip", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vip resources.
type vipState struct {
	// Enable/disable adding NAT46 route. Valid values: `disable`, `enable`.
	AddNat46Route *string `pulumi:"addNat46Route"`
	// Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
	ArpReply *string `pulumi:"arpReply"`
	// Color of icon on the GUI.
	Color *int `pulumi:"color"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// DNS mapping TTL (Set to zero to use TTL in DNS response, default = 0).
	DnsMappingTtl *int `pulumi:"dnsMappingTtl"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// External FQDN address name. The structure of `extaddr` block is documented below.
	Extaddrs []VipExtaddr `pulumi:"extaddrs"`
	// Interface connected to the source network that receives the packets that will be forwarded to the destination network.
	Extintf *string `pulumi:"extintf"`
	// IP address or address range on the external interface that you want to map to an address or address range on the destination network.
	Extip *string `pulumi:"extip"`
	// Incoming port number range that you want to map to a port number range on the destination network.
	Extport *string `pulumi:"extport"`
	// Custom defined ID.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable to have the VIP send gratuitous ARPs. 0=disabled. Set from 5 up to 8640000 seconds to enable.
	GratuitousArpInterval *int `pulumi:"gratuitousArpInterval"`
	// Domain to use when integrating with FortiGSLB.
	GslbDomainName *string `pulumi:"gslbDomainName"`
	// Hostname to use within the configured FortiGSLB domain.
	GslbHostname *string `pulumi:"gslbHostname"`
	// Publicly accessible IP addresses for the FortiGSLB service. The structure of `gslbPublicIps` block is documented below.
	GslbPublicIps []VipGslbPublicIp `pulumi:"gslbPublicIps"`
	// Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
	H2Support *string `pulumi:"h2Support"`
	// Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
	H3Support *string `pulumi:"h3Support"`
	// Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
	HttpCookieAge *int `pulumi:"httpCookieAge"`
	// Domain that HTTP cookie persistence should apply to.
	HttpCookieDomain *string `pulumi:"httpCookieDomain"`
	// Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
	HttpCookieDomainFromHost *string `pulumi:"httpCookieDomainFromHost"`
	// Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
	HttpCookieGeneration *int `pulumi:"httpCookieGeneration"`
	// Limit HTTP cookie persistence to the specified path.
	HttpCookiePath *string `pulumi:"httpCookiePath"`
	// Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
	HttpCookieShare *string `pulumi:"httpCookieShare"`
	// For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
	HttpIpHeader *string `pulumi:"httpIpHeader"`
	// For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
	HttpIpHeaderName *string `pulumi:"httpIpHeaderName"`
	// Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
	HttpMultiplex *string `pulumi:"httpMultiplex"`
	// Maximum number of concurrent requests that a multiplex server can handle (default = unlimited).
	HttpMultiplexMaxConcurrentRequest *int `pulumi:"httpMultiplexMaxConcurrentRequest"`
	// Maximum number of requests that a multiplex server can handle before disconnecting sessions (default = unlimited).
	HttpMultiplexMaxRequest *int `pulumi:"httpMultiplexMaxRequest"`
	// Time-to-live for idle connections to servers.
	HttpMultiplexTtl *int `pulumi:"httpMultiplexTtl"`
	// Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
	HttpRedirect *string `pulumi:"httpRedirect"`
	// Maximum supported HTTP versions. default = HTTP2 Valid values: `http1`, `http2`.
	HttpSupportedMaxVersion *string `pulumi:"httpSupportedMaxVersion"`
	// Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
	HttpsCookieSecure *string `pulumi:"httpsCookieSecure"`
	// Start-mapped-IPv6-address [-end mapped-IPv6-address].
	Ipv6Mappedip *string `pulumi:"ipv6Mappedip"`
	// IPv6 port number range on the destination network to which the external port number range is mapped.
	Ipv6Mappedport *string `pulumi:"ipv6Mappedport"`
	// Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
	LdbMethod *string `pulumi:"ldbMethod"`
	// Mapped FQDN address name.
	MappedAddr *string `pulumi:"mappedAddr"`
	// IP address or address range on the destination network to which the external IP address is mapped. The structure of `mappedip` block is documented below.
	Mappedips []VipMappedip `pulumi:"mappedips"`
	// Port number range on the destination network to which the external port number range is mapped.
	Mappedport *string `pulumi:"mappedport"`
	// Maximum number of incomplete connections.
	MaxEmbryonicConnections *int `pulumi:"maxEmbryonicConnections"`
	// Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
	Monitors []VipMonitor `pulumi:"monitors"`
	// Virtual IP name.
	Name *string `pulumi:"name"`
	// Enable/disable NAT44. Valid values: `disable`, `enable`.
	Nat44 *string `pulumi:"nat44"`
	// Enable/disable NAT46. Valid values: `disable`, `enable`.
	Nat46 *string `pulumi:"nat46"`
	// Enable/disable forcing the source NAT mapped IP to the external IP for all traffic. Valid values: `disable`, `enable`.
	NatSourceVip *string `pulumi:"natSourceVip"`
	// Enable/disable one click GSLB server integration with FortiGSLB. Valid values: `disable`, `enable`.
	OneClickGslbServer *string `pulumi:"oneClickGslbServer"`
	// Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
	OutlookWebAccess *string `pulumi:"outlookWebAccess"`
	// Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
	Persistence *string `pulumi:"persistence"`
	// Enable/disable port forwarding. Valid values: `disable`, `enable`.
	Portforward *string `pulumi:"portforward"`
	// Port mapping type. Valid values: `1-to-1`, `m-to-n`.
	PortmappingType *string `pulumi:"portmappingType"`
	// Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`, `icmp`.
	Protocol *string `pulumi:"protocol"`
	// QUIC setting. The structure of `quic` block is documented below.
	Quic *VipQuic `pulumi:"quic"`
	// Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
	Realservers []VipRealserver `pulumi:"realservers"`
	// Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
	ServerType *string `pulumi:"serverType"`
	// Service name. The structure of `service` block is documented below.
	Services []VipService `pulumi:"services"`
	// Source address filter. Each address must be either an IP/subnet (x.x.x.x/n) or a range (x.x.x.x-y.y.y.y). Separate addresses with spaces. The structure of `srcFilter` block is documented below.
	SrcFilters []VipSrcFilter `pulumi:"srcFilters"`
	// Interfaces to which the VIP applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
	SrcintfFilters []VipSrcintfFilter `pulumi:"srcintfFilters"`
	// Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
	SslAcceptFfdheGroups *string `pulumi:"sslAcceptFfdheGroups"`
	// Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
	SslAlgorithm *string `pulumi:"sslAlgorithm"`
	// The name of the SSL certificate to use for SSL acceleration.
	SslCertificate *string `pulumi:"sslCertificate"`
	// SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `sslCipherSuites` block is documented below.
	SslCipherSuites []VipSslCipherSuite `pulumi:"sslCipherSuites"`
	// Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
	SslClientFallback *string `pulumi:"sslClientFallback"`
	// Maximum length of data in MB before triggering a client rekey (0 = disable).
	SslClientRekeyCount *int `pulumi:"sslClientRekeyCount"`
	// Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
	SslClientRenegotiation *string `pulumi:"sslClientRenegotiation"`
	// Maximum number of client to FortiGate SSL session states to keep.
	SslClientSessionStateMax *int `pulumi:"sslClientSessionStateMax"`
	// Number of minutes to keep client to FortiGate SSL session state.
	SslClientSessionStateTimeout *int `pulumi:"sslClientSessionStateTimeout"`
	// How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslClientSessionStateType *string `pulumi:"sslClientSessionStateType"`
	// Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
	SslDhBits *string `pulumi:"sslDhBits"`
	// Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
	SslHpkp *string `pulumi:"sslHpkp"`
	// Number of seconds the client should honour the HPKP setting.
	SslHpkpAge *int `pulumi:"sslHpkpAge"`
	// Certificate to generate backup HPKP pin from.
	SslHpkpBackup *string `pulumi:"sslHpkpBackup"`
	// Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHpkpIncludeSubdomains *string `pulumi:"sslHpkpIncludeSubdomains"`
	// Certificate to generate primary HPKP pin from.
	SslHpkpPrimary *string `pulumi:"sslHpkpPrimary"`
	// URL to report HPKP violations to.
	SslHpkpReportUri *string `pulumi:"sslHpkpReportUri"`
	// Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
	SslHsts *string `pulumi:"sslHsts"`
	// Number of seconds the client should honour the HSTS setting.
	SslHstsAge *int `pulumi:"sslHstsAge"`
	// Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHstsIncludeSubdomains *string `pulumi:"sslHstsIncludeSubdomains"`
	// Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
	SslHttpLocationConversion *string `pulumi:"sslHttpLocationConversion"`
	// Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
	SslHttpMatchHost *string `pulumi:"sslHttpMatchHost"`
	// Highest SSL/TLS version acceptable from a client.
	SslMaxVersion *string `pulumi:"sslMaxVersion"`
	// Lowest SSL/TLS version acceptable from a client.
	SslMinVersion *string `pulumi:"sslMinVersion"`
	// Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
	SslMode *string `pulumi:"sslMode"`
	// Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
	SslPfs *string `pulumi:"sslPfs"`
	// Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
	SslSendEmptyFrags *string `pulumi:"sslSendEmptyFrags"`
	// Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
	SslServerAlgorithm *string `pulumi:"sslServerAlgorithm"`
	// SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslServerCipherSuites` block is documented below.
	SslServerCipherSuites []VipSslServerCipherSuite `pulumi:"sslServerCipherSuites"`
	// Highest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMaxVersion *string `pulumi:"sslServerMaxVersion"`
	// Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMinVersion *string `pulumi:"sslServerMinVersion"`
	// Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
	SslServerRenegotiation *string `pulumi:"sslServerRenegotiation"`
	// Maximum number of FortiGate to Server SSL session states to keep.
	SslServerSessionStateMax *int `pulumi:"sslServerSessionStateMax"`
	// Number of minutes to keep FortiGate to Server SSL session state.
	SslServerSessionStateTimeout *int `pulumi:"sslServerSessionStateTimeout"`
	// How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslServerSessionStateType *string `pulumi:"sslServerSessionStateType"`
	// Enable/disable VIP. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// Configure a static NAT, load balance, server load balance, DNS translation, or FQDN VIP.
	Type *string `pulumi:"type"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
	WeblogicServer *string `pulumi:"weblogicServer"`
	// Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
	WebsphereServer *string `pulumi:"websphereServer"`
}

type VipState struct {
	// Enable/disable adding NAT46 route. Valid values: `disable`, `enable`.
	AddNat46Route pulumi.StringPtrInput
	// Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
	ArpReply pulumi.StringPtrInput
	// Color of icon on the GUI.
	Color pulumi.IntPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// DNS mapping TTL (Set to zero to use TTL in DNS response, default = 0).
	DnsMappingTtl pulumi.IntPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// External FQDN address name. The structure of `extaddr` block is documented below.
	Extaddrs VipExtaddrArrayInput
	// Interface connected to the source network that receives the packets that will be forwarded to the destination network.
	Extintf pulumi.StringPtrInput
	// IP address or address range on the external interface that you want to map to an address or address range on the destination network.
	Extip pulumi.StringPtrInput
	// Incoming port number range that you want to map to a port number range on the destination network.
	Extport pulumi.StringPtrInput
	// Custom defined ID.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable to have the VIP send gratuitous ARPs. 0=disabled. Set from 5 up to 8640000 seconds to enable.
	GratuitousArpInterval pulumi.IntPtrInput
	// Domain to use when integrating with FortiGSLB.
	GslbDomainName pulumi.StringPtrInput
	// Hostname to use within the configured FortiGSLB domain.
	GslbHostname pulumi.StringPtrInput
	// Publicly accessible IP addresses for the FortiGSLB service. The structure of `gslbPublicIps` block is documented below.
	GslbPublicIps VipGslbPublicIpArrayInput
	// Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
	H2Support pulumi.StringPtrInput
	// Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
	H3Support pulumi.StringPtrInput
	// Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
	HttpCookieAge pulumi.IntPtrInput
	// Domain that HTTP cookie persistence should apply to.
	HttpCookieDomain pulumi.StringPtrInput
	// Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
	HttpCookieDomainFromHost pulumi.StringPtrInput
	// Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
	HttpCookieGeneration pulumi.IntPtrInput
	// Limit HTTP cookie persistence to the specified path.
	HttpCookiePath pulumi.StringPtrInput
	// Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
	HttpCookieShare pulumi.StringPtrInput
	// For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
	HttpIpHeader pulumi.StringPtrInput
	// For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
	HttpIpHeaderName pulumi.StringPtrInput
	// Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
	HttpMultiplex pulumi.StringPtrInput
	// Maximum number of concurrent requests that a multiplex server can handle (default = unlimited).
	HttpMultiplexMaxConcurrentRequest pulumi.IntPtrInput
	// Maximum number of requests that a multiplex server can handle before disconnecting sessions (default = unlimited).
	HttpMultiplexMaxRequest pulumi.IntPtrInput
	// Time-to-live for idle connections to servers.
	HttpMultiplexTtl pulumi.IntPtrInput
	// Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
	HttpRedirect pulumi.StringPtrInput
	// Maximum supported HTTP versions. default = HTTP2 Valid values: `http1`, `http2`.
	HttpSupportedMaxVersion pulumi.StringPtrInput
	// Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
	HttpsCookieSecure pulumi.StringPtrInput
	// Start-mapped-IPv6-address [-end mapped-IPv6-address].
	Ipv6Mappedip pulumi.StringPtrInput
	// IPv6 port number range on the destination network to which the external port number range is mapped.
	Ipv6Mappedport pulumi.StringPtrInput
	// Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
	LdbMethod pulumi.StringPtrInput
	// Mapped FQDN address name.
	MappedAddr pulumi.StringPtrInput
	// IP address or address range on the destination network to which the external IP address is mapped. The structure of `mappedip` block is documented below.
	Mappedips VipMappedipArrayInput
	// Port number range on the destination network to which the external port number range is mapped.
	Mappedport pulumi.StringPtrInput
	// Maximum number of incomplete connections.
	MaxEmbryonicConnections pulumi.IntPtrInput
	// Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
	Monitors VipMonitorArrayInput
	// Virtual IP name.
	Name pulumi.StringPtrInput
	// Enable/disable NAT44. Valid values: `disable`, `enable`.
	Nat44 pulumi.StringPtrInput
	// Enable/disable NAT46. Valid values: `disable`, `enable`.
	Nat46 pulumi.StringPtrInput
	// Enable/disable forcing the source NAT mapped IP to the external IP for all traffic. Valid values: `disable`, `enable`.
	NatSourceVip pulumi.StringPtrInput
	// Enable/disable one click GSLB server integration with FortiGSLB. Valid values: `disable`, `enable`.
	OneClickGslbServer pulumi.StringPtrInput
	// Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
	OutlookWebAccess pulumi.StringPtrInput
	// Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
	Persistence pulumi.StringPtrInput
	// Enable/disable port forwarding. Valid values: `disable`, `enable`.
	Portforward pulumi.StringPtrInput
	// Port mapping type. Valid values: `1-to-1`, `m-to-n`.
	PortmappingType pulumi.StringPtrInput
	// Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`, `icmp`.
	Protocol pulumi.StringPtrInput
	// QUIC setting. The structure of `quic` block is documented below.
	Quic VipQuicPtrInput
	// Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
	Realservers VipRealserverArrayInput
	// Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
	ServerType pulumi.StringPtrInput
	// Service name. The structure of `service` block is documented below.
	Services VipServiceArrayInput
	// Source address filter. Each address must be either an IP/subnet (x.x.x.x/n) or a range (x.x.x.x-y.y.y.y). Separate addresses with spaces. The structure of `srcFilter` block is documented below.
	SrcFilters VipSrcFilterArrayInput
	// Interfaces to which the VIP applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
	SrcintfFilters VipSrcintfFilterArrayInput
	// Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
	SslAcceptFfdheGroups pulumi.StringPtrInput
	// Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
	SslAlgorithm pulumi.StringPtrInput
	// The name of the SSL certificate to use for SSL acceleration.
	SslCertificate pulumi.StringPtrInput
	// SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `sslCipherSuites` block is documented below.
	SslCipherSuites VipSslCipherSuiteArrayInput
	// Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
	SslClientFallback pulumi.StringPtrInput
	// Maximum length of data in MB before triggering a client rekey (0 = disable).
	SslClientRekeyCount pulumi.IntPtrInput
	// Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
	SslClientRenegotiation pulumi.StringPtrInput
	// Maximum number of client to FortiGate SSL session states to keep.
	SslClientSessionStateMax pulumi.IntPtrInput
	// Number of minutes to keep client to FortiGate SSL session state.
	SslClientSessionStateTimeout pulumi.IntPtrInput
	// How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslClientSessionStateType pulumi.StringPtrInput
	// Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
	SslDhBits pulumi.StringPtrInput
	// Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
	SslHpkp pulumi.StringPtrInput
	// Number of seconds the client should honour the HPKP setting.
	SslHpkpAge pulumi.IntPtrInput
	// Certificate to generate backup HPKP pin from.
	SslHpkpBackup pulumi.StringPtrInput
	// Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHpkpIncludeSubdomains pulumi.StringPtrInput
	// Certificate to generate primary HPKP pin from.
	SslHpkpPrimary pulumi.StringPtrInput
	// URL to report HPKP violations to.
	SslHpkpReportUri pulumi.StringPtrInput
	// Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
	SslHsts pulumi.StringPtrInput
	// Number of seconds the client should honour the HSTS setting.
	SslHstsAge pulumi.IntPtrInput
	// Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHstsIncludeSubdomains pulumi.StringPtrInput
	// Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
	SslHttpLocationConversion pulumi.StringPtrInput
	// Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
	SslHttpMatchHost pulumi.StringPtrInput
	// Highest SSL/TLS version acceptable from a client.
	SslMaxVersion pulumi.StringPtrInput
	// Lowest SSL/TLS version acceptable from a client.
	SslMinVersion pulumi.StringPtrInput
	// Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
	SslMode pulumi.StringPtrInput
	// Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
	SslPfs pulumi.StringPtrInput
	// Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
	SslSendEmptyFrags pulumi.StringPtrInput
	// Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
	SslServerAlgorithm pulumi.StringPtrInput
	// SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslServerCipherSuites` block is documented below.
	SslServerCipherSuites VipSslServerCipherSuiteArrayInput
	// Highest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMaxVersion pulumi.StringPtrInput
	// Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMinVersion pulumi.StringPtrInput
	// Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
	SslServerRenegotiation pulumi.StringPtrInput
	// Maximum number of FortiGate to Server SSL session states to keep.
	SslServerSessionStateMax pulumi.IntPtrInput
	// Number of minutes to keep FortiGate to Server SSL session state.
	SslServerSessionStateTimeout pulumi.IntPtrInput
	// How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslServerSessionStateType pulumi.StringPtrInput
	// Enable/disable VIP. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput
	// Configure a static NAT, load balance, server load balance, DNS translation, or FQDN VIP.
	Type pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
	WeblogicServer pulumi.StringPtrInput
	// Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
	WebsphereServer pulumi.StringPtrInput
}

func (VipState) ElementType() reflect.Type {
	return reflect.TypeOf((*vipState)(nil)).Elem()
}

type vipArgs struct {
	// Enable/disable adding NAT46 route. Valid values: `disable`, `enable`.
	AddNat46Route *string `pulumi:"addNat46Route"`
	// Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
	ArpReply *string `pulumi:"arpReply"`
	// Color of icon on the GUI.
	Color *int `pulumi:"color"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// DNS mapping TTL (Set to zero to use TTL in DNS response, default = 0).
	DnsMappingTtl *int `pulumi:"dnsMappingTtl"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// External FQDN address name. The structure of `extaddr` block is documented below.
	Extaddrs []VipExtaddr `pulumi:"extaddrs"`
	// Interface connected to the source network that receives the packets that will be forwarded to the destination network.
	Extintf *string `pulumi:"extintf"`
	// IP address or address range on the external interface that you want to map to an address or address range on the destination network.
	Extip *string `pulumi:"extip"`
	// Incoming port number range that you want to map to a port number range on the destination network.
	Extport *string `pulumi:"extport"`
	// Custom defined ID.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable to have the VIP send gratuitous ARPs. 0=disabled. Set from 5 up to 8640000 seconds to enable.
	GratuitousArpInterval *int `pulumi:"gratuitousArpInterval"`
	// Domain to use when integrating with FortiGSLB.
	GslbDomainName *string `pulumi:"gslbDomainName"`
	// Hostname to use within the configured FortiGSLB domain.
	GslbHostname *string `pulumi:"gslbHostname"`
	// Publicly accessible IP addresses for the FortiGSLB service. The structure of `gslbPublicIps` block is documented below.
	GslbPublicIps []VipGslbPublicIp `pulumi:"gslbPublicIps"`
	// Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
	H2Support *string `pulumi:"h2Support"`
	// Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
	H3Support *string `pulumi:"h3Support"`
	// Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
	HttpCookieAge *int `pulumi:"httpCookieAge"`
	// Domain that HTTP cookie persistence should apply to.
	HttpCookieDomain *string `pulumi:"httpCookieDomain"`
	// Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
	HttpCookieDomainFromHost *string `pulumi:"httpCookieDomainFromHost"`
	// Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
	HttpCookieGeneration *int `pulumi:"httpCookieGeneration"`
	// Limit HTTP cookie persistence to the specified path.
	HttpCookiePath *string `pulumi:"httpCookiePath"`
	// Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
	HttpCookieShare *string `pulumi:"httpCookieShare"`
	// For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
	HttpIpHeader *string `pulumi:"httpIpHeader"`
	// For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
	HttpIpHeaderName *string `pulumi:"httpIpHeaderName"`
	// Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
	HttpMultiplex *string `pulumi:"httpMultiplex"`
	// Maximum number of concurrent requests that a multiplex server can handle (default = unlimited).
	HttpMultiplexMaxConcurrentRequest *int `pulumi:"httpMultiplexMaxConcurrentRequest"`
	// Maximum number of requests that a multiplex server can handle before disconnecting sessions (default = unlimited).
	HttpMultiplexMaxRequest *int `pulumi:"httpMultiplexMaxRequest"`
	// Time-to-live for idle connections to servers.
	HttpMultiplexTtl *int `pulumi:"httpMultiplexTtl"`
	// Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
	HttpRedirect *string `pulumi:"httpRedirect"`
	// Maximum supported HTTP versions. default = HTTP2 Valid values: `http1`, `http2`.
	HttpSupportedMaxVersion *string `pulumi:"httpSupportedMaxVersion"`
	// Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
	HttpsCookieSecure *string `pulumi:"httpsCookieSecure"`
	// Start-mapped-IPv6-address [-end mapped-IPv6-address].
	Ipv6Mappedip *string `pulumi:"ipv6Mappedip"`
	// IPv6 port number range on the destination network to which the external port number range is mapped.
	Ipv6Mappedport *string `pulumi:"ipv6Mappedport"`
	// Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
	LdbMethod *string `pulumi:"ldbMethod"`
	// Mapped FQDN address name.
	MappedAddr *string `pulumi:"mappedAddr"`
	// IP address or address range on the destination network to which the external IP address is mapped. The structure of `mappedip` block is documented below.
	Mappedips []VipMappedip `pulumi:"mappedips"`
	// Port number range on the destination network to which the external port number range is mapped.
	Mappedport *string `pulumi:"mappedport"`
	// Maximum number of incomplete connections.
	MaxEmbryonicConnections *int `pulumi:"maxEmbryonicConnections"`
	// Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
	Monitors []VipMonitor `pulumi:"monitors"`
	// Virtual IP name.
	Name *string `pulumi:"name"`
	// Enable/disable NAT44. Valid values: `disable`, `enable`.
	Nat44 *string `pulumi:"nat44"`
	// Enable/disable NAT46. Valid values: `disable`, `enable`.
	Nat46 *string `pulumi:"nat46"`
	// Enable/disable forcing the source NAT mapped IP to the external IP for all traffic. Valid values: `disable`, `enable`.
	NatSourceVip *string `pulumi:"natSourceVip"`
	// Enable/disable one click GSLB server integration with FortiGSLB. Valid values: `disable`, `enable`.
	OneClickGslbServer *string `pulumi:"oneClickGslbServer"`
	// Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
	OutlookWebAccess *string `pulumi:"outlookWebAccess"`
	// Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
	Persistence *string `pulumi:"persistence"`
	// Enable/disable port forwarding. Valid values: `disable`, `enable`.
	Portforward *string `pulumi:"portforward"`
	// Port mapping type. Valid values: `1-to-1`, `m-to-n`.
	PortmappingType *string `pulumi:"portmappingType"`
	// Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`, `icmp`.
	Protocol *string `pulumi:"protocol"`
	// QUIC setting. The structure of `quic` block is documented below.
	Quic *VipQuic `pulumi:"quic"`
	// Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
	Realservers []VipRealserver `pulumi:"realservers"`
	// Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
	ServerType *string `pulumi:"serverType"`
	// Service name. The structure of `service` block is documented below.
	Services []VipService `pulumi:"services"`
	// Source address filter. Each address must be either an IP/subnet (x.x.x.x/n) or a range (x.x.x.x-y.y.y.y). Separate addresses with spaces. The structure of `srcFilter` block is documented below.
	SrcFilters []VipSrcFilter `pulumi:"srcFilters"`
	// Interfaces to which the VIP applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
	SrcintfFilters []VipSrcintfFilter `pulumi:"srcintfFilters"`
	// Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
	SslAcceptFfdheGroups *string `pulumi:"sslAcceptFfdheGroups"`
	// Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
	SslAlgorithm *string `pulumi:"sslAlgorithm"`
	// The name of the SSL certificate to use for SSL acceleration.
	SslCertificate *string `pulumi:"sslCertificate"`
	// SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `sslCipherSuites` block is documented below.
	SslCipherSuites []VipSslCipherSuite `pulumi:"sslCipherSuites"`
	// Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
	SslClientFallback *string `pulumi:"sslClientFallback"`
	// Maximum length of data in MB before triggering a client rekey (0 = disable).
	SslClientRekeyCount *int `pulumi:"sslClientRekeyCount"`
	// Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
	SslClientRenegotiation *string `pulumi:"sslClientRenegotiation"`
	// Maximum number of client to FortiGate SSL session states to keep.
	SslClientSessionStateMax *int `pulumi:"sslClientSessionStateMax"`
	// Number of minutes to keep client to FortiGate SSL session state.
	SslClientSessionStateTimeout *int `pulumi:"sslClientSessionStateTimeout"`
	// How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslClientSessionStateType *string `pulumi:"sslClientSessionStateType"`
	// Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
	SslDhBits *string `pulumi:"sslDhBits"`
	// Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
	SslHpkp *string `pulumi:"sslHpkp"`
	// Number of seconds the client should honour the HPKP setting.
	SslHpkpAge *int `pulumi:"sslHpkpAge"`
	// Certificate to generate backup HPKP pin from.
	SslHpkpBackup *string `pulumi:"sslHpkpBackup"`
	// Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHpkpIncludeSubdomains *string `pulumi:"sslHpkpIncludeSubdomains"`
	// Certificate to generate primary HPKP pin from.
	SslHpkpPrimary *string `pulumi:"sslHpkpPrimary"`
	// URL to report HPKP violations to.
	SslHpkpReportUri *string `pulumi:"sslHpkpReportUri"`
	// Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
	SslHsts *string `pulumi:"sslHsts"`
	// Number of seconds the client should honour the HSTS setting.
	SslHstsAge *int `pulumi:"sslHstsAge"`
	// Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHstsIncludeSubdomains *string `pulumi:"sslHstsIncludeSubdomains"`
	// Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
	SslHttpLocationConversion *string `pulumi:"sslHttpLocationConversion"`
	// Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
	SslHttpMatchHost *string `pulumi:"sslHttpMatchHost"`
	// Highest SSL/TLS version acceptable from a client.
	SslMaxVersion *string `pulumi:"sslMaxVersion"`
	// Lowest SSL/TLS version acceptable from a client.
	SslMinVersion *string `pulumi:"sslMinVersion"`
	// Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
	SslMode *string `pulumi:"sslMode"`
	// Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
	SslPfs *string `pulumi:"sslPfs"`
	// Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
	SslSendEmptyFrags *string `pulumi:"sslSendEmptyFrags"`
	// Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
	SslServerAlgorithm *string `pulumi:"sslServerAlgorithm"`
	// SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslServerCipherSuites` block is documented below.
	SslServerCipherSuites []VipSslServerCipherSuite `pulumi:"sslServerCipherSuites"`
	// Highest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMaxVersion *string `pulumi:"sslServerMaxVersion"`
	// Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMinVersion *string `pulumi:"sslServerMinVersion"`
	// Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
	SslServerRenegotiation *string `pulumi:"sslServerRenegotiation"`
	// Maximum number of FortiGate to Server SSL session states to keep.
	SslServerSessionStateMax *int `pulumi:"sslServerSessionStateMax"`
	// Number of minutes to keep FortiGate to Server SSL session state.
	SslServerSessionStateTimeout *int `pulumi:"sslServerSessionStateTimeout"`
	// How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslServerSessionStateType *string `pulumi:"sslServerSessionStateType"`
	// Enable/disable VIP. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// Configure a static NAT, load balance, server load balance, DNS translation, or FQDN VIP.
	Type *string `pulumi:"type"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
	WeblogicServer *string `pulumi:"weblogicServer"`
	// Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
	WebsphereServer *string `pulumi:"websphereServer"`
}

// The set of arguments for constructing a Vip resource.
type VipArgs struct {
	// Enable/disable adding NAT46 route. Valid values: `disable`, `enable`.
	AddNat46Route pulumi.StringPtrInput
	// Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
	ArpReply pulumi.StringPtrInput
	// Color of icon on the GUI.
	Color pulumi.IntPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// DNS mapping TTL (Set to zero to use TTL in DNS response, default = 0).
	DnsMappingTtl pulumi.IntPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// External FQDN address name. The structure of `extaddr` block is documented below.
	Extaddrs VipExtaddrArrayInput
	// Interface connected to the source network that receives the packets that will be forwarded to the destination network.
	Extintf pulumi.StringPtrInput
	// IP address or address range on the external interface that you want to map to an address or address range on the destination network.
	Extip pulumi.StringPtrInput
	// Incoming port number range that you want to map to a port number range on the destination network.
	Extport pulumi.StringPtrInput
	// Custom defined ID.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable to have the VIP send gratuitous ARPs. 0=disabled. Set from 5 up to 8640000 seconds to enable.
	GratuitousArpInterval pulumi.IntPtrInput
	// Domain to use when integrating with FortiGSLB.
	GslbDomainName pulumi.StringPtrInput
	// Hostname to use within the configured FortiGSLB domain.
	GslbHostname pulumi.StringPtrInput
	// Publicly accessible IP addresses for the FortiGSLB service. The structure of `gslbPublicIps` block is documented below.
	GslbPublicIps VipGslbPublicIpArrayInput
	// Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
	H2Support pulumi.StringPtrInput
	// Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
	H3Support pulumi.StringPtrInput
	// Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
	HttpCookieAge pulumi.IntPtrInput
	// Domain that HTTP cookie persistence should apply to.
	HttpCookieDomain pulumi.StringPtrInput
	// Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
	HttpCookieDomainFromHost pulumi.StringPtrInput
	// Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
	HttpCookieGeneration pulumi.IntPtrInput
	// Limit HTTP cookie persistence to the specified path.
	HttpCookiePath pulumi.StringPtrInput
	// Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
	HttpCookieShare pulumi.StringPtrInput
	// For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
	HttpIpHeader pulumi.StringPtrInput
	// For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
	HttpIpHeaderName pulumi.StringPtrInput
	// Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
	HttpMultiplex pulumi.StringPtrInput
	// Maximum number of concurrent requests that a multiplex server can handle (default = unlimited).
	HttpMultiplexMaxConcurrentRequest pulumi.IntPtrInput
	// Maximum number of requests that a multiplex server can handle before disconnecting sessions (default = unlimited).
	HttpMultiplexMaxRequest pulumi.IntPtrInput
	// Time-to-live for idle connections to servers.
	HttpMultiplexTtl pulumi.IntPtrInput
	// Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
	HttpRedirect pulumi.StringPtrInput
	// Maximum supported HTTP versions. default = HTTP2 Valid values: `http1`, `http2`.
	HttpSupportedMaxVersion pulumi.StringPtrInput
	// Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
	HttpsCookieSecure pulumi.StringPtrInput
	// Start-mapped-IPv6-address [-end mapped-IPv6-address].
	Ipv6Mappedip pulumi.StringPtrInput
	// IPv6 port number range on the destination network to which the external port number range is mapped.
	Ipv6Mappedport pulumi.StringPtrInput
	// Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
	LdbMethod pulumi.StringPtrInput
	// Mapped FQDN address name.
	MappedAddr pulumi.StringPtrInput
	// IP address or address range on the destination network to which the external IP address is mapped. The structure of `mappedip` block is documented below.
	Mappedips VipMappedipArrayInput
	// Port number range on the destination network to which the external port number range is mapped.
	Mappedport pulumi.StringPtrInput
	// Maximum number of incomplete connections.
	MaxEmbryonicConnections pulumi.IntPtrInput
	// Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
	Monitors VipMonitorArrayInput
	// Virtual IP name.
	Name pulumi.StringPtrInput
	// Enable/disable NAT44. Valid values: `disable`, `enable`.
	Nat44 pulumi.StringPtrInput
	// Enable/disable NAT46. Valid values: `disable`, `enable`.
	Nat46 pulumi.StringPtrInput
	// Enable/disable forcing the source NAT mapped IP to the external IP for all traffic. Valid values: `disable`, `enable`.
	NatSourceVip pulumi.StringPtrInput
	// Enable/disable one click GSLB server integration with FortiGSLB. Valid values: `disable`, `enable`.
	OneClickGslbServer pulumi.StringPtrInput
	// Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
	OutlookWebAccess pulumi.StringPtrInput
	// Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
	Persistence pulumi.StringPtrInput
	// Enable/disable port forwarding. Valid values: `disable`, `enable`.
	Portforward pulumi.StringPtrInput
	// Port mapping type. Valid values: `1-to-1`, `m-to-n`.
	PortmappingType pulumi.StringPtrInput
	// Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`, `icmp`.
	Protocol pulumi.StringPtrInput
	// QUIC setting. The structure of `quic` block is documented below.
	Quic VipQuicPtrInput
	// Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
	Realservers VipRealserverArrayInput
	// Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
	ServerType pulumi.StringPtrInput
	// Service name. The structure of `service` block is documented below.
	Services VipServiceArrayInput
	// Source address filter. Each address must be either an IP/subnet (x.x.x.x/n) or a range (x.x.x.x-y.y.y.y). Separate addresses with spaces. The structure of `srcFilter` block is documented below.
	SrcFilters VipSrcFilterArrayInput
	// Interfaces to which the VIP applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
	SrcintfFilters VipSrcintfFilterArrayInput
	// Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
	SslAcceptFfdheGroups pulumi.StringPtrInput
	// Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
	SslAlgorithm pulumi.StringPtrInput
	// The name of the SSL certificate to use for SSL acceleration.
	SslCertificate pulumi.StringPtrInput
	// SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `sslCipherSuites` block is documented below.
	SslCipherSuites VipSslCipherSuiteArrayInput
	// Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
	SslClientFallback pulumi.StringPtrInput
	// Maximum length of data in MB before triggering a client rekey (0 = disable).
	SslClientRekeyCount pulumi.IntPtrInput
	// Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
	SslClientRenegotiation pulumi.StringPtrInput
	// Maximum number of client to FortiGate SSL session states to keep.
	SslClientSessionStateMax pulumi.IntPtrInput
	// Number of minutes to keep client to FortiGate SSL session state.
	SslClientSessionStateTimeout pulumi.IntPtrInput
	// How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslClientSessionStateType pulumi.StringPtrInput
	// Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
	SslDhBits pulumi.StringPtrInput
	// Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
	SslHpkp pulumi.StringPtrInput
	// Number of seconds the client should honour the HPKP setting.
	SslHpkpAge pulumi.IntPtrInput
	// Certificate to generate backup HPKP pin from.
	SslHpkpBackup pulumi.StringPtrInput
	// Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHpkpIncludeSubdomains pulumi.StringPtrInput
	// Certificate to generate primary HPKP pin from.
	SslHpkpPrimary pulumi.StringPtrInput
	// URL to report HPKP violations to.
	SslHpkpReportUri pulumi.StringPtrInput
	// Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
	SslHsts pulumi.StringPtrInput
	// Number of seconds the client should honour the HSTS setting.
	SslHstsAge pulumi.IntPtrInput
	// Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
	SslHstsIncludeSubdomains pulumi.StringPtrInput
	// Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
	SslHttpLocationConversion pulumi.StringPtrInput
	// Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
	SslHttpMatchHost pulumi.StringPtrInput
	// Highest SSL/TLS version acceptable from a client.
	SslMaxVersion pulumi.StringPtrInput
	// Lowest SSL/TLS version acceptable from a client.
	SslMinVersion pulumi.StringPtrInput
	// Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
	SslMode pulumi.StringPtrInput
	// Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
	SslPfs pulumi.StringPtrInput
	// Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
	SslSendEmptyFrags pulumi.StringPtrInput
	// Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
	SslServerAlgorithm pulumi.StringPtrInput
	// SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslServerCipherSuites` block is documented below.
	SslServerCipherSuites VipSslServerCipherSuiteArrayInput
	// Highest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMaxVersion pulumi.StringPtrInput
	// Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
	SslServerMinVersion pulumi.StringPtrInput
	// Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
	SslServerRenegotiation pulumi.StringPtrInput
	// Maximum number of FortiGate to Server SSL session states to keep.
	SslServerSessionStateMax pulumi.IntPtrInput
	// Number of minutes to keep FortiGate to Server SSL session state.
	SslServerSessionStateTimeout pulumi.IntPtrInput
	// How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
	SslServerSessionStateType pulumi.StringPtrInput
	// Enable/disable VIP. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput
	// Configure a static NAT, load balance, server load balance, DNS translation, or FQDN VIP.
	Type pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
	WeblogicServer pulumi.StringPtrInput
	// Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
	WebsphereServer pulumi.StringPtrInput
}

func (VipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vipArgs)(nil)).Elem()
}

type VipInput interface {
	pulumi.Input

	ToVipOutput() VipOutput
	ToVipOutputWithContext(ctx context.Context) VipOutput
}

func (*Vip) ElementType() reflect.Type {
	return reflect.TypeOf((**Vip)(nil)).Elem()
}

func (i *Vip) ToVipOutput() VipOutput {
	return i.ToVipOutputWithContext(context.Background())
}

func (i *Vip) ToVipOutputWithContext(ctx context.Context) VipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipOutput)
}

// VipArrayInput is an input type that accepts VipArray and VipArrayOutput values.
// You can construct a concrete instance of `VipArrayInput` via:
//
//	VipArray{ VipArgs{...} }
type VipArrayInput interface {
	pulumi.Input

	ToVipArrayOutput() VipArrayOutput
	ToVipArrayOutputWithContext(context.Context) VipArrayOutput
}

type VipArray []VipInput

func (VipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vip)(nil)).Elem()
}

func (i VipArray) ToVipArrayOutput() VipArrayOutput {
	return i.ToVipArrayOutputWithContext(context.Background())
}

func (i VipArray) ToVipArrayOutputWithContext(ctx context.Context) VipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipArrayOutput)
}

// VipMapInput is an input type that accepts VipMap and VipMapOutput values.
// You can construct a concrete instance of `VipMapInput` via:
//
//	VipMap{ "key": VipArgs{...} }
type VipMapInput interface {
	pulumi.Input

	ToVipMapOutput() VipMapOutput
	ToVipMapOutputWithContext(context.Context) VipMapOutput
}

type VipMap map[string]VipInput

func (VipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vip)(nil)).Elem()
}

func (i VipMap) ToVipMapOutput() VipMapOutput {
	return i.ToVipMapOutputWithContext(context.Background())
}

func (i VipMap) ToVipMapOutputWithContext(ctx context.Context) VipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipMapOutput)
}

type VipOutput struct{ *pulumi.OutputState }

func (VipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vip)(nil)).Elem()
}

func (o VipOutput) ToVipOutput() VipOutput {
	return o
}

func (o VipOutput) ToVipOutputWithContext(ctx context.Context) VipOutput {
	return o
}

// Enable/disable adding NAT46 route. Valid values: `disable`, `enable`.
func (o VipOutput) AddNat46Route() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.AddNat46Route }).(pulumi.StringOutput)
}

// Enable to respond to ARP requests for this virtual IP address. Enabled by default. Valid values: `disable`, `enable`.
func (o VipOutput) ArpReply() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.ArpReply }).(pulumi.StringOutput)
}

// Color of icon on the GUI.
func (o VipOutput) Color() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.Color }).(pulumi.IntOutput)
}

// Comment.
func (o VipOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// DNS mapping TTL (Set to zero to use TTL in DNS response, default = 0).
func (o VipOutput) DnsMappingTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.DnsMappingTtl }).(pulumi.IntOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o VipOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// External FQDN address name. The structure of `extaddr` block is documented below.
func (o VipOutput) Extaddrs() VipExtaddrArrayOutput {
	return o.ApplyT(func(v *Vip) VipExtaddrArrayOutput { return v.Extaddrs }).(VipExtaddrArrayOutput)
}

// Interface connected to the source network that receives the packets that will be forwarded to the destination network.
func (o VipOutput) Extintf() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Extintf }).(pulumi.StringOutput)
}

// IP address or address range on the external interface that you want to map to an address or address range on the destination network.
func (o VipOutput) Extip() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Extip }).(pulumi.StringOutput)
}

// Incoming port number range that you want to map to a port number range on the destination network.
func (o VipOutput) Extport() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Extport }).(pulumi.StringOutput)
}

// Custom defined ID.
func (o VipOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o VipOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Enable to have the VIP send gratuitous ARPs. 0=disabled. Set from 5 up to 8640000 seconds to enable.
func (o VipOutput) GratuitousArpInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.GratuitousArpInterval }).(pulumi.IntOutput)
}

// Domain to use when integrating with FortiGSLB.
func (o VipOutput) GslbDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.GslbDomainName }).(pulumi.StringOutput)
}

// Hostname to use within the configured FortiGSLB domain.
func (o VipOutput) GslbHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.GslbHostname }).(pulumi.StringOutput)
}

// Publicly accessible IP addresses for the FortiGSLB service. The structure of `gslbPublicIps` block is documented below.
func (o VipOutput) GslbPublicIps() VipGslbPublicIpArrayOutput {
	return o.ApplyT(func(v *Vip) VipGslbPublicIpArrayOutput { return v.GslbPublicIps }).(VipGslbPublicIpArrayOutput)
}

// Enable/disable HTTP2 support (default = enable). Valid values: `enable`, `disable`.
func (o VipOutput) H2Support() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.H2Support }).(pulumi.StringOutput)
}

// Enable/disable HTTP3/QUIC support (default = disable). Valid values: `enable`, `disable`.
func (o VipOutput) H3Support() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.H3Support }).(pulumi.StringOutput)
}

// Time in minutes that client web browsers should keep a cookie. Default is 60 seconds. 0 = no time limit.
func (o VipOutput) HttpCookieAge() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.HttpCookieAge }).(pulumi.IntOutput)
}

// Domain that HTTP cookie persistence should apply to.
func (o VipOutput) HttpCookieDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.HttpCookieDomain }).(pulumi.StringOutput)
}

// Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
func (o VipOutput) HttpCookieDomainFromHost() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.HttpCookieDomainFromHost }).(pulumi.StringOutput)
}

// Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
func (o VipOutput) HttpCookieGeneration() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.HttpCookieGeneration }).(pulumi.IntOutput)
}

// Limit HTTP cookie persistence to the specified path.
func (o VipOutput) HttpCookiePath() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.HttpCookiePath }).(pulumi.StringOutput)
}

// Control sharing of cookies across virtual servers. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
func (o VipOutput) HttpCookieShare() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.HttpCookieShare }).(pulumi.StringOutput)
}

// For HTTP multiplexing, enable to add the original client IP address in the XForwarded-For HTTP header. Valid values: `enable`, `disable`.
func (o VipOutput) HttpIpHeader() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.HttpIpHeader }).(pulumi.StringOutput)
}

// For HTTP multiplexing, enter a custom HTTPS header name. The original client IP address is added to this header. If empty, X-Forwarded-For is used.
func (o VipOutput) HttpIpHeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.HttpIpHeaderName }).(pulumi.StringOutput)
}

// Enable/disable HTTP multiplexing. Valid values: `enable`, `disable`.
func (o VipOutput) HttpMultiplex() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.HttpMultiplex }).(pulumi.StringOutput)
}

// Maximum number of concurrent requests that a multiplex server can handle (default = unlimited).
func (o VipOutput) HttpMultiplexMaxConcurrentRequest() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.HttpMultiplexMaxConcurrentRequest }).(pulumi.IntOutput)
}

// Maximum number of requests that a multiplex server can handle before disconnecting sessions (default = unlimited).
func (o VipOutput) HttpMultiplexMaxRequest() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.HttpMultiplexMaxRequest }).(pulumi.IntOutput)
}

// Time-to-live for idle connections to servers.
func (o VipOutput) HttpMultiplexTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.HttpMultiplexTtl }).(pulumi.IntOutput)
}

// Enable/disable redirection of HTTP to HTTPS Valid values: `enable`, `disable`.
func (o VipOutput) HttpRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.HttpRedirect }).(pulumi.StringOutput)
}

// Maximum supported HTTP versions. default = HTTP2 Valid values: `http1`, `http2`.
func (o VipOutput) HttpSupportedMaxVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.HttpSupportedMaxVersion }).(pulumi.StringOutput)
}

// Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
func (o VipOutput) HttpsCookieSecure() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.HttpsCookieSecure }).(pulumi.StringOutput)
}

// Start-mapped-IPv6-address [-end mapped-IPv6-address].
func (o VipOutput) Ipv6Mappedip() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Ipv6Mappedip }).(pulumi.StringOutput)
}

// IPv6 port number range on the destination network to which the external port number range is mapped.
func (o VipOutput) Ipv6Mappedport() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Ipv6Mappedport }).(pulumi.StringOutput)
}

// Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `least-session`, `least-rtt`, `first-alive`, `http-host`.
func (o VipOutput) LdbMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.LdbMethod }).(pulumi.StringOutput)
}

// Mapped FQDN address name.
func (o VipOutput) MappedAddr() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.MappedAddr }).(pulumi.StringOutput)
}

// IP address or address range on the destination network to which the external IP address is mapped. The structure of `mappedip` block is documented below.
func (o VipOutput) Mappedips() VipMappedipArrayOutput {
	return o.ApplyT(func(v *Vip) VipMappedipArrayOutput { return v.Mappedips }).(VipMappedipArrayOutput)
}

// Port number range on the destination network to which the external port number range is mapped.
func (o VipOutput) Mappedport() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Mappedport }).(pulumi.StringOutput)
}

// Maximum number of incomplete connections.
func (o VipOutput) MaxEmbryonicConnections() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.MaxEmbryonicConnections }).(pulumi.IntOutput)
}

// Name of the health check monitor to use when polling to determine a virtual server's connectivity status. The structure of `monitor` block is documented below.
func (o VipOutput) Monitors() VipMonitorArrayOutput {
	return o.ApplyT(func(v *Vip) VipMonitorArrayOutput { return v.Monitors }).(VipMonitorArrayOutput)
}

// Virtual IP name.
func (o VipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable NAT44. Valid values: `disable`, `enable`.
func (o VipOutput) Nat44() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Nat44 }).(pulumi.StringOutput)
}

// Enable/disable NAT46. Valid values: `disable`, `enable`.
func (o VipOutput) Nat46() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Nat46 }).(pulumi.StringOutput)
}

// Enable/disable forcing the source NAT mapped IP to the external IP for all traffic. Valid values: `disable`, `enable`.
func (o VipOutput) NatSourceVip() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.NatSourceVip }).(pulumi.StringOutput)
}

// Enable/disable one click GSLB server integration with FortiGSLB. Valid values: `disable`, `enable`.
func (o VipOutput) OneClickGslbServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.OneClickGslbServer }).(pulumi.StringOutput)
}

// Enable to add the Front-End-Https header for Microsoft Outlook Web Access. Valid values: `disable`, `enable`.
func (o VipOutput) OutlookWebAccess() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.OutlookWebAccess }).(pulumi.StringOutput)
}

// Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`, `ssl-session-id`.
func (o VipOutput) Persistence() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Persistence }).(pulumi.StringOutput)
}

// Enable/disable port forwarding. Valid values: `disable`, `enable`.
func (o VipOutput) Portforward() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Portforward }).(pulumi.StringOutput)
}

// Port mapping type. Valid values: `1-to-1`, `m-to-n`.
func (o VipOutput) PortmappingType() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.PortmappingType }).(pulumi.StringOutput)
}

// Protocol to use when forwarding packets. Valid values: `tcp`, `udp`, `sctp`, `icmp`.
func (o VipOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// QUIC setting. The structure of `quic` block is documented below.
func (o VipOutput) Quic() VipQuicOutput {
	return o.ApplyT(func(v *Vip) VipQuicOutput { return v.Quic }).(VipQuicOutput)
}

// Select the real servers that this server load balancing VIP will distribute traffic to. The structure of `realservers` block is documented below.
func (o VipOutput) Realservers() VipRealserverArrayOutput {
	return o.ApplyT(func(v *Vip) VipRealserverArrayOutput { return v.Realservers }).(VipRealserverArrayOutput)
}

// Protocol to be load balanced by the virtual server (also called the server load balance virtual IP). Valid values: `http`, `https`, `imaps`, `pop3s`, `smtps`, `ssl`, `tcp`, `udp`, `ip`.
func (o VipOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.ServerType }).(pulumi.StringOutput)
}

// Service name. The structure of `service` block is documented below.
func (o VipOutput) Services() VipServiceArrayOutput {
	return o.ApplyT(func(v *Vip) VipServiceArrayOutput { return v.Services }).(VipServiceArrayOutput)
}

// Source address filter. Each address must be either an IP/subnet (x.x.x.x/n) or a range (x.x.x.x-y.y.y.y). Separate addresses with spaces. The structure of `srcFilter` block is documented below.
func (o VipOutput) SrcFilters() VipSrcFilterArrayOutput {
	return o.ApplyT(func(v *Vip) VipSrcFilterArrayOutput { return v.SrcFilters }).(VipSrcFilterArrayOutput)
}

// Interfaces to which the VIP applies. Separate the names with spaces. The structure of `srcintfFilter` block is documented below.
func (o VipOutput) SrcintfFilters() VipSrcintfFilterArrayOutput {
	return o.ApplyT(func(v *Vip) VipSrcintfFilterArrayOutput { return v.SrcintfFilters }).(VipSrcintfFilterArrayOutput)
}

// Enable/disable FFDHE cipher suite for SSL key exchange. Valid values: `enable`, `disable`.
func (o VipOutput) SslAcceptFfdheGroups() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslAcceptFfdheGroups }).(pulumi.StringOutput)
}

// Permitted encryption algorithms for SSL sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`.
func (o VipOutput) SslAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslAlgorithm }).(pulumi.StringOutput)
}

// The name of the SSL certificate to use for SSL acceleration.
func (o VipOutput) SslCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslCertificate }).(pulumi.StringOutput)
}

// SSL/TLS cipher suites acceptable from a client, ordered by priority. The structure of `sslCipherSuites` block is documented below.
func (o VipOutput) SslCipherSuites() VipSslCipherSuiteArrayOutput {
	return o.ApplyT(func(v *Vip) VipSslCipherSuiteArrayOutput { return v.SslCipherSuites }).(VipSslCipherSuiteArrayOutput)
}

// Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507). Valid values: `disable`, `enable`.
func (o VipOutput) SslClientFallback() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslClientFallback }).(pulumi.StringOutput)
}

// Maximum length of data in MB before triggering a client rekey (0 = disable).
func (o VipOutput) SslClientRekeyCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.SslClientRekeyCount }).(pulumi.IntOutput)
}

// Allow, deny, or require secure renegotiation of client sessions to comply with RFC 5746. Valid values: `allow`, `deny`, `secure`.
func (o VipOutput) SslClientRenegotiation() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslClientRenegotiation }).(pulumi.StringOutput)
}

// Maximum number of client to FortiGate SSL session states to keep.
func (o VipOutput) SslClientSessionStateMax() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.SslClientSessionStateMax }).(pulumi.IntOutput)
}

// Number of minutes to keep client to FortiGate SSL session state.
func (o VipOutput) SslClientSessionStateTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.SslClientSessionStateTimeout }).(pulumi.IntOutput)
}

// How to expire SSL sessions for the segment of the SSL connection between the client and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
func (o VipOutput) SslClientSessionStateType() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslClientSessionStateType }).(pulumi.StringOutput)
}

// Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
func (o VipOutput) SslDhBits() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslDhBits }).(pulumi.StringOutput)
}

// Enable/disable including HPKP header in response. Valid values: `disable`, `enable`, `report-only`.
func (o VipOutput) SslHpkp() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslHpkp }).(pulumi.StringOutput)
}

// Number of seconds the client should honour the HPKP setting.
func (o VipOutput) SslHpkpAge() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.SslHpkpAge }).(pulumi.IntOutput)
}

// Certificate to generate backup HPKP pin from.
func (o VipOutput) SslHpkpBackup() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslHpkpBackup }).(pulumi.StringOutput)
}

// Indicate that HPKP header applies to all subdomains. Valid values: `disable`, `enable`.
func (o VipOutput) SslHpkpIncludeSubdomains() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslHpkpIncludeSubdomains }).(pulumi.StringOutput)
}

// Certificate to generate primary HPKP pin from.
func (o VipOutput) SslHpkpPrimary() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslHpkpPrimary }).(pulumi.StringOutput)
}

// URL to report HPKP violations to.
func (o VipOutput) SslHpkpReportUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringPtrOutput { return v.SslHpkpReportUri }).(pulumi.StringPtrOutput)
}

// Enable/disable including HSTS header in response. Valid values: `disable`, `enable`.
func (o VipOutput) SslHsts() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslHsts }).(pulumi.StringOutput)
}

// Number of seconds the client should honour the HSTS setting.
func (o VipOutput) SslHstsAge() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.SslHstsAge }).(pulumi.IntOutput)
}

// Indicate that HSTS header applies to all subdomains. Valid values: `disable`, `enable`.
func (o VipOutput) SslHstsIncludeSubdomains() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslHstsIncludeSubdomains }).(pulumi.StringOutput)
}

// Enable to replace HTTP with HTTPS in the reply's Location HTTP header field. Valid values: `enable`, `disable`.
func (o VipOutput) SslHttpLocationConversion() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslHttpLocationConversion }).(pulumi.StringOutput)
}

// Enable/disable HTTP host matching for location conversion. Valid values: `enable`, `disable`.
func (o VipOutput) SslHttpMatchHost() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslHttpMatchHost }).(pulumi.StringOutput)
}

// Highest SSL/TLS version acceptable from a client.
func (o VipOutput) SslMaxVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslMaxVersion }).(pulumi.StringOutput)
}

// Lowest SSL/TLS version acceptable from a client.
func (o VipOutput) SslMinVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslMinVersion }).(pulumi.StringOutput)
}

// Apply SSL offloading between the client and the FortiGate (half) or from the client to the FortiGate and from the FortiGate to the server (full). Valid values: `half`, `full`.
func (o VipOutput) SslMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslMode }).(pulumi.StringOutput)
}

// Select the cipher suites that can be used for SSL perfect forward secrecy (PFS). Applies to both client and server sessions. Valid values: `require`, `deny`, `allow`.
func (o VipOutput) SslPfs() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslPfs }).(pulumi.StringOutput)
}

// Enable/disable sending empty fragments to avoid CBC IV attacks (SSL 3.0 & TLS 1.0 only). May need to be disabled for compatibility with older systems. Valid values: `enable`, `disable`.
func (o VipOutput) SslSendEmptyFrags() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslSendEmptyFrags }).(pulumi.StringOutput)
}

// Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`, `custom`, `client`.
func (o VipOutput) SslServerAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslServerAlgorithm }).(pulumi.StringOutput)
}

// SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `sslServerCipherSuites` block is documented below.
func (o VipOutput) SslServerCipherSuites() VipSslServerCipherSuiteArrayOutput {
	return o.ApplyT(func(v *Vip) VipSslServerCipherSuiteArrayOutput { return v.SslServerCipherSuites }).(VipSslServerCipherSuiteArrayOutput)
}

// Highest SSL/TLS version acceptable from a server. Use the client setting by default.
func (o VipOutput) SslServerMaxVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslServerMaxVersion }).(pulumi.StringOutput)
}

// Lowest SSL/TLS version acceptable from a server. Use the client setting by default.
func (o VipOutput) SslServerMinVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslServerMinVersion }).(pulumi.StringOutput)
}

// Enable/disable secure renegotiation to comply with RFC 5746. Valid values: `enable`, `disable`.
func (o VipOutput) SslServerRenegotiation() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslServerRenegotiation }).(pulumi.StringOutput)
}

// Maximum number of FortiGate to Server SSL session states to keep.
func (o VipOutput) SslServerSessionStateMax() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.SslServerSessionStateMax }).(pulumi.IntOutput)
}

// Number of minutes to keep FortiGate to Server SSL session state.
func (o VipOutput) SslServerSessionStateTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.SslServerSessionStateTimeout }).(pulumi.IntOutput)
}

// How to expire SSL sessions for the segment of the SSL connection between the server and the FortiGate. Valid values: `disable`, `time`, `count`, `both`.
func (o VipOutput) SslServerSessionStateType() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SslServerSessionStateType }).(pulumi.StringOutput)
}

// Enable/disable VIP. Valid values: `disable`, `enable`.
func (o VipOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Configure a static NAT, load balance, server load balance, DNS translation, or FQDN VIP.
func (o VipOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o VipOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o VipOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Enable to add an HTTP header to indicate SSL offloading for a WebLogic server. Valid values: `disable`, `enable`.
func (o VipOutput) WeblogicServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.WeblogicServer }).(pulumi.StringOutput)
}

// Enable to add an HTTP header to indicate SSL offloading for a WebSphere server. Valid values: `disable`, `enable`.
func (o VipOutput) WebsphereServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.WebsphereServer }).(pulumi.StringOutput)
}

type VipArrayOutput struct{ *pulumi.OutputState }

func (VipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vip)(nil)).Elem()
}

func (o VipArrayOutput) ToVipArrayOutput() VipArrayOutput {
	return o
}

func (o VipArrayOutput) ToVipArrayOutputWithContext(ctx context.Context) VipArrayOutput {
	return o
}

func (o VipArrayOutput) Index(i pulumi.IntInput) VipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vip {
		return vs[0].([]*Vip)[vs[1].(int)]
	}).(VipOutput)
}

type VipMapOutput struct{ *pulumi.OutputState }

func (VipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vip)(nil)).Elem()
}

func (o VipMapOutput) ToVipMapOutput() VipMapOutput {
	return o
}

func (o VipMapOutput) ToVipMapOutputWithContext(ctx context.Context) VipMapOutput {
	return o
}

func (o VipMapOutput) MapIndex(k pulumi.StringInput) VipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vip {
		return vs[0].(map[string]*Vip)[vs[1].(string)]
	}).(VipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VipInput)(nil)).Elem(), &Vip{})
	pulumi.RegisterInputType(reflect.TypeOf((*VipArrayInput)(nil)).Elem(), VipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VipMapInput)(nil)).Elem(), VipMap{})
	pulumi.RegisterOutputType(VipOutput{})
	pulumi.RegisterOutputType(VipArrayOutput{})
	pulumi.RegisterOutputType(VipMapOutput{})
}
