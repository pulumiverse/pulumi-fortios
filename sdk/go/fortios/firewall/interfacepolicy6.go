// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure IPv6 interface policies.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewInterfacepolicy6(ctx, "trname", &firewall.Interfacepolicy6Args{
//				AddressType:           pulumi.String("ipv6"),
//				ApplicationListStatus: pulumi.String("disable"),
//				AvProfileStatus:       pulumi.String("disable"),
//				DlpSensorStatus:       pulumi.String("disable"),
//				Dsri:                  pulumi.String("disable"),
//				Dstaddr6s: firewall.Interfacepolicy6Dstaddr6Array{
//					&firewall.Interfacepolicy6Dstaddr6Args{
//						Name: pulumi.String("all"),
//					},
//				},
//				Interface:             pulumi.String("port4"),
//				IpsSensorStatus:       pulumi.String("disable"),
//				Logtraffic:            pulumi.String("all"),
//				Policyid:              pulumi.Int(1),
//				ScanBotnetConnections: pulumi.String("block"),
//				Service6s: firewall.Interfacepolicy6Service6Array{
//					&firewall.Interfacepolicy6Service6Args{
//						Name: pulumi.String("ALL"),
//					},
//				},
//				SpamfilterProfileStatus: pulumi.String("disable"),
//				Srcaddr6s: firewall.Interfacepolicy6Srcaddr6Array{
//					&firewall.Interfacepolicy6Srcaddr6Args{
//						Name: pulumi.String("all"),
//					},
//				},
//				Status:                 pulumi.String("enable"),
//				WebfilterProfileStatus: pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Firewall InterfacePolicy6 can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/interfacepolicy6:Interfacepolicy6 labelname {{policyid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/interfacepolicy6:Interfacepolicy6 labelname {{policyid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Interfacepolicy6 struct {
	pulumi.CustomResourceState

	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType pulumi.StringOutput `pulumi:"addressType"`
	// Application list name.
	ApplicationList pulumi.StringOutput `pulumi:"applicationList"`
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus pulumi.StringOutput `pulumi:"applicationListStatus"`
	// Antivirus profile.
	AvProfile pulumi.StringOutput `pulumi:"avProfile"`
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus pulumi.StringOutput `pulumi:"avProfileStatus"`
	// CASB profile.
	CasbProfile pulumi.StringOutput `pulumi:"casbProfile"`
	// Enable/disable CASB. Valid values: `enable`, `disable`.
	CasbProfileStatus pulumi.StringOutput `pulumi:"casbProfileStatus"`
	// Comments.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// DLP profile name.
	DlpProfile pulumi.StringOutput `pulumi:"dlpProfile"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpProfileStatus pulumi.StringOutput `pulumi:"dlpProfileStatus"`
	// DLP sensor name.
	DlpSensor pulumi.StringOutput `pulumi:"dlpSensor"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus pulumi.StringOutput `pulumi:"dlpSensorStatus"`
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri pulumi.StringOutput `pulumi:"dsri"`
	// IPv6 address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr6` block is documented below.
	Dstaddr6s Interfacepolicy6Dstaddr6ArrayOutput `pulumi:"dstaddr6s"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Email filter profile.
	EmailfilterProfile pulumi.StringOutput `pulumi:"emailfilterProfile"`
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus pulumi.StringOutput `pulumi:"emailfilterProfileStatus"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Monitored interface name from available interfaces.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// IPS sensor name.
	IpsSensor pulumi.StringOutput `pulumi:"ipsSensor"`
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus pulumi.StringOutput `pulumi:"ipsSensorStatus"`
	// Label.
	Label pulumi.StringOutput `pulumi:"label"`
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringOutput `pulumi:"logtraffic"`
	// Policy ID.
	Policyid pulumi.IntOutput `pulumi:"policyid"`
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringOutput `pulumi:"scanBotnetConnections"`
	// Service name. The structure of `service6` block is documented below.
	Service6s Interfacepolicy6Service6ArrayOutput `pulumi:"service6s"`
	// Antispam profile.
	SpamfilterProfile pulumi.StringOutput `pulumi:"spamfilterProfile"`
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus pulumi.StringOutput `pulumi:"spamfilterProfileStatus"`
	// IPv6 address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr6` block is documented below.
	Srcaddr6s Interfacepolicy6Srcaddr6ArrayOutput `pulumi:"srcaddr6s"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	//
	// The `srcaddr6` block supports:
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Web filter profile.
	WebfilterProfile pulumi.StringOutput `pulumi:"webfilterProfile"`
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus pulumi.StringOutput `pulumi:"webfilterProfileStatus"`
}

// NewInterfacepolicy6 registers a new resource with the given unique name, arguments, and options.
func NewInterfacepolicy6(ctx *pulumi.Context,
	name string, args *Interfacepolicy6Args, opts ...pulumi.ResourceOption) (*Interfacepolicy6, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dstaddr6s == nil {
		return nil, errors.New("invalid value for required argument 'Dstaddr6s'")
	}
	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Srcaddr6s == nil {
		return nil, errors.New("invalid value for required argument 'Srcaddr6s'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Interfacepolicy6
	err := ctx.RegisterResource("fortios:firewall/interfacepolicy6:Interfacepolicy6", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterfacepolicy6 gets an existing Interfacepolicy6 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterfacepolicy6(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Interfacepolicy6State, opts ...pulumi.ResourceOption) (*Interfacepolicy6, error) {
	var resource Interfacepolicy6
	err := ctx.ReadResource("fortios:firewall/interfacepolicy6:Interfacepolicy6", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Interfacepolicy6 resources.
type interfacepolicy6State struct {
	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType *string `pulumi:"addressType"`
	// Application list name.
	ApplicationList *string `pulumi:"applicationList"`
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus *string `pulumi:"applicationListStatus"`
	// Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus *string `pulumi:"avProfileStatus"`
	// CASB profile.
	CasbProfile *string `pulumi:"casbProfile"`
	// Enable/disable CASB. Valid values: `enable`, `disable`.
	CasbProfileStatus *string `pulumi:"casbProfileStatus"`
	// Comments.
	Comments *string `pulumi:"comments"`
	// DLP profile name.
	DlpProfile *string `pulumi:"dlpProfile"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpProfileStatus *string `pulumi:"dlpProfileStatus"`
	// DLP sensor name.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus *string `pulumi:"dlpSensorStatus"`
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri *string `pulumi:"dsri"`
	// IPv6 address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr6` block is documented below.
	Dstaddr6s []Interfacepolicy6Dstaddr6 `pulumi:"dstaddr6s"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus *string `pulumi:"emailfilterProfileStatus"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Monitored interface name from available interfaces.
	Interface *string `pulumi:"interface"`
	// IPS sensor name.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus *string `pulumi:"ipsSensorStatus"`
	// Label.
	Label *string `pulumi:"label"`
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Service name. The structure of `service6` block is documented below.
	Service6s []Interfacepolicy6Service6 `pulumi:"service6s"`
	// Antispam profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus *string `pulumi:"spamfilterProfileStatus"`
	// IPv6 address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr6` block is documented below.
	Srcaddr6s []Interfacepolicy6Srcaddr6 `pulumi:"srcaddr6s"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	//
	// The `srcaddr6` block supports:
	Vdomparam *string `pulumi:"vdomparam"`
	// Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus *string `pulumi:"webfilterProfileStatus"`
}

type Interfacepolicy6State struct {
	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType pulumi.StringPtrInput
	// Application list name.
	ApplicationList pulumi.StringPtrInput
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus pulumi.StringPtrInput
	// Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus pulumi.StringPtrInput
	// CASB profile.
	CasbProfile pulumi.StringPtrInput
	// Enable/disable CASB. Valid values: `enable`, `disable`.
	CasbProfileStatus pulumi.StringPtrInput
	// Comments.
	Comments pulumi.StringPtrInput
	// DLP profile name.
	DlpProfile pulumi.StringPtrInput
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpProfileStatus pulumi.StringPtrInput
	// DLP sensor name.
	DlpSensor pulumi.StringPtrInput
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus pulumi.StringPtrInput
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri pulumi.StringPtrInput
	// IPv6 address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr6` block is documented below.
	Dstaddr6s Interfacepolicy6Dstaddr6ArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Monitored interface name from available interfaces.
	Interface pulumi.StringPtrInput
	// IPS sensor name.
	IpsSensor pulumi.StringPtrInput
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus pulumi.StringPtrInput
	// Label.
	Label pulumi.StringPtrInput
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Service name. The structure of `service6` block is documented below.
	Service6s Interfacepolicy6Service6ArrayInput
	// Antispam profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus pulumi.StringPtrInput
	// IPv6 address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr6` block is documented below.
	Srcaddr6s Interfacepolicy6Srcaddr6ArrayInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	//
	// The `srcaddr6` block supports:
	Vdomparam pulumi.StringPtrInput
	// Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus pulumi.StringPtrInput
}

func (Interfacepolicy6State) ElementType() reflect.Type {
	return reflect.TypeOf((*interfacepolicy6State)(nil)).Elem()
}

type interfacepolicy6Args struct {
	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType *string `pulumi:"addressType"`
	// Application list name.
	ApplicationList *string `pulumi:"applicationList"`
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus *string `pulumi:"applicationListStatus"`
	// Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus *string `pulumi:"avProfileStatus"`
	// CASB profile.
	CasbProfile *string `pulumi:"casbProfile"`
	// Enable/disable CASB. Valid values: `enable`, `disable`.
	CasbProfileStatus *string `pulumi:"casbProfileStatus"`
	// Comments.
	Comments *string `pulumi:"comments"`
	// DLP profile name.
	DlpProfile *string `pulumi:"dlpProfile"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpProfileStatus *string `pulumi:"dlpProfileStatus"`
	// DLP sensor name.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus *string `pulumi:"dlpSensorStatus"`
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri *string `pulumi:"dsri"`
	// IPv6 address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr6` block is documented below.
	Dstaddr6s []Interfacepolicy6Dstaddr6 `pulumi:"dstaddr6s"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus *string `pulumi:"emailfilterProfileStatus"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Monitored interface name from available interfaces.
	Interface string `pulumi:"interface"`
	// IPS sensor name.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus *string `pulumi:"ipsSensorStatus"`
	// Label.
	Label *string `pulumi:"label"`
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Service name. The structure of `service6` block is documented below.
	Service6s []Interfacepolicy6Service6 `pulumi:"service6s"`
	// Antispam profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus *string `pulumi:"spamfilterProfileStatus"`
	// IPv6 address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr6` block is documented below.
	Srcaddr6s []Interfacepolicy6Srcaddr6 `pulumi:"srcaddr6s"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	//
	// The `srcaddr6` block supports:
	Vdomparam *string `pulumi:"vdomparam"`
	// Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus *string `pulumi:"webfilterProfileStatus"`
}

// The set of arguments for constructing a Interfacepolicy6 resource.
type Interfacepolicy6Args struct {
	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType pulumi.StringPtrInput
	// Application list name.
	ApplicationList pulumi.StringPtrInput
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus pulumi.StringPtrInput
	// Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus pulumi.StringPtrInput
	// CASB profile.
	CasbProfile pulumi.StringPtrInput
	// Enable/disable CASB. Valid values: `enable`, `disable`.
	CasbProfileStatus pulumi.StringPtrInput
	// Comments.
	Comments pulumi.StringPtrInput
	// DLP profile name.
	DlpProfile pulumi.StringPtrInput
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpProfileStatus pulumi.StringPtrInput
	// DLP sensor name.
	DlpSensor pulumi.StringPtrInput
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus pulumi.StringPtrInput
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri pulumi.StringPtrInput
	// IPv6 address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr6` block is documented below.
	Dstaddr6s Interfacepolicy6Dstaddr6ArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Monitored interface name from available interfaces.
	Interface pulumi.StringInput
	// IPS sensor name.
	IpsSensor pulumi.StringPtrInput
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus pulumi.StringPtrInput
	// Label.
	Label pulumi.StringPtrInput
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Service name. The structure of `service6` block is documented below.
	Service6s Interfacepolicy6Service6ArrayInput
	// Antispam profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus pulumi.StringPtrInput
	// IPv6 address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr6` block is documented below.
	Srcaddr6s Interfacepolicy6Srcaddr6ArrayInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	//
	// The `srcaddr6` block supports:
	Vdomparam pulumi.StringPtrInput
	// Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus pulumi.StringPtrInput
}

func (Interfacepolicy6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*interfacepolicy6Args)(nil)).Elem()
}

type Interfacepolicy6Input interface {
	pulumi.Input

	ToInterfacepolicy6Output() Interfacepolicy6Output
	ToInterfacepolicy6OutputWithContext(ctx context.Context) Interfacepolicy6Output
}

func (*Interfacepolicy6) ElementType() reflect.Type {
	return reflect.TypeOf((**Interfacepolicy6)(nil)).Elem()
}

func (i *Interfacepolicy6) ToInterfacepolicy6Output() Interfacepolicy6Output {
	return i.ToInterfacepolicy6OutputWithContext(context.Background())
}

func (i *Interfacepolicy6) ToInterfacepolicy6OutputWithContext(ctx context.Context) Interfacepolicy6Output {
	return pulumi.ToOutputWithContext(ctx, i).(Interfacepolicy6Output)
}

// Interfacepolicy6ArrayInput is an input type that accepts Interfacepolicy6Array and Interfacepolicy6ArrayOutput values.
// You can construct a concrete instance of `Interfacepolicy6ArrayInput` via:
//
//	Interfacepolicy6Array{ Interfacepolicy6Args{...} }
type Interfacepolicy6ArrayInput interface {
	pulumi.Input

	ToInterfacepolicy6ArrayOutput() Interfacepolicy6ArrayOutput
	ToInterfacepolicy6ArrayOutputWithContext(context.Context) Interfacepolicy6ArrayOutput
}

type Interfacepolicy6Array []Interfacepolicy6Input

func (Interfacepolicy6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Interfacepolicy6)(nil)).Elem()
}

func (i Interfacepolicy6Array) ToInterfacepolicy6ArrayOutput() Interfacepolicy6ArrayOutput {
	return i.ToInterfacepolicy6ArrayOutputWithContext(context.Background())
}

func (i Interfacepolicy6Array) ToInterfacepolicy6ArrayOutputWithContext(ctx context.Context) Interfacepolicy6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Interfacepolicy6ArrayOutput)
}

// Interfacepolicy6MapInput is an input type that accepts Interfacepolicy6Map and Interfacepolicy6MapOutput values.
// You can construct a concrete instance of `Interfacepolicy6MapInput` via:
//
//	Interfacepolicy6Map{ "key": Interfacepolicy6Args{...} }
type Interfacepolicy6MapInput interface {
	pulumi.Input

	ToInterfacepolicy6MapOutput() Interfacepolicy6MapOutput
	ToInterfacepolicy6MapOutputWithContext(context.Context) Interfacepolicy6MapOutput
}

type Interfacepolicy6Map map[string]Interfacepolicy6Input

func (Interfacepolicy6Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Interfacepolicy6)(nil)).Elem()
}

func (i Interfacepolicy6Map) ToInterfacepolicy6MapOutput() Interfacepolicy6MapOutput {
	return i.ToInterfacepolicy6MapOutputWithContext(context.Background())
}

func (i Interfacepolicy6Map) ToInterfacepolicy6MapOutputWithContext(ctx context.Context) Interfacepolicy6MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Interfacepolicy6MapOutput)
}

type Interfacepolicy6Output struct{ *pulumi.OutputState }

func (Interfacepolicy6Output) ElementType() reflect.Type {
	return reflect.TypeOf((**Interfacepolicy6)(nil)).Elem()
}

func (o Interfacepolicy6Output) ToInterfacepolicy6Output() Interfacepolicy6Output {
	return o
}

func (o Interfacepolicy6Output) ToInterfacepolicy6OutputWithContext(ctx context.Context) Interfacepolicy6Output {
	return o
}

// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
func (o Interfacepolicy6Output) AddressType() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.AddressType }).(pulumi.StringOutput)
}

// Application list name.
func (o Interfacepolicy6Output) ApplicationList() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.ApplicationList }).(pulumi.StringOutput)
}

// Enable/disable application control. Valid values: `enable`, `disable`.
func (o Interfacepolicy6Output) ApplicationListStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.ApplicationListStatus }).(pulumi.StringOutput)
}

// Antivirus profile.
func (o Interfacepolicy6Output) AvProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.AvProfile }).(pulumi.StringOutput)
}

// Enable/disable antivirus. Valid values: `enable`, `disable`.
func (o Interfacepolicy6Output) AvProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.AvProfileStatus }).(pulumi.StringOutput)
}

// CASB profile.
func (o Interfacepolicy6Output) CasbProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.CasbProfile }).(pulumi.StringOutput)
}

// Enable/disable CASB. Valid values: `enable`, `disable`.
func (o Interfacepolicy6Output) CasbProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.CasbProfileStatus }).(pulumi.StringOutput)
}

// Comments.
func (o Interfacepolicy6Output) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// DLP profile name.
func (o Interfacepolicy6Output) DlpProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.DlpProfile }).(pulumi.StringOutput)
}

// Enable/disable DLP. Valid values: `enable`, `disable`.
func (o Interfacepolicy6Output) DlpProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.DlpProfileStatus }).(pulumi.StringOutput)
}

// DLP sensor name.
func (o Interfacepolicy6Output) DlpSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.DlpSensor }).(pulumi.StringOutput)
}

// Enable/disable DLP. Valid values: `enable`, `disable`.
func (o Interfacepolicy6Output) DlpSensorStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.DlpSensorStatus }).(pulumi.StringOutput)
}

// Enable/disable DSRI. Valid values: `enable`, `disable`.
func (o Interfacepolicy6Output) Dsri() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.Dsri }).(pulumi.StringOutput)
}

// IPv6 address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr6` block is documented below.
func (o Interfacepolicy6Output) Dstaddr6s() Interfacepolicy6Dstaddr6ArrayOutput {
	return o.ApplyT(func(v *Interfacepolicy6) Interfacepolicy6Dstaddr6ArrayOutput { return v.Dstaddr6s }).(Interfacepolicy6Dstaddr6ArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o Interfacepolicy6Output) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Email filter profile.
func (o Interfacepolicy6Output) EmailfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.EmailfilterProfile }).(pulumi.StringOutput)
}

// Enable/disable email filter. Valid values: `enable`, `disable`.
func (o Interfacepolicy6Output) EmailfilterProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.EmailfilterProfileStatus }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o Interfacepolicy6Output) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Monitored interface name from available interfaces.
func (o Interfacepolicy6Output) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// IPS sensor name.
func (o Interfacepolicy6Output) IpsSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.IpsSensor }).(pulumi.StringOutput)
}

// Enable/disable IPS. Valid values: `enable`, `disable`.
func (o Interfacepolicy6Output) IpsSensorStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.IpsSensorStatus }).(pulumi.StringOutput)
}

// Label.
func (o Interfacepolicy6Output) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
func (o Interfacepolicy6Output) Logtraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.Logtraffic }).(pulumi.StringOutput)
}

// Policy ID.
func (o Interfacepolicy6Output) Policyid() pulumi.IntOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.IntOutput { return v.Policyid }).(pulumi.IntOutput)
}

// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
func (o Interfacepolicy6Output) ScanBotnetConnections() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.ScanBotnetConnections }).(pulumi.StringOutput)
}

// Service name. The structure of `service6` block is documented below.
func (o Interfacepolicy6Output) Service6s() Interfacepolicy6Service6ArrayOutput {
	return o.ApplyT(func(v *Interfacepolicy6) Interfacepolicy6Service6ArrayOutput { return v.Service6s }).(Interfacepolicy6Service6ArrayOutput)
}

// Antispam profile.
func (o Interfacepolicy6Output) SpamfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.SpamfilterProfile }).(pulumi.StringOutput)
}

// Enable/disable antispam. Valid values: `enable`, `disable`.
func (o Interfacepolicy6Output) SpamfilterProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.SpamfilterProfileStatus }).(pulumi.StringOutput)
}

// IPv6 address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr6` block is documented below.
func (o Interfacepolicy6Output) Srcaddr6s() Interfacepolicy6Srcaddr6ArrayOutput {
	return o.ApplyT(func(v *Interfacepolicy6) Interfacepolicy6Srcaddr6ArrayOutput { return v.Srcaddr6s }).(Interfacepolicy6Srcaddr6ArrayOutput)
}

// Enable/disable this policy. Valid values: `enable`, `disable`.
func (o Interfacepolicy6Output) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o Interfacepolicy6Output) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
//
// The `srcaddr6` block supports:
func (o Interfacepolicy6Output) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Web filter profile.
func (o Interfacepolicy6Output) WebfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.WebfilterProfile }).(pulumi.StringOutput)
}

// Enable/disable web filtering. Valid values: `enable`, `disable`.
func (o Interfacepolicy6Output) WebfilterProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy6) pulumi.StringOutput { return v.WebfilterProfileStatus }).(pulumi.StringOutput)
}

type Interfacepolicy6ArrayOutput struct{ *pulumi.OutputState }

func (Interfacepolicy6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Interfacepolicy6)(nil)).Elem()
}

func (o Interfacepolicy6ArrayOutput) ToInterfacepolicy6ArrayOutput() Interfacepolicy6ArrayOutput {
	return o
}

func (o Interfacepolicy6ArrayOutput) ToInterfacepolicy6ArrayOutputWithContext(ctx context.Context) Interfacepolicy6ArrayOutput {
	return o
}

func (o Interfacepolicy6ArrayOutput) Index(i pulumi.IntInput) Interfacepolicy6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Interfacepolicy6 {
		return vs[0].([]*Interfacepolicy6)[vs[1].(int)]
	}).(Interfacepolicy6Output)
}

type Interfacepolicy6MapOutput struct{ *pulumi.OutputState }

func (Interfacepolicy6MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Interfacepolicy6)(nil)).Elem()
}

func (o Interfacepolicy6MapOutput) ToInterfacepolicy6MapOutput() Interfacepolicy6MapOutput {
	return o
}

func (o Interfacepolicy6MapOutput) ToInterfacepolicy6MapOutputWithContext(ctx context.Context) Interfacepolicy6MapOutput {
	return o
}

func (o Interfacepolicy6MapOutput) MapIndex(k pulumi.StringInput) Interfacepolicy6Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Interfacepolicy6 {
		return vs[0].(map[string]*Interfacepolicy6)[vs[1].(string)]
	}).(Interfacepolicy6Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Interfacepolicy6Input)(nil)).Elem(), &Interfacepolicy6{})
	pulumi.RegisterInputType(reflect.TypeOf((*Interfacepolicy6ArrayInput)(nil)).Elem(), Interfacepolicy6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*Interfacepolicy6MapInput)(nil)).Elem(), Interfacepolicy6Map{})
	pulumi.RegisterOutputType(Interfacepolicy6Output{})
	pulumi.RegisterOutputType(Interfacepolicy6ArrayOutput{})
	pulumi.RegisterOutputType(Interfacepolicy6MapOutput{})
}
