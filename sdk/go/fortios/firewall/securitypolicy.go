// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure NGFW IPv4/IPv6 application policies. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewSecuritypolicy(ctx, "trname", &firewall.SecuritypolicyArgs{
//				Action: pulumi.String("accept"),
//				Dstaddrs: firewall.SecuritypolicyDstaddrArray{
//					&firewall.SecuritypolicyDstaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Dstintfs: firewall.SecuritypolicyDstintfArray{
//					&firewall.SecuritypolicyDstintfArgs{
//						Name: pulumi.String("port4"),
//					},
//				},
//				Logtraffic:             pulumi.String("utm"),
//				Policyid:               pulumi.Int(1),
//				ProfileProtocolOptions: pulumi.String("default"),
//				ProfileType:            pulumi.String("single"),
//				Schedule:               pulumi.String("always"),
//				Srcaddrs: firewall.SecuritypolicySrcaddrArray{
//					&firewall.SecuritypolicySrcaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Srcintfs: firewall.SecuritypolicySrcintfArray{
//					&firewall.SecuritypolicySrcintfArgs{
//						Name: pulumi.String("port2"),
//					},
//				},
//				Status: pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Firewall SecurityPolicy can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/securitypolicy:Securitypolicy labelname {{policyid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/securitypolicy:Securitypolicy labelname {{policyid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Securitypolicy struct {
	pulumi.CustomResourceState

	// Policy action (accept/deny). Valid values: `accept`, `deny`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories SecuritypolicyAppCategoryArrayOutput `pulumi:"appCategories"`
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups SecuritypolicyAppGroupArrayOutput `pulumi:"appGroups"`
	// Name of an existing Application list.
	ApplicationList pulumi.StringOutput `pulumi:"applicationList"`
	// Application ID list. The structure of `application` block is documented below.
	Applications SecuritypolicyApplicationArrayOutput `pulumi:"applications"`
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringOutput `pulumi:"avProfile"`
	// Name of an existing CASB profile.
	CasbProfile pulumi.StringOutput `pulumi:"casbProfile"`
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringOutput `pulumi:"cifsProfile"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Name of an existing Diameter filter profile.
	DiameterFilterProfile pulumi.StringOutput `pulumi:"diameterFilterProfile"`
	// Name of an existing DLP profile.
	DlpProfile pulumi.StringOutput `pulumi:"dlpProfile"`
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringOutput `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringOutput `pulumi:"dnsfilterProfile"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s SecuritypolicyDstaddr4ArrayOutput `pulumi:"dstaddr4s"`
	// When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	Dstaddr6Negate pulumi.StringOutput `pulumi:"dstaddr6Negate"`
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s SecuritypolicyDstaddr6ArrayOutput `pulumi:"dstaddr6s"`
	// When enabled dstaddr/dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate pulumi.StringOutput `pulumi:"dstaddrNegate"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr` block is documented below.
	Dstaddrs SecuritypolicyDstaddrArrayOutput `pulumi:"dstaddrs"`
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs SecuritypolicyDstintfArrayOutput `pulumi:"dstintfs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringOutput `pulumi:"emailfilterProfile"`
	// Enable/disable default application port enforcement for allowed applications. Valid values: `enable`, `disable`.
	EnforceDefaultAppPort pulumi.StringOutput `pulumi:"enforceDefaultAppPort"`
	// Name of an existing file-filter profile.
	FileFilterProfile pulumi.StringOutput `pulumi:"fileFilterProfile"`
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups SecuritypolicyFssoGroupArrayOutput `pulumi:"fssoGroups"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups SecuritypolicyGroupArrayOutput `pulumi:"groups"`
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringOutput `pulumi:"icapProfile"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
	InternetService pulumi.StringOutput `pulumi:"internetService"`
	// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address, service and default application port enforcement are not used. Valid values: `enable`, `disable`.
	InternetService6 pulumi.StringOutput `pulumi:"internetService6"`
	// Custom IPv6 Internet Service group name. The structure of `internetService6CustomGroup` block is documented below.
	InternetService6CustomGroups SecuritypolicyInternetService6CustomGroupArrayOutput `pulumi:"internetService6CustomGroups"`
	// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
	InternetService6Customs SecuritypolicyInternetService6CustomArrayOutput `pulumi:"internetService6Customs"`
	// Internet Service group name. The structure of `internetService6Group` block is documented below.
	InternetService6Groups SecuritypolicyInternetService6GroupArrayOutput `pulumi:"internetService6Groups"`
	// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
	InternetService6Names SecuritypolicyInternetService6NameArrayOutput `pulumi:"internetService6Names"`
	// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6Negate pulumi.StringOutput `pulumi:"internetService6Negate"`
	// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetService6Src pulumi.StringOutput `pulumi:"internetService6Src"`
	// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
	InternetService6SrcCustomGroups SecuritypolicyInternetService6SrcCustomGroupArrayOutput `pulumi:"internetService6SrcCustomGroups"`
	// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
	InternetService6SrcCustoms SecuritypolicyInternetService6SrcCustomArrayOutput `pulumi:"internetService6SrcCustoms"`
	// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
	InternetService6SrcGroups SecuritypolicyInternetService6SrcGroupArrayOutput `pulumi:"internetService6SrcGroups"`
	// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
	InternetService6SrcNames SecuritypolicyInternetService6SrcNameArrayOutput `pulumi:"internetService6SrcNames"`
	// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6SrcNegate pulumi.StringOutput `pulumi:"internetService6SrcNegate"`
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups SecuritypolicyInternetServiceCustomGroupArrayOutput `pulumi:"internetServiceCustomGroups"`
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms SecuritypolicyInternetServiceCustomArrayOutput `pulumi:"internetServiceCustoms"`
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups SecuritypolicyInternetServiceGroupArrayOutput `pulumi:"internetServiceGroups"`
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds SecuritypolicyInternetServiceIdArrayOutput `pulumi:"internetServiceIds"`
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames SecuritypolicyInternetServiceNameArrayOutput `pulumi:"internetServiceNames"`
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate pulumi.StringOutput `pulumi:"internetServiceNegate"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetServiceSrc pulumi.StringOutput `pulumi:"internetServiceSrc"`
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups SecuritypolicyInternetServiceSrcCustomGroupArrayOutput `pulumi:"internetServiceSrcCustomGroups"`
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms SecuritypolicyInternetServiceSrcCustomArrayOutput `pulumi:"internetServiceSrcCustoms"`
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups SecuritypolicyInternetServiceSrcGroupArrayOutput `pulumi:"internetServiceSrcGroups"`
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds SecuritypolicyInternetServiceSrcIdArrayOutput `pulumi:"internetServiceSrcIds"`
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames SecuritypolicyInternetServiceSrcNameArrayOutput `pulumi:"internetServiceSrcNames"`
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate pulumi.StringOutput `pulumi:"internetServiceSrcNegate"`
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringOutput `pulumi:"ipsSensor"`
	// Name of an existing VoIP (ips) profile.
	IpsVoipFilter pulumi.StringOutput `pulumi:"ipsVoipFilter"`
	// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
	LearningMode pulumi.StringOutput `pulumi:"learningMode"`
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringOutput `pulumi:"logtraffic"`
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringOutput `pulumi:"logtrafficStart"`
	// Policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable NAT46. Valid values: `enable`, `disable`.
	Nat46 pulumi.StringOutput `pulumi:"nat46"`
	// Enable/disable NAT64. Valid values: `enable`, `disable`.
	Nat64 pulumi.StringOutput `pulumi:"nat64"`
	// Policy ID.
	Policyid pulumi.IntOutput `pulumi:"policyid"`
	// Name of profile group.
	ProfileGroup pulumi.StringOutput `pulumi:"profileGroup"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringOutput `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType pulumi.StringOutput `pulumi:"profileType"`
	// Schedule name.
	Schedule pulumi.StringOutput `pulumi:"schedule"`
	// Name of an existing SCTP filter profile.
	SctpFilterProfile pulumi.StringOutput `pulumi:"sctpFilterProfile"`
	// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
	SendDenyPacket pulumi.StringOutput `pulumi:"sendDenyPacket"`
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate pulumi.StringOutput `pulumi:"serviceNegate"`
	// Service and service group names. The structure of `service` block is documented below.
	Services SecuritypolicyServiceArrayOutput `pulumi:"services"`
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s SecuritypolicySrcaddr4ArrayOutput `pulumi:"srcaddr4s"`
	// When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	Srcaddr6Negate pulumi.StringOutput `pulumi:"srcaddr6Negate"`
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s SecuritypolicySrcaddr6ArrayOutput `pulumi:"srcaddr6s"`
	// When enabled srcaddr/srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate pulumi.StringOutput `pulumi:"srcaddrNegate"`
	// Source IPv4 address name and address group names. The structure of `srcaddr` block is documented below.
	Srcaddrs SecuritypolicySrcaddrArrayOutput `pulumi:"srcaddrs"`
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs SecuritypolicySrcintfArrayOutput `pulumi:"srcintfs"`
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringOutput `pulumi:"sshFilterProfile"`
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringOutput `pulumi:"sslSshProfile"`
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories SecuritypolicyUrlCategoryArrayOutput `pulumi:"urlCategories"`
	// URL categories or groups.
	UrlCategoryUnitary pulumi.StringOutput `pulumi:"urlCategoryUnitary"`
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users SecuritypolicyUserArrayOutput `pulumi:"users"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Name of an existing VideoFilter profile.
	VideofilterProfile pulumi.StringOutput `pulumi:"videofilterProfile"`
	// Name of an existing virtual-patch profile.
	VirtualPatchProfile pulumi.StringOutput `pulumi:"virtualPatchProfile"`
	// Name of an existing VoIP (voipd) profile.
	VoipProfile pulumi.StringOutput `pulumi:"voipProfile"`
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringOutput `pulumi:"webfilterProfile"`
}

// NewSecuritypolicy registers a new resource with the given unique name, arguments, and options.
func NewSecuritypolicy(ctx *pulumi.Context,
	name string, args *SecuritypolicyArgs, opts ...pulumi.ResourceOption) (*Securitypolicy, error) {
	if args == nil {
		args = &SecuritypolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Securitypolicy
	err := ctx.RegisterResource("fortios:firewall/securitypolicy:Securitypolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecuritypolicy gets an existing Securitypolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecuritypolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecuritypolicyState, opts ...pulumi.ResourceOption) (*Securitypolicy, error) {
	var resource Securitypolicy
	err := ctx.ReadResource("fortios:firewall/securitypolicy:Securitypolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Securitypolicy resources.
type securitypolicyState struct {
	// Policy action (accept/deny). Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories []SecuritypolicyAppCategory `pulumi:"appCategories"`
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups []SecuritypolicyAppGroup `pulumi:"appGroups"`
	// Name of an existing Application list.
	ApplicationList *string `pulumi:"applicationList"`
	// Application ID list. The structure of `application` block is documented below.
	Applications []SecuritypolicyApplication `pulumi:"applications"`
	// Name of an existing Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Name of an existing CASB profile.
	CasbProfile *string `pulumi:"casbProfile"`
	// Name of an existing CIFS profile.
	CifsProfile *string `pulumi:"cifsProfile"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Name of an existing Diameter filter profile.
	DiameterFilterProfile *string `pulumi:"diameterFilterProfile"`
	// Name of an existing DLP profile.
	DlpProfile *string `pulumi:"dlpProfile"`
	// Name of an existing DLP sensor.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s []SecuritypolicyDstaddr4 `pulumi:"dstaddr4s"`
	// When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	Dstaddr6Negate *string `pulumi:"dstaddr6Negate"`
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s []SecuritypolicyDstaddr6 `pulumi:"dstaddr6s"`
	// When enabled dstaddr/dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate *string `pulumi:"dstaddrNegate"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr` block is documented below.
	Dstaddrs []SecuritypolicyDstaddr `pulumi:"dstaddrs"`
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs []SecuritypolicyDstintf `pulumi:"dstintfs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Name of an existing email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable/disable default application port enforcement for allowed applications. Valid values: `enable`, `disable`.
	EnforceDefaultAppPort *string `pulumi:"enforceDefaultAppPort"`
	// Name of an existing file-filter profile.
	FileFilterProfile *string `pulumi:"fileFilterProfile"`
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups []SecuritypolicyFssoGroup `pulumi:"fssoGroups"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups []SecuritypolicyGroup `pulumi:"groups"`
	// Name of an existing ICAP profile.
	IcapProfile *string `pulumi:"icapProfile"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
	InternetService *string `pulumi:"internetService"`
	// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address, service and default application port enforcement are not used. Valid values: `enable`, `disable`.
	InternetService6 *string `pulumi:"internetService6"`
	// Custom IPv6 Internet Service group name. The structure of `internetService6CustomGroup` block is documented below.
	InternetService6CustomGroups []SecuritypolicyInternetService6CustomGroup `pulumi:"internetService6CustomGroups"`
	// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
	InternetService6Customs []SecuritypolicyInternetService6Custom `pulumi:"internetService6Customs"`
	// Internet Service group name. The structure of `internetService6Group` block is documented below.
	InternetService6Groups []SecuritypolicyInternetService6Group `pulumi:"internetService6Groups"`
	// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
	InternetService6Names []SecuritypolicyInternetService6Name `pulumi:"internetService6Names"`
	// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6Negate *string `pulumi:"internetService6Negate"`
	// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetService6Src *string `pulumi:"internetService6Src"`
	// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
	InternetService6SrcCustomGroups []SecuritypolicyInternetService6SrcCustomGroup `pulumi:"internetService6SrcCustomGroups"`
	// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
	InternetService6SrcCustoms []SecuritypolicyInternetService6SrcCustom `pulumi:"internetService6SrcCustoms"`
	// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
	InternetService6SrcGroups []SecuritypolicyInternetService6SrcGroup `pulumi:"internetService6SrcGroups"`
	// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
	InternetService6SrcNames []SecuritypolicyInternetService6SrcName `pulumi:"internetService6SrcNames"`
	// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6SrcNegate *string `pulumi:"internetService6SrcNegate"`
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups []SecuritypolicyInternetServiceCustomGroup `pulumi:"internetServiceCustomGroups"`
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms []SecuritypolicyInternetServiceCustom `pulumi:"internetServiceCustoms"`
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups []SecuritypolicyInternetServiceGroup `pulumi:"internetServiceGroups"`
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds []SecuritypolicyInternetServiceId `pulumi:"internetServiceIds"`
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames []SecuritypolicyInternetServiceName `pulumi:"internetServiceNames"`
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate *string `pulumi:"internetServiceNegate"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetServiceSrc *string `pulumi:"internetServiceSrc"`
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups []SecuritypolicyInternetServiceSrcCustomGroup `pulumi:"internetServiceSrcCustomGroups"`
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms []SecuritypolicyInternetServiceSrcCustom `pulumi:"internetServiceSrcCustoms"`
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups []SecuritypolicyInternetServiceSrcGroup `pulumi:"internetServiceSrcGroups"`
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds []SecuritypolicyInternetServiceSrcId `pulumi:"internetServiceSrcIds"`
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames []SecuritypolicyInternetServiceSrcName `pulumi:"internetServiceSrcNames"`
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate *string `pulumi:"internetServiceSrcNegate"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Name of an existing VoIP (ips) profile.
	IpsVoipFilter *string `pulumi:"ipsVoipFilter"`
	// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
	LearningMode *string `pulumi:"learningMode"`
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Enable/disable NAT46. Valid values: `enable`, `disable`.
	Nat46 *string `pulumi:"nat46"`
	// Enable/disable NAT64. Valid values: `enable`, `disable`.
	Nat64 *string `pulumi:"nat64"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// Name of profile group.
	ProfileGroup *string `pulumi:"profileGroup"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions *string `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType *string `pulumi:"profileType"`
	// Schedule name.
	Schedule *string `pulumi:"schedule"`
	// Name of an existing SCTP filter profile.
	SctpFilterProfile *string `pulumi:"sctpFilterProfile"`
	// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
	SendDenyPacket *string `pulumi:"sendDenyPacket"`
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate *string `pulumi:"serviceNegate"`
	// Service and service group names. The structure of `service` block is documented below.
	Services []SecuritypolicyService `pulumi:"services"`
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s []SecuritypolicySrcaddr4 `pulumi:"srcaddr4s"`
	// When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	Srcaddr6Negate *string `pulumi:"srcaddr6Negate"`
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s []SecuritypolicySrcaddr6 `pulumi:"srcaddr6s"`
	// When enabled srcaddr/srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate *string `pulumi:"srcaddrNegate"`
	// Source IPv4 address name and address group names. The structure of `srcaddr` block is documented below.
	Srcaddrs []SecuritypolicySrcaddr `pulumi:"srcaddrs"`
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs []SecuritypolicySrcintf `pulumi:"srcintfs"`
	// Name of an existing SSH filter profile.
	SshFilterProfile *string `pulumi:"sshFilterProfile"`
	// Name of an existing SSL SSH profile.
	SslSshProfile *string `pulumi:"sslSshProfile"`
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories []SecuritypolicyUrlCategory `pulumi:"urlCategories"`
	// URL categories or groups.
	UrlCategoryUnitary *string `pulumi:"urlCategoryUnitary"`
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users []SecuritypolicyUser `pulumi:"users"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Name of an existing VideoFilter profile.
	VideofilterProfile *string `pulumi:"videofilterProfile"`
	// Name of an existing virtual-patch profile.
	VirtualPatchProfile *string `pulumi:"virtualPatchProfile"`
	// Name of an existing VoIP (voipd) profile.
	VoipProfile *string `pulumi:"voipProfile"`
	// Name of an existing Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
}

type SecuritypolicyState struct {
	// Policy action (accept/deny). Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories SecuritypolicyAppCategoryArrayInput
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups SecuritypolicyAppGroupArrayInput
	// Name of an existing Application list.
	ApplicationList pulumi.StringPtrInput
	// Application ID list. The structure of `application` block is documented below.
	Applications SecuritypolicyApplicationArrayInput
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Name of an existing CASB profile.
	CasbProfile pulumi.StringPtrInput
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Name of an existing Diameter filter profile.
	DiameterFilterProfile pulumi.StringPtrInput
	// Name of an existing DLP profile.
	DlpProfile pulumi.StringPtrInput
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringPtrInput
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s SecuritypolicyDstaddr4ArrayInput
	// When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	Dstaddr6Negate pulumi.StringPtrInput
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s SecuritypolicyDstaddr6ArrayInput
	// When enabled dstaddr/dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate pulumi.StringPtrInput
	// Destination IPv4 address name and address group names. The structure of `dstaddr` block is documented below.
	Dstaddrs SecuritypolicyDstaddrArrayInput
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs SecuritypolicyDstintfArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable/disable default application port enforcement for allowed applications. Valid values: `enable`, `disable`.
	EnforceDefaultAppPort pulumi.StringPtrInput
	// Name of an existing file-filter profile.
	FileFilterProfile pulumi.StringPtrInput
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups SecuritypolicyFssoGroupArrayInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups SecuritypolicyGroupArrayInput
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringPtrInput
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
	InternetService pulumi.StringPtrInput
	// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address, service and default application port enforcement are not used. Valid values: `enable`, `disable`.
	InternetService6 pulumi.StringPtrInput
	// Custom IPv6 Internet Service group name. The structure of `internetService6CustomGroup` block is documented below.
	InternetService6CustomGroups SecuritypolicyInternetService6CustomGroupArrayInput
	// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
	InternetService6Customs SecuritypolicyInternetService6CustomArrayInput
	// Internet Service group name. The structure of `internetService6Group` block is documented below.
	InternetService6Groups SecuritypolicyInternetService6GroupArrayInput
	// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
	InternetService6Names SecuritypolicyInternetService6NameArrayInput
	// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6Negate pulumi.StringPtrInput
	// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetService6Src pulumi.StringPtrInput
	// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
	InternetService6SrcCustomGroups SecuritypolicyInternetService6SrcCustomGroupArrayInput
	// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
	InternetService6SrcCustoms SecuritypolicyInternetService6SrcCustomArrayInput
	// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
	InternetService6SrcGroups SecuritypolicyInternetService6SrcGroupArrayInput
	// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
	InternetService6SrcNames SecuritypolicyInternetService6SrcNameArrayInput
	// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6SrcNegate pulumi.StringPtrInput
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups SecuritypolicyInternetServiceCustomGroupArrayInput
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms SecuritypolicyInternetServiceCustomArrayInput
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups SecuritypolicyInternetServiceGroupArrayInput
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds SecuritypolicyInternetServiceIdArrayInput
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames SecuritypolicyInternetServiceNameArrayInput
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate pulumi.StringPtrInput
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetServiceSrc pulumi.StringPtrInput
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups SecuritypolicyInternetServiceSrcCustomGroupArrayInput
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms SecuritypolicyInternetServiceSrcCustomArrayInput
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups SecuritypolicyInternetServiceSrcGroupArrayInput
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds SecuritypolicyInternetServiceSrcIdArrayInput
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames SecuritypolicyInternetServiceSrcNameArrayInput
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Name of an existing VoIP (ips) profile.
	IpsVoipFilter pulumi.StringPtrInput
	// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
	LearningMode pulumi.StringPtrInput
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Enable/disable NAT46. Valid values: `enable`, `disable`.
	Nat46 pulumi.StringPtrInput
	// Enable/disable NAT64. Valid values: `enable`, `disable`.
	Nat64 pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// Name of profile group.
	ProfileGroup pulumi.StringPtrInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringPtrInput
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType pulumi.StringPtrInput
	// Schedule name.
	Schedule pulumi.StringPtrInput
	// Name of an existing SCTP filter profile.
	SctpFilterProfile pulumi.StringPtrInput
	// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
	SendDenyPacket pulumi.StringPtrInput
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate pulumi.StringPtrInput
	// Service and service group names. The structure of `service` block is documented below.
	Services SecuritypolicyServiceArrayInput
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s SecuritypolicySrcaddr4ArrayInput
	// When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	Srcaddr6Negate pulumi.StringPtrInput
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s SecuritypolicySrcaddr6ArrayInput
	// When enabled srcaddr/srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate pulumi.StringPtrInput
	// Source IPv4 address name and address group names. The structure of `srcaddr` block is documented below.
	Srcaddrs SecuritypolicySrcaddrArrayInput
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs SecuritypolicySrcintfArrayInput
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringPtrInput
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringPtrInput
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories SecuritypolicyUrlCategoryArrayInput
	// URL categories or groups.
	UrlCategoryUnitary pulumi.StringPtrInput
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users SecuritypolicyUserArrayInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Name of an existing VideoFilter profile.
	VideofilterProfile pulumi.StringPtrInput
	// Name of an existing virtual-patch profile.
	VirtualPatchProfile pulumi.StringPtrInput
	// Name of an existing VoIP (voipd) profile.
	VoipProfile pulumi.StringPtrInput
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
}

func (SecuritypolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*securitypolicyState)(nil)).Elem()
}

type securitypolicyArgs struct {
	// Policy action (accept/deny). Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories []SecuritypolicyAppCategory `pulumi:"appCategories"`
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups []SecuritypolicyAppGroup `pulumi:"appGroups"`
	// Name of an existing Application list.
	ApplicationList *string `pulumi:"applicationList"`
	// Application ID list. The structure of `application` block is documented below.
	Applications []SecuritypolicyApplication `pulumi:"applications"`
	// Name of an existing Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Name of an existing CASB profile.
	CasbProfile *string `pulumi:"casbProfile"`
	// Name of an existing CIFS profile.
	CifsProfile *string `pulumi:"cifsProfile"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Name of an existing Diameter filter profile.
	DiameterFilterProfile *string `pulumi:"diameterFilterProfile"`
	// Name of an existing DLP profile.
	DlpProfile *string `pulumi:"dlpProfile"`
	// Name of an existing DLP sensor.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s []SecuritypolicyDstaddr4 `pulumi:"dstaddr4s"`
	// When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	Dstaddr6Negate *string `pulumi:"dstaddr6Negate"`
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s []SecuritypolicyDstaddr6 `pulumi:"dstaddr6s"`
	// When enabled dstaddr/dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate *string `pulumi:"dstaddrNegate"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr` block is documented below.
	Dstaddrs []SecuritypolicyDstaddr `pulumi:"dstaddrs"`
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs []SecuritypolicyDstintf `pulumi:"dstintfs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Name of an existing email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable/disable default application port enforcement for allowed applications. Valid values: `enable`, `disable`.
	EnforceDefaultAppPort *string `pulumi:"enforceDefaultAppPort"`
	// Name of an existing file-filter profile.
	FileFilterProfile *string `pulumi:"fileFilterProfile"`
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups []SecuritypolicyFssoGroup `pulumi:"fssoGroups"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups []SecuritypolicyGroup `pulumi:"groups"`
	// Name of an existing ICAP profile.
	IcapProfile *string `pulumi:"icapProfile"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
	InternetService *string `pulumi:"internetService"`
	// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address, service and default application port enforcement are not used. Valid values: `enable`, `disable`.
	InternetService6 *string `pulumi:"internetService6"`
	// Custom IPv6 Internet Service group name. The structure of `internetService6CustomGroup` block is documented below.
	InternetService6CustomGroups []SecuritypolicyInternetService6CustomGroup `pulumi:"internetService6CustomGroups"`
	// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
	InternetService6Customs []SecuritypolicyInternetService6Custom `pulumi:"internetService6Customs"`
	// Internet Service group name. The structure of `internetService6Group` block is documented below.
	InternetService6Groups []SecuritypolicyInternetService6Group `pulumi:"internetService6Groups"`
	// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
	InternetService6Names []SecuritypolicyInternetService6Name `pulumi:"internetService6Names"`
	// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6Negate *string `pulumi:"internetService6Negate"`
	// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetService6Src *string `pulumi:"internetService6Src"`
	// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
	InternetService6SrcCustomGroups []SecuritypolicyInternetService6SrcCustomGroup `pulumi:"internetService6SrcCustomGroups"`
	// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
	InternetService6SrcCustoms []SecuritypolicyInternetService6SrcCustom `pulumi:"internetService6SrcCustoms"`
	// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
	InternetService6SrcGroups []SecuritypolicyInternetService6SrcGroup `pulumi:"internetService6SrcGroups"`
	// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
	InternetService6SrcNames []SecuritypolicyInternetService6SrcName `pulumi:"internetService6SrcNames"`
	// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6SrcNegate *string `pulumi:"internetService6SrcNegate"`
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups []SecuritypolicyInternetServiceCustomGroup `pulumi:"internetServiceCustomGroups"`
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms []SecuritypolicyInternetServiceCustom `pulumi:"internetServiceCustoms"`
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups []SecuritypolicyInternetServiceGroup `pulumi:"internetServiceGroups"`
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds []SecuritypolicyInternetServiceId `pulumi:"internetServiceIds"`
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames []SecuritypolicyInternetServiceName `pulumi:"internetServiceNames"`
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate *string `pulumi:"internetServiceNegate"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetServiceSrc *string `pulumi:"internetServiceSrc"`
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups []SecuritypolicyInternetServiceSrcCustomGroup `pulumi:"internetServiceSrcCustomGroups"`
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms []SecuritypolicyInternetServiceSrcCustom `pulumi:"internetServiceSrcCustoms"`
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups []SecuritypolicyInternetServiceSrcGroup `pulumi:"internetServiceSrcGroups"`
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds []SecuritypolicyInternetServiceSrcId `pulumi:"internetServiceSrcIds"`
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames []SecuritypolicyInternetServiceSrcName `pulumi:"internetServiceSrcNames"`
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate *string `pulumi:"internetServiceSrcNegate"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Name of an existing VoIP (ips) profile.
	IpsVoipFilter *string `pulumi:"ipsVoipFilter"`
	// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
	LearningMode *string `pulumi:"learningMode"`
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Enable/disable NAT46. Valid values: `enable`, `disable`.
	Nat46 *string `pulumi:"nat46"`
	// Enable/disable NAT64. Valid values: `enable`, `disable`.
	Nat64 *string `pulumi:"nat64"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// Name of profile group.
	ProfileGroup *string `pulumi:"profileGroup"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions *string `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType *string `pulumi:"profileType"`
	// Schedule name.
	Schedule *string `pulumi:"schedule"`
	// Name of an existing SCTP filter profile.
	SctpFilterProfile *string `pulumi:"sctpFilterProfile"`
	// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
	SendDenyPacket *string `pulumi:"sendDenyPacket"`
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate *string `pulumi:"serviceNegate"`
	// Service and service group names. The structure of `service` block is documented below.
	Services []SecuritypolicyService `pulumi:"services"`
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s []SecuritypolicySrcaddr4 `pulumi:"srcaddr4s"`
	// When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	Srcaddr6Negate *string `pulumi:"srcaddr6Negate"`
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s []SecuritypolicySrcaddr6 `pulumi:"srcaddr6s"`
	// When enabled srcaddr/srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate *string `pulumi:"srcaddrNegate"`
	// Source IPv4 address name and address group names. The structure of `srcaddr` block is documented below.
	Srcaddrs []SecuritypolicySrcaddr `pulumi:"srcaddrs"`
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs []SecuritypolicySrcintf `pulumi:"srcintfs"`
	// Name of an existing SSH filter profile.
	SshFilterProfile *string `pulumi:"sshFilterProfile"`
	// Name of an existing SSL SSH profile.
	SslSshProfile *string `pulumi:"sslSshProfile"`
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories []SecuritypolicyUrlCategory `pulumi:"urlCategories"`
	// URL categories or groups.
	UrlCategoryUnitary *string `pulumi:"urlCategoryUnitary"`
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users []SecuritypolicyUser `pulumi:"users"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Name of an existing VideoFilter profile.
	VideofilterProfile *string `pulumi:"videofilterProfile"`
	// Name of an existing virtual-patch profile.
	VirtualPatchProfile *string `pulumi:"virtualPatchProfile"`
	// Name of an existing VoIP (voipd) profile.
	VoipProfile *string `pulumi:"voipProfile"`
	// Name of an existing Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
}

// The set of arguments for constructing a Securitypolicy resource.
type SecuritypolicyArgs struct {
	// Policy action (accept/deny). Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories SecuritypolicyAppCategoryArrayInput
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups SecuritypolicyAppGroupArrayInput
	// Name of an existing Application list.
	ApplicationList pulumi.StringPtrInput
	// Application ID list. The structure of `application` block is documented below.
	Applications SecuritypolicyApplicationArrayInput
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Name of an existing CASB profile.
	CasbProfile pulumi.StringPtrInput
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Name of an existing Diameter filter profile.
	DiameterFilterProfile pulumi.StringPtrInput
	// Name of an existing DLP profile.
	DlpProfile pulumi.StringPtrInput
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringPtrInput
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s SecuritypolicyDstaddr4ArrayInput
	// When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	Dstaddr6Negate pulumi.StringPtrInput
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s SecuritypolicyDstaddr6ArrayInput
	// When enabled dstaddr/dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate pulumi.StringPtrInput
	// Destination IPv4 address name and address group names. The structure of `dstaddr` block is documented below.
	Dstaddrs SecuritypolicyDstaddrArrayInput
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs SecuritypolicyDstintfArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable/disable default application port enforcement for allowed applications. Valid values: `enable`, `disable`.
	EnforceDefaultAppPort pulumi.StringPtrInput
	// Name of an existing file-filter profile.
	FileFilterProfile pulumi.StringPtrInput
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups SecuritypolicyFssoGroupArrayInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups SecuritypolicyGroupArrayInput
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringPtrInput
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
	InternetService pulumi.StringPtrInput
	// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address, service and default application port enforcement are not used. Valid values: `enable`, `disable`.
	InternetService6 pulumi.StringPtrInput
	// Custom IPv6 Internet Service group name. The structure of `internetService6CustomGroup` block is documented below.
	InternetService6CustomGroups SecuritypolicyInternetService6CustomGroupArrayInput
	// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
	InternetService6Customs SecuritypolicyInternetService6CustomArrayInput
	// Internet Service group name. The structure of `internetService6Group` block is documented below.
	InternetService6Groups SecuritypolicyInternetService6GroupArrayInput
	// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
	InternetService6Names SecuritypolicyInternetService6NameArrayInput
	// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6Negate pulumi.StringPtrInput
	// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetService6Src pulumi.StringPtrInput
	// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
	InternetService6SrcCustomGroups SecuritypolicyInternetService6SrcCustomGroupArrayInput
	// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
	InternetService6SrcCustoms SecuritypolicyInternetService6SrcCustomArrayInput
	// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
	InternetService6SrcGroups SecuritypolicyInternetService6SrcGroupArrayInput
	// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
	InternetService6SrcNames SecuritypolicyInternetService6SrcNameArrayInput
	// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6SrcNegate pulumi.StringPtrInput
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups SecuritypolicyInternetServiceCustomGroupArrayInput
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms SecuritypolicyInternetServiceCustomArrayInput
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups SecuritypolicyInternetServiceGroupArrayInput
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds SecuritypolicyInternetServiceIdArrayInput
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames SecuritypolicyInternetServiceNameArrayInput
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate pulumi.StringPtrInput
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetServiceSrc pulumi.StringPtrInput
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups SecuritypolicyInternetServiceSrcCustomGroupArrayInput
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms SecuritypolicyInternetServiceSrcCustomArrayInput
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups SecuritypolicyInternetServiceSrcGroupArrayInput
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds SecuritypolicyInternetServiceSrcIdArrayInput
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames SecuritypolicyInternetServiceSrcNameArrayInput
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Name of an existing VoIP (ips) profile.
	IpsVoipFilter pulumi.StringPtrInput
	// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
	LearningMode pulumi.StringPtrInput
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Enable/disable NAT46. Valid values: `enable`, `disable`.
	Nat46 pulumi.StringPtrInput
	// Enable/disable NAT64. Valid values: `enable`, `disable`.
	Nat64 pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// Name of profile group.
	ProfileGroup pulumi.StringPtrInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringPtrInput
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType pulumi.StringPtrInput
	// Schedule name.
	Schedule pulumi.StringPtrInput
	// Name of an existing SCTP filter profile.
	SctpFilterProfile pulumi.StringPtrInput
	// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
	SendDenyPacket pulumi.StringPtrInput
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate pulumi.StringPtrInput
	// Service and service group names. The structure of `service` block is documented below.
	Services SecuritypolicyServiceArrayInput
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s SecuritypolicySrcaddr4ArrayInput
	// When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	Srcaddr6Negate pulumi.StringPtrInput
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s SecuritypolicySrcaddr6ArrayInput
	// When enabled srcaddr/srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate pulumi.StringPtrInput
	// Source IPv4 address name and address group names. The structure of `srcaddr` block is documented below.
	Srcaddrs SecuritypolicySrcaddrArrayInput
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs SecuritypolicySrcintfArrayInput
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringPtrInput
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringPtrInput
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories SecuritypolicyUrlCategoryArrayInput
	// URL categories or groups.
	UrlCategoryUnitary pulumi.StringPtrInput
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users SecuritypolicyUserArrayInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Name of an existing VideoFilter profile.
	VideofilterProfile pulumi.StringPtrInput
	// Name of an existing virtual-patch profile.
	VirtualPatchProfile pulumi.StringPtrInput
	// Name of an existing VoIP (voipd) profile.
	VoipProfile pulumi.StringPtrInput
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
}

func (SecuritypolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securitypolicyArgs)(nil)).Elem()
}

type SecuritypolicyInput interface {
	pulumi.Input

	ToSecuritypolicyOutput() SecuritypolicyOutput
	ToSecuritypolicyOutputWithContext(ctx context.Context) SecuritypolicyOutput
}

func (*Securitypolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**Securitypolicy)(nil)).Elem()
}

func (i *Securitypolicy) ToSecuritypolicyOutput() SecuritypolicyOutput {
	return i.ToSecuritypolicyOutputWithContext(context.Background())
}

func (i *Securitypolicy) ToSecuritypolicyOutputWithContext(ctx context.Context) SecuritypolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecuritypolicyOutput)
}

// SecuritypolicyArrayInput is an input type that accepts SecuritypolicyArray and SecuritypolicyArrayOutput values.
// You can construct a concrete instance of `SecuritypolicyArrayInput` via:
//
//	SecuritypolicyArray{ SecuritypolicyArgs{...} }
type SecuritypolicyArrayInput interface {
	pulumi.Input

	ToSecuritypolicyArrayOutput() SecuritypolicyArrayOutput
	ToSecuritypolicyArrayOutputWithContext(context.Context) SecuritypolicyArrayOutput
}

type SecuritypolicyArray []SecuritypolicyInput

func (SecuritypolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Securitypolicy)(nil)).Elem()
}

func (i SecuritypolicyArray) ToSecuritypolicyArrayOutput() SecuritypolicyArrayOutput {
	return i.ToSecuritypolicyArrayOutputWithContext(context.Background())
}

func (i SecuritypolicyArray) ToSecuritypolicyArrayOutputWithContext(ctx context.Context) SecuritypolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecuritypolicyArrayOutput)
}

// SecuritypolicyMapInput is an input type that accepts SecuritypolicyMap and SecuritypolicyMapOutput values.
// You can construct a concrete instance of `SecuritypolicyMapInput` via:
//
//	SecuritypolicyMap{ "key": SecuritypolicyArgs{...} }
type SecuritypolicyMapInput interface {
	pulumi.Input

	ToSecuritypolicyMapOutput() SecuritypolicyMapOutput
	ToSecuritypolicyMapOutputWithContext(context.Context) SecuritypolicyMapOutput
}

type SecuritypolicyMap map[string]SecuritypolicyInput

func (SecuritypolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Securitypolicy)(nil)).Elem()
}

func (i SecuritypolicyMap) ToSecuritypolicyMapOutput() SecuritypolicyMapOutput {
	return i.ToSecuritypolicyMapOutputWithContext(context.Background())
}

func (i SecuritypolicyMap) ToSecuritypolicyMapOutputWithContext(ctx context.Context) SecuritypolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecuritypolicyMapOutput)
}

type SecuritypolicyOutput struct{ *pulumi.OutputState }

func (SecuritypolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Securitypolicy)(nil)).Elem()
}

func (o SecuritypolicyOutput) ToSecuritypolicyOutput() SecuritypolicyOutput {
	return o
}

func (o SecuritypolicyOutput) ToSecuritypolicyOutputWithContext(ctx context.Context) SecuritypolicyOutput {
	return o
}

// Policy action (accept/deny). Valid values: `accept`, `deny`.
func (o SecuritypolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Application category ID list. The structure of `appCategory` block is documented below.
func (o SecuritypolicyOutput) AppCategories() SecuritypolicyAppCategoryArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyAppCategoryArrayOutput { return v.AppCategories }).(SecuritypolicyAppCategoryArrayOutput)
}

// Application group names. The structure of `appGroup` block is documented below.
func (o SecuritypolicyOutput) AppGroups() SecuritypolicyAppGroupArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyAppGroupArrayOutput { return v.AppGroups }).(SecuritypolicyAppGroupArrayOutput)
}

// Name of an existing Application list.
func (o SecuritypolicyOutput) ApplicationList() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.ApplicationList }).(pulumi.StringOutput)
}

// Application ID list. The structure of `application` block is documented below.
func (o SecuritypolicyOutput) Applications() SecuritypolicyApplicationArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyApplicationArrayOutput { return v.Applications }).(SecuritypolicyApplicationArrayOutput)
}

// Name of an existing Antivirus profile.
func (o SecuritypolicyOutput) AvProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.AvProfile }).(pulumi.StringOutput)
}

// Name of an existing CASB profile.
func (o SecuritypolicyOutput) CasbProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.CasbProfile }).(pulumi.StringOutput)
}

// Name of an existing CIFS profile.
func (o SecuritypolicyOutput) CifsProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.CifsProfile }).(pulumi.StringOutput)
}

// Comment.
func (o SecuritypolicyOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Name of an existing Diameter filter profile.
func (o SecuritypolicyOutput) DiameterFilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.DiameterFilterProfile }).(pulumi.StringOutput)
}

// Name of an existing DLP profile.
func (o SecuritypolicyOutput) DlpProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.DlpProfile }).(pulumi.StringOutput)
}

// Name of an existing DLP sensor.
func (o SecuritypolicyOutput) DlpSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.DlpSensor }).(pulumi.StringOutput)
}

// Name of an existing DNS filter profile.
func (o SecuritypolicyOutput) DnsfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.DnsfilterProfile }).(pulumi.StringOutput)
}

// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
func (o SecuritypolicyOutput) Dstaddr4s() SecuritypolicyDstaddr4ArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyDstaddr4ArrayOutput { return v.Dstaddr4s }).(SecuritypolicyDstaddr4ArrayOutput)
}

// When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) Dstaddr6Negate() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.Dstaddr6Negate }).(pulumi.StringOutput)
}

// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
func (o SecuritypolicyOutput) Dstaddr6s() SecuritypolicyDstaddr6ArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyDstaddr6ArrayOutput { return v.Dstaddr6s }).(SecuritypolicyDstaddr6ArrayOutput)
}

// When enabled dstaddr/dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) DstaddrNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.DstaddrNegate }).(pulumi.StringOutput)
}

// Destination IPv4 address name and address group names. The structure of `dstaddr` block is documented below.
func (o SecuritypolicyOutput) Dstaddrs() SecuritypolicyDstaddrArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyDstaddrArrayOutput { return v.Dstaddrs }).(SecuritypolicyDstaddrArrayOutput)
}

// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
func (o SecuritypolicyOutput) Dstintfs() SecuritypolicyDstintfArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyDstintfArrayOutput { return v.Dstintfs }).(SecuritypolicyDstintfArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SecuritypolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Name of an existing email filter profile.
func (o SecuritypolicyOutput) EmailfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.EmailfilterProfile }).(pulumi.StringOutput)
}

// Enable/disable default application port enforcement for allowed applications. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) EnforceDefaultAppPort() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.EnforceDefaultAppPort }).(pulumi.StringOutput)
}

// Name of an existing file-filter profile.
func (o SecuritypolicyOutput) FileFilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.FileFilterProfile }).(pulumi.StringOutput)
}

// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
func (o SecuritypolicyOutput) FssoGroups() SecuritypolicyFssoGroupArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyFssoGroupArrayOutput { return v.FssoGroups }).(SecuritypolicyFssoGroupArrayOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o SecuritypolicyOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
func (o SecuritypolicyOutput) Groups() SecuritypolicyGroupArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyGroupArrayOutput { return v.Groups }).(SecuritypolicyGroupArrayOutput)
}

// Name of an existing ICAP profile.
func (o SecuritypolicyOutput) IcapProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.IcapProfile }).(pulumi.StringOutput)
}

// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) InternetService() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.InternetService }).(pulumi.StringOutput)
}

// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address, service and default application port enforcement are not used. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) InternetService6() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.InternetService6 }).(pulumi.StringOutput)
}

// Custom IPv6 Internet Service group name. The structure of `internetService6CustomGroup` block is documented below.
func (o SecuritypolicyOutput) InternetService6CustomGroups() SecuritypolicyInternetService6CustomGroupArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetService6CustomGroupArrayOutput {
		return v.InternetService6CustomGroups
	}).(SecuritypolicyInternetService6CustomGroupArrayOutput)
}

// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
func (o SecuritypolicyOutput) InternetService6Customs() SecuritypolicyInternetService6CustomArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetService6CustomArrayOutput {
		return v.InternetService6Customs
	}).(SecuritypolicyInternetService6CustomArrayOutput)
}

// Internet Service group name. The structure of `internetService6Group` block is documented below.
func (o SecuritypolicyOutput) InternetService6Groups() SecuritypolicyInternetService6GroupArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetService6GroupArrayOutput {
		return v.InternetService6Groups
	}).(SecuritypolicyInternetService6GroupArrayOutput)
}

// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
func (o SecuritypolicyOutput) InternetService6Names() SecuritypolicyInternetService6NameArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetService6NameArrayOutput { return v.InternetService6Names }).(SecuritypolicyInternetService6NameArrayOutput)
}

// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) InternetService6Negate() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.InternetService6Negate }).(pulumi.StringOutput)
}

// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) InternetService6Src() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.InternetService6Src }).(pulumi.StringOutput)
}

// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
func (o SecuritypolicyOutput) InternetService6SrcCustomGroups() SecuritypolicyInternetService6SrcCustomGroupArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetService6SrcCustomGroupArrayOutput {
		return v.InternetService6SrcCustomGroups
	}).(SecuritypolicyInternetService6SrcCustomGroupArrayOutput)
}

// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
func (o SecuritypolicyOutput) InternetService6SrcCustoms() SecuritypolicyInternetService6SrcCustomArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetService6SrcCustomArrayOutput {
		return v.InternetService6SrcCustoms
	}).(SecuritypolicyInternetService6SrcCustomArrayOutput)
}

// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
func (o SecuritypolicyOutput) InternetService6SrcGroups() SecuritypolicyInternetService6SrcGroupArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetService6SrcGroupArrayOutput {
		return v.InternetService6SrcGroups
	}).(SecuritypolicyInternetService6SrcGroupArrayOutput)
}

// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
func (o SecuritypolicyOutput) InternetService6SrcNames() SecuritypolicyInternetService6SrcNameArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetService6SrcNameArrayOutput {
		return v.InternetService6SrcNames
	}).(SecuritypolicyInternetService6SrcNameArrayOutput)
}

// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) InternetService6SrcNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.InternetService6SrcNegate }).(pulumi.StringOutput)
}

// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
func (o SecuritypolicyOutput) InternetServiceCustomGroups() SecuritypolicyInternetServiceCustomGroupArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetServiceCustomGroupArrayOutput {
		return v.InternetServiceCustomGroups
	}).(SecuritypolicyInternetServiceCustomGroupArrayOutput)
}

// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
func (o SecuritypolicyOutput) InternetServiceCustoms() SecuritypolicyInternetServiceCustomArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetServiceCustomArrayOutput {
		return v.InternetServiceCustoms
	}).(SecuritypolicyInternetServiceCustomArrayOutput)
}

// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
func (o SecuritypolicyOutput) InternetServiceGroups() SecuritypolicyInternetServiceGroupArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetServiceGroupArrayOutput { return v.InternetServiceGroups }).(SecuritypolicyInternetServiceGroupArrayOutput)
}

// Internet Service ID. The structure of `internetServiceId` block is documented below.
func (o SecuritypolicyOutput) InternetServiceIds() SecuritypolicyInternetServiceIdArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetServiceIdArrayOutput { return v.InternetServiceIds }).(SecuritypolicyInternetServiceIdArrayOutput)
}

// Internet Service name. The structure of `internetServiceName` block is documented below.
func (o SecuritypolicyOutput) InternetServiceNames() SecuritypolicyInternetServiceNameArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetServiceNameArrayOutput { return v.InternetServiceNames }).(SecuritypolicyInternetServiceNameArrayOutput)
}

// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) InternetServiceNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.InternetServiceNegate }).(pulumi.StringOutput)
}

// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) InternetServiceSrc() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.InternetServiceSrc }).(pulumi.StringOutput)
}

// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
func (o SecuritypolicyOutput) InternetServiceSrcCustomGroups() SecuritypolicyInternetServiceSrcCustomGroupArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetServiceSrcCustomGroupArrayOutput {
		return v.InternetServiceSrcCustomGroups
	}).(SecuritypolicyInternetServiceSrcCustomGroupArrayOutput)
}

// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
func (o SecuritypolicyOutput) InternetServiceSrcCustoms() SecuritypolicyInternetServiceSrcCustomArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetServiceSrcCustomArrayOutput {
		return v.InternetServiceSrcCustoms
	}).(SecuritypolicyInternetServiceSrcCustomArrayOutput)
}

// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
func (o SecuritypolicyOutput) InternetServiceSrcGroups() SecuritypolicyInternetServiceSrcGroupArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetServiceSrcGroupArrayOutput {
		return v.InternetServiceSrcGroups
	}).(SecuritypolicyInternetServiceSrcGroupArrayOutput)
}

// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
func (o SecuritypolicyOutput) InternetServiceSrcIds() SecuritypolicyInternetServiceSrcIdArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetServiceSrcIdArrayOutput { return v.InternetServiceSrcIds }).(SecuritypolicyInternetServiceSrcIdArrayOutput)
}

// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
func (o SecuritypolicyOutput) InternetServiceSrcNames() SecuritypolicyInternetServiceSrcNameArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyInternetServiceSrcNameArrayOutput {
		return v.InternetServiceSrcNames
	}).(SecuritypolicyInternetServiceSrcNameArrayOutput)
}

// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) InternetServiceSrcNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.InternetServiceSrcNegate }).(pulumi.StringOutput)
}

// Name of an existing IPS sensor.
func (o SecuritypolicyOutput) IpsSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.IpsSensor }).(pulumi.StringOutput)
}

// Name of an existing VoIP (ips) profile.
func (o SecuritypolicyOutput) IpsVoipFilter() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.IpsVoipFilter }).(pulumi.StringOutput)
}

// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) LearningMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.LearningMode }).(pulumi.StringOutput)
}

// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
func (o SecuritypolicyOutput) Logtraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.Logtraffic }).(pulumi.StringOutput)
}

// Record logs when a session starts. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) LogtrafficStart() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.LogtrafficStart }).(pulumi.StringOutput)
}

// Policy name.
func (o SecuritypolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable NAT46. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) Nat46() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.Nat46 }).(pulumi.StringOutput)
}

// Enable/disable NAT64. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) Nat64() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.Nat64 }).(pulumi.StringOutput)
}

// Policy ID.
func (o SecuritypolicyOutput) Policyid() pulumi.IntOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.IntOutput { return v.Policyid }).(pulumi.IntOutput)
}

// Name of profile group.
func (o SecuritypolicyOutput) ProfileGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.ProfileGroup }).(pulumi.StringOutput)
}

// Name of an existing Protocol options profile.
func (o SecuritypolicyOutput) ProfileProtocolOptions() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.ProfileProtocolOptions }).(pulumi.StringOutput)
}

// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
func (o SecuritypolicyOutput) ProfileType() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.ProfileType }).(pulumi.StringOutput)
}

// Schedule name.
func (o SecuritypolicyOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.Schedule }).(pulumi.StringOutput)
}

// Name of an existing SCTP filter profile.
func (o SecuritypolicyOutput) SctpFilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.SctpFilterProfile }).(pulumi.StringOutput)
}

// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
func (o SecuritypolicyOutput) SendDenyPacket() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.SendDenyPacket }).(pulumi.StringOutput)
}

// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) ServiceNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.ServiceNegate }).(pulumi.StringOutput)
}

// Service and service group names. The structure of `service` block is documented below.
func (o SecuritypolicyOutput) Services() SecuritypolicyServiceArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyServiceArrayOutput { return v.Services }).(SecuritypolicyServiceArrayOutput)
}

// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
func (o SecuritypolicyOutput) Srcaddr4s() SecuritypolicySrcaddr4ArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicySrcaddr4ArrayOutput { return v.Srcaddr4s }).(SecuritypolicySrcaddr4ArrayOutput)
}

// When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) Srcaddr6Negate() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.Srcaddr6Negate }).(pulumi.StringOutput)
}

// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
func (o SecuritypolicyOutput) Srcaddr6s() SecuritypolicySrcaddr6ArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicySrcaddr6ArrayOutput { return v.Srcaddr6s }).(SecuritypolicySrcaddr6ArrayOutput)
}

// When enabled srcaddr/srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) SrcaddrNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.SrcaddrNegate }).(pulumi.StringOutput)
}

// Source IPv4 address name and address group names. The structure of `srcaddr` block is documented below.
func (o SecuritypolicyOutput) Srcaddrs() SecuritypolicySrcaddrArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicySrcaddrArrayOutput { return v.Srcaddrs }).(SecuritypolicySrcaddrArrayOutput)
}

// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
func (o SecuritypolicyOutput) Srcintfs() SecuritypolicySrcintfArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicySrcintfArrayOutput { return v.Srcintfs }).(SecuritypolicySrcintfArrayOutput)
}

// Name of an existing SSH filter profile.
func (o SecuritypolicyOutput) SshFilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.SshFilterProfile }).(pulumi.StringOutput)
}

// Name of an existing SSL SSH profile.
func (o SecuritypolicyOutput) SslSshProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.SslSshProfile }).(pulumi.StringOutput)
}

// Enable or disable this policy. Valid values: `enable`, `disable`.
func (o SecuritypolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// URL category ID list. The structure of `urlCategory` block is documented below.
func (o SecuritypolicyOutput) UrlCategories() SecuritypolicyUrlCategoryArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyUrlCategoryArrayOutput { return v.UrlCategories }).(SecuritypolicyUrlCategoryArrayOutput)
}

// URL categories or groups.
func (o SecuritypolicyOutput) UrlCategoryUnitary() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.UrlCategoryUnitary }).(pulumi.StringOutput)
}

// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
func (o SecuritypolicyOutput) Users() SecuritypolicyUserArrayOutput {
	return o.ApplyT(func(v *Securitypolicy) SecuritypolicyUserArrayOutput { return v.Users }).(SecuritypolicyUserArrayOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o SecuritypolicyOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SecuritypolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Name of an existing VideoFilter profile.
func (o SecuritypolicyOutput) VideofilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.VideofilterProfile }).(pulumi.StringOutput)
}

// Name of an existing virtual-patch profile.
func (o SecuritypolicyOutput) VirtualPatchProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.VirtualPatchProfile }).(pulumi.StringOutput)
}

// Name of an existing VoIP (voipd) profile.
func (o SecuritypolicyOutput) VoipProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.VoipProfile }).(pulumi.StringOutput)
}

// Name of an existing Web filter profile.
func (o SecuritypolicyOutput) WebfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Securitypolicy) pulumi.StringOutput { return v.WebfilterProfile }).(pulumi.StringOutput)
}

type SecuritypolicyArrayOutput struct{ *pulumi.OutputState }

func (SecuritypolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Securitypolicy)(nil)).Elem()
}

func (o SecuritypolicyArrayOutput) ToSecuritypolicyArrayOutput() SecuritypolicyArrayOutput {
	return o
}

func (o SecuritypolicyArrayOutput) ToSecuritypolicyArrayOutputWithContext(ctx context.Context) SecuritypolicyArrayOutput {
	return o
}

func (o SecuritypolicyArrayOutput) Index(i pulumi.IntInput) SecuritypolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Securitypolicy {
		return vs[0].([]*Securitypolicy)[vs[1].(int)]
	}).(SecuritypolicyOutput)
}

type SecuritypolicyMapOutput struct{ *pulumi.OutputState }

func (SecuritypolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Securitypolicy)(nil)).Elem()
}

func (o SecuritypolicyMapOutput) ToSecuritypolicyMapOutput() SecuritypolicyMapOutput {
	return o
}

func (o SecuritypolicyMapOutput) ToSecuritypolicyMapOutputWithContext(ctx context.Context) SecuritypolicyMapOutput {
	return o
}

func (o SecuritypolicyMapOutput) MapIndex(k pulumi.StringInput) SecuritypolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Securitypolicy {
		return vs[0].(map[string]*Securitypolicy)[vs[1].(string)]
	}).(SecuritypolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecuritypolicyInput)(nil)).Elem(), &Securitypolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecuritypolicyArrayInput)(nil)).Elem(), SecuritypolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecuritypolicyMapInput)(nil)).Elem(), SecuritypolicyMap{})
	pulumi.RegisterOutputType(SecuritypolicyOutput{})
	pulumi.RegisterOutputType(SecuritypolicyArrayOutput{})
	pulumi.RegisterOutputType(SecuritypolicyMapOutput{})
}
