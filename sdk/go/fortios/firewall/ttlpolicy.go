// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure TTL policies.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewTtlpolicy(ctx, "trname", &firewall.TtlpolicyArgs{
//				Action:   pulumi.String("accept"),
//				Fosid:    pulumi.Int(1),
//				Schedule: pulumi.String("always"),
//				Services: firewall.TtlpolicyServiceArray{
//					&firewall.TtlpolicyServiceArgs{
//						Name: pulumi.String("ALL"),
//					},
//				},
//				Srcaddrs: firewall.TtlpolicySrcaddrArray{
//					&firewall.TtlpolicySrcaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Srcintf: pulumi.String("port3"),
//				Status:  pulumi.String("enable"),
//				Ttl:     pulumi.String("23"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Firewall TtlPolicy can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/ttlpolicy:Ttlpolicy labelname {{fosid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/ttlpolicy:Ttlpolicy labelname {{fosid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Ttlpolicy struct {
	pulumi.CustomResourceState

	// Action to be performed on traffic matching this policy (default = deny). Valid values: `accept`, `deny`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Schedule object from available options.
	Schedule pulumi.StringOutput `pulumi:"schedule"`
	// Service object(s) from available options. Separate multiple names with a space. The structure of `service` block is documented below.
	Services TtlpolicyServiceArrayOutput `pulumi:"services"`
	// Source address object(s) from available options. Separate multiple names with a space. The structure of `srcaddr` block is documented below.
	Srcaddrs TtlpolicySrcaddrArrayOutput `pulumi:"srcaddrs"`
	// Source interface name from available interfaces.
	Srcintf pulumi.StringOutput `pulumi:"srcintf"`
	// Enable/disable this TTL policy. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Value/range to match against the packet's Time to Live value (format: ttl[ - ttlHigh], 1 - 255).
	Ttl pulumi.StringOutput `pulumi:"ttl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewTtlpolicy registers a new resource with the given unique name, arguments, and options.
func NewTtlpolicy(ctx *pulumi.Context,
	name string, args *TtlpolicyArgs, opts ...pulumi.ResourceOption) (*Ttlpolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	if args.Services == nil {
		return nil, errors.New("invalid value for required argument 'Services'")
	}
	if args.Srcaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Srcaddrs'")
	}
	if args.Srcintf == nil {
		return nil, errors.New("invalid value for required argument 'Srcintf'")
	}
	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ttlpolicy
	err := ctx.RegisterResource("fortios:firewall/ttlpolicy:Ttlpolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTtlpolicy gets an existing Ttlpolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTtlpolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TtlpolicyState, opts ...pulumi.ResourceOption) (*Ttlpolicy, error) {
	var resource Ttlpolicy
	err := ctx.ReadResource("fortios:firewall/ttlpolicy:Ttlpolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ttlpolicy resources.
type ttlpolicyState struct {
	// Action to be performed on traffic matching this policy (default = deny). Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// ID.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Schedule object from available options.
	Schedule *string `pulumi:"schedule"`
	// Service object(s) from available options. Separate multiple names with a space. The structure of `service` block is documented below.
	Services []TtlpolicyService `pulumi:"services"`
	// Source address object(s) from available options. Separate multiple names with a space. The structure of `srcaddr` block is documented below.
	Srcaddrs []TtlpolicySrcaddr `pulumi:"srcaddrs"`
	// Source interface name from available interfaces.
	Srcintf *string `pulumi:"srcintf"`
	// Enable/disable this TTL policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Value/range to match against the packet's Time to Live value (format: ttl[ - ttlHigh], 1 - 255).
	Ttl *string `pulumi:"ttl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type TtlpolicyState struct {
	// Action to be performed on traffic matching this policy (default = deny). Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// ID.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Schedule object from available options.
	Schedule pulumi.StringPtrInput
	// Service object(s) from available options. Separate multiple names with a space. The structure of `service` block is documented below.
	Services TtlpolicyServiceArrayInput
	// Source address object(s) from available options. Separate multiple names with a space. The structure of `srcaddr` block is documented below.
	Srcaddrs TtlpolicySrcaddrArrayInput
	// Source interface name from available interfaces.
	Srcintf pulumi.StringPtrInput
	// Enable/disable this TTL policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Value/range to match against the packet's Time to Live value (format: ttl[ - ttlHigh], 1 - 255).
	Ttl pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (TtlpolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*ttlpolicyState)(nil)).Elem()
}

type ttlpolicyArgs struct {
	// Action to be performed on traffic matching this policy (default = deny). Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// ID.
	Fosid int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Schedule object from available options.
	Schedule string `pulumi:"schedule"`
	// Service object(s) from available options. Separate multiple names with a space. The structure of `service` block is documented below.
	Services []TtlpolicyService `pulumi:"services"`
	// Source address object(s) from available options. Separate multiple names with a space. The structure of `srcaddr` block is documented below.
	Srcaddrs []TtlpolicySrcaddr `pulumi:"srcaddrs"`
	// Source interface name from available interfaces.
	Srcintf string `pulumi:"srcintf"`
	// Enable/disable this TTL policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Value/range to match against the packet's Time to Live value (format: ttl[ - ttlHigh], 1 - 255).
	Ttl string `pulumi:"ttl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Ttlpolicy resource.
type TtlpolicyArgs struct {
	// Action to be performed on traffic matching this policy (default = deny). Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// ID.
	Fosid pulumi.IntInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Schedule object from available options.
	Schedule pulumi.StringInput
	// Service object(s) from available options. Separate multiple names with a space. The structure of `service` block is documented below.
	Services TtlpolicyServiceArrayInput
	// Source address object(s) from available options. Separate multiple names with a space. The structure of `srcaddr` block is documented below.
	Srcaddrs TtlpolicySrcaddrArrayInput
	// Source interface name from available interfaces.
	Srcintf pulumi.StringInput
	// Enable/disable this TTL policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Value/range to match against the packet's Time to Live value (format: ttl[ - ttlHigh], 1 - 255).
	Ttl pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (TtlpolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ttlpolicyArgs)(nil)).Elem()
}

type TtlpolicyInput interface {
	pulumi.Input

	ToTtlpolicyOutput() TtlpolicyOutput
	ToTtlpolicyOutputWithContext(ctx context.Context) TtlpolicyOutput
}

func (*Ttlpolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**Ttlpolicy)(nil)).Elem()
}

func (i *Ttlpolicy) ToTtlpolicyOutput() TtlpolicyOutput {
	return i.ToTtlpolicyOutputWithContext(context.Background())
}

func (i *Ttlpolicy) ToTtlpolicyOutputWithContext(ctx context.Context) TtlpolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TtlpolicyOutput)
}

// TtlpolicyArrayInput is an input type that accepts TtlpolicyArray and TtlpolicyArrayOutput values.
// You can construct a concrete instance of `TtlpolicyArrayInput` via:
//
//	TtlpolicyArray{ TtlpolicyArgs{...} }
type TtlpolicyArrayInput interface {
	pulumi.Input

	ToTtlpolicyArrayOutput() TtlpolicyArrayOutput
	ToTtlpolicyArrayOutputWithContext(context.Context) TtlpolicyArrayOutput
}

type TtlpolicyArray []TtlpolicyInput

func (TtlpolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ttlpolicy)(nil)).Elem()
}

func (i TtlpolicyArray) ToTtlpolicyArrayOutput() TtlpolicyArrayOutput {
	return i.ToTtlpolicyArrayOutputWithContext(context.Background())
}

func (i TtlpolicyArray) ToTtlpolicyArrayOutputWithContext(ctx context.Context) TtlpolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TtlpolicyArrayOutput)
}

// TtlpolicyMapInput is an input type that accepts TtlpolicyMap and TtlpolicyMapOutput values.
// You can construct a concrete instance of `TtlpolicyMapInput` via:
//
//	TtlpolicyMap{ "key": TtlpolicyArgs{...} }
type TtlpolicyMapInput interface {
	pulumi.Input

	ToTtlpolicyMapOutput() TtlpolicyMapOutput
	ToTtlpolicyMapOutputWithContext(context.Context) TtlpolicyMapOutput
}

type TtlpolicyMap map[string]TtlpolicyInput

func (TtlpolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ttlpolicy)(nil)).Elem()
}

func (i TtlpolicyMap) ToTtlpolicyMapOutput() TtlpolicyMapOutput {
	return i.ToTtlpolicyMapOutputWithContext(context.Background())
}

func (i TtlpolicyMap) ToTtlpolicyMapOutputWithContext(ctx context.Context) TtlpolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TtlpolicyMapOutput)
}

type TtlpolicyOutput struct{ *pulumi.OutputState }

func (TtlpolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ttlpolicy)(nil)).Elem()
}

func (o TtlpolicyOutput) ToTtlpolicyOutput() TtlpolicyOutput {
	return o
}

func (o TtlpolicyOutput) ToTtlpolicyOutputWithContext(ctx context.Context) TtlpolicyOutput {
	return o
}

// Action to be performed on traffic matching this policy (default = deny). Valid values: `accept`, `deny`.
func (o TtlpolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *Ttlpolicy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o TtlpolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ttlpolicy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// ID.
func (o TtlpolicyOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *Ttlpolicy) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o TtlpolicyOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ttlpolicy) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Schedule object from available options.
func (o TtlpolicyOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v *Ttlpolicy) pulumi.StringOutput { return v.Schedule }).(pulumi.StringOutput)
}

// Service object(s) from available options. Separate multiple names with a space. The structure of `service` block is documented below.
func (o TtlpolicyOutput) Services() TtlpolicyServiceArrayOutput {
	return o.ApplyT(func(v *Ttlpolicy) TtlpolicyServiceArrayOutput { return v.Services }).(TtlpolicyServiceArrayOutput)
}

// Source address object(s) from available options. Separate multiple names with a space. The structure of `srcaddr` block is documented below.
func (o TtlpolicyOutput) Srcaddrs() TtlpolicySrcaddrArrayOutput {
	return o.ApplyT(func(v *Ttlpolicy) TtlpolicySrcaddrArrayOutput { return v.Srcaddrs }).(TtlpolicySrcaddrArrayOutput)
}

// Source interface name from available interfaces.
func (o TtlpolicyOutput) Srcintf() pulumi.StringOutput {
	return o.ApplyT(func(v *Ttlpolicy) pulumi.StringOutput { return v.Srcintf }).(pulumi.StringOutput)
}

// Enable/disable this TTL policy. Valid values: `enable`, `disable`.
func (o TtlpolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Ttlpolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Value/range to match against the packet's Time to Live value (format: ttl[ - ttlHigh], 1 - 255).
func (o TtlpolicyOutput) Ttl() pulumi.StringOutput {
	return o.ApplyT(func(v *Ttlpolicy) pulumi.StringOutput { return v.Ttl }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o TtlpolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ttlpolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type TtlpolicyArrayOutput struct{ *pulumi.OutputState }

func (TtlpolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ttlpolicy)(nil)).Elem()
}

func (o TtlpolicyArrayOutput) ToTtlpolicyArrayOutput() TtlpolicyArrayOutput {
	return o
}

func (o TtlpolicyArrayOutput) ToTtlpolicyArrayOutputWithContext(ctx context.Context) TtlpolicyArrayOutput {
	return o
}

func (o TtlpolicyArrayOutput) Index(i pulumi.IntInput) TtlpolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ttlpolicy {
		return vs[0].([]*Ttlpolicy)[vs[1].(int)]
	}).(TtlpolicyOutput)
}

type TtlpolicyMapOutput struct{ *pulumi.OutputState }

func (TtlpolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ttlpolicy)(nil)).Elem()
}

func (o TtlpolicyMapOutput) ToTtlpolicyMapOutput() TtlpolicyMapOutput {
	return o
}

func (o TtlpolicyMapOutput) ToTtlpolicyMapOutputWithContext(ctx context.Context) TtlpolicyMapOutput {
	return o
}

func (o TtlpolicyMapOutput) MapIndex(k pulumi.StringInput) TtlpolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ttlpolicy {
		return vs[0].(map[string]*Ttlpolicy)[vs[1].(string)]
	}).(TtlpolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TtlpolicyInput)(nil)).Elem(), &Ttlpolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*TtlpolicyArrayInput)(nil)).Elem(), TtlpolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TtlpolicyMapInput)(nil)).Elem(), TtlpolicyMap{})
	pulumi.RegisterOutputType(TtlpolicyOutput{})
	pulumi.RegisterOutputType(TtlpolicyArrayOutput{})
	pulumi.RegisterOutputType(TtlpolicyMapOutput{})
}
