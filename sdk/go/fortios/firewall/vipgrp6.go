// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure IPv6 virtual IP groups.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			trname1, err := firewall.NewVip6(ctx, "trname1", &firewall.Vip6Args{
//				ArpReply:                     pulumi.String("enable"),
//				Color:                        pulumi.Int(0),
//				Extip:                        pulumi.String("2001:1:1:2::100"),
//				Extport:                      pulumi.String("0-65535"),
//				Fosid:                        pulumi.Int(0),
//				HttpCookieAge:                pulumi.Int(60),
//				HttpCookieDomainFromHost:     pulumi.String("disable"),
//				HttpCookieGeneration:         pulumi.Int(0),
//				HttpCookieShare:              pulumi.String("same-ip"),
//				HttpIpHeader:                 pulumi.String("disable"),
//				HttpMultiplex:                pulumi.String("disable"),
//				HttpsCookieSecure:            pulumi.String("disable"),
//				LdbMethod:                    pulumi.String("static"),
//				Mappedip:                     pulumi.String("2001:1:1:2::200"),
//				Mappedport:                   pulumi.String("0-65535"),
//				MaxEmbryonicConnections:      pulumi.Int(1000),
//				OutlookWebAccess:             pulumi.String("disable"),
//				Persistence:                  pulumi.String("none"),
//				Portforward:                  pulumi.String("disable"),
//				Protocol:                     pulumi.String("tcp"),
//				SslAlgorithm:                 pulumi.String("high"),
//				SslClientFallback:            pulumi.String("enable"),
//				SslClientRenegotiation:       pulumi.String("secure"),
//				SslClientSessionStateMax:     pulumi.Int(1000),
//				SslClientSessionStateTimeout: pulumi.Int(30),
//				SslClientSessionStateType:    pulumi.String("both"),
//				SslDhBits:                    pulumi.String("2048"),
//				SslHpkp:                      pulumi.String("disable"),
//				SslHpkpAge:                   pulumi.Int(5184000),
//				SslHpkpIncludeSubdomains:     pulumi.String("disable"),
//				SslHsts:                      pulumi.String("disable"),
//				SslHstsAge:                   pulumi.Int(5184000),
//				SslHstsIncludeSubdomains:     pulumi.String("disable"),
//				SslHttpLocationConversion:    pulumi.String("disable"),
//				SslHttpMatchHost:             pulumi.String("enable"),
//				SslMaxVersion:                pulumi.String("tls-1.2"),
//				SslMinVersion:                pulumi.String("tls-1.1"),
//				SslMode:                      pulumi.String("half"),
//				SslPfs:                       pulumi.String("require"),
//				SslSendEmptyFrags:            pulumi.String("enable"),
//				SslServerAlgorithm:           pulumi.String("client"),
//				SslServerMaxVersion:          pulumi.String("client"),
//				SslServerMinVersion:          pulumi.String("client"),
//				SslServerSessionStateMax:     pulumi.Int(100),
//				SslServerSessionStateTimeout: pulumi.Int(60),
//				SslServerSessionStateType:    pulumi.String("both"),
//				Type:                         pulumi.String("static-nat"),
//				WeblogicServer:               pulumi.String("disable"),
//				WebsphereServer:              pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firewall.NewVipgrp6(ctx, "trname", &firewall.Vipgrp6Args{
//				Color: pulumi.Int(0),
//				Members: firewall.Vipgrp6MemberArray{
//					&firewall.Vipgrp6MemberArgs{
//						Name: trname1.Name,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Firewall Vipgrp6 can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/vipgrp6:Vipgrp6 labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/vipgrp6:Vipgrp6 labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Vipgrp6 struct {
	pulumi.CustomResourceState

	// Integer value to determine the color of the icon in the GUI (range 1 to 32, default = 0, which sets the value to 1).
	Color pulumi.IntOutput `pulumi:"color"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Member VIP objects of the group (Separate multiple objects with a space). The structure of `member` block is documented below.
	Members Vipgrp6MemberArrayOutput `pulumi:"members"`
	// IPv6 VIP group name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVipgrp6 registers a new resource with the given unique name, arguments, and options.
func NewVipgrp6(ctx *pulumi.Context,
	name string, args *Vipgrp6Args, opts ...pulumi.ResourceOption) (*Vipgrp6, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vipgrp6
	err := ctx.RegisterResource("fortios:firewall/vipgrp6:Vipgrp6", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVipgrp6 gets an existing Vipgrp6 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVipgrp6(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Vipgrp6State, opts ...pulumi.ResourceOption) (*Vipgrp6, error) {
	var resource Vipgrp6
	err := ctx.ReadResource("fortios:firewall/vipgrp6:Vipgrp6", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vipgrp6 resources.
type vipgrp6State struct {
	// Integer value to determine the color of the icon in the GUI (range 1 to 32, default = 0, which sets the value to 1).
	Color *int `pulumi:"color"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Member VIP objects of the group (Separate multiple objects with a space). The structure of `member` block is documented below.
	Members []Vipgrp6Member `pulumi:"members"`
	// IPv6 VIP group name.
	Name *string `pulumi:"name"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type Vipgrp6State struct {
	// Integer value to determine the color of the icon in the GUI (range 1 to 32, default = 0, which sets the value to 1).
	Color pulumi.IntPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Member VIP objects of the group (Separate multiple objects with a space). The structure of `member` block is documented below.
	Members Vipgrp6MemberArrayInput
	// IPv6 VIP group name.
	Name pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Vipgrp6State) ElementType() reflect.Type {
	return reflect.TypeOf((*vipgrp6State)(nil)).Elem()
}

type vipgrp6Args struct {
	// Integer value to determine the color of the icon in the GUI (range 1 to 32, default = 0, which sets the value to 1).
	Color *int `pulumi:"color"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Member VIP objects of the group (Separate multiple objects with a space). The structure of `member` block is documented below.
	Members []Vipgrp6Member `pulumi:"members"`
	// IPv6 VIP group name.
	Name *string `pulumi:"name"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Vipgrp6 resource.
type Vipgrp6Args struct {
	// Integer value to determine the color of the icon in the GUI (range 1 to 32, default = 0, which sets the value to 1).
	Color pulumi.IntPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Member VIP objects of the group (Separate multiple objects with a space). The structure of `member` block is documented below.
	Members Vipgrp6MemberArrayInput
	// IPv6 VIP group name.
	Name pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Vipgrp6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*vipgrp6Args)(nil)).Elem()
}

type Vipgrp6Input interface {
	pulumi.Input

	ToVipgrp6Output() Vipgrp6Output
	ToVipgrp6OutputWithContext(ctx context.Context) Vipgrp6Output
}

func (*Vipgrp6) ElementType() reflect.Type {
	return reflect.TypeOf((**Vipgrp6)(nil)).Elem()
}

func (i *Vipgrp6) ToVipgrp6Output() Vipgrp6Output {
	return i.ToVipgrp6OutputWithContext(context.Background())
}

func (i *Vipgrp6) ToVipgrp6OutputWithContext(ctx context.Context) Vipgrp6Output {
	return pulumi.ToOutputWithContext(ctx, i).(Vipgrp6Output)
}

// Vipgrp6ArrayInput is an input type that accepts Vipgrp6Array and Vipgrp6ArrayOutput values.
// You can construct a concrete instance of `Vipgrp6ArrayInput` via:
//
//	Vipgrp6Array{ Vipgrp6Args{...} }
type Vipgrp6ArrayInput interface {
	pulumi.Input

	ToVipgrp6ArrayOutput() Vipgrp6ArrayOutput
	ToVipgrp6ArrayOutputWithContext(context.Context) Vipgrp6ArrayOutput
}

type Vipgrp6Array []Vipgrp6Input

func (Vipgrp6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vipgrp6)(nil)).Elem()
}

func (i Vipgrp6Array) ToVipgrp6ArrayOutput() Vipgrp6ArrayOutput {
	return i.ToVipgrp6ArrayOutputWithContext(context.Background())
}

func (i Vipgrp6Array) ToVipgrp6ArrayOutputWithContext(ctx context.Context) Vipgrp6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vipgrp6ArrayOutput)
}

// Vipgrp6MapInput is an input type that accepts Vipgrp6Map and Vipgrp6MapOutput values.
// You can construct a concrete instance of `Vipgrp6MapInput` via:
//
//	Vipgrp6Map{ "key": Vipgrp6Args{...} }
type Vipgrp6MapInput interface {
	pulumi.Input

	ToVipgrp6MapOutput() Vipgrp6MapOutput
	ToVipgrp6MapOutputWithContext(context.Context) Vipgrp6MapOutput
}

type Vipgrp6Map map[string]Vipgrp6Input

func (Vipgrp6Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vipgrp6)(nil)).Elem()
}

func (i Vipgrp6Map) ToVipgrp6MapOutput() Vipgrp6MapOutput {
	return i.ToVipgrp6MapOutputWithContext(context.Background())
}

func (i Vipgrp6Map) ToVipgrp6MapOutputWithContext(ctx context.Context) Vipgrp6MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vipgrp6MapOutput)
}

type Vipgrp6Output struct{ *pulumi.OutputState }

func (Vipgrp6Output) ElementType() reflect.Type {
	return reflect.TypeOf((**Vipgrp6)(nil)).Elem()
}

func (o Vipgrp6Output) ToVipgrp6Output() Vipgrp6Output {
	return o
}

func (o Vipgrp6Output) ToVipgrp6OutputWithContext(ctx context.Context) Vipgrp6Output {
	return o
}

// Integer value to determine the color of the icon in the GUI (range 1 to 32, default = 0, which sets the value to 1).
func (o Vipgrp6Output) Color() pulumi.IntOutput {
	return o.ApplyT(func(v *Vipgrp6) pulumi.IntOutput { return v.Color }).(pulumi.IntOutput)
}

// Comment.
func (o Vipgrp6Output) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vipgrp6) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o Vipgrp6Output) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vipgrp6) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o Vipgrp6Output) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vipgrp6) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Member VIP objects of the group (Separate multiple objects with a space). The structure of `member` block is documented below.
func (o Vipgrp6Output) Members() Vipgrp6MemberArrayOutput {
	return o.ApplyT(func(v *Vipgrp6) Vipgrp6MemberArrayOutput { return v.Members }).(Vipgrp6MemberArrayOutput)
}

// IPv6 VIP group name.
func (o Vipgrp6Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vipgrp6) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o Vipgrp6Output) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Vipgrp6) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o Vipgrp6Output) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vipgrp6) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type Vipgrp6ArrayOutput struct{ *pulumi.OutputState }

func (Vipgrp6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vipgrp6)(nil)).Elem()
}

func (o Vipgrp6ArrayOutput) ToVipgrp6ArrayOutput() Vipgrp6ArrayOutput {
	return o
}

func (o Vipgrp6ArrayOutput) ToVipgrp6ArrayOutputWithContext(ctx context.Context) Vipgrp6ArrayOutput {
	return o
}

func (o Vipgrp6ArrayOutput) Index(i pulumi.IntInput) Vipgrp6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vipgrp6 {
		return vs[0].([]*Vipgrp6)[vs[1].(int)]
	}).(Vipgrp6Output)
}

type Vipgrp6MapOutput struct{ *pulumi.OutputState }

func (Vipgrp6MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vipgrp6)(nil)).Elem()
}

func (o Vipgrp6MapOutput) ToVipgrp6MapOutput() Vipgrp6MapOutput {
	return o
}

func (o Vipgrp6MapOutput) ToVipgrp6MapOutputWithContext(ctx context.Context) Vipgrp6MapOutput {
	return o
}

func (o Vipgrp6MapOutput) MapIndex(k pulumi.StringInput) Vipgrp6Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vipgrp6 {
		return vs[0].(map[string]*Vipgrp6)[vs[1].(string)]
	}).(Vipgrp6Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Vipgrp6Input)(nil)).Elem(), &Vipgrp6{})
	pulumi.RegisterInputType(reflect.TypeOf((*Vipgrp6ArrayInput)(nil)).Elem(), Vipgrp6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*Vipgrp6MapInput)(nil)).Elem(), Vipgrp6Map{})
	pulumi.RegisterOutputType(Vipgrp6Output{})
	pulumi.RegisterOutputType(Vipgrp6ArrayOutput{})
	pulumi.RegisterOutputType(Vipgrp6MapOutput{})
}
