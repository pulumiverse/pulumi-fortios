// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Define region table. Applies to FortiOS Version `>= 6.4.0`.
//
// ## Import
//
// Firewall Region can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/region:Region labelname {{fosid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/region:Region labelname {{fosid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Region struct {
	pulumi.CustomResourceState

	// City ID list. The structure of `city` block is documented below.
	Cities RegionCityArrayOutput `pulumi:"cities"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Region ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Region name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewRegion registers a new resource with the given unique name, arguments, and options.
func NewRegion(ctx *pulumi.Context,
	name string, args *RegionArgs, opts ...pulumi.ResourceOption) (*Region, error) {
	if args == nil {
		args = &RegionArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Region
	err := ctx.RegisterResource("fortios:firewall/region:Region", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegion gets an existing Region resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionState, opts ...pulumi.ResourceOption) (*Region, error) {
	var resource Region
	err := ctx.ReadResource("fortios:firewall/region:Region", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Region resources.
type regionState struct {
	// City ID list. The structure of `city` block is documented below.
	Cities []RegionCity `pulumi:"cities"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Region ID.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Region name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type RegionState struct {
	// City ID list. The structure of `city` block is documented below.
	Cities RegionCityArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Region ID.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Region name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RegionState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionState)(nil)).Elem()
}

type regionArgs struct {
	// City ID list. The structure of `city` block is documented below.
	Cities []RegionCity `pulumi:"cities"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Region ID.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Region name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Region resource.
type RegionArgs struct {
	// City ID list. The structure of `city` block is documented below.
	Cities RegionCityArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Region ID.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Region name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionArgs)(nil)).Elem()
}

type RegionInput interface {
	pulumi.Input

	ToRegionOutput() RegionOutput
	ToRegionOutputWithContext(ctx context.Context) RegionOutput
}

func (*Region) ElementType() reflect.Type {
	return reflect.TypeOf((**Region)(nil)).Elem()
}

func (i *Region) ToRegionOutput() RegionOutput {
	return i.ToRegionOutputWithContext(context.Background())
}

func (i *Region) ToRegionOutputWithContext(ctx context.Context) RegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionOutput)
}

// RegionArrayInput is an input type that accepts RegionArray and RegionArrayOutput values.
// You can construct a concrete instance of `RegionArrayInput` via:
//
//	RegionArray{ RegionArgs{...} }
type RegionArrayInput interface {
	pulumi.Input

	ToRegionArrayOutput() RegionArrayOutput
	ToRegionArrayOutputWithContext(context.Context) RegionArrayOutput
}

type RegionArray []RegionInput

func (RegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Region)(nil)).Elem()
}

func (i RegionArray) ToRegionArrayOutput() RegionArrayOutput {
	return i.ToRegionArrayOutputWithContext(context.Background())
}

func (i RegionArray) ToRegionArrayOutputWithContext(ctx context.Context) RegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionArrayOutput)
}

// RegionMapInput is an input type that accepts RegionMap and RegionMapOutput values.
// You can construct a concrete instance of `RegionMapInput` via:
//
//	RegionMap{ "key": RegionArgs{...} }
type RegionMapInput interface {
	pulumi.Input

	ToRegionMapOutput() RegionMapOutput
	ToRegionMapOutputWithContext(context.Context) RegionMapOutput
}

type RegionMap map[string]RegionInput

func (RegionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Region)(nil)).Elem()
}

func (i RegionMap) ToRegionMapOutput() RegionMapOutput {
	return i.ToRegionMapOutputWithContext(context.Background())
}

func (i RegionMap) ToRegionMapOutputWithContext(ctx context.Context) RegionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionMapOutput)
}

type RegionOutput struct{ *pulumi.OutputState }

func (RegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Region)(nil)).Elem()
}

func (o RegionOutput) ToRegionOutput() RegionOutput {
	return o
}

func (o RegionOutput) ToRegionOutputWithContext(ctx context.Context) RegionOutput {
	return o
}

// City ID list. The structure of `city` block is documented below.
func (o RegionOutput) Cities() RegionCityArrayOutput {
	return o.ApplyT(func(v *Region) RegionCityArrayOutput { return v.Cities }).(RegionCityArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o RegionOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Region) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Region ID.
func (o RegionOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *Region) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o RegionOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Region) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Region name.
func (o RegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Region) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o RegionOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Region) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type RegionArrayOutput struct{ *pulumi.OutputState }

func (RegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Region)(nil)).Elem()
}

func (o RegionArrayOutput) ToRegionArrayOutput() RegionArrayOutput {
	return o
}

func (o RegionArrayOutput) ToRegionArrayOutputWithContext(ctx context.Context) RegionArrayOutput {
	return o
}

func (o RegionArrayOutput) Index(i pulumi.IntInput) RegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Region {
		return vs[0].([]*Region)[vs[1].(int)]
	}).(RegionOutput)
}

type RegionMapOutput struct{ *pulumi.OutputState }

func (RegionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Region)(nil)).Elem()
}

func (o RegionMapOutput) ToRegionMapOutput() RegionMapOutput {
	return o
}

func (o RegionMapOutput) ToRegionMapOutputWithContext(ctx context.Context) RegionMapOutput {
	return o
}

func (o RegionMapOutput) MapIndex(k pulumi.StringInput) RegionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Region {
		return vs[0].(map[string]*Region)[vs[1].(string)]
	}).(RegionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionInput)(nil)).Elem(), &Region{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionArrayInput)(nil)).Elem(), RegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionMapInput)(nil)).Elem(), RegionMap{})
	pulumi.RegisterOutputType(RegionOutput{})
	pulumi.RegisterOutputType(RegionArrayOutput{})
	pulumi.RegisterOutputType(RegionMapOutput{})
}
