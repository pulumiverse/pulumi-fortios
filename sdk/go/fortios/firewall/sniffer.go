// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure sniffer.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewSniffer(ctx, "trname", &firewall.SnifferArgs{
//				ApplicationListStatus:   pulumi.String("disable"),
//				AvProfileStatus:         pulumi.String("disable"),
//				DlpSensorStatus:         pulumi.String("disable"),
//				Dsri:                    pulumi.String("disable"),
//				Fosid:                   pulumi.Int(1),
//				Interface:               pulumi.String("port4"),
//				IpsDosStatus:            pulumi.String("disable"),
//				IpsSensorStatus:         pulumi.String("disable"),
//				Ipv6:                    pulumi.String("disable"),
//				Logtraffic:              pulumi.String("utm"),
//				MaxPacketCount:          pulumi.Int(4000),
//				NonIp:                   pulumi.String("enable"),
//				ScanBotnetConnections:   pulumi.String("disable"),
//				SpamfilterProfileStatus: pulumi.String("disable"),
//				Status:                  pulumi.String("enable"),
//				WebfilterProfileStatus:  pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Firewall Sniffer can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/sniffer:Sniffer labelname {{fosid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/sniffer:Sniffer labelname {{fosid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Sniffer struct {
	pulumi.CustomResourceState

	// Configuration method to edit Denial of Service (DoS) anomaly settings. The structure of `anomaly` block is documented below.
	Anomalies SnifferAnomalyArrayOutput `pulumi:"anomalies"`
	// Name of an existing application list.
	ApplicationList pulumi.StringOutput `pulumi:"applicationList"`
	// Enable/disable application control profile. Valid values: `enable`, `disable`.
	ApplicationListStatus pulumi.StringOutput `pulumi:"applicationListStatus"`
	// Name of an existing antivirus profile.
	AvProfile pulumi.StringOutput `pulumi:"avProfile"`
	// Enable/disable antivirus profile. Valid values: `enable`, `disable`.
	AvProfileStatus pulumi.StringOutput `pulumi:"avProfileStatus"`
	// Name of an existing CASB profile.
	CasbProfile pulumi.StringOutput `pulumi:"casbProfile"`
	// Enable/disable CASB profile. Valid values: `enable`, `disable`.
	CasbProfileStatus pulumi.StringOutput `pulumi:"casbProfileStatus"`
	// Name of an existing DLP profile.
	DlpProfile pulumi.StringOutput `pulumi:"dlpProfile"`
	// Enable/disable DLP profile. Valid values: `enable`, `disable`.
	DlpProfileStatus pulumi.StringOutput `pulumi:"dlpProfileStatus"`
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringOutput `pulumi:"dlpSensor"`
	// Enable/disable DLP sensor. Valid values: `enable`, `disable`.
	DlpSensorStatus pulumi.StringOutput `pulumi:"dlpSensorStatus"`
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri pulumi.StringOutput `pulumi:"dsri"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringOutput `pulumi:"emailfilterProfile"`
	// Enable/disable emailfilter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus pulumi.StringOutput `pulumi:"emailfilterProfileStatus"`
	// Name of an existing file-filter profile.
	FileFilterProfile pulumi.StringOutput `pulumi:"fileFilterProfile"`
	// Enable/disable file filter. Valid values: `enable`, `disable`.
	FileFilterProfileStatus pulumi.StringOutput `pulumi:"fileFilterProfileStatus"`
	// Sniffer ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Hosts to filter for in sniffer traffic (Format examples: 1.1.1.1, 2.2.2.0/24, 3.3.3.3/255.255.255.0, 4.4.4.0-4.4.4.240).
	Host pulumi.StringOutput `pulumi:"host"`
	// Interface name that traffic sniffing will take place on.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Enable/disable IP threat feed. Valid values: `enable`, `disable`.
	IpThreatfeedStatus pulumi.StringOutput `pulumi:"ipThreatfeedStatus"`
	// Name of an existing IP threat feed. The structure of `ipThreatfeed` block is documented below.
	IpThreatfeeds SnifferIpThreatfeedArrayOutput `pulumi:"ipThreatfeeds"`
	// Enable/disable IPS DoS anomaly detection. Valid values: `enable`, `disable`.
	IpsDosStatus pulumi.StringOutput `pulumi:"ipsDosStatus"`
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringOutput `pulumi:"ipsSensor"`
	// Enable/disable IPS sensor. Valid values: `enable`, `disable`.
	IpsSensorStatus pulumi.StringOutput `pulumi:"ipsSensorStatus"`
	// Enable/disable sniffing IPv6 packets. Valid values: `enable`, `disable`.
	Ipv6 pulumi.StringOutput `pulumi:"ipv6"`
	// Either log all sessions, only sessions that have a security profile applied, or disable all logging for this policy. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringOutput `pulumi:"logtraffic"`
	// Maximum packet count. On FortiOS versions 6.2.0: 1 - 1000000, default = 10000. On FortiOS versions 6.2.4-6.4.2, 7.0.0: 1 - 10000, default = 4000. On FortiOS versions 6.4.10-6.4.14, 7.0.1-7.0.13: 1 - 1000000, default = 4000.
	MaxPacketCount pulumi.IntOutput `pulumi:"maxPacketCount"`
	// Enable/disable sniffing non-IP packets. Valid values: `enable`, `disable`.
	NonIp pulumi.StringOutput `pulumi:"nonIp"`
	// Ports to sniff (Format examples: 10, :20, 30:40, 50-, 100-200).
	Port pulumi.StringOutput `pulumi:"port"`
	// Integer value for the protocol type as defined by IANA (0 - 255).
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringOutput `pulumi:"scanBotnetConnections"`
	// Name of an existing spam filter profile.
	SpamfilterProfile pulumi.StringOutput `pulumi:"spamfilterProfile"`
	// Enable/disable spam filter. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus pulumi.StringOutput `pulumi:"spamfilterProfileStatus"`
	// Enable/disable the active status of the sniffer. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// List of VLANs to sniff.
	Vlan pulumi.StringOutput `pulumi:"vlan"`
	// Name of an existing web filter profile.
	WebfilterProfile pulumi.StringOutput `pulumi:"webfilterProfile"`
	// Enable/disable web filter profile. Valid values: `enable`, `disable`.
	WebfilterProfileStatus pulumi.StringOutput `pulumi:"webfilterProfileStatus"`
}

// NewSniffer registers a new resource with the given unique name, arguments, and options.
func NewSniffer(ctx *pulumi.Context,
	name string, args *SnifferArgs, opts ...pulumi.ResourceOption) (*Sniffer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Sniffer
	err := ctx.RegisterResource("fortios:firewall/sniffer:Sniffer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSniffer gets an existing Sniffer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSniffer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnifferState, opts ...pulumi.ResourceOption) (*Sniffer, error) {
	var resource Sniffer
	err := ctx.ReadResource("fortios:firewall/sniffer:Sniffer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sniffer resources.
type snifferState struct {
	// Configuration method to edit Denial of Service (DoS) anomaly settings. The structure of `anomaly` block is documented below.
	Anomalies []SnifferAnomaly `pulumi:"anomalies"`
	// Name of an existing application list.
	ApplicationList *string `pulumi:"applicationList"`
	// Enable/disable application control profile. Valid values: `enable`, `disable`.
	ApplicationListStatus *string `pulumi:"applicationListStatus"`
	// Name of an existing antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable/disable antivirus profile. Valid values: `enable`, `disable`.
	AvProfileStatus *string `pulumi:"avProfileStatus"`
	// Name of an existing CASB profile.
	CasbProfile *string `pulumi:"casbProfile"`
	// Enable/disable CASB profile. Valid values: `enable`, `disable`.
	CasbProfileStatus *string `pulumi:"casbProfileStatus"`
	// Name of an existing DLP profile.
	DlpProfile *string `pulumi:"dlpProfile"`
	// Enable/disable DLP profile. Valid values: `enable`, `disable`.
	DlpProfileStatus *string `pulumi:"dlpProfileStatus"`
	// Name of an existing DLP sensor.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Enable/disable DLP sensor. Valid values: `enable`, `disable`.
	DlpSensorStatus *string `pulumi:"dlpSensorStatus"`
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri *string `pulumi:"dsri"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Name of an existing email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable/disable emailfilter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus *string `pulumi:"emailfilterProfileStatus"`
	// Name of an existing file-filter profile.
	FileFilterProfile *string `pulumi:"fileFilterProfile"`
	// Enable/disable file filter. Valid values: `enable`, `disable`.
	FileFilterProfileStatus *string `pulumi:"fileFilterProfileStatus"`
	// Sniffer ID.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Hosts to filter for in sniffer traffic (Format examples: 1.1.1.1, 2.2.2.0/24, 3.3.3.3/255.255.255.0, 4.4.4.0-4.4.4.240).
	Host *string `pulumi:"host"`
	// Interface name that traffic sniffing will take place on.
	Interface *string `pulumi:"interface"`
	// Enable/disable IP threat feed. Valid values: `enable`, `disable`.
	IpThreatfeedStatus *string `pulumi:"ipThreatfeedStatus"`
	// Name of an existing IP threat feed. The structure of `ipThreatfeed` block is documented below.
	IpThreatfeeds []SnifferIpThreatfeed `pulumi:"ipThreatfeeds"`
	// Enable/disable IPS DoS anomaly detection. Valid values: `enable`, `disable`.
	IpsDosStatus *string `pulumi:"ipsDosStatus"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable/disable IPS sensor. Valid values: `enable`, `disable`.
	IpsSensorStatus *string `pulumi:"ipsSensorStatus"`
	// Enable/disable sniffing IPv6 packets. Valid values: `enable`, `disable`.
	Ipv6 *string `pulumi:"ipv6"`
	// Either log all sessions, only sessions that have a security profile applied, or disable all logging for this policy. Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Maximum packet count. On FortiOS versions 6.2.0: 1 - 1000000, default = 10000. On FortiOS versions 6.2.4-6.4.2, 7.0.0: 1 - 10000, default = 4000. On FortiOS versions 6.4.10-6.4.14, 7.0.1-7.0.13: 1 - 1000000, default = 4000.
	MaxPacketCount *int `pulumi:"maxPacketCount"`
	// Enable/disable sniffing non-IP packets. Valid values: `enable`, `disable`.
	NonIp *string `pulumi:"nonIp"`
	// Ports to sniff (Format examples: 10, :20, 30:40, 50-, 100-200).
	Port *string `pulumi:"port"`
	// Integer value for the protocol type as defined by IANA (0 - 255).
	Protocol *string `pulumi:"protocol"`
	// Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Name of an existing spam filter profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Enable/disable spam filter. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus *string `pulumi:"spamfilterProfileStatus"`
	// Enable/disable the active status of the sniffer. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// List of VLANs to sniff.
	Vlan *string `pulumi:"vlan"`
	// Name of an existing web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
	// Enable/disable web filter profile. Valid values: `enable`, `disable`.
	WebfilterProfileStatus *string `pulumi:"webfilterProfileStatus"`
}

type SnifferState struct {
	// Configuration method to edit Denial of Service (DoS) anomaly settings. The structure of `anomaly` block is documented below.
	Anomalies SnifferAnomalyArrayInput
	// Name of an existing application list.
	ApplicationList pulumi.StringPtrInput
	// Enable/disable application control profile. Valid values: `enable`, `disable`.
	ApplicationListStatus pulumi.StringPtrInput
	// Name of an existing antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable/disable antivirus profile. Valid values: `enable`, `disable`.
	AvProfileStatus pulumi.StringPtrInput
	// Name of an existing CASB profile.
	CasbProfile pulumi.StringPtrInput
	// Enable/disable CASB profile. Valid values: `enable`, `disable`.
	CasbProfileStatus pulumi.StringPtrInput
	// Name of an existing DLP profile.
	DlpProfile pulumi.StringPtrInput
	// Enable/disable DLP profile. Valid values: `enable`, `disable`.
	DlpProfileStatus pulumi.StringPtrInput
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringPtrInput
	// Enable/disable DLP sensor. Valid values: `enable`, `disable`.
	DlpSensorStatus pulumi.StringPtrInput
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable/disable emailfilter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus pulumi.StringPtrInput
	// Name of an existing file-filter profile.
	FileFilterProfile pulumi.StringPtrInput
	// Enable/disable file filter. Valid values: `enable`, `disable`.
	FileFilterProfileStatus pulumi.StringPtrInput
	// Sniffer ID.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Hosts to filter for in sniffer traffic (Format examples: 1.1.1.1, 2.2.2.0/24, 3.3.3.3/255.255.255.0, 4.4.4.0-4.4.4.240).
	Host pulumi.StringPtrInput
	// Interface name that traffic sniffing will take place on.
	Interface pulumi.StringPtrInput
	// Enable/disable IP threat feed. Valid values: `enable`, `disable`.
	IpThreatfeedStatus pulumi.StringPtrInput
	// Name of an existing IP threat feed. The structure of `ipThreatfeed` block is documented below.
	IpThreatfeeds SnifferIpThreatfeedArrayInput
	// Enable/disable IPS DoS anomaly detection. Valid values: `enable`, `disable`.
	IpsDosStatus pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Enable/disable IPS sensor. Valid values: `enable`, `disable`.
	IpsSensorStatus pulumi.StringPtrInput
	// Enable/disable sniffing IPv6 packets. Valid values: `enable`, `disable`.
	Ipv6 pulumi.StringPtrInput
	// Either log all sessions, only sessions that have a security profile applied, or disable all logging for this policy. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Maximum packet count. On FortiOS versions 6.2.0: 1 - 1000000, default = 10000. On FortiOS versions 6.2.4-6.4.2, 7.0.0: 1 - 10000, default = 4000. On FortiOS versions 6.4.10-6.4.14, 7.0.1-7.0.13: 1 - 1000000, default = 4000.
	MaxPacketCount pulumi.IntPtrInput
	// Enable/disable sniffing non-IP packets. Valid values: `enable`, `disable`.
	NonIp pulumi.StringPtrInput
	// Ports to sniff (Format examples: 10, :20, 30:40, 50-, 100-200).
	Port pulumi.StringPtrInput
	// Integer value for the protocol type as defined by IANA (0 - 255).
	Protocol pulumi.StringPtrInput
	// Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Name of an existing spam filter profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Enable/disable spam filter. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus pulumi.StringPtrInput
	// Enable/disable the active status of the sniffer. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// List of VLANs to sniff.
	Vlan pulumi.StringPtrInput
	// Name of an existing web filter profile.
	WebfilterProfile pulumi.StringPtrInput
	// Enable/disable web filter profile. Valid values: `enable`, `disable`.
	WebfilterProfileStatus pulumi.StringPtrInput
}

func (SnifferState) ElementType() reflect.Type {
	return reflect.TypeOf((*snifferState)(nil)).Elem()
}

type snifferArgs struct {
	// Configuration method to edit Denial of Service (DoS) anomaly settings. The structure of `anomaly` block is documented below.
	Anomalies []SnifferAnomaly `pulumi:"anomalies"`
	// Name of an existing application list.
	ApplicationList *string `pulumi:"applicationList"`
	// Enable/disable application control profile. Valid values: `enable`, `disable`.
	ApplicationListStatus *string `pulumi:"applicationListStatus"`
	// Name of an existing antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable/disable antivirus profile. Valid values: `enable`, `disable`.
	AvProfileStatus *string `pulumi:"avProfileStatus"`
	// Name of an existing CASB profile.
	CasbProfile *string `pulumi:"casbProfile"`
	// Enable/disable CASB profile. Valid values: `enable`, `disable`.
	CasbProfileStatus *string `pulumi:"casbProfileStatus"`
	// Name of an existing DLP profile.
	DlpProfile *string `pulumi:"dlpProfile"`
	// Enable/disable DLP profile. Valid values: `enable`, `disable`.
	DlpProfileStatus *string `pulumi:"dlpProfileStatus"`
	// Name of an existing DLP sensor.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Enable/disable DLP sensor. Valid values: `enable`, `disable`.
	DlpSensorStatus *string `pulumi:"dlpSensorStatus"`
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri *string `pulumi:"dsri"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Name of an existing email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable/disable emailfilter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus *string `pulumi:"emailfilterProfileStatus"`
	// Name of an existing file-filter profile.
	FileFilterProfile *string `pulumi:"fileFilterProfile"`
	// Enable/disable file filter. Valid values: `enable`, `disable`.
	FileFilterProfileStatus *string `pulumi:"fileFilterProfileStatus"`
	// Sniffer ID.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Hosts to filter for in sniffer traffic (Format examples: 1.1.1.1, 2.2.2.0/24, 3.3.3.3/255.255.255.0, 4.4.4.0-4.4.4.240).
	Host *string `pulumi:"host"`
	// Interface name that traffic sniffing will take place on.
	Interface string `pulumi:"interface"`
	// Enable/disable IP threat feed. Valid values: `enable`, `disable`.
	IpThreatfeedStatus *string `pulumi:"ipThreatfeedStatus"`
	// Name of an existing IP threat feed. The structure of `ipThreatfeed` block is documented below.
	IpThreatfeeds []SnifferIpThreatfeed `pulumi:"ipThreatfeeds"`
	// Enable/disable IPS DoS anomaly detection. Valid values: `enable`, `disable`.
	IpsDosStatus *string `pulumi:"ipsDosStatus"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable/disable IPS sensor. Valid values: `enable`, `disable`.
	IpsSensorStatus *string `pulumi:"ipsSensorStatus"`
	// Enable/disable sniffing IPv6 packets. Valid values: `enable`, `disable`.
	Ipv6 *string `pulumi:"ipv6"`
	// Either log all sessions, only sessions that have a security profile applied, or disable all logging for this policy. Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Maximum packet count. On FortiOS versions 6.2.0: 1 - 1000000, default = 10000. On FortiOS versions 6.2.4-6.4.2, 7.0.0: 1 - 10000, default = 4000. On FortiOS versions 6.4.10-6.4.14, 7.0.1-7.0.13: 1 - 1000000, default = 4000.
	MaxPacketCount *int `pulumi:"maxPacketCount"`
	// Enable/disable sniffing non-IP packets. Valid values: `enable`, `disable`.
	NonIp *string `pulumi:"nonIp"`
	// Ports to sniff (Format examples: 10, :20, 30:40, 50-, 100-200).
	Port *string `pulumi:"port"`
	// Integer value for the protocol type as defined by IANA (0 - 255).
	Protocol *string `pulumi:"protocol"`
	// Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Name of an existing spam filter profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Enable/disable spam filter. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus *string `pulumi:"spamfilterProfileStatus"`
	// Enable/disable the active status of the sniffer. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// List of VLANs to sniff.
	Vlan *string `pulumi:"vlan"`
	// Name of an existing web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
	// Enable/disable web filter profile. Valid values: `enable`, `disable`.
	WebfilterProfileStatus *string `pulumi:"webfilterProfileStatus"`
}

// The set of arguments for constructing a Sniffer resource.
type SnifferArgs struct {
	// Configuration method to edit Denial of Service (DoS) anomaly settings. The structure of `anomaly` block is documented below.
	Anomalies SnifferAnomalyArrayInput
	// Name of an existing application list.
	ApplicationList pulumi.StringPtrInput
	// Enable/disable application control profile. Valid values: `enable`, `disable`.
	ApplicationListStatus pulumi.StringPtrInput
	// Name of an existing antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable/disable antivirus profile. Valid values: `enable`, `disable`.
	AvProfileStatus pulumi.StringPtrInput
	// Name of an existing CASB profile.
	CasbProfile pulumi.StringPtrInput
	// Enable/disable CASB profile. Valid values: `enable`, `disable`.
	CasbProfileStatus pulumi.StringPtrInput
	// Name of an existing DLP profile.
	DlpProfile pulumi.StringPtrInput
	// Enable/disable DLP profile. Valid values: `enable`, `disable`.
	DlpProfileStatus pulumi.StringPtrInput
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringPtrInput
	// Enable/disable DLP sensor. Valid values: `enable`, `disable`.
	DlpSensorStatus pulumi.StringPtrInput
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable/disable emailfilter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus pulumi.StringPtrInput
	// Name of an existing file-filter profile.
	FileFilterProfile pulumi.StringPtrInput
	// Enable/disable file filter. Valid values: `enable`, `disable`.
	FileFilterProfileStatus pulumi.StringPtrInput
	// Sniffer ID.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Hosts to filter for in sniffer traffic (Format examples: 1.1.1.1, 2.2.2.0/24, 3.3.3.3/255.255.255.0, 4.4.4.0-4.4.4.240).
	Host pulumi.StringPtrInput
	// Interface name that traffic sniffing will take place on.
	Interface pulumi.StringInput
	// Enable/disable IP threat feed. Valid values: `enable`, `disable`.
	IpThreatfeedStatus pulumi.StringPtrInput
	// Name of an existing IP threat feed. The structure of `ipThreatfeed` block is documented below.
	IpThreatfeeds SnifferIpThreatfeedArrayInput
	// Enable/disable IPS DoS anomaly detection. Valid values: `enable`, `disable`.
	IpsDosStatus pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Enable/disable IPS sensor. Valid values: `enable`, `disable`.
	IpsSensorStatus pulumi.StringPtrInput
	// Enable/disable sniffing IPv6 packets. Valid values: `enable`, `disable`.
	Ipv6 pulumi.StringPtrInput
	// Either log all sessions, only sessions that have a security profile applied, or disable all logging for this policy. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Maximum packet count. On FortiOS versions 6.2.0: 1 - 1000000, default = 10000. On FortiOS versions 6.2.4-6.4.2, 7.0.0: 1 - 10000, default = 4000. On FortiOS versions 6.4.10-6.4.14, 7.0.1-7.0.13: 1 - 1000000, default = 4000.
	MaxPacketCount pulumi.IntPtrInput
	// Enable/disable sniffing non-IP packets. Valid values: `enable`, `disable`.
	NonIp pulumi.StringPtrInput
	// Ports to sniff (Format examples: 10, :20, 30:40, 50-, 100-200).
	Port pulumi.StringPtrInput
	// Integer value for the protocol type as defined by IANA (0 - 255).
	Protocol pulumi.StringPtrInput
	// Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Name of an existing spam filter profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Enable/disable spam filter. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus pulumi.StringPtrInput
	// Enable/disable the active status of the sniffer. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// List of VLANs to sniff.
	Vlan pulumi.StringPtrInput
	// Name of an existing web filter profile.
	WebfilterProfile pulumi.StringPtrInput
	// Enable/disable web filter profile. Valid values: `enable`, `disable`.
	WebfilterProfileStatus pulumi.StringPtrInput
}

func (SnifferArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snifferArgs)(nil)).Elem()
}

type SnifferInput interface {
	pulumi.Input

	ToSnifferOutput() SnifferOutput
	ToSnifferOutputWithContext(ctx context.Context) SnifferOutput
}

func (*Sniffer) ElementType() reflect.Type {
	return reflect.TypeOf((**Sniffer)(nil)).Elem()
}

func (i *Sniffer) ToSnifferOutput() SnifferOutput {
	return i.ToSnifferOutputWithContext(context.Background())
}

func (i *Sniffer) ToSnifferOutputWithContext(ctx context.Context) SnifferOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnifferOutput)
}

// SnifferArrayInput is an input type that accepts SnifferArray and SnifferArrayOutput values.
// You can construct a concrete instance of `SnifferArrayInput` via:
//
//	SnifferArray{ SnifferArgs{...} }
type SnifferArrayInput interface {
	pulumi.Input

	ToSnifferArrayOutput() SnifferArrayOutput
	ToSnifferArrayOutputWithContext(context.Context) SnifferArrayOutput
}

type SnifferArray []SnifferInput

func (SnifferArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sniffer)(nil)).Elem()
}

func (i SnifferArray) ToSnifferArrayOutput() SnifferArrayOutput {
	return i.ToSnifferArrayOutputWithContext(context.Background())
}

func (i SnifferArray) ToSnifferArrayOutputWithContext(ctx context.Context) SnifferArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnifferArrayOutput)
}

// SnifferMapInput is an input type that accepts SnifferMap and SnifferMapOutput values.
// You can construct a concrete instance of `SnifferMapInput` via:
//
//	SnifferMap{ "key": SnifferArgs{...} }
type SnifferMapInput interface {
	pulumi.Input

	ToSnifferMapOutput() SnifferMapOutput
	ToSnifferMapOutputWithContext(context.Context) SnifferMapOutput
}

type SnifferMap map[string]SnifferInput

func (SnifferMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sniffer)(nil)).Elem()
}

func (i SnifferMap) ToSnifferMapOutput() SnifferMapOutput {
	return i.ToSnifferMapOutputWithContext(context.Background())
}

func (i SnifferMap) ToSnifferMapOutputWithContext(ctx context.Context) SnifferMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnifferMapOutput)
}

type SnifferOutput struct{ *pulumi.OutputState }

func (SnifferOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sniffer)(nil)).Elem()
}

func (o SnifferOutput) ToSnifferOutput() SnifferOutput {
	return o
}

func (o SnifferOutput) ToSnifferOutputWithContext(ctx context.Context) SnifferOutput {
	return o
}

// Configuration method to edit Denial of Service (DoS) anomaly settings. The structure of `anomaly` block is documented below.
func (o SnifferOutput) Anomalies() SnifferAnomalyArrayOutput {
	return o.ApplyT(func(v *Sniffer) SnifferAnomalyArrayOutput { return v.Anomalies }).(SnifferAnomalyArrayOutput)
}

// Name of an existing application list.
func (o SnifferOutput) ApplicationList() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.ApplicationList }).(pulumi.StringOutput)
}

// Enable/disable application control profile. Valid values: `enable`, `disable`.
func (o SnifferOutput) ApplicationListStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.ApplicationListStatus }).(pulumi.StringOutput)
}

// Name of an existing antivirus profile.
func (o SnifferOutput) AvProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.AvProfile }).(pulumi.StringOutput)
}

// Enable/disable antivirus profile. Valid values: `enable`, `disable`.
func (o SnifferOutput) AvProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.AvProfileStatus }).(pulumi.StringOutput)
}

// Name of an existing CASB profile.
func (o SnifferOutput) CasbProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.CasbProfile }).(pulumi.StringOutput)
}

// Enable/disable CASB profile. Valid values: `enable`, `disable`.
func (o SnifferOutput) CasbProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.CasbProfileStatus }).(pulumi.StringOutput)
}

// Name of an existing DLP profile.
func (o SnifferOutput) DlpProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.DlpProfile }).(pulumi.StringOutput)
}

// Enable/disable DLP profile. Valid values: `enable`, `disable`.
func (o SnifferOutput) DlpProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.DlpProfileStatus }).(pulumi.StringOutput)
}

// Name of an existing DLP sensor.
func (o SnifferOutput) DlpSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.DlpSensor }).(pulumi.StringOutput)
}

// Enable/disable DLP sensor. Valid values: `enable`, `disable`.
func (o SnifferOutput) DlpSensorStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.DlpSensorStatus }).(pulumi.StringOutput)
}

// Enable/disable DSRI. Valid values: `enable`, `disable`.
func (o SnifferOutput) Dsri() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.Dsri }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SnifferOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Name of an existing email filter profile.
func (o SnifferOutput) EmailfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.EmailfilterProfile }).(pulumi.StringOutput)
}

// Enable/disable emailfilter. Valid values: `enable`, `disable`.
func (o SnifferOutput) EmailfilterProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.EmailfilterProfileStatus }).(pulumi.StringOutput)
}

// Name of an existing file-filter profile.
func (o SnifferOutput) FileFilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.FileFilterProfile }).(pulumi.StringOutput)
}

// Enable/disable file filter. Valid values: `enable`, `disable`.
func (o SnifferOutput) FileFilterProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.FileFilterProfileStatus }).(pulumi.StringOutput)
}

// Sniffer ID.
func (o SnifferOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o SnifferOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Hosts to filter for in sniffer traffic (Format examples: 1.1.1.1, 2.2.2.0/24, 3.3.3.3/255.255.255.0, 4.4.4.0-4.4.4.240).
func (o SnifferOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// Interface name that traffic sniffing will take place on.
func (o SnifferOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Enable/disable IP threat feed. Valid values: `enable`, `disable`.
func (o SnifferOutput) IpThreatfeedStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.IpThreatfeedStatus }).(pulumi.StringOutput)
}

// Name of an existing IP threat feed. The structure of `ipThreatfeed` block is documented below.
func (o SnifferOutput) IpThreatfeeds() SnifferIpThreatfeedArrayOutput {
	return o.ApplyT(func(v *Sniffer) SnifferIpThreatfeedArrayOutput { return v.IpThreatfeeds }).(SnifferIpThreatfeedArrayOutput)
}

// Enable/disable IPS DoS anomaly detection. Valid values: `enable`, `disable`.
func (o SnifferOutput) IpsDosStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.IpsDosStatus }).(pulumi.StringOutput)
}

// Name of an existing IPS sensor.
func (o SnifferOutput) IpsSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.IpsSensor }).(pulumi.StringOutput)
}

// Enable/disable IPS sensor. Valid values: `enable`, `disable`.
func (o SnifferOutput) IpsSensorStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.IpsSensorStatus }).(pulumi.StringOutput)
}

// Enable/disable sniffing IPv6 packets. Valid values: `enable`, `disable`.
func (o SnifferOutput) Ipv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.Ipv6 }).(pulumi.StringOutput)
}

// Either log all sessions, only sessions that have a security profile applied, or disable all logging for this policy. Valid values: `all`, `utm`, `disable`.
func (o SnifferOutput) Logtraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.Logtraffic }).(pulumi.StringOutput)
}

// Maximum packet count. On FortiOS versions 6.2.0: 1 - 1000000, default = 10000. On FortiOS versions 6.2.4-6.4.2, 7.0.0: 1 - 10000, default = 4000. On FortiOS versions 6.4.10-6.4.14, 7.0.1-7.0.13: 1 - 1000000, default = 4000.
func (o SnifferOutput) MaxPacketCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.IntOutput { return v.MaxPacketCount }).(pulumi.IntOutput)
}

// Enable/disable sniffing non-IP packets. Valid values: `enable`, `disable`.
func (o SnifferOutput) NonIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.NonIp }).(pulumi.StringOutput)
}

// Ports to sniff (Format examples: 10, :20, 30:40, 50-, 100-200).
func (o SnifferOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.Port }).(pulumi.StringOutput)
}

// Integer value for the protocol type as defined by IANA (0 - 255).
func (o SnifferOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Enable/disable scanning of connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
func (o SnifferOutput) ScanBotnetConnections() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.ScanBotnetConnections }).(pulumi.StringOutput)
}

// Name of an existing spam filter profile.
func (o SnifferOutput) SpamfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.SpamfilterProfile }).(pulumi.StringOutput)
}

// Enable/disable spam filter. Valid values: `enable`, `disable`.
func (o SnifferOutput) SpamfilterProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.SpamfilterProfileStatus }).(pulumi.StringOutput)
}

// Enable/disable the active status of the sniffer. Valid values: `enable`, `disable`.
func (o SnifferOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o SnifferOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SnifferOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// List of VLANs to sniff.
func (o SnifferOutput) Vlan() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.Vlan }).(pulumi.StringOutput)
}

// Name of an existing web filter profile.
func (o SnifferOutput) WebfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.WebfilterProfile }).(pulumi.StringOutput)
}

// Enable/disable web filter profile. Valid values: `enable`, `disable`.
func (o SnifferOutput) WebfilterProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Sniffer) pulumi.StringOutput { return v.WebfilterProfileStatus }).(pulumi.StringOutput)
}

type SnifferArrayOutput struct{ *pulumi.OutputState }

func (SnifferArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sniffer)(nil)).Elem()
}

func (o SnifferArrayOutput) ToSnifferArrayOutput() SnifferArrayOutput {
	return o
}

func (o SnifferArrayOutput) ToSnifferArrayOutputWithContext(ctx context.Context) SnifferArrayOutput {
	return o
}

func (o SnifferArrayOutput) Index(i pulumi.IntInput) SnifferOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Sniffer {
		return vs[0].([]*Sniffer)[vs[1].(int)]
	}).(SnifferOutput)
}

type SnifferMapOutput struct{ *pulumi.OutputState }

func (SnifferMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sniffer)(nil)).Elem()
}

func (o SnifferMapOutput) ToSnifferMapOutput() SnifferMapOutput {
	return o
}

func (o SnifferMapOutput) ToSnifferMapOutputWithContext(ctx context.Context) SnifferMapOutput {
	return o
}

func (o SnifferMapOutput) MapIndex(k pulumi.StringInput) SnifferOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Sniffer {
		return vs[0].(map[string]*Sniffer)[vs[1].(string)]
	}).(SnifferOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnifferInput)(nil)).Elem(), &Sniffer{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnifferArrayInput)(nil)).Elem(), SnifferArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnifferMapInput)(nil)).Elem(), SnifferMap{})
	pulumi.RegisterOutputType(SnifferOutput{})
	pulumi.RegisterOutputType(SnifferArrayOutput{})
	pulumi.RegisterOutputType(SnifferMapOutput{})
}
