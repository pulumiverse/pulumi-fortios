// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure additional port mappings for Internet Services. Applies to FortiOS Version `6.2.4,6.2.6,6.4.1,6.4.2,6.4.10,6.4.11,6.4.12,6.4.13,6.4.14,7.0.0,7.0.1,7.0.2,7.0.3,7.0.4,7.0.5,7.0.6,7.0.7,7.0.8,7.0.9,7.0.10,7.0.11,7.0.12,7.0.13,7.2.0,7.2.1,7.2.2,7.2.3,7.2.4,7.2.6,7.4.0,7.4.1,7.4.2`.
//
// ## Import
//
// Firewall InternetServiceAppend can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/internetserviceappend:Internetserviceappend labelname FirewallInternetServiceAppend
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/internetserviceappend:Internetserviceappend labelname FirewallInternetServiceAppend
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Internetserviceappend struct {
	pulumi.CustomResourceState

	// Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`, `both`.
	AddrMode pulumi.StringOutput `pulumi:"addrMode"`
	// Appending TCP/UDP/SCTP destination port (1 to 65535).
	AppendPort pulumi.IntOutput `pulumi:"appendPort"`
	// Matching TCP/UDP/SCTP destination port (1 to 65535).
	MatchPort pulumi.IntOutput `pulumi:"matchPort"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewInternetserviceappend registers a new resource with the given unique name, arguments, and options.
func NewInternetserviceappend(ctx *pulumi.Context,
	name string, args *InternetserviceappendArgs, opts ...pulumi.ResourceOption) (*Internetserviceappend, error) {
	if args == nil {
		args = &InternetserviceappendArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Internetserviceappend
	err := ctx.RegisterResource("fortios:firewall/internetserviceappend:Internetserviceappend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInternetserviceappend gets an existing Internetserviceappend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInternetserviceappend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InternetserviceappendState, opts ...pulumi.ResourceOption) (*Internetserviceappend, error) {
	var resource Internetserviceappend
	err := ctx.ReadResource("fortios:firewall/internetserviceappend:Internetserviceappend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Internetserviceappend resources.
type internetserviceappendState struct {
	// Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`, `both`.
	AddrMode *string `pulumi:"addrMode"`
	// Appending TCP/UDP/SCTP destination port (1 to 65535).
	AppendPort *int `pulumi:"appendPort"`
	// Matching TCP/UDP/SCTP destination port (1 to 65535).
	MatchPort *int `pulumi:"matchPort"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type InternetserviceappendState struct {
	// Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`, `both`.
	AddrMode pulumi.StringPtrInput
	// Appending TCP/UDP/SCTP destination port (1 to 65535).
	AppendPort pulumi.IntPtrInput
	// Matching TCP/UDP/SCTP destination port (1 to 65535).
	MatchPort pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (InternetserviceappendState) ElementType() reflect.Type {
	return reflect.TypeOf((*internetserviceappendState)(nil)).Elem()
}

type internetserviceappendArgs struct {
	// Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`, `both`.
	AddrMode *string `pulumi:"addrMode"`
	// Appending TCP/UDP/SCTP destination port (1 to 65535).
	AppendPort *int `pulumi:"appendPort"`
	// Matching TCP/UDP/SCTP destination port (1 to 65535).
	MatchPort *int `pulumi:"matchPort"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Internetserviceappend resource.
type InternetserviceappendArgs struct {
	// Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`, `both`.
	AddrMode pulumi.StringPtrInput
	// Appending TCP/UDP/SCTP destination port (1 to 65535).
	AppendPort pulumi.IntPtrInput
	// Matching TCP/UDP/SCTP destination port (1 to 65535).
	MatchPort pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (InternetserviceappendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*internetserviceappendArgs)(nil)).Elem()
}

type InternetserviceappendInput interface {
	pulumi.Input

	ToInternetserviceappendOutput() InternetserviceappendOutput
	ToInternetserviceappendOutputWithContext(ctx context.Context) InternetserviceappendOutput
}

func (*Internetserviceappend) ElementType() reflect.Type {
	return reflect.TypeOf((**Internetserviceappend)(nil)).Elem()
}

func (i *Internetserviceappend) ToInternetserviceappendOutput() InternetserviceappendOutput {
	return i.ToInternetserviceappendOutputWithContext(context.Background())
}

func (i *Internetserviceappend) ToInternetserviceappendOutputWithContext(ctx context.Context) InternetserviceappendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetserviceappendOutput)
}

// InternetserviceappendArrayInput is an input type that accepts InternetserviceappendArray and InternetserviceappendArrayOutput values.
// You can construct a concrete instance of `InternetserviceappendArrayInput` via:
//
//	InternetserviceappendArray{ InternetserviceappendArgs{...} }
type InternetserviceappendArrayInput interface {
	pulumi.Input

	ToInternetserviceappendArrayOutput() InternetserviceappendArrayOutput
	ToInternetserviceappendArrayOutputWithContext(context.Context) InternetserviceappendArrayOutput
}

type InternetserviceappendArray []InternetserviceappendInput

func (InternetserviceappendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Internetserviceappend)(nil)).Elem()
}

func (i InternetserviceappendArray) ToInternetserviceappendArrayOutput() InternetserviceappendArrayOutput {
	return i.ToInternetserviceappendArrayOutputWithContext(context.Background())
}

func (i InternetserviceappendArray) ToInternetserviceappendArrayOutputWithContext(ctx context.Context) InternetserviceappendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetserviceappendArrayOutput)
}

// InternetserviceappendMapInput is an input type that accepts InternetserviceappendMap and InternetserviceappendMapOutput values.
// You can construct a concrete instance of `InternetserviceappendMapInput` via:
//
//	InternetserviceappendMap{ "key": InternetserviceappendArgs{...} }
type InternetserviceappendMapInput interface {
	pulumi.Input

	ToInternetserviceappendMapOutput() InternetserviceappendMapOutput
	ToInternetserviceappendMapOutputWithContext(context.Context) InternetserviceappendMapOutput
}

type InternetserviceappendMap map[string]InternetserviceappendInput

func (InternetserviceappendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Internetserviceappend)(nil)).Elem()
}

func (i InternetserviceappendMap) ToInternetserviceappendMapOutput() InternetserviceappendMapOutput {
	return i.ToInternetserviceappendMapOutputWithContext(context.Background())
}

func (i InternetserviceappendMap) ToInternetserviceappendMapOutputWithContext(ctx context.Context) InternetserviceappendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetserviceappendMapOutput)
}

type InternetserviceappendOutput struct{ *pulumi.OutputState }

func (InternetserviceappendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Internetserviceappend)(nil)).Elem()
}

func (o InternetserviceappendOutput) ToInternetserviceappendOutput() InternetserviceappendOutput {
	return o
}

func (o InternetserviceappendOutput) ToInternetserviceappendOutputWithContext(ctx context.Context) InternetserviceappendOutput {
	return o
}

// Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`, `both`.
func (o InternetserviceappendOutput) AddrMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Internetserviceappend) pulumi.StringOutput { return v.AddrMode }).(pulumi.StringOutput)
}

// Appending TCP/UDP/SCTP destination port (1 to 65535).
func (o InternetserviceappendOutput) AppendPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Internetserviceappend) pulumi.IntOutput { return v.AppendPort }).(pulumi.IntOutput)
}

// Matching TCP/UDP/SCTP destination port (1 to 65535).
func (o InternetserviceappendOutput) MatchPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Internetserviceappend) pulumi.IntOutput { return v.MatchPort }).(pulumi.IntOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o InternetserviceappendOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Internetserviceappend) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type InternetserviceappendArrayOutput struct{ *pulumi.OutputState }

func (InternetserviceappendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Internetserviceappend)(nil)).Elem()
}

func (o InternetserviceappendArrayOutput) ToInternetserviceappendArrayOutput() InternetserviceappendArrayOutput {
	return o
}

func (o InternetserviceappendArrayOutput) ToInternetserviceappendArrayOutputWithContext(ctx context.Context) InternetserviceappendArrayOutput {
	return o
}

func (o InternetserviceappendArrayOutput) Index(i pulumi.IntInput) InternetserviceappendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Internetserviceappend {
		return vs[0].([]*Internetserviceappend)[vs[1].(int)]
	}).(InternetserviceappendOutput)
}

type InternetserviceappendMapOutput struct{ *pulumi.OutputState }

func (InternetserviceappendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Internetserviceappend)(nil)).Elem()
}

func (o InternetserviceappendMapOutput) ToInternetserviceappendMapOutput() InternetserviceappendMapOutput {
	return o
}

func (o InternetserviceappendMapOutput) ToInternetserviceappendMapOutputWithContext(ctx context.Context) InternetserviceappendMapOutput {
	return o
}

func (o InternetserviceappendMapOutput) MapIndex(k pulumi.StringInput) InternetserviceappendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Internetserviceappend {
		return vs[0].(map[string]*Internetserviceappend)[vs[1].(string)]
	}).(InternetserviceappendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InternetserviceappendInput)(nil)).Elem(), &Internetserviceappend{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternetserviceappendArrayInput)(nil)).Elem(), InternetserviceappendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternetserviceappendMapInput)(nil)).Elem(), InternetserviceappendMap{})
	pulumi.RegisterOutputType(InternetserviceappendOutput{})
	pulumi.RegisterOutputType(InternetserviceappendArrayOutput{})
	pulumi.RegisterOutputType(InternetserviceappendMapOutput{})
}
