// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure IPv4 interface policies.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewInterfacepolicy(ctx, "trname", &firewall.InterfacepolicyArgs{
//				AddressType:           pulumi.String("ipv4"),
//				ApplicationListStatus: pulumi.String("disable"),
//				AvProfileStatus:       pulumi.String("disable"),
//				DlpSensorStatus:       pulumi.String("disable"),
//				Dsri:                  pulumi.String("disable"),
//				Dstaddrs: firewall.InterfacepolicyDstaddrArray{
//					&firewall.InterfacepolicyDstaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Interface:             pulumi.String("port4"),
//				IpsSensorStatus:       pulumi.String("disable"),
//				Logtraffic:            pulumi.String("all"),
//				Policyid:              pulumi.Int(1),
//				ScanBotnetConnections: pulumi.String("block"),
//				Services: firewall.InterfacepolicyServiceArray{
//					&firewall.InterfacepolicyServiceArgs{
//						Name: pulumi.String("ALL"),
//					},
//				},
//				SpamfilterProfileStatus: pulumi.String("disable"),
//				Srcaddrs: firewall.InterfacepolicySrcaddrArray{
//					&firewall.InterfacepolicySrcaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Status:                 pulumi.String("enable"),
//				WebfilterProfileStatus: pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Firewall InterfacePolicy can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/interfacepolicy:Interfacepolicy labelname {{policyid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/interfacepolicy:Interfacepolicy labelname {{policyid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Interfacepolicy struct {
	pulumi.CustomResourceState

	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType pulumi.StringOutput `pulumi:"addressType"`
	// Application list name.
	ApplicationList pulumi.StringOutput `pulumi:"applicationList"`
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus pulumi.StringOutput `pulumi:"applicationListStatus"`
	// Antivirus profile.
	AvProfile pulumi.StringOutput `pulumi:"avProfile"`
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus pulumi.StringOutput `pulumi:"avProfileStatus"`
	// CASB profile.
	CasbProfile pulumi.StringOutput `pulumi:"casbProfile"`
	// Enable/disable CASB. Valid values: `enable`, `disable`.
	CasbProfileStatus pulumi.StringOutput `pulumi:"casbProfileStatus"`
	// Comments.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// DLP profile name.
	DlpProfile pulumi.StringOutput `pulumi:"dlpProfile"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpProfileStatus pulumi.StringOutput `pulumi:"dlpProfileStatus"`
	// DLP sensor name.
	DlpSensor pulumi.StringOutput `pulumi:"dlpSensor"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus pulumi.StringOutput `pulumi:"dlpSensorStatus"`
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri pulumi.StringOutput `pulumi:"dsri"`
	// Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
	Dstaddrs InterfacepolicyDstaddrArrayOutput `pulumi:"dstaddrs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Email filter profile.
	EmailfilterProfile pulumi.StringOutput `pulumi:"emailfilterProfile"`
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus pulumi.StringOutput `pulumi:"emailfilterProfileStatus"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Monitored interface name from available interfaces.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// IPS sensor name.
	IpsSensor pulumi.StringOutput `pulumi:"ipsSensor"`
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus pulumi.StringOutput `pulumi:"ipsSensorStatus"`
	// Label.
	Label pulumi.StringOutput `pulumi:"label"`
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringOutput `pulumi:"logtraffic"`
	// Policy ID.
	Policyid pulumi.IntOutput `pulumi:"policyid"`
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringOutput `pulumi:"scanBotnetConnections"`
	// Service object from available options. The structure of `service` block is documented below.
	Services InterfacepolicyServiceArrayOutput `pulumi:"services"`
	// Antispam profile.
	SpamfilterProfile pulumi.StringOutput `pulumi:"spamfilterProfile"`
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus pulumi.StringOutput `pulumi:"spamfilterProfileStatus"`
	// Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
	Srcaddrs InterfacepolicySrcaddrArrayOutput `pulumi:"srcaddrs"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Web filter profile.
	WebfilterProfile pulumi.StringOutput `pulumi:"webfilterProfile"`
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus pulumi.StringOutput `pulumi:"webfilterProfileStatus"`
}

// NewInterfacepolicy registers a new resource with the given unique name, arguments, and options.
func NewInterfacepolicy(ctx *pulumi.Context,
	name string, args *InterfacepolicyArgs, opts ...pulumi.ResourceOption) (*Interfacepolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dstaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Dstaddrs'")
	}
	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Services == nil {
		return nil, errors.New("invalid value for required argument 'Services'")
	}
	if args.Srcaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Srcaddrs'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Interfacepolicy
	err := ctx.RegisterResource("fortios:firewall/interfacepolicy:Interfacepolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterfacepolicy gets an existing Interfacepolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterfacepolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterfacepolicyState, opts ...pulumi.ResourceOption) (*Interfacepolicy, error) {
	var resource Interfacepolicy
	err := ctx.ReadResource("fortios:firewall/interfacepolicy:Interfacepolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Interfacepolicy resources.
type interfacepolicyState struct {
	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType *string `pulumi:"addressType"`
	// Application list name.
	ApplicationList *string `pulumi:"applicationList"`
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus *string `pulumi:"applicationListStatus"`
	// Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus *string `pulumi:"avProfileStatus"`
	// CASB profile.
	CasbProfile *string `pulumi:"casbProfile"`
	// Enable/disable CASB. Valid values: `enable`, `disable`.
	CasbProfileStatus *string `pulumi:"casbProfileStatus"`
	// Comments.
	Comments *string `pulumi:"comments"`
	// DLP profile name.
	DlpProfile *string `pulumi:"dlpProfile"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpProfileStatus *string `pulumi:"dlpProfileStatus"`
	// DLP sensor name.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus *string `pulumi:"dlpSensorStatus"`
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri *string `pulumi:"dsri"`
	// Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
	Dstaddrs []InterfacepolicyDstaddr `pulumi:"dstaddrs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus *string `pulumi:"emailfilterProfileStatus"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Monitored interface name from available interfaces.
	Interface *string `pulumi:"interface"`
	// IPS sensor name.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus *string `pulumi:"ipsSensorStatus"`
	// Label.
	Label *string `pulumi:"label"`
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Service object from available options. The structure of `service` block is documented below.
	Services []InterfacepolicyService `pulumi:"services"`
	// Antispam profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus *string `pulumi:"spamfilterProfileStatus"`
	// Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
	Srcaddrs []InterfacepolicySrcaddr `pulumi:"srcaddrs"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus *string `pulumi:"webfilterProfileStatus"`
}

type InterfacepolicyState struct {
	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType pulumi.StringPtrInput
	// Application list name.
	ApplicationList pulumi.StringPtrInput
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus pulumi.StringPtrInput
	// Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus pulumi.StringPtrInput
	// CASB profile.
	CasbProfile pulumi.StringPtrInput
	// Enable/disable CASB. Valid values: `enable`, `disable`.
	CasbProfileStatus pulumi.StringPtrInput
	// Comments.
	Comments pulumi.StringPtrInput
	// DLP profile name.
	DlpProfile pulumi.StringPtrInput
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpProfileStatus pulumi.StringPtrInput
	// DLP sensor name.
	DlpSensor pulumi.StringPtrInput
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus pulumi.StringPtrInput
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri pulumi.StringPtrInput
	// Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
	Dstaddrs InterfacepolicyDstaddrArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Monitored interface name from available interfaces.
	Interface pulumi.StringPtrInput
	// IPS sensor name.
	IpsSensor pulumi.StringPtrInput
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus pulumi.StringPtrInput
	// Label.
	Label pulumi.StringPtrInput
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Service object from available options. The structure of `service` block is documented below.
	Services InterfacepolicyServiceArrayInput
	// Antispam profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus pulumi.StringPtrInput
	// Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
	Srcaddrs InterfacepolicySrcaddrArrayInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus pulumi.StringPtrInput
}

func (InterfacepolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*interfacepolicyState)(nil)).Elem()
}

type interfacepolicyArgs struct {
	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType *string `pulumi:"addressType"`
	// Application list name.
	ApplicationList *string `pulumi:"applicationList"`
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus *string `pulumi:"applicationListStatus"`
	// Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus *string `pulumi:"avProfileStatus"`
	// CASB profile.
	CasbProfile *string `pulumi:"casbProfile"`
	// Enable/disable CASB. Valid values: `enable`, `disable`.
	CasbProfileStatus *string `pulumi:"casbProfileStatus"`
	// Comments.
	Comments *string `pulumi:"comments"`
	// DLP profile name.
	DlpProfile *string `pulumi:"dlpProfile"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpProfileStatus *string `pulumi:"dlpProfileStatus"`
	// DLP sensor name.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus *string `pulumi:"dlpSensorStatus"`
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri *string `pulumi:"dsri"`
	// Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
	Dstaddrs []InterfacepolicyDstaddr `pulumi:"dstaddrs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus *string `pulumi:"emailfilterProfileStatus"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Monitored interface name from available interfaces.
	Interface string `pulumi:"interface"`
	// IPS sensor name.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus *string `pulumi:"ipsSensorStatus"`
	// Label.
	Label *string `pulumi:"label"`
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Service object from available options. The structure of `service` block is documented below.
	Services []InterfacepolicyService `pulumi:"services"`
	// Antispam profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus *string `pulumi:"spamfilterProfileStatus"`
	// Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
	Srcaddrs []InterfacepolicySrcaddr `pulumi:"srcaddrs"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus *string `pulumi:"webfilterProfileStatus"`
}

// The set of arguments for constructing a Interfacepolicy resource.
type InterfacepolicyArgs struct {
	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType pulumi.StringPtrInput
	// Application list name.
	ApplicationList pulumi.StringPtrInput
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus pulumi.StringPtrInput
	// Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus pulumi.StringPtrInput
	// CASB profile.
	CasbProfile pulumi.StringPtrInput
	// Enable/disable CASB. Valid values: `enable`, `disable`.
	CasbProfileStatus pulumi.StringPtrInput
	// Comments.
	Comments pulumi.StringPtrInput
	// DLP profile name.
	DlpProfile pulumi.StringPtrInput
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpProfileStatus pulumi.StringPtrInput
	// DLP sensor name.
	DlpSensor pulumi.StringPtrInput
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus pulumi.StringPtrInput
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri pulumi.StringPtrInput
	// Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
	Dstaddrs InterfacepolicyDstaddrArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Monitored interface name from available interfaces.
	Interface pulumi.StringInput
	// IPS sensor name.
	IpsSensor pulumi.StringPtrInput
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus pulumi.StringPtrInput
	// Label.
	Label pulumi.StringPtrInput
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Service object from available options. The structure of `service` block is documented below.
	Services InterfacepolicyServiceArrayInput
	// Antispam profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus pulumi.StringPtrInput
	// Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
	Srcaddrs InterfacepolicySrcaddrArrayInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus pulumi.StringPtrInput
}

func (InterfacepolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interfacepolicyArgs)(nil)).Elem()
}

type InterfacepolicyInput interface {
	pulumi.Input

	ToInterfacepolicyOutput() InterfacepolicyOutput
	ToInterfacepolicyOutputWithContext(ctx context.Context) InterfacepolicyOutput
}

func (*Interfacepolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**Interfacepolicy)(nil)).Elem()
}

func (i *Interfacepolicy) ToInterfacepolicyOutput() InterfacepolicyOutput {
	return i.ToInterfacepolicyOutputWithContext(context.Background())
}

func (i *Interfacepolicy) ToInterfacepolicyOutputWithContext(ctx context.Context) InterfacepolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacepolicyOutput)
}

// InterfacepolicyArrayInput is an input type that accepts InterfacepolicyArray and InterfacepolicyArrayOutput values.
// You can construct a concrete instance of `InterfacepolicyArrayInput` via:
//
//	InterfacepolicyArray{ InterfacepolicyArgs{...} }
type InterfacepolicyArrayInput interface {
	pulumi.Input

	ToInterfacepolicyArrayOutput() InterfacepolicyArrayOutput
	ToInterfacepolicyArrayOutputWithContext(context.Context) InterfacepolicyArrayOutput
}

type InterfacepolicyArray []InterfacepolicyInput

func (InterfacepolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Interfacepolicy)(nil)).Elem()
}

func (i InterfacepolicyArray) ToInterfacepolicyArrayOutput() InterfacepolicyArrayOutput {
	return i.ToInterfacepolicyArrayOutputWithContext(context.Background())
}

func (i InterfacepolicyArray) ToInterfacepolicyArrayOutputWithContext(ctx context.Context) InterfacepolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacepolicyArrayOutput)
}

// InterfacepolicyMapInput is an input type that accepts InterfacepolicyMap and InterfacepolicyMapOutput values.
// You can construct a concrete instance of `InterfacepolicyMapInput` via:
//
//	InterfacepolicyMap{ "key": InterfacepolicyArgs{...} }
type InterfacepolicyMapInput interface {
	pulumi.Input

	ToInterfacepolicyMapOutput() InterfacepolicyMapOutput
	ToInterfacepolicyMapOutputWithContext(context.Context) InterfacepolicyMapOutput
}

type InterfacepolicyMap map[string]InterfacepolicyInput

func (InterfacepolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Interfacepolicy)(nil)).Elem()
}

func (i InterfacepolicyMap) ToInterfacepolicyMapOutput() InterfacepolicyMapOutput {
	return i.ToInterfacepolicyMapOutputWithContext(context.Background())
}

func (i InterfacepolicyMap) ToInterfacepolicyMapOutputWithContext(ctx context.Context) InterfacepolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacepolicyMapOutput)
}

type InterfacepolicyOutput struct{ *pulumi.OutputState }

func (InterfacepolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Interfacepolicy)(nil)).Elem()
}

func (o InterfacepolicyOutput) ToInterfacepolicyOutput() InterfacepolicyOutput {
	return o
}

func (o InterfacepolicyOutput) ToInterfacepolicyOutputWithContext(ctx context.Context) InterfacepolicyOutput {
	return o
}

// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
func (o InterfacepolicyOutput) AddressType() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.AddressType }).(pulumi.StringOutput)
}

// Application list name.
func (o InterfacepolicyOutput) ApplicationList() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.ApplicationList }).(pulumi.StringOutput)
}

// Enable/disable application control. Valid values: `enable`, `disable`.
func (o InterfacepolicyOutput) ApplicationListStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.ApplicationListStatus }).(pulumi.StringOutput)
}

// Antivirus profile.
func (o InterfacepolicyOutput) AvProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.AvProfile }).(pulumi.StringOutput)
}

// Enable/disable antivirus. Valid values: `enable`, `disable`.
func (o InterfacepolicyOutput) AvProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.AvProfileStatus }).(pulumi.StringOutput)
}

// CASB profile.
func (o InterfacepolicyOutput) CasbProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.CasbProfile }).(pulumi.StringOutput)
}

// Enable/disable CASB. Valid values: `enable`, `disable`.
func (o InterfacepolicyOutput) CasbProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.CasbProfileStatus }).(pulumi.StringOutput)
}

// Comments.
func (o InterfacepolicyOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// DLP profile name.
func (o InterfacepolicyOutput) DlpProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.DlpProfile }).(pulumi.StringOutput)
}

// Enable/disable DLP. Valid values: `enable`, `disable`.
func (o InterfacepolicyOutput) DlpProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.DlpProfileStatus }).(pulumi.StringOutput)
}

// DLP sensor name.
func (o InterfacepolicyOutput) DlpSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.DlpSensor }).(pulumi.StringOutput)
}

// Enable/disable DLP. Valid values: `enable`, `disable`.
func (o InterfacepolicyOutput) DlpSensorStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.DlpSensorStatus }).(pulumi.StringOutput)
}

// Enable/disable DSRI. Valid values: `enable`, `disable`.
func (o InterfacepolicyOutput) Dsri() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.Dsri }).(pulumi.StringOutput)
}

// Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
func (o InterfacepolicyOutput) Dstaddrs() InterfacepolicyDstaddrArrayOutput {
	return o.ApplyT(func(v *Interfacepolicy) InterfacepolicyDstaddrArrayOutput { return v.Dstaddrs }).(InterfacepolicyDstaddrArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o InterfacepolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Email filter profile.
func (o InterfacepolicyOutput) EmailfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.EmailfilterProfile }).(pulumi.StringOutput)
}

// Enable/disable email filter. Valid values: `enable`, `disable`.
func (o InterfacepolicyOutput) EmailfilterProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.EmailfilterProfileStatus }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o InterfacepolicyOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Monitored interface name from available interfaces.
func (o InterfacepolicyOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// IPS sensor name.
func (o InterfacepolicyOutput) IpsSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.IpsSensor }).(pulumi.StringOutput)
}

// Enable/disable IPS. Valid values: `enable`, `disable`.
func (o InterfacepolicyOutput) IpsSensorStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.IpsSensorStatus }).(pulumi.StringOutput)
}

// Label.
func (o InterfacepolicyOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
func (o InterfacepolicyOutput) Logtraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.Logtraffic }).(pulumi.StringOutput)
}

// Policy ID.
func (o InterfacepolicyOutput) Policyid() pulumi.IntOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.IntOutput { return v.Policyid }).(pulumi.IntOutput)
}

// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
func (o InterfacepolicyOutput) ScanBotnetConnections() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.ScanBotnetConnections }).(pulumi.StringOutput)
}

// Service object from available options. The structure of `service` block is documented below.
func (o InterfacepolicyOutput) Services() InterfacepolicyServiceArrayOutput {
	return o.ApplyT(func(v *Interfacepolicy) InterfacepolicyServiceArrayOutput { return v.Services }).(InterfacepolicyServiceArrayOutput)
}

// Antispam profile.
func (o InterfacepolicyOutput) SpamfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.SpamfilterProfile }).(pulumi.StringOutput)
}

// Enable/disable antispam. Valid values: `enable`, `disable`.
func (o InterfacepolicyOutput) SpamfilterProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.SpamfilterProfileStatus }).(pulumi.StringOutput)
}

// Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
func (o InterfacepolicyOutput) Srcaddrs() InterfacepolicySrcaddrArrayOutput {
	return o.ApplyT(func(v *Interfacepolicy) InterfacepolicySrcaddrArrayOutput { return v.Srcaddrs }).(InterfacepolicySrcaddrArrayOutput)
}

// Enable/disable this policy. Valid values: `enable`, `disable`.
func (o InterfacepolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o InterfacepolicyOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o InterfacepolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Web filter profile.
func (o InterfacepolicyOutput) WebfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.WebfilterProfile }).(pulumi.StringOutput)
}

// Enable/disable web filtering. Valid values: `enable`, `disable`.
func (o InterfacepolicyOutput) WebfilterProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interfacepolicy) pulumi.StringOutput { return v.WebfilterProfileStatus }).(pulumi.StringOutput)
}

type InterfacepolicyArrayOutput struct{ *pulumi.OutputState }

func (InterfacepolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Interfacepolicy)(nil)).Elem()
}

func (o InterfacepolicyArrayOutput) ToInterfacepolicyArrayOutput() InterfacepolicyArrayOutput {
	return o
}

func (o InterfacepolicyArrayOutput) ToInterfacepolicyArrayOutputWithContext(ctx context.Context) InterfacepolicyArrayOutput {
	return o
}

func (o InterfacepolicyArrayOutput) Index(i pulumi.IntInput) InterfacepolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Interfacepolicy {
		return vs[0].([]*Interfacepolicy)[vs[1].(int)]
	}).(InterfacepolicyOutput)
}

type InterfacepolicyMapOutput struct{ *pulumi.OutputState }

func (InterfacepolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Interfacepolicy)(nil)).Elem()
}

func (o InterfacepolicyMapOutput) ToInterfacepolicyMapOutput() InterfacepolicyMapOutput {
	return o
}

func (o InterfacepolicyMapOutput) ToInterfacepolicyMapOutputWithContext(ctx context.Context) InterfacepolicyMapOutput {
	return o
}

func (o InterfacepolicyMapOutput) MapIndex(k pulumi.StringInput) InterfacepolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Interfacepolicy {
		return vs[0].(map[string]*Interfacepolicy)[vs[1].(string)]
	}).(InterfacepolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacepolicyInput)(nil)).Elem(), &Interfacepolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacepolicyArrayInput)(nil)).Elem(), InterfacepolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacepolicyMapInput)(nil)).Elem(), InterfacepolicyMap{})
	pulumi.RegisterOutputType(InterfacepolicyOutput{})
	pulumi.RegisterOutputType(InterfacepolicyArrayOutput{})
	pulumi.RegisterOutputType(InterfacepolicyMapOutput{})
}
