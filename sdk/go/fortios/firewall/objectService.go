// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Provides a resource to configure firewall service of FortiOS.
//
// !> **Warning:** The resource will be deprecated and replaced by new resource `firewall/service.Custom`, we recommend that you use the new resource.
//
// ## Example Usage
//
// ### Fqdn Service
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewObjectService(ctx, "v11", &firewall.ObjectServiceArgs{
//				Category: pulumi.String("General"),
//				Comment:  pulumi.String("comment"),
//				Fqdn:     pulumi.String("abc.com"),
//				Protocol: pulumi.String("TCP/UDP/SCTP"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Iprange Service
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewObjectService(ctx, "v13", &firewall.ObjectServiceArgs{
//				Category:      pulumi.String("General"),
//				Comment:       pulumi.String("comment"),
//				Iprange:       pulumi.String("1.1.1.1-2.2.2.2"),
//				Protocol:      pulumi.String("TCP/UDP/SCTP"),
//				SctpPortrange: pulumi.String("66-88"),
//				TcpPortrange:  pulumi.String("22-33"),
//				UdpPortrange:  pulumi.String("44-55"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### ICMP Service
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewObjectService(ctx, "iCMP", &firewall.ObjectServiceArgs{
//				Category:       pulumi.String("General"),
//				Comment:        pulumi.String("comment"),
//				Icmpcode:       pulumi.String("3"),
//				Icmptype:       pulumi.String("2"),
//				Protocol:       pulumi.String("ICMP"),
//				ProtocolNumber: pulumi.String("1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ObjectService struct {
	pulumi.CustomResourceState

	// Service category.
	Category pulumi.StringOutput `pulumi:"category"`
	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Fully qualified domain name.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// ICMP code.
	Icmpcode pulumi.StringOutput `pulumi:"icmpcode"`
	// ICMP type.
	Icmptype pulumi.StringOutput `pulumi:"icmptype"`
	// Start and end of the IP range associated with service.
	Iprange pulumi.StringOutput `pulumi:"iprange"`
	// Number of minutes before an idle administrator session time out.
	Name pulumi.StringOutput `pulumi:"name"`
	// Protocol type based on IANA numbers.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// IP protocol number.
	ProtocolNumber pulumi.StringOutput `pulumi:"protocolNumber"`
	// Multiple SCTP port ranges.
	SctpPortrange pulumi.StringOutput `pulumi:"sctpPortrange"`
	// Custom tcp session TTL.
	SessionTtl pulumi.StringOutput `pulumi:"sessionTtl"`
	// Multiple TCP port ranges.
	TcpPortrange pulumi.StringOutput `pulumi:"tcpPortrange"`
	// Multiple UDP port ranges.
	UdpPortrange pulumi.StringOutput `pulumi:"udpPortrange"`
}

// NewObjectService registers a new resource with the given unique name, arguments, and options.
func NewObjectService(ctx *pulumi.Context,
	name string, args *ObjectServiceArgs, opts ...pulumi.ResourceOption) (*ObjectService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Category == nil {
		return nil, errors.New("invalid value for required argument 'Category'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ObjectService
	err := ctx.RegisterResource("fortios:firewall/objectService:ObjectService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObjectService gets an existing ObjectService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObjectService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObjectServiceState, opts ...pulumi.ResourceOption) (*ObjectService, error) {
	var resource ObjectService
	err := ctx.ReadResource("fortios:firewall/objectService:ObjectService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObjectService resources.
type objectServiceState struct {
	// Service category.
	Category *string `pulumi:"category"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Fully qualified domain name.
	Fqdn *string `pulumi:"fqdn"`
	// ICMP code.
	Icmpcode *string `pulumi:"icmpcode"`
	// ICMP type.
	Icmptype *string `pulumi:"icmptype"`
	// Start and end of the IP range associated with service.
	Iprange *string `pulumi:"iprange"`
	// Number of minutes before an idle administrator session time out.
	Name *string `pulumi:"name"`
	// Protocol type based on IANA numbers.
	Protocol *string `pulumi:"protocol"`
	// IP protocol number.
	ProtocolNumber *string `pulumi:"protocolNumber"`
	// Multiple SCTP port ranges.
	SctpPortrange *string `pulumi:"sctpPortrange"`
	// Custom tcp session TTL.
	SessionTtl *string `pulumi:"sessionTtl"`
	// Multiple TCP port ranges.
	TcpPortrange *string `pulumi:"tcpPortrange"`
	// Multiple UDP port ranges.
	UdpPortrange *string `pulumi:"udpPortrange"`
}

type ObjectServiceState struct {
	// Service category.
	Category pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Fully qualified domain name.
	Fqdn pulumi.StringPtrInput
	// ICMP code.
	Icmpcode pulumi.StringPtrInput
	// ICMP type.
	Icmptype pulumi.StringPtrInput
	// Start and end of the IP range associated with service.
	Iprange pulumi.StringPtrInput
	// Number of minutes before an idle administrator session time out.
	Name pulumi.StringPtrInput
	// Protocol type based on IANA numbers.
	Protocol pulumi.StringPtrInput
	// IP protocol number.
	ProtocolNumber pulumi.StringPtrInput
	// Multiple SCTP port ranges.
	SctpPortrange pulumi.StringPtrInput
	// Custom tcp session TTL.
	SessionTtl pulumi.StringPtrInput
	// Multiple TCP port ranges.
	TcpPortrange pulumi.StringPtrInput
	// Multiple UDP port ranges.
	UdpPortrange pulumi.StringPtrInput
}

func (ObjectServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*objectServiceState)(nil)).Elem()
}

type objectServiceArgs struct {
	// Service category.
	Category string `pulumi:"category"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Fully qualified domain name.
	Fqdn *string `pulumi:"fqdn"`
	// ICMP code.
	Icmpcode *string `pulumi:"icmpcode"`
	// ICMP type.
	Icmptype *string `pulumi:"icmptype"`
	// Start and end of the IP range associated with service.
	Iprange *string `pulumi:"iprange"`
	// Number of minutes before an idle administrator session time out.
	Name *string `pulumi:"name"`
	// Protocol type based on IANA numbers.
	Protocol string `pulumi:"protocol"`
	// IP protocol number.
	ProtocolNumber *string `pulumi:"protocolNumber"`
	// Multiple SCTP port ranges.
	SctpPortrange *string `pulumi:"sctpPortrange"`
	// Custom tcp session TTL.
	SessionTtl *string `pulumi:"sessionTtl"`
	// Multiple TCP port ranges.
	TcpPortrange *string `pulumi:"tcpPortrange"`
	// Multiple UDP port ranges.
	UdpPortrange *string `pulumi:"udpPortrange"`
}

// The set of arguments for constructing a ObjectService resource.
type ObjectServiceArgs struct {
	// Service category.
	Category pulumi.StringInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Fully qualified domain name.
	Fqdn pulumi.StringPtrInput
	// ICMP code.
	Icmpcode pulumi.StringPtrInput
	// ICMP type.
	Icmptype pulumi.StringPtrInput
	// Start and end of the IP range associated with service.
	Iprange pulumi.StringPtrInput
	// Number of minutes before an idle administrator session time out.
	Name pulumi.StringPtrInput
	// Protocol type based on IANA numbers.
	Protocol pulumi.StringInput
	// IP protocol number.
	ProtocolNumber pulumi.StringPtrInput
	// Multiple SCTP port ranges.
	SctpPortrange pulumi.StringPtrInput
	// Custom tcp session TTL.
	SessionTtl pulumi.StringPtrInput
	// Multiple TCP port ranges.
	TcpPortrange pulumi.StringPtrInput
	// Multiple UDP port ranges.
	UdpPortrange pulumi.StringPtrInput
}

func (ObjectServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*objectServiceArgs)(nil)).Elem()
}

type ObjectServiceInput interface {
	pulumi.Input

	ToObjectServiceOutput() ObjectServiceOutput
	ToObjectServiceOutputWithContext(ctx context.Context) ObjectServiceOutput
}

func (*ObjectService) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectService)(nil)).Elem()
}

func (i *ObjectService) ToObjectServiceOutput() ObjectServiceOutput {
	return i.ToObjectServiceOutputWithContext(context.Background())
}

func (i *ObjectService) ToObjectServiceOutputWithContext(ctx context.Context) ObjectServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectServiceOutput)
}

// ObjectServiceArrayInput is an input type that accepts ObjectServiceArray and ObjectServiceArrayOutput values.
// You can construct a concrete instance of `ObjectServiceArrayInput` via:
//
//	ObjectServiceArray{ ObjectServiceArgs{...} }
type ObjectServiceArrayInput interface {
	pulumi.Input

	ToObjectServiceArrayOutput() ObjectServiceArrayOutput
	ToObjectServiceArrayOutputWithContext(context.Context) ObjectServiceArrayOutput
}

type ObjectServiceArray []ObjectServiceInput

func (ObjectServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectService)(nil)).Elem()
}

func (i ObjectServiceArray) ToObjectServiceArrayOutput() ObjectServiceArrayOutput {
	return i.ToObjectServiceArrayOutputWithContext(context.Background())
}

func (i ObjectServiceArray) ToObjectServiceArrayOutputWithContext(ctx context.Context) ObjectServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectServiceArrayOutput)
}

// ObjectServiceMapInput is an input type that accepts ObjectServiceMap and ObjectServiceMapOutput values.
// You can construct a concrete instance of `ObjectServiceMapInput` via:
//
//	ObjectServiceMap{ "key": ObjectServiceArgs{...} }
type ObjectServiceMapInput interface {
	pulumi.Input

	ToObjectServiceMapOutput() ObjectServiceMapOutput
	ToObjectServiceMapOutputWithContext(context.Context) ObjectServiceMapOutput
}

type ObjectServiceMap map[string]ObjectServiceInput

func (ObjectServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectService)(nil)).Elem()
}

func (i ObjectServiceMap) ToObjectServiceMapOutput() ObjectServiceMapOutput {
	return i.ToObjectServiceMapOutputWithContext(context.Background())
}

func (i ObjectServiceMap) ToObjectServiceMapOutputWithContext(ctx context.Context) ObjectServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectServiceMapOutput)
}

type ObjectServiceOutput struct{ *pulumi.OutputState }

func (ObjectServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectService)(nil)).Elem()
}

func (o ObjectServiceOutput) ToObjectServiceOutput() ObjectServiceOutput {
	return o
}

func (o ObjectServiceOutput) ToObjectServiceOutputWithContext(ctx context.Context) ObjectServiceOutput {
	return o
}

// Service category.
func (o ObjectServiceOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectService) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// Comment.
func (o ObjectServiceOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectService) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Fully qualified domain name.
func (o ObjectServiceOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectService) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// ICMP code.
func (o ObjectServiceOutput) Icmpcode() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectService) pulumi.StringOutput { return v.Icmpcode }).(pulumi.StringOutput)
}

// ICMP type.
func (o ObjectServiceOutput) Icmptype() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectService) pulumi.StringOutput { return v.Icmptype }).(pulumi.StringOutput)
}

// Start and end of the IP range associated with service.
func (o ObjectServiceOutput) Iprange() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectService) pulumi.StringOutput { return v.Iprange }).(pulumi.StringOutput)
}

// Number of minutes before an idle administrator session time out.
func (o ObjectServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Protocol type based on IANA numbers.
func (o ObjectServiceOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectService) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// IP protocol number.
func (o ObjectServiceOutput) ProtocolNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectService) pulumi.StringOutput { return v.ProtocolNumber }).(pulumi.StringOutput)
}

// Multiple SCTP port ranges.
func (o ObjectServiceOutput) SctpPortrange() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectService) pulumi.StringOutput { return v.SctpPortrange }).(pulumi.StringOutput)
}

// Custom tcp session TTL.
func (o ObjectServiceOutput) SessionTtl() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectService) pulumi.StringOutput { return v.SessionTtl }).(pulumi.StringOutput)
}

// Multiple TCP port ranges.
func (o ObjectServiceOutput) TcpPortrange() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectService) pulumi.StringOutput { return v.TcpPortrange }).(pulumi.StringOutput)
}

// Multiple UDP port ranges.
func (o ObjectServiceOutput) UdpPortrange() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectService) pulumi.StringOutput { return v.UdpPortrange }).(pulumi.StringOutput)
}

type ObjectServiceArrayOutput struct{ *pulumi.OutputState }

func (ObjectServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectService)(nil)).Elem()
}

func (o ObjectServiceArrayOutput) ToObjectServiceArrayOutput() ObjectServiceArrayOutput {
	return o
}

func (o ObjectServiceArrayOutput) ToObjectServiceArrayOutputWithContext(ctx context.Context) ObjectServiceArrayOutput {
	return o
}

func (o ObjectServiceArrayOutput) Index(i pulumi.IntInput) ObjectServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObjectService {
		return vs[0].([]*ObjectService)[vs[1].(int)]
	}).(ObjectServiceOutput)
}

type ObjectServiceMapOutput struct{ *pulumi.OutputState }

func (ObjectServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectService)(nil)).Elem()
}

func (o ObjectServiceMapOutput) ToObjectServiceMapOutput() ObjectServiceMapOutput {
	return o
}

func (o ObjectServiceMapOutput) ToObjectServiceMapOutputWithContext(ctx context.Context) ObjectServiceMapOutput {
	return o
}

func (o ObjectServiceMapOutput) MapIndex(k pulumi.StringInput) ObjectServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObjectService {
		return vs[0].(map[string]*ObjectService)[vs[1].(string)]
	}).(ObjectServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectServiceInput)(nil)).Elem(), &ObjectService{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectServiceArrayInput)(nil)).Elem(), ObjectServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectServiceMapInput)(nil)).Elem(), ObjectServiceMap{})
	pulumi.RegisterOutputType(ObjectServiceOutput{})
	pulumi.RegisterOutputType(ObjectServiceArrayOutput{})
	pulumi.RegisterOutputType(ObjectServiceMapOutput{})
}
