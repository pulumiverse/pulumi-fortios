// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure multicast NAT policies.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewMulticastpolicy(ctx, "trname", &firewall.MulticastpolicyArgs{
//				Action: pulumi.String("accept"),
//				Dnat:   pulumi.String("0.0.0.0"),
//				Dstaddrs: firewall.MulticastpolicyDstaddrArray{
//					&firewall.MulticastpolicyDstaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Dstintf:    pulumi.String("port4"),
//				EndPort:    pulumi.Int(65535),
//				Fosid:      pulumi.Int(1),
//				Logtraffic: pulumi.String("enable"),
//				Protocol:   pulumi.Int(0),
//				Snat:       pulumi.String("disable"),
//				SnatIp:     pulumi.String("0.0.0.0"),
//				Srcaddrs: firewall.MulticastpolicySrcaddrArray{
//					&firewall.MulticastpolicySrcaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Srcintf:   pulumi.String("port3"),
//				StartPort: pulumi.Int(1),
//				Status:    pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Firewall MulticastPolicy can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/multicastpolicy:Multicastpolicy labelname {{fosid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/multicastpolicy:Multicastpolicy labelname {{fosid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Multicastpolicy struct {
	pulumi.CustomResourceState

	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringOutput `pulumi:"autoAsicOffload"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// IPv4 DNAT address used for multicast destination addresses.
	Dnat pulumi.StringOutput `pulumi:"dnat"`
	// Destination address objects. The structure of `dstaddr` block is documented below.
	Dstaddrs MulticastpolicyDstaddrArrayOutput `pulumi:"dstaddrs"`
	// Destination interface name.
	Dstintf pulumi.StringOutput `pulumi:"dstintf"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	EndPort pulumi.IntOutput `pulumi:"endPort"`
	// Policy ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringOutput `pulumi:"ipsSensor"`
	// Enable/disable logging traffic accepted by this policy.
	Logtraffic pulumi.StringOutput `pulumi:"logtraffic"`
	// Policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
	Protocol pulumi.IntOutput `pulumi:"protocol"`
	// Enable/disable substitution of the outgoing interface IP address for the original source IP address (called source NAT or SNAT). Valid values: `enable`, `disable`.
	Snat pulumi.StringOutput `pulumi:"snat"`
	// IPv4 address to be used as the source address for NATed traffic.
	SnatIp pulumi.StringOutput `pulumi:"snatIp"`
	// Source address objects. The structure of `srcaddr` block is documented below.
	Srcaddrs MulticastpolicySrcaddrArrayOutput `pulumi:"srcaddrs"`
	// Source interface name.
	Srcintf pulumi.StringOutput `pulumi:"srcintf"`
	// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	StartPort pulumi.IntOutput `pulumi:"startPort"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Traffic shaper to apply to traffic forwarded by the multicast policy.
	TrafficShaper pulumi.StringOutput `pulumi:"trafficShaper"`
	// Enable to add an IPS security profile to the policy. Valid values: `enable`, `disable`.
	UtmStatus pulumi.StringOutput `pulumi:"utmStatus"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewMulticastpolicy registers a new resource with the given unique name, arguments, and options.
func NewMulticastpolicy(ctx *pulumi.Context,
	name string, args *MulticastpolicyArgs, opts ...pulumi.ResourceOption) (*Multicastpolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dstaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Dstaddrs'")
	}
	if args.Dstintf == nil {
		return nil, errors.New("invalid value for required argument 'Dstintf'")
	}
	if args.Srcaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Srcaddrs'")
	}
	if args.Srcintf == nil {
		return nil, errors.New("invalid value for required argument 'Srcintf'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Multicastpolicy
	err := ctx.RegisterResource("fortios:firewall/multicastpolicy:Multicastpolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMulticastpolicy gets an existing Multicastpolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMulticastpolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MulticastpolicyState, opts ...pulumi.ResourceOption) (*Multicastpolicy, error) {
	var resource Multicastpolicy
	err := ctx.ReadResource("fortios:firewall/multicastpolicy:Multicastpolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Multicastpolicy resources.
type multicastpolicyState struct {
	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// IPv4 DNAT address used for multicast destination addresses.
	Dnat *string `pulumi:"dnat"`
	// Destination address objects. The structure of `dstaddr` block is documented below.
	Dstaddrs []MulticastpolicyDstaddr `pulumi:"dstaddrs"`
	// Destination interface name.
	Dstintf *string `pulumi:"dstintf"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	EndPort *int `pulumi:"endPort"`
	// Policy ID.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable/disable logging traffic accepted by this policy.
	Logtraffic *string `pulumi:"logtraffic"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
	Protocol *int `pulumi:"protocol"`
	// Enable/disable substitution of the outgoing interface IP address for the original source IP address (called source NAT or SNAT). Valid values: `enable`, `disable`.
	Snat *string `pulumi:"snat"`
	// IPv4 address to be used as the source address for NATed traffic.
	SnatIp *string `pulumi:"snatIp"`
	// Source address objects. The structure of `srcaddr` block is documented below.
	Srcaddrs []MulticastpolicySrcaddr `pulumi:"srcaddrs"`
	// Source interface name.
	Srcintf *string `pulumi:"srcintf"`
	// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	StartPort *int `pulumi:"startPort"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Traffic shaper to apply to traffic forwarded by the multicast policy.
	TrafficShaper *string `pulumi:"trafficShaper"`
	// Enable to add an IPS security profile to the policy. Valid values: `enable`, `disable`.
	UtmStatus *string `pulumi:"utmStatus"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type MulticastpolicyState struct {
	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// IPv4 DNAT address used for multicast destination addresses.
	Dnat pulumi.StringPtrInput
	// Destination address objects. The structure of `dstaddr` block is documented below.
	Dstaddrs MulticastpolicyDstaddrArrayInput
	// Destination interface name.
	Dstintf pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	EndPort pulumi.IntPtrInput
	// Policy ID.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Enable/disable logging traffic accepted by this policy.
	Logtraffic pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
	Protocol pulumi.IntPtrInput
	// Enable/disable substitution of the outgoing interface IP address for the original source IP address (called source NAT or SNAT). Valid values: `enable`, `disable`.
	Snat pulumi.StringPtrInput
	// IPv4 address to be used as the source address for NATed traffic.
	SnatIp pulumi.StringPtrInput
	// Source address objects. The structure of `srcaddr` block is documented below.
	Srcaddrs MulticastpolicySrcaddrArrayInput
	// Source interface name.
	Srcintf pulumi.StringPtrInput
	// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	StartPort pulumi.IntPtrInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Traffic shaper to apply to traffic forwarded by the multicast policy.
	TrafficShaper pulumi.StringPtrInput
	// Enable to add an IPS security profile to the policy. Valid values: `enable`, `disable`.
	UtmStatus pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (MulticastpolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*multicastpolicyState)(nil)).Elem()
}

type multicastpolicyArgs struct {
	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// IPv4 DNAT address used for multicast destination addresses.
	Dnat *string `pulumi:"dnat"`
	// Destination address objects. The structure of `dstaddr` block is documented below.
	Dstaddrs []MulticastpolicyDstaddr `pulumi:"dstaddrs"`
	// Destination interface name.
	Dstintf string `pulumi:"dstintf"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	EndPort *int `pulumi:"endPort"`
	// Policy ID.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable/disable logging traffic accepted by this policy.
	Logtraffic *string `pulumi:"logtraffic"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
	Protocol *int `pulumi:"protocol"`
	// Enable/disable substitution of the outgoing interface IP address for the original source IP address (called source NAT or SNAT). Valid values: `enable`, `disable`.
	Snat *string `pulumi:"snat"`
	// IPv4 address to be used as the source address for NATed traffic.
	SnatIp *string `pulumi:"snatIp"`
	// Source address objects. The structure of `srcaddr` block is documented below.
	Srcaddrs []MulticastpolicySrcaddr `pulumi:"srcaddrs"`
	// Source interface name.
	Srcintf string `pulumi:"srcintf"`
	// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	StartPort *int `pulumi:"startPort"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Traffic shaper to apply to traffic forwarded by the multicast policy.
	TrafficShaper *string `pulumi:"trafficShaper"`
	// Enable to add an IPS security profile to the policy. Valid values: `enable`, `disable`.
	UtmStatus *string `pulumi:"utmStatus"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Multicastpolicy resource.
type MulticastpolicyArgs struct {
	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// IPv4 DNAT address used for multicast destination addresses.
	Dnat pulumi.StringPtrInput
	// Destination address objects. The structure of `dstaddr` block is documented below.
	Dstaddrs MulticastpolicyDstaddrArrayInput
	// Destination interface name.
	Dstintf pulumi.StringInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	EndPort pulumi.IntPtrInput
	// Policy ID.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Enable/disable logging traffic accepted by this policy.
	Logtraffic pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
	Protocol pulumi.IntPtrInput
	// Enable/disable substitution of the outgoing interface IP address for the original source IP address (called source NAT or SNAT). Valid values: `enable`, `disable`.
	Snat pulumi.StringPtrInput
	// IPv4 address to be used as the source address for NATed traffic.
	SnatIp pulumi.StringPtrInput
	// Source address objects. The structure of `srcaddr` block is documented below.
	Srcaddrs MulticastpolicySrcaddrArrayInput
	// Source interface name.
	Srcintf pulumi.StringInput
	// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	StartPort pulumi.IntPtrInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Traffic shaper to apply to traffic forwarded by the multicast policy.
	TrafficShaper pulumi.StringPtrInput
	// Enable to add an IPS security profile to the policy. Valid values: `enable`, `disable`.
	UtmStatus pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (MulticastpolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multicastpolicyArgs)(nil)).Elem()
}

type MulticastpolicyInput interface {
	pulumi.Input

	ToMulticastpolicyOutput() MulticastpolicyOutput
	ToMulticastpolicyOutputWithContext(ctx context.Context) MulticastpolicyOutput
}

func (*Multicastpolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**Multicastpolicy)(nil)).Elem()
}

func (i *Multicastpolicy) ToMulticastpolicyOutput() MulticastpolicyOutput {
	return i.ToMulticastpolicyOutputWithContext(context.Background())
}

func (i *Multicastpolicy) ToMulticastpolicyOutputWithContext(ctx context.Context) MulticastpolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MulticastpolicyOutput)
}

// MulticastpolicyArrayInput is an input type that accepts MulticastpolicyArray and MulticastpolicyArrayOutput values.
// You can construct a concrete instance of `MulticastpolicyArrayInput` via:
//
//	MulticastpolicyArray{ MulticastpolicyArgs{...} }
type MulticastpolicyArrayInput interface {
	pulumi.Input

	ToMulticastpolicyArrayOutput() MulticastpolicyArrayOutput
	ToMulticastpolicyArrayOutputWithContext(context.Context) MulticastpolicyArrayOutput
}

type MulticastpolicyArray []MulticastpolicyInput

func (MulticastpolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Multicastpolicy)(nil)).Elem()
}

func (i MulticastpolicyArray) ToMulticastpolicyArrayOutput() MulticastpolicyArrayOutput {
	return i.ToMulticastpolicyArrayOutputWithContext(context.Background())
}

func (i MulticastpolicyArray) ToMulticastpolicyArrayOutputWithContext(ctx context.Context) MulticastpolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MulticastpolicyArrayOutput)
}

// MulticastpolicyMapInput is an input type that accepts MulticastpolicyMap and MulticastpolicyMapOutput values.
// You can construct a concrete instance of `MulticastpolicyMapInput` via:
//
//	MulticastpolicyMap{ "key": MulticastpolicyArgs{...} }
type MulticastpolicyMapInput interface {
	pulumi.Input

	ToMulticastpolicyMapOutput() MulticastpolicyMapOutput
	ToMulticastpolicyMapOutputWithContext(context.Context) MulticastpolicyMapOutput
}

type MulticastpolicyMap map[string]MulticastpolicyInput

func (MulticastpolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Multicastpolicy)(nil)).Elem()
}

func (i MulticastpolicyMap) ToMulticastpolicyMapOutput() MulticastpolicyMapOutput {
	return i.ToMulticastpolicyMapOutputWithContext(context.Background())
}

func (i MulticastpolicyMap) ToMulticastpolicyMapOutputWithContext(ctx context.Context) MulticastpolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MulticastpolicyMapOutput)
}

type MulticastpolicyOutput struct{ *pulumi.OutputState }

func (MulticastpolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Multicastpolicy)(nil)).Elem()
}

func (o MulticastpolicyOutput) ToMulticastpolicyOutput() MulticastpolicyOutput {
	return o
}

func (o MulticastpolicyOutput) ToMulticastpolicyOutputWithContext(ctx context.Context) MulticastpolicyOutput {
	return o
}

// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
func (o MulticastpolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
func (o MulticastpolicyOutput) AutoAsicOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringOutput { return v.AutoAsicOffload }).(pulumi.StringOutput)
}

// Comment.
func (o MulticastpolicyOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// IPv4 DNAT address used for multicast destination addresses.
func (o MulticastpolicyOutput) Dnat() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringOutput { return v.Dnat }).(pulumi.StringOutput)
}

// Destination address objects. The structure of `dstaddr` block is documented below.
func (o MulticastpolicyOutput) Dstaddrs() MulticastpolicyDstaddrArrayOutput {
	return o.ApplyT(func(v *Multicastpolicy) MulticastpolicyDstaddrArrayOutput { return v.Dstaddrs }).(MulticastpolicyDstaddrArrayOutput)
}

// Destination interface name.
func (o MulticastpolicyOutput) Dstintf() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringOutput { return v.Dstintf }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o MulticastpolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
func (o MulticastpolicyOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.IntOutput { return v.EndPort }).(pulumi.IntOutput)
}

// Policy ID.
func (o MulticastpolicyOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o MulticastpolicyOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Name of an existing IPS sensor.
func (o MulticastpolicyOutput) IpsSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringOutput { return v.IpsSensor }).(pulumi.StringOutput)
}

// Enable/disable logging traffic accepted by this policy.
func (o MulticastpolicyOutput) Logtraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringOutput { return v.Logtraffic }).(pulumi.StringOutput)
}

// Policy name.
func (o MulticastpolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
func (o MulticastpolicyOutput) Protocol() pulumi.IntOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.IntOutput { return v.Protocol }).(pulumi.IntOutput)
}

// Enable/disable substitution of the outgoing interface IP address for the original source IP address (called source NAT or SNAT). Valid values: `enable`, `disable`.
func (o MulticastpolicyOutput) Snat() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringOutput { return v.Snat }).(pulumi.StringOutput)
}

// IPv4 address to be used as the source address for NATed traffic.
func (o MulticastpolicyOutput) SnatIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringOutput { return v.SnatIp }).(pulumi.StringOutput)
}

// Source address objects. The structure of `srcaddr` block is documented below.
func (o MulticastpolicyOutput) Srcaddrs() MulticastpolicySrcaddrArrayOutput {
	return o.ApplyT(func(v *Multicastpolicy) MulticastpolicySrcaddrArrayOutput { return v.Srcaddrs }).(MulticastpolicySrcaddrArrayOutput)
}

// Source interface name.
func (o MulticastpolicyOutput) Srcintf() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringOutput { return v.Srcintf }).(pulumi.StringOutput)
}

// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
func (o MulticastpolicyOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.IntOutput { return v.StartPort }).(pulumi.IntOutput)
}

// Enable/disable this policy. Valid values: `enable`, `disable`.
func (o MulticastpolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Traffic shaper to apply to traffic forwarded by the multicast policy.
func (o MulticastpolicyOutput) TrafficShaper() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringOutput { return v.TrafficShaper }).(pulumi.StringOutput)
}

// Enable to add an IPS security profile to the policy. Valid values: `enable`, `disable`.
func (o MulticastpolicyOutput) UtmStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringOutput { return v.UtmStatus }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o MulticastpolicyOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o MulticastpolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Multicastpolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type MulticastpolicyArrayOutput struct{ *pulumi.OutputState }

func (MulticastpolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Multicastpolicy)(nil)).Elem()
}

func (o MulticastpolicyArrayOutput) ToMulticastpolicyArrayOutput() MulticastpolicyArrayOutput {
	return o
}

func (o MulticastpolicyArrayOutput) ToMulticastpolicyArrayOutputWithContext(ctx context.Context) MulticastpolicyArrayOutput {
	return o
}

func (o MulticastpolicyArrayOutput) Index(i pulumi.IntInput) MulticastpolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Multicastpolicy {
		return vs[0].([]*Multicastpolicy)[vs[1].(int)]
	}).(MulticastpolicyOutput)
}

type MulticastpolicyMapOutput struct{ *pulumi.OutputState }

func (MulticastpolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Multicastpolicy)(nil)).Elem()
}

func (o MulticastpolicyMapOutput) ToMulticastpolicyMapOutput() MulticastpolicyMapOutput {
	return o
}

func (o MulticastpolicyMapOutput) ToMulticastpolicyMapOutputWithContext(ctx context.Context) MulticastpolicyMapOutput {
	return o
}

func (o MulticastpolicyMapOutput) MapIndex(k pulumi.StringInput) MulticastpolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Multicastpolicy {
		return vs[0].(map[string]*Multicastpolicy)[vs[1].(string)]
	}).(MulticastpolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MulticastpolicyInput)(nil)).Elem(), &Multicastpolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*MulticastpolicyArrayInput)(nil)).Elem(), MulticastpolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MulticastpolicyMapInput)(nil)).Elem(), MulticastpolicyMap{})
	pulumi.RegisterOutputType(MulticastpolicyOutput{})
	pulumi.RegisterOutputType(MulticastpolicyArrayOutput{})
	pulumi.RegisterOutputType(MulticastpolicyMapOutput{})
}
