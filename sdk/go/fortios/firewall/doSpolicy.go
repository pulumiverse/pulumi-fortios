// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure IPv4 DoS policies.
//
// ## Import
//
// Firewall DosPolicy can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/doSpolicy:DoSpolicy labelname {{policyid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/doSpolicy:DoSpolicy labelname {{policyid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type DoSpolicy struct {
	pulumi.CustomResourceState

	// Anomaly name. The structure of `anomaly` block is documented below.
	Anomalies DoSpolicyAnomalyArrayOutput `pulumi:"anomalies"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Destination address name from available addresses. The structure of `dstaddr` block is documented below.
	Dstaddrs DoSpolicyDstaddrArrayOutput `pulumi:"dstaddrs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Incoming interface name from available interfaces.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Policy ID.
	Policyid pulumi.IntOutput `pulumi:"policyid"`
	// Service object from available options. The structure of `service` block is documented below.
	Services DoSpolicyServiceArrayOutput `pulumi:"services"`
	// Source address name from available addresses. The structure of `srcaddr` block is documented below.
	Srcaddrs DoSpolicySrcaddrArrayOutput `pulumi:"srcaddrs"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewDoSpolicy registers a new resource with the given unique name, arguments, and options.
func NewDoSpolicy(ctx *pulumi.Context,
	name string, args *DoSpolicyArgs, opts ...pulumi.ResourceOption) (*DoSpolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dstaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Dstaddrs'")
	}
	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Srcaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Srcaddrs'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DoSpolicy
	err := ctx.RegisterResource("fortios:firewall/doSpolicy:DoSpolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDoSpolicy gets an existing DoSpolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDoSpolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DoSpolicyState, opts ...pulumi.ResourceOption) (*DoSpolicy, error) {
	var resource DoSpolicy
	err := ctx.ReadResource("fortios:firewall/doSpolicy:DoSpolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DoSpolicy resources.
type doSpolicyState struct {
	// Anomaly name. The structure of `anomaly` block is documented below.
	Anomalies []DoSpolicyAnomaly `pulumi:"anomalies"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Destination address name from available addresses. The structure of `dstaddr` block is documented below.
	Dstaddrs []DoSpolicyDstaddr `pulumi:"dstaddrs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Incoming interface name from available interfaces.
	Interface *string `pulumi:"interface"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// Service object from available options. The structure of `service` block is documented below.
	Services []DoSpolicyService `pulumi:"services"`
	// Source address name from available addresses. The structure of `srcaddr` block is documented below.
	Srcaddrs []DoSpolicySrcaddr `pulumi:"srcaddrs"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type DoSpolicyState struct {
	// Anomaly name. The structure of `anomaly` block is documented below.
	Anomalies DoSpolicyAnomalyArrayInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Destination address name from available addresses. The structure of `dstaddr` block is documented below.
	Dstaddrs DoSpolicyDstaddrArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Incoming interface name from available interfaces.
	Interface pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// Service object from available options. The structure of `service` block is documented below.
	Services DoSpolicyServiceArrayInput
	// Source address name from available addresses. The structure of `srcaddr` block is documented below.
	Srcaddrs DoSpolicySrcaddrArrayInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (DoSpolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*doSpolicyState)(nil)).Elem()
}

type doSpolicyArgs struct {
	// Anomaly name. The structure of `anomaly` block is documented below.
	Anomalies []DoSpolicyAnomaly `pulumi:"anomalies"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Destination address name from available addresses. The structure of `dstaddr` block is documented below.
	Dstaddrs []DoSpolicyDstaddr `pulumi:"dstaddrs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Incoming interface name from available interfaces.
	Interface string `pulumi:"interface"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// Service object from available options. The structure of `service` block is documented below.
	Services []DoSpolicyService `pulumi:"services"`
	// Source address name from available addresses. The structure of `srcaddr` block is documented below.
	Srcaddrs []DoSpolicySrcaddr `pulumi:"srcaddrs"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a DoSpolicy resource.
type DoSpolicyArgs struct {
	// Anomaly name. The structure of `anomaly` block is documented below.
	Anomalies DoSpolicyAnomalyArrayInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Destination address name from available addresses. The structure of `dstaddr` block is documented below.
	Dstaddrs DoSpolicyDstaddrArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Incoming interface name from available interfaces.
	Interface pulumi.StringInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// Service object from available options. The structure of `service` block is documented below.
	Services DoSpolicyServiceArrayInput
	// Source address name from available addresses. The structure of `srcaddr` block is documented below.
	Srcaddrs DoSpolicySrcaddrArrayInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (DoSpolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*doSpolicyArgs)(nil)).Elem()
}

type DoSpolicyInput interface {
	pulumi.Input

	ToDoSpolicyOutput() DoSpolicyOutput
	ToDoSpolicyOutputWithContext(ctx context.Context) DoSpolicyOutput
}

func (*DoSpolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**DoSpolicy)(nil)).Elem()
}

func (i *DoSpolicy) ToDoSpolicyOutput() DoSpolicyOutput {
	return i.ToDoSpolicyOutputWithContext(context.Background())
}

func (i *DoSpolicy) ToDoSpolicyOutputWithContext(ctx context.Context) DoSpolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DoSpolicyOutput)
}

// DoSpolicyArrayInput is an input type that accepts DoSpolicyArray and DoSpolicyArrayOutput values.
// You can construct a concrete instance of `DoSpolicyArrayInput` via:
//
//	DoSpolicyArray{ DoSpolicyArgs{...} }
type DoSpolicyArrayInput interface {
	pulumi.Input

	ToDoSpolicyArrayOutput() DoSpolicyArrayOutput
	ToDoSpolicyArrayOutputWithContext(context.Context) DoSpolicyArrayOutput
}

type DoSpolicyArray []DoSpolicyInput

func (DoSpolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DoSpolicy)(nil)).Elem()
}

func (i DoSpolicyArray) ToDoSpolicyArrayOutput() DoSpolicyArrayOutput {
	return i.ToDoSpolicyArrayOutputWithContext(context.Background())
}

func (i DoSpolicyArray) ToDoSpolicyArrayOutputWithContext(ctx context.Context) DoSpolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DoSpolicyArrayOutput)
}

// DoSpolicyMapInput is an input type that accepts DoSpolicyMap and DoSpolicyMapOutput values.
// You can construct a concrete instance of `DoSpolicyMapInput` via:
//
//	DoSpolicyMap{ "key": DoSpolicyArgs{...} }
type DoSpolicyMapInput interface {
	pulumi.Input

	ToDoSpolicyMapOutput() DoSpolicyMapOutput
	ToDoSpolicyMapOutputWithContext(context.Context) DoSpolicyMapOutput
}

type DoSpolicyMap map[string]DoSpolicyInput

func (DoSpolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DoSpolicy)(nil)).Elem()
}

func (i DoSpolicyMap) ToDoSpolicyMapOutput() DoSpolicyMapOutput {
	return i.ToDoSpolicyMapOutputWithContext(context.Background())
}

func (i DoSpolicyMap) ToDoSpolicyMapOutputWithContext(ctx context.Context) DoSpolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DoSpolicyMapOutput)
}

type DoSpolicyOutput struct{ *pulumi.OutputState }

func (DoSpolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DoSpolicy)(nil)).Elem()
}

func (o DoSpolicyOutput) ToDoSpolicyOutput() DoSpolicyOutput {
	return o
}

func (o DoSpolicyOutput) ToDoSpolicyOutputWithContext(ctx context.Context) DoSpolicyOutput {
	return o
}

// Anomaly name. The structure of `anomaly` block is documented below.
func (o DoSpolicyOutput) Anomalies() DoSpolicyAnomalyArrayOutput {
	return o.ApplyT(func(v *DoSpolicy) DoSpolicyAnomalyArrayOutput { return v.Anomalies }).(DoSpolicyAnomalyArrayOutput)
}

// Comment.
func (o DoSpolicyOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DoSpolicy) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Destination address name from available addresses. The structure of `dstaddr` block is documented below.
func (o DoSpolicyOutput) Dstaddrs() DoSpolicyDstaddrArrayOutput {
	return o.ApplyT(func(v *DoSpolicy) DoSpolicyDstaddrArrayOutput { return v.Dstaddrs }).(DoSpolicyDstaddrArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o DoSpolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DoSpolicy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o DoSpolicyOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DoSpolicy) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Incoming interface name from available interfaces.
func (o DoSpolicyOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *DoSpolicy) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Policy name.
func (o DoSpolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DoSpolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Policy ID.
func (o DoSpolicyOutput) Policyid() pulumi.IntOutput {
	return o.ApplyT(func(v *DoSpolicy) pulumi.IntOutput { return v.Policyid }).(pulumi.IntOutput)
}

// Service object from available options. The structure of `service` block is documented below.
func (o DoSpolicyOutput) Services() DoSpolicyServiceArrayOutput {
	return o.ApplyT(func(v *DoSpolicy) DoSpolicyServiceArrayOutput { return v.Services }).(DoSpolicyServiceArrayOutput)
}

// Source address name from available addresses. The structure of `srcaddr` block is documented below.
func (o DoSpolicyOutput) Srcaddrs() DoSpolicySrcaddrArrayOutput {
	return o.ApplyT(func(v *DoSpolicy) DoSpolicySrcaddrArrayOutput { return v.Srcaddrs }).(DoSpolicySrcaddrArrayOutput)
}

// Enable/disable this policy. Valid values: `enable`, `disable`.
func (o DoSpolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DoSpolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o DoSpolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DoSpolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type DoSpolicyArrayOutput struct{ *pulumi.OutputState }

func (DoSpolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DoSpolicy)(nil)).Elem()
}

func (o DoSpolicyArrayOutput) ToDoSpolicyArrayOutput() DoSpolicyArrayOutput {
	return o
}

func (o DoSpolicyArrayOutput) ToDoSpolicyArrayOutputWithContext(ctx context.Context) DoSpolicyArrayOutput {
	return o
}

func (o DoSpolicyArrayOutput) Index(i pulumi.IntInput) DoSpolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DoSpolicy {
		return vs[0].([]*DoSpolicy)[vs[1].(int)]
	}).(DoSpolicyOutput)
}

type DoSpolicyMapOutput struct{ *pulumi.OutputState }

func (DoSpolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DoSpolicy)(nil)).Elem()
}

func (o DoSpolicyMapOutput) ToDoSpolicyMapOutput() DoSpolicyMapOutput {
	return o
}

func (o DoSpolicyMapOutput) ToDoSpolicyMapOutputWithContext(ctx context.Context) DoSpolicyMapOutput {
	return o
}

func (o DoSpolicyMapOutput) MapIndex(k pulumi.StringInput) DoSpolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DoSpolicy {
		return vs[0].(map[string]*DoSpolicy)[vs[1].(string)]
	}).(DoSpolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DoSpolicyInput)(nil)).Elem(), &DoSpolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*DoSpolicyArrayInput)(nil)).Elem(), DoSpolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DoSpolicyMapInput)(nil)).Elem(), DoSpolicyMap{})
	pulumi.RegisterOutputType(DoSpolicyOutput{})
	pulumi.RegisterOutputType(DoSpolicyArrayOutput{})
	pulumi.RegisterOutputType(DoSpolicyMapOutput{})
}
