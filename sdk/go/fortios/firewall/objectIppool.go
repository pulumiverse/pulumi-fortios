// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Provides a resource to configure IPv4 IP address pools of FortiOS.
//
// !> **Warning:** The resource will be deprecated and replaced by new resource `firewall.Ippool`, we recommend that you use the new resource.
//
// ## Example Usage
//
// ### Overload Ippool
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewObjectIppool(ctx, "s1", &firewall.ObjectIppoolArgs{
//				ArpReply: pulumi.String("enable"),
//				Comments: pulumi.String("fdsaf"),
//				Endip:    pulumi.String("22.0.0.0"),
//				Startip:  pulumi.String("11.0.0.0"),
//				Type:     pulumi.String("overload"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### One-To-One Ippool
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewObjectIppool(ctx, "s2", &firewall.ObjectIppoolArgs{
//				ArpReply: pulumi.String("enable"),
//				Comments: pulumi.String("fdsaf"),
//				Endip:    pulumi.String("222.0.0.0"),
//				Startip:  pulumi.String("121.0.0.0"),
//				Type:     pulumi.String("one-to-one"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ObjectIppool struct {
	pulumi.CustomResourceState

	// Enable/disable replying to ARP requests when an IP Pool is added to a policy.
	ArpReply pulumi.StringOutput `pulumi:"arpReply"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Final IPv4 address (inclusive) in the range for the address pool (format xxx.xxx.xxx.xxx).
	Endip pulumi.StringOutput `pulumi:"endip"`
	// IP pool name.
	Name pulumi.StringOutput `pulumi:"name"`
	// First IPv4 address (inclusive) in the range for the address pool (format xxx.xxx.xxx.xxx).
	Startip pulumi.StringOutput `pulumi:"startip"`
	// IP pool type(Support overload and one-to-one).
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewObjectIppool registers a new resource with the given unique name, arguments, and options.
func NewObjectIppool(ctx *pulumi.Context,
	name string, args *ObjectIppoolArgs, opts ...pulumi.ResourceOption) (*ObjectIppool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Endip == nil {
		return nil, errors.New("invalid value for required argument 'Endip'")
	}
	if args.Startip == nil {
		return nil, errors.New("invalid value for required argument 'Startip'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ObjectIppool
	err := ctx.RegisterResource("fortios:firewall/objectIppool:ObjectIppool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObjectIppool gets an existing ObjectIppool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObjectIppool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObjectIppoolState, opts ...pulumi.ResourceOption) (*ObjectIppool, error) {
	var resource ObjectIppool
	err := ctx.ReadResource("fortios:firewall/objectIppool:ObjectIppool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObjectIppool resources.
type objectIppoolState struct {
	// Enable/disable replying to ARP requests when an IP Pool is added to a policy.
	ArpReply *string `pulumi:"arpReply"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Final IPv4 address (inclusive) in the range for the address pool (format xxx.xxx.xxx.xxx).
	Endip *string `pulumi:"endip"`
	// IP pool name.
	Name *string `pulumi:"name"`
	// First IPv4 address (inclusive) in the range for the address pool (format xxx.xxx.xxx.xxx).
	Startip *string `pulumi:"startip"`
	// IP pool type(Support overload and one-to-one).
	Type *string `pulumi:"type"`
}

type ObjectIppoolState struct {
	// Enable/disable replying to ARP requests when an IP Pool is added to a policy.
	ArpReply pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Final IPv4 address (inclusive) in the range for the address pool (format xxx.xxx.xxx.xxx).
	Endip pulumi.StringPtrInput
	// IP pool name.
	Name pulumi.StringPtrInput
	// First IPv4 address (inclusive) in the range for the address pool (format xxx.xxx.xxx.xxx).
	Startip pulumi.StringPtrInput
	// IP pool type(Support overload and one-to-one).
	Type pulumi.StringPtrInput
}

func (ObjectIppoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*objectIppoolState)(nil)).Elem()
}

type objectIppoolArgs struct {
	// Enable/disable replying to ARP requests when an IP Pool is added to a policy.
	ArpReply *string `pulumi:"arpReply"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Final IPv4 address (inclusive) in the range for the address pool (format xxx.xxx.xxx.xxx).
	Endip string `pulumi:"endip"`
	// IP pool name.
	Name *string `pulumi:"name"`
	// First IPv4 address (inclusive) in the range for the address pool (format xxx.xxx.xxx.xxx).
	Startip string `pulumi:"startip"`
	// IP pool type(Support overload and one-to-one).
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ObjectIppool resource.
type ObjectIppoolArgs struct {
	// Enable/disable replying to ARP requests when an IP Pool is added to a policy.
	ArpReply pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Final IPv4 address (inclusive) in the range for the address pool (format xxx.xxx.xxx.xxx).
	Endip pulumi.StringInput
	// IP pool name.
	Name pulumi.StringPtrInput
	// First IPv4 address (inclusive) in the range for the address pool (format xxx.xxx.xxx.xxx).
	Startip pulumi.StringInput
	// IP pool type(Support overload and one-to-one).
	Type pulumi.StringInput
}

func (ObjectIppoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*objectIppoolArgs)(nil)).Elem()
}

type ObjectIppoolInput interface {
	pulumi.Input

	ToObjectIppoolOutput() ObjectIppoolOutput
	ToObjectIppoolOutputWithContext(ctx context.Context) ObjectIppoolOutput
}

func (*ObjectIppool) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectIppool)(nil)).Elem()
}

func (i *ObjectIppool) ToObjectIppoolOutput() ObjectIppoolOutput {
	return i.ToObjectIppoolOutputWithContext(context.Background())
}

func (i *ObjectIppool) ToObjectIppoolOutputWithContext(ctx context.Context) ObjectIppoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectIppoolOutput)
}

// ObjectIppoolArrayInput is an input type that accepts ObjectIppoolArray and ObjectIppoolArrayOutput values.
// You can construct a concrete instance of `ObjectIppoolArrayInput` via:
//
//	ObjectIppoolArray{ ObjectIppoolArgs{...} }
type ObjectIppoolArrayInput interface {
	pulumi.Input

	ToObjectIppoolArrayOutput() ObjectIppoolArrayOutput
	ToObjectIppoolArrayOutputWithContext(context.Context) ObjectIppoolArrayOutput
}

type ObjectIppoolArray []ObjectIppoolInput

func (ObjectIppoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectIppool)(nil)).Elem()
}

func (i ObjectIppoolArray) ToObjectIppoolArrayOutput() ObjectIppoolArrayOutput {
	return i.ToObjectIppoolArrayOutputWithContext(context.Background())
}

func (i ObjectIppoolArray) ToObjectIppoolArrayOutputWithContext(ctx context.Context) ObjectIppoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectIppoolArrayOutput)
}

// ObjectIppoolMapInput is an input type that accepts ObjectIppoolMap and ObjectIppoolMapOutput values.
// You can construct a concrete instance of `ObjectIppoolMapInput` via:
//
//	ObjectIppoolMap{ "key": ObjectIppoolArgs{...} }
type ObjectIppoolMapInput interface {
	pulumi.Input

	ToObjectIppoolMapOutput() ObjectIppoolMapOutput
	ToObjectIppoolMapOutputWithContext(context.Context) ObjectIppoolMapOutput
}

type ObjectIppoolMap map[string]ObjectIppoolInput

func (ObjectIppoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectIppool)(nil)).Elem()
}

func (i ObjectIppoolMap) ToObjectIppoolMapOutput() ObjectIppoolMapOutput {
	return i.ToObjectIppoolMapOutputWithContext(context.Background())
}

func (i ObjectIppoolMap) ToObjectIppoolMapOutputWithContext(ctx context.Context) ObjectIppoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectIppoolMapOutput)
}

type ObjectIppoolOutput struct{ *pulumi.OutputState }

func (ObjectIppoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectIppool)(nil)).Elem()
}

func (o ObjectIppoolOutput) ToObjectIppoolOutput() ObjectIppoolOutput {
	return o
}

func (o ObjectIppoolOutput) ToObjectIppoolOutputWithContext(ctx context.Context) ObjectIppoolOutput {
	return o
}

// Enable/disable replying to ARP requests when an IP Pool is added to a policy.
func (o ObjectIppoolOutput) ArpReply() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectIppool) pulumi.StringOutput { return v.ArpReply }).(pulumi.StringOutput)
}

// Comment.
func (o ObjectIppoolOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectIppool) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Final IPv4 address (inclusive) in the range for the address pool (format xxx.xxx.xxx.xxx).
func (o ObjectIppoolOutput) Endip() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectIppool) pulumi.StringOutput { return v.Endip }).(pulumi.StringOutput)
}

// IP pool name.
func (o ObjectIppoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectIppool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// First IPv4 address (inclusive) in the range for the address pool (format xxx.xxx.xxx.xxx).
func (o ObjectIppoolOutput) Startip() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectIppool) pulumi.StringOutput { return v.Startip }).(pulumi.StringOutput)
}

// IP pool type(Support overload and one-to-one).
func (o ObjectIppoolOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectIppool) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ObjectIppoolArrayOutput struct{ *pulumi.OutputState }

func (ObjectIppoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectIppool)(nil)).Elem()
}

func (o ObjectIppoolArrayOutput) ToObjectIppoolArrayOutput() ObjectIppoolArrayOutput {
	return o
}

func (o ObjectIppoolArrayOutput) ToObjectIppoolArrayOutputWithContext(ctx context.Context) ObjectIppoolArrayOutput {
	return o
}

func (o ObjectIppoolArrayOutput) Index(i pulumi.IntInput) ObjectIppoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObjectIppool {
		return vs[0].([]*ObjectIppool)[vs[1].(int)]
	}).(ObjectIppoolOutput)
}

type ObjectIppoolMapOutput struct{ *pulumi.OutputState }

func (ObjectIppoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectIppool)(nil)).Elem()
}

func (o ObjectIppoolMapOutput) ToObjectIppoolMapOutput() ObjectIppoolMapOutput {
	return o
}

func (o ObjectIppoolMapOutput) ToObjectIppoolMapOutputWithContext(ctx context.Context) ObjectIppoolMapOutput {
	return o
}

func (o ObjectIppoolMapOutput) MapIndex(k pulumi.StringInput) ObjectIppoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObjectIppool {
		return vs[0].(map[string]*ObjectIppool)[vs[1].(string)]
	}).(ObjectIppoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectIppoolInput)(nil)).Elem(), &ObjectIppool{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectIppoolArrayInput)(nil)).Elem(), ObjectIppoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectIppoolMapInput)(nil)).Elem(), ObjectIppoolMap{})
	pulumi.RegisterOutputType(ObjectIppoolOutput{})
	pulumi.RegisterOutputType(ObjectIppoolArrayOutput{})
	pulumi.RegisterOutputType(ObjectIppoolMapOutput{})
}
