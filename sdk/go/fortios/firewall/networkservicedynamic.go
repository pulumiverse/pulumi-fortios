// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure Dynamic Network Services. Applies to FortiOS Version `>= 7.2.1`.
//
// ## Import
//
// Firewall NetworkServiceDynamic can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/networkservicedynamic:Networkservicedynamic labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/networkservicedynamic:Networkservicedynamic labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Networkservicedynamic struct {
	pulumi.CustomResourceState

	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Match criteria filter.
	Filter pulumi.StringPtrOutput `pulumi:"filter"`
	// Dynamic Network Service name.
	Name pulumi.StringOutput `pulumi:"name"`
	// SDN connector name.
	Sdn pulumi.StringOutput `pulumi:"sdn"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewNetworkservicedynamic registers a new resource with the given unique name, arguments, and options.
func NewNetworkservicedynamic(ctx *pulumi.Context,
	name string, args *NetworkservicedynamicArgs, opts ...pulumi.ResourceOption) (*Networkservicedynamic, error) {
	if args == nil {
		args = &NetworkservicedynamicArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Networkservicedynamic
	err := ctx.RegisterResource("fortios:firewall/networkservicedynamic:Networkservicedynamic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkservicedynamic gets an existing Networkservicedynamic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkservicedynamic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkservicedynamicState, opts ...pulumi.ResourceOption) (*Networkservicedynamic, error) {
	var resource Networkservicedynamic
	err := ctx.ReadResource("fortios:firewall/networkservicedynamic:Networkservicedynamic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Networkservicedynamic resources.
type networkservicedynamicState struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Match criteria filter.
	Filter *string `pulumi:"filter"`
	// Dynamic Network Service name.
	Name *string `pulumi:"name"`
	// SDN connector name.
	Sdn *string `pulumi:"sdn"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type NetworkservicedynamicState struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Match criteria filter.
	Filter pulumi.StringPtrInput
	// Dynamic Network Service name.
	Name pulumi.StringPtrInput
	// SDN connector name.
	Sdn pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (NetworkservicedynamicState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkservicedynamicState)(nil)).Elem()
}

type networkservicedynamicArgs struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Match criteria filter.
	Filter *string `pulumi:"filter"`
	// Dynamic Network Service name.
	Name *string `pulumi:"name"`
	// SDN connector name.
	Sdn *string `pulumi:"sdn"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Networkservicedynamic resource.
type NetworkservicedynamicArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Match criteria filter.
	Filter pulumi.StringPtrInput
	// Dynamic Network Service name.
	Name pulumi.StringPtrInput
	// SDN connector name.
	Sdn pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (NetworkservicedynamicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkservicedynamicArgs)(nil)).Elem()
}

type NetworkservicedynamicInput interface {
	pulumi.Input

	ToNetworkservicedynamicOutput() NetworkservicedynamicOutput
	ToNetworkservicedynamicOutputWithContext(ctx context.Context) NetworkservicedynamicOutput
}

func (*Networkservicedynamic) ElementType() reflect.Type {
	return reflect.TypeOf((**Networkservicedynamic)(nil)).Elem()
}

func (i *Networkservicedynamic) ToNetworkservicedynamicOutput() NetworkservicedynamicOutput {
	return i.ToNetworkservicedynamicOutputWithContext(context.Background())
}

func (i *Networkservicedynamic) ToNetworkservicedynamicOutputWithContext(ctx context.Context) NetworkservicedynamicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkservicedynamicOutput)
}

// NetworkservicedynamicArrayInput is an input type that accepts NetworkservicedynamicArray and NetworkservicedynamicArrayOutput values.
// You can construct a concrete instance of `NetworkservicedynamicArrayInput` via:
//
//	NetworkservicedynamicArray{ NetworkservicedynamicArgs{...} }
type NetworkservicedynamicArrayInput interface {
	pulumi.Input

	ToNetworkservicedynamicArrayOutput() NetworkservicedynamicArrayOutput
	ToNetworkservicedynamicArrayOutputWithContext(context.Context) NetworkservicedynamicArrayOutput
}

type NetworkservicedynamicArray []NetworkservicedynamicInput

func (NetworkservicedynamicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Networkservicedynamic)(nil)).Elem()
}

func (i NetworkservicedynamicArray) ToNetworkservicedynamicArrayOutput() NetworkservicedynamicArrayOutput {
	return i.ToNetworkservicedynamicArrayOutputWithContext(context.Background())
}

func (i NetworkservicedynamicArray) ToNetworkservicedynamicArrayOutputWithContext(ctx context.Context) NetworkservicedynamicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkservicedynamicArrayOutput)
}

// NetworkservicedynamicMapInput is an input type that accepts NetworkservicedynamicMap and NetworkservicedynamicMapOutput values.
// You can construct a concrete instance of `NetworkservicedynamicMapInput` via:
//
//	NetworkservicedynamicMap{ "key": NetworkservicedynamicArgs{...} }
type NetworkservicedynamicMapInput interface {
	pulumi.Input

	ToNetworkservicedynamicMapOutput() NetworkservicedynamicMapOutput
	ToNetworkservicedynamicMapOutputWithContext(context.Context) NetworkservicedynamicMapOutput
}

type NetworkservicedynamicMap map[string]NetworkservicedynamicInput

func (NetworkservicedynamicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Networkservicedynamic)(nil)).Elem()
}

func (i NetworkservicedynamicMap) ToNetworkservicedynamicMapOutput() NetworkservicedynamicMapOutput {
	return i.ToNetworkservicedynamicMapOutputWithContext(context.Background())
}

func (i NetworkservicedynamicMap) ToNetworkservicedynamicMapOutputWithContext(ctx context.Context) NetworkservicedynamicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkservicedynamicMapOutput)
}

type NetworkservicedynamicOutput struct{ *pulumi.OutputState }

func (NetworkservicedynamicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Networkservicedynamic)(nil)).Elem()
}

func (o NetworkservicedynamicOutput) ToNetworkservicedynamicOutput() NetworkservicedynamicOutput {
	return o
}

func (o NetworkservicedynamicOutput) ToNetworkservicedynamicOutputWithContext(ctx context.Context) NetworkservicedynamicOutput {
	return o
}

// Comment.
func (o NetworkservicedynamicOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Networkservicedynamic) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Match criteria filter.
func (o NetworkservicedynamicOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Networkservicedynamic) pulumi.StringPtrOutput { return v.Filter }).(pulumi.StringPtrOutput)
}

// Dynamic Network Service name.
func (o NetworkservicedynamicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Networkservicedynamic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// SDN connector name.
func (o NetworkservicedynamicOutput) Sdn() pulumi.StringOutput {
	return o.ApplyT(func(v *Networkservicedynamic) pulumi.StringOutput { return v.Sdn }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o NetworkservicedynamicOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Networkservicedynamic) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type NetworkservicedynamicArrayOutput struct{ *pulumi.OutputState }

func (NetworkservicedynamicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Networkservicedynamic)(nil)).Elem()
}

func (o NetworkservicedynamicArrayOutput) ToNetworkservicedynamicArrayOutput() NetworkservicedynamicArrayOutput {
	return o
}

func (o NetworkservicedynamicArrayOutput) ToNetworkservicedynamicArrayOutputWithContext(ctx context.Context) NetworkservicedynamicArrayOutput {
	return o
}

func (o NetworkservicedynamicArrayOutput) Index(i pulumi.IntInput) NetworkservicedynamicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Networkservicedynamic {
		return vs[0].([]*Networkservicedynamic)[vs[1].(int)]
	}).(NetworkservicedynamicOutput)
}

type NetworkservicedynamicMapOutput struct{ *pulumi.OutputState }

func (NetworkservicedynamicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Networkservicedynamic)(nil)).Elem()
}

func (o NetworkservicedynamicMapOutput) ToNetworkservicedynamicMapOutput() NetworkservicedynamicMapOutput {
	return o
}

func (o NetworkservicedynamicMapOutput) ToNetworkservicedynamicMapOutputWithContext(ctx context.Context) NetworkservicedynamicMapOutput {
	return o
}

func (o NetworkservicedynamicMapOutput) MapIndex(k pulumi.StringInput) NetworkservicedynamicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Networkservicedynamic {
		return vs[0].(map[string]*Networkservicedynamic)[vs[1].(string)]
	}).(NetworkservicedynamicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkservicedynamicInput)(nil)).Elem(), &Networkservicedynamic{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkservicedynamicArrayInput)(nil)).Elem(), NetworkservicedynamicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkservicedynamicMapInput)(nil)).Elem(), NetworkservicedynamicMap{})
	pulumi.RegisterOutputType(NetworkservicedynamicOutput{})
	pulumi.RegisterOutputType(NetworkservicedynamicArrayOutput{})
	pulumi.RegisterOutputType(NetworkservicedynamicMapOutput{})
}
