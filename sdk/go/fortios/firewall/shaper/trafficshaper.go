// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package shaper

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure shared traffic shaper.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.NewTrafficshaper(ctx, "trname", &firewall.TrafficshaperArgs{
//				BandwidthUnit:       pulumi.String("kbps"),
//				Diffserv:            pulumi.String("disable"),
//				Diffservcode:        pulumi.String("000000"),
//				GuaranteedBandwidth: pulumi.Int(0),
//				MaximumBandwidth:    pulumi.Int(1024),
//				PerPolicy:           pulumi.String("disable"),
//				Priority:            pulumi.String("low"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// FirewallShaper TrafficShaper can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/shaper/trafficshaper:Trafficshaper labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/shaper/trafficshaper:Trafficshaper labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Trafficshaper struct {
	pulumi.CustomResourceState

	// Unit of measurement for guaranteed and maximum bandwidth for this shaper (Kbps, Mbps or Gbps). Valid values: `kbps`, `mbps`, `gbps`.
	BandwidthUnit pulumi.StringOutput `pulumi:"bandwidthUnit"`
	// VLAN CoS mark.
	Cos pulumi.StringOutput `pulumi:"cos"`
	// Enable/disable VLAN CoS marking. Valid values: `enable`, `disable`.
	CosMarking pulumi.StringOutput `pulumi:"cosMarking"`
	// Select VLAN CoS marking method. Valid values: `multi-stage`, `static`.
	CosMarkingMethod pulumi.StringOutput `pulumi:"cosMarkingMethod"`
	// Enable/disable changing the DiffServ setting applied to traffic accepted by this shaper. Valid values: `enable`, `disable`.
	Diffserv pulumi.StringOutput `pulumi:"diffserv"`
	// DiffServ setting to be applied to traffic accepted by this shaper.
	Diffservcode pulumi.StringOutput `pulumi:"diffservcode"`
	// Select DSCP marking method. Valid values: `multi-stage`, `static`.
	DscpMarkingMethod pulumi.StringOutput `pulumi:"dscpMarkingMethod"`
	// Exceed bandwidth used for DSCP multi-stage marking. Units depend on the bandwidth-unit setting.
	ExceedBandwidth pulumi.IntOutput `pulumi:"exceedBandwidth"`
	// Class ID for traffic in [guaranteed-bandwidth, maximum-bandwidth].
	ExceedClassId pulumi.IntOutput `pulumi:"exceedClassId"`
	// VLAN CoS mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
	ExceedCos pulumi.StringOutput `pulumi:"exceedCos"`
	// DSCP mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
	ExceedDscp pulumi.StringOutput `pulumi:"exceedDscp"`
	// Amount of bandwidth guaranteed for this shaper. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
	GuaranteedBandwidth pulumi.IntOutput `pulumi:"guaranteedBandwidth"`
	// Upper bandwidth limit enforced by this shaper. 0 means no limit. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
	MaximumBandwidth pulumi.IntOutput `pulumi:"maximumBandwidth"`
	// VLAN CoS mark for traffic in [exceed-bandwidth, maximum-bandwidth].
	MaximumCos pulumi.StringOutput `pulumi:"maximumCos"`
	// DSCP mark for traffic in [exceed-bandwidth, maximum-bandwidth].
	MaximumDscp pulumi.StringOutput `pulumi:"maximumDscp"`
	// Traffic shaper name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Per-packet size overhead used in rate computations.
	Overhead pulumi.IntOutput `pulumi:"overhead"`
	// Enable/disable applying a separate shaper for each policy. For example, if enabled the guaranteed bandwidth is applied separately for each policy. Valid values: `disable`, `enable`.
	PerPolicy pulumi.StringOutput `pulumi:"perPolicy"`
	// Higher priority traffic is more likely to be forwarded without delays and without compromising the guaranteed bandwidth. Valid values: `low`, `medium`, `high`.
	Priority pulumi.StringOutput `pulumi:"priority"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewTrafficshaper registers a new resource with the given unique name, arguments, and options.
func NewTrafficshaper(ctx *pulumi.Context,
	name string, args *TrafficshaperArgs, opts ...pulumi.ResourceOption) (*Trafficshaper, error) {
	if args == nil {
		args = &TrafficshaperArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Trafficshaper
	err := ctx.RegisterResource("fortios:firewall/shaper/trafficshaper:Trafficshaper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficshaper gets an existing Trafficshaper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficshaper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficshaperState, opts ...pulumi.ResourceOption) (*Trafficshaper, error) {
	var resource Trafficshaper
	err := ctx.ReadResource("fortios:firewall/shaper/trafficshaper:Trafficshaper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Trafficshaper resources.
type trafficshaperState struct {
	// Unit of measurement for guaranteed and maximum bandwidth for this shaper (Kbps, Mbps or Gbps). Valid values: `kbps`, `mbps`, `gbps`.
	BandwidthUnit *string `pulumi:"bandwidthUnit"`
	// VLAN CoS mark.
	Cos *string `pulumi:"cos"`
	// Enable/disable VLAN CoS marking. Valid values: `enable`, `disable`.
	CosMarking *string `pulumi:"cosMarking"`
	// Select VLAN CoS marking method. Valid values: `multi-stage`, `static`.
	CosMarkingMethod *string `pulumi:"cosMarkingMethod"`
	// Enable/disable changing the DiffServ setting applied to traffic accepted by this shaper. Valid values: `enable`, `disable`.
	Diffserv *string `pulumi:"diffserv"`
	// DiffServ setting to be applied to traffic accepted by this shaper.
	Diffservcode *string `pulumi:"diffservcode"`
	// Select DSCP marking method. Valid values: `multi-stage`, `static`.
	DscpMarkingMethod *string `pulumi:"dscpMarkingMethod"`
	// Exceed bandwidth used for DSCP multi-stage marking. Units depend on the bandwidth-unit setting.
	ExceedBandwidth *int `pulumi:"exceedBandwidth"`
	// Class ID for traffic in [guaranteed-bandwidth, maximum-bandwidth].
	ExceedClassId *int `pulumi:"exceedClassId"`
	// VLAN CoS mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
	ExceedCos *string `pulumi:"exceedCos"`
	// DSCP mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
	ExceedDscp *string `pulumi:"exceedDscp"`
	// Amount of bandwidth guaranteed for this shaper. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
	GuaranteedBandwidth *int `pulumi:"guaranteedBandwidth"`
	// Upper bandwidth limit enforced by this shaper. 0 means no limit. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
	MaximumBandwidth *int `pulumi:"maximumBandwidth"`
	// VLAN CoS mark for traffic in [exceed-bandwidth, maximum-bandwidth].
	MaximumCos *string `pulumi:"maximumCos"`
	// DSCP mark for traffic in [exceed-bandwidth, maximum-bandwidth].
	MaximumDscp *string `pulumi:"maximumDscp"`
	// Traffic shaper name.
	Name *string `pulumi:"name"`
	// Per-packet size overhead used in rate computations.
	Overhead *int `pulumi:"overhead"`
	// Enable/disable applying a separate shaper for each policy. For example, if enabled the guaranteed bandwidth is applied separately for each policy. Valid values: `disable`, `enable`.
	PerPolicy *string `pulumi:"perPolicy"`
	// Higher priority traffic is more likely to be forwarded without delays and without compromising the guaranteed bandwidth. Valid values: `low`, `medium`, `high`.
	Priority *string `pulumi:"priority"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type TrafficshaperState struct {
	// Unit of measurement for guaranteed and maximum bandwidth for this shaper (Kbps, Mbps or Gbps). Valid values: `kbps`, `mbps`, `gbps`.
	BandwidthUnit pulumi.StringPtrInput
	// VLAN CoS mark.
	Cos pulumi.StringPtrInput
	// Enable/disable VLAN CoS marking. Valid values: `enable`, `disable`.
	CosMarking pulumi.StringPtrInput
	// Select VLAN CoS marking method. Valid values: `multi-stage`, `static`.
	CosMarkingMethod pulumi.StringPtrInput
	// Enable/disable changing the DiffServ setting applied to traffic accepted by this shaper. Valid values: `enable`, `disable`.
	Diffserv pulumi.StringPtrInput
	// DiffServ setting to be applied to traffic accepted by this shaper.
	Diffservcode pulumi.StringPtrInput
	// Select DSCP marking method. Valid values: `multi-stage`, `static`.
	DscpMarkingMethod pulumi.StringPtrInput
	// Exceed bandwidth used for DSCP multi-stage marking. Units depend on the bandwidth-unit setting.
	ExceedBandwidth pulumi.IntPtrInput
	// Class ID for traffic in [guaranteed-bandwidth, maximum-bandwidth].
	ExceedClassId pulumi.IntPtrInput
	// VLAN CoS mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
	ExceedCos pulumi.StringPtrInput
	// DSCP mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
	ExceedDscp pulumi.StringPtrInput
	// Amount of bandwidth guaranteed for this shaper. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
	GuaranteedBandwidth pulumi.IntPtrInput
	// Upper bandwidth limit enforced by this shaper. 0 means no limit. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
	MaximumBandwidth pulumi.IntPtrInput
	// VLAN CoS mark for traffic in [exceed-bandwidth, maximum-bandwidth].
	MaximumCos pulumi.StringPtrInput
	// DSCP mark for traffic in [exceed-bandwidth, maximum-bandwidth].
	MaximumDscp pulumi.StringPtrInput
	// Traffic shaper name.
	Name pulumi.StringPtrInput
	// Per-packet size overhead used in rate computations.
	Overhead pulumi.IntPtrInput
	// Enable/disable applying a separate shaper for each policy. For example, if enabled the guaranteed bandwidth is applied separately for each policy. Valid values: `disable`, `enable`.
	PerPolicy pulumi.StringPtrInput
	// Higher priority traffic is more likely to be forwarded without delays and without compromising the guaranteed bandwidth. Valid values: `low`, `medium`, `high`.
	Priority pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (TrafficshaperState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficshaperState)(nil)).Elem()
}

type trafficshaperArgs struct {
	// Unit of measurement for guaranteed and maximum bandwidth for this shaper (Kbps, Mbps or Gbps). Valid values: `kbps`, `mbps`, `gbps`.
	BandwidthUnit *string `pulumi:"bandwidthUnit"`
	// VLAN CoS mark.
	Cos *string `pulumi:"cos"`
	// Enable/disable VLAN CoS marking. Valid values: `enable`, `disable`.
	CosMarking *string `pulumi:"cosMarking"`
	// Select VLAN CoS marking method. Valid values: `multi-stage`, `static`.
	CosMarkingMethod *string `pulumi:"cosMarkingMethod"`
	// Enable/disable changing the DiffServ setting applied to traffic accepted by this shaper. Valid values: `enable`, `disable`.
	Diffserv *string `pulumi:"diffserv"`
	// DiffServ setting to be applied to traffic accepted by this shaper.
	Diffservcode *string `pulumi:"diffservcode"`
	// Select DSCP marking method. Valid values: `multi-stage`, `static`.
	DscpMarkingMethod *string `pulumi:"dscpMarkingMethod"`
	// Exceed bandwidth used for DSCP multi-stage marking. Units depend on the bandwidth-unit setting.
	ExceedBandwidth *int `pulumi:"exceedBandwidth"`
	// Class ID for traffic in [guaranteed-bandwidth, maximum-bandwidth].
	ExceedClassId *int `pulumi:"exceedClassId"`
	// VLAN CoS mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
	ExceedCos *string `pulumi:"exceedCos"`
	// DSCP mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
	ExceedDscp *string `pulumi:"exceedDscp"`
	// Amount of bandwidth guaranteed for this shaper. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
	GuaranteedBandwidth *int `pulumi:"guaranteedBandwidth"`
	// Upper bandwidth limit enforced by this shaper. 0 means no limit. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
	MaximumBandwidth *int `pulumi:"maximumBandwidth"`
	// VLAN CoS mark for traffic in [exceed-bandwidth, maximum-bandwidth].
	MaximumCos *string `pulumi:"maximumCos"`
	// DSCP mark for traffic in [exceed-bandwidth, maximum-bandwidth].
	MaximumDscp *string `pulumi:"maximumDscp"`
	// Traffic shaper name.
	Name *string `pulumi:"name"`
	// Per-packet size overhead used in rate computations.
	Overhead *int `pulumi:"overhead"`
	// Enable/disable applying a separate shaper for each policy. For example, if enabled the guaranteed bandwidth is applied separately for each policy. Valid values: `disable`, `enable`.
	PerPolicy *string `pulumi:"perPolicy"`
	// Higher priority traffic is more likely to be forwarded without delays and without compromising the guaranteed bandwidth. Valid values: `low`, `medium`, `high`.
	Priority *string `pulumi:"priority"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Trafficshaper resource.
type TrafficshaperArgs struct {
	// Unit of measurement for guaranteed and maximum bandwidth for this shaper (Kbps, Mbps or Gbps). Valid values: `kbps`, `mbps`, `gbps`.
	BandwidthUnit pulumi.StringPtrInput
	// VLAN CoS mark.
	Cos pulumi.StringPtrInput
	// Enable/disable VLAN CoS marking. Valid values: `enable`, `disable`.
	CosMarking pulumi.StringPtrInput
	// Select VLAN CoS marking method. Valid values: `multi-stage`, `static`.
	CosMarkingMethod pulumi.StringPtrInput
	// Enable/disable changing the DiffServ setting applied to traffic accepted by this shaper. Valid values: `enable`, `disable`.
	Diffserv pulumi.StringPtrInput
	// DiffServ setting to be applied to traffic accepted by this shaper.
	Diffservcode pulumi.StringPtrInput
	// Select DSCP marking method. Valid values: `multi-stage`, `static`.
	DscpMarkingMethod pulumi.StringPtrInput
	// Exceed bandwidth used for DSCP multi-stage marking. Units depend on the bandwidth-unit setting.
	ExceedBandwidth pulumi.IntPtrInput
	// Class ID for traffic in [guaranteed-bandwidth, maximum-bandwidth].
	ExceedClassId pulumi.IntPtrInput
	// VLAN CoS mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
	ExceedCos pulumi.StringPtrInput
	// DSCP mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
	ExceedDscp pulumi.StringPtrInput
	// Amount of bandwidth guaranteed for this shaper. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
	GuaranteedBandwidth pulumi.IntPtrInput
	// Upper bandwidth limit enforced by this shaper. 0 means no limit. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
	MaximumBandwidth pulumi.IntPtrInput
	// VLAN CoS mark for traffic in [exceed-bandwidth, maximum-bandwidth].
	MaximumCos pulumi.StringPtrInput
	// DSCP mark for traffic in [exceed-bandwidth, maximum-bandwidth].
	MaximumDscp pulumi.StringPtrInput
	// Traffic shaper name.
	Name pulumi.StringPtrInput
	// Per-packet size overhead used in rate computations.
	Overhead pulumi.IntPtrInput
	// Enable/disable applying a separate shaper for each policy. For example, if enabled the guaranteed bandwidth is applied separately for each policy. Valid values: `disable`, `enable`.
	PerPolicy pulumi.StringPtrInput
	// Higher priority traffic is more likely to be forwarded without delays and without compromising the guaranteed bandwidth. Valid values: `low`, `medium`, `high`.
	Priority pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (TrafficshaperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficshaperArgs)(nil)).Elem()
}

type TrafficshaperInput interface {
	pulumi.Input

	ToTrafficshaperOutput() TrafficshaperOutput
	ToTrafficshaperOutputWithContext(ctx context.Context) TrafficshaperOutput
}

func (*Trafficshaper) ElementType() reflect.Type {
	return reflect.TypeOf((**Trafficshaper)(nil)).Elem()
}

func (i *Trafficshaper) ToTrafficshaperOutput() TrafficshaperOutput {
	return i.ToTrafficshaperOutputWithContext(context.Background())
}

func (i *Trafficshaper) ToTrafficshaperOutputWithContext(ctx context.Context) TrafficshaperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficshaperOutput)
}

// TrafficshaperArrayInput is an input type that accepts TrafficshaperArray and TrafficshaperArrayOutput values.
// You can construct a concrete instance of `TrafficshaperArrayInput` via:
//
//	TrafficshaperArray{ TrafficshaperArgs{...} }
type TrafficshaperArrayInput interface {
	pulumi.Input

	ToTrafficshaperArrayOutput() TrafficshaperArrayOutput
	ToTrafficshaperArrayOutputWithContext(context.Context) TrafficshaperArrayOutput
}

type TrafficshaperArray []TrafficshaperInput

func (TrafficshaperArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Trafficshaper)(nil)).Elem()
}

func (i TrafficshaperArray) ToTrafficshaperArrayOutput() TrafficshaperArrayOutput {
	return i.ToTrafficshaperArrayOutputWithContext(context.Background())
}

func (i TrafficshaperArray) ToTrafficshaperArrayOutputWithContext(ctx context.Context) TrafficshaperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficshaperArrayOutput)
}

// TrafficshaperMapInput is an input type that accepts TrafficshaperMap and TrafficshaperMapOutput values.
// You can construct a concrete instance of `TrafficshaperMapInput` via:
//
//	TrafficshaperMap{ "key": TrafficshaperArgs{...} }
type TrafficshaperMapInput interface {
	pulumi.Input

	ToTrafficshaperMapOutput() TrafficshaperMapOutput
	ToTrafficshaperMapOutputWithContext(context.Context) TrafficshaperMapOutput
}

type TrafficshaperMap map[string]TrafficshaperInput

func (TrafficshaperMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Trafficshaper)(nil)).Elem()
}

func (i TrafficshaperMap) ToTrafficshaperMapOutput() TrafficshaperMapOutput {
	return i.ToTrafficshaperMapOutputWithContext(context.Background())
}

func (i TrafficshaperMap) ToTrafficshaperMapOutputWithContext(ctx context.Context) TrafficshaperMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficshaperMapOutput)
}

type TrafficshaperOutput struct{ *pulumi.OutputState }

func (TrafficshaperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Trafficshaper)(nil)).Elem()
}

func (o TrafficshaperOutput) ToTrafficshaperOutput() TrafficshaperOutput {
	return o
}

func (o TrafficshaperOutput) ToTrafficshaperOutputWithContext(ctx context.Context) TrafficshaperOutput {
	return o
}

// Unit of measurement for guaranteed and maximum bandwidth for this shaper (Kbps, Mbps or Gbps). Valid values: `kbps`, `mbps`, `gbps`.
func (o TrafficshaperOutput) BandwidthUnit() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.StringOutput { return v.BandwidthUnit }).(pulumi.StringOutput)
}

// VLAN CoS mark.
func (o TrafficshaperOutput) Cos() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.StringOutput { return v.Cos }).(pulumi.StringOutput)
}

// Enable/disable VLAN CoS marking. Valid values: `enable`, `disable`.
func (o TrafficshaperOutput) CosMarking() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.StringOutput { return v.CosMarking }).(pulumi.StringOutput)
}

// Select VLAN CoS marking method. Valid values: `multi-stage`, `static`.
func (o TrafficshaperOutput) CosMarkingMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.StringOutput { return v.CosMarkingMethod }).(pulumi.StringOutput)
}

// Enable/disable changing the DiffServ setting applied to traffic accepted by this shaper. Valid values: `enable`, `disable`.
func (o TrafficshaperOutput) Diffserv() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.StringOutput { return v.Diffserv }).(pulumi.StringOutput)
}

// DiffServ setting to be applied to traffic accepted by this shaper.
func (o TrafficshaperOutput) Diffservcode() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.StringOutput { return v.Diffservcode }).(pulumi.StringOutput)
}

// Select DSCP marking method. Valid values: `multi-stage`, `static`.
func (o TrafficshaperOutput) DscpMarkingMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.StringOutput { return v.DscpMarkingMethod }).(pulumi.StringOutput)
}

// Exceed bandwidth used for DSCP multi-stage marking. Units depend on the bandwidth-unit setting.
func (o TrafficshaperOutput) ExceedBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.IntOutput { return v.ExceedBandwidth }).(pulumi.IntOutput)
}

// Class ID for traffic in [guaranteed-bandwidth, maximum-bandwidth].
func (o TrafficshaperOutput) ExceedClassId() pulumi.IntOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.IntOutput { return v.ExceedClassId }).(pulumi.IntOutput)
}

// VLAN CoS mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
func (o TrafficshaperOutput) ExceedCos() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.StringOutput { return v.ExceedCos }).(pulumi.StringOutput)
}

// DSCP mark for traffic in [guaranteed-bandwidth, exceed-bandwidth].
func (o TrafficshaperOutput) ExceedDscp() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.StringOutput { return v.ExceedDscp }).(pulumi.StringOutput)
}

// Amount of bandwidth guaranteed for this shaper. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
func (o TrafficshaperOutput) GuaranteedBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.IntOutput { return v.GuaranteedBandwidth }).(pulumi.IntOutput)
}

// Upper bandwidth limit enforced by this shaper. 0 means no limit. Units depend on the bandwidth-unit setting. On FortiOS versions 6.2.0-6.4.2, 7.0.0-7.0.5, 7.2.0: 0 - 16776000. On FortiOS versions 6.4.10-6.4.14, 7.0.6-7.0.13, >= 7.2.1: 0 - 80000000.
func (o TrafficshaperOutput) MaximumBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.IntOutput { return v.MaximumBandwidth }).(pulumi.IntOutput)
}

// VLAN CoS mark for traffic in [exceed-bandwidth, maximum-bandwidth].
func (o TrafficshaperOutput) MaximumCos() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.StringOutput { return v.MaximumCos }).(pulumi.StringOutput)
}

// DSCP mark for traffic in [exceed-bandwidth, maximum-bandwidth].
func (o TrafficshaperOutput) MaximumDscp() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.StringOutput { return v.MaximumDscp }).(pulumi.StringOutput)
}

// Traffic shaper name.
func (o TrafficshaperOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Per-packet size overhead used in rate computations.
func (o TrafficshaperOutput) Overhead() pulumi.IntOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.IntOutput { return v.Overhead }).(pulumi.IntOutput)
}

// Enable/disable applying a separate shaper for each policy. For example, if enabled the guaranteed bandwidth is applied separately for each policy. Valid values: `disable`, `enable`.
func (o TrafficshaperOutput) PerPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.StringOutput { return v.PerPolicy }).(pulumi.StringOutput)
}

// Higher priority traffic is more likely to be forwarded without delays and without compromising the guaranteed bandwidth. Valid values: `low`, `medium`, `high`.
func (o TrafficshaperOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.StringOutput { return v.Priority }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o TrafficshaperOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trafficshaper) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type TrafficshaperArrayOutput struct{ *pulumi.OutputState }

func (TrafficshaperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Trafficshaper)(nil)).Elem()
}

func (o TrafficshaperArrayOutput) ToTrafficshaperArrayOutput() TrafficshaperArrayOutput {
	return o
}

func (o TrafficshaperArrayOutput) ToTrafficshaperArrayOutputWithContext(ctx context.Context) TrafficshaperArrayOutput {
	return o
}

func (o TrafficshaperArrayOutput) Index(i pulumi.IntInput) TrafficshaperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Trafficshaper {
		return vs[0].([]*Trafficshaper)[vs[1].(int)]
	}).(TrafficshaperOutput)
}

type TrafficshaperMapOutput struct{ *pulumi.OutputState }

func (TrafficshaperMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Trafficshaper)(nil)).Elem()
}

func (o TrafficshaperMapOutput) ToTrafficshaperMapOutput() TrafficshaperMapOutput {
	return o
}

func (o TrafficshaperMapOutput) ToTrafficshaperMapOutputWithContext(ctx context.Context) TrafficshaperMapOutput {
	return o
}

func (o TrafficshaperMapOutput) MapIndex(k pulumi.StringInput) TrafficshaperOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Trafficshaper {
		return vs[0].(map[string]*Trafficshaper)[vs[1].(string)]
	}).(TrafficshaperOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficshaperInput)(nil)).Elem(), &Trafficshaper{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficshaperArrayInput)(nil)).Elem(), TrafficshaperArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficshaperMapInput)(nil)).Elem(), TrafficshaperMap{})
	pulumi.RegisterOutputType(TrafficshaperOutput{})
	pulumi.RegisterOutputType(TrafficshaperArrayOutput{})
	pulumi.RegisterOutputType(TrafficshaperMapOutput{})
}
