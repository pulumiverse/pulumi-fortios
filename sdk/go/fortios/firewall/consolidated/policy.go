// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consolidated

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure consolidated IPv4/IPv6 policies. Applies to FortiOS Version `<= 6.4.0`.
//
// ## Import
//
// FirewallConsolidated Policy can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/consolidated/policy:Policy labelname {{policyid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/consolidated/policy:Policy labelname {{policyid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Policy struct {
	pulumi.CustomResourceState

	// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories PolicyAppCategoryArrayOutput `pulumi:"appCategories"`
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups PolicyAppGroupArrayOutput `pulumi:"appGroups"`
	// Name of an existing Application list.
	ApplicationList pulumi.StringOutput `pulumi:"applicationList"`
	// Application ID list. The structure of `application` block is documented below.
	Applications PolicyApplicationArrayOutput `pulumi:"applications"`
	// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringOutput `pulumi:"autoAsicOffload"`
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringOutput `pulumi:"avProfile"`
	// Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
	CaptivePortalExempt pulumi.StringOutput `pulumi:"captivePortalExempt"`
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringOutput `pulumi:"cifsProfile"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
	DiffservForward pulumi.StringOutput `pulumi:"diffservForward"`
	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
	DiffservReverse pulumi.StringOutput `pulumi:"diffservReverse"`
	// Change packet's DiffServ to this value.
	DiffservcodeForward pulumi.StringOutput `pulumi:"diffservcodeForward"`
	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev pulumi.StringOutput `pulumi:"diffservcodeRev"`
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringOutput `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringOutput `pulumi:"dnsfilterProfile"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s PolicyDstaddr4ArrayOutput `pulumi:"dstaddr4s"`
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s PolicyDstaddr6ArrayOutput `pulumi:"dstaddr6s"`
	// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate pulumi.StringOutput `pulumi:"dstaddrNegate"`
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs PolicyDstintfArrayOutput `pulumi:"dstintfs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringOutput `pulumi:"emailfilterProfile"`
	// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
	Fixedport pulumi.StringOutput `pulumi:"fixedport"`
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups PolicyFssoGroupArrayOutput `pulumi:"fssoGroups"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups PolicyGroupArrayOutput `pulumi:"groups"`
	// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
	HttpPolicyRedirect pulumi.StringOutput `pulumi:"httpPolicyRedirect"`
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringOutput `pulumi:"icapProfile"`
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
	Inbound pulumi.StringOutput `pulumi:"inbound"`
	// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
	InspectionMode pulumi.StringOutput `pulumi:"inspectionMode"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
	InternetService pulumi.StringOutput `pulumi:"internetService"`
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups PolicyInternetServiceCustomGroupArrayOutput `pulumi:"internetServiceCustomGroups"`
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms PolicyInternetServiceCustomArrayOutput `pulumi:"internetServiceCustoms"`
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups PolicyInternetServiceGroupArrayOutput `pulumi:"internetServiceGroups"`
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds PolicyInternetServiceIdArrayOutput `pulumi:"internetServiceIds"`
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames PolicyInternetServiceNameArrayOutput `pulumi:"internetServiceNames"`
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate pulumi.StringOutput `pulumi:"internetServiceNegate"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
	InternetServiceSrc pulumi.StringOutput `pulumi:"internetServiceSrc"`
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups PolicyInternetServiceSrcCustomGroupArrayOutput `pulumi:"internetServiceSrcCustomGroups"`
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms PolicyInternetServiceSrcCustomArrayOutput `pulumi:"internetServiceSrcCustoms"`
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups PolicyInternetServiceSrcGroupArrayOutput `pulumi:"internetServiceSrcGroups"`
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds PolicyInternetServiceSrcIdArrayOutput `pulumi:"internetServiceSrcIds"`
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames PolicyInternetServiceSrcNameArrayOutput `pulumi:"internetServiceSrcNames"`
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate pulumi.StringOutput `pulumi:"internetServiceSrcNegate"`
	// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool pulumi.StringOutput `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringOutput `pulumi:"ipsSensor"`
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringOutput `pulumi:"logtraffic"`
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringOutput `pulumi:"logtrafficStart"`
	// Policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable source NAT. Valid values: `enable`, `disable`.
	Nat pulumi.StringOutput `pulumi:"nat"`
	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
	Outbound pulumi.StringOutput `pulumi:"outbound"`
	// Per-IP traffic shaper.
	PerIpShaper pulumi.StringOutput `pulumi:"perIpShaper"`
	// Policy ID.
	Policyid pulumi.IntOutput `pulumi:"policyid"`
	// IPv4 pool names. The structure of `poolname4` block is documented below.
	Poolname4s PolicyPoolname4ArrayOutput `pulumi:"poolname4s"`
	// IPv6 pool names. The structure of `poolname6` block is documented below.
	Poolname6s PolicyPoolname6ArrayOutput `pulumi:"poolname6s"`
	// Name of profile group.
	ProfileGroup pulumi.StringOutput `pulumi:"profileGroup"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringOutput `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType pulumi.StringOutput `pulumi:"profileType"`
	// Schedule name.
	Schedule pulumi.StringOutput `pulumi:"schedule"`
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate pulumi.StringOutput `pulumi:"serviceNegate"`
	// Service and service group names. The structure of `service` block is documented below.
	Services PolicyServiceArrayOutput `pulumi:"services"`
	// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
	SessionTtl pulumi.IntOutput `pulumi:"sessionTtl"`
	// Name of an existing Spam filter profile.
	SpamfilterProfile pulumi.StringOutput `pulumi:"spamfilterProfile"`
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s PolicySrcaddr4ArrayOutput `pulumi:"srcaddr4s"`
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s PolicySrcaddr6ArrayOutput `pulumi:"srcaddr6s"`
	// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate pulumi.StringOutput `pulumi:"srcaddrNegate"`
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs PolicySrcintfArrayOutput `pulumi:"srcintfs"`
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringOutput `pulumi:"sshFilterProfile"`
	// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
	SshPolicyRedirect pulumi.StringOutput `pulumi:"sshPolicyRedirect"`
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringOutput `pulumi:"sslSshProfile"`
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver pulumi.IntOutput `pulumi:"tcpMssReceiver"`
	// Sender TCP maximum segment size (MSS).
	TcpMssSender pulumi.IntOutput `pulumi:"tcpMssSender"`
	// Traffic shaper.
	TrafficShaper pulumi.StringOutput `pulumi:"trafficShaper"`
	// Reverse traffic shaper.
	TrafficShaperReverse pulumi.StringOutput `pulumi:"trafficShaperReverse"`
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories PolicyUrlCategoryArrayOutput `pulumi:"urlCategories"`
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users PolicyUserArrayOutput `pulumi:"users"`
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
	UtmStatus pulumi.StringOutput `pulumi:"utmStatus"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Name of an existing VoIP profile.
	VoipProfile pulumi.StringOutput `pulumi:"voipProfile"`
	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel pulumi.StringOutput `pulumi:"vpntunnel"`
	// Name of an existing Web application firewall profile.
	WafProfile pulumi.StringOutput `pulumi:"wafProfile"`
	// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
	Wanopt pulumi.StringOutput `pulumi:"wanopt"`
	// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
	WanoptDetection pulumi.StringOutput `pulumi:"wanoptDetection"`
	// WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
	WanoptPassiveOpt pulumi.StringOutput `pulumi:"wanoptPassiveOpt"`
	// WAN optimization peer.
	WanoptPeer pulumi.StringOutput `pulumi:"wanoptPeer"`
	// WAN optimization profile.
	WanoptProfile pulumi.StringOutput `pulumi:"wanoptProfile"`
	// Enable/disable web cache. Valid values: `enable`, `disable`.
	Webcache pulumi.StringOutput `pulumi:"webcache"`
	// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
	WebcacheHttps pulumi.StringOutput `pulumi:"webcacheHttps"`
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringOutput `pulumi:"webfilterProfile"`
	// Webproxy forward server name.
	WebproxyForwardServer pulumi.StringOutput `pulumi:"webproxyForwardServer"`
	// Webproxy profile name.
	WebproxyProfile pulumi.StringOutput `pulumi:"webproxyProfile"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		args = &PolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Policy
	err := ctx.RegisterResource("fortios:firewall/consolidated/policy:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("fortios:firewall/consolidated/policy:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
	// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
	Action *string `pulumi:"action"`
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories []PolicyAppCategory `pulumi:"appCategories"`
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups []PolicyAppGroup `pulumi:"appGroups"`
	// Name of an existing Application list.
	ApplicationList *string `pulumi:"applicationList"`
	// Application ID list. The structure of `application` block is documented below.
	Applications []PolicyApplication `pulumi:"applications"`
	// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Name of an existing Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
	CaptivePortalExempt *string `pulumi:"captivePortalExempt"`
	// Name of an existing CIFS profile.
	CifsProfile *string `pulumi:"cifsProfile"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
	DiffservForward *string `pulumi:"diffservForward"`
	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
	DiffservReverse *string `pulumi:"diffservReverse"`
	// Change packet's DiffServ to this value.
	DiffservcodeForward *string `pulumi:"diffservcodeForward"`
	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev *string `pulumi:"diffservcodeRev"`
	// Name of an existing DLP sensor.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s []PolicyDstaddr4 `pulumi:"dstaddr4s"`
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s []PolicyDstaddr6 `pulumi:"dstaddr6s"`
	// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate *string `pulumi:"dstaddrNegate"`
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs []PolicyDstintf `pulumi:"dstintfs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Name of an existing email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
	Fixedport *string `pulumi:"fixedport"`
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups []PolicyFssoGroup `pulumi:"fssoGroups"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups []PolicyGroup `pulumi:"groups"`
	// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
	HttpPolicyRedirect *string `pulumi:"httpPolicyRedirect"`
	// Name of an existing ICAP profile.
	IcapProfile *string `pulumi:"icapProfile"`
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
	Inbound *string `pulumi:"inbound"`
	// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
	InspectionMode *string `pulumi:"inspectionMode"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
	InternetService *string `pulumi:"internetService"`
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups []PolicyInternetServiceCustomGroup `pulumi:"internetServiceCustomGroups"`
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms []PolicyInternetServiceCustom `pulumi:"internetServiceCustoms"`
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups []PolicyInternetServiceGroup `pulumi:"internetServiceGroups"`
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds []PolicyInternetServiceId `pulumi:"internetServiceIds"`
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames []PolicyInternetServiceName `pulumi:"internetServiceNames"`
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate *string `pulumi:"internetServiceNegate"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
	InternetServiceSrc *string `pulumi:"internetServiceSrc"`
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups []PolicyInternetServiceSrcCustomGroup `pulumi:"internetServiceSrcCustomGroups"`
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms []PolicyInternetServiceSrcCustom `pulumi:"internetServiceSrcCustoms"`
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups []PolicyInternetServiceSrcGroup `pulumi:"internetServiceSrcGroups"`
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds []PolicyInternetServiceSrcId `pulumi:"internetServiceSrcIds"`
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames []PolicyInternetServiceSrcName `pulumi:"internetServiceSrcNames"`
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate *string `pulumi:"internetServiceSrcNegate"`
	// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool *string `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Enable/disable source NAT. Valid values: `enable`, `disable`.
	Nat *string `pulumi:"nat"`
	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
	Outbound *string `pulumi:"outbound"`
	// Per-IP traffic shaper.
	PerIpShaper *string `pulumi:"perIpShaper"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// IPv4 pool names. The structure of `poolname4` block is documented below.
	Poolname4s []PolicyPoolname4 `pulumi:"poolname4s"`
	// IPv6 pool names. The structure of `poolname6` block is documented below.
	Poolname6s []PolicyPoolname6 `pulumi:"poolname6s"`
	// Name of profile group.
	ProfileGroup *string `pulumi:"profileGroup"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions *string `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType *string `pulumi:"profileType"`
	// Schedule name.
	Schedule *string `pulumi:"schedule"`
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate *string `pulumi:"serviceNegate"`
	// Service and service group names. The structure of `service` block is documented below.
	Services []PolicyService `pulumi:"services"`
	// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
	SessionTtl *int `pulumi:"sessionTtl"`
	// Name of an existing Spam filter profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s []PolicySrcaddr4 `pulumi:"srcaddr4s"`
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s []PolicySrcaddr6 `pulumi:"srcaddr6s"`
	// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate *string `pulumi:"srcaddrNegate"`
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs []PolicySrcintf `pulumi:"srcintfs"`
	// Name of an existing SSH filter profile.
	SshFilterProfile *string `pulumi:"sshFilterProfile"`
	// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
	SshPolicyRedirect *string `pulumi:"sshPolicyRedirect"`
	// Name of an existing SSL SSH profile.
	SslSshProfile *string `pulumi:"sslSshProfile"`
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver *int `pulumi:"tcpMssReceiver"`
	// Sender TCP maximum segment size (MSS).
	TcpMssSender *int `pulumi:"tcpMssSender"`
	// Traffic shaper.
	TrafficShaper *string `pulumi:"trafficShaper"`
	// Reverse traffic shaper.
	TrafficShaperReverse *string `pulumi:"trafficShaperReverse"`
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories []PolicyUrlCategory `pulumi:"urlCategories"`
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users []PolicyUser `pulumi:"users"`
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
	UtmStatus *string `pulumi:"utmStatus"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Name of an existing VoIP profile.
	VoipProfile *string `pulumi:"voipProfile"`
	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel *string `pulumi:"vpntunnel"`
	// Name of an existing Web application firewall profile.
	WafProfile *string `pulumi:"wafProfile"`
	// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
	Wanopt *string `pulumi:"wanopt"`
	// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
	WanoptDetection *string `pulumi:"wanoptDetection"`
	// WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
	WanoptPassiveOpt *string `pulumi:"wanoptPassiveOpt"`
	// WAN optimization peer.
	WanoptPeer *string `pulumi:"wanoptPeer"`
	// WAN optimization profile.
	WanoptProfile *string `pulumi:"wanoptProfile"`
	// Enable/disable web cache. Valid values: `enable`, `disable`.
	Webcache *string `pulumi:"webcache"`
	// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
	WebcacheHttps *string `pulumi:"webcacheHttps"`
	// Name of an existing Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
	// Webproxy forward server name.
	WebproxyForwardServer *string `pulumi:"webproxyForwardServer"`
	// Webproxy profile name.
	WebproxyProfile *string `pulumi:"webproxyProfile"`
}

type PolicyState struct {
	// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
	Action pulumi.StringPtrInput
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories PolicyAppCategoryArrayInput
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups PolicyAppGroupArrayInput
	// Name of an existing Application list.
	ApplicationList pulumi.StringPtrInput
	// Application ID list. The structure of `application` block is documented below.
	Applications PolicyApplicationArrayInput
	// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
	CaptivePortalExempt pulumi.StringPtrInput
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
	DiffservForward pulumi.StringPtrInput
	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
	DiffservReverse pulumi.StringPtrInput
	// Change packet's DiffServ to this value.
	DiffservcodeForward pulumi.StringPtrInput
	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev pulumi.StringPtrInput
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringPtrInput
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s PolicyDstaddr4ArrayInput
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s PolicyDstaddr6ArrayInput
	// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate pulumi.StringPtrInput
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs PolicyDstintfArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
	Fixedport pulumi.StringPtrInput
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups PolicyFssoGroupArrayInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups PolicyGroupArrayInput
	// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
	HttpPolicyRedirect pulumi.StringPtrInput
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringPtrInput
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
	Inbound pulumi.StringPtrInput
	// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
	InspectionMode pulumi.StringPtrInput
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
	InternetService pulumi.StringPtrInput
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups PolicyInternetServiceCustomGroupArrayInput
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms PolicyInternetServiceCustomArrayInput
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups PolicyInternetServiceGroupArrayInput
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds PolicyInternetServiceIdArrayInput
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames PolicyInternetServiceNameArrayInput
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate pulumi.StringPtrInput
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
	InternetServiceSrc pulumi.StringPtrInput
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups PolicyInternetServiceSrcCustomGroupArrayInput
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms PolicyInternetServiceSrcCustomArrayInput
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups PolicyInternetServiceSrcGroupArrayInput
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds PolicyInternetServiceSrcIdArrayInput
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames PolicyInternetServiceSrcNameArrayInput
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate pulumi.StringPtrInput
	// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Enable/disable source NAT. Valid values: `enable`, `disable`.
	Nat pulumi.StringPtrInput
	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
	Outbound pulumi.StringPtrInput
	// Per-IP traffic shaper.
	PerIpShaper pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// IPv4 pool names. The structure of `poolname4` block is documented below.
	Poolname4s PolicyPoolname4ArrayInput
	// IPv6 pool names. The structure of `poolname6` block is documented below.
	Poolname6s PolicyPoolname6ArrayInput
	// Name of profile group.
	ProfileGroup pulumi.StringPtrInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringPtrInput
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType pulumi.StringPtrInput
	// Schedule name.
	Schedule pulumi.StringPtrInput
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate pulumi.StringPtrInput
	// Service and service group names. The structure of `service` block is documented below.
	Services PolicyServiceArrayInput
	// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
	SessionTtl pulumi.IntPtrInput
	// Name of an existing Spam filter profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s PolicySrcaddr4ArrayInput
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s PolicySrcaddr6ArrayInput
	// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate pulumi.StringPtrInput
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs PolicySrcintfArrayInput
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringPtrInput
	// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
	SshPolicyRedirect pulumi.StringPtrInput
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringPtrInput
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver pulumi.IntPtrInput
	// Sender TCP maximum segment size (MSS).
	TcpMssSender pulumi.IntPtrInput
	// Traffic shaper.
	TrafficShaper pulumi.StringPtrInput
	// Reverse traffic shaper.
	TrafficShaperReverse pulumi.StringPtrInput
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories PolicyUrlCategoryArrayInput
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users PolicyUserArrayInput
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
	UtmStatus pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Name of an existing VoIP profile.
	VoipProfile pulumi.StringPtrInput
	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel pulumi.StringPtrInput
	// Name of an existing Web application firewall profile.
	WafProfile pulumi.StringPtrInput
	// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
	Wanopt pulumi.StringPtrInput
	// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
	WanoptDetection pulumi.StringPtrInput
	// WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
	WanoptPassiveOpt pulumi.StringPtrInput
	// WAN optimization peer.
	WanoptPeer pulumi.StringPtrInput
	// WAN optimization profile.
	WanoptProfile pulumi.StringPtrInput
	// Enable/disable web cache. Valid values: `enable`, `disable`.
	Webcache pulumi.StringPtrInput
	// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
	WebcacheHttps pulumi.StringPtrInput
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
	// Webproxy forward server name.
	WebproxyForwardServer pulumi.StringPtrInput
	// Webproxy profile name.
	WebproxyProfile pulumi.StringPtrInput
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
	Action *string `pulumi:"action"`
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories []PolicyAppCategory `pulumi:"appCategories"`
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups []PolicyAppGroup `pulumi:"appGroups"`
	// Name of an existing Application list.
	ApplicationList *string `pulumi:"applicationList"`
	// Application ID list. The structure of `application` block is documented below.
	Applications []PolicyApplication `pulumi:"applications"`
	// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Name of an existing Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
	CaptivePortalExempt *string `pulumi:"captivePortalExempt"`
	// Name of an existing CIFS profile.
	CifsProfile *string `pulumi:"cifsProfile"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
	DiffservForward *string `pulumi:"diffservForward"`
	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
	DiffservReverse *string `pulumi:"diffservReverse"`
	// Change packet's DiffServ to this value.
	DiffservcodeForward *string `pulumi:"diffservcodeForward"`
	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev *string `pulumi:"diffservcodeRev"`
	// Name of an existing DLP sensor.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s []PolicyDstaddr4 `pulumi:"dstaddr4s"`
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s []PolicyDstaddr6 `pulumi:"dstaddr6s"`
	// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate *string `pulumi:"dstaddrNegate"`
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs []PolicyDstintf `pulumi:"dstintfs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Name of an existing email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
	Fixedport *string `pulumi:"fixedport"`
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups []PolicyFssoGroup `pulumi:"fssoGroups"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups []PolicyGroup `pulumi:"groups"`
	// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
	HttpPolicyRedirect *string `pulumi:"httpPolicyRedirect"`
	// Name of an existing ICAP profile.
	IcapProfile *string `pulumi:"icapProfile"`
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
	Inbound *string `pulumi:"inbound"`
	// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
	InspectionMode *string `pulumi:"inspectionMode"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
	InternetService *string `pulumi:"internetService"`
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups []PolicyInternetServiceCustomGroup `pulumi:"internetServiceCustomGroups"`
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms []PolicyInternetServiceCustom `pulumi:"internetServiceCustoms"`
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups []PolicyInternetServiceGroup `pulumi:"internetServiceGroups"`
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds []PolicyInternetServiceId `pulumi:"internetServiceIds"`
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames []PolicyInternetServiceName `pulumi:"internetServiceNames"`
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate *string `pulumi:"internetServiceNegate"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
	InternetServiceSrc *string `pulumi:"internetServiceSrc"`
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups []PolicyInternetServiceSrcCustomGroup `pulumi:"internetServiceSrcCustomGroups"`
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms []PolicyInternetServiceSrcCustom `pulumi:"internetServiceSrcCustoms"`
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups []PolicyInternetServiceSrcGroup `pulumi:"internetServiceSrcGroups"`
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds []PolicyInternetServiceSrcId `pulumi:"internetServiceSrcIds"`
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames []PolicyInternetServiceSrcName `pulumi:"internetServiceSrcNames"`
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate *string `pulumi:"internetServiceSrcNegate"`
	// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool *string `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Enable/disable source NAT. Valid values: `enable`, `disable`.
	Nat *string `pulumi:"nat"`
	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
	Outbound *string `pulumi:"outbound"`
	// Per-IP traffic shaper.
	PerIpShaper *string `pulumi:"perIpShaper"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// IPv4 pool names. The structure of `poolname4` block is documented below.
	Poolname4s []PolicyPoolname4 `pulumi:"poolname4s"`
	// IPv6 pool names. The structure of `poolname6` block is documented below.
	Poolname6s []PolicyPoolname6 `pulumi:"poolname6s"`
	// Name of profile group.
	ProfileGroup *string `pulumi:"profileGroup"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions *string `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType *string `pulumi:"profileType"`
	// Schedule name.
	Schedule *string `pulumi:"schedule"`
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate *string `pulumi:"serviceNegate"`
	// Service and service group names. The structure of `service` block is documented below.
	Services []PolicyService `pulumi:"services"`
	// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
	SessionTtl *int `pulumi:"sessionTtl"`
	// Name of an existing Spam filter profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s []PolicySrcaddr4 `pulumi:"srcaddr4s"`
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s []PolicySrcaddr6 `pulumi:"srcaddr6s"`
	// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate *string `pulumi:"srcaddrNegate"`
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs []PolicySrcintf `pulumi:"srcintfs"`
	// Name of an existing SSH filter profile.
	SshFilterProfile *string `pulumi:"sshFilterProfile"`
	// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
	SshPolicyRedirect *string `pulumi:"sshPolicyRedirect"`
	// Name of an existing SSL SSH profile.
	SslSshProfile *string `pulumi:"sslSshProfile"`
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver *int `pulumi:"tcpMssReceiver"`
	// Sender TCP maximum segment size (MSS).
	TcpMssSender *int `pulumi:"tcpMssSender"`
	// Traffic shaper.
	TrafficShaper *string `pulumi:"trafficShaper"`
	// Reverse traffic shaper.
	TrafficShaperReverse *string `pulumi:"trafficShaperReverse"`
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories []PolicyUrlCategory `pulumi:"urlCategories"`
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users []PolicyUser `pulumi:"users"`
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
	UtmStatus *string `pulumi:"utmStatus"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Name of an existing VoIP profile.
	VoipProfile *string `pulumi:"voipProfile"`
	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel *string `pulumi:"vpntunnel"`
	// Name of an existing Web application firewall profile.
	WafProfile *string `pulumi:"wafProfile"`
	// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
	Wanopt *string `pulumi:"wanopt"`
	// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
	WanoptDetection *string `pulumi:"wanoptDetection"`
	// WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
	WanoptPassiveOpt *string `pulumi:"wanoptPassiveOpt"`
	// WAN optimization peer.
	WanoptPeer *string `pulumi:"wanoptPeer"`
	// WAN optimization profile.
	WanoptProfile *string `pulumi:"wanoptProfile"`
	// Enable/disable web cache. Valid values: `enable`, `disable`.
	Webcache *string `pulumi:"webcache"`
	// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
	WebcacheHttps *string `pulumi:"webcacheHttps"`
	// Name of an existing Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
	// Webproxy forward server name.
	WebproxyForwardServer *string `pulumi:"webproxyForwardServer"`
	// Webproxy profile name.
	WebproxyProfile *string `pulumi:"webproxyProfile"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
	Action pulumi.StringPtrInput
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories PolicyAppCategoryArrayInput
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups PolicyAppGroupArrayInput
	// Name of an existing Application list.
	ApplicationList pulumi.StringPtrInput
	// Application ID list. The structure of `application` block is documented below.
	Applications PolicyApplicationArrayInput
	// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
	CaptivePortalExempt pulumi.StringPtrInput
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
	DiffservForward pulumi.StringPtrInput
	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
	DiffservReverse pulumi.StringPtrInput
	// Change packet's DiffServ to this value.
	DiffservcodeForward pulumi.StringPtrInput
	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev pulumi.StringPtrInput
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringPtrInput
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s PolicyDstaddr4ArrayInput
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s PolicyDstaddr6ArrayInput
	// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate pulumi.StringPtrInput
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs PolicyDstintfArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
	Fixedport pulumi.StringPtrInput
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups PolicyFssoGroupArrayInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups PolicyGroupArrayInput
	// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
	HttpPolicyRedirect pulumi.StringPtrInput
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringPtrInput
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
	Inbound pulumi.StringPtrInput
	// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
	InspectionMode pulumi.StringPtrInput
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
	InternetService pulumi.StringPtrInput
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups PolicyInternetServiceCustomGroupArrayInput
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms PolicyInternetServiceCustomArrayInput
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups PolicyInternetServiceGroupArrayInput
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds PolicyInternetServiceIdArrayInput
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames PolicyInternetServiceNameArrayInput
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate pulumi.StringPtrInput
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
	InternetServiceSrc pulumi.StringPtrInput
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups PolicyInternetServiceSrcCustomGroupArrayInput
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms PolicyInternetServiceSrcCustomArrayInput
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups PolicyInternetServiceSrcGroupArrayInput
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds PolicyInternetServiceSrcIdArrayInput
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames PolicyInternetServiceSrcNameArrayInput
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate pulumi.StringPtrInput
	// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Enable/disable source NAT. Valid values: `enable`, `disable`.
	Nat pulumi.StringPtrInput
	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
	Outbound pulumi.StringPtrInput
	// Per-IP traffic shaper.
	PerIpShaper pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// IPv4 pool names. The structure of `poolname4` block is documented below.
	Poolname4s PolicyPoolname4ArrayInput
	// IPv6 pool names. The structure of `poolname6` block is documented below.
	Poolname6s PolicyPoolname6ArrayInput
	// Name of profile group.
	ProfileGroup pulumi.StringPtrInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringPtrInput
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType pulumi.StringPtrInput
	// Schedule name.
	Schedule pulumi.StringPtrInput
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate pulumi.StringPtrInput
	// Service and service group names. The structure of `service` block is documented below.
	Services PolicyServiceArrayInput
	// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
	SessionTtl pulumi.IntPtrInput
	// Name of an existing Spam filter profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s PolicySrcaddr4ArrayInput
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s PolicySrcaddr6ArrayInput
	// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate pulumi.StringPtrInput
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs PolicySrcintfArrayInput
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringPtrInput
	// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
	SshPolicyRedirect pulumi.StringPtrInput
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringPtrInput
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver pulumi.IntPtrInput
	// Sender TCP maximum segment size (MSS).
	TcpMssSender pulumi.IntPtrInput
	// Traffic shaper.
	TrafficShaper pulumi.StringPtrInput
	// Reverse traffic shaper.
	TrafficShaperReverse pulumi.StringPtrInput
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories PolicyUrlCategoryArrayInput
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users PolicyUserArrayInput
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
	UtmStatus pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Name of an existing VoIP profile.
	VoipProfile pulumi.StringPtrInput
	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel pulumi.StringPtrInput
	// Name of an existing Web application firewall profile.
	WafProfile pulumi.StringPtrInput
	// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
	Wanopt pulumi.StringPtrInput
	// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
	WanoptDetection pulumi.StringPtrInput
	// WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
	WanoptPassiveOpt pulumi.StringPtrInput
	// WAN optimization peer.
	WanoptPeer pulumi.StringPtrInput
	// WAN optimization profile.
	WanoptProfile pulumi.StringPtrInput
	// Enable/disable web cache. Valid values: `enable`, `disable`.
	Webcache pulumi.StringPtrInput
	// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
	WebcacheHttps pulumi.StringPtrInput
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
	// Webproxy forward server name.
	WebproxyForwardServer pulumi.StringPtrInput
	// Webproxy profile name.
	WebproxyProfile pulumi.StringPtrInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (*Policy) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

// PolicyArrayInput is an input type that accepts PolicyArray and PolicyArrayOutput values.
// You can construct a concrete instance of `PolicyArrayInput` via:
//
//	PolicyArray{ PolicyArgs{...} }
type PolicyArrayInput interface {
	pulumi.Input

	ToPolicyArrayOutput() PolicyArrayOutput
	ToPolicyArrayOutputWithContext(context.Context) PolicyArrayOutput
}

type PolicyArray []PolicyInput

func (PolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (i PolicyArray) ToPolicyArrayOutput() PolicyArrayOutput {
	return i.ToPolicyArrayOutputWithContext(context.Background())
}

func (i PolicyArray) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyArrayOutput)
}

// PolicyMapInput is an input type that accepts PolicyMap and PolicyMapOutput values.
// You can construct a concrete instance of `PolicyMapInput` via:
//
//	PolicyMap{ "key": PolicyArgs{...} }
type PolicyMapInput interface {
	pulumi.Input

	ToPolicyMapOutput() PolicyMapOutput
	ToPolicyMapOutputWithContext(context.Context) PolicyMapOutput
}

type PolicyMap map[string]PolicyInput

func (PolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (i PolicyMap) ToPolicyMapOutput() PolicyMapOutput {
	return i.ToPolicyMapOutputWithContext(context.Background())
}

func (i PolicyMap) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapOutput)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
func (o PolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Application category ID list. The structure of `appCategory` block is documented below.
func (o PolicyOutput) AppCategories() PolicyAppCategoryArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyAppCategoryArrayOutput { return v.AppCategories }).(PolicyAppCategoryArrayOutput)
}

// Application group names. The structure of `appGroup` block is documented below.
func (o PolicyOutput) AppGroups() PolicyAppGroupArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyAppGroupArrayOutput { return v.AppGroups }).(PolicyAppGroupArrayOutput)
}

// Name of an existing Application list.
func (o PolicyOutput) ApplicationList() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.ApplicationList }).(pulumi.StringOutput)
}

// Application ID list. The structure of `application` block is documented below.
func (o PolicyOutput) Applications() PolicyApplicationArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyApplicationArrayOutput { return v.Applications }).(PolicyApplicationArrayOutput)
}

// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
func (o PolicyOutput) AutoAsicOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.AutoAsicOffload }).(pulumi.StringOutput)
}

// Name of an existing Antivirus profile.
func (o PolicyOutput) AvProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.AvProfile }).(pulumi.StringOutput)
}

// Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
func (o PolicyOutput) CaptivePortalExempt() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.CaptivePortalExempt }).(pulumi.StringOutput)
}

// Name of an existing CIFS profile.
func (o PolicyOutput) CifsProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.CifsProfile }).(pulumi.StringOutput)
}

// Comment.
func (o PolicyOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
func (o PolicyOutput) DiffservForward() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.DiffservForward }).(pulumi.StringOutput)
}

// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
func (o PolicyOutput) DiffservReverse() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.DiffservReverse }).(pulumi.StringOutput)
}

// Change packet's DiffServ to this value.
func (o PolicyOutput) DiffservcodeForward() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.DiffservcodeForward }).(pulumi.StringOutput)
}

// Change packet's reverse (reply) DiffServ to this value.
func (o PolicyOutput) DiffservcodeRev() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.DiffservcodeRev }).(pulumi.StringOutput)
}

// Name of an existing DLP sensor.
func (o PolicyOutput) DlpSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.DlpSensor }).(pulumi.StringOutput)
}

// Name of an existing DNS filter profile.
func (o PolicyOutput) DnsfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.DnsfilterProfile }).(pulumi.StringOutput)
}

// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
func (o PolicyOutput) Dstaddr4s() PolicyDstaddr4ArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyDstaddr4ArrayOutput { return v.Dstaddr4s }).(PolicyDstaddr4ArrayOutput)
}

// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
func (o PolicyOutput) Dstaddr6s() PolicyDstaddr6ArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyDstaddr6ArrayOutput { return v.Dstaddr6s }).(PolicyDstaddr6ArrayOutput)
}

// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
func (o PolicyOutput) DstaddrNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.DstaddrNegate }).(pulumi.StringOutput)
}

// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
func (o PolicyOutput) Dstintfs() PolicyDstintfArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyDstintfArrayOutput { return v.Dstintfs }).(PolicyDstintfArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o PolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Name of an existing email filter profile.
func (o PolicyOutput) EmailfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.EmailfilterProfile }).(pulumi.StringOutput)
}

// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
func (o PolicyOutput) Fixedport() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Fixedport }).(pulumi.StringOutput)
}

// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
func (o PolicyOutput) FssoGroups() PolicyFssoGroupArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyFssoGroupArrayOutput { return v.FssoGroups }).(PolicyFssoGroupArrayOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o PolicyOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
func (o PolicyOutput) Groups() PolicyGroupArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyGroupArrayOutput { return v.Groups }).(PolicyGroupArrayOutput)
}

// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
func (o PolicyOutput) HttpPolicyRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.HttpPolicyRedirect }).(pulumi.StringOutput)
}

// Name of an existing ICAP profile.
func (o PolicyOutput) IcapProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.IcapProfile }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
func (o PolicyOutput) Inbound() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Inbound }).(pulumi.StringOutput)
}

// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
func (o PolicyOutput) InspectionMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.InspectionMode }).(pulumi.StringOutput)
}

// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
func (o PolicyOutput) InternetService() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.InternetService }).(pulumi.StringOutput)
}

// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
func (o PolicyOutput) InternetServiceCustomGroups() PolicyInternetServiceCustomGroupArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyInternetServiceCustomGroupArrayOutput { return v.InternetServiceCustomGroups }).(PolicyInternetServiceCustomGroupArrayOutput)
}

// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
func (o PolicyOutput) InternetServiceCustoms() PolicyInternetServiceCustomArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyInternetServiceCustomArrayOutput { return v.InternetServiceCustoms }).(PolicyInternetServiceCustomArrayOutput)
}

// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
func (o PolicyOutput) InternetServiceGroups() PolicyInternetServiceGroupArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyInternetServiceGroupArrayOutput { return v.InternetServiceGroups }).(PolicyInternetServiceGroupArrayOutput)
}

// Internet Service ID. The structure of `internetServiceId` block is documented below.
func (o PolicyOutput) InternetServiceIds() PolicyInternetServiceIdArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyInternetServiceIdArrayOutput { return v.InternetServiceIds }).(PolicyInternetServiceIdArrayOutput)
}

// Internet Service name. The structure of `internetServiceName` block is documented below.
func (o PolicyOutput) InternetServiceNames() PolicyInternetServiceNameArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyInternetServiceNameArrayOutput { return v.InternetServiceNames }).(PolicyInternetServiceNameArrayOutput)
}

// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o PolicyOutput) InternetServiceNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.InternetServiceNegate }).(pulumi.StringOutput)
}

// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
func (o PolicyOutput) InternetServiceSrc() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.InternetServiceSrc }).(pulumi.StringOutput)
}

// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
func (o PolicyOutput) InternetServiceSrcCustomGroups() PolicyInternetServiceSrcCustomGroupArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyInternetServiceSrcCustomGroupArrayOutput {
		return v.InternetServiceSrcCustomGroups
	}).(PolicyInternetServiceSrcCustomGroupArrayOutput)
}

// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
func (o PolicyOutput) InternetServiceSrcCustoms() PolicyInternetServiceSrcCustomArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyInternetServiceSrcCustomArrayOutput { return v.InternetServiceSrcCustoms }).(PolicyInternetServiceSrcCustomArrayOutput)
}

// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
func (o PolicyOutput) InternetServiceSrcGroups() PolicyInternetServiceSrcGroupArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyInternetServiceSrcGroupArrayOutput { return v.InternetServiceSrcGroups }).(PolicyInternetServiceSrcGroupArrayOutput)
}

// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
func (o PolicyOutput) InternetServiceSrcIds() PolicyInternetServiceSrcIdArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyInternetServiceSrcIdArrayOutput { return v.InternetServiceSrcIds }).(PolicyInternetServiceSrcIdArrayOutput)
}

// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
func (o PolicyOutput) InternetServiceSrcNames() PolicyInternetServiceSrcNameArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyInternetServiceSrcNameArrayOutput { return v.InternetServiceSrcNames }).(PolicyInternetServiceSrcNameArrayOutput)
}

// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o PolicyOutput) InternetServiceSrcNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.InternetServiceSrcNegate }).(pulumi.StringOutput)
}

// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
func (o PolicyOutput) Ippool() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Ippool }).(pulumi.StringOutput)
}

// Name of an existing IPS sensor.
func (o PolicyOutput) IpsSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.IpsSensor }).(pulumi.StringOutput)
}

// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
func (o PolicyOutput) Logtraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Logtraffic }).(pulumi.StringOutput)
}

// Record logs when a session starts. Valid values: `enable`, `disable`.
func (o PolicyOutput) LogtrafficStart() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.LogtrafficStart }).(pulumi.StringOutput)
}

// Policy name.
func (o PolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable source NAT. Valid values: `enable`, `disable`.
func (o PolicyOutput) Nat() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Nat }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
func (o PolicyOutput) Outbound() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Outbound }).(pulumi.StringOutput)
}

// Per-IP traffic shaper.
func (o PolicyOutput) PerIpShaper() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.PerIpShaper }).(pulumi.StringOutput)
}

// Policy ID.
func (o PolicyOutput) Policyid() pulumi.IntOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntOutput { return v.Policyid }).(pulumi.IntOutput)
}

// IPv4 pool names. The structure of `poolname4` block is documented below.
func (o PolicyOutput) Poolname4s() PolicyPoolname4ArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyPoolname4ArrayOutput { return v.Poolname4s }).(PolicyPoolname4ArrayOutput)
}

// IPv6 pool names. The structure of `poolname6` block is documented below.
func (o PolicyOutput) Poolname6s() PolicyPoolname6ArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyPoolname6ArrayOutput { return v.Poolname6s }).(PolicyPoolname6ArrayOutput)
}

// Name of profile group.
func (o PolicyOutput) ProfileGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.ProfileGroup }).(pulumi.StringOutput)
}

// Name of an existing Protocol options profile.
func (o PolicyOutput) ProfileProtocolOptions() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.ProfileProtocolOptions }).(pulumi.StringOutput)
}

// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
func (o PolicyOutput) ProfileType() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.ProfileType }).(pulumi.StringOutput)
}

// Schedule name.
func (o PolicyOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Schedule }).(pulumi.StringOutput)
}

// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o PolicyOutput) ServiceNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.ServiceNegate }).(pulumi.StringOutput)
}

// Service and service group names. The structure of `service` block is documented below.
func (o PolicyOutput) Services() PolicyServiceArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyServiceArrayOutput { return v.Services }).(PolicyServiceArrayOutput)
}

// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
func (o PolicyOutput) SessionTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntOutput { return v.SessionTtl }).(pulumi.IntOutput)
}

// Name of an existing Spam filter profile.
func (o PolicyOutput) SpamfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.SpamfilterProfile }).(pulumi.StringOutput)
}

// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
func (o PolicyOutput) Srcaddr4s() PolicySrcaddr4ArrayOutput {
	return o.ApplyT(func(v *Policy) PolicySrcaddr4ArrayOutput { return v.Srcaddr4s }).(PolicySrcaddr4ArrayOutput)
}

// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
func (o PolicyOutput) Srcaddr6s() PolicySrcaddr6ArrayOutput {
	return o.ApplyT(func(v *Policy) PolicySrcaddr6ArrayOutput { return v.Srcaddr6s }).(PolicySrcaddr6ArrayOutput)
}

// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
func (o PolicyOutput) SrcaddrNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.SrcaddrNegate }).(pulumi.StringOutput)
}

// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
func (o PolicyOutput) Srcintfs() PolicySrcintfArrayOutput {
	return o.ApplyT(func(v *Policy) PolicySrcintfArrayOutput { return v.Srcintfs }).(PolicySrcintfArrayOutput)
}

// Name of an existing SSH filter profile.
func (o PolicyOutput) SshFilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.SshFilterProfile }).(pulumi.StringOutput)
}

// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
func (o PolicyOutput) SshPolicyRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.SshPolicyRedirect }).(pulumi.StringOutput)
}

// Name of an existing SSL SSH profile.
func (o PolicyOutput) SslSshProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.SslSshProfile }).(pulumi.StringOutput)
}

// Enable or disable this policy. Valid values: `enable`, `disable`.
func (o PolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Receiver TCP maximum segment size (MSS).
func (o PolicyOutput) TcpMssReceiver() pulumi.IntOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntOutput { return v.TcpMssReceiver }).(pulumi.IntOutput)
}

// Sender TCP maximum segment size (MSS).
func (o PolicyOutput) TcpMssSender() pulumi.IntOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntOutput { return v.TcpMssSender }).(pulumi.IntOutput)
}

// Traffic shaper.
func (o PolicyOutput) TrafficShaper() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.TrafficShaper }).(pulumi.StringOutput)
}

// Reverse traffic shaper.
func (o PolicyOutput) TrafficShaperReverse() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.TrafficShaperReverse }).(pulumi.StringOutput)
}

// URL category ID list. The structure of `urlCategory` block is documented below.
func (o PolicyOutput) UrlCategories() PolicyUrlCategoryArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyUrlCategoryArrayOutput { return v.UrlCategories }).(PolicyUrlCategoryArrayOutput)
}

// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
func (o PolicyOutput) Users() PolicyUserArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyUserArrayOutput { return v.Users }).(PolicyUserArrayOutput)
}

// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
func (o PolicyOutput) UtmStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.UtmStatus }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o PolicyOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o PolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Name of an existing VoIP profile.
func (o PolicyOutput) VoipProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.VoipProfile }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
func (o PolicyOutput) Vpntunnel() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Vpntunnel }).(pulumi.StringOutput)
}

// Name of an existing Web application firewall profile.
func (o PolicyOutput) WafProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.WafProfile }).(pulumi.StringOutput)
}

// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
func (o PolicyOutput) Wanopt() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Wanopt }).(pulumi.StringOutput)
}

// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
func (o PolicyOutput) WanoptDetection() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.WanoptDetection }).(pulumi.StringOutput)
}

// WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
func (o PolicyOutput) WanoptPassiveOpt() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.WanoptPassiveOpt }).(pulumi.StringOutput)
}

// WAN optimization peer.
func (o PolicyOutput) WanoptPeer() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.WanoptPeer }).(pulumi.StringOutput)
}

// WAN optimization profile.
func (o PolicyOutput) WanoptProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.WanoptProfile }).(pulumi.StringOutput)
}

// Enable/disable web cache. Valid values: `enable`, `disable`.
func (o PolicyOutput) Webcache() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Webcache }).(pulumi.StringOutput)
}

// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
func (o PolicyOutput) WebcacheHttps() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.WebcacheHttps }).(pulumi.StringOutput)
}

// Name of an existing Web filter profile.
func (o PolicyOutput) WebfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.WebfilterProfile }).(pulumi.StringOutput)
}

// Webproxy forward server name.
func (o PolicyOutput) WebproxyForwardServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.WebproxyForwardServer }).(pulumi.StringOutput)
}

// Webproxy profile name.
func (o PolicyOutput) WebproxyProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.WebproxyProfile }).(pulumi.StringOutput)
}

type PolicyArrayOutput struct{ *pulumi.OutputState }

func (PolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (o PolicyArrayOutput) ToPolicyArrayOutput() PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) Index(i pulumi.IntInput) PolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].([]*Policy)[vs[1].(int)]
	}).(PolicyOutput)
}

type PolicyMapOutput struct{ *pulumi.OutputState }

func (PolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (o PolicyMapOutput) ToPolicyMapOutput() PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) MapIndex(k pulumi.StringInput) PolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].(map[string]*Policy)[vs[1].(string)]
	}).(PolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyInput)(nil)).Elem(), &Policy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyArrayInput)(nil)).Elem(), PolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapInput)(nil)).Elem(), PolicyMap{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyArrayOutput{})
	pulumi.RegisterOutputType(PolicyMapOutput{})
}
