// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure IPv4 to IPv6 policies. Applies to FortiOS Version `<= 7.0.0`.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			trnameVip46, err := firewall.NewVip46(ctx, "trnameVip46", &firewall.Vip46Args{
//				ArpReply:    pulumi.String("enable"),
//				Color:       pulumi.Int(0),
//				Extip:       pulumi.String("10.1.100.55"),
//				Extport:     pulumi.String("0-65535"),
//				Fosid:       pulumi.Int(0),
//				LdbMethod:   pulumi.String("static"),
//				Mappedip:    pulumi.String("2000:172:16:200::55"),
//				Mappedport:  pulumi.String("0-65535"),
//				Portforward: pulumi.String("disable"),
//				Protocol:    pulumi.String("tcp"),
//				Type:        pulumi.String("static-nat"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firewall.NewPolicy46(ctx, "trnamePolicy46", &firewall.Policy46Args{
//				Action:         pulumi.String("deny"),
//				Dstintf:        pulumi.String("port3"),
//				Fixedport:      pulumi.String("disable"),
//				Ippool:         pulumi.String("disable"),
//				Logtraffic:     pulumi.String("disable"),
//				PermitAnyHost:  pulumi.String("disable"),
//				Policyid:       pulumi.Int(2),
//				Schedule:       pulumi.String("always"),
//				Srcintf:        pulumi.String("port2"),
//				Status:         pulumi.String("enable"),
//				TcpMssReceiver: pulumi.Int(0),
//				TcpMssSender:   pulumi.Int(0),
//				Dstaddrs: firewall.Policy46DstaddrArray{
//					&firewall.Policy46DstaddrArgs{
//						Name: trnameVip46.Name,
//					},
//				},
//				Services: firewall.Policy46ServiceArray{
//					&firewall.Policy46ServiceArgs{
//						Name: pulumi.String("ALL"),
//					},
//				},
//				Srcaddrs: firewall.Policy46SrcaddrArray{
//					&firewall.Policy46SrcaddrArgs{
//						Name: pulumi.String("FIREWALL_AUTH_PORTAL_ADDRESS"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Firewall Policy46 can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:firewall/policy46:Policy46 labelname {{policyid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:firewall/policy46:Policy46 labelname {{policyid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Policy46 struct {
	pulumi.CustomResourceState

	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Destination address objects. The structure of `dstaddr` block is documented below.
	Dstaddrs Policy46DstaddrArrayOutput `pulumi:"dstaddrs"`
	// Destination interface name.
	Dstintf pulumi.StringOutput `pulumi:"dstintf"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Enable/disable fixed port for this policy. Valid values: `enable`, `disable`.
	Fixedport pulumi.StringOutput `pulumi:"fixedport"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Enable/disable use of IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool pulumi.StringOutput `pulumi:"ippool"`
	// Enable/disable traffic logging for this policy. Valid values: `enable`, `disable`.
	Logtraffic pulumi.StringOutput `pulumi:"logtraffic"`
	// Record logs when a session starts and ends. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringOutput `pulumi:"logtrafficStart"`
	// Policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Per IP traffic shaper.
	PerIpShaper pulumi.StringOutput `pulumi:"perIpShaper"`
	// Enable/disable allowing any host. Valid values: `enable`, `disable`.
	PermitAnyHost pulumi.StringOutput `pulumi:"permitAnyHost"`
	// Policy ID.
	Policyid pulumi.IntOutput `pulumi:"policyid"`
	// IP Pool names. The structure of `poolname` block is documented below.
	Poolnames Policy46PoolnameArrayOutput `pulumi:"poolnames"`
	// Schedule name.
	Schedule pulumi.StringOutput `pulumi:"schedule"`
	// Service name. The structure of `service` block is documented below.
	Services Policy46ServiceArrayOutput `pulumi:"services"`
	// Source address objects. The structure of `srcaddr` block is documented below.
	Srcaddrs Policy46SrcaddrArrayOutput `pulumi:"srcaddrs"`
	// Source interface name.
	Srcintf pulumi.StringOutput `pulumi:"srcintf"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// TCP Maximum Segment Size value of receiver (0 - 65535, default = 0)
	TcpMssReceiver pulumi.IntOutput `pulumi:"tcpMssReceiver"`
	// TCP Maximum Segment Size value of sender (0 - 65535, default = 0).
	TcpMssSender pulumi.IntOutput `pulumi:"tcpMssSender"`
	// Traffic shaper.
	TrafficShaper pulumi.StringOutput `pulumi:"trafficShaper"`
	// Reverse traffic shaper.
	TrafficShaperReverse pulumi.StringOutput `pulumi:"trafficShaperReverse"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewPolicy46 registers a new resource with the given unique name, arguments, and options.
func NewPolicy46(ctx *pulumi.Context,
	name string, args *Policy46Args, opts ...pulumi.ResourceOption) (*Policy46, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dstaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Dstaddrs'")
	}
	if args.Dstintf == nil {
		return nil, errors.New("invalid value for required argument 'Dstintf'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	if args.Srcaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Srcaddrs'")
	}
	if args.Srcintf == nil {
		return nil, errors.New("invalid value for required argument 'Srcintf'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Policy46
	err := ctx.RegisterResource("fortios:firewall/policy46:Policy46", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy46 gets an existing Policy46 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy46(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Policy46State, opts ...pulumi.ResourceOption) (*Policy46, error) {
	var resource Policy46
	err := ctx.ReadResource("fortios:firewall/policy46:Policy46", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy46 resources.
type policy46State struct {
	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Destination address objects. The structure of `dstaddr` block is documented below.
	Dstaddrs []Policy46Dstaddr `pulumi:"dstaddrs"`
	// Destination interface name.
	Dstintf *string `pulumi:"dstintf"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable fixed port for this policy. Valid values: `enable`, `disable`.
	Fixedport *string `pulumi:"fixedport"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable use of IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool *string `pulumi:"ippool"`
	// Enable/disable traffic logging for this policy. Valid values: `enable`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts and ends. Valid values: `enable`, `disable`.
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Per IP traffic shaper.
	PerIpShaper *string `pulumi:"perIpShaper"`
	// Enable/disable allowing any host. Valid values: `enable`, `disable`.
	PermitAnyHost *string `pulumi:"permitAnyHost"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// IP Pool names. The structure of `poolname` block is documented below.
	Poolnames []Policy46Poolname `pulumi:"poolnames"`
	// Schedule name.
	Schedule *string `pulumi:"schedule"`
	// Service name. The structure of `service` block is documented below.
	Services []Policy46Service `pulumi:"services"`
	// Source address objects. The structure of `srcaddr` block is documented below.
	Srcaddrs []Policy46Srcaddr `pulumi:"srcaddrs"`
	// Source interface name.
	Srcintf *string `pulumi:"srcintf"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// TCP Maximum Segment Size value of receiver (0 - 65535, default = 0)
	TcpMssReceiver *int `pulumi:"tcpMssReceiver"`
	// TCP Maximum Segment Size value of sender (0 - 65535, default = 0).
	TcpMssSender *int `pulumi:"tcpMssSender"`
	// Traffic shaper.
	TrafficShaper *string `pulumi:"trafficShaper"`
	// Reverse traffic shaper.
	TrafficShaperReverse *string `pulumi:"trafficShaperReverse"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type Policy46State struct {
	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Destination address objects. The structure of `dstaddr` block is documented below.
	Dstaddrs Policy46DstaddrArrayInput
	// Destination interface name.
	Dstintf pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable fixed port for this policy. Valid values: `enable`, `disable`.
	Fixedport pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable use of IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool pulumi.StringPtrInput
	// Enable/disable traffic logging for this policy. Valid values: `enable`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts and ends. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Per IP traffic shaper.
	PerIpShaper pulumi.StringPtrInput
	// Enable/disable allowing any host. Valid values: `enable`, `disable`.
	PermitAnyHost pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// IP Pool names. The structure of `poolname` block is documented below.
	Poolnames Policy46PoolnameArrayInput
	// Schedule name.
	Schedule pulumi.StringPtrInput
	// Service name. The structure of `service` block is documented below.
	Services Policy46ServiceArrayInput
	// Source address objects. The structure of `srcaddr` block is documented below.
	Srcaddrs Policy46SrcaddrArrayInput
	// Source interface name.
	Srcintf pulumi.StringPtrInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// TCP Maximum Segment Size value of receiver (0 - 65535, default = 0)
	TcpMssReceiver pulumi.IntPtrInput
	// TCP Maximum Segment Size value of sender (0 - 65535, default = 0).
	TcpMssSender pulumi.IntPtrInput
	// Traffic shaper.
	TrafficShaper pulumi.StringPtrInput
	// Reverse traffic shaper.
	TrafficShaperReverse pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Policy46State) ElementType() reflect.Type {
	return reflect.TypeOf((*policy46State)(nil)).Elem()
}

type policy46Args struct {
	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Destination address objects. The structure of `dstaddr` block is documented below.
	Dstaddrs []Policy46Dstaddr `pulumi:"dstaddrs"`
	// Destination interface name.
	Dstintf string `pulumi:"dstintf"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable fixed port for this policy. Valid values: `enable`, `disable`.
	Fixedport *string `pulumi:"fixedport"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable use of IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool *string `pulumi:"ippool"`
	// Enable/disable traffic logging for this policy. Valid values: `enable`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts and ends. Valid values: `enable`, `disable`.
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Per IP traffic shaper.
	PerIpShaper *string `pulumi:"perIpShaper"`
	// Enable/disable allowing any host. Valid values: `enable`, `disable`.
	PermitAnyHost *string `pulumi:"permitAnyHost"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// IP Pool names. The structure of `poolname` block is documented below.
	Poolnames []Policy46Poolname `pulumi:"poolnames"`
	// Schedule name.
	Schedule string `pulumi:"schedule"`
	// Service name. The structure of `service` block is documented below.
	Services []Policy46Service `pulumi:"services"`
	// Source address objects. The structure of `srcaddr` block is documented below.
	Srcaddrs []Policy46Srcaddr `pulumi:"srcaddrs"`
	// Source interface name.
	Srcintf string `pulumi:"srcintf"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// TCP Maximum Segment Size value of receiver (0 - 65535, default = 0)
	TcpMssReceiver *int `pulumi:"tcpMssReceiver"`
	// TCP Maximum Segment Size value of sender (0 - 65535, default = 0).
	TcpMssSender *int `pulumi:"tcpMssSender"`
	// Traffic shaper.
	TrafficShaper *string `pulumi:"trafficShaper"`
	// Reverse traffic shaper.
	TrafficShaperReverse *string `pulumi:"trafficShaperReverse"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Policy46 resource.
type Policy46Args struct {
	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Destination address objects. The structure of `dstaddr` block is documented below.
	Dstaddrs Policy46DstaddrArrayInput
	// Destination interface name.
	Dstintf pulumi.StringInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable fixed port for this policy. Valid values: `enable`, `disable`.
	Fixedport pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable use of IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool pulumi.StringPtrInput
	// Enable/disable traffic logging for this policy. Valid values: `enable`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts and ends. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Per IP traffic shaper.
	PerIpShaper pulumi.StringPtrInput
	// Enable/disable allowing any host. Valid values: `enable`, `disable`.
	PermitAnyHost pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// IP Pool names. The structure of `poolname` block is documented below.
	Poolnames Policy46PoolnameArrayInput
	// Schedule name.
	Schedule pulumi.StringInput
	// Service name. The structure of `service` block is documented below.
	Services Policy46ServiceArrayInput
	// Source address objects. The structure of `srcaddr` block is documented below.
	Srcaddrs Policy46SrcaddrArrayInput
	// Source interface name.
	Srcintf pulumi.StringInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// TCP Maximum Segment Size value of receiver (0 - 65535, default = 0)
	TcpMssReceiver pulumi.IntPtrInput
	// TCP Maximum Segment Size value of sender (0 - 65535, default = 0).
	TcpMssSender pulumi.IntPtrInput
	// Traffic shaper.
	TrafficShaper pulumi.StringPtrInput
	// Reverse traffic shaper.
	TrafficShaperReverse pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Policy46Args) ElementType() reflect.Type {
	return reflect.TypeOf((*policy46Args)(nil)).Elem()
}

type Policy46Input interface {
	pulumi.Input

	ToPolicy46Output() Policy46Output
	ToPolicy46OutputWithContext(ctx context.Context) Policy46Output
}

func (*Policy46) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy46)(nil)).Elem()
}

func (i *Policy46) ToPolicy46Output() Policy46Output {
	return i.ToPolicy46OutputWithContext(context.Background())
}

func (i *Policy46) ToPolicy46OutputWithContext(ctx context.Context) Policy46Output {
	return pulumi.ToOutputWithContext(ctx, i).(Policy46Output)
}

// Policy46ArrayInput is an input type that accepts Policy46Array and Policy46ArrayOutput values.
// You can construct a concrete instance of `Policy46ArrayInput` via:
//
//	Policy46Array{ Policy46Args{...} }
type Policy46ArrayInput interface {
	pulumi.Input

	ToPolicy46ArrayOutput() Policy46ArrayOutput
	ToPolicy46ArrayOutputWithContext(context.Context) Policy46ArrayOutput
}

type Policy46Array []Policy46Input

func (Policy46Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy46)(nil)).Elem()
}

func (i Policy46Array) ToPolicy46ArrayOutput() Policy46ArrayOutput {
	return i.ToPolicy46ArrayOutputWithContext(context.Background())
}

func (i Policy46Array) ToPolicy46ArrayOutputWithContext(ctx context.Context) Policy46ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Policy46ArrayOutput)
}

// Policy46MapInput is an input type that accepts Policy46Map and Policy46MapOutput values.
// You can construct a concrete instance of `Policy46MapInput` via:
//
//	Policy46Map{ "key": Policy46Args{...} }
type Policy46MapInput interface {
	pulumi.Input

	ToPolicy46MapOutput() Policy46MapOutput
	ToPolicy46MapOutputWithContext(context.Context) Policy46MapOutput
}

type Policy46Map map[string]Policy46Input

func (Policy46Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy46)(nil)).Elem()
}

func (i Policy46Map) ToPolicy46MapOutput() Policy46MapOutput {
	return i.ToPolicy46MapOutputWithContext(context.Background())
}

func (i Policy46Map) ToPolicy46MapOutputWithContext(ctx context.Context) Policy46MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Policy46MapOutput)
}

type Policy46Output struct{ *pulumi.OutputState }

func (Policy46Output) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy46)(nil)).Elem()
}

func (o Policy46Output) ToPolicy46Output() Policy46Output {
	return o
}

func (o Policy46Output) ToPolicy46OutputWithContext(ctx context.Context) Policy46Output {
	return o
}

// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
func (o Policy46Output) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Comment.
func (o Policy46Output) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Destination address objects. The structure of `dstaddr` block is documented below.
func (o Policy46Output) Dstaddrs() Policy46DstaddrArrayOutput {
	return o.ApplyT(func(v *Policy46) Policy46DstaddrArrayOutput { return v.Dstaddrs }).(Policy46DstaddrArrayOutput)
}

// Destination interface name.
func (o Policy46Output) Dstintf() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringOutput { return v.Dstintf }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o Policy46Output) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Enable/disable fixed port for this policy. Valid values: `enable`, `disable`.
func (o Policy46Output) Fixedport() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringOutput { return v.Fixedport }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o Policy46Output) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Enable/disable use of IP Pools for source NAT. Valid values: `enable`, `disable`.
func (o Policy46Output) Ippool() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringOutput { return v.Ippool }).(pulumi.StringOutput)
}

// Enable/disable traffic logging for this policy. Valid values: `enable`, `disable`.
func (o Policy46Output) Logtraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringOutput { return v.Logtraffic }).(pulumi.StringOutput)
}

// Record logs when a session starts and ends. Valid values: `enable`, `disable`.
func (o Policy46Output) LogtrafficStart() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringOutput { return v.LogtrafficStart }).(pulumi.StringOutput)
}

// Policy name.
func (o Policy46Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Per IP traffic shaper.
func (o Policy46Output) PerIpShaper() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringOutput { return v.PerIpShaper }).(pulumi.StringOutput)
}

// Enable/disable allowing any host. Valid values: `enable`, `disable`.
func (o Policy46Output) PermitAnyHost() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringOutput { return v.PermitAnyHost }).(pulumi.StringOutput)
}

// Policy ID.
func (o Policy46Output) Policyid() pulumi.IntOutput {
	return o.ApplyT(func(v *Policy46) pulumi.IntOutput { return v.Policyid }).(pulumi.IntOutput)
}

// IP Pool names. The structure of `poolname` block is documented below.
func (o Policy46Output) Poolnames() Policy46PoolnameArrayOutput {
	return o.ApplyT(func(v *Policy46) Policy46PoolnameArrayOutput { return v.Poolnames }).(Policy46PoolnameArrayOutput)
}

// Schedule name.
func (o Policy46Output) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringOutput { return v.Schedule }).(pulumi.StringOutput)
}

// Service name. The structure of `service` block is documented below.
func (o Policy46Output) Services() Policy46ServiceArrayOutput {
	return o.ApplyT(func(v *Policy46) Policy46ServiceArrayOutput { return v.Services }).(Policy46ServiceArrayOutput)
}

// Source address objects. The structure of `srcaddr` block is documented below.
func (o Policy46Output) Srcaddrs() Policy46SrcaddrArrayOutput {
	return o.ApplyT(func(v *Policy46) Policy46SrcaddrArrayOutput { return v.Srcaddrs }).(Policy46SrcaddrArrayOutput)
}

// Source interface name.
func (o Policy46Output) Srcintf() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringOutput { return v.Srcintf }).(pulumi.StringOutput)
}

// Enable/disable this policy. Valid values: `enable`, `disable`.
func (o Policy46Output) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// TCP Maximum Segment Size value of receiver (0 - 65535, default = 0)
func (o Policy46Output) TcpMssReceiver() pulumi.IntOutput {
	return o.ApplyT(func(v *Policy46) pulumi.IntOutput { return v.TcpMssReceiver }).(pulumi.IntOutput)
}

// TCP Maximum Segment Size value of sender (0 - 65535, default = 0).
func (o Policy46Output) TcpMssSender() pulumi.IntOutput {
	return o.ApplyT(func(v *Policy46) pulumi.IntOutput { return v.TcpMssSender }).(pulumi.IntOutput)
}

// Traffic shaper.
func (o Policy46Output) TrafficShaper() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringOutput { return v.TrafficShaper }).(pulumi.StringOutput)
}

// Reverse traffic shaper.
func (o Policy46Output) TrafficShaperReverse() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringOutput { return v.TrafficShaperReverse }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o Policy46Output) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o Policy46Output) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy46) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type Policy46ArrayOutput struct{ *pulumi.OutputState }

func (Policy46ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy46)(nil)).Elem()
}

func (o Policy46ArrayOutput) ToPolicy46ArrayOutput() Policy46ArrayOutput {
	return o
}

func (o Policy46ArrayOutput) ToPolicy46ArrayOutputWithContext(ctx context.Context) Policy46ArrayOutput {
	return o
}

func (o Policy46ArrayOutput) Index(i pulumi.IntInput) Policy46Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Policy46 {
		return vs[0].([]*Policy46)[vs[1].(int)]
	}).(Policy46Output)
}

type Policy46MapOutput struct{ *pulumi.OutputState }

func (Policy46MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy46)(nil)).Elem()
}

func (o Policy46MapOutput) ToPolicy46MapOutput() Policy46MapOutput {
	return o
}

func (o Policy46MapOutput) ToPolicy46MapOutputWithContext(ctx context.Context) Policy46MapOutput {
	return o
}

func (o Policy46MapOutput) MapIndex(k pulumi.StringInput) Policy46Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Policy46 {
		return vs[0].(map[string]*Policy46)[vs[1].(string)]
	}).(Policy46Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Policy46Input)(nil)).Elem(), &Policy46{})
	pulumi.RegisterInputType(reflect.TypeOf((*Policy46ArrayInput)(nil)).Elem(), Policy46Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*Policy46MapInput)(nil)).Elem(), Policy46Map{})
	pulumi.RegisterOutputType(Policy46Output{})
	pulumi.RegisterOutputType(Policy46ArrayOutput{})
	pulumi.RegisterOutputType(Policy46MapOutput{})
}
