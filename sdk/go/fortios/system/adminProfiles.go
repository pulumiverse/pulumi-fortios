// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Provides a resource to configure access profiles of FortiOS.
//
// !> **Warning:** The resource will be deprecated and replaced by new resource `system.Accprofile`, we recommend that you use the new resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewAdminProfiles(ctx, "test1", &system.AdminProfilesArgs{
//				AdmintimeoutOverride: pulumi.String("disable"),
//				Authgrp:              pulumi.String("none"),
//				Comments:             pulumi.String("test"),
//				Ftviewgrp:            pulumi.String("read"),
//				Fwgrp:                pulumi.String("none"),
//				Loggrp:               pulumi.String("none"),
//				Netgrp:               pulumi.String("none"),
//				Scope:                pulumi.String("vdom"),
//				Secfabgrp:            pulumi.String("read-write"),
//				Sysgrp:               pulumi.String("read"),
//				Utmgrp:               pulumi.String("none"),
//				Vpngrp:               pulumi.String("none"),
//				Wanoptgrp:            pulumi.String("none"),
//				Wifi:                 pulumi.String("none"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AdminProfiles struct {
	pulumi.CustomResourceState

	// Enable/disable overriding the global administrator idle timeout.
	AdmintimeoutOverride pulumi.StringOutput `pulumi:"admintimeoutOverride"`
	// Administrator access to Users and Devices.
	Authgrp pulumi.StringOutput `pulumi:"authgrp"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// FortiView.
	Ftviewgrp pulumi.StringOutput `pulumi:"ftviewgrp"`
	// Administrator access to the Firewall configuration.
	Fwgrp pulumi.StringOutput `pulumi:"fwgrp"`
	// Administrator access to Logging and Reporting including viewing log messages.
	Loggrp pulumi.StringOutput `pulumi:"loggrp"`
	// Profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Network Configuration.
	Netgrp pulumi.StringOutput `pulumi:"netgrp"`
	// Scope of admin access.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// Security Fabric.
	Secfabgrp pulumi.StringOutput `pulumi:"secfabgrp"`
	// System Configuration.
	Sysgrp pulumi.StringOutput `pulumi:"sysgrp"`
	// Administrator access to Security Profiles.
	Utmgrp pulumi.StringOutput `pulumi:"utmgrp"`
	// Administrator access to IPsec, SSL, PPTP, and L2TP VPN.
	Vpngrp pulumi.StringOutput `pulumi:"vpngrp"`
	// Administrator access to WAN Opt & Cache.
	Wanoptgrp pulumi.StringOutput `pulumi:"wanoptgrp"`
	// Administrator access to the WiFi controller and Switch controller.
	Wifi pulumi.StringOutput `pulumi:"wifi"`
}

// NewAdminProfiles registers a new resource with the given unique name, arguments, and options.
func NewAdminProfiles(ctx *pulumi.Context,
	name string, args *AdminProfilesArgs, opts ...pulumi.ResourceOption) (*AdminProfiles, error) {
	if args == nil {
		args = &AdminProfilesArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AdminProfiles
	err := ctx.RegisterResource("fortios:system/adminProfiles:AdminProfiles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdminProfiles gets an existing AdminProfiles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdminProfiles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdminProfilesState, opts ...pulumi.ResourceOption) (*AdminProfiles, error) {
	var resource AdminProfiles
	err := ctx.ReadResource("fortios:system/adminProfiles:AdminProfiles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdminProfiles resources.
type adminProfilesState struct {
	// Enable/disable overriding the global administrator idle timeout.
	AdmintimeoutOverride *string `pulumi:"admintimeoutOverride"`
	// Administrator access to Users and Devices.
	Authgrp *string `pulumi:"authgrp"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// FortiView.
	Ftviewgrp *string `pulumi:"ftviewgrp"`
	// Administrator access to the Firewall configuration.
	Fwgrp *string `pulumi:"fwgrp"`
	// Administrator access to Logging and Reporting including viewing log messages.
	Loggrp *string `pulumi:"loggrp"`
	// Profile name.
	Name *string `pulumi:"name"`
	// Network Configuration.
	Netgrp *string `pulumi:"netgrp"`
	// Scope of admin access.
	Scope *string `pulumi:"scope"`
	// Security Fabric.
	Secfabgrp *string `pulumi:"secfabgrp"`
	// System Configuration.
	Sysgrp *string `pulumi:"sysgrp"`
	// Administrator access to Security Profiles.
	Utmgrp *string `pulumi:"utmgrp"`
	// Administrator access to IPsec, SSL, PPTP, and L2TP VPN.
	Vpngrp *string `pulumi:"vpngrp"`
	// Administrator access to WAN Opt & Cache.
	Wanoptgrp *string `pulumi:"wanoptgrp"`
	// Administrator access to the WiFi controller and Switch controller.
	Wifi *string `pulumi:"wifi"`
}

type AdminProfilesState struct {
	// Enable/disable overriding the global administrator idle timeout.
	AdmintimeoutOverride pulumi.StringPtrInput
	// Administrator access to Users and Devices.
	Authgrp pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// FortiView.
	Ftviewgrp pulumi.StringPtrInput
	// Administrator access to the Firewall configuration.
	Fwgrp pulumi.StringPtrInput
	// Administrator access to Logging and Reporting including viewing log messages.
	Loggrp pulumi.StringPtrInput
	// Profile name.
	Name pulumi.StringPtrInput
	// Network Configuration.
	Netgrp pulumi.StringPtrInput
	// Scope of admin access.
	Scope pulumi.StringPtrInput
	// Security Fabric.
	Secfabgrp pulumi.StringPtrInput
	// System Configuration.
	Sysgrp pulumi.StringPtrInput
	// Administrator access to Security Profiles.
	Utmgrp pulumi.StringPtrInput
	// Administrator access to IPsec, SSL, PPTP, and L2TP VPN.
	Vpngrp pulumi.StringPtrInput
	// Administrator access to WAN Opt & Cache.
	Wanoptgrp pulumi.StringPtrInput
	// Administrator access to the WiFi controller and Switch controller.
	Wifi pulumi.StringPtrInput
}

func (AdminProfilesState) ElementType() reflect.Type {
	return reflect.TypeOf((*adminProfilesState)(nil)).Elem()
}

type adminProfilesArgs struct {
	// Enable/disable overriding the global administrator idle timeout.
	AdmintimeoutOverride *string `pulumi:"admintimeoutOverride"`
	// Administrator access to Users and Devices.
	Authgrp *string `pulumi:"authgrp"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// FortiView.
	Ftviewgrp *string `pulumi:"ftviewgrp"`
	// Administrator access to the Firewall configuration.
	Fwgrp *string `pulumi:"fwgrp"`
	// Administrator access to Logging and Reporting including viewing log messages.
	Loggrp *string `pulumi:"loggrp"`
	// Profile name.
	Name *string `pulumi:"name"`
	// Network Configuration.
	Netgrp *string `pulumi:"netgrp"`
	// Scope of admin access.
	Scope *string `pulumi:"scope"`
	// Security Fabric.
	Secfabgrp *string `pulumi:"secfabgrp"`
	// System Configuration.
	Sysgrp *string `pulumi:"sysgrp"`
	// Administrator access to Security Profiles.
	Utmgrp *string `pulumi:"utmgrp"`
	// Administrator access to IPsec, SSL, PPTP, and L2TP VPN.
	Vpngrp *string `pulumi:"vpngrp"`
	// Administrator access to WAN Opt & Cache.
	Wanoptgrp *string `pulumi:"wanoptgrp"`
	// Administrator access to the WiFi controller and Switch controller.
	Wifi *string `pulumi:"wifi"`
}

// The set of arguments for constructing a AdminProfiles resource.
type AdminProfilesArgs struct {
	// Enable/disable overriding the global administrator idle timeout.
	AdmintimeoutOverride pulumi.StringPtrInput
	// Administrator access to Users and Devices.
	Authgrp pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// FortiView.
	Ftviewgrp pulumi.StringPtrInput
	// Administrator access to the Firewall configuration.
	Fwgrp pulumi.StringPtrInput
	// Administrator access to Logging and Reporting including viewing log messages.
	Loggrp pulumi.StringPtrInput
	// Profile name.
	Name pulumi.StringPtrInput
	// Network Configuration.
	Netgrp pulumi.StringPtrInput
	// Scope of admin access.
	Scope pulumi.StringPtrInput
	// Security Fabric.
	Secfabgrp pulumi.StringPtrInput
	// System Configuration.
	Sysgrp pulumi.StringPtrInput
	// Administrator access to Security Profiles.
	Utmgrp pulumi.StringPtrInput
	// Administrator access to IPsec, SSL, PPTP, and L2TP VPN.
	Vpngrp pulumi.StringPtrInput
	// Administrator access to WAN Opt & Cache.
	Wanoptgrp pulumi.StringPtrInput
	// Administrator access to the WiFi controller and Switch controller.
	Wifi pulumi.StringPtrInput
}

func (AdminProfilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*adminProfilesArgs)(nil)).Elem()
}

type AdminProfilesInput interface {
	pulumi.Input

	ToAdminProfilesOutput() AdminProfilesOutput
	ToAdminProfilesOutputWithContext(ctx context.Context) AdminProfilesOutput
}

func (*AdminProfiles) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminProfiles)(nil)).Elem()
}

func (i *AdminProfiles) ToAdminProfilesOutput() AdminProfilesOutput {
	return i.ToAdminProfilesOutputWithContext(context.Background())
}

func (i *AdminProfiles) ToAdminProfilesOutputWithContext(ctx context.Context) AdminProfilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminProfilesOutput)
}

// AdminProfilesArrayInput is an input type that accepts AdminProfilesArray and AdminProfilesArrayOutput values.
// You can construct a concrete instance of `AdminProfilesArrayInput` via:
//
//	AdminProfilesArray{ AdminProfilesArgs{...} }
type AdminProfilesArrayInput interface {
	pulumi.Input

	ToAdminProfilesArrayOutput() AdminProfilesArrayOutput
	ToAdminProfilesArrayOutputWithContext(context.Context) AdminProfilesArrayOutput
}

type AdminProfilesArray []AdminProfilesInput

func (AdminProfilesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdminProfiles)(nil)).Elem()
}

func (i AdminProfilesArray) ToAdminProfilesArrayOutput() AdminProfilesArrayOutput {
	return i.ToAdminProfilesArrayOutputWithContext(context.Background())
}

func (i AdminProfilesArray) ToAdminProfilesArrayOutputWithContext(ctx context.Context) AdminProfilesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminProfilesArrayOutput)
}

// AdminProfilesMapInput is an input type that accepts AdminProfilesMap and AdminProfilesMapOutput values.
// You can construct a concrete instance of `AdminProfilesMapInput` via:
//
//	AdminProfilesMap{ "key": AdminProfilesArgs{...} }
type AdminProfilesMapInput interface {
	pulumi.Input

	ToAdminProfilesMapOutput() AdminProfilesMapOutput
	ToAdminProfilesMapOutputWithContext(context.Context) AdminProfilesMapOutput
}

type AdminProfilesMap map[string]AdminProfilesInput

func (AdminProfilesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdminProfiles)(nil)).Elem()
}

func (i AdminProfilesMap) ToAdminProfilesMapOutput() AdminProfilesMapOutput {
	return i.ToAdminProfilesMapOutputWithContext(context.Background())
}

func (i AdminProfilesMap) ToAdminProfilesMapOutputWithContext(ctx context.Context) AdminProfilesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminProfilesMapOutput)
}

type AdminProfilesOutput struct{ *pulumi.OutputState }

func (AdminProfilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminProfiles)(nil)).Elem()
}

func (o AdminProfilesOutput) ToAdminProfilesOutput() AdminProfilesOutput {
	return o
}

func (o AdminProfilesOutput) ToAdminProfilesOutputWithContext(ctx context.Context) AdminProfilesOutput {
	return o
}

// Enable/disable overriding the global administrator idle timeout.
func (o AdminProfilesOutput) AdmintimeoutOverride() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminProfiles) pulumi.StringOutput { return v.AdmintimeoutOverride }).(pulumi.StringOutput)
}

// Administrator access to Users and Devices.
func (o AdminProfilesOutput) Authgrp() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminProfiles) pulumi.StringOutput { return v.Authgrp }).(pulumi.StringOutput)
}

// Comment.
func (o AdminProfilesOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdminProfiles) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// FortiView.
func (o AdminProfilesOutput) Ftviewgrp() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminProfiles) pulumi.StringOutput { return v.Ftviewgrp }).(pulumi.StringOutput)
}

// Administrator access to the Firewall configuration.
func (o AdminProfilesOutput) Fwgrp() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminProfiles) pulumi.StringOutput { return v.Fwgrp }).(pulumi.StringOutput)
}

// Administrator access to Logging and Reporting including viewing log messages.
func (o AdminProfilesOutput) Loggrp() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminProfiles) pulumi.StringOutput { return v.Loggrp }).(pulumi.StringOutput)
}

// Profile name.
func (o AdminProfilesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminProfiles) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network Configuration.
func (o AdminProfilesOutput) Netgrp() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminProfiles) pulumi.StringOutput { return v.Netgrp }).(pulumi.StringOutput)
}

// Scope of admin access.
func (o AdminProfilesOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminProfiles) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// Security Fabric.
func (o AdminProfilesOutput) Secfabgrp() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminProfiles) pulumi.StringOutput { return v.Secfabgrp }).(pulumi.StringOutput)
}

// System Configuration.
func (o AdminProfilesOutput) Sysgrp() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminProfiles) pulumi.StringOutput { return v.Sysgrp }).(pulumi.StringOutput)
}

// Administrator access to Security Profiles.
func (o AdminProfilesOutput) Utmgrp() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminProfiles) pulumi.StringOutput { return v.Utmgrp }).(pulumi.StringOutput)
}

// Administrator access to IPsec, SSL, PPTP, and L2TP VPN.
func (o AdminProfilesOutput) Vpngrp() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminProfiles) pulumi.StringOutput { return v.Vpngrp }).(pulumi.StringOutput)
}

// Administrator access to WAN Opt & Cache.
func (o AdminProfilesOutput) Wanoptgrp() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminProfiles) pulumi.StringOutput { return v.Wanoptgrp }).(pulumi.StringOutput)
}

// Administrator access to the WiFi controller and Switch controller.
func (o AdminProfilesOutput) Wifi() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminProfiles) pulumi.StringOutput { return v.Wifi }).(pulumi.StringOutput)
}

type AdminProfilesArrayOutput struct{ *pulumi.OutputState }

func (AdminProfilesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdminProfiles)(nil)).Elem()
}

func (o AdminProfilesArrayOutput) ToAdminProfilesArrayOutput() AdminProfilesArrayOutput {
	return o
}

func (o AdminProfilesArrayOutput) ToAdminProfilesArrayOutputWithContext(ctx context.Context) AdminProfilesArrayOutput {
	return o
}

func (o AdminProfilesArrayOutput) Index(i pulumi.IntInput) AdminProfilesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AdminProfiles {
		return vs[0].([]*AdminProfiles)[vs[1].(int)]
	}).(AdminProfilesOutput)
}

type AdminProfilesMapOutput struct{ *pulumi.OutputState }

func (AdminProfilesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdminProfiles)(nil)).Elem()
}

func (o AdminProfilesMapOutput) ToAdminProfilesMapOutput() AdminProfilesMapOutput {
	return o
}

func (o AdminProfilesMapOutput) ToAdminProfilesMapOutputWithContext(ctx context.Context) AdminProfilesMapOutput {
	return o
}

func (o AdminProfilesMapOutput) MapIndex(k pulumi.StringInput) AdminProfilesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AdminProfiles {
		return vs[0].(map[string]*AdminProfiles)[vs[1].(string)]
	}).(AdminProfilesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdminProfilesInput)(nil)).Elem(), &AdminProfiles{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminProfilesArrayInput)(nil)).Elem(), AdminProfilesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminProfilesMapInput)(nil)).Elem(), AdminProfilesMap{})
	pulumi.RegisterOutputType(AdminProfilesOutput{})
	pulumi.RegisterOutputType(AdminProfilesArrayOutput{})
	pulumi.RegisterOutputType(AdminProfilesMapOutput{})
}
