// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure HA monitor.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewHamonitor(ctx, "trname", &system.HamonitorArgs{
//				MonitorVlan:         pulumi.String("disable"),
//				VlanHbInterval:      pulumi.Int(5),
//				VlanHbLostThreshold: pulumi.Int(3),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// System HaMonitor can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/hamonitor:Hamonitor labelname SystemHaMonitor
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/hamonitor:Hamonitor labelname SystemHaMonitor
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Hamonitor struct {
	pulumi.CustomResourceState

	// Enable/disable monitor VLAN interfaces. Valid values: `enable`, `disable`.
	MonitorVlan pulumi.StringOutput `pulumi:"monitorVlan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Configure heartbeat interval (seconds).
	VlanHbInterval pulumi.IntOutput `pulumi:"vlanHbInterval"`
	// VLAN lost heartbeat threshold (1 - 60).
	VlanHbLostThreshold pulumi.IntOutput `pulumi:"vlanHbLostThreshold"`
}

// NewHamonitor registers a new resource with the given unique name, arguments, and options.
func NewHamonitor(ctx *pulumi.Context,
	name string, args *HamonitorArgs, opts ...pulumi.ResourceOption) (*Hamonitor, error) {
	if args == nil {
		args = &HamonitorArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Hamonitor
	err := ctx.RegisterResource("fortios:system/hamonitor:Hamonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHamonitor gets an existing Hamonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHamonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HamonitorState, opts ...pulumi.ResourceOption) (*Hamonitor, error) {
	var resource Hamonitor
	err := ctx.ReadResource("fortios:system/hamonitor:Hamonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hamonitor resources.
type hamonitorState struct {
	// Enable/disable monitor VLAN interfaces. Valid values: `enable`, `disable`.
	MonitorVlan *string `pulumi:"monitorVlan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Configure heartbeat interval (seconds).
	VlanHbInterval *int `pulumi:"vlanHbInterval"`
	// VLAN lost heartbeat threshold (1 - 60).
	VlanHbLostThreshold *int `pulumi:"vlanHbLostThreshold"`
}

type HamonitorState struct {
	// Enable/disable monitor VLAN interfaces. Valid values: `enable`, `disable`.
	MonitorVlan pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Configure heartbeat interval (seconds).
	VlanHbInterval pulumi.IntPtrInput
	// VLAN lost heartbeat threshold (1 - 60).
	VlanHbLostThreshold pulumi.IntPtrInput
}

func (HamonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*hamonitorState)(nil)).Elem()
}

type hamonitorArgs struct {
	// Enable/disable monitor VLAN interfaces. Valid values: `enable`, `disable`.
	MonitorVlan *string `pulumi:"monitorVlan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Configure heartbeat interval (seconds).
	VlanHbInterval *int `pulumi:"vlanHbInterval"`
	// VLAN lost heartbeat threshold (1 - 60).
	VlanHbLostThreshold *int `pulumi:"vlanHbLostThreshold"`
}

// The set of arguments for constructing a Hamonitor resource.
type HamonitorArgs struct {
	// Enable/disable monitor VLAN interfaces. Valid values: `enable`, `disable`.
	MonitorVlan pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Configure heartbeat interval (seconds).
	VlanHbInterval pulumi.IntPtrInput
	// VLAN lost heartbeat threshold (1 - 60).
	VlanHbLostThreshold pulumi.IntPtrInput
}

func (HamonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hamonitorArgs)(nil)).Elem()
}

type HamonitorInput interface {
	pulumi.Input

	ToHamonitorOutput() HamonitorOutput
	ToHamonitorOutputWithContext(ctx context.Context) HamonitorOutput
}

func (*Hamonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**Hamonitor)(nil)).Elem()
}

func (i *Hamonitor) ToHamonitorOutput() HamonitorOutput {
	return i.ToHamonitorOutputWithContext(context.Background())
}

func (i *Hamonitor) ToHamonitorOutputWithContext(ctx context.Context) HamonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HamonitorOutput)
}

// HamonitorArrayInput is an input type that accepts HamonitorArray and HamonitorArrayOutput values.
// You can construct a concrete instance of `HamonitorArrayInput` via:
//
//	HamonitorArray{ HamonitorArgs{...} }
type HamonitorArrayInput interface {
	pulumi.Input

	ToHamonitorArrayOutput() HamonitorArrayOutput
	ToHamonitorArrayOutputWithContext(context.Context) HamonitorArrayOutput
}

type HamonitorArray []HamonitorInput

func (HamonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hamonitor)(nil)).Elem()
}

func (i HamonitorArray) ToHamonitorArrayOutput() HamonitorArrayOutput {
	return i.ToHamonitorArrayOutputWithContext(context.Background())
}

func (i HamonitorArray) ToHamonitorArrayOutputWithContext(ctx context.Context) HamonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HamonitorArrayOutput)
}

// HamonitorMapInput is an input type that accepts HamonitorMap and HamonitorMapOutput values.
// You can construct a concrete instance of `HamonitorMapInput` via:
//
//	HamonitorMap{ "key": HamonitorArgs{...} }
type HamonitorMapInput interface {
	pulumi.Input

	ToHamonitorMapOutput() HamonitorMapOutput
	ToHamonitorMapOutputWithContext(context.Context) HamonitorMapOutput
}

type HamonitorMap map[string]HamonitorInput

func (HamonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hamonitor)(nil)).Elem()
}

func (i HamonitorMap) ToHamonitorMapOutput() HamonitorMapOutput {
	return i.ToHamonitorMapOutputWithContext(context.Background())
}

func (i HamonitorMap) ToHamonitorMapOutputWithContext(ctx context.Context) HamonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HamonitorMapOutput)
}

type HamonitorOutput struct{ *pulumi.OutputState }

func (HamonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hamonitor)(nil)).Elem()
}

func (o HamonitorOutput) ToHamonitorOutput() HamonitorOutput {
	return o
}

func (o HamonitorOutput) ToHamonitorOutputWithContext(ctx context.Context) HamonitorOutput {
	return o
}

// Enable/disable monitor VLAN interfaces. Valid values: `enable`, `disable`.
func (o HamonitorOutput) MonitorVlan() pulumi.StringOutput {
	return o.ApplyT(func(v *Hamonitor) pulumi.StringOutput { return v.MonitorVlan }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o HamonitorOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hamonitor) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Configure heartbeat interval (seconds).
func (o HamonitorOutput) VlanHbInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Hamonitor) pulumi.IntOutput { return v.VlanHbInterval }).(pulumi.IntOutput)
}

// VLAN lost heartbeat threshold (1 - 60).
func (o HamonitorOutput) VlanHbLostThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *Hamonitor) pulumi.IntOutput { return v.VlanHbLostThreshold }).(pulumi.IntOutput)
}

type HamonitorArrayOutput struct{ *pulumi.OutputState }

func (HamonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hamonitor)(nil)).Elem()
}

func (o HamonitorArrayOutput) ToHamonitorArrayOutput() HamonitorArrayOutput {
	return o
}

func (o HamonitorArrayOutput) ToHamonitorArrayOutputWithContext(ctx context.Context) HamonitorArrayOutput {
	return o
}

func (o HamonitorArrayOutput) Index(i pulumi.IntInput) HamonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Hamonitor {
		return vs[0].([]*Hamonitor)[vs[1].(int)]
	}).(HamonitorOutput)
}

type HamonitorMapOutput struct{ *pulumi.OutputState }

func (HamonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hamonitor)(nil)).Elem()
}

func (o HamonitorMapOutput) ToHamonitorMapOutput() HamonitorMapOutput {
	return o
}

func (o HamonitorMapOutput) ToHamonitorMapOutputWithContext(ctx context.Context) HamonitorMapOutput {
	return o
}

func (o HamonitorMapOutput) MapIndex(k pulumi.StringInput) HamonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Hamonitor {
		return vs[0].(map[string]*Hamonitor)[vs[1].(string)]
	}).(HamonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HamonitorInput)(nil)).Elem(), &Hamonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*HamonitorArrayInput)(nil)).Elem(), HamonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HamonitorMapInput)(nil)).Elem(), HamonitorMap{})
	pulumi.RegisterOutputType(HamonitorOutput{})
	pulumi.RegisterOutputType(HamonitorArrayOutput{})
	pulumi.RegisterOutputType(HamonitorMapOutput{})
}
