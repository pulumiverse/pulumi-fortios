// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure VXLAN devices.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewVxlan(ctx, "trname", &system.VxlanArgs{
//				Dstport:   pulumi.Int(4789),
//				Interface: pulumi.String("port3"),
//				IpVersion: pulumi.String("ipv4-unicast"),
//				RemoteIps: system.VxlanRemoteIpArray{
//					&system.VxlanRemoteIpArgs{
//						Ip: pulumi.String("1.1.1.1"),
//					},
//				},
//				Vni: pulumi.Int(3),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// System Vxlan can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/vxlan:Vxlan labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/vxlan:Vxlan labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Vxlan struct {
	pulumi.CustomResourceState

	// VXLAN destination port (1 - 65535, default = 4789).
	Dstport pulumi.IntOutput `pulumi:"dstport"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// EVPN instance.
	EvpnId pulumi.IntOutput `pulumi:"evpnId"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Outgoing interface for VXLAN encapsulated traffic.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast. Valid values: `ipv4-unicast`, `ipv6-unicast`, `ipv4-multicast`, `ipv6-multicast`.
	IpVersion pulumi.StringOutput `pulumi:"ipVersion"`
	// Enable/disable VXLAN MAC learning from traffic. Valid values: `enable`, `disable`.
	LearnFromTraffic pulumi.StringOutput `pulumi:"learnFromTraffic"`
	// VXLAN multicast TTL (1-255, default = 0).
	MulticastTtl pulumi.IntOutput `pulumi:"multicastTtl"`
	// VXLAN device or interface name. Must be a unique interface name.
	Name pulumi.StringOutput `pulumi:"name"`
	// IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remoteIp6` block is documented below.
	RemoteIp6s VxlanRemoteIp6ArrayOutput `pulumi:"remoteIp6s"`
	// IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remoteIp` block is documented below.
	RemoteIps VxlanRemoteIpArrayOutput `pulumi:"remoteIps"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// VXLAN network ID.
	Vni pulumi.IntOutput `pulumi:"vni"`
}

// NewVxlan registers a new resource with the given unique name, arguments, and options.
func NewVxlan(ctx *pulumi.Context,
	name string, args *VxlanArgs, opts ...pulumi.ResourceOption) (*Vxlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.IpVersion == nil {
		return nil, errors.New("invalid value for required argument 'IpVersion'")
	}
	if args.Vni == nil {
		return nil, errors.New("invalid value for required argument 'Vni'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vxlan
	err := ctx.RegisterResource("fortios:system/vxlan:Vxlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVxlan gets an existing Vxlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVxlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VxlanState, opts ...pulumi.ResourceOption) (*Vxlan, error) {
	var resource Vxlan
	err := ctx.ReadResource("fortios:system/vxlan:Vxlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vxlan resources.
type vxlanState struct {
	// VXLAN destination port (1 - 65535, default = 4789).
	Dstport *int `pulumi:"dstport"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// EVPN instance.
	EvpnId *int `pulumi:"evpnId"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Outgoing interface for VXLAN encapsulated traffic.
	Interface *string `pulumi:"interface"`
	// IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast. Valid values: `ipv4-unicast`, `ipv6-unicast`, `ipv4-multicast`, `ipv6-multicast`.
	IpVersion *string `pulumi:"ipVersion"`
	// Enable/disable VXLAN MAC learning from traffic. Valid values: `enable`, `disable`.
	LearnFromTraffic *string `pulumi:"learnFromTraffic"`
	// VXLAN multicast TTL (1-255, default = 0).
	MulticastTtl *int `pulumi:"multicastTtl"`
	// VXLAN device or interface name. Must be a unique interface name.
	Name *string `pulumi:"name"`
	// IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remoteIp6` block is documented below.
	RemoteIp6s []VxlanRemoteIp6 `pulumi:"remoteIp6s"`
	// IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remoteIp` block is documented below.
	RemoteIps []VxlanRemoteIp `pulumi:"remoteIps"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// VXLAN network ID.
	Vni *int `pulumi:"vni"`
}

type VxlanState struct {
	// VXLAN destination port (1 - 65535, default = 4789).
	Dstport pulumi.IntPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// EVPN instance.
	EvpnId pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Outgoing interface for VXLAN encapsulated traffic.
	Interface pulumi.StringPtrInput
	// IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast. Valid values: `ipv4-unicast`, `ipv6-unicast`, `ipv4-multicast`, `ipv6-multicast`.
	IpVersion pulumi.StringPtrInput
	// Enable/disable VXLAN MAC learning from traffic. Valid values: `enable`, `disable`.
	LearnFromTraffic pulumi.StringPtrInput
	// VXLAN multicast TTL (1-255, default = 0).
	MulticastTtl pulumi.IntPtrInput
	// VXLAN device or interface name. Must be a unique interface name.
	Name pulumi.StringPtrInput
	// IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remoteIp6` block is documented below.
	RemoteIp6s VxlanRemoteIp6ArrayInput
	// IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remoteIp` block is documented below.
	RemoteIps VxlanRemoteIpArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// VXLAN network ID.
	Vni pulumi.IntPtrInput
}

func (VxlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*vxlanState)(nil)).Elem()
}

type vxlanArgs struct {
	// VXLAN destination port (1 - 65535, default = 4789).
	Dstport *int `pulumi:"dstport"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// EVPN instance.
	EvpnId *int `pulumi:"evpnId"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Outgoing interface for VXLAN encapsulated traffic.
	Interface string `pulumi:"interface"`
	// IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast. Valid values: `ipv4-unicast`, `ipv6-unicast`, `ipv4-multicast`, `ipv6-multicast`.
	IpVersion string `pulumi:"ipVersion"`
	// Enable/disable VXLAN MAC learning from traffic. Valid values: `enable`, `disable`.
	LearnFromTraffic *string `pulumi:"learnFromTraffic"`
	// VXLAN multicast TTL (1-255, default = 0).
	MulticastTtl *int `pulumi:"multicastTtl"`
	// VXLAN device or interface name. Must be a unique interface name.
	Name *string `pulumi:"name"`
	// IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remoteIp6` block is documented below.
	RemoteIp6s []VxlanRemoteIp6 `pulumi:"remoteIp6s"`
	// IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remoteIp` block is documented below.
	RemoteIps []VxlanRemoteIp `pulumi:"remoteIps"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// VXLAN network ID.
	Vni int `pulumi:"vni"`
}

// The set of arguments for constructing a Vxlan resource.
type VxlanArgs struct {
	// VXLAN destination port (1 - 65535, default = 4789).
	Dstport pulumi.IntPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// EVPN instance.
	EvpnId pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Outgoing interface for VXLAN encapsulated traffic.
	Interface pulumi.StringInput
	// IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast. Valid values: `ipv4-unicast`, `ipv6-unicast`, `ipv4-multicast`, `ipv6-multicast`.
	IpVersion pulumi.StringInput
	// Enable/disable VXLAN MAC learning from traffic. Valid values: `enable`, `disable`.
	LearnFromTraffic pulumi.StringPtrInput
	// VXLAN multicast TTL (1-255, default = 0).
	MulticastTtl pulumi.IntPtrInput
	// VXLAN device or interface name. Must be a unique interface name.
	Name pulumi.StringPtrInput
	// IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remoteIp6` block is documented below.
	RemoteIp6s VxlanRemoteIp6ArrayInput
	// IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remoteIp` block is documented below.
	RemoteIps VxlanRemoteIpArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// VXLAN network ID.
	Vni pulumi.IntInput
}

func (VxlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vxlanArgs)(nil)).Elem()
}

type VxlanInput interface {
	pulumi.Input

	ToVxlanOutput() VxlanOutput
	ToVxlanOutputWithContext(ctx context.Context) VxlanOutput
}

func (*Vxlan) ElementType() reflect.Type {
	return reflect.TypeOf((**Vxlan)(nil)).Elem()
}

func (i *Vxlan) ToVxlanOutput() VxlanOutput {
	return i.ToVxlanOutputWithContext(context.Background())
}

func (i *Vxlan) ToVxlanOutputWithContext(ctx context.Context) VxlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VxlanOutput)
}

// VxlanArrayInput is an input type that accepts VxlanArray and VxlanArrayOutput values.
// You can construct a concrete instance of `VxlanArrayInput` via:
//
//	VxlanArray{ VxlanArgs{...} }
type VxlanArrayInput interface {
	pulumi.Input

	ToVxlanArrayOutput() VxlanArrayOutput
	ToVxlanArrayOutputWithContext(context.Context) VxlanArrayOutput
}

type VxlanArray []VxlanInput

func (VxlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vxlan)(nil)).Elem()
}

func (i VxlanArray) ToVxlanArrayOutput() VxlanArrayOutput {
	return i.ToVxlanArrayOutputWithContext(context.Background())
}

func (i VxlanArray) ToVxlanArrayOutputWithContext(ctx context.Context) VxlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VxlanArrayOutput)
}

// VxlanMapInput is an input type that accepts VxlanMap and VxlanMapOutput values.
// You can construct a concrete instance of `VxlanMapInput` via:
//
//	VxlanMap{ "key": VxlanArgs{...} }
type VxlanMapInput interface {
	pulumi.Input

	ToVxlanMapOutput() VxlanMapOutput
	ToVxlanMapOutputWithContext(context.Context) VxlanMapOutput
}

type VxlanMap map[string]VxlanInput

func (VxlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vxlan)(nil)).Elem()
}

func (i VxlanMap) ToVxlanMapOutput() VxlanMapOutput {
	return i.ToVxlanMapOutputWithContext(context.Background())
}

func (i VxlanMap) ToVxlanMapOutputWithContext(ctx context.Context) VxlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VxlanMapOutput)
}

type VxlanOutput struct{ *pulumi.OutputState }

func (VxlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vxlan)(nil)).Elem()
}

func (o VxlanOutput) ToVxlanOutput() VxlanOutput {
	return o
}

func (o VxlanOutput) ToVxlanOutputWithContext(ctx context.Context) VxlanOutput {
	return o
}

// VXLAN destination port (1 - 65535, default = 4789).
func (o VxlanOutput) Dstport() pulumi.IntOutput {
	return o.ApplyT(func(v *Vxlan) pulumi.IntOutput { return v.Dstport }).(pulumi.IntOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o VxlanOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vxlan) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// EVPN instance.
func (o VxlanOutput) EvpnId() pulumi.IntOutput {
	return o.ApplyT(func(v *Vxlan) pulumi.IntOutput { return v.EvpnId }).(pulumi.IntOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o VxlanOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vxlan) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Outgoing interface for VXLAN encapsulated traffic.
func (o VxlanOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Vxlan) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast. Valid values: `ipv4-unicast`, `ipv6-unicast`, `ipv4-multicast`, `ipv6-multicast`.
func (o VxlanOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Vxlan) pulumi.StringOutput { return v.IpVersion }).(pulumi.StringOutput)
}

// Enable/disable VXLAN MAC learning from traffic. Valid values: `enable`, `disable`.
func (o VxlanOutput) LearnFromTraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *Vxlan) pulumi.StringOutput { return v.LearnFromTraffic }).(pulumi.StringOutput)
}

// VXLAN multicast TTL (1-255, default = 0).
func (o VxlanOutput) MulticastTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *Vxlan) pulumi.IntOutput { return v.MulticastTtl }).(pulumi.IntOutput)
}

// VXLAN device or interface name. Must be a unique interface name.
func (o VxlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vxlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remoteIp6` block is documented below.
func (o VxlanOutput) RemoteIp6s() VxlanRemoteIp6ArrayOutput {
	return o.ApplyT(func(v *Vxlan) VxlanRemoteIp6ArrayOutput { return v.RemoteIp6s }).(VxlanRemoteIp6ArrayOutput)
}

// IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remoteIp` block is documented below.
func (o VxlanOutput) RemoteIps() VxlanRemoteIpArrayOutput {
	return o.ApplyT(func(v *Vxlan) VxlanRemoteIpArrayOutput { return v.RemoteIps }).(VxlanRemoteIpArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o VxlanOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vxlan) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// VXLAN network ID.
func (o VxlanOutput) Vni() pulumi.IntOutput {
	return o.ApplyT(func(v *Vxlan) pulumi.IntOutput { return v.Vni }).(pulumi.IntOutput)
}

type VxlanArrayOutput struct{ *pulumi.OutputState }

func (VxlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vxlan)(nil)).Elem()
}

func (o VxlanArrayOutput) ToVxlanArrayOutput() VxlanArrayOutput {
	return o
}

func (o VxlanArrayOutput) ToVxlanArrayOutputWithContext(ctx context.Context) VxlanArrayOutput {
	return o
}

func (o VxlanArrayOutput) Index(i pulumi.IntInput) VxlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vxlan {
		return vs[0].([]*Vxlan)[vs[1].(int)]
	}).(VxlanOutput)
}

type VxlanMapOutput struct{ *pulumi.OutputState }

func (VxlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vxlan)(nil)).Elem()
}

func (o VxlanMapOutput) ToVxlanMapOutput() VxlanMapOutput {
	return o
}

func (o VxlanMapOutput) ToVxlanMapOutputWithContext(ctx context.Context) VxlanMapOutput {
	return o
}

func (o VxlanMapOutput) MapIndex(k pulumi.StringInput) VxlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vxlan {
		return vs[0].(map[string]*Vxlan)[vs[1].(string)]
	}).(VxlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VxlanInput)(nil)).Elem(), &Vxlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*VxlanArrayInput)(nil)).Elem(), VxlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VxlanMapInput)(nil)).Elem(), VxlanMap{})
	pulumi.RegisterOutputType(VxlanOutput{})
	pulumi.RegisterOutputType(VxlanArrayOutput{})
	pulumi.RegisterOutputType(VxlanMapOutput{})
}
