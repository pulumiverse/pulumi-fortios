// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure MODEM. Applies to FortiOS Version `7.0.4`.
//
// ## Import
//
// System Modem can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/modem:Modem labelname SystemModem
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/modem:Modem labelname SystemModem
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Modem struct {
	pulumi.CustomResourceState

	// Dial up/stop MODEM. Valid values: `dial`, `stop`, `none`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Enable/disable altmode for installations using PPP in China. Valid values: `enable`, `disable`.
	Altmode pulumi.StringOutput `pulumi:"altmode"`
	// Allowed authentication types for ISP 1. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
	Authtype1 pulumi.StringOutput `pulumi:"authtype1"`
	// Allowed authentication types for ISP 2. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
	Authtype2 pulumi.StringOutput `pulumi:"authtype2"`
	// Allowed authentication types for ISP 3. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
	Authtype3 pulumi.StringOutput `pulumi:"authtype3"`
	// Enable/disable auto-dial after a reboot or disconnection. Valid values: `enable`, `disable`.
	AutoDial pulumi.StringOutput `pulumi:"autoDial"`
	// Connection completion timeout (30 - 255 sec, default = 90).
	ConnectTimeout pulumi.IntOutput `pulumi:"connectTimeout"`
	// Dial command (this is often an ATD or ATDT command).
	DialCmd1 pulumi.StringOutput `pulumi:"dialCmd1"`
	// Dial command (this is often an ATD or ATDT command).
	DialCmd2 pulumi.StringOutput `pulumi:"dialCmd2"`
	// Dial command (this is often an ATD or ATDT command).
	DialCmd3 pulumi.StringOutput `pulumi:"dialCmd3"`
	// Enable/disable to dial the modem when packets are routed to the modem interface. Valid values: `enable`, `disable`.
	DialOnDemand pulumi.StringOutput `pulumi:"dialOnDemand"`
	// Distance of learned routes (1 - 255, default = 1).
	Distance pulumi.IntOutput `pulumi:"distance"`
	// Do not send CR when connected (ISP1). Valid values: `enable`, `disable`.
	DontSendCr1 pulumi.StringOutput `pulumi:"dontSendCr1"`
	// Do not send CR when connected (ISP2). Valid values: `enable`, `disable`.
	DontSendCr2 pulumi.StringOutput `pulumi:"dontSendCr2"`
	// Do not send CR when connected (ISP3). Valid values: `enable`, `disable`.
	DontSendCr3 pulumi.StringOutput `pulumi:"dontSendCr3"`
	// Extra initialization string to ISP 1.
	ExtraInit1 pulumi.StringOutput `pulumi:"extraInit1"`
	// Extra initialization string to ISP 2.
	ExtraInit2 pulumi.StringOutput `pulumi:"extraInit2"`
	// Extra initialization string to ISP 3.
	ExtraInit3 pulumi.StringOutput `pulumi:"extraInit3"`
	// Hold down timer in seconds (1 - 60 sec).
	HolddownTimer pulumi.IntOutput `pulumi:"holddownTimer"`
	// MODEM connection idle time (1 - 9999 min, default = 5).
	IdleTimer pulumi.IntOutput `pulumi:"idleTimer"`
	// Name of redundant interface.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Allow connection only to the specified Location Area Code (LAC).
	LockdownLac pulumi.StringOutput `pulumi:"lockdownLac"`
	// Set MODEM operation mode to redundant or standalone. Valid values: `standalone`, `redundant`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// AT command to set the Network name/type (AT+COPS=<mode>,[<format>,<oper>[,<AcT>]]).
	NetworkInit pulumi.StringOutput `pulumi:"networkInit"`
	// Password to access the specified dialup account.
	Passwd1 pulumi.StringPtrOutput `pulumi:"passwd1"`
	// Password to access the specified dialup account.
	Passwd2 pulumi.StringPtrOutput `pulumi:"passwd2"`
	// Password to access the specified dialup account.
	Passwd3 pulumi.StringPtrOutput `pulumi:"passwd3"`
	// Specify peer MODEM type for phone1. Valid values: `generic`, `actiontec`, `ascend_TNT`.
	PeerModem1 pulumi.StringOutput `pulumi:"peerModem1"`
	// Specify peer MODEM type for phone2. Valid values: `generic`, `actiontec`, `ascend_TNT`.
	PeerModem2 pulumi.StringOutput `pulumi:"peerModem2"`
	// Specify peer MODEM type for phone3. Valid values: `generic`, `actiontec`, `ascend_TNT`.
	PeerModem3 pulumi.StringOutput `pulumi:"peerModem3"`
	// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
	Phone1 pulumi.StringOutput `pulumi:"phone1"`
	// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
	Phone2 pulumi.StringOutput `pulumi:"phone2"`
	// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
	Phone3 pulumi.StringOutput `pulumi:"phone3"`
	// AT command to set the PIN (AT+PIN=<pin>).
	PinInit pulumi.StringOutput `pulumi:"pinInit"`
	// Enable/disable PPP echo-request to ISP 1. Valid values: `enable`, `disable`.
	PppEchoRequest1 pulumi.StringOutput `pulumi:"pppEchoRequest1"`
	// Enable/disable PPP echo-request to ISP 2. Valid values: `enable`, `disable`.
	PppEchoRequest2 pulumi.StringOutput `pulumi:"pppEchoRequest2"`
	// Enable/disable PPP echo-request to ISP 3. Valid values: `enable`, `disable`.
	PppEchoRequest3 pulumi.StringOutput `pulumi:"pppEchoRequest3"`
	// Priority of learned routes (0 - 4294967295, default = 0).
	Priority pulumi.IntOutput `pulumi:"priority"`
	// Redial limit (1 - 10 attempts, none = redial forever). Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
	Redial pulumi.StringOutput `pulumi:"redial"`
	// Number of dial attempts before resetting modem (0 = never reset).
	Reset pulumi.IntOutput `pulumi:"reset"`
	// Enable/disable Modem support (equivalent to bringing an interface up or down). Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Enable/disable traffic-check. Valid values: `enable`, `disable`.
	TrafficCheck pulumi.StringOutput `pulumi:"trafficCheck"`
	// User name to access the specified dialup account.
	Username1 pulumi.StringOutput `pulumi:"username1"`
	// User name to access the specified dialup account.
	Username2 pulumi.StringOutput `pulumi:"username2"`
	// User name to access the specified dialup account.
	Username3 pulumi.StringOutput `pulumi:"username3"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
	// Enter wireless port number, 0 for default, 1 for first port, ... (0 - 4294967295, default = 0)
	WirelessPort pulumi.IntOutput `pulumi:"wirelessPort"`
}

// NewModem registers a new resource with the given unique name, arguments, and options.
func NewModem(ctx *pulumi.Context,
	name string, args *ModemArgs, opts ...pulumi.ResourceOption) (*Modem, error) {
	if args == nil {
		args = &ModemArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Modem
	err := ctx.RegisterResource("fortios:system/modem:Modem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModem gets an existing Modem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModemState, opts ...pulumi.ResourceOption) (*Modem, error) {
	var resource Modem
	err := ctx.ReadResource("fortios:system/modem:Modem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Modem resources.
type modemState struct {
	// Dial up/stop MODEM. Valid values: `dial`, `stop`, `none`.
	Action *string `pulumi:"action"`
	// Enable/disable altmode for installations using PPP in China. Valid values: `enable`, `disable`.
	Altmode *string `pulumi:"altmode"`
	// Allowed authentication types for ISP 1. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
	Authtype1 *string `pulumi:"authtype1"`
	// Allowed authentication types for ISP 2. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
	Authtype2 *string `pulumi:"authtype2"`
	// Allowed authentication types for ISP 3. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
	Authtype3 *string `pulumi:"authtype3"`
	// Enable/disable auto-dial after a reboot or disconnection. Valid values: `enable`, `disable`.
	AutoDial *string `pulumi:"autoDial"`
	// Connection completion timeout (30 - 255 sec, default = 90).
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// Dial command (this is often an ATD or ATDT command).
	DialCmd1 *string `pulumi:"dialCmd1"`
	// Dial command (this is often an ATD or ATDT command).
	DialCmd2 *string `pulumi:"dialCmd2"`
	// Dial command (this is often an ATD or ATDT command).
	DialCmd3 *string `pulumi:"dialCmd3"`
	// Enable/disable to dial the modem when packets are routed to the modem interface. Valid values: `enable`, `disable`.
	DialOnDemand *string `pulumi:"dialOnDemand"`
	// Distance of learned routes (1 - 255, default = 1).
	Distance *int `pulumi:"distance"`
	// Do not send CR when connected (ISP1). Valid values: `enable`, `disable`.
	DontSendCr1 *string `pulumi:"dontSendCr1"`
	// Do not send CR when connected (ISP2). Valid values: `enable`, `disable`.
	DontSendCr2 *string `pulumi:"dontSendCr2"`
	// Do not send CR when connected (ISP3). Valid values: `enable`, `disable`.
	DontSendCr3 *string `pulumi:"dontSendCr3"`
	// Extra initialization string to ISP 1.
	ExtraInit1 *string `pulumi:"extraInit1"`
	// Extra initialization string to ISP 2.
	ExtraInit2 *string `pulumi:"extraInit2"`
	// Extra initialization string to ISP 3.
	ExtraInit3 *string `pulumi:"extraInit3"`
	// Hold down timer in seconds (1 - 60 sec).
	HolddownTimer *int `pulumi:"holddownTimer"`
	// MODEM connection idle time (1 - 9999 min, default = 5).
	IdleTimer *int `pulumi:"idleTimer"`
	// Name of redundant interface.
	Interface *string `pulumi:"interface"`
	// Allow connection only to the specified Location Area Code (LAC).
	LockdownLac *string `pulumi:"lockdownLac"`
	// Set MODEM operation mode to redundant or standalone. Valid values: `standalone`, `redundant`.
	Mode *string `pulumi:"mode"`
	// AT command to set the Network name/type (AT+COPS=<mode>,[<format>,<oper>[,<AcT>]]).
	NetworkInit *string `pulumi:"networkInit"`
	// Password to access the specified dialup account.
	Passwd1 *string `pulumi:"passwd1"`
	// Password to access the specified dialup account.
	Passwd2 *string `pulumi:"passwd2"`
	// Password to access the specified dialup account.
	Passwd3 *string `pulumi:"passwd3"`
	// Specify peer MODEM type for phone1. Valid values: `generic`, `actiontec`, `ascend_TNT`.
	PeerModem1 *string `pulumi:"peerModem1"`
	// Specify peer MODEM type for phone2. Valid values: `generic`, `actiontec`, `ascend_TNT`.
	PeerModem2 *string `pulumi:"peerModem2"`
	// Specify peer MODEM type for phone3. Valid values: `generic`, `actiontec`, `ascend_TNT`.
	PeerModem3 *string `pulumi:"peerModem3"`
	// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
	Phone1 *string `pulumi:"phone1"`
	// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
	Phone2 *string `pulumi:"phone2"`
	// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
	Phone3 *string `pulumi:"phone3"`
	// AT command to set the PIN (AT+PIN=<pin>).
	PinInit *string `pulumi:"pinInit"`
	// Enable/disable PPP echo-request to ISP 1. Valid values: `enable`, `disable`.
	PppEchoRequest1 *string `pulumi:"pppEchoRequest1"`
	// Enable/disable PPP echo-request to ISP 2. Valid values: `enable`, `disable`.
	PppEchoRequest2 *string `pulumi:"pppEchoRequest2"`
	// Enable/disable PPP echo-request to ISP 3. Valid values: `enable`, `disable`.
	PppEchoRequest3 *string `pulumi:"pppEchoRequest3"`
	// Priority of learned routes (0 - 4294967295, default = 0).
	Priority *int `pulumi:"priority"`
	// Redial limit (1 - 10 attempts, none = redial forever). Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
	Redial *string `pulumi:"redial"`
	// Number of dial attempts before resetting modem (0 = never reset).
	Reset *int `pulumi:"reset"`
	// Enable/disable Modem support (equivalent to bringing an interface up or down). Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Enable/disable traffic-check. Valid values: `enable`, `disable`.
	TrafficCheck *string `pulumi:"trafficCheck"`
	// User name to access the specified dialup account.
	Username1 *string `pulumi:"username1"`
	// User name to access the specified dialup account.
	Username2 *string `pulumi:"username2"`
	// User name to access the specified dialup account.
	Username3 *string `pulumi:"username3"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enter wireless port number, 0 for default, 1 for first port, ... (0 - 4294967295, default = 0)
	WirelessPort *int `pulumi:"wirelessPort"`
}

type ModemState struct {
	// Dial up/stop MODEM. Valid values: `dial`, `stop`, `none`.
	Action pulumi.StringPtrInput
	// Enable/disable altmode for installations using PPP in China. Valid values: `enable`, `disable`.
	Altmode pulumi.StringPtrInput
	// Allowed authentication types for ISP 1. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
	Authtype1 pulumi.StringPtrInput
	// Allowed authentication types for ISP 2. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
	Authtype2 pulumi.StringPtrInput
	// Allowed authentication types for ISP 3. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
	Authtype3 pulumi.StringPtrInput
	// Enable/disable auto-dial after a reboot or disconnection. Valid values: `enable`, `disable`.
	AutoDial pulumi.StringPtrInput
	// Connection completion timeout (30 - 255 sec, default = 90).
	ConnectTimeout pulumi.IntPtrInput
	// Dial command (this is often an ATD or ATDT command).
	DialCmd1 pulumi.StringPtrInput
	// Dial command (this is often an ATD or ATDT command).
	DialCmd2 pulumi.StringPtrInput
	// Dial command (this is often an ATD or ATDT command).
	DialCmd3 pulumi.StringPtrInput
	// Enable/disable to dial the modem when packets are routed to the modem interface. Valid values: `enable`, `disable`.
	DialOnDemand pulumi.StringPtrInput
	// Distance of learned routes (1 - 255, default = 1).
	Distance pulumi.IntPtrInput
	// Do not send CR when connected (ISP1). Valid values: `enable`, `disable`.
	DontSendCr1 pulumi.StringPtrInput
	// Do not send CR when connected (ISP2). Valid values: `enable`, `disable`.
	DontSendCr2 pulumi.StringPtrInput
	// Do not send CR when connected (ISP3). Valid values: `enable`, `disable`.
	DontSendCr3 pulumi.StringPtrInput
	// Extra initialization string to ISP 1.
	ExtraInit1 pulumi.StringPtrInput
	// Extra initialization string to ISP 2.
	ExtraInit2 pulumi.StringPtrInput
	// Extra initialization string to ISP 3.
	ExtraInit3 pulumi.StringPtrInput
	// Hold down timer in seconds (1 - 60 sec).
	HolddownTimer pulumi.IntPtrInput
	// MODEM connection idle time (1 - 9999 min, default = 5).
	IdleTimer pulumi.IntPtrInput
	// Name of redundant interface.
	Interface pulumi.StringPtrInput
	// Allow connection only to the specified Location Area Code (LAC).
	LockdownLac pulumi.StringPtrInput
	// Set MODEM operation mode to redundant or standalone. Valid values: `standalone`, `redundant`.
	Mode pulumi.StringPtrInput
	// AT command to set the Network name/type (AT+COPS=<mode>,[<format>,<oper>[,<AcT>]]).
	NetworkInit pulumi.StringPtrInput
	// Password to access the specified dialup account.
	Passwd1 pulumi.StringPtrInput
	// Password to access the specified dialup account.
	Passwd2 pulumi.StringPtrInput
	// Password to access the specified dialup account.
	Passwd3 pulumi.StringPtrInput
	// Specify peer MODEM type for phone1. Valid values: `generic`, `actiontec`, `ascend_TNT`.
	PeerModem1 pulumi.StringPtrInput
	// Specify peer MODEM type for phone2. Valid values: `generic`, `actiontec`, `ascend_TNT`.
	PeerModem2 pulumi.StringPtrInput
	// Specify peer MODEM type for phone3. Valid values: `generic`, `actiontec`, `ascend_TNT`.
	PeerModem3 pulumi.StringPtrInput
	// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
	Phone1 pulumi.StringPtrInput
	// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
	Phone2 pulumi.StringPtrInput
	// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
	Phone3 pulumi.StringPtrInput
	// AT command to set the PIN (AT+PIN=<pin>).
	PinInit pulumi.StringPtrInput
	// Enable/disable PPP echo-request to ISP 1. Valid values: `enable`, `disable`.
	PppEchoRequest1 pulumi.StringPtrInput
	// Enable/disable PPP echo-request to ISP 2. Valid values: `enable`, `disable`.
	PppEchoRequest2 pulumi.StringPtrInput
	// Enable/disable PPP echo-request to ISP 3. Valid values: `enable`, `disable`.
	PppEchoRequest3 pulumi.StringPtrInput
	// Priority of learned routes (0 - 4294967295, default = 0).
	Priority pulumi.IntPtrInput
	// Redial limit (1 - 10 attempts, none = redial forever). Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
	Redial pulumi.StringPtrInput
	// Number of dial attempts before resetting modem (0 = never reset).
	Reset pulumi.IntPtrInput
	// Enable/disable Modem support (equivalent to bringing an interface up or down). Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Enable/disable traffic-check. Valid values: `enable`, `disable`.
	TrafficCheck pulumi.StringPtrInput
	// User name to access the specified dialup account.
	Username1 pulumi.StringPtrInput
	// User name to access the specified dialup account.
	Username2 pulumi.StringPtrInput
	// User name to access the specified dialup account.
	Username3 pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enter wireless port number, 0 for default, 1 for first port, ... (0 - 4294967295, default = 0)
	WirelessPort pulumi.IntPtrInput
}

func (ModemState) ElementType() reflect.Type {
	return reflect.TypeOf((*modemState)(nil)).Elem()
}

type modemArgs struct {
	// Dial up/stop MODEM. Valid values: `dial`, `stop`, `none`.
	Action *string `pulumi:"action"`
	// Enable/disable altmode for installations using PPP in China. Valid values: `enable`, `disable`.
	Altmode *string `pulumi:"altmode"`
	// Allowed authentication types for ISP 1. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
	Authtype1 *string `pulumi:"authtype1"`
	// Allowed authentication types for ISP 2. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
	Authtype2 *string `pulumi:"authtype2"`
	// Allowed authentication types for ISP 3. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
	Authtype3 *string `pulumi:"authtype3"`
	// Enable/disable auto-dial after a reboot or disconnection. Valid values: `enable`, `disable`.
	AutoDial *string `pulumi:"autoDial"`
	// Connection completion timeout (30 - 255 sec, default = 90).
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// Dial command (this is often an ATD or ATDT command).
	DialCmd1 *string `pulumi:"dialCmd1"`
	// Dial command (this is often an ATD or ATDT command).
	DialCmd2 *string `pulumi:"dialCmd2"`
	// Dial command (this is often an ATD or ATDT command).
	DialCmd3 *string `pulumi:"dialCmd3"`
	// Enable/disable to dial the modem when packets are routed to the modem interface. Valid values: `enable`, `disable`.
	DialOnDemand *string `pulumi:"dialOnDemand"`
	// Distance of learned routes (1 - 255, default = 1).
	Distance *int `pulumi:"distance"`
	// Do not send CR when connected (ISP1). Valid values: `enable`, `disable`.
	DontSendCr1 *string `pulumi:"dontSendCr1"`
	// Do not send CR when connected (ISP2). Valid values: `enable`, `disable`.
	DontSendCr2 *string `pulumi:"dontSendCr2"`
	// Do not send CR when connected (ISP3). Valid values: `enable`, `disable`.
	DontSendCr3 *string `pulumi:"dontSendCr3"`
	// Extra initialization string to ISP 1.
	ExtraInit1 *string `pulumi:"extraInit1"`
	// Extra initialization string to ISP 2.
	ExtraInit2 *string `pulumi:"extraInit2"`
	// Extra initialization string to ISP 3.
	ExtraInit3 *string `pulumi:"extraInit3"`
	// Hold down timer in seconds (1 - 60 sec).
	HolddownTimer *int `pulumi:"holddownTimer"`
	// MODEM connection idle time (1 - 9999 min, default = 5).
	IdleTimer *int `pulumi:"idleTimer"`
	// Name of redundant interface.
	Interface *string `pulumi:"interface"`
	// Allow connection only to the specified Location Area Code (LAC).
	LockdownLac *string `pulumi:"lockdownLac"`
	// Set MODEM operation mode to redundant or standalone. Valid values: `standalone`, `redundant`.
	Mode *string `pulumi:"mode"`
	// AT command to set the Network name/type (AT+COPS=<mode>,[<format>,<oper>[,<AcT>]]).
	NetworkInit *string `pulumi:"networkInit"`
	// Password to access the specified dialup account.
	Passwd1 *string `pulumi:"passwd1"`
	// Password to access the specified dialup account.
	Passwd2 *string `pulumi:"passwd2"`
	// Password to access the specified dialup account.
	Passwd3 *string `pulumi:"passwd3"`
	// Specify peer MODEM type for phone1. Valid values: `generic`, `actiontec`, `ascend_TNT`.
	PeerModem1 *string `pulumi:"peerModem1"`
	// Specify peer MODEM type for phone2. Valid values: `generic`, `actiontec`, `ascend_TNT`.
	PeerModem2 *string `pulumi:"peerModem2"`
	// Specify peer MODEM type for phone3. Valid values: `generic`, `actiontec`, `ascend_TNT`.
	PeerModem3 *string `pulumi:"peerModem3"`
	// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
	Phone1 *string `pulumi:"phone1"`
	// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
	Phone2 *string `pulumi:"phone2"`
	// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
	Phone3 *string `pulumi:"phone3"`
	// AT command to set the PIN (AT+PIN=<pin>).
	PinInit *string `pulumi:"pinInit"`
	// Enable/disable PPP echo-request to ISP 1. Valid values: `enable`, `disable`.
	PppEchoRequest1 *string `pulumi:"pppEchoRequest1"`
	// Enable/disable PPP echo-request to ISP 2. Valid values: `enable`, `disable`.
	PppEchoRequest2 *string `pulumi:"pppEchoRequest2"`
	// Enable/disable PPP echo-request to ISP 3. Valid values: `enable`, `disable`.
	PppEchoRequest3 *string `pulumi:"pppEchoRequest3"`
	// Priority of learned routes (0 - 4294967295, default = 0).
	Priority *int `pulumi:"priority"`
	// Redial limit (1 - 10 attempts, none = redial forever). Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
	Redial *string `pulumi:"redial"`
	// Number of dial attempts before resetting modem (0 = never reset).
	Reset *int `pulumi:"reset"`
	// Enable/disable Modem support (equivalent to bringing an interface up or down). Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Enable/disable traffic-check. Valid values: `enable`, `disable`.
	TrafficCheck *string `pulumi:"trafficCheck"`
	// User name to access the specified dialup account.
	Username1 *string `pulumi:"username1"`
	// User name to access the specified dialup account.
	Username2 *string `pulumi:"username2"`
	// User name to access the specified dialup account.
	Username3 *string `pulumi:"username3"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enter wireless port number, 0 for default, 1 for first port, ... (0 - 4294967295, default = 0)
	WirelessPort *int `pulumi:"wirelessPort"`
}

// The set of arguments for constructing a Modem resource.
type ModemArgs struct {
	// Dial up/stop MODEM. Valid values: `dial`, `stop`, `none`.
	Action pulumi.StringPtrInput
	// Enable/disable altmode for installations using PPP in China. Valid values: `enable`, `disable`.
	Altmode pulumi.StringPtrInput
	// Allowed authentication types for ISP 1. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
	Authtype1 pulumi.StringPtrInput
	// Allowed authentication types for ISP 2. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
	Authtype2 pulumi.StringPtrInput
	// Allowed authentication types for ISP 3. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
	Authtype3 pulumi.StringPtrInput
	// Enable/disable auto-dial after a reboot or disconnection. Valid values: `enable`, `disable`.
	AutoDial pulumi.StringPtrInput
	// Connection completion timeout (30 - 255 sec, default = 90).
	ConnectTimeout pulumi.IntPtrInput
	// Dial command (this is often an ATD or ATDT command).
	DialCmd1 pulumi.StringPtrInput
	// Dial command (this is often an ATD or ATDT command).
	DialCmd2 pulumi.StringPtrInput
	// Dial command (this is often an ATD or ATDT command).
	DialCmd3 pulumi.StringPtrInput
	// Enable/disable to dial the modem when packets are routed to the modem interface. Valid values: `enable`, `disable`.
	DialOnDemand pulumi.StringPtrInput
	// Distance of learned routes (1 - 255, default = 1).
	Distance pulumi.IntPtrInput
	// Do not send CR when connected (ISP1). Valid values: `enable`, `disable`.
	DontSendCr1 pulumi.StringPtrInput
	// Do not send CR when connected (ISP2). Valid values: `enable`, `disable`.
	DontSendCr2 pulumi.StringPtrInput
	// Do not send CR when connected (ISP3). Valid values: `enable`, `disable`.
	DontSendCr3 pulumi.StringPtrInput
	// Extra initialization string to ISP 1.
	ExtraInit1 pulumi.StringPtrInput
	// Extra initialization string to ISP 2.
	ExtraInit2 pulumi.StringPtrInput
	// Extra initialization string to ISP 3.
	ExtraInit3 pulumi.StringPtrInput
	// Hold down timer in seconds (1 - 60 sec).
	HolddownTimer pulumi.IntPtrInput
	// MODEM connection idle time (1 - 9999 min, default = 5).
	IdleTimer pulumi.IntPtrInput
	// Name of redundant interface.
	Interface pulumi.StringPtrInput
	// Allow connection only to the specified Location Area Code (LAC).
	LockdownLac pulumi.StringPtrInput
	// Set MODEM operation mode to redundant or standalone. Valid values: `standalone`, `redundant`.
	Mode pulumi.StringPtrInput
	// AT command to set the Network name/type (AT+COPS=<mode>,[<format>,<oper>[,<AcT>]]).
	NetworkInit pulumi.StringPtrInput
	// Password to access the specified dialup account.
	Passwd1 pulumi.StringPtrInput
	// Password to access the specified dialup account.
	Passwd2 pulumi.StringPtrInput
	// Password to access the specified dialup account.
	Passwd3 pulumi.StringPtrInput
	// Specify peer MODEM type for phone1. Valid values: `generic`, `actiontec`, `ascend_TNT`.
	PeerModem1 pulumi.StringPtrInput
	// Specify peer MODEM type for phone2. Valid values: `generic`, `actiontec`, `ascend_TNT`.
	PeerModem2 pulumi.StringPtrInput
	// Specify peer MODEM type for phone3. Valid values: `generic`, `actiontec`, `ascend_TNT`.
	PeerModem3 pulumi.StringPtrInput
	// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
	Phone1 pulumi.StringPtrInput
	// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
	Phone2 pulumi.StringPtrInput
	// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
	Phone3 pulumi.StringPtrInput
	// AT command to set the PIN (AT+PIN=<pin>).
	PinInit pulumi.StringPtrInput
	// Enable/disable PPP echo-request to ISP 1. Valid values: `enable`, `disable`.
	PppEchoRequest1 pulumi.StringPtrInput
	// Enable/disable PPP echo-request to ISP 2. Valid values: `enable`, `disable`.
	PppEchoRequest2 pulumi.StringPtrInput
	// Enable/disable PPP echo-request to ISP 3. Valid values: `enable`, `disable`.
	PppEchoRequest3 pulumi.StringPtrInput
	// Priority of learned routes (0 - 4294967295, default = 0).
	Priority pulumi.IntPtrInput
	// Redial limit (1 - 10 attempts, none = redial forever). Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
	Redial pulumi.StringPtrInput
	// Number of dial attempts before resetting modem (0 = never reset).
	Reset pulumi.IntPtrInput
	// Enable/disable Modem support (equivalent to bringing an interface up or down). Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Enable/disable traffic-check. Valid values: `enable`, `disable`.
	TrafficCheck pulumi.StringPtrInput
	// User name to access the specified dialup account.
	Username1 pulumi.StringPtrInput
	// User name to access the specified dialup account.
	Username2 pulumi.StringPtrInput
	// User name to access the specified dialup account.
	Username3 pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enter wireless port number, 0 for default, 1 for first port, ... (0 - 4294967295, default = 0)
	WirelessPort pulumi.IntPtrInput
}

func (ModemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modemArgs)(nil)).Elem()
}

type ModemInput interface {
	pulumi.Input

	ToModemOutput() ModemOutput
	ToModemOutputWithContext(ctx context.Context) ModemOutput
}

func (*Modem) ElementType() reflect.Type {
	return reflect.TypeOf((**Modem)(nil)).Elem()
}

func (i *Modem) ToModemOutput() ModemOutput {
	return i.ToModemOutputWithContext(context.Background())
}

func (i *Modem) ToModemOutputWithContext(ctx context.Context) ModemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModemOutput)
}

// ModemArrayInput is an input type that accepts ModemArray and ModemArrayOutput values.
// You can construct a concrete instance of `ModemArrayInput` via:
//
//	ModemArray{ ModemArgs{...} }
type ModemArrayInput interface {
	pulumi.Input

	ToModemArrayOutput() ModemArrayOutput
	ToModemArrayOutputWithContext(context.Context) ModemArrayOutput
}

type ModemArray []ModemInput

func (ModemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Modem)(nil)).Elem()
}

func (i ModemArray) ToModemArrayOutput() ModemArrayOutput {
	return i.ToModemArrayOutputWithContext(context.Background())
}

func (i ModemArray) ToModemArrayOutputWithContext(ctx context.Context) ModemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModemArrayOutput)
}

// ModemMapInput is an input type that accepts ModemMap and ModemMapOutput values.
// You can construct a concrete instance of `ModemMapInput` via:
//
//	ModemMap{ "key": ModemArgs{...} }
type ModemMapInput interface {
	pulumi.Input

	ToModemMapOutput() ModemMapOutput
	ToModemMapOutputWithContext(context.Context) ModemMapOutput
}

type ModemMap map[string]ModemInput

func (ModemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Modem)(nil)).Elem()
}

func (i ModemMap) ToModemMapOutput() ModemMapOutput {
	return i.ToModemMapOutputWithContext(context.Background())
}

func (i ModemMap) ToModemMapOutputWithContext(ctx context.Context) ModemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModemMapOutput)
}

type ModemOutput struct{ *pulumi.OutputState }

func (ModemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Modem)(nil)).Elem()
}

func (o ModemOutput) ToModemOutput() ModemOutput {
	return o
}

func (o ModemOutput) ToModemOutputWithContext(ctx context.Context) ModemOutput {
	return o
}

// Dial up/stop MODEM. Valid values: `dial`, `stop`, `none`.
func (o ModemOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Enable/disable altmode for installations using PPP in China. Valid values: `enable`, `disable`.
func (o ModemOutput) Altmode() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.Altmode }).(pulumi.StringOutput)
}

// Allowed authentication types for ISP 1. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
func (o ModemOutput) Authtype1() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.Authtype1 }).(pulumi.StringOutput)
}

// Allowed authentication types for ISP 2. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
func (o ModemOutput) Authtype2() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.Authtype2 }).(pulumi.StringOutput)
}

// Allowed authentication types for ISP 3. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
func (o ModemOutput) Authtype3() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.Authtype3 }).(pulumi.StringOutput)
}

// Enable/disable auto-dial after a reboot or disconnection. Valid values: `enable`, `disable`.
func (o ModemOutput) AutoDial() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.AutoDial }).(pulumi.StringOutput)
}

// Connection completion timeout (30 - 255 sec, default = 90).
func (o ModemOutput) ConnectTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Modem) pulumi.IntOutput { return v.ConnectTimeout }).(pulumi.IntOutput)
}

// Dial command (this is often an ATD or ATDT command).
func (o ModemOutput) DialCmd1() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.DialCmd1 }).(pulumi.StringOutput)
}

// Dial command (this is often an ATD or ATDT command).
func (o ModemOutput) DialCmd2() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.DialCmd2 }).(pulumi.StringOutput)
}

// Dial command (this is often an ATD or ATDT command).
func (o ModemOutput) DialCmd3() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.DialCmd3 }).(pulumi.StringOutput)
}

// Enable/disable to dial the modem when packets are routed to the modem interface. Valid values: `enable`, `disable`.
func (o ModemOutput) DialOnDemand() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.DialOnDemand }).(pulumi.StringOutput)
}

// Distance of learned routes (1 - 255, default = 1).
func (o ModemOutput) Distance() pulumi.IntOutput {
	return o.ApplyT(func(v *Modem) pulumi.IntOutput { return v.Distance }).(pulumi.IntOutput)
}

// Do not send CR when connected (ISP1). Valid values: `enable`, `disable`.
func (o ModemOutput) DontSendCr1() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.DontSendCr1 }).(pulumi.StringOutput)
}

// Do not send CR when connected (ISP2). Valid values: `enable`, `disable`.
func (o ModemOutput) DontSendCr2() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.DontSendCr2 }).(pulumi.StringOutput)
}

// Do not send CR when connected (ISP3). Valid values: `enable`, `disable`.
func (o ModemOutput) DontSendCr3() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.DontSendCr3 }).(pulumi.StringOutput)
}

// Extra initialization string to ISP 1.
func (o ModemOutput) ExtraInit1() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.ExtraInit1 }).(pulumi.StringOutput)
}

// Extra initialization string to ISP 2.
func (o ModemOutput) ExtraInit2() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.ExtraInit2 }).(pulumi.StringOutput)
}

// Extra initialization string to ISP 3.
func (o ModemOutput) ExtraInit3() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.ExtraInit3 }).(pulumi.StringOutput)
}

// Hold down timer in seconds (1 - 60 sec).
func (o ModemOutput) HolddownTimer() pulumi.IntOutput {
	return o.ApplyT(func(v *Modem) pulumi.IntOutput { return v.HolddownTimer }).(pulumi.IntOutput)
}

// MODEM connection idle time (1 - 9999 min, default = 5).
func (o ModemOutput) IdleTimer() pulumi.IntOutput {
	return o.ApplyT(func(v *Modem) pulumi.IntOutput { return v.IdleTimer }).(pulumi.IntOutput)
}

// Name of redundant interface.
func (o ModemOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Allow connection only to the specified Location Area Code (LAC).
func (o ModemOutput) LockdownLac() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.LockdownLac }).(pulumi.StringOutput)
}

// Set MODEM operation mode to redundant or standalone. Valid values: `standalone`, `redundant`.
func (o ModemOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// AT command to set the Network name/type (AT+COPS=<mode>,[<format>,<oper>[,<AcT>]]).
func (o ModemOutput) NetworkInit() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.NetworkInit }).(pulumi.StringOutput)
}

// Password to access the specified dialup account.
func (o ModemOutput) Passwd1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringPtrOutput { return v.Passwd1 }).(pulumi.StringPtrOutput)
}

// Password to access the specified dialup account.
func (o ModemOutput) Passwd2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringPtrOutput { return v.Passwd2 }).(pulumi.StringPtrOutput)
}

// Password to access the specified dialup account.
func (o ModemOutput) Passwd3() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringPtrOutput { return v.Passwd3 }).(pulumi.StringPtrOutput)
}

// Specify peer MODEM type for phone1. Valid values: `generic`, `actiontec`, `ascend_TNT`.
func (o ModemOutput) PeerModem1() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.PeerModem1 }).(pulumi.StringOutput)
}

// Specify peer MODEM type for phone2. Valid values: `generic`, `actiontec`, `ascend_TNT`.
func (o ModemOutput) PeerModem2() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.PeerModem2 }).(pulumi.StringOutput)
}

// Specify peer MODEM type for phone3. Valid values: `generic`, `actiontec`, `ascend_TNT`.
func (o ModemOutput) PeerModem3() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.PeerModem3 }).(pulumi.StringOutput)
}

// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
func (o ModemOutput) Phone1() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.Phone1 }).(pulumi.StringOutput)
}

// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
func (o ModemOutput) Phone2() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.Phone2 }).(pulumi.StringOutput)
}

// Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
func (o ModemOutput) Phone3() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.Phone3 }).(pulumi.StringOutput)
}

// AT command to set the PIN (AT+PIN=<pin>).
func (o ModemOutput) PinInit() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.PinInit }).(pulumi.StringOutput)
}

// Enable/disable PPP echo-request to ISP 1. Valid values: `enable`, `disable`.
func (o ModemOutput) PppEchoRequest1() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.PppEchoRequest1 }).(pulumi.StringOutput)
}

// Enable/disable PPP echo-request to ISP 2. Valid values: `enable`, `disable`.
func (o ModemOutput) PppEchoRequest2() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.PppEchoRequest2 }).(pulumi.StringOutput)
}

// Enable/disable PPP echo-request to ISP 3. Valid values: `enable`, `disable`.
func (o ModemOutput) PppEchoRequest3() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.PppEchoRequest3 }).(pulumi.StringOutput)
}

// Priority of learned routes (0 - 4294967295, default = 0).
func (o ModemOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *Modem) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// Redial limit (1 - 10 attempts, none = redial forever). Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
func (o ModemOutput) Redial() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.Redial }).(pulumi.StringOutput)
}

// Number of dial attempts before resetting modem (0 = never reset).
func (o ModemOutput) Reset() pulumi.IntOutput {
	return o.ApplyT(func(v *Modem) pulumi.IntOutput { return v.Reset }).(pulumi.IntOutput)
}

// Enable/disable Modem support (equivalent to bringing an interface up or down). Valid values: `enable`, `disable`.
func (o ModemOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Enable/disable traffic-check. Valid values: `enable`, `disable`.
func (o ModemOutput) TrafficCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.TrafficCheck }).(pulumi.StringOutput)
}

// User name to access the specified dialup account.
func (o ModemOutput) Username1() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.Username1 }).(pulumi.StringOutput)
}

// User name to access the specified dialup account.
func (o ModemOutput) Username2() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.Username2 }).(pulumi.StringOutput)
}

// User name to access the specified dialup account.
func (o ModemOutput) Username3() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.Username3 }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ModemOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Modem) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

// Enter wireless port number, 0 for default, 1 for first port, ... (0 - 4294967295, default = 0)
func (o ModemOutput) WirelessPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Modem) pulumi.IntOutput { return v.WirelessPort }).(pulumi.IntOutput)
}

type ModemArrayOutput struct{ *pulumi.OutputState }

func (ModemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Modem)(nil)).Elem()
}

func (o ModemArrayOutput) ToModemArrayOutput() ModemArrayOutput {
	return o
}

func (o ModemArrayOutput) ToModemArrayOutputWithContext(ctx context.Context) ModemArrayOutput {
	return o
}

func (o ModemArrayOutput) Index(i pulumi.IntInput) ModemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Modem {
		return vs[0].([]*Modem)[vs[1].(int)]
	}).(ModemOutput)
}

type ModemMapOutput struct{ *pulumi.OutputState }

func (ModemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Modem)(nil)).Elem()
}

func (o ModemMapOutput) ToModemMapOutput() ModemMapOutput {
	return o
}

func (o ModemMapOutput) ToModemMapOutputWithContext(ctx context.Context) ModemMapOutput {
	return o
}

func (o ModemMapOutput) MapIndex(k pulumi.StringInput) ModemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Modem {
		return vs[0].(map[string]*Modem)[vs[1].(string)]
	}).(ModemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModemInput)(nil)).Elem(), &Modem{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModemArrayInput)(nil)).Elem(), ModemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModemMapInput)(nil)).Elem(), ModemMap{})
	pulumi.RegisterOutputType(ModemOutput{})
	pulumi.RegisterOutputType(ModemArrayOutput{})
	pulumi.RegisterOutputType(ModemMapOutput{})
}
