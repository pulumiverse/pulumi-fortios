// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Provides a resource to update VM license using uploaded file for FortiOS. Reboots immediately if successful.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewLicenseVm(ctx, "test2", &system.LicenseVmArgs{
//				FileContent: pulumi.String("LS0tLS1CRUdJTiBGR1QgVk0gTElDRU5TRS0tLS0tDQpRQUFBQUxXaTdCVnVkV2x3QXJZcC92S2J2Yk5zME5YNWluUW9sVldmcFoxWldJQi9pL2g4c01oR0psWWc5Vkl1DQorSlBJRis1aFphMWwyNm9yNHdiEQE3RnJDeVZnQUFBQWhxWjliWHFLK1hGN2o3dnB3WTB6QXRTaTdOMVM1ZWNxDQpWYmRRREZyYklUdnRvUWNyRU1jV0ltQzFqWWs5dmVoeGlYTG1OV0MwN25BSitYTTJFNmh2b29DMjE1YUwxK2wrDQovUHl5M0VLVnNTNjJDT2hMZHc3UndXajB3V3RqMmZiWg0KLS0tLS1FTkQgRkdUIFZNIExJQ0VOU0UtLS0tLQ0K"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LicenseVm struct {
	pulumi.CustomResourceState

	// The license file, it needs to be base64 encoded, must not contain whitespace or other invalid base64 characters, and must be included in HTTP body.
	FileContent pulumi.StringOutput `pulumi:"fileContent"`
}

// NewLicenseVm registers a new resource with the given unique name, arguments, and options.
func NewLicenseVm(ctx *pulumi.Context,
	name string, args *LicenseVmArgs, opts ...pulumi.ResourceOption) (*LicenseVm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FileContent == nil {
		return nil, errors.New("invalid value for required argument 'FileContent'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LicenseVm
	err := ctx.RegisterResource("fortios:system/licenseVm:LicenseVm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseVm gets an existing LicenseVm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseVm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseVmState, opts ...pulumi.ResourceOption) (*LicenseVm, error) {
	var resource LicenseVm
	err := ctx.ReadResource("fortios:system/licenseVm:LicenseVm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseVm resources.
type licenseVmState struct {
	// The license file, it needs to be base64 encoded, must not contain whitespace or other invalid base64 characters, and must be included in HTTP body.
	FileContent *string `pulumi:"fileContent"`
}

type LicenseVmState struct {
	// The license file, it needs to be base64 encoded, must not contain whitespace or other invalid base64 characters, and must be included in HTTP body.
	FileContent pulumi.StringPtrInput
}

func (LicenseVmState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseVmState)(nil)).Elem()
}

type licenseVmArgs struct {
	// The license file, it needs to be base64 encoded, must not contain whitespace or other invalid base64 characters, and must be included in HTTP body.
	FileContent string `pulumi:"fileContent"`
}

// The set of arguments for constructing a LicenseVm resource.
type LicenseVmArgs struct {
	// The license file, it needs to be base64 encoded, must not contain whitespace or other invalid base64 characters, and must be included in HTTP body.
	FileContent pulumi.StringInput
}

func (LicenseVmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseVmArgs)(nil)).Elem()
}

type LicenseVmInput interface {
	pulumi.Input

	ToLicenseVmOutput() LicenseVmOutput
	ToLicenseVmOutputWithContext(ctx context.Context) LicenseVmOutput
}

func (*LicenseVm) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseVm)(nil)).Elem()
}

func (i *LicenseVm) ToLicenseVmOutput() LicenseVmOutput {
	return i.ToLicenseVmOutputWithContext(context.Background())
}

func (i *LicenseVm) ToLicenseVmOutputWithContext(ctx context.Context) LicenseVmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseVmOutput)
}

// LicenseVmArrayInput is an input type that accepts LicenseVmArray and LicenseVmArrayOutput values.
// You can construct a concrete instance of `LicenseVmArrayInput` via:
//
//	LicenseVmArray{ LicenseVmArgs{...} }
type LicenseVmArrayInput interface {
	pulumi.Input

	ToLicenseVmArrayOutput() LicenseVmArrayOutput
	ToLicenseVmArrayOutputWithContext(context.Context) LicenseVmArrayOutput
}

type LicenseVmArray []LicenseVmInput

func (LicenseVmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseVm)(nil)).Elem()
}

func (i LicenseVmArray) ToLicenseVmArrayOutput() LicenseVmArrayOutput {
	return i.ToLicenseVmArrayOutputWithContext(context.Background())
}

func (i LicenseVmArray) ToLicenseVmArrayOutputWithContext(ctx context.Context) LicenseVmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseVmArrayOutput)
}

// LicenseVmMapInput is an input type that accepts LicenseVmMap and LicenseVmMapOutput values.
// You can construct a concrete instance of `LicenseVmMapInput` via:
//
//	LicenseVmMap{ "key": LicenseVmArgs{...} }
type LicenseVmMapInput interface {
	pulumi.Input

	ToLicenseVmMapOutput() LicenseVmMapOutput
	ToLicenseVmMapOutputWithContext(context.Context) LicenseVmMapOutput
}

type LicenseVmMap map[string]LicenseVmInput

func (LicenseVmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseVm)(nil)).Elem()
}

func (i LicenseVmMap) ToLicenseVmMapOutput() LicenseVmMapOutput {
	return i.ToLicenseVmMapOutputWithContext(context.Background())
}

func (i LicenseVmMap) ToLicenseVmMapOutputWithContext(ctx context.Context) LicenseVmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseVmMapOutput)
}

type LicenseVmOutput struct{ *pulumi.OutputState }

func (LicenseVmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseVm)(nil)).Elem()
}

func (o LicenseVmOutput) ToLicenseVmOutput() LicenseVmOutput {
	return o
}

func (o LicenseVmOutput) ToLicenseVmOutputWithContext(ctx context.Context) LicenseVmOutput {
	return o
}

// The license file, it needs to be base64 encoded, must not contain whitespace or other invalid base64 characters, and must be included in HTTP body.
func (o LicenseVmOutput) FileContent() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseVm) pulumi.StringOutput { return v.FileContent }).(pulumi.StringOutput)
}

type LicenseVmArrayOutput struct{ *pulumi.OutputState }

func (LicenseVmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseVm)(nil)).Elem()
}

func (o LicenseVmArrayOutput) ToLicenseVmArrayOutput() LicenseVmArrayOutput {
	return o
}

func (o LicenseVmArrayOutput) ToLicenseVmArrayOutputWithContext(ctx context.Context) LicenseVmArrayOutput {
	return o
}

func (o LicenseVmArrayOutput) Index(i pulumi.IntInput) LicenseVmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LicenseVm {
		return vs[0].([]*LicenseVm)[vs[1].(int)]
	}).(LicenseVmOutput)
}

type LicenseVmMapOutput struct{ *pulumi.OutputState }

func (LicenseVmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseVm)(nil)).Elem()
}

func (o LicenseVmMapOutput) ToLicenseVmMapOutput() LicenseVmMapOutput {
	return o
}

func (o LicenseVmMapOutput) ToLicenseVmMapOutputWithContext(ctx context.Context) LicenseVmMapOutput {
	return o
}

func (o LicenseVmMapOutput) MapIndex(k pulumi.StringInput) LicenseVmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LicenseVm {
		return vs[0].(map[string]*LicenseVm)[vs[1].(string)]
	}).(LicenseVmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseVmInput)(nil)).Elem(), &LicenseVm{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseVmArrayInput)(nil)).Elem(), LicenseVmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseVmMapInput)(nil)).Elem(), LicenseVmMap{})
	pulumi.RegisterOutputType(LicenseVmOutput{})
	pulumi.RegisterOutputType(LicenseVmArrayOutput{})
	pulumi.RegisterOutputType(LicenseVmMapOutput{})
}
