// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure system probe response.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewProberesponse(ctx, "trname", &system.ProberesponseArgs{
//				HttpProbeValue: pulumi.String("OK"),
//				Mode:           pulumi.String("none"),
//				Port:           pulumi.Int(8008),
//				SecurityMode:   pulumi.String("none"),
//				Timeout:        pulumi.Int(300),
//				TtlMode:        pulumi.String("retain"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// System ProbeResponse can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/proberesponse:Proberesponse labelname SystemProbeResponse
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/proberesponse:Proberesponse labelname SystemProbeResponse
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Proberesponse struct {
	pulumi.CustomResourceState

	// Value to respond to the monitoring server.
	HttpProbeValue pulumi.StringOutput `pulumi:"httpProbeValue"`
	// SLA response mode. Valid values: `none`, `http-probe`, `twamp`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Twamp respondor password in authentication mode
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Port number to response.
	Port pulumi.IntOutput `pulumi:"port"`
	// Twamp respondor security mode. Valid values: `none`, `authentication`.
	SecurityMode pulumi.StringOutput `pulumi:"securityMode"`
	// An inactivity timer for a twamp test session.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// Mode for TWAMP packet TTL modification. Valid values: `reinit`, `decrease`, `retain`.
	TtlMode pulumi.StringOutput `pulumi:"ttlMode"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewProberesponse registers a new resource with the given unique name, arguments, and options.
func NewProberesponse(ctx *pulumi.Context,
	name string, args *ProberesponseArgs, opts ...pulumi.ResourceOption) (*Proberesponse, error) {
	if args == nil {
		args = &ProberesponseArgs{}
	}

	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Proberesponse
	err := ctx.RegisterResource("fortios:system/proberesponse:Proberesponse", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProberesponse gets an existing Proberesponse resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProberesponse(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProberesponseState, opts ...pulumi.ResourceOption) (*Proberesponse, error) {
	var resource Proberesponse
	err := ctx.ReadResource("fortios:system/proberesponse:Proberesponse", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Proberesponse resources.
type proberesponseState struct {
	// Value to respond to the monitoring server.
	HttpProbeValue *string `pulumi:"httpProbeValue"`
	// SLA response mode. Valid values: `none`, `http-probe`, `twamp`.
	Mode *string `pulumi:"mode"`
	// Twamp respondor password in authentication mode
	Password *string `pulumi:"password"`
	// Port number to response.
	Port *int `pulumi:"port"`
	// Twamp respondor security mode. Valid values: `none`, `authentication`.
	SecurityMode *string `pulumi:"securityMode"`
	// An inactivity timer for a twamp test session.
	Timeout *int `pulumi:"timeout"`
	// Mode for TWAMP packet TTL modification. Valid values: `reinit`, `decrease`, `retain`.
	TtlMode *string `pulumi:"ttlMode"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type ProberesponseState struct {
	// Value to respond to the monitoring server.
	HttpProbeValue pulumi.StringPtrInput
	// SLA response mode. Valid values: `none`, `http-probe`, `twamp`.
	Mode pulumi.StringPtrInput
	// Twamp respondor password in authentication mode
	Password pulumi.StringPtrInput
	// Port number to response.
	Port pulumi.IntPtrInput
	// Twamp respondor security mode. Valid values: `none`, `authentication`.
	SecurityMode pulumi.StringPtrInput
	// An inactivity timer for a twamp test session.
	Timeout pulumi.IntPtrInput
	// Mode for TWAMP packet TTL modification. Valid values: `reinit`, `decrease`, `retain`.
	TtlMode pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ProberesponseState) ElementType() reflect.Type {
	return reflect.TypeOf((*proberesponseState)(nil)).Elem()
}

type proberesponseArgs struct {
	// Value to respond to the monitoring server.
	HttpProbeValue *string `pulumi:"httpProbeValue"`
	// SLA response mode. Valid values: `none`, `http-probe`, `twamp`.
	Mode *string `pulumi:"mode"`
	// Twamp respondor password in authentication mode
	Password *string `pulumi:"password"`
	// Port number to response.
	Port *int `pulumi:"port"`
	// Twamp respondor security mode. Valid values: `none`, `authentication`.
	SecurityMode *string `pulumi:"securityMode"`
	// An inactivity timer for a twamp test session.
	Timeout *int `pulumi:"timeout"`
	// Mode for TWAMP packet TTL modification. Valid values: `reinit`, `decrease`, `retain`.
	TtlMode *string `pulumi:"ttlMode"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Proberesponse resource.
type ProberesponseArgs struct {
	// Value to respond to the monitoring server.
	HttpProbeValue pulumi.StringPtrInput
	// SLA response mode. Valid values: `none`, `http-probe`, `twamp`.
	Mode pulumi.StringPtrInput
	// Twamp respondor password in authentication mode
	Password pulumi.StringPtrInput
	// Port number to response.
	Port pulumi.IntPtrInput
	// Twamp respondor security mode. Valid values: `none`, `authentication`.
	SecurityMode pulumi.StringPtrInput
	// An inactivity timer for a twamp test session.
	Timeout pulumi.IntPtrInput
	// Mode for TWAMP packet TTL modification. Valid values: `reinit`, `decrease`, `retain`.
	TtlMode pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ProberesponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*proberesponseArgs)(nil)).Elem()
}

type ProberesponseInput interface {
	pulumi.Input

	ToProberesponseOutput() ProberesponseOutput
	ToProberesponseOutputWithContext(ctx context.Context) ProberesponseOutput
}

func (*Proberesponse) ElementType() reflect.Type {
	return reflect.TypeOf((**Proberesponse)(nil)).Elem()
}

func (i *Proberesponse) ToProberesponseOutput() ProberesponseOutput {
	return i.ToProberesponseOutputWithContext(context.Background())
}

func (i *Proberesponse) ToProberesponseOutputWithContext(ctx context.Context) ProberesponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProberesponseOutput)
}

// ProberesponseArrayInput is an input type that accepts ProberesponseArray and ProberesponseArrayOutput values.
// You can construct a concrete instance of `ProberesponseArrayInput` via:
//
//	ProberesponseArray{ ProberesponseArgs{...} }
type ProberesponseArrayInput interface {
	pulumi.Input

	ToProberesponseArrayOutput() ProberesponseArrayOutput
	ToProberesponseArrayOutputWithContext(context.Context) ProberesponseArrayOutput
}

type ProberesponseArray []ProberesponseInput

func (ProberesponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Proberesponse)(nil)).Elem()
}

func (i ProberesponseArray) ToProberesponseArrayOutput() ProberesponseArrayOutput {
	return i.ToProberesponseArrayOutputWithContext(context.Background())
}

func (i ProberesponseArray) ToProberesponseArrayOutputWithContext(ctx context.Context) ProberesponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProberesponseArrayOutput)
}

// ProberesponseMapInput is an input type that accepts ProberesponseMap and ProberesponseMapOutput values.
// You can construct a concrete instance of `ProberesponseMapInput` via:
//
//	ProberesponseMap{ "key": ProberesponseArgs{...} }
type ProberesponseMapInput interface {
	pulumi.Input

	ToProberesponseMapOutput() ProberesponseMapOutput
	ToProberesponseMapOutputWithContext(context.Context) ProberesponseMapOutput
}

type ProberesponseMap map[string]ProberesponseInput

func (ProberesponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Proberesponse)(nil)).Elem()
}

func (i ProberesponseMap) ToProberesponseMapOutput() ProberesponseMapOutput {
	return i.ToProberesponseMapOutputWithContext(context.Background())
}

func (i ProberesponseMap) ToProberesponseMapOutputWithContext(ctx context.Context) ProberesponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProberesponseMapOutput)
}

type ProberesponseOutput struct{ *pulumi.OutputState }

func (ProberesponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Proberesponse)(nil)).Elem()
}

func (o ProberesponseOutput) ToProberesponseOutput() ProberesponseOutput {
	return o
}

func (o ProberesponseOutput) ToProberesponseOutputWithContext(ctx context.Context) ProberesponseOutput {
	return o
}

// Value to respond to the monitoring server.
func (o ProberesponseOutput) HttpProbeValue() pulumi.StringOutput {
	return o.ApplyT(func(v *Proberesponse) pulumi.StringOutput { return v.HttpProbeValue }).(pulumi.StringOutput)
}

// SLA response mode. Valid values: `none`, `http-probe`, `twamp`.
func (o ProberesponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *Proberesponse) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Twamp respondor password in authentication mode
func (o ProberesponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Proberesponse) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Port number to response.
func (o ProberesponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Proberesponse) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Twamp respondor security mode. Valid values: `none`, `authentication`.
func (o ProberesponseOutput) SecurityMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Proberesponse) pulumi.StringOutput { return v.SecurityMode }).(pulumi.StringOutput)
}

// An inactivity timer for a twamp test session.
func (o ProberesponseOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Proberesponse) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// Mode for TWAMP packet TTL modification. Valid values: `reinit`, `decrease`, `retain`.
func (o ProberesponseOutput) TtlMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Proberesponse) pulumi.StringOutput { return v.TtlMode }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ProberesponseOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Proberesponse) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type ProberesponseArrayOutput struct{ *pulumi.OutputState }

func (ProberesponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Proberesponse)(nil)).Elem()
}

func (o ProberesponseArrayOutput) ToProberesponseArrayOutput() ProberesponseArrayOutput {
	return o
}

func (o ProberesponseArrayOutput) ToProberesponseArrayOutputWithContext(ctx context.Context) ProberesponseArrayOutput {
	return o
}

func (o ProberesponseArrayOutput) Index(i pulumi.IntInput) ProberesponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Proberesponse {
		return vs[0].([]*Proberesponse)[vs[1].(int)]
	}).(ProberesponseOutput)
}

type ProberesponseMapOutput struct{ *pulumi.OutputState }

func (ProberesponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Proberesponse)(nil)).Elem()
}

func (o ProberesponseMapOutput) ToProberesponseMapOutput() ProberesponseMapOutput {
	return o
}

func (o ProberesponseMapOutput) ToProberesponseMapOutputWithContext(ctx context.Context) ProberesponseMapOutput {
	return o
}

func (o ProberesponseMapOutput) MapIndex(k pulumi.StringInput) ProberesponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Proberesponse {
		return vs[0].(map[string]*Proberesponse)[vs[1].(string)]
	}).(ProberesponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProberesponseInput)(nil)).Elem(), &Proberesponse{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProberesponseArrayInput)(nil)).Elem(), ProberesponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProberesponseMapInput)(nil)).Elem(), ProberesponseMap{})
	pulumi.RegisterOutputType(ProberesponseOutput{})
	pulumi.RegisterOutputType(ProberesponseArrayOutput{})
	pulumi.RegisterOutputType(ProberesponseMapOutput{})
}
