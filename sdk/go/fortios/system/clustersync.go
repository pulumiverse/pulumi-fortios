// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure FortiGate Session Life Support Protocol (FGSP) session synchronization. Applies to FortiOS Version `<= 7.2.0`.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewClustersync(ctx, "trname", &system.ClustersyncArgs{
//				HbInterval:        pulumi.Int(3),
//				HbLostThreshold:   pulumi.Int(3),
//				Peerip:            pulumi.String("1.1.1.1"),
//				Peervd:            pulumi.String("root"),
//				SlaveAddIkeRoutes: pulumi.String("enable"),
//				SyncId:            pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// System ClusterSync can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/clustersync:Clustersync labelname {{sync_id}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/clustersync:Clustersync labelname {{sync_id}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Clustersync struct {
	pulumi.CustomResourceState

	// List of interfaces to be turned down before session synchronization is complete. The structure of `downIntfsBeforeSessSync` block is documented below.
	DownIntfsBeforeSessSyncs ClustersyncDownIntfsBeforeSessSyncArrayOutput `pulumi:"downIntfsBeforeSessSyncs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Heartbeat interval (1 - 10 sec).
	HbInterval pulumi.IntOutput `pulumi:"hbInterval"`
	// Lost heartbeat threshold (1 - 10).
	HbLostThreshold pulumi.IntOutput `pulumi:"hbLostThreshold"`
	// IKE heartbeat interval (1 - 60 secs).
	IkeHeartbeatInterval pulumi.IntOutput `pulumi:"ikeHeartbeatInterval"`
	// Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
	IkeMonitor pulumi.StringOutput `pulumi:"ikeMonitor"`
	// IKE HA monitor interval (10 - 300 secs).
	IkeMonitorInterval pulumi.IntOutput `pulumi:"ikeMonitorInterval"`
	// Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
	IpsecTunnelSync pulumi.StringOutput `pulumi:"ipsecTunnelSync"`
	// IP address of the interface on the peer unit that is used for the session synchronization link.
	Peerip pulumi.StringOutput `pulumi:"peerip"`
	// VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
	Peervd pulumi.StringOutput `pulumi:"peervd"`
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SecondaryAddIpsecRoutes pulumi.StringOutput `pulumi:"secondaryAddIpsecRoutes"`
	// Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `sessionSyncFilter` block is documented below.
	SessionSyncFilter ClustersyncSessionSyncFilterOutput `pulumi:"sessionSyncFilter"`
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SlaveAddIkeRoutes pulumi.StringOutput `pulumi:"slaveAddIkeRoutes"`
	// Sync ID.
	SyncId pulumi.IntOutput `pulumi:"syncId"`
	// Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
	Syncvds ClustersyncSyncvdArrayOutput `pulumi:"syncvds"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewClustersync registers a new resource with the given unique name, arguments, and options.
func NewClustersync(ctx *pulumi.Context,
	name string, args *ClustersyncArgs, opts ...pulumi.ResourceOption) (*Clustersync, error) {
	if args == nil {
		args = &ClustersyncArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Clustersync
	err := ctx.RegisterResource("fortios:system/clustersync:Clustersync", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClustersync gets an existing Clustersync resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClustersync(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClustersyncState, opts ...pulumi.ResourceOption) (*Clustersync, error) {
	var resource Clustersync
	err := ctx.ReadResource("fortios:system/clustersync:Clustersync", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Clustersync resources.
type clustersyncState struct {
	// List of interfaces to be turned down before session synchronization is complete. The structure of `downIntfsBeforeSessSync` block is documented below.
	DownIntfsBeforeSessSyncs []ClustersyncDownIntfsBeforeSessSync `pulumi:"downIntfsBeforeSessSyncs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Heartbeat interval (1 - 10 sec).
	HbInterval *int `pulumi:"hbInterval"`
	// Lost heartbeat threshold (1 - 10).
	HbLostThreshold *int `pulumi:"hbLostThreshold"`
	// IKE heartbeat interval (1 - 60 secs).
	IkeHeartbeatInterval *int `pulumi:"ikeHeartbeatInterval"`
	// Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
	IkeMonitor *string `pulumi:"ikeMonitor"`
	// IKE HA monitor interval (10 - 300 secs).
	IkeMonitorInterval *int `pulumi:"ikeMonitorInterval"`
	// Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
	IpsecTunnelSync *string `pulumi:"ipsecTunnelSync"`
	// IP address of the interface on the peer unit that is used for the session synchronization link.
	Peerip *string `pulumi:"peerip"`
	// VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
	Peervd *string `pulumi:"peervd"`
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SecondaryAddIpsecRoutes *string `pulumi:"secondaryAddIpsecRoutes"`
	// Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `sessionSyncFilter` block is documented below.
	SessionSyncFilter *ClustersyncSessionSyncFilter `pulumi:"sessionSyncFilter"`
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SlaveAddIkeRoutes *string `pulumi:"slaveAddIkeRoutes"`
	// Sync ID.
	SyncId *int `pulumi:"syncId"`
	// Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
	Syncvds []ClustersyncSyncvd `pulumi:"syncvds"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type ClustersyncState struct {
	// List of interfaces to be turned down before session synchronization is complete. The structure of `downIntfsBeforeSessSync` block is documented below.
	DownIntfsBeforeSessSyncs ClustersyncDownIntfsBeforeSessSyncArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Heartbeat interval (1 - 10 sec).
	HbInterval pulumi.IntPtrInput
	// Lost heartbeat threshold (1 - 10).
	HbLostThreshold pulumi.IntPtrInput
	// IKE heartbeat interval (1 - 60 secs).
	IkeHeartbeatInterval pulumi.IntPtrInput
	// Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
	IkeMonitor pulumi.StringPtrInput
	// IKE HA monitor interval (10 - 300 secs).
	IkeMonitorInterval pulumi.IntPtrInput
	// Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
	IpsecTunnelSync pulumi.StringPtrInput
	// IP address of the interface on the peer unit that is used for the session synchronization link.
	Peerip pulumi.StringPtrInput
	// VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
	Peervd pulumi.StringPtrInput
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SecondaryAddIpsecRoutes pulumi.StringPtrInput
	// Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `sessionSyncFilter` block is documented below.
	SessionSyncFilter ClustersyncSessionSyncFilterPtrInput
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SlaveAddIkeRoutes pulumi.StringPtrInput
	// Sync ID.
	SyncId pulumi.IntPtrInput
	// Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
	Syncvds ClustersyncSyncvdArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ClustersyncState) ElementType() reflect.Type {
	return reflect.TypeOf((*clustersyncState)(nil)).Elem()
}

type clustersyncArgs struct {
	// List of interfaces to be turned down before session synchronization is complete. The structure of `downIntfsBeforeSessSync` block is documented below.
	DownIntfsBeforeSessSyncs []ClustersyncDownIntfsBeforeSessSync `pulumi:"downIntfsBeforeSessSyncs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Heartbeat interval (1 - 10 sec).
	HbInterval *int `pulumi:"hbInterval"`
	// Lost heartbeat threshold (1 - 10).
	HbLostThreshold *int `pulumi:"hbLostThreshold"`
	// IKE heartbeat interval (1 - 60 secs).
	IkeHeartbeatInterval *int `pulumi:"ikeHeartbeatInterval"`
	// Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
	IkeMonitor *string `pulumi:"ikeMonitor"`
	// IKE HA monitor interval (10 - 300 secs).
	IkeMonitorInterval *int `pulumi:"ikeMonitorInterval"`
	// Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
	IpsecTunnelSync *string `pulumi:"ipsecTunnelSync"`
	// IP address of the interface on the peer unit that is used for the session synchronization link.
	Peerip *string `pulumi:"peerip"`
	// VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
	Peervd *string `pulumi:"peervd"`
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SecondaryAddIpsecRoutes *string `pulumi:"secondaryAddIpsecRoutes"`
	// Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `sessionSyncFilter` block is documented below.
	SessionSyncFilter *ClustersyncSessionSyncFilter `pulumi:"sessionSyncFilter"`
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SlaveAddIkeRoutes *string `pulumi:"slaveAddIkeRoutes"`
	// Sync ID.
	SyncId *int `pulumi:"syncId"`
	// Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
	Syncvds []ClustersyncSyncvd `pulumi:"syncvds"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Clustersync resource.
type ClustersyncArgs struct {
	// List of interfaces to be turned down before session synchronization is complete. The structure of `downIntfsBeforeSessSync` block is documented below.
	DownIntfsBeforeSessSyncs ClustersyncDownIntfsBeforeSessSyncArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Heartbeat interval (1 - 10 sec).
	HbInterval pulumi.IntPtrInput
	// Lost heartbeat threshold (1 - 10).
	HbLostThreshold pulumi.IntPtrInput
	// IKE heartbeat interval (1 - 60 secs).
	IkeHeartbeatInterval pulumi.IntPtrInput
	// Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
	IkeMonitor pulumi.StringPtrInput
	// IKE HA monitor interval (10 - 300 secs).
	IkeMonitorInterval pulumi.IntPtrInput
	// Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
	IpsecTunnelSync pulumi.StringPtrInput
	// IP address of the interface on the peer unit that is used for the session synchronization link.
	Peerip pulumi.StringPtrInput
	// VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
	Peervd pulumi.StringPtrInput
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SecondaryAddIpsecRoutes pulumi.StringPtrInput
	// Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `sessionSyncFilter` block is documented below.
	SessionSyncFilter ClustersyncSessionSyncFilterPtrInput
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SlaveAddIkeRoutes pulumi.StringPtrInput
	// Sync ID.
	SyncId pulumi.IntPtrInput
	// Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
	Syncvds ClustersyncSyncvdArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ClustersyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clustersyncArgs)(nil)).Elem()
}

type ClustersyncInput interface {
	pulumi.Input

	ToClustersyncOutput() ClustersyncOutput
	ToClustersyncOutputWithContext(ctx context.Context) ClustersyncOutput
}

func (*Clustersync) ElementType() reflect.Type {
	return reflect.TypeOf((**Clustersync)(nil)).Elem()
}

func (i *Clustersync) ToClustersyncOutput() ClustersyncOutput {
	return i.ToClustersyncOutputWithContext(context.Background())
}

func (i *Clustersync) ToClustersyncOutputWithContext(ctx context.Context) ClustersyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClustersyncOutput)
}

// ClustersyncArrayInput is an input type that accepts ClustersyncArray and ClustersyncArrayOutput values.
// You can construct a concrete instance of `ClustersyncArrayInput` via:
//
//	ClustersyncArray{ ClustersyncArgs{...} }
type ClustersyncArrayInput interface {
	pulumi.Input

	ToClustersyncArrayOutput() ClustersyncArrayOutput
	ToClustersyncArrayOutputWithContext(context.Context) ClustersyncArrayOutput
}

type ClustersyncArray []ClustersyncInput

func (ClustersyncArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Clustersync)(nil)).Elem()
}

func (i ClustersyncArray) ToClustersyncArrayOutput() ClustersyncArrayOutput {
	return i.ToClustersyncArrayOutputWithContext(context.Background())
}

func (i ClustersyncArray) ToClustersyncArrayOutputWithContext(ctx context.Context) ClustersyncArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClustersyncArrayOutput)
}

// ClustersyncMapInput is an input type that accepts ClustersyncMap and ClustersyncMapOutput values.
// You can construct a concrete instance of `ClustersyncMapInput` via:
//
//	ClustersyncMap{ "key": ClustersyncArgs{...} }
type ClustersyncMapInput interface {
	pulumi.Input

	ToClustersyncMapOutput() ClustersyncMapOutput
	ToClustersyncMapOutputWithContext(context.Context) ClustersyncMapOutput
}

type ClustersyncMap map[string]ClustersyncInput

func (ClustersyncMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Clustersync)(nil)).Elem()
}

func (i ClustersyncMap) ToClustersyncMapOutput() ClustersyncMapOutput {
	return i.ToClustersyncMapOutputWithContext(context.Background())
}

func (i ClustersyncMap) ToClustersyncMapOutputWithContext(ctx context.Context) ClustersyncMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClustersyncMapOutput)
}

type ClustersyncOutput struct{ *pulumi.OutputState }

func (ClustersyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Clustersync)(nil)).Elem()
}

func (o ClustersyncOutput) ToClustersyncOutput() ClustersyncOutput {
	return o
}

func (o ClustersyncOutput) ToClustersyncOutputWithContext(ctx context.Context) ClustersyncOutput {
	return o
}

// List of interfaces to be turned down before session synchronization is complete. The structure of `downIntfsBeforeSessSync` block is documented below.
func (o ClustersyncOutput) DownIntfsBeforeSessSyncs() ClustersyncDownIntfsBeforeSessSyncArrayOutput {
	return o.ApplyT(func(v *Clustersync) ClustersyncDownIntfsBeforeSessSyncArrayOutput { return v.DownIntfsBeforeSessSyncs }).(ClustersyncDownIntfsBeforeSessSyncArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o ClustersyncOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clustersync) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o ClustersyncOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clustersync) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Heartbeat interval (1 - 10 sec).
func (o ClustersyncOutput) HbInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Clustersync) pulumi.IntOutput { return v.HbInterval }).(pulumi.IntOutput)
}

// Lost heartbeat threshold (1 - 10).
func (o ClustersyncOutput) HbLostThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *Clustersync) pulumi.IntOutput { return v.HbLostThreshold }).(pulumi.IntOutput)
}

// IKE heartbeat interval (1 - 60 secs).
func (o ClustersyncOutput) IkeHeartbeatInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Clustersync) pulumi.IntOutput { return v.IkeHeartbeatInterval }).(pulumi.IntOutput)
}

// Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
func (o ClustersyncOutput) IkeMonitor() pulumi.StringOutput {
	return o.ApplyT(func(v *Clustersync) pulumi.StringOutput { return v.IkeMonitor }).(pulumi.StringOutput)
}

// IKE HA monitor interval (10 - 300 secs).
func (o ClustersyncOutput) IkeMonitorInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Clustersync) pulumi.IntOutput { return v.IkeMonitorInterval }).(pulumi.IntOutput)
}

// Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
func (o ClustersyncOutput) IpsecTunnelSync() pulumi.StringOutput {
	return o.ApplyT(func(v *Clustersync) pulumi.StringOutput { return v.IpsecTunnelSync }).(pulumi.StringOutput)
}

// IP address of the interface on the peer unit that is used for the session synchronization link.
func (o ClustersyncOutput) Peerip() pulumi.StringOutput {
	return o.ApplyT(func(v *Clustersync) pulumi.StringOutput { return v.Peerip }).(pulumi.StringOutput)
}

// VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
func (o ClustersyncOutput) Peervd() pulumi.StringOutput {
	return o.ApplyT(func(v *Clustersync) pulumi.StringOutput { return v.Peervd }).(pulumi.StringOutput)
}

// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
func (o ClustersyncOutput) SecondaryAddIpsecRoutes() pulumi.StringOutput {
	return o.ApplyT(func(v *Clustersync) pulumi.StringOutput { return v.SecondaryAddIpsecRoutes }).(pulumi.StringOutput)
}

// Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `sessionSyncFilter` block is documented below.
func (o ClustersyncOutput) SessionSyncFilter() ClustersyncSessionSyncFilterOutput {
	return o.ApplyT(func(v *Clustersync) ClustersyncSessionSyncFilterOutput { return v.SessionSyncFilter }).(ClustersyncSessionSyncFilterOutput)
}

// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
func (o ClustersyncOutput) SlaveAddIkeRoutes() pulumi.StringOutput {
	return o.ApplyT(func(v *Clustersync) pulumi.StringOutput { return v.SlaveAddIkeRoutes }).(pulumi.StringOutput)
}

// Sync ID.
func (o ClustersyncOutput) SyncId() pulumi.IntOutput {
	return o.ApplyT(func(v *Clustersync) pulumi.IntOutput { return v.SyncId }).(pulumi.IntOutput)
}

// Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
func (o ClustersyncOutput) Syncvds() ClustersyncSyncvdArrayOutput {
	return o.ApplyT(func(v *Clustersync) ClustersyncSyncvdArrayOutput { return v.Syncvds }).(ClustersyncSyncvdArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ClustersyncOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clustersync) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type ClustersyncArrayOutput struct{ *pulumi.OutputState }

func (ClustersyncArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Clustersync)(nil)).Elem()
}

func (o ClustersyncArrayOutput) ToClustersyncArrayOutput() ClustersyncArrayOutput {
	return o
}

func (o ClustersyncArrayOutput) ToClustersyncArrayOutputWithContext(ctx context.Context) ClustersyncArrayOutput {
	return o
}

func (o ClustersyncArrayOutput) Index(i pulumi.IntInput) ClustersyncOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Clustersync {
		return vs[0].([]*Clustersync)[vs[1].(int)]
	}).(ClustersyncOutput)
}

type ClustersyncMapOutput struct{ *pulumi.OutputState }

func (ClustersyncMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Clustersync)(nil)).Elem()
}

func (o ClustersyncMapOutput) ToClustersyncMapOutput() ClustersyncMapOutput {
	return o
}

func (o ClustersyncMapOutput) ToClustersyncMapOutputWithContext(ctx context.Context) ClustersyncMapOutput {
	return o
}

func (o ClustersyncMapOutput) MapIndex(k pulumi.StringInput) ClustersyncOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Clustersync {
		return vs[0].(map[string]*Clustersync)[vs[1].(string)]
	}).(ClustersyncOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClustersyncInput)(nil)).Elem(), &Clustersync{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClustersyncArrayInput)(nil)).Elem(), ClustersyncArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClustersyncMapInput)(nil)).Elem(), ClustersyncMap{})
	pulumi.RegisterOutputType(ClustersyncOutput{})
	pulumi.RegisterOutputType(ClustersyncArrayOutput{})
	pulumi.RegisterOutputType(ClustersyncMapOutput{})
}
