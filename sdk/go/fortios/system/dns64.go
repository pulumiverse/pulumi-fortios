// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure DNS64. Applies to FortiOS Version `>= 7.0.1`.
//
// ## Import
//
// System Dns64 can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/dns64:Dns64 labelname SystemDns64
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/dns64:Dns64 labelname SystemDns64
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Dns64 struct {
	pulumi.CustomResourceState

	// Enable/disable AAAA record synthesis (default = enable). Valid values: `enable`, `disable`.
	AlwaysSynthesizeAaaaRecord pulumi.StringOutput `pulumi:"alwaysSynthesizeAaaaRecord"`
	// DNS64 prefix must be ::/96 (default = 64:ff9b::/96).
	Dns64Prefix pulumi.StringOutput `pulumi:"dns64Prefix"`
	// Enable/disable DNS64 (default = disable). Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewDns64 registers a new resource with the given unique name, arguments, and options.
func NewDns64(ctx *pulumi.Context,
	name string, args *Dns64Args, opts ...pulumi.ResourceOption) (*Dns64, error) {
	if args == nil {
		args = &Dns64Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dns64
	err := ctx.RegisterResource("fortios:system/dns64:Dns64", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDns64 gets an existing Dns64 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDns64(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Dns64State, opts ...pulumi.ResourceOption) (*Dns64, error) {
	var resource Dns64
	err := ctx.ReadResource("fortios:system/dns64:Dns64", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dns64 resources.
type dns64State struct {
	// Enable/disable AAAA record synthesis (default = enable). Valid values: `enable`, `disable`.
	AlwaysSynthesizeAaaaRecord *string `pulumi:"alwaysSynthesizeAaaaRecord"`
	// DNS64 prefix must be ::/96 (default = 64:ff9b::/96).
	Dns64Prefix *string `pulumi:"dns64Prefix"`
	// Enable/disable DNS64 (default = disable). Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type Dns64State struct {
	// Enable/disable AAAA record synthesis (default = enable). Valid values: `enable`, `disable`.
	AlwaysSynthesizeAaaaRecord pulumi.StringPtrInput
	// DNS64 prefix must be ::/96 (default = 64:ff9b::/96).
	Dns64Prefix pulumi.StringPtrInput
	// Enable/disable DNS64 (default = disable). Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Dns64State) ElementType() reflect.Type {
	return reflect.TypeOf((*dns64State)(nil)).Elem()
}

type dns64Args struct {
	// Enable/disable AAAA record synthesis (default = enable). Valid values: `enable`, `disable`.
	AlwaysSynthesizeAaaaRecord *string `pulumi:"alwaysSynthesizeAaaaRecord"`
	// DNS64 prefix must be ::/96 (default = 64:ff9b::/96).
	Dns64Prefix *string `pulumi:"dns64Prefix"`
	// Enable/disable DNS64 (default = disable). Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Dns64 resource.
type Dns64Args struct {
	// Enable/disable AAAA record synthesis (default = enable). Valid values: `enable`, `disable`.
	AlwaysSynthesizeAaaaRecord pulumi.StringPtrInput
	// DNS64 prefix must be ::/96 (default = 64:ff9b::/96).
	Dns64Prefix pulumi.StringPtrInput
	// Enable/disable DNS64 (default = disable). Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Dns64Args) ElementType() reflect.Type {
	return reflect.TypeOf((*dns64Args)(nil)).Elem()
}

type Dns64Input interface {
	pulumi.Input

	ToDns64Output() Dns64Output
	ToDns64OutputWithContext(ctx context.Context) Dns64Output
}

func (*Dns64) ElementType() reflect.Type {
	return reflect.TypeOf((**Dns64)(nil)).Elem()
}

func (i *Dns64) ToDns64Output() Dns64Output {
	return i.ToDns64OutputWithContext(context.Background())
}

func (i *Dns64) ToDns64OutputWithContext(ctx context.Context) Dns64Output {
	return pulumi.ToOutputWithContext(ctx, i).(Dns64Output)
}

// Dns64ArrayInput is an input type that accepts Dns64Array and Dns64ArrayOutput values.
// You can construct a concrete instance of `Dns64ArrayInput` via:
//
//	Dns64Array{ Dns64Args{...} }
type Dns64ArrayInput interface {
	pulumi.Input

	ToDns64ArrayOutput() Dns64ArrayOutput
	ToDns64ArrayOutputWithContext(context.Context) Dns64ArrayOutput
}

type Dns64Array []Dns64Input

func (Dns64Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dns64)(nil)).Elem()
}

func (i Dns64Array) ToDns64ArrayOutput() Dns64ArrayOutput {
	return i.ToDns64ArrayOutputWithContext(context.Background())
}

func (i Dns64Array) ToDns64ArrayOutputWithContext(ctx context.Context) Dns64ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Dns64ArrayOutput)
}

// Dns64MapInput is an input type that accepts Dns64Map and Dns64MapOutput values.
// You can construct a concrete instance of `Dns64MapInput` via:
//
//	Dns64Map{ "key": Dns64Args{...} }
type Dns64MapInput interface {
	pulumi.Input

	ToDns64MapOutput() Dns64MapOutput
	ToDns64MapOutputWithContext(context.Context) Dns64MapOutput
}

type Dns64Map map[string]Dns64Input

func (Dns64Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dns64)(nil)).Elem()
}

func (i Dns64Map) ToDns64MapOutput() Dns64MapOutput {
	return i.ToDns64MapOutputWithContext(context.Background())
}

func (i Dns64Map) ToDns64MapOutputWithContext(ctx context.Context) Dns64MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Dns64MapOutput)
}

type Dns64Output struct{ *pulumi.OutputState }

func (Dns64Output) ElementType() reflect.Type {
	return reflect.TypeOf((**Dns64)(nil)).Elem()
}

func (o Dns64Output) ToDns64Output() Dns64Output {
	return o
}

func (o Dns64Output) ToDns64OutputWithContext(ctx context.Context) Dns64Output {
	return o
}

// Enable/disable AAAA record synthesis (default = enable). Valid values: `enable`, `disable`.
func (o Dns64Output) AlwaysSynthesizeAaaaRecord() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns64) pulumi.StringOutput { return v.AlwaysSynthesizeAaaaRecord }).(pulumi.StringOutput)
}

// DNS64 prefix must be ::/96 (default = 64:ff9b::/96).
func (o Dns64Output) Dns64Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns64) pulumi.StringOutput { return v.Dns64Prefix }).(pulumi.StringOutput)
}

// Enable/disable DNS64 (default = disable). Valid values: `enable`, `disable`.
func (o Dns64Output) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns64) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o Dns64Output) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns64) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type Dns64ArrayOutput struct{ *pulumi.OutputState }

func (Dns64ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dns64)(nil)).Elem()
}

func (o Dns64ArrayOutput) ToDns64ArrayOutput() Dns64ArrayOutput {
	return o
}

func (o Dns64ArrayOutput) ToDns64ArrayOutputWithContext(ctx context.Context) Dns64ArrayOutput {
	return o
}

func (o Dns64ArrayOutput) Index(i pulumi.IntInput) Dns64Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dns64 {
		return vs[0].([]*Dns64)[vs[1].(int)]
	}).(Dns64Output)
}

type Dns64MapOutput struct{ *pulumi.OutputState }

func (Dns64MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dns64)(nil)).Elem()
}

func (o Dns64MapOutput) ToDns64MapOutput() Dns64MapOutput {
	return o
}

func (o Dns64MapOutput) ToDns64MapOutputWithContext(ctx context.Context) Dns64MapOutput {
	return o
}

func (o Dns64MapOutput) MapIndex(k pulumi.StringInput) Dns64Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dns64 {
		return vs[0].(map[string]*Dns64)[vs[1].(string)]
	}).(Dns64Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Dns64Input)(nil)).Elem(), &Dns64{})
	pulumi.RegisterInputType(reflect.TypeOf((*Dns64ArrayInput)(nil)).Elem(), Dns64Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*Dns64MapInput)(nil)).Elem(), Dns64Map{})
	pulumi.RegisterOutputType(Dns64Output{})
	pulumi.RegisterOutputType(Dns64ArrayOutput{})
	pulumi.RegisterOutputType(Dns64MapOutput{})
}
