// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure password policy for locally defined administrator passwords and IPsec VPN pre-shared keys.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewPasswordpolicy(ctx, "trname", &system.PasswordpolicyArgs{
//				ApplyTo:            pulumi.String("admin-password"),
//				Change4Characters:  pulumi.String("disable"),
//				ExpireDay:          pulumi.Int(90),
//				ExpireStatus:       pulumi.String("disable"),
//				MinLowerCaseLetter: pulumi.Int(0),
//				MinNonAlphanumeric: pulumi.Int(0),
//				MinNumber:          pulumi.Int(0),
//				MinUpperCaseLetter: pulumi.Int(0),
//				MinimumLength:      pulumi.Int(8),
//				ReusePassword:      pulumi.String("enable"),
//				Status:             pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// System PasswordPolicy can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/passwordpolicy:Passwordpolicy labelname SystemPasswordPolicy
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/passwordpolicy:Passwordpolicy labelname SystemPasswordPolicy
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Passwordpolicy struct {
	pulumi.CustomResourceState

	// Apply password policy to administrator passwords or IPsec pre-shared keys or both. Separate entries with a space. Valid values: `admin-password`, `ipsec-preshared-key`.
	ApplyTo pulumi.StringOutput `pulumi:"applyTo"`
	// Enable/disable changing at least 4 characters for a new password (This attribute overrides reuse-password if both are enabled). Valid values: `enable`, `disable`.
	Change4Characters pulumi.StringOutput `pulumi:"change4Characters"`
	// Number of days after which passwords expire (1 - 999 days, default = 90).
	ExpireDay pulumi.IntOutput `pulumi:"expireDay"`
	// Enable/disable password expiration. Valid values: `enable`, `disable`.
	ExpireStatus pulumi.StringOutput `pulumi:"expireStatus"`
	// Minimum number of unique characters in new password which do not exist in old password (0 - 128, default = 0. This attribute overrides reuse-password if both are enabled).
	MinChangeCharacters pulumi.IntOutput `pulumi:"minChangeCharacters"`
	// Minimum number of lowercase characters in password (0 - 128, default = 0).
	MinLowerCaseLetter pulumi.IntOutput `pulumi:"minLowerCaseLetter"`
	// Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
	MinNonAlphanumeric pulumi.IntOutput `pulumi:"minNonAlphanumeric"`
	// Minimum number of numeric characters in password (0 - 128, default = 0).
	MinNumber pulumi.IntOutput `pulumi:"minNumber"`
	// Minimum number of uppercase characters in password (0 - 128, default = 0).
	MinUpperCaseLetter pulumi.IntOutput `pulumi:"minUpperCaseLetter"`
	// Minimum password length (8 - 128, default = 8).
	MinimumLength pulumi.IntOutput `pulumi:"minimumLength"`
	// Enable/disable reuse of password. On FortiOS versions 6.2.0-7.0.0: If both reuse-password and change-4-characters are enabled, change-4-characters overrides.. On FortiOS versions >= 7.0.1: If both reuse-password and min-change-characters are enabled, min-change-characters overrides.. Valid values: `enable`, `disable`.
	ReusePassword pulumi.StringOutput `pulumi:"reusePassword"`
	// Enable/disable setting a password policy for locally defined administrator passwords and IPsec VPN pre-shared keys. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewPasswordpolicy registers a new resource with the given unique name, arguments, and options.
func NewPasswordpolicy(ctx *pulumi.Context,
	name string, args *PasswordpolicyArgs, opts ...pulumi.ResourceOption) (*Passwordpolicy, error) {
	if args == nil {
		args = &PasswordpolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Passwordpolicy
	err := ctx.RegisterResource("fortios:system/passwordpolicy:Passwordpolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPasswordpolicy gets an existing Passwordpolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPasswordpolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PasswordpolicyState, opts ...pulumi.ResourceOption) (*Passwordpolicy, error) {
	var resource Passwordpolicy
	err := ctx.ReadResource("fortios:system/passwordpolicy:Passwordpolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Passwordpolicy resources.
type passwordpolicyState struct {
	// Apply password policy to administrator passwords or IPsec pre-shared keys or both. Separate entries with a space. Valid values: `admin-password`, `ipsec-preshared-key`.
	ApplyTo *string `pulumi:"applyTo"`
	// Enable/disable changing at least 4 characters for a new password (This attribute overrides reuse-password if both are enabled). Valid values: `enable`, `disable`.
	Change4Characters *string `pulumi:"change4Characters"`
	// Number of days after which passwords expire (1 - 999 days, default = 90).
	ExpireDay *int `pulumi:"expireDay"`
	// Enable/disable password expiration. Valid values: `enable`, `disable`.
	ExpireStatus *string `pulumi:"expireStatus"`
	// Minimum number of unique characters in new password which do not exist in old password (0 - 128, default = 0. This attribute overrides reuse-password if both are enabled).
	MinChangeCharacters *int `pulumi:"minChangeCharacters"`
	// Minimum number of lowercase characters in password (0 - 128, default = 0).
	MinLowerCaseLetter *int `pulumi:"minLowerCaseLetter"`
	// Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
	MinNonAlphanumeric *int `pulumi:"minNonAlphanumeric"`
	// Minimum number of numeric characters in password (0 - 128, default = 0).
	MinNumber *int `pulumi:"minNumber"`
	// Minimum number of uppercase characters in password (0 - 128, default = 0).
	MinUpperCaseLetter *int `pulumi:"minUpperCaseLetter"`
	// Minimum password length (8 - 128, default = 8).
	MinimumLength *int `pulumi:"minimumLength"`
	// Enable/disable reuse of password. On FortiOS versions 6.2.0-7.0.0: If both reuse-password and change-4-characters are enabled, change-4-characters overrides.. On FortiOS versions >= 7.0.1: If both reuse-password and min-change-characters are enabled, min-change-characters overrides.. Valid values: `enable`, `disable`.
	ReusePassword *string `pulumi:"reusePassword"`
	// Enable/disable setting a password policy for locally defined administrator passwords and IPsec VPN pre-shared keys. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type PasswordpolicyState struct {
	// Apply password policy to administrator passwords or IPsec pre-shared keys or both. Separate entries with a space. Valid values: `admin-password`, `ipsec-preshared-key`.
	ApplyTo pulumi.StringPtrInput
	// Enable/disable changing at least 4 characters for a new password (This attribute overrides reuse-password if both are enabled). Valid values: `enable`, `disable`.
	Change4Characters pulumi.StringPtrInput
	// Number of days after which passwords expire (1 - 999 days, default = 90).
	ExpireDay pulumi.IntPtrInput
	// Enable/disable password expiration. Valid values: `enable`, `disable`.
	ExpireStatus pulumi.StringPtrInput
	// Minimum number of unique characters in new password which do not exist in old password (0 - 128, default = 0. This attribute overrides reuse-password if both are enabled).
	MinChangeCharacters pulumi.IntPtrInput
	// Minimum number of lowercase characters in password (0 - 128, default = 0).
	MinLowerCaseLetter pulumi.IntPtrInput
	// Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
	MinNonAlphanumeric pulumi.IntPtrInput
	// Minimum number of numeric characters in password (0 - 128, default = 0).
	MinNumber pulumi.IntPtrInput
	// Minimum number of uppercase characters in password (0 - 128, default = 0).
	MinUpperCaseLetter pulumi.IntPtrInput
	// Minimum password length (8 - 128, default = 8).
	MinimumLength pulumi.IntPtrInput
	// Enable/disable reuse of password. On FortiOS versions 6.2.0-7.0.0: If both reuse-password and change-4-characters are enabled, change-4-characters overrides.. On FortiOS versions >= 7.0.1: If both reuse-password and min-change-characters are enabled, min-change-characters overrides.. Valid values: `enable`, `disable`.
	ReusePassword pulumi.StringPtrInput
	// Enable/disable setting a password policy for locally defined administrator passwords and IPsec VPN pre-shared keys. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (PasswordpolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordpolicyState)(nil)).Elem()
}

type passwordpolicyArgs struct {
	// Apply password policy to administrator passwords or IPsec pre-shared keys or both. Separate entries with a space. Valid values: `admin-password`, `ipsec-preshared-key`.
	ApplyTo *string `pulumi:"applyTo"`
	// Enable/disable changing at least 4 characters for a new password (This attribute overrides reuse-password if both are enabled). Valid values: `enable`, `disable`.
	Change4Characters *string `pulumi:"change4Characters"`
	// Number of days after which passwords expire (1 - 999 days, default = 90).
	ExpireDay *int `pulumi:"expireDay"`
	// Enable/disable password expiration. Valid values: `enable`, `disable`.
	ExpireStatus *string `pulumi:"expireStatus"`
	// Minimum number of unique characters in new password which do not exist in old password (0 - 128, default = 0. This attribute overrides reuse-password if both are enabled).
	MinChangeCharacters *int `pulumi:"minChangeCharacters"`
	// Minimum number of lowercase characters in password (0 - 128, default = 0).
	MinLowerCaseLetter *int `pulumi:"minLowerCaseLetter"`
	// Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
	MinNonAlphanumeric *int `pulumi:"minNonAlphanumeric"`
	// Minimum number of numeric characters in password (0 - 128, default = 0).
	MinNumber *int `pulumi:"minNumber"`
	// Minimum number of uppercase characters in password (0 - 128, default = 0).
	MinUpperCaseLetter *int `pulumi:"minUpperCaseLetter"`
	// Minimum password length (8 - 128, default = 8).
	MinimumLength *int `pulumi:"minimumLength"`
	// Enable/disable reuse of password. On FortiOS versions 6.2.0-7.0.0: If both reuse-password and change-4-characters are enabled, change-4-characters overrides.. On FortiOS versions >= 7.0.1: If both reuse-password and min-change-characters are enabled, min-change-characters overrides.. Valid values: `enable`, `disable`.
	ReusePassword *string `pulumi:"reusePassword"`
	// Enable/disable setting a password policy for locally defined administrator passwords and IPsec VPN pre-shared keys. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Passwordpolicy resource.
type PasswordpolicyArgs struct {
	// Apply password policy to administrator passwords or IPsec pre-shared keys or both. Separate entries with a space. Valid values: `admin-password`, `ipsec-preshared-key`.
	ApplyTo pulumi.StringPtrInput
	// Enable/disable changing at least 4 characters for a new password (This attribute overrides reuse-password if both are enabled). Valid values: `enable`, `disable`.
	Change4Characters pulumi.StringPtrInput
	// Number of days after which passwords expire (1 - 999 days, default = 90).
	ExpireDay pulumi.IntPtrInput
	// Enable/disable password expiration. Valid values: `enable`, `disable`.
	ExpireStatus pulumi.StringPtrInput
	// Minimum number of unique characters in new password which do not exist in old password (0 - 128, default = 0. This attribute overrides reuse-password if both are enabled).
	MinChangeCharacters pulumi.IntPtrInput
	// Minimum number of lowercase characters in password (0 - 128, default = 0).
	MinLowerCaseLetter pulumi.IntPtrInput
	// Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
	MinNonAlphanumeric pulumi.IntPtrInput
	// Minimum number of numeric characters in password (0 - 128, default = 0).
	MinNumber pulumi.IntPtrInput
	// Minimum number of uppercase characters in password (0 - 128, default = 0).
	MinUpperCaseLetter pulumi.IntPtrInput
	// Minimum password length (8 - 128, default = 8).
	MinimumLength pulumi.IntPtrInput
	// Enable/disable reuse of password. On FortiOS versions 6.2.0-7.0.0: If both reuse-password and change-4-characters are enabled, change-4-characters overrides.. On FortiOS versions >= 7.0.1: If both reuse-password and min-change-characters are enabled, min-change-characters overrides.. Valid values: `enable`, `disable`.
	ReusePassword pulumi.StringPtrInput
	// Enable/disable setting a password policy for locally defined administrator passwords and IPsec VPN pre-shared keys. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (PasswordpolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordpolicyArgs)(nil)).Elem()
}

type PasswordpolicyInput interface {
	pulumi.Input

	ToPasswordpolicyOutput() PasswordpolicyOutput
	ToPasswordpolicyOutputWithContext(ctx context.Context) PasswordpolicyOutput
}

func (*Passwordpolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**Passwordpolicy)(nil)).Elem()
}

func (i *Passwordpolicy) ToPasswordpolicyOutput() PasswordpolicyOutput {
	return i.ToPasswordpolicyOutputWithContext(context.Background())
}

func (i *Passwordpolicy) ToPasswordpolicyOutputWithContext(ctx context.Context) PasswordpolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordpolicyOutput)
}

// PasswordpolicyArrayInput is an input type that accepts PasswordpolicyArray and PasswordpolicyArrayOutput values.
// You can construct a concrete instance of `PasswordpolicyArrayInput` via:
//
//	PasswordpolicyArray{ PasswordpolicyArgs{...} }
type PasswordpolicyArrayInput interface {
	pulumi.Input

	ToPasswordpolicyArrayOutput() PasswordpolicyArrayOutput
	ToPasswordpolicyArrayOutputWithContext(context.Context) PasswordpolicyArrayOutput
}

type PasswordpolicyArray []PasswordpolicyInput

func (PasswordpolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Passwordpolicy)(nil)).Elem()
}

func (i PasswordpolicyArray) ToPasswordpolicyArrayOutput() PasswordpolicyArrayOutput {
	return i.ToPasswordpolicyArrayOutputWithContext(context.Background())
}

func (i PasswordpolicyArray) ToPasswordpolicyArrayOutputWithContext(ctx context.Context) PasswordpolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordpolicyArrayOutput)
}

// PasswordpolicyMapInput is an input type that accepts PasswordpolicyMap and PasswordpolicyMapOutput values.
// You can construct a concrete instance of `PasswordpolicyMapInput` via:
//
//	PasswordpolicyMap{ "key": PasswordpolicyArgs{...} }
type PasswordpolicyMapInput interface {
	pulumi.Input

	ToPasswordpolicyMapOutput() PasswordpolicyMapOutput
	ToPasswordpolicyMapOutputWithContext(context.Context) PasswordpolicyMapOutput
}

type PasswordpolicyMap map[string]PasswordpolicyInput

func (PasswordpolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Passwordpolicy)(nil)).Elem()
}

func (i PasswordpolicyMap) ToPasswordpolicyMapOutput() PasswordpolicyMapOutput {
	return i.ToPasswordpolicyMapOutputWithContext(context.Background())
}

func (i PasswordpolicyMap) ToPasswordpolicyMapOutputWithContext(ctx context.Context) PasswordpolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordpolicyMapOutput)
}

type PasswordpolicyOutput struct{ *pulumi.OutputState }

func (PasswordpolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Passwordpolicy)(nil)).Elem()
}

func (o PasswordpolicyOutput) ToPasswordpolicyOutput() PasswordpolicyOutput {
	return o
}

func (o PasswordpolicyOutput) ToPasswordpolicyOutputWithContext(ctx context.Context) PasswordpolicyOutput {
	return o
}

// Apply password policy to administrator passwords or IPsec pre-shared keys or both. Separate entries with a space. Valid values: `admin-password`, `ipsec-preshared-key`.
func (o PasswordpolicyOutput) ApplyTo() pulumi.StringOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.StringOutput { return v.ApplyTo }).(pulumi.StringOutput)
}

// Enable/disable changing at least 4 characters for a new password (This attribute overrides reuse-password if both are enabled). Valid values: `enable`, `disable`.
func (o PasswordpolicyOutput) Change4Characters() pulumi.StringOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.StringOutput { return v.Change4Characters }).(pulumi.StringOutput)
}

// Number of days after which passwords expire (1 - 999 days, default = 90).
func (o PasswordpolicyOutput) ExpireDay() pulumi.IntOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.IntOutput { return v.ExpireDay }).(pulumi.IntOutput)
}

// Enable/disable password expiration. Valid values: `enable`, `disable`.
func (o PasswordpolicyOutput) ExpireStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.StringOutput { return v.ExpireStatus }).(pulumi.StringOutput)
}

// Minimum number of unique characters in new password which do not exist in old password (0 - 128, default = 0. This attribute overrides reuse-password if both are enabled).
func (o PasswordpolicyOutput) MinChangeCharacters() pulumi.IntOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.IntOutput { return v.MinChangeCharacters }).(pulumi.IntOutput)
}

// Minimum number of lowercase characters in password (0 - 128, default = 0).
func (o PasswordpolicyOutput) MinLowerCaseLetter() pulumi.IntOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.IntOutput { return v.MinLowerCaseLetter }).(pulumi.IntOutput)
}

// Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
func (o PasswordpolicyOutput) MinNonAlphanumeric() pulumi.IntOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.IntOutput { return v.MinNonAlphanumeric }).(pulumi.IntOutput)
}

// Minimum number of numeric characters in password (0 - 128, default = 0).
func (o PasswordpolicyOutput) MinNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.IntOutput { return v.MinNumber }).(pulumi.IntOutput)
}

// Minimum number of uppercase characters in password (0 - 128, default = 0).
func (o PasswordpolicyOutput) MinUpperCaseLetter() pulumi.IntOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.IntOutput { return v.MinUpperCaseLetter }).(pulumi.IntOutput)
}

// Minimum password length (8 - 128, default = 8).
func (o PasswordpolicyOutput) MinimumLength() pulumi.IntOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.IntOutput { return v.MinimumLength }).(pulumi.IntOutput)
}

// Enable/disable reuse of password. On FortiOS versions 6.2.0-7.0.0: If both reuse-password and change-4-characters are enabled, change-4-characters overrides.. On FortiOS versions >= 7.0.1: If both reuse-password and min-change-characters are enabled, min-change-characters overrides.. Valid values: `enable`, `disable`.
func (o PasswordpolicyOutput) ReusePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.StringOutput { return v.ReusePassword }).(pulumi.StringOutput)
}

// Enable/disable setting a password policy for locally defined administrator passwords and IPsec VPN pre-shared keys. Valid values: `enable`, `disable`.
func (o PasswordpolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o PasswordpolicyOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type PasswordpolicyArrayOutput struct{ *pulumi.OutputState }

func (PasswordpolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Passwordpolicy)(nil)).Elem()
}

func (o PasswordpolicyArrayOutput) ToPasswordpolicyArrayOutput() PasswordpolicyArrayOutput {
	return o
}

func (o PasswordpolicyArrayOutput) ToPasswordpolicyArrayOutputWithContext(ctx context.Context) PasswordpolicyArrayOutput {
	return o
}

func (o PasswordpolicyArrayOutput) Index(i pulumi.IntInput) PasswordpolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Passwordpolicy {
		return vs[0].([]*Passwordpolicy)[vs[1].(int)]
	}).(PasswordpolicyOutput)
}

type PasswordpolicyMapOutput struct{ *pulumi.OutputState }

func (PasswordpolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Passwordpolicy)(nil)).Elem()
}

func (o PasswordpolicyMapOutput) ToPasswordpolicyMapOutput() PasswordpolicyMapOutput {
	return o
}

func (o PasswordpolicyMapOutput) ToPasswordpolicyMapOutputWithContext(ctx context.Context) PasswordpolicyMapOutput {
	return o
}

func (o PasswordpolicyMapOutput) MapIndex(k pulumi.StringInput) PasswordpolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Passwordpolicy {
		return vs[0].(map[string]*Passwordpolicy)[vs[1].(string)]
	}).(PasswordpolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordpolicyInput)(nil)).Elem(), &Passwordpolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordpolicyArrayInput)(nil)).Elem(), PasswordpolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordpolicyMapInput)(nil)).Elem(), PasswordpolicyMap{})
	pulumi.RegisterOutputType(PasswordpolicyOutput{})
	pulumi.RegisterOutputType(PasswordpolicyArrayOutput{})
	pulumi.RegisterOutputType(PasswordpolicyMapOutput{})
}
