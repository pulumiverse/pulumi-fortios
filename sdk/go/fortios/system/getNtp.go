// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Use this data source to get information on fortios system ntp
func LookupNtp(ctx *pulumi.Context, args *LookupNtpArgs, opts ...pulumi.InvokeOption) (*LookupNtpResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNtpResult
	err := ctx.Invoke("fortios:system/getNtp:getNtp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNtp.
type LookupNtpArgs struct {
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by getNtp.
type LookupNtpResult struct {
	// Enable/disable MD5/SHA1 authentication.
	Authentication string `pulumi:"authentication"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Specify outgoing interface to reach server.
	Interfaces []GetNtpInterface `pulumi:"interfaces"`
	// Key for MD5/SHA1 authentication.
	Key string `pulumi:"key"`
	// Key ID for authentication.
	KeyId int `pulumi:"keyId"`
	// Select NTP authentication type.
	KeyType string `pulumi:"keyType"`
	// Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
	Ntpservers []GetNtpNtpserver `pulumi:"ntpservers"`
	// Enable/disable setting the FortiGate system time by synchronizing with an NTP Server.
	Ntpsync string `pulumi:"ntpsync"`
	// Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server.
	ServerMode string `pulumi:"serverMode"`
	// Source IP address for communication to the NTP server.
	SourceIp string `pulumi:"sourceIp"`
	// Source IPv6 address for communication to the NTP server.
	SourceIp6 string `pulumi:"sourceIp6"`
	// NTP synchronization interval (1 - 1440 min).
	Syncinterval int `pulumi:"syncinterval"`
	// Use the FortiGuard NTP server or any other available NTP Server.
	Type      string  `pulumi:"type"`
	Vdomparam *string `pulumi:"vdomparam"`
}

func LookupNtpOutput(ctx *pulumi.Context, args LookupNtpOutputArgs, opts ...pulumi.InvokeOption) LookupNtpResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNtpResult, error) {
			args := v.(LookupNtpArgs)
			r, err := LookupNtp(ctx, &args, opts...)
			var s LookupNtpResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNtpResultOutput)
}

// A collection of arguments for invoking getNtp.
type LookupNtpOutputArgs struct {
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupNtpOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNtpArgs)(nil)).Elem()
}

// A collection of values returned by getNtp.
type LookupNtpResultOutput struct{ *pulumi.OutputState }

func (LookupNtpResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNtpResult)(nil)).Elem()
}

func (o LookupNtpResultOutput) ToLookupNtpResultOutput() LookupNtpResultOutput {
	return o
}

func (o LookupNtpResultOutput) ToLookupNtpResultOutputWithContext(ctx context.Context) LookupNtpResultOutput {
	return o
}

// Enable/disable MD5/SHA1 authentication.
func (o LookupNtpResultOutput) Authentication() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.Authentication }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNtpResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.Id }).(pulumi.StringOutput)
}

// Specify outgoing interface to reach server.
func (o LookupNtpResultOutput) Interfaces() GetNtpInterfaceArrayOutput {
	return o.ApplyT(func(v LookupNtpResult) []GetNtpInterface { return v.Interfaces }).(GetNtpInterfaceArrayOutput)
}

// Key for MD5/SHA1 authentication.
func (o LookupNtpResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.Key }).(pulumi.StringOutput)
}

// Key ID for authentication.
func (o LookupNtpResultOutput) KeyId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNtpResult) int { return v.KeyId }).(pulumi.IntOutput)
}

// Select NTP authentication type.
func (o LookupNtpResultOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.KeyType }).(pulumi.StringOutput)
}

// Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
func (o LookupNtpResultOutput) Ntpservers() GetNtpNtpserverArrayOutput {
	return o.ApplyT(func(v LookupNtpResult) []GetNtpNtpserver { return v.Ntpservers }).(GetNtpNtpserverArrayOutput)
}

// Enable/disable setting the FortiGate system time by synchronizing with an NTP Server.
func (o LookupNtpResultOutput) Ntpsync() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.Ntpsync }).(pulumi.StringOutput)
}

// Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server.
func (o LookupNtpResultOutput) ServerMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.ServerMode }).(pulumi.StringOutput)
}

// Source IP address for communication to the NTP server.
func (o LookupNtpResultOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.SourceIp }).(pulumi.StringOutput)
}

// Source IPv6 address for communication to the NTP server.
func (o LookupNtpResultOutput) SourceIp6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.SourceIp6 }).(pulumi.StringOutput)
}

// NTP synchronization interval (1 - 1440 min).
func (o LookupNtpResultOutput) Syncinterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNtpResult) int { return v.Syncinterval }).(pulumi.IntOutput)
}

// Use the FortiGuard NTP server or any other available NTP Server.
func (o LookupNtpResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupNtpResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNtpResult) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNtpResultOutput{})
}
