// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure SMS server for sending SMS messages to support user authentication.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewSmsserver(ctx, "trname", &system.SmsserverArgs{
//				MailServer: pulumi.String("1.1.1.2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// System SmsServer can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/smsserver:Smsserver labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/smsserver:Smsserver labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Smsserver struct {
	pulumi.CustomResourceState

	// Email-to-SMS server domain name.
	MailServer pulumi.StringOutput `pulumi:"mailServer"`
	// Name of SMS server.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewSmsserver registers a new resource with the given unique name, arguments, and options.
func NewSmsserver(ctx *pulumi.Context,
	name string, args *SmsserverArgs, opts ...pulumi.ResourceOption) (*Smsserver, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MailServer == nil {
		return nil, errors.New("invalid value for required argument 'MailServer'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Smsserver
	err := ctx.RegisterResource("fortios:system/smsserver:Smsserver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmsserver gets an existing Smsserver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmsserver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmsserverState, opts ...pulumi.ResourceOption) (*Smsserver, error) {
	var resource Smsserver
	err := ctx.ReadResource("fortios:system/smsserver:Smsserver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Smsserver resources.
type smsserverState struct {
	// Email-to-SMS server domain name.
	MailServer *string `pulumi:"mailServer"`
	// Name of SMS server.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SmsserverState struct {
	// Email-to-SMS server domain name.
	MailServer pulumi.StringPtrInput
	// Name of SMS server.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SmsserverState) ElementType() reflect.Type {
	return reflect.TypeOf((*smsserverState)(nil)).Elem()
}

type smsserverArgs struct {
	// Email-to-SMS server domain name.
	MailServer string `pulumi:"mailServer"`
	// Name of SMS server.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Smsserver resource.
type SmsserverArgs struct {
	// Email-to-SMS server domain name.
	MailServer pulumi.StringInput
	// Name of SMS server.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SmsserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smsserverArgs)(nil)).Elem()
}

type SmsserverInput interface {
	pulumi.Input

	ToSmsserverOutput() SmsserverOutput
	ToSmsserverOutputWithContext(ctx context.Context) SmsserverOutput
}

func (*Smsserver) ElementType() reflect.Type {
	return reflect.TypeOf((**Smsserver)(nil)).Elem()
}

func (i *Smsserver) ToSmsserverOutput() SmsserverOutput {
	return i.ToSmsserverOutputWithContext(context.Background())
}

func (i *Smsserver) ToSmsserverOutputWithContext(ctx context.Context) SmsserverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsserverOutput)
}

// SmsserverArrayInput is an input type that accepts SmsserverArray and SmsserverArrayOutput values.
// You can construct a concrete instance of `SmsserverArrayInput` via:
//
//	SmsserverArray{ SmsserverArgs{...} }
type SmsserverArrayInput interface {
	pulumi.Input

	ToSmsserverArrayOutput() SmsserverArrayOutput
	ToSmsserverArrayOutputWithContext(context.Context) SmsserverArrayOutput
}

type SmsserverArray []SmsserverInput

func (SmsserverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Smsserver)(nil)).Elem()
}

func (i SmsserverArray) ToSmsserverArrayOutput() SmsserverArrayOutput {
	return i.ToSmsserverArrayOutputWithContext(context.Background())
}

func (i SmsserverArray) ToSmsserverArrayOutputWithContext(ctx context.Context) SmsserverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsserverArrayOutput)
}

// SmsserverMapInput is an input type that accepts SmsserverMap and SmsserverMapOutput values.
// You can construct a concrete instance of `SmsserverMapInput` via:
//
//	SmsserverMap{ "key": SmsserverArgs{...} }
type SmsserverMapInput interface {
	pulumi.Input

	ToSmsserverMapOutput() SmsserverMapOutput
	ToSmsserverMapOutputWithContext(context.Context) SmsserverMapOutput
}

type SmsserverMap map[string]SmsserverInput

func (SmsserverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Smsserver)(nil)).Elem()
}

func (i SmsserverMap) ToSmsserverMapOutput() SmsserverMapOutput {
	return i.ToSmsserverMapOutputWithContext(context.Background())
}

func (i SmsserverMap) ToSmsserverMapOutputWithContext(ctx context.Context) SmsserverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsserverMapOutput)
}

type SmsserverOutput struct{ *pulumi.OutputState }

func (SmsserverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Smsserver)(nil)).Elem()
}

func (o SmsserverOutput) ToSmsserverOutput() SmsserverOutput {
	return o
}

func (o SmsserverOutput) ToSmsserverOutputWithContext(ctx context.Context) SmsserverOutput {
	return o
}

// Email-to-SMS server domain name.
func (o SmsserverOutput) MailServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Smsserver) pulumi.StringOutput { return v.MailServer }).(pulumi.StringOutput)
}

// Name of SMS server.
func (o SmsserverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Smsserver) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SmsserverOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Smsserver) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type SmsserverArrayOutput struct{ *pulumi.OutputState }

func (SmsserverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Smsserver)(nil)).Elem()
}

func (o SmsserverArrayOutput) ToSmsserverArrayOutput() SmsserverArrayOutput {
	return o
}

func (o SmsserverArrayOutput) ToSmsserverArrayOutputWithContext(ctx context.Context) SmsserverArrayOutput {
	return o
}

func (o SmsserverArrayOutput) Index(i pulumi.IntInput) SmsserverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Smsserver {
		return vs[0].([]*Smsserver)[vs[1].(int)]
	}).(SmsserverOutput)
}

type SmsserverMapOutput struct{ *pulumi.OutputState }

func (SmsserverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Smsserver)(nil)).Elem()
}

func (o SmsserverMapOutput) ToSmsserverMapOutput() SmsserverMapOutput {
	return o
}

func (o SmsserverMapOutput) ToSmsserverMapOutputWithContext(ctx context.Context) SmsserverMapOutput {
	return o
}

func (o SmsserverMapOutput) MapIndex(k pulumi.StringInput) SmsserverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Smsserver {
		return vs[0].(map[string]*Smsserver)[vs[1].(string)]
	}).(SmsserverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmsserverInput)(nil)).Elem(), &Smsserver{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmsserverArrayInput)(nil)).Elem(), SmsserverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmsserverMapInput)(nil)).Elem(), SmsserverMap{})
	pulumi.RegisterOutputType(SmsserverOutput{})
	pulumi.RegisterOutputType(SmsserverArrayOutput{})
	pulumi.RegisterOutputType(SmsserverMapOutput{})
}
