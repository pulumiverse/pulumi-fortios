// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure the email server used by the FortiGate various things. For example, for sending email messages to users to support user authentication features.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewEmailserver(ctx, "trname", &system.EmailserverArgs{
//				Authenticate:       pulumi.String("disable"),
//				Port:               pulumi.Int(465),
//				Security:           pulumi.String("smtps"),
//				Server:             pulumi.String("notification.fortinet.net"),
//				SourceIp:           pulumi.String("0.0.0.0"),
//				SourceIp6:          pulumi.String("::"),
//				SslMinProtoVersion: pulumi.String("default"),
//				Type:               pulumi.String("custom"),
//				ValidateServer:     pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// System EmailServer can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/emailserver:Emailserver labelname SystemEmailServer
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/emailserver:Emailserver labelname SystemEmailServer
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Emailserver struct {
	pulumi.CustomResourceState

	// Enable/disable authentication. Valid values: `enable`, `disable`.
	Authenticate pulumi.StringOutput `pulumi:"authenticate"`
	// Specify outgoing interface to reach server.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringOutput `pulumi:"interfaceSelectMethod"`
	// SMTP server user password for authentication.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// SMTP server port.
	Port pulumi.IntOutput `pulumi:"port"`
	// Reply-To email address.
	ReplyTo pulumi.StringOutput `pulumi:"replyTo"`
	// Connection security used by the email server. Valid values: `none`, `starttls`, `smtps`.
	Security pulumi.StringOutput `pulumi:"security"`
	// SMTP server IP address or hostname.
	Server pulumi.StringOutput `pulumi:"server"`
	// SMTP server IPv4 source IP.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// SMTP server IPv6 source IP.
	SourceIp6 pulumi.StringOutput `pulumi:"sourceIp6"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion pulumi.StringOutput `pulumi:"sslMinProtoVersion"`
	// Use FortiGuard Message service or custom email server. Valid values: `custom`.
	Type pulumi.StringOutput `pulumi:"type"`
	// SMTP server user name for authentication.
	Username pulumi.StringOutput `pulumi:"username"`
	// Enable/disable validation of server certificate. Valid values: `enable`, `disable`.
	ValidateServer pulumi.StringOutput `pulumi:"validateServer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewEmailserver registers a new resource with the given unique name, arguments, and options.
func NewEmailserver(ctx *pulumi.Context,
	name string, args *EmailserverArgs, opts ...pulumi.ResourceOption) (*Emailserver, error) {
	if args == nil {
		args = &EmailserverArgs{}
	}

	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Emailserver
	err := ctx.RegisterResource("fortios:system/emailserver:Emailserver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailserver gets an existing Emailserver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailserver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailserverState, opts ...pulumi.ResourceOption) (*Emailserver, error) {
	var resource Emailserver
	err := ctx.ReadResource("fortios:system/emailserver:Emailserver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Emailserver resources.
type emailserverState struct {
	// Enable/disable authentication. Valid values: `enable`, `disable`.
	Authenticate *string `pulumi:"authenticate"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// SMTP server user password for authentication.
	Password *string `pulumi:"password"`
	// SMTP server port.
	Port *int `pulumi:"port"`
	// Reply-To email address.
	ReplyTo *string `pulumi:"replyTo"`
	// Connection security used by the email server. Valid values: `none`, `starttls`, `smtps`.
	Security *string `pulumi:"security"`
	// SMTP server IP address or hostname.
	Server *string `pulumi:"server"`
	// SMTP server IPv4 source IP.
	SourceIp *string `pulumi:"sourceIp"`
	// SMTP server IPv6 source IP.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion *string `pulumi:"sslMinProtoVersion"`
	// Use FortiGuard Message service or custom email server. Valid values: `custom`.
	Type *string `pulumi:"type"`
	// SMTP server user name for authentication.
	Username *string `pulumi:"username"`
	// Enable/disable validation of server certificate. Valid values: `enable`, `disable`.
	ValidateServer *string `pulumi:"validateServer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type EmailserverState struct {
	// Enable/disable authentication. Valid values: `enable`, `disable`.
	Authenticate pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// SMTP server user password for authentication.
	Password pulumi.StringPtrInput
	// SMTP server port.
	Port pulumi.IntPtrInput
	// Reply-To email address.
	ReplyTo pulumi.StringPtrInput
	// Connection security used by the email server. Valid values: `none`, `starttls`, `smtps`.
	Security pulumi.StringPtrInput
	// SMTP server IP address or hostname.
	Server pulumi.StringPtrInput
	// SMTP server IPv4 source IP.
	SourceIp pulumi.StringPtrInput
	// SMTP server IPv6 source IP.
	SourceIp6 pulumi.StringPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion pulumi.StringPtrInput
	// Use FortiGuard Message service or custom email server. Valid values: `custom`.
	Type pulumi.StringPtrInput
	// SMTP server user name for authentication.
	Username pulumi.StringPtrInput
	// Enable/disable validation of server certificate. Valid values: `enable`, `disable`.
	ValidateServer pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (EmailserverState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailserverState)(nil)).Elem()
}

type emailserverArgs struct {
	// Enable/disable authentication. Valid values: `enable`, `disable`.
	Authenticate *string `pulumi:"authenticate"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// SMTP server user password for authentication.
	Password *string `pulumi:"password"`
	// SMTP server port.
	Port *int `pulumi:"port"`
	// Reply-To email address.
	ReplyTo *string `pulumi:"replyTo"`
	// Connection security used by the email server. Valid values: `none`, `starttls`, `smtps`.
	Security *string `pulumi:"security"`
	// SMTP server IP address or hostname.
	Server *string `pulumi:"server"`
	// SMTP server IPv4 source IP.
	SourceIp *string `pulumi:"sourceIp"`
	// SMTP server IPv6 source IP.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion *string `pulumi:"sslMinProtoVersion"`
	// Use FortiGuard Message service or custom email server. Valid values: `custom`.
	Type *string `pulumi:"type"`
	// SMTP server user name for authentication.
	Username *string `pulumi:"username"`
	// Enable/disable validation of server certificate. Valid values: `enable`, `disable`.
	ValidateServer *string `pulumi:"validateServer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Emailserver resource.
type EmailserverArgs struct {
	// Enable/disable authentication. Valid values: `enable`, `disable`.
	Authenticate pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// SMTP server user password for authentication.
	Password pulumi.StringPtrInput
	// SMTP server port.
	Port pulumi.IntPtrInput
	// Reply-To email address.
	ReplyTo pulumi.StringPtrInput
	// Connection security used by the email server. Valid values: `none`, `starttls`, `smtps`.
	Security pulumi.StringPtrInput
	// SMTP server IP address or hostname.
	Server pulumi.StringPtrInput
	// SMTP server IPv4 source IP.
	SourceIp pulumi.StringPtrInput
	// SMTP server IPv6 source IP.
	SourceIp6 pulumi.StringPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion pulumi.StringPtrInput
	// Use FortiGuard Message service or custom email server. Valid values: `custom`.
	Type pulumi.StringPtrInput
	// SMTP server user name for authentication.
	Username pulumi.StringPtrInput
	// Enable/disable validation of server certificate. Valid values: `enable`, `disable`.
	ValidateServer pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (EmailserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailserverArgs)(nil)).Elem()
}

type EmailserverInput interface {
	pulumi.Input

	ToEmailserverOutput() EmailserverOutput
	ToEmailserverOutputWithContext(ctx context.Context) EmailserverOutput
}

func (*Emailserver) ElementType() reflect.Type {
	return reflect.TypeOf((**Emailserver)(nil)).Elem()
}

func (i *Emailserver) ToEmailserverOutput() EmailserverOutput {
	return i.ToEmailserverOutputWithContext(context.Background())
}

func (i *Emailserver) ToEmailserverOutputWithContext(ctx context.Context) EmailserverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailserverOutput)
}

// EmailserverArrayInput is an input type that accepts EmailserverArray and EmailserverArrayOutput values.
// You can construct a concrete instance of `EmailserverArrayInput` via:
//
//	EmailserverArray{ EmailserverArgs{...} }
type EmailserverArrayInput interface {
	pulumi.Input

	ToEmailserverArrayOutput() EmailserverArrayOutput
	ToEmailserverArrayOutputWithContext(context.Context) EmailserverArrayOutput
}

type EmailserverArray []EmailserverInput

func (EmailserverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Emailserver)(nil)).Elem()
}

func (i EmailserverArray) ToEmailserverArrayOutput() EmailserverArrayOutput {
	return i.ToEmailserverArrayOutputWithContext(context.Background())
}

func (i EmailserverArray) ToEmailserverArrayOutputWithContext(ctx context.Context) EmailserverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailserverArrayOutput)
}

// EmailserverMapInput is an input type that accepts EmailserverMap and EmailserverMapOutput values.
// You can construct a concrete instance of `EmailserverMapInput` via:
//
//	EmailserverMap{ "key": EmailserverArgs{...} }
type EmailserverMapInput interface {
	pulumi.Input

	ToEmailserverMapOutput() EmailserverMapOutput
	ToEmailserverMapOutputWithContext(context.Context) EmailserverMapOutput
}

type EmailserverMap map[string]EmailserverInput

func (EmailserverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Emailserver)(nil)).Elem()
}

func (i EmailserverMap) ToEmailserverMapOutput() EmailserverMapOutput {
	return i.ToEmailserverMapOutputWithContext(context.Background())
}

func (i EmailserverMap) ToEmailserverMapOutputWithContext(ctx context.Context) EmailserverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailserverMapOutput)
}

type EmailserverOutput struct{ *pulumi.OutputState }

func (EmailserverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Emailserver)(nil)).Elem()
}

func (o EmailserverOutput) ToEmailserverOutput() EmailserverOutput {
	return o
}

func (o EmailserverOutput) ToEmailserverOutputWithContext(ctx context.Context) EmailserverOutput {
	return o
}

// Enable/disable authentication. Valid values: `enable`, `disable`.
func (o EmailserverOutput) Authenticate() pulumi.StringOutput {
	return o.ApplyT(func(v *Emailserver) pulumi.StringOutput { return v.Authenticate }).(pulumi.StringOutput)
}

// Specify outgoing interface to reach server.
func (o EmailserverOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Emailserver) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
func (o EmailserverOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Emailserver) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

// SMTP server user password for authentication.
func (o EmailserverOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Emailserver) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// SMTP server port.
func (o EmailserverOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Emailserver) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Reply-To email address.
func (o EmailserverOutput) ReplyTo() pulumi.StringOutput {
	return o.ApplyT(func(v *Emailserver) pulumi.StringOutput { return v.ReplyTo }).(pulumi.StringOutput)
}

// Connection security used by the email server. Valid values: `none`, `starttls`, `smtps`.
func (o EmailserverOutput) Security() pulumi.StringOutput {
	return o.ApplyT(func(v *Emailserver) pulumi.StringOutput { return v.Security }).(pulumi.StringOutput)
}

// SMTP server IP address or hostname.
func (o EmailserverOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *Emailserver) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// SMTP server IPv4 source IP.
func (o EmailserverOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Emailserver) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// SMTP server IPv6 source IP.
func (o EmailserverOutput) SourceIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *Emailserver) pulumi.StringOutput { return v.SourceIp6 }).(pulumi.StringOutput)
}

// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
func (o EmailserverOutput) SslMinProtoVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Emailserver) pulumi.StringOutput { return v.SslMinProtoVersion }).(pulumi.StringOutput)
}

// Use FortiGuard Message service or custom email server. Valid values: `custom`.
func (o EmailserverOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Emailserver) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// SMTP server user name for authentication.
func (o EmailserverOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *Emailserver) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// Enable/disable validation of server certificate. Valid values: `enable`, `disable`.
func (o EmailserverOutput) ValidateServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Emailserver) pulumi.StringOutput { return v.ValidateServer }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o EmailserverOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Emailserver) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type EmailserverArrayOutput struct{ *pulumi.OutputState }

func (EmailserverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Emailserver)(nil)).Elem()
}

func (o EmailserverArrayOutput) ToEmailserverArrayOutput() EmailserverArrayOutput {
	return o
}

func (o EmailserverArrayOutput) ToEmailserverArrayOutputWithContext(ctx context.Context) EmailserverArrayOutput {
	return o
}

func (o EmailserverArrayOutput) Index(i pulumi.IntInput) EmailserverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Emailserver {
		return vs[0].([]*Emailserver)[vs[1].(int)]
	}).(EmailserverOutput)
}

type EmailserverMapOutput struct{ *pulumi.OutputState }

func (EmailserverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Emailserver)(nil)).Elem()
}

func (o EmailserverMapOutput) ToEmailserverMapOutput() EmailserverMapOutput {
	return o
}

func (o EmailserverMapOutput) ToEmailserverMapOutputWithContext(ctx context.Context) EmailserverMapOutput {
	return o
}

func (o EmailserverMapOutput) MapIndex(k pulumi.StringInput) EmailserverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Emailserver {
		return vs[0].(map[string]*Emailserver)[vs[1].(string)]
	}).(EmailserverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailserverInput)(nil)).Elem(), &Emailserver{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailserverArrayInput)(nil)).Elem(), EmailserverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailserverMapInput)(nil)).Elem(), EmailserverMap{})
	pulumi.RegisterOutputType(EmailserverOutput{})
	pulumi.RegisterOutputType(EmailserverArrayOutput{})
	pulumi.RegisterOutputType(EmailserverMapOutput{})
}
