// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure system NTP information.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewNtp(ctx, "trname", &system.NtpArgs{
//				Ntpsync:      pulumi.String("enable"),
//				ServerMode:   pulumi.String("disable"),
//				SourceIp:     pulumi.String("0.0.0.0"),
//				SourceIp6:    pulumi.String("::"),
//				Syncinterval: pulumi.Int(1),
//				Type:         pulumi.String("fortiguard"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// System Ntp can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/ntp:Ntp labelname SystemNtp
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/ntp:Ntp labelname SystemNtp
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Ntp struct {
	pulumi.CustomResourceState

	// Enable/disable authentication. Valid values: `enable`, `disable`.
	Authentication pulumi.StringOutput `pulumi:"authentication"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// FortiGate interface(s) with NTP server mode enabled. Devices on your network can contact these interfaces for NTP services. The structure of `interface` block is documented below.
	Interfaces NtpInterfaceArrayOutput `pulumi:"interfaces"`
	// Key for authentication.
	Key pulumi.StringPtrOutput `pulumi:"key"`
	// Key ID for authentication.
	KeyId pulumi.IntOutput `pulumi:"keyId"`
	// Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
	KeyType pulumi.StringOutput `pulumi:"keyType"`
	// Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
	Ntpservers NtpNtpserverArrayOutput `pulumi:"ntpservers"`
	// Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
	Ntpsync pulumi.StringOutput `pulumi:"ntpsync"`
	// Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
	ServerMode pulumi.StringOutput `pulumi:"serverMode"`
	// Source IP address for communication to the NTP server.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Source IPv6 address for communication to the NTP server.
	SourceIp6 pulumi.StringOutput `pulumi:"sourceIp6"`
	// NTP synchronization interval (1 - 1440 min).
	Syncinterval pulumi.IntOutput `pulumi:"syncinterval"`
	// Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewNtp registers a new resource with the given unique name, arguments, and options.
func NewNtp(ctx *pulumi.Context,
	name string, args *NtpArgs, opts ...pulumi.ResourceOption) (*Ntp, error) {
	if args == nil {
		args = &NtpArgs{}
	}

	if args.Key != nil {
		args.Key = pulumi.ToSecret(args.Key).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ntp
	err := ctx.RegisterResource("fortios:system/ntp:Ntp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNtp gets an existing Ntp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNtp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NtpState, opts ...pulumi.ResourceOption) (*Ntp, error) {
	var resource Ntp
	err := ctx.ReadResource("fortios:system/ntp:Ntp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ntp resources.
type ntpState struct {
	// Enable/disable authentication. Valid values: `enable`, `disable`.
	Authentication *string `pulumi:"authentication"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// FortiGate interface(s) with NTP server mode enabled. Devices on your network can contact these interfaces for NTP services. The structure of `interface` block is documented below.
	Interfaces []NtpInterface `pulumi:"interfaces"`
	// Key for authentication.
	Key *string `pulumi:"key"`
	// Key ID for authentication.
	KeyId *int `pulumi:"keyId"`
	// Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
	KeyType *string `pulumi:"keyType"`
	// Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
	Ntpservers []NtpNtpserver `pulumi:"ntpservers"`
	// Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
	Ntpsync *string `pulumi:"ntpsync"`
	// Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
	ServerMode *string `pulumi:"serverMode"`
	// Source IP address for communication to the NTP server.
	SourceIp *string `pulumi:"sourceIp"`
	// Source IPv6 address for communication to the NTP server.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// NTP synchronization interval (1 - 1440 min).
	Syncinterval *int `pulumi:"syncinterval"`
	// Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type NtpState struct {
	// Enable/disable authentication. Valid values: `enable`, `disable`.
	Authentication pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// FortiGate interface(s) with NTP server mode enabled. Devices on your network can contact these interfaces for NTP services. The structure of `interface` block is documented below.
	Interfaces NtpInterfaceArrayInput
	// Key for authentication.
	Key pulumi.StringPtrInput
	// Key ID for authentication.
	KeyId pulumi.IntPtrInput
	// Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
	KeyType pulumi.StringPtrInput
	// Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
	Ntpservers NtpNtpserverArrayInput
	// Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
	Ntpsync pulumi.StringPtrInput
	// Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
	ServerMode pulumi.StringPtrInput
	// Source IP address for communication to the NTP server.
	SourceIp pulumi.StringPtrInput
	// Source IPv6 address for communication to the NTP server.
	SourceIp6 pulumi.StringPtrInput
	// NTP synchronization interval (1 - 1440 min).
	Syncinterval pulumi.IntPtrInput
	// Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (NtpState) ElementType() reflect.Type {
	return reflect.TypeOf((*ntpState)(nil)).Elem()
}

type ntpArgs struct {
	// Enable/disable authentication. Valid values: `enable`, `disable`.
	Authentication *string `pulumi:"authentication"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// FortiGate interface(s) with NTP server mode enabled. Devices on your network can contact these interfaces for NTP services. The structure of `interface` block is documented below.
	Interfaces []NtpInterface `pulumi:"interfaces"`
	// Key for authentication.
	Key *string `pulumi:"key"`
	// Key ID for authentication.
	KeyId *int `pulumi:"keyId"`
	// Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
	KeyType *string `pulumi:"keyType"`
	// Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
	Ntpservers []NtpNtpserver `pulumi:"ntpservers"`
	// Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
	Ntpsync *string `pulumi:"ntpsync"`
	// Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
	ServerMode *string `pulumi:"serverMode"`
	// Source IP address for communication to the NTP server.
	SourceIp *string `pulumi:"sourceIp"`
	// Source IPv6 address for communication to the NTP server.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// NTP synchronization interval (1 - 1440 min).
	Syncinterval *int `pulumi:"syncinterval"`
	// Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Ntp resource.
type NtpArgs struct {
	// Enable/disable authentication. Valid values: `enable`, `disable`.
	Authentication pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// FortiGate interface(s) with NTP server mode enabled. Devices on your network can contact these interfaces for NTP services. The structure of `interface` block is documented below.
	Interfaces NtpInterfaceArrayInput
	// Key for authentication.
	Key pulumi.StringPtrInput
	// Key ID for authentication.
	KeyId pulumi.IntPtrInput
	// Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
	KeyType pulumi.StringPtrInput
	// Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
	Ntpservers NtpNtpserverArrayInput
	// Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
	Ntpsync pulumi.StringPtrInput
	// Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
	ServerMode pulumi.StringPtrInput
	// Source IP address for communication to the NTP server.
	SourceIp pulumi.StringPtrInput
	// Source IPv6 address for communication to the NTP server.
	SourceIp6 pulumi.StringPtrInput
	// NTP synchronization interval (1 - 1440 min).
	Syncinterval pulumi.IntPtrInput
	// Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (NtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ntpArgs)(nil)).Elem()
}

type NtpInput interface {
	pulumi.Input

	ToNtpOutput() NtpOutput
	ToNtpOutputWithContext(ctx context.Context) NtpOutput
}

func (*Ntp) ElementType() reflect.Type {
	return reflect.TypeOf((**Ntp)(nil)).Elem()
}

func (i *Ntp) ToNtpOutput() NtpOutput {
	return i.ToNtpOutputWithContext(context.Background())
}

func (i *Ntp) ToNtpOutputWithContext(ctx context.Context) NtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpOutput)
}

// NtpArrayInput is an input type that accepts NtpArray and NtpArrayOutput values.
// You can construct a concrete instance of `NtpArrayInput` via:
//
//	NtpArray{ NtpArgs{...} }
type NtpArrayInput interface {
	pulumi.Input

	ToNtpArrayOutput() NtpArrayOutput
	ToNtpArrayOutputWithContext(context.Context) NtpArrayOutput
}

type NtpArray []NtpInput

func (NtpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ntp)(nil)).Elem()
}

func (i NtpArray) ToNtpArrayOutput() NtpArrayOutput {
	return i.ToNtpArrayOutputWithContext(context.Background())
}

func (i NtpArray) ToNtpArrayOutputWithContext(ctx context.Context) NtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpArrayOutput)
}

// NtpMapInput is an input type that accepts NtpMap and NtpMapOutput values.
// You can construct a concrete instance of `NtpMapInput` via:
//
//	NtpMap{ "key": NtpArgs{...} }
type NtpMapInput interface {
	pulumi.Input

	ToNtpMapOutput() NtpMapOutput
	ToNtpMapOutputWithContext(context.Context) NtpMapOutput
}

type NtpMap map[string]NtpInput

func (NtpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ntp)(nil)).Elem()
}

func (i NtpMap) ToNtpMapOutput() NtpMapOutput {
	return i.ToNtpMapOutputWithContext(context.Background())
}

func (i NtpMap) ToNtpMapOutputWithContext(ctx context.Context) NtpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpMapOutput)
}

type NtpOutput struct{ *pulumi.OutputState }

func (NtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ntp)(nil)).Elem()
}

func (o NtpOutput) ToNtpOutput() NtpOutput {
	return o
}

func (o NtpOutput) ToNtpOutputWithContext(ctx context.Context) NtpOutput {
	return o
}

// Enable/disable authentication. Valid values: `enable`, `disable`.
func (o NtpOutput) Authentication() pulumi.StringOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringOutput { return v.Authentication }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o NtpOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o NtpOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// FortiGate interface(s) with NTP server mode enabled. Devices on your network can contact these interfaces for NTP services. The structure of `interface` block is documented below.
func (o NtpOutput) Interfaces() NtpInterfaceArrayOutput {
	return o.ApplyT(func(v *Ntp) NtpInterfaceArrayOutput { return v.Interfaces }).(NtpInterfaceArrayOutput)
}

// Key for authentication.
func (o NtpOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringPtrOutput { return v.Key }).(pulumi.StringPtrOutput)
}

// Key ID for authentication.
func (o NtpOutput) KeyId() pulumi.IntOutput {
	return o.ApplyT(func(v *Ntp) pulumi.IntOutput { return v.KeyId }).(pulumi.IntOutput)
}

// Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
func (o NtpOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringOutput { return v.KeyType }).(pulumi.StringOutput)
}

// Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
func (o NtpOutput) Ntpservers() NtpNtpserverArrayOutput {
	return o.ApplyT(func(v *Ntp) NtpNtpserverArrayOutput { return v.Ntpservers }).(NtpNtpserverArrayOutput)
}

// Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
func (o NtpOutput) Ntpsync() pulumi.StringOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringOutput { return v.Ntpsync }).(pulumi.StringOutput)
}

// Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
func (o NtpOutput) ServerMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringOutput { return v.ServerMode }).(pulumi.StringOutput)
}

// Source IP address for communication to the NTP server.
func (o NtpOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// Source IPv6 address for communication to the NTP server.
func (o NtpOutput) SourceIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringOutput { return v.SourceIp6 }).(pulumi.StringOutput)
}

// NTP synchronization interval (1 - 1440 min).
func (o NtpOutput) Syncinterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Ntp) pulumi.IntOutput { return v.Syncinterval }).(pulumi.IntOutput)
}

// Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
func (o NtpOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o NtpOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type NtpArrayOutput struct{ *pulumi.OutputState }

func (NtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ntp)(nil)).Elem()
}

func (o NtpArrayOutput) ToNtpArrayOutput() NtpArrayOutput {
	return o
}

func (o NtpArrayOutput) ToNtpArrayOutputWithContext(ctx context.Context) NtpArrayOutput {
	return o
}

func (o NtpArrayOutput) Index(i pulumi.IntInput) NtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ntp {
		return vs[0].([]*Ntp)[vs[1].(int)]
	}).(NtpOutput)
}

type NtpMapOutput struct{ *pulumi.OutputState }

func (NtpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ntp)(nil)).Elem()
}

func (o NtpMapOutput) ToNtpMapOutput() NtpMapOutput {
	return o
}

func (o NtpMapOutput) ToNtpMapOutputWithContext(ctx context.Context) NtpMapOutput {
	return o
}

func (o NtpMapOutput) MapIndex(k pulumi.StringInput) NtpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ntp {
		return vs[0].(map[string]*Ntp)[vs[1].(string)]
	}).(NtpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NtpInput)(nil)).Elem(), &Ntp{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpArrayInput)(nil)).Elem(), NtpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpMapInput)(nil)).Elem(), NtpMap{})
	pulumi.RegisterOutputType(NtpOutput{})
	pulumi.RegisterOutputType(NtpArrayOutput{})
	pulumi.RegisterOutputType(NtpMapOutput{})
}
