// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Use this data source to get information on an fortios system interface
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sample1, err := system.LookupInterface(ctx, &system.LookupInterfaceArgs{
//				Name: "port1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("output1", sample1.Ip)
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupInterface(ctx *pulumi.Context, args *LookupInterfaceArgs, opts ...pulumi.InvokeOption) (*LookupInterfaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInterfaceResult
	err := ctx.Invoke("fortios:system/getInterface:getInterface", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInterface.
type LookupInterfaceArgs struct {
	// Specify the name of the desired system interface.
	Name string `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by getInterface.
type LookupInterfaceResult struct {
	// PPPoE server name.
	AcName string `pulumi:"acName"`
	// Aggregate interface.
	Aggregate string `pulumi:"aggregate"`
	// Type of aggregation.
	AggregateType string `pulumi:"aggregateType"`
	// Frame distribution algorithm.
	Algorithm string `pulumi:"algorithm"`
	// Alias will be displayed with the interface name to make it easier to distinguish.
	Alias string `pulumi:"alias"`
	// Management access settings for the secondary IP address.
	Allowaccess string `pulumi:"allowaccess"`
	// Enable/disable automatic registration of unknown FortiAP devices.
	ApDiscover string `pulumi:"apDiscover"`
	// Enable/disable ARP forwarding.
	Arpforward string `pulumi:"arpforward"`
	// HTTPS server certificate.
	AuthCert string `pulumi:"authCert"`
	// Address of captive portal.
	AuthPortalAddr string `pulumi:"authPortalAddr"`
	// PPP authentication type to use.
	AuthType string `pulumi:"authType"`
	// Enable/disable automatic authorization of dedicated Fortinet extension device on this interface.
	AutoAuthExtensionDevice string `pulumi:"autoAuthExtensionDevice"`
	// Bandwidth measure time
	BandwidthMeasureTime int `pulumi:"bandwidthMeasureTime"`
	// Bidirectional Forwarding Detection (BFD) settings.
	Bfd string `pulumi:"bfd"`
	// BFD desired minimal transmit interval.
	BfdDesiredMinTx int `pulumi:"bfdDesiredMinTx"`
	// BFD detection multiplier.
	BfdDetectMult int `pulumi:"bfdDetectMult"`
	// BFD required minimal receive interval.
	BfdRequiredMinRx int `pulumi:"bfdRequiredMinRx"`
	// Enable/disable broadcasting FortiClient discovery messages.
	BroadcastForticlientDiscovery string `pulumi:"broadcastForticlientDiscovery"`
	// Enable/disable broadcast forwarding.
	BroadcastForward string `pulumi:"broadcastForward"`
	// Enable/disable captive portal.
	CaptivePortal int `pulumi:"captivePortal"`
	// CLI connection status.
	CliConnStatus int `pulumi:"cliConnStatus"`
	// DHCP client options. The structure of `clientOptions` block is documented below.
	ClientOptions []GetInterfaceClientOption `pulumi:"clientOptions"`
	// Color of icon on the GUI.
	Color int `pulumi:"color"`
	// Configure interface for single purpose.
	DedicatedTo string `pulumi:"dedicatedTo"`
	// default purdue level of device detected on this interface.
	DefaultPurdueLevel string `pulumi:"defaultPurdueLevel"`
	// Enable to get the gateway IP from the DHCP or PPPoE server.
	Defaultgw string `pulumi:"defaultgw"`
	// Description.
	Description string `pulumi:"description"`
	// MTU of detected peer (0 - 4294967295).
	DetectedPeerMtu int `pulumi:"detectedPeerMtu"`
	// Protocols used to detect the server.
	Detectprotocol string `pulumi:"detectprotocol"`
	// Gateway's ping server for this IP.
	Detectserver string `pulumi:"detectserver"`
	// Device access list.
	DeviceAccessList string `pulumi:"deviceAccessList"`
	// Enable/disable passively gathering of device identity information about the devices on the network connected to this interface.
	DeviceIdentification string `pulumi:"deviceIdentification"`
	// Enable/disable active gathering of device identity information about the devices on the network connected to this interface.
	DeviceIdentificationActiveScan string `pulumi:"deviceIdentificationActiveScan"`
	// Enable/disable inclusion of devices detected on this interface in network vulnerability scans.
	DeviceNetscan string `pulumi:"deviceNetscan"`
	// Enable/disable passive gathering of user identity information about users on this interface.
	DeviceUserIdentification string `pulumi:"deviceUserIdentification"`
	// Device Index.
	Devindex int `pulumi:"devindex"`
	// Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable).
	DhcpBroadcastFlag string `pulumi:"dhcpBroadcastFlag"`
	// Enable/disable addition of classless static routes retrieved from DHCP server.
	DhcpClasslessRouteAddition string `pulumi:"dhcpClasslessRouteAddition"`
	// DHCP client identifier.
	DhcpClientIdentifier string `pulumi:"dhcpClientIdentifier"`
	// Enable/disable DHCP relay agent option.
	DhcpRelayAgentOption string `pulumi:"dhcpRelayAgentOption"`
	// DHCP relay circuit ID.
	DhcpRelayCircuitId string `pulumi:"dhcpRelayCircuitId"`
	// Specify outgoing interface to reach server.
	DhcpRelayInterface string `pulumi:"dhcpRelayInterface"`
	// Specify how to select outgoing interface to reach server.
	DhcpRelayInterfaceSelectMethod string `pulumi:"dhcpRelayInterfaceSelectMethod"`
	// DHCP relay IP address.
	DhcpRelayIp string `pulumi:"dhcpRelayIp"`
	// DHCP relay link selection.
	DhcpRelayLinkSelection string `pulumi:"dhcpRelayLinkSelection"`
	// Enable/disable sending DHCP request to all servers.
	DhcpRelayRequestAllServer string `pulumi:"dhcpRelayRequestAllServer"`
	// Enable/disable allowing this interface to act as a DHCP relay.
	DhcpRelayService string `pulumi:"dhcpRelayService"`
	// IP address used by the DHCP relay as its source IP.
	DhcpRelaySourceIp string `pulumi:"dhcpRelaySourceIp"`
	// DHCP relay type (regular or IPsec).
	DhcpRelayType string `pulumi:"dhcpRelayType"`
	// DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
	DhcpRenewTime int `pulumi:"dhcpRenewTime"`
	// Enable/disable DHCP smart relay.
	DhcpSmartRelay string `pulumi:"dhcpSmartRelay"`
	// Configure DHCP server access list. The structure of `dhcpSnoopingServerList` block is documented below.
	DhcpSnoopingServerLists []GetInterfaceDhcpSnoopingServerList `pulumi:"dhcpSnoopingServerLists"`
	// Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
	DiscRetryTimeout int `pulumi:"discRetryTimeout"`
	// Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
	DisconnectThreshold int `pulumi:"disconnectThreshold"`
	// Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
	Distance int `pulumi:"distance"`
	// Enable/disable use DNS acquired by DHCP or PPPoE.
	DnsServerOverride string `pulumi:"dnsServerOverride"`
	// DNS transport protocols.
	DnsServerProtocol string `pulumi:"dnsServerProtocol"`
	// Enable/disable drop fragment packets.
	DropFragment string `pulumi:"dropFragment"`
	// Enable/disable drop overlapped fragment packets.
	DropOverlappedFragment string `pulumi:"dropOverlappedFragment"`
	// EAP CA certificate name.
	EapCaCert string `pulumi:"eapCaCert"`
	// EAP identity.
	EapIdentity string `pulumi:"eapIdentity"`
	// EAP method.
	EapMethod string `pulumi:"eapMethod"`
	// EAP password.
	EapPassword string `pulumi:"eapPassword"`
	// Enable/disable EAP-Supplicant.
	EapSupplicant string `pulumi:"eapSupplicant"`
	// EAP user certificate name.
	EapUserCert string `pulumi:"eapUserCert"`
	// Outgoing traffic shaping profile.
	EgressShapingProfile string `pulumi:"egressShapingProfile"`
	// Enable/disable endpoint compliance enforcement.
	EndpointCompliance string `pulumi:"endpointCompliance"`
	// Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
	EstimatedDownstreamBandwidth int `pulumi:"estimatedDownstreamBandwidth"`
	// Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
	EstimatedUpstreamBandwidth int `pulumi:"estimatedUpstreamBandwidth"`
	// Enable/disable the explicit FTP proxy on this interface.
	ExplicitFtpProxy string `pulumi:"explicitFtpProxy"`
	// Enable/disable the explicit web proxy on this interface.
	ExplicitWebProxy string `pulumi:"explicitWebProxy"`
	// Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet).
	External string `pulumi:"external"`
	// Action on extender when interface fail .
	FailActionOnExtender string `pulumi:"failActionOnExtender"`
	// Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `failAlertInterfaces` block is documented below.
	FailAlertInterfaces []GetInterfaceFailAlertInterface `pulumi:"failAlertInterfaces"`
	// Select link-failed-signal or link-down method to alert about a failed link.
	FailAlertMethod string `pulumi:"failAlertMethod"`
	// Enable/disable fail detection features for this interface.
	FailDetect string `pulumi:"failDetect"`
	// Options for detecting that this interface has failed.
	FailDetectOption string `pulumi:"failDetectOption"`
	// Enable/disable FortiHeartBeat (FortiTelemetry on GUI).
	Fortiheartbeat string `pulumi:"fortiheartbeat"`
	// Enable FortiLink to dedicate this interface to manage other Fortinet devices.
	Fortilink string `pulumi:"fortilink"`
	// fortilink split interface backup link.
	FortilinkBackupLink int `pulumi:"fortilinkBackupLink"`
	// Protocol for FortiGate neighbor discovery.
	FortilinkNeighborDetect string `pulumi:"fortilinkNeighborDetect"`
	// Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy.
	FortilinkSplitInterface string `pulumi:"fortilinkSplitInterface"`
	// Enable/disable FortiLink switch-stacking on this interface.
	FortilinkStacking string `pulumi:"fortilinkStacking"`
	// Transparent mode forward domain.
	ForwardDomain int `pulumi:"forwardDomain"`
	// Configure forward error correction (FEC).
	ForwardErrorCorrection string `pulumi:"forwardErrorCorrection"`
	// Enable/disable detect gateway alive for first.
	Gwdetect string `pulumi:"gwdetect"`
	// HA election priority for the PING server.
	HaPriority int `pulumi:"haPriority"`
	// Enable/disable ICMP accept redirect.
	IcmpAcceptRedirect string `pulumi:"icmpAcceptRedirect"`
	// Enable/disable ICMP send redirect.
	IcmpSendRedirect string `pulumi:"icmpSendRedirect"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Enable/disable authentication for this interface.
	IdentAccept string `pulumi:"identAccept"`
	// PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
	IdleTimeout int `pulumi:"idleTimeout"`
	// Configure IKE authentication SAML server.
	IkeSamlServer string `pulumi:"ikeSamlServer"`
	// Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
	Inbandwidth int `pulumi:"inbandwidth"`
	// Incoming traffic shaping profile.
	IngressShapingProfile string `pulumi:"ingressShapingProfile"`
	// Ingress Spillover threshold (0 - 16776000 kbps).
	IngressSpilloverThreshold int `pulumi:"ingressSpilloverThreshold"`
	// Interface name.
	Interface string `pulumi:"interface"`
	// Implicitly created.
	Internal int `pulumi:"internal"`
	// Secondary IP address of the interface.
	Ip string `pulumi:"ip"`
	// Enable/disable automatic IP address assignment of this interface by FortiIPAM.
	IpManagedByFortiipam string `pulumi:"ipManagedByFortiipam"`
	// Enable/disable IP/MAC binding.
	Ipmac string `pulumi:"ipmac"`
	// Enable/disable the use of this interface as a one-armed sniffer.
	IpsSnifferMode string `pulumi:"ipsSnifferMode"`
	// Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
	Ipunnumbered string `pulumi:"ipunnumbered"`
	// IPv6 of interface. The structure of `ipv6` block is documented below.
	Ipv6s []GetInterfaceIpv6 `pulumi:"ipv6s"`
	// Enable/disable l2 forwarding.
	L2forward string `pulumi:"l2forward"`
	// LACP HA secondary member.
	LacpHaSecondary string `pulumi:"lacpHaSecondary"`
	// LACP HA slave.
	LacpHaSlave string `pulumi:"lacpHaSlave"`
	// LACP mode.
	LacpMode string `pulumi:"lacpMode"`
	// How often the interface sends LACP messages.
	LacpSpeed string `pulumi:"lacpSpeed"`
	// Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
	LcpEchoInterval int `pulumi:"lcpEchoInterval"`
	// Maximum missed LCP echo messages before disconnect.
	LcpMaxEchoFails int `pulumi:"lcpMaxEchoFails"`
	// Number of milliseconds to wait before considering a link is up.
	LinkUpDelay int `pulumi:"linkUpDelay"`
	// LLDP-MED network policy profile.
	LldpNetworkPolicy string `pulumi:"lldpNetworkPolicy"`
	// Enable/disable Link Layer Discovery Protocol (LLDP) reception.
	LldpReception string `pulumi:"lldpReception"`
	// Enable/disable Link Layer Discovery Protocol (LLDP) transmission.
	LldpTransmission string `pulumi:"lldpTransmission"`
	// Change the interface's MAC address.
	Macaddr string `pulumi:"macaddr"`
	// Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managedDevice` block is documented below.
	ManagedDevices []GetInterfaceManagedDevice `pulumi:"managedDevices"`
	// Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
	ManagedSubnetworkSize string `pulumi:"managedSubnetworkSize"`
	// High Availability in-band management IP address of this interface.
	ManagementIp string `pulumi:"managementIp"`
	// Measured downstream bandwidth (kbps).
	MeasuredDownstreamBandwidth int `pulumi:"measuredDownstreamBandwidth"`
	// Measured upstream bandwidth (kbps).
	MeasuredUpstreamBandwidth int `pulumi:"measuredUpstreamBandwidth"`
	// Select SFP media interface type
	Mediatype string `pulumi:"mediatype"`
	// Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
	Members []GetInterfaceMember `pulumi:"members"`
	// Minimum number of aggregated ports that must be up.
	MinLinks int `pulumi:"minLinks"`
	// Action to take when less than the configured minimum number of links are active.
	MinLinksDown string `pulumi:"minLinksDown"`
	// Addressing mode (static, DHCP, PPPoE).
	Mode string `pulumi:"mode"`
	// Enable monitoring bandwidth on this interface.
	MonitorBandwidth string `pulumi:"monitorBandwidth"`
	// MTU value for this interface.
	Mtu int `pulumi:"mtu"`
	// Enable to set a custom MTU for this interface.
	MtuOverride string `pulumi:"mtuOverride"`
	// Tag name.
	Name string `pulumi:"name"`
	// Enable/disable NDISC forwarding.
	Ndiscforward string `pulumi:"ndiscforward"`
	// Enable/disable NETBIOS forwarding.
	NetbiosForward string `pulumi:"netbiosForward"`
	// Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both).
	NetflowSampler string `pulumi:"netflowSampler"`
	// Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
	Outbandwidth int `pulumi:"outbandwidth"`
	// PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
	PadtRetryTimeout int `pulumi:"padtRetryTimeout"`
	// PPPoE account's password.
	Password string `pulumi:"password"`
	// PING server status.
	PingServStatus int `pulumi:"pingServStatus"`
	// sFlow polling interval (1 - 255 sec).
	PollingInterval int `pulumi:"pollingInterval"`
	// Enable/disable PPPoE unnumbered negotiation.
	PppoeUnnumberedNegotiate string `pulumi:"pppoeUnnumberedNegotiate"`
	// PPTP authentication type.
	PptpAuthType string `pulumi:"pptpAuthType"`
	// Enable/disable PPTP client.
	PptpClient string `pulumi:"pptpClient"`
	// PPTP password.
	PptpPassword string `pulumi:"pptpPassword"`
	// PPTP server IP address.
	PptpServerIp string `pulumi:"pptpServerIp"`
	// Idle timer in minutes (0 for disabled).
	PptpTimeout int `pulumi:"pptpTimeout"`
	// PPTP user name.
	PptpUser string `pulumi:"pptpUser"`
	// Enable/disable preservation of session route when dirty.
	PreserveSessionRoute string `pulumi:"preserveSessionRoute"`
	// Priority of the virtual router (1 - 255).
	Priority int `pulumi:"priority"`
	// Enable/disable fail back to higher priority port once recovered.
	PriorityOverride string `pulumi:"priorityOverride"`
	// Enable/disable proxy captive portal on this interface.
	ProxyCaptivePortal string `pulumi:"proxyCaptivePortal"`
	// IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
	ReachableTime int `pulumi:"reachableTime"`
	// Redundant interface.
	RedundantInterface string `pulumi:"redundantInterface"`
	// Remote IP address of tunnel.
	RemoteIp string `pulumi:"remoteIp"`
	// Replacement message override group.
	ReplacemsgOverrideGroup string `pulumi:"replacemsgOverrideGroup"`
	// RX ring size.
	RingRx int `pulumi:"ringRx"`
	// TX ring size.
	RingTx int `pulumi:"ringTx"`
	// Interface role.
	Role string `pulumi:"role"`
	// Data that NetFlow collects (rx, tx, or both).
	SampleDirection string `pulumi:"sampleDirection"`
	// sFlow sample rate (10 - 99999).
	SampleRate int `pulumi:"sampleRate"`
	// Enable monitoring or blocking connections to Botnet servers through this interface.
	ScanBotnetConnections string `pulumi:"scanBotnetConnections"`
	// Enable/disable adding a secondary IP to this interface.
	SecondaryIp string `pulumi:"secondaryIp"`
	// Second IP address of interface. The structure of `secondaryip` block is documented below.
	Secondaryips []GetInterfaceSecondaryip `pulumi:"secondaryips"`
	// Name of security-exempt-list.
	SecurityExemptList string `pulumi:"securityExemptList"`
	// URL of external authentication logout server.
	SecurityExternalLogout string `pulumi:"securityExternalLogout"`
	// URL of external authentication web server.
	SecurityExternalWeb string `pulumi:"securityExternalWeb"`
	// User groups that can authenticate with the captive portal. The structure of `securityGroups` block is documented below.
	SecurityGroups []GetInterfaceSecurityGroup `pulumi:"securityGroups"`
	// Enable/disable MAC authentication bypass.
	SecurityMacAuthBypass string `pulumi:"securityMacAuthBypass"`
	// Turn on captive portal authentication for this interface.
	SecurityMode string `pulumi:"securityMode"`
	// URL redirection after disclaimer/authentication.
	SecurityRedirectUrl string `pulumi:"securityRedirectUrl"`
	// PPPoE service name.
	ServiceName string `pulumi:"serviceName"`
	// Enable/disable sFlow on this interface.
	SflowSampler string `pulumi:"sflowSampler"`
	// Permanent SNMP Index of the interface.
	SnmpIndex int `pulumi:"snmpIndex"`
	// Interface speed. The default setting and the options available depend on the interface hardware.
	Speed string `pulumi:"speed"`
	// Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
	SpilloverThreshold int `pulumi:"spilloverThreshold"`
	// Enable/disable source IP check.
	SrcCheck string `pulumi:"srcCheck"`
	// Enable/disable VRRP.
	Status string `pulumi:"status"`
	// Enable/disable STP.
	Stp string `pulumi:"stp"`
	// Control STP behaviour on HA secondary.
	StpHaSecondary string `pulumi:"stpHaSecondary"`
	// Enable/disable STP forwarding.
	Stpforward string `pulumi:"stpforward"`
	// Configure STP forwarding mode.
	StpforwardMode string `pulumi:"stpforwardMode"`
	// Enable to always send packets from this interface to a destination MAC address.
	Subst string `pulumi:"subst"`
	// Destination MAC address that all packets are sent to from this interface.
	SubstituteDstMac string `pulumi:"substituteDstMac"`
	// Initial create for switch-controller VLANs.
	SwcFirstCreate int `pulumi:"swcFirstCreate"`
	// Creation status for switch-controller VLANs.
	SwcVlan int `pulumi:"swcVlan"`
	// Contained in switch.
	Switch string `pulumi:"switch"`
	// Block FortiSwitch port-to-port traffic.
	SwitchControllerAccessVlan string `pulumi:"switchControllerAccessVlan"`
	// Enable/disable FortiSwitch ARP inspection.
	SwitchControllerArpInspection string `pulumi:"switchControllerArpInspection"`
	// Switch controller DHCP snooping.
	SwitchControllerDhcpSnooping string `pulumi:"switchControllerDhcpSnooping"`
	// Switch controller DHCP snooping option82.
	SwitchControllerDhcpSnoopingOption82 string `pulumi:"switchControllerDhcpSnoopingOption82"`
	// Switch controller DHCP snooping verify MAC.
	SwitchControllerDhcpSnoopingVerifyMac string `pulumi:"switchControllerDhcpSnoopingVerifyMac"`
	// Integrated FortiLink settings for managed FortiSwitch.
	SwitchControllerDynamic string `pulumi:"switchControllerDynamic"`
	// Interface's purpose when assigning traffic (read only).
	SwitchControllerFeature string `pulumi:"switchControllerFeature"`
	// Switch controller IGMP snooping.
	SwitchControllerIgmpSnooping string `pulumi:"switchControllerIgmpSnooping"`
	// Switch controller IGMP snooping fast-leave.
	SwitchControllerIgmpSnoopingFastLeave string `pulumi:"switchControllerIgmpSnoopingFastLeave"`
	// Switch controller IGMP snooping proxy.
	SwitchControllerIgmpSnoopingProxy string `pulumi:"switchControllerIgmpSnoopingProxy"`
	// Enable/disable managed FortiSwitch IoT scanning.
	SwitchControllerIotScanning string `pulumi:"switchControllerIotScanning"`
	// Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
	SwitchControllerLearningLimit int `pulumi:"switchControllerLearningLimit"`
	// VLAN to use for FortiLink management purposes.
	SwitchControllerMgmtVlan int `pulumi:"switchControllerMgmtVlan"`
	// Integrated NAC settings for managed FortiSwitch.
	SwitchControllerNac string `pulumi:"switchControllerNac"`
	// NetFlow collection and processing.
	SwitchControllerNetflowCollect string `pulumi:"switchControllerNetflowCollect"`
	// Enable/disable managed FortiSwitch routing offload.
	SwitchControllerOffload string `pulumi:"switchControllerOffload"`
	// Enable/disable managed FortiSwitch routing offload gateway.
	SwitchControllerOffloadGw string `pulumi:"switchControllerOffloadGw"`
	// IP for routing offload on FortiSwitch.
	SwitchControllerOffloadIp string `pulumi:"switchControllerOffloadIp"`
	// Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface.
	SwitchControllerRspanMode string `pulumi:"switchControllerRspanMode"`
	// Source IP address used in FortiLink over L3 connections.
	SwitchControllerSourceIp string `pulumi:"switchControllerSourceIp"`
	// Switch controller traffic policy for the VLAN.
	SwitchControllerTrafficPolicy string `pulumi:"switchControllerTrafficPolicy"`
	// Define a system ID for the aggregate interface.
	SystemId string `pulumi:"systemId"`
	// Method in which system ID is generated.
	SystemIdType string `pulumi:"systemIdType"`
	// Config object tagging. The structure of `tagging` block is documented below.
	Taggings []GetInterfaceTagging `pulumi:"taggings"`
	// TCP maximum segment size. 0 means do not change segment size.
	TcpMss int `pulumi:"tcpMss"`
	// Enable/disable VLAN trunk.
	Trunk string `pulumi:"trunk"`
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp1 string `pulumi:"trustIp1"`
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp2 string `pulumi:"trustIp2"`
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp3 string `pulumi:"trustIp3"`
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp61 string `pulumi:"trustIp61"`
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp62 string `pulumi:"trustIp62"`
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp63 string `pulumi:"trustIp63"`
	// DHCP client option type.
	Type string `pulumi:"type"`
	// Username of the PPPoE account, provided by your ISP.
	Username string `pulumi:"username"`
	// Interface is in this virtual domain (VDOM).
	Vdom      string  `pulumi:"vdom"`
	Vdomparam *string `pulumi:"vdomparam"`
	// Switch control interface VLAN ID.
	Vindex int `pulumi:"vindex"`
	// Ethernet protocol of VLAN.
	VlanProtocol string `pulumi:"vlanProtocol"`
	// Enable/disable traffic forwarding between VLANs on this interface.
	Vlanforward string `pulumi:"vlanforward"`
	// VLAN ID (1 - 4094).
	Vlanid int `pulumi:"vlanid"`
	// Virtual Routing Forwarding ID.
	Vrf int `pulumi:"vrf"`
	// Enable/disable use of virtual MAC for VRRP.
	VrrpVirtualMac string `pulumi:"vrrpVirtualMac"`
	// VRRP configuration. The structure of `vrrp` block is documented below.
	Vrrps []GetInterfaceVrrp `pulumi:"vrrps"`
	// Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers.
	Wccp string `pulumi:"wccp"`
	// Default weight for static routes (if route has no weight configured).
	Weight int `pulumi:"weight"`
	// WINS server IP.
	WinsIp string `pulumi:"winsIp"`
}

func LookupInterfaceOutput(ctx *pulumi.Context, args LookupInterfaceOutputArgs, opts ...pulumi.InvokeOption) LookupInterfaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupInterfaceResult, error) {
			args := v.(LookupInterfaceArgs)
			r, err := LookupInterface(ctx, &args, opts...)
			var s LookupInterfaceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupInterfaceResultOutput)
}

// A collection of arguments for invoking getInterface.
type LookupInterfaceOutputArgs struct {
	// Specify the name of the desired system interface.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupInterfaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterfaceArgs)(nil)).Elem()
}

// A collection of values returned by getInterface.
type LookupInterfaceResultOutput struct{ *pulumi.OutputState }

func (LookupInterfaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterfaceResult)(nil)).Elem()
}

func (o LookupInterfaceResultOutput) ToLookupInterfaceResultOutput() LookupInterfaceResultOutput {
	return o
}

func (o LookupInterfaceResultOutput) ToLookupInterfaceResultOutputWithContext(ctx context.Context) LookupInterfaceResultOutput {
	return o
}

// PPPoE server name.
func (o LookupInterfaceResultOutput) AcName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.AcName }).(pulumi.StringOutput)
}

// Aggregate interface.
func (o LookupInterfaceResultOutput) Aggregate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Aggregate }).(pulumi.StringOutput)
}

// Type of aggregation.
func (o LookupInterfaceResultOutput) AggregateType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.AggregateType }).(pulumi.StringOutput)
}

// Frame distribution algorithm.
func (o LookupInterfaceResultOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Algorithm }).(pulumi.StringOutput)
}

// Alias will be displayed with the interface name to make it easier to distinguish.
func (o LookupInterfaceResultOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Alias }).(pulumi.StringOutput)
}

// Management access settings for the secondary IP address.
func (o LookupInterfaceResultOutput) Allowaccess() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Allowaccess }).(pulumi.StringOutput)
}

// Enable/disable automatic registration of unknown FortiAP devices.
func (o LookupInterfaceResultOutput) ApDiscover() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.ApDiscover }).(pulumi.StringOutput)
}

// Enable/disable ARP forwarding.
func (o LookupInterfaceResultOutput) Arpforward() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Arpforward }).(pulumi.StringOutput)
}

// HTTPS server certificate.
func (o LookupInterfaceResultOutput) AuthCert() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.AuthCert }).(pulumi.StringOutput)
}

// Address of captive portal.
func (o LookupInterfaceResultOutput) AuthPortalAddr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.AuthPortalAddr }).(pulumi.StringOutput)
}

// PPP authentication type to use.
func (o LookupInterfaceResultOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.AuthType }).(pulumi.StringOutput)
}

// Enable/disable automatic authorization of dedicated Fortinet extension device on this interface.
func (o LookupInterfaceResultOutput) AutoAuthExtensionDevice() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.AutoAuthExtensionDevice }).(pulumi.StringOutput)
}

// Bandwidth measure time
func (o LookupInterfaceResultOutput) BandwidthMeasureTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.BandwidthMeasureTime }).(pulumi.IntOutput)
}

// Bidirectional Forwarding Detection (BFD) settings.
func (o LookupInterfaceResultOutput) Bfd() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Bfd }).(pulumi.StringOutput)
}

// BFD desired minimal transmit interval.
func (o LookupInterfaceResultOutput) BfdDesiredMinTx() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.BfdDesiredMinTx }).(pulumi.IntOutput)
}

// BFD detection multiplier.
func (o LookupInterfaceResultOutput) BfdDetectMult() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.BfdDetectMult }).(pulumi.IntOutput)
}

// BFD required minimal receive interval.
func (o LookupInterfaceResultOutput) BfdRequiredMinRx() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.BfdRequiredMinRx }).(pulumi.IntOutput)
}

// Enable/disable broadcasting FortiClient discovery messages.
func (o LookupInterfaceResultOutput) BroadcastForticlientDiscovery() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.BroadcastForticlientDiscovery }).(pulumi.StringOutput)
}

// Enable/disable broadcast forwarding.
func (o LookupInterfaceResultOutput) BroadcastForward() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.BroadcastForward }).(pulumi.StringOutput)
}

// Enable/disable captive portal.
func (o LookupInterfaceResultOutput) CaptivePortal() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.CaptivePortal }).(pulumi.IntOutput)
}

// CLI connection status.
func (o LookupInterfaceResultOutput) CliConnStatus() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.CliConnStatus }).(pulumi.IntOutput)
}

// DHCP client options. The structure of `clientOptions` block is documented below.
func (o LookupInterfaceResultOutput) ClientOptions() GetInterfaceClientOptionArrayOutput {
	return o.ApplyT(func(v LookupInterfaceResult) []GetInterfaceClientOption { return v.ClientOptions }).(GetInterfaceClientOptionArrayOutput)
}

// Color of icon on the GUI.
func (o LookupInterfaceResultOutput) Color() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.Color }).(pulumi.IntOutput)
}

// Configure interface for single purpose.
func (o LookupInterfaceResultOutput) DedicatedTo() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DedicatedTo }).(pulumi.StringOutput)
}

// default purdue level of device detected on this interface.
func (o LookupInterfaceResultOutput) DefaultPurdueLevel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DefaultPurdueLevel }).(pulumi.StringOutput)
}

// Enable to get the gateway IP from the DHCP or PPPoE server.
func (o LookupInterfaceResultOutput) Defaultgw() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Defaultgw }).(pulumi.StringOutput)
}

// Description.
func (o LookupInterfaceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Description }).(pulumi.StringOutput)
}

// MTU of detected peer (0 - 4294967295).
func (o LookupInterfaceResultOutput) DetectedPeerMtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.DetectedPeerMtu }).(pulumi.IntOutput)
}

// Protocols used to detect the server.
func (o LookupInterfaceResultOutput) Detectprotocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Detectprotocol }).(pulumi.StringOutput)
}

// Gateway's ping server for this IP.
func (o LookupInterfaceResultOutput) Detectserver() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Detectserver }).(pulumi.StringOutput)
}

// Device access list.
func (o LookupInterfaceResultOutput) DeviceAccessList() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DeviceAccessList }).(pulumi.StringOutput)
}

// Enable/disable passively gathering of device identity information about the devices on the network connected to this interface.
func (o LookupInterfaceResultOutput) DeviceIdentification() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DeviceIdentification }).(pulumi.StringOutput)
}

// Enable/disable active gathering of device identity information about the devices on the network connected to this interface.
func (o LookupInterfaceResultOutput) DeviceIdentificationActiveScan() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DeviceIdentificationActiveScan }).(pulumi.StringOutput)
}

// Enable/disable inclusion of devices detected on this interface in network vulnerability scans.
func (o LookupInterfaceResultOutput) DeviceNetscan() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DeviceNetscan }).(pulumi.StringOutput)
}

// Enable/disable passive gathering of user identity information about users on this interface.
func (o LookupInterfaceResultOutput) DeviceUserIdentification() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DeviceUserIdentification }).(pulumi.StringOutput)
}

// Device Index.
func (o LookupInterfaceResultOutput) Devindex() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.Devindex }).(pulumi.IntOutput)
}

// Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable).
func (o LookupInterfaceResultOutput) DhcpBroadcastFlag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DhcpBroadcastFlag }).(pulumi.StringOutput)
}

// Enable/disable addition of classless static routes retrieved from DHCP server.
func (o LookupInterfaceResultOutput) DhcpClasslessRouteAddition() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DhcpClasslessRouteAddition }).(pulumi.StringOutput)
}

// DHCP client identifier.
func (o LookupInterfaceResultOutput) DhcpClientIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DhcpClientIdentifier }).(pulumi.StringOutput)
}

// Enable/disable DHCP relay agent option.
func (o LookupInterfaceResultOutput) DhcpRelayAgentOption() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DhcpRelayAgentOption }).(pulumi.StringOutput)
}

// DHCP relay circuit ID.
func (o LookupInterfaceResultOutput) DhcpRelayCircuitId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DhcpRelayCircuitId }).(pulumi.StringOutput)
}

// Specify outgoing interface to reach server.
func (o LookupInterfaceResultOutput) DhcpRelayInterface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DhcpRelayInterface }).(pulumi.StringOutput)
}

// Specify how to select outgoing interface to reach server.
func (o LookupInterfaceResultOutput) DhcpRelayInterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DhcpRelayInterfaceSelectMethod }).(pulumi.StringOutput)
}

// DHCP relay IP address.
func (o LookupInterfaceResultOutput) DhcpRelayIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DhcpRelayIp }).(pulumi.StringOutput)
}

// DHCP relay link selection.
func (o LookupInterfaceResultOutput) DhcpRelayLinkSelection() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DhcpRelayLinkSelection }).(pulumi.StringOutput)
}

// Enable/disable sending DHCP request to all servers.
func (o LookupInterfaceResultOutput) DhcpRelayRequestAllServer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DhcpRelayRequestAllServer }).(pulumi.StringOutput)
}

// Enable/disable allowing this interface to act as a DHCP relay.
func (o LookupInterfaceResultOutput) DhcpRelayService() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DhcpRelayService }).(pulumi.StringOutput)
}

// IP address used by the DHCP relay as its source IP.
func (o LookupInterfaceResultOutput) DhcpRelaySourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DhcpRelaySourceIp }).(pulumi.StringOutput)
}

// DHCP relay type (regular or IPsec).
func (o LookupInterfaceResultOutput) DhcpRelayType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DhcpRelayType }).(pulumi.StringOutput)
}

// DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
func (o LookupInterfaceResultOutput) DhcpRenewTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.DhcpRenewTime }).(pulumi.IntOutput)
}

// Enable/disable DHCP smart relay.
func (o LookupInterfaceResultOutput) DhcpSmartRelay() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DhcpSmartRelay }).(pulumi.StringOutput)
}

// Configure DHCP server access list. The structure of `dhcpSnoopingServerList` block is documented below.
func (o LookupInterfaceResultOutput) DhcpSnoopingServerLists() GetInterfaceDhcpSnoopingServerListArrayOutput {
	return o.ApplyT(func(v LookupInterfaceResult) []GetInterfaceDhcpSnoopingServerList { return v.DhcpSnoopingServerLists }).(GetInterfaceDhcpSnoopingServerListArrayOutput)
}

// Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
func (o LookupInterfaceResultOutput) DiscRetryTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.DiscRetryTimeout }).(pulumi.IntOutput)
}

// Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
func (o LookupInterfaceResultOutput) DisconnectThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.DisconnectThreshold }).(pulumi.IntOutput)
}

// Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
func (o LookupInterfaceResultOutput) Distance() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.Distance }).(pulumi.IntOutput)
}

// Enable/disable use DNS acquired by DHCP or PPPoE.
func (o LookupInterfaceResultOutput) DnsServerOverride() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DnsServerOverride }).(pulumi.StringOutput)
}

// DNS transport protocols.
func (o LookupInterfaceResultOutput) DnsServerProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DnsServerProtocol }).(pulumi.StringOutput)
}

// Enable/disable drop fragment packets.
func (o LookupInterfaceResultOutput) DropFragment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DropFragment }).(pulumi.StringOutput)
}

// Enable/disable drop overlapped fragment packets.
func (o LookupInterfaceResultOutput) DropOverlappedFragment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.DropOverlappedFragment }).(pulumi.StringOutput)
}

// EAP CA certificate name.
func (o LookupInterfaceResultOutput) EapCaCert() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.EapCaCert }).(pulumi.StringOutput)
}

// EAP identity.
func (o LookupInterfaceResultOutput) EapIdentity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.EapIdentity }).(pulumi.StringOutput)
}

// EAP method.
func (o LookupInterfaceResultOutput) EapMethod() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.EapMethod }).(pulumi.StringOutput)
}

// EAP password.
func (o LookupInterfaceResultOutput) EapPassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.EapPassword }).(pulumi.StringOutput)
}

// Enable/disable EAP-Supplicant.
func (o LookupInterfaceResultOutput) EapSupplicant() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.EapSupplicant }).(pulumi.StringOutput)
}

// EAP user certificate name.
func (o LookupInterfaceResultOutput) EapUserCert() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.EapUserCert }).(pulumi.StringOutput)
}

// Outgoing traffic shaping profile.
func (o LookupInterfaceResultOutput) EgressShapingProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.EgressShapingProfile }).(pulumi.StringOutput)
}

// Enable/disable endpoint compliance enforcement.
func (o LookupInterfaceResultOutput) EndpointCompliance() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.EndpointCompliance }).(pulumi.StringOutput)
}

// Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
func (o LookupInterfaceResultOutput) EstimatedDownstreamBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.EstimatedDownstreamBandwidth }).(pulumi.IntOutput)
}

// Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
func (o LookupInterfaceResultOutput) EstimatedUpstreamBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.EstimatedUpstreamBandwidth }).(pulumi.IntOutput)
}

// Enable/disable the explicit FTP proxy on this interface.
func (o LookupInterfaceResultOutput) ExplicitFtpProxy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.ExplicitFtpProxy }).(pulumi.StringOutput)
}

// Enable/disable the explicit web proxy on this interface.
func (o LookupInterfaceResultOutput) ExplicitWebProxy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.ExplicitWebProxy }).(pulumi.StringOutput)
}

// Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet).
func (o LookupInterfaceResultOutput) External() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.External }).(pulumi.StringOutput)
}

// Action on extender when interface fail .
func (o LookupInterfaceResultOutput) FailActionOnExtender() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.FailActionOnExtender }).(pulumi.StringOutput)
}

// Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `failAlertInterfaces` block is documented below.
func (o LookupInterfaceResultOutput) FailAlertInterfaces() GetInterfaceFailAlertInterfaceArrayOutput {
	return o.ApplyT(func(v LookupInterfaceResult) []GetInterfaceFailAlertInterface { return v.FailAlertInterfaces }).(GetInterfaceFailAlertInterfaceArrayOutput)
}

// Select link-failed-signal or link-down method to alert about a failed link.
func (o LookupInterfaceResultOutput) FailAlertMethod() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.FailAlertMethod }).(pulumi.StringOutput)
}

// Enable/disable fail detection features for this interface.
func (o LookupInterfaceResultOutput) FailDetect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.FailDetect }).(pulumi.StringOutput)
}

// Options for detecting that this interface has failed.
func (o LookupInterfaceResultOutput) FailDetectOption() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.FailDetectOption }).(pulumi.StringOutput)
}

// Enable/disable FortiHeartBeat (FortiTelemetry on GUI).
func (o LookupInterfaceResultOutput) Fortiheartbeat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Fortiheartbeat }).(pulumi.StringOutput)
}

// Enable FortiLink to dedicate this interface to manage other Fortinet devices.
func (o LookupInterfaceResultOutput) Fortilink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Fortilink }).(pulumi.StringOutput)
}

// fortilink split interface backup link.
func (o LookupInterfaceResultOutput) FortilinkBackupLink() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.FortilinkBackupLink }).(pulumi.IntOutput)
}

// Protocol for FortiGate neighbor discovery.
func (o LookupInterfaceResultOutput) FortilinkNeighborDetect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.FortilinkNeighborDetect }).(pulumi.StringOutput)
}

// Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy.
func (o LookupInterfaceResultOutput) FortilinkSplitInterface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.FortilinkSplitInterface }).(pulumi.StringOutput)
}

// Enable/disable FortiLink switch-stacking on this interface.
func (o LookupInterfaceResultOutput) FortilinkStacking() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.FortilinkStacking }).(pulumi.StringOutput)
}

// Transparent mode forward domain.
func (o LookupInterfaceResultOutput) ForwardDomain() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.ForwardDomain }).(pulumi.IntOutput)
}

// Configure forward error correction (FEC).
func (o LookupInterfaceResultOutput) ForwardErrorCorrection() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.ForwardErrorCorrection }).(pulumi.StringOutput)
}

// Enable/disable detect gateway alive for first.
func (o LookupInterfaceResultOutput) Gwdetect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Gwdetect }).(pulumi.StringOutput)
}

// HA election priority for the PING server.
func (o LookupInterfaceResultOutput) HaPriority() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.HaPriority }).(pulumi.IntOutput)
}

// Enable/disable ICMP accept redirect.
func (o LookupInterfaceResultOutput) IcmpAcceptRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.IcmpAcceptRedirect }).(pulumi.StringOutput)
}

// Enable/disable ICMP send redirect.
func (o LookupInterfaceResultOutput) IcmpSendRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.IcmpSendRedirect }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupInterfaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Enable/disable authentication for this interface.
func (o LookupInterfaceResultOutput) IdentAccept() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.IdentAccept }).(pulumi.StringOutput)
}

// PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
func (o LookupInterfaceResultOutput) IdleTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.IdleTimeout }).(pulumi.IntOutput)
}

// Configure IKE authentication SAML server.
func (o LookupInterfaceResultOutput) IkeSamlServer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.IkeSamlServer }).(pulumi.StringOutput)
}

// Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
func (o LookupInterfaceResultOutput) Inbandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.Inbandwidth }).(pulumi.IntOutput)
}

// Incoming traffic shaping profile.
func (o LookupInterfaceResultOutput) IngressShapingProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.IngressShapingProfile }).(pulumi.StringOutput)
}

// Ingress Spillover threshold (0 - 16776000 kbps).
func (o LookupInterfaceResultOutput) IngressSpilloverThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.IngressSpilloverThreshold }).(pulumi.IntOutput)
}

// Interface name.
func (o LookupInterfaceResultOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Interface }).(pulumi.StringOutput)
}

// Implicitly created.
func (o LookupInterfaceResultOutput) Internal() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.Internal }).(pulumi.IntOutput)
}

// Secondary IP address of the interface.
func (o LookupInterfaceResultOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Ip }).(pulumi.StringOutput)
}

// Enable/disable automatic IP address assignment of this interface by FortiIPAM.
func (o LookupInterfaceResultOutput) IpManagedByFortiipam() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.IpManagedByFortiipam }).(pulumi.StringOutput)
}

// Enable/disable IP/MAC binding.
func (o LookupInterfaceResultOutput) Ipmac() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Ipmac }).(pulumi.StringOutput)
}

// Enable/disable the use of this interface as a one-armed sniffer.
func (o LookupInterfaceResultOutput) IpsSnifferMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.IpsSnifferMode }).(pulumi.StringOutput)
}

// Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
func (o LookupInterfaceResultOutput) Ipunnumbered() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Ipunnumbered }).(pulumi.StringOutput)
}

// IPv6 of interface. The structure of `ipv6` block is documented below.
func (o LookupInterfaceResultOutput) Ipv6s() GetInterfaceIpv6ArrayOutput {
	return o.ApplyT(func(v LookupInterfaceResult) []GetInterfaceIpv6 { return v.Ipv6s }).(GetInterfaceIpv6ArrayOutput)
}

// Enable/disable l2 forwarding.
func (o LookupInterfaceResultOutput) L2forward() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.L2forward }).(pulumi.StringOutput)
}

// LACP HA secondary member.
func (o LookupInterfaceResultOutput) LacpHaSecondary() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.LacpHaSecondary }).(pulumi.StringOutput)
}

// LACP HA slave.
func (o LookupInterfaceResultOutput) LacpHaSlave() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.LacpHaSlave }).(pulumi.StringOutput)
}

// LACP mode.
func (o LookupInterfaceResultOutput) LacpMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.LacpMode }).(pulumi.StringOutput)
}

// How often the interface sends LACP messages.
func (o LookupInterfaceResultOutput) LacpSpeed() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.LacpSpeed }).(pulumi.StringOutput)
}

// Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
func (o LookupInterfaceResultOutput) LcpEchoInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.LcpEchoInterval }).(pulumi.IntOutput)
}

// Maximum missed LCP echo messages before disconnect.
func (o LookupInterfaceResultOutput) LcpMaxEchoFails() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.LcpMaxEchoFails }).(pulumi.IntOutput)
}

// Number of milliseconds to wait before considering a link is up.
func (o LookupInterfaceResultOutput) LinkUpDelay() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.LinkUpDelay }).(pulumi.IntOutput)
}

// LLDP-MED network policy profile.
func (o LookupInterfaceResultOutput) LldpNetworkPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.LldpNetworkPolicy }).(pulumi.StringOutput)
}

// Enable/disable Link Layer Discovery Protocol (LLDP) reception.
func (o LookupInterfaceResultOutput) LldpReception() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.LldpReception }).(pulumi.StringOutput)
}

// Enable/disable Link Layer Discovery Protocol (LLDP) transmission.
func (o LookupInterfaceResultOutput) LldpTransmission() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.LldpTransmission }).(pulumi.StringOutput)
}

// Change the interface's MAC address.
func (o LookupInterfaceResultOutput) Macaddr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Macaddr }).(pulumi.StringOutput)
}

// Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managedDevice` block is documented below.
func (o LookupInterfaceResultOutput) ManagedDevices() GetInterfaceManagedDeviceArrayOutput {
	return o.ApplyT(func(v LookupInterfaceResult) []GetInterfaceManagedDevice { return v.ManagedDevices }).(GetInterfaceManagedDeviceArrayOutput)
}

// Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
func (o LookupInterfaceResultOutput) ManagedSubnetworkSize() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.ManagedSubnetworkSize }).(pulumi.StringOutput)
}

// High Availability in-band management IP address of this interface.
func (o LookupInterfaceResultOutput) ManagementIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.ManagementIp }).(pulumi.StringOutput)
}

// Measured downstream bandwidth (kbps).
func (o LookupInterfaceResultOutput) MeasuredDownstreamBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.MeasuredDownstreamBandwidth }).(pulumi.IntOutput)
}

// Measured upstream bandwidth (kbps).
func (o LookupInterfaceResultOutput) MeasuredUpstreamBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.MeasuredUpstreamBandwidth }).(pulumi.IntOutput)
}

// Select SFP media interface type
func (o LookupInterfaceResultOutput) Mediatype() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Mediatype }).(pulumi.StringOutput)
}

// Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
func (o LookupInterfaceResultOutput) Members() GetInterfaceMemberArrayOutput {
	return o.ApplyT(func(v LookupInterfaceResult) []GetInterfaceMember { return v.Members }).(GetInterfaceMemberArrayOutput)
}

// Minimum number of aggregated ports that must be up.
func (o LookupInterfaceResultOutput) MinLinks() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.MinLinks }).(pulumi.IntOutput)
}

// Action to take when less than the configured minimum number of links are active.
func (o LookupInterfaceResultOutput) MinLinksDown() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.MinLinksDown }).(pulumi.StringOutput)
}

// Addressing mode (static, DHCP, PPPoE).
func (o LookupInterfaceResultOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Mode }).(pulumi.StringOutput)
}

// Enable monitoring bandwidth on this interface.
func (o LookupInterfaceResultOutput) MonitorBandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.MonitorBandwidth }).(pulumi.StringOutput)
}

// MTU value for this interface.
func (o LookupInterfaceResultOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.Mtu }).(pulumi.IntOutput)
}

// Enable to set a custom MTU for this interface.
func (o LookupInterfaceResultOutput) MtuOverride() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.MtuOverride }).(pulumi.StringOutput)
}

// Tag name.
func (o LookupInterfaceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable NDISC forwarding.
func (o LookupInterfaceResultOutput) Ndiscforward() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Ndiscforward }).(pulumi.StringOutput)
}

// Enable/disable NETBIOS forwarding.
func (o LookupInterfaceResultOutput) NetbiosForward() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.NetbiosForward }).(pulumi.StringOutput)
}

// Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both).
func (o LookupInterfaceResultOutput) NetflowSampler() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.NetflowSampler }).(pulumi.StringOutput)
}

// Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
func (o LookupInterfaceResultOutput) Outbandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.Outbandwidth }).(pulumi.IntOutput)
}

// PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
func (o LookupInterfaceResultOutput) PadtRetryTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.PadtRetryTimeout }).(pulumi.IntOutput)
}

// PPPoE account's password.
func (o LookupInterfaceResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Password }).(pulumi.StringOutput)
}

// PING server status.
func (o LookupInterfaceResultOutput) PingServStatus() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.PingServStatus }).(pulumi.IntOutput)
}

// sFlow polling interval (1 - 255 sec).
func (o LookupInterfaceResultOutput) PollingInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.PollingInterval }).(pulumi.IntOutput)
}

// Enable/disable PPPoE unnumbered negotiation.
func (o LookupInterfaceResultOutput) PppoeUnnumberedNegotiate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.PppoeUnnumberedNegotiate }).(pulumi.StringOutput)
}

// PPTP authentication type.
func (o LookupInterfaceResultOutput) PptpAuthType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.PptpAuthType }).(pulumi.StringOutput)
}

// Enable/disable PPTP client.
func (o LookupInterfaceResultOutput) PptpClient() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.PptpClient }).(pulumi.StringOutput)
}

// PPTP password.
func (o LookupInterfaceResultOutput) PptpPassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.PptpPassword }).(pulumi.StringOutput)
}

// PPTP server IP address.
func (o LookupInterfaceResultOutput) PptpServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.PptpServerIp }).(pulumi.StringOutput)
}

// Idle timer in minutes (0 for disabled).
func (o LookupInterfaceResultOutput) PptpTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.PptpTimeout }).(pulumi.IntOutput)
}

// PPTP user name.
func (o LookupInterfaceResultOutput) PptpUser() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.PptpUser }).(pulumi.StringOutput)
}

// Enable/disable preservation of session route when dirty.
func (o LookupInterfaceResultOutput) PreserveSessionRoute() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.PreserveSessionRoute }).(pulumi.StringOutput)
}

// Priority of the virtual router (1 - 255).
func (o LookupInterfaceResultOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.Priority }).(pulumi.IntOutput)
}

// Enable/disable fail back to higher priority port once recovered.
func (o LookupInterfaceResultOutput) PriorityOverride() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.PriorityOverride }).(pulumi.StringOutput)
}

// Enable/disable proxy captive portal on this interface.
func (o LookupInterfaceResultOutput) ProxyCaptivePortal() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.ProxyCaptivePortal }).(pulumi.StringOutput)
}

// IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
func (o LookupInterfaceResultOutput) ReachableTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.ReachableTime }).(pulumi.IntOutput)
}

// Redundant interface.
func (o LookupInterfaceResultOutput) RedundantInterface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.RedundantInterface }).(pulumi.StringOutput)
}

// Remote IP address of tunnel.
func (o LookupInterfaceResultOutput) RemoteIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.RemoteIp }).(pulumi.StringOutput)
}

// Replacement message override group.
func (o LookupInterfaceResultOutput) ReplacemsgOverrideGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.ReplacemsgOverrideGroup }).(pulumi.StringOutput)
}

// RX ring size.
func (o LookupInterfaceResultOutput) RingRx() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.RingRx }).(pulumi.IntOutput)
}

// TX ring size.
func (o LookupInterfaceResultOutput) RingTx() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.RingTx }).(pulumi.IntOutput)
}

// Interface role.
func (o LookupInterfaceResultOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Role }).(pulumi.StringOutput)
}

// Data that NetFlow collects (rx, tx, or both).
func (o LookupInterfaceResultOutput) SampleDirection() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SampleDirection }).(pulumi.StringOutput)
}

// sFlow sample rate (10 - 99999).
func (o LookupInterfaceResultOutput) SampleRate() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.SampleRate }).(pulumi.IntOutput)
}

// Enable monitoring or blocking connections to Botnet servers through this interface.
func (o LookupInterfaceResultOutput) ScanBotnetConnections() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.ScanBotnetConnections }).(pulumi.StringOutput)
}

// Enable/disable adding a secondary IP to this interface.
func (o LookupInterfaceResultOutput) SecondaryIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SecondaryIp }).(pulumi.StringOutput)
}

// Second IP address of interface. The structure of `secondaryip` block is documented below.
func (o LookupInterfaceResultOutput) Secondaryips() GetInterfaceSecondaryipArrayOutput {
	return o.ApplyT(func(v LookupInterfaceResult) []GetInterfaceSecondaryip { return v.Secondaryips }).(GetInterfaceSecondaryipArrayOutput)
}

// Name of security-exempt-list.
func (o LookupInterfaceResultOutput) SecurityExemptList() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SecurityExemptList }).(pulumi.StringOutput)
}

// URL of external authentication logout server.
func (o LookupInterfaceResultOutput) SecurityExternalLogout() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SecurityExternalLogout }).(pulumi.StringOutput)
}

// URL of external authentication web server.
func (o LookupInterfaceResultOutput) SecurityExternalWeb() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SecurityExternalWeb }).(pulumi.StringOutput)
}

// User groups that can authenticate with the captive portal. The structure of `securityGroups` block is documented below.
func (o LookupInterfaceResultOutput) SecurityGroups() GetInterfaceSecurityGroupArrayOutput {
	return o.ApplyT(func(v LookupInterfaceResult) []GetInterfaceSecurityGroup { return v.SecurityGroups }).(GetInterfaceSecurityGroupArrayOutput)
}

// Enable/disable MAC authentication bypass.
func (o LookupInterfaceResultOutput) SecurityMacAuthBypass() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SecurityMacAuthBypass }).(pulumi.StringOutput)
}

// Turn on captive portal authentication for this interface.
func (o LookupInterfaceResultOutput) SecurityMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SecurityMode }).(pulumi.StringOutput)
}

// URL redirection after disclaimer/authentication.
func (o LookupInterfaceResultOutput) SecurityRedirectUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SecurityRedirectUrl }).(pulumi.StringOutput)
}

// PPPoE service name.
func (o LookupInterfaceResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

// Enable/disable sFlow on this interface.
func (o LookupInterfaceResultOutput) SflowSampler() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SflowSampler }).(pulumi.StringOutput)
}

// Permanent SNMP Index of the interface.
func (o LookupInterfaceResultOutput) SnmpIndex() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.SnmpIndex }).(pulumi.IntOutput)
}

// Interface speed. The default setting and the options available depend on the interface hardware.
func (o LookupInterfaceResultOutput) Speed() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Speed }).(pulumi.StringOutput)
}

// Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
func (o LookupInterfaceResultOutput) SpilloverThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.SpilloverThreshold }).(pulumi.IntOutput)
}

// Enable/disable source IP check.
func (o LookupInterfaceResultOutput) SrcCheck() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SrcCheck }).(pulumi.StringOutput)
}

// Enable/disable VRRP.
func (o LookupInterfaceResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Status }).(pulumi.StringOutput)
}

// Enable/disable STP.
func (o LookupInterfaceResultOutput) Stp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Stp }).(pulumi.StringOutput)
}

// Control STP behaviour on HA secondary.
func (o LookupInterfaceResultOutput) StpHaSecondary() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.StpHaSecondary }).(pulumi.StringOutput)
}

// Enable/disable STP forwarding.
func (o LookupInterfaceResultOutput) Stpforward() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Stpforward }).(pulumi.StringOutput)
}

// Configure STP forwarding mode.
func (o LookupInterfaceResultOutput) StpforwardMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.StpforwardMode }).(pulumi.StringOutput)
}

// Enable to always send packets from this interface to a destination MAC address.
func (o LookupInterfaceResultOutput) Subst() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Subst }).(pulumi.StringOutput)
}

// Destination MAC address that all packets are sent to from this interface.
func (o LookupInterfaceResultOutput) SubstituteDstMac() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SubstituteDstMac }).(pulumi.StringOutput)
}

// Initial create for switch-controller VLANs.
func (o LookupInterfaceResultOutput) SwcFirstCreate() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.SwcFirstCreate }).(pulumi.IntOutput)
}

// Creation status for switch-controller VLANs.
func (o LookupInterfaceResultOutput) SwcVlan() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.SwcVlan }).(pulumi.IntOutput)
}

// Contained in switch.
func (o LookupInterfaceResultOutput) Switch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Switch }).(pulumi.StringOutput)
}

// Block FortiSwitch port-to-port traffic.
func (o LookupInterfaceResultOutput) SwitchControllerAccessVlan() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerAccessVlan }).(pulumi.StringOutput)
}

// Enable/disable FortiSwitch ARP inspection.
func (o LookupInterfaceResultOutput) SwitchControllerArpInspection() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerArpInspection }).(pulumi.StringOutput)
}

// Switch controller DHCP snooping.
func (o LookupInterfaceResultOutput) SwitchControllerDhcpSnooping() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerDhcpSnooping }).(pulumi.StringOutput)
}

// Switch controller DHCP snooping option82.
func (o LookupInterfaceResultOutput) SwitchControllerDhcpSnoopingOption82() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerDhcpSnoopingOption82 }).(pulumi.StringOutput)
}

// Switch controller DHCP snooping verify MAC.
func (o LookupInterfaceResultOutput) SwitchControllerDhcpSnoopingVerifyMac() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerDhcpSnoopingVerifyMac }).(pulumi.StringOutput)
}

// Integrated FortiLink settings for managed FortiSwitch.
func (o LookupInterfaceResultOutput) SwitchControllerDynamic() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerDynamic }).(pulumi.StringOutput)
}

// Interface's purpose when assigning traffic (read only).
func (o LookupInterfaceResultOutput) SwitchControllerFeature() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerFeature }).(pulumi.StringOutput)
}

// Switch controller IGMP snooping.
func (o LookupInterfaceResultOutput) SwitchControllerIgmpSnooping() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerIgmpSnooping }).(pulumi.StringOutput)
}

// Switch controller IGMP snooping fast-leave.
func (o LookupInterfaceResultOutput) SwitchControllerIgmpSnoopingFastLeave() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerIgmpSnoopingFastLeave }).(pulumi.StringOutput)
}

// Switch controller IGMP snooping proxy.
func (o LookupInterfaceResultOutput) SwitchControllerIgmpSnoopingProxy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerIgmpSnoopingProxy }).(pulumi.StringOutput)
}

// Enable/disable managed FortiSwitch IoT scanning.
func (o LookupInterfaceResultOutput) SwitchControllerIotScanning() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerIotScanning }).(pulumi.StringOutput)
}

// Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
func (o LookupInterfaceResultOutput) SwitchControllerLearningLimit() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.SwitchControllerLearningLimit }).(pulumi.IntOutput)
}

// VLAN to use for FortiLink management purposes.
func (o LookupInterfaceResultOutput) SwitchControllerMgmtVlan() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.SwitchControllerMgmtVlan }).(pulumi.IntOutput)
}

// Integrated NAC settings for managed FortiSwitch.
func (o LookupInterfaceResultOutput) SwitchControllerNac() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerNac }).(pulumi.StringOutput)
}

// NetFlow collection and processing.
func (o LookupInterfaceResultOutput) SwitchControllerNetflowCollect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerNetflowCollect }).(pulumi.StringOutput)
}

// Enable/disable managed FortiSwitch routing offload.
func (o LookupInterfaceResultOutput) SwitchControllerOffload() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerOffload }).(pulumi.StringOutput)
}

// Enable/disable managed FortiSwitch routing offload gateway.
func (o LookupInterfaceResultOutput) SwitchControllerOffloadGw() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerOffloadGw }).(pulumi.StringOutput)
}

// IP for routing offload on FortiSwitch.
func (o LookupInterfaceResultOutput) SwitchControllerOffloadIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerOffloadIp }).(pulumi.StringOutput)
}

// Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface.
func (o LookupInterfaceResultOutput) SwitchControllerRspanMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerRspanMode }).(pulumi.StringOutput)
}

// Source IP address used in FortiLink over L3 connections.
func (o LookupInterfaceResultOutput) SwitchControllerSourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerSourceIp }).(pulumi.StringOutput)
}

// Switch controller traffic policy for the VLAN.
func (o LookupInterfaceResultOutput) SwitchControllerTrafficPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SwitchControllerTrafficPolicy }).(pulumi.StringOutput)
}

// Define a system ID for the aggregate interface.
func (o LookupInterfaceResultOutput) SystemId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SystemId }).(pulumi.StringOutput)
}

// Method in which system ID is generated.
func (o LookupInterfaceResultOutput) SystemIdType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.SystemIdType }).(pulumi.StringOutput)
}

// Config object tagging. The structure of `tagging` block is documented below.
func (o LookupInterfaceResultOutput) Taggings() GetInterfaceTaggingArrayOutput {
	return o.ApplyT(func(v LookupInterfaceResult) []GetInterfaceTagging { return v.Taggings }).(GetInterfaceTaggingArrayOutput)
}

// TCP maximum segment size. 0 means do not change segment size.
func (o LookupInterfaceResultOutput) TcpMss() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.TcpMss }).(pulumi.IntOutput)
}

// Enable/disable VLAN trunk.
func (o LookupInterfaceResultOutput) Trunk() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Trunk }).(pulumi.StringOutput)
}

// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
func (o LookupInterfaceResultOutput) TrustIp1() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.TrustIp1 }).(pulumi.StringOutput)
}

// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
func (o LookupInterfaceResultOutput) TrustIp2() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.TrustIp2 }).(pulumi.StringOutput)
}

// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
func (o LookupInterfaceResultOutput) TrustIp3() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.TrustIp3 }).(pulumi.StringOutput)
}

// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
func (o LookupInterfaceResultOutput) TrustIp61() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.TrustIp61 }).(pulumi.StringOutput)
}

// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
func (o LookupInterfaceResultOutput) TrustIp62() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.TrustIp62 }).(pulumi.StringOutput)
}

// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
func (o LookupInterfaceResultOutput) TrustIp63() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.TrustIp63 }).(pulumi.StringOutput)
}

// DHCP client option type.
func (o LookupInterfaceResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Type }).(pulumi.StringOutput)
}

// Username of the PPPoE account, provided by your ISP.
func (o LookupInterfaceResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Username }).(pulumi.StringOutput)
}

// Interface is in this virtual domain (VDOM).
func (o LookupInterfaceResultOutput) Vdom() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Vdom }).(pulumi.StringOutput)
}

func (o LookupInterfaceResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInterfaceResult) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Switch control interface VLAN ID.
func (o LookupInterfaceResultOutput) Vindex() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.Vindex }).(pulumi.IntOutput)
}

// Ethernet protocol of VLAN.
func (o LookupInterfaceResultOutput) VlanProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.VlanProtocol }).(pulumi.StringOutput)
}

// Enable/disable traffic forwarding between VLANs on this interface.
func (o LookupInterfaceResultOutput) Vlanforward() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Vlanforward }).(pulumi.StringOutput)
}

// VLAN ID (1 - 4094).
func (o LookupInterfaceResultOutput) Vlanid() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.Vlanid }).(pulumi.IntOutput)
}

// Virtual Routing Forwarding ID.
func (o LookupInterfaceResultOutput) Vrf() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.Vrf }).(pulumi.IntOutput)
}

// Enable/disable use of virtual MAC for VRRP.
func (o LookupInterfaceResultOutput) VrrpVirtualMac() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.VrrpVirtualMac }).(pulumi.StringOutput)
}

// VRRP configuration. The structure of `vrrp` block is documented below.
func (o LookupInterfaceResultOutput) Vrrps() GetInterfaceVrrpArrayOutput {
	return o.ApplyT(func(v LookupInterfaceResult) []GetInterfaceVrrp { return v.Vrrps }).(GetInterfaceVrrpArrayOutput)
}

// Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers.
func (o LookupInterfaceResultOutput) Wccp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.Wccp }).(pulumi.StringOutput)
}

// Default weight for static routes (if route has no weight configured).
func (o LookupInterfaceResultOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceResult) int { return v.Weight }).(pulumi.IntOutput)
}

// WINS server IP.
func (o LookupInterfaceResultOutput) WinsIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceResult) string { return v.WinsIp }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInterfaceResultOutput{})
}
