// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure SSH config. Applies to FortiOS Version `>= 7.4.4`.
//
// ## Import
//
// System SshConfig can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/sshconfig:Sshconfig labelname SystemSshConfig
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/sshconfig:Sshconfig labelname SystemSshConfig
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Sshconfig struct {
	pulumi.CustomResourceState

	// Select one or more SSH ciphers. Valid values: `chacha20-poly1305@openssh.com`, `aes128-ctr`, `aes192-ctr`, `aes256-ctr`, `arcfour256`, `arcfour128`, `aes128-cbc`, `3des-cbc`, `blowfish-cbc`, `cast128-cbc`, `aes192-cbc`, `aes256-cbc`, `arcfour`, `rijndael-cbc@lysator.liu.se`, `aes128-gcm@openssh.com`, `aes256-gcm@openssh.com`.
	SshEncAlgo pulumi.StringOutput `pulumi:"sshEncAlgo"`
	// Config SSH host key.
	SshHsk pulumi.StringOutput `pulumi:"sshHsk"`
	// Select one or more SSH hostkey algorithms. Valid values: `ssh-rsa`, `ecdsa-sha2-nistp521`, `ecdsa-sha2-nistp384`, `ecdsa-sha2-nistp256`, `rsa-sha2-256`, `rsa-sha2-512`, `ssh-ed25519`.
	SshHskAlgo pulumi.StringOutput `pulumi:"sshHskAlgo"`
	// Enable/disable SSH host key override in SSH daemon. Valid values: `disable`, `enable`.
	SshHskOverride pulumi.StringOutput `pulumi:"sshHskOverride"`
	// Password for ssh-hostkey.
	SshHskPassword pulumi.StringPtrOutput `pulumi:"sshHskPassword"`
	// Select one or more SSH kex algorithms. Valid values: `diffie-hellman-group1-sha1`, `diffie-hellman-group14-sha1`, `diffie-hellman-group14-sha256`, `diffie-hellman-group16-sha512`, `diffie-hellman-group18-sha512`, `diffie-hellman-group-exchange-sha1`, `diffie-hellman-group-exchange-sha256`, `curve25519-sha256@libssh.org`, `ecdh-sha2-nistp256`, `ecdh-sha2-nistp384`, `ecdh-sha2-nistp521`.
	SshKexAlgo pulumi.StringOutput `pulumi:"sshKexAlgo"`
	// Select one or more SSH MAC algorithms. Valid values: `hmac-md5`, `hmac-md5-etm@openssh.com`, `hmac-md5-96`, `hmac-md5-96-etm@openssh.com`, `hmac-sha1`, `hmac-sha1-etm@openssh.com`, `hmac-sha2-256`, `hmac-sha2-256-etm@openssh.com`, `hmac-sha2-512`, `hmac-sha2-512-etm@openssh.com`, `hmac-ripemd160`, `hmac-ripemd160@openssh.com`, `hmac-ripemd160-etm@openssh.com`, `umac-64@openssh.com`, `umac-128@openssh.com`, `umac-64-etm@openssh.com`, `umac-128-etm@openssh.com`.
	SshMacAlgo pulumi.StringOutput `pulumi:"sshMacAlgo"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewSshconfig registers a new resource with the given unique name, arguments, and options.
func NewSshconfig(ctx *pulumi.Context,
	name string, args *SshconfigArgs, opts ...pulumi.ResourceOption) (*Sshconfig, error) {
	if args == nil {
		args = &SshconfigArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Sshconfig
	err := ctx.RegisterResource("fortios:system/sshconfig:Sshconfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSshconfig gets an existing Sshconfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSshconfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SshconfigState, opts ...pulumi.ResourceOption) (*Sshconfig, error) {
	var resource Sshconfig
	err := ctx.ReadResource("fortios:system/sshconfig:Sshconfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sshconfig resources.
type sshconfigState struct {
	// Select one or more SSH ciphers. Valid values: `chacha20-poly1305@openssh.com`, `aes128-ctr`, `aes192-ctr`, `aes256-ctr`, `arcfour256`, `arcfour128`, `aes128-cbc`, `3des-cbc`, `blowfish-cbc`, `cast128-cbc`, `aes192-cbc`, `aes256-cbc`, `arcfour`, `rijndael-cbc@lysator.liu.se`, `aes128-gcm@openssh.com`, `aes256-gcm@openssh.com`.
	SshEncAlgo *string `pulumi:"sshEncAlgo"`
	// Config SSH host key.
	SshHsk *string `pulumi:"sshHsk"`
	// Select one or more SSH hostkey algorithms. Valid values: `ssh-rsa`, `ecdsa-sha2-nistp521`, `ecdsa-sha2-nistp384`, `ecdsa-sha2-nistp256`, `rsa-sha2-256`, `rsa-sha2-512`, `ssh-ed25519`.
	SshHskAlgo *string `pulumi:"sshHskAlgo"`
	// Enable/disable SSH host key override in SSH daemon. Valid values: `disable`, `enable`.
	SshHskOverride *string `pulumi:"sshHskOverride"`
	// Password for ssh-hostkey.
	SshHskPassword *string `pulumi:"sshHskPassword"`
	// Select one or more SSH kex algorithms. Valid values: `diffie-hellman-group1-sha1`, `diffie-hellman-group14-sha1`, `diffie-hellman-group14-sha256`, `diffie-hellman-group16-sha512`, `diffie-hellman-group18-sha512`, `diffie-hellman-group-exchange-sha1`, `diffie-hellman-group-exchange-sha256`, `curve25519-sha256@libssh.org`, `ecdh-sha2-nistp256`, `ecdh-sha2-nistp384`, `ecdh-sha2-nistp521`.
	SshKexAlgo *string `pulumi:"sshKexAlgo"`
	// Select one or more SSH MAC algorithms. Valid values: `hmac-md5`, `hmac-md5-etm@openssh.com`, `hmac-md5-96`, `hmac-md5-96-etm@openssh.com`, `hmac-sha1`, `hmac-sha1-etm@openssh.com`, `hmac-sha2-256`, `hmac-sha2-256-etm@openssh.com`, `hmac-sha2-512`, `hmac-sha2-512-etm@openssh.com`, `hmac-ripemd160`, `hmac-ripemd160@openssh.com`, `hmac-ripemd160-etm@openssh.com`, `umac-64@openssh.com`, `umac-128@openssh.com`, `umac-64-etm@openssh.com`, `umac-128-etm@openssh.com`.
	SshMacAlgo *string `pulumi:"sshMacAlgo"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SshconfigState struct {
	// Select one or more SSH ciphers. Valid values: `chacha20-poly1305@openssh.com`, `aes128-ctr`, `aes192-ctr`, `aes256-ctr`, `arcfour256`, `arcfour128`, `aes128-cbc`, `3des-cbc`, `blowfish-cbc`, `cast128-cbc`, `aes192-cbc`, `aes256-cbc`, `arcfour`, `rijndael-cbc@lysator.liu.se`, `aes128-gcm@openssh.com`, `aes256-gcm@openssh.com`.
	SshEncAlgo pulumi.StringPtrInput
	// Config SSH host key.
	SshHsk pulumi.StringPtrInput
	// Select one or more SSH hostkey algorithms. Valid values: `ssh-rsa`, `ecdsa-sha2-nistp521`, `ecdsa-sha2-nistp384`, `ecdsa-sha2-nistp256`, `rsa-sha2-256`, `rsa-sha2-512`, `ssh-ed25519`.
	SshHskAlgo pulumi.StringPtrInput
	// Enable/disable SSH host key override in SSH daemon. Valid values: `disable`, `enable`.
	SshHskOverride pulumi.StringPtrInput
	// Password for ssh-hostkey.
	SshHskPassword pulumi.StringPtrInput
	// Select one or more SSH kex algorithms. Valid values: `diffie-hellman-group1-sha1`, `diffie-hellman-group14-sha1`, `diffie-hellman-group14-sha256`, `diffie-hellman-group16-sha512`, `diffie-hellman-group18-sha512`, `diffie-hellman-group-exchange-sha1`, `diffie-hellman-group-exchange-sha256`, `curve25519-sha256@libssh.org`, `ecdh-sha2-nistp256`, `ecdh-sha2-nistp384`, `ecdh-sha2-nistp521`.
	SshKexAlgo pulumi.StringPtrInput
	// Select one or more SSH MAC algorithms. Valid values: `hmac-md5`, `hmac-md5-etm@openssh.com`, `hmac-md5-96`, `hmac-md5-96-etm@openssh.com`, `hmac-sha1`, `hmac-sha1-etm@openssh.com`, `hmac-sha2-256`, `hmac-sha2-256-etm@openssh.com`, `hmac-sha2-512`, `hmac-sha2-512-etm@openssh.com`, `hmac-ripemd160`, `hmac-ripemd160@openssh.com`, `hmac-ripemd160-etm@openssh.com`, `umac-64@openssh.com`, `umac-128@openssh.com`, `umac-64-etm@openssh.com`, `umac-128-etm@openssh.com`.
	SshMacAlgo pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SshconfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*sshconfigState)(nil)).Elem()
}

type sshconfigArgs struct {
	// Select one or more SSH ciphers. Valid values: `chacha20-poly1305@openssh.com`, `aes128-ctr`, `aes192-ctr`, `aes256-ctr`, `arcfour256`, `arcfour128`, `aes128-cbc`, `3des-cbc`, `blowfish-cbc`, `cast128-cbc`, `aes192-cbc`, `aes256-cbc`, `arcfour`, `rijndael-cbc@lysator.liu.se`, `aes128-gcm@openssh.com`, `aes256-gcm@openssh.com`.
	SshEncAlgo *string `pulumi:"sshEncAlgo"`
	// Config SSH host key.
	SshHsk *string `pulumi:"sshHsk"`
	// Select one or more SSH hostkey algorithms. Valid values: `ssh-rsa`, `ecdsa-sha2-nistp521`, `ecdsa-sha2-nistp384`, `ecdsa-sha2-nistp256`, `rsa-sha2-256`, `rsa-sha2-512`, `ssh-ed25519`.
	SshHskAlgo *string `pulumi:"sshHskAlgo"`
	// Enable/disable SSH host key override in SSH daemon. Valid values: `disable`, `enable`.
	SshHskOverride *string `pulumi:"sshHskOverride"`
	// Password for ssh-hostkey.
	SshHskPassword *string `pulumi:"sshHskPassword"`
	// Select one or more SSH kex algorithms. Valid values: `diffie-hellman-group1-sha1`, `diffie-hellman-group14-sha1`, `diffie-hellman-group14-sha256`, `diffie-hellman-group16-sha512`, `diffie-hellman-group18-sha512`, `diffie-hellman-group-exchange-sha1`, `diffie-hellman-group-exchange-sha256`, `curve25519-sha256@libssh.org`, `ecdh-sha2-nistp256`, `ecdh-sha2-nistp384`, `ecdh-sha2-nistp521`.
	SshKexAlgo *string `pulumi:"sshKexAlgo"`
	// Select one or more SSH MAC algorithms. Valid values: `hmac-md5`, `hmac-md5-etm@openssh.com`, `hmac-md5-96`, `hmac-md5-96-etm@openssh.com`, `hmac-sha1`, `hmac-sha1-etm@openssh.com`, `hmac-sha2-256`, `hmac-sha2-256-etm@openssh.com`, `hmac-sha2-512`, `hmac-sha2-512-etm@openssh.com`, `hmac-ripemd160`, `hmac-ripemd160@openssh.com`, `hmac-ripemd160-etm@openssh.com`, `umac-64@openssh.com`, `umac-128@openssh.com`, `umac-64-etm@openssh.com`, `umac-128-etm@openssh.com`.
	SshMacAlgo *string `pulumi:"sshMacAlgo"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Sshconfig resource.
type SshconfigArgs struct {
	// Select one or more SSH ciphers. Valid values: `chacha20-poly1305@openssh.com`, `aes128-ctr`, `aes192-ctr`, `aes256-ctr`, `arcfour256`, `arcfour128`, `aes128-cbc`, `3des-cbc`, `blowfish-cbc`, `cast128-cbc`, `aes192-cbc`, `aes256-cbc`, `arcfour`, `rijndael-cbc@lysator.liu.se`, `aes128-gcm@openssh.com`, `aes256-gcm@openssh.com`.
	SshEncAlgo pulumi.StringPtrInput
	// Config SSH host key.
	SshHsk pulumi.StringPtrInput
	// Select one or more SSH hostkey algorithms. Valid values: `ssh-rsa`, `ecdsa-sha2-nistp521`, `ecdsa-sha2-nistp384`, `ecdsa-sha2-nistp256`, `rsa-sha2-256`, `rsa-sha2-512`, `ssh-ed25519`.
	SshHskAlgo pulumi.StringPtrInput
	// Enable/disable SSH host key override in SSH daemon. Valid values: `disable`, `enable`.
	SshHskOverride pulumi.StringPtrInput
	// Password for ssh-hostkey.
	SshHskPassword pulumi.StringPtrInput
	// Select one or more SSH kex algorithms. Valid values: `diffie-hellman-group1-sha1`, `diffie-hellman-group14-sha1`, `diffie-hellman-group14-sha256`, `diffie-hellman-group16-sha512`, `diffie-hellman-group18-sha512`, `diffie-hellman-group-exchange-sha1`, `diffie-hellman-group-exchange-sha256`, `curve25519-sha256@libssh.org`, `ecdh-sha2-nistp256`, `ecdh-sha2-nistp384`, `ecdh-sha2-nistp521`.
	SshKexAlgo pulumi.StringPtrInput
	// Select one or more SSH MAC algorithms. Valid values: `hmac-md5`, `hmac-md5-etm@openssh.com`, `hmac-md5-96`, `hmac-md5-96-etm@openssh.com`, `hmac-sha1`, `hmac-sha1-etm@openssh.com`, `hmac-sha2-256`, `hmac-sha2-256-etm@openssh.com`, `hmac-sha2-512`, `hmac-sha2-512-etm@openssh.com`, `hmac-ripemd160`, `hmac-ripemd160@openssh.com`, `hmac-ripemd160-etm@openssh.com`, `umac-64@openssh.com`, `umac-128@openssh.com`, `umac-64-etm@openssh.com`, `umac-128-etm@openssh.com`.
	SshMacAlgo pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SshconfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sshconfigArgs)(nil)).Elem()
}

type SshconfigInput interface {
	pulumi.Input

	ToSshconfigOutput() SshconfigOutput
	ToSshconfigOutputWithContext(ctx context.Context) SshconfigOutput
}

func (*Sshconfig) ElementType() reflect.Type {
	return reflect.TypeOf((**Sshconfig)(nil)).Elem()
}

func (i *Sshconfig) ToSshconfigOutput() SshconfigOutput {
	return i.ToSshconfigOutputWithContext(context.Background())
}

func (i *Sshconfig) ToSshconfigOutputWithContext(ctx context.Context) SshconfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshconfigOutput)
}

// SshconfigArrayInput is an input type that accepts SshconfigArray and SshconfigArrayOutput values.
// You can construct a concrete instance of `SshconfigArrayInput` via:
//
//	SshconfigArray{ SshconfigArgs{...} }
type SshconfigArrayInput interface {
	pulumi.Input

	ToSshconfigArrayOutput() SshconfigArrayOutput
	ToSshconfigArrayOutputWithContext(context.Context) SshconfigArrayOutput
}

type SshconfigArray []SshconfigInput

func (SshconfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sshconfig)(nil)).Elem()
}

func (i SshconfigArray) ToSshconfigArrayOutput() SshconfigArrayOutput {
	return i.ToSshconfigArrayOutputWithContext(context.Background())
}

func (i SshconfigArray) ToSshconfigArrayOutputWithContext(ctx context.Context) SshconfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshconfigArrayOutput)
}

// SshconfigMapInput is an input type that accepts SshconfigMap and SshconfigMapOutput values.
// You can construct a concrete instance of `SshconfigMapInput` via:
//
//	SshconfigMap{ "key": SshconfigArgs{...} }
type SshconfigMapInput interface {
	pulumi.Input

	ToSshconfigMapOutput() SshconfigMapOutput
	ToSshconfigMapOutputWithContext(context.Context) SshconfigMapOutput
}

type SshconfigMap map[string]SshconfigInput

func (SshconfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sshconfig)(nil)).Elem()
}

func (i SshconfigMap) ToSshconfigMapOutput() SshconfigMapOutput {
	return i.ToSshconfigMapOutputWithContext(context.Background())
}

func (i SshconfigMap) ToSshconfigMapOutputWithContext(ctx context.Context) SshconfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshconfigMapOutput)
}

type SshconfigOutput struct{ *pulumi.OutputState }

func (SshconfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sshconfig)(nil)).Elem()
}

func (o SshconfigOutput) ToSshconfigOutput() SshconfigOutput {
	return o
}

func (o SshconfigOutput) ToSshconfigOutputWithContext(ctx context.Context) SshconfigOutput {
	return o
}

// Select one or more SSH ciphers. Valid values: `chacha20-poly1305@openssh.com`, `aes128-ctr`, `aes192-ctr`, `aes256-ctr`, `arcfour256`, `arcfour128`, `aes128-cbc`, `3des-cbc`, `blowfish-cbc`, `cast128-cbc`, `aes192-cbc`, `aes256-cbc`, `arcfour`, `rijndael-cbc@lysator.liu.se`, `aes128-gcm@openssh.com`, `aes256-gcm@openssh.com`.
func (o SshconfigOutput) SshEncAlgo() pulumi.StringOutput {
	return o.ApplyT(func(v *Sshconfig) pulumi.StringOutput { return v.SshEncAlgo }).(pulumi.StringOutput)
}

// Config SSH host key.
func (o SshconfigOutput) SshHsk() pulumi.StringOutput {
	return o.ApplyT(func(v *Sshconfig) pulumi.StringOutput { return v.SshHsk }).(pulumi.StringOutput)
}

// Select one or more SSH hostkey algorithms. Valid values: `ssh-rsa`, `ecdsa-sha2-nistp521`, `ecdsa-sha2-nistp384`, `ecdsa-sha2-nistp256`, `rsa-sha2-256`, `rsa-sha2-512`, `ssh-ed25519`.
func (o SshconfigOutput) SshHskAlgo() pulumi.StringOutput {
	return o.ApplyT(func(v *Sshconfig) pulumi.StringOutput { return v.SshHskAlgo }).(pulumi.StringOutput)
}

// Enable/disable SSH host key override in SSH daemon. Valid values: `disable`, `enable`.
func (o SshconfigOutput) SshHskOverride() pulumi.StringOutput {
	return o.ApplyT(func(v *Sshconfig) pulumi.StringOutput { return v.SshHskOverride }).(pulumi.StringOutput)
}

// Password for ssh-hostkey.
func (o SshconfigOutput) SshHskPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sshconfig) pulumi.StringPtrOutput { return v.SshHskPassword }).(pulumi.StringPtrOutput)
}

// Select one or more SSH kex algorithms. Valid values: `diffie-hellman-group1-sha1`, `diffie-hellman-group14-sha1`, `diffie-hellman-group14-sha256`, `diffie-hellman-group16-sha512`, `diffie-hellman-group18-sha512`, `diffie-hellman-group-exchange-sha1`, `diffie-hellman-group-exchange-sha256`, `curve25519-sha256@libssh.org`, `ecdh-sha2-nistp256`, `ecdh-sha2-nistp384`, `ecdh-sha2-nistp521`.
func (o SshconfigOutput) SshKexAlgo() pulumi.StringOutput {
	return o.ApplyT(func(v *Sshconfig) pulumi.StringOutput { return v.SshKexAlgo }).(pulumi.StringOutput)
}

// Select one or more SSH MAC algorithms. Valid values: `hmac-md5`, `hmac-md5-etm@openssh.com`, `hmac-md5-96`, `hmac-md5-96-etm@openssh.com`, `hmac-sha1`, `hmac-sha1-etm@openssh.com`, `hmac-sha2-256`, `hmac-sha2-256-etm@openssh.com`, `hmac-sha2-512`, `hmac-sha2-512-etm@openssh.com`, `hmac-ripemd160`, `hmac-ripemd160@openssh.com`, `hmac-ripemd160-etm@openssh.com`, `umac-64@openssh.com`, `umac-128@openssh.com`, `umac-64-etm@openssh.com`, `umac-128-etm@openssh.com`.
func (o SshconfigOutput) SshMacAlgo() pulumi.StringOutput {
	return o.ApplyT(func(v *Sshconfig) pulumi.StringOutput { return v.SshMacAlgo }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SshconfigOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Sshconfig) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type SshconfigArrayOutput struct{ *pulumi.OutputState }

func (SshconfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sshconfig)(nil)).Elem()
}

func (o SshconfigArrayOutput) ToSshconfigArrayOutput() SshconfigArrayOutput {
	return o
}

func (o SshconfigArrayOutput) ToSshconfigArrayOutputWithContext(ctx context.Context) SshconfigArrayOutput {
	return o
}

func (o SshconfigArrayOutput) Index(i pulumi.IntInput) SshconfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Sshconfig {
		return vs[0].([]*Sshconfig)[vs[1].(int)]
	}).(SshconfigOutput)
}

type SshconfigMapOutput struct{ *pulumi.OutputState }

func (SshconfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sshconfig)(nil)).Elem()
}

func (o SshconfigMapOutput) ToSshconfigMapOutput() SshconfigMapOutput {
	return o
}

func (o SshconfigMapOutput) ToSshconfigMapOutputWithContext(ctx context.Context) SshconfigMapOutput {
	return o
}

func (o SshconfigMapOutput) MapIndex(k pulumi.StringInput) SshconfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Sshconfig {
		return vs[0].(map[string]*Sshconfig)[vs[1].(string)]
	}).(SshconfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SshconfigInput)(nil)).Elem(), &Sshconfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshconfigArrayInput)(nil)).Elem(), SshconfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshconfigMapInput)(nil)).Elem(), SshconfigMap{})
	pulumi.RegisterOutputType(SshconfigOutput{})
	pulumi.RegisterOutputType(SshconfigArrayOutput{})
	pulumi.RegisterOutputType(SshconfigMapOutput{})
}
