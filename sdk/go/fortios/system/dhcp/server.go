// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dhcp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure DHCP servers.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewServer(ctx, "trname", &system.ServerArgs{
//				DnsService: pulumi.String("default"),
//				Fosid:      pulumi.Int(1),
//				Interface:  pulumi.String("port2"),
//				IpRanges: dhcp.ServerIpRangeArray{
//					&dhcp.ServerIpRangeArgs{
//						EndIp:   pulumi.String("1.1.1.22"),
//						Id:      pulumi.Int(1),
//						StartIp: pulumi.String("1.1.1.1"),
//					},
//				},
//				Netmask:    pulumi.String("255.255.255.0"),
//				NtpServer1: pulumi.String("192.168.52.22"),
//				Status:     pulumi.String("disable"),
//				Timezone:   pulumi.String("00"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// SystemDhcp Server can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/dhcp/server:Server labelname {{fosid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/dhcp/server:Server labelname {{fosid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Server struct {
	pulumi.CustomResourceState

	// Enable/disable auto configuration. Valid values: `disable`, `enable`.
	AutoConfiguration pulumi.StringOutput `pulumi:"autoConfiguration"`
	// Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
	AutoManagedStatus pulumi.StringOutput `pulumi:"autoManagedStatus"`
	// Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
	ConflictedIpTimeout pulumi.IntOutput `pulumi:"conflictedIpTimeout"`
	// DDNS authentication mode. Valid values: `disable`, `tsig`.
	DdnsAuth pulumi.StringOutput `pulumi:"ddnsAuth"`
	// DDNS update key (base 64 encoding).
	DdnsKey pulumi.StringOutput `pulumi:"ddnsKey"`
	// DDNS update key name.
	DdnsKeyname pulumi.StringOutput `pulumi:"ddnsKeyname"`
	// DDNS server IP.
	DdnsServerIp pulumi.StringOutput `pulumi:"ddnsServerIp"`
	// TTL.
	DdnsTtl pulumi.IntOutput `pulumi:"ddnsTtl"`
	// Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdate pulumi.StringOutput `pulumi:"ddnsUpdate"`
	// Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdateOverride pulumi.StringOutput `pulumi:"ddnsUpdateOverride"`
	// Zone of your domain name (ex. DDNS.com).
	DdnsZone pulumi.StringOutput `pulumi:"ddnsZone"`
	// Default gateway IP address assigned by the DHCP server.
	DefaultGateway pulumi.StringOutput `pulumi:"defaultGateway"`
	// Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
	DhcpSettingsFromFortiipam pulumi.StringOutput `pulumi:"dhcpSettingsFromFortiipam"`
	// DNS server 1.
	DnsServer1 pulumi.StringOutput `pulumi:"dnsServer1"`
	// DNS server 2.
	DnsServer2 pulumi.StringOutput `pulumi:"dnsServer2"`
	// DNS server 3.
	DnsServer3 pulumi.StringOutput `pulumi:"dnsServer3"`
	// DNS server 4.
	DnsServer4 pulumi.StringOutput `pulumi:"dnsServer4"`
	// Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	DnsService pulumi.StringOutput `pulumi:"dnsService"`
	// Domain name suffix for the IP addresses that the DHCP server assigns to clients.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `excludeRange` block is documented below.
	ExcludeRanges ServerExcludeRangeArrayOutput `pulumi:"excludeRanges"`
	// Name of the boot file on the TFTP server.
	Filename pulumi.StringOutput `pulumi:"filename"`
	// Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
	ForticlientOnNetStatus pulumi.StringOutput `pulumi:"forticlientOnNetStatus"`
	// ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// DHCP server can assign IP configurations to clients connected to this interface.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Method used to assign client IP. Valid values: `range`, `usrgrp`.
	IpMode pulumi.StringOutput `pulumi:"ipMode"`
	// DHCP IP range configuration. The structure of `ipRange` block is documented below.
	IpRanges ServerIpRangeArrayOutput `pulumi:"ipRanges"`
	// DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
	IpsecLeaseHold pulumi.IntOutput `pulumi:"ipsecLeaseHold"`
	// Lease time in seconds, 0 means unlimited.
	LeaseTime pulumi.IntOutput `pulumi:"leaseTime"`
	// MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
	MacAclDefaultAction pulumi.StringOutput `pulumi:"macAclDefaultAction"`
	// Netmask assigned by the DHCP server.
	Netmask pulumi.StringOutput `pulumi:"netmask"`
	// IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
	NextServer pulumi.StringOutput `pulumi:"nextServer"`
	// NTP server 1.
	NtpServer1 pulumi.StringOutput `pulumi:"ntpServer1"`
	// NTP server 2.
	NtpServer2 pulumi.StringOutput `pulumi:"ntpServer2"`
	// NTP server 3.
	NtpServer3 pulumi.StringOutput `pulumi:"ntpServer3"`
	// Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	NtpService pulumi.StringOutput `pulumi:"ntpService"`
	// DHCP options. The structure of `options` block is documented below.
	Options ServerOptionArrayOutput `pulumi:"options"`
	// Relay agent IP.
	RelayAgent pulumi.StringOutput `pulumi:"relayAgent"`
	// Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reservedAddress` block is documented below.
	ReservedAddresses ServerReservedAddressArrayOutput `pulumi:"reservedAddresses"`
	// DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
	ServerType pulumi.StringOutput `pulumi:"serverType"`
	// Enable/disable shared subnet. Valid values: `disable`, `enable`.
	SharedSubnet pulumi.StringOutput `pulumi:"sharedSubnet"`
	// Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftpServer` block is documented below.
	TftpServers ServerTftpServerArrayOutput `pulumi:"tftpServers"`
	// Select the time zone to be assigned to DHCP clients.
	Timezone pulumi.StringOutput `pulumi:"timezone"`
	// Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
	TimezoneOption pulumi.StringOutput `pulumi:"timezoneOption"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
	VciMatch pulumi.StringOutput `pulumi:"vciMatch"`
	// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
	VciStrings ServerVciStringArrayOutput `pulumi:"vciStrings"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
	WifiAc1 pulumi.StringOutput `pulumi:"wifiAc1"`
	// WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
	WifiAc2 pulumi.StringOutput `pulumi:"wifiAc2"`
	// WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
	WifiAc3 pulumi.StringOutput `pulumi:"wifiAc3"`
	// Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
	WifiAcService pulumi.StringOutput `pulumi:"wifiAcService"`
	// WINS server 1.
	WinsServer1 pulumi.StringOutput `pulumi:"winsServer1"`
	// WINS server 2.
	WinsServer2 pulumi.StringOutput `pulumi:"winsServer2"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Netmask == nil {
		return nil, errors.New("invalid value for required argument 'Netmask'")
	}
	if args.DdnsKey != nil {
		args.DdnsKey = pulumi.ToSecret(args.DdnsKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"ddnsKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Server
	err := ctx.RegisterResource("fortios:system/dhcp/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("fortios:system/dhcp/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// Enable/disable auto configuration. Valid values: `disable`, `enable`.
	AutoConfiguration *string `pulumi:"autoConfiguration"`
	// Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
	AutoManagedStatus *string `pulumi:"autoManagedStatus"`
	// Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
	ConflictedIpTimeout *int `pulumi:"conflictedIpTimeout"`
	// DDNS authentication mode. Valid values: `disable`, `tsig`.
	DdnsAuth *string `pulumi:"ddnsAuth"`
	// DDNS update key (base 64 encoding).
	DdnsKey *string `pulumi:"ddnsKey"`
	// DDNS update key name.
	DdnsKeyname *string `pulumi:"ddnsKeyname"`
	// DDNS server IP.
	DdnsServerIp *string `pulumi:"ddnsServerIp"`
	// TTL.
	DdnsTtl *int `pulumi:"ddnsTtl"`
	// Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdate *string `pulumi:"ddnsUpdate"`
	// Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdateOverride *string `pulumi:"ddnsUpdateOverride"`
	// Zone of your domain name (ex. DDNS.com).
	DdnsZone *string `pulumi:"ddnsZone"`
	// Default gateway IP address assigned by the DHCP server.
	DefaultGateway *string `pulumi:"defaultGateway"`
	// Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
	DhcpSettingsFromFortiipam *string `pulumi:"dhcpSettingsFromFortiipam"`
	// DNS server 1.
	DnsServer1 *string `pulumi:"dnsServer1"`
	// DNS server 2.
	DnsServer2 *string `pulumi:"dnsServer2"`
	// DNS server 3.
	DnsServer3 *string `pulumi:"dnsServer3"`
	// DNS server 4.
	DnsServer4 *string `pulumi:"dnsServer4"`
	// Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	DnsService *string `pulumi:"dnsService"`
	// Domain name suffix for the IP addresses that the DHCP server assigns to clients.
	Domain *string `pulumi:"domain"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `excludeRange` block is documented below.
	ExcludeRanges []ServerExcludeRange `pulumi:"excludeRanges"`
	// Name of the boot file on the TFTP server.
	Filename *string `pulumi:"filename"`
	// Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
	ForticlientOnNetStatus *string `pulumi:"forticlientOnNetStatus"`
	// ID.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// DHCP server can assign IP configurations to clients connected to this interface.
	Interface *string `pulumi:"interface"`
	// Method used to assign client IP. Valid values: `range`, `usrgrp`.
	IpMode *string `pulumi:"ipMode"`
	// DHCP IP range configuration. The structure of `ipRange` block is documented below.
	IpRanges []ServerIpRange `pulumi:"ipRanges"`
	// DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
	IpsecLeaseHold *int `pulumi:"ipsecLeaseHold"`
	// Lease time in seconds, 0 means unlimited.
	LeaseTime *int `pulumi:"leaseTime"`
	// MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
	MacAclDefaultAction *string `pulumi:"macAclDefaultAction"`
	// Netmask assigned by the DHCP server.
	Netmask *string `pulumi:"netmask"`
	// IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
	NextServer *string `pulumi:"nextServer"`
	// NTP server 1.
	NtpServer1 *string `pulumi:"ntpServer1"`
	// NTP server 2.
	NtpServer2 *string `pulumi:"ntpServer2"`
	// NTP server 3.
	NtpServer3 *string `pulumi:"ntpServer3"`
	// Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	NtpService *string `pulumi:"ntpService"`
	// DHCP options. The structure of `options` block is documented below.
	Options []ServerOption `pulumi:"options"`
	// Relay agent IP.
	RelayAgent *string `pulumi:"relayAgent"`
	// Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reservedAddress` block is documented below.
	ReservedAddresses []ServerReservedAddress `pulumi:"reservedAddresses"`
	// DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
	ServerType *string `pulumi:"serverType"`
	// Enable/disable shared subnet. Valid values: `disable`, `enable`.
	SharedSubnet *string `pulumi:"sharedSubnet"`
	// Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftpServer` block is documented below.
	TftpServers []ServerTftpServer `pulumi:"tftpServers"`
	// Select the time zone to be assigned to DHCP clients.
	Timezone *string `pulumi:"timezone"`
	// Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
	TimezoneOption *string `pulumi:"timezoneOption"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
	VciMatch *string `pulumi:"vciMatch"`
	// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
	VciStrings []ServerVciString `pulumi:"vciStrings"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
	WifiAc1 *string `pulumi:"wifiAc1"`
	// WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
	WifiAc2 *string `pulumi:"wifiAc2"`
	// WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
	WifiAc3 *string `pulumi:"wifiAc3"`
	// Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
	WifiAcService *string `pulumi:"wifiAcService"`
	// WINS server 1.
	WinsServer1 *string `pulumi:"winsServer1"`
	// WINS server 2.
	WinsServer2 *string `pulumi:"winsServer2"`
}

type ServerState struct {
	// Enable/disable auto configuration. Valid values: `disable`, `enable`.
	AutoConfiguration pulumi.StringPtrInput
	// Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
	AutoManagedStatus pulumi.StringPtrInput
	// Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
	ConflictedIpTimeout pulumi.IntPtrInput
	// DDNS authentication mode. Valid values: `disable`, `tsig`.
	DdnsAuth pulumi.StringPtrInput
	// DDNS update key (base 64 encoding).
	DdnsKey pulumi.StringPtrInput
	// DDNS update key name.
	DdnsKeyname pulumi.StringPtrInput
	// DDNS server IP.
	DdnsServerIp pulumi.StringPtrInput
	// TTL.
	DdnsTtl pulumi.IntPtrInput
	// Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdate pulumi.StringPtrInput
	// Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdateOverride pulumi.StringPtrInput
	// Zone of your domain name (ex. DDNS.com).
	DdnsZone pulumi.StringPtrInput
	// Default gateway IP address assigned by the DHCP server.
	DefaultGateway pulumi.StringPtrInput
	// Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
	DhcpSettingsFromFortiipam pulumi.StringPtrInput
	// DNS server 1.
	DnsServer1 pulumi.StringPtrInput
	// DNS server 2.
	DnsServer2 pulumi.StringPtrInput
	// DNS server 3.
	DnsServer3 pulumi.StringPtrInput
	// DNS server 4.
	DnsServer4 pulumi.StringPtrInput
	// Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	DnsService pulumi.StringPtrInput
	// Domain name suffix for the IP addresses that the DHCP server assigns to clients.
	Domain pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `excludeRange` block is documented below.
	ExcludeRanges ServerExcludeRangeArrayInput
	// Name of the boot file on the TFTP server.
	Filename pulumi.StringPtrInput
	// Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
	ForticlientOnNetStatus pulumi.StringPtrInput
	// ID.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// DHCP server can assign IP configurations to clients connected to this interface.
	Interface pulumi.StringPtrInput
	// Method used to assign client IP. Valid values: `range`, `usrgrp`.
	IpMode pulumi.StringPtrInput
	// DHCP IP range configuration. The structure of `ipRange` block is documented below.
	IpRanges ServerIpRangeArrayInput
	// DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
	IpsecLeaseHold pulumi.IntPtrInput
	// Lease time in seconds, 0 means unlimited.
	LeaseTime pulumi.IntPtrInput
	// MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
	MacAclDefaultAction pulumi.StringPtrInput
	// Netmask assigned by the DHCP server.
	Netmask pulumi.StringPtrInput
	// IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
	NextServer pulumi.StringPtrInput
	// NTP server 1.
	NtpServer1 pulumi.StringPtrInput
	// NTP server 2.
	NtpServer2 pulumi.StringPtrInput
	// NTP server 3.
	NtpServer3 pulumi.StringPtrInput
	// Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	NtpService pulumi.StringPtrInput
	// DHCP options. The structure of `options` block is documented below.
	Options ServerOptionArrayInput
	// Relay agent IP.
	RelayAgent pulumi.StringPtrInput
	// Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reservedAddress` block is documented below.
	ReservedAddresses ServerReservedAddressArrayInput
	// DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
	ServerType pulumi.StringPtrInput
	// Enable/disable shared subnet. Valid values: `disable`, `enable`.
	SharedSubnet pulumi.StringPtrInput
	// Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput
	// One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftpServer` block is documented below.
	TftpServers ServerTftpServerArrayInput
	// Select the time zone to be assigned to DHCP clients.
	Timezone pulumi.StringPtrInput
	// Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
	TimezoneOption pulumi.StringPtrInput
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
	VciMatch pulumi.StringPtrInput
	// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
	VciStrings ServerVciStringArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
	WifiAc1 pulumi.StringPtrInput
	// WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
	WifiAc2 pulumi.StringPtrInput
	// WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
	WifiAc3 pulumi.StringPtrInput
	// Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
	WifiAcService pulumi.StringPtrInput
	// WINS server 1.
	WinsServer1 pulumi.StringPtrInput
	// WINS server 2.
	WinsServer2 pulumi.StringPtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	// Enable/disable auto configuration. Valid values: `disable`, `enable`.
	AutoConfiguration *string `pulumi:"autoConfiguration"`
	// Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
	AutoManagedStatus *string `pulumi:"autoManagedStatus"`
	// Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
	ConflictedIpTimeout *int `pulumi:"conflictedIpTimeout"`
	// DDNS authentication mode. Valid values: `disable`, `tsig`.
	DdnsAuth *string `pulumi:"ddnsAuth"`
	// DDNS update key (base 64 encoding).
	DdnsKey *string `pulumi:"ddnsKey"`
	// DDNS update key name.
	DdnsKeyname *string `pulumi:"ddnsKeyname"`
	// DDNS server IP.
	DdnsServerIp *string `pulumi:"ddnsServerIp"`
	// TTL.
	DdnsTtl *int `pulumi:"ddnsTtl"`
	// Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdate *string `pulumi:"ddnsUpdate"`
	// Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdateOverride *string `pulumi:"ddnsUpdateOverride"`
	// Zone of your domain name (ex. DDNS.com).
	DdnsZone *string `pulumi:"ddnsZone"`
	// Default gateway IP address assigned by the DHCP server.
	DefaultGateway *string `pulumi:"defaultGateway"`
	// Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
	DhcpSettingsFromFortiipam *string `pulumi:"dhcpSettingsFromFortiipam"`
	// DNS server 1.
	DnsServer1 *string `pulumi:"dnsServer1"`
	// DNS server 2.
	DnsServer2 *string `pulumi:"dnsServer2"`
	// DNS server 3.
	DnsServer3 *string `pulumi:"dnsServer3"`
	// DNS server 4.
	DnsServer4 *string `pulumi:"dnsServer4"`
	// Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	DnsService *string `pulumi:"dnsService"`
	// Domain name suffix for the IP addresses that the DHCP server assigns to clients.
	Domain *string `pulumi:"domain"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `excludeRange` block is documented below.
	ExcludeRanges []ServerExcludeRange `pulumi:"excludeRanges"`
	// Name of the boot file on the TFTP server.
	Filename *string `pulumi:"filename"`
	// Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
	ForticlientOnNetStatus *string `pulumi:"forticlientOnNetStatus"`
	// ID.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// DHCP server can assign IP configurations to clients connected to this interface.
	Interface string `pulumi:"interface"`
	// Method used to assign client IP. Valid values: `range`, `usrgrp`.
	IpMode *string `pulumi:"ipMode"`
	// DHCP IP range configuration. The structure of `ipRange` block is documented below.
	IpRanges []ServerIpRange `pulumi:"ipRanges"`
	// DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
	IpsecLeaseHold *int `pulumi:"ipsecLeaseHold"`
	// Lease time in seconds, 0 means unlimited.
	LeaseTime *int `pulumi:"leaseTime"`
	// MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
	MacAclDefaultAction *string `pulumi:"macAclDefaultAction"`
	// Netmask assigned by the DHCP server.
	Netmask string `pulumi:"netmask"`
	// IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
	NextServer *string `pulumi:"nextServer"`
	// NTP server 1.
	NtpServer1 *string `pulumi:"ntpServer1"`
	// NTP server 2.
	NtpServer2 *string `pulumi:"ntpServer2"`
	// NTP server 3.
	NtpServer3 *string `pulumi:"ntpServer3"`
	// Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	NtpService *string `pulumi:"ntpService"`
	// DHCP options. The structure of `options` block is documented below.
	Options []ServerOption `pulumi:"options"`
	// Relay agent IP.
	RelayAgent *string `pulumi:"relayAgent"`
	// Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reservedAddress` block is documented below.
	ReservedAddresses []ServerReservedAddress `pulumi:"reservedAddresses"`
	// DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
	ServerType *string `pulumi:"serverType"`
	// Enable/disable shared subnet. Valid values: `disable`, `enable`.
	SharedSubnet *string `pulumi:"sharedSubnet"`
	// Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftpServer` block is documented below.
	TftpServers []ServerTftpServer `pulumi:"tftpServers"`
	// Select the time zone to be assigned to DHCP clients.
	Timezone *string `pulumi:"timezone"`
	// Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
	TimezoneOption *string `pulumi:"timezoneOption"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
	VciMatch *string `pulumi:"vciMatch"`
	// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
	VciStrings []ServerVciString `pulumi:"vciStrings"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
	WifiAc1 *string `pulumi:"wifiAc1"`
	// WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
	WifiAc2 *string `pulumi:"wifiAc2"`
	// WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
	WifiAc3 *string `pulumi:"wifiAc3"`
	// Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
	WifiAcService *string `pulumi:"wifiAcService"`
	// WINS server 1.
	WinsServer1 *string `pulumi:"winsServer1"`
	// WINS server 2.
	WinsServer2 *string `pulumi:"winsServer2"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// Enable/disable auto configuration. Valid values: `disable`, `enable`.
	AutoConfiguration pulumi.StringPtrInput
	// Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
	AutoManagedStatus pulumi.StringPtrInput
	// Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
	ConflictedIpTimeout pulumi.IntPtrInput
	// DDNS authentication mode. Valid values: `disable`, `tsig`.
	DdnsAuth pulumi.StringPtrInput
	// DDNS update key (base 64 encoding).
	DdnsKey pulumi.StringPtrInput
	// DDNS update key name.
	DdnsKeyname pulumi.StringPtrInput
	// DDNS server IP.
	DdnsServerIp pulumi.StringPtrInput
	// TTL.
	DdnsTtl pulumi.IntPtrInput
	// Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdate pulumi.StringPtrInput
	// Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdateOverride pulumi.StringPtrInput
	// Zone of your domain name (ex. DDNS.com).
	DdnsZone pulumi.StringPtrInput
	// Default gateway IP address assigned by the DHCP server.
	DefaultGateway pulumi.StringPtrInput
	// Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
	DhcpSettingsFromFortiipam pulumi.StringPtrInput
	// DNS server 1.
	DnsServer1 pulumi.StringPtrInput
	// DNS server 2.
	DnsServer2 pulumi.StringPtrInput
	// DNS server 3.
	DnsServer3 pulumi.StringPtrInput
	// DNS server 4.
	DnsServer4 pulumi.StringPtrInput
	// Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	DnsService pulumi.StringPtrInput
	// Domain name suffix for the IP addresses that the DHCP server assigns to clients.
	Domain pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `excludeRange` block is documented below.
	ExcludeRanges ServerExcludeRangeArrayInput
	// Name of the boot file on the TFTP server.
	Filename pulumi.StringPtrInput
	// Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
	ForticlientOnNetStatus pulumi.StringPtrInput
	// ID.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// DHCP server can assign IP configurations to clients connected to this interface.
	Interface pulumi.StringInput
	// Method used to assign client IP. Valid values: `range`, `usrgrp`.
	IpMode pulumi.StringPtrInput
	// DHCP IP range configuration. The structure of `ipRange` block is documented below.
	IpRanges ServerIpRangeArrayInput
	// DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
	IpsecLeaseHold pulumi.IntPtrInput
	// Lease time in seconds, 0 means unlimited.
	LeaseTime pulumi.IntPtrInput
	// MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
	MacAclDefaultAction pulumi.StringPtrInput
	// Netmask assigned by the DHCP server.
	Netmask pulumi.StringInput
	// IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
	NextServer pulumi.StringPtrInput
	// NTP server 1.
	NtpServer1 pulumi.StringPtrInput
	// NTP server 2.
	NtpServer2 pulumi.StringPtrInput
	// NTP server 3.
	NtpServer3 pulumi.StringPtrInput
	// Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	NtpService pulumi.StringPtrInput
	// DHCP options. The structure of `options` block is documented below.
	Options ServerOptionArrayInput
	// Relay agent IP.
	RelayAgent pulumi.StringPtrInput
	// Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reservedAddress` block is documented below.
	ReservedAddresses ServerReservedAddressArrayInput
	// DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
	ServerType pulumi.StringPtrInput
	// Enable/disable shared subnet. Valid values: `disable`, `enable`.
	SharedSubnet pulumi.StringPtrInput
	// Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput
	// One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftpServer` block is documented below.
	TftpServers ServerTftpServerArrayInput
	// Select the time zone to be assigned to DHCP clients.
	Timezone pulumi.StringPtrInput
	// Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
	TimezoneOption pulumi.StringPtrInput
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
	VciMatch pulumi.StringPtrInput
	// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
	VciStrings ServerVciStringArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
	WifiAc1 pulumi.StringPtrInput
	// WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
	WifiAc2 pulumi.StringPtrInput
	// WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
	WifiAc3 pulumi.StringPtrInput
	// Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
	WifiAcService pulumi.StringPtrInput
	// WINS server 1.
	WinsServer1 pulumi.StringPtrInput
	// WINS server 2.
	WinsServer2 pulumi.StringPtrInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}

type ServerInput interface {
	pulumi.Input

	ToServerOutput() ServerOutput
	ToServerOutputWithContext(ctx context.Context) ServerOutput
}

func (*Server) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (i *Server) ToServerOutput() ServerOutput {
	return i.ToServerOutputWithContext(context.Background())
}

func (i *Server) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOutput)
}

// ServerArrayInput is an input type that accepts ServerArray and ServerArrayOutput values.
// You can construct a concrete instance of `ServerArrayInput` via:
//
//	ServerArray{ ServerArgs{...} }
type ServerArrayInput interface {
	pulumi.Input

	ToServerArrayOutput() ServerArrayOutput
	ToServerArrayOutputWithContext(context.Context) ServerArrayOutput
}

type ServerArray []ServerInput

func (ServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (i ServerArray) ToServerArrayOutput() ServerArrayOutput {
	return i.ToServerArrayOutputWithContext(context.Background())
}

func (i ServerArray) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerArrayOutput)
}

// ServerMapInput is an input type that accepts ServerMap and ServerMapOutput values.
// You can construct a concrete instance of `ServerMapInput` via:
//
//	ServerMap{ "key": ServerArgs{...} }
type ServerMapInput interface {
	pulumi.Input

	ToServerMapOutput() ServerMapOutput
	ToServerMapOutputWithContext(context.Context) ServerMapOutput
}

type ServerMap map[string]ServerInput

func (ServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (i ServerMap) ToServerMapOutput() ServerMapOutput {
	return i.ToServerMapOutputWithContext(context.Background())
}

func (i ServerMap) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMapOutput)
}

type ServerOutput struct{ *pulumi.OutputState }

func (ServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (o ServerOutput) ToServerOutput() ServerOutput {
	return o
}

func (o ServerOutput) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return o
}

// Enable/disable auto configuration. Valid values: `disable`, `enable`.
func (o ServerOutput) AutoConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.AutoConfiguration }).(pulumi.StringOutput)
}

// Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
func (o ServerOutput) AutoManagedStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.AutoManagedStatus }).(pulumi.StringOutput)
}

// Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
func (o ServerOutput) ConflictedIpTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.ConflictedIpTimeout }).(pulumi.IntOutput)
}

// DDNS authentication mode. Valid values: `disable`, `tsig`.
func (o ServerOutput) DdnsAuth() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.DdnsAuth }).(pulumi.StringOutput)
}

// DDNS update key (base 64 encoding).
func (o ServerOutput) DdnsKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.DdnsKey }).(pulumi.StringOutput)
}

// DDNS update key name.
func (o ServerOutput) DdnsKeyname() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.DdnsKeyname }).(pulumi.StringOutput)
}

// DDNS server IP.
func (o ServerOutput) DdnsServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.DdnsServerIp }).(pulumi.StringOutput)
}

// TTL.
func (o ServerOutput) DdnsTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.DdnsTtl }).(pulumi.IntOutput)
}

// Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
func (o ServerOutput) DdnsUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.DdnsUpdate }).(pulumi.StringOutput)
}

// Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
func (o ServerOutput) DdnsUpdateOverride() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.DdnsUpdateOverride }).(pulumi.StringOutput)
}

// Zone of your domain name (ex. DDNS.com).
func (o ServerOutput) DdnsZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.DdnsZone }).(pulumi.StringOutput)
}

// Default gateway IP address assigned by the DHCP server.
func (o ServerOutput) DefaultGateway() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.DefaultGateway }).(pulumi.StringOutput)
}

// Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
func (o ServerOutput) DhcpSettingsFromFortiipam() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.DhcpSettingsFromFortiipam }).(pulumi.StringOutput)
}

// DNS server 1.
func (o ServerOutput) DnsServer1() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.DnsServer1 }).(pulumi.StringOutput)
}

// DNS server 2.
func (o ServerOutput) DnsServer2() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.DnsServer2 }).(pulumi.StringOutput)
}

// DNS server 3.
func (o ServerOutput) DnsServer3() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.DnsServer3 }).(pulumi.StringOutput)
}

// DNS server 4.
func (o ServerOutput) DnsServer4() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.DnsServer4 }).(pulumi.StringOutput)
}

// Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
func (o ServerOutput) DnsService() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.DnsService }).(pulumi.StringOutput)
}

// Domain name suffix for the IP addresses that the DHCP server assigns to clients.
func (o ServerOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o ServerOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `excludeRange` block is documented below.
func (o ServerOutput) ExcludeRanges() ServerExcludeRangeArrayOutput {
	return o.ApplyT(func(v *Server) ServerExcludeRangeArrayOutput { return v.ExcludeRanges }).(ServerExcludeRangeArrayOutput)
}

// Name of the boot file on the TFTP server.
func (o ServerOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Filename }).(pulumi.StringOutput)
}

// Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
func (o ServerOutput) ForticlientOnNetStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ForticlientOnNetStatus }).(pulumi.StringOutput)
}

// ID.
func (o ServerOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o ServerOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// DHCP server can assign IP configurations to clients connected to this interface.
func (o ServerOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Method used to assign client IP. Valid values: `range`, `usrgrp`.
func (o ServerOutput) IpMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.IpMode }).(pulumi.StringOutput)
}

// DHCP IP range configuration. The structure of `ipRange` block is documented below.
func (o ServerOutput) IpRanges() ServerIpRangeArrayOutput {
	return o.ApplyT(func(v *Server) ServerIpRangeArrayOutput { return v.IpRanges }).(ServerIpRangeArrayOutput)
}

// DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
func (o ServerOutput) IpsecLeaseHold() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.IpsecLeaseHold }).(pulumi.IntOutput)
}

// Lease time in seconds, 0 means unlimited.
func (o ServerOutput) LeaseTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.LeaseTime }).(pulumi.IntOutput)
}

// MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
func (o ServerOutput) MacAclDefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.MacAclDefaultAction }).(pulumi.StringOutput)
}

// Netmask assigned by the DHCP server.
func (o ServerOutput) Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Netmask }).(pulumi.StringOutput)
}

// IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
func (o ServerOutput) NextServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.NextServer }).(pulumi.StringOutput)
}

// NTP server 1.
func (o ServerOutput) NtpServer1() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.NtpServer1 }).(pulumi.StringOutput)
}

// NTP server 2.
func (o ServerOutput) NtpServer2() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.NtpServer2 }).(pulumi.StringOutput)
}

// NTP server 3.
func (o ServerOutput) NtpServer3() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.NtpServer3 }).(pulumi.StringOutput)
}

// Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
func (o ServerOutput) NtpService() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.NtpService }).(pulumi.StringOutput)
}

// DHCP options. The structure of `options` block is documented below.
func (o ServerOutput) Options() ServerOptionArrayOutput {
	return o.ApplyT(func(v *Server) ServerOptionArrayOutput { return v.Options }).(ServerOptionArrayOutput)
}

// Relay agent IP.
func (o ServerOutput) RelayAgent() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.RelayAgent }).(pulumi.StringOutput)
}

// Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reservedAddress` block is documented below.
func (o ServerOutput) ReservedAddresses() ServerReservedAddressArrayOutput {
	return o.ApplyT(func(v *Server) ServerReservedAddressArrayOutput { return v.ReservedAddresses }).(ServerReservedAddressArrayOutput)
}

// DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
func (o ServerOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ServerType }).(pulumi.StringOutput)
}

// Enable/disable shared subnet. Valid values: `disable`, `enable`.
func (o ServerOutput) SharedSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.SharedSubnet }).(pulumi.StringOutput)
}

// Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
func (o ServerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftpServer` block is documented below.
func (o ServerOutput) TftpServers() ServerTftpServerArrayOutput {
	return o.ApplyT(func(v *Server) ServerTftpServerArrayOutput { return v.TftpServers }).(ServerTftpServerArrayOutput)
}

// Select the time zone to be assigned to DHCP clients.
func (o ServerOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Timezone }).(pulumi.StringOutput)
}

// Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
func (o ServerOutput) TimezoneOption() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.TimezoneOption }).(pulumi.StringOutput)
}

// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
func (o ServerOutput) VciMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.VciMatch }).(pulumi.StringOutput)
}

// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
func (o ServerOutput) VciStrings() ServerVciStringArrayOutput {
	return o.ApplyT(func(v *Server) ServerVciStringArrayOutput { return v.VciStrings }).(ServerVciStringArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ServerOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
func (o ServerOutput) WifiAc1() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.WifiAc1 }).(pulumi.StringOutput)
}

// WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
func (o ServerOutput) WifiAc2() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.WifiAc2 }).(pulumi.StringOutput)
}

// WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
func (o ServerOutput) WifiAc3() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.WifiAc3 }).(pulumi.StringOutput)
}

// Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
func (o ServerOutput) WifiAcService() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.WifiAcService }).(pulumi.StringOutput)
}

// WINS server 1.
func (o ServerOutput) WinsServer1() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.WinsServer1 }).(pulumi.StringOutput)
}

// WINS server 2.
func (o ServerOutput) WinsServer2() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.WinsServer2 }).(pulumi.StringOutput)
}

type ServerArrayOutput struct{ *pulumi.OutputState }

func (ServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (o ServerArrayOutput) ToServerArrayOutput() ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) Index(i pulumi.IntInput) ServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Server {
		return vs[0].([]*Server)[vs[1].(int)]
	}).(ServerOutput)
}

type ServerMapOutput struct{ *pulumi.OutputState }

func (ServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (o ServerMapOutput) ToServerMapOutput() ServerMapOutput {
	return o
}

func (o ServerMapOutput) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return o
}

func (o ServerMapOutput) MapIndex(k pulumi.StringInput) ServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Server {
		return vs[0].(map[string]*Server)[vs[1].(string)]
	}).(ServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerInput)(nil)).Elem(), &Server{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerArrayInput)(nil)).Elem(), ServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMapInput)(nil)).Elem(), ServerMap{})
	pulumi.RegisterOutputType(ServerOutput{})
	pulumi.RegisterOutputType(ServerArrayOutput{})
	pulumi.RegisterOutputType(ServerMapOutput{})
}
