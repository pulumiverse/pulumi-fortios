// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dhcp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

var _ = internal.GetEnvOrDefault

type ServerExcludeRange struct {
	// End of IP range.
	EndIp *string `pulumi:"endIp"`
	// ID.
	Id *int `pulumi:"id"`
	// Lease time in seconds, 0 means default lease time.
	LeaseTime *int `pulumi:"leaseTime"`
	// Start of IP range.
	StartIp *string `pulumi:"startIp"`
	// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range. Valid values: `disable`, `enable`.
	UciMatch *string `pulumi:"uciMatch"`
	// One or more UCI strings in quotes separated by spaces. The structure of `uciString` block is documented below.
	UciStrings []ServerExcludeRangeUciString `pulumi:"uciStrings"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range. Valid values: `disable`, `enable`.
	VciMatch *string `pulumi:"vciMatch"`
	// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
	VciStrings []ServerExcludeRangeVciString `pulumi:"vciStrings"`
}

// ServerExcludeRangeInput is an input type that accepts ServerExcludeRangeArgs and ServerExcludeRangeOutput values.
// You can construct a concrete instance of `ServerExcludeRangeInput` via:
//
//	ServerExcludeRangeArgs{...}
type ServerExcludeRangeInput interface {
	pulumi.Input

	ToServerExcludeRangeOutput() ServerExcludeRangeOutput
	ToServerExcludeRangeOutputWithContext(context.Context) ServerExcludeRangeOutput
}

type ServerExcludeRangeArgs struct {
	// End of IP range.
	EndIp pulumi.StringPtrInput `pulumi:"endIp"`
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Lease time in seconds, 0 means default lease time.
	LeaseTime pulumi.IntPtrInput `pulumi:"leaseTime"`
	// Start of IP range.
	StartIp pulumi.StringPtrInput `pulumi:"startIp"`
	// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range. Valid values: `disable`, `enable`.
	UciMatch pulumi.StringPtrInput `pulumi:"uciMatch"`
	// One or more UCI strings in quotes separated by spaces. The structure of `uciString` block is documented below.
	UciStrings ServerExcludeRangeUciStringArrayInput `pulumi:"uciStrings"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range. Valid values: `disable`, `enable`.
	VciMatch pulumi.StringPtrInput `pulumi:"vciMatch"`
	// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
	VciStrings ServerExcludeRangeVciStringArrayInput `pulumi:"vciStrings"`
}

func (ServerExcludeRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerExcludeRange)(nil)).Elem()
}

func (i ServerExcludeRangeArgs) ToServerExcludeRangeOutput() ServerExcludeRangeOutput {
	return i.ToServerExcludeRangeOutputWithContext(context.Background())
}

func (i ServerExcludeRangeArgs) ToServerExcludeRangeOutputWithContext(ctx context.Context) ServerExcludeRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerExcludeRangeOutput)
}

// ServerExcludeRangeArrayInput is an input type that accepts ServerExcludeRangeArray and ServerExcludeRangeArrayOutput values.
// You can construct a concrete instance of `ServerExcludeRangeArrayInput` via:
//
//	ServerExcludeRangeArray{ ServerExcludeRangeArgs{...} }
type ServerExcludeRangeArrayInput interface {
	pulumi.Input

	ToServerExcludeRangeArrayOutput() ServerExcludeRangeArrayOutput
	ToServerExcludeRangeArrayOutputWithContext(context.Context) ServerExcludeRangeArrayOutput
}

type ServerExcludeRangeArray []ServerExcludeRangeInput

func (ServerExcludeRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerExcludeRange)(nil)).Elem()
}

func (i ServerExcludeRangeArray) ToServerExcludeRangeArrayOutput() ServerExcludeRangeArrayOutput {
	return i.ToServerExcludeRangeArrayOutputWithContext(context.Background())
}

func (i ServerExcludeRangeArray) ToServerExcludeRangeArrayOutputWithContext(ctx context.Context) ServerExcludeRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerExcludeRangeArrayOutput)
}

type ServerExcludeRangeOutput struct{ *pulumi.OutputState }

func (ServerExcludeRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerExcludeRange)(nil)).Elem()
}

func (o ServerExcludeRangeOutput) ToServerExcludeRangeOutput() ServerExcludeRangeOutput {
	return o
}

func (o ServerExcludeRangeOutput) ToServerExcludeRangeOutputWithContext(ctx context.Context) ServerExcludeRangeOutput {
	return o
}

// End of IP range.
func (o ServerExcludeRangeOutput) EndIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerExcludeRange) *string { return v.EndIp }).(pulumi.StringPtrOutput)
}

// ID.
func (o ServerExcludeRangeOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerExcludeRange) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Lease time in seconds, 0 means default lease time.
func (o ServerExcludeRangeOutput) LeaseTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerExcludeRange) *int { return v.LeaseTime }).(pulumi.IntPtrOutput)
}

// Start of IP range.
func (o ServerExcludeRangeOutput) StartIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerExcludeRange) *string { return v.StartIp }).(pulumi.StringPtrOutput)
}

// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range. Valid values: `disable`, `enable`.
func (o ServerExcludeRangeOutput) UciMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerExcludeRange) *string { return v.UciMatch }).(pulumi.StringPtrOutput)
}

// One or more UCI strings in quotes separated by spaces. The structure of `uciString` block is documented below.
func (o ServerExcludeRangeOutput) UciStrings() ServerExcludeRangeUciStringArrayOutput {
	return o.ApplyT(func(v ServerExcludeRange) []ServerExcludeRangeUciString { return v.UciStrings }).(ServerExcludeRangeUciStringArrayOutput)
}

// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range. Valid values: `disable`, `enable`.
func (o ServerExcludeRangeOutput) VciMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerExcludeRange) *string { return v.VciMatch }).(pulumi.StringPtrOutput)
}

// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
func (o ServerExcludeRangeOutput) VciStrings() ServerExcludeRangeVciStringArrayOutput {
	return o.ApplyT(func(v ServerExcludeRange) []ServerExcludeRangeVciString { return v.VciStrings }).(ServerExcludeRangeVciStringArrayOutput)
}

type ServerExcludeRangeArrayOutput struct{ *pulumi.OutputState }

func (ServerExcludeRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerExcludeRange)(nil)).Elem()
}

func (o ServerExcludeRangeArrayOutput) ToServerExcludeRangeArrayOutput() ServerExcludeRangeArrayOutput {
	return o
}

func (o ServerExcludeRangeArrayOutput) ToServerExcludeRangeArrayOutputWithContext(ctx context.Context) ServerExcludeRangeArrayOutput {
	return o
}

func (o ServerExcludeRangeArrayOutput) Index(i pulumi.IntInput) ServerExcludeRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerExcludeRange {
		return vs[0].([]ServerExcludeRange)[vs[1].(int)]
	}).(ServerExcludeRangeOutput)
}

type ServerExcludeRangeUciString struct {
	// UCI strings.
	UciString *string `pulumi:"uciString"`
}

// ServerExcludeRangeUciStringInput is an input type that accepts ServerExcludeRangeUciStringArgs and ServerExcludeRangeUciStringOutput values.
// You can construct a concrete instance of `ServerExcludeRangeUciStringInput` via:
//
//	ServerExcludeRangeUciStringArgs{...}
type ServerExcludeRangeUciStringInput interface {
	pulumi.Input

	ToServerExcludeRangeUciStringOutput() ServerExcludeRangeUciStringOutput
	ToServerExcludeRangeUciStringOutputWithContext(context.Context) ServerExcludeRangeUciStringOutput
}

type ServerExcludeRangeUciStringArgs struct {
	// UCI strings.
	UciString pulumi.StringPtrInput `pulumi:"uciString"`
}

func (ServerExcludeRangeUciStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerExcludeRangeUciString)(nil)).Elem()
}

func (i ServerExcludeRangeUciStringArgs) ToServerExcludeRangeUciStringOutput() ServerExcludeRangeUciStringOutput {
	return i.ToServerExcludeRangeUciStringOutputWithContext(context.Background())
}

func (i ServerExcludeRangeUciStringArgs) ToServerExcludeRangeUciStringOutputWithContext(ctx context.Context) ServerExcludeRangeUciStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerExcludeRangeUciStringOutput)
}

// ServerExcludeRangeUciStringArrayInput is an input type that accepts ServerExcludeRangeUciStringArray and ServerExcludeRangeUciStringArrayOutput values.
// You can construct a concrete instance of `ServerExcludeRangeUciStringArrayInput` via:
//
//	ServerExcludeRangeUciStringArray{ ServerExcludeRangeUciStringArgs{...} }
type ServerExcludeRangeUciStringArrayInput interface {
	pulumi.Input

	ToServerExcludeRangeUciStringArrayOutput() ServerExcludeRangeUciStringArrayOutput
	ToServerExcludeRangeUciStringArrayOutputWithContext(context.Context) ServerExcludeRangeUciStringArrayOutput
}

type ServerExcludeRangeUciStringArray []ServerExcludeRangeUciStringInput

func (ServerExcludeRangeUciStringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerExcludeRangeUciString)(nil)).Elem()
}

func (i ServerExcludeRangeUciStringArray) ToServerExcludeRangeUciStringArrayOutput() ServerExcludeRangeUciStringArrayOutput {
	return i.ToServerExcludeRangeUciStringArrayOutputWithContext(context.Background())
}

func (i ServerExcludeRangeUciStringArray) ToServerExcludeRangeUciStringArrayOutputWithContext(ctx context.Context) ServerExcludeRangeUciStringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerExcludeRangeUciStringArrayOutput)
}

type ServerExcludeRangeUciStringOutput struct{ *pulumi.OutputState }

func (ServerExcludeRangeUciStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerExcludeRangeUciString)(nil)).Elem()
}

func (o ServerExcludeRangeUciStringOutput) ToServerExcludeRangeUciStringOutput() ServerExcludeRangeUciStringOutput {
	return o
}

func (o ServerExcludeRangeUciStringOutput) ToServerExcludeRangeUciStringOutputWithContext(ctx context.Context) ServerExcludeRangeUciStringOutput {
	return o
}

// UCI strings.
func (o ServerExcludeRangeUciStringOutput) UciString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerExcludeRangeUciString) *string { return v.UciString }).(pulumi.StringPtrOutput)
}

type ServerExcludeRangeUciStringArrayOutput struct{ *pulumi.OutputState }

func (ServerExcludeRangeUciStringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerExcludeRangeUciString)(nil)).Elem()
}

func (o ServerExcludeRangeUciStringArrayOutput) ToServerExcludeRangeUciStringArrayOutput() ServerExcludeRangeUciStringArrayOutput {
	return o
}

func (o ServerExcludeRangeUciStringArrayOutput) ToServerExcludeRangeUciStringArrayOutputWithContext(ctx context.Context) ServerExcludeRangeUciStringArrayOutput {
	return o
}

func (o ServerExcludeRangeUciStringArrayOutput) Index(i pulumi.IntInput) ServerExcludeRangeUciStringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerExcludeRangeUciString {
		return vs[0].([]ServerExcludeRangeUciString)[vs[1].(int)]
	}).(ServerExcludeRangeUciStringOutput)
}

type ServerExcludeRangeVciString struct {
	// VCI strings.
	VciString *string `pulumi:"vciString"`
}

// ServerExcludeRangeVciStringInput is an input type that accepts ServerExcludeRangeVciStringArgs and ServerExcludeRangeVciStringOutput values.
// You can construct a concrete instance of `ServerExcludeRangeVciStringInput` via:
//
//	ServerExcludeRangeVciStringArgs{...}
type ServerExcludeRangeVciStringInput interface {
	pulumi.Input

	ToServerExcludeRangeVciStringOutput() ServerExcludeRangeVciStringOutput
	ToServerExcludeRangeVciStringOutputWithContext(context.Context) ServerExcludeRangeVciStringOutput
}

type ServerExcludeRangeVciStringArgs struct {
	// VCI strings.
	VciString pulumi.StringPtrInput `pulumi:"vciString"`
}

func (ServerExcludeRangeVciStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerExcludeRangeVciString)(nil)).Elem()
}

func (i ServerExcludeRangeVciStringArgs) ToServerExcludeRangeVciStringOutput() ServerExcludeRangeVciStringOutput {
	return i.ToServerExcludeRangeVciStringOutputWithContext(context.Background())
}

func (i ServerExcludeRangeVciStringArgs) ToServerExcludeRangeVciStringOutputWithContext(ctx context.Context) ServerExcludeRangeVciStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerExcludeRangeVciStringOutput)
}

// ServerExcludeRangeVciStringArrayInput is an input type that accepts ServerExcludeRangeVciStringArray and ServerExcludeRangeVciStringArrayOutput values.
// You can construct a concrete instance of `ServerExcludeRangeVciStringArrayInput` via:
//
//	ServerExcludeRangeVciStringArray{ ServerExcludeRangeVciStringArgs{...} }
type ServerExcludeRangeVciStringArrayInput interface {
	pulumi.Input

	ToServerExcludeRangeVciStringArrayOutput() ServerExcludeRangeVciStringArrayOutput
	ToServerExcludeRangeVciStringArrayOutputWithContext(context.Context) ServerExcludeRangeVciStringArrayOutput
}

type ServerExcludeRangeVciStringArray []ServerExcludeRangeVciStringInput

func (ServerExcludeRangeVciStringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerExcludeRangeVciString)(nil)).Elem()
}

func (i ServerExcludeRangeVciStringArray) ToServerExcludeRangeVciStringArrayOutput() ServerExcludeRangeVciStringArrayOutput {
	return i.ToServerExcludeRangeVciStringArrayOutputWithContext(context.Background())
}

func (i ServerExcludeRangeVciStringArray) ToServerExcludeRangeVciStringArrayOutputWithContext(ctx context.Context) ServerExcludeRangeVciStringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerExcludeRangeVciStringArrayOutput)
}

type ServerExcludeRangeVciStringOutput struct{ *pulumi.OutputState }

func (ServerExcludeRangeVciStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerExcludeRangeVciString)(nil)).Elem()
}

func (o ServerExcludeRangeVciStringOutput) ToServerExcludeRangeVciStringOutput() ServerExcludeRangeVciStringOutput {
	return o
}

func (o ServerExcludeRangeVciStringOutput) ToServerExcludeRangeVciStringOutputWithContext(ctx context.Context) ServerExcludeRangeVciStringOutput {
	return o
}

// VCI strings.
func (o ServerExcludeRangeVciStringOutput) VciString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerExcludeRangeVciString) *string { return v.VciString }).(pulumi.StringPtrOutput)
}

type ServerExcludeRangeVciStringArrayOutput struct{ *pulumi.OutputState }

func (ServerExcludeRangeVciStringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerExcludeRangeVciString)(nil)).Elem()
}

func (o ServerExcludeRangeVciStringArrayOutput) ToServerExcludeRangeVciStringArrayOutput() ServerExcludeRangeVciStringArrayOutput {
	return o
}

func (o ServerExcludeRangeVciStringArrayOutput) ToServerExcludeRangeVciStringArrayOutputWithContext(ctx context.Context) ServerExcludeRangeVciStringArrayOutput {
	return o
}

func (o ServerExcludeRangeVciStringArrayOutput) Index(i pulumi.IntInput) ServerExcludeRangeVciStringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerExcludeRangeVciString {
		return vs[0].([]ServerExcludeRangeVciString)[vs[1].(int)]
	}).(ServerExcludeRangeVciStringOutput)
}

type ServerIpRange struct {
	// End of IP range.
	EndIp *string `pulumi:"endIp"`
	// ID.
	Id *int `pulumi:"id"`
	// Lease time in seconds, 0 means default lease time.
	LeaseTime *int `pulumi:"leaseTime"`
	// Start of IP range.
	StartIp *string `pulumi:"startIp"`
	// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range. Valid values: `disable`, `enable`.
	UciMatch *string `pulumi:"uciMatch"`
	// One or more UCI strings in quotes separated by spaces. The structure of `uciString` block is documented below.
	UciStrings []ServerIpRangeUciString `pulumi:"uciStrings"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range. Valid values: `disable`, `enable`.
	VciMatch *string `pulumi:"vciMatch"`
	// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
	VciStrings []ServerIpRangeVciString `pulumi:"vciStrings"`
}

// ServerIpRangeInput is an input type that accepts ServerIpRangeArgs and ServerIpRangeOutput values.
// You can construct a concrete instance of `ServerIpRangeInput` via:
//
//	ServerIpRangeArgs{...}
type ServerIpRangeInput interface {
	pulumi.Input

	ToServerIpRangeOutput() ServerIpRangeOutput
	ToServerIpRangeOutputWithContext(context.Context) ServerIpRangeOutput
}

type ServerIpRangeArgs struct {
	// End of IP range.
	EndIp pulumi.StringPtrInput `pulumi:"endIp"`
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Lease time in seconds, 0 means default lease time.
	LeaseTime pulumi.IntPtrInput `pulumi:"leaseTime"`
	// Start of IP range.
	StartIp pulumi.StringPtrInput `pulumi:"startIp"`
	// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range. Valid values: `disable`, `enable`.
	UciMatch pulumi.StringPtrInput `pulumi:"uciMatch"`
	// One or more UCI strings in quotes separated by spaces. The structure of `uciString` block is documented below.
	UciStrings ServerIpRangeUciStringArrayInput `pulumi:"uciStrings"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range. Valid values: `disable`, `enable`.
	VciMatch pulumi.StringPtrInput `pulumi:"vciMatch"`
	// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
	VciStrings ServerIpRangeVciStringArrayInput `pulumi:"vciStrings"`
}

func (ServerIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerIpRange)(nil)).Elem()
}

func (i ServerIpRangeArgs) ToServerIpRangeOutput() ServerIpRangeOutput {
	return i.ToServerIpRangeOutputWithContext(context.Background())
}

func (i ServerIpRangeArgs) ToServerIpRangeOutputWithContext(ctx context.Context) ServerIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIpRangeOutput)
}

// ServerIpRangeArrayInput is an input type that accepts ServerIpRangeArray and ServerIpRangeArrayOutput values.
// You can construct a concrete instance of `ServerIpRangeArrayInput` via:
//
//	ServerIpRangeArray{ ServerIpRangeArgs{...} }
type ServerIpRangeArrayInput interface {
	pulumi.Input

	ToServerIpRangeArrayOutput() ServerIpRangeArrayOutput
	ToServerIpRangeArrayOutputWithContext(context.Context) ServerIpRangeArrayOutput
}

type ServerIpRangeArray []ServerIpRangeInput

func (ServerIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerIpRange)(nil)).Elem()
}

func (i ServerIpRangeArray) ToServerIpRangeArrayOutput() ServerIpRangeArrayOutput {
	return i.ToServerIpRangeArrayOutputWithContext(context.Background())
}

func (i ServerIpRangeArray) ToServerIpRangeArrayOutputWithContext(ctx context.Context) ServerIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIpRangeArrayOutput)
}

type ServerIpRangeOutput struct{ *pulumi.OutputState }

func (ServerIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerIpRange)(nil)).Elem()
}

func (o ServerIpRangeOutput) ToServerIpRangeOutput() ServerIpRangeOutput {
	return o
}

func (o ServerIpRangeOutput) ToServerIpRangeOutputWithContext(ctx context.Context) ServerIpRangeOutput {
	return o
}

// End of IP range.
func (o ServerIpRangeOutput) EndIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIpRange) *string { return v.EndIp }).(pulumi.StringPtrOutput)
}

// ID.
func (o ServerIpRangeOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerIpRange) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Lease time in seconds, 0 means default lease time.
func (o ServerIpRangeOutput) LeaseTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerIpRange) *int { return v.LeaseTime }).(pulumi.IntPtrOutput)
}

// Start of IP range.
func (o ServerIpRangeOutput) StartIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIpRange) *string { return v.StartIp }).(pulumi.StringPtrOutput)
}

// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range. Valid values: `disable`, `enable`.
func (o ServerIpRangeOutput) UciMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIpRange) *string { return v.UciMatch }).(pulumi.StringPtrOutput)
}

// One or more UCI strings in quotes separated by spaces. The structure of `uciString` block is documented below.
func (o ServerIpRangeOutput) UciStrings() ServerIpRangeUciStringArrayOutput {
	return o.ApplyT(func(v ServerIpRange) []ServerIpRangeUciString { return v.UciStrings }).(ServerIpRangeUciStringArrayOutput)
}

// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range. Valid values: `disable`, `enable`.
func (o ServerIpRangeOutput) VciMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIpRange) *string { return v.VciMatch }).(pulumi.StringPtrOutput)
}

// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
func (o ServerIpRangeOutput) VciStrings() ServerIpRangeVciStringArrayOutput {
	return o.ApplyT(func(v ServerIpRange) []ServerIpRangeVciString { return v.VciStrings }).(ServerIpRangeVciStringArrayOutput)
}

type ServerIpRangeArrayOutput struct{ *pulumi.OutputState }

func (ServerIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerIpRange)(nil)).Elem()
}

func (o ServerIpRangeArrayOutput) ToServerIpRangeArrayOutput() ServerIpRangeArrayOutput {
	return o
}

func (o ServerIpRangeArrayOutput) ToServerIpRangeArrayOutputWithContext(ctx context.Context) ServerIpRangeArrayOutput {
	return o
}

func (o ServerIpRangeArrayOutput) Index(i pulumi.IntInput) ServerIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerIpRange {
		return vs[0].([]ServerIpRange)[vs[1].(int)]
	}).(ServerIpRangeOutput)
}

type ServerIpRangeUciString struct {
	// UCI strings.
	UciString *string `pulumi:"uciString"`
}

// ServerIpRangeUciStringInput is an input type that accepts ServerIpRangeUciStringArgs and ServerIpRangeUciStringOutput values.
// You can construct a concrete instance of `ServerIpRangeUciStringInput` via:
//
//	ServerIpRangeUciStringArgs{...}
type ServerIpRangeUciStringInput interface {
	pulumi.Input

	ToServerIpRangeUciStringOutput() ServerIpRangeUciStringOutput
	ToServerIpRangeUciStringOutputWithContext(context.Context) ServerIpRangeUciStringOutput
}

type ServerIpRangeUciStringArgs struct {
	// UCI strings.
	UciString pulumi.StringPtrInput `pulumi:"uciString"`
}

func (ServerIpRangeUciStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerIpRangeUciString)(nil)).Elem()
}

func (i ServerIpRangeUciStringArgs) ToServerIpRangeUciStringOutput() ServerIpRangeUciStringOutput {
	return i.ToServerIpRangeUciStringOutputWithContext(context.Background())
}

func (i ServerIpRangeUciStringArgs) ToServerIpRangeUciStringOutputWithContext(ctx context.Context) ServerIpRangeUciStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIpRangeUciStringOutput)
}

// ServerIpRangeUciStringArrayInput is an input type that accepts ServerIpRangeUciStringArray and ServerIpRangeUciStringArrayOutput values.
// You can construct a concrete instance of `ServerIpRangeUciStringArrayInput` via:
//
//	ServerIpRangeUciStringArray{ ServerIpRangeUciStringArgs{...} }
type ServerIpRangeUciStringArrayInput interface {
	pulumi.Input

	ToServerIpRangeUciStringArrayOutput() ServerIpRangeUciStringArrayOutput
	ToServerIpRangeUciStringArrayOutputWithContext(context.Context) ServerIpRangeUciStringArrayOutput
}

type ServerIpRangeUciStringArray []ServerIpRangeUciStringInput

func (ServerIpRangeUciStringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerIpRangeUciString)(nil)).Elem()
}

func (i ServerIpRangeUciStringArray) ToServerIpRangeUciStringArrayOutput() ServerIpRangeUciStringArrayOutput {
	return i.ToServerIpRangeUciStringArrayOutputWithContext(context.Background())
}

func (i ServerIpRangeUciStringArray) ToServerIpRangeUciStringArrayOutputWithContext(ctx context.Context) ServerIpRangeUciStringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIpRangeUciStringArrayOutput)
}

type ServerIpRangeUciStringOutput struct{ *pulumi.OutputState }

func (ServerIpRangeUciStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerIpRangeUciString)(nil)).Elem()
}

func (o ServerIpRangeUciStringOutput) ToServerIpRangeUciStringOutput() ServerIpRangeUciStringOutput {
	return o
}

func (o ServerIpRangeUciStringOutput) ToServerIpRangeUciStringOutputWithContext(ctx context.Context) ServerIpRangeUciStringOutput {
	return o
}

// UCI strings.
func (o ServerIpRangeUciStringOutput) UciString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIpRangeUciString) *string { return v.UciString }).(pulumi.StringPtrOutput)
}

type ServerIpRangeUciStringArrayOutput struct{ *pulumi.OutputState }

func (ServerIpRangeUciStringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerIpRangeUciString)(nil)).Elem()
}

func (o ServerIpRangeUciStringArrayOutput) ToServerIpRangeUciStringArrayOutput() ServerIpRangeUciStringArrayOutput {
	return o
}

func (o ServerIpRangeUciStringArrayOutput) ToServerIpRangeUciStringArrayOutputWithContext(ctx context.Context) ServerIpRangeUciStringArrayOutput {
	return o
}

func (o ServerIpRangeUciStringArrayOutput) Index(i pulumi.IntInput) ServerIpRangeUciStringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerIpRangeUciString {
		return vs[0].([]ServerIpRangeUciString)[vs[1].(int)]
	}).(ServerIpRangeUciStringOutput)
}

type ServerIpRangeVciString struct {
	// VCI strings.
	VciString *string `pulumi:"vciString"`
}

// ServerIpRangeVciStringInput is an input type that accepts ServerIpRangeVciStringArgs and ServerIpRangeVciStringOutput values.
// You can construct a concrete instance of `ServerIpRangeVciStringInput` via:
//
//	ServerIpRangeVciStringArgs{...}
type ServerIpRangeVciStringInput interface {
	pulumi.Input

	ToServerIpRangeVciStringOutput() ServerIpRangeVciStringOutput
	ToServerIpRangeVciStringOutputWithContext(context.Context) ServerIpRangeVciStringOutput
}

type ServerIpRangeVciStringArgs struct {
	// VCI strings.
	VciString pulumi.StringPtrInput `pulumi:"vciString"`
}

func (ServerIpRangeVciStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerIpRangeVciString)(nil)).Elem()
}

func (i ServerIpRangeVciStringArgs) ToServerIpRangeVciStringOutput() ServerIpRangeVciStringOutput {
	return i.ToServerIpRangeVciStringOutputWithContext(context.Background())
}

func (i ServerIpRangeVciStringArgs) ToServerIpRangeVciStringOutputWithContext(ctx context.Context) ServerIpRangeVciStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIpRangeVciStringOutput)
}

// ServerIpRangeVciStringArrayInput is an input type that accepts ServerIpRangeVciStringArray and ServerIpRangeVciStringArrayOutput values.
// You can construct a concrete instance of `ServerIpRangeVciStringArrayInput` via:
//
//	ServerIpRangeVciStringArray{ ServerIpRangeVciStringArgs{...} }
type ServerIpRangeVciStringArrayInput interface {
	pulumi.Input

	ToServerIpRangeVciStringArrayOutput() ServerIpRangeVciStringArrayOutput
	ToServerIpRangeVciStringArrayOutputWithContext(context.Context) ServerIpRangeVciStringArrayOutput
}

type ServerIpRangeVciStringArray []ServerIpRangeVciStringInput

func (ServerIpRangeVciStringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerIpRangeVciString)(nil)).Elem()
}

func (i ServerIpRangeVciStringArray) ToServerIpRangeVciStringArrayOutput() ServerIpRangeVciStringArrayOutput {
	return i.ToServerIpRangeVciStringArrayOutputWithContext(context.Background())
}

func (i ServerIpRangeVciStringArray) ToServerIpRangeVciStringArrayOutputWithContext(ctx context.Context) ServerIpRangeVciStringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIpRangeVciStringArrayOutput)
}

type ServerIpRangeVciStringOutput struct{ *pulumi.OutputState }

func (ServerIpRangeVciStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerIpRangeVciString)(nil)).Elem()
}

func (o ServerIpRangeVciStringOutput) ToServerIpRangeVciStringOutput() ServerIpRangeVciStringOutput {
	return o
}

func (o ServerIpRangeVciStringOutput) ToServerIpRangeVciStringOutputWithContext(ctx context.Context) ServerIpRangeVciStringOutput {
	return o
}

// VCI strings.
func (o ServerIpRangeVciStringOutput) VciString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIpRangeVciString) *string { return v.VciString }).(pulumi.StringPtrOutput)
}

type ServerIpRangeVciStringArrayOutput struct{ *pulumi.OutputState }

func (ServerIpRangeVciStringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerIpRangeVciString)(nil)).Elem()
}

func (o ServerIpRangeVciStringArrayOutput) ToServerIpRangeVciStringArrayOutput() ServerIpRangeVciStringArrayOutput {
	return o
}

func (o ServerIpRangeVciStringArrayOutput) ToServerIpRangeVciStringArrayOutputWithContext(ctx context.Context) ServerIpRangeVciStringArrayOutput {
	return o
}

func (o ServerIpRangeVciStringArrayOutput) Index(i pulumi.IntInput) ServerIpRangeVciStringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerIpRangeVciString {
		return vs[0].([]ServerIpRangeVciString)[vs[1].(int)]
	}).(ServerIpRangeVciStringOutput)
}

type ServerOption struct {
	// DHCP option code.
	Code *int `pulumi:"code"`
	// ID.
	Id *int `pulumi:"id"`
	// DHCP option IPs.
	Ip *string `pulumi:"ip"`
	// DHCP option type. Valid values: `hex`, `string`, `ip`, `fqdn`.
	Type *string `pulumi:"type"`
	// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this option. Valid values: `disable`, `enable`.
	UciMatch *string `pulumi:"uciMatch"`
	// One or more UCI strings in quotes separated by spaces. The structure of `uciString` block is documented below.
	UciStrings []ServerOptionUciString `pulumi:"uciStrings"`
	// DHCP option value.
	Value *string `pulumi:"value"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this option. Valid values: `disable`, `enable`.
	VciMatch *string `pulumi:"vciMatch"`
	// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
	VciStrings []ServerOptionVciString `pulumi:"vciStrings"`
}

// ServerOptionInput is an input type that accepts ServerOptionArgs and ServerOptionOutput values.
// You can construct a concrete instance of `ServerOptionInput` via:
//
//	ServerOptionArgs{...}
type ServerOptionInput interface {
	pulumi.Input

	ToServerOptionOutput() ServerOptionOutput
	ToServerOptionOutputWithContext(context.Context) ServerOptionOutput
}

type ServerOptionArgs struct {
	// DHCP option code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// DHCP option IPs.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// DHCP option type. Valid values: `hex`, `string`, `ip`, `fqdn`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this option. Valid values: `disable`, `enable`.
	UciMatch pulumi.StringPtrInput `pulumi:"uciMatch"`
	// One or more UCI strings in quotes separated by spaces. The structure of `uciString` block is documented below.
	UciStrings ServerOptionUciStringArrayInput `pulumi:"uciStrings"`
	// DHCP option value.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this option. Valid values: `disable`, `enable`.
	VciMatch pulumi.StringPtrInput `pulumi:"vciMatch"`
	// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
	VciStrings ServerOptionVciStringArrayInput `pulumi:"vciStrings"`
}

func (ServerOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerOption)(nil)).Elem()
}

func (i ServerOptionArgs) ToServerOptionOutput() ServerOptionOutput {
	return i.ToServerOptionOutputWithContext(context.Background())
}

func (i ServerOptionArgs) ToServerOptionOutputWithContext(ctx context.Context) ServerOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOptionOutput)
}

// ServerOptionArrayInput is an input type that accepts ServerOptionArray and ServerOptionArrayOutput values.
// You can construct a concrete instance of `ServerOptionArrayInput` via:
//
//	ServerOptionArray{ ServerOptionArgs{...} }
type ServerOptionArrayInput interface {
	pulumi.Input

	ToServerOptionArrayOutput() ServerOptionArrayOutput
	ToServerOptionArrayOutputWithContext(context.Context) ServerOptionArrayOutput
}

type ServerOptionArray []ServerOptionInput

func (ServerOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerOption)(nil)).Elem()
}

func (i ServerOptionArray) ToServerOptionArrayOutput() ServerOptionArrayOutput {
	return i.ToServerOptionArrayOutputWithContext(context.Background())
}

func (i ServerOptionArray) ToServerOptionArrayOutputWithContext(ctx context.Context) ServerOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOptionArrayOutput)
}

type ServerOptionOutput struct{ *pulumi.OutputState }

func (ServerOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerOption)(nil)).Elem()
}

func (o ServerOptionOutput) ToServerOptionOutput() ServerOptionOutput {
	return o
}

func (o ServerOptionOutput) ToServerOptionOutputWithContext(ctx context.Context) ServerOptionOutput {
	return o
}

// DHCP option code.
func (o ServerOptionOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerOption) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// ID.
func (o ServerOptionOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerOption) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// DHCP option IPs.
func (o ServerOptionOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerOption) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// DHCP option type. Valid values: `hex`, `string`, `ip`, `fqdn`.
func (o ServerOptionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerOption) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this option. Valid values: `disable`, `enable`.
func (o ServerOptionOutput) UciMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerOption) *string { return v.UciMatch }).(pulumi.StringPtrOutput)
}

// One or more UCI strings in quotes separated by spaces. The structure of `uciString` block is documented below.
func (o ServerOptionOutput) UciStrings() ServerOptionUciStringArrayOutput {
	return o.ApplyT(func(v ServerOption) []ServerOptionUciString { return v.UciStrings }).(ServerOptionUciStringArrayOutput)
}

// DHCP option value.
func (o ServerOptionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerOption) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this option. Valid values: `disable`, `enable`.
func (o ServerOptionOutput) VciMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerOption) *string { return v.VciMatch }).(pulumi.StringPtrOutput)
}

// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
func (o ServerOptionOutput) VciStrings() ServerOptionVciStringArrayOutput {
	return o.ApplyT(func(v ServerOption) []ServerOptionVciString { return v.VciStrings }).(ServerOptionVciStringArrayOutput)
}

type ServerOptionArrayOutput struct{ *pulumi.OutputState }

func (ServerOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerOption)(nil)).Elem()
}

func (o ServerOptionArrayOutput) ToServerOptionArrayOutput() ServerOptionArrayOutput {
	return o
}

func (o ServerOptionArrayOutput) ToServerOptionArrayOutputWithContext(ctx context.Context) ServerOptionArrayOutput {
	return o
}

func (o ServerOptionArrayOutput) Index(i pulumi.IntInput) ServerOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerOption {
		return vs[0].([]ServerOption)[vs[1].(int)]
	}).(ServerOptionOutput)
}

type ServerOptionUciString struct {
	// UCI strings.
	UciString *string `pulumi:"uciString"`
}

// ServerOptionUciStringInput is an input type that accepts ServerOptionUciStringArgs and ServerOptionUciStringOutput values.
// You can construct a concrete instance of `ServerOptionUciStringInput` via:
//
//	ServerOptionUciStringArgs{...}
type ServerOptionUciStringInput interface {
	pulumi.Input

	ToServerOptionUciStringOutput() ServerOptionUciStringOutput
	ToServerOptionUciStringOutputWithContext(context.Context) ServerOptionUciStringOutput
}

type ServerOptionUciStringArgs struct {
	// UCI strings.
	UciString pulumi.StringPtrInput `pulumi:"uciString"`
}

func (ServerOptionUciStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerOptionUciString)(nil)).Elem()
}

func (i ServerOptionUciStringArgs) ToServerOptionUciStringOutput() ServerOptionUciStringOutput {
	return i.ToServerOptionUciStringOutputWithContext(context.Background())
}

func (i ServerOptionUciStringArgs) ToServerOptionUciStringOutputWithContext(ctx context.Context) ServerOptionUciStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOptionUciStringOutput)
}

// ServerOptionUciStringArrayInput is an input type that accepts ServerOptionUciStringArray and ServerOptionUciStringArrayOutput values.
// You can construct a concrete instance of `ServerOptionUciStringArrayInput` via:
//
//	ServerOptionUciStringArray{ ServerOptionUciStringArgs{...} }
type ServerOptionUciStringArrayInput interface {
	pulumi.Input

	ToServerOptionUciStringArrayOutput() ServerOptionUciStringArrayOutput
	ToServerOptionUciStringArrayOutputWithContext(context.Context) ServerOptionUciStringArrayOutput
}

type ServerOptionUciStringArray []ServerOptionUciStringInput

func (ServerOptionUciStringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerOptionUciString)(nil)).Elem()
}

func (i ServerOptionUciStringArray) ToServerOptionUciStringArrayOutput() ServerOptionUciStringArrayOutput {
	return i.ToServerOptionUciStringArrayOutputWithContext(context.Background())
}

func (i ServerOptionUciStringArray) ToServerOptionUciStringArrayOutputWithContext(ctx context.Context) ServerOptionUciStringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOptionUciStringArrayOutput)
}

type ServerOptionUciStringOutput struct{ *pulumi.OutputState }

func (ServerOptionUciStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerOptionUciString)(nil)).Elem()
}

func (o ServerOptionUciStringOutput) ToServerOptionUciStringOutput() ServerOptionUciStringOutput {
	return o
}

func (o ServerOptionUciStringOutput) ToServerOptionUciStringOutputWithContext(ctx context.Context) ServerOptionUciStringOutput {
	return o
}

// UCI strings.
func (o ServerOptionUciStringOutput) UciString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerOptionUciString) *string { return v.UciString }).(pulumi.StringPtrOutput)
}

type ServerOptionUciStringArrayOutput struct{ *pulumi.OutputState }

func (ServerOptionUciStringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerOptionUciString)(nil)).Elem()
}

func (o ServerOptionUciStringArrayOutput) ToServerOptionUciStringArrayOutput() ServerOptionUciStringArrayOutput {
	return o
}

func (o ServerOptionUciStringArrayOutput) ToServerOptionUciStringArrayOutputWithContext(ctx context.Context) ServerOptionUciStringArrayOutput {
	return o
}

func (o ServerOptionUciStringArrayOutput) Index(i pulumi.IntInput) ServerOptionUciStringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerOptionUciString {
		return vs[0].([]ServerOptionUciString)[vs[1].(int)]
	}).(ServerOptionUciStringOutput)
}

type ServerOptionVciString struct {
	// VCI strings.
	VciString *string `pulumi:"vciString"`
}

// ServerOptionVciStringInput is an input type that accepts ServerOptionVciStringArgs and ServerOptionVciStringOutput values.
// You can construct a concrete instance of `ServerOptionVciStringInput` via:
//
//	ServerOptionVciStringArgs{...}
type ServerOptionVciStringInput interface {
	pulumi.Input

	ToServerOptionVciStringOutput() ServerOptionVciStringOutput
	ToServerOptionVciStringOutputWithContext(context.Context) ServerOptionVciStringOutput
}

type ServerOptionVciStringArgs struct {
	// VCI strings.
	VciString pulumi.StringPtrInput `pulumi:"vciString"`
}

func (ServerOptionVciStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerOptionVciString)(nil)).Elem()
}

func (i ServerOptionVciStringArgs) ToServerOptionVciStringOutput() ServerOptionVciStringOutput {
	return i.ToServerOptionVciStringOutputWithContext(context.Background())
}

func (i ServerOptionVciStringArgs) ToServerOptionVciStringOutputWithContext(ctx context.Context) ServerOptionVciStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOptionVciStringOutput)
}

// ServerOptionVciStringArrayInput is an input type that accepts ServerOptionVciStringArray and ServerOptionVciStringArrayOutput values.
// You can construct a concrete instance of `ServerOptionVciStringArrayInput` via:
//
//	ServerOptionVciStringArray{ ServerOptionVciStringArgs{...} }
type ServerOptionVciStringArrayInput interface {
	pulumi.Input

	ToServerOptionVciStringArrayOutput() ServerOptionVciStringArrayOutput
	ToServerOptionVciStringArrayOutputWithContext(context.Context) ServerOptionVciStringArrayOutput
}

type ServerOptionVciStringArray []ServerOptionVciStringInput

func (ServerOptionVciStringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerOptionVciString)(nil)).Elem()
}

func (i ServerOptionVciStringArray) ToServerOptionVciStringArrayOutput() ServerOptionVciStringArrayOutput {
	return i.ToServerOptionVciStringArrayOutputWithContext(context.Background())
}

func (i ServerOptionVciStringArray) ToServerOptionVciStringArrayOutputWithContext(ctx context.Context) ServerOptionVciStringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOptionVciStringArrayOutput)
}

type ServerOptionVciStringOutput struct{ *pulumi.OutputState }

func (ServerOptionVciStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerOptionVciString)(nil)).Elem()
}

func (o ServerOptionVciStringOutput) ToServerOptionVciStringOutput() ServerOptionVciStringOutput {
	return o
}

func (o ServerOptionVciStringOutput) ToServerOptionVciStringOutputWithContext(ctx context.Context) ServerOptionVciStringOutput {
	return o
}

// VCI strings.
func (o ServerOptionVciStringOutput) VciString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerOptionVciString) *string { return v.VciString }).(pulumi.StringPtrOutput)
}

type ServerOptionVciStringArrayOutput struct{ *pulumi.OutputState }

func (ServerOptionVciStringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerOptionVciString)(nil)).Elem()
}

func (o ServerOptionVciStringArrayOutput) ToServerOptionVciStringArrayOutput() ServerOptionVciStringArrayOutput {
	return o
}

func (o ServerOptionVciStringArrayOutput) ToServerOptionVciStringArrayOutputWithContext(ctx context.Context) ServerOptionVciStringArrayOutput {
	return o
}

func (o ServerOptionVciStringArrayOutput) Index(i pulumi.IntInput) ServerOptionVciStringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerOptionVciString {
		return vs[0].([]ServerOptionVciString)[vs[1].(int)]
	}).(ServerOptionVciStringOutput)
}

type ServerReservedAddress struct {
	// Options for the DHCP server to configure the client with the reserved MAC address. Valid values: `assign`, `block`, `reserved`.
	Action *string `pulumi:"action"`
	// Option 82 circuit-ID of the client that will get the reserved IP address.
	CircuitId *string `pulumi:"circuitId"`
	// DHCP option type. Valid values: `hex`, `string`.
	CircuitIdType *string `pulumi:"circuitIdType"`
	// Description.
	Description *string `pulumi:"description"`
	// ID.
	Id *int `pulumi:"id"`
	// IP address to be reserved for the MAC address.
	Ip *string `pulumi:"ip"`
	// MAC address of the client that will get the reserved IP address.
	Mac *string `pulumi:"mac"`
	// Option 82 remote-ID of the client that will get the reserved IP address.
	RemoteId *string `pulumi:"remoteId"`
	// DHCP option type. Valid values: `hex`, `string`.
	RemoteIdType *string `pulumi:"remoteIdType"`
	// DHCP reserved-address type. Valid values: `mac`, `option82`.
	Type *string `pulumi:"type"`
}

// ServerReservedAddressInput is an input type that accepts ServerReservedAddressArgs and ServerReservedAddressOutput values.
// You can construct a concrete instance of `ServerReservedAddressInput` via:
//
//	ServerReservedAddressArgs{...}
type ServerReservedAddressInput interface {
	pulumi.Input

	ToServerReservedAddressOutput() ServerReservedAddressOutput
	ToServerReservedAddressOutputWithContext(context.Context) ServerReservedAddressOutput
}

type ServerReservedAddressArgs struct {
	// Options for the DHCP server to configure the client with the reserved MAC address. Valid values: `assign`, `block`, `reserved`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Option 82 circuit-ID of the client that will get the reserved IP address.
	CircuitId pulumi.StringPtrInput `pulumi:"circuitId"`
	// DHCP option type. Valid values: `hex`, `string`.
	CircuitIdType pulumi.StringPtrInput `pulumi:"circuitIdType"`
	// Description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// IP address to be reserved for the MAC address.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// MAC address of the client that will get the reserved IP address.
	Mac pulumi.StringPtrInput `pulumi:"mac"`
	// Option 82 remote-ID of the client that will get the reserved IP address.
	RemoteId pulumi.StringPtrInput `pulumi:"remoteId"`
	// DHCP option type. Valid values: `hex`, `string`.
	RemoteIdType pulumi.StringPtrInput `pulumi:"remoteIdType"`
	// DHCP reserved-address type. Valid values: `mac`, `option82`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ServerReservedAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerReservedAddress)(nil)).Elem()
}

func (i ServerReservedAddressArgs) ToServerReservedAddressOutput() ServerReservedAddressOutput {
	return i.ToServerReservedAddressOutputWithContext(context.Background())
}

func (i ServerReservedAddressArgs) ToServerReservedAddressOutputWithContext(ctx context.Context) ServerReservedAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerReservedAddressOutput)
}

// ServerReservedAddressArrayInput is an input type that accepts ServerReservedAddressArray and ServerReservedAddressArrayOutput values.
// You can construct a concrete instance of `ServerReservedAddressArrayInput` via:
//
//	ServerReservedAddressArray{ ServerReservedAddressArgs{...} }
type ServerReservedAddressArrayInput interface {
	pulumi.Input

	ToServerReservedAddressArrayOutput() ServerReservedAddressArrayOutput
	ToServerReservedAddressArrayOutputWithContext(context.Context) ServerReservedAddressArrayOutput
}

type ServerReservedAddressArray []ServerReservedAddressInput

func (ServerReservedAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerReservedAddress)(nil)).Elem()
}

func (i ServerReservedAddressArray) ToServerReservedAddressArrayOutput() ServerReservedAddressArrayOutput {
	return i.ToServerReservedAddressArrayOutputWithContext(context.Background())
}

func (i ServerReservedAddressArray) ToServerReservedAddressArrayOutputWithContext(ctx context.Context) ServerReservedAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerReservedAddressArrayOutput)
}

type ServerReservedAddressOutput struct{ *pulumi.OutputState }

func (ServerReservedAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerReservedAddress)(nil)).Elem()
}

func (o ServerReservedAddressOutput) ToServerReservedAddressOutput() ServerReservedAddressOutput {
	return o
}

func (o ServerReservedAddressOutput) ToServerReservedAddressOutputWithContext(ctx context.Context) ServerReservedAddressOutput {
	return o
}

// Options for the DHCP server to configure the client with the reserved MAC address. Valid values: `assign`, `block`, `reserved`.
func (o ServerReservedAddressOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerReservedAddress) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Option 82 circuit-ID of the client that will get the reserved IP address.
func (o ServerReservedAddressOutput) CircuitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerReservedAddress) *string { return v.CircuitId }).(pulumi.StringPtrOutput)
}

// DHCP option type. Valid values: `hex`, `string`.
func (o ServerReservedAddressOutput) CircuitIdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerReservedAddress) *string { return v.CircuitIdType }).(pulumi.StringPtrOutput)
}

// Description.
func (o ServerReservedAddressOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerReservedAddress) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// ID.
func (o ServerReservedAddressOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerReservedAddress) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// IP address to be reserved for the MAC address.
func (o ServerReservedAddressOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerReservedAddress) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// MAC address of the client that will get the reserved IP address.
func (o ServerReservedAddressOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerReservedAddress) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

// Option 82 remote-ID of the client that will get the reserved IP address.
func (o ServerReservedAddressOutput) RemoteId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerReservedAddress) *string { return v.RemoteId }).(pulumi.StringPtrOutput)
}

// DHCP option type. Valid values: `hex`, `string`.
func (o ServerReservedAddressOutput) RemoteIdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerReservedAddress) *string { return v.RemoteIdType }).(pulumi.StringPtrOutput)
}

// DHCP reserved-address type. Valid values: `mac`, `option82`.
func (o ServerReservedAddressOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerReservedAddress) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ServerReservedAddressArrayOutput struct{ *pulumi.OutputState }

func (ServerReservedAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerReservedAddress)(nil)).Elem()
}

func (o ServerReservedAddressArrayOutput) ToServerReservedAddressArrayOutput() ServerReservedAddressArrayOutput {
	return o
}

func (o ServerReservedAddressArrayOutput) ToServerReservedAddressArrayOutputWithContext(ctx context.Context) ServerReservedAddressArrayOutput {
	return o
}

func (o ServerReservedAddressArrayOutput) Index(i pulumi.IntInput) ServerReservedAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerReservedAddress {
		return vs[0].([]ServerReservedAddress)[vs[1].(int)]
	}).(ServerReservedAddressOutput)
}

type ServerTftpServer struct {
	// TFTP server.
	TftpServer *string `pulumi:"tftpServer"`
}

// ServerTftpServerInput is an input type that accepts ServerTftpServerArgs and ServerTftpServerOutput values.
// You can construct a concrete instance of `ServerTftpServerInput` via:
//
//	ServerTftpServerArgs{...}
type ServerTftpServerInput interface {
	pulumi.Input

	ToServerTftpServerOutput() ServerTftpServerOutput
	ToServerTftpServerOutputWithContext(context.Context) ServerTftpServerOutput
}

type ServerTftpServerArgs struct {
	// TFTP server.
	TftpServer pulumi.StringPtrInput `pulumi:"tftpServer"`
}

func (ServerTftpServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTftpServer)(nil)).Elem()
}

func (i ServerTftpServerArgs) ToServerTftpServerOutput() ServerTftpServerOutput {
	return i.ToServerTftpServerOutputWithContext(context.Background())
}

func (i ServerTftpServerArgs) ToServerTftpServerOutputWithContext(ctx context.Context) ServerTftpServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTftpServerOutput)
}

// ServerTftpServerArrayInput is an input type that accepts ServerTftpServerArray and ServerTftpServerArrayOutput values.
// You can construct a concrete instance of `ServerTftpServerArrayInput` via:
//
//	ServerTftpServerArray{ ServerTftpServerArgs{...} }
type ServerTftpServerArrayInput interface {
	pulumi.Input

	ToServerTftpServerArrayOutput() ServerTftpServerArrayOutput
	ToServerTftpServerArrayOutputWithContext(context.Context) ServerTftpServerArrayOutput
}

type ServerTftpServerArray []ServerTftpServerInput

func (ServerTftpServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerTftpServer)(nil)).Elem()
}

func (i ServerTftpServerArray) ToServerTftpServerArrayOutput() ServerTftpServerArrayOutput {
	return i.ToServerTftpServerArrayOutputWithContext(context.Background())
}

func (i ServerTftpServerArray) ToServerTftpServerArrayOutputWithContext(ctx context.Context) ServerTftpServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTftpServerArrayOutput)
}

type ServerTftpServerOutput struct{ *pulumi.OutputState }

func (ServerTftpServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTftpServer)(nil)).Elem()
}

func (o ServerTftpServerOutput) ToServerTftpServerOutput() ServerTftpServerOutput {
	return o
}

func (o ServerTftpServerOutput) ToServerTftpServerOutputWithContext(ctx context.Context) ServerTftpServerOutput {
	return o
}

// TFTP server.
func (o ServerTftpServerOutput) TftpServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerTftpServer) *string { return v.TftpServer }).(pulumi.StringPtrOutput)
}

type ServerTftpServerArrayOutput struct{ *pulumi.OutputState }

func (ServerTftpServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerTftpServer)(nil)).Elem()
}

func (o ServerTftpServerArrayOutput) ToServerTftpServerArrayOutput() ServerTftpServerArrayOutput {
	return o
}

func (o ServerTftpServerArrayOutput) ToServerTftpServerArrayOutputWithContext(ctx context.Context) ServerTftpServerArrayOutput {
	return o
}

func (o ServerTftpServerArrayOutput) Index(i pulumi.IntInput) ServerTftpServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerTftpServer {
		return vs[0].([]ServerTftpServer)[vs[1].(int)]
	}).(ServerTftpServerOutput)
}

type ServerVciString struct {
	// VCI strings.
	VciString *string `pulumi:"vciString"`
}

// ServerVciStringInput is an input type that accepts ServerVciStringArgs and ServerVciStringOutput values.
// You can construct a concrete instance of `ServerVciStringInput` via:
//
//	ServerVciStringArgs{...}
type ServerVciStringInput interface {
	pulumi.Input

	ToServerVciStringOutput() ServerVciStringOutput
	ToServerVciStringOutputWithContext(context.Context) ServerVciStringOutput
}

type ServerVciStringArgs struct {
	// VCI strings.
	VciString pulumi.StringPtrInput `pulumi:"vciString"`
}

func (ServerVciStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerVciString)(nil)).Elem()
}

func (i ServerVciStringArgs) ToServerVciStringOutput() ServerVciStringOutput {
	return i.ToServerVciStringOutputWithContext(context.Background())
}

func (i ServerVciStringArgs) ToServerVciStringOutputWithContext(ctx context.Context) ServerVciStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVciStringOutput)
}

// ServerVciStringArrayInput is an input type that accepts ServerVciStringArray and ServerVciStringArrayOutput values.
// You can construct a concrete instance of `ServerVciStringArrayInput` via:
//
//	ServerVciStringArray{ ServerVciStringArgs{...} }
type ServerVciStringArrayInput interface {
	pulumi.Input

	ToServerVciStringArrayOutput() ServerVciStringArrayOutput
	ToServerVciStringArrayOutputWithContext(context.Context) ServerVciStringArrayOutput
}

type ServerVciStringArray []ServerVciStringInput

func (ServerVciStringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerVciString)(nil)).Elem()
}

func (i ServerVciStringArray) ToServerVciStringArrayOutput() ServerVciStringArrayOutput {
	return i.ToServerVciStringArrayOutputWithContext(context.Background())
}

func (i ServerVciStringArray) ToServerVciStringArrayOutputWithContext(ctx context.Context) ServerVciStringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVciStringArrayOutput)
}

type ServerVciStringOutput struct{ *pulumi.OutputState }

func (ServerVciStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerVciString)(nil)).Elem()
}

func (o ServerVciStringOutput) ToServerVciStringOutput() ServerVciStringOutput {
	return o
}

func (o ServerVciStringOutput) ToServerVciStringOutputWithContext(ctx context.Context) ServerVciStringOutput {
	return o
}

// VCI strings.
func (o ServerVciStringOutput) VciString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerVciString) *string { return v.VciString }).(pulumi.StringPtrOutput)
}

type ServerVciStringArrayOutput struct{ *pulumi.OutputState }

func (ServerVciStringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerVciString)(nil)).Elem()
}

func (o ServerVciStringArrayOutput) ToServerVciStringArrayOutput() ServerVciStringArrayOutput {
	return o
}

func (o ServerVciStringArrayOutput) ToServerVciStringArrayOutputWithContext(ctx context.Context) ServerVciStringArrayOutput {
	return o
}

func (o ServerVciStringArrayOutput) Index(i pulumi.IntInput) ServerVciStringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerVciString {
		return vs[0].([]ServerVciString)[vs[1].(int)]
	}).(ServerVciStringOutput)
}

type GetServerExcludeRange struct {
	// End of IP range.
	EndIp string `pulumi:"endIp"`
	// ID.
	Id int `pulumi:"id"`
	// Lease time in seconds, 0 means default lease time.
	LeaseTime int `pulumi:"leaseTime"`
	// Start of IP range.
	StartIp string `pulumi:"startIp"`
	// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range.
	UciMatch string `pulumi:"uciMatch"`
	// UCI strings.
	UciStrings []GetServerExcludeRangeUciString `pulumi:"uciStrings"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range.
	VciMatch string `pulumi:"vciMatch"`
	// VCI strings.
	VciStrings []GetServerExcludeRangeVciString `pulumi:"vciStrings"`
}

// GetServerExcludeRangeInput is an input type that accepts GetServerExcludeRangeArgs and GetServerExcludeRangeOutput values.
// You can construct a concrete instance of `GetServerExcludeRangeInput` via:
//
//	GetServerExcludeRangeArgs{...}
type GetServerExcludeRangeInput interface {
	pulumi.Input

	ToGetServerExcludeRangeOutput() GetServerExcludeRangeOutput
	ToGetServerExcludeRangeOutputWithContext(context.Context) GetServerExcludeRangeOutput
}

type GetServerExcludeRangeArgs struct {
	// End of IP range.
	EndIp pulumi.StringInput `pulumi:"endIp"`
	// ID.
	Id pulumi.IntInput `pulumi:"id"`
	// Lease time in seconds, 0 means default lease time.
	LeaseTime pulumi.IntInput `pulumi:"leaseTime"`
	// Start of IP range.
	StartIp pulumi.StringInput `pulumi:"startIp"`
	// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range.
	UciMatch pulumi.StringInput `pulumi:"uciMatch"`
	// UCI strings.
	UciStrings GetServerExcludeRangeUciStringArrayInput `pulumi:"uciStrings"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range.
	VciMatch pulumi.StringInput `pulumi:"vciMatch"`
	// VCI strings.
	VciStrings GetServerExcludeRangeVciStringArrayInput `pulumi:"vciStrings"`
}

func (GetServerExcludeRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerExcludeRange)(nil)).Elem()
}

func (i GetServerExcludeRangeArgs) ToGetServerExcludeRangeOutput() GetServerExcludeRangeOutput {
	return i.ToGetServerExcludeRangeOutputWithContext(context.Background())
}

func (i GetServerExcludeRangeArgs) ToGetServerExcludeRangeOutputWithContext(ctx context.Context) GetServerExcludeRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerExcludeRangeOutput)
}

// GetServerExcludeRangeArrayInput is an input type that accepts GetServerExcludeRangeArray and GetServerExcludeRangeArrayOutput values.
// You can construct a concrete instance of `GetServerExcludeRangeArrayInput` via:
//
//	GetServerExcludeRangeArray{ GetServerExcludeRangeArgs{...} }
type GetServerExcludeRangeArrayInput interface {
	pulumi.Input

	ToGetServerExcludeRangeArrayOutput() GetServerExcludeRangeArrayOutput
	ToGetServerExcludeRangeArrayOutputWithContext(context.Context) GetServerExcludeRangeArrayOutput
}

type GetServerExcludeRangeArray []GetServerExcludeRangeInput

func (GetServerExcludeRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerExcludeRange)(nil)).Elem()
}

func (i GetServerExcludeRangeArray) ToGetServerExcludeRangeArrayOutput() GetServerExcludeRangeArrayOutput {
	return i.ToGetServerExcludeRangeArrayOutputWithContext(context.Background())
}

func (i GetServerExcludeRangeArray) ToGetServerExcludeRangeArrayOutputWithContext(ctx context.Context) GetServerExcludeRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerExcludeRangeArrayOutput)
}

type GetServerExcludeRangeOutput struct{ *pulumi.OutputState }

func (GetServerExcludeRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerExcludeRange)(nil)).Elem()
}

func (o GetServerExcludeRangeOutput) ToGetServerExcludeRangeOutput() GetServerExcludeRangeOutput {
	return o
}

func (o GetServerExcludeRangeOutput) ToGetServerExcludeRangeOutputWithContext(ctx context.Context) GetServerExcludeRangeOutput {
	return o
}

// End of IP range.
func (o GetServerExcludeRangeOutput) EndIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerExcludeRange) string { return v.EndIp }).(pulumi.StringOutput)
}

// ID.
func (o GetServerExcludeRangeOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerExcludeRange) int { return v.Id }).(pulumi.IntOutput)
}

// Lease time in seconds, 0 means default lease time.
func (o GetServerExcludeRangeOutput) LeaseTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerExcludeRange) int { return v.LeaseTime }).(pulumi.IntOutput)
}

// Start of IP range.
func (o GetServerExcludeRangeOutput) StartIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerExcludeRange) string { return v.StartIp }).(pulumi.StringOutput)
}

// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range.
func (o GetServerExcludeRangeOutput) UciMatch() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerExcludeRange) string { return v.UciMatch }).(pulumi.StringOutput)
}

// UCI strings.
func (o GetServerExcludeRangeOutput) UciStrings() GetServerExcludeRangeUciStringArrayOutput {
	return o.ApplyT(func(v GetServerExcludeRange) []GetServerExcludeRangeUciString { return v.UciStrings }).(GetServerExcludeRangeUciStringArrayOutput)
}

// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range.
func (o GetServerExcludeRangeOutput) VciMatch() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerExcludeRange) string { return v.VciMatch }).(pulumi.StringOutput)
}

// VCI strings.
func (o GetServerExcludeRangeOutput) VciStrings() GetServerExcludeRangeVciStringArrayOutput {
	return o.ApplyT(func(v GetServerExcludeRange) []GetServerExcludeRangeVciString { return v.VciStrings }).(GetServerExcludeRangeVciStringArrayOutput)
}

type GetServerExcludeRangeArrayOutput struct{ *pulumi.OutputState }

func (GetServerExcludeRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerExcludeRange)(nil)).Elem()
}

func (o GetServerExcludeRangeArrayOutput) ToGetServerExcludeRangeArrayOutput() GetServerExcludeRangeArrayOutput {
	return o
}

func (o GetServerExcludeRangeArrayOutput) ToGetServerExcludeRangeArrayOutputWithContext(ctx context.Context) GetServerExcludeRangeArrayOutput {
	return o
}

func (o GetServerExcludeRangeArrayOutput) Index(i pulumi.IntInput) GetServerExcludeRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerExcludeRange {
		return vs[0].([]GetServerExcludeRange)[vs[1].(int)]
	}).(GetServerExcludeRangeOutput)
}

type GetServerExcludeRangeUciString struct {
	// UCI strings.
	UciString string `pulumi:"uciString"`
}

// GetServerExcludeRangeUciStringInput is an input type that accepts GetServerExcludeRangeUciStringArgs and GetServerExcludeRangeUciStringOutput values.
// You can construct a concrete instance of `GetServerExcludeRangeUciStringInput` via:
//
//	GetServerExcludeRangeUciStringArgs{...}
type GetServerExcludeRangeUciStringInput interface {
	pulumi.Input

	ToGetServerExcludeRangeUciStringOutput() GetServerExcludeRangeUciStringOutput
	ToGetServerExcludeRangeUciStringOutputWithContext(context.Context) GetServerExcludeRangeUciStringOutput
}

type GetServerExcludeRangeUciStringArgs struct {
	// UCI strings.
	UciString pulumi.StringInput `pulumi:"uciString"`
}

func (GetServerExcludeRangeUciStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerExcludeRangeUciString)(nil)).Elem()
}

func (i GetServerExcludeRangeUciStringArgs) ToGetServerExcludeRangeUciStringOutput() GetServerExcludeRangeUciStringOutput {
	return i.ToGetServerExcludeRangeUciStringOutputWithContext(context.Background())
}

func (i GetServerExcludeRangeUciStringArgs) ToGetServerExcludeRangeUciStringOutputWithContext(ctx context.Context) GetServerExcludeRangeUciStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerExcludeRangeUciStringOutput)
}

// GetServerExcludeRangeUciStringArrayInput is an input type that accepts GetServerExcludeRangeUciStringArray and GetServerExcludeRangeUciStringArrayOutput values.
// You can construct a concrete instance of `GetServerExcludeRangeUciStringArrayInput` via:
//
//	GetServerExcludeRangeUciStringArray{ GetServerExcludeRangeUciStringArgs{...} }
type GetServerExcludeRangeUciStringArrayInput interface {
	pulumi.Input

	ToGetServerExcludeRangeUciStringArrayOutput() GetServerExcludeRangeUciStringArrayOutput
	ToGetServerExcludeRangeUciStringArrayOutputWithContext(context.Context) GetServerExcludeRangeUciStringArrayOutput
}

type GetServerExcludeRangeUciStringArray []GetServerExcludeRangeUciStringInput

func (GetServerExcludeRangeUciStringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerExcludeRangeUciString)(nil)).Elem()
}

func (i GetServerExcludeRangeUciStringArray) ToGetServerExcludeRangeUciStringArrayOutput() GetServerExcludeRangeUciStringArrayOutput {
	return i.ToGetServerExcludeRangeUciStringArrayOutputWithContext(context.Background())
}

func (i GetServerExcludeRangeUciStringArray) ToGetServerExcludeRangeUciStringArrayOutputWithContext(ctx context.Context) GetServerExcludeRangeUciStringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerExcludeRangeUciStringArrayOutput)
}

type GetServerExcludeRangeUciStringOutput struct{ *pulumi.OutputState }

func (GetServerExcludeRangeUciStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerExcludeRangeUciString)(nil)).Elem()
}

func (o GetServerExcludeRangeUciStringOutput) ToGetServerExcludeRangeUciStringOutput() GetServerExcludeRangeUciStringOutput {
	return o
}

func (o GetServerExcludeRangeUciStringOutput) ToGetServerExcludeRangeUciStringOutputWithContext(ctx context.Context) GetServerExcludeRangeUciStringOutput {
	return o
}

// UCI strings.
func (o GetServerExcludeRangeUciStringOutput) UciString() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerExcludeRangeUciString) string { return v.UciString }).(pulumi.StringOutput)
}

type GetServerExcludeRangeUciStringArrayOutput struct{ *pulumi.OutputState }

func (GetServerExcludeRangeUciStringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerExcludeRangeUciString)(nil)).Elem()
}

func (o GetServerExcludeRangeUciStringArrayOutput) ToGetServerExcludeRangeUciStringArrayOutput() GetServerExcludeRangeUciStringArrayOutput {
	return o
}

func (o GetServerExcludeRangeUciStringArrayOutput) ToGetServerExcludeRangeUciStringArrayOutputWithContext(ctx context.Context) GetServerExcludeRangeUciStringArrayOutput {
	return o
}

func (o GetServerExcludeRangeUciStringArrayOutput) Index(i pulumi.IntInput) GetServerExcludeRangeUciStringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerExcludeRangeUciString {
		return vs[0].([]GetServerExcludeRangeUciString)[vs[1].(int)]
	}).(GetServerExcludeRangeUciStringOutput)
}

type GetServerExcludeRangeVciString struct {
	// VCI strings.
	VciString string `pulumi:"vciString"`
}

// GetServerExcludeRangeVciStringInput is an input type that accepts GetServerExcludeRangeVciStringArgs and GetServerExcludeRangeVciStringOutput values.
// You can construct a concrete instance of `GetServerExcludeRangeVciStringInput` via:
//
//	GetServerExcludeRangeVciStringArgs{...}
type GetServerExcludeRangeVciStringInput interface {
	pulumi.Input

	ToGetServerExcludeRangeVciStringOutput() GetServerExcludeRangeVciStringOutput
	ToGetServerExcludeRangeVciStringOutputWithContext(context.Context) GetServerExcludeRangeVciStringOutput
}

type GetServerExcludeRangeVciStringArgs struct {
	// VCI strings.
	VciString pulumi.StringInput `pulumi:"vciString"`
}

func (GetServerExcludeRangeVciStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerExcludeRangeVciString)(nil)).Elem()
}

func (i GetServerExcludeRangeVciStringArgs) ToGetServerExcludeRangeVciStringOutput() GetServerExcludeRangeVciStringOutput {
	return i.ToGetServerExcludeRangeVciStringOutputWithContext(context.Background())
}

func (i GetServerExcludeRangeVciStringArgs) ToGetServerExcludeRangeVciStringOutputWithContext(ctx context.Context) GetServerExcludeRangeVciStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerExcludeRangeVciStringOutput)
}

// GetServerExcludeRangeVciStringArrayInput is an input type that accepts GetServerExcludeRangeVciStringArray and GetServerExcludeRangeVciStringArrayOutput values.
// You can construct a concrete instance of `GetServerExcludeRangeVciStringArrayInput` via:
//
//	GetServerExcludeRangeVciStringArray{ GetServerExcludeRangeVciStringArgs{...} }
type GetServerExcludeRangeVciStringArrayInput interface {
	pulumi.Input

	ToGetServerExcludeRangeVciStringArrayOutput() GetServerExcludeRangeVciStringArrayOutput
	ToGetServerExcludeRangeVciStringArrayOutputWithContext(context.Context) GetServerExcludeRangeVciStringArrayOutput
}

type GetServerExcludeRangeVciStringArray []GetServerExcludeRangeVciStringInput

func (GetServerExcludeRangeVciStringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerExcludeRangeVciString)(nil)).Elem()
}

func (i GetServerExcludeRangeVciStringArray) ToGetServerExcludeRangeVciStringArrayOutput() GetServerExcludeRangeVciStringArrayOutput {
	return i.ToGetServerExcludeRangeVciStringArrayOutputWithContext(context.Background())
}

func (i GetServerExcludeRangeVciStringArray) ToGetServerExcludeRangeVciStringArrayOutputWithContext(ctx context.Context) GetServerExcludeRangeVciStringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerExcludeRangeVciStringArrayOutput)
}

type GetServerExcludeRangeVciStringOutput struct{ *pulumi.OutputState }

func (GetServerExcludeRangeVciStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerExcludeRangeVciString)(nil)).Elem()
}

func (o GetServerExcludeRangeVciStringOutput) ToGetServerExcludeRangeVciStringOutput() GetServerExcludeRangeVciStringOutput {
	return o
}

func (o GetServerExcludeRangeVciStringOutput) ToGetServerExcludeRangeVciStringOutputWithContext(ctx context.Context) GetServerExcludeRangeVciStringOutput {
	return o
}

// VCI strings.
func (o GetServerExcludeRangeVciStringOutput) VciString() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerExcludeRangeVciString) string { return v.VciString }).(pulumi.StringOutput)
}

type GetServerExcludeRangeVciStringArrayOutput struct{ *pulumi.OutputState }

func (GetServerExcludeRangeVciStringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerExcludeRangeVciString)(nil)).Elem()
}

func (o GetServerExcludeRangeVciStringArrayOutput) ToGetServerExcludeRangeVciStringArrayOutput() GetServerExcludeRangeVciStringArrayOutput {
	return o
}

func (o GetServerExcludeRangeVciStringArrayOutput) ToGetServerExcludeRangeVciStringArrayOutputWithContext(ctx context.Context) GetServerExcludeRangeVciStringArrayOutput {
	return o
}

func (o GetServerExcludeRangeVciStringArrayOutput) Index(i pulumi.IntInput) GetServerExcludeRangeVciStringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerExcludeRangeVciString {
		return vs[0].([]GetServerExcludeRangeVciString)[vs[1].(int)]
	}).(GetServerExcludeRangeVciStringOutput)
}

type GetServerIpRange struct {
	// End of IP range.
	EndIp string `pulumi:"endIp"`
	// ID.
	Id int `pulumi:"id"`
	// Lease time in seconds, 0 means default lease time.
	LeaseTime int `pulumi:"leaseTime"`
	// Start of IP range.
	StartIp string `pulumi:"startIp"`
	// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range.
	UciMatch string `pulumi:"uciMatch"`
	// UCI strings.
	UciStrings []GetServerIpRangeUciString `pulumi:"uciStrings"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range.
	VciMatch string `pulumi:"vciMatch"`
	// VCI strings.
	VciStrings []GetServerIpRangeVciString `pulumi:"vciStrings"`
}

// GetServerIpRangeInput is an input type that accepts GetServerIpRangeArgs and GetServerIpRangeOutput values.
// You can construct a concrete instance of `GetServerIpRangeInput` via:
//
//	GetServerIpRangeArgs{...}
type GetServerIpRangeInput interface {
	pulumi.Input

	ToGetServerIpRangeOutput() GetServerIpRangeOutput
	ToGetServerIpRangeOutputWithContext(context.Context) GetServerIpRangeOutput
}

type GetServerIpRangeArgs struct {
	// End of IP range.
	EndIp pulumi.StringInput `pulumi:"endIp"`
	// ID.
	Id pulumi.IntInput `pulumi:"id"`
	// Lease time in seconds, 0 means default lease time.
	LeaseTime pulumi.IntInput `pulumi:"leaseTime"`
	// Start of IP range.
	StartIp pulumi.StringInput `pulumi:"startIp"`
	// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range.
	UciMatch pulumi.StringInput `pulumi:"uciMatch"`
	// UCI strings.
	UciStrings GetServerIpRangeUciStringArrayInput `pulumi:"uciStrings"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range.
	VciMatch pulumi.StringInput `pulumi:"vciMatch"`
	// VCI strings.
	VciStrings GetServerIpRangeVciStringArrayInput `pulumi:"vciStrings"`
}

func (GetServerIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIpRange)(nil)).Elem()
}

func (i GetServerIpRangeArgs) ToGetServerIpRangeOutput() GetServerIpRangeOutput {
	return i.ToGetServerIpRangeOutputWithContext(context.Background())
}

func (i GetServerIpRangeArgs) ToGetServerIpRangeOutputWithContext(ctx context.Context) GetServerIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIpRangeOutput)
}

// GetServerIpRangeArrayInput is an input type that accepts GetServerIpRangeArray and GetServerIpRangeArrayOutput values.
// You can construct a concrete instance of `GetServerIpRangeArrayInput` via:
//
//	GetServerIpRangeArray{ GetServerIpRangeArgs{...} }
type GetServerIpRangeArrayInput interface {
	pulumi.Input

	ToGetServerIpRangeArrayOutput() GetServerIpRangeArrayOutput
	ToGetServerIpRangeArrayOutputWithContext(context.Context) GetServerIpRangeArrayOutput
}

type GetServerIpRangeArray []GetServerIpRangeInput

func (GetServerIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIpRange)(nil)).Elem()
}

func (i GetServerIpRangeArray) ToGetServerIpRangeArrayOutput() GetServerIpRangeArrayOutput {
	return i.ToGetServerIpRangeArrayOutputWithContext(context.Background())
}

func (i GetServerIpRangeArray) ToGetServerIpRangeArrayOutputWithContext(ctx context.Context) GetServerIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIpRangeArrayOutput)
}

type GetServerIpRangeOutput struct{ *pulumi.OutputState }

func (GetServerIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIpRange)(nil)).Elem()
}

func (o GetServerIpRangeOutput) ToGetServerIpRangeOutput() GetServerIpRangeOutput {
	return o
}

func (o GetServerIpRangeOutput) ToGetServerIpRangeOutputWithContext(ctx context.Context) GetServerIpRangeOutput {
	return o
}

// End of IP range.
func (o GetServerIpRangeOutput) EndIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIpRange) string { return v.EndIp }).(pulumi.StringOutput)
}

// ID.
func (o GetServerIpRangeOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerIpRange) int { return v.Id }).(pulumi.IntOutput)
}

// Lease time in seconds, 0 means default lease time.
func (o GetServerIpRangeOutput) LeaseTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerIpRange) int { return v.LeaseTime }).(pulumi.IntOutput)
}

// Start of IP range.
func (o GetServerIpRangeOutput) StartIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIpRange) string { return v.StartIp }).(pulumi.StringOutput)
}

// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range.
func (o GetServerIpRangeOutput) UciMatch() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIpRange) string { return v.UciMatch }).(pulumi.StringOutput)
}

// UCI strings.
func (o GetServerIpRangeOutput) UciStrings() GetServerIpRangeUciStringArrayOutput {
	return o.ApplyT(func(v GetServerIpRange) []GetServerIpRangeUciString { return v.UciStrings }).(GetServerIpRangeUciStringArrayOutput)
}

// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range.
func (o GetServerIpRangeOutput) VciMatch() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIpRange) string { return v.VciMatch }).(pulumi.StringOutput)
}

// VCI strings.
func (o GetServerIpRangeOutput) VciStrings() GetServerIpRangeVciStringArrayOutput {
	return o.ApplyT(func(v GetServerIpRange) []GetServerIpRangeVciString { return v.VciStrings }).(GetServerIpRangeVciStringArrayOutput)
}

type GetServerIpRangeArrayOutput struct{ *pulumi.OutputState }

func (GetServerIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIpRange)(nil)).Elem()
}

func (o GetServerIpRangeArrayOutput) ToGetServerIpRangeArrayOutput() GetServerIpRangeArrayOutput {
	return o
}

func (o GetServerIpRangeArrayOutput) ToGetServerIpRangeArrayOutputWithContext(ctx context.Context) GetServerIpRangeArrayOutput {
	return o
}

func (o GetServerIpRangeArrayOutput) Index(i pulumi.IntInput) GetServerIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerIpRange {
		return vs[0].([]GetServerIpRange)[vs[1].(int)]
	}).(GetServerIpRangeOutput)
}

type GetServerIpRangeUciString struct {
	// UCI strings.
	UciString string `pulumi:"uciString"`
}

// GetServerIpRangeUciStringInput is an input type that accepts GetServerIpRangeUciStringArgs and GetServerIpRangeUciStringOutput values.
// You can construct a concrete instance of `GetServerIpRangeUciStringInput` via:
//
//	GetServerIpRangeUciStringArgs{...}
type GetServerIpRangeUciStringInput interface {
	pulumi.Input

	ToGetServerIpRangeUciStringOutput() GetServerIpRangeUciStringOutput
	ToGetServerIpRangeUciStringOutputWithContext(context.Context) GetServerIpRangeUciStringOutput
}

type GetServerIpRangeUciStringArgs struct {
	// UCI strings.
	UciString pulumi.StringInput `pulumi:"uciString"`
}

func (GetServerIpRangeUciStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIpRangeUciString)(nil)).Elem()
}

func (i GetServerIpRangeUciStringArgs) ToGetServerIpRangeUciStringOutput() GetServerIpRangeUciStringOutput {
	return i.ToGetServerIpRangeUciStringOutputWithContext(context.Background())
}

func (i GetServerIpRangeUciStringArgs) ToGetServerIpRangeUciStringOutputWithContext(ctx context.Context) GetServerIpRangeUciStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIpRangeUciStringOutput)
}

// GetServerIpRangeUciStringArrayInput is an input type that accepts GetServerIpRangeUciStringArray and GetServerIpRangeUciStringArrayOutput values.
// You can construct a concrete instance of `GetServerIpRangeUciStringArrayInput` via:
//
//	GetServerIpRangeUciStringArray{ GetServerIpRangeUciStringArgs{...} }
type GetServerIpRangeUciStringArrayInput interface {
	pulumi.Input

	ToGetServerIpRangeUciStringArrayOutput() GetServerIpRangeUciStringArrayOutput
	ToGetServerIpRangeUciStringArrayOutputWithContext(context.Context) GetServerIpRangeUciStringArrayOutput
}

type GetServerIpRangeUciStringArray []GetServerIpRangeUciStringInput

func (GetServerIpRangeUciStringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIpRangeUciString)(nil)).Elem()
}

func (i GetServerIpRangeUciStringArray) ToGetServerIpRangeUciStringArrayOutput() GetServerIpRangeUciStringArrayOutput {
	return i.ToGetServerIpRangeUciStringArrayOutputWithContext(context.Background())
}

func (i GetServerIpRangeUciStringArray) ToGetServerIpRangeUciStringArrayOutputWithContext(ctx context.Context) GetServerIpRangeUciStringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIpRangeUciStringArrayOutput)
}

type GetServerIpRangeUciStringOutput struct{ *pulumi.OutputState }

func (GetServerIpRangeUciStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIpRangeUciString)(nil)).Elem()
}

func (o GetServerIpRangeUciStringOutput) ToGetServerIpRangeUciStringOutput() GetServerIpRangeUciStringOutput {
	return o
}

func (o GetServerIpRangeUciStringOutput) ToGetServerIpRangeUciStringOutputWithContext(ctx context.Context) GetServerIpRangeUciStringOutput {
	return o
}

// UCI strings.
func (o GetServerIpRangeUciStringOutput) UciString() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIpRangeUciString) string { return v.UciString }).(pulumi.StringOutput)
}

type GetServerIpRangeUciStringArrayOutput struct{ *pulumi.OutputState }

func (GetServerIpRangeUciStringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIpRangeUciString)(nil)).Elem()
}

func (o GetServerIpRangeUciStringArrayOutput) ToGetServerIpRangeUciStringArrayOutput() GetServerIpRangeUciStringArrayOutput {
	return o
}

func (o GetServerIpRangeUciStringArrayOutput) ToGetServerIpRangeUciStringArrayOutputWithContext(ctx context.Context) GetServerIpRangeUciStringArrayOutput {
	return o
}

func (o GetServerIpRangeUciStringArrayOutput) Index(i pulumi.IntInput) GetServerIpRangeUciStringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerIpRangeUciString {
		return vs[0].([]GetServerIpRangeUciString)[vs[1].(int)]
	}).(GetServerIpRangeUciStringOutput)
}

type GetServerIpRangeVciString struct {
	// VCI strings.
	VciString string `pulumi:"vciString"`
}

// GetServerIpRangeVciStringInput is an input type that accepts GetServerIpRangeVciStringArgs and GetServerIpRangeVciStringOutput values.
// You can construct a concrete instance of `GetServerIpRangeVciStringInput` via:
//
//	GetServerIpRangeVciStringArgs{...}
type GetServerIpRangeVciStringInput interface {
	pulumi.Input

	ToGetServerIpRangeVciStringOutput() GetServerIpRangeVciStringOutput
	ToGetServerIpRangeVciStringOutputWithContext(context.Context) GetServerIpRangeVciStringOutput
}

type GetServerIpRangeVciStringArgs struct {
	// VCI strings.
	VciString pulumi.StringInput `pulumi:"vciString"`
}

func (GetServerIpRangeVciStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIpRangeVciString)(nil)).Elem()
}

func (i GetServerIpRangeVciStringArgs) ToGetServerIpRangeVciStringOutput() GetServerIpRangeVciStringOutput {
	return i.ToGetServerIpRangeVciStringOutputWithContext(context.Background())
}

func (i GetServerIpRangeVciStringArgs) ToGetServerIpRangeVciStringOutputWithContext(ctx context.Context) GetServerIpRangeVciStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIpRangeVciStringOutput)
}

// GetServerIpRangeVciStringArrayInput is an input type that accepts GetServerIpRangeVciStringArray and GetServerIpRangeVciStringArrayOutput values.
// You can construct a concrete instance of `GetServerIpRangeVciStringArrayInput` via:
//
//	GetServerIpRangeVciStringArray{ GetServerIpRangeVciStringArgs{...} }
type GetServerIpRangeVciStringArrayInput interface {
	pulumi.Input

	ToGetServerIpRangeVciStringArrayOutput() GetServerIpRangeVciStringArrayOutput
	ToGetServerIpRangeVciStringArrayOutputWithContext(context.Context) GetServerIpRangeVciStringArrayOutput
}

type GetServerIpRangeVciStringArray []GetServerIpRangeVciStringInput

func (GetServerIpRangeVciStringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIpRangeVciString)(nil)).Elem()
}

func (i GetServerIpRangeVciStringArray) ToGetServerIpRangeVciStringArrayOutput() GetServerIpRangeVciStringArrayOutput {
	return i.ToGetServerIpRangeVciStringArrayOutputWithContext(context.Background())
}

func (i GetServerIpRangeVciStringArray) ToGetServerIpRangeVciStringArrayOutputWithContext(ctx context.Context) GetServerIpRangeVciStringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIpRangeVciStringArrayOutput)
}

type GetServerIpRangeVciStringOutput struct{ *pulumi.OutputState }

func (GetServerIpRangeVciStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIpRangeVciString)(nil)).Elem()
}

func (o GetServerIpRangeVciStringOutput) ToGetServerIpRangeVciStringOutput() GetServerIpRangeVciStringOutput {
	return o
}

func (o GetServerIpRangeVciStringOutput) ToGetServerIpRangeVciStringOutputWithContext(ctx context.Context) GetServerIpRangeVciStringOutput {
	return o
}

// VCI strings.
func (o GetServerIpRangeVciStringOutput) VciString() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIpRangeVciString) string { return v.VciString }).(pulumi.StringOutput)
}

type GetServerIpRangeVciStringArrayOutput struct{ *pulumi.OutputState }

func (GetServerIpRangeVciStringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIpRangeVciString)(nil)).Elem()
}

func (o GetServerIpRangeVciStringArrayOutput) ToGetServerIpRangeVciStringArrayOutput() GetServerIpRangeVciStringArrayOutput {
	return o
}

func (o GetServerIpRangeVciStringArrayOutput) ToGetServerIpRangeVciStringArrayOutputWithContext(ctx context.Context) GetServerIpRangeVciStringArrayOutput {
	return o
}

func (o GetServerIpRangeVciStringArrayOutput) Index(i pulumi.IntInput) GetServerIpRangeVciStringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerIpRangeVciString {
		return vs[0].([]GetServerIpRangeVciString)[vs[1].(int)]
	}).(GetServerIpRangeVciStringOutput)
}

type GetServerOption struct {
	// DHCP option code.
	Code int `pulumi:"code"`
	// ID.
	Id int `pulumi:"id"`
	// IP address to be reserved for the MAC address.
	Ip string `pulumi:"ip"`
	// DHCP reserved-address type.
	Type string `pulumi:"type"`
	// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range.
	UciMatch string `pulumi:"uciMatch"`
	// UCI strings.
	UciStrings []GetServerOptionUciString `pulumi:"uciStrings"`
	// DHCP option value.
	Value string `pulumi:"value"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range.
	VciMatch string `pulumi:"vciMatch"`
	// VCI strings.
	VciStrings []GetServerOptionVciString `pulumi:"vciStrings"`
}

// GetServerOptionInput is an input type that accepts GetServerOptionArgs and GetServerOptionOutput values.
// You can construct a concrete instance of `GetServerOptionInput` via:
//
//	GetServerOptionArgs{...}
type GetServerOptionInput interface {
	pulumi.Input

	ToGetServerOptionOutput() GetServerOptionOutput
	ToGetServerOptionOutputWithContext(context.Context) GetServerOptionOutput
}

type GetServerOptionArgs struct {
	// DHCP option code.
	Code pulumi.IntInput `pulumi:"code"`
	// ID.
	Id pulumi.IntInput `pulumi:"id"`
	// IP address to be reserved for the MAC address.
	Ip pulumi.StringInput `pulumi:"ip"`
	// DHCP reserved-address type.
	Type pulumi.StringInput `pulumi:"type"`
	// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range.
	UciMatch pulumi.StringInput `pulumi:"uciMatch"`
	// UCI strings.
	UciStrings GetServerOptionUciStringArrayInput `pulumi:"uciStrings"`
	// DHCP option value.
	Value pulumi.StringInput `pulumi:"value"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range.
	VciMatch pulumi.StringInput `pulumi:"vciMatch"`
	// VCI strings.
	VciStrings GetServerOptionVciStringArrayInput `pulumi:"vciStrings"`
}

func (GetServerOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerOption)(nil)).Elem()
}

func (i GetServerOptionArgs) ToGetServerOptionOutput() GetServerOptionOutput {
	return i.ToGetServerOptionOutputWithContext(context.Background())
}

func (i GetServerOptionArgs) ToGetServerOptionOutputWithContext(ctx context.Context) GetServerOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerOptionOutput)
}

// GetServerOptionArrayInput is an input type that accepts GetServerOptionArray and GetServerOptionArrayOutput values.
// You can construct a concrete instance of `GetServerOptionArrayInput` via:
//
//	GetServerOptionArray{ GetServerOptionArgs{...} }
type GetServerOptionArrayInput interface {
	pulumi.Input

	ToGetServerOptionArrayOutput() GetServerOptionArrayOutput
	ToGetServerOptionArrayOutputWithContext(context.Context) GetServerOptionArrayOutput
}

type GetServerOptionArray []GetServerOptionInput

func (GetServerOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerOption)(nil)).Elem()
}

func (i GetServerOptionArray) ToGetServerOptionArrayOutput() GetServerOptionArrayOutput {
	return i.ToGetServerOptionArrayOutputWithContext(context.Background())
}

func (i GetServerOptionArray) ToGetServerOptionArrayOutputWithContext(ctx context.Context) GetServerOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerOptionArrayOutput)
}

type GetServerOptionOutput struct{ *pulumi.OutputState }

func (GetServerOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerOption)(nil)).Elem()
}

func (o GetServerOptionOutput) ToGetServerOptionOutput() GetServerOptionOutput {
	return o
}

func (o GetServerOptionOutput) ToGetServerOptionOutputWithContext(ctx context.Context) GetServerOptionOutput {
	return o
}

// DHCP option code.
func (o GetServerOptionOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerOption) int { return v.Code }).(pulumi.IntOutput)
}

// ID.
func (o GetServerOptionOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerOption) int { return v.Id }).(pulumi.IntOutput)
}

// IP address to be reserved for the MAC address.
func (o GetServerOptionOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerOption) string { return v.Ip }).(pulumi.StringOutput)
}

// DHCP reserved-address type.
func (o GetServerOptionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerOption) string { return v.Type }).(pulumi.StringOutput)
}

// Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range.
func (o GetServerOptionOutput) UciMatch() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerOption) string { return v.UciMatch }).(pulumi.StringOutput)
}

// UCI strings.
func (o GetServerOptionOutput) UciStrings() GetServerOptionUciStringArrayOutput {
	return o.ApplyT(func(v GetServerOption) []GetServerOptionUciString { return v.UciStrings }).(GetServerOptionUciStringArrayOutput)
}

// DHCP option value.
func (o GetServerOptionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerOption) string { return v.Value }).(pulumi.StringOutput)
}

// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range.
func (o GetServerOptionOutput) VciMatch() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerOption) string { return v.VciMatch }).(pulumi.StringOutput)
}

// VCI strings.
func (o GetServerOptionOutput) VciStrings() GetServerOptionVciStringArrayOutput {
	return o.ApplyT(func(v GetServerOption) []GetServerOptionVciString { return v.VciStrings }).(GetServerOptionVciStringArrayOutput)
}

type GetServerOptionArrayOutput struct{ *pulumi.OutputState }

func (GetServerOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerOption)(nil)).Elem()
}

func (o GetServerOptionArrayOutput) ToGetServerOptionArrayOutput() GetServerOptionArrayOutput {
	return o
}

func (o GetServerOptionArrayOutput) ToGetServerOptionArrayOutputWithContext(ctx context.Context) GetServerOptionArrayOutput {
	return o
}

func (o GetServerOptionArrayOutput) Index(i pulumi.IntInput) GetServerOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerOption {
		return vs[0].([]GetServerOption)[vs[1].(int)]
	}).(GetServerOptionOutput)
}

type GetServerOptionUciString struct {
	// UCI strings.
	UciString string `pulumi:"uciString"`
}

// GetServerOptionUciStringInput is an input type that accepts GetServerOptionUciStringArgs and GetServerOptionUciStringOutput values.
// You can construct a concrete instance of `GetServerOptionUciStringInput` via:
//
//	GetServerOptionUciStringArgs{...}
type GetServerOptionUciStringInput interface {
	pulumi.Input

	ToGetServerOptionUciStringOutput() GetServerOptionUciStringOutput
	ToGetServerOptionUciStringOutputWithContext(context.Context) GetServerOptionUciStringOutput
}

type GetServerOptionUciStringArgs struct {
	// UCI strings.
	UciString pulumi.StringInput `pulumi:"uciString"`
}

func (GetServerOptionUciStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerOptionUciString)(nil)).Elem()
}

func (i GetServerOptionUciStringArgs) ToGetServerOptionUciStringOutput() GetServerOptionUciStringOutput {
	return i.ToGetServerOptionUciStringOutputWithContext(context.Background())
}

func (i GetServerOptionUciStringArgs) ToGetServerOptionUciStringOutputWithContext(ctx context.Context) GetServerOptionUciStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerOptionUciStringOutput)
}

// GetServerOptionUciStringArrayInput is an input type that accepts GetServerOptionUciStringArray and GetServerOptionUciStringArrayOutput values.
// You can construct a concrete instance of `GetServerOptionUciStringArrayInput` via:
//
//	GetServerOptionUciStringArray{ GetServerOptionUciStringArgs{...} }
type GetServerOptionUciStringArrayInput interface {
	pulumi.Input

	ToGetServerOptionUciStringArrayOutput() GetServerOptionUciStringArrayOutput
	ToGetServerOptionUciStringArrayOutputWithContext(context.Context) GetServerOptionUciStringArrayOutput
}

type GetServerOptionUciStringArray []GetServerOptionUciStringInput

func (GetServerOptionUciStringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerOptionUciString)(nil)).Elem()
}

func (i GetServerOptionUciStringArray) ToGetServerOptionUciStringArrayOutput() GetServerOptionUciStringArrayOutput {
	return i.ToGetServerOptionUciStringArrayOutputWithContext(context.Background())
}

func (i GetServerOptionUciStringArray) ToGetServerOptionUciStringArrayOutputWithContext(ctx context.Context) GetServerOptionUciStringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerOptionUciStringArrayOutput)
}

type GetServerOptionUciStringOutput struct{ *pulumi.OutputState }

func (GetServerOptionUciStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerOptionUciString)(nil)).Elem()
}

func (o GetServerOptionUciStringOutput) ToGetServerOptionUciStringOutput() GetServerOptionUciStringOutput {
	return o
}

func (o GetServerOptionUciStringOutput) ToGetServerOptionUciStringOutputWithContext(ctx context.Context) GetServerOptionUciStringOutput {
	return o
}

// UCI strings.
func (o GetServerOptionUciStringOutput) UciString() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerOptionUciString) string { return v.UciString }).(pulumi.StringOutput)
}

type GetServerOptionUciStringArrayOutput struct{ *pulumi.OutputState }

func (GetServerOptionUciStringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerOptionUciString)(nil)).Elem()
}

func (o GetServerOptionUciStringArrayOutput) ToGetServerOptionUciStringArrayOutput() GetServerOptionUciStringArrayOutput {
	return o
}

func (o GetServerOptionUciStringArrayOutput) ToGetServerOptionUciStringArrayOutputWithContext(ctx context.Context) GetServerOptionUciStringArrayOutput {
	return o
}

func (o GetServerOptionUciStringArrayOutput) Index(i pulumi.IntInput) GetServerOptionUciStringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerOptionUciString {
		return vs[0].([]GetServerOptionUciString)[vs[1].(int)]
	}).(GetServerOptionUciStringOutput)
}

type GetServerOptionVciString struct {
	// VCI strings.
	VciString string `pulumi:"vciString"`
}

// GetServerOptionVciStringInput is an input type that accepts GetServerOptionVciStringArgs and GetServerOptionVciStringOutput values.
// You can construct a concrete instance of `GetServerOptionVciStringInput` via:
//
//	GetServerOptionVciStringArgs{...}
type GetServerOptionVciStringInput interface {
	pulumi.Input

	ToGetServerOptionVciStringOutput() GetServerOptionVciStringOutput
	ToGetServerOptionVciStringOutputWithContext(context.Context) GetServerOptionVciStringOutput
}

type GetServerOptionVciStringArgs struct {
	// VCI strings.
	VciString pulumi.StringInput `pulumi:"vciString"`
}

func (GetServerOptionVciStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerOptionVciString)(nil)).Elem()
}

func (i GetServerOptionVciStringArgs) ToGetServerOptionVciStringOutput() GetServerOptionVciStringOutput {
	return i.ToGetServerOptionVciStringOutputWithContext(context.Background())
}

func (i GetServerOptionVciStringArgs) ToGetServerOptionVciStringOutputWithContext(ctx context.Context) GetServerOptionVciStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerOptionVciStringOutput)
}

// GetServerOptionVciStringArrayInput is an input type that accepts GetServerOptionVciStringArray and GetServerOptionVciStringArrayOutput values.
// You can construct a concrete instance of `GetServerOptionVciStringArrayInput` via:
//
//	GetServerOptionVciStringArray{ GetServerOptionVciStringArgs{...} }
type GetServerOptionVciStringArrayInput interface {
	pulumi.Input

	ToGetServerOptionVciStringArrayOutput() GetServerOptionVciStringArrayOutput
	ToGetServerOptionVciStringArrayOutputWithContext(context.Context) GetServerOptionVciStringArrayOutput
}

type GetServerOptionVciStringArray []GetServerOptionVciStringInput

func (GetServerOptionVciStringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerOptionVciString)(nil)).Elem()
}

func (i GetServerOptionVciStringArray) ToGetServerOptionVciStringArrayOutput() GetServerOptionVciStringArrayOutput {
	return i.ToGetServerOptionVciStringArrayOutputWithContext(context.Background())
}

func (i GetServerOptionVciStringArray) ToGetServerOptionVciStringArrayOutputWithContext(ctx context.Context) GetServerOptionVciStringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerOptionVciStringArrayOutput)
}

type GetServerOptionVciStringOutput struct{ *pulumi.OutputState }

func (GetServerOptionVciStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerOptionVciString)(nil)).Elem()
}

func (o GetServerOptionVciStringOutput) ToGetServerOptionVciStringOutput() GetServerOptionVciStringOutput {
	return o
}

func (o GetServerOptionVciStringOutput) ToGetServerOptionVciStringOutputWithContext(ctx context.Context) GetServerOptionVciStringOutput {
	return o
}

// VCI strings.
func (o GetServerOptionVciStringOutput) VciString() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerOptionVciString) string { return v.VciString }).(pulumi.StringOutput)
}

type GetServerOptionVciStringArrayOutput struct{ *pulumi.OutputState }

func (GetServerOptionVciStringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerOptionVciString)(nil)).Elem()
}

func (o GetServerOptionVciStringArrayOutput) ToGetServerOptionVciStringArrayOutput() GetServerOptionVciStringArrayOutput {
	return o
}

func (o GetServerOptionVciStringArrayOutput) ToGetServerOptionVciStringArrayOutputWithContext(ctx context.Context) GetServerOptionVciStringArrayOutput {
	return o
}

func (o GetServerOptionVciStringArrayOutput) Index(i pulumi.IntInput) GetServerOptionVciStringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerOptionVciString {
		return vs[0].([]GetServerOptionVciString)[vs[1].(int)]
	}).(GetServerOptionVciStringOutput)
}

type GetServerReservedAddress struct {
	// Options for the DHCP server to configure the client with the reserved MAC address.
	Action string `pulumi:"action"`
	// Option 82 circuit-ID of the client that will get the reserved IP address.
	CircuitId string `pulumi:"circuitId"`
	// DHCP option type.
	CircuitIdType string `pulumi:"circuitIdType"`
	// Description.
	Description string `pulumi:"description"`
	// ID.
	Id int `pulumi:"id"`
	// IP address to be reserved for the MAC address.
	Ip string `pulumi:"ip"`
	// MAC address of the client that will get the reserved IP address.
	Mac string `pulumi:"mac"`
	// Option 82 remote-ID of the client that will get the reserved IP address.
	RemoteId string `pulumi:"remoteId"`
	// DHCP option type.
	RemoteIdType string `pulumi:"remoteIdType"`
	// DHCP reserved-address type.
	Type string `pulumi:"type"`
}

// GetServerReservedAddressInput is an input type that accepts GetServerReservedAddressArgs and GetServerReservedAddressOutput values.
// You can construct a concrete instance of `GetServerReservedAddressInput` via:
//
//	GetServerReservedAddressArgs{...}
type GetServerReservedAddressInput interface {
	pulumi.Input

	ToGetServerReservedAddressOutput() GetServerReservedAddressOutput
	ToGetServerReservedAddressOutputWithContext(context.Context) GetServerReservedAddressOutput
}

type GetServerReservedAddressArgs struct {
	// Options for the DHCP server to configure the client with the reserved MAC address.
	Action pulumi.StringInput `pulumi:"action"`
	// Option 82 circuit-ID of the client that will get the reserved IP address.
	CircuitId pulumi.StringInput `pulumi:"circuitId"`
	// DHCP option type.
	CircuitIdType pulumi.StringInput `pulumi:"circuitIdType"`
	// Description.
	Description pulumi.StringInput `pulumi:"description"`
	// ID.
	Id pulumi.IntInput `pulumi:"id"`
	// IP address to be reserved for the MAC address.
	Ip pulumi.StringInput `pulumi:"ip"`
	// MAC address of the client that will get the reserved IP address.
	Mac pulumi.StringInput `pulumi:"mac"`
	// Option 82 remote-ID of the client that will get the reserved IP address.
	RemoteId pulumi.StringInput `pulumi:"remoteId"`
	// DHCP option type.
	RemoteIdType pulumi.StringInput `pulumi:"remoteIdType"`
	// DHCP reserved-address type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetServerReservedAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerReservedAddress)(nil)).Elem()
}

func (i GetServerReservedAddressArgs) ToGetServerReservedAddressOutput() GetServerReservedAddressOutput {
	return i.ToGetServerReservedAddressOutputWithContext(context.Background())
}

func (i GetServerReservedAddressArgs) ToGetServerReservedAddressOutputWithContext(ctx context.Context) GetServerReservedAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerReservedAddressOutput)
}

// GetServerReservedAddressArrayInput is an input type that accepts GetServerReservedAddressArray and GetServerReservedAddressArrayOutput values.
// You can construct a concrete instance of `GetServerReservedAddressArrayInput` via:
//
//	GetServerReservedAddressArray{ GetServerReservedAddressArgs{...} }
type GetServerReservedAddressArrayInput interface {
	pulumi.Input

	ToGetServerReservedAddressArrayOutput() GetServerReservedAddressArrayOutput
	ToGetServerReservedAddressArrayOutputWithContext(context.Context) GetServerReservedAddressArrayOutput
}

type GetServerReservedAddressArray []GetServerReservedAddressInput

func (GetServerReservedAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerReservedAddress)(nil)).Elem()
}

func (i GetServerReservedAddressArray) ToGetServerReservedAddressArrayOutput() GetServerReservedAddressArrayOutput {
	return i.ToGetServerReservedAddressArrayOutputWithContext(context.Background())
}

func (i GetServerReservedAddressArray) ToGetServerReservedAddressArrayOutputWithContext(ctx context.Context) GetServerReservedAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerReservedAddressArrayOutput)
}

type GetServerReservedAddressOutput struct{ *pulumi.OutputState }

func (GetServerReservedAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerReservedAddress)(nil)).Elem()
}

func (o GetServerReservedAddressOutput) ToGetServerReservedAddressOutput() GetServerReservedAddressOutput {
	return o
}

func (o GetServerReservedAddressOutput) ToGetServerReservedAddressOutputWithContext(ctx context.Context) GetServerReservedAddressOutput {
	return o
}

// Options for the DHCP server to configure the client with the reserved MAC address.
func (o GetServerReservedAddressOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerReservedAddress) string { return v.Action }).(pulumi.StringOutput)
}

// Option 82 circuit-ID of the client that will get the reserved IP address.
func (o GetServerReservedAddressOutput) CircuitId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerReservedAddress) string { return v.CircuitId }).(pulumi.StringOutput)
}

// DHCP option type.
func (o GetServerReservedAddressOutput) CircuitIdType() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerReservedAddress) string { return v.CircuitIdType }).(pulumi.StringOutput)
}

// Description.
func (o GetServerReservedAddressOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerReservedAddress) string { return v.Description }).(pulumi.StringOutput)
}

// ID.
func (o GetServerReservedAddressOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerReservedAddress) int { return v.Id }).(pulumi.IntOutput)
}

// IP address to be reserved for the MAC address.
func (o GetServerReservedAddressOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerReservedAddress) string { return v.Ip }).(pulumi.StringOutput)
}

// MAC address of the client that will get the reserved IP address.
func (o GetServerReservedAddressOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerReservedAddress) string { return v.Mac }).(pulumi.StringOutput)
}

// Option 82 remote-ID of the client that will get the reserved IP address.
func (o GetServerReservedAddressOutput) RemoteId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerReservedAddress) string { return v.RemoteId }).(pulumi.StringOutput)
}

// DHCP option type.
func (o GetServerReservedAddressOutput) RemoteIdType() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerReservedAddress) string { return v.RemoteIdType }).(pulumi.StringOutput)
}

// DHCP reserved-address type.
func (o GetServerReservedAddressOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerReservedAddress) string { return v.Type }).(pulumi.StringOutput)
}

type GetServerReservedAddressArrayOutput struct{ *pulumi.OutputState }

func (GetServerReservedAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerReservedAddress)(nil)).Elem()
}

func (o GetServerReservedAddressArrayOutput) ToGetServerReservedAddressArrayOutput() GetServerReservedAddressArrayOutput {
	return o
}

func (o GetServerReservedAddressArrayOutput) ToGetServerReservedAddressArrayOutputWithContext(ctx context.Context) GetServerReservedAddressArrayOutput {
	return o
}

func (o GetServerReservedAddressArrayOutput) Index(i pulumi.IntInput) GetServerReservedAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerReservedAddress {
		return vs[0].([]GetServerReservedAddress)[vs[1].(int)]
	}).(GetServerReservedAddressOutput)
}

type GetServerTftpServer struct {
	// TFTP server.
	TftpServer string `pulumi:"tftpServer"`
}

// GetServerTftpServerInput is an input type that accepts GetServerTftpServerArgs and GetServerTftpServerOutput values.
// You can construct a concrete instance of `GetServerTftpServerInput` via:
//
//	GetServerTftpServerArgs{...}
type GetServerTftpServerInput interface {
	pulumi.Input

	ToGetServerTftpServerOutput() GetServerTftpServerOutput
	ToGetServerTftpServerOutputWithContext(context.Context) GetServerTftpServerOutput
}

type GetServerTftpServerArgs struct {
	// TFTP server.
	TftpServer pulumi.StringInput `pulumi:"tftpServer"`
}

func (GetServerTftpServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerTftpServer)(nil)).Elem()
}

func (i GetServerTftpServerArgs) ToGetServerTftpServerOutput() GetServerTftpServerOutput {
	return i.ToGetServerTftpServerOutputWithContext(context.Background())
}

func (i GetServerTftpServerArgs) ToGetServerTftpServerOutputWithContext(ctx context.Context) GetServerTftpServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerTftpServerOutput)
}

// GetServerTftpServerArrayInput is an input type that accepts GetServerTftpServerArray and GetServerTftpServerArrayOutput values.
// You can construct a concrete instance of `GetServerTftpServerArrayInput` via:
//
//	GetServerTftpServerArray{ GetServerTftpServerArgs{...} }
type GetServerTftpServerArrayInput interface {
	pulumi.Input

	ToGetServerTftpServerArrayOutput() GetServerTftpServerArrayOutput
	ToGetServerTftpServerArrayOutputWithContext(context.Context) GetServerTftpServerArrayOutput
}

type GetServerTftpServerArray []GetServerTftpServerInput

func (GetServerTftpServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerTftpServer)(nil)).Elem()
}

func (i GetServerTftpServerArray) ToGetServerTftpServerArrayOutput() GetServerTftpServerArrayOutput {
	return i.ToGetServerTftpServerArrayOutputWithContext(context.Background())
}

func (i GetServerTftpServerArray) ToGetServerTftpServerArrayOutputWithContext(ctx context.Context) GetServerTftpServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerTftpServerArrayOutput)
}

type GetServerTftpServerOutput struct{ *pulumi.OutputState }

func (GetServerTftpServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerTftpServer)(nil)).Elem()
}

func (o GetServerTftpServerOutput) ToGetServerTftpServerOutput() GetServerTftpServerOutput {
	return o
}

func (o GetServerTftpServerOutput) ToGetServerTftpServerOutputWithContext(ctx context.Context) GetServerTftpServerOutput {
	return o
}

// TFTP server.
func (o GetServerTftpServerOutput) TftpServer() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerTftpServer) string { return v.TftpServer }).(pulumi.StringOutput)
}

type GetServerTftpServerArrayOutput struct{ *pulumi.OutputState }

func (GetServerTftpServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerTftpServer)(nil)).Elem()
}

func (o GetServerTftpServerArrayOutput) ToGetServerTftpServerArrayOutput() GetServerTftpServerArrayOutput {
	return o
}

func (o GetServerTftpServerArrayOutput) ToGetServerTftpServerArrayOutputWithContext(ctx context.Context) GetServerTftpServerArrayOutput {
	return o
}

func (o GetServerTftpServerArrayOutput) Index(i pulumi.IntInput) GetServerTftpServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerTftpServer {
		return vs[0].([]GetServerTftpServer)[vs[1].(int)]
	}).(GetServerTftpServerOutput)
}

type GetServerVciString struct {
	// VCI strings.
	VciString string `pulumi:"vciString"`
}

// GetServerVciStringInput is an input type that accepts GetServerVciStringArgs and GetServerVciStringOutput values.
// You can construct a concrete instance of `GetServerVciStringInput` via:
//
//	GetServerVciStringArgs{...}
type GetServerVciStringInput interface {
	pulumi.Input

	ToGetServerVciStringOutput() GetServerVciStringOutput
	ToGetServerVciStringOutputWithContext(context.Context) GetServerVciStringOutput
}

type GetServerVciStringArgs struct {
	// VCI strings.
	VciString pulumi.StringInput `pulumi:"vciString"`
}

func (GetServerVciStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerVciString)(nil)).Elem()
}

func (i GetServerVciStringArgs) ToGetServerVciStringOutput() GetServerVciStringOutput {
	return i.ToGetServerVciStringOutputWithContext(context.Background())
}

func (i GetServerVciStringArgs) ToGetServerVciStringOutputWithContext(ctx context.Context) GetServerVciStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerVciStringOutput)
}

// GetServerVciStringArrayInput is an input type that accepts GetServerVciStringArray and GetServerVciStringArrayOutput values.
// You can construct a concrete instance of `GetServerVciStringArrayInput` via:
//
//	GetServerVciStringArray{ GetServerVciStringArgs{...} }
type GetServerVciStringArrayInput interface {
	pulumi.Input

	ToGetServerVciStringArrayOutput() GetServerVciStringArrayOutput
	ToGetServerVciStringArrayOutputWithContext(context.Context) GetServerVciStringArrayOutput
}

type GetServerVciStringArray []GetServerVciStringInput

func (GetServerVciStringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerVciString)(nil)).Elem()
}

func (i GetServerVciStringArray) ToGetServerVciStringArrayOutput() GetServerVciStringArrayOutput {
	return i.ToGetServerVciStringArrayOutputWithContext(context.Background())
}

func (i GetServerVciStringArray) ToGetServerVciStringArrayOutputWithContext(ctx context.Context) GetServerVciStringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerVciStringArrayOutput)
}

type GetServerVciStringOutput struct{ *pulumi.OutputState }

func (GetServerVciStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerVciString)(nil)).Elem()
}

func (o GetServerVciStringOutput) ToGetServerVciStringOutput() GetServerVciStringOutput {
	return o
}

func (o GetServerVciStringOutput) ToGetServerVciStringOutputWithContext(ctx context.Context) GetServerVciStringOutput {
	return o
}

// VCI strings.
func (o GetServerVciStringOutput) VciString() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerVciString) string { return v.VciString }).(pulumi.StringOutput)
}

type GetServerVciStringArrayOutput struct{ *pulumi.OutputState }

func (GetServerVciStringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerVciString)(nil)).Elem()
}

func (o GetServerVciStringArrayOutput) ToGetServerVciStringArrayOutput() GetServerVciStringArrayOutput {
	return o
}

func (o GetServerVciStringArrayOutput) ToGetServerVciStringArrayOutputWithContext(ctx context.Context) GetServerVciStringArrayOutput {
	return o
}

func (o GetServerVciStringArrayOutput) Index(i pulumi.IntInput) GetServerVciStringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerVciString {
		return vs[0].([]GetServerVciString)[vs[1].(int)]
	}).(GetServerVciStringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerExcludeRangeInput)(nil)).Elem(), ServerExcludeRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerExcludeRangeArrayInput)(nil)).Elem(), ServerExcludeRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerExcludeRangeUciStringInput)(nil)).Elem(), ServerExcludeRangeUciStringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerExcludeRangeUciStringArrayInput)(nil)).Elem(), ServerExcludeRangeUciStringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerExcludeRangeVciStringInput)(nil)).Elem(), ServerExcludeRangeVciStringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerExcludeRangeVciStringArrayInput)(nil)).Elem(), ServerExcludeRangeVciStringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerIpRangeInput)(nil)).Elem(), ServerIpRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerIpRangeArrayInput)(nil)).Elem(), ServerIpRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerIpRangeUciStringInput)(nil)).Elem(), ServerIpRangeUciStringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerIpRangeUciStringArrayInput)(nil)).Elem(), ServerIpRangeUciStringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerIpRangeVciStringInput)(nil)).Elem(), ServerIpRangeVciStringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerIpRangeVciStringArrayInput)(nil)).Elem(), ServerIpRangeVciStringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerOptionInput)(nil)).Elem(), ServerOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerOptionArrayInput)(nil)).Elem(), ServerOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerOptionUciStringInput)(nil)).Elem(), ServerOptionUciStringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerOptionUciStringArrayInput)(nil)).Elem(), ServerOptionUciStringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerOptionVciStringInput)(nil)).Elem(), ServerOptionVciStringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerOptionVciStringArrayInput)(nil)).Elem(), ServerOptionVciStringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerReservedAddressInput)(nil)).Elem(), ServerReservedAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerReservedAddressArrayInput)(nil)).Elem(), ServerReservedAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTftpServerInput)(nil)).Elem(), ServerTftpServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTftpServerArrayInput)(nil)).Elem(), ServerTftpServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerVciStringInput)(nil)).Elem(), ServerVciStringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerVciStringArrayInput)(nil)).Elem(), ServerVciStringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerExcludeRangeInput)(nil)).Elem(), GetServerExcludeRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerExcludeRangeArrayInput)(nil)).Elem(), GetServerExcludeRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerExcludeRangeUciStringInput)(nil)).Elem(), GetServerExcludeRangeUciStringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerExcludeRangeUciStringArrayInput)(nil)).Elem(), GetServerExcludeRangeUciStringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerExcludeRangeVciStringInput)(nil)).Elem(), GetServerExcludeRangeVciStringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerExcludeRangeVciStringArrayInput)(nil)).Elem(), GetServerExcludeRangeVciStringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerIpRangeInput)(nil)).Elem(), GetServerIpRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerIpRangeArrayInput)(nil)).Elem(), GetServerIpRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerIpRangeUciStringInput)(nil)).Elem(), GetServerIpRangeUciStringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerIpRangeUciStringArrayInput)(nil)).Elem(), GetServerIpRangeUciStringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerIpRangeVciStringInput)(nil)).Elem(), GetServerIpRangeVciStringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerIpRangeVciStringArrayInput)(nil)).Elem(), GetServerIpRangeVciStringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerOptionInput)(nil)).Elem(), GetServerOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerOptionArrayInput)(nil)).Elem(), GetServerOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerOptionUciStringInput)(nil)).Elem(), GetServerOptionUciStringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerOptionUciStringArrayInput)(nil)).Elem(), GetServerOptionUciStringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerOptionVciStringInput)(nil)).Elem(), GetServerOptionVciStringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerOptionVciStringArrayInput)(nil)).Elem(), GetServerOptionVciStringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerReservedAddressInput)(nil)).Elem(), GetServerReservedAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerReservedAddressArrayInput)(nil)).Elem(), GetServerReservedAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerTftpServerInput)(nil)).Elem(), GetServerTftpServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerTftpServerArrayInput)(nil)).Elem(), GetServerTftpServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerVciStringInput)(nil)).Elem(), GetServerVciStringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerVciStringArrayInput)(nil)).Elem(), GetServerVciStringArray{})
	pulumi.RegisterOutputType(ServerExcludeRangeOutput{})
	pulumi.RegisterOutputType(ServerExcludeRangeArrayOutput{})
	pulumi.RegisterOutputType(ServerExcludeRangeUciStringOutput{})
	pulumi.RegisterOutputType(ServerExcludeRangeUciStringArrayOutput{})
	pulumi.RegisterOutputType(ServerExcludeRangeVciStringOutput{})
	pulumi.RegisterOutputType(ServerExcludeRangeVciStringArrayOutput{})
	pulumi.RegisterOutputType(ServerIpRangeOutput{})
	pulumi.RegisterOutputType(ServerIpRangeArrayOutput{})
	pulumi.RegisterOutputType(ServerIpRangeUciStringOutput{})
	pulumi.RegisterOutputType(ServerIpRangeUciStringArrayOutput{})
	pulumi.RegisterOutputType(ServerIpRangeVciStringOutput{})
	pulumi.RegisterOutputType(ServerIpRangeVciStringArrayOutput{})
	pulumi.RegisterOutputType(ServerOptionOutput{})
	pulumi.RegisterOutputType(ServerOptionArrayOutput{})
	pulumi.RegisterOutputType(ServerOptionUciStringOutput{})
	pulumi.RegisterOutputType(ServerOptionUciStringArrayOutput{})
	pulumi.RegisterOutputType(ServerOptionVciStringOutput{})
	pulumi.RegisterOutputType(ServerOptionVciStringArrayOutput{})
	pulumi.RegisterOutputType(ServerReservedAddressOutput{})
	pulumi.RegisterOutputType(ServerReservedAddressArrayOutput{})
	pulumi.RegisterOutputType(ServerTftpServerOutput{})
	pulumi.RegisterOutputType(ServerTftpServerArrayOutput{})
	pulumi.RegisterOutputType(ServerVciStringOutput{})
	pulumi.RegisterOutputType(ServerVciStringArrayOutput{})
	pulumi.RegisterOutputType(GetServerExcludeRangeOutput{})
	pulumi.RegisterOutputType(GetServerExcludeRangeArrayOutput{})
	pulumi.RegisterOutputType(GetServerExcludeRangeUciStringOutput{})
	pulumi.RegisterOutputType(GetServerExcludeRangeUciStringArrayOutput{})
	pulumi.RegisterOutputType(GetServerExcludeRangeVciStringOutput{})
	pulumi.RegisterOutputType(GetServerExcludeRangeVciStringArrayOutput{})
	pulumi.RegisterOutputType(GetServerIpRangeOutput{})
	pulumi.RegisterOutputType(GetServerIpRangeArrayOutput{})
	pulumi.RegisterOutputType(GetServerIpRangeUciStringOutput{})
	pulumi.RegisterOutputType(GetServerIpRangeUciStringArrayOutput{})
	pulumi.RegisterOutputType(GetServerIpRangeVciStringOutput{})
	pulumi.RegisterOutputType(GetServerIpRangeVciStringArrayOutput{})
	pulumi.RegisterOutputType(GetServerOptionOutput{})
	pulumi.RegisterOutputType(GetServerOptionArrayOutput{})
	pulumi.RegisterOutputType(GetServerOptionUciStringOutput{})
	pulumi.RegisterOutputType(GetServerOptionUciStringArrayOutput{})
	pulumi.RegisterOutputType(GetServerOptionVciStringOutput{})
	pulumi.RegisterOutputType(GetServerOptionVciStringArrayOutput{})
	pulumi.RegisterOutputType(GetServerReservedAddressOutput{})
	pulumi.RegisterOutputType(GetServerReservedAddressArrayOutput{})
	pulumi.RegisterOutputType(GetServerTftpServerOutput{})
	pulumi.RegisterOutputType(GetServerTftpServerArrayOutput{})
	pulumi.RegisterOutputType(GetServerVciStringOutput{})
	pulumi.RegisterOutputType(GetServerVciStringArrayOutput{})
}
