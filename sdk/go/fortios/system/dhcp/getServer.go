// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dhcp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Use this data source to get information on an fortios systemdhcp server
func LookupServer(ctx *pulumi.Context, args *LookupServerArgs, opts ...pulumi.InvokeOption) (*LookupServerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServerResult
	err := ctx.Invoke("fortios:system/dhcp/getServer:getServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServer.
type LookupServerArgs struct {
	// Specify the fosid of the desired systemdhcp server.
	Fosid int `pulumi:"fosid"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by getServer.
type LookupServerResult struct {
	// Enable/disable auto configuration.
	AutoConfiguration string `pulumi:"autoConfiguration"`
	// Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM.
	AutoManagedStatus string `pulumi:"autoManagedStatus"`
	// Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
	ConflictedIpTimeout int `pulumi:"conflictedIpTimeout"`
	// DDNS authentication mode.
	DdnsAuth string `pulumi:"ddnsAuth"`
	// DDNS update key (base 64 encoding).
	DdnsKey string `pulumi:"ddnsKey"`
	// DDNS update key name.
	DdnsKeyname string `pulumi:"ddnsKeyname"`
	// DDNS server IP.
	DdnsServerIp string `pulumi:"ddnsServerIp"`
	// TTL.
	DdnsTtl int `pulumi:"ddnsTtl"`
	// Enable/disable DDNS update for DHCP.
	DdnsUpdate string `pulumi:"ddnsUpdate"`
	// Enable/disable DDNS update override for DHCP.
	DdnsUpdateOverride string `pulumi:"ddnsUpdateOverride"`
	// Zone of your domain name (ex. DDNS.com).
	DdnsZone string `pulumi:"ddnsZone"`
	// Default gateway IP address assigned by the DHCP server.
	DefaultGateway string `pulumi:"defaultGateway"`
	// Enable/disable populating of DHCP server settings from FortiIPAM.
	DhcpSettingsFromFortiipam string `pulumi:"dhcpSettingsFromFortiipam"`
	// DNS server 1.
	DnsServer1 string `pulumi:"dnsServer1"`
	// DNS server 2.
	DnsServer2 string `pulumi:"dnsServer2"`
	// DNS server 3.
	DnsServer3 string `pulumi:"dnsServer3"`
	// DNS server 4.
	DnsServer4 string `pulumi:"dnsServer4"`
	// Options for assigning DNS servers to DHCP clients.
	DnsService string `pulumi:"dnsService"`
	// Domain name suffix for the IP addresses that the DHCP server assigns to clients.
	Domain string `pulumi:"domain"`
	// Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `excludeRange` block is documented below.
	ExcludeRanges []GetServerExcludeRange `pulumi:"excludeRanges"`
	// Name of the boot file on the TFTP server.
	Filename string `pulumi:"filename"`
	// Enable/disable FortiClient-On-Net service for this DHCP server.
	ForticlientOnNetStatus string `pulumi:"forticlientOnNetStatus"`
	// ID.
	Fosid int `pulumi:"fosid"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// DHCP server can assign IP configurations to clients connected to this interface.
	Interface string `pulumi:"interface"`
	// Method used to assign client IP.
	IpMode string `pulumi:"ipMode"`
	// DHCP IP range configuration. The structure of `ipRange` block is documented below.
	IpRanges []GetServerIpRange `pulumi:"ipRanges"`
	// DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
	IpsecLeaseHold int `pulumi:"ipsecLeaseHold"`
	// Lease time in seconds, 0 means default lease time.
	LeaseTime int `pulumi:"leaseTime"`
	// MAC access control default action (allow or block assigning IP settings).
	MacAclDefaultAction string `pulumi:"macAclDefaultAction"`
	// Netmask assigned by the DHCP server.
	Netmask string `pulumi:"netmask"`
	// IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
	NextServer string `pulumi:"nextServer"`
	// NTP server 1.
	NtpServer1 string `pulumi:"ntpServer1"`
	// NTP server 2.
	NtpServer2 string `pulumi:"ntpServer2"`
	// NTP server 3.
	NtpServer3 string `pulumi:"ntpServer3"`
	// Options for assigning Network Time Protocol (NTP) servers to DHCP clients.
	NtpService string `pulumi:"ntpService"`
	// DHCP options. The structure of `options` block is documented below.
	Options []GetServerOption `pulumi:"options"`
	// Relay agent IP.
	RelayAgent string `pulumi:"relayAgent"`
	// Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reservedAddress` block is documented below.
	ReservedAddresses []GetServerReservedAddress `pulumi:"reservedAddresses"`
	// DHCP server can be a normal DHCP server or an IPsec DHCP server.
	ServerType string `pulumi:"serverType"`
	// Enable/disable shared subnet.
	SharedSubnet string `pulumi:"sharedSubnet"`
	// Enable/disable this DHCP configuration.
	Status string `pulumi:"status"`
	// TFTP server.
	TftpServers []GetServerTftpServer `pulumi:"tftpServers"`
	// Select the time zone to be assigned to DHCP clients.
	Timezone string `pulumi:"timezone"`
	// Options for the DHCP server to set the client's time zone.
	TimezoneOption string `pulumi:"timezoneOption"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range.
	VciMatch string `pulumi:"vciMatch"`
	// VCI strings.
	VciStrings []GetServerVciString `pulumi:"vciStrings"`
	Vdomparam  *string              `pulumi:"vdomparam"`
	// WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
	WifiAc1 string `pulumi:"wifiAc1"`
	// WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
	WifiAc2 string `pulumi:"wifiAc2"`
	// WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
	WifiAc3 string `pulumi:"wifiAc3"`
	// Options for assigning WiFi Access Controllers to DHCP clients
	WifiAcService string `pulumi:"wifiAcService"`
	// WINS server 1.
	WinsServer1 string `pulumi:"winsServer1"`
	// WINS server 2.
	WinsServer2 string `pulumi:"winsServer2"`
}

func LookupServerOutput(ctx *pulumi.Context, args LookupServerOutputArgs, opts ...pulumi.InvokeOption) LookupServerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServerResult, error) {
			args := v.(LookupServerArgs)
			r, err := LookupServer(ctx, &args, opts...)
			var s LookupServerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServerResultOutput)
}

// A collection of arguments for invoking getServer.
type LookupServerOutputArgs struct {
	// Specify the fosid of the desired systemdhcp server.
	Fosid pulumi.IntInput `pulumi:"fosid"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerArgs)(nil)).Elem()
}

// A collection of values returned by getServer.
type LookupServerResultOutput struct{ *pulumi.OutputState }

func (LookupServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerResult)(nil)).Elem()
}

func (o LookupServerResultOutput) ToLookupServerResultOutput() LookupServerResultOutput {
	return o
}

func (o LookupServerResultOutput) ToLookupServerResultOutputWithContext(ctx context.Context) LookupServerResultOutput {
	return o
}

// Enable/disable auto configuration.
func (o LookupServerResultOutput) AutoConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.AutoConfiguration }).(pulumi.StringOutput)
}

// Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM.
func (o LookupServerResultOutput) AutoManagedStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.AutoManagedStatus }).(pulumi.StringOutput)
}

// Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
func (o LookupServerResultOutput) ConflictedIpTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupServerResult) int { return v.ConflictedIpTimeout }).(pulumi.IntOutput)
}

// DDNS authentication mode.
func (o LookupServerResultOutput) DdnsAuth() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.DdnsAuth }).(pulumi.StringOutput)
}

// DDNS update key (base 64 encoding).
func (o LookupServerResultOutput) DdnsKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.DdnsKey }).(pulumi.StringOutput)
}

// DDNS update key name.
func (o LookupServerResultOutput) DdnsKeyname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.DdnsKeyname }).(pulumi.StringOutput)
}

// DDNS server IP.
func (o LookupServerResultOutput) DdnsServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.DdnsServerIp }).(pulumi.StringOutput)
}

// TTL.
func (o LookupServerResultOutput) DdnsTtl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupServerResult) int { return v.DdnsTtl }).(pulumi.IntOutput)
}

// Enable/disable DDNS update for DHCP.
func (o LookupServerResultOutput) DdnsUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.DdnsUpdate }).(pulumi.StringOutput)
}

// Enable/disable DDNS update override for DHCP.
func (o LookupServerResultOutput) DdnsUpdateOverride() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.DdnsUpdateOverride }).(pulumi.StringOutput)
}

// Zone of your domain name (ex. DDNS.com).
func (o LookupServerResultOutput) DdnsZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.DdnsZone }).(pulumi.StringOutput)
}

// Default gateway IP address assigned by the DHCP server.
func (o LookupServerResultOutput) DefaultGateway() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.DefaultGateway }).(pulumi.StringOutput)
}

// Enable/disable populating of DHCP server settings from FortiIPAM.
func (o LookupServerResultOutput) DhcpSettingsFromFortiipam() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.DhcpSettingsFromFortiipam }).(pulumi.StringOutput)
}

// DNS server 1.
func (o LookupServerResultOutput) DnsServer1() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.DnsServer1 }).(pulumi.StringOutput)
}

// DNS server 2.
func (o LookupServerResultOutput) DnsServer2() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.DnsServer2 }).(pulumi.StringOutput)
}

// DNS server 3.
func (o LookupServerResultOutput) DnsServer3() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.DnsServer3 }).(pulumi.StringOutput)
}

// DNS server 4.
func (o LookupServerResultOutput) DnsServer4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.DnsServer4 }).(pulumi.StringOutput)
}

// Options for assigning DNS servers to DHCP clients.
func (o LookupServerResultOutput) DnsService() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.DnsService }).(pulumi.StringOutput)
}

// Domain name suffix for the IP addresses that the DHCP server assigns to clients.
func (o LookupServerResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.Domain }).(pulumi.StringOutput)
}

// Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `excludeRange` block is documented below.
func (o LookupServerResultOutput) ExcludeRanges() GetServerExcludeRangeArrayOutput {
	return o.ApplyT(func(v LookupServerResult) []GetServerExcludeRange { return v.ExcludeRanges }).(GetServerExcludeRangeArrayOutput)
}

// Name of the boot file on the TFTP server.
func (o LookupServerResultOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.Filename }).(pulumi.StringOutput)
}

// Enable/disable FortiClient-On-Net service for this DHCP server.
func (o LookupServerResultOutput) ForticlientOnNetStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.ForticlientOnNetStatus }).(pulumi.StringOutput)
}

// ID.
func (o LookupServerResultOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v LookupServerResult) int { return v.Fosid }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupServerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.Id }).(pulumi.StringOutput)
}

// DHCP server can assign IP configurations to clients connected to this interface.
func (o LookupServerResultOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.Interface }).(pulumi.StringOutput)
}

// Method used to assign client IP.
func (o LookupServerResultOutput) IpMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.IpMode }).(pulumi.StringOutput)
}

// DHCP IP range configuration. The structure of `ipRange` block is documented below.
func (o LookupServerResultOutput) IpRanges() GetServerIpRangeArrayOutput {
	return o.ApplyT(func(v LookupServerResult) []GetServerIpRange { return v.IpRanges }).(GetServerIpRangeArrayOutput)
}

// DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
func (o LookupServerResultOutput) IpsecLeaseHold() pulumi.IntOutput {
	return o.ApplyT(func(v LookupServerResult) int { return v.IpsecLeaseHold }).(pulumi.IntOutput)
}

// Lease time in seconds, 0 means default lease time.
func (o LookupServerResultOutput) LeaseTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupServerResult) int { return v.LeaseTime }).(pulumi.IntOutput)
}

// MAC access control default action (allow or block assigning IP settings).
func (o LookupServerResultOutput) MacAclDefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.MacAclDefaultAction }).(pulumi.StringOutput)
}

// Netmask assigned by the DHCP server.
func (o LookupServerResultOutput) Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.Netmask }).(pulumi.StringOutput)
}

// IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
func (o LookupServerResultOutput) NextServer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.NextServer }).(pulumi.StringOutput)
}

// NTP server 1.
func (o LookupServerResultOutput) NtpServer1() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.NtpServer1 }).(pulumi.StringOutput)
}

// NTP server 2.
func (o LookupServerResultOutput) NtpServer2() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.NtpServer2 }).(pulumi.StringOutput)
}

// NTP server 3.
func (o LookupServerResultOutput) NtpServer3() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.NtpServer3 }).(pulumi.StringOutput)
}

// Options for assigning Network Time Protocol (NTP) servers to DHCP clients.
func (o LookupServerResultOutput) NtpService() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.NtpService }).(pulumi.StringOutput)
}

// DHCP options. The structure of `options` block is documented below.
func (o LookupServerResultOutput) Options() GetServerOptionArrayOutput {
	return o.ApplyT(func(v LookupServerResult) []GetServerOption { return v.Options }).(GetServerOptionArrayOutput)
}

// Relay agent IP.
func (o LookupServerResultOutput) RelayAgent() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.RelayAgent }).(pulumi.StringOutput)
}

// Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reservedAddress` block is documented below.
func (o LookupServerResultOutput) ReservedAddresses() GetServerReservedAddressArrayOutput {
	return o.ApplyT(func(v LookupServerResult) []GetServerReservedAddress { return v.ReservedAddresses }).(GetServerReservedAddressArrayOutput)
}

// DHCP server can be a normal DHCP server or an IPsec DHCP server.
func (o LookupServerResultOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.ServerType }).(pulumi.StringOutput)
}

// Enable/disable shared subnet.
func (o LookupServerResultOutput) SharedSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.SharedSubnet }).(pulumi.StringOutput)
}

// Enable/disable this DHCP configuration.
func (o LookupServerResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.Status }).(pulumi.StringOutput)
}

// TFTP server.
func (o LookupServerResultOutput) TftpServers() GetServerTftpServerArrayOutput {
	return o.ApplyT(func(v LookupServerResult) []GetServerTftpServer { return v.TftpServers }).(GetServerTftpServerArrayOutput)
}

// Select the time zone to be assigned to DHCP clients.
func (o LookupServerResultOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.Timezone }).(pulumi.StringOutput)
}

// Options for the DHCP server to set the client's time zone.
func (o LookupServerResultOutput) TimezoneOption() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.TimezoneOption }).(pulumi.StringOutput)
}

// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range.
func (o LookupServerResultOutput) VciMatch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.VciMatch }).(pulumi.StringOutput)
}

// VCI strings.
func (o LookupServerResultOutput) VciStrings() GetServerVciStringArrayOutput {
	return o.ApplyT(func(v LookupServerResult) []GetServerVciString { return v.VciStrings }).(GetServerVciStringArrayOutput)
}

func (o LookupServerResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServerResult) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
func (o LookupServerResultOutput) WifiAc1() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.WifiAc1 }).(pulumi.StringOutput)
}

// WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
func (o LookupServerResultOutput) WifiAc2() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.WifiAc2 }).(pulumi.StringOutput)
}

// WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
func (o LookupServerResultOutput) WifiAc3() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.WifiAc3 }).(pulumi.StringOutput)
}

// Options for assigning WiFi Access Controllers to DHCP clients
func (o LookupServerResultOutput) WifiAcService() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.WifiAcService }).(pulumi.StringOutput)
}

// WINS server 1.
func (o LookupServerResultOutput) WinsServer1() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.WinsServer1 }).(pulumi.StringOutput)
}

// WINS server 2.
func (o LookupServerResultOutput) WinsServer2() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.WinsServer2 }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServerResultOutput{})
}
