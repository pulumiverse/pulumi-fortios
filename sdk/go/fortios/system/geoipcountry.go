// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Define geoip country name-ID table. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// System GeoipCountry can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/geoipcountry:Geoipcountry labelname {{fosid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/geoipcountry:Geoipcountry labelname {{fosid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Geoipcountry struct {
	pulumi.CustomResourceState

	// Country ID.
	Fosid pulumi.StringOutput `pulumi:"fosid"`
	// Country name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewGeoipcountry registers a new resource with the given unique name, arguments, and options.
func NewGeoipcountry(ctx *pulumi.Context,
	name string, args *GeoipcountryArgs, opts ...pulumi.ResourceOption) (*Geoipcountry, error) {
	if args == nil {
		args = &GeoipcountryArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Geoipcountry
	err := ctx.RegisterResource("fortios:system/geoipcountry:Geoipcountry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGeoipcountry gets an existing Geoipcountry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGeoipcountry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GeoipcountryState, opts ...pulumi.ResourceOption) (*Geoipcountry, error) {
	var resource Geoipcountry
	err := ctx.ReadResource("fortios:system/geoipcountry:Geoipcountry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Geoipcountry resources.
type geoipcountryState struct {
	// Country ID.
	Fosid *string `pulumi:"fosid"`
	// Country name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type GeoipcountryState struct {
	// Country ID.
	Fosid pulumi.StringPtrInput
	// Country name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (GeoipcountryState) ElementType() reflect.Type {
	return reflect.TypeOf((*geoipcountryState)(nil)).Elem()
}

type geoipcountryArgs struct {
	// Country ID.
	Fosid *string `pulumi:"fosid"`
	// Country name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Geoipcountry resource.
type GeoipcountryArgs struct {
	// Country ID.
	Fosid pulumi.StringPtrInput
	// Country name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (GeoipcountryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*geoipcountryArgs)(nil)).Elem()
}

type GeoipcountryInput interface {
	pulumi.Input

	ToGeoipcountryOutput() GeoipcountryOutput
	ToGeoipcountryOutputWithContext(ctx context.Context) GeoipcountryOutput
}

func (*Geoipcountry) ElementType() reflect.Type {
	return reflect.TypeOf((**Geoipcountry)(nil)).Elem()
}

func (i *Geoipcountry) ToGeoipcountryOutput() GeoipcountryOutput {
	return i.ToGeoipcountryOutputWithContext(context.Background())
}

func (i *Geoipcountry) ToGeoipcountryOutputWithContext(ctx context.Context) GeoipcountryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeoipcountryOutput)
}

// GeoipcountryArrayInput is an input type that accepts GeoipcountryArray and GeoipcountryArrayOutput values.
// You can construct a concrete instance of `GeoipcountryArrayInput` via:
//
//	GeoipcountryArray{ GeoipcountryArgs{...} }
type GeoipcountryArrayInput interface {
	pulumi.Input

	ToGeoipcountryArrayOutput() GeoipcountryArrayOutput
	ToGeoipcountryArrayOutputWithContext(context.Context) GeoipcountryArrayOutput
}

type GeoipcountryArray []GeoipcountryInput

func (GeoipcountryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Geoipcountry)(nil)).Elem()
}

func (i GeoipcountryArray) ToGeoipcountryArrayOutput() GeoipcountryArrayOutput {
	return i.ToGeoipcountryArrayOutputWithContext(context.Background())
}

func (i GeoipcountryArray) ToGeoipcountryArrayOutputWithContext(ctx context.Context) GeoipcountryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeoipcountryArrayOutput)
}

// GeoipcountryMapInput is an input type that accepts GeoipcountryMap and GeoipcountryMapOutput values.
// You can construct a concrete instance of `GeoipcountryMapInput` via:
//
//	GeoipcountryMap{ "key": GeoipcountryArgs{...} }
type GeoipcountryMapInput interface {
	pulumi.Input

	ToGeoipcountryMapOutput() GeoipcountryMapOutput
	ToGeoipcountryMapOutputWithContext(context.Context) GeoipcountryMapOutput
}

type GeoipcountryMap map[string]GeoipcountryInput

func (GeoipcountryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Geoipcountry)(nil)).Elem()
}

func (i GeoipcountryMap) ToGeoipcountryMapOutput() GeoipcountryMapOutput {
	return i.ToGeoipcountryMapOutputWithContext(context.Background())
}

func (i GeoipcountryMap) ToGeoipcountryMapOutputWithContext(ctx context.Context) GeoipcountryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeoipcountryMapOutput)
}

type GeoipcountryOutput struct{ *pulumi.OutputState }

func (GeoipcountryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Geoipcountry)(nil)).Elem()
}

func (o GeoipcountryOutput) ToGeoipcountryOutput() GeoipcountryOutput {
	return o
}

func (o GeoipcountryOutput) ToGeoipcountryOutputWithContext(ctx context.Context) GeoipcountryOutput {
	return o
}

// Country ID.
func (o GeoipcountryOutput) Fosid() pulumi.StringOutput {
	return o.ApplyT(func(v *Geoipcountry) pulumi.StringOutput { return v.Fosid }).(pulumi.StringOutput)
}

// Country name.
func (o GeoipcountryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Geoipcountry) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o GeoipcountryOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Geoipcountry) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type GeoipcountryArrayOutput struct{ *pulumi.OutputState }

func (GeoipcountryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Geoipcountry)(nil)).Elem()
}

func (o GeoipcountryArrayOutput) ToGeoipcountryArrayOutput() GeoipcountryArrayOutput {
	return o
}

func (o GeoipcountryArrayOutput) ToGeoipcountryArrayOutputWithContext(ctx context.Context) GeoipcountryArrayOutput {
	return o
}

func (o GeoipcountryArrayOutput) Index(i pulumi.IntInput) GeoipcountryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Geoipcountry {
		return vs[0].([]*Geoipcountry)[vs[1].(int)]
	}).(GeoipcountryOutput)
}

type GeoipcountryMapOutput struct{ *pulumi.OutputState }

func (GeoipcountryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Geoipcountry)(nil)).Elem()
}

func (o GeoipcountryMapOutput) ToGeoipcountryMapOutput() GeoipcountryMapOutput {
	return o
}

func (o GeoipcountryMapOutput) ToGeoipcountryMapOutputWithContext(ctx context.Context) GeoipcountryMapOutput {
	return o
}

func (o GeoipcountryMapOutput) MapIndex(k pulumi.StringInput) GeoipcountryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Geoipcountry {
		return vs[0].(map[string]*Geoipcountry)[vs[1].(string)]
	}).(GeoipcountryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GeoipcountryInput)(nil)).Elem(), &Geoipcountry{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeoipcountryArrayInput)(nil)).Elem(), GeoipcountryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeoipcountryMapInput)(nil)).Elem(), GeoipcountryMap{})
	pulumi.RegisterOutputType(GeoipcountryOutput{})
	pulumi.RegisterOutputType(GeoipcountryArrayOutput{})
	pulumi.RegisterOutputType(GeoipcountryMapOutput{})
}
