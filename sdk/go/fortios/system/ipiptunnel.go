// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure IP in IP Tunneling.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewIpiptunnel(ctx, "trname", &system.IpiptunnelArgs{
//				Interface: pulumi.String("port3"),
//				LocalGw:   pulumi.String("1.1.1.1"),
//				RemoteGw:  pulumi.String("2.2.2.2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// System IpipTunnel can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/ipiptunnel:Ipiptunnel labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/ipiptunnel:Ipiptunnel labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Ipiptunnel struct {
	pulumi.CustomResourceState

	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringOutput `pulumi:"autoAsicOffload"`
	// Interface name that is associated with the incoming traffic from available options.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// IPv4 address for the local gateway.
	LocalGw pulumi.StringOutput `pulumi:"localGw"`
	// IPIP Tunnel name.
	Name pulumi.StringOutput `pulumi:"name"`
	// IPv4 address for the remote gateway.
	RemoteGw pulumi.StringOutput `pulumi:"remoteGw"`
	// Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
	UseSdwan pulumi.StringOutput `pulumi:"useSdwan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewIpiptunnel registers a new resource with the given unique name, arguments, and options.
func NewIpiptunnel(ctx *pulumi.Context,
	name string, args *IpiptunnelArgs, opts ...pulumi.ResourceOption) (*Ipiptunnel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.LocalGw == nil {
		return nil, errors.New("invalid value for required argument 'LocalGw'")
	}
	if args.RemoteGw == nil {
		return nil, errors.New("invalid value for required argument 'RemoteGw'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ipiptunnel
	err := ctx.RegisterResource("fortios:system/ipiptunnel:Ipiptunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpiptunnel gets an existing Ipiptunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpiptunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpiptunnelState, opts ...pulumi.ResourceOption) (*Ipiptunnel, error) {
	var resource Ipiptunnel
	err := ctx.ReadResource("fortios:system/ipiptunnel:Ipiptunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipiptunnel resources.
type ipiptunnelState struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Interface name that is associated with the incoming traffic from available options.
	Interface *string `pulumi:"interface"`
	// IPv4 address for the local gateway.
	LocalGw *string `pulumi:"localGw"`
	// IPIP Tunnel name.
	Name *string `pulumi:"name"`
	// IPv4 address for the remote gateway.
	RemoteGw *string `pulumi:"remoteGw"`
	// Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
	UseSdwan *string `pulumi:"useSdwan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type IpiptunnelState struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Interface name that is associated with the incoming traffic from available options.
	Interface pulumi.StringPtrInput
	// IPv4 address for the local gateway.
	LocalGw pulumi.StringPtrInput
	// IPIP Tunnel name.
	Name pulumi.StringPtrInput
	// IPv4 address for the remote gateway.
	RemoteGw pulumi.StringPtrInput
	// Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
	UseSdwan pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IpiptunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipiptunnelState)(nil)).Elem()
}

type ipiptunnelArgs struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Interface name that is associated with the incoming traffic from available options.
	Interface string `pulumi:"interface"`
	// IPv4 address for the local gateway.
	LocalGw string `pulumi:"localGw"`
	// IPIP Tunnel name.
	Name *string `pulumi:"name"`
	// IPv4 address for the remote gateway.
	RemoteGw string `pulumi:"remoteGw"`
	// Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
	UseSdwan *string `pulumi:"useSdwan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Ipiptunnel resource.
type IpiptunnelArgs struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Interface name that is associated with the incoming traffic from available options.
	Interface pulumi.StringInput
	// IPv4 address for the local gateway.
	LocalGw pulumi.StringInput
	// IPIP Tunnel name.
	Name pulumi.StringPtrInput
	// IPv4 address for the remote gateway.
	RemoteGw pulumi.StringInput
	// Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
	UseSdwan pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IpiptunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipiptunnelArgs)(nil)).Elem()
}

type IpiptunnelInput interface {
	pulumi.Input

	ToIpiptunnelOutput() IpiptunnelOutput
	ToIpiptunnelOutputWithContext(ctx context.Context) IpiptunnelOutput
}

func (*Ipiptunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipiptunnel)(nil)).Elem()
}

func (i *Ipiptunnel) ToIpiptunnelOutput() IpiptunnelOutput {
	return i.ToIpiptunnelOutputWithContext(context.Background())
}

func (i *Ipiptunnel) ToIpiptunnelOutputWithContext(ctx context.Context) IpiptunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpiptunnelOutput)
}

// IpiptunnelArrayInput is an input type that accepts IpiptunnelArray and IpiptunnelArrayOutput values.
// You can construct a concrete instance of `IpiptunnelArrayInput` via:
//
//	IpiptunnelArray{ IpiptunnelArgs{...} }
type IpiptunnelArrayInput interface {
	pulumi.Input

	ToIpiptunnelArrayOutput() IpiptunnelArrayOutput
	ToIpiptunnelArrayOutputWithContext(context.Context) IpiptunnelArrayOutput
}

type IpiptunnelArray []IpiptunnelInput

func (IpiptunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipiptunnel)(nil)).Elem()
}

func (i IpiptunnelArray) ToIpiptunnelArrayOutput() IpiptunnelArrayOutput {
	return i.ToIpiptunnelArrayOutputWithContext(context.Background())
}

func (i IpiptunnelArray) ToIpiptunnelArrayOutputWithContext(ctx context.Context) IpiptunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpiptunnelArrayOutput)
}

// IpiptunnelMapInput is an input type that accepts IpiptunnelMap and IpiptunnelMapOutput values.
// You can construct a concrete instance of `IpiptunnelMapInput` via:
//
//	IpiptunnelMap{ "key": IpiptunnelArgs{...} }
type IpiptunnelMapInput interface {
	pulumi.Input

	ToIpiptunnelMapOutput() IpiptunnelMapOutput
	ToIpiptunnelMapOutputWithContext(context.Context) IpiptunnelMapOutput
}

type IpiptunnelMap map[string]IpiptunnelInput

func (IpiptunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipiptunnel)(nil)).Elem()
}

func (i IpiptunnelMap) ToIpiptunnelMapOutput() IpiptunnelMapOutput {
	return i.ToIpiptunnelMapOutputWithContext(context.Background())
}

func (i IpiptunnelMap) ToIpiptunnelMapOutputWithContext(ctx context.Context) IpiptunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpiptunnelMapOutput)
}

type IpiptunnelOutput struct{ *pulumi.OutputState }

func (IpiptunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipiptunnel)(nil)).Elem()
}

func (o IpiptunnelOutput) ToIpiptunnelOutput() IpiptunnelOutput {
	return o
}

func (o IpiptunnelOutput) ToIpiptunnelOutputWithContext(ctx context.Context) IpiptunnelOutput {
	return o
}

// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
func (o IpiptunnelOutput) AutoAsicOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipiptunnel) pulumi.StringOutput { return v.AutoAsicOffload }).(pulumi.StringOutput)
}

// Interface name that is associated with the incoming traffic from available options.
func (o IpiptunnelOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipiptunnel) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// IPv4 address for the local gateway.
func (o IpiptunnelOutput) LocalGw() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipiptunnel) pulumi.StringOutput { return v.LocalGw }).(pulumi.StringOutput)
}

// IPIP Tunnel name.
func (o IpiptunnelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipiptunnel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// IPv4 address for the remote gateway.
func (o IpiptunnelOutput) RemoteGw() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipiptunnel) pulumi.StringOutput { return v.RemoteGw }).(pulumi.StringOutput)
}

// Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
func (o IpiptunnelOutput) UseSdwan() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipiptunnel) pulumi.StringOutput { return v.UseSdwan }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o IpiptunnelOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipiptunnel) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type IpiptunnelArrayOutput struct{ *pulumi.OutputState }

func (IpiptunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipiptunnel)(nil)).Elem()
}

func (o IpiptunnelArrayOutput) ToIpiptunnelArrayOutput() IpiptunnelArrayOutput {
	return o
}

func (o IpiptunnelArrayOutput) ToIpiptunnelArrayOutputWithContext(ctx context.Context) IpiptunnelArrayOutput {
	return o
}

func (o IpiptunnelArrayOutput) Index(i pulumi.IntInput) IpiptunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipiptunnel {
		return vs[0].([]*Ipiptunnel)[vs[1].(int)]
	}).(IpiptunnelOutput)
}

type IpiptunnelMapOutput struct{ *pulumi.OutputState }

func (IpiptunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipiptunnel)(nil)).Elem()
}

func (o IpiptunnelMapOutput) ToIpiptunnelMapOutput() IpiptunnelMapOutput {
	return o
}

func (o IpiptunnelMapOutput) ToIpiptunnelMapOutputWithContext(ctx context.Context) IpiptunnelMapOutput {
	return o
}

func (o IpiptunnelMapOutput) MapIndex(k pulumi.StringInput) IpiptunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipiptunnel {
		return vs[0].(map[string]*Ipiptunnel)[vs[1].(string)]
	}).(IpiptunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpiptunnelInput)(nil)).Elem(), &Ipiptunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpiptunnelArrayInput)(nil)).Elem(), IpiptunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpiptunnelMapInput)(nil)).Elem(), IpiptunnelMap{})
	pulumi.RegisterOutputType(IpiptunnelOutput{})
	pulumi.RegisterOutputType(IpiptunnelArrayOutput{})
	pulumi.RegisterOutputType(IpiptunnelMapOutput{})
}
