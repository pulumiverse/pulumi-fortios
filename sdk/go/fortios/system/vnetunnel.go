// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure virtual network enabler tunnel. Applies to FortiOS Version `>= 6.4.1`.
//
// ## Import
//
// System VneTunnel can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/vnetunnel:Vnetunnel labelname SystemVneTunnel
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/vnetunnel:Vnetunnel labelname SystemVneTunnel
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Vnetunnel struct {
	pulumi.CustomResourceState

	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringOutput `pulumi:"autoAsicOffload"`
	// BMR hostname.
	BmrHostname pulumi.StringPtrOutput `pulumi:"bmrHostname"`
	// Border relay IPv6 address.
	Br pulumi.StringOutput `pulumi:"br"`
	// HTTP authentication password.
	HttpPassword pulumi.StringPtrOutput `pulumi:"httpPassword"`
	// HTTP authentication user name.
	HttpUsername pulumi.StringOutput `pulumi:"httpUsername"`
	// Interface name.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Tunnel IPv4 address and netmask.
	Ipv4Address pulumi.StringOutput `pulumi:"ipv4Address"`
	// VNE tunnel mode.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringOutput `pulumi:"sslCertificate"`
	// Enable/disable VNE tunnel. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// URL of provisioning server.
	UpdateUrl pulumi.StringOutput `pulumi:"updateUrl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewVnetunnel registers a new resource with the given unique name, arguments, and options.
func NewVnetunnel(ctx *pulumi.Context,
	name string, args *VnetunnelArgs, opts ...pulumi.ResourceOption) (*Vnetunnel, error) {
	if args == nil {
		args = &VnetunnelArgs{}
	}

	if args.BmrHostname != nil {
		args.BmrHostname = pulumi.ToSecret(args.BmrHostname).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"bmrHostname",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vnetunnel
	err := ctx.RegisterResource("fortios:system/vnetunnel:Vnetunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVnetunnel gets an existing Vnetunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVnetunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VnetunnelState, opts ...pulumi.ResourceOption) (*Vnetunnel, error) {
	var resource Vnetunnel
	err := ctx.ReadResource("fortios:system/vnetunnel:Vnetunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vnetunnel resources.
type vnetunnelState struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// BMR hostname.
	BmrHostname *string `pulumi:"bmrHostname"`
	// Border relay IPv6 address.
	Br *string `pulumi:"br"`
	// HTTP authentication password.
	HttpPassword *string `pulumi:"httpPassword"`
	// HTTP authentication user name.
	HttpUsername *string `pulumi:"httpUsername"`
	// Interface name.
	Interface *string `pulumi:"interface"`
	// Tunnel IPv4 address and netmask.
	Ipv4Address *string `pulumi:"ipv4Address"`
	// VNE tunnel mode.
	Mode *string `pulumi:"mode"`
	// Name of local certificate for SSL connections.
	SslCertificate *string `pulumi:"sslCertificate"`
	// Enable/disable VNE tunnel. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// URL of provisioning server.
	UpdateUrl *string `pulumi:"updateUrl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type VnetunnelState struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// BMR hostname.
	BmrHostname pulumi.StringPtrInput
	// Border relay IPv6 address.
	Br pulumi.StringPtrInput
	// HTTP authentication password.
	HttpPassword pulumi.StringPtrInput
	// HTTP authentication user name.
	HttpUsername pulumi.StringPtrInput
	// Interface name.
	Interface pulumi.StringPtrInput
	// Tunnel IPv4 address and netmask.
	Ipv4Address pulumi.StringPtrInput
	// VNE tunnel mode.
	Mode pulumi.StringPtrInput
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringPtrInput
	// Enable/disable VNE tunnel. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// URL of provisioning server.
	UpdateUrl pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VnetunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*vnetunnelState)(nil)).Elem()
}

type vnetunnelArgs struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// BMR hostname.
	BmrHostname *string `pulumi:"bmrHostname"`
	// Border relay IPv6 address.
	Br *string `pulumi:"br"`
	// HTTP authentication password.
	HttpPassword *string `pulumi:"httpPassword"`
	// HTTP authentication user name.
	HttpUsername *string `pulumi:"httpUsername"`
	// Interface name.
	Interface *string `pulumi:"interface"`
	// Tunnel IPv4 address and netmask.
	Ipv4Address *string `pulumi:"ipv4Address"`
	// VNE tunnel mode.
	Mode *string `pulumi:"mode"`
	// Name of local certificate for SSL connections.
	SslCertificate *string `pulumi:"sslCertificate"`
	// Enable/disable VNE tunnel. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// URL of provisioning server.
	UpdateUrl *string `pulumi:"updateUrl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Vnetunnel resource.
type VnetunnelArgs struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// BMR hostname.
	BmrHostname pulumi.StringPtrInput
	// Border relay IPv6 address.
	Br pulumi.StringPtrInput
	// HTTP authentication password.
	HttpPassword pulumi.StringPtrInput
	// HTTP authentication user name.
	HttpUsername pulumi.StringPtrInput
	// Interface name.
	Interface pulumi.StringPtrInput
	// Tunnel IPv4 address and netmask.
	Ipv4Address pulumi.StringPtrInput
	// VNE tunnel mode.
	Mode pulumi.StringPtrInput
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringPtrInput
	// Enable/disable VNE tunnel. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// URL of provisioning server.
	UpdateUrl pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VnetunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vnetunnelArgs)(nil)).Elem()
}

type VnetunnelInput interface {
	pulumi.Input

	ToVnetunnelOutput() VnetunnelOutput
	ToVnetunnelOutputWithContext(ctx context.Context) VnetunnelOutput
}

func (*Vnetunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**Vnetunnel)(nil)).Elem()
}

func (i *Vnetunnel) ToVnetunnelOutput() VnetunnelOutput {
	return i.ToVnetunnelOutputWithContext(context.Background())
}

func (i *Vnetunnel) ToVnetunnelOutputWithContext(ctx context.Context) VnetunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VnetunnelOutput)
}

// VnetunnelArrayInput is an input type that accepts VnetunnelArray and VnetunnelArrayOutput values.
// You can construct a concrete instance of `VnetunnelArrayInput` via:
//
//	VnetunnelArray{ VnetunnelArgs{...} }
type VnetunnelArrayInput interface {
	pulumi.Input

	ToVnetunnelArrayOutput() VnetunnelArrayOutput
	ToVnetunnelArrayOutputWithContext(context.Context) VnetunnelArrayOutput
}

type VnetunnelArray []VnetunnelInput

func (VnetunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vnetunnel)(nil)).Elem()
}

func (i VnetunnelArray) ToVnetunnelArrayOutput() VnetunnelArrayOutput {
	return i.ToVnetunnelArrayOutputWithContext(context.Background())
}

func (i VnetunnelArray) ToVnetunnelArrayOutputWithContext(ctx context.Context) VnetunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VnetunnelArrayOutput)
}

// VnetunnelMapInput is an input type that accepts VnetunnelMap and VnetunnelMapOutput values.
// You can construct a concrete instance of `VnetunnelMapInput` via:
//
//	VnetunnelMap{ "key": VnetunnelArgs{...} }
type VnetunnelMapInput interface {
	pulumi.Input

	ToVnetunnelMapOutput() VnetunnelMapOutput
	ToVnetunnelMapOutputWithContext(context.Context) VnetunnelMapOutput
}

type VnetunnelMap map[string]VnetunnelInput

func (VnetunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vnetunnel)(nil)).Elem()
}

func (i VnetunnelMap) ToVnetunnelMapOutput() VnetunnelMapOutput {
	return i.ToVnetunnelMapOutputWithContext(context.Background())
}

func (i VnetunnelMap) ToVnetunnelMapOutputWithContext(ctx context.Context) VnetunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VnetunnelMapOutput)
}

type VnetunnelOutput struct{ *pulumi.OutputState }

func (VnetunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vnetunnel)(nil)).Elem()
}

func (o VnetunnelOutput) ToVnetunnelOutput() VnetunnelOutput {
	return o
}

func (o VnetunnelOutput) ToVnetunnelOutputWithContext(ctx context.Context) VnetunnelOutput {
	return o
}

// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
func (o VnetunnelOutput) AutoAsicOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *Vnetunnel) pulumi.StringOutput { return v.AutoAsicOffload }).(pulumi.StringOutput)
}

// BMR hostname.
func (o VnetunnelOutput) BmrHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vnetunnel) pulumi.StringPtrOutput { return v.BmrHostname }).(pulumi.StringPtrOutput)
}

// Border relay IPv6 address.
func (o VnetunnelOutput) Br() pulumi.StringOutput {
	return o.ApplyT(func(v *Vnetunnel) pulumi.StringOutput { return v.Br }).(pulumi.StringOutput)
}

// HTTP authentication password.
func (o VnetunnelOutput) HttpPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vnetunnel) pulumi.StringPtrOutput { return v.HttpPassword }).(pulumi.StringPtrOutput)
}

// HTTP authentication user name.
func (o VnetunnelOutput) HttpUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *Vnetunnel) pulumi.StringOutput { return v.HttpUsername }).(pulumi.StringOutput)
}

// Interface name.
func (o VnetunnelOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Vnetunnel) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Tunnel IPv4 address and netmask.
func (o VnetunnelOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Vnetunnel) pulumi.StringOutput { return v.Ipv4Address }).(pulumi.StringOutput)
}

// VNE tunnel mode.
func (o VnetunnelOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *Vnetunnel) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Name of local certificate for SSL connections.
func (o VnetunnelOutput) SslCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Vnetunnel) pulumi.StringOutput { return v.SslCertificate }).(pulumi.StringOutput)
}

// Enable/disable VNE tunnel. Valid values: `enable`, `disable`.
func (o VnetunnelOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Vnetunnel) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// URL of provisioning server.
func (o VnetunnelOutput) UpdateUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Vnetunnel) pulumi.StringOutput { return v.UpdateUrl }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o VnetunnelOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Vnetunnel) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type VnetunnelArrayOutput struct{ *pulumi.OutputState }

func (VnetunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vnetunnel)(nil)).Elem()
}

func (o VnetunnelArrayOutput) ToVnetunnelArrayOutput() VnetunnelArrayOutput {
	return o
}

func (o VnetunnelArrayOutput) ToVnetunnelArrayOutputWithContext(ctx context.Context) VnetunnelArrayOutput {
	return o
}

func (o VnetunnelArrayOutput) Index(i pulumi.IntInput) VnetunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vnetunnel {
		return vs[0].([]*Vnetunnel)[vs[1].(int)]
	}).(VnetunnelOutput)
}

type VnetunnelMapOutput struct{ *pulumi.OutputState }

func (VnetunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vnetunnel)(nil)).Elem()
}

func (o VnetunnelMapOutput) ToVnetunnelMapOutput() VnetunnelMapOutput {
	return o
}

func (o VnetunnelMapOutput) ToVnetunnelMapOutputWithContext(ctx context.Context) VnetunnelMapOutput {
	return o
}

func (o VnetunnelMapOutput) MapIndex(k pulumi.StringInput) VnetunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vnetunnel {
		return vs[0].(map[string]*Vnetunnel)[vs[1].(string)]
	}).(VnetunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VnetunnelInput)(nil)).Elem(), &Vnetunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*VnetunnelArrayInput)(nil)).Elem(), VnetunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VnetunnelMapInput)(nil)).Elem(), VnetunnelMap{})
	pulumi.RegisterOutputType(VnetunnelOutput{})
	pulumi.RegisterOutputType(VnetunnelArrayOutput{})
	pulumi.RegisterOutputType(VnetunnelMapOutput{})
}
