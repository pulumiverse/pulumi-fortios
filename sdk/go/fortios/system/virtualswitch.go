// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure virtual hardware switch interfaces. Applies to FortiOS Version `7.0.4`.
//
// ## Import
//
// System VirtualSwitch can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/virtualswitch:Virtualswitch labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/virtualswitch:Virtualswitch labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Virtualswitch struct {
	pulumi.CustomResourceState

	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Name of the virtual switch.
	Name pulumi.StringOutput `pulumi:"name"`
	// Physical switch parent.
	PhysicalSwitch pulumi.StringOutput `pulumi:"physicalSwitch"`
	// Configure member ports. The structure of `port` block is documented below.
	Ports VirtualswitchPortArrayOutput `pulumi:"ports"`
	// Enable/disable SPAN. Valid values: `disable`, `enable`.
	Span pulumi.StringOutput `pulumi:"span"`
	// SPAN destination port.
	SpanDestPort pulumi.StringOutput `pulumi:"spanDestPort"`
	// SPAN direction. Valid values: `rx`, `tx`, `both`.
	SpanDirection pulumi.StringOutput `pulumi:"spanDirection"`
	// SPAN source port.
	SpanSourcePort pulumi.StringOutput `pulumi:"spanSourcePort"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// VLAN.
	Vlan pulumi.IntOutput `pulumi:"vlan"`
}

// NewVirtualswitch registers a new resource with the given unique name, arguments, and options.
func NewVirtualswitch(ctx *pulumi.Context,
	name string, args *VirtualswitchArgs, opts ...pulumi.ResourceOption) (*Virtualswitch, error) {
	if args == nil {
		args = &VirtualswitchArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Virtualswitch
	err := ctx.RegisterResource("fortios:system/virtualswitch:Virtualswitch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualswitch gets an existing Virtualswitch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualswitch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualswitchState, opts ...pulumi.ResourceOption) (*Virtualswitch, error) {
	var resource Virtualswitch
	err := ctx.ReadResource("fortios:system/virtualswitch:Virtualswitch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Virtualswitch resources.
type virtualswitchState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Name of the virtual switch.
	Name *string `pulumi:"name"`
	// Physical switch parent.
	PhysicalSwitch *string `pulumi:"physicalSwitch"`
	// Configure member ports. The structure of `port` block is documented below.
	Ports []VirtualswitchPort `pulumi:"ports"`
	// Enable/disable SPAN. Valid values: `disable`, `enable`.
	Span *string `pulumi:"span"`
	// SPAN destination port.
	SpanDestPort *string `pulumi:"spanDestPort"`
	// SPAN direction. Valid values: `rx`, `tx`, `both`.
	SpanDirection *string `pulumi:"spanDirection"`
	// SPAN source port.
	SpanSourcePort *string `pulumi:"spanSourcePort"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// VLAN.
	Vlan *int `pulumi:"vlan"`
}

type VirtualswitchState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Name of the virtual switch.
	Name pulumi.StringPtrInput
	// Physical switch parent.
	PhysicalSwitch pulumi.StringPtrInput
	// Configure member ports. The structure of `port` block is documented below.
	Ports VirtualswitchPortArrayInput
	// Enable/disable SPAN. Valid values: `disable`, `enable`.
	Span pulumi.StringPtrInput
	// SPAN destination port.
	SpanDestPort pulumi.StringPtrInput
	// SPAN direction. Valid values: `rx`, `tx`, `both`.
	SpanDirection pulumi.StringPtrInput
	// SPAN source port.
	SpanSourcePort pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// VLAN.
	Vlan pulumi.IntPtrInput
}

func (VirtualswitchState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualswitchState)(nil)).Elem()
}

type virtualswitchArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Name of the virtual switch.
	Name *string `pulumi:"name"`
	// Physical switch parent.
	PhysicalSwitch *string `pulumi:"physicalSwitch"`
	// Configure member ports. The structure of `port` block is documented below.
	Ports []VirtualswitchPort `pulumi:"ports"`
	// Enable/disable SPAN. Valid values: `disable`, `enable`.
	Span *string `pulumi:"span"`
	// SPAN destination port.
	SpanDestPort *string `pulumi:"spanDestPort"`
	// SPAN direction. Valid values: `rx`, `tx`, `both`.
	SpanDirection *string `pulumi:"spanDirection"`
	// SPAN source port.
	SpanSourcePort *string `pulumi:"spanSourcePort"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// VLAN.
	Vlan *int `pulumi:"vlan"`
}

// The set of arguments for constructing a Virtualswitch resource.
type VirtualswitchArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Name of the virtual switch.
	Name pulumi.StringPtrInput
	// Physical switch parent.
	PhysicalSwitch pulumi.StringPtrInput
	// Configure member ports. The structure of `port` block is documented below.
	Ports VirtualswitchPortArrayInput
	// Enable/disable SPAN. Valid values: `disable`, `enable`.
	Span pulumi.StringPtrInput
	// SPAN destination port.
	SpanDestPort pulumi.StringPtrInput
	// SPAN direction. Valid values: `rx`, `tx`, `both`.
	SpanDirection pulumi.StringPtrInput
	// SPAN source port.
	SpanSourcePort pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// VLAN.
	Vlan pulumi.IntPtrInput
}

func (VirtualswitchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualswitchArgs)(nil)).Elem()
}

type VirtualswitchInput interface {
	pulumi.Input

	ToVirtualswitchOutput() VirtualswitchOutput
	ToVirtualswitchOutputWithContext(ctx context.Context) VirtualswitchOutput
}

func (*Virtualswitch) ElementType() reflect.Type {
	return reflect.TypeOf((**Virtualswitch)(nil)).Elem()
}

func (i *Virtualswitch) ToVirtualswitchOutput() VirtualswitchOutput {
	return i.ToVirtualswitchOutputWithContext(context.Background())
}

func (i *Virtualswitch) ToVirtualswitchOutputWithContext(ctx context.Context) VirtualswitchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualswitchOutput)
}

// VirtualswitchArrayInput is an input type that accepts VirtualswitchArray and VirtualswitchArrayOutput values.
// You can construct a concrete instance of `VirtualswitchArrayInput` via:
//
//	VirtualswitchArray{ VirtualswitchArgs{...} }
type VirtualswitchArrayInput interface {
	pulumi.Input

	ToVirtualswitchArrayOutput() VirtualswitchArrayOutput
	ToVirtualswitchArrayOutputWithContext(context.Context) VirtualswitchArrayOutput
}

type VirtualswitchArray []VirtualswitchInput

func (VirtualswitchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Virtualswitch)(nil)).Elem()
}

func (i VirtualswitchArray) ToVirtualswitchArrayOutput() VirtualswitchArrayOutput {
	return i.ToVirtualswitchArrayOutputWithContext(context.Background())
}

func (i VirtualswitchArray) ToVirtualswitchArrayOutputWithContext(ctx context.Context) VirtualswitchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualswitchArrayOutput)
}

// VirtualswitchMapInput is an input type that accepts VirtualswitchMap and VirtualswitchMapOutput values.
// You can construct a concrete instance of `VirtualswitchMapInput` via:
//
//	VirtualswitchMap{ "key": VirtualswitchArgs{...} }
type VirtualswitchMapInput interface {
	pulumi.Input

	ToVirtualswitchMapOutput() VirtualswitchMapOutput
	ToVirtualswitchMapOutputWithContext(context.Context) VirtualswitchMapOutput
}

type VirtualswitchMap map[string]VirtualswitchInput

func (VirtualswitchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Virtualswitch)(nil)).Elem()
}

func (i VirtualswitchMap) ToVirtualswitchMapOutput() VirtualswitchMapOutput {
	return i.ToVirtualswitchMapOutputWithContext(context.Background())
}

func (i VirtualswitchMap) ToVirtualswitchMapOutputWithContext(ctx context.Context) VirtualswitchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualswitchMapOutput)
}

type VirtualswitchOutput struct{ *pulumi.OutputState }

func (VirtualswitchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Virtualswitch)(nil)).Elem()
}

func (o VirtualswitchOutput) ToVirtualswitchOutput() VirtualswitchOutput {
	return o
}

func (o VirtualswitchOutput) ToVirtualswitchOutputWithContext(ctx context.Context) VirtualswitchOutput {
	return o
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o VirtualswitchOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Virtualswitch) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o VirtualswitchOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Virtualswitch) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Name of the virtual switch.
func (o VirtualswitchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Virtualswitch) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Physical switch parent.
func (o VirtualswitchOutput) PhysicalSwitch() pulumi.StringOutput {
	return o.ApplyT(func(v *Virtualswitch) pulumi.StringOutput { return v.PhysicalSwitch }).(pulumi.StringOutput)
}

// Configure member ports. The structure of `port` block is documented below.
func (o VirtualswitchOutput) Ports() VirtualswitchPortArrayOutput {
	return o.ApplyT(func(v *Virtualswitch) VirtualswitchPortArrayOutput { return v.Ports }).(VirtualswitchPortArrayOutput)
}

// Enable/disable SPAN. Valid values: `disable`, `enable`.
func (o VirtualswitchOutput) Span() pulumi.StringOutput {
	return o.ApplyT(func(v *Virtualswitch) pulumi.StringOutput { return v.Span }).(pulumi.StringOutput)
}

// SPAN destination port.
func (o VirtualswitchOutput) SpanDestPort() pulumi.StringOutput {
	return o.ApplyT(func(v *Virtualswitch) pulumi.StringOutput { return v.SpanDestPort }).(pulumi.StringOutput)
}

// SPAN direction. Valid values: `rx`, `tx`, `both`.
func (o VirtualswitchOutput) SpanDirection() pulumi.StringOutput {
	return o.ApplyT(func(v *Virtualswitch) pulumi.StringOutput { return v.SpanDirection }).(pulumi.StringOutput)
}

// SPAN source port.
func (o VirtualswitchOutput) SpanSourcePort() pulumi.StringOutput {
	return o.ApplyT(func(v *Virtualswitch) pulumi.StringOutput { return v.SpanSourcePort }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o VirtualswitchOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Virtualswitch) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// VLAN.
func (o VirtualswitchOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v *Virtualswitch) pulumi.IntOutput { return v.Vlan }).(pulumi.IntOutput)
}

type VirtualswitchArrayOutput struct{ *pulumi.OutputState }

func (VirtualswitchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Virtualswitch)(nil)).Elem()
}

func (o VirtualswitchArrayOutput) ToVirtualswitchArrayOutput() VirtualswitchArrayOutput {
	return o
}

func (o VirtualswitchArrayOutput) ToVirtualswitchArrayOutputWithContext(ctx context.Context) VirtualswitchArrayOutput {
	return o
}

func (o VirtualswitchArrayOutput) Index(i pulumi.IntInput) VirtualswitchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Virtualswitch {
		return vs[0].([]*Virtualswitch)[vs[1].(int)]
	}).(VirtualswitchOutput)
}

type VirtualswitchMapOutput struct{ *pulumi.OutputState }

func (VirtualswitchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Virtualswitch)(nil)).Elem()
}

func (o VirtualswitchMapOutput) ToVirtualswitchMapOutput() VirtualswitchMapOutput {
	return o
}

func (o VirtualswitchMapOutput) ToVirtualswitchMapOutputWithContext(ctx context.Context) VirtualswitchMapOutput {
	return o
}

func (o VirtualswitchMapOutput) MapIndex(k pulumi.StringInput) VirtualswitchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Virtualswitch {
		return vs[0].(map[string]*Virtualswitch)[vs[1].(string)]
	}).(VirtualswitchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualswitchInput)(nil)).Elem(), &Virtualswitch{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualswitchArrayInput)(nil)).Elem(), VirtualswitchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualswitchMapInput)(nil)).Elem(), VirtualswitchMap{})
	pulumi.RegisterOutputType(VirtualswitchOutput{})
	pulumi.RegisterOutputType(VirtualswitchArrayOutput{})
	pulumi.RegisterOutputType(VirtualswitchMapOutput{})
}
