// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Provides a resource to configure administrator accounts of FortiOS.
//
// !> **Warning:** The resource will be deprecated and replaced by new resource `system.Admin`, we recommend that you use the new resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewAdminAdministrator(ctx, "admintest", &system.AdminAdministratorArgs{
//				Accprofile: pulumi.String("3d3"),
//				Comments:   pulumi.String("comments"),
//				Password:   pulumi.String("cc37331AC1"),
//				Trusthost1: pulumi.String("1.1.1.0 255.255.255.0"),
//				Trusthost2: pulumi.String("2.2.2.0 255.255.255.0"),
//				Vdoms: pulumi.StringArray{
//					pulumi.String("root"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AdminAdministrator struct {
	pulumi.CustomResourceState

	// Access profile for this administrator. Access profiles control administrator access to FortiGate features.
	Accprofile pulumi.StringOutput `pulumi:"accprofile"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// User name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Admin user password.
	// * `trusthostN` - Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit.
	Password    pulumi.StringOutput `pulumi:"password"`
	Trusthost1  pulumi.StringOutput `pulumi:"trusthost1"`
	Trusthost10 pulumi.StringOutput `pulumi:"trusthost10"`
	Trusthost2  pulumi.StringOutput `pulumi:"trusthost2"`
	Trusthost3  pulumi.StringOutput `pulumi:"trusthost3"`
	Trusthost4  pulumi.StringOutput `pulumi:"trusthost4"`
	Trusthost5  pulumi.StringOutput `pulumi:"trusthost5"`
	Trusthost6  pulumi.StringOutput `pulumi:"trusthost6"`
	Trusthost7  pulumi.StringOutput `pulumi:"trusthost7"`
	Trusthost8  pulumi.StringOutput `pulumi:"trusthost8"`
	Trusthost9  pulumi.StringOutput `pulumi:"trusthost9"`
	// Virtual domain(s) that the administrator can access.
	Vdoms pulumi.StringArrayOutput `pulumi:"vdoms"`
}

// NewAdminAdministrator registers a new resource with the given unique name, arguments, and options.
func NewAdminAdministrator(ctx *pulumi.Context,
	name string, args *AdminAdministratorArgs, opts ...pulumi.ResourceOption) (*AdminAdministrator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Accprofile == nil {
		return nil, errors.New("invalid value for required argument 'Accprofile'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AdminAdministrator
	err := ctx.RegisterResource("fortios:system/adminAdministrator:AdminAdministrator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdminAdministrator gets an existing AdminAdministrator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdminAdministrator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdminAdministratorState, opts ...pulumi.ResourceOption) (*AdminAdministrator, error) {
	var resource AdminAdministrator
	err := ctx.ReadResource("fortios:system/adminAdministrator:AdminAdministrator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdminAdministrator resources.
type adminAdministratorState struct {
	// Access profile for this administrator. Access profiles control administrator access to FortiGate features.
	Accprofile *string `pulumi:"accprofile"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// User name.
	Name *string `pulumi:"name"`
	// Admin user password.
	// * `trusthostN` - Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit.
	Password    *string `pulumi:"password"`
	Trusthost1  *string `pulumi:"trusthost1"`
	Trusthost10 *string `pulumi:"trusthost10"`
	Trusthost2  *string `pulumi:"trusthost2"`
	Trusthost3  *string `pulumi:"trusthost3"`
	Trusthost4  *string `pulumi:"trusthost4"`
	Trusthost5  *string `pulumi:"trusthost5"`
	Trusthost6  *string `pulumi:"trusthost6"`
	Trusthost7  *string `pulumi:"trusthost7"`
	Trusthost8  *string `pulumi:"trusthost8"`
	Trusthost9  *string `pulumi:"trusthost9"`
	// Virtual domain(s) that the administrator can access.
	Vdoms []string `pulumi:"vdoms"`
}

type AdminAdministratorState struct {
	// Access profile for this administrator. Access profiles control administrator access to FortiGate features.
	Accprofile pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// User name.
	Name pulumi.StringPtrInput
	// Admin user password.
	// * `trusthostN` - Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit.
	Password    pulumi.StringPtrInput
	Trusthost1  pulumi.StringPtrInput
	Trusthost10 pulumi.StringPtrInput
	Trusthost2  pulumi.StringPtrInput
	Trusthost3  pulumi.StringPtrInput
	Trusthost4  pulumi.StringPtrInput
	Trusthost5  pulumi.StringPtrInput
	Trusthost6  pulumi.StringPtrInput
	Trusthost7  pulumi.StringPtrInput
	Trusthost8  pulumi.StringPtrInput
	Trusthost9  pulumi.StringPtrInput
	// Virtual domain(s) that the administrator can access.
	Vdoms pulumi.StringArrayInput
}

func (AdminAdministratorState) ElementType() reflect.Type {
	return reflect.TypeOf((*adminAdministratorState)(nil)).Elem()
}

type adminAdministratorArgs struct {
	// Access profile for this administrator. Access profiles control administrator access to FortiGate features.
	Accprofile string `pulumi:"accprofile"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// User name.
	Name *string `pulumi:"name"`
	// Admin user password.
	// * `trusthostN` - Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit.
	Password    string  `pulumi:"password"`
	Trusthost1  *string `pulumi:"trusthost1"`
	Trusthost10 *string `pulumi:"trusthost10"`
	Trusthost2  *string `pulumi:"trusthost2"`
	Trusthost3  *string `pulumi:"trusthost3"`
	Trusthost4  *string `pulumi:"trusthost4"`
	Trusthost5  *string `pulumi:"trusthost5"`
	Trusthost6  *string `pulumi:"trusthost6"`
	Trusthost7  *string `pulumi:"trusthost7"`
	Trusthost8  *string `pulumi:"trusthost8"`
	Trusthost9  *string `pulumi:"trusthost9"`
	// Virtual domain(s) that the administrator can access.
	Vdoms []string `pulumi:"vdoms"`
}

// The set of arguments for constructing a AdminAdministrator resource.
type AdminAdministratorArgs struct {
	// Access profile for this administrator. Access profiles control administrator access to FortiGate features.
	Accprofile pulumi.StringInput
	// Comment.
	Comments pulumi.StringPtrInput
	// User name.
	Name pulumi.StringPtrInput
	// Admin user password.
	// * `trusthostN` - Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit.
	Password    pulumi.StringInput
	Trusthost1  pulumi.StringPtrInput
	Trusthost10 pulumi.StringPtrInput
	Trusthost2  pulumi.StringPtrInput
	Trusthost3  pulumi.StringPtrInput
	Trusthost4  pulumi.StringPtrInput
	Trusthost5  pulumi.StringPtrInput
	Trusthost6  pulumi.StringPtrInput
	Trusthost7  pulumi.StringPtrInput
	Trusthost8  pulumi.StringPtrInput
	Trusthost9  pulumi.StringPtrInput
	// Virtual domain(s) that the administrator can access.
	Vdoms pulumi.StringArrayInput
}

func (AdminAdministratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*adminAdministratorArgs)(nil)).Elem()
}

type AdminAdministratorInput interface {
	pulumi.Input

	ToAdminAdministratorOutput() AdminAdministratorOutput
	ToAdminAdministratorOutputWithContext(ctx context.Context) AdminAdministratorOutput
}

func (*AdminAdministrator) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminAdministrator)(nil)).Elem()
}

func (i *AdminAdministrator) ToAdminAdministratorOutput() AdminAdministratorOutput {
	return i.ToAdminAdministratorOutputWithContext(context.Background())
}

func (i *AdminAdministrator) ToAdminAdministratorOutputWithContext(ctx context.Context) AdminAdministratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminAdministratorOutput)
}

// AdminAdministratorArrayInput is an input type that accepts AdminAdministratorArray and AdminAdministratorArrayOutput values.
// You can construct a concrete instance of `AdminAdministratorArrayInput` via:
//
//	AdminAdministratorArray{ AdminAdministratorArgs{...} }
type AdminAdministratorArrayInput interface {
	pulumi.Input

	ToAdminAdministratorArrayOutput() AdminAdministratorArrayOutput
	ToAdminAdministratorArrayOutputWithContext(context.Context) AdminAdministratorArrayOutput
}

type AdminAdministratorArray []AdminAdministratorInput

func (AdminAdministratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdminAdministrator)(nil)).Elem()
}

func (i AdminAdministratorArray) ToAdminAdministratorArrayOutput() AdminAdministratorArrayOutput {
	return i.ToAdminAdministratorArrayOutputWithContext(context.Background())
}

func (i AdminAdministratorArray) ToAdminAdministratorArrayOutputWithContext(ctx context.Context) AdminAdministratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminAdministratorArrayOutput)
}

// AdminAdministratorMapInput is an input type that accepts AdminAdministratorMap and AdminAdministratorMapOutput values.
// You can construct a concrete instance of `AdminAdministratorMapInput` via:
//
//	AdminAdministratorMap{ "key": AdminAdministratorArgs{...} }
type AdminAdministratorMapInput interface {
	pulumi.Input

	ToAdminAdministratorMapOutput() AdminAdministratorMapOutput
	ToAdminAdministratorMapOutputWithContext(context.Context) AdminAdministratorMapOutput
}

type AdminAdministratorMap map[string]AdminAdministratorInput

func (AdminAdministratorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdminAdministrator)(nil)).Elem()
}

func (i AdminAdministratorMap) ToAdminAdministratorMapOutput() AdminAdministratorMapOutput {
	return i.ToAdminAdministratorMapOutputWithContext(context.Background())
}

func (i AdminAdministratorMap) ToAdminAdministratorMapOutputWithContext(ctx context.Context) AdminAdministratorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminAdministratorMapOutput)
}

type AdminAdministratorOutput struct{ *pulumi.OutputState }

func (AdminAdministratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminAdministrator)(nil)).Elem()
}

func (o AdminAdministratorOutput) ToAdminAdministratorOutput() AdminAdministratorOutput {
	return o
}

func (o AdminAdministratorOutput) ToAdminAdministratorOutputWithContext(ctx context.Context) AdminAdministratorOutput {
	return o
}

// Access profile for this administrator. Access profiles control administrator access to FortiGate features.
func (o AdminAdministratorOutput) Accprofile() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminAdministrator) pulumi.StringOutput { return v.Accprofile }).(pulumi.StringOutput)
}

// Comment.
func (o AdminAdministratorOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdminAdministrator) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// User name.
func (o AdminAdministratorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminAdministrator) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Admin user password.
// * `trusthostN` - Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit.
func (o AdminAdministratorOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminAdministrator) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o AdminAdministratorOutput) Trusthost1() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminAdministrator) pulumi.StringOutput { return v.Trusthost1 }).(pulumi.StringOutput)
}

func (o AdminAdministratorOutput) Trusthost10() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminAdministrator) pulumi.StringOutput { return v.Trusthost10 }).(pulumi.StringOutput)
}

func (o AdminAdministratorOutput) Trusthost2() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminAdministrator) pulumi.StringOutput { return v.Trusthost2 }).(pulumi.StringOutput)
}

func (o AdminAdministratorOutput) Trusthost3() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminAdministrator) pulumi.StringOutput { return v.Trusthost3 }).(pulumi.StringOutput)
}

func (o AdminAdministratorOutput) Trusthost4() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminAdministrator) pulumi.StringOutput { return v.Trusthost4 }).(pulumi.StringOutput)
}

func (o AdminAdministratorOutput) Trusthost5() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminAdministrator) pulumi.StringOutput { return v.Trusthost5 }).(pulumi.StringOutput)
}

func (o AdminAdministratorOutput) Trusthost6() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminAdministrator) pulumi.StringOutput { return v.Trusthost6 }).(pulumi.StringOutput)
}

func (o AdminAdministratorOutput) Trusthost7() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminAdministrator) pulumi.StringOutput { return v.Trusthost7 }).(pulumi.StringOutput)
}

func (o AdminAdministratorOutput) Trusthost8() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminAdministrator) pulumi.StringOutput { return v.Trusthost8 }).(pulumi.StringOutput)
}

func (o AdminAdministratorOutput) Trusthost9() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminAdministrator) pulumi.StringOutput { return v.Trusthost9 }).(pulumi.StringOutput)
}

// Virtual domain(s) that the administrator can access.
func (o AdminAdministratorOutput) Vdoms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdminAdministrator) pulumi.StringArrayOutput { return v.Vdoms }).(pulumi.StringArrayOutput)
}

type AdminAdministratorArrayOutput struct{ *pulumi.OutputState }

func (AdminAdministratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdminAdministrator)(nil)).Elem()
}

func (o AdminAdministratorArrayOutput) ToAdminAdministratorArrayOutput() AdminAdministratorArrayOutput {
	return o
}

func (o AdminAdministratorArrayOutput) ToAdminAdministratorArrayOutputWithContext(ctx context.Context) AdminAdministratorArrayOutput {
	return o
}

func (o AdminAdministratorArrayOutput) Index(i pulumi.IntInput) AdminAdministratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AdminAdministrator {
		return vs[0].([]*AdminAdministrator)[vs[1].(int)]
	}).(AdminAdministratorOutput)
}

type AdminAdministratorMapOutput struct{ *pulumi.OutputState }

func (AdminAdministratorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdminAdministrator)(nil)).Elem()
}

func (o AdminAdministratorMapOutput) ToAdminAdministratorMapOutput() AdminAdministratorMapOutput {
	return o
}

func (o AdminAdministratorMapOutput) ToAdminAdministratorMapOutputWithContext(ctx context.Context) AdminAdministratorMapOutput {
	return o
}

func (o AdminAdministratorMapOutput) MapIndex(k pulumi.StringInput) AdminAdministratorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AdminAdministrator {
		return vs[0].(map[string]*AdminAdministrator)[vs[1].(string)]
	}).(AdminAdministratorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdminAdministratorInput)(nil)).Elem(), &AdminAdministrator{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminAdministratorArrayInput)(nil)).Elem(), AdminAdministratorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminAdministratorMapInput)(nil)).Elem(), AdminAdministratorMap{})
	pulumi.RegisterOutputType(AdminAdministratorOutput{})
	pulumi.RegisterOutputType(AdminAdministratorArrayOutput{})
	pulumi.RegisterOutputType(AdminAdministratorMapOutput{})
}
