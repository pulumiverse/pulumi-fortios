// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure IPv6 neighbor cache table.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewIpv6neighborcache(ctx, "trname", &system.Ipv6neighborcacheArgs{
//				Fosid:     pulumi.Int(1),
//				Interface: pulumi.String("port2"),
//				Ipv6:      pulumi.String("fe80::b11a:5ae3:198:ba1c"),
//				Mac:       pulumi.String("00:00:00:00:00:00"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// System Ipv6NeighborCache can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/ipv6neighborcache:Ipv6neighborcache labelname {{fosid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/ipv6neighborcache:Ipv6neighborcache labelname {{fosid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Ipv6neighborcache struct {
	pulumi.CustomResourceState

	// Unique integer ID of the entry.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Select the associated interface name from available options.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// IPv6 address (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
	Ipv6 pulumi.StringOutput `pulumi:"ipv6"`
	// MAC address (format: xx:xx:xx:xx:xx:xx).
	Mac pulumi.StringOutput `pulumi:"mac"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewIpv6neighborcache registers a new resource with the given unique name, arguments, and options.
func NewIpv6neighborcache(ctx *pulumi.Context,
	name string, args *Ipv6neighborcacheArgs, opts ...pulumi.ResourceOption) (*Ipv6neighborcache, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Ipv6 == nil {
		return nil, errors.New("invalid value for required argument 'Ipv6'")
	}
	if args.Mac == nil {
		return nil, errors.New("invalid value for required argument 'Mac'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ipv6neighborcache
	err := ctx.RegisterResource("fortios:system/ipv6neighborcache:Ipv6neighborcache", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpv6neighborcache gets an existing Ipv6neighborcache resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpv6neighborcache(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ipv6neighborcacheState, opts ...pulumi.ResourceOption) (*Ipv6neighborcache, error) {
	var resource Ipv6neighborcache
	err := ctx.ReadResource("fortios:system/ipv6neighborcache:Ipv6neighborcache", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipv6neighborcache resources.
type ipv6neighborcacheState struct {
	// Unique integer ID of the entry.
	Fosid *int `pulumi:"fosid"`
	// Select the associated interface name from available options.
	Interface *string `pulumi:"interface"`
	// IPv6 address (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
	Ipv6 *string `pulumi:"ipv6"`
	// MAC address (format: xx:xx:xx:xx:xx:xx).
	Mac *string `pulumi:"mac"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type Ipv6neighborcacheState struct {
	// Unique integer ID of the entry.
	Fosid pulumi.IntPtrInput
	// Select the associated interface name from available options.
	Interface pulumi.StringPtrInput
	// IPv6 address (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
	Ipv6 pulumi.StringPtrInput
	// MAC address (format: xx:xx:xx:xx:xx:xx).
	Mac pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Ipv6neighborcacheState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv6neighborcacheState)(nil)).Elem()
}

type ipv6neighborcacheArgs struct {
	// Unique integer ID of the entry.
	Fosid int `pulumi:"fosid"`
	// Select the associated interface name from available options.
	Interface string `pulumi:"interface"`
	// IPv6 address (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
	Ipv6 string `pulumi:"ipv6"`
	// MAC address (format: xx:xx:xx:xx:xx:xx).
	Mac string `pulumi:"mac"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Ipv6neighborcache resource.
type Ipv6neighborcacheArgs struct {
	// Unique integer ID of the entry.
	Fosid pulumi.IntInput
	// Select the associated interface name from available options.
	Interface pulumi.StringInput
	// IPv6 address (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
	Ipv6 pulumi.StringInput
	// MAC address (format: xx:xx:xx:xx:xx:xx).
	Mac pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Ipv6neighborcacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv6neighborcacheArgs)(nil)).Elem()
}

type Ipv6neighborcacheInput interface {
	pulumi.Input

	ToIpv6neighborcacheOutput() Ipv6neighborcacheOutput
	ToIpv6neighborcacheOutputWithContext(ctx context.Context) Ipv6neighborcacheOutput
}

func (*Ipv6neighborcache) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv6neighborcache)(nil)).Elem()
}

func (i *Ipv6neighborcache) ToIpv6neighborcacheOutput() Ipv6neighborcacheOutput {
	return i.ToIpv6neighborcacheOutputWithContext(context.Background())
}

func (i *Ipv6neighborcache) ToIpv6neighborcacheOutputWithContext(ctx context.Context) Ipv6neighborcacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv6neighborcacheOutput)
}

// Ipv6neighborcacheArrayInput is an input type that accepts Ipv6neighborcacheArray and Ipv6neighborcacheArrayOutput values.
// You can construct a concrete instance of `Ipv6neighborcacheArrayInput` via:
//
//	Ipv6neighborcacheArray{ Ipv6neighborcacheArgs{...} }
type Ipv6neighborcacheArrayInput interface {
	pulumi.Input

	ToIpv6neighborcacheArrayOutput() Ipv6neighborcacheArrayOutput
	ToIpv6neighborcacheArrayOutputWithContext(context.Context) Ipv6neighborcacheArrayOutput
}

type Ipv6neighborcacheArray []Ipv6neighborcacheInput

func (Ipv6neighborcacheArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv6neighborcache)(nil)).Elem()
}

func (i Ipv6neighborcacheArray) ToIpv6neighborcacheArrayOutput() Ipv6neighborcacheArrayOutput {
	return i.ToIpv6neighborcacheArrayOutputWithContext(context.Background())
}

func (i Ipv6neighborcacheArray) ToIpv6neighborcacheArrayOutputWithContext(ctx context.Context) Ipv6neighborcacheArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv6neighborcacheArrayOutput)
}

// Ipv6neighborcacheMapInput is an input type that accepts Ipv6neighborcacheMap and Ipv6neighborcacheMapOutput values.
// You can construct a concrete instance of `Ipv6neighborcacheMapInput` via:
//
//	Ipv6neighborcacheMap{ "key": Ipv6neighborcacheArgs{...} }
type Ipv6neighborcacheMapInput interface {
	pulumi.Input

	ToIpv6neighborcacheMapOutput() Ipv6neighborcacheMapOutput
	ToIpv6neighborcacheMapOutputWithContext(context.Context) Ipv6neighborcacheMapOutput
}

type Ipv6neighborcacheMap map[string]Ipv6neighborcacheInput

func (Ipv6neighborcacheMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv6neighborcache)(nil)).Elem()
}

func (i Ipv6neighborcacheMap) ToIpv6neighborcacheMapOutput() Ipv6neighborcacheMapOutput {
	return i.ToIpv6neighborcacheMapOutputWithContext(context.Background())
}

func (i Ipv6neighborcacheMap) ToIpv6neighborcacheMapOutputWithContext(ctx context.Context) Ipv6neighborcacheMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv6neighborcacheMapOutput)
}

type Ipv6neighborcacheOutput struct{ *pulumi.OutputState }

func (Ipv6neighborcacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv6neighborcache)(nil)).Elem()
}

func (o Ipv6neighborcacheOutput) ToIpv6neighborcacheOutput() Ipv6neighborcacheOutput {
	return o
}

func (o Ipv6neighborcacheOutput) ToIpv6neighborcacheOutputWithContext(ctx context.Context) Ipv6neighborcacheOutput {
	return o
}

// Unique integer ID of the entry.
func (o Ipv6neighborcacheOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *Ipv6neighborcache) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Select the associated interface name from available options.
func (o Ipv6neighborcacheOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6neighborcache) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// IPv6 address (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
func (o Ipv6neighborcacheOutput) Ipv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6neighborcache) pulumi.StringOutput { return v.Ipv6 }).(pulumi.StringOutput)
}

// MAC address (format: xx:xx:xx:xx:xx:xx).
func (o Ipv6neighborcacheOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6neighborcache) pulumi.StringOutput { return v.Mac }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o Ipv6neighborcacheOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6neighborcache) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type Ipv6neighborcacheArrayOutput struct{ *pulumi.OutputState }

func (Ipv6neighborcacheArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv6neighborcache)(nil)).Elem()
}

func (o Ipv6neighborcacheArrayOutput) ToIpv6neighborcacheArrayOutput() Ipv6neighborcacheArrayOutput {
	return o
}

func (o Ipv6neighborcacheArrayOutput) ToIpv6neighborcacheArrayOutputWithContext(ctx context.Context) Ipv6neighborcacheArrayOutput {
	return o
}

func (o Ipv6neighborcacheArrayOutput) Index(i pulumi.IntInput) Ipv6neighborcacheOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipv6neighborcache {
		return vs[0].([]*Ipv6neighborcache)[vs[1].(int)]
	}).(Ipv6neighborcacheOutput)
}

type Ipv6neighborcacheMapOutput struct{ *pulumi.OutputState }

func (Ipv6neighborcacheMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv6neighborcache)(nil)).Elem()
}

func (o Ipv6neighborcacheMapOutput) ToIpv6neighborcacheMapOutput() Ipv6neighborcacheMapOutput {
	return o
}

func (o Ipv6neighborcacheMapOutput) ToIpv6neighborcacheMapOutputWithContext(ctx context.Context) Ipv6neighborcacheMapOutput {
	return o
}

func (o Ipv6neighborcacheMapOutput) MapIndex(k pulumi.StringInput) Ipv6neighborcacheOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipv6neighborcache {
		return vs[0].(map[string]*Ipv6neighborcache)[vs[1].(string)]
	}).(Ipv6neighborcacheOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv6neighborcacheInput)(nil)).Elem(), &Ipv6neighborcache{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv6neighborcacheArrayInput)(nil)).Elem(), Ipv6neighborcacheArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv6neighborcacheMapInput)(nil)).Elem(), Ipv6neighborcacheMap{})
	pulumi.RegisterOutputType(Ipv6neighborcacheOutput{})
	pulumi.RegisterOutputType(Ipv6neighborcacheArrayOutput{})
	pulumi.RegisterOutputType(Ipv6neighborcacheMapOutput{})
}
