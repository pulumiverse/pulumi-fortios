// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure Link Health Monitor.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewLinkmonitor(ctx, "trname", &system.LinkmonitorArgs{
//				AddrMode:     pulumi.String("ipv4"),
//				Failtime:     pulumi.Int(5),
//				GatewayIp:    pulumi.String("2.2.2.2"),
//				GatewayIp6:   pulumi.String("::"),
//				HaPriority:   pulumi.Int(1),
//				HttpAgent:    pulumi.String("Chrome/ Safari/"),
//				HttpGet:      pulumi.String("/"),
//				Interval:     pulumi.Int(1),
//				PacketSize:   pulumi.Int(64),
//				Port:         pulumi.Int(80),
//				Protocol:     pulumi.String("ping"),
//				Recoverytime: pulumi.Int(5),
//				SecurityMode: pulumi.String("none"),
//				Servers: system.LinkmonitorServerArray{
//					&system.LinkmonitorServerArgs{
//						Address: pulumi.String("3.3.3.3"),
//					},
//				},
//				SourceIp:               pulumi.String("0.0.0.0"),
//				SourceIp6:              pulumi.String("::"),
//				Srcintf:                pulumi.String("port4"),
//				Status:                 pulumi.String("enable"),
//				UpdateCascadeInterface: pulumi.String("enable"),
//				UpdateStaticRoute:      pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// System LinkMonitor can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/linkmonitor:Linkmonitor labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/linkmonitor:Linkmonitor labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Linkmonitor struct {
	pulumi.CustomResourceState

	// Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddrMode pulumi.StringOutput `pulumi:"addrMode"`
	// Traffic class ID.
	ClassId pulumi.IntOutput `pulumi:"classId"`
	// Differentiated services code point (DSCP) in the IP header of the probe packet.
	Diffservcode pulumi.StringOutput `pulumi:"diffservcode"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Threshold weight to trigger link failure alert.
	FailWeight pulumi.IntOutput `pulumi:"failWeight"`
	// Number of retry attempts before the server is considered down (1 - 10, default = 5)
	Failtime pulumi.IntOutput `pulumi:"failtime"`
	// Gateway IP address used to probe the server.
	GatewayIp pulumi.StringOutput `pulumi:"gatewayIp"`
	// Gateway IPv6 address used to probe the server.
	GatewayIp6 pulumi.StringOutput `pulumi:"gatewayIp6"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// HA election priority (1 - 50).
	HaPriority pulumi.IntOutput `pulumi:"haPriority"`
	// String in the http-agent field in the HTTP header.
	HttpAgent pulumi.StringOutput `pulumi:"httpAgent"`
	// If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
	HttpGet pulumi.StringOutput `pulumi:"httpGet"`
	// String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
	HttpMatch pulumi.StringOutput `pulumi:"httpMatch"`
	// Detection interval (1 - 3600 sec, default = 5).
	Interval pulumi.IntOutput `pulumi:"interval"`
	// Link monitor name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Packet size of a twamp test session,
	PacketSize pulumi.IntOutput `pulumi:"packetSize"`
	// Twamp controller password in authentication mode
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Port number of the traffic to be used to monitor the server.
	Port pulumi.IntOutput `pulumi:"port"`
	// Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
	ProbeCount pulumi.IntOutput `pulumi:"probeCount"`
	// Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
	ProbeTimeout pulumi.IntOutput `pulumi:"probeTimeout"`
	// Protocols used to monitor the server.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Number of successful responses received before server is considered recovered (1 - 10, default = 5).
	Recoverytime pulumi.IntOutput `pulumi:"recoverytime"`
	// Subnet to monitor. The structure of `route` block is documented below.
	Routes LinkmonitorRouteArrayOutput `pulumi:"routes"`
	// Twamp controller security mode. Valid values: `none`, `authentication`.
	SecurityMode pulumi.StringOutput `pulumi:"securityMode"`
	// Mode of server configuration. Valid values: `default`, `individual`.
	ServerConfig pulumi.StringOutput `pulumi:"serverConfig"`
	// Servers for link-monitor to monitor. The structure of `serverList` block is documented below.
	ServerLists LinkmonitorServerListArrayOutput `pulumi:"serverLists"`
	// Server type (static or dynamic). Valid values: `static`, `dynamic`.
	ServerType pulumi.StringOutput `pulumi:"serverType"`
	// IP address of the server(s) to be monitored. The structure of `server` block is documented below.
	Servers LinkmonitorServerArrayOutput `pulumi:"servers"`
	// Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
	ServiceDetection pulumi.StringOutput `pulumi:"serviceDetection"`
	// Source IP address used in packet to the server.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Source IPv6 address used in packet to the server.
	SourceIp6 pulumi.StringOutput `pulumi:"sourceIp6"`
	// Interface that receives the traffic to be monitored.
	Srcintf pulumi.StringOutput `pulumi:"srcintf"`
	// Enable/disable this link monitor. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Enable/disable update cascade interface. Valid values: `enable`, `disable`.
	UpdateCascadeInterface pulumi.StringOutput `pulumi:"updateCascadeInterface"`
	// Enable/disable updating the policy route. Valid values: `enable`, `disable`.
	UpdatePolicyRoute pulumi.StringOutput `pulumi:"updatePolicyRoute"`
	// Enable/disable updating the static route. Valid values: `enable`, `disable`.
	UpdateStaticRoute pulumi.StringOutput `pulumi:"updateStaticRoute"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewLinkmonitor registers a new resource with the given unique name, arguments, and options.
func NewLinkmonitor(ctx *pulumi.Context,
	name string, args *LinkmonitorArgs, opts ...pulumi.ResourceOption) (*Linkmonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Servers == nil {
		return nil, errors.New("invalid value for required argument 'Servers'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Linkmonitor
	err := ctx.RegisterResource("fortios:system/linkmonitor:Linkmonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkmonitor gets an existing Linkmonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkmonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkmonitorState, opts ...pulumi.ResourceOption) (*Linkmonitor, error) {
	var resource Linkmonitor
	err := ctx.ReadResource("fortios:system/linkmonitor:Linkmonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Linkmonitor resources.
type linkmonitorState struct {
	// Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddrMode *string `pulumi:"addrMode"`
	// Traffic class ID.
	ClassId *int `pulumi:"classId"`
	// Differentiated services code point (DSCP) in the IP header of the probe packet.
	Diffservcode *string `pulumi:"diffservcode"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Threshold weight to trigger link failure alert.
	FailWeight *int `pulumi:"failWeight"`
	// Number of retry attempts before the server is considered down (1 - 10, default = 5)
	Failtime *int `pulumi:"failtime"`
	// Gateway IP address used to probe the server.
	GatewayIp *string `pulumi:"gatewayIp"`
	// Gateway IPv6 address used to probe the server.
	GatewayIp6 *string `pulumi:"gatewayIp6"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// HA election priority (1 - 50).
	HaPriority *int `pulumi:"haPriority"`
	// String in the http-agent field in the HTTP header.
	HttpAgent *string `pulumi:"httpAgent"`
	// If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
	HttpGet *string `pulumi:"httpGet"`
	// String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
	HttpMatch *string `pulumi:"httpMatch"`
	// Detection interval (1 - 3600 sec, default = 5).
	Interval *int `pulumi:"interval"`
	// Link monitor name.
	Name *string `pulumi:"name"`
	// Packet size of a twamp test session,
	PacketSize *int `pulumi:"packetSize"`
	// Twamp controller password in authentication mode
	Password *string `pulumi:"password"`
	// Port number of the traffic to be used to monitor the server.
	Port *int `pulumi:"port"`
	// Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
	ProbeCount *int `pulumi:"probeCount"`
	// Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
	ProbeTimeout *int `pulumi:"probeTimeout"`
	// Protocols used to monitor the server.
	Protocol *string `pulumi:"protocol"`
	// Number of successful responses received before server is considered recovered (1 - 10, default = 5).
	Recoverytime *int `pulumi:"recoverytime"`
	// Subnet to monitor. The structure of `route` block is documented below.
	Routes []LinkmonitorRoute `pulumi:"routes"`
	// Twamp controller security mode. Valid values: `none`, `authentication`.
	SecurityMode *string `pulumi:"securityMode"`
	// Mode of server configuration. Valid values: `default`, `individual`.
	ServerConfig *string `pulumi:"serverConfig"`
	// Servers for link-monitor to monitor. The structure of `serverList` block is documented below.
	ServerLists []LinkmonitorServerList `pulumi:"serverLists"`
	// Server type (static or dynamic). Valid values: `static`, `dynamic`.
	ServerType *string `pulumi:"serverType"`
	// IP address of the server(s) to be monitored. The structure of `server` block is documented below.
	Servers []LinkmonitorServer `pulumi:"servers"`
	// Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
	ServiceDetection *string `pulumi:"serviceDetection"`
	// Source IP address used in packet to the server.
	SourceIp *string `pulumi:"sourceIp"`
	// Source IPv6 address used in packet to the server.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// Interface that receives the traffic to be monitored.
	Srcintf *string `pulumi:"srcintf"`
	// Enable/disable this link monitor. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Enable/disable update cascade interface. Valid values: `enable`, `disable`.
	UpdateCascadeInterface *string `pulumi:"updateCascadeInterface"`
	// Enable/disable updating the policy route. Valid values: `enable`, `disable`.
	UpdatePolicyRoute *string `pulumi:"updatePolicyRoute"`
	// Enable/disable updating the static route. Valid values: `enable`, `disable`.
	UpdateStaticRoute *string `pulumi:"updateStaticRoute"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type LinkmonitorState struct {
	// Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddrMode pulumi.StringPtrInput
	// Traffic class ID.
	ClassId pulumi.IntPtrInput
	// Differentiated services code point (DSCP) in the IP header of the probe packet.
	Diffservcode pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Threshold weight to trigger link failure alert.
	FailWeight pulumi.IntPtrInput
	// Number of retry attempts before the server is considered down (1 - 10, default = 5)
	Failtime pulumi.IntPtrInput
	// Gateway IP address used to probe the server.
	GatewayIp pulumi.StringPtrInput
	// Gateway IPv6 address used to probe the server.
	GatewayIp6 pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// HA election priority (1 - 50).
	HaPriority pulumi.IntPtrInput
	// String in the http-agent field in the HTTP header.
	HttpAgent pulumi.StringPtrInput
	// If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
	HttpGet pulumi.StringPtrInput
	// String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
	HttpMatch pulumi.StringPtrInput
	// Detection interval (1 - 3600 sec, default = 5).
	Interval pulumi.IntPtrInput
	// Link monitor name.
	Name pulumi.StringPtrInput
	// Packet size of a twamp test session,
	PacketSize pulumi.IntPtrInput
	// Twamp controller password in authentication mode
	Password pulumi.StringPtrInput
	// Port number of the traffic to be used to monitor the server.
	Port pulumi.IntPtrInput
	// Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
	ProbeCount pulumi.IntPtrInput
	// Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
	ProbeTimeout pulumi.IntPtrInput
	// Protocols used to monitor the server.
	Protocol pulumi.StringPtrInput
	// Number of successful responses received before server is considered recovered (1 - 10, default = 5).
	Recoverytime pulumi.IntPtrInput
	// Subnet to monitor. The structure of `route` block is documented below.
	Routes LinkmonitorRouteArrayInput
	// Twamp controller security mode. Valid values: `none`, `authentication`.
	SecurityMode pulumi.StringPtrInput
	// Mode of server configuration. Valid values: `default`, `individual`.
	ServerConfig pulumi.StringPtrInput
	// Servers for link-monitor to monitor. The structure of `serverList` block is documented below.
	ServerLists LinkmonitorServerListArrayInput
	// Server type (static or dynamic). Valid values: `static`, `dynamic`.
	ServerType pulumi.StringPtrInput
	// IP address of the server(s) to be monitored. The structure of `server` block is documented below.
	Servers LinkmonitorServerArrayInput
	// Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
	ServiceDetection pulumi.StringPtrInput
	// Source IP address used in packet to the server.
	SourceIp pulumi.StringPtrInput
	// Source IPv6 address used in packet to the server.
	SourceIp6 pulumi.StringPtrInput
	// Interface that receives the traffic to be monitored.
	Srcintf pulumi.StringPtrInput
	// Enable/disable this link monitor. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Enable/disable update cascade interface. Valid values: `enable`, `disable`.
	UpdateCascadeInterface pulumi.StringPtrInput
	// Enable/disable updating the policy route. Valid values: `enable`, `disable`.
	UpdatePolicyRoute pulumi.StringPtrInput
	// Enable/disable updating the static route. Valid values: `enable`, `disable`.
	UpdateStaticRoute pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (LinkmonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkmonitorState)(nil)).Elem()
}

type linkmonitorArgs struct {
	// Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddrMode *string `pulumi:"addrMode"`
	// Traffic class ID.
	ClassId *int `pulumi:"classId"`
	// Differentiated services code point (DSCP) in the IP header of the probe packet.
	Diffservcode *string `pulumi:"diffservcode"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Threshold weight to trigger link failure alert.
	FailWeight *int `pulumi:"failWeight"`
	// Number of retry attempts before the server is considered down (1 - 10, default = 5)
	Failtime *int `pulumi:"failtime"`
	// Gateway IP address used to probe the server.
	GatewayIp *string `pulumi:"gatewayIp"`
	// Gateway IPv6 address used to probe the server.
	GatewayIp6 *string `pulumi:"gatewayIp6"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// HA election priority (1 - 50).
	HaPriority *int `pulumi:"haPriority"`
	// String in the http-agent field in the HTTP header.
	HttpAgent *string `pulumi:"httpAgent"`
	// If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
	HttpGet *string `pulumi:"httpGet"`
	// String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
	HttpMatch *string `pulumi:"httpMatch"`
	// Detection interval (1 - 3600 sec, default = 5).
	Interval *int `pulumi:"interval"`
	// Link monitor name.
	Name *string `pulumi:"name"`
	// Packet size of a twamp test session,
	PacketSize *int `pulumi:"packetSize"`
	// Twamp controller password in authentication mode
	Password *string `pulumi:"password"`
	// Port number of the traffic to be used to monitor the server.
	Port *int `pulumi:"port"`
	// Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
	ProbeCount *int `pulumi:"probeCount"`
	// Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
	ProbeTimeout *int `pulumi:"probeTimeout"`
	// Protocols used to monitor the server.
	Protocol *string `pulumi:"protocol"`
	// Number of successful responses received before server is considered recovered (1 - 10, default = 5).
	Recoverytime *int `pulumi:"recoverytime"`
	// Subnet to monitor. The structure of `route` block is documented below.
	Routes []LinkmonitorRoute `pulumi:"routes"`
	// Twamp controller security mode. Valid values: `none`, `authentication`.
	SecurityMode *string `pulumi:"securityMode"`
	// Mode of server configuration. Valid values: `default`, `individual`.
	ServerConfig *string `pulumi:"serverConfig"`
	// Servers for link-monitor to monitor. The structure of `serverList` block is documented below.
	ServerLists []LinkmonitorServerList `pulumi:"serverLists"`
	// Server type (static or dynamic). Valid values: `static`, `dynamic`.
	ServerType *string `pulumi:"serverType"`
	// IP address of the server(s) to be monitored. The structure of `server` block is documented below.
	Servers []LinkmonitorServer `pulumi:"servers"`
	// Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
	ServiceDetection *string `pulumi:"serviceDetection"`
	// Source IP address used in packet to the server.
	SourceIp *string `pulumi:"sourceIp"`
	// Source IPv6 address used in packet to the server.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// Interface that receives the traffic to be monitored.
	Srcintf *string `pulumi:"srcintf"`
	// Enable/disable this link monitor. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Enable/disable update cascade interface. Valid values: `enable`, `disable`.
	UpdateCascadeInterface *string `pulumi:"updateCascadeInterface"`
	// Enable/disable updating the policy route. Valid values: `enable`, `disable`.
	UpdatePolicyRoute *string `pulumi:"updatePolicyRoute"`
	// Enable/disable updating the static route. Valid values: `enable`, `disable`.
	UpdateStaticRoute *string `pulumi:"updateStaticRoute"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Linkmonitor resource.
type LinkmonitorArgs struct {
	// Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddrMode pulumi.StringPtrInput
	// Traffic class ID.
	ClassId pulumi.IntPtrInput
	// Differentiated services code point (DSCP) in the IP header of the probe packet.
	Diffservcode pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Threshold weight to trigger link failure alert.
	FailWeight pulumi.IntPtrInput
	// Number of retry attempts before the server is considered down (1 - 10, default = 5)
	Failtime pulumi.IntPtrInput
	// Gateway IP address used to probe the server.
	GatewayIp pulumi.StringPtrInput
	// Gateway IPv6 address used to probe the server.
	GatewayIp6 pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// HA election priority (1 - 50).
	HaPriority pulumi.IntPtrInput
	// String in the http-agent field in the HTTP header.
	HttpAgent pulumi.StringPtrInput
	// If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
	HttpGet pulumi.StringPtrInput
	// String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
	HttpMatch pulumi.StringPtrInput
	// Detection interval (1 - 3600 sec, default = 5).
	Interval pulumi.IntPtrInput
	// Link monitor name.
	Name pulumi.StringPtrInput
	// Packet size of a twamp test session,
	PacketSize pulumi.IntPtrInput
	// Twamp controller password in authentication mode
	Password pulumi.StringPtrInput
	// Port number of the traffic to be used to monitor the server.
	Port pulumi.IntPtrInput
	// Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
	ProbeCount pulumi.IntPtrInput
	// Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
	ProbeTimeout pulumi.IntPtrInput
	// Protocols used to monitor the server.
	Protocol pulumi.StringPtrInput
	// Number of successful responses received before server is considered recovered (1 - 10, default = 5).
	Recoverytime pulumi.IntPtrInput
	// Subnet to monitor. The structure of `route` block is documented below.
	Routes LinkmonitorRouteArrayInput
	// Twamp controller security mode. Valid values: `none`, `authentication`.
	SecurityMode pulumi.StringPtrInput
	// Mode of server configuration. Valid values: `default`, `individual`.
	ServerConfig pulumi.StringPtrInput
	// Servers for link-monitor to monitor. The structure of `serverList` block is documented below.
	ServerLists LinkmonitorServerListArrayInput
	// Server type (static or dynamic). Valid values: `static`, `dynamic`.
	ServerType pulumi.StringPtrInput
	// IP address of the server(s) to be monitored. The structure of `server` block is documented below.
	Servers LinkmonitorServerArrayInput
	// Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
	ServiceDetection pulumi.StringPtrInput
	// Source IP address used in packet to the server.
	SourceIp pulumi.StringPtrInput
	// Source IPv6 address used in packet to the server.
	SourceIp6 pulumi.StringPtrInput
	// Interface that receives the traffic to be monitored.
	Srcintf pulumi.StringPtrInput
	// Enable/disable this link monitor. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Enable/disable update cascade interface. Valid values: `enable`, `disable`.
	UpdateCascadeInterface pulumi.StringPtrInput
	// Enable/disable updating the policy route. Valid values: `enable`, `disable`.
	UpdatePolicyRoute pulumi.StringPtrInput
	// Enable/disable updating the static route. Valid values: `enable`, `disable`.
	UpdateStaticRoute pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (LinkmonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkmonitorArgs)(nil)).Elem()
}

type LinkmonitorInput interface {
	pulumi.Input

	ToLinkmonitorOutput() LinkmonitorOutput
	ToLinkmonitorOutputWithContext(ctx context.Context) LinkmonitorOutput
}

func (*Linkmonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**Linkmonitor)(nil)).Elem()
}

func (i *Linkmonitor) ToLinkmonitorOutput() LinkmonitorOutput {
	return i.ToLinkmonitorOutputWithContext(context.Background())
}

func (i *Linkmonitor) ToLinkmonitorOutputWithContext(ctx context.Context) LinkmonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkmonitorOutput)
}

// LinkmonitorArrayInput is an input type that accepts LinkmonitorArray and LinkmonitorArrayOutput values.
// You can construct a concrete instance of `LinkmonitorArrayInput` via:
//
//	LinkmonitorArray{ LinkmonitorArgs{...} }
type LinkmonitorArrayInput interface {
	pulumi.Input

	ToLinkmonitorArrayOutput() LinkmonitorArrayOutput
	ToLinkmonitorArrayOutputWithContext(context.Context) LinkmonitorArrayOutput
}

type LinkmonitorArray []LinkmonitorInput

func (LinkmonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Linkmonitor)(nil)).Elem()
}

func (i LinkmonitorArray) ToLinkmonitorArrayOutput() LinkmonitorArrayOutput {
	return i.ToLinkmonitorArrayOutputWithContext(context.Background())
}

func (i LinkmonitorArray) ToLinkmonitorArrayOutputWithContext(ctx context.Context) LinkmonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkmonitorArrayOutput)
}

// LinkmonitorMapInput is an input type that accepts LinkmonitorMap and LinkmonitorMapOutput values.
// You can construct a concrete instance of `LinkmonitorMapInput` via:
//
//	LinkmonitorMap{ "key": LinkmonitorArgs{...} }
type LinkmonitorMapInput interface {
	pulumi.Input

	ToLinkmonitorMapOutput() LinkmonitorMapOutput
	ToLinkmonitorMapOutputWithContext(context.Context) LinkmonitorMapOutput
}

type LinkmonitorMap map[string]LinkmonitorInput

func (LinkmonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Linkmonitor)(nil)).Elem()
}

func (i LinkmonitorMap) ToLinkmonitorMapOutput() LinkmonitorMapOutput {
	return i.ToLinkmonitorMapOutputWithContext(context.Background())
}

func (i LinkmonitorMap) ToLinkmonitorMapOutputWithContext(ctx context.Context) LinkmonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkmonitorMapOutput)
}

type LinkmonitorOutput struct{ *pulumi.OutputState }

func (LinkmonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Linkmonitor)(nil)).Elem()
}

func (o LinkmonitorOutput) ToLinkmonitorOutput() LinkmonitorOutput {
	return o
}

func (o LinkmonitorOutput) ToLinkmonitorOutputWithContext(ctx context.Context) LinkmonitorOutput {
	return o
}

// Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
func (o LinkmonitorOutput) AddrMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.AddrMode }).(pulumi.StringOutput)
}

// Traffic class ID.
func (o LinkmonitorOutput) ClassId() pulumi.IntOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.IntOutput { return v.ClassId }).(pulumi.IntOutput)
}

// Differentiated services code point (DSCP) in the IP header of the probe packet.
func (o LinkmonitorOutput) Diffservcode() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.Diffservcode }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o LinkmonitorOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Threshold weight to trigger link failure alert.
func (o LinkmonitorOutput) FailWeight() pulumi.IntOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.IntOutput { return v.FailWeight }).(pulumi.IntOutput)
}

// Number of retry attempts before the server is considered down (1 - 10, default = 5)
func (o LinkmonitorOutput) Failtime() pulumi.IntOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.IntOutput { return v.Failtime }).(pulumi.IntOutput)
}

// Gateway IP address used to probe the server.
func (o LinkmonitorOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.GatewayIp }).(pulumi.StringOutput)
}

// Gateway IPv6 address used to probe the server.
func (o LinkmonitorOutput) GatewayIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.GatewayIp6 }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o LinkmonitorOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// HA election priority (1 - 50).
func (o LinkmonitorOutput) HaPriority() pulumi.IntOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.IntOutput { return v.HaPriority }).(pulumi.IntOutput)
}

// String in the http-agent field in the HTTP header.
func (o LinkmonitorOutput) HttpAgent() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.HttpAgent }).(pulumi.StringOutput)
}

// If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
func (o LinkmonitorOutput) HttpGet() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.HttpGet }).(pulumi.StringOutput)
}

// String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
func (o LinkmonitorOutput) HttpMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.HttpMatch }).(pulumi.StringOutput)
}

// Detection interval (1 - 3600 sec, default = 5).
func (o LinkmonitorOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.IntOutput { return v.Interval }).(pulumi.IntOutput)
}

// Link monitor name.
func (o LinkmonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Packet size of a twamp test session,
func (o LinkmonitorOutput) PacketSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.IntOutput { return v.PacketSize }).(pulumi.IntOutput)
}

// Twamp controller password in authentication mode
func (o LinkmonitorOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Port number of the traffic to be used to monitor the server.
func (o LinkmonitorOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
func (o LinkmonitorOutput) ProbeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.IntOutput { return v.ProbeCount }).(pulumi.IntOutput)
}

// Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
func (o LinkmonitorOutput) ProbeTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.IntOutput { return v.ProbeTimeout }).(pulumi.IntOutput)
}

// Protocols used to monitor the server.
func (o LinkmonitorOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Number of successful responses received before server is considered recovered (1 - 10, default = 5).
func (o LinkmonitorOutput) Recoverytime() pulumi.IntOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.IntOutput { return v.Recoverytime }).(pulumi.IntOutput)
}

// Subnet to monitor. The structure of `route` block is documented below.
func (o LinkmonitorOutput) Routes() LinkmonitorRouteArrayOutput {
	return o.ApplyT(func(v *Linkmonitor) LinkmonitorRouteArrayOutput { return v.Routes }).(LinkmonitorRouteArrayOutput)
}

// Twamp controller security mode. Valid values: `none`, `authentication`.
func (o LinkmonitorOutput) SecurityMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.SecurityMode }).(pulumi.StringOutput)
}

// Mode of server configuration. Valid values: `default`, `individual`.
func (o LinkmonitorOutput) ServerConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.ServerConfig }).(pulumi.StringOutput)
}

// Servers for link-monitor to monitor. The structure of `serverList` block is documented below.
func (o LinkmonitorOutput) ServerLists() LinkmonitorServerListArrayOutput {
	return o.ApplyT(func(v *Linkmonitor) LinkmonitorServerListArrayOutput { return v.ServerLists }).(LinkmonitorServerListArrayOutput)
}

// Server type (static or dynamic). Valid values: `static`, `dynamic`.
func (o LinkmonitorOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.ServerType }).(pulumi.StringOutput)
}

// IP address of the server(s) to be monitored. The structure of `server` block is documented below.
func (o LinkmonitorOutput) Servers() LinkmonitorServerArrayOutput {
	return o.ApplyT(func(v *Linkmonitor) LinkmonitorServerArrayOutput { return v.Servers }).(LinkmonitorServerArrayOutput)
}

// Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
func (o LinkmonitorOutput) ServiceDetection() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.ServiceDetection }).(pulumi.StringOutput)
}

// Source IP address used in packet to the server.
func (o LinkmonitorOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// Source IPv6 address used in packet to the server.
func (o LinkmonitorOutput) SourceIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.SourceIp6 }).(pulumi.StringOutput)
}

// Interface that receives the traffic to be monitored.
func (o LinkmonitorOutput) Srcintf() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.Srcintf }).(pulumi.StringOutput)
}

// Enable/disable this link monitor. Valid values: `enable`, `disable`.
func (o LinkmonitorOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Enable/disable update cascade interface. Valid values: `enable`, `disable`.
func (o LinkmonitorOutput) UpdateCascadeInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.UpdateCascadeInterface }).(pulumi.StringOutput)
}

// Enable/disable updating the policy route. Valid values: `enable`, `disable`.
func (o LinkmonitorOutput) UpdatePolicyRoute() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.UpdatePolicyRoute }).(pulumi.StringOutput)
}

// Enable/disable updating the static route. Valid values: `enable`, `disable`.
func (o LinkmonitorOutput) UpdateStaticRoute() pulumi.StringOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringOutput { return v.UpdateStaticRoute }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o LinkmonitorOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Linkmonitor) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type LinkmonitorArrayOutput struct{ *pulumi.OutputState }

func (LinkmonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Linkmonitor)(nil)).Elem()
}

func (o LinkmonitorArrayOutput) ToLinkmonitorArrayOutput() LinkmonitorArrayOutput {
	return o
}

func (o LinkmonitorArrayOutput) ToLinkmonitorArrayOutputWithContext(ctx context.Context) LinkmonitorArrayOutput {
	return o
}

func (o LinkmonitorArrayOutput) Index(i pulumi.IntInput) LinkmonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Linkmonitor {
		return vs[0].([]*Linkmonitor)[vs[1].(int)]
	}).(LinkmonitorOutput)
}

type LinkmonitorMapOutput struct{ *pulumi.OutputState }

func (LinkmonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Linkmonitor)(nil)).Elem()
}

func (o LinkmonitorMapOutput) ToLinkmonitorMapOutput() LinkmonitorMapOutput {
	return o
}

func (o LinkmonitorMapOutput) ToLinkmonitorMapOutputWithContext(ctx context.Context) LinkmonitorMapOutput {
	return o
}

func (o LinkmonitorMapOutput) MapIndex(k pulumi.StringInput) LinkmonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Linkmonitor {
		return vs[0].(map[string]*Linkmonitor)[vs[1].(string)]
	}).(LinkmonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinkmonitorInput)(nil)).Elem(), &Linkmonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkmonitorArrayInput)(nil)).Elem(), LinkmonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkmonitorMapInput)(nil)).Elem(), LinkmonitorMap{})
	pulumi.RegisterOutputType(LinkmonitorOutput{})
	pulumi.RegisterOutputType(LinkmonitorArrayOutput{})
	pulumi.RegisterOutputType(LinkmonitorMapOutput{})
}
