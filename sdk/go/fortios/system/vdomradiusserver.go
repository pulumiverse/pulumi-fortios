// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure a RADIUS server to use as a RADIUS Single Sign On (RSSO) server for this VDOM.
//
// ## Import
//
// System VdomRadiusServer can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/vdomradiusserver:Vdomradiusserver labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/vdomradiusserver:Vdomradiusserver labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Vdomradiusserver struct {
	pulumi.CustomResourceState

	// Name of the VDOM that you are adding the RADIUS server to.
	Name pulumi.StringOutput `pulumi:"name"`
	// Use this option to select another VDOM containing a VDOM RSSO RADIUS server to use for the current VDOM.
	RadiusServerVdom pulumi.StringOutput `pulumi:"radiusServerVdom"`
	// Enable/disable the RSSO RADIUS server for this VDOM. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewVdomradiusserver registers a new resource with the given unique name, arguments, and options.
func NewVdomradiusserver(ctx *pulumi.Context,
	name string, args *VdomradiusserverArgs, opts ...pulumi.ResourceOption) (*Vdomradiusserver, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RadiusServerVdom == nil {
		return nil, errors.New("invalid value for required argument 'RadiusServerVdom'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vdomradiusserver
	err := ctx.RegisterResource("fortios:system/vdomradiusserver:Vdomradiusserver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVdomradiusserver gets an existing Vdomradiusserver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVdomradiusserver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VdomradiusserverState, opts ...pulumi.ResourceOption) (*Vdomradiusserver, error) {
	var resource Vdomradiusserver
	err := ctx.ReadResource("fortios:system/vdomradiusserver:Vdomradiusserver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vdomradiusserver resources.
type vdomradiusserverState struct {
	// Name of the VDOM that you are adding the RADIUS server to.
	Name *string `pulumi:"name"`
	// Use this option to select another VDOM containing a VDOM RSSO RADIUS server to use for the current VDOM.
	RadiusServerVdom *string `pulumi:"radiusServerVdom"`
	// Enable/disable the RSSO RADIUS server for this VDOM. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type VdomradiusserverState struct {
	// Name of the VDOM that you are adding the RADIUS server to.
	Name pulumi.StringPtrInput
	// Use this option to select another VDOM containing a VDOM RSSO RADIUS server to use for the current VDOM.
	RadiusServerVdom pulumi.StringPtrInput
	// Enable/disable the RSSO RADIUS server for this VDOM. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VdomradiusserverState) ElementType() reflect.Type {
	return reflect.TypeOf((*vdomradiusserverState)(nil)).Elem()
}

type vdomradiusserverArgs struct {
	// Name of the VDOM that you are adding the RADIUS server to.
	Name *string `pulumi:"name"`
	// Use this option to select another VDOM containing a VDOM RSSO RADIUS server to use for the current VDOM.
	RadiusServerVdom string `pulumi:"radiusServerVdom"`
	// Enable/disable the RSSO RADIUS server for this VDOM. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Vdomradiusserver resource.
type VdomradiusserverArgs struct {
	// Name of the VDOM that you are adding the RADIUS server to.
	Name pulumi.StringPtrInput
	// Use this option to select another VDOM containing a VDOM RSSO RADIUS server to use for the current VDOM.
	RadiusServerVdom pulumi.StringInput
	// Enable/disable the RSSO RADIUS server for this VDOM. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VdomradiusserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vdomradiusserverArgs)(nil)).Elem()
}

type VdomradiusserverInput interface {
	pulumi.Input

	ToVdomradiusserverOutput() VdomradiusserverOutput
	ToVdomradiusserverOutputWithContext(ctx context.Context) VdomradiusserverOutput
}

func (*Vdomradiusserver) ElementType() reflect.Type {
	return reflect.TypeOf((**Vdomradiusserver)(nil)).Elem()
}

func (i *Vdomradiusserver) ToVdomradiusserverOutput() VdomradiusserverOutput {
	return i.ToVdomradiusserverOutputWithContext(context.Background())
}

func (i *Vdomradiusserver) ToVdomradiusserverOutputWithContext(ctx context.Context) VdomradiusserverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VdomradiusserverOutput)
}

// VdomradiusserverArrayInput is an input type that accepts VdomradiusserverArray and VdomradiusserverArrayOutput values.
// You can construct a concrete instance of `VdomradiusserverArrayInput` via:
//
//	VdomradiusserverArray{ VdomradiusserverArgs{...} }
type VdomradiusserverArrayInput interface {
	pulumi.Input

	ToVdomradiusserverArrayOutput() VdomradiusserverArrayOutput
	ToVdomradiusserverArrayOutputWithContext(context.Context) VdomradiusserverArrayOutput
}

type VdomradiusserverArray []VdomradiusserverInput

func (VdomradiusserverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vdomradiusserver)(nil)).Elem()
}

func (i VdomradiusserverArray) ToVdomradiusserverArrayOutput() VdomradiusserverArrayOutput {
	return i.ToVdomradiusserverArrayOutputWithContext(context.Background())
}

func (i VdomradiusserverArray) ToVdomradiusserverArrayOutputWithContext(ctx context.Context) VdomradiusserverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VdomradiusserverArrayOutput)
}

// VdomradiusserverMapInput is an input type that accepts VdomradiusserverMap and VdomradiusserverMapOutput values.
// You can construct a concrete instance of `VdomradiusserverMapInput` via:
//
//	VdomradiusserverMap{ "key": VdomradiusserverArgs{...} }
type VdomradiusserverMapInput interface {
	pulumi.Input

	ToVdomradiusserverMapOutput() VdomradiusserverMapOutput
	ToVdomradiusserverMapOutputWithContext(context.Context) VdomradiusserverMapOutput
}

type VdomradiusserverMap map[string]VdomradiusserverInput

func (VdomradiusserverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vdomradiusserver)(nil)).Elem()
}

func (i VdomradiusserverMap) ToVdomradiusserverMapOutput() VdomradiusserverMapOutput {
	return i.ToVdomradiusserverMapOutputWithContext(context.Background())
}

func (i VdomradiusserverMap) ToVdomradiusserverMapOutputWithContext(ctx context.Context) VdomradiusserverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VdomradiusserverMapOutput)
}

type VdomradiusserverOutput struct{ *pulumi.OutputState }

func (VdomradiusserverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vdomradiusserver)(nil)).Elem()
}

func (o VdomradiusserverOutput) ToVdomradiusserverOutput() VdomradiusserverOutput {
	return o
}

func (o VdomradiusserverOutput) ToVdomradiusserverOutputWithContext(ctx context.Context) VdomradiusserverOutput {
	return o
}

// Name of the VDOM that you are adding the RADIUS server to.
func (o VdomradiusserverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomradiusserver) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Use this option to select another VDOM containing a VDOM RSSO RADIUS server to use for the current VDOM.
func (o VdomradiusserverOutput) RadiusServerVdom() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomradiusserver) pulumi.StringOutput { return v.RadiusServerVdom }).(pulumi.StringOutput)
}

// Enable/disable the RSSO RADIUS server for this VDOM. Valid values: `enable`, `disable`.
func (o VdomradiusserverOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomradiusserver) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o VdomradiusserverOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomradiusserver) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type VdomradiusserverArrayOutput struct{ *pulumi.OutputState }

func (VdomradiusserverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vdomradiusserver)(nil)).Elem()
}

func (o VdomradiusserverArrayOutput) ToVdomradiusserverArrayOutput() VdomradiusserverArrayOutput {
	return o
}

func (o VdomradiusserverArrayOutput) ToVdomradiusserverArrayOutputWithContext(ctx context.Context) VdomradiusserverArrayOutput {
	return o
}

func (o VdomradiusserverArrayOutput) Index(i pulumi.IntInput) VdomradiusserverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vdomradiusserver {
		return vs[0].([]*Vdomradiusserver)[vs[1].(int)]
	}).(VdomradiusserverOutput)
}

type VdomradiusserverMapOutput struct{ *pulumi.OutputState }

func (VdomradiusserverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vdomradiusserver)(nil)).Elem()
}

func (o VdomradiusserverMapOutput) ToVdomradiusserverMapOutput() VdomradiusserverMapOutput {
	return o
}

func (o VdomradiusserverMapOutput) ToVdomradiusserverMapOutputWithContext(ctx context.Context) VdomradiusserverMapOutput {
	return o
}

func (o VdomradiusserverMapOutput) MapIndex(k pulumi.StringInput) VdomradiusserverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vdomradiusserver {
		return vs[0].(map[string]*Vdomradiusserver)[vs[1].(string)]
	}).(VdomradiusserverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VdomradiusserverInput)(nil)).Elem(), &Vdomradiusserver{})
	pulumi.RegisterInputType(reflect.TypeOf((*VdomradiusserverArrayInput)(nil)).Elem(), VdomradiusserverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VdomradiusserverMapInput)(nil)).Elem(), VdomradiusserverMap{})
	pulumi.RegisterOutputType(VdomradiusserverOutput{})
	pulumi.RegisterOutputType(VdomradiusserverArrayOutput{})
	pulumi.RegisterOutputType(VdomradiusserverMapOutput{})
}
