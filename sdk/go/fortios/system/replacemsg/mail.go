// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package replacemsg

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Replacement messages.
//
// ## Import
//
// SystemReplacemsg Mail can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/replacemsg/mail:Mail labelname {{msg_type}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/replacemsg/mail:Mail labelname {{msg_type}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Mail struct {
	pulumi.CustomResourceState

	// Message string.
	Buffer pulumi.StringPtrOutput `pulumi:"buffer"`
	// Format flag.
	Format pulumi.StringOutput `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringOutput `pulumi:"header"`
	// Message type.
	MsgType pulumi.StringOutput `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewMail registers a new resource with the given unique name, arguments, and options.
func NewMail(ctx *pulumi.Context,
	name string, args *MailArgs, opts ...pulumi.ResourceOption) (*Mail, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MsgType == nil {
		return nil, errors.New("invalid value for required argument 'MsgType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Mail
	err := ctx.RegisterResource("fortios:system/replacemsg/mail:Mail", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMail gets an existing Mail resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMail(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MailState, opts ...pulumi.ResourceOption) (*Mail, error) {
	var resource Mail
	err := ctx.ReadResource("fortios:system/replacemsg/mail:Mail", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mail resources.
type mailState struct {
	// Message string.
	Buffer *string `pulumi:"buffer"`
	// Format flag.
	Format *string `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header *string `pulumi:"header"`
	// Message type.
	MsgType *string `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type MailState struct {
	// Message string.
	Buffer pulumi.StringPtrInput
	// Format flag.
	Format pulumi.StringPtrInput
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringPtrInput
	// Message type.
	MsgType pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (MailState) ElementType() reflect.Type {
	return reflect.TypeOf((*mailState)(nil)).Elem()
}

type mailArgs struct {
	// Message string.
	Buffer *string `pulumi:"buffer"`
	// Format flag.
	Format *string `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header *string `pulumi:"header"`
	// Message type.
	MsgType string `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Mail resource.
type MailArgs struct {
	// Message string.
	Buffer pulumi.StringPtrInput
	// Format flag.
	Format pulumi.StringPtrInput
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringPtrInput
	// Message type.
	MsgType pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (MailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mailArgs)(nil)).Elem()
}

type MailInput interface {
	pulumi.Input

	ToMailOutput() MailOutput
	ToMailOutputWithContext(ctx context.Context) MailOutput
}

func (*Mail) ElementType() reflect.Type {
	return reflect.TypeOf((**Mail)(nil)).Elem()
}

func (i *Mail) ToMailOutput() MailOutput {
	return i.ToMailOutputWithContext(context.Background())
}

func (i *Mail) ToMailOutputWithContext(ctx context.Context) MailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MailOutput)
}

// MailArrayInput is an input type that accepts MailArray and MailArrayOutput values.
// You can construct a concrete instance of `MailArrayInput` via:
//
//	MailArray{ MailArgs{...} }
type MailArrayInput interface {
	pulumi.Input

	ToMailArrayOutput() MailArrayOutput
	ToMailArrayOutputWithContext(context.Context) MailArrayOutput
}

type MailArray []MailInput

func (MailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mail)(nil)).Elem()
}

func (i MailArray) ToMailArrayOutput() MailArrayOutput {
	return i.ToMailArrayOutputWithContext(context.Background())
}

func (i MailArray) ToMailArrayOutputWithContext(ctx context.Context) MailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MailArrayOutput)
}

// MailMapInput is an input type that accepts MailMap and MailMapOutput values.
// You can construct a concrete instance of `MailMapInput` via:
//
//	MailMap{ "key": MailArgs{...} }
type MailMapInput interface {
	pulumi.Input

	ToMailMapOutput() MailMapOutput
	ToMailMapOutputWithContext(context.Context) MailMapOutput
}

type MailMap map[string]MailInput

func (MailMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mail)(nil)).Elem()
}

func (i MailMap) ToMailMapOutput() MailMapOutput {
	return i.ToMailMapOutputWithContext(context.Background())
}

func (i MailMap) ToMailMapOutputWithContext(ctx context.Context) MailMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MailMapOutput)
}

type MailOutput struct{ *pulumi.OutputState }

func (MailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mail)(nil)).Elem()
}

func (o MailOutput) ToMailOutput() MailOutput {
	return o
}

func (o MailOutput) ToMailOutputWithContext(ctx context.Context) MailOutput {
	return o
}

// Message string.
func (o MailOutput) Buffer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mail) pulumi.StringPtrOutput { return v.Buffer }).(pulumi.StringPtrOutput)
}

// Format flag.
func (o MailOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *Mail) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// Header flag. Valid values: `none`, `http`, `8bit`.
func (o MailOutput) Header() pulumi.StringOutput {
	return o.ApplyT(func(v *Mail) pulumi.StringOutput { return v.Header }).(pulumi.StringOutput)
}

// Message type.
func (o MailOutput) MsgType() pulumi.StringOutput {
	return o.ApplyT(func(v *Mail) pulumi.StringOutput { return v.MsgType }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o MailOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Mail) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type MailArrayOutput struct{ *pulumi.OutputState }

func (MailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mail)(nil)).Elem()
}

func (o MailArrayOutput) ToMailArrayOutput() MailArrayOutput {
	return o
}

func (o MailArrayOutput) ToMailArrayOutputWithContext(ctx context.Context) MailArrayOutput {
	return o
}

func (o MailArrayOutput) Index(i pulumi.IntInput) MailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Mail {
		return vs[0].([]*Mail)[vs[1].(int)]
	}).(MailOutput)
}

type MailMapOutput struct{ *pulumi.OutputState }

func (MailMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mail)(nil)).Elem()
}

func (o MailMapOutput) ToMailMapOutput() MailMapOutput {
	return o
}

func (o MailMapOutput) ToMailMapOutputWithContext(ctx context.Context) MailMapOutput {
	return o
}

func (o MailMapOutput) MapIndex(k pulumi.StringInput) MailOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Mail {
		return vs[0].(map[string]*Mail)[vs[1].(string)]
	}).(MailOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MailInput)(nil)).Elem(), &Mail{})
	pulumi.RegisterInputType(reflect.TypeOf((*MailArrayInput)(nil)).Elem(), MailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MailMapInput)(nil)).Elem(), MailMap{})
	pulumi.RegisterOutputType(MailOutput{})
	pulumi.RegisterOutputType(MailArrayOutput{})
	pulumi.RegisterOutputType(MailMapOutput{})
}
