// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package replacemsg

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Replacement messages.
//
// ## Import
//
// SystemReplacemsg Webproxy can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/replacemsg/webproxy:Webproxy labelname {{msg_type}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/replacemsg/webproxy:Webproxy labelname {{msg_type}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Webproxy struct {
	pulumi.CustomResourceState

	// Message string.
	Buffer pulumi.StringPtrOutput `pulumi:"buffer"`
	// Format flag.
	Format pulumi.StringOutput `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringOutput `pulumi:"header"`
	// Message type.
	MsgType pulumi.StringOutput `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewWebproxy registers a new resource with the given unique name, arguments, and options.
func NewWebproxy(ctx *pulumi.Context,
	name string, args *WebproxyArgs, opts ...pulumi.ResourceOption) (*Webproxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MsgType == nil {
		return nil, errors.New("invalid value for required argument 'MsgType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Webproxy
	err := ctx.RegisterResource("fortios:system/replacemsg/webproxy:Webproxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebproxy gets an existing Webproxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebproxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebproxyState, opts ...pulumi.ResourceOption) (*Webproxy, error) {
	var resource Webproxy
	err := ctx.ReadResource("fortios:system/replacemsg/webproxy:Webproxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Webproxy resources.
type webproxyState struct {
	// Message string.
	Buffer *string `pulumi:"buffer"`
	// Format flag.
	Format *string `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header *string `pulumi:"header"`
	// Message type.
	MsgType *string `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WebproxyState struct {
	// Message string.
	Buffer pulumi.StringPtrInput
	// Format flag.
	Format pulumi.StringPtrInput
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringPtrInput
	// Message type.
	MsgType pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WebproxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*webproxyState)(nil)).Elem()
}

type webproxyArgs struct {
	// Message string.
	Buffer *string `pulumi:"buffer"`
	// Format flag.
	Format *string `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header *string `pulumi:"header"`
	// Message type.
	MsgType string `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Webproxy resource.
type WebproxyArgs struct {
	// Message string.
	Buffer pulumi.StringPtrInput
	// Format flag.
	Format pulumi.StringPtrInput
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringPtrInput
	// Message type.
	MsgType pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WebproxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webproxyArgs)(nil)).Elem()
}

type WebproxyInput interface {
	pulumi.Input

	ToWebproxyOutput() WebproxyOutput
	ToWebproxyOutputWithContext(ctx context.Context) WebproxyOutput
}

func (*Webproxy) ElementType() reflect.Type {
	return reflect.TypeOf((**Webproxy)(nil)).Elem()
}

func (i *Webproxy) ToWebproxyOutput() WebproxyOutput {
	return i.ToWebproxyOutputWithContext(context.Background())
}

func (i *Webproxy) ToWebproxyOutputWithContext(ctx context.Context) WebproxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebproxyOutput)
}

// WebproxyArrayInput is an input type that accepts WebproxyArray and WebproxyArrayOutput values.
// You can construct a concrete instance of `WebproxyArrayInput` via:
//
//	WebproxyArray{ WebproxyArgs{...} }
type WebproxyArrayInput interface {
	pulumi.Input

	ToWebproxyArrayOutput() WebproxyArrayOutput
	ToWebproxyArrayOutputWithContext(context.Context) WebproxyArrayOutput
}

type WebproxyArray []WebproxyInput

func (WebproxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Webproxy)(nil)).Elem()
}

func (i WebproxyArray) ToWebproxyArrayOutput() WebproxyArrayOutput {
	return i.ToWebproxyArrayOutputWithContext(context.Background())
}

func (i WebproxyArray) ToWebproxyArrayOutputWithContext(ctx context.Context) WebproxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebproxyArrayOutput)
}

// WebproxyMapInput is an input type that accepts WebproxyMap and WebproxyMapOutput values.
// You can construct a concrete instance of `WebproxyMapInput` via:
//
//	WebproxyMap{ "key": WebproxyArgs{...} }
type WebproxyMapInput interface {
	pulumi.Input

	ToWebproxyMapOutput() WebproxyMapOutput
	ToWebproxyMapOutputWithContext(context.Context) WebproxyMapOutput
}

type WebproxyMap map[string]WebproxyInput

func (WebproxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Webproxy)(nil)).Elem()
}

func (i WebproxyMap) ToWebproxyMapOutput() WebproxyMapOutput {
	return i.ToWebproxyMapOutputWithContext(context.Background())
}

func (i WebproxyMap) ToWebproxyMapOutputWithContext(ctx context.Context) WebproxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebproxyMapOutput)
}

type WebproxyOutput struct{ *pulumi.OutputState }

func (WebproxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Webproxy)(nil)).Elem()
}

func (o WebproxyOutput) ToWebproxyOutput() WebproxyOutput {
	return o
}

func (o WebproxyOutput) ToWebproxyOutputWithContext(ctx context.Context) WebproxyOutput {
	return o
}

// Message string.
func (o WebproxyOutput) Buffer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Webproxy) pulumi.StringPtrOutput { return v.Buffer }).(pulumi.StringPtrOutput)
}

// Format flag.
func (o WebproxyOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *Webproxy) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// Header flag. Valid values: `none`, `http`, `8bit`.
func (o WebproxyOutput) Header() pulumi.StringOutput {
	return o.ApplyT(func(v *Webproxy) pulumi.StringOutput { return v.Header }).(pulumi.StringOutput)
}

// Message type.
func (o WebproxyOutput) MsgType() pulumi.StringOutput {
	return o.ApplyT(func(v *Webproxy) pulumi.StringOutput { return v.MsgType }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o WebproxyOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Webproxy) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type WebproxyArrayOutput struct{ *pulumi.OutputState }

func (WebproxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Webproxy)(nil)).Elem()
}

func (o WebproxyArrayOutput) ToWebproxyArrayOutput() WebproxyArrayOutput {
	return o
}

func (o WebproxyArrayOutput) ToWebproxyArrayOutputWithContext(ctx context.Context) WebproxyArrayOutput {
	return o
}

func (o WebproxyArrayOutput) Index(i pulumi.IntInput) WebproxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Webproxy {
		return vs[0].([]*Webproxy)[vs[1].(int)]
	}).(WebproxyOutput)
}

type WebproxyMapOutput struct{ *pulumi.OutputState }

func (WebproxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Webproxy)(nil)).Elem()
}

func (o WebproxyMapOutput) ToWebproxyMapOutput() WebproxyMapOutput {
	return o
}

func (o WebproxyMapOutput) ToWebproxyMapOutputWithContext(ctx context.Context) WebproxyMapOutput {
	return o
}

func (o WebproxyMapOutput) MapIndex(k pulumi.StringInput) WebproxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Webproxy {
		return vs[0].(map[string]*Webproxy)[vs[1].(string)]
	}).(WebproxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebproxyInput)(nil)).Elem(), &Webproxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebproxyArrayInput)(nil)).Elem(), WebproxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebproxyMapInput)(nil)).Elem(), WebproxyMap{})
	pulumi.RegisterOutputType(WebproxyOutput{})
	pulumi.RegisterOutputType(WebproxyArrayOutput{})
	pulumi.RegisterOutputType(WebproxyMapOutput{})
}
