// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package replacemsg

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Replacement messages.
//
// ## Import
//
// SystemReplacemsg Auth can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/replacemsg/auth:Auth labelname {{msg_type}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/replacemsg/auth:Auth labelname {{msg_type}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Auth struct {
	pulumi.CustomResourceState

	// Message string.
	Buffer pulumi.StringPtrOutput `pulumi:"buffer"`
	// Format flag.
	Format pulumi.StringOutput `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringOutput `pulumi:"header"`
	// Message type.
	MsgType pulumi.StringOutput `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewAuth registers a new resource with the given unique name, arguments, and options.
func NewAuth(ctx *pulumi.Context,
	name string, args *AuthArgs, opts ...pulumi.ResourceOption) (*Auth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MsgType == nil {
		return nil, errors.New("invalid value for required argument 'MsgType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Auth
	err := ctx.RegisterResource("fortios:system/replacemsg/auth:Auth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuth gets an existing Auth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthState, opts ...pulumi.ResourceOption) (*Auth, error) {
	var resource Auth
	err := ctx.ReadResource("fortios:system/replacemsg/auth:Auth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Auth resources.
type authState struct {
	// Message string.
	Buffer *string `pulumi:"buffer"`
	// Format flag.
	Format *string `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header *string `pulumi:"header"`
	// Message type.
	MsgType *string `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type AuthState struct {
	// Message string.
	Buffer pulumi.StringPtrInput
	// Format flag.
	Format pulumi.StringPtrInput
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringPtrInput
	// Message type.
	MsgType pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (AuthState) ElementType() reflect.Type {
	return reflect.TypeOf((*authState)(nil)).Elem()
}

type authArgs struct {
	// Message string.
	Buffer *string `pulumi:"buffer"`
	// Format flag.
	Format *string `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header *string `pulumi:"header"`
	// Message type.
	MsgType string `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Auth resource.
type AuthArgs struct {
	// Message string.
	Buffer pulumi.StringPtrInput
	// Format flag.
	Format pulumi.StringPtrInput
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringPtrInput
	// Message type.
	MsgType pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (AuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authArgs)(nil)).Elem()
}

type AuthInput interface {
	pulumi.Input

	ToAuthOutput() AuthOutput
	ToAuthOutputWithContext(ctx context.Context) AuthOutput
}

func (*Auth) ElementType() reflect.Type {
	return reflect.TypeOf((**Auth)(nil)).Elem()
}

func (i *Auth) ToAuthOutput() AuthOutput {
	return i.ToAuthOutputWithContext(context.Background())
}

func (i *Auth) ToAuthOutputWithContext(ctx context.Context) AuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthOutput)
}

// AuthArrayInput is an input type that accepts AuthArray and AuthArrayOutput values.
// You can construct a concrete instance of `AuthArrayInput` via:
//
//	AuthArray{ AuthArgs{...} }
type AuthArrayInput interface {
	pulumi.Input

	ToAuthArrayOutput() AuthArrayOutput
	ToAuthArrayOutputWithContext(context.Context) AuthArrayOutput
}

type AuthArray []AuthInput

func (AuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Auth)(nil)).Elem()
}

func (i AuthArray) ToAuthArrayOutput() AuthArrayOutput {
	return i.ToAuthArrayOutputWithContext(context.Background())
}

func (i AuthArray) ToAuthArrayOutputWithContext(ctx context.Context) AuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthArrayOutput)
}

// AuthMapInput is an input type that accepts AuthMap and AuthMapOutput values.
// You can construct a concrete instance of `AuthMapInput` via:
//
//	AuthMap{ "key": AuthArgs{...} }
type AuthMapInput interface {
	pulumi.Input

	ToAuthMapOutput() AuthMapOutput
	ToAuthMapOutputWithContext(context.Context) AuthMapOutput
}

type AuthMap map[string]AuthInput

func (AuthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Auth)(nil)).Elem()
}

func (i AuthMap) ToAuthMapOutput() AuthMapOutput {
	return i.ToAuthMapOutputWithContext(context.Background())
}

func (i AuthMap) ToAuthMapOutputWithContext(ctx context.Context) AuthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthMapOutput)
}

type AuthOutput struct{ *pulumi.OutputState }

func (AuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Auth)(nil)).Elem()
}

func (o AuthOutput) ToAuthOutput() AuthOutput {
	return o
}

func (o AuthOutput) ToAuthOutputWithContext(ctx context.Context) AuthOutput {
	return o
}

// Message string.
func (o AuthOutput) Buffer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Auth) pulumi.StringPtrOutput { return v.Buffer }).(pulumi.StringPtrOutput)
}

// Format flag.
func (o AuthOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *Auth) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// Header flag. Valid values: `none`, `http`, `8bit`.
func (o AuthOutput) Header() pulumi.StringOutput {
	return o.ApplyT(func(v *Auth) pulumi.StringOutput { return v.Header }).(pulumi.StringOutput)
}

// Message type.
func (o AuthOutput) MsgType() pulumi.StringOutput {
	return o.ApplyT(func(v *Auth) pulumi.StringOutput { return v.MsgType }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o AuthOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Auth) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type AuthArrayOutput struct{ *pulumi.OutputState }

func (AuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Auth)(nil)).Elem()
}

func (o AuthArrayOutput) ToAuthArrayOutput() AuthArrayOutput {
	return o
}

func (o AuthArrayOutput) ToAuthArrayOutputWithContext(ctx context.Context) AuthArrayOutput {
	return o
}

func (o AuthArrayOutput) Index(i pulumi.IntInput) AuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Auth {
		return vs[0].([]*Auth)[vs[1].(int)]
	}).(AuthOutput)
}

type AuthMapOutput struct{ *pulumi.OutputState }

func (AuthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Auth)(nil)).Elem()
}

func (o AuthMapOutput) ToAuthMapOutput() AuthMapOutput {
	return o
}

func (o AuthMapOutput) ToAuthMapOutputWithContext(ctx context.Context) AuthMapOutput {
	return o
}

func (o AuthMapOutput) MapIndex(k pulumi.StringInput) AuthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Auth {
		return vs[0].(map[string]*Auth)[vs[1].(string)]
	}).(AuthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthInput)(nil)).Elem(), &Auth{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthArrayInput)(nil)).Elem(), AuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthMapInput)(nil)).Elem(), AuthMap{})
	pulumi.RegisterOutputType(AuthOutput{})
	pulumi.RegisterOutputType(AuthArrayOutput{})
	pulumi.RegisterOutputType(AuthMapOutput{})
}
