// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package replacemsg

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Replacement messages.
//
// ## Import
//
// SystemReplacemsg Http can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/replacemsg/http:Http labelname {{msg_type}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/replacemsg/http:Http labelname {{msg_type}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Http struct {
	pulumi.CustomResourceState

	// Message string.
	Buffer pulumi.StringPtrOutput `pulumi:"buffer"`
	// Format flag.
	Format pulumi.StringOutput `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringOutput `pulumi:"header"`
	// Message type.
	MsgType pulumi.StringOutput `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewHttp registers a new resource with the given unique name, arguments, and options.
func NewHttp(ctx *pulumi.Context,
	name string, args *HttpArgs, opts ...pulumi.ResourceOption) (*Http, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MsgType == nil {
		return nil, errors.New("invalid value for required argument 'MsgType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Http
	err := ctx.RegisterResource("fortios:system/replacemsg/http:Http", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHttp gets an existing Http resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHttp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HttpState, opts ...pulumi.ResourceOption) (*Http, error) {
	var resource Http
	err := ctx.ReadResource("fortios:system/replacemsg/http:Http", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Http resources.
type httpState struct {
	// Message string.
	Buffer *string `pulumi:"buffer"`
	// Format flag.
	Format *string `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header *string `pulumi:"header"`
	// Message type.
	MsgType *string `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type HttpState struct {
	// Message string.
	Buffer pulumi.StringPtrInput
	// Format flag.
	Format pulumi.StringPtrInput
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringPtrInput
	// Message type.
	MsgType pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (HttpState) ElementType() reflect.Type {
	return reflect.TypeOf((*httpState)(nil)).Elem()
}

type httpArgs struct {
	// Message string.
	Buffer *string `pulumi:"buffer"`
	// Format flag.
	Format *string `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header *string `pulumi:"header"`
	// Message type.
	MsgType string `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Http resource.
type HttpArgs struct {
	// Message string.
	Buffer pulumi.StringPtrInput
	// Format flag.
	Format pulumi.StringPtrInput
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringPtrInput
	// Message type.
	MsgType pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (HttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*httpArgs)(nil)).Elem()
}

type HttpInput interface {
	pulumi.Input

	ToHttpOutput() HttpOutput
	ToHttpOutputWithContext(ctx context.Context) HttpOutput
}

func (*Http) ElementType() reflect.Type {
	return reflect.TypeOf((**Http)(nil)).Elem()
}

func (i *Http) ToHttpOutput() HttpOutput {
	return i.ToHttpOutputWithContext(context.Background())
}

func (i *Http) ToHttpOutputWithContext(ctx context.Context) HttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpOutput)
}

// HttpArrayInput is an input type that accepts HttpArray and HttpArrayOutput values.
// You can construct a concrete instance of `HttpArrayInput` via:
//
//	HttpArray{ HttpArgs{...} }
type HttpArrayInput interface {
	pulumi.Input

	ToHttpArrayOutput() HttpArrayOutput
	ToHttpArrayOutputWithContext(context.Context) HttpArrayOutput
}

type HttpArray []HttpInput

func (HttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Http)(nil)).Elem()
}

func (i HttpArray) ToHttpArrayOutput() HttpArrayOutput {
	return i.ToHttpArrayOutputWithContext(context.Background())
}

func (i HttpArray) ToHttpArrayOutputWithContext(ctx context.Context) HttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpArrayOutput)
}

// HttpMapInput is an input type that accepts HttpMap and HttpMapOutput values.
// You can construct a concrete instance of `HttpMapInput` via:
//
//	HttpMap{ "key": HttpArgs{...} }
type HttpMapInput interface {
	pulumi.Input

	ToHttpMapOutput() HttpMapOutput
	ToHttpMapOutputWithContext(context.Context) HttpMapOutput
}

type HttpMap map[string]HttpInput

func (HttpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Http)(nil)).Elem()
}

func (i HttpMap) ToHttpMapOutput() HttpMapOutput {
	return i.ToHttpMapOutputWithContext(context.Background())
}

func (i HttpMap) ToHttpMapOutputWithContext(ctx context.Context) HttpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpMapOutput)
}

type HttpOutput struct{ *pulumi.OutputState }

func (HttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Http)(nil)).Elem()
}

func (o HttpOutput) ToHttpOutput() HttpOutput {
	return o
}

func (o HttpOutput) ToHttpOutputWithContext(ctx context.Context) HttpOutput {
	return o
}

// Message string.
func (o HttpOutput) Buffer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Http) pulumi.StringPtrOutput { return v.Buffer }).(pulumi.StringPtrOutput)
}

// Format flag.
func (o HttpOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *Http) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// Header flag. Valid values: `none`, `http`, `8bit`.
func (o HttpOutput) Header() pulumi.StringOutput {
	return o.ApplyT(func(v *Http) pulumi.StringOutput { return v.Header }).(pulumi.StringOutput)
}

// Message type.
func (o HttpOutput) MsgType() pulumi.StringOutput {
	return o.ApplyT(func(v *Http) pulumi.StringOutput { return v.MsgType }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o HttpOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Http) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type HttpArrayOutput struct{ *pulumi.OutputState }

func (HttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Http)(nil)).Elem()
}

func (o HttpArrayOutput) ToHttpArrayOutput() HttpArrayOutput {
	return o
}

func (o HttpArrayOutput) ToHttpArrayOutputWithContext(ctx context.Context) HttpArrayOutput {
	return o
}

func (o HttpArrayOutput) Index(i pulumi.IntInput) HttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Http {
		return vs[0].([]*Http)[vs[1].(int)]
	}).(HttpOutput)
}

type HttpMapOutput struct{ *pulumi.OutputState }

func (HttpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Http)(nil)).Elem()
}

func (o HttpMapOutput) ToHttpMapOutput() HttpMapOutput {
	return o
}

func (o HttpMapOutput) ToHttpMapOutputWithContext(ctx context.Context) HttpMapOutput {
	return o
}

func (o HttpMapOutput) MapIndex(k pulumi.StringInput) HttpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Http {
		return vs[0].(map[string]*Http)[vs[1].(string)]
	}).(HttpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HttpInput)(nil)).Elem(), &Http{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpArrayInput)(nil)).Elem(), HttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpMapInput)(nil)).Elem(), HttpMap{})
	pulumi.RegisterOutputType(HttpOutput{})
	pulumi.RegisterOutputType(HttpArrayOutput{})
	pulumi.RegisterOutputType(HttpMapOutput{})
}
