// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package replacemsg

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Replacement messages. Applies to FortiOS Version `<= 6.2.0`.
//
// ## Import
//
// SystemReplacemsg Ec can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/replacemsg/ec:Ec labelname {{msg_type}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/replacemsg/ec:Ec labelname {{msg_type}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Ec struct {
	pulumi.CustomResourceState

	// Message string.
	Buffer pulumi.StringPtrOutput `pulumi:"buffer"`
	// Format flag. Valid values: `none`, `text`, `html`, `wml`.
	Format pulumi.StringOutput `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringOutput `pulumi:"header"`
	// Message type.
	MsgType pulumi.StringOutput `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewEc registers a new resource with the given unique name, arguments, and options.
func NewEc(ctx *pulumi.Context,
	name string, args *EcArgs, opts ...pulumi.ResourceOption) (*Ec, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MsgType == nil {
		return nil, errors.New("invalid value for required argument 'MsgType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ec
	err := ctx.RegisterResource("fortios:system/replacemsg/ec:Ec", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEc gets an existing Ec resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EcState, opts ...pulumi.ResourceOption) (*Ec, error) {
	var resource Ec
	err := ctx.ReadResource("fortios:system/replacemsg/ec:Ec", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ec resources.
type ecState struct {
	// Message string.
	Buffer *string `pulumi:"buffer"`
	// Format flag. Valid values: `none`, `text`, `html`, `wml`.
	Format *string `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header *string `pulumi:"header"`
	// Message type.
	MsgType *string `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type EcState struct {
	// Message string.
	Buffer pulumi.StringPtrInput
	// Format flag. Valid values: `none`, `text`, `html`, `wml`.
	Format pulumi.StringPtrInput
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringPtrInput
	// Message type.
	MsgType pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (EcState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecState)(nil)).Elem()
}

type ecArgs struct {
	// Message string.
	Buffer *string `pulumi:"buffer"`
	// Format flag. Valid values: `none`, `text`, `html`, `wml`.
	Format *string `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header *string `pulumi:"header"`
	// Message type.
	MsgType string `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Ec resource.
type EcArgs struct {
	// Message string.
	Buffer pulumi.StringPtrInput
	// Format flag. Valid values: `none`, `text`, `html`, `wml`.
	Format pulumi.StringPtrInput
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringPtrInput
	// Message type.
	MsgType pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (EcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecArgs)(nil)).Elem()
}

type EcInput interface {
	pulumi.Input

	ToEcOutput() EcOutput
	ToEcOutputWithContext(ctx context.Context) EcOutput
}

func (*Ec) ElementType() reflect.Type {
	return reflect.TypeOf((**Ec)(nil)).Elem()
}

func (i *Ec) ToEcOutput() EcOutput {
	return i.ToEcOutputWithContext(context.Background())
}

func (i *Ec) ToEcOutputWithContext(ctx context.Context) EcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcOutput)
}

// EcArrayInput is an input type that accepts EcArray and EcArrayOutput values.
// You can construct a concrete instance of `EcArrayInput` via:
//
//	EcArray{ EcArgs{...} }
type EcArrayInput interface {
	pulumi.Input

	ToEcArrayOutput() EcArrayOutput
	ToEcArrayOutputWithContext(context.Context) EcArrayOutput
}

type EcArray []EcInput

func (EcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ec)(nil)).Elem()
}

func (i EcArray) ToEcArrayOutput() EcArrayOutput {
	return i.ToEcArrayOutputWithContext(context.Background())
}

func (i EcArray) ToEcArrayOutputWithContext(ctx context.Context) EcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcArrayOutput)
}

// EcMapInput is an input type that accepts EcMap and EcMapOutput values.
// You can construct a concrete instance of `EcMapInput` via:
//
//	EcMap{ "key": EcArgs{...} }
type EcMapInput interface {
	pulumi.Input

	ToEcMapOutput() EcMapOutput
	ToEcMapOutputWithContext(context.Context) EcMapOutput
}

type EcMap map[string]EcInput

func (EcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ec)(nil)).Elem()
}

func (i EcMap) ToEcMapOutput() EcMapOutput {
	return i.ToEcMapOutputWithContext(context.Background())
}

func (i EcMap) ToEcMapOutputWithContext(ctx context.Context) EcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcMapOutput)
}

type EcOutput struct{ *pulumi.OutputState }

func (EcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ec)(nil)).Elem()
}

func (o EcOutput) ToEcOutput() EcOutput {
	return o
}

func (o EcOutput) ToEcOutputWithContext(ctx context.Context) EcOutput {
	return o
}

// Message string.
func (o EcOutput) Buffer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ec) pulumi.StringPtrOutput { return v.Buffer }).(pulumi.StringPtrOutput)
}

// Format flag. Valid values: `none`, `text`, `html`, `wml`.
func (o EcOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *Ec) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// Header flag. Valid values: `none`, `http`, `8bit`.
func (o EcOutput) Header() pulumi.StringOutput {
	return o.ApplyT(func(v *Ec) pulumi.StringOutput { return v.Header }).(pulumi.StringOutput)
}

// Message type.
func (o EcOutput) MsgType() pulumi.StringOutput {
	return o.ApplyT(func(v *Ec) pulumi.StringOutput { return v.MsgType }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o EcOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Ec) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type EcArrayOutput struct{ *pulumi.OutputState }

func (EcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ec)(nil)).Elem()
}

func (o EcArrayOutput) ToEcArrayOutput() EcArrayOutput {
	return o
}

func (o EcArrayOutput) ToEcArrayOutputWithContext(ctx context.Context) EcArrayOutput {
	return o
}

func (o EcArrayOutput) Index(i pulumi.IntInput) EcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ec {
		return vs[0].([]*Ec)[vs[1].(int)]
	}).(EcOutput)
}

type EcMapOutput struct{ *pulumi.OutputState }

func (EcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ec)(nil)).Elem()
}

func (o EcMapOutput) ToEcMapOutput() EcMapOutput {
	return o
}

func (o EcMapOutput) ToEcMapOutputWithContext(ctx context.Context) EcMapOutput {
	return o
}

func (o EcMapOutput) MapIndex(k pulumi.StringInput) EcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ec {
		return vs[0].(map[string]*Ec)[vs[1].(string)]
	}).(EcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EcInput)(nil)).Elem(), &Ec{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcArrayInput)(nil)).Elem(), EcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcMapInput)(nil)).Elem(), EcMap{})
	pulumi.RegisterOutputType(EcOutput{})
	pulumi.RegisterOutputType(EcArrayOutput{})
	pulumi.RegisterOutputType(EcMapOutput{})
}
