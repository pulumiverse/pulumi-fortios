// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package replacemsg

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Replacement messages. Applies to FortiOS Version `<= 6.4.1`.
//
// ## Import
//
// SystemReplacemsg Nntp can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/replacemsg/nntp:Nntp labelname {{msg_type}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/replacemsg/nntp:Nntp labelname {{msg_type}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Nntp struct {
	pulumi.CustomResourceState

	// Message string.
	Buffer pulumi.StringPtrOutput `pulumi:"buffer"`
	// Format flag.
	Format pulumi.StringOutput `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringOutput `pulumi:"header"`
	// Message type.
	MsgType pulumi.StringOutput `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewNntp registers a new resource with the given unique name, arguments, and options.
func NewNntp(ctx *pulumi.Context,
	name string, args *NntpArgs, opts ...pulumi.ResourceOption) (*Nntp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MsgType == nil {
		return nil, errors.New("invalid value for required argument 'MsgType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Nntp
	err := ctx.RegisterResource("fortios:system/replacemsg/nntp:Nntp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNntp gets an existing Nntp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNntp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NntpState, opts ...pulumi.ResourceOption) (*Nntp, error) {
	var resource Nntp
	err := ctx.ReadResource("fortios:system/replacemsg/nntp:Nntp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Nntp resources.
type nntpState struct {
	// Message string.
	Buffer *string `pulumi:"buffer"`
	// Format flag.
	Format *string `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header *string `pulumi:"header"`
	// Message type.
	MsgType *string `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type NntpState struct {
	// Message string.
	Buffer pulumi.StringPtrInput
	// Format flag.
	Format pulumi.StringPtrInput
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringPtrInput
	// Message type.
	MsgType pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (NntpState) ElementType() reflect.Type {
	return reflect.TypeOf((*nntpState)(nil)).Elem()
}

type nntpArgs struct {
	// Message string.
	Buffer *string `pulumi:"buffer"`
	// Format flag.
	Format *string `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header *string `pulumi:"header"`
	// Message type.
	MsgType string `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Nntp resource.
type NntpArgs struct {
	// Message string.
	Buffer pulumi.StringPtrInput
	// Format flag.
	Format pulumi.StringPtrInput
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringPtrInput
	// Message type.
	MsgType pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (NntpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nntpArgs)(nil)).Elem()
}

type NntpInput interface {
	pulumi.Input

	ToNntpOutput() NntpOutput
	ToNntpOutputWithContext(ctx context.Context) NntpOutput
}

func (*Nntp) ElementType() reflect.Type {
	return reflect.TypeOf((**Nntp)(nil)).Elem()
}

func (i *Nntp) ToNntpOutput() NntpOutput {
	return i.ToNntpOutputWithContext(context.Background())
}

func (i *Nntp) ToNntpOutputWithContext(ctx context.Context) NntpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NntpOutput)
}

// NntpArrayInput is an input type that accepts NntpArray and NntpArrayOutput values.
// You can construct a concrete instance of `NntpArrayInput` via:
//
//	NntpArray{ NntpArgs{...} }
type NntpArrayInput interface {
	pulumi.Input

	ToNntpArrayOutput() NntpArrayOutput
	ToNntpArrayOutputWithContext(context.Context) NntpArrayOutput
}

type NntpArray []NntpInput

func (NntpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Nntp)(nil)).Elem()
}

func (i NntpArray) ToNntpArrayOutput() NntpArrayOutput {
	return i.ToNntpArrayOutputWithContext(context.Background())
}

func (i NntpArray) ToNntpArrayOutputWithContext(ctx context.Context) NntpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NntpArrayOutput)
}

// NntpMapInput is an input type that accepts NntpMap and NntpMapOutput values.
// You can construct a concrete instance of `NntpMapInput` via:
//
//	NntpMap{ "key": NntpArgs{...} }
type NntpMapInput interface {
	pulumi.Input

	ToNntpMapOutput() NntpMapOutput
	ToNntpMapOutputWithContext(context.Context) NntpMapOutput
}

type NntpMap map[string]NntpInput

func (NntpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Nntp)(nil)).Elem()
}

func (i NntpMap) ToNntpMapOutput() NntpMapOutput {
	return i.ToNntpMapOutputWithContext(context.Background())
}

func (i NntpMap) ToNntpMapOutputWithContext(ctx context.Context) NntpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NntpMapOutput)
}

type NntpOutput struct{ *pulumi.OutputState }

func (NntpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Nntp)(nil)).Elem()
}

func (o NntpOutput) ToNntpOutput() NntpOutput {
	return o
}

func (o NntpOutput) ToNntpOutputWithContext(ctx context.Context) NntpOutput {
	return o
}

// Message string.
func (o NntpOutput) Buffer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nntp) pulumi.StringPtrOutput { return v.Buffer }).(pulumi.StringPtrOutput)
}

// Format flag.
func (o NntpOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *Nntp) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// Header flag. Valid values: `none`, `http`, `8bit`.
func (o NntpOutput) Header() pulumi.StringOutput {
	return o.ApplyT(func(v *Nntp) pulumi.StringOutput { return v.Header }).(pulumi.StringOutput)
}

// Message type.
func (o NntpOutput) MsgType() pulumi.StringOutput {
	return o.ApplyT(func(v *Nntp) pulumi.StringOutput { return v.MsgType }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o NntpOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Nntp) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type NntpArrayOutput struct{ *pulumi.OutputState }

func (NntpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Nntp)(nil)).Elem()
}

func (o NntpArrayOutput) ToNntpArrayOutput() NntpArrayOutput {
	return o
}

func (o NntpArrayOutput) ToNntpArrayOutputWithContext(ctx context.Context) NntpArrayOutput {
	return o
}

func (o NntpArrayOutput) Index(i pulumi.IntInput) NntpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Nntp {
		return vs[0].([]*Nntp)[vs[1].(int)]
	}).(NntpOutput)
}

type NntpMapOutput struct{ *pulumi.OutputState }

func (NntpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Nntp)(nil)).Elem()
}

func (o NntpMapOutput) ToNntpMapOutput() NntpMapOutput {
	return o
}

func (o NntpMapOutput) ToNntpMapOutputWithContext(ctx context.Context) NntpMapOutput {
	return o
}

func (o NntpMapOutput) MapIndex(k pulumi.StringInput) NntpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Nntp {
		return vs[0].(map[string]*Nntp)[vs[1].(string)]
	}).(NntpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NntpInput)(nil)).Elem(), &Nntp{})
	pulumi.RegisterInputType(reflect.TypeOf((*NntpArrayInput)(nil)).Elem(), NntpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NntpMapInput)(nil)).Elem(), NntpMap{})
	pulumi.RegisterOutputType(NntpOutput{})
	pulumi.RegisterOutputType(NntpArrayOutput{})
	pulumi.RegisterOutputType(NntpMapOutput{})
}
