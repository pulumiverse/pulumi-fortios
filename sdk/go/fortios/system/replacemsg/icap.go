// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package replacemsg

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Replacement messages.
//
// ## Import
//
// SystemReplacemsg Icap can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/replacemsg/icap:Icap labelname {{msg_type}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/replacemsg/icap:Icap labelname {{msg_type}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Icap struct {
	pulumi.CustomResourceState

	// Message string.
	Buffer pulumi.StringPtrOutput `pulumi:"buffer"`
	// Format flag.
	Format pulumi.StringOutput `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringOutput `pulumi:"header"`
	// Message type.
	MsgType pulumi.StringOutput `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewIcap registers a new resource with the given unique name, arguments, and options.
func NewIcap(ctx *pulumi.Context,
	name string, args *IcapArgs, opts ...pulumi.ResourceOption) (*Icap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MsgType == nil {
		return nil, errors.New("invalid value for required argument 'MsgType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Icap
	err := ctx.RegisterResource("fortios:system/replacemsg/icap:Icap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIcap gets an existing Icap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIcap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IcapState, opts ...pulumi.ResourceOption) (*Icap, error) {
	var resource Icap
	err := ctx.ReadResource("fortios:system/replacemsg/icap:Icap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Icap resources.
type icapState struct {
	// Message string.
	Buffer *string `pulumi:"buffer"`
	// Format flag.
	Format *string `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header *string `pulumi:"header"`
	// Message type.
	MsgType *string `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type IcapState struct {
	// Message string.
	Buffer pulumi.StringPtrInput
	// Format flag.
	Format pulumi.StringPtrInput
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringPtrInput
	// Message type.
	MsgType pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IcapState) ElementType() reflect.Type {
	return reflect.TypeOf((*icapState)(nil)).Elem()
}

type icapArgs struct {
	// Message string.
	Buffer *string `pulumi:"buffer"`
	// Format flag.
	Format *string `pulumi:"format"`
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header *string `pulumi:"header"`
	// Message type.
	MsgType string `pulumi:"msgType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Icap resource.
type IcapArgs struct {
	// Message string.
	Buffer pulumi.StringPtrInput
	// Format flag.
	Format pulumi.StringPtrInput
	// Header flag. Valid values: `none`, `http`, `8bit`.
	Header pulumi.StringPtrInput
	// Message type.
	MsgType pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IcapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*icapArgs)(nil)).Elem()
}

type IcapInput interface {
	pulumi.Input

	ToIcapOutput() IcapOutput
	ToIcapOutputWithContext(ctx context.Context) IcapOutput
}

func (*Icap) ElementType() reflect.Type {
	return reflect.TypeOf((**Icap)(nil)).Elem()
}

func (i *Icap) ToIcapOutput() IcapOutput {
	return i.ToIcapOutputWithContext(context.Background())
}

func (i *Icap) ToIcapOutputWithContext(ctx context.Context) IcapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IcapOutput)
}

// IcapArrayInput is an input type that accepts IcapArray and IcapArrayOutput values.
// You can construct a concrete instance of `IcapArrayInput` via:
//
//	IcapArray{ IcapArgs{...} }
type IcapArrayInput interface {
	pulumi.Input

	ToIcapArrayOutput() IcapArrayOutput
	ToIcapArrayOutputWithContext(context.Context) IcapArrayOutput
}

type IcapArray []IcapInput

func (IcapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Icap)(nil)).Elem()
}

func (i IcapArray) ToIcapArrayOutput() IcapArrayOutput {
	return i.ToIcapArrayOutputWithContext(context.Background())
}

func (i IcapArray) ToIcapArrayOutputWithContext(ctx context.Context) IcapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IcapArrayOutput)
}

// IcapMapInput is an input type that accepts IcapMap and IcapMapOutput values.
// You can construct a concrete instance of `IcapMapInput` via:
//
//	IcapMap{ "key": IcapArgs{...} }
type IcapMapInput interface {
	pulumi.Input

	ToIcapMapOutput() IcapMapOutput
	ToIcapMapOutputWithContext(context.Context) IcapMapOutput
}

type IcapMap map[string]IcapInput

func (IcapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Icap)(nil)).Elem()
}

func (i IcapMap) ToIcapMapOutput() IcapMapOutput {
	return i.ToIcapMapOutputWithContext(context.Background())
}

func (i IcapMap) ToIcapMapOutputWithContext(ctx context.Context) IcapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IcapMapOutput)
}

type IcapOutput struct{ *pulumi.OutputState }

func (IcapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Icap)(nil)).Elem()
}

func (o IcapOutput) ToIcapOutput() IcapOutput {
	return o
}

func (o IcapOutput) ToIcapOutputWithContext(ctx context.Context) IcapOutput {
	return o
}

// Message string.
func (o IcapOutput) Buffer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Icap) pulumi.StringPtrOutput { return v.Buffer }).(pulumi.StringPtrOutput)
}

// Format flag.
func (o IcapOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *Icap) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// Header flag. Valid values: `none`, `http`, `8bit`.
func (o IcapOutput) Header() pulumi.StringOutput {
	return o.ApplyT(func(v *Icap) pulumi.StringOutput { return v.Header }).(pulumi.StringOutput)
}

// Message type.
func (o IcapOutput) MsgType() pulumi.StringOutput {
	return o.ApplyT(func(v *Icap) pulumi.StringOutput { return v.MsgType }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o IcapOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Icap) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type IcapArrayOutput struct{ *pulumi.OutputState }

func (IcapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Icap)(nil)).Elem()
}

func (o IcapArrayOutput) ToIcapArrayOutput() IcapArrayOutput {
	return o
}

func (o IcapArrayOutput) ToIcapArrayOutputWithContext(ctx context.Context) IcapArrayOutput {
	return o
}

func (o IcapArrayOutput) Index(i pulumi.IntInput) IcapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Icap {
		return vs[0].([]*Icap)[vs[1].(int)]
	}).(IcapOutput)
}

type IcapMapOutput struct{ *pulumi.OutputState }

func (IcapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Icap)(nil)).Elem()
}

func (o IcapMapOutput) ToIcapMapOutput() IcapMapOutput {
	return o
}

func (o IcapMapOutput) ToIcapMapOutputWithContext(ctx context.Context) IcapMapOutput {
	return o
}

func (o IcapMapOutput) MapIndex(k pulumi.StringInput) IcapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Icap {
		return vs[0].(map[string]*Icap)[vs[1].(string)]
	}).(IcapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IcapInput)(nil)).Elem(), &Icap{})
	pulumi.RegisterInputType(reflect.TypeOf((*IcapArrayInput)(nil)).Elem(), IcapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IcapMapInput)(nil)).Elem(), IcapMap{})
	pulumi.RegisterOutputType(IcapOutput{})
	pulumi.RegisterOutputType(IcapArrayOutput{})
	pulumi.RegisterOutputType(IcapMapOutput{})
}
