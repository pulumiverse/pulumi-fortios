// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Provides a resource to add a FortiCare license for FortiOS.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewLicenseForticare(ctx, "test2", &system.LicenseForticareArgs{
//				RegistrationCode: pulumi.String("license"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LicenseForticare struct {
	pulumi.CustomResourceState

	// Registration code.
	RegistrationCode pulumi.StringOutput `pulumi:"registrationCode"`
}

// NewLicenseForticare registers a new resource with the given unique name, arguments, and options.
func NewLicenseForticare(ctx *pulumi.Context,
	name string, args *LicenseForticareArgs, opts ...pulumi.ResourceOption) (*LicenseForticare, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegistrationCode == nil {
		return nil, errors.New("invalid value for required argument 'RegistrationCode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LicenseForticare
	err := ctx.RegisterResource("fortios:system/licenseForticare:LicenseForticare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseForticare gets an existing LicenseForticare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseForticare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseForticareState, opts ...pulumi.ResourceOption) (*LicenseForticare, error) {
	var resource LicenseForticare
	err := ctx.ReadResource("fortios:system/licenseForticare:LicenseForticare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseForticare resources.
type licenseForticareState struct {
	// Registration code.
	RegistrationCode *string `pulumi:"registrationCode"`
}

type LicenseForticareState struct {
	// Registration code.
	RegistrationCode pulumi.StringPtrInput
}

func (LicenseForticareState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseForticareState)(nil)).Elem()
}

type licenseForticareArgs struct {
	// Registration code.
	RegistrationCode string `pulumi:"registrationCode"`
}

// The set of arguments for constructing a LicenseForticare resource.
type LicenseForticareArgs struct {
	// Registration code.
	RegistrationCode pulumi.StringInput
}

func (LicenseForticareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseForticareArgs)(nil)).Elem()
}

type LicenseForticareInput interface {
	pulumi.Input

	ToLicenseForticareOutput() LicenseForticareOutput
	ToLicenseForticareOutputWithContext(ctx context.Context) LicenseForticareOutput
}

func (*LicenseForticare) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseForticare)(nil)).Elem()
}

func (i *LicenseForticare) ToLicenseForticareOutput() LicenseForticareOutput {
	return i.ToLicenseForticareOutputWithContext(context.Background())
}

func (i *LicenseForticare) ToLicenseForticareOutputWithContext(ctx context.Context) LicenseForticareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseForticareOutput)
}

// LicenseForticareArrayInput is an input type that accepts LicenseForticareArray and LicenseForticareArrayOutput values.
// You can construct a concrete instance of `LicenseForticareArrayInput` via:
//
//	LicenseForticareArray{ LicenseForticareArgs{...} }
type LicenseForticareArrayInput interface {
	pulumi.Input

	ToLicenseForticareArrayOutput() LicenseForticareArrayOutput
	ToLicenseForticareArrayOutputWithContext(context.Context) LicenseForticareArrayOutput
}

type LicenseForticareArray []LicenseForticareInput

func (LicenseForticareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseForticare)(nil)).Elem()
}

func (i LicenseForticareArray) ToLicenseForticareArrayOutput() LicenseForticareArrayOutput {
	return i.ToLicenseForticareArrayOutputWithContext(context.Background())
}

func (i LicenseForticareArray) ToLicenseForticareArrayOutputWithContext(ctx context.Context) LicenseForticareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseForticareArrayOutput)
}

// LicenseForticareMapInput is an input type that accepts LicenseForticareMap and LicenseForticareMapOutput values.
// You can construct a concrete instance of `LicenseForticareMapInput` via:
//
//	LicenseForticareMap{ "key": LicenseForticareArgs{...} }
type LicenseForticareMapInput interface {
	pulumi.Input

	ToLicenseForticareMapOutput() LicenseForticareMapOutput
	ToLicenseForticareMapOutputWithContext(context.Context) LicenseForticareMapOutput
}

type LicenseForticareMap map[string]LicenseForticareInput

func (LicenseForticareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseForticare)(nil)).Elem()
}

func (i LicenseForticareMap) ToLicenseForticareMapOutput() LicenseForticareMapOutput {
	return i.ToLicenseForticareMapOutputWithContext(context.Background())
}

func (i LicenseForticareMap) ToLicenseForticareMapOutputWithContext(ctx context.Context) LicenseForticareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseForticareMapOutput)
}

type LicenseForticareOutput struct{ *pulumi.OutputState }

func (LicenseForticareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseForticare)(nil)).Elem()
}

func (o LicenseForticareOutput) ToLicenseForticareOutput() LicenseForticareOutput {
	return o
}

func (o LicenseForticareOutput) ToLicenseForticareOutputWithContext(ctx context.Context) LicenseForticareOutput {
	return o
}

// Registration code.
func (o LicenseForticareOutput) RegistrationCode() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseForticare) pulumi.StringOutput { return v.RegistrationCode }).(pulumi.StringOutput)
}

type LicenseForticareArrayOutput struct{ *pulumi.OutputState }

func (LicenseForticareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseForticare)(nil)).Elem()
}

func (o LicenseForticareArrayOutput) ToLicenseForticareArrayOutput() LicenseForticareArrayOutput {
	return o
}

func (o LicenseForticareArrayOutput) ToLicenseForticareArrayOutputWithContext(ctx context.Context) LicenseForticareArrayOutput {
	return o
}

func (o LicenseForticareArrayOutput) Index(i pulumi.IntInput) LicenseForticareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LicenseForticare {
		return vs[0].([]*LicenseForticare)[vs[1].(int)]
	}).(LicenseForticareOutput)
}

type LicenseForticareMapOutput struct{ *pulumi.OutputState }

func (LicenseForticareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseForticare)(nil)).Elem()
}

func (o LicenseForticareMapOutput) ToLicenseForticareMapOutput() LicenseForticareMapOutput {
	return o
}

func (o LicenseForticareMapOutput) ToLicenseForticareMapOutputWithContext(ctx context.Context) LicenseForticareMapOutput {
	return o
}

func (o LicenseForticareMapOutput) MapIndex(k pulumi.StringInput) LicenseForticareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LicenseForticare {
		return vs[0].(map[string]*LicenseForticare)[vs[1].(string)]
	}).(LicenseForticareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseForticareInput)(nil)).Elem(), &LicenseForticare{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseForticareArrayInput)(nil)).Elem(), LicenseForticareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseForticareMapInput)(nil)).Elem(), LicenseForticareMap{})
	pulumi.RegisterOutputType(LicenseForticareOutput{})
	pulumi.RegisterOutputType(LicenseForticareArrayOutput{})
	pulumi.RegisterOutputType(LicenseForticareMapOutput{})
}
