// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure WCCP.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewWccp(ctx, "trname", &system.WccpArgs{
//				AssignmentBucketFormat: pulumi.String("cisco-implementation"),
//				AssignmentDstaddrMask:  pulumi.String("0.0.0.0"),
//				AssignmentMethod:       pulumi.String("HASH"),
//				AssignmentSrcaddrMask:  pulumi.String("0.0.23.65"),
//				AssignmentWeight:       pulumi.Int(0),
//				Authentication:         pulumi.String("disable"),
//				CacheEngineMethod:      pulumi.String("GRE"),
//				CacheId:                pulumi.String("1.1.1.1"),
//				ForwardMethod:          pulumi.String("GRE"),
//				GroupAddress:           pulumi.String("0.0.0.0"),
//				PrimaryHash:            pulumi.String("dst-ip"),
//				Priority:               pulumi.Int(0),
//				Protocol:               pulumi.Int(0),
//				ReturnMethod:           pulumi.String("GRE"),
//				RouterId:               pulumi.String("1.1.1.1"),
//				RouterList:             pulumi.String("\"1.0.0.0\" "),
//				ServerType:             pulumi.String("forward"),
//				ServiceId:              pulumi.String("1"),
//				ServiceType:            pulumi.String("auto"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// System Wccp can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/wccp:Wccp labelname {{service_id}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/wccp:Wccp labelname {{service_id}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Wccp struct {
	pulumi.CustomResourceState

	// Assignment bucket format for the WCCP cache engine. Valid values: `wccp-v2`, `cisco-implementation`.
	AssignmentBucketFormat pulumi.StringOutput `pulumi:"assignmentBucketFormat"`
	// Assignment destination address mask.
	AssignmentDstaddrMask pulumi.StringOutput `pulumi:"assignmentDstaddrMask"`
	// Hash key assignment preference. Valid values: `HASH`, `MASK`, `any`.
	AssignmentMethod pulumi.StringOutput `pulumi:"assignmentMethod"`
	// Assignment source address mask.
	AssignmentSrcaddrMask pulumi.StringOutput `pulumi:"assignmentSrcaddrMask"`
	// Assignment of hash weight/ratio for the WCCP cache engine.
	AssignmentWeight pulumi.IntOutput `pulumi:"assignmentWeight"`
	// Enable/disable MD5 authentication. Valid values: `enable`, `disable`.
	Authentication pulumi.StringOutput `pulumi:"authentication"`
	// Method used to forward traffic to the routers or to return to the cache engine. Valid values: `GRE`, `L2`.
	CacheEngineMethod pulumi.StringOutput `pulumi:"cacheEngineMethod"`
	// IP address known to all routers. If the addresses are the same, use the default 0.0.0.0.
	CacheId pulumi.StringOutput `pulumi:"cacheId"`
	// Method used to forward traffic to the cache servers. Valid values: `GRE`, `L2`, `any`.
	ForwardMethod pulumi.StringOutput `pulumi:"forwardMethod"`
	// IP multicast address used by the cache routers. For the FortiGate to ignore multicast WCCP traffic, use the default 0.0.0.0.
	GroupAddress pulumi.StringOutput `pulumi:"groupAddress"`
	// Password for MD5 authentication.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Service ports.
	Ports pulumi.StringOutput `pulumi:"ports"`
	// Match method. Valid values: `source`, `destination`.
	PortsDefined pulumi.StringOutput `pulumi:"portsDefined"`
	// Hash method. Valid values: `src-ip`, `dst-ip`, `src-port`, `dst-port`.
	PrimaryHash pulumi.StringOutput `pulumi:"primaryHash"`
	// Service priority.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// Service protocol.
	Protocol pulumi.IntOutput `pulumi:"protocol"`
	// Method used to decline a redirected packet and return it to the FortiGate. Valid values: `GRE`, `L2`, `any`.
	ReturnMethod pulumi.StringOutput `pulumi:"returnMethod"`
	// IP address known to all cache engines. If all cache engines connect to the same FortiGate interface, use the default 0.0.0.0.
	RouterId pulumi.StringOutput `pulumi:"routerId"`
	// IP addresses of one or more WCCP routers.
	RouterList pulumi.StringOutput `pulumi:"routerList"`
	// IP addresses and netmasks for up to four cache servers.
	ServerList pulumi.StringOutput `pulumi:"serverList"`
	// Cache server type. Valid values: `forward`, `proxy`.
	ServerType pulumi.StringOutput `pulumi:"serverType"`
	// Service ID.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// WCCP service type used by the cache server for logical interception and redirection of traffic. Valid values: `auto`, `standard`, `dynamic`.
	ServiceType pulumi.StringOutput `pulumi:"serviceType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewWccp registers a new resource with the given unique name, arguments, and options.
func NewWccp(ctx *pulumi.Context,
	name string, args *WccpArgs, opts ...pulumi.ResourceOption) (*Wccp, error) {
	if args == nil {
		args = &WccpArgs{}
	}

	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Wccp
	err := ctx.RegisterResource("fortios:system/wccp:Wccp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWccp gets an existing Wccp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWccp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WccpState, opts ...pulumi.ResourceOption) (*Wccp, error) {
	var resource Wccp
	err := ctx.ReadResource("fortios:system/wccp:Wccp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Wccp resources.
type wccpState struct {
	// Assignment bucket format for the WCCP cache engine. Valid values: `wccp-v2`, `cisco-implementation`.
	AssignmentBucketFormat *string `pulumi:"assignmentBucketFormat"`
	// Assignment destination address mask.
	AssignmentDstaddrMask *string `pulumi:"assignmentDstaddrMask"`
	// Hash key assignment preference. Valid values: `HASH`, `MASK`, `any`.
	AssignmentMethod *string `pulumi:"assignmentMethod"`
	// Assignment source address mask.
	AssignmentSrcaddrMask *string `pulumi:"assignmentSrcaddrMask"`
	// Assignment of hash weight/ratio for the WCCP cache engine.
	AssignmentWeight *int `pulumi:"assignmentWeight"`
	// Enable/disable MD5 authentication. Valid values: `enable`, `disable`.
	Authentication *string `pulumi:"authentication"`
	// Method used to forward traffic to the routers or to return to the cache engine. Valid values: `GRE`, `L2`.
	CacheEngineMethod *string `pulumi:"cacheEngineMethod"`
	// IP address known to all routers. If the addresses are the same, use the default 0.0.0.0.
	CacheId *string `pulumi:"cacheId"`
	// Method used to forward traffic to the cache servers. Valid values: `GRE`, `L2`, `any`.
	ForwardMethod *string `pulumi:"forwardMethod"`
	// IP multicast address used by the cache routers. For the FortiGate to ignore multicast WCCP traffic, use the default 0.0.0.0.
	GroupAddress *string `pulumi:"groupAddress"`
	// Password for MD5 authentication.
	Password *string `pulumi:"password"`
	// Service ports.
	Ports *string `pulumi:"ports"`
	// Match method. Valid values: `source`, `destination`.
	PortsDefined *string `pulumi:"portsDefined"`
	// Hash method. Valid values: `src-ip`, `dst-ip`, `src-port`, `dst-port`.
	PrimaryHash *string `pulumi:"primaryHash"`
	// Service priority.
	Priority *int `pulumi:"priority"`
	// Service protocol.
	Protocol *int `pulumi:"protocol"`
	// Method used to decline a redirected packet and return it to the FortiGate. Valid values: `GRE`, `L2`, `any`.
	ReturnMethod *string `pulumi:"returnMethod"`
	// IP address known to all cache engines. If all cache engines connect to the same FortiGate interface, use the default 0.0.0.0.
	RouterId *string `pulumi:"routerId"`
	// IP addresses of one or more WCCP routers.
	RouterList *string `pulumi:"routerList"`
	// IP addresses and netmasks for up to four cache servers.
	ServerList *string `pulumi:"serverList"`
	// Cache server type. Valid values: `forward`, `proxy`.
	ServerType *string `pulumi:"serverType"`
	// Service ID.
	ServiceId *string `pulumi:"serviceId"`
	// WCCP service type used by the cache server for logical interception and redirection of traffic. Valid values: `auto`, `standard`, `dynamic`.
	ServiceType *string `pulumi:"serviceType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WccpState struct {
	// Assignment bucket format for the WCCP cache engine. Valid values: `wccp-v2`, `cisco-implementation`.
	AssignmentBucketFormat pulumi.StringPtrInput
	// Assignment destination address mask.
	AssignmentDstaddrMask pulumi.StringPtrInput
	// Hash key assignment preference. Valid values: `HASH`, `MASK`, `any`.
	AssignmentMethod pulumi.StringPtrInput
	// Assignment source address mask.
	AssignmentSrcaddrMask pulumi.StringPtrInput
	// Assignment of hash weight/ratio for the WCCP cache engine.
	AssignmentWeight pulumi.IntPtrInput
	// Enable/disable MD5 authentication. Valid values: `enable`, `disable`.
	Authentication pulumi.StringPtrInput
	// Method used to forward traffic to the routers or to return to the cache engine. Valid values: `GRE`, `L2`.
	CacheEngineMethod pulumi.StringPtrInput
	// IP address known to all routers. If the addresses are the same, use the default 0.0.0.0.
	CacheId pulumi.StringPtrInput
	// Method used to forward traffic to the cache servers. Valid values: `GRE`, `L2`, `any`.
	ForwardMethod pulumi.StringPtrInput
	// IP multicast address used by the cache routers. For the FortiGate to ignore multicast WCCP traffic, use the default 0.0.0.0.
	GroupAddress pulumi.StringPtrInput
	// Password for MD5 authentication.
	Password pulumi.StringPtrInput
	// Service ports.
	Ports pulumi.StringPtrInput
	// Match method. Valid values: `source`, `destination`.
	PortsDefined pulumi.StringPtrInput
	// Hash method. Valid values: `src-ip`, `dst-ip`, `src-port`, `dst-port`.
	PrimaryHash pulumi.StringPtrInput
	// Service priority.
	Priority pulumi.IntPtrInput
	// Service protocol.
	Protocol pulumi.IntPtrInput
	// Method used to decline a redirected packet and return it to the FortiGate. Valid values: `GRE`, `L2`, `any`.
	ReturnMethod pulumi.StringPtrInput
	// IP address known to all cache engines. If all cache engines connect to the same FortiGate interface, use the default 0.0.0.0.
	RouterId pulumi.StringPtrInput
	// IP addresses of one or more WCCP routers.
	RouterList pulumi.StringPtrInput
	// IP addresses and netmasks for up to four cache servers.
	ServerList pulumi.StringPtrInput
	// Cache server type. Valid values: `forward`, `proxy`.
	ServerType pulumi.StringPtrInput
	// Service ID.
	ServiceId pulumi.StringPtrInput
	// WCCP service type used by the cache server for logical interception and redirection of traffic. Valid values: `auto`, `standard`, `dynamic`.
	ServiceType pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WccpState) ElementType() reflect.Type {
	return reflect.TypeOf((*wccpState)(nil)).Elem()
}

type wccpArgs struct {
	// Assignment bucket format for the WCCP cache engine. Valid values: `wccp-v2`, `cisco-implementation`.
	AssignmentBucketFormat *string `pulumi:"assignmentBucketFormat"`
	// Assignment destination address mask.
	AssignmentDstaddrMask *string `pulumi:"assignmentDstaddrMask"`
	// Hash key assignment preference. Valid values: `HASH`, `MASK`, `any`.
	AssignmentMethod *string `pulumi:"assignmentMethod"`
	// Assignment source address mask.
	AssignmentSrcaddrMask *string `pulumi:"assignmentSrcaddrMask"`
	// Assignment of hash weight/ratio for the WCCP cache engine.
	AssignmentWeight *int `pulumi:"assignmentWeight"`
	// Enable/disable MD5 authentication. Valid values: `enable`, `disable`.
	Authentication *string `pulumi:"authentication"`
	// Method used to forward traffic to the routers or to return to the cache engine. Valid values: `GRE`, `L2`.
	CacheEngineMethod *string `pulumi:"cacheEngineMethod"`
	// IP address known to all routers. If the addresses are the same, use the default 0.0.0.0.
	CacheId *string `pulumi:"cacheId"`
	// Method used to forward traffic to the cache servers. Valid values: `GRE`, `L2`, `any`.
	ForwardMethod *string `pulumi:"forwardMethod"`
	// IP multicast address used by the cache routers. For the FortiGate to ignore multicast WCCP traffic, use the default 0.0.0.0.
	GroupAddress *string `pulumi:"groupAddress"`
	// Password for MD5 authentication.
	Password *string `pulumi:"password"`
	// Service ports.
	Ports *string `pulumi:"ports"`
	// Match method. Valid values: `source`, `destination`.
	PortsDefined *string `pulumi:"portsDefined"`
	// Hash method. Valid values: `src-ip`, `dst-ip`, `src-port`, `dst-port`.
	PrimaryHash *string `pulumi:"primaryHash"`
	// Service priority.
	Priority *int `pulumi:"priority"`
	// Service protocol.
	Protocol *int `pulumi:"protocol"`
	// Method used to decline a redirected packet and return it to the FortiGate. Valid values: `GRE`, `L2`, `any`.
	ReturnMethod *string `pulumi:"returnMethod"`
	// IP address known to all cache engines. If all cache engines connect to the same FortiGate interface, use the default 0.0.0.0.
	RouterId *string `pulumi:"routerId"`
	// IP addresses of one or more WCCP routers.
	RouterList *string `pulumi:"routerList"`
	// IP addresses and netmasks for up to four cache servers.
	ServerList *string `pulumi:"serverList"`
	// Cache server type. Valid values: `forward`, `proxy`.
	ServerType *string `pulumi:"serverType"`
	// Service ID.
	ServiceId *string `pulumi:"serviceId"`
	// WCCP service type used by the cache server for logical interception and redirection of traffic. Valid values: `auto`, `standard`, `dynamic`.
	ServiceType *string `pulumi:"serviceType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Wccp resource.
type WccpArgs struct {
	// Assignment bucket format for the WCCP cache engine. Valid values: `wccp-v2`, `cisco-implementation`.
	AssignmentBucketFormat pulumi.StringPtrInput
	// Assignment destination address mask.
	AssignmentDstaddrMask pulumi.StringPtrInput
	// Hash key assignment preference. Valid values: `HASH`, `MASK`, `any`.
	AssignmentMethod pulumi.StringPtrInput
	// Assignment source address mask.
	AssignmentSrcaddrMask pulumi.StringPtrInput
	// Assignment of hash weight/ratio for the WCCP cache engine.
	AssignmentWeight pulumi.IntPtrInput
	// Enable/disable MD5 authentication. Valid values: `enable`, `disable`.
	Authentication pulumi.StringPtrInput
	// Method used to forward traffic to the routers or to return to the cache engine. Valid values: `GRE`, `L2`.
	CacheEngineMethod pulumi.StringPtrInput
	// IP address known to all routers. If the addresses are the same, use the default 0.0.0.0.
	CacheId pulumi.StringPtrInput
	// Method used to forward traffic to the cache servers. Valid values: `GRE`, `L2`, `any`.
	ForwardMethod pulumi.StringPtrInput
	// IP multicast address used by the cache routers. For the FortiGate to ignore multicast WCCP traffic, use the default 0.0.0.0.
	GroupAddress pulumi.StringPtrInput
	// Password for MD5 authentication.
	Password pulumi.StringPtrInput
	// Service ports.
	Ports pulumi.StringPtrInput
	// Match method. Valid values: `source`, `destination`.
	PortsDefined pulumi.StringPtrInput
	// Hash method. Valid values: `src-ip`, `dst-ip`, `src-port`, `dst-port`.
	PrimaryHash pulumi.StringPtrInput
	// Service priority.
	Priority pulumi.IntPtrInput
	// Service protocol.
	Protocol pulumi.IntPtrInput
	// Method used to decline a redirected packet and return it to the FortiGate. Valid values: `GRE`, `L2`, `any`.
	ReturnMethod pulumi.StringPtrInput
	// IP address known to all cache engines. If all cache engines connect to the same FortiGate interface, use the default 0.0.0.0.
	RouterId pulumi.StringPtrInput
	// IP addresses of one or more WCCP routers.
	RouterList pulumi.StringPtrInput
	// IP addresses and netmasks for up to four cache servers.
	ServerList pulumi.StringPtrInput
	// Cache server type. Valid values: `forward`, `proxy`.
	ServerType pulumi.StringPtrInput
	// Service ID.
	ServiceId pulumi.StringPtrInput
	// WCCP service type used by the cache server for logical interception and redirection of traffic. Valid values: `auto`, `standard`, `dynamic`.
	ServiceType pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WccpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wccpArgs)(nil)).Elem()
}

type WccpInput interface {
	pulumi.Input

	ToWccpOutput() WccpOutput
	ToWccpOutputWithContext(ctx context.Context) WccpOutput
}

func (*Wccp) ElementType() reflect.Type {
	return reflect.TypeOf((**Wccp)(nil)).Elem()
}

func (i *Wccp) ToWccpOutput() WccpOutput {
	return i.ToWccpOutputWithContext(context.Background())
}

func (i *Wccp) ToWccpOutputWithContext(ctx context.Context) WccpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WccpOutput)
}

// WccpArrayInput is an input type that accepts WccpArray and WccpArrayOutput values.
// You can construct a concrete instance of `WccpArrayInput` via:
//
//	WccpArray{ WccpArgs{...} }
type WccpArrayInput interface {
	pulumi.Input

	ToWccpArrayOutput() WccpArrayOutput
	ToWccpArrayOutputWithContext(context.Context) WccpArrayOutput
}

type WccpArray []WccpInput

func (WccpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Wccp)(nil)).Elem()
}

func (i WccpArray) ToWccpArrayOutput() WccpArrayOutput {
	return i.ToWccpArrayOutputWithContext(context.Background())
}

func (i WccpArray) ToWccpArrayOutputWithContext(ctx context.Context) WccpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WccpArrayOutput)
}

// WccpMapInput is an input type that accepts WccpMap and WccpMapOutput values.
// You can construct a concrete instance of `WccpMapInput` via:
//
//	WccpMap{ "key": WccpArgs{...} }
type WccpMapInput interface {
	pulumi.Input

	ToWccpMapOutput() WccpMapOutput
	ToWccpMapOutputWithContext(context.Context) WccpMapOutput
}

type WccpMap map[string]WccpInput

func (WccpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Wccp)(nil)).Elem()
}

func (i WccpMap) ToWccpMapOutput() WccpMapOutput {
	return i.ToWccpMapOutputWithContext(context.Background())
}

func (i WccpMap) ToWccpMapOutputWithContext(ctx context.Context) WccpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WccpMapOutput)
}

type WccpOutput struct{ *pulumi.OutputState }

func (WccpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Wccp)(nil)).Elem()
}

func (o WccpOutput) ToWccpOutput() WccpOutput {
	return o
}

func (o WccpOutput) ToWccpOutputWithContext(ctx context.Context) WccpOutput {
	return o
}

// Assignment bucket format for the WCCP cache engine. Valid values: `wccp-v2`, `cisco-implementation`.
func (o WccpOutput) AssignmentBucketFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.AssignmentBucketFormat }).(pulumi.StringOutput)
}

// Assignment destination address mask.
func (o WccpOutput) AssignmentDstaddrMask() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.AssignmentDstaddrMask }).(pulumi.StringOutput)
}

// Hash key assignment preference. Valid values: `HASH`, `MASK`, `any`.
func (o WccpOutput) AssignmentMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.AssignmentMethod }).(pulumi.StringOutput)
}

// Assignment source address mask.
func (o WccpOutput) AssignmentSrcaddrMask() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.AssignmentSrcaddrMask }).(pulumi.StringOutput)
}

// Assignment of hash weight/ratio for the WCCP cache engine.
func (o WccpOutput) AssignmentWeight() pulumi.IntOutput {
	return o.ApplyT(func(v *Wccp) pulumi.IntOutput { return v.AssignmentWeight }).(pulumi.IntOutput)
}

// Enable/disable MD5 authentication. Valid values: `enable`, `disable`.
func (o WccpOutput) Authentication() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.Authentication }).(pulumi.StringOutput)
}

// Method used to forward traffic to the routers or to return to the cache engine. Valid values: `GRE`, `L2`.
func (o WccpOutput) CacheEngineMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.CacheEngineMethod }).(pulumi.StringOutput)
}

// IP address known to all routers. If the addresses are the same, use the default 0.0.0.0.
func (o WccpOutput) CacheId() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.CacheId }).(pulumi.StringOutput)
}

// Method used to forward traffic to the cache servers. Valid values: `GRE`, `L2`, `any`.
func (o WccpOutput) ForwardMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.ForwardMethod }).(pulumi.StringOutput)
}

// IP multicast address used by the cache routers. For the FortiGate to ignore multicast WCCP traffic, use the default 0.0.0.0.
func (o WccpOutput) GroupAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.GroupAddress }).(pulumi.StringOutput)
}

// Password for MD5 authentication.
func (o WccpOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Service ports.
func (o WccpOutput) Ports() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.Ports }).(pulumi.StringOutput)
}

// Match method. Valid values: `source`, `destination`.
func (o WccpOutput) PortsDefined() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.PortsDefined }).(pulumi.StringOutput)
}

// Hash method. Valid values: `src-ip`, `dst-ip`, `src-port`, `dst-port`.
func (o WccpOutput) PrimaryHash() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.PrimaryHash }).(pulumi.StringOutput)
}

// Service priority.
func (o WccpOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *Wccp) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// Service protocol.
func (o WccpOutput) Protocol() pulumi.IntOutput {
	return o.ApplyT(func(v *Wccp) pulumi.IntOutput { return v.Protocol }).(pulumi.IntOutput)
}

// Method used to decline a redirected packet and return it to the FortiGate. Valid values: `GRE`, `L2`, `any`.
func (o WccpOutput) ReturnMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.ReturnMethod }).(pulumi.StringOutput)
}

// IP address known to all cache engines. If all cache engines connect to the same FortiGate interface, use the default 0.0.0.0.
func (o WccpOutput) RouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.RouterId }).(pulumi.StringOutput)
}

// IP addresses of one or more WCCP routers.
func (o WccpOutput) RouterList() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.RouterList }).(pulumi.StringOutput)
}

// IP addresses and netmasks for up to four cache servers.
func (o WccpOutput) ServerList() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.ServerList }).(pulumi.StringOutput)
}

// Cache server type. Valid values: `forward`, `proxy`.
func (o WccpOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.ServerType }).(pulumi.StringOutput)
}

// Service ID.
func (o WccpOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// WCCP service type used by the cache server for logical interception and redirection of traffic. Valid values: `auto`, `standard`, `dynamic`.
func (o WccpOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.ServiceType }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o WccpOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Wccp) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type WccpArrayOutput struct{ *pulumi.OutputState }

func (WccpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Wccp)(nil)).Elem()
}

func (o WccpArrayOutput) ToWccpArrayOutput() WccpArrayOutput {
	return o
}

func (o WccpArrayOutput) ToWccpArrayOutputWithContext(ctx context.Context) WccpArrayOutput {
	return o
}

func (o WccpArrayOutput) Index(i pulumi.IntInput) WccpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Wccp {
		return vs[0].([]*Wccp)[vs[1].(int)]
	}).(WccpOutput)
}

type WccpMapOutput struct{ *pulumi.OutputState }

func (WccpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Wccp)(nil)).Elem()
}

func (o WccpMapOutput) ToWccpMapOutput() WccpMapOutput {
	return o
}

func (o WccpMapOutput) ToWccpMapOutputWithContext(ctx context.Context) WccpMapOutput {
	return o
}

func (o WccpMapOutput) MapIndex(k pulumi.StringInput) WccpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Wccp {
		return vs[0].(map[string]*Wccp)[vs[1].(string)]
	}).(WccpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WccpInput)(nil)).Elem(), &Wccp{})
	pulumi.RegisterInputType(reflect.TypeOf((*WccpArrayInput)(nil)).Elem(), WccpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WccpMapInput)(nil)).Elem(), WccpMap{})
	pulumi.RegisterOutputType(WccpOutput{})
	pulumi.RegisterOutputType(WccpArrayOutput{})
	pulumi.RegisterOutputType(WccpMapOutput{})
}
