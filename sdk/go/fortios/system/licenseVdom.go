// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Provides a resource to add a VDOM license for FortiOS.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewLicenseVdom(ctx, "test2", &system.LicenseVdomArgs{
//				License: pulumi.String("license"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LicenseVdom struct {
	pulumi.CustomResourceState

	// Registration code.
	License pulumi.StringOutput `pulumi:"license"`
}

// NewLicenseVdom registers a new resource with the given unique name, arguments, and options.
func NewLicenseVdom(ctx *pulumi.Context,
	name string, args *LicenseVdomArgs, opts ...pulumi.ResourceOption) (*LicenseVdom, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.License == nil {
		return nil, errors.New("invalid value for required argument 'License'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LicenseVdom
	err := ctx.RegisterResource("fortios:system/licenseVdom:LicenseVdom", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseVdom gets an existing LicenseVdom resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseVdom(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseVdomState, opts ...pulumi.ResourceOption) (*LicenseVdom, error) {
	var resource LicenseVdom
	err := ctx.ReadResource("fortios:system/licenseVdom:LicenseVdom", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseVdom resources.
type licenseVdomState struct {
	// Registration code.
	License *string `pulumi:"license"`
}

type LicenseVdomState struct {
	// Registration code.
	License pulumi.StringPtrInput
}

func (LicenseVdomState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseVdomState)(nil)).Elem()
}

type licenseVdomArgs struct {
	// Registration code.
	License string `pulumi:"license"`
}

// The set of arguments for constructing a LicenseVdom resource.
type LicenseVdomArgs struct {
	// Registration code.
	License pulumi.StringInput
}

func (LicenseVdomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseVdomArgs)(nil)).Elem()
}

type LicenseVdomInput interface {
	pulumi.Input

	ToLicenseVdomOutput() LicenseVdomOutput
	ToLicenseVdomOutputWithContext(ctx context.Context) LicenseVdomOutput
}

func (*LicenseVdom) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseVdom)(nil)).Elem()
}

func (i *LicenseVdom) ToLicenseVdomOutput() LicenseVdomOutput {
	return i.ToLicenseVdomOutputWithContext(context.Background())
}

func (i *LicenseVdom) ToLicenseVdomOutputWithContext(ctx context.Context) LicenseVdomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseVdomOutput)
}

// LicenseVdomArrayInput is an input type that accepts LicenseVdomArray and LicenseVdomArrayOutput values.
// You can construct a concrete instance of `LicenseVdomArrayInput` via:
//
//	LicenseVdomArray{ LicenseVdomArgs{...} }
type LicenseVdomArrayInput interface {
	pulumi.Input

	ToLicenseVdomArrayOutput() LicenseVdomArrayOutput
	ToLicenseVdomArrayOutputWithContext(context.Context) LicenseVdomArrayOutput
}

type LicenseVdomArray []LicenseVdomInput

func (LicenseVdomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseVdom)(nil)).Elem()
}

func (i LicenseVdomArray) ToLicenseVdomArrayOutput() LicenseVdomArrayOutput {
	return i.ToLicenseVdomArrayOutputWithContext(context.Background())
}

func (i LicenseVdomArray) ToLicenseVdomArrayOutputWithContext(ctx context.Context) LicenseVdomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseVdomArrayOutput)
}

// LicenseVdomMapInput is an input type that accepts LicenseVdomMap and LicenseVdomMapOutput values.
// You can construct a concrete instance of `LicenseVdomMapInput` via:
//
//	LicenseVdomMap{ "key": LicenseVdomArgs{...} }
type LicenseVdomMapInput interface {
	pulumi.Input

	ToLicenseVdomMapOutput() LicenseVdomMapOutput
	ToLicenseVdomMapOutputWithContext(context.Context) LicenseVdomMapOutput
}

type LicenseVdomMap map[string]LicenseVdomInput

func (LicenseVdomMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseVdom)(nil)).Elem()
}

func (i LicenseVdomMap) ToLicenseVdomMapOutput() LicenseVdomMapOutput {
	return i.ToLicenseVdomMapOutputWithContext(context.Background())
}

func (i LicenseVdomMap) ToLicenseVdomMapOutputWithContext(ctx context.Context) LicenseVdomMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseVdomMapOutput)
}

type LicenseVdomOutput struct{ *pulumi.OutputState }

func (LicenseVdomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseVdom)(nil)).Elem()
}

func (o LicenseVdomOutput) ToLicenseVdomOutput() LicenseVdomOutput {
	return o
}

func (o LicenseVdomOutput) ToLicenseVdomOutputWithContext(ctx context.Context) LicenseVdomOutput {
	return o
}

// Registration code.
func (o LicenseVdomOutput) License() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseVdom) pulumi.StringOutput { return v.License }).(pulumi.StringOutput)
}

type LicenseVdomArrayOutput struct{ *pulumi.OutputState }

func (LicenseVdomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseVdom)(nil)).Elem()
}

func (o LicenseVdomArrayOutput) ToLicenseVdomArrayOutput() LicenseVdomArrayOutput {
	return o
}

func (o LicenseVdomArrayOutput) ToLicenseVdomArrayOutputWithContext(ctx context.Context) LicenseVdomArrayOutput {
	return o
}

func (o LicenseVdomArrayOutput) Index(i pulumi.IntInput) LicenseVdomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LicenseVdom {
		return vs[0].([]*LicenseVdom)[vs[1].(int)]
	}).(LicenseVdomOutput)
}

type LicenseVdomMapOutput struct{ *pulumi.OutputState }

func (LicenseVdomMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseVdom)(nil)).Elem()
}

func (o LicenseVdomMapOutput) ToLicenseVdomMapOutput() LicenseVdomMapOutput {
	return o
}

func (o LicenseVdomMapOutput) ToLicenseVdomMapOutputWithContext(ctx context.Context) LicenseVdomMapOutput {
	return o
}

func (o LicenseVdomMapOutput) MapIndex(k pulumi.StringInput) LicenseVdomOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LicenseVdom {
		return vs[0].(map[string]*LicenseVdom)[vs[1].(string)]
	}).(LicenseVdomOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseVdomInput)(nil)).Elem(), &LicenseVdom{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseVdomArrayInput)(nil)).Elem(), LicenseVdomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseVdomMapInput)(nil)).Elem(), LicenseVdomMap{})
	pulumi.RegisterOutputType(LicenseVdomOutput{})
	pulumi.RegisterOutputType(LicenseVdomArrayOutput{})
	pulumi.RegisterOutputType(LicenseVdomMapOutput{})
}
