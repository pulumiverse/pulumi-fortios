// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure NAT64. Applies to FortiOS Version `<= 7.0.0`.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewNat64(ctx, "trname", &system.Nat64Args{
//				AlwaysSynthesizeAaaaRecord:     pulumi.String("enable"),
//				GenerateIpv6FragmentHeader:     pulumi.String("disable"),
//				Nat46ForceIpv4PacketForwarding: pulumi.String("disable"),
//				Nat64Prefix:                    pulumi.String("2001:1:2:3::/96"),
//				SecondaryPrefixStatus:          pulumi.String("disable"),
//				Status:                         pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// System Nat64 can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/nat64:Nat64 labelname SystemNat64
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/nat64:Nat64 labelname SystemNat64
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Nat64 struct {
	pulumi.CustomResourceState

	// Enable/disable AAAA record synthesis (default = enable). Valid values: `enable`, `disable`.
	AlwaysSynthesizeAaaaRecord pulumi.StringOutput `pulumi:"alwaysSynthesizeAaaaRecord"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Enable/disable IPv6 fragment header generation. Valid values: `enable`, `disable`.
	GenerateIpv6FragmentHeader pulumi.StringOutput `pulumi:"generateIpv6FragmentHeader"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Enable/disable mandatory IPv4 packet forwarding in nat46. Valid values: `enable`, `disable`.
	Nat46ForceIpv4PacketForwarding pulumi.StringOutput `pulumi:"nat46ForceIpv4PacketForwarding"`
	// NAT64 prefix must be ::/96 (default = 64:ff9b::/96).
	Nat64Prefix pulumi.StringOutput `pulumi:"nat64Prefix"`
	// Enable/disable secondary NAT64 prefix. Valid values: `enable`, `disable`.
	SecondaryPrefixStatus pulumi.StringOutput `pulumi:"secondaryPrefixStatus"`
	// Secondary NAT64 prefix. The structure of `secondaryPrefix` block is documented below.
	SecondaryPrefixes Nat64SecondaryPrefixArrayOutput `pulumi:"secondaryPrefixes"`
	// Enable/disable NAT64 (default = disable). Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewNat64 registers a new resource with the given unique name, arguments, and options.
func NewNat64(ctx *pulumi.Context,
	name string, args *Nat64Args, opts ...pulumi.ResourceOption) (*Nat64, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Nat64Prefix == nil {
		return nil, errors.New("invalid value for required argument 'Nat64Prefix'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Nat64
	err := ctx.RegisterResource("fortios:system/nat64:Nat64", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNat64 gets an existing Nat64 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNat64(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Nat64State, opts ...pulumi.ResourceOption) (*Nat64, error) {
	var resource Nat64
	err := ctx.ReadResource("fortios:system/nat64:Nat64", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Nat64 resources.
type nat64State struct {
	// Enable/disable AAAA record synthesis (default = enable). Valid values: `enable`, `disable`.
	AlwaysSynthesizeAaaaRecord *string `pulumi:"alwaysSynthesizeAaaaRecord"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable IPv6 fragment header generation. Valid values: `enable`, `disable`.
	GenerateIpv6FragmentHeader *string `pulumi:"generateIpv6FragmentHeader"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable mandatory IPv4 packet forwarding in nat46. Valid values: `enable`, `disable`.
	Nat46ForceIpv4PacketForwarding *string `pulumi:"nat46ForceIpv4PacketForwarding"`
	// NAT64 prefix must be ::/96 (default = 64:ff9b::/96).
	Nat64Prefix *string `pulumi:"nat64Prefix"`
	// Enable/disable secondary NAT64 prefix. Valid values: `enable`, `disable`.
	SecondaryPrefixStatus *string `pulumi:"secondaryPrefixStatus"`
	// Secondary NAT64 prefix. The structure of `secondaryPrefix` block is documented below.
	SecondaryPrefixes []Nat64SecondaryPrefix `pulumi:"secondaryPrefixes"`
	// Enable/disable NAT64 (default = disable). Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type Nat64State struct {
	// Enable/disable AAAA record synthesis (default = enable). Valid values: `enable`, `disable`.
	AlwaysSynthesizeAaaaRecord pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable IPv6 fragment header generation. Valid values: `enable`, `disable`.
	GenerateIpv6FragmentHeader pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable mandatory IPv4 packet forwarding in nat46. Valid values: `enable`, `disable`.
	Nat46ForceIpv4PacketForwarding pulumi.StringPtrInput
	// NAT64 prefix must be ::/96 (default = 64:ff9b::/96).
	Nat64Prefix pulumi.StringPtrInput
	// Enable/disable secondary NAT64 prefix. Valid values: `enable`, `disable`.
	SecondaryPrefixStatus pulumi.StringPtrInput
	// Secondary NAT64 prefix. The structure of `secondaryPrefix` block is documented below.
	SecondaryPrefixes Nat64SecondaryPrefixArrayInput
	// Enable/disable NAT64 (default = disable). Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Nat64State) ElementType() reflect.Type {
	return reflect.TypeOf((*nat64State)(nil)).Elem()
}

type nat64Args struct {
	// Enable/disable AAAA record synthesis (default = enable). Valid values: `enable`, `disable`.
	AlwaysSynthesizeAaaaRecord *string `pulumi:"alwaysSynthesizeAaaaRecord"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable IPv6 fragment header generation. Valid values: `enable`, `disable`.
	GenerateIpv6FragmentHeader *string `pulumi:"generateIpv6FragmentHeader"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable mandatory IPv4 packet forwarding in nat46. Valid values: `enable`, `disable`.
	Nat46ForceIpv4PacketForwarding *string `pulumi:"nat46ForceIpv4PacketForwarding"`
	// NAT64 prefix must be ::/96 (default = 64:ff9b::/96).
	Nat64Prefix string `pulumi:"nat64Prefix"`
	// Enable/disable secondary NAT64 prefix. Valid values: `enable`, `disable`.
	SecondaryPrefixStatus *string `pulumi:"secondaryPrefixStatus"`
	// Secondary NAT64 prefix. The structure of `secondaryPrefix` block is documented below.
	SecondaryPrefixes []Nat64SecondaryPrefix `pulumi:"secondaryPrefixes"`
	// Enable/disable NAT64 (default = disable). Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Nat64 resource.
type Nat64Args struct {
	// Enable/disable AAAA record synthesis (default = enable). Valid values: `enable`, `disable`.
	AlwaysSynthesizeAaaaRecord pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable IPv6 fragment header generation. Valid values: `enable`, `disable`.
	GenerateIpv6FragmentHeader pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable mandatory IPv4 packet forwarding in nat46. Valid values: `enable`, `disable`.
	Nat46ForceIpv4PacketForwarding pulumi.StringPtrInput
	// NAT64 prefix must be ::/96 (default = 64:ff9b::/96).
	Nat64Prefix pulumi.StringInput
	// Enable/disable secondary NAT64 prefix. Valid values: `enable`, `disable`.
	SecondaryPrefixStatus pulumi.StringPtrInput
	// Secondary NAT64 prefix. The structure of `secondaryPrefix` block is documented below.
	SecondaryPrefixes Nat64SecondaryPrefixArrayInput
	// Enable/disable NAT64 (default = disable). Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Nat64Args) ElementType() reflect.Type {
	return reflect.TypeOf((*nat64Args)(nil)).Elem()
}

type Nat64Input interface {
	pulumi.Input

	ToNat64Output() Nat64Output
	ToNat64OutputWithContext(ctx context.Context) Nat64Output
}

func (*Nat64) ElementType() reflect.Type {
	return reflect.TypeOf((**Nat64)(nil)).Elem()
}

func (i *Nat64) ToNat64Output() Nat64Output {
	return i.ToNat64OutputWithContext(context.Background())
}

func (i *Nat64) ToNat64OutputWithContext(ctx context.Context) Nat64Output {
	return pulumi.ToOutputWithContext(ctx, i).(Nat64Output)
}

// Nat64ArrayInput is an input type that accepts Nat64Array and Nat64ArrayOutput values.
// You can construct a concrete instance of `Nat64ArrayInput` via:
//
//	Nat64Array{ Nat64Args{...} }
type Nat64ArrayInput interface {
	pulumi.Input

	ToNat64ArrayOutput() Nat64ArrayOutput
	ToNat64ArrayOutputWithContext(context.Context) Nat64ArrayOutput
}

type Nat64Array []Nat64Input

func (Nat64Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Nat64)(nil)).Elem()
}

func (i Nat64Array) ToNat64ArrayOutput() Nat64ArrayOutput {
	return i.ToNat64ArrayOutputWithContext(context.Background())
}

func (i Nat64Array) ToNat64ArrayOutputWithContext(ctx context.Context) Nat64ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nat64ArrayOutput)
}

// Nat64MapInput is an input type that accepts Nat64Map and Nat64MapOutput values.
// You can construct a concrete instance of `Nat64MapInput` via:
//
//	Nat64Map{ "key": Nat64Args{...} }
type Nat64MapInput interface {
	pulumi.Input

	ToNat64MapOutput() Nat64MapOutput
	ToNat64MapOutputWithContext(context.Context) Nat64MapOutput
}

type Nat64Map map[string]Nat64Input

func (Nat64Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Nat64)(nil)).Elem()
}

func (i Nat64Map) ToNat64MapOutput() Nat64MapOutput {
	return i.ToNat64MapOutputWithContext(context.Background())
}

func (i Nat64Map) ToNat64MapOutputWithContext(ctx context.Context) Nat64MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nat64MapOutput)
}

type Nat64Output struct{ *pulumi.OutputState }

func (Nat64Output) ElementType() reflect.Type {
	return reflect.TypeOf((**Nat64)(nil)).Elem()
}

func (o Nat64Output) ToNat64Output() Nat64Output {
	return o
}

func (o Nat64Output) ToNat64OutputWithContext(ctx context.Context) Nat64Output {
	return o
}

// Enable/disable AAAA record synthesis (default = enable). Valid values: `enable`, `disable`.
func (o Nat64Output) AlwaysSynthesizeAaaaRecord() pulumi.StringOutput {
	return o.ApplyT(func(v *Nat64) pulumi.StringOutput { return v.AlwaysSynthesizeAaaaRecord }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o Nat64Output) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nat64) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Enable/disable IPv6 fragment header generation. Valid values: `enable`, `disable`.
func (o Nat64Output) GenerateIpv6FragmentHeader() pulumi.StringOutput {
	return o.ApplyT(func(v *Nat64) pulumi.StringOutput { return v.GenerateIpv6FragmentHeader }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o Nat64Output) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nat64) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Enable/disable mandatory IPv4 packet forwarding in nat46. Valid values: `enable`, `disable`.
func (o Nat64Output) Nat46ForceIpv4PacketForwarding() pulumi.StringOutput {
	return o.ApplyT(func(v *Nat64) pulumi.StringOutput { return v.Nat46ForceIpv4PacketForwarding }).(pulumi.StringOutput)
}

// NAT64 prefix must be ::/96 (default = 64:ff9b::/96).
func (o Nat64Output) Nat64Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Nat64) pulumi.StringOutput { return v.Nat64Prefix }).(pulumi.StringOutput)
}

// Enable/disable secondary NAT64 prefix. Valid values: `enable`, `disable`.
func (o Nat64Output) SecondaryPrefixStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Nat64) pulumi.StringOutput { return v.SecondaryPrefixStatus }).(pulumi.StringOutput)
}

// Secondary NAT64 prefix. The structure of `secondaryPrefix` block is documented below.
func (o Nat64Output) SecondaryPrefixes() Nat64SecondaryPrefixArrayOutput {
	return o.ApplyT(func(v *Nat64) Nat64SecondaryPrefixArrayOutput { return v.SecondaryPrefixes }).(Nat64SecondaryPrefixArrayOutput)
}

// Enable/disable NAT64 (default = disable). Valid values: `enable`, `disable`.
func (o Nat64Output) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Nat64) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o Nat64Output) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nat64) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type Nat64ArrayOutput struct{ *pulumi.OutputState }

func (Nat64ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Nat64)(nil)).Elem()
}

func (o Nat64ArrayOutput) ToNat64ArrayOutput() Nat64ArrayOutput {
	return o
}

func (o Nat64ArrayOutput) ToNat64ArrayOutputWithContext(ctx context.Context) Nat64ArrayOutput {
	return o
}

func (o Nat64ArrayOutput) Index(i pulumi.IntInput) Nat64Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Nat64 {
		return vs[0].([]*Nat64)[vs[1].(int)]
	}).(Nat64Output)
}

type Nat64MapOutput struct{ *pulumi.OutputState }

func (Nat64MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Nat64)(nil)).Elem()
}

func (o Nat64MapOutput) ToNat64MapOutput() Nat64MapOutput {
	return o
}

func (o Nat64MapOutput) ToNat64MapOutputWithContext(ctx context.Context) Nat64MapOutput {
	return o
}

func (o Nat64MapOutput) MapIndex(k pulumi.StringInput) Nat64Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Nat64 {
		return vs[0].(map[string]*Nat64)[vs[1].(string)]
	}).(Nat64Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Nat64Input)(nil)).Elem(), &Nat64{})
	pulumi.RegisterInputType(reflect.TypeOf((*Nat64ArrayInput)(nil)).Elem(), Nat64Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*Nat64MapInput)(nil)).Elem(), Nat64Map{})
	pulumi.RegisterOutputType(Nat64Output{})
	pulumi.RegisterOutputType(Nat64ArrayOutput{})
	pulumi.RegisterOutputType(Nat64MapOutput{})
}
