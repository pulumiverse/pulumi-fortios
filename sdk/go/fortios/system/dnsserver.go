// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure DNS servers.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewDnsserver(ctx, "trname", &system.DnsserverArgs{
//				DnsfilterProfile: pulumi.String("default"),
//				Mode:             pulumi.String("forward-only"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// System DnsServer can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/dnsserver:Dnsserver labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/dnsserver:Dnsserver labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Dnsserver struct {
	pulumi.CustomResourceState

	// DNS filter profile.
	DnsfilterProfile pulumi.StringOutput `pulumi:"dnsfilterProfile"`
	// DNS over HTTPS. Valid values: `enable`, `disable`.
	Doh pulumi.StringOutput `pulumi:"doh"`
	// Enable/disable DNS over QUIC/HTTP3/443 (default = disable). Valid values: `enable`, `disable`.
	Doh3 pulumi.StringOutput `pulumi:"doh3"`
	// Enable/disable DNS over QUIC/853 (default = disable). Valid values: `enable`, `disable`.
	Doq pulumi.StringOutput `pulumi:"doq"`
	// DNS server mode. Valid values: `recursive`, `non-recursive`, `forward-only`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// DNS server name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewDnsserver registers a new resource with the given unique name, arguments, and options.
func NewDnsserver(ctx *pulumi.Context,
	name string, args *DnsserverArgs, opts ...pulumi.ResourceOption) (*Dnsserver, error) {
	if args == nil {
		args = &DnsserverArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dnsserver
	err := ctx.RegisterResource("fortios:system/dnsserver:Dnsserver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsserver gets an existing Dnsserver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsserver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsserverState, opts ...pulumi.ResourceOption) (*Dnsserver, error) {
	var resource Dnsserver
	err := ctx.ReadResource("fortios:system/dnsserver:Dnsserver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dnsserver resources.
type dnsserverState struct {
	// DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// DNS over HTTPS. Valid values: `enable`, `disable`.
	Doh *string `pulumi:"doh"`
	// Enable/disable DNS over QUIC/HTTP3/443 (default = disable). Valid values: `enable`, `disable`.
	Doh3 *string `pulumi:"doh3"`
	// Enable/disable DNS over QUIC/853 (default = disable). Valid values: `enable`, `disable`.
	Doq *string `pulumi:"doq"`
	// DNS server mode. Valid values: `recursive`, `non-recursive`, `forward-only`.
	Mode *string `pulumi:"mode"`
	// DNS server name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type DnsserverState struct {
	// DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// DNS over HTTPS. Valid values: `enable`, `disable`.
	Doh pulumi.StringPtrInput
	// Enable/disable DNS over QUIC/HTTP3/443 (default = disable). Valid values: `enable`, `disable`.
	Doh3 pulumi.StringPtrInput
	// Enable/disable DNS over QUIC/853 (default = disable). Valid values: `enable`, `disable`.
	Doq pulumi.StringPtrInput
	// DNS server mode. Valid values: `recursive`, `non-recursive`, `forward-only`.
	Mode pulumi.StringPtrInput
	// DNS server name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (DnsserverState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsserverState)(nil)).Elem()
}

type dnsserverArgs struct {
	// DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// DNS over HTTPS. Valid values: `enable`, `disable`.
	Doh *string `pulumi:"doh"`
	// Enable/disable DNS over QUIC/HTTP3/443 (default = disable). Valid values: `enable`, `disable`.
	Doh3 *string `pulumi:"doh3"`
	// Enable/disable DNS over QUIC/853 (default = disable). Valid values: `enable`, `disable`.
	Doq *string `pulumi:"doq"`
	// DNS server mode. Valid values: `recursive`, `non-recursive`, `forward-only`.
	Mode *string `pulumi:"mode"`
	// DNS server name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Dnsserver resource.
type DnsserverArgs struct {
	// DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// DNS over HTTPS. Valid values: `enable`, `disable`.
	Doh pulumi.StringPtrInput
	// Enable/disable DNS over QUIC/HTTP3/443 (default = disable). Valid values: `enable`, `disable`.
	Doh3 pulumi.StringPtrInput
	// Enable/disable DNS over QUIC/853 (default = disable). Valid values: `enable`, `disable`.
	Doq pulumi.StringPtrInput
	// DNS server mode. Valid values: `recursive`, `non-recursive`, `forward-only`.
	Mode pulumi.StringPtrInput
	// DNS server name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (DnsserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsserverArgs)(nil)).Elem()
}

type DnsserverInput interface {
	pulumi.Input

	ToDnsserverOutput() DnsserverOutput
	ToDnsserverOutputWithContext(ctx context.Context) DnsserverOutput
}

func (*Dnsserver) ElementType() reflect.Type {
	return reflect.TypeOf((**Dnsserver)(nil)).Elem()
}

func (i *Dnsserver) ToDnsserverOutput() DnsserverOutput {
	return i.ToDnsserverOutputWithContext(context.Background())
}

func (i *Dnsserver) ToDnsserverOutputWithContext(ctx context.Context) DnsserverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsserverOutput)
}

// DnsserverArrayInput is an input type that accepts DnsserverArray and DnsserverArrayOutput values.
// You can construct a concrete instance of `DnsserverArrayInput` via:
//
//	DnsserverArray{ DnsserverArgs{...} }
type DnsserverArrayInput interface {
	pulumi.Input

	ToDnsserverArrayOutput() DnsserverArrayOutput
	ToDnsserverArrayOutputWithContext(context.Context) DnsserverArrayOutput
}

type DnsserverArray []DnsserverInput

func (DnsserverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dnsserver)(nil)).Elem()
}

func (i DnsserverArray) ToDnsserverArrayOutput() DnsserverArrayOutput {
	return i.ToDnsserverArrayOutputWithContext(context.Background())
}

func (i DnsserverArray) ToDnsserverArrayOutputWithContext(ctx context.Context) DnsserverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsserverArrayOutput)
}

// DnsserverMapInput is an input type that accepts DnsserverMap and DnsserverMapOutput values.
// You can construct a concrete instance of `DnsserverMapInput` via:
//
//	DnsserverMap{ "key": DnsserverArgs{...} }
type DnsserverMapInput interface {
	pulumi.Input

	ToDnsserverMapOutput() DnsserverMapOutput
	ToDnsserverMapOutputWithContext(context.Context) DnsserverMapOutput
}

type DnsserverMap map[string]DnsserverInput

func (DnsserverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dnsserver)(nil)).Elem()
}

func (i DnsserverMap) ToDnsserverMapOutput() DnsserverMapOutput {
	return i.ToDnsserverMapOutputWithContext(context.Background())
}

func (i DnsserverMap) ToDnsserverMapOutputWithContext(ctx context.Context) DnsserverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsserverMapOutput)
}

type DnsserverOutput struct{ *pulumi.OutputState }

func (DnsserverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dnsserver)(nil)).Elem()
}

func (o DnsserverOutput) ToDnsserverOutput() DnsserverOutput {
	return o
}

func (o DnsserverOutput) ToDnsserverOutputWithContext(ctx context.Context) DnsserverOutput {
	return o
}

// DNS filter profile.
func (o DnsserverOutput) DnsfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Dnsserver) pulumi.StringOutput { return v.DnsfilterProfile }).(pulumi.StringOutput)
}

// DNS over HTTPS. Valid values: `enable`, `disable`.
func (o DnsserverOutput) Doh() pulumi.StringOutput {
	return o.ApplyT(func(v *Dnsserver) pulumi.StringOutput { return v.Doh }).(pulumi.StringOutput)
}

// Enable/disable DNS over QUIC/HTTP3/443 (default = disable). Valid values: `enable`, `disable`.
func (o DnsserverOutput) Doh3() pulumi.StringOutput {
	return o.ApplyT(func(v *Dnsserver) pulumi.StringOutput { return v.Doh3 }).(pulumi.StringOutput)
}

// Enable/disable DNS over QUIC/853 (default = disable). Valid values: `enable`, `disable`.
func (o DnsserverOutput) Doq() pulumi.StringOutput {
	return o.ApplyT(func(v *Dnsserver) pulumi.StringOutput { return v.Doq }).(pulumi.StringOutput)
}

// DNS server mode. Valid values: `recursive`, `non-recursive`, `forward-only`.
func (o DnsserverOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *Dnsserver) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// DNS server name.
func (o DnsserverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dnsserver) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o DnsserverOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dnsserver) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type DnsserverArrayOutput struct{ *pulumi.OutputState }

func (DnsserverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dnsserver)(nil)).Elem()
}

func (o DnsserverArrayOutput) ToDnsserverArrayOutput() DnsserverArrayOutput {
	return o
}

func (o DnsserverArrayOutput) ToDnsserverArrayOutputWithContext(ctx context.Context) DnsserverArrayOutput {
	return o
}

func (o DnsserverArrayOutput) Index(i pulumi.IntInput) DnsserverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dnsserver {
		return vs[0].([]*Dnsserver)[vs[1].(int)]
	}).(DnsserverOutput)
}

type DnsserverMapOutput struct{ *pulumi.OutputState }

func (DnsserverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dnsserver)(nil)).Elem()
}

func (o DnsserverMapOutput) ToDnsserverMapOutput() DnsserverMapOutput {
	return o
}

func (o DnsserverMapOutput) ToDnsserverMapOutputWithContext(ctx context.Context) DnsserverMapOutput {
	return o
}

func (o DnsserverMapOutput) MapIndex(k pulumi.StringInput) DnsserverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dnsserver {
		return vs[0].(map[string]*Dnsserver)[vs[1].(string)]
	}).(DnsserverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsserverInput)(nil)).Elem(), &Dnsserver{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsserverArrayInput)(nil)).Elem(), DnsserverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsserverMapInput)(nil)).Elem(), DnsserverMap{})
	pulumi.RegisterOutputType(DnsserverOutput{})
	pulumi.RegisterOutputType(DnsserverArrayOutput{})
	pulumi.RegisterOutputType(DnsserverMapOutput{})
}
