// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure ARP table.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewArptable(ctx, "trname", &system.ArptableArgs{
//				Fosid:     pulumi.Int(11),
//				Interface: pulumi.String("port2"),
//				Ip:        pulumi.String("1.1.1.1"),
//				Mac:       pulumi.String("08:00:27:1c:a3:8b"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// System ArpTable can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/arptable:Arptable labelname {{fosid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/arptable:Arptable labelname {{fosid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Arptable struct {
	pulumi.CustomResourceState

	// Unique integer ID of the entry.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Interface name.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// IP address.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// MAC address.
	Mac pulumi.StringOutput `pulumi:"mac"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewArptable registers a new resource with the given unique name, arguments, and options.
func NewArptable(ctx *pulumi.Context,
	name string, args *ArptableArgs, opts ...pulumi.ResourceOption) (*Arptable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.Mac == nil {
		return nil, errors.New("invalid value for required argument 'Mac'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Arptable
	err := ctx.RegisterResource("fortios:system/arptable:Arptable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArptable gets an existing Arptable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArptable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArptableState, opts ...pulumi.ResourceOption) (*Arptable, error) {
	var resource Arptable
	err := ctx.ReadResource("fortios:system/arptable:Arptable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Arptable resources.
type arptableState struct {
	// Unique integer ID of the entry.
	Fosid *int `pulumi:"fosid"`
	// Interface name.
	Interface *string `pulumi:"interface"`
	// IP address.
	Ip *string `pulumi:"ip"`
	// MAC address.
	Mac *string `pulumi:"mac"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type ArptableState struct {
	// Unique integer ID of the entry.
	Fosid pulumi.IntPtrInput
	// Interface name.
	Interface pulumi.StringPtrInput
	// IP address.
	Ip pulumi.StringPtrInput
	// MAC address.
	Mac pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ArptableState) ElementType() reflect.Type {
	return reflect.TypeOf((*arptableState)(nil)).Elem()
}

type arptableArgs struct {
	// Unique integer ID of the entry.
	Fosid int `pulumi:"fosid"`
	// Interface name.
	Interface string `pulumi:"interface"`
	// IP address.
	Ip string `pulumi:"ip"`
	// MAC address.
	Mac string `pulumi:"mac"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Arptable resource.
type ArptableArgs struct {
	// Unique integer ID of the entry.
	Fosid pulumi.IntInput
	// Interface name.
	Interface pulumi.StringInput
	// IP address.
	Ip pulumi.StringInput
	// MAC address.
	Mac pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ArptableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*arptableArgs)(nil)).Elem()
}

type ArptableInput interface {
	pulumi.Input

	ToArptableOutput() ArptableOutput
	ToArptableOutputWithContext(ctx context.Context) ArptableOutput
}

func (*Arptable) ElementType() reflect.Type {
	return reflect.TypeOf((**Arptable)(nil)).Elem()
}

func (i *Arptable) ToArptableOutput() ArptableOutput {
	return i.ToArptableOutputWithContext(context.Background())
}

func (i *Arptable) ToArptableOutputWithContext(ctx context.Context) ArptableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArptableOutput)
}

// ArptableArrayInput is an input type that accepts ArptableArray and ArptableArrayOutput values.
// You can construct a concrete instance of `ArptableArrayInput` via:
//
//	ArptableArray{ ArptableArgs{...} }
type ArptableArrayInput interface {
	pulumi.Input

	ToArptableArrayOutput() ArptableArrayOutput
	ToArptableArrayOutputWithContext(context.Context) ArptableArrayOutput
}

type ArptableArray []ArptableInput

func (ArptableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Arptable)(nil)).Elem()
}

func (i ArptableArray) ToArptableArrayOutput() ArptableArrayOutput {
	return i.ToArptableArrayOutputWithContext(context.Background())
}

func (i ArptableArray) ToArptableArrayOutputWithContext(ctx context.Context) ArptableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArptableArrayOutput)
}

// ArptableMapInput is an input type that accepts ArptableMap and ArptableMapOutput values.
// You can construct a concrete instance of `ArptableMapInput` via:
//
//	ArptableMap{ "key": ArptableArgs{...} }
type ArptableMapInput interface {
	pulumi.Input

	ToArptableMapOutput() ArptableMapOutput
	ToArptableMapOutputWithContext(context.Context) ArptableMapOutput
}

type ArptableMap map[string]ArptableInput

func (ArptableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Arptable)(nil)).Elem()
}

func (i ArptableMap) ToArptableMapOutput() ArptableMapOutput {
	return i.ToArptableMapOutputWithContext(context.Background())
}

func (i ArptableMap) ToArptableMapOutputWithContext(ctx context.Context) ArptableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArptableMapOutput)
}

type ArptableOutput struct{ *pulumi.OutputState }

func (ArptableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Arptable)(nil)).Elem()
}

func (o ArptableOutput) ToArptableOutput() ArptableOutput {
	return o
}

func (o ArptableOutput) ToArptableOutputWithContext(ctx context.Context) ArptableOutput {
	return o
}

// Unique integer ID of the entry.
func (o ArptableOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *Arptable) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Interface name.
func (o ArptableOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Arptable) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// IP address.
func (o ArptableOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *Arptable) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// MAC address.
func (o ArptableOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v *Arptable) pulumi.StringOutput { return v.Mac }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ArptableOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Arptable) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type ArptableArrayOutput struct{ *pulumi.OutputState }

func (ArptableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Arptable)(nil)).Elem()
}

func (o ArptableArrayOutput) ToArptableArrayOutput() ArptableArrayOutput {
	return o
}

func (o ArptableArrayOutput) ToArptableArrayOutputWithContext(ctx context.Context) ArptableArrayOutput {
	return o
}

func (o ArptableArrayOutput) Index(i pulumi.IntInput) ArptableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Arptable {
		return vs[0].([]*Arptable)[vs[1].(int)]
	}).(ArptableOutput)
}

type ArptableMapOutput struct{ *pulumi.OutputState }

func (ArptableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Arptable)(nil)).Elem()
}

func (o ArptableMapOutput) ToArptableMapOutput() ArptableMapOutput {
	return o
}

func (o ArptableMapOutput) ToArptableMapOutputWithContext(ctx context.Context) ArptableMapOutput {
	return o
}

func (o ArptableMapOutput) MapIndex(k pulumi.StringInput) ArptableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Arptable {
		return vs[0].(map[string]*Arptable)[vs[1].(string)]
	}).(ArptableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArptableInput)(nil)).Elem(), &Arptable{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArptableArrayInput)(nil)).Elem(), ArptableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArptableMapInput)(nil)).Elem(), ArptableMap{})
	pulumi.RegisterOutputType(ArptableOutput{})
	pulumi.RegisterOutputType(ArptableArrayOutput{})
	pulumi.RegisterOutputType(ArptableMapOutput{})
}
