// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Use this data source to get information on an fortios system vxlan
func LookupVxlan(ctx *pulumi.Context, args *LookupVxlanArgs, opts ...pulumi.InvokeOption) (*LookupVxlanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVxlanResult
	err := ctx.Invoke("fortios:system/getVxlan:getVxlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVxlan.
type LookupVxlanArgs struct {
	// Specify the name of the desired system vxlan.
	Name string `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by getVxlan.
type LookupVxlanResult struct {
	// VXLAN destination port (1 - 65535, default = 4789).
	Dstport int `pulumi:"dstport"`
	// EVPN instance.
	EvpnId int `pulumi:"evpnId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Outgoing interface for VXLAN encapsulated traffic.
	Interface string `pulumi:"interface"`
	// IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast.
	IpVersion string `pulumi:"ipVersion"`
	// Enable/disable VXLAN MAC learning from traffic.
	LearnFromTraffic string `pulumi:"learnFromTraffic"`
	// VXLAN multicast TTL (1-255, default = 0).
	MulticastTtl int `pulumi:"multicastTtl"`
	// VXLAN device or interface name. Must be a unique interface name.
	Name string `pulumi:"name"`
	// IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remoteIp6` block is documented below.
	RemoteIp6s []GetVxlanRemoteIp6 `pulumi:"remoteIp6s"`
	// IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remoteIp` block is documented below.
	RemoteIps []GetVxlanRemoteIp `pulumi:"remoteIps"`
	Vdomparam *string            `pulumi:"vdomparam"`
	// VXLAN network ID.
	Vni int `pulumi:"vni"`
}

func LookupVxlanOutput(ctx *pulumi.Context, args LookupVxlanOutputArgs, opts ...pulumi.InvokeOption) LookupVxlanResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVxlanResult, error) {
			args := v.(LookupVxlanArgs)
			r, err := LookupVxlan(ctx, &args, opts...)
			var s LookupVxlanResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVxlanResultOutput)
}

// A collection of arguments for invoking getVxlan.
type LookupVxlanOutputArgs struct {
	// Specify the name of the desired system vxlan.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupVxlanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVxlanArgs)(nil)).Elem()
}

// A collection of values returned by getVxlan.
type LookupVxlanResultOutput struct{ *pulumi.OutputState }

func (LookupVxlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVxlanResult)(nil)).Elem()
}

func (o LookupVxlanResultOutput) ToLookupVxlanResultOutput() LookupVxlanResultOutput {
	return o
}

func (o LookupVxlanResultOutput) ToLookupVxlanResultOutputWithContext(ctx context.Context) LookupVxlanResultOutput {
	return o
}

// VXLAN destination port (1 - 65535, default = 4789).
func (o LookupVxlanResultOutput) Dstport() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVxlanResult) int { return v.Dstport }).(pulumi.IntOutput)
}

// EVPN instance.
func (o LookupVxlanResultOutput) EvpnId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVxlanResult) int { return v.EvpnId }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVxlanResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVxlanResult) string { return v.Id }).(pulumi.StringOutput)
}

// Outgoing interface for VXLAN encapsulated traffic.
func (o LookupVxlanResultOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVxlanResult) string { return v.Interface }).(pulumi.StringOutput)
}

// IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast.
func (o LookupVxlanResultOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVxlanResult) string { return v.IpVersion }).(pulumi.StringOutput)
}

// Enable/disable VXLAN MAC learning from traffic.
func (o LookupVxlanResultOutput) LearnFromTraffic() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVxlanResult) string { return v.LearnFromTraffic }).(pulumi.StringOutput)
}

// VXLAN multicast TTL (1-255, default = 0).
func (o LookupVxlanResultOutput) MulticastTtl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVxlanResult) int { return v.MulticastTtl }).(pulumi.IntOutput)
}

// VXLAN device or interface name. Must be a unique interface name.
func (o LookupVxlanResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVxlanResult) string { return v.Name }).(pulumi.StringOutput)
}

// IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remoteIp6` block is documented below.
func (o LookupVxlanResultOutput) RemoteIp6s() GetVxlanRemoteIp6ArrayOutput {
	return o.ApplyT(func(v LookupVxlanResult) []GetVxlanRemoteIp6 { return v.RemoteIp6s }).(GetVxlanRemoteIp6ArrayOutput)
}

// IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remoteIp` block is documented below.
func (o LookupVxlanResultOutput) RemoteIps() GetVxlanRemoteIpArrayOutput {
	return o.ApplyT(func(v LookupVxlanResult) []GetVxlanRemoteIp { return v.RemoteIps }).(GetVxlanRemoteIpArrayOutput)
}

func (o LookupVxlanResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVxlanResult) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// VXLAN network ID.
func (o LookupVxlanResultOutput) Vni() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVxlanResult) int { return v.Vni }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVxlanResultOutput{})
}
