// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure DNS.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewDns(ctx, "trname", &system.DnsArgs{
//				CacheNotfoundResponses: pulumi.String("disable"),
//				DnsCacheLimit:          pulumi.Int(5000),
//				DnsCacheTtl:            pulumi.Int(1800),
//				Ip6Primary:             pulumi.String("::"),
//				Ip6Secondary:           pulumi.String("::"),
//				Primary:                pulumi.String("208.91.112.53"),
//				Retry:                  pulumi.Int(2),
//				Secondary:              pulumi.String("208.91.112.51"),
//				SourceIp:               pulumi.String("0.0.0.0"),
//				Timeout:                pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// System Dns can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/dns:Dns labelname SystemDns
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/dns:Dns labelname SystemDns
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Dns struct {
	pulumi.CustomResourceState

	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary pulumi.StringOutput `pulumi:"altPrimary"`
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary pulumi.StringOutput `pulumi:"altSecondary"`
	// Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
	CacheNotfoundResponses pulumi.StringOutput `pulumi:"cacheNotfoundResponses"`
	// Maximum number of records in the DNS cache.
	DnsCacheLimit pulumi.IntOutput `pulumi:"dnsCacheLimit"`
	// Duration in seconds that the DNS cache retains information.
	DnsCacheTtl pulumi.IntOutput `pulumi:"dnsCacheTtl"`
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls pulumi.StringOutput `pulumi:"dnsOverTls"`
	// Search suffix list for hostname lookup. The structure of `domain` block is documented below.
	Domains DnsDomainArrayOutput `pulumi:"domains"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// FQDN cache time to live in seconds (0 - 86400, default = 0).
	FqdnCacheTtl pulumi.IntOutput `pulumi:"fqdnCacheTtl"`
	// FQDN cache maximum refresh time in seconds (3600 - 86400, default = 3600).
	FqdnMaxRefresh pulumi.IntOutput `pulumi:"fqdnMaxRefresh"`
	// FQDN cache minimum refresh time in seconds (10 - 3600, default = 60).
	FqdnMinRefresh pulumi.IntOutput `pulumi:"fqdnMinRefresh"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Specify outgoing interface to reach server.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringOutput `pulumi:"interfaceSelectMethod"`
	// Primary DNS server IPv6 address.
	Ip6Primary pulumi.StringOutput `pulumi:"ip6Primary"`
	// Secondary DNS server IPv6 address.
	Ip6Secondary pulumi.StringOutput `pulumi:"ip6Secondary"`
	// Local DNS log setting. Valid values: `disable`, `error`, `all`.
	Log pulumi.StringOutput `pulumi:"log"`
	// Primary DNS server IP address.
	Primary pulumi.StringOutput `pulumi:"primary"`
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Number of times to retry (0 - 5).
	Retry pulumi.IntOutput `pulumi:"retry"`
	// Secondary DNS server IP address.
	Secondary pulumi.StringOutput `pulumi:"secondary"`
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames DnsServerHostnameArrayOutput `pulumi:"serverHostnames"`
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod pulumi.StringOutput `pulumi:"serverSelectMethod"`
	// IP address used by the DNS server as its source IP.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringOutput `pulumi:"sslCertificate"`
	// DNS query timeout interval in seconds (1 - 10).
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewDns registers a new resource with the given unique name, arguments, and options.
func NewDns(ctx *pulumi.Context,
	name string, args *DnsArgs, opts ...pulumi.ResourceOption) (*Dns, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Primary == nil {
		return nil, errors.New("invalid value for required argument 'Primary'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dns
	err := ctx.RegisterResource("fortios:system/dns:Dns", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDns gets an existing Dns resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDns(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsState, opts ...pulumi.ResourceOption) (*Dns, error) {
	var resource Dns
	err := ctx.ReadResource("fortios:system/dns:Dns", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dns resources.
type dnsState struct {
	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary *string `pulumi:"altPrimary"`
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary *string `pulumi:"altSecondary"`
	// Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
	CacheNotfoundResponses *string `pulumi:"cacheNotfoundResponses"`
	// Maximum number of records in the DNS cache.
	DnsCacheLimit *int `pulumi:"dnsCacheLimit"`
	// Duration in seconds that the DNS cache retains information.
	DnsCacheTtl *int `pulumi:"dnsCacheTtl"`
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls *string `pulumi:"dnsOverTls"`
	// Search suffix list for hostname lookup. The structure of `domain` block is documented below.
	Domains []DnsDomain `pulumi:"domains"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// FQDN cache time to live in seconds (0 - 86400, default = 0).
	FqdnCacheTtl *int `pulumi:"fqdnCacheTtl"`
	// FQDN cache maximum refresh time in seconds (3600 - 86400, default = 3600).
	FqdnMaxRefresh *int `pulumi:"fqdnMaxRefresh"`
	// FQDN cache minimum refresh time in seconds (10 - 3600, default = 60).
	FqdnMinRefresh *int `pulumi:"fqdnMinRefresh"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Primary DNS server IPv6 address.
	Ip6Primary *string `pulumi:"ip6Primary"`
	// Secondary DNS server IPv6 address.
	Ip6Secondary *string `pulumi:"ip6Secondary"`
	// Local DNS log setting. Valid values: `disable`, `error`, `all`.
	Log *string `pulumi:"log"`
	// Primary DNS server IP address.
	Primary *string `pulumi:"primary"`
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol *string `pulumi:"protocol"`
	// Number of times to retry (0 - 5).
	Retry *int `pulumi:"retry"`
	// Secondary DNS server IP address.
	Secondary *string `pulumi:"secondary"`
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames []DnsServerHostname `pulumi:"serverHostnames"`
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod *string `pulumi:"serverSelectMethod"`
	// IP address used by the DNS server as its source IP.
	SourceIp *string `pulumi:"sourceIp"`
	// Name of local certificate for SSL connections.
	SslCertificate *string `pulumi:"sslCertificate"`
	// DNS query timeout interval in seconds (1 - 10).
	Timeout *int `pulumi:"timeout"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type DnsState struct {
	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary pulumi.StringPtrInput
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary pulumi.StringPtrInput
	// Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
	CacheNotfoundResponses pulumi.StringPtrInput
	// Maximum number of records in the DNS cache.
	DnsCacheLimit pulumi.IntPtrInput
	// Duration in seconds that the DNS cache retains information.
	DnsCacheTtl pulumi.IntPtrInput
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls pulumi.StringPtrInput
	// Search suffix list for hostname lookup. The structure of `domain` block is documented below.
	Domains DnsDomainArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// FQDN cache time to live in seconds (0 - 86400, default = 0).
	FqdnCacheTtl pulumi.IntPtrInput
	// FQDN cache maximum refresh time in seconds (3600 - 86400, default = 3600).
	FqdnMaxRefresh pulumi.IntPtrInput
	// FQDN cache minimum refresh time in seconds (10 - 3600, default = 60).
	FqdnMinRefresh pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Primary DNS server IPv6 address.
	Ip6Primary pulumi.StringPtrInput
	// Secondary DNS server IPv6 address.
	Ip6Secondary pulumi.StringPtrInput
	// Local DNS log setting. Valid values: `disable`, `error`, `all`.
	Log pulumi.StringPtrInput
	// Primary DNS server IP address.
	Primary pulumi.StringPtrInput
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol pulumi.StringPtrInput
	// Number of times to retry (0 - 5).
	Retry pulumi.IntPtrInput
	// Secondary DNS server IP address.
	Secondary pulumi.StringPtrInput
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames DnsServerHostnameArrayInput
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod pulumi.StringPtrInput
	// IP address used by the DNS server as its source IP.
	SourceIp pulumi.StringPtrInput
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringPtrInput
	// DNS query timeout interval in seconds (1 - 10).
	Timeout pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (DnsState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsState)(nil)).Elem()
}

type dnsArgs struct {
	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary *string `pulumi:"altPrimary"`
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary *string `pulumi:"altSecondary"`
	// Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
	CacheNotfoundResponses *string `pulumi:"cacheNotfoundResponses"`
	// Maximum number of records in the DNS cache.
	DnsCacheLimit *int `pulumi:"dnsCacheLimit"`
	// Duration in seconds that the DNS cache retains information.
	DnsCacheTtl *int `pulumi:"dnsCacheTtl"`
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls *string `pulumi:"dnsOverTls"`
	// Search suffix list for hostname lookup. The structure of `domain` block is documented below.
	Domains []DnsDomain `pulumi:"domains"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// FQDN cache time to live in seconds (0 - 86400, default = 0).
	FqdnCacheTtl *int `pulumi:"fqdnCacheTtl"`
	// FQDN cache maximum refresh time in seconds (3600 - 86400, default = 3600).
	FqdnMaxRefresh *int `pulumi:"fqdnMaxRefresh"`
	// FQDN cache minimum refresh time in seconds (10 - 3600, default = 60).
	FqdnMinRefresh *int `pulumi:"fqdnMinRefresh"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Primary DNS server IPv6 address.
	Ip6Primary *string `pulumi:"ip6Primary"`
	// Secondary DNS server IPv6 address.
	Ip6Secondary *string `pulumi:"ip6Secondary"`
	// Local DNS log setting. Valid values: `disable`, `error`, `all`.
	Log *string `pulumi:"log"`
	// Primary DNS server IP address.
	Primary string `pulumi:"primary"`
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol *string `pulumi:"protocol"`
	// Number of times to retry (0 - 5).
	Retry *int `pulumi:"retry"`
	// Secondary DNS server IP address.
	Secondary *string `pulumi:"secondary"`
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames []DnsServerHostname `pulumi:"serverHostnames"`
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod *string `pulumi:"serverSelectMethod"`
	// IP address used by the DNS server as its source IP.
	SourceIp *string `pulumi:"sourceIp"`
	// Name of local certificate for SSL connections.
	SslCertificate *string `pulumi:"sslCertificate"`
	// DNS query timeout interval in seconds (1 - 10).
	Timeout *int `pulumi:"timeout"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Dns resource.
type DnsArgs struct {
	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary pulumi.StringPtrInput
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary pulumi.StringPtrInput
	// Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
	CacheNotfoundResponses pulumi.StringPtrInput
	// Maximum number of records in the DNS cache.
	DnsCacheLimit pulumi.IntPtrInput
	// Duration in seconds that the DNS cache retains information.
	DnsCacheTtl pulumi.IntPtrInput
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls pulumi.StringPtrInput
	// Search suffix list for hostname lookup. The structure of `domain` block is documented below.
	Domains DnsDomainArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// FQDN cache time to live in seconds (0 - 86400, default = 0).
	FqdnCacheTtl pulumi.IntPtrInput
	// FQDN cache maximum refresh time in seconds (3600 - 86400, default = 3600).
	FqdnMaxRefresh pulumi.IntPtrInput
	// FQDN cache minimum refresh time in seconds (10 - 3600, default = 60).
	FqdnMinRefresh pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Primary DNS server IPv6 address.
	Ip6Primary pulumi.StringPtrInput
	// Secondary DNS server IPv6 address.
	Ip6Secondary pulumi.StringPtrInput
	// Local DNS log setting. Valid values: `disable`, `error`, `all`.
	Log pulumi.StringPtrInput
	// Primary DNS server IP address.
	Primary pulumi.StringInput
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol pulumi.StringPtrInput
	// Number of times to retry (0 - 5).
	Retry pulumi.IntPtrInput
	// Secondary DNS server IP address.
	Secondary pulumi.StringPtrInput
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames DnsServerHostnameArrayInput
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod pulumi.StringPtrInput
	// IP address used by the DNS server as its source IP.
	SourceIp pulumi.StringPtrInput
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringPtrInput
	// DNS query timeout interval in seconds (1 - 10).
	Timeout pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (DnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsArgs)(nil)).Elem()
}

type DnsInput interface {
	pulumi.Input

	ToDnsOutput() DnsOutput
	ToDnsOutputWithContext(ctx context.Context) DnsOutput
}

func (*Dns) ElementType() reflect.Type {
	return reflect.TypeOf((**Dns)(nil)).Elem()
}

func (i *Dns) ToDnsOutput() DnsOutput {
	return i.ToDnsOutputWithContext(context.Background())
}

func (i *Dns) ToDnsOutputWithContext(ctx context.Context) DnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsOutput)
}

// DnsArrayInput is an input type that accepts DnsArray and DnsArrayOutput values.
// You can construct a concrete instance of `DnsArrayInput` via:
//
//	DnsArray{ DnsArgs{...} }
type DnsArrayInput interface {
	pulumi.Input

	ToDnsArrayOutput() DnsArrayOutput
	ToDnsArrayOutputWithContext(context.Context) DnsArrayOutput
}

type DnsArray []DnsInput

func (DnsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dns)(nil)).Elem()
}

func (i DnsArray) ToDnsArrayOutput() DnsArrayOutput {
	return i.ToDnsArrayOutputWithContext(context.Background())
}

func (i DnsArray) ToDnsArrayOutputWithContext(ctx context.Context) DnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsArrayOutput)
}

// DnsMapInput is an input type that accepts DnsMap and DnsMapOutput values.
// You can construct a concrete instance of `DnsMapInput` via:
//
//	DnsMap{ "key": DnsArgs{...} }
type DnsMapInput interface {
	pulumi.Input

	ToDnsMapOutput() DnsMapOutput
	ToDnsMapOutputWithContext(context.Context) DnsMapOutput
}

type DnsMap map[string]DnsInput

func (DnsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dns)(nil)).Elem()
}

func (i DnsMap) ToDnsMapOutput() DnsMapOutput {
	return i.ToDnsMapOutputWithContext(context.Background())
}

func (i DnsMap) ToDnsMapOutputWithContext(ctx context.Context) DnsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsMapOutput)
}

type DnsOutput struct{ *pulumi.OutputState }

func (DnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dns)(nil)).Elem()
}

func (o DnsOutput) ToDnsOutput() DnsOutput {
	return o
}

func (o DnsOutput) ToDnsOutputWithContext(ctx context.Context) DnsOutput {
	return o
}

// Alternate primary DNS server. (This is not used as a failover DNS server.)
func (o DnsOutput) AltPrimary() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringOutput { return v.AltPrimary }).(pulumi.StringOutput)
}

// Alternate secondary DNS server. (This is not used as a failover DNS server.)
func (o DnsOutput) AltSecondary() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringOutput { return v.AltSecondary }).(pulumi.StringOutput)
}

// Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
func (o DnsOutput) CacheNotfoundResponses() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringOutput { return v.CacheNotfoundResponses }).(pulumi.StringOutput)
}

// Maximum number of records in the DNS cache.
func (o DnsOutput) DnsCacheLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Dns) pulumi.IntOutput { return v.DnsCacheLimit }).(pulumi.IntOutput)
}

// Duration in seconds that the DNS cache retains information.
func (o DnsOutput) DnsCacheTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *Dns) pulumi.IntOutput { return v.DnsCacheTtl }).(pulumi.IntOutput)
}

// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
func (o DnsOutput) DnsOverTls() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringOutput { return v.DnsOverTls }).(pulumi.StringOutput)
}

// Search suffix list for hostname lookup. The structure of `domain` block is documented below.
func (o DnsOutput) Domains() DnsDomainArrayOutput {
	return o.ApplyT(func(v *Dns) DnsDomainArrayOutput { return v.Domains }).(DnsDomainArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o DnsOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// FQDN cache time to live in seconds (0 - 86400, default = 0).
func (o DnsOutput) FqdnCacheTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *Dns) pulumi.IntOutput { return v.FqdnCacheTtl }).(pulumi.IntOutput)
}

// FQDN cache maximum refresh time in seconds (3600 - 86400, default = 3600).
func (o DnsOutput) FqdnMaxRefresh() pulumi.IntOutput {
	return o.ApplyT(func(v *Dns) pulumi.IntOutput { return v.FqdnMaxRefresh }).(pulumi.IntOutput)
}

// FQDN cache minimum refresh time in seconds (10 - 3600, default = 60).
func (o DnsOutput) FqdnMinRefresh() pulumi.IntOutput {
	return o.ApplyT(func(v *Dns) pulumi.IntOutput { return v.FqdnMinRefresh }).(pulumi.IntOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o DnsOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Specify outgoing interface to reach server.
func (o DnsOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
func (o DnsOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

// Primary DNS server IPv6 address.
func (o DnsOutput) Ip6Primary() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringOutput { return v.Ip6Primary }).(pulumi.StringOutput)
}

// Secondary DNS server IPv6 address.
func (o DnsOutput) Ip6Secondary() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringOutput { return v.Ip6Secondary }).(pulumi.StringOutput)
}

// Local DNS log setting. Valid values: `disable`, `error`, `all`.
func (o DnsOutput) Log() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringOutput { return v.Log }).(pulumi.StringOutput)
}

// Primary DNS server IP address.
func (o DnsOutput) Primary() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringOutput { return v.Primary }).(pulumi.StringOutput)
}

// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
func (o DnsOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Number of times to retry (0 - 5).
func (o DnsOutput) Retry() pulumi.IntOutput {
	return o.ApplyT(func(v *Dns) pulumi.IntOutput { return v.Retry }).(pulumi.IntOutput)
}

// Secondary DNS server IP address.
func (o DnsOutput) Secondary() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringOutput { return v.Secondary }).(pulumi.StringOutput)
}

// DNS server host name list. The structure of `serverHostname` block is documented below.
func (o DnsOutput) ServerHostnames() DnsServerHostnameArrayOutput {
	return o.ApplyT(func(v *Dns) DnsServerHostnameArrayOutput { return v.ServerHostnames }).(DnsServerHostnameArrayOutput)
}

// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
func (o DnsOutput) ServerSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringOutput { return v.ServerSelectMethod }).(pulumi.StringOutput)
}

// IP address used by the DNS server as its source IP.
func (o DnsOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// Name of local certificate for SSL connections.
func (o DnsOutput) SslCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringOutput { return v.SslCertificate }).(pulumi.StringOutput)
}

// DNS query timeout interval in seconds (1 - 10).
func (o DnsOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Dns) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o DnsOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type DnsArrayOutput struct{ *pulumi.OutputState }

func (DnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dns)(nil)).Elem()
}

func (o DnsArrayOutput) ToDnsArrayOutput() DnsArrayOutput {
	return o
}

func (o DnsArrayOutput) ToDnsArrayOutputWithContext(ctx context.Context) DnsArrayOutput {
	return o
}

func (o DnsArrayOutput) Index(i pulumi.IntInput) DnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dns {
		return vs[0].([]*Dns)[vs[1].(int)]
	}).(DnsOutput)
}

type DnsMapOutput struct{ *pulumi.OutputState }

func (DnsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dns)(nil)).Elem()
}

func (o DnsMapOutput) ToDnsMapOutput() DnsMapOutput {
	return o
}

func (o DnsMapOutput) ToDnsMapOutputWithContext(ctx context.Context) DnsMapOutput {
	return o
}

func (o DnsMapOutput) MapIndex(k pulumi.StringInput) DnsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dns {
		return vs[0].(map[string]*Dns)[vs[1].(string)]
	}).(DnsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsInput)(nil)).Elem(), &Dns{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsArrayInput)(nil)).Elem(), DnsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsMapInput)(nil)).Elem(), DnsMap{})
	pulumi.RegisterOutputType(DnsOutput{})
	pulumi.RegisterOutputType(DnsArrayOutput{})
	pulumi.RegisterOutputType(DnsMapOutput{})
}
