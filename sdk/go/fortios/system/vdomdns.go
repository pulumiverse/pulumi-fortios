// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure DNS servers for a non-management VDOM.
//
// ## Import
//
// System VdomDns can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/vdomdns:Vdomdns labelname SystemVdomDns
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/vdomdns:Vdomdns labelname SystemVdomDns
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Vdomdns struct {
	pulumi.CustomResourceState

	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary pulumi.StringOutput `pulumi:"altPrimary"`
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary pulumi.StringOutput `pulumi:"altSecondary"`
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls pulumi.StringOutput `pulumi:"dnsOverTls"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Specify outgoing interface to reach server.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringOutput `pulumi:"interfaceSelectMethod"`
	// Primary IPv6 DNS server IP address for the VDOM.
	Ip6Primary pulumi.StringOutput `pulumi:"ip6Primary"`
	// Secondary IPv6 DNS server IP address for the VDOM.
	Ip6Secondary pulumi.StringOutput `pulumi:"ip6Secondary"`
	// Primary DNS server IP address for the VDOM.
	Primary pulumi.StringOutput `pulumi:"primary"`
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Secondary DNS server IP address for the VDOM.
	Secondary pulumi.StringOutput `pulumi:"secondary"`
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames VdomdnsServerHostnameArrayOutput `pulumi:"serverHostnames"`
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod pulumi.StringOutput `pulumi:"serverSelectMethod"`
	// Source IP for communications with the DNS server.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringOutput `pulumi:"sslCertificate"`
	// Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
	VdomDns pulumi.StringOutput `pulumi:"vdomDns"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVdomdns registers a new resource with the given unique name, arguments, and options.
func NewVdomdns(ctx *pulumi.Context,
	name string, args *VdomdnsArgs, opts ...pulumi.ResourceOption) (*Vdomdns, error) {
	if args == nil {
		args = &VdomdnsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vdomdns
	err := ctx.RegisterResource("fortios:system/vdomdns:Vdomdns", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVdomdns gets an existing Vdomdns resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVdomdns(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VdomdnsState, opts ...pulumi.ResourceOption) (*Vdomdns, error) {
	var resource Vdomdns
	err := ctx.ReadResource("fortios:system/vdomdns:Vdomdns", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vdomdns resources.
type vdomdnsState struct {
	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary *string `pulumi:"altPrimary"`
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary *string `pulumi:"altSecondary"`
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls *string `pulumi:"dnsOverTls"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Primary IPv6 DNS server IP address for the VDOM.
	Ip6Primary *string `pulumi:"ip6Primary"`
	// Secondary IPv6 DNS server IP address for the VDOM.
	Ip6Secondary *string `pulumi:"ip6Secondary"`
	// Primary DNS server IP address for the VDOM.
	Primary *string `pulumi:"primary"`
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol *string `pulumi:"protocol"`
	// Secondary DNS server IP address for the VDOM.
	Secondary *string `pulumi:"secondary"`
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames []VdomdnsServerHostname `pulumi:"serverHostnames"`
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod *string `pulumi:"serverSelectMethod"`
	// Source IP for communications with the DNS server.
	SourceIp *string `pulumi:"sourceIp"`
	// Name of local certificate for SSL connections.
	SslCertificate *string `pulumi:"sslCertificate"`
	// Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
	VdomDns *string `pulumi:"vdomDns"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type VdomdnsState struct {
	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary pulumi.StringPtrInput
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary pulumi.StringPtrInput
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Primary IPv6 DNS server IP address for the VDOM.
	Ip6Primary pulumi.StringPtrInput
	// Secondary IPv6 DNS server IP address for the VDOM.
	Ip6Secondary pulumi.StringPtrInput
	// Primary DNS server IP address for the VDOM.
	Primary pulumi.StringPtrInput
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol pulumi.StringPtrInput
	// Secondary DNS server IP address for the VDOM.
	Secondary pulumi.StringPtrInput
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames VdomdnsServerHostnameArrayInput
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod pulumi.StringPtrInput
	// Source IP for communications with the DNS server.
	SourceIp pulumi.StringPtrInput
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringPtrInput
	// Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
	VdomDns pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VdomdnsState) ElementType() reflect.Type {
	return reflect.TypeOf((*vdomdnsState)(nil)).Elem()
}

type vdomdnsArgs struct {
	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary *string `pulumi:"altPrimary"`
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary *string `pulumi:"altSecondary"`
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls *string `pulumi:"dnsOverTls"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Primary IPv6 DNS server IP address for the VDOM.
	Ip6Primary *string `pulumi:"ip6Primary"`
	// Secondary IPv6 DNS server IP address for the VDOM.
	Ip6Secondary *string `pulumi:"ip6Secondary"`
	// Primary DNS server IP address for the VDOM.
	Primary *string `pulumi:"primary"`
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol *string `pulumi:"protocol"`
	// Secondary DNS server IP address for the VDOM.
	Secondary *string `pulumi:"secondary"`
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames []VdomdnsServerHostname `pulumi:"serverHostnames"`
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod *string `pulumi:"serverSelectMethod"`
	// Source IP for communications with the DNS server.
	SourceIp *string `pulumi:"sourceIp"`
	// Name of local certificate for SSL connections.
	SslCertificate *string `pulumi:"sslCertificate"`
	// Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
	VdomDns *string `pulumi:"vdomDns"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Vdomdns resource.
type VdomdnsArgs struct {
	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary pulumi.StringPtrInput
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary pulumi.StringPtrInput
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Primary IPv6 DNS server IP address for the VDOM.
	Ip6Primary pulumi.StringPtrInput
	// Secondary IPv6 DNS server IP address for the VDOM.
	Ip6Secondary pulumi.StringPtrInput
	// Primary DNS server IP address for the VDOM.
	Primary pulumi.StringPtrInput
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol pulumi.StringPtrInput
	// Secondary DNS server IP address for the VDOM.
	Secondary pulumi.StringPtrInput
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames VdomdnsServerHostnameArrayInput
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod pulumi.StringPtrInput
	// Source IP for communications with the DNS server.
	SourceIp pulumi.StringPtrInput
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringPtrInput
	// Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
	VdomDns pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VdomdnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vdomdnsArgs)(nil)).Elem()
}

type VdomdnsInput interface {
	pulumi.Input

	ToVdomdnsOutput() VdomdnsOutput
	ToVdomdnsOutputWithContext(ctx context.Context) VdomdnsOutput
}

func (*Vdomdns) ElementType() reflect.Type {
	return reflect.TypeOf((**Vdomdns)(nil)).Elem()
}

func (i *Vdomdns) ToVdomdnsOutput() VdomdnsOutput {
	return i.ToVdomdnsOutputWithContext(context.Background())
}

func (i *Vdomdns) ToVdomdnsOutputWithContext(ctx context.Context) VdomdnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VdomdnsOutput)
}

// VdomdnsArrayInput is an input type that accepts VdomdnsArray and VdomdnsArrayOutput values.
// You can construct a concrete instance of `VdomdnsArrayInput` via:
//
//	VdomdnsArray{ VdomdnsArgs{...} }
type VdomdnsArrayInput interface {
	pulumi.Input

	ToVdomdnsArrayOutput() VdomdnsArrayOutput
	ToVdomdnsArrayOutputWithContext(context.Context) VdomdnsArrayOutput
}

type VdomdnsArray []VdomdnsInput

func (VdomdnsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vdomdns)(nil)).Elem()
}

func (i VdomdnsArray) ToVdomdnsArrayOutput() VdomdnsArrayOutput {
	return i.ToVdomdnsArrayOutputWithContext(context.Background())
}

func (i VdomdnsArray) ToVdomdnsArrayOutputWithContext(ctx context.Context) VdomdnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VdomdnsArrayOutput)
}

// VdomdnsMapInput is an input type that accepts VdomdnsMap and VdomdnsMapOutput values.
// You can construct a concrete instance of `VdomdnsMapInput` via:
//
//	VdomdnsMap{ "key": VdomdnsArgs{...} }
type VdomdnsMapInput interface {
	pulumi.Input

	ToVdomdnsMapOutput() VdomdnsMapOutput
	ToVdomdnsMapOutputWithContext(context.Context) VdomdnsMapOutput
}

type VdomdnsMap map[string]VdomdnsInput

func (VdomdnsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vdomdns)(nil)).Elem()
}

func (i VdomdnsMap) ToVdomdnsMapOutput() VdomdnsMapOutput {
	return i.ToVdomdnsMapOutputWithContext(context.Background())
}

func (i VdomdnsMap) ToVdomdnsMapOutputWithContext(ctx context.Context) VdomdnsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VdomdnsMapOutput)
}

type VdomdnsOutput struct{ *pulumi.OutputState }

func (VdomdnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vdomdns)(nil)).Elem()
}

func (o VdomdnsOutput) ToVdomdnsOutput() VdomdnsOutput {
	return o
}

func (o VdomdnsOutput) ToVdomdnsOutputWithContext(ctx context.Context) VdomdnsOutput {
	return o
}

// Alternate primary DNS server. (This is not used as a failover DNS server.)
func (o VdomdnsOutput) AltPrimary() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomdns) pulumi.StringOutput { return v.AltPrimary }).(pulumi.StringOutput)
}

// Alternate secondary DNS server. (This is not used as a failover DNS server.)
func (o VdomdnsOutput) AltSecondary() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomdns) pulumi.StringOutput { return v.AltSecondary }).(pulumi.StringOutput)
}

// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
func (o VdomdnsOutput) DnsOverTls() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomdns) pulumi.StringOutput { return v.DnsOverTls }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o VdomdnsOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vdomdns) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o VdomdnsOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vdomdns) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Specify outgoing interface to reach server.
func (o VdomdnsOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomdns) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
func (o VdomdnsOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomdns) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

// Primary IPv6 DNS server IP address for the VDOM.
func (o VdomdnsOutput) Ip6Primary() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomdns) pulumi.StringOutput { return v.Ip6Primary }).(pulumi.StringOutput)
}

// Secondary IPv6 DNS server IP address for the VDOM.
func (o VdomdnsOutput) Ip6Secondary() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomdns) pulumi.StringOutput { return v.Ip6Secondary }).(pulumi.StringOutput)
}

// Primary DNS server IP address for the VDOM.
func (o VdomdnsOutput) Primary() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomdns) pulumi.StringOutput { return v.Primary }).(pulumi.StringOutput)
}

// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
func (o VdomdnsOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomdns) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Secondary DNS server IP address for the VDOM.
func (o VdomdnsOutput) Secondary() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomdns) pulumi.StringOutput { return v.Secondary }).(pulumi.StringOutput)
}

// DNS server host name list. The structure of `serverHostname` block is documented below.
func (o VdomdnsOutput) ServerHostnames() VdomdnsServerHostnameArrayOutput {
	return o.ApplyT(func(v *Vdomdns) VdomdnsServerHostnameArrayOutput { return v.ServerHostnames }).(VdomdnsServerHostnameArrayOutput)
}

// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
func (o VdomdnsOutput) ServerSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomdns) pulumi.StringOutput { return v.ServerSelectMethod }).(pulumi.StringOutput)
}

// Source IP for communications with the DNS server.
func (o VdomdnsOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomdns) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// Name of local certificate for SSL connections.
func (o VdomdnsOutput) SslCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomdns) pulumi.StringOutput { return v.SslCertificate }).(pulumi.StringOutput)
}

// Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
func (o VdomdnsOutput) VdomDns() pulumi.StringOutput {
	return o.ApplyT(func(v *Vdomdns) pulumi.StringOutput { return v.VdomDns }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o VdomdnsOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vdomdns) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type VdomdnsArrayOutput struct{ *pulumi.OutputState }

func (VdomdnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vdomdns)(nil)).Elem()
}

func (o VdomdnsArrayOutput) ToVdomdnsArrayOutput() VdomdnsArrayOutput {
	return o
}

func (o VdomdnsArrayOutput) ToVdomdnsArrayOutputWithContext(ctx context.Context) VdomdnsArrayOutput {
	return o
}

func (o VdomdnsArrayOutput) Index(i pulumi.IntInput) VdomdnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vdomdns {
		return vs[0].([]*Vdomdns)[vs[1].(int)]
	}).(VdomdnsOutput)
}

type VdomdnsMapOutput struct{ *pulumi.OutputState }

func (VdomdnsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vdomdns)(nil)).Elem()
}

func (o VdomdnsMapOutput) ToVdomdnsMapOutput() VdomdnsMapOutput {
	return o
}

func (o VdomdnsMapOutput) ToVdomdnsMapOutputWithContext(ctx context.Context) VdomdnsMapOutput {
	return o
}

func (o VdomdnsMapOutput) MapIndex(k pulumi.StringInput) VdomdnsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vdomdns {
		return vs[0].(map[string]*Vdomdns)[vs[1].(string)]
	}).(VdomdnsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VdomdnsInput)(nil)).Elem(), &Vdomdns{})
	pulumi.RegisterInputType(reflect.TypeOf((*VdomdnsArrayInput)(nil)).Elem(), VdomdnsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VdomdnsMapInput)(nil)).Elem(), VdomdnsMap{})
	pulumi.RegisterOutputType(VdomdnsOutput{})
	pulumi.RegisterOutputType(VdomdnsArrayOutput{})
	pulumi.RegisterOutputType(VdomdnsMapOutput{})
}
