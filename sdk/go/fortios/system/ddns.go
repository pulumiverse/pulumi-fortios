// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure DDNS.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewDdns(ctx, "trname", &system.DdnsArgs{
//				BoundIp:      pulumi.String("0.0.0.0"),
//				ClearText:    pulumi.String("disable"),
//				DdnsAuth:     pulumi.String("disable"),
//				DdnsDomain:   pulumi.String("www.s.com"),
//				DdnsPassword: pulumi.String("ewewcd"),
//				DdnsServer:   pulumi.String("tzo.com"),
//				DdnsServerIp: pulumi.String("0.0.0.0"),
//				DdnsTtl:      pulumi.Int(300),
//				DdnsUsername: pulumi.String("sie2ae"),
//				Ddnsid:       pulumi.Int(1),
//				MonitorInterfaces: system.DdnsMonitorInterfaceArray{
//					&system.DdnsMonitorInterfaceArgs{
//						InterfaceName: pulumi.String("port2"),
//					},
//				},
//				SslCertificate: pulumi.String("Fortinet_Factory"),
//				UpdateInterval: pulumi.Int(300),
//				UsePublicIp:    pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// System Ddns can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/ddns:Ddns labelname {{ddnsid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/ddns:Ddns labelname {{ddnsid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Ddns struct {
	pulumi.CustomResourceState

	// Address type of interface address in DDNS update. Valid values: `ipv4`, `ipv6`.
	AddrType pulumi.StringOutput `pulumi:"addrType"`
	// Bound IP address.
	BoundIp pulumi.StringOutput `pulumi:"boundIp"`
	// Enable/disable use of clear text connections. Valid values: `disable`, `enable`.
	ClearText pulumi.StringOutput `pulumi:"clearText"`
	// Enable/disable TSIG authentication for your DDNS server. Valid values: `disable`, `tsig`.
	DdnsAuth pulumi.StringOutput `pulumi:"ddnsAuth"`
	// Your fully qualified domain name (for example, yourname.DDNS.com).
	DdnsDomain pulumi.StringOutput `pulumi:"ddnsDomain"`
	// DDNS update key (base 64 encoding).
	DdnsKey pulumi.StringOutput `pulumi:"ddnsKey"`
	// DDNS update key name.
	DdnsKeyname pulumi.StringOutput `pulumi:"ddnsKeyname"`
	// DDNS password.
	DdnsPassword pulumi.StringPtrOutput `pulumi:"ddnsPassword"`
	// Select a DDNS service provider. Valid values: `dyndns.org`, `dyns.net`, `tzo.com`, `vavic.com`, `dipdns.net`, `now.net.cn`, `dhs.org`, `easydns.com`, `genericDDNS`, `FortiGuardDDNS`, `noip.com`.
	DdnsServer pulumi.StringOutput `pulumi:"ddnsServer"`
	// Generic DDNS server IP/FQDN list. The structure of `ddnsServerAddr` block is documented below.
	DdnsServerAddrs DdnsDdnsServerAddrArrayOutput `pulumi:"ddnsServerAddrs"`
	// Generic DDNS server IP.
	DdnsServerIp pulumi.StringOutput `pulumi:"ddnsServerIp"`
	// DDNS Serial Number.
	DdnsSn pulumi.StringOutput `pulumi:"ddnsSn"`
	// Time-to-live for DDNS packets.
	DdnsTtl pulumi.IntOutput `pulumi:"ddnsTtl"`
	// DDNS user name.
	DdnsUsername pulumi.StringOutput `pulumi:"ddnsUsername"`
	// Zone of your domain name (for example, DDNS.com).
	DdnsZone pulumi.StringOutput `pulumi:"ddnsZone"`
	// DDNS ID.
	Ddnsid pulumi.IntOutput `pulumi:"ddnsid"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Monitored interface. The structure of `monitorInterface` block is documented below.
	MonitorInterfaces DdnsMonitorInterfaceArrayOutput `pulumi:"monitorInterfaces"`
	// Address type of the DDNS server. Valid values: `ipv4`, `ipv6`.
	ServerType pulumi.StringOutput `pulumi:"serverType"`
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringOutput `pulumi:"sslCertificate"`
	// DDNS update interval (60 - 2592000 sec, default = 300).
	UpdateInterval pulumi.IntOutput `pulumi:"updateInterval"`
	// Enable/disable use of public IP address. Valid values: `disable`, `enable`.
	UsePublicIp pulumi.StringOutput `pulumi:"usePublicIp"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewDdns registers a new resource with the given unique name, arguments, and options.
func NewDdns(ctx *pulumi.Context,
	name string, args *DdnsArgs, opts ...pulumi.ResourceOption) (*Ddns, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DdnsServer == nil {
		return nil, errors.New("invalid value for required argument 'DdnsServer'")
	}
	if args.MonitorInterfaces == nil {
		return nil, errors.New("invalid value for required argument 'MonitorInterfaces'")
	}
	if args.DdnsKey != nil {
		args.DdnsKey = pulumi.ToSecret(args.DdnsKey).(pulumi.StringPtrInput)
	}
	if args.DdnsPassword != nil {
		args.DdnsPassword = pulumi.ToSecret(args.DdnsPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"ddnsKey",
		"ddnsPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ddns
	err := ctx.RegisterResource("fortios:system/ddns:Ddns", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDdns gets an existing Ddns resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDdns(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DdnsState, opts ...pulumi.ResourceOption) (*Ddns, error) {
	var resource Ddns
	err := ctx.ReadResource("fortios:system/ddns:Ddns", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ddns resources.
type ddnsState struct {
	// Address type of interface address in DDNS update. Valid values: `ipv4`, `ipv6`.
	AddrType *string `pulumi:"addrType"`
	// Bound IP address.
	BoundIp *string `pulumi:"boundIp"`
	// Enable/disable use of clear text connections. Valid values: `disable`, `enable`.
	ClearText *string `pulumi:"clearText"`
	// Enable/disable TSIG authentication for your DDNS server. Valid values: `disable`, `tsig`.
	DdnsAuth *string `pulumi:"ddnsAuth"`
	// Your fully qualified domain name (for example, yourname.DDNS.com).
	DdnsDomain *string `pulumi:"ddnsDomain"`
	// DDNS update key (base 64 encoding).
	DdnsKey *string `pulumi:"ddnsKey"`
	// DDNS update key name.
	DdnsKeyname *string `pulumi:"ddnsKeyname"`
	// DDNS password.
	DdnsPassword *string `pulumi:"ddnsPassword"`
	// Select a DDNS service provider. Valid values: `dyndns.org`, `dyns.net`, `tzo.com`, `vavic.com`, `dipdns.net`, `now.net.cn`, `dhs.org`, `easydns.com`, `genericDDNS`, `FortiGuardDDNS`, `noip.com`.
	DdnsServer *string `pulumi:"ddnsServer"`
	// Generic DDNS server IP/FQDN list. The structure of `ddnsServerAddr` block is documented below.
	DdnsServerAddrs []DdnsDdnsServerAddr `pulumi:"ddnsServerAddrs"`
	// Generic DDNS server IP.
	DdnsServerIp *string `pulumi:"ddnsServerIp"`
	// DDNS Serial Number.
	DdnsSn *string `pulumi:"ddnsSn"`
	// Time-to-live for DDNS packets.
	DdnsTtl *int `pulumi:"ddnsTtl"`
	// DDNS user name.
	DdnsUsername *string `pulumi:"ddnsUsername"`
	// Zone of your domain name (for example, DDNS.com).
	DdnsZone *string `pulumi:"ddnsZone"`
	// DDNS ID.
	Ddnsid *int `pulumi:"ddnsid"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Monitored interface. The structure of `monitorInterface` block is documented below.
	MonitorInterfaces []DdnsMonitorInterface `pulumi:"monitorInterfaces"`
	// Address type of the DDNS server. Valid values: `ipv4`, `ipv6`.
	ServerType *string `pulumi:"serverType"`
	// Name of local certificate for SSL connections.
	SslCertificate *string `pulumi:"sslCertificate"`
	// DDNS update interval (60 - 2592000 sec, default = 300).
	UpdateInterval *int `pulumi:"updateInterval"`
	// Enable/disable use of public IP address. Valid values: `disable`, `enable`.
	UsePublicIp *string `pulumi:"usePublicIp"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type DdnsState struct {
	// Address type of interface address in DDNS update. Valid values: `ipv4`, `ipv6`.
	AddrType pulumi.StringPtrInput
	// Bound IP address.
	BoundIp pulumi.StringPtrInput
	// Enable/disable use of clear text connections. Valid values: `disable`, `enable`.
	ClearText pulumi.StringPtrInput
	// Enable/disable TSIG authentication for your DDNS server. Valid values: `disable`, `tsig`.
	DdnsAuth pulumi.StringPtrInput
	// Your fully qualified domain name (for example, yourname.DDNS.com).
	DdnsDomain pulumi.StringPtrInput
	// DDNS update key (base 64 encoding).
	DdnsKey pulumi.StringPtrInput
	// DDNS update key name.
	DdnsKeyname pulumi.StringPtrInput
	// DDNS password.
	DdnsPassword pulumi.StringPtrInput
	// Select a DDNS service provider. Valid values: `dyndns.org`, `dyns.net`, `tzo.com`, `vavic.com`, `dipdns.net`, `now.net.cn`, `dhs.org`, `easydns.com`, `genericDDNS`, `FortiGuardDDNS`, `noip.com`.
	DdnsServer pulumi.StringPtrInput
	// Generic DDNS server IP/FQDN list. The structure of `ddnsServerAddr` block is documented below.
	DdnsServerAddrs DdnsDdnsServerAddrArrayInput
	// Generic DDNS server IP.
	DdnsServerIp pulumi.StringPtrInput
	// DDNS Serial Number.
	DdnsSn pulumi.StringPtrInput
	// Time-to-live for DDNS packets.
	DdnsTtl pulumi.IntPtrInput
	// DDNS user name.
	DdnsUsername pulumi.StringPtrInput
	// Zone of your domain name (for example, DDNS.com).
	DdnsZone pulumi.StringPtrInput
	// DDNS ID.
	Ddnsid pulumi.IntPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Monitored interface. The structure of `monitorInterface` block is documented below.
	MonitorInterfaces DdnsMonitorInterfaceArrayInput
	// Address type of the DDNS server. Valid values: `ipv4`, `ipv6`.
	ServerType pulumi.StringPtrInput
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringPtrInput
	// DDNS update interval (60 - 2592000 sec, default = 300).
	UpdateInterval pulumi.IntPtrInput
	// Enable/disable use of public IP address. Valid values: `disable`, `enable`.
	UsePublicIp pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (DdnsState) ElementType() reflect.Type {
	return reflect.TypeOf((*ddnsState)(nil)).Elem()
}

type ddnsArgs struct {
	// Address type of interface address in DDNS update. Valid values: `ipv4`, `ipv6`.
	AddrType *string `pulumi:"addrType"`
	// Bound IP address.
	BoundIp *string `pulumi:"boundIp"`
	// Enable/disable use of clear text connections. Valid values: `disable`, `enable`.
	ClearText *string `pulumi:"clearText"`
	// Enable/disable TSIG authentication for your DDNS server. Valid values: `disable`, `tsig`.
	DdnsAuth *string `pulumi:"ddnsAuth"`
	// Your fully qualified domain name (for example, yourname.DDNS.com).
	DdnsDomain *string `pulumi:"ddnsDomain"`
	// DDNS update key (base 64 encoding).
	DdnsKey *string `pulumi:"ddnsKey"`
	// DDNS update key name.
	DdnsKeyname *string `pulumi:"ddnsKeyname"`
	// DDNS password.
	DdnsPassword *string `pulumi:"ddnsPassword"`
	// Select a DDNS service provider. Valid values: `dyndns.org`, `dyns.net`, `tzo.com`, `vavic.com`, `dipdns.net`, `now.net.cn`, `dhs.org`, `easydns.com`, `genericDDNS`, `FortiGuardDDNS`, `noip.com`.
	DdnsServer string `pulumi:"ddnsServer"`
	// Generic DDNS server IP/FQDN list. The structure of `ddnsServerAddr` block is documented below.
	DdnsServerAddrs []DdnsDdnsServerAddr `pulumi:"ddnsServerAddrs"`
	// Generic DDNS server IP.
	DdnsServerIp *string `pulumi:"ddnsServerIp"`
	// DDNS Serial Number.
	DdnsSn *string `pulumi:"ddnsSn"`
	// Time-to-live for DDNS packets.
	DdnsTtl *int `pulumi:"ddnsTtl"`
	// DDNS user name.
	DdnsUsername *string `pulumi:"ddnsUsername"`
	// Zone of your domain name (for example, DDNS.com).
	DdnsZone *string `pulumi:"ddnsZone"`
	// DDNS ID.
	Ddnsid *int `pulumi:"ddnsid"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Monitored interface. The structure of `monitorInterface` block is documented below.
	MonitorInterfaces []DdnsMonitorInterface `pulumi:"monitorInterfaces"`
	// Address type of the DDNS server. Valid values: `ipv4`, `ipv6`.
	ServerType *string `pulumi:"serverType"`
	// Name of local certificate for SSL connections.
	SslCertificate *string `pulumi:"sslCertificate"`
	// DDNS update interval (60 - 2592000 sec, default = 300).
	UpdateInterval *int `pulumi:"updateInterval"`
	// Enable/disable use of public IP address. Valid values: `disable`, `enable`.
	UsePublicIp *string `pulumi:"usePublicIp"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Ddns resource.
type DdnsArgs struct {
	// Address type of interface address in DDNS update. Valid values: `ipv4`, `ipv6`.
	AddrType pulumi.StringPtrInput
	// Bound IP address.
	BoundIp pulumi.StringPtrInput
	// Enable/disable use of clear text connections. Valid values: `disable`, `enable`.
	ClearText pulumi.StringPtrInput
	// Enable/disable TSIG authentication for your DDNS server. Valid values: `disable`, `tsig`.
	DdnsAuth pulumi.StringPtrInput
	// Your fully qualified domain name (for example, yourname.DDNS.com).
	DdnsDomain pulumi.StringPtrInput
	// DDNS update key (base 64 encoding).
	DdnsKey pulumi.StringPtrInput
	// DDNS update key name.
	DdnsKeyname pulumi.StringPtrInput
	// DDNS password.
	DdnsPassword pulumi.StringPtrInput
	// Select a DDNS service provider. Valid values: `dyndns.org`, `dyns.net`, `tzo.com`, `vavic.com`, `dipdns.net`, `now.net.cn`, `dhs.org`, `easydns.com`, `genericDDNS`, `FortiGuardDDNS`, `noip.com`.
	DdnsServer pulumi.StringInput
	// Generic DDNS server IP/FQDN list. The structure of `ddnsServerAddr` block is documented below.
	DdnsServerAddrs DdnsDdnsServerAddrArrayInput
	// Generic DDNS server IP.
	DdnsServerIp pulumi.StringPtrInput
	// DDNS Serial Number.
	DdnsSn pulumi.StringPtrInput
	// Time-to-live for DDNS packets.
	DdnsTtl pulumi.IntPtrInput
	// DDNS user name.
	DdnsUsername pulumi.StringPtrInput
	// Zone of your domain name (for example, DDNS.com).
	DdnsZone pulumi.StringPtrInput
	// DDNS ID.
	Ddnsid pulumi.IntPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Monitored interface. The structure of `monitorInterface` block is documented below.
	MonitorInterfaces DdnsMonitorInterfaceArrayInput
	// Address type of the DDNS server. Valid values: `ipv4`, `ipv6`.
	ServerType pulumi.StringPtrInput
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringPtrInput
	// DDNS update interval (60 - 2592000 sec, default = 300).
	UpdateInterval pulumi.IntPtrInput
	// Enable/disable use of public IP address. Valid values: `disable`, `enable`.
	UsePublicIp pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (DdnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ddnsArgs)(nil)).Elem()
}

type DdnsInput interface {
	pulumi.Input

	ToDdnsOutput() DdnsOutput
	ToDdnsOutputWithContext(ctx context.Context) DdnsOutput
}

func (*Ddns) ElementType() reflect.Type {
	return reflect.TypeOf((**Ddns)(nil)).Elem()
}

func (i *Ddns) ToDdnsOutput() DdnsOutput {
	return i.ToDdnsOutputWithContext(context.Background())
}

func (i *Ddns) ToDdnsOutputWithContext(ctx context.Context) DdnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdnsOutput)
}

// DdnsArrayInput is an input type that accepts DdnsArray and DdnsArrayOutput values.
// You can construct a concrete instance of `DdnsArrayInput` via:
//
//	DdnsArray{ DdnsArgs{...} }
type DdnsArrayInput interface {
	pulumi.Input

	ToDdnsArrayOutput() DdnsArrayOutput
	ToDdnsArrayOutputWithContext(context.Context) DdnsArrayOutput
}

type DdnsArray []DdnsInput

func (DdnsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ddns)(nil)).Elem()
}

func (i DdnsArray) ToDdnsArrayOutput() DdnsArrayOutput {
	return i.ToDdnsArrayOutputWithContext(context.Background())
}

func (i DdnsArray) ToDdnsArrayOutputWithContext(ctx context.Context) DdnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdnsArrayOutput)
}

// DdnsMapInput is an input type that accepts DdnsMap and DdnsMapOutput values.
// You can construct a concrete instance of `DdnsMapInput` via:
//
//	DdnsMap{ "key": DdnsArgs{...} }
type DdnsMapInput interface {
	pulumi.Input

	ToDdnsMapOutput() DdnsMapOutput
	ToDdnsMapOutputWithContext(context.Context) DdnsMapOutput
}

type DdnsMap map[string]DdnsInput

func (DdnsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ddns)(nil)).Elem()
}

func (i DdnsMap) ToDdnsMapOutput() DdnsMapOutput {
	return i.ToDdnsMapOutputWithContext(context.Background())
}

func (i DdnsMap) ToDdnsMapOutputWithContext(ctx context.Context) DdnsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdnsMapOutput)
}

type DdnsOutput struct{ *pulumi.OutputState }

func (DdnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ddns)(nil)).Elem()
}

func (o DdnsOutput) ToDdnsOutput() DdnsOutput {
	return o
}

func (o DdnsOutput) ToDdnsOutputWithContext(ctx context.Context) DdnsOutput {
	return o
}

// Address type of interface address in DDNS update. Valid values: `ipv4`, `ipv6`.
func (o DdnsOutput) AddrType() pulumi.StringOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringOutput { return v.AddrType }).(pulumi.StringOutput)
}

// Bound IP address.
func (o DdnsOutput) BoundIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringOutput { return v.BoundIp }).(pulumi.StringOutput)
}

// Enable/disable use of clear text connections. Valid values: `disable`, `enable`.
func (o DdnsOutput) ClearText() pulumi.StringOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringOutput { return v.ClearText }).(pulumi.StringOutput)
}

// Enable/disable TSIG authentication for your DDNS server. Valid values: `disable`, `tsig`.
func (o DdnsOutput) DdnsAuth() pulumi.StringOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringOutput { return v.DdnsAuth }).(pulumi.StringOutput)
}

// Your fully qualified domain name (for example, yourname.DDNS.com).
func (o DdnsOutput) DdnsDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringOutput { return v.DdnsDomain }).(pulumi.StringOutput)
}

// DDNS update key (base 64 encoding).
func (o DdnsOutput) DdnsKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringOutput { return v.DdnsKey }).(pulumi.StringOutput)
}

// DDNS update key name.
func (o DdnsOutput) DdnsKeyname() pulumi.StringOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringOutput { return v.DdnsKeyname }).(pulumi.StringOutput)
}

// DDNS password.
func (o DdnsOutput) DdnsPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringPtrOutput { return v.DdnsPassword }).(pulumi.StringPtrOutput)
}

// Select a DDNS service provider. Valid values: `dyndns.org`, `dyns.net`, `tzo.com`, `vavic.com`, `dipdns.net`, `now.net.cn`, `dhs.org`, `easydns.com`, `genericDDNS`, `FortiGuardDDNS`, `noip.com`.
func (o DdnsOutput) DdnsServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringOutput { return v.DdnsServer }).(pulumi.StringOutput)
}

// Generic DDNS server IP/FQDN list. The structure of `ddnsServerAddr` block is documented below.
func (o DdnsOutput) DdnsServerAddrs() DdnsDdnsServerAddrArrayOutput {
	return o.ApplyT(func(v *Ddns) DdnsDdnsServerAddrArrayOutput { return v.DdnsServerAddrs }).(DdnsDdnsServerAddrArrayOutput)
}

// Generic DDNS server IP.
func (o DdnsOutput) DdnsServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringOutput { return v.DdnsServerIp }).(pulumi.StringOutput)
}

// DDNS Serial Number.
func (o DdnsOutput) DdnsSn() pulumi.StringOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringOutput { return v.DdnsSn }).(pulumi.StringOutput)
}

// Time-to-live for DDNS packets.
func (o DdnsOutput) DdnsTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *Ddns) pulumi.IntOutput { return v.DdnsTtl }).(pulumi.IntOutput)
}

// DDNS user name.
func (o DdnsOutput) DdnsUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringOutput { return v.DdnsUsername }).(pulumi.StringOutput)
}

// Zone of your domain name (for example, DDNS.com).
func (o DdnsOutput) DdnsZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringOutput { return v.DdnsZone }).(pulumi.StringOutput)
}

// DDNS ID.
func (o DdnsOutput) Ddnsid() pulumi.IntOutput {
	return o.ApplyT(func(v *Ddns) pulumi.IntOutput { return v.Ddnsid }).(pulumi.IntOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o DdnsOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o DdnsOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Monitored interface. The structure of `monitorInterface` block is documented below.
func (o DdnsOutput) MonitorInterfaces() DdnsMonitorInterfaceArrayOutput {
	return o.ApplyT(func(v *Ddns) DdnsMonitorInterfaceArrayOutput { return v.MonitorInterfaces }).(DdnsMonitorInterfaceArrayOutput)
}

// Address type of the DDNS server. Valid values: `ipv4`, `ipv6`.
func (o DdnsOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringOutput { return v.ServerType }).(pulumi.StringOutput)
}

// Name of local certificate for SSL connections.
func (o DdnsOutput) SslCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringOutput { return v.SslCertificate }).(pulumi.StringOutput)
}

// DDNS update interval (60 - 2592000 sec, default = 300).
func (o DdnsOutput) UpdateInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Ddns) pulumi.IntOutput { return v.UpdateInterval }).(pulumi.IntOutput)
}

// Enable/disable use of public IP address. Valid values: `disable`, `enable`.
func (o DdnsOutput) UsePublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringOutput { return v.UsePublicIp }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o DdnsOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ddns) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type DdnsArrayOutput struct{ *pulumi.OutputState }

func (DdnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ddns)(nil)).Elem()
}

func (o DdnsArrayOutput) ToDdnsArrayOutput() DdnsArrayOutput {
	return o
}

func (o DdnsArrayOutput) ToDdnsArrayOutputWithContext(ctx context.Context) DdnsArrayOutput {
	return o
}

func (o DdnsArrayOutput) Index(i pulumi.IntInput) DdnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ddns {
		return vs[0].([]*Ddns)[vs[1].(int)]
	}).(DdnsOutput)
}

type DdnsMapOutput struct{ *pulumi.OutputState }

func (DdnsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ddns)(nil)).Elem()
}

func (o DdnsMapOutput) ToDdnsMapOutput() DdnsMapOutput {
	return o
}

func (o DdnsMapOutput) ToDdnsMapOutputWithContext(ctx context.Context) DdnsMapOutput {
	return o
}

func (o DdnsMapOutput) MapIndex(k pulumi.StringInput) DdnsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ddns {
		return vs[0].(map[string]*Ddns)[vs[1].(string)]
	}).(DdnsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DdnsInput)(nil)).Elem(), &Ddns{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdnsArrayInput)(nil)).Elem(), DdnsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdnsMapInput)(nil)).Elem(), DdnsMap{})
	pulumi.RegisterOutputType(DdnsOutput{})
	pulumi.RegisterOutputType(DdnsArrayOutput{})
	pulumi.RegisterOutputType(DdnsMapOutput{})
}
