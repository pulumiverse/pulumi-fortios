// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure interfaces.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewInterface(ctx, "trname", &system.InterfaceArgs{
//				Algorithm:   pulumi.String("L4"),
//				Defaultgw:   pulumi.String("enable"),
//				Description: pulumi.String("Created by Terraform Provider for FortiOS"),
//				Distance:    pulumi.Int(5),
//				Ip:          pulumi.String("0.0.0.0 0.0.0.0"),
//				Ipv6: &system.InterfaceIpv6Args{
//					NdMode: pulumi.String("basic"),
//				},
//				Mode:        pulumi.String("dhcp"),
//				Mtu:         pulumi.Int(1500),
//				MtuOverride: pulumi.String("disable"),
//				SnmpIndex:   pulumi.Int(3),
//				Type:        pulumi.String("physical"),
//				Vdom:        pulumi.String("root"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// System Interface can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/interface:Interface labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/interface:Interface labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Interface struct {
	pulumi.CustomResourceState

	// PPPoE server name.
	AcName pulumi.StringOutput `pulumi:"acName"`
	// Aggregate interface.
	Aggregate pulumi.StringOutput `pulumi:"aggregate"`
	// Type of aggregation. Valid values: `physical`, `vxlan`.
	AggregateType pulumi.StringOutput `pulumi:"aggregateType"`
	// Frame distribution algorithm.
	Algorithm pulumi.StringOutput `pulumi:"algorithm"`
	// Alias will be displayed with the interface name to make it easier to distinguish.
	Alias pulumi.StringOutput `pulumi:"alias"`
	// Permitted types of management access to this interface.
	Allowaccess pulumi.StringOutput `pulumi:"allowaccess"`
	// Enable/disable automatic registration of unknown FortiAP devices. Valid values: `enable`, `disable`.
	ApDiscover pulumi.StringOutput `pulumi:"apDiscover"`
	// Enable/disable ARP forwarding. Valid values: `enable`, `disable`.
	Arpforward pulumi.StringOutput `pulumi:"arpforward"`
	// HTTPS server certificate.
	AuthCert pulumi.StringOutput `pulumi:"authCert"`
	// Address of captive portal.
	AuthPortalAddr pulumi.StringOutput `pulumi:"authPortalAddr"`
	// PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
	AuthType pulumi.StringOutput `pulumi:"authType"`
	// Enable/disable automatic authorization of dedicated Fortinet extension device on this interface. Valid values: `enable`, `disable`.
	AutoAuthExtensionDevice pulumi.StringOutput `pulumi:"autoAuthExtensionDevice"`
	// Indicates whether the interface is automatically created by FortiGate, for example, created during the VPN creation process. If it is, set it to "auto", else keep it empty.
	Autogenerated pulumi.StringOutput `pulumi:"autogenerated"`
	// Bandwidth measure time
	BandwidthMeasureTime pulumi.IntOutput `pulumi:"bandwidthMeasureTime"`
	// Bidirectional Forwarding Detection (BFD) settings. Valid values: `global`, `enable`, `disable`.
	Bfd pulumi.StringOutput `pulumi:"bfd"`
	// BFD desired minimal transmit interval.
	BfdDesiredMinTx pulumi.IntOutput `pulumi:"bfdDesiredMinTx"`
	// BFD detection multiplier.
	BfdDetectMult pulumi.IntOutput `pulumi:"bfdDetectMult"`
	// BFD required minimal receive interval.
	BfdRequiredMinRx pulumi.IntOutput `pulumi:"bfdRequiredMinRx"`
	// Enable/disable broadcasting FortiClient discovery messages. Valid values: `enable`, `disable`.
	BroadcastForticlientDiscovery pulumi.StringOutput `pulumi:"broadcastForticlientDiscovery"`
	// Enable/disable broadcast forwarding. Valid values: `enable`, `disable`.
	BroadcastForward pulumi.StringOutput `pulumi:"broadcastForward"`
	// Enable/disable captive portal.
	CaptivePortal pulumi.IntOutput `pulumi:"captivePortal"`
	// CLI connection status.
	CliConnStatus pulumi.IntOutput `pulumi:"cliConnStatus"`
	// DHCP client options. The structure of `clientOptions` block is documented below.
	ClientOptions InterfaceClientOptionArrayOutput `pulumi:"clientOptions"`
	// Color of icon on the GUI.
	Color pulumi.IntOutput `pulumi:"color"`
	// Configure interface for single purpose. Valid values: `none`, `management`.
	DedicatedTo pulumi.StringOutput `pulumi:"dedicatedTo"`
	// default purdue level of device detected on this interface. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
	DefaultPurdueLevel pulumi.StringOutput `pulumi:"defaultPurdueLevel"`
	// Enable to get the gateway IP from the DHCP or PPPoE server. Valid values: `enable`, `disable`.
	Defaultgw pulumi.StringOutput `pulumi:"defaultgw"`
	// Description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// MTU of detected peer (0 - 4294967295).
	DetectedPeerMtu pulumi.IntOutput `pulumi:"detectedPeerMtu"`
	// Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
	Detectprotocol pulumi.StringOutput `pulumi:"detectprotocol"`
	// Gateway's ping server for this IP.
	Detectserver pulumi.StringOutput `pulumi:"detectserver"`
	// Device access list.
	DeviceAccessList pulumi.StringOutput `pulumi:"deviceAccessList"`
	// Enable/disable passively gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
	DeviceIdentification pulumi.StringOutput `pulumi:"deviceIdentification"`
	// Enable/disable active gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
	DeviceIdentificationActiveScan pulumi.StringOutput `pulumi:"deviceIdentificationActiveScan"`
	// Enable/disable inclusion of devices detected on this interface in network vulnerability scans. Valid values: `disable`, `enable`.
	DeviceNetscan pulumi.StringOutput `pulumi:"deviceNetscan"`
	// Enable/disable passive gathering of user identity information about users on this interface. Valid values: `enable`, `disable`.
	DeviceUserIdentification pulumi.StringOutput `pulumi:"deviceUserIdentification"`
	// Device Index.
	Devindex pulumi.IntOutput `pulumi:"devindex"`
	// Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable). Valid values: `disable`, `enable`.
	DhcpBroadcastFlag pulumi.StringOutput `pulumi:"dhcpBroadcastFlag"`
	// Enable/disable addition of classless static routes retrieved from DHCP server. Valid values: `enable`, `disable`.
	DhcpClasslessRouteAddition pulumi.StringOutput `pulumi:"dhcpClasslessRouteAddition"`
	// DHCP client identifier.
	DhcpClientIdentifier pulumi.StringOutput `pulumi:"dhcpClientIdentifier"`
	// Enable/disable DHCP relay agent option. Valid values: `enable`, `disable`.
	DhcpRelayAgentOption pulumi.StringOutput `pulumi:"dhcpRelayAgentOption"`
	// DHCP relay circuit ID.
	DhcpRelayCircuitId pulumi.StringOutput `pulumi:"dhcpRelayCircuitId"`
	// Specify outgoing interface to reach server.
	DhcpRelayInterface pulumi.StringOutput `pulumi:"dhcpRelayInterface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	DhcpRelayInterfaceSelectMethod pulumi.StringOutput `pulumi:"dhcpRelayInterfaceSelectMethod"`
	// DHCP relay IP address.
	DhcpRelayIp pulumi.StringOutput `pulumi:"dhcpRelayIp"`
	// DHCP relay link selection.
	DhcpRelayLinkSelection pulumi.StringOutput `pulumi:"dhcpRelayLinkSelection"`
	// Enable/disable sending DHCP request to all servers. Valid values: `disable`, `enable`.
	DhcpRelayRequestAllServer pulumi.StringOutput `pulumi:"dhcpRelayRequestAllServer"`
	// Enable/disable allowing this interface to act as a DHCP relay. Valid values: `disable`, `enable`.
	DhcpRelayService pulumi.StringOutput `pulumi:"dhcpRelayService"`
	// IP address used by the DHCP relay as its source IP.
	DhcpRelaySourceIp pulumi.StringOutput `pulumi:"dhcpRelaySourceIp"`
	// DHCP relay type (regular or IPsec). Valid values: `regular`, `ipsec`.
	DhcpRelayType pulumi.StringOutput `pulumi:"dhcpRelayType"`
	// DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
	DhcpRenewTime pulumi.IntOutput `pulumi:"dhcpRenewTime"`
	// Enable/disable DHCP smart relay. Valid values: `disable`, `enable`.
	DhcpSmartRelay pulumi.StringOutput `pulumi:"dhcpSmartRelay"`
	// Configure DHCP server access list. The structure of `dhcpSnoopingServerList` block is documented below.
	DhcpSnoopingServerLists InterfaceDhcpSnoopingServerListArrayOutput `pulumi:"dhcpSnoopingServerLists"`
	// Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
	DiscRetryTimeout pulumi.IntOutput `pulumi:"discRetryTimeout"`
	// Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
	DisconnectThreshold pulumi.IntOutput `pulumi:"disconnectThreshold"`
	// Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
	Distance pulumi.IntOutput `pulumi:"distance"`
	// Enable/disable use DNS acquired by DHCP or PPPoE. Valid values: `enable`, `disable`.
	DnsServerOverride pulumi.StringOutput `pulumi:"dnsServerOverride"`
	// DNS transport protocols. Valid values: `cleartext`, `dot`, `doh`.
	DnsServerProtocol pulumi.StringOutput `pulumi:"dnsServerProtocol"`
	// Enable/disable drop fragment packets. Valid values: `enable`, `disable`.
	DropFragment pulumi.StringOutput `pulumi:"dropFragment"`
	// Enable/disable drop overlapped fragment packets. Valid values: `enable`, `disable`.
	DropOverlappedFragment pulumi.StringOutput `pulumi:"dropOverlappedFragment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// EAP CA certificate name.
	EapCaCert pulumi.StringOutput `pulumi:"eapCaCert"`
	// EAP identity.
	EapIdentity pulumi.StringOutput `pulumi:"eapIdentity"`
	// EAP method. Valid values: `tls`, `peap`.
	EapMethod pulumi.StringOutput `pulumi:"eapMethod"`
	// EAP password.
	EapPassword pulumi.StringPtrOutput `pulumi:"eapPassword"`
	// Enable/disable EAP-Supplicant. Valid values: `enable`, `disable`.
	EapSupplicant pulumi.StringOutput `pulumi:"eapSupplicant"`
	// EAP user certificate name.
	EapUserCert pulumi.StringOutput `pulumi:"eapUserCert"`
	// Outgoing traffic shaping profile.
	EgressShapingProfile pulumi.StringOutput `pulumi:"egressShapingProfile"`
	// Enable/disable endpoint compliance enforcement. Valid values: `enable`, `disable`.
	EndpointCompliance pulumi.StringOutput `pulumi:"endpointCompliance"`
	// Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
	EstimatedDownstreamBandwidth pulumi.IntOutput `pulumi:"estimatedDownstreamBandwidth"`
	// Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
	EstimatedUpstreamBandwidth pulumi.IntOutput `pulumi:"estimatedUpstreamBandwidth"`
	// Enable/disable the explicit FTP proxy on this interface. Valid values: `enable`, `disable`.
	ExplicitFtpProxy pulumi.StringOutput `pulumi:"explicitFtpProxy"`
	// Enable/disable the explicit web proxy on this interface. Valid values: `enable`, `disable`.
	ExplicitWebProxy pulumi.StringOutput `pulumi:"explicitWebProxy"`
	// Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet). Valid values: `enable`, `disable`.
	External pulumi.StringOutput `pulumi:"external"`
	// Action on extender when interface fail . Valid values: `soft-restart`, `hard-restart`, `reboot`.
	FailActionOnExtender pulumi.StringOutput `pulumi:"failActionOnExtender"`
	// Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `failAlertInterfaces` block is documented below.
	FailAlertInterfaces InterfaceFailAlertInterfaceArrayOutput `pulumi:"failAlertInterfaces"`
	// Select link-failed-signal or link-down method to alert about a failed link. Valid values: `link-failed-signal`, `link-down`.
	FailAlertMethod pulumi.StringOutput `pulumi:"failAlertMethod"`
	// Enable/disable fail detection features for this interface. Valid values: `enable`, `disable`.
	FailDetect pulumi.StringOutput `pulumi:"failDetect"`
	// Options for detecting that this interface has failed. Valid values: `detectserver`, `link-down`.
	FailDetectOption pulumi.StringOutput `pulumi:"failDetectOption"`
	// Enable/disable FortiHeartBeat (FortiTelemetry on GUI). Valid values: `enable`, `disable`.
	Fortiheartbeat pulumi.StringOutput `pulumi:"fortiheartbeat"`
	// Enable FortiLink to dedicate this interface to manage other Fortinet devices. Valid values: `enable`, `disable`.
	Fortilink pulumi.StringOutput `pulumi:"fortilink"`
	// fortilink split interface backup link.
	FortilinkBackupLink pulumi.IntOutput `pulumi:"fortilinkBackupLink"`
	// Protocol for FortiGate neighbor discovery. Valid values: `lldp`, `fortilink`.
	FortilinkNeighborDetect pulumi.StringOutput `pulumi:"fortilinkNeighborDetect"`
	// Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy. Valid values: `enable`, `disable`.
	FortilinkSplitInterface pulumi.StringOutput `pulumi:"fortilinkSplitInterface"`
	// Enable/disable FortiLink switch-stacking on this interface. Valid values: `enable`, `disable`.
	FortilinkStacking pulumi.StringOutput `pulumi:"fortilinkStacking"`
	// Transparent mode forward domain.
	ForwardDomain pulumi.IntOutput `pulumi:"forwardDomain"`
	// Configure forward error correction (FEC). Valid values: `none`, `disable`, `cl91-rs-fec`, `cl74-fc-fec`.
	ForwardErrorCorrection pulumi.StringOutput `pulumi:"forwardErrorCorrection"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
	Gwdetect pulumi.StringOutput `pulumi:"gwdetect"`
	// HA election priority for the PING server.
	HaPriority pulumi.IntOutput `pulumi:"haPriority"`
	// Enable/disable ICMP accept redirect. Valid values: `enable`, `disable`.
	IcmpAcceptRedirect pulumi.StringOutput `pulumi:"icmpAcceptRedirect"`
	// Enable/disable ICMP send redirect. Valid values: `enable`, `disable`.
	IcmpSendRedirect pulumi.StringOutput `pulumi:"icmpSendRedirect"`
	// Enable/disable authentication for this interface. Valid values: `enable`, `disable`.
	IdentAccept pulumi.StringOutput `pulumi:"identAccept"`
	// PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
	IdleTimeout pulumi.IntOutput `pulumi:"idleTimeout"`
	// Configure IKE authentication SAML server.
	IkeSamlServer pulumi.StringOutput `pulumi:"ikeSamlServer"`
	// Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
	Inbandwidth pulumi.IntOutput `pulumi:"inbandwidth"`
	// Incoming traffic shaping profile.
	IngressShapingProfile pulumi.StringOutput `pulumi:"ingressShapingProfile"`
	// Ingress Spillover threshold (0 - 16776000 kbps).
	IngressSpilloverThreshold pulumi.IntOutput `pulumi:"ingressSpilloverThreshold"`
	// Interface name.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Implicitly created.
	Internal pulumi.IntOutput `pulumi:"internal"`
	// Interface IPv4 address and subnet mask, syntax: X.X.X.X/24.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Enable/disable automatic IP address assignment of this interface by FortiIPAM.
	IpManagedByFortiipam pulumi.StringOutput `pulumi:"ipManagedByFortiipam"`
	// Enable/disable IP/MAC binding. Valid values: `enable`, `disable`.
	Ipmac pulumi.StringOutput `pulumi:"ipmac"`
	// Enable/disable the use of this interface as a one-armed sniffer. Valid values: `enable`, `disable`.
	IpsSnifferMode pulumi.StringOutput `pulumi:"ipsSnifferMode"`
	// Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
	Ipunnumbered pulumi.StringOutput `pulumi:"ipunnumbered"`
	// IPv6 of interface. The structure of `ipv6` block is documented below.
	Ipv6 InterfaceIpv6Output `pulumi:"ipv6"`
	// Enable/disable l2 forwarding. Valid values: `enable`, `disable`.
	L2forward pulumi.StringOutput `pulumi:"l2forward"`
	// LACP HA secondary member. Valid values: `enable`, `disable`.
	LacpHaSecondary pulumi.StringOutput `pulumi:"lacpHaSecondary"`
	// LACP HA slave. Valid values: `enable`, `disable`.
	LacpHaSlave pulumi.StringOutput `pulumi:"lacpHaSlave"`
	// LACP mode. Valid values: `static`, `passive`, `active`.
	LacpMode pulumi.StringOutput `pulumi:"lacpMode"`
	// How often the interface sends LACP messages. Valid values: `slow`, `fast`.
	LacpSpeed pulumi.StringOutput `pulumi:"lacpSpeed"`
	// Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
	LcpEchoInterval pulumi.IntOutput `pulumi:"lcpEchoInterval"`
	// Maximum missed LCP echo messages before disconnect.
	LcpMaxEchoFails pulumi.IntOutput `pulumi:"lcpMaxEchoFails"`
	// Number of milliseconds to wait before considering a link is up.
	LinkUpDelay pulumi.IntOutput `pulumi:"linkUpDelay"`
	// LLDP-MED network policy profile.
	LldpNetworkPolicy pulumi.StringOutput `pulumi:"lldpNetworkPolicy"`
	// Enable/disable Link Layer Discovery Protocol (LLDP) reception. Valid values: `enable`, `disable`, `vdom`.
	LldpReception pulumi.StringOutput `pulumi:"lldpReception"`
	// Enable/disable Link Layer Discovery Protocol (LLDP) transmission. Valid values: `enable`, `disable`, `vdom`.
	LldpTransmission pulumi.StringOutput `pulumi:"lldpTransmission"`
	// Change the interface's MAC address.
	Macaddr pulumi.StringOutput `pulumi:"macaddr"`
	// Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managedDevice` block is documented below.
	ManagedDevices InterfaceManagedDeviceArrayOutput `pulumi:"managedDevices"`
	// Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
	ManagedSubnetworkSize pulumi.StringOutput `pulumi:"managedSubnetworkSize"`
	// High Availability in-band management IP address of this interface.
	ManagementIp pulumi.StringOutput `pulumi:"managementIp"`
	// Measured downstream bandwidth (kbps).
	MeasuredDownstreamBandwidth pulumi.IntOutput `pulumi:"measuredDownstreamBandwidth"`
	// Measured upstream bandwidth (kbps).
	MeasuredUpstreamBandwidth pulumi.IntOutput `pulumi:"measuredUpstreamBandwidth"`
	// Select SFP media interface type Valid values: `none`, `gmii`, `sgmii`, `sr`, `lr`, `cr`, `sr4`, `lr4`, `cr4`.
	Mediatype pulumi.StringOutput `pulumi:"mediatype"`
	// Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
	Members InterfaceMemberArrayOutput `pulumi:"members"`
	// Minimum number of aggregated ports that must be up.
	MinLinks pulumi.IntOutput `pulumi:"minLinks"`
	// Action to take when less than the configured minimum number of links are active. Valid values: `operational`, `administrative`.
	MinLinksDown pulumi.StringOutput `pulumi:"minLinksDown"`
	// Addressing mode (static, DHCP, PPPoE). Valid values: `static`, `dhcp`, `pppoe`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Enable monitoring bandwidth on this interface. Valid values: `enable`, `disable`.
	MonitorBandwidth pulumi.StringOutput `pulumi:"monitorBandwidth"`
	// MTU value for this interface.
	Mtu pulumi.IntOutput `pulumi:"mtu"`
	// Enable to set a custom MTU for this interface. Valid values: `enable`, `disable`.
	MtuOverride pulumi.StringOutput `pulumi:"mtuOverride"`
	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable NDISC forwarding. Valid values: `enable`, `disable`.
	Ndiscforward pulumi.StringOutput `pulumi:"ndiscforward"`
	// Enable/disable NETBIOS forwarding. Valid values: `disable`, `enable`.
	NetbiosForward pulumi.StringOutput `pulumi:"netbiosForward"`
	// Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both). Valid values: `disable`, `tx`, `rx`, `both`.
	NetflowSampler pulumi.StringOutput `pulumi:"netflowSampler"`
	// Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
	Outbandwidth pulumi.IntOutput `pulumi:"outbandwidth"`
	// PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
	PadtRetryTimeout pulumi.IntOutput `pulumi:"padtRetryTimeout"`
	// PPPoE account's password.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// PING server status.
	PingServStatus pulumi.IntOutput `pulumi:"pingServStatus"`
	// sFlow polling interval (1 - 255 sec).
	PollingInterval pulumi.IntOutput `pulumi:"pollingInterval"`
	// Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
	PppoeUnnumberedNegotiate pulumi.StringOutput `pulumi:"pppoeUnnumberedNegotiate"`
	// PPTP authentication type. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
	PptpAuthType pulumi.StringOutput `pulumi:"pptpAuthType"`
	// Enable/disable PPTP client. Valid values: `enable`, `disable`.
	PptpClient pulumi.StringOutput `pulumi:"pptpClient"`
	// PPTP password.
	PptpPassword pulumi.StringPtrOutput `pulumi:"pptpPassword"`
	// PPTP server IP address.
	PptpServerIp pulumi.StringOutput `pulumi:"pptpServerIp"`
	// Idle timer in minutes (0 for disabled).
	PptpTimeout pulumi.IntOutput `pulumi:"pptpTimeout"`
	// PPTP user name.
	PptpUser pulumi.StringOutput `pulumi:"pptpUser"`
	// Enable/disable preservation of session route when dirty. Valid values: `enable`, `disable`.
	PreserveSessionRoute pulumi.StringOutput `pulumi:"preserveSessionRoute"`
	// Priority of learned routes.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// Enable/disable fail back to higher priority port once recovered. Valid values: `enable`, `disable`.
	PriorityOverride pulumi.StringOutput `pulumi:"priorityOverride"`
	// Enable/disable proxy captive portal on this interface. Valid values: `enable`, `disable`.
	ProxyCaptivePortal pulumi.StringOutput `pulumi:"proxyCaptivePortal"`
	// IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
	ReachableTime pulumi.IntOutput `pulumi:"reachableTime"`
	// Redundant interface.
	RedundantInterface pulumi.StringOutput `pulumi:"redundantInterface"`
	// Remote IP address of tunnel.
	RemoteIp pulumi.StringOutput `pulumi:"remoteIp"`
	// Replacement message override group.
	ReplacemsgOverrideGroup pulumi.StringOutput `pulumi:"replacemsgOverrideGroup"`
	// RX ring size.
	RingRx pulumi.IntOutput `pulumi:"ringRx"`
	// TX ring size.
	RingTx pulumi.IntOutput `pulumi:"ringTx"`
	// Interface role. Valid values: `lan`, `wan`, `dmz`, `undefined`.
	Role pulumi.StringOutput `pulumi:"role"`
	// Data that NetFlow collects (rx, tx, or both). Valid values: `tx`, `rx`, `both`.
	SampleDirection pulumi.StringOutput `pulumi:"sampleDirection"`
	// sFlow sample rate (10 - 99999).
	SampleRate pulumi.IntOutput `pulumi:"sampleRate"`
	// Enable monitoring or blocking connections to Botnet servers through this interface. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringOutput `pulumi:"scanBotnetConnections"`
	// Enable/disable adding a secondary IP to this interface. Valid values: `enable`, `disable`.
	SecondaryIp pulumi.StringOutput `pulumi:"secondaryIp"`
	// Second IP address of interface. The structure of `secondaryip` block is documented below.
	Secondaryips InterfaceSecondaryipArrayOutput `pulumi:"secondaryips"`
	// Name of security-exempt-list.
	SecurityExemptList pulumi.StringOutput `pulumi:"securityExemptList"`
	// URL of external authentication logout server.
	SecurityExternalLogout pulumi.StringOutput `pulumi:"securityExternalLogout"`
	// URL of external authentication web server.
	SecurityExternalWeb pulumi.StringOutput `pulumi:"securityExternalWeb"`
	// User groups that can authenticate with the captive portal. The structure of `securityGroups` block is documented below.
	SecurityGroups InterfaceSecurityGroupArrayOutput `pulumi:"securityGroups"`
	// Enable/disable MAC authentication bypass. Valid values: `mac-auth-only`, `enable`, `disable`.
	SecurityMacAuthBypass pulumi.StringOutput `pulumi:"securityMacAuthBypass"`
	// Turn on captive portal authentication for this interface. Valid values: `none`, `captive-portal`, `802.1X`.
	SecurityMode pulumi.StringOutput `pulumi:"securityMode"`
	// URL redirection after disclaimer/authentication.
	SecurityRedirectUrl pulumi.StringOutput `pulumi:"securityRedirectUrl"`
	// PPPoE service name.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Enable/disable sFlow on this interface. Valid values: `enable`, `disable`.
	SflowSampler pulumi.StringOutput `pulumi:"sflowSampler"`
	// Permanent SNMP Index of the interface.
	SnmpIndex pulumi.IntOutput `pulumi:"snmpIndex"`
	// Interface speed. The default setting and the options available depend on the interface hardware.
	Speed pulumi.StringOutput `pulumi:"speed"`
	// Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
	SpilloverThreshold pulumi.IntOutput `pulumi:"spilloverThreshold"`
	// Enable/disable source IP check. Valid values: `enable`, `disable`.
	SrcCheck pulumi.StringOutput `pulumi:"srcCheck"`
	// Bring the interface up or shut the interface down. Valid values: `up`, `down`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Enable/disable STP. Valid values: `disable`, `enable`.
	Stp pulumi.StringOutput `pulumi:"stp"`
	// Control STP behaviour on HA secondary. Valid values: `disable`, `enable`, `priority-adjust`.
	StpHaSecondary pulumi.StringOutput `pulumi:"stpHaSecondary"`
	// Enable/disable STP forwarding. Valid values: `enable`, `disable`.
	Stpforward pulumi.StringOutput `pulumi:"stpforward"`
	// Configure STP forwarding mode. Valid values: `rpl-all-ext-id`, `rpl-bridge-ext-id`, `rpl-nothing`.
	StpforwardMode pulumi.StringOutput `pulumi:"stpforwardMode"`
	// Enable to always send packets from this interface to a destination MAC address. Valid values: `enable`, `disable`.
	Subst pulumi.StringOutput `pulumi:"subst"`
	// Destination MAC address that all packets are sent to from this interface.
	SubstituteDstMac pulumi.StringOutput `pulumi:"substituteDstMac"`
	// Initial create for switch-controller VLANs.
	SwcFirstCreate pulumi.IntOutput `pulumi:"swcFirstCreate"`
	// Creation status for switch-controller VLANs.
	SwcVlan pulumi.IntOutput `pulumi:"swcVlan"`
	// Contained in switch.
	Switch pulumi.StringOutput `pulumi:"switch"`
	// Block FortiSwitch port-to-port traffic. Valid values: `enable`, `disable`.
	SwitchControllerAccessVlan pulumi.StringOutput `pulumi:"switchControllerAccessVlan"`
	// Enable/disable FortiSwitch ARP inspection. Valid values: `enable`, `disable`.
	SwitchControllerArpInspection pulumi.StringOutput `pulumi:"switchControllerArpInspection"`
	// Switch controller DHCP snooping. Valid values: `enable`, `disable`.
	SwitchControllerDhcpSnooping pulumi.StringOutput `pulumi:"switchControllerDhcpSnooping"`
	// Switch controller DHCP snooping option82. Valid values: `enable`, `disable`.
	SwitchControllerDhcpSnoopingOption82 pulumi.StringOutput `pulumi:"switchControllerDhcpSnoopingOption82"`
	// Switch controller DHCP snooping verify MAC. Valid values: `enable`, `disable`.
	SwitchControllerDhcpSnoopingVerifyMac pulumi.StringOutput `pulumi:"switchControllerDhcpSnoopingVerifyMac"`
	// Integrated FortiLink settings for managed FortiSwitch.
	SwitchControllerDynamic pulumi.StringOutput `pulumi:"switchControllerDynamic"`
	// Interface's purpose when assigning traffic (read only).
	SwitchControllerFeature pulumi.StringOutput `pulumi:"switchControllerFeature"`
	// Switch controller IGMP snooping. Valid values: `enable`, `disable`.
	SwitchControllerIgmpSnooping pulumi.StringOutput `pulumi:"switchControllerIgmpSnooping"`
	// Switch controller IGMP snooping fast-leave. Valid values: `enable`, `disable`.
	SwitchControllerIgmpSnoopingFastLeave pulumi.StringOutput `pulumi:"switchControllerIgmpSnoopingFastLeave"`
	// Switch controller IGMP snooping proxy. Valid values: `enable`, `disable`.
	SwitchControllerIgmpSnoopingProxy pulumi.StringOutput `pulumi:"switchControllerIgmpSnoopingProxy"`
	// Enable/disable managed FortiSwitch IoT scanning. Valid values: `enable`, `disable`.
	SwitchControllerIotScanning pulumi.StringOutput `pulumi:"switchControllerIotScanning"`
	// Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
	SwitchControllerLearningLimit pulumi.IntOutput `pulumi:"switchControllerLearningLimit"`
	// VLAN to use for FortiLink management purposes.
	SwitchControllerMgmtVlan pulumi.IntOutput `pulumi:"switchControllerMgmtVlan"`
	// Integrated NAC settings for managed FortiSwitch.
	SwitchControllerNac pulumi.StringOutput `pulumi:"switchControllerNac"`
	// NetFlow collection and processing. Valid values: `disable`, `enable`.
	SwitchControllerNetflowCollect pulumi.StringOutput `pulumi:"switchControllerNetflowCollect"`
	// Enable/disable managed FortiSwitch routing offload. Valid values: `enable`, `disable`.
	SwitchControllerOffload pulumi.StringOutput `pulumi:"switchControllerOffload"`
	// Enable/disable managed FortiSwitch routing offload gateway. Valid values: `enable`, `disable`.
	SwitchControllerOffloadGw pulumi.StringOutput `pulumi:"switchControllerOffloadGw"`
	// IP for routing offload on FortiSwitch.
	SwitchControllerOffloadIp pulumi.StringOutput `pulumi:"switchControllerOffloadIp"`
	// Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface. Valid values: `disable`, `enable`.
	SwitchControllerRspanMode pulumi.StringOutput `pulumi:"switchControllerRspanMode"`
	// Source IP address used in FortiLink over L3 connections. Valid values: `outbound`, `fixed`.
	SwitchControllerSourceIp pulumi.StringOutput `pulumi:"switchControllerSourceIp"`
	// Switch controller traffic policy for the VLAN.
	SwitchControllerTrafficPolicy pulumi.StringOutput `pulumi:"switchControllerTrafficPolicy"`
	// Define a system ID for the aggregate interface.
	SystemId pulumi.StringOutput `pulumi:"systemId"`
	// Method in which system ID is generated. Valid values: `auto`, `user`.
	SystemIdType pulumi.StringOutput `pulumi:"systemIdType"`
	// Config object tagging. The structure of `tagging` block is documented below.
	Taggings InterfaceTaggingArrayOutput `pulumi:"taggings"`
	// TCP maximum segment size. 0 means do not change segment size.
	TcpMss pulumi.IntOutput `pulumi:"tcpMss"`
	// Enable/disable VLAN trunk. Valid values: `enable`, `disable`.
	Trunk pulumi.StringOutput `pulumi:"trunk"`
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp1 pulumi.StringOutput `pulumi:"trustIp1"`
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp2 pulumi.StringOutput `pulumi:"trustIp2"`
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp3 pulumi.StringOutput `pulumi:"trustIp3"`
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp61 pulumi.StringOutput `pulumi:"trustIp61"`
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp62 pulumi.StringOutput `pulumi:"trustIp62"`
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp63 pulumi.StringOutput `pulumi:"trustIp63"`
	// Interface type.
	Type pulumi.StringOutput `pulumi:"type"`
	// Username of the PPPoE account, provided by your ISP.
	Username pulumi.StringOutput `pulumi:"username"`
	// Interface is in this virtual domain (VDOM).
	Vdom pulumi.StringOutput `pulumi:"vdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Switch control interface VLAN ID.
	Vindex pulumi.IntOutput `pulumi:"vindex"`
	// Ethernet protocol of VLAN. Valid values: `8021q`, `8021ad`.
	VlanProtocol pulumi.StringOutput `pulumi:"vlanProtocol"`
	// Enable/disable traffic forwarding between VLANs on this interface. Valid values: `enable`, `disable`.
	Vlanforward pulumi.StringOutput `pulumi:"vlanforward"`
	// VLAN ID (1 - 4094).
	Vlanid pulumi.IntOutput `pulumi:"vlanid"`
	// Virtual Routing Forwarding ID.
	Vrf pulumi.IntOutput `pulumi:"vrf"`
	// Enable/disable use of virtual MAC for VRRP. Valid values: `enable`, `disable`.
	VrrpVirtualMac pulumi.StringOutput `pulumi:"vrrpVirtualMac"`
	// VRRP configuration. The structure of `vrrp` block is documented below.
	Vrrps InterfaceVrrpArrayOutput `pulumi:"vrrps"`
	// Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers. Valid values: `enable`, `disable`.
	Wccp pulumi.StringOutput `pulumi:"wccp"`
	// Default weight for static routes (if route has no weight configured).
	Weight pulumi.IntOutput `pulumi:"weight"`
	// WINS server IP.
	WinsIp pulumi.StringOutput `pulumi:"winsIp"`
}

// NewInterface registers a new resource with the given unique name, arguments, and options.
func NewInterface(ctx *pulumi.Context,
	name string, args *InterfaceArgs, opts ...pulumi.ResourceOption) (*Interface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Vdom == nil {
		return nil, errors.New("invalid value for required argument 'Vdom'")
	}
	if args.EapPassword != nil {
		args.EapPassword = pulumi.ToSecret(args.EapPassword).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.PptpPassword != nil {
		args.PptpPassword = pulumi.ToSecret(args.PptpPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"eapPassword",
		"password",
		"pptpPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Interface
	err := ctx.RegisterResource("fortios:system/interface:Interface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterface gets an existing Interface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterfaceState, opts ...pulumi.ResourceOption) (*Interface, error) {
	var resource Interface
	err := ctx.ReadResource("fortios:system/interface:Interface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Interface resources.
type interfaceState struct {
	// PPPoE server name.
	AcName *string `pulumi:"acName"`
	// Aggregate interface.
	Aggregate *string `pulumi:"aggregate"`
	// Type of aggregation. Valid values: `physical`, `vxlan`.
	AggregateType *string `pulumi:"aggregateType"`
	// Frame distribution algorithm.
	Algorithm *string `pulumi:"algorithm"`
	// Alias will be displayed with the interface name to make it easier to distinguish.
	Alias *string `pulumi:"alias"`
	// Permitted types of management access to this interface.
	Allowaccess *string `pulumi:"allowaccess"`
	// Enable/disable automatic registration of unknown FortiAP devices. Valid values: `enable`, `disable`.
	ApDiscover *string `pulumi:"apDiscover"`
	// Enable/disable ARP forwarding. Valid values: `enable`, `disable`.
	Arpforward *string `pulumi:"arpforward"`
	// HTTPS server certificate.
	AuthCert *string `pulumi:"authCert"`
	// Address of captive portal.
	AuthPortalAddr *string `pulumi:"authPortalAddr"`
	// PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
	AuthType *string `pulumi:"authType"`
	// Enable/disable automatic authorization of dedicated Fortinet extension device on this interface. Valid values: `enable`, `disable`.
	AutoAuthExtensionDevice *string `pulumi:"autoAuthExtensionDevice"`
	// Indicates whether the interface is automatically created by FortiGate, for example, created during the VPN creation process. If it is, set it to "auto", else keep it empty.
	Autogenerated *string `pulumi:"autogenerated"`
	// Bandwidth measure time
	BandwidthMeasureTime *int `pulumi:"bandwidthMeasureTime"`
	// Bidirectional Forwarding Detection (BFD) settings. Valid values: `global`, `enable`, `disable`.
	Bfd *string `pulumi:"bfd"`
	// BFD desired minimal transmit interval.
	BfdDesiredMinTx *int `pulumi:"bfdDesiredMinTx"`
	// BFD detection multiplier.
	BfdDetectMult *int `pulumi:"bfdDetectMult"`
	// BFD required minimal receive interval.
	BfdRequiredMinRx *int `pulumi:"bfdRequiredMinRx"`
	// Enable/disable broadcasting FortiClient discovery messages. Valid values: `enable`, `disable`.
	BroadcastForticlientDiscovery *string `pulumi:"broadcastForticlientDiscovery"`
	// Enable/disable broadcast forwarding. Valid values: `enable`, `disable`.
	BroadcastForward *string `pulumi:"broadcastForward"`
	// Enable/disable captive portal.
	CaptivePortal *int `pulumi:"captivePortal"`
	// CLI connection status.
	CliConnStatus *int `pulumi:"cliConnStatus"`
	// DHCP client options. The structure of `clientOptions` block is documented below.
	ClientOptions []InterfaceClientOption `pulumi:"clientOptions"`
	// Color of icon on the GUI.
	Color *int `pulumi:"color"`
	// Configure interface for single purpose. Valid values: `none`, `management`.
	DedicatedTo *string `pulumi:"dedicatedTo"`
	// default purdue level of device detected on this interface. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
	DefaultPurdueLevel *string `pulumi:"defaultPurdueLevel"`
	// Enable to get the gateway IP from the DHCP or PPPoE server. Valid values: `enable`, `disable`.
	Defaultgw *string `pulumi:"defaultgw"`
	// Description.
	Description *string `pulumi:"description"`
	// MTU of detected peer (0 - 4294967295).
	DetectedPeerMtu *int `pulumi:"detectedPeerMtu"`
	// Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
	Detectprotocol *string `pulumi:"detectprotocol"`
	// Gateway's ping server for this IP.
	Detectserver *string `pulumi:"detectserver"`
	// Device access list.
	DeviceAccessList *string `pulumi:"deviceAccessList"`
	// Enable/disable passively gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
	DeviceIdentification *string `pulumi:"deviceIdentification"`
	// Enable/disable active gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
	DeviceIdentificationActiveScan *string `pulumi:"deviceIdentificationActiveScan"`
	// Enable/disable inclusion of devices detected on this interface in network vulnerability scans. Valid values: `disable`, `enable`.
	DeviceNetscan *string `pulumi:"deviceNetscan"`
	// Enable/disable passive gathering of user identity information about users on this interface. Valid values: `enable`, `disable`.
	DeviceUserIdentification *string `pulumi:"deviceUserIdentification"`
	// Device Index.
	Devindex *int `pulumi:"devindex"`
	// Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable). Valid values: `disable`, `enable`.
	DhcpBroadcastFlag *string `pulumi:"dhcpBroadcastFlag"`
	// Enable/disable addition of classless static routes retrieved from DHCP server. Valid values: `enable`, `disable`.
	DhcpClasslessRouteAddition *string `pulumi:"dhcpClasslessRouteAddition"`
	// DHCP client identifier.
	DhcpClientIdentifier *string `pulumi:"dhcpClientIdentifier"`
	// Enable/disable DHCP relay agent option. Valid values: `enable`, `disable`.
	DhcpRelayAgentOption *string `pulumi:"dhcpRelayAgentOption"`
	// DHCP relay circuit ID.
	DhcpRelayCircuitId *string `pulumi:"dhcpRelayCircuitId"`
	// Specify outgoing interface to reach server.
	DhcpRelayInterface *string `pulumi:"dhcpRelayInterface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	DhcpRelayInterfaceSelectMethod *string `pulumi:"dhcpRelayInterfaceSelectMethod"`
	// DHCP relay IP address.
	DhcpRelayIp *string `pulumi:"dhcpRelayIp"`
	// DHCP relay link selection.
	DhcpRelayLinkSelection *string `pulumi:"dhcpRelayLinkSelection"`
	// Enable/disable sending DHCP request to all servers. Valid values: `disable`, `enable`.
	DhcpRelayRequestAllServer *string `pulumi:"dhcpRelayRequestAllServer"`
	// Enable/disable allowing this interface to act as a DHCP relay. Valid values: `disable`, `enable`.
	DhcpRelayService *string `pulumi:"dhcpRelayService"`
	// IP address used by the DHCP relay as its source IP.
	DhcpRelaySourceIp *string `pulumi:"dhcpRelaySourceIp"`
	// DHCP relay type (regular or IPsec). Valid values: `regular`, `ipsec`.
	DhcpRelayType *string `pulumi:"dhcpRelayType"`
	// DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
	DhcpRenewTime *int `pulumi:"dhcpRenewTime"`
	// Enable/disable DHCP smart relay. Valid values: `disable`, `enable`.
	DhcpSmartRelay *string `pulumi:"dhcpSmartRelay"`
	// Configure DHCP server access list. The structure of `dhcpSnoopingServerList` block is documented below.
	DhcpSnoopingServerLists []InterfaceDhcpSnoopingServerList `pulumi:"dhcpSnoopingServerLists"`
	// Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
	DiscRetryTimeout *int `pulumi:"discRetryTimeout"`
	// Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
	DisconnectThreshold *int `pulumi:"disconnectThreshold"`
	// Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
	Distance *int `pulumi:"distance"`
	// Enable/disable use DNS acquired by DHCP or PPPoE. Valid values: `enable`, `disable`.
	DnsServerOverride *string `pulumi:"dnsServerOverride"`
	// DNS transport protocols. Valid values: `cleartext`, `dot`, `doh`.
	DnsServerProtocol *string `pulumi:"dnsServerProtocol"`
	// Enable/disable drop fragment packets. Valid values: `enable`, `disable`.
	DropFragment *string `pulumi:"dropFragment"`
	// Enable/disable drop overlapped fragment packets. Valid values: `enable`, `disable`.
	DropOverlappedFragment *string `pulumi:"dropOverlappedFragment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// EAP CA certificate name.
	EapCaCert *string `pulumi:"eapCaCert"`
	// EAP identity.
	EapIdentity *string `pulumi:"eapIdentity"`
	// EAP method. Valid values: `tls`, `peap`.
	EapMethod *string `pulumi:"eapMethod"`
	// EAP password.
	EapPassword *string `pulumi:"eapPassword"`
	// Enable/disable EAP-Supplicant. Valid values: `enable`, `disable`.
	EapSupplicant *string `pulumi:"eapSupplicant"`
	// EAP user certificate name.
	EapUserCert *string `pulumi:"eapUserCert"`
	// Outgoing traffic shaping profile.
	EgressShapingProfile *string `pulumi:"egressShapingProfile"`
	// Enable/disable endpoint compliance enforcement. Valid values: `enable`, `disable`.
	EndpointCompliance *string `pulumi:"endpointCompliance"`
	// Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
	EstimatedDownstreamBandwidth *int `pulumi:"estimatedDownstreamBandwidth"`
	// Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
	EstimatedUpstreamBandwidth *int `pulumi:"estimatedUpstreamBandwidth"`
	// Enable/disable the explicit FTP proxy on this interface. Valid values: `enable`, `disable`.
	ExplicitFtpProxy *string `pulumi:"explicitFtpProxy"`
	// Enable/disable the explicit web proxy on this interface. Valid values: `enable`, `disable`.
	ExplicitWebProxy *string `pulumi:"explicitWebProxy"`
	// Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet). Valid values: `enable`, `disable`.
	External *string `pulumi:"external"`
	// Action on extender when interface fail . Valid values: `soft-restart`, `hard-restart`, `reboot`.
	FailActionOnExtender *string `pulumi:"failActionOnExtender"`
	// Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `failAlertInterfaces` block is documented below.
	FailAlertInterfaces []InterfaceFailAlertInterface `pulumi:"failAlertInterfaces"`
	// Select link-failed-signal or link-down method to alert about a failed link. Valid values: `link-failed-signal`, `link-down`.
	FailAlertMethod *string `pulumi:"failAlertMethod"`
	// Enable/disable fail detection features for this interface. Valid values: `enable`, `disable`.
	FailDetect *string `pulumi:"failDetect"`
	// Options for detecting that this interface has failed. Valid values: `detectserver`, `link-down`.
	FailDetectOption *string `pulumi:"failDetectOption"`
	// Enable/disable FortiHeartBeat (FortiTelemetry on GUI). Valid values: `enable`, `disable`.
	Fortiheartbeat *string `pulumi:"fortiheartbeat"`
	// Enable FortiLink to dedicate this interface to manage other Fortinet devices. Valid values: `enable`, `disable`.
	Fortilink *string `pulumi:"fortilink"`
	// fortilink split interface backup link.
	FortilinkBackupLink *int `pulumi:"fortilinkBackupLink"`
	// Protocol for FortiGate neighbor discovery. Valid values: `lldp`, `fortilink`.
	FortilinkNeighborDetect *string `pulumi:"fortilinkNeighborDetect"`
	// Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy. Valid values: `enable`, `disable`.
	FortilinkSplitInterface *string `pulumi:"fortilinkSplitInterface"`
	// Enable/disable FortiLink switch-stacking on this interface. Valid values: `enable`, `disable`.
	FortilinkStacking *string `pulumi:"fortilinkStacking"`
	// Transparent mode forward domain.
	ForwardDomain *int `pulumi:"forwardDomain"`
	// Configure forward error correction (FEC). Valid values: `none`, `disable`, `cl91-rs-fec`, `cl74-fc-fec`.
	ForwardErrorCorrection *string `pulumi:"forwardErrorCorrection"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
	Gwdetect *string `pulumi:"gwdetect"`
	// HA election priority for the PING server.
	HaPriority *int `pulumi:"haPriority"`
	// Enable/disable ICMP accept redirect. Valid values: `enable`, `disable`.
	IcmpAcceptRedirect *string `pulumi:"icmpAcceptRedirect"`
	// Enable/disable ICMP send redirect. Valid values: `enable`, `disable`.
	IcmpSendRedirect *string `pulumi:"icmpSendRedirect"`
	// Enable/disable authentication for this interface. Valid values: `enable`, `disable`.
	IdentAccept *string `pulumi:"identAccept"`
	// PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// Configure IKE authentication SAML server.
	IkeSamlServer *string `pulumi:"ikeSamlServer"`
	// Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
	Inbandwidth *int `pulumi:"inbandwidth"`
	// Incoming traffic shaping profile.
	IngressShapingProfile *string `pulumi:"ingressShapingProfile"`
	// Ingress Spillover threshold (0 - 16776000 kbps).
	IngressSpilloverThreshold *int `pulumi:"ingressSpilloverThreshold"`
	// Interface name.
	Interface *string `pulumi:"interface"`
	// Implicitly created.
	Internal *int `pulumi:"internal"`
	// Interface IPv4 address and subnet mask, syntax: X.X.X.X/24.
	Ip *string `pulumi:"ip"`
	// Enable/disable automatic IP address assignment of this interface by FortiIPAM.
	IpManagedByFortiipam *string `pulumi:"ipManagedByFortiipam"`
	// Enable/disable IP/MAC binding. Valid values: `enable`, `disable`.
	Ipmac *string `pulumi:"ipmac"`
	// Enable/disable the use of this interface as a one-armed sniffer. Valid values: `enable`, `disable`.
	IpsSnifferMode *string `pulumi:"ipsSnifferMode"`
	// Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
	Ipunnumbered *string `pulumi:"ipunnumbered"`
	// IPv6 of interface. The structure of `ipv6` block is documented below.
	Ipv6 *InterfaceIpv6 `pulumi:"ipv6"`
	// Enable/disable l2 forwarding. Valid values: `enable`, `disable`.
	L2forward *string `pulumi:"l2forward"`
	// LACP HA secondary member. Valid values: `enable`, `disable`.
	LacpHaSecondary *string `pulumi:"lacpHaSecondary"`
	// LACP HA slave. Valid values: `enable`, `disable`.
	LacpHaSlave *string `pulumi:"lacpHaSlave"`
	// LACP mode. Valid values: `static`, `passive`, `active`.
	LacpMode *string `pulumi:"lacpMode"`
	// How often the interface sends LACP messages. Valid values: `slow`, `fast`.
	LacpSpeed *string `pulumi:"lacpSpeed"`
	// Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
	LcpEchoInterval *int `pulumi:"lcpEchoInterval"`
	// Maximum missed LCP echo messages before disconnect.
	LcpMaxEchoFails *int `pulumi:"lcpMaxEchoFails"`
	// Number of milliseconds to wait before considering a link is up.
	LinkUpDelay *int `pulumi:"linkUpDelay"`
	// LLDP-MED network policy profile.
	LldpNetworkPolicy *string `pulumi:"lldpNetworkPolicy"`
	// Enable/disable Link Layer Discovery Protocol (LLDP) reception. Valid values: `enable`, `disable`, `vdom`.
	LldpReception *string `pulumi:"lldpReception"`
	// Enable/disable Link Layer Discovery Protocol (LLDP) transmission. Valid values: `enable`, `disable`, `vdom`.
	LldpTransmission *string `pulumi:"lldpTransmission"`
	// Change the interface's MAC address.
	Macaddr *string `pulumi:"macaddr"`
	// Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managedDevice` block is documented below.
	ManagedDevices []InterfaceManagedDevice `pulumi:"managedDevices"`
	// Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
	ManagedSubnetworkSize *string `pulumi:"managedSubnetworkSize"`
	// High Availability in-band management IP address of this interface.
	ManagementIp *string `pulumi:"managementIp"`
	// Measured downstream bandwidth (kbps).
	MeasuredDownstreamBandwidth *int `pulumi:"measuredDownstreamBandwidth"`
	// Measured upstream bandwidth (kbps).
	MeasuredUpstreamBandwidth *int `pulumi:"measuredUpstreamBandwidth"`
	// Select SFP media interface type Valid values: `none`, `gmii`, `sgmii`, `sr`, `lr`, `cr`, `sr4`, `lr4`, `cr4`.
	Mediatype *string `pulumi:"mediatype"`
	// Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
	Members []InterfaceMember `pulumi:"members"`
	// Minimum number of aggregated ports that must be up.
	MinLinks *int `pulumi:"minLinks"`
	// Action to take when less than the configured minimum number of links are active. Valid values: `operational`, `administrative`.
	MinLinksDown *string `pulumi:"minLinksDown"`
	// Addressing mode (static, DHCP, PPPoE). Valid values: `static`, `dhcp`, `pppoe`.
	Mode *string `pulumi:"mode"`
	// Enable monitoring bandwidth on this interface. Valid values: `enable`, `disable`.
	MonitorBandwidth *string `pulumi:"monitorBandwidth"`
	// MTU value for this interface.
	Mtu *int `pulumi:"mtu"`
	// Enable to set a custom MTU for this interface. Valid values: `enable`, `disable`.
	MtuOverride *string `pulumi:"mtuOverride"`
	// Name.
	Name *string `pulumi:"name"`
	// Enable/disable NDISC forwarding. Valid values: `enable`, `disable`.
	Ndiscforward *string `pulumi:"ndiscforward"`
	// Enable/disable NETBIOS forwarding. Valid values: `disable`, `enable`.
	NetbiosForward *string `pulumi:"netbiosForward"`
	// Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both). Valid values: `disable`, `tx`, `rx`, `both`.
	NetflowSampler *string `pulumi:"netflowSampler"`
	// Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
	Outbandwidth *int `pulumi:"outbandwidth"`
	// PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
	PadtRetryTimeout *int `pulumi:"padtRetryTimeout"`
	// PPPoE account's password.
	Password *string `pulumi:"password"`
	// PING server status.
	PingServStatus *int `pulumi:"pingServStatus"`
	// sFlow polling interval (1 - 255 sec).
	PollingInterval *int `pulumi:"pollingInterval"`
	// Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
	PppoeUnnumberedNegotiate *string `pulumi:"pppoeUnnumberedNegotiate"`
	// PPTP authentication type. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
	PptpAuthType *string `pulumi:"pptpAuthType"`
	// Enable/disable PPTP client. Valid values: `enable`, `disable`.
	PptpClient *string `pulumi:"pptpClient"`
	// PPTP password.
	PptpPassword *string `pulumi:"pptpPassword"`
	// PPTP server IP address.
	PptpServerIp *string `pulumi:"pptpServerIp"`
	// Idle timer in minutes (0 for disabled).
	PptpTimeout *int `pulumi:"pptpTimeout"`
	// PPTP user name.
	PptpUser *string `pulumi:"pptpUser"`
	// Enable/disable preservation of session route when dirty. Valid values: `enable`, `disable`.
	PreserveSessionRoute *string `pulumi:"preserveSessionRoute"`
	// Priority of learned routes.
	Priority *int `pulumi:"priority"`
	// Enable/disable fail back to higher priority port once recovered. Valid values: `enable`, `disable`.
	PriorityOverride *string `pulumi:"priorityOverride"`
	// Enable/disable proxy captive portal on this interface. Valid values: `enable`, `disable`.
	ProxyCaptivePortal *string `pulumi:"proxyCaptivePortal"`
	// IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
	ReachableTime *int `pulumi:"reachableTime"`
	// Redundant interface.
	RedundantInterface *string `pulumi:"redundantInterface"`
	// Remote IP address of tunnel.
	RemoteIp *string `pulumi:"remoteIp"`
	// Replacement message override group.
	ReplacemsgOverrideGroup *string `pulumi:"replacemsgOverrideGroup"`
	// RX ring size.
	RingRx *int `pulumi:"ringRx"`
	// TX ring size.
	RingTx *int `pulumi:"ringTx"`
	// Interface role. Valid values: `lan`, `wan`, `dmz`, `undefined`.
	Role *string `pulumi:"role"`
	// Data that NetFlow collects (rx, tx, or both). Valid values: `tx`, `rx`, `both`.
	SampleDirection *string `pulumi:"sampleDirection"`
	// sFlow sample rate (10 - 99999).
	SampleRate *int `pulumi:"sampleRate"`
	// Enable monitoring or blocking connections to Botnet servers through this interface. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Enable/disable adding a secondary IP to this interface. Valid values: `enable`, `disable`.
	SecondaryIp *string `pulumi:"secondaryIp"`
	// Second IP address of interface. The structure of `secondaryip` block is documented below.
	Secondaryips []InterfaceSecondaryip `pulumi:"secondaryips"`
	// Name of security-exempt-list.
	SecurityExemptList *string `pulumi:"securityExemptList"`
	// URL of external authentication logout server.
	SecurityExternalLogout *string `pulumi:"securityExternalLogout"`
	// URL of external authentication web server.
	SecurityExternalWeb *string `pulumi:"securityExternalWeb"`
	// User groups that can authenticate with the captive portal. The structure of `securityGroups` block is documented below.
	SecurityGroups []InterfaceSecurityGroup `pulumi:"securityGroups"`
	// Enable/disable MAC authentication bypass. Valid values: `mac-auth-only`, `enable`, `disable`.
	SecurityMacAuthBypass *string `pulumi:"securityMacAuthBypass"`
	// Turn on captive portal authentication for this interface. Valid values: `none`, `captive-portal`, `802.1X`.
	SecurityMode *string `pulumi:"securityMode"`
	// URL redirection after disclaimer/authentication.
	SecurityRedirectUrl *string `pulumi:"securityRedirectUrl"`
	// PPPoE service name.
	ServiceName *string `pulumi:"serviceName"`
	// Enable/disable sFlow on this interface. Valid values: `enable`, `disable`.
	SflowSampler *string `pulumi:"sflowSampler"`
	// Permanent SNMP Index of the interface.
	SnmpIndex *int `pulumi:"snmpIndex"`
	// Interface speed. The default setting and the options available depend on the interface hardware.
	Speed *string `pulumi:"speed"`
	// Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
	SpilloverThreshold *int `pulumi:"spilloverThreshold"`
	// Enable/disable source IP check. Valid values: `enable`, `disable`.
	SrcCheck *string `pulumi:"srcCheck"`
	// Bring the interface up or shut the interface down. Valid values: `up`, `down`.
	Status *string `pulumi:"status"`
	// Enable/disable STP. Valid values: `disable`, `enable`.
	Stp *string `pulumi:"stp"`
	// Control STP behaviour on HA secondary. Valid values: `disable`, `enable`, `priority-adjust`.
	StpHaSecondary *string `pulumi:"stpHaSecondary"`
	// Enable/disable STP forwarding. Valid values: `enable`, `disable`.
	Stpforward *string `pulumi:"stpforward"`
	// Configure STP forwarding mode. Valid values: `rpl-all-ext-id`, `rpl-bridge-ext-id`, `rpl-nothing`.
	StpforwardMode *string `pulumi:"stpforwardMode"`
	// Enable to always send packets from this interface to a destination MAC address. Valid values: `enable`, `disable`.
	Subst *string `pulumi:"subst"`
	// Destination MAC address that all packets are sent to from this interface.
	SubstituteDstMac *string `pulumi:"substituteDstMac"`
	// Initial create for switch-controller VLANs.
	SwcFirstCreate *int `pulumi:"swcFirstCreate"`
	// Creation status for switch-controller VLANs.
	SwcVlan *int `pulumi:"swcVlan"`
	// Contained in switch.
	Switch *string `pulumi:"switch"`
	// Block FortiSwitch port-to-port traffic. Valid values: `enable`, `disable`.
	SwitchControllerAccessVlan *string `pulumi:"switchControllerAccessVlan"`
	// Enable/disable FortiSwitch ARP inspection. Valid values: `enable`, `disable`.
	SwitchControllerArpInspection *string `pulumi:"switchControllerArpInspection"`
	// Switch controller DHCP snooping. Valid values: `enable`, `disable`.
	SwitchControllerDhcpSnooping *string `pulumi:"switchControllerDhcpSnooping"`
	// Switch controller DHCP snooping option82. Valid values: `enable`, `disable`.
	SwitchControllerDhcpSnoopingOption82 *string `pulumi:"switchControllerDhcpSnoopingOption82"`
	// Switch controller DHCP snooping verify MAC. Valid values: `enable`, `disable`.
	SwitchControllerDhcpSnoopingVerifyMac *string `pulumi:"switchControllerDhcpSnoopingVerifyMac"`
	// Integrated FortiLink settings for managed FortiSwitch.
	SwitchControllerDynamic *string `pulumi:"switchControllerDynamic"`
	// Interface's purpose when assigning traffic (read only).
	SwitchControllerFeature *string `pulumi:"switchControllerFeature"`
	// Switch controller IGMP snooping. Valid values: `enable`, `disable`.
	SwitchControllerIgmpSnooping *string `pulumi:"switchControllerIgmpSnooping"`
	// Switch controller IGMP snooping fast-leave. Valid values: `enable`, `disable`.
	SwitchControllerIgmpSnoopingFastLeave *string `pulumi:"switchControllerIgmpSnoopingFastLeave"`
	// Switch controller IGMP snooping proxy. Valid values: `enable`, `disable`.
	SwitchControllerIgmpSnoopingProxy *string `pulumi:"switchControllerIgmpSnoopingProxy"`
	// Enable/disable managed FortiSwitch IoT scanning. Valid values: `enable`, `disable`.
	SwitchControllerIotScanning *string `pulumi:"switchControllerIotScanning"`
	// Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
	SwitchControllerLearningLimit *int `pulumi:"switchControllerLearningLimit"`
	// VLAN to use for FortiLink management purposes.
	SwitchControllerMgmtVlan *int `pulumi:"switchControllerMgmtVlan"`
	// Integrated NAC settings for managed FortiSwitch.
	SwitchControllerNac *string `pulumi:"switchControllerNac"`
	// NetFlow collection and processing. Valid values: `disable`, `enable`.
	SwitchControllerNetflowCollect *string `pulumi:"switchControllerNetflowCollect"`
	// Enable/disable managed FortiSwitch routing offload. Valid values: `enable`, `disable`.
	SwitchControllerOffload *string `pulumi:"switchControllerOffload"`
	// Enable/disable managed FortiSwitch routing offload gateway. Valid values: `enable`, `disable`.
	SwitchControllerOffloadGw *string `pulumi:"switchControllerOffloadGw"`
	// IP for routing offload on FortiSwitch.
	SwitchControllerOffloadIp *string `pulumi:"switchControllerOffloadIp"`
	// Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface. Valid values: `disable`, `enable`.
	SwitchControllerRspanMode *string `pulumi:"switchControllerRspanMode"`
	// Source IP address used in FortiLink over L3 connections. Valid values: `outbound`, `fixed`.
	SwitchControllerSourceIp *string `pulumi:"switchControllerSourceIp"`
	// Switch controller traffic policy for the VLAN.
	SwitchControllerTrafficPolicy *string `pulumi:"switchControllerTrafficPolicy"`
	// Define a system ID for the aggregate interface.
	SystemId *string `pulumi:"systemId"`
	// Method in which system ID is generated. Valid values: `auto`, `user`.
	SystemIdType *string `pulumi:"systemIdType"`
	// Config object tagging. The structure of `tagging` block is documented below.
	Taggings []InterfaceTagging `pulumi:"taggings"`
	// TCP maximum segment size. 0 means do not change segment size.
	TcpMss *int `pulumi:"tcpMss"`
	// Enable/disable VLAN trunk. Valid values: `enable`, `disable`.
	Trunk *string `pulumi:"trunk"`
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp1 *string `pulumi:"trustIp1"`
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp2 *string `pulumi:"trustIp2"`
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp3 *string `pulumi:"trustIp3"`
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp61 *string `pulumi:"trustIp61"`
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp62 *string `pulumi:"trustIp62"`
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp63 *string `pulumi:"trustIp63"`
	// Interface type.
	Type *string `pulumi:"type"`
	// Username of the PPPoE account, provided by your ISP.
	Username *string `pulumi:"username"`
	// Interface is in this virtual domain (VDOM).
	Vdom *string `pulumi:"vdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Switch control interface VLAN ID.
	Vindex *int `pulumi:"vindex"`
	// Ethernet protocol of VLAN. Valid values: `8021q`, `8021ad`.
	VlanProtocol *string `pulumi:"vlanProtocol"`
	// Enable/disable traffic forwarding between VLANs on this interface. Valid values: `enable`, `disable`.
	Vlanforward *string `pulumi:"vlanforward"`
	// VLAN ID (1 - 4094).
	Vlanid *int `pulumi:"vlanid"`
	// Virtual Routing Forwarding ID.
	Vrf *int `pulumi:"vrf"`
	// Enable/disable use of virtual MAC for VRRP. Valid values: `enable`, `disable`.
	VrrpVirtualMac *string `pulumi:"vrrpVirtualMac"`
	// VRRP configuration. The structure of `vrrp` block is documented below.
	Vrrps []InterfaceVrrp `pulumi:"vrrps"`
	// Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers. Valid values: `enable`, `disable`.
	Wccp *string `pulumi:"wccp"`
	// Default weight for static routes (if route has no weight configured).
	Weight *int `pulumi:"weight"`
	// WINS server IP.
	WinsIp *string `pulumi:"winsIp"`
}

type InterfaceState struct {
	// PPPoE server name.
	AcName pulumi.StringPtrInput
	// Aggregate interface.
	Aggregate pulumi.StringPtrInput
	// Type of aggregation. Valid values: `physical`, `vxlan`.
	AggregateType pulumi.StringPtrInput
	// Frame distribution algorithm.
	Algorithm pulumi.StringPtrInput
	// Alias will be displayed with the interface name to make it easier to distinguish.
	Alias pulumi.StringPtrInput
	// Permitted types of management access to this interface.
	Allowaccess pulumi.StringPtrInput
	// Enable/disable automatic registration of unknown FortiAP devices. Valid values: `enable`, `disable`.
	ApDiscover pulumi.StringPtrInput
	// Enable/disable ARP forwarding. Valid values: `enable`, `disable`.
	Arpforward pulumi.StringPtrInput
	// HTTPS server certificate.
	AuthCert pulumi.StringPtrInput
	// Address of captive portal.
	AuthPortalAddr pulumi.StringPtrInput
	// PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
	AuthType pulumi.StringPtrInput
	// Enable/disable automatic authorization of dedicated Fortinet extension device on this interface. Valid values: `enable`, `disable`.
	AutoAuthExtensionDevice pulumi.StringPtrInput
	// Indicates whether the interface is automatically created by FortiGate, for example, created during the VPN creation process. If it is, set it to "auto", else keep it empty.
	Autogenerated pulumi.StringPtrInput
	// Bandwidth measure time
	BandwidthMeasureTime pulumi.IntPtrInput
	// Bidirectional Forwarding Detection (BFD) settings. Valid values: `global`, `enable`, `disable`.
	Bfd pulumi.StringPtrInput
	// BFD desired minimal transmit interval.
	BfdDesiredMinTx pulumi.IntPtrInput
	// BFD detection multiplier.
	BfdDetectMult pulumi.IntPtrInput
	// BFD required minimal receive interval.
	BfdRequiredMinRx pulumi.IntPtrInput
	// Enable/disable broadcasting FortiClient discovery messages. Valid values: `enable`, `disable`.
	BroadcastForticlientDiscovery pulumi.StringPtrInput
	// Enable/disable broadcast forwarding. Valid values: `enable`, `disable`.
	BroadcastForward pulumi.StringPtrInput
	// Enable/disable captive portal.
	CaptivePortal pulumi.IntPtrInput
	// CLI connection status.
	CliConnStatus pulumi.IntPtrInput
	// DHCP client options. The structure of `clientOptions` block is documented below.
	ClientOptions InterfaceClientOptionArrayInput
	// Color of icon on the GUI.
	Color pulumi.IntPtrInput
	// Configure interface for single purpose. Valid values: `none`, `management`.
	DedicatedTo pulumi.StringPtrInput
	// default purdue level of device detected on this interface. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
	DefaultPurdueLevel pulumi.StringPtrInput
	// Enable to get the gateway IP from the DHCP or PPPoE server. Valid values: `enable`, `disable`.
	Defaultgw pulumi.StringPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// MTU of detected peer (0 - 4294967295).
	DetectedPeerMtu pulumi.IntPtrInput
	// Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
	Detectprotocol pulumi.StringPtrInput
	// Gateway's ping server for this IP.
	Detectserver pulumi.StringPtrInput
	// Device access list.
	DeviceAccessList pulumi.StringPtrInput
	// Enable/disable passively gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
	DeviceIdentification pulumi.StringPtrInput
	// Enable/disable active gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
	DeviceIdentificationActiveScan pulumi.StringPtrInput
	// Enable/disable inclusion of devices detected on this interface in network vulnerability scans. Valid values: `disable`, `enable`.
	DeviceNetscan pulumi.StringPtrInput
	// Enable/disable passive gathering of user identity information about users on this interface. Valid values: `enable`, `disable`.
	DeviceUserIdentification pulumi.StringPtrInput
	// Device Index.
	Devindex pulumi.IntPtrInput
	// Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable). Valid values: `disable`, `enable`.
	DhcpBroadcastFlag pulumi.StringPtrInput
	// Enable/disable addition of classless static routes retrieved from DHCP server. Valid values: `enable`, `disable`.
	DhcpClasslessRouteAddition pulumi.StringPtrInput
	// DHCP client identifier.
	DhcpClientIdentifier pulumi.StringPtrInput
	// Enable/disable DHCP relay agent option. Valid values: `enable`, `disable`.
	DhcpRelayAgentOption pulumi.StringPtrInput
	// DHCP relay circuit ID.
	DhcpRelayCircuitId pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	DhcpRelayInterface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	DhcpRelayInterfaceSelectMethod pulumi.StringPtrInput
	// DHCP relay IP address.
	DhcpRelayIp pulumi.StringPtrInput
	// DHCP relay link selection.
	DhcpRelayLinkSelection pulumi.StringPtrInput
	// Enable/disable sending DHCP request to all servers. Valid values: `disable`, `enable`.
	DhcpRelayRequestAllServer pulumi.StringPtrInput
	// Enable/disable allowing this interface to act as a DHCP relay. Valid values: `disable`, `enable`.
	DhcpRelayService pulumi.StringPtrInput
	// IP address used by the DHCP relay as its source IP.
	DhcpRelaySourceIp pulumi.StringPtrInput
	// DHCP relay type (regular or IPsec). Valid values: `regular`, `ipsec`.
	DhcpRelayType pulumi.StringPtrInput
	// DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
	DhcpRenewTime pulumi.IntPtrInput
	// Enable/disable DHCP smart relay. Valid values: `disable`, `enable`.
	DhcpSmartRelay pulumi.StringPtrInput
	// Configure DHCP server access list. The structure of `dhcpSnoopingServerList` block is documented below.
	DhcpSnoopingServerLists InterfaceDhcpSnoopingServerListArrayInput
	// Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
	DiscRetryTimeout pulumi.IntPtrInput
	// Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
	DisconnectThreshold pulumi.IntPtrInput
	// Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
	Distance pulumi.IntPtrInput
	// Enable/disable use DNS acquired by DHCP or PPPoE. Valid values: `enable`, `disable`.
	DnsServerOverride pulumi.StringPtrInput
	// DNS transport protocols. Valid values: `cleartext`, `dot`, `doh`.
	DnsServerProtocol pulumi.StringPtrInput
	// Enable/disable drop fragment packets. Valid values: `enable`, `disable`.
	DropFragment pulumi.StringPtrInput
	// Enable/disable drop overlapped fragment packets. Valid values: `enable`, `disable`.
	DropOverlappedFragment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// EAP CA certificate name.
	EapCaCert pulumi.StringPtrInput
	// EAP identity.
	EapIdentity pulumi.StringPtrInput
	// EAP method. Valid values: `tls`, `peap`.
	EapMethod pulumi.StringPtrInput
	// EAP password.
	EapPassword pulumi.StringPtrInput
	// Enable/disable EAP-Supplicant. Valid values: `enable`, `disable`.
	EapSupplicant pulumi.StringPtrInput
	// EAP user certificate name.
	EapUserCert pulumi.StringPtrInput
	// Outgoing traffic shaping profile.
	EgressShapingProfile pulumi.StringPtrInput
	// Enable/disable endpoint compliance enforcement. Valid values: `enable`, `disable`.
	EndpointCompliance pulumi.StringPtrInput
	// Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
	EstimatedDownstreamBandwidth pulumi.IntPtrInput
	// Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
	EstimatedUpstreamBandwidth pulumi.IntPtrInput
	// Enable/disable the explicit FTP proxy on this interface. Valid values: `enable`, `disable`.
	ExplicitFtpProxy pulumi.StringPtrInput
	// Enable/disable the explicit web proxy on this interface. Valid values: `enable`, `disable`.
	ExplicitWebProxy pulumi.StringPtrInput
	// Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet). Valid values: `enable`, `disable`.
	External pulumi.StringPtrInput
	// Action on extender when interface fail . Valid values: `soft-restart`, `hard-restart`, `reboot`.
	FailActionOnExtender pulumi.StringPtrInput
	// Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `failAlertInterfaces` block is documented below.
	FailAlertInterfaces InterfaceFailAlertInterfaceArrayInput
	// Select link-failed-signal or link-down method to alert about a failed link. Valid values: `link-failed-signal`, `link-down`.
	FailAlertMethod pulumi.StringPtrInput
	// Enable/disable fail detection features for this interface. Valid values: `enable`, `disable`.
	FailDetect pulumi.StringPtrInput
	// Options for detecting that this interface has failed. Valid values: `detectserver`, `link-down`.
	FailDetectOption pulumi.StringPtrInput
	// Enable/disable FortiHeartBeat (FortiTelemetry on GUI). Valid values: `enable`, `disable`.
	Fortiheartbeat pulumi.StringPtrInput
	// Enable FortiLink to dedicate this interface to manage other Fortinet devices. Valid values: `enable`, `disable`.
	Fortilink pulumi.StringPtrInput
	// fortilink split interface backup link.
	FortilinkBackupLink pulumi.IntPtrInput
	// Protocol for FortiGate neighbor discovery. Valid values: `lldp`, `fortilink`.
	FortilinkNeighborDetect pulumi.StringPtrInput
	// Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy. Valid values: `enable`, `disable`.
	FortilinkSplitInterface pulumi.StringPtrInput
	// Enable/disable FortiLink switch-stacking on this interface. Valid values: `enable`, `disable`.
	FortilinkStacking pulumi.StringPtrInput
	// Transparent mode forward domain.
	ForwardDomain pulumi.IntPtrInput
	// Configure forward error correction (FEC). Valid values: `none`, `disable`, `cl91-rs-fec`, `cl74-fc-fec`.
	ForwardErrorCorrection pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
	Gwdetect pulumi.StringPtrInput
	// HA election priority for the PING server.
	HaPriority pulumi.IntPtrInput
	// Enable/disable ICMP accept redirect. Valid values: `enable`, `disable`.
	IcmpAcceptRedirect pulumi.StringPtrInput
	// Enable/disable ICMP send redirect. Valid values: `enable`, `disable`.
	IcmpSendRedirect pulumi.StringPtrInput
	// Enable/disable authentication for this interface. Valid values: `enable`, `disable`.
	IdentAccept pulumi.StringPtrInput
	// PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
	IdleTimeout pulumi.IntPtrInput
	// Configure IKE authentication SAML server.
	IkeSamlServer pulumi.StringPtrInput
	// Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
	Inbandwidth pulumi.IntPtrInput
	// Incoming traffic shaping profile.
	IngressShapingProfile pulumi.StringPtrInput
	// Ingress Spillover threshold (0 - 16776000 kbps).
	IngressSpilloverThreshold pulumi.IntPtrInput
	// Interface name.
	Interface pulumi.StringPtrInput
	// Implicitly created.
	Internal pulumi.IntPtrInput
	// Interface IPv4 address and subnet mask, syntax: X.X.X.X/24.
	Ip pulumi.StringPtrInput
	// Enable/disable automatic IP address assignment of this interface by FortiIPAM.
	IpManagedByFortiipam pulumi.StringPtrInput
	// Enable/disable IP/MAC binding. Valid values: `enable`, `disable`.
	Ipmac pulumi.StringPtrInput
	// Enable/disable the use of this interface as a one-armed sniffer. Valid values: `enable`, `disable`.
	IpsSnifferMode pulumi.StringPtrInput
	// Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
	Ipunnumbered pulumi.StringPtrInput
	// IPv6 of interface. The structure of `ipv6` block is documented below.
	Ipv6 InterfaceIpv6PtrInput
	// Enable/disable l2 forwarding. Valid values: `enable`, `disable`.
	L2forward pulumi.StringPtrInput
	// LACP HA secondary member. Valid values: `enable`, `disable`.
	LacpHaSecondary pulumi.StringPtrInput
	// LACP HA slave. Valid values: `enable`, `disable`.
	LacpHaSlave pulumi.StringPtrInput
	// LACP mode. Valid values: `static`, `passive`, `active`.
	LacpMode pulumi.StringPtrInput
	// How often the interface sends LACP messages. Valid values: `slow`, `fast`.
	LacpSpeed pulumi.StringPtrInput
	// Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
	LcpEchoInterval pulumi.IntPtrInput
	// Maximum missed LCP echo messages before disconnect.
	LcpMaxEchoFails pulumi.IntPtrInput
	// Number of milliseconds to wait before considering a link is up.
	LinkUpDelay pulumi.IntPtrInput
	// LLDP-MED network policy profile.
	LldpNetworkPolicy pulumi.StringPtrInput
	// Enable/disable Link Layer Discovery Protocol (LLDP) reception. Valid values: `enable`, `disable`, `vdom`.
	LldpReception pulumi.StringPtrInput
	// Enable/disable Link Layer Discovery Protocol (LLDP) transmission. Valid values: `enable`, `disable`, `vdom`.
	LldpTransmission pulumi.StringPtrInput
	// Change the interface's MAC address.
	Macaddr pulumi.StringPtrInput
	// Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managedDevice` block is documented below.
	ManagedDevices InterfaceManagedDeviceArrayInput
	// Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
	ManagedSubnetworkSize pulumi.StringPtrInput
	// High Availability in-band management IP address of this interface.
	ManagementIp pulumi.StringPtrInput
	// Measured downstream bandwidth (kbps).
	MeasuredDownstreamBandwidth pulumi.IntPtrInput
	// Measured upstream bandwidth (kbps).
	MeasuredUpstreamBandwidth pulumi.IntPtrInput
	// Select SFP media interface type Valid values: `none`, `gmii`, `sgmii`, `sr`, `lr`, `cr`, `sr4`, `lr4`, `cr4`.
	Mediatype pulumi.StringPtrInput
	// Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
	Members InterfaceMemberArrayInput
	// Minimum number of aggregated ports that must be up.
	MinLinks pulumi.IntPtrInput
	// Action to take when less than the configured minimum number of links are active. Valid values: `operational`, `administrative`.
	MinLinksDown pulumi.StringPtrInput
	// Addressing mode (static, DHCP, PPPoE). Valid values: `static`, `dhcp`, `pppoe`.
	Mode pulumi.StringPtrInput
	// Enable monitoring bandwidth on this interface. Valid values: `enable`, `disable`.
	MonitorBandwidth pulumi.StringPtrInput
	// MTU value for this interface.
	Mtu pulumi.IntPtrInput
	// Enable to set a custom MTU for this interface. Valid values: `enable`, `disable`.
	MtuOverride pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Enable/disable NDISC forwarding. Valid values: `enable`, `disable`.
	Ndiscforward pulumi.StringPtrInput
	// Enable/disable NETBIOS forwarding. Valid values: `disable`, `enable`.
	NetbiosForward pulumi.StringPtrInput
	// Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both). Valid values: `disable`, `tx`, `rx`, `both`.
	NetflowSampler pulumi.StringPtrInput
	// Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
	Outbandwidth pulumi.IntPtrInput
	// PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
	PadtRetryTimeout pulumi.IntPtrInput
	// PPPoE account's password.
	Password pulumi.StringPtrInput
	// PING server status.
	PingServStatus pulumi.IntPtrInput
	// sFlow polling interval (1 - 255 sec).
	PollingInterval pulumi.IntPtrInput
	// Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
	PppoeUnnumberedNegotiate pulumi.StringPtrInput
	// PPTP authentication type. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
	PptpAuthType pulumi.StringPtrInput
	// Enable/disable PPTP client. Valid values: `enable`, `disable`.
	PptpClient pulumi.StringPtrInput
	// PPTP password.
	PptpPassword pulumi.StringPtrInput
	// PPTP server IP address.
	PptpServerIp pulumi.StringPtrInput
	// Idle timer in minutes (0 for disabled).
	PptpTimeout pulumi.IntPtrInput
	// PPTP user name.
	PptpUser pulumi.StringPtrInput
	// Enable/disable preservation of session route when dirty. Valid values: `enable`, `disable`.
	PreserveSessionRoute pulumi.StringPtrInput
	// Priority of learned routes.
	Priority pulumi.IntPtrInput
	// Enable/disable fail back to higher priority port once recovered. Valid values: `enable`, `disable`.
	PriorityOverride pulumi.StringPtrInput
	// Enable/disable proxy captive portal on this interface. Valid values: `enable`, `disable`.
	ProxyCaptivePortal pulumi.StringPtrInput
	// IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
	ReachableTime pulumi.IntPtrInput
	// Redundant interface.
	RedundantInterface pulumi.StringPtrInput
	// Remote IP address of tunnel.
	RemoteIp pulumi.StringPtrInput
	// Replacement message override group.
	ReplacemsgOverrideGroup pulumi.StringPtrInput
	// RX ring size.
	RingRx pulumi.IntPtrInput
	// TX ring size.
	RingTx pulumi.IntPtrInput
	// Interface role. Valid values: `lan`, `wan`, `dmz`, `undefined`.
	Role pulumi.StringPtrInput
	// Data that NetFlow collects (rx, tx, or both). Valid values: `tx`, `rx`, `both`.
	SampleDirection pulumi.StringPtrInput
	// sFlow sample rate (10 - 99999).
	SampleRate pulumi.IntPtrInput
	// Enable monitoring or blocking connections to Botnet servers through this interface. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Enable/disable adding a secondary IP to this interface. Valid values: `enable`, `disable`.
	SecondaryIp pulumi.StringPtrInput
	// Second IP address of interface. The structure of `secondaryip` block is documented below.
	Secondaryips InterfaceSecondaryipArrayInput
	// Name of security-exempt-list.
	SecurityExemptList pulumi.StringPtrInput
	// URL of external authentication logout server.
	SecurityExternalLogout pulumi.StringPtrInput
	// URL of external authentication web server.
	SecurityExternalWeb pulumi.StringPtrInput
	// User groups that can authenticate with the captive portal. The structure of `securityGroups` block is documented below.
	SecurityGroups InterfaceSecurityGroupArrayInput
	// Enable/disable MAC authentication bypass. Valid values: `mac-auth-only`, `enable`, `disable`.
	SecurityMacAuthBypass pulumi.StringPtrInput
	// Turn on captive portal authentication for this interface. Valid values: `none`, `captive-portal`, `802.1X`.
	SecurityMode pulumi.StringPtrInput
	// URL redirection after disclaimer/authentication.
	SecurityRedirectUrl pulumi.StringPtrInput
	// PPPoE service name.
	ServiceName pulumi.StringPtrInput
	// Enable/disable sFlow on this interface. Valid values: `enable`, `disable`.
	SflowSampler pulumi.StringPtrInput
	// Permanent SNMP Index of the interface.
	SnmpIndex pulumi.IntPtrInput
	// Interface speed. The default setting and the options available depend on the interface hardware.
	Speed pulumi.StringPtrInput
	// Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
	SpilloverThreshold pulumi.IntPtrInput
	// Enable/disable source IP check. Valid values: `enable`, `disable`.
	SrcCheck pulumi.StringPtrInput
	// Bring the interface up or shut the interface down. Valid values: `up`, `down`.
	Status pulumi.StringPtrInput
	// Enable/disable STP. Valid values: `disable`, `enable`.
	Stp pulumi.StringPtrInput
	// Control STP behaviour on HA secondary. Valid values: `disable`, `enable`, `priority-adjust`.
	StpHaSecondary pulumi.StringPtrInput
	// Enable/disable STP forwarding. Valid values: `enable`, `disable`.
	Stpforward pulumi.StringPtrInput
	// Configure STP forwarding mode. Valid values: `rpl-all-ext-id`, `rpl-bridge-ext-id`, `rpl-nothing`.
	StpforwardMode pulumi.StringPtrInput
	// Enable to always send packets from this interface to a destination MAC address. Valid values: `enable`, `disable`.
	Subst pulumi.StringPtrInput
	// Destination MAC address that all packets are sent to from this interface.
	SubstituteDstMac pulumi.StringPtrInput
	// Initial create for switch-controller VLANs.
	SwcFirstCreate pulumi.IntPtrInput
	// Creation status for switch-controller VLANs.
	SwcVlan pulumi.IntPtrInput
	// Contained in switch.
	Switch pulumi.StringPtrInput
	// Block FortiSwitch port-to-port traffic. Valid values: `enable`, `disable`.
	SwitchControllerAccessVlan pulumi.StringPtrInput
	// Enable/disable FortiSwitch ARP inspection. Valid values: `enable`, `disable`.
	SwitchControllerArpInspection pulumi.StringPtrInput
	// Switch controller DHCP snooping. Valid values: `enable`, `disable`.
	SwitchControllerDhcpSnooping pulumi.StringPtrInput
	// Switch controller DHCP snooping option82. Valid values: `enable`, `disable`.
	SwitchControllerDhcpSnoopingOption82 pulumi.StringPtrInput
	// Switch controller DHCP snooping verify MAC. Valid values: `enable`, `disable`.
	SwitchControllerDhcpSnoopingVerifyMac pulumi.StringPtrInput
	// Integrated FortiLink settings for managed FortiSwitch.
	SwitchControllerDynamic pulumi.StringPtrInput
	// Interface's purpose when assigning traffic (read only).
	SwitchControllerFeature pulumi.StringPtrInput
	// Switch controller IGMP snooping. Valid values: `enable`, `disable`.
	SwitchControllerIgmpSnooping pulumi.StringPtrInput
	// Switch controller IGMP snooping fast-leave. Valid values: `enable`, `disable`.
	SwitchControllerIgmpSnoopingFastLeave pulumi.StringPtrInput
	// Switch controller IGMP snooping proxy. Valid values: `enable`, `disable`.
	SwitchControllerIgmpSnoopingProxy pulumi.StringPtrInput
	// Enable/disable managed FortiSwitch IoT scanning. Valid values: `enable`, `disable`.
	SwitchControllerIotScanning pulumi.StringPtrInput
	// Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
	SwitchControllerLearningLimit pulumi.IntPtrInput
	// VLAN to use for FortiLink management purposes.
	SwitchControllerMgmtVlan pulumi.IntPtrInput
	// Integrated NAC settings for managed FortiSwitch.
	SwitchControllerNac pulumi.StringPtrInput
	// NetFlow collection and processing. Valid values: `disable`, `enable`.
	SwitchControllerNetflowCollect pulumi.StringPtrInput
	// Enable/disable managed FortiSwitch routing offload. Valid values: `enable`, `disable`.
	SwitchControllerOffload pulumi.StringPtrInput
	// Enable/disable managed FortiSwitch routing offload gateway. Valid values: `enable`, `disable`.
	SwitchControllerOffloadGw pulumi.StringPtrInput
	// IP for routing offload on FortiSwitch.
	SwitchControllerOffloadIp pulumi.StringPtrInput
	// Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface. Valid values: `disable`, `enable`.
	SwitchControllerRspanMode pulumi.StringPtrInput
	// Source IP address used in FortiLink over L3 connections. Valid values: `outbound`, `fixed`.
	SwitchControllerSourceIp pulumi.StringPtrInput
	// Switch controller traffic policy for the VLAN.
	SwitchControllerTrafficPolicy pulumi.StringPtrInput
	// Define a system ID for the aggregate interface.
	SystemId pulumi.StringPtrInput
	// Method in which system ID is generated. Valid values: `auto`, `user`.
	SystemIdType pulumi.StringPtrInput
	// Config object tagging. The structure of `tagging` block is documented below.
	Taggings InterfaceTaggingArrayInput
	// TCP maximum segment size. 0 means do not change segment size.
	TcpMss pulumi.IntPtrInput
	// Enable/disable VLAN trunk. Valid values: `enable`, `disable`.
	Trunk pulumi.StringPtrInput
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp1 pulumi.StringPtrInput
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp2 pulumi.StringPtrInput
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp3 pulumi.StringPtrInput
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp61 pulumi.StringPtrInput
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp62 pulumi.StringPtrInput
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp63 pulumi.StringPtrInput
	// Interface type.
	Type pulumi.StringPtrInput
	// Username of the PPPoE account, provided by your ISP.
	Username pulumi.StringPtrInput
	// Interface is in this virtual domain (VDOM).
	Vdom pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Switch control interface VLAN ID.
	Vindex pulumi.IntPtrInput
	// Ethernet protocol of VLAN. Valid values: `8021q`, `8021ad`.
	VlanProtocol pulumi.StringPtrInput
	// Enable/disable traffic forwarding between VLANs on this interface. Valid values: `enable`, `disable`.
	Vlanforward pulumi.StringPtrInput
	// VLAN ID (1 - 4094).
	Vlanid pulumi.IntPtrInput
	// Virtual Routing Forwarding ID.
	Vrf pulumi.IntPtrInput
	// Enable/disable use of virtual MAC for VRRP. Valid values: `enable`, `disable`.
	VrrpVirtualMac pulumi.StringPtrInput
	// VRRP configuration. The structure of `vrrp` block is documented below.
	Vrrps InterfaceVrrpArrayInput
	// Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers. Valid values: `enable`, `disable`.
	Wccp pulumi.StringPtrInput
	// Default weight for static routes (if route has no weight configured).
	Weight pulumi.IntPtrInput
	// WINS server IP.
	WinsIp pulumi.StringPtrInput
}

func (InterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceState)(nil)).Elem()
}

type interfaceArgs struct {
	// PPPoE server name.
	AcName *string `pulumi:"acName"`
	// Aggregate interface.
	Aggregate *string `pulumi:"aggregate"`
	// Type of aggregation. Valid values: `physical`, `vxlan`.
	AggregateType *string `pulumi:"aggregateType"`
	// Frame distribution algorithm.
	Algorithm *string `pulumi:"algorithm"`
	// Alias will be displayed with the interface name to make it easier to distinguish.
	Alias *string `pulumi:"alias"`
	// Permitted types of management access to this interface.
	Allowaccess *string `pulumi:"allowaccess"`
	// Enable/disable automatic registration of unknown FortiAP devices. Valid values: `enable`, `disable`.
	ApDiscover *string `pulumi:"apDiscover"`
	// Enable/disable ARP forwarding. Valid values: `enable`, `disable`.
	Arpforward *string `pulumi:"arpforward"`
	// HTTPS server certificate.
	AuthCert *string `pulumi:"authCert"`
	// Address of captive portal.
	AuthPortalAddr *string `pulumi:"authPortalAddr"`
	// PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
	AuthType *string `pulumi:"authType"`
	// Enable/disable automatic authorization of dedicated Fortinet extension device on this interface. Valid values: `enable`, `disable`.
	AutoAuthExtensionDevice *string `pulumi:"autoAuthExtensionDevice"`
	// Indicates whether the interface is automatically created by FortiGate, for example, created during the VPN creation process. If it is, set it to "auto", else keep it empty.
	Autogenerated *string `pulumi:"autogenerated"`
	// Bandwidth measure time
	BandwidthMeasureTime *int `pulumi:"bandwidthMeasureTime"`
	// Bidirectional Forwarding Detection (BFD) settings. Valid values: `global`, `enable`, `disable`.
	Bfd *string `pulumi:"bfd"`
	// BFD desired minimal transmit interval.
	BfdDesiredMinTx *int `pulumi:"bfdDesiredMinTx"`
	// BFD detection multiplier.
	BfdDetectMult *int `pulumi:"bfdDetectMult"`
	// BFD required minimal receive interval.
	BfdRequiredMinRx *int `pulumi:"bfdRequiredMinRx"`
	// Enable/disable broadcasting FortiClient discovery messages. Valid values: `enable`, `disable`.
	BroadcastForticlientDiscovery *string `pulumi:"broadcastForticlientDiscovery"`
	// Enable/disable broadcast forwarding. Valid values: `enable`, `disable`.
	BroadcastForward *string `pulumi:"broadcastForward"`
	// Enable/disable captive portal.
	CaptivePortal *int `pulumi:"captivePortal"`
	// CLI connection status.
	CliConnStatus *int `pulumi:"cliConnStatus"`
	// DHCP client options. The structure of `clientOptions` block is documented below.
	ClientOptions []InterfaceClientOption `pulumi:"clientOptions"`
	// Color of icon on the GUI.
	Color *int `pulumi:"color"`
	// Configure interface for single purpose. Valid values: `none`, `management`.
	DedicatedTo *string `pulumi:"dedicatedTo"`
	// default purdue level of device detected on this interface. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
	DefaultPurdueLevel *string `pulumi:"defaultPurdueLevel"`
	// Enable to get the gateway IP from the DHCP or PPPoE server. Valid values: `enable`, `disable`.
	Defaultgw *string `pulumi:"defaultgw"`
	// Description.
	Description *string `pulumi:"description"`
	// MTU of detected peer (0 - 4294967295).
	DetectedPeerMtu *int `pulumi:"detectedPeerMtu"`
	// Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
	Detectprotocol *string `pulumi:"detectprotocol"`
	// Gateway's ping server for this IP.
	Detectserver *string `pulumi:"detectserver"`
	// Device access list.
	DeviceAccessList *string `pulumi:"deviceAccessList"`
	// Enable/disable passively gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
	DeviceIdentification *string `pulumi:"deviceIdentification"`
	// Enable/disable active gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
	DeviceIdentificationActiveScan *string `pulumi:"deviceIdentificationActiveScan"`
	// Enable/disable inclusion of devices detected on this interface in network vulnerability scans. Valid values: `disable`, `enable`.
	DeviceNetscan *string `pulumi:"deviceNetscan"`
	// Enable/disable passive gathering of user identity information about users on this interface. Valid values: `enable`, `disable`.
	DeviceUserIdentification *string `pulumi:"deviceUserIdentification"`
	// Device Index.
	Devindex *int `pulumi:"devindex"`
	// Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable). Valid values: `disable`, `enable`.
	DhcpBroadcastFlag *string `pulumi:"dhcpBroadcastFlag"`
	// Enable/disable addition of classless static routes retrieved from DHCP server. Valid values: `enable`, `disable`.
	DhcpClasslessRouteAddition *string `pulumi:"dhcpClasslessRouteAddition"`
	// DHCP client identifier.
	DhcpClientIdentifier *string `pulumi:"dhcpClientIdentifier"`
	// Enable/disable DHCP relay agent option. Valid values: `enable`, `disable`.
	DhcpRelayAgentOption *string `pulumi:"dhcpRelayAgentOption"`
	// DHCP relay circuit ID.
	DhcpRelayCircuitId *string `pulumi:"dhcpRelayCircuitId"`
	// Specify outgoing interface to reach server.
	DhcpRelayInterface *string `pulumi:"dhcpRelayInterface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	DhcpRelayInterfaceSelectMethod *string `pulumi:"dhcpRelayInterfaceSelectMethod"`
	// DHCP relay IP address.
	DhcpRelayIp *string `pulumi:"dhcpRelayIp"`
	// DHCP relay link selection.
	DhcpRelayLinkSelection *string `pulumi:"dhcpRelayLinkSelection"`
	// Enable/disable sending DHCP request to all servers. Valid values: `disable`, `enable`.
	DhcpRelayRequestAllServer *string `pulumi:"dhcpRelayRequestAllServer"`
	// Enable/disable allowing this interface to act as a DHCP relay. Valid values: `disable`, `enable`.
	DhcpRelayService *string `pulumi:"dhcpRelayService"`
	// IP address used by the DHCP relay as its source IP.
	DhcpRelaySourceIp *string `pulumi:"dhcpRelaySourceIp"`
	// DHCP relay type (regular or IPsec). Valid values: `regular`, `ipsec`.
	DhcpRelayType *string `pulumi:"dhcpRelayType"`
	// DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
	DhcpRenewTime *int `pulumi:"dhcpRenewTime"`
	// Enable/disable DHCP smart relay. Valid values: `disable`, `enable`.
	DhcpSmartRelay *string `pulumi:"dhcpSmartRelay"`
	// Configure DHCP server access list. The structure of `dhcpSnoopingServerList` block is documented below.
	DhcpSnoopingServerLists []InterfaceDhcpSnoopingServerList `pulumi:"dhcpSnoopingServerLists"`
	// Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
	DiscRetryTimeout *int `pulumi:"discRetryTimeout"`
	// Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
	DisconnectThreshold *int `pulumi:"disconnectThreshold"`
	// Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
	Distance *int `pulumi:"distance"`
	// Enable/disable use DNS acquired by DHCP or PPPoE. Valid values: `enable`, `disable`.
	DnsServerOverride *string `pulumi:"dnsServerOverride"`
	// DNS transport protocols. Valid values: `cleartext`, `dot`, `doh`.
	DnsServerProtocol *string `pulumi:"dnsServerProtocol"`
	// Enable/disable drop fragment packets. Valid values: `enable`, `disable`.
	DropFragment *string `pulumi:"dropFragment"`
	// Enable/disable drop overlapped fragment packets. Valid values: `enable`, `disable`.
	DropOverlappedFragment *string `pulumi:"dropOverlappedFragment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// EAP CA certificate name.
	EapCaCert *string `pulumi:"eapCaCert"`
	// EAP identity.
	EapIdentity *string `pulumi:"eapIdentity"`
	// EAP method. Valid values: `tls`, `peap`.
	EapMethod *string `pulumi:"eapMethod"`
	// EAP password.
	EapPassword *string `pulumi:"eapPassword"`
	// Enable/disable EAP-Supplicant. Valid values: `enable`, `disable`.
	EapSupplicant *string `pulumi:"eapSupplicant"`
	// EAP user certificate name.
	EapUserCert *string `pulumi:"eapUserCert"`
	// Outgoing traffic shaping profile.
	EgressShapingProfile *string `pulumi:"egressShapingProfile"`
	// Enable/disable endpoint compliance enforcement. Valid values: `enable`, `disable`.
	EndpointCompliance *string `pulumi:"endpointCompliance"`
	// Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
	EstimatedDownstreamBandwidth *int `pulumi:"estimatedDownstreamBandwidth"`
	// Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
	EstimatedUpstreamBandwidth *int `pulumi:"estimatedUpstreamBandwidth"`
	// Enable/disable the explicit FTP proxy on this interface. Valid values: `enable`, `disable`.
	ExplicitFtpProxy *string `pulumi:"explicitFtpProxy"`
	// Enable/disable the explicit web proxy on this interface. Valid values: `enable`, `disable`.
	ExplicitWebProxy *string `pulumi:"explicitWebProxy"`
	// Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet). Valid values: `enable`, `disable`.
	External *string `pulumi:"external"`
	// Action on extender when interface fail . Valid values: `soft-restart`, `hard-restart`, `reboot`.
	FailActionOnExtender *string `pulumi:"failActionOnExtender"`
	// Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `failAlertInterfaces` block is documented below.
	FailAlertInterfaces []InterfaceFailAlertInterface `pulumi:"failAlertInterfaces"`
	// Select link-failed-signal or link-down method to alert about a failed link. Valid values: `link-failed-signal`, `link-down`.
	FailAlertMethod *string `pulumi:"failAlertMethod"`
	// Enable/disable fail detection features for this interface. Valid values: `enable`, `disable`.
	FailDetect *string `pulumi:"failDetect"`
	// Options for detecting that this interface has failed. Valid values: `detectserver`, `link-down`.
	FailDetectOption *string `pulumi:"failDetectOption"`
	// Enable/disable FortiHeartBeat (FortiTelemetry on GUI). Valid values: `enable`, `disable`.
	Fortiheartbeat *string `pulumi:"fortiheartbeat"`
	// Enable FortiLink to dedicate this interface to manage other Fortinet devices. Valid values: `enable`, `disable`.
	Fortilink *string `pulumi:"fortilink"`
	// fortilink split interface backup link.
	FortilinkBackupLink *int `pulumi:"fortilinkBackupLink"`
	// Protocol for FortiGate neighbor discovery. Valid values: `lldp`, `fortilink`.
	FortilinkNeighborDetect *string `pulumi:"fortilinkNeighborDetect"`
	// Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy. Valid values: `enable`, `disable`.
	FortilinkSplitInterface *string `pulumi:"fortilinkSplitInterface"`
	// Enable/disable FortiLink switch-stacking on this interface. Valid values: `enable`, `disable`.
	FortilinkStacking *string `pulumi:"fortilinkStacking"`
	// Transparent mode forward domain.
	ForwardDomain *int `pulumi:"forwardDomain"`
	// Configure forward error correction (FEC). Valid values: `none`, `disable`, `cl91-rs-fec`, `cl74-fc-fec`.
	ForwardErrorCorrection *string `pulumi:"forwardErrorCorrection"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
	Gwdetect *string `pulumi:"gwdetect"`
	// HA election priority for the PING server.
	HaPriority *int `pulumi:"haPriority"`
	// Enable/disable ICMP accept redirect. Valid values: `enable`, `disable`.
	IcmpAcceptRedirect *string `pulumi:"icmpAcceptRedirect"`
	// Enable/disable ICMP send redirect. Valid values: `enable`, `disable`.
	IcmpSendRedirect *string `pulumi:"icmpSendRedirect"`
	// Enable/disable authentication for this interface. Valid values: `enable`, `disable`.
	IdentAccept *string `pulumi:"identAccept"`
	// PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// Configure IKE authentication SAML server.
	IkeSamlServer *string `pulumi:"ikeSamlServer"`
	// Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
	Inbandwidth *int `pulumi:"inbandwidth"`
	// Incoming traffic shaping profile.
	IngressShapingProfile *string `pulumi:"ingressShapingProfile"`
	// Ingress Spillover threshold (0 - 16776000 kbps).
	IngressSpilloverThreshold *int `pulumi:"ingressSpilloverThreshold"`
	// Interface name.
	Interface *string `pulumi:"interface"`
	// Implicitly created.
	Internal *int `pulumi:"internal"`
	// Interface IPv4 address and subnet mask, syntax: X.X.X.X/24.
	Ip *string `pulumi:"ip"`
	// Enable/disable automatic IP address assignment of this interface by FortiIPAM.
	IpManagedByFortiipam *string `pulumi:"ipManagedByFortiipam"`
	// Enable/disable IP/MAC binding. Valid values: `enable`, `disable`.
	Ipmac *string `pulumi:"ipmac"`
	// Enable/disable the use of this interface as a one-armed sniffer. Valid values: `enable`, `disable`.
	IpsSnifferMode *string `pulumi:"ipsSnifferMode"`
	// Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
	Ipunnumbered *string `pulumi:"ipunnumbered"`
	// IPv6 of interface. The structure of `ipv6` block is documented below.
	Ipv6 *InterfaceIpv6 `pulumi:"ipv6"`
	// Enable/disable l2 forwarding. Valid values: `enable`, `disable`.
	L2forward *string `pulumi:"l2forward"`
	// LACP HA secondary member. Valid values: `enable`, `disable`.
	LacpHaSecondary *string `pulumi:"lacpHaSecondary"`
	// LACP HA slave. Valid values: `enable`, `disable`.
	LacpHaSlave *string `pulumi:"lacpHaSlave"`
	// LACP mode. Valid values: `static`, `passive`, `active`.
	LacpMode *string `pulumi:"lacpMode"`
	// How often the interface sends LACP messages. Valid values: `slow`, `fast`.
	LacpSpeed *string `pulumi:"lacpSpeed"`
	// Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
	LcpEchoInterval *int `pulumi:"lcpEchoInterval"`
	// Maximum missed LCP echo messages before disconnect.
	LcpMaxEchoFails *int `pulumi:"lcpMaxEchoFails"`
	// Number of milliseconds to wait before considering a link is up.
	LinkUpDelay *int `pulumi:"linkUpDelay"`
	// LLDP-MED network policy profile.
	LldpNetworkPolicy *string `pulumi:"lldpNetworkPolicy"`
	// Enable/disable Link Layer Discovery Protocol (LLDP) reception. Valid values: `enable`, `disable`, `vdom`.
	LldpReception *string `pulumi:"lldpReception"`
	// Enable/disable Link Layer Discovery Protocol (LLDP) transmission. Valid values: `enable`, `disable`, `vdom`.
	LldpTransmission *string `pulumi:"lldpTransmission"`
	// Change the interface's MAC address.
	Macaddr *string `pulumi:"macaddr"`
	// Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managedDevice` block is documented below.
	ManagedDevices []InterfaceManagedDevice `pulumi:"managedDevices"`
	// Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
	ManagedSubnetworkSize *string `pulumi:"managedSubnetworkSize"`
	// High Availability in-band management IP address of this interface.
	ManagementIp *string `pulumi:"managementIp"`
	// Measured downstream bandwidth (kbps).
	MeasuredDownstreamBandwidth *int `pulumi:"measuredDownstreamBandwidth"`
	// Measured upstream bandwidth (kbps).
	MeasuredUpstreamBandwidth *int `pulumi:"measuredUpstreamBandwidth"`
	// Select SFP media interface type Valid values: `none`, `gmii`, `sgmii`, `sr`, `lr`, `cr`, `sr4`, `lr4`, `cr4`.
	Mediatype *string `pulumi:"mediatype"`
	// Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
	Members []InterfaceMember `pulumi:"members"`
	// Minimum number of aggregated ports that must be up.
	MinLinks *int `pulumi:"minLinks"`
	// Action to take when less than the configured minimum number of links are active. Valid values: `operational`, `administrative`.
	MinLinksDown *string `pulumi:"minLinksDown"`
	// Addressing mode (static, DHCP, PPPoE). Valid values: `static`, `dhcp`, `pppoe`.
	Mode *string `pulumi:"mode"`
	// Enable monitoring bandwidth on this interface. Valid values: `enable`, `disable`.
	MonitorBandwidth *string `pulumi:"monitorBandwidth"`
	// MTU value for this interface.
	Mtu *int `pulumi:"mtu"`
	// Enable to set a custom MTU for this interface. Valid values: `enable`, `disable`.
	MtuOverride *string `pulumi:"mtuOverride"`
	// Name.
	Name *string `pulumi:"name"`
	// Enable/disable NDISC forwarding. Valid values: `enable`, `disable`.
	Ndiscforward *string `pulumi:"ndiscforward"`
	// Enable/disable NETBIOS forwarding. Valid values: `disable`, `enable`.
	NetbiosForward *string `pulumi:"netbiosForward"`
	// Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both). Valid values: `disable`, `tx`, `rx`, `both`.
	NetflowSampler *string `pulumi:"netflowSampler"`
	// Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
	Outbandwidth *int `pulumi:"outbandwidth"`
	// PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
	PadtRetryTimeout *int `pulumi:"padtRetryTimeout"`
	// PPPoE account's password.
	Password *string `pulumi:"password"`
	// PING server status.
	PingServStatus *int `pulumi:"pingServStatus"`
	// sFlow polling interval (1 - 255 sec).
	PollingInterval *int `pulumi:"pollingInterval"`
	// Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
	PppoeUnnumberedNegotiate *string `pulumi:"pppoeUnnumberedNegotiate"`
	// PPTP authentication type. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
	PptpAuthType *string `pulumi:"pptpAuthType"`
	// Enable/disable PPTP client. Valid values: `enable`, `disable`.
	PptpClient *string `pulumi:"pptpClient"`
	// PPTP password.
	PptpPassword *string `pulumi:"pptpPassword"`
	// PPTP server IP address.
	PptpServerIp *string `pulumi:"pptpServerIp"`
	// Idle timer in minutes (0 for disabled).
	PptpTimeout *int `pulumi:"pptpTimeout"`
	// PPTP user name.
	PptpUser *string `pulumi:"pptpUser"`
	// Enable/disable preservation of session route when dirty. Valid values: `enable`, `disable`.
	PreserveSessionRoute *string `pulumi:"preserveSessionRoute"`
	// Priority of learned routes.
	Priority *int `pulumi:"priority"`
	// Enable/disable fail back to higher priority port once recovered. Valid values: `enable`, `disable`.
	PriorityOverride *string `pulumi:"priorityOverride"`
	// Enable/disable proxy captive portal on this interface. Valid values: `enable`, `disable`.
	ProxyCaptivePortal *string `pulumi:"proxyCaptivePortal"`
	// IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
	ReachableTime *int `pulumi:"reachableTime"`
	// Redundant interface.
	RedundantInterface *string `pulumi:"redundantInterface"`
	// Remote IP address of tunnel.
	RemoteIp *string `pulumi:"remoteIp"`
	// Replacement message override group.
	ReplacemsgOverrideGroup *string `pulumi:"replacemsgOverrideGroup"`
	// RX ring size.
	RingRx *int `pulumi:"ringRx"`
	// TX ring size.
	RingTx *int `pulumi:"ringTx"`
	// Interface role. Valid values: `lan`, `wan`, `dmz`, `undefined`.
	Role *string `pulumi:"role"`
	// Data that NetFlow collects (rx, tx, or both). Valid values: `tx`, `rx`, `both`.
	SampleDirection *string `pulumi:"sampleDirection"`
	// sFlow sample rate (10 - 99999).
	SampleRate *int `pulumi:"sampleRate"`
	// Enable monitoring or blocking connections to Botnet servers through this interface. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Enable/disable adding a secondary IP to this interface. Valid values: `enable`, `disable`.
	SecondaryIp *string `pulumi:"secondaryIp"`
	// Second IP address of interface. The structure of `secondaryip` block is documented below.
	Secondaryips []InterfaceSecondaryip `pulumi:"secondaryips"`
	// Name of security-exempt-list.
	SecurityExemptList *string `pulumi:"securityExemptList"`
	// URL of external authentication logout server.
	SecurityExternalLogout *string `pulumi:"securityExternalLogout"`
	// URL of external authentication web server.
	SecurityExternalWeb *string `pulumi:"securityExternalWeb"`
	// User groups that can authenticate with the captive portal. The structure of `securityGroups` block is documented below.
	SecurityGroups []InterfaceSecurityGroup `pulumi:"securityGroups"`
	// Enable/disable MAC authentication bypass. Valid values: `mac-auth-only`, `enable`, `disable`.
	SecurityMacAuthBypass *string `pulumi:"securityMacAuthBypass"`
	// Turn on captive portal authentication for this interface. Valid values: `none`, `captive-portal`, `802.1X`.
	SecurityMode *string `pulumi:"securityMode"`
	// URL redirection after disclaimer/authentication.
	SecurityRedirectUrl *string `pulumi:"securityRedirectUrl"`
	// PPPoE service name.
	ServiceName *string `pulumi:"serviceName"`
	// Enable/disable sFlow on this interface. Valid values: `enable`, `disable`.
	SflowSampler *string `pulumi:"sflowSampler"`
	// Permanent SNMP Index of the interface.
	SnmpIndex *int `pulumi:"snmpIndex"`
	// Interface speed. The default setting and the options available depend on the interface hardware.
	Speed *string `pulumi:"speed"`
	// Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
	SpilloverThreshold *int `pulumi:"spilloverThreshold"`
	// Enable/disable source IP check. Valid values: `enable`, `disable`.
	SrcCheck *string `pulumi:"srcCheck"`
	// Bring the interface up or shut the interface down. Valid values: `up`, `down`.
	Status *string `pulumi:"status"`
	// Enable/disable STP. Valid values: `disable`, `enable`.
	Stp *string `pulumi:"stp"`
	// Control STP behaviour on HA secondary. Valid values: `disable`, `enable`, `priority-adjust`.
	StpHaSecondary *string `pulumi:"stpHaSecondary"`
	// Enable/disable STP forwarding. Valid values: `enable`, `disable`.
	Stpforward *string `pulumi:"stpforward"`
	// Configure STP forwarding mode. Valid values: `rpl-all-ext-id`, `rpl-bridge-ext-id`, `rpl-nothing`.
	StpforwardMode *string `pulumi:"stpforwardMode"`
	// Enable to always send packets from this interface to a destination MAC address. Valid values: `enable`, `disable`.
	Subst *string `pulumi:"subst"`
	// Destination MAC address that all packets are sent to from this interface.
	SubstituteDstMac *string `pulumi:"substituteDstMac"`
	// Initial create for switch-controller VLANs.
	SwcFirstCreate *int `pulumi:"swcFirstCreate"`
	// Creation status for switch-controller VLANs.
	SwcVlan *int `pulumi:"swcVlan"`
	// Contained in switch.
	Switch *string `pulumi:"switch"`
	// Block FortiSwitch port-to-port traffic. Valid values: `enable`, `disable`.
	SwitchControllerAccessVlan *string `pulumi:"switchControllerAccessVlan"`
	// Enable/disable FortiSwitch ARP inspection. Valid values: `enable`, `disable`.
	SwitchControllerArpInspection *string `pulumi:"switchControllerArpInspection"`
	// Switch controller DHCP snooping. Valid values: `enable`, `disable`.
	SwitchControllerDhcpSnooping *string `pulumi:"switchControllerDhcpSnooping"`
	// Switch controller DHCP snooping option82. Valid values: `enable`, `disable`.
	SwitchControllerDhcpSnoopingOption82 *string `pulumi:"switchControllerDhcpSnoopingOption82"`
	// Switch controller DHCP snooping verify MAC. Valid values: `enable`, `disable`.
	SwitchControllerDhcpSnoopingVerifyMac *string `pulumi:"switchControllerDhcpSnoopingVerifyMac"`
	// Integrated FortiLink settings for managed FortiSwitch.
	SwitchControllerDynamic *string `pulumi:"switchControllerDynamic"`
	// Interface's purpose when assigning traffic (read only).
	SwitchControllerFeature *string `pulumi:"switchControllerFeature"`
	// Switch controller IGMP snooping. Valid values: `enable`, `disable`.
	SwitchControllerIgmpSnooping *string `pulumi:"switchControllerIgmpSnooping"`
	// Switch controller IGMP snooping fast-leave. Valid values: `enable`, `disable`.
	SwitchControllerIgmpSnoopingFastLeave *string `pulumi:"switchControllerIgmpSnoopingFastLeave"`
	// Switch controller IGMP snooping proxy. Valid values: `enable`, `disable`.
	SwitchControllerIgmpSnoopingProxy *string `pulumi:"switchControllerIgmpSnoopingProxy"`
	// Enable/disable managed FortiSwitch IoT scanning. Valid values: `enable`, `disable`.
	SwitchControllerIotScanning *string `pulumi:"switchControllerIotScanning"`
	// Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
	SwitchControllerLearningLimit *int `pulumi:"switchControllerLearningLimit"`
	// VLAN to use for FortiLink management purposes.
	SwitchControllerMgmtVlan *int `pulumi:"switchControllerMgmtVlan"`
	// Integrated NAC settings for managed FortiSwitch.
	SwitchControllerNac *string `pulumi:"switchControllerNac"`
	// NetFlow collection and processing. Valid values: `disable`, `enable`.
	SwitchControllerNetflowCollect *string `pulumi:"switchControllerNetflowCollect"`
	// Enable/disable managed FortiSwitch routing offload. Valid values: `enable`, `disable`.
	SwitchControllerOffload *string `pulumi:"switchControllerOffload"`
	// Enable/disable managed FortiSwitch routing offload gateway. Valid values: `enable`, `disable`.
	SwitchControllerOffloadGw *string `pulumi:"switchControllerOffloadGw"`
	// IP for routing offload on FortiSwitch.
	SwitchControllerOffloadIp *string `pulumi:"switchControllerOffloadIp"`
	// Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface. Valid values: `disable`, `enable`.
	SwitchControllerRspanMode *string `pulumi:"switchControllerRspanMode"`
	// Source IP address used in FortiLink over L3 connections. Valid values: `outbound`, `fixed`.
	SwitchControllerSourceIp *string `pulumi:"switchControllerSourceIp"`
	// Switch controller traffic policy for the VLAN.
	SwitchControllerTrafficPolicy *string `pulumi:"switchControllerTrafficPolicy"`
	// Define a system ID for the aggregate interface.
	SystemId *string `pulumi:"systemId"`
	// Method in which system ID is generated. Valid values: `auto`, `user`.
	SystemIdType *string `pulumi:"systemIdType"`
	// Config object tagging. The structure of `tagging` block is documented below.
	Taggings []InterfaceTagging `pulumi:"taggings"`
	// TCP maximum segment size. 0 means do not change segment size.
	TcpMss *int `pulumi:"tcpMss"`
	// Enable/disable VLAN trunk. Valid values: `enable`, `disable`.
	Trunk *string `pulumi:"trunk"`
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp1 *string `pulumi:"trustIp1"`
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp2 *string `pulumi:"trustIp2"`
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp3 *string `pulumi:"trustIp3"`
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp61 *string `pulumi:"trustIp61"`
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp62 *string `pulumi:"trustIp62"`
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp63 *string `pulumi:"trustIp63"`
	// Interface type.
	Type *string `pulumi:"type"`
	// Username of the PPPoE account, provided by your ISP.
	Username *string `pulumi:"username"`
	// Interface is in this virtual domain (VDOM).
	Vdom string `pulumi:"vdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Switch control interface VLAN ID.
	Vindex *int `pulumi:"vindex"`
	// Ethernet protocol of VLAN. Valid values: `8021q`, `8021ad`.
	VlanProtocol *string `pulumi:"vlanProtocol"`
	// Enable/disable traffic forwarding between VLANs on this interface. Valid values: `enable`, `disable`.
	Vlanforward *string `pulumi:"vlanforward"`
	// VLAN ID (1 - 4094).
	Vlanid *int `pulumi:"vlanid"`
	// Virtual Routing Forwarding ID.
	Vrf *int `pulumi:"vrf"`
	// Enable/disable use of virtual MAC for VRRP. Valid values: `enable`, `disable`.
	VrrpVirtualMac *string `pulumi:"vrrpVirtualMac"`
	// VRRP configuration. The structure of `vrrp` block is documented below.
	Vrrps []InterfaceVrrp `pulumi:"vrrps"`
	// Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers. Valid values: `enable`, `disable`.
	Wccp *string `pulumi:"wccp"`
	// Default weight for static routes (if route has no weight configured).
	Weight *int `pulumi:"weight"`
	// WINS server IP.
	WinsIp *string `pulumi:"winsIp"`
}

// The set of arguments for constructing a Interface resource.
type InterfaceArgs struct {
	// PPPoE server name.
	AcName pulumi.StringPtrInput
	// Aggregate interface.
	Aggregate pulumi.StringPtrInput
	// Type of aggregation. Valid values: `physical`, `vxlan`.
	AggregateType pulumi.StringPtrInput
	// Frame distribution algorithm.
	Algorithm pulumi.StringPtrInput
	// Alias will be displayed with the interface name to make it easier to distinguish.
	Alias pulumi.StringPtrInput
	// Permitted types of management access to this interface.
	Allowaccess pulumi.StringPtrInput
	// Enable/disable automatic registration of unknown FortiAP devices. Valid values: `enable`, `disable`.
	ApDiscover pulumi.StringPtrInput
	// Enable/disable ARP forwarding. Valid values: `enable`, `disable`.
	Arpforward pulumi.StringPtrInput
	// HTTPS server certificate.
	AuthCert pulumi.StringPtrInput
	// Address of captive portal.
	AuthPortalAddr pulumi.StringPtrInput
	// PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
	AuthType pulumi.StringPtrInput
	// Enable/disable automatic authorization of dedicated Fortinet extension device on this interface. Valid values: `enable`, `disable`.
	AutoAuthExtensionDevice pulumi.StringPtrInput
	// Indicates whether the interface is automatically created by FortiGate, for example, created during the VPN creation process. If it is, set it to "auto", else keep it empty.
	Autogenerated pulumi.StringPtrInput
	// Bandwidth measure time
	BandwidthMeasureTime pulumi.IntPtrInput
	// Bidirectional Forwarding Detection (BFD) settings. Valid values: `global`, `enable`, `disable`.
	Bfd pulumi.StringPtrInput
	// BFD desired minimal transmit interval.
	BfdDesiredMinTx pulumi.IntPtrInput
	// BFD detection multiplier.
	BfdDetectMult pulumi.IntPtrInput
	// BFD required minimal receive interval.
	BfdRequiredMinRx pulumi.IntPtrInput
	// Enable/disable broadcasting FortiClient discovery messages. Valid values: `enable`, `disable`.
	BroadcastForticlientDiscovery pulumi.StringPtrInput
	// Enable/disable broadcast forwarding. Valid values: `enable`, `disable`.
	BroadcastForward pulumi.StringPtrInput
	// Enable/disable captive portal.
	CaptivePortal pulumi.IntPtrInput
	// CLI connection status.
	CliConnStatus pulumi.IntPtrInput
	// DHCP client options. The structure of `clientOptions` block is documented below.
	ClientOptions InterfaceClientOptionArrayInput
	// Color of icon on the GUI.
	Color pulumi.IntPtrInput
	// Configure interface for single purpose. Valid values: `none`, `management`.
	DedicatedTo pulumi.StringPtrInput
	// default purdue level of device detected on this interface. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
	DefaultPurdueLevel pulumi.StringPtrInput
	// Enable to get the gateway IP from the DHCP or PPPoE server. Valid values: `enable`, `disable`.
	Defaultgw pulumi.StringPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// MTU of detected peer (0 - 4294967295).
	DetectedPeerMtu pulumi.IntPtrInput
	// Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
	Detectprotocol pulumi.StringPtrInput
	// Gateway's ping server for this IP.
	Detectserver pulumi.StringPtrInput
	// Device access list.
	DeviceAccessList pulumi.StringPtrInput
	// Enable/disable passively gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
	DeviceIdentification pulumi.StringPtrInput
	// Enable/disable active gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
	DeviceIdentificationActiveScan pulumi.StringPtrInput
	// Enable/disable inclusion of devices detected on this interface in network vulnerability scans. Valid values: `disable`, `enable`.
	DeviceNetscan pulumi.StringPtrInput
	// Enable/disable passive gathering of user identity information about users on this interface. Valid values: `enable`, `disable`.
	DeviceUserIdentification pulumi.StringPtrInput
	// Device Index.
	Devindex pulumi.IntPtrInput
	// Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable). Valid values: `disable`, `enable`.
	DhcpBroadcastFlag pulumi.StringPtrInput
	// Enable/disable addition of classless static routes retrieved from DHCP server. Valid values: `enable`, `disable`.
	DhcpClasslessRouteAddition pulumi.StringPtrInput
	// DHCP client identifier.
	DhcpClientIdentifier pulumi.StringPtrInput
	// Enable/disable DHCP relay agent option. Valid values: `enable`, `disable`.
	DhcpRelayAgentOption pulumi.StringPtrInput
	// DHCP relay circuit ID.
	DhcpRelayCircuitId pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	DhcpRelayInterface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	DhcpRelayInterfaceSelectMethod pulumi.StringPtrInput
	// DHCP relay IP address.
	DhcpRelayIp pulumi.StringPtrInput
	// DHCP relay link selection.
	DhcpRelayLinkSelection pulumi.StringPtrInput
	// Enable/disable sending DHCP request to all servers. Valid values: `disable`, `enable`.
	DhcpRelayRequestAllServer pulumi.StringPtrInput
	// Enable/disable allowing this interface to act as a DHCP relay. Valid values: `disable`, `enable`.
	DhcpRelayService pulumi.StringPtrInput
	// IP address used by the DHCP relay as its source IP.
	DhcpRelaySourceIp pulumi.StringPtrInput
	// DHCP relay type (regular or IPsec). Valid values: `regular`, `ipsec`.
	DhcpRelayType pulumi.StringPtrInput
	// DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
	DhcpRenewTime pulumi.IntPtrInput
	// Enable/disable DHCP smart relay. Valid values: `disable`, `enable`.
	DhcpSmartRelay pulumi.StringPtrInput
	// Configure DHCP server access list. The structure of `dhcpSnoopingServerList` block is documented below.
	DhcpSnoopingServerLists InterfaceDhcpSnoopingServerListArrayInput
	// Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
	DiscRetryTimeout pulumi.IntPtrInput
	// Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
	DisconnectThreshold pulumi.IntPtrInput
	// Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
	Distance pulumi.IntPtrInput
	// Enable/disable use DNS acquired by DHCP or PPPoE. Valid values: `enable`, `disable`.
	DnsServerOverride pulumi.StringPtrInput
	// DNS transport protocols. Valid values: `cleartext`, `dot`, `doh`.
	DnsServerProtocol pulumi.StringPtrInput
	// Enable/disable drop fragment packets. Valid values: `enable`, `disable`.
	DropFragment pulumi.StringPtrInput
	// Enable/disable drop overlapped fragment packets. Valid values: `enable`, `disable`.
	DropOverlappedFragment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// EAP CA certificate name.
	EapCaCert pulumi.StringPtrInput
	// EAP identity.
	EapIdentity pulumi.StringPtrInput
	// EAP method. Valid values: `tls`, `peap`.
	EapMethod pulumi.StringPtrInput
	// EAP password.
	EapPassword pulumi.StringPtrInput
	// Enable/disable EAP-Supplicant. Valid values: `enable`, `disable`.
	EapSupplicant pulumi.StringPtrInput
	// EAP user certificate name.
	EapUserCert pulumi.StringPtrInput
	// Outgoing traffic shaping profile.
	EgressShapingProfile pulumi.StringPtrInput
	// Enable/disable endpoint compliance enforcement. Valid values: `enable`, `disable`.
	EndpointCompliance pulumi.StringPtrInput
	// Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
	EstimatedDownstreamBandwidth pulumi.IntPtrInput
	// Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
	EstimatedUpstreamBandwidth pulumi.IntPtrInput
	// Enable/disable the explicit FTP proxy on this interface. Valid values: `enable`, `disable`.
	ExplicitFtpProxy pulumi.StringPtrInput
	// Enable/disable the explicit web proxy on this interface. Valid values: `enable`, `disable`.
	ExplicitWebProxy pulumi.StringPtrInput
	// Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet). Valid values: `enable`, `disable`.
	External pulumi.StringPtrInput
	// Action on extender when interface fail . Valid values: `soft-restart`, `hard-restart`, `reboot`.
	FailActionOnExtender pulumi.StringPtrInput
	// Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `failAlertInterfaces` block is documented below.
	FailAlertInterfaces InterfaceFailAlertInterfaceArrayInput
	// Select link-failed-signal or link-down method to alert about a failed link. Valid values: `link-failed-signal`, `link-down`.
	FailAlertMethod pulumi.StringPtrInput
	// Enable/disable fail detection features for this interface. Valid values: `enable`, `disable`.
	FailDetect pulumi.StringPtrInput
	// Options for detecting that this interface has failed. Valid values: `detectserver`, `link-down`.
	FailDetectOption pulumi.StringPtrInput
	// Enable/disable FortiHeartBeat (FortiTelemetry on GUI). Valid values: `enable`, `disable`.
	Fortiheartbeat pulumi.StringPtrInput
	// Enable FortiLink to dedicate this interface to manage other Fortinet devices. Valid values: `enable`, `disable`.
	Fortilink pulumi.StringPtrInput
	// fortilink split interface backup link.
	FortilinkBackupLink pulumi.IntPtrInput
	// Protocol for FortiGate neighbor discovery. Valid values: `lldp`, `fortilink`.
	FortilinkNeighborDetect pulumi.StringPtrInput
	// Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy. Valid values: `enable`, `disable`.
	FortilinkSplitInterface pulumi.StringPtrInput
	// Enable/disable FortiLink switch-stacking on this interface. Valid values: `enable`, `disable`.
	FortilinkStacking pulumi.StringPtrInput
	// Transparent mode forward domain.
	ForwardDomain pulumi.IntPtrInput
	// Configure forward error correction (FEC). Valid values: `none`, `disable`, `cl91-rs-fec`, `cl74-fc-fec`.
	ForwardErrorCorrection pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
	Gwdetect pulumi.StringPtrInput
	// HA election priority for the PING server.
	HaPriority pulumi.IntPtrInput
	// Enable/disable ICMP accept redirect. Valid values: `enable`, `disable`.
	IcmpAcceptRedirect pulumi.StringPtrInput
	// Enable/disable ICMP send redirect. Valid values: `enable`, `disable`.
	IcmpSendRedirect pulumi.StringPtrInput
	// Enable/disable authentication for this interface. Valid values: `enable`, `disable`.
	IdentAccept pulumi.StringPtrInput
	// PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
	IdleTimeout pulumi.IntPtrInput
	// Configure IKE authentication SAML server.
	IkeSamlServer pulumi.StringPtrInput
	// Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
	Inbandwidth pulumi.IntPtrInput
	// Incoming traffic shaping profile.
	IngressShapingProfile pulumi.StringPtrInput
	// Ingress Spillover threshold (0 - 16776000 kbps).
	IngressSpilloverThreshold pulumi.IntPtrInput
	// Interface name.
	Interface pulumi.StringPtrInput
	// Implicitly created.
	Internal pulumi.IntPtrInput
	// Interface IPv4 address and subnet mask, syntax: X.X.X.X/24.
	Ip pulumi.StringPtrInput
	// Enable/disable automatic IP address assignment of this interface by FortiIPAM.
	IpManagedByFortiipam pulumi.StringPtrInput
	// Enable/disable IP/MAC binding. Valid values: `enable`, `disable`.
	Ipmac pulumi.StringPtrInput
	// Enable/disable the use of this interface as a one-armed sniffer. Valid values: `enable`, `disable`.
	IpsSnifferMode pulumi.StringPtrInput
	// Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
	Ipunnumbered pulumi.StringPtrInput
	// IPv6 of interface. The structure of `ipv6` block is documented below.
	Ipv6 InterfaceIpv6PtrInput
	// Enable/disable l2 forwarding. Valid values: `enable`, `disable`.
	L2forward pulumi.StringPtrInput
	// LACP HA secondary member. Valid values: `enable`, `disable`.
	LacpHaSecondary pulumi.StringPtrInput
	// LACP HA slave. Valid values: `enable`, `disable`.
	LacpHaSlave pulumi.StringPtrInput
	// LACP mode. Valid values: `static`, `passive`, `active`.
	LacpMode pulumi.StringPtrInput
	// How often the interface sends LACP messages. Valid values: `slow`, `fast`.
	LacpSpeed pulumi.StringPtrInput
	// Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
	LcpEchoInterval pulumi.IntPtrInput
	// Maximum missed LCP echo messages before disconnect.
	LcpMaxEchoFails pulumi.IntPtrInput
	// Number of milliseconds to wait before considering a link is up.
	LinkUpDelay pulumi.IntPtrInput
	// LLDP-MED network policy profile.
	LldpNetworkPolicy pulumi.StringPtrInput
	// Enable/disable Link Layer Discovery Protocol (LLDP) reception. Valid values: `enable`, `disable`, `vdom`.
	LldpReception pulumi.StringPtrInput
	// Enable/disable Link Layer Discovery Protocol (LLDP) transmission. Valid values: `enable`, `disable`, `vdom`.
	LldpTransmission pulumi.StringPtrInput
	// Change the interface's MAC address.
	Macaddr pulumi.StringPtrInput
	// Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managedDevice` block is documented below.
	ManagedDevices InterfaceManagedDeviceArrayInput
	// Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
	ManagedSubnetworkSize pulumi.StringPtrInput
	// High Availability in-band management IP address of this interface.
	ManagementIp pulumi.StringPtrInput
	// Measured downstream bandwidth (kbps).
	MeasuredDownstreamBandwidth pulumi.IntPtrInput
	// Measured upstream bandwidth (kbps).
	MeasuredUpstreamBandwidth pulumi.IntPtrInput
	// Select SFP media interface type Valid values: `none`, `gmii`, `sgmii`, `sr`, `lr`, `cr`, `sr4`, `lr4`, `cr4`.
	Mediatype pulumi.StringPtrInput
	// Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
	Members InterfaceMemberArrayInput
	// Minimum number of aggregated ports that must be up.
	MinLinks pulumi.IntPtrInput
	// Action to take when less than the configured minimum number of links are active. Valid values: `operational`, `administrative`.
	MinLinksDown pulumi.StringPtrInput
	// Addressing mode (static, DHCP, PPPoE). Valid values: `static`, `dhcp`, `pppoe`.
	Mode pulumi.StringPtrInput
	// Enable monitoring bandwidth on this interface. Valid values: `enable`, `disable`.
	MonitorBandwidth pulumi.StringPtrInput
	// MTU value for this interface.
	Mtu pulumi.IntPtrInput
	// Enable to set a custom MTU for this interface. Valid values: `enable`, `disable`.
	MtuOverride pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Enable/disable NDISC forwarding. Valid values: `enable`, `disable`.
	Ndiscforward pulumi.StringPtrInput
	// Enable/disable NETBIOS forwarding. Valid values: `disable`, `enable`.
	NetbiosForward pulumi.StringPtrInput
	// Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both). Valid values: `disable`, `tx`, `rx`, `both`.
	NetflowSampler pulumi.StringPtrInput
	// Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
	Outbandwidth pulumi.IntPtrInput
	// PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
	PadtRetryTimeout pulumi.IntPtrInput
	// PPPoE account's password.
	Password pulumi.StringPtrInput
	// PING server status.
	PingServStatus pulumi.IntPtrInput
	// sFlow polling interval (1 - 255 sec).
	PollingInterval pulumi.IntPtrInput
	// Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
	PppoeUnnumberedNegotiate pulumi.StringPtrInput
	// PPTP authentication type. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
	PptpAuthType pulumi.StringPtrInput
	// Enable/disable PPTP client. Valid values: `enable`, `disable`.
	PptpClient pulumi.StringPtrInput
	// PPTP password.
	PptpPassword pulumi.StringPtrInput
	// PPTP server IP address.
	PptpServerIp pulumi.StringPtrInput
	// Idle timer in minutes (0 for disabled).
	PptpTimeout pulumi.IntPtrInput
	// PPTP user name.
	PptpUser pulumi.StringPtrInput
	// Enable/disable preservation of session route when dirty. Valid values: `enable`, `disable`.
	PreserveSessionRoute pulumi.StringPtrInput
	// Priority of learned routes.
	Priority pulumi.IntPtrInput
	// Enable/disable fail back to higher priority port once recovered. Valid values: `enable`, `disable`.
	PriorityOverride pulumi.StringPtrInput
	// Enable/disable proxy captive portal on this interface. Valid values: `enable`, `disable`.
	ProxyCaptivePortal pulumi.StringPtrInput
	// IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
	ReachableTime pulumi.IntPtrInput
	// Redundant interface.
	RedundantInterface pulumi.StringPtrInput
	// Remote IP address of tunnel.
	RemoteIp pulumi.StringPtrInput
	// Replacement message override group.
	ReplacemsgOverrideGroup pulumi.StringPtrInput
	// RX ring size.
	RingRx pulumi.IntPtrInput
	// TX ring size.
	RingTx pulumi.IntPtrInput
	// Interface role. Valid values: `lan`, `wan`, `dmz`, `undefined`.
	Role pulumi.StringPtrInput
	// Data that NetFlow collects (rx, tx, or both). Valid values: `tx`, `rx`, `both`.
	SampleDirection pulumi.StringPtrInput
	// sFlow sample rate (10 - 99999).
	SampleRate pulumi.IntPtrInput
	// Enable monitoring or blocking connections to Botnet servers through this interface. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Enable/disable adding a secondary IP to this interface. Valid values: `enable`, `disable`.
	SecondaryIp pulumi.StringPtrInput
	// Second IP address of interface. The structure of `secondaryip` block is documented below.
	Secondaryips InterfaceSecondaryipArrayInput
	// Name of security-exempt-list.
	SecurityExemptList pulumi.StringPtrInput
	// URL of external authentication logout server.
	SecurityExternalLogout pulumi.StringPtrInput
	// URL of external authentication web server.
	SecurityExternalWeb pulumi.StringPtrInput
	// User groups that can authenticate with the captive portal. The structure of `securityGroups` block is documented below.
	SecurityGroups InterfaceSecurityGroupArrayInput
	// Enable/disable MAC authentication bypass. Valid values: `mac-auth-only`, `enable`, `disable`.
	SecurityMacAuthBypass pulumi.StringPtrInput
	// Turn on captive portal authentication for this interface. Valid values: `none`, `captive-portal`, `802.1X`.
	SecurityMode pulumi.StringPtrInput
	// URL redirection after disclaimer/authentication.
	SecurityRedirectUrl pulumi.StringPtrInput
	// PPPoE service name.
	ServiceName pulumi.StringPtrInput
	// Enable/disable sFlow on this interface. Valid values: `enable`, `disable`.
	SflowSampler pulumi.StringPtrInput
	// Permanent SNMP Index of the interface.
	SnmpIndex pulumi.IntPtrInput
	// Interface speed. The default setting and the options available depend on the interface hardware.
	Speed pulumi.StringPtrInput
	// Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
	SpilloverThreshold pulumi.IntPtrInput
	// Enable/disable source IP check. Valid values: `enable`, `disable`.
	SrcCheck pulumi.StringPtrInput
	// Bring the interface up or shut the interface down. Valid values: `up`, `down`.
	Status pulumi.StringPtrInput
	// Enable/disable STP. Valid values: `disable`, `enable`.
	Stp pulumi.StringPtrInput
	// Control STP behaviour on HA secondary. Valid values: `disable`, `enable`, `priority-adjust`.
	StpHaSecondary pulumi.StringPtrInput
	// Enable/disable STP forwarding. Valid values: `enable`, `disable`.
	Stpforward pulumi.StringPtrInput
	// Configure STP forwarding mode. Valid values: `rpl-all-ext-id`, `rpl-bridge-ext-id`, `rpl-nothing`.
	StpforwardMode pulumi.StringPtrInput
	// Enable to always send packets from this interface to a destination MAC address. Valid values: `enable`, `disable`.
	Subst pulumi.StringPtrInput
	// Destination MAC address that all packets are sent to from this interface.
	SubstituteDstMac pulumi.StringPtrInput
	// Initial create for switch-controller VLANs.
	SwcFirstCreate pulumi.IntPtrInput
	// Creation status for switch-controller VLANs.
	SwcVlan pulumi.IntPtrInput
	// Contained in switch.
	Switch pulumi.StringPtrInput
	// Block FortiSwitch port-to-port traffic. Valid values: `enable`, `disable`.
	SwitchControllerAccessVlan pulumi.StringPtrInput
	// Enable/disable FortiSwitch ARP inspection. Valid values: `enable`, `disable`.
	SwitchControllerArpInspection pulumi.StringPtrInput
	// Switch controller DHCP snooping. Valid values: `enable`, `disable`.
	SwitchControllerDhcpSnooping pulumi.StringPtrInput
	// Switch controller DHCP snooping option82. Valid values: `enable`, `disable`.
	SwitchControllerDhcpSnoopingOption82 pulumi.StringPtrInput
	// Switch controller DHCP snooping verify MAC. Valid values: `enable`, `disable`.
	SwitchControllerDhcpSnoopingVerifyMac pulumi.StringPtrInput
	// Integrated FortiLink settings for managed FortiSwitch.
	SwitchControllerDynamic pulumi.StringPtrInput
	// Interface's purpose when assigning traffic (read only).
	SwitchControllerFeature pulumi.StringPtrInput
	// Switch controller IGMP snooping. Valid values: `enable`, `disable`.
	SwitchControllerIgmpSnooping pulumi.StringPtrInput
	// Switch controller IGMP snooping fast-leave. Valid values: `enable`, `disable`.
	SwitchControllerIgmpSnoopingFastLeave pulumi.StringPtrInput
	// Switch controller IGMP snooping proxy. Valid values: `enable`, `disable`.
	SwitchControllerIgmpSnoopingProxy pulumi.StringPtrInput
	// Enable/disable managed FortiSwitch IoT scanning. Valid values: `enable`, `disable`.
	SwitchControllerIotScanning pulumi.StringPtrInput
	// Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
	SwitchControllerLearningLimit pulumi.IntPtrInput
	// VLAN to use for FortiLink management purposes.
	SwitchControllerMgmtVlan pulumi.IntPtrInput
	// Integrated NAC settings for managed FortiSwitch.
	SwitchControllerNac pulumi.StringPtrInput
	// NetFlow collection and processing. Valid values: `disable`, `enable`.
	SwitchControllerNetflowCollect pulumi.StringPtrInput
	// Enable/disable managed FortiSwitch routing offload. Valid values: `enable`, `disable`.
	SwitchControllerOffload pulumi.StringPtrInput
	// Enable/disable managed FortiSwitch routing offload gateway. Valid values: `enable`, `disable`.
	SwitchControllerOffloadGw pulumi.StringPtrInput
	// IP for routing offload on FortiSwitch.
	SwitchControllerOffloadIp pulumi.StringPtrInput
	// Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface. Valid values: `disable`, `enable`.
	SwitchControllerRspanMode pulumi.StringPtrInput
	// Source IP address used in FortiLink over L3 connections. Valid values: `outbound`, `fixed`.
	SwitchControllerSourceIp pulumi.StringPtrInput
	// Switch controller traffic policy for the VLAN.
	SwitchControllerTrafficPolicy pulumi.StringPtrInput
	// Define a system ID for the aggregate interface.
	SystemId pulumi.StringPtrInput
	// Method in which system ID is generated. Valid values: `auto`, `user`.
	SystemIdType pulumi.StringPtrInput
	// Config object tagging. The structure of `tagging` block is documented below.
	Taggings InterfaceTaggingArrayInput
	// TCP maximum segment size. 0 means do not change segment size.
	TcpMss pulumi.IntPtrInput
	// Enable/disable VLAN trunk. Valid values: `enable`, `disable`.
	Trunk pulumi.StringPtrInput
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp1 pulumi.StringPtrInput
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp2 pulumi.StringPtrInput
	// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
	TrustIp3 pulumi.StringPtrInput
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp61 pulumi.StringPtrInput
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp62 pulumi.StringPtrInput
	// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
	TrustIp63 pulumi.StringPtrInput
	// Interface type.
	Type pulumi.StringPtrInput
	// Username of the PPPoE account, provided by your ISP.
	Username pulumi.StringPtrInput
	// Interface is in this virtual domain (VDOM).
	Vdom pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Switch control interface VLAN ID.
	Vindex pulumi.IntPtrInput
	// Ethernet protocol of VLAN. Valid values: `8021q`, `8021ad`.
	VlanProtocol pulumi.StringPtrInput
	// Enable/disable traffic forwarding between VLANs on this interface. Valid values: `enable`, `disable`.
	Vlanforward pulumi.StringPtrInput
	// VLAN ID (1 - 4094).
	Vlanid pulumi.IntPtrInput
	// Virtual Routing Forwarding ID.
	Vrf pulumi.IntPtrInput
	// Enable/disable use of virtual MAC for VRRP. Valid values: `enable`, `disable`.
	VrrpVirtualMac pulumi.StringPtrInput
	// VRRP configuration. The structure of `vrrp` block is documented below.
	Vrrps InterfaceVrrpArrayInput
	// Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers. Valid values: `enable`, `disable`.
	Wccp pulumi.StringPtrInput
	// Default weight for static routes (if route has no weight configured).
	Weight pulumi.IntPtrInput
	// WINS server IP.
	WinsIp pulumi.StringPtrInput
}

func (InterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceArgs)(nil)).Elem()
}

type InterfaceInput interface {
	pulumi.Input

	ToInterfaceOutput() InterfaceOutput
	ToInterfaceOutputWithContext(ctx context.Context) InterfaceOutput
}

func (*Interface) ElementType() reflect.Type {
	return reflect.TypeOf((**Interface)(nil)).Elem()
}

func (i *Interface) ToInterfaceOutput() InterfaceOutput {
	return i.ToInterfaceOutputWithContext(context.Background())
}

func (i *Interface) ToInterfaceOutputWithContext(ctx context.Context) InterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceOutput)
}

// InterfaceArrayInput is an input type that accepts InterfaceArray and InterfaceArrayOutput values.
// You can construct a concrete instance of `InterfaceArrayInput` via:
//
//	InterfaceArray{ InterfaceArgs{...} }
type InterfaceArrayInput interface {
	pulumi.Input

	ToInterfaceArrayOutput() InterfaceArrayOutput
	ToInterfaceArrayOutputWithContext(context.Context) InterfaceArrayOutput
}

type InterfaceArray []InterfaceInput

func (InterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Interface)(nil)).Elem()
}

func (i InterfaceArray) ToInterfaceArrayOutput() InterfaceArrayOutput {
	return i.ToInterfaceArrayOutputWithContext(context.Background())
}

func (i InterfaceArray) ToInterfaceArrayOutputWithContext(ctx context.Context) InterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceArrayOutput)
}

// InterfaceMapInput is an input type that accepts InterfaceMap and InterfaceMapOutput values.
// You can construct a concrete instance of `InterfaceMapInput` via:
//
//	InterfaceMap{ "key": InterfaceArgs{...} }
type InterfaceMapInput interface {
	pulumi.Input

	ToInterfaceMapOutput() InterfaceMapOutput
	ToInterfaceMapOutputWithContext(context.Context) InterfaceMapOutput
}

type InterfaceMap map[string]InterfaceInput

func (InterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Interface)(nil)).Elem()
}

func (i InterfaceMap) ToInterfaceMapOutput() InterfaceMapOutput {
	return i.ToInterfaceMapOutputWithContext(context.Background())
}

func (i InterfaceMap) ToInterfaceMapOutputWithContext(ctx context.Context) InterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceMapOutput)
}

type InterfaceOutput struct{ *pulumi.OutputState }

func (InterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Interface)(nil)).Elem()
}

func (o InterfaceOutput) ToInterfaceOutput() InterfaceOutput {
	return o
}

func (o InterfaceOutput) ToInterfaceOutputWithContext(ctx context.Context) InterfaceOutput {
	return o
}

// PPPoE server name.
func (o InterfaceOutput) AcName() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.AcName }).(pulumi.StringOutput)
}

// Aggregate interface.
func (o InterfaceOutput) Aggregate() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Aggregate }).(pulumi.StringOutput)
}

// Type of aggregation. Valid values: `physical`, `vxlan`.
func (o InterfaceOutput) AggregateType() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.AggregateType }).(pulumi.StringOutput)
}

// Frame distribution algorithm.
func (o InterfaceOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Algorithm }).(pulumi.StringOutput)
}

// Alias will be displayed with the interface name to make it easier to distinguish.
func (o InterfaceOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

// Permitted types of management access to this interface.
func (o InterfaceOutput) Allowaccess() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Allowaccess }).(pulumi.StringOutput)
}

// Enable/disable automatic registration of unknown FortiAP devices. Valid values: `enable`, `disable`.
func (o InterfaceOutput) ApDiscover() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.ApDiscover }).(pulumi.StringOutput)
}

// Enable/disable ARP forwarding. Valid values: `enable`, `disable`.
func (o InterfaceOutput) Arpforward() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Arpforward }).(pulumi.StringOutput)
}

// HTTPS server certificate.
func (o InterfaceOutput) AuthCert() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.AuthCert }).(pulumi.StringOutput)
}

// Address of captive portal.
func (o InterfaceOutput) AuthPortalAddr() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.AuthPortalAddr }).(pulumi.StringOutput)
}

// PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
func (o InterfaceOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.AuthType }).(pulumi.StringOutput)
}

// Enable/disable automatic authorization of dedicated Fortinet extension device on this interface. Valid values: `enable`, `disable`.
func (o InterfaceOutput) AutoAuthExtensionDevice() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.AutoAuthExtensionDevice }).(pulumi.StringOutput)
}

// Indicates whether the interface is automatically created by FortiGate, for example, created during the VPN creation process. If it is, set it to "auto", else keep it empty.
func (o InterfaceOutput) Autogenerated() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Autogenerated }).(pulumi.StringOutput)
}

// Bandwidth measure time
func (o InterfaceOutput) BandwidthMeasureTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.BandwidthMeasureTime }).(pulumi.IntOutput)
}

// Bidirectional Forwarding Detection (BFD) settings. Valid values: `global`, `enable`, `disable`.
func (o InterfaceOutput) Bfd() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Bfd }).(pulumi.StringOutput)
}

// BFD desired minimal transmit interval.
func (o InterfaceOutput) BfdDesiredMinTx() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.BfdDesiredMinTx }).(pulumi.IntOutput)
}

// BFD detection multiplier.
func (o InterfaceOutput) BfdDetectMult() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.BfdDetectMult }).(pulumi.IntOutput)
}

// BFD required minimal receive interval.
func (o InterfaceOutput) BfdRequiredMinRx() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.BfdRequiredMinRx }).(pulumi.IntOutput)
}

// Enable/disable broadcasting FortiClient discovery messages. Valid values: `enable`, `disable`.
func (o InterfaceOutput) BroadcastForticlientDiscovery() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.BroadcastForticlientDiscovery }).(pulumi.StringOutput)
}

// Enable/disable broadcast forwarding. Valid values: `enable`, `disable`.
func (o InterfaceOutput) BroadcastForward() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.BroadcastForward }).(pulumi.StringOutput)
}

// Enable/disable captive portal.
func (o InterfaceOutput) CaptivePortal() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.CaptivePortal }).(pulumi.IntOutput)
}

// CLI connection status.
func (o InterfaceOutput) CliConnStatus() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.CliConnStatus }).(pulumi.IntOutput)
}

// DHCP client options. The structure of `clientOptions` block is documented below.
func (o InterfaceOutput) ClientOptions() InterfaceClientOptionArrayOutput {
	return o.ApplyT(func(v *Interface) InterfaceClientOptionArrayOutput { return v.ClientOptions }).(InterfaceClientOptionArrayOutput)
}

// Color of icon on the GUI.
func (o InterfaceOutput) Color() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.Color }).(pulumi.IntOutput)
}

// Configure interface for single purpose. Valid values: `none`, `management`.
func (o InterfaceOutput) DedicatedTo() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DedicatedTo }).(pulumi.StringOutput)
}

// default purdue level of device detected on this interface. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
func (o InterfaceOutput) DefaultPurdueLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DefaultPurdueLevel }).(pulumi.StringOutput)
}

// Enable to get the gateway IP from the DHCP or PPPoE server. Valid values: `enable`, `disable`.
func (o InterfaceOutput) Defaultgw() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Defaultgw }).(pulumi.StringOutput)
}

// Description.
func (o InterfaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// MTU of detected peer (0 - 4294967295).
func (o InterfaceOutput) DetectedPeerMtu() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.DetectedPeerMtu }).(pulumi.IntOutput)
}

// Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
func (o InterfaceOutput) Detectprotocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Detectprotocol }).(pulumi.StringOutput)
}

// Gateway's ping server for this IP.
func (o InterfaceOutput) Detectserver() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Detectserver }).(pulumi.StringOutput)
}

// Device access list.
func (o InterfaceOutput) DeviceAccessList() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DeviceAccessList }).(pulumi.StringOutput)
}

// Enable/disable passively gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
func (o InterfaceOutput) DeviceIdentification() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DeviceIdentification }).(pulumi.StringOutput)
}

// Enable/disable active gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
func (o InterfaceOutput) DeviceIdentificationActiveScan() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DeviceIdentificationActiveScan }).(pulumi.StringOutput)
}

// Enable/disable inclusion of devices detected on this interface in network vulnerability scans. Valid values: `disable`, `enable`.
func (o InterfaceOutput) DeviceNetscan() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DeviceNetscan }).(pulumi.StringOutput)
}

// Enable/disable passive gathering of user identity information about users on this interface. Valid values: `enable`, `disable`.
func (o InterfaceOutput) DeviceUserIdentification() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DeviceUserIdentification }).(pulumi.StringOutput)
}

// Device Index.
func (o InterfaceOutput) Devindex() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.Devindex }).(pulumi.IntOutput)
}

// Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable). Valid values: `disable`, `enable`.
func (o InterfaceOutput) DhcpBroadcastFlag() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DhcpBroadcastFlag }).(pulumi.StringOutput)
}

// Enable/disable addition of classless static routes retrieved from DHCP server. Valid values: `enable`, `disable`.
func (o InterfaceOutput) DhcpClasslessRouteAddition() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DhcpClasslessRouteAddition }).(pulumi.StringOutput)
}

// DHCP client identifier.
func (o InterfaceOutput) DhcpClientIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DhcpClientIdentifier }).(pulumi.StringOutput)
}

// Enable/disable DHCP relay agent option. Valid values: `enable`, `disable`.
func (o InterfaceOutput) DhcpRelayAgentOption() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DhcpRelayAgentOption }).(pulumi.StringOutput)
}

// DHCP relay circuit ID.
func (o InterfaceOutput) DhcpRelayCircuitId() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DhcpRelayCircuitId }).(pulumi.StringOutput)
}

// Specify outgoing interface to reach server.
func (o InterfaceOutput) DhcpRelayInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DhcpRelayInterface }).(pulumi.StringOutput)
}

// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
func (o InterfaceOutput) DhcpRelayInterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DhcpRelayInterfaceSelectMethod }).(pulumi.StringOutput)
}

// DHCP relay IP address.
func (o InterfaceOutput) DhcpRelayIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DhcpRelayIp }).(pulumi.StringOutput)
}

// DHCP relay link selection.
func (o InterfaceOutput) DhcpRelayLinkSelection() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DhcpRelayLinkSelection }).(pulumi.StringOutput)
}

// Enable/disable sending DHCP request to all servers. Valid values: `disable`, `enable`.
func (o InterfaceOutput) DhcpRelayRequestAllServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DhcpRelayRequestAllServer }).(pulumi.StringOutput)
}

// Enable/disable allowing this interface to act as a DHCP relay. Valid values: `disable`, `enable`.
func (o InterfaceOutput) DhcpRelayService() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DhcpRelayService }).(pulumi.StringOutput)
}

// IP address used by the DHCP relay as its source IP.
func (o InterfaceOutput) DhcpRelaySourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DhcpRelaySourceIp }).(pulumi.StringOutput)
}

// DHCP relay type (regular or IPsec). Valid values: `regular`, `ipsec`.
func (o InterfaceOutput) DhcpRelayType() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DhcpRelayType }).(pulumi.StringOutput)
}

// DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
func (o InterfaceOutput) DhcpRenewTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.DhcpRenewTime }).(pulumi.IntOutput)
}

// Enable/disable DHCP smart relay. Valid values: `disable`, `enable`.
func (o InterfaceOutput) DhcpSmartRelay() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DhcpSmartRelay }).(pulumi.StringOutput)
}

// Configure DHCP server access list. The structure of `dhcpSnoopingServerList` block is documented below.
func (o InterfaceOutput) DhcpSnoopingServerLists() InterfaceDhcpSnoopingServerListArrayOutput {
	return o.ApplyT(func(v *Interface) InterfaceDhcpSnoopingServerListArrayOutput { return v.DhcpSnoopingServerLists }).(InterfaceDhcpSnoopingServerListArrayOutput)
}

// Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
func (o InterfaceOutput) DiscRetryTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.DiscRetryTimeout }).(pulumi.IntOutput)
}

// Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
func (o InterfaceOutput) DisconnectThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.DisconnectThreshold }).(pulumi.IntOutput)
}

// Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
func (o InterfaceOutput) Distance() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.Distance }).(pulumi.IntOutput)
}

// Enable/disable use DNS acquired by DHCP or PPPoE. Valid values: `enable`, `disable`.
func (o InterfaceOutput) DnsServerOverride() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DnsServerOverride }).(pulumi.StringOutput)
}

// DNS transport protocols. Valid values: `cleartext`, `dot`, `doh`.
func (o InterfaceOutput) DnsServerProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DnsServerProtocol }).(pulumi.StringOutput)
}

// Enable/disable drop fragment packets. Valid values: `enable`, `disable`.
func (o InterfaceOutput) DropFragment() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DropFragment }).(pulumi.StringOutput)
}

// Enable/disable drop overlapped fragment packets. Valid values: `enable`, `disable`.
func (o InterfaceOutput) DropOverlappedFragment() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.DropOverlappedFragment }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o InterfaceOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// EAP CA certificate name.
func (o InterfaceOutput) EapCaCert() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.EapCaCert }).(pulumi.StringOutput)
}

// EAP identity.
func (o InterfaceOutput) EapIdentity() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.EapIdentity }).(pulumi.StringOutput)
}

// EAP method. Valid values: `tls`, `peap`.
func (o InterfaceOutput) EapMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.EapMethod }).(pulumi.StringOutput)
}

// EAP password.
func (o InterfaceOutput) EapPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringPtrOutput { return v.EapPassword }).(pulumi.StringPtrOutput)
}

// Enable/disable EAP-Supplicant. Valid values: `enable`, `disable`.
func (o InterfaceOutput) EapSupplicant() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.EapSupplicant }).(pulumi.StringOutput)
}

// EAP user certificate name.
func (o InterfaceOutput) EapUserCert() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.EapUserCert }).(pulumi.StringOutput)
}

// Outgoing traffic shaping profile.
func (o InterfaceOutput) EgressShapingProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.EgressShapingProfile }).(pulumi.StringOutput)
}

// Enable/disable endpoint compliance enforcement. Valid values: `enable`, `disable`.
func (o InterfaceOutput) EndpointCompliance() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.EndpointCompliance }).(pulumi.StringOutput)
}

// Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
func (o InterfaceOutput) EstimatedDownstreamBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.EstimatedDownstreamBandwidth }).(pulumi.IntOutput)
}

// Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
func (o InterfaceOutput) EstimatedUpstreamBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.EstimatedUpstreamBandwidth }).(pulumi.IntOutput)
}

// Enable/disable the explicit FTP proxy on this interface. Valid values: `enable`, `disable`.
func (o InterfaceOutput) ExplicitFtpProxy() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.ExplicitFtpProxy }).(pulumi.StringOutput)
}

// Enable/disable the explicit web proxy on this interface. Valid values: `enable`, `disable`.
func (o InterfaceOutput) ExplicitWebProxy() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.ExplicitWebProxy }).(pulumi.StringOutput)
}

// Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet). Valid values: `enable`, `disable`.
func (o InterfaceOutput) External() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.External }).(pulumi.StringOutput)
}

// Action on extender when interface fail . Valid values: `soft-restart`, `hard-restart`, `reboot`.
func (o InterfaceOutput) FailActionOnExtender() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.FailActionOnExtender }).(pulumi.StringOutput)
}

// Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `failAlertInterfaces` block is documented below.
func (o InterfaceOutput) FailAlertInterfaces() InterfaceFailAlertInterfaceArrayOutput {
	return o.ApplyT(func(v *Interface) InterfaceFailAlertInterfaceArrayOutput { return v.FailAlertInterfaces }).(InterfaceFailAlertInterfaceArrayOutput)
}

// Select link-failed-signal or link-down method to alert about a failed link. Valid values: `link-failed-signal`, `link-down`.
func (o InterfaceOutput) FailAlertMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.FailAlertMethod }).(pulumi.StringOutput)
}

// Enable/disable fail detection features for this interface. Valid values: `enable`, `disable`.
func (o InterfaceOutput) FailDetect() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.FailDetect }).(pulumi.StringOutput)
}

// Options for detecting that this interface has failed. Valid values: `detectserver`, `link-down`.
func (o InterfaceOutput) FailDetectOption() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.FailDetectOption }).(pulumi.StringOutput)
}

// Enable/disable FortiHeartBeat (FortiTelemetry on GUI). Valid values: `enable`, `disable`.
func (o InterfaceOutput) Fortiheartbeat() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Fortiheartbeat }).(pulumi.StringOutput)
}

// Enable FortiLink to dedicate this interface to manage other Fortinet devices. Valid values: `enable`, `disable`.
func (o InterfaceOutput) Fortilink() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Fortilink }).(pulumi.StringOutput)
}

// fortilink split interface backup link.
func (o InterfaceOutput) FortilinkBackupLink() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.FortilinkBackupLink }).(pulumi.IntOutput)
}

// Protocol for FortiGate neighbor discovery. Valid values: `lldp`, `fortilink`.
func (o InterfaceOutput) FortilinkNeighborDetect() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.FortilinkNeighborDetect }).(pulumi.StringOutput)
}

// Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy. Valid values: `enable`, `disable`.
func (o InterfaceOutput) FortilinkSplitInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.FortilinkSplitInterface }).(pulumi.StringOutput)
}

// Enable/disable FortiLink switch-stacking on this interface. Valid values: `enable`, `disable`.
func (o InterfaceOutput) FortilinkStacking() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.FortilinkStacking }).(pulumi.StringOutput)
}

// Transparent mode forward domain.
func (o InterfaceOutput) ForwardDomain() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.ForwardDomain }).(pulumi.IntOutput)
}

// Configure forward error correction (FEC). Valid values: `none`, `disable`, `cl91-rs-fec`, `cl74-fc-fec`.
func (o InterfaceOutput) ForwardErrorCorrection() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.ForwardErrorCorrection }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o InterfaceOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
func (o InterfaceOutput) Gwdetect() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Gwdetect }).(pulumi.StringOutput)
}

// HA election priority for the PING server.
func (o InterfaceOutput) HaPriority() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.HaPriority }).(pulumi.IntOutput)
}

// Enable/disable ICMP accept redirect. Valid values: `enable`, `disable`.
func (o InterfaceOutput) IcmpAcceptRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.IcmpAcceptRedirect }).(pulumi.StringOutput)
}

// Enable/disable ICMP send redirect. Valid values: `enable`, `disable`.
func (o InterfaceOutput) IcmpSendRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.IcmpSendRedirect }).(pulumi.StringOutput)
}

// Enable/disable authentication for this interface. Valid values: `enable`, `disable`.
func (o InterfaceOutput) IdentAccept() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.IdentAccept }).(pulumi.StringOutput)
}

// PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
func (o InterfaceOutput) IdleTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.IdleTimeout }).(pulumi.IntOutput)
}

// Configure IKE authentication SAML server.
func (o InterfaceOutput) IkeSamlServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.IkeSamlServer }).(pulumi.StringOutput)
}

// Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
func (o InterfaceOutput) Inbandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.Inbandwidth }).(pulumi.IntOutput)
}

// Incoming traffic shaping profile.
func (o InterfaceOutput) IngressShapingProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.IngressShapingProfile }).(pulumi.StringOutput)
}

// Ingress Spillover threshold (0 - 16776000 kbps).
func (o InterfaceOutput) IngressSpilloverThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.IngressSpilloverThreshold }).(pulumi.IntOutput)
}

// Interface name.
func (o InterfaceOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Implicitly created.
func (o InterfaceOutput) Internal() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.Internal }).(pulumi.IntOutput)
}

// Interface IPv4 address and subnet mask, syntax: X.X.X.X/24.
func (o InterfaceOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// Enable/disable automatic IP address assignment of this interface by FortiIPAM.
func (o InterfaceOutput) IpManagedByFortiipam() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.IpManagedByFortiipam }).(pulumi.StringOutput)
}

// Enable/disable IP/MAC binding. Valid values: `enable`, `disable`.
func (o InterfaceOutput) Ipmac() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Ipmac }).(pulumi.StringOutput)
}

// Enable/disable the use of this interface as a one-armed sniffer. Valid values: `enable`, `disable`.
func (o InterfaceOutput) IpsSnifferMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.IpsSnifferMode }).(pulumi.StringOutput)
}

// Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
func (o InterfaceOutput) Ipunnumbered() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Ipunnumbered }).(pulumi.StringOutput)
}

// IPv6 of interface. The structure of `ipv6` block is documented below.
func (o InterfaceOutput) Ipv6() InterfaceIpv6Output {
	return o.ApplyT(func(v *Interface) InterfaceIpv6Output { return v.Ipv6 }).(InterfaceIpv6Output)
}

// Enable/disable l2 forwarding. Valid values: `enable`, `disable`.
func (o InterfaceOutput) L2forward() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.L2forward }).(pulumi.StringOutput)
}

// LACP HA secondary member. Valid values: `enable`, `disable`.
func (o InterfaceOutput) LacpHaSecondary() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.LacpHaSecondary }).(pulumi.StringOutput)
}

// LACP HA slave. Valid values: `enable`, `disable`.
func (o InterfaceOutput) LacpHaSlave() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.LacpHaSlave }).(pulumi.StringOutput)
}

// LACP mode. Valid values: `static`, `passive`, `active`.
func (o InterfaceOutput) LacpMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.LacpMode }).(pulumi.StringOutput)
}

// How often the interface sends LACP messages. Valid values: `slow`, `fast`.
func (o InterfaceOutput) LacpSpeed() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.LacpSpeed }).(pulumi.StringOutput)
}

// Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
func (o InterfaceOutput) LcpEchoInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.LcpEchoInterval }).(pulumi.IntOutput)
}

// Maximum missed LCP echo messages before disconnect.
func (o InterfaceOutput) LcpMaxEchoFails() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.LcpMaxEchoFails }).(pulumi.IntOutput)
}

// Number of milliseconds to wait before considering a link is up.
func (o InterfaceOutput) LinkUpDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.LinkUpDelay }).(pulumi.IntOutput)
}

// LLDP-MED network policy profile.
func (o InterfaceOutput) LldpNetworkPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.LldpNetworkPolicy }).(pulumi.StringOutput)
}

// Enable/disable Link Layer Discovery Protocol (LLDP) reception. Valid values: `enable`, `disable`, `vdom`.
func (o InterfaceOutput) LldpReception() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.LldpReception }).(pulumi.StringOutput)
}

// Enable/disable Link Layer Discovery Protocol (LLDP) transmission. Valid values: `enable`, `disable`, `vdom`.
func (o InterfaceOutput) LldpTransmission() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.LldpTransmission }).(pulumi.StringOutput)
}

// Change the interface's MAC address.
func (o InterfaceOutput) Macaddr() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Macaddr }).(pulumi.StringOutput)
}

// Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managedDevice` block is documented below.
func (o InterfaceOutput) ManagedDevices() InterfaceManagedDeviceArrayOutput {
	return o.ApplyT(func(v *Interface) InterfaceManagedDeviceArrayOutput { return v.ManagedDevices }).(InterfaceManagedDeviceArrayOutput)
}

// Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
func (o InterfaceOutput) ManagedSubnetworkSize() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.ManagedSubnetworkSize }).(pulumi.StringOutput)
}

// High Availability in-band management IP address of this interface.
func (o InterfaceOutput) ManagementIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.ManagementIp }).(pulumi.StringOutput)
}

// Measured downstream bandwidth (kbps).
func (o InterfaceOutput) MeasuredDownstreamBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.MeasuredDownstreamBandwidth }).(pulumi.IntOutput)
}

// Measured upstream bandwidth (kbps).
func (o InterfaceOutput) MeasuredUpstreamBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.MeasuredUpstreamBandwidth }).(pulumi.IntOutput)
}

// Select SFP media interface type Valid values: `none`, `gmii`, `sgmii`, `sr`, `lr`, `cr`, `sr4`, `lr4`, `cr4`.
func (o InterfaceOutput) Mediatype() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Mediatype }).(pulumi.StringOutput)
}

// Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
func (o InterfaceOutput) Members() InterfaceMemberArrayOutput {
	return o.ApplyT(func(v *Interface) InterfaceMemberArrayOutput { return v.Members }).(InterfaceMemberArrayOutput)
}

// Minimum number of aggregated ports that must be up.
func (o InterfaceOutput) MinLinks() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.MinLinks }).(pulumi.IntOutput)
}

// Action to take when less than the configured minimum number of links are active. Valid values: `operational`, `administrative`.
func (o InterfaceOutput) MinLinksDown() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.MinLinksDown }).(pulumi.StringOutput)
}

// Addressing mode (static, DHCP, PPPoE). Valid values: `static`, `dhcp`, `pppoe`.
func (o InterfaceOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Enable monitoring bandwidth on this interface. Valid values: `enable`, `disable`.
func (o InterfaceOutput) MonitorBandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.MonitorBandwidth }).(pulumi.StringOutput)
}

// MTU value for this interface.
func (o InterfaceOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.Mtu }).(pulumi.IntOutput)
}

// Enable to set a custom MTU for this interface. Valid values: `enable`, `disable`.
func (o InterfaceOutput) MtuOverride() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.MtuOverride }).(pulumi.StringOutput)
}

// Name.
func (o InterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable NDISC forwarding. Valid values: `enable`, `disable`.
func (o InterfaceOutput) Ndiscforward() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Ndiscforward }).(pulumi.StringOutput)
}

// Enable/disable NETBIOS forwarding. Valid values: `disable`, `enable`.
func (o InterfaceOutput) NetbiosForward() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.NetbiosForward }).(pulumi.StringOutput)
}

// Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both). Valid values: `disable`, `tx`, `rx`, `both`.
func (o InterfaceOutput) NetflowSampler() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.NetflowSampler }).(pulumi.StringOutput)
}

// Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
func (o InterfaceOutput) Outbandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.Outbandwidth }).(pulumi.IntOutput)
}

// PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
func (o InterfaceOutput) PadtRetryTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.PadtRetryTimeout }).(pulumi.IntOutput)
}

// PPPoE account's password.
func (o InterfaceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// PING server status.
func (o InterfaceOutput) PingServStatus() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.PingServStatus }).(pulumi.IntOutput)
}

// sFlow polling interval (1 - 255 sec).
func (o InterfaceOutput) PollingInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.PollingInterval }).(pulumi.IntOutput)
}

// Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
func (o InterfaceOutput) PppoeUnnumberedNegotiate() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.PppoeUnnumberedNegotiate }).(pulumi.StringOutput)
}

// PPTP authentication type. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
func (o InterfaceOutput) PptpAuthType() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.PptpAuthType }).(pulumi.StringOutput)
}

// Enable/disable PPTP client. Valid values: `enable`, `disable`.
func (o InterfaceOutput) PptpClient() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.PptpClient }).(pulumi.StringOutput)
}

// PPTP password.
func (o InterfaceOutput) PptpPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringPtrOutput { return v.PptpPassword }).(pulumi.StringPtrOutput)
}

// PPTP server IP address.
func (o InterfaceOutput) PptpServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.PptpServerIp }).(pulumi.StringOutput)
}

// Idle timer in minutes (0 for disabled).
func (o InterfaceOutput) PptpTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.PptpTimeout }).(pulumi.IntOutput)
}

// PPTP user name.
func (o InterfaceOutput) PptpUser() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.PptpUser }).(pulumi.StringOutput)
}

// Enable/disable preservation of session route when dirty. Valid values: `enable`, `disable`.
func (o InterfaceOutput) PreserveSessionRoute() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.PreserveSessionRoute }).(pulumi.StringOutput)
}

// Priority of learned routes.
func (o InterfaceOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// Enable/disable fail back to higher priority port once recovered. Valid values: `enable`, `disable`.
func (o InterfaceOutput) PriorityOverride() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.PriorityOverride }).(pulumi.StringOutput)
}

// Enable/disable proxy captive portal on this interface. Valid values: `enable`, `disable`.
func (o InterfaceOutput) ProxyCaptivePortal() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.ProxyCaptivePortal }).(pulumi.StringOutput)
}

// IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
func (o InterfaceOutput) ReachableTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.ReachableTime }).(pulumi.IntOutput)
}

// Redundant interface.
func (o InterfaceOutput) RedundantInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.RedundantInterface }).(pulumi.StringOutput)
}

// Remote IP address of tunnel.
func (o InterfaceOutput) RemoteIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.RemoteIp }).(pulumi.StringOutput)
}

// Replacement message override group.
func (o InterfaceOutput) ReplacemsgOverrideGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.ReplacemsgOverrideGroup }).(pulumi.StringOutput)
}

// RX ring size.
func (o InterfaceOutput) RingRx() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.RingRx }).(pulumi.IntOutput)
}

// TX ring size.
func (o InterfaceOutput) RingTx() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.RingTx }).(pulumi.IntOutput)
}

// Interface role. Valid values: `lan`, `wan`, `dmz`, `undefined`.
func (o InterfaceOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Data that NetFlow collects (rx, tx, or both). Valid values: `tx`, `rx`, `both`.
func (o InterfaceOutput) SampleDirection() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SampleDirection }).(pulumi.StringOutput)
}

// sFlow sample rate (10 - 99999).
func (o InterfaceOutput) SampleRate() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.SampleRate }).(pulumi.IntOutput)
}

// Enable monitoring or blocking connections to Botnet servers through this interface. Valid values: `disable`, `block`, `monitor`.
func (o InterfaceOutput) ScanBotnetConnections() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.ScanBotnetConnections }).(pulumi.StringOutput)
}

// Enable/disable adding a secondary IP to this interface. Valid values: `enable`, `disable`.
func (o InterfaceOutput) SecondaryIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SecondaryIp }).(pulumi.StringOutput)
}

// Second IP address of interface. The structure of `secondaryip` block is documented below.
func (o InterfaceOutput) Secondaryips() InterfaceSecondaryipArrayOutput {
	return o.ApplyT(func(v *Interface) InterfaceSecondaryipArrayOutput { return v.Secondaryips }).(InterfaceSecondaryipArrayOutput)
}

// Name of security-exempt-list.
func (o InterfaceOutput) SecurityExemptList() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SecurityExemptList }).(pulumi.StringOutput)
}

// URL of external authentication logout server.
func (o InterfaceOutput) SecurityExternalLogout() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SecurityExternalLogout }).(pulumi.StringOutput)
}

// URL of external authentication web server.
func (o InterfaceOutput) SecurityExternalWeb() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SecurityExternalWeb }).(pulumi.StringOutput)
}

// User groups that can authenticate with the captive portal. The structure of `securityGroups` block is documented below.
func (o InterfaceOutput) SecurityGroups() InterfaceSecurityGroupArrayOutput {
	return o.ApplyT(func(v *Interface) InterfaceSecurityGroupArrayOutput { return v.SecurityGroups }).(InterfaceSecurityGroupArrayOutput)
}

// Enable/disable MAC authentication bypass. Valid values: `mac-auth-only`, `enable`, `disable`.
func (o InterfaceOutput) SecurityMacAuthBypass() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SecurityMacAuthBypass }).(pulumi.StringOutput)
}

// Turn on captive portal authentication for this interface. Valid values: `none`, `captive-portal`, `802.1X`.
func (o InterfaceOutput) SecurityMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SecurityMode }).(pulumi.StringOutput)
}

// URL redirection after disclaimer/authentication.
func (o InterfaceOutput) SecurityRedirectUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SecurityRedirectUrl }).(pulumi.StringOutput)
}

// PPPoE service name.
func (o InterfaceOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Enable/disable sFlow on this interface. Valid values: `enable`, `disable`.
func (o InterfaceOutput) SflowSampler() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SflowSampler }).(pulumi.StringOutput)
}

// Permanent SNMP Index of the interface.
func (o InterfaceOutput) SnmpIndex() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.SnmpIndex }).(pulumi.IntOutput)
}

// Interface speed. The default setting and the options available depend on the interface hardware.
func (o InterfaceOutput) Speed() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Speed }).(pulumi.StringOutput)
}

// Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
func (o InterfaceOutput) SpilloverThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.SpilloverThreshold }).(pulumi.IntOutput)
}

// Enable/disable source IP check. Valid values: `enable`, `disable`.
func (o InterfaceOutput) SrcCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SrcCheck }).(pulumi.StringOutput)
}

// Bring the interface up or shut the interface down. Valid values: `up`, `down`.
func (o InterfaceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Enable/disable STP. Valid values: `disable`, `enable`.
func (o InterfaceOutput) Stp() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Stp }).(pulumi.StringOutput)
}

// Control STP behaviour on HA secondary. Valid values: `disable`, `enable`, `priority-adjust`.
func (o InterfaceOutput) StpHaSecondary() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.StpHaSecondary }).(pulumi.StringOutput)
}

// Enable/disable STP forwarding. Valid values: `enable`, `disable`.
func (o InterfaceOutput) Stpforward() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Stpforward }).(pulumi.StringOutput)
}

// Configure STP forwarding mode. Valid values: `rpl-all-ext-id`, `rpl-bridge-ext-id`, `rpl-nothing`.
func (o InterfaceOutput) StpforwardMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.StpforwardMode }).(pulumi.StringOutput)
}

// Enable to always send packets from this interface to a destination MAC address. Valid values: `enable`, `disable`.
func (o InterfaceOutput) Subst() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Subst }).(pulumi.StringOutput)
}

// Destination MAC address that all packets are sent to from this interface.
func (o InterfaceOutput) SubstituteDstMac() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SubstituteDstMac }).(pulumi.StringOutput)
}

// Initial create for switch-controller VLANs.
func (o InterfaceOutput) SwcFirstCreate() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.SwcFirstCreate }).(pulumi.IntOutput)
}

// Creation status for switch-controller VLANs.
func (o InterfaceOutput) SwcVlan() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.SwcVlan }).(pulumi.IntOutput)
}

// Contained in switch.
func (o InterfaceOutput) Switch() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Switch }).(pulumi.StringOutput)
}

// Block FortiSwitch port-to-port traffic. Valid values: `enable`, `disable`.
func (o InterfaceOutput) SwitchControllerAccessVlan() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerAccessVlan }).(pulumi.StringOutput)
}

// Enable/disable FortiSwitch ARP inspection. Valid values: `enable`, `disable`.
func (o InterfaceOutput) SwitchControllerArpInspection() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerArpInspection }).(pulumi.StringOutput)
}

// Switch controller DHCP snooping. Valid values: `enable`, `disable`.
func (o InterfaceOutput) SwitchControllerDhcpSnooping() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerDhcpSnooping }).(pulumi.StringOutput)
}

// Switch controller DHCP snooping option82. Valid values: `enable`, `disable`.
func (o InterfaceOutput) SwitchControllerDhcpSnoopingOption82() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerDhcpSnoopingOption82 }).(pulumi.StringOutput)
}

// Switch controller DHCP snooping verify MAC. Valid values: `enable`, `disable`.
func (o InterfaceOutput) SwitchControllerDhcpSnoopingVerifyMac() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerDhcpSnoopingVerifyMac }).(pulumi.StringOutput)
}

// Integrated FortiLink settings for managed FortiSwitch.
func (o InterfaceOutput) SwitchControllerDynamic() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerDynamic }).(pulumi.StringOutput)
}

// Interface's purpose when assigning traffic (read only).
func (o InterfaceOutput) SwitchControllerFeature() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerFeature }).(pulumi.StringOutput)
}

// Switch controller IGMP snooping. Valid values: `enable`, `disable`.
func (o InterfaceOutput) SwitchControllerIgmpSnooping() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerIgmpSnooping }).(pulumi.StringOutput)
}

// Switch controller IGMP snooping fast-leave. Valid values: `enable`, `disable`.
func (o InterfaceOutput) SwitchControllerIgmpSnoopingFastLeave() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerIgmpSnoopingFastLeave }).(pulumi.StringOutput)
}

// Switch controller IGMP snooping proxy. Valid values: `enable`, `disable`.
func (o InterfaceOutput) SwitchControllerIgmpSnoopingProxy() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerIgmpSnoopingProxy }).(pulumi.StringOutput)
}

// Enable/disable managed FortiSwitch IoT scanning. Valid values: `enable`, `disable`.
func (o InterfaceOutput) SwitchControllerIotScanning() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerIotScanning }).(pulumi.StringOutput)
}

// Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
func (o InterfaceOutput) SwitchControllerLearningLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.SwitchControllerLearningLimit }).(pulumi.IntOutput)
}

// VLAN to use for FortiLink management purposes.
func (o InterfaceOutput) SwitchControllerMgmtVlan() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.SwitchControllerMgmtVlan }).(pulumi.IntOutput)
}

// Integrated NAC settings for managed FortiSwitch.
func (o InterfaceOutput) SwitchControllerNac() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerNac }).(pulumi.StringOutput)
}

// NetFlow collection and processing. Valid values: `disable`, `enable`.
func (o InterfaceOutput) SwitchControllerNetflowCollect() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerNetflowCollect }).(pulumi.StringOutput)
}

// Enable/disable managed FortiSwitch routing offload. Valid values: `enable`, `disable`.
func (o InterfaceOutput) SwitchControllerOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerOffload }).(pulumi.StringOutput)
}

// Enable/disable managed FortiSwitch routing offload gateway. Valid values: `enable`, `disable`.
func (o InterfaceOutput) SwitchControllerOffloadGw() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerOffloadGw }).(pulumi.StringOutput)
}

// IP for routing offload on FortiSwitch.
func (o InterfaceOutput) SwitchControllerOffloadIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerOffloadIp }).(pulumi.StringOutput)
}

// Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface. Valid values: `disable`, `enable`.
func (o InterfaceOutput) SwitchControllerRspanMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerRspanMode }).(pulumi.StringOutput)
}

// Source IP address used in FortiLink over L3 connections. Valid values: `outbound`, `fixed`.
func (o InterfaceOutput) SwitchControllerSourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerSourceIp }).(pulumi.StringOutput)
}

// Switch controller traffic policy for the VLAN.
func (o InterfaceOutput) SwitchControllerTrafficPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SwitchControllerTrafficPolicy }).(pulumi.StringOutput)
}

// Define a system ID for the aggregate interface.
func (o InterfaceOutput) SystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SystemId }).(pulumi.StringOutput)
}

// Method in which system ID is generated. Valid values: `auto`, `user`.
func (o InterfaceOutput) SystemIdType() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.SystemIdType }).(pulumi.StringOutput)
}

// Config object tagging. The structure of `tagging` block is documented below.
func (o InterfaceOutput) Taggings() InterfaceTaggingArrayOutput {
	return o.ApplyT(func(v *Interface) InterfaceTaggingArrayOutput { return v.Taggings }).(InterfaceTaggingArrayOutput)
}

// TCP maximum segment size. 0 means do not change segment size.
func (o InterfaceOutput) TcpMss() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.TcpMss }).(pulumi.IntOutput)
}

// Enable/disable VLAN trunk. Valid values: `enable`, `disable`.
func (o InterfaceOutput) Trunk() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Trunk }).(pulumi.StringOutput)
}

// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
func (o InterfaceOutput) TrustIp1() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.TrustIp1 }).(pulumi.StringOutput)
}

// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
func (o InterfaceOutput) TrustIp2() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.TrustIp2 }).(pulumi.StringOutput)
}

// Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
func (o InterfaceOutput) TrustIp3() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.TrustIp3 }).(pulumi.StringOutput)
}

// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
func (o InterfaceOutput) TrustIp61() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.TrustIp61 }).(pulumi.StringOutput)
}

// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
func (o InterfaceOutput) TrustIp62() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.TrustIp62 }).(pulumi.StringOutput)
}

// Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
func (o InterfaceOutput) TrustIp63() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.TrustIp63 }).(pulumi.StringOutput)
}

// Interface type.
func (o InterfaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Username of the PPPoE account, provided by your ISP.
func (o InterfaceOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// Interface is in this virtual domain (VDOM).
func (o InterfaceOutput) Vdom() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Vdom }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o InterfaceOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Switch control interface VLAN ID.
func (o InterfaceOutput) Vindex() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.Vindex }).(pulumi.IntOutput)
}

// Ethernet protocol of VLAN. Valid values: `8021q`, `8021ad`.
func (o InterfaceOutput) VlanProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.VlanProtocol }).(pulumi.StringOutput)
}

// Enable/disable traffic forwarding between VLANs on this interface. Valid values: `enable`, `disable`.
func (o InterfaceOutput) Vlanforward() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Vlanforward }).(pulumi.StringOutput)
}

// VLAN ID (1 - 4094).
func (o InterfaceOutput) Vlanid() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.Vlanid }).(pulumi.IntOutput)
}

// Virtual Routing Forwarding ID.
func (o InterfaceOutput) Vrf() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.Vrf }).(pulumi.IntOutput)
}

// Enable/disable use of virtual MAC for VRRP. Valid values: `enable`, `disable`.
func (o InterfaceOutput) VrrpVirtualMac() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.VrrpVirtualMac }).(pulumi.StringOutput)
}

// VRRP configuration. The structure of `vrrp` block is documented below.
func (o InterfaceOutput) Vrrps() InterfaceVrrpArrayOutput {
	return o.ApplyT(func(v *Interface) InterfaceVrrpArrayOutput { return v.Vrrps }).(InterfaceVrrpArrayOutput)
}

// Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers. Valid values: `enable`, `disable`.
func (o InterfaceOutput) Wccp() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.Wccp }).(pulumi.StringOutput)
}

// Default weight for static routes (if route has no weight configured).
func (o InterfaceOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.Weight }).(pulumi.IntOutput)
}

// WINS server IP.
func (o InterfaceOutput) WinsIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Interface) pulumi.StringOutput { return v.WinsIp }).(pulumi.StringOutput)
}

type InterfaceArrayOutput struct{ *pulumi.OutputState }

func (InterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Interface)(nil)).Elem()
}

func (o InterfaceArrayOutput) ToInterfaceArrayOutput() InterfaceArrayOutput {
	return o
}

func (o InterfaceArrayOutput) ToInterfaceArrayOutputWithContext(ctx context.Context) InterfaceArrayOutput {
	return o
}

func (o InterfaceArrayOutput) Index(i pulumi.IntInput) InterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Interface {
		return vs[0].([]*Interface)[vs[1].(int)]
	}).(InterfaceOutput)
}

type InterfaceMapOutput struct{ *pulumi.OutputState }

func (InterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Interface)(nil)).Elem()
}

func (o InterfaceMapOutput) ToInterfaceMapOutput() InterfaceMapOutput {
	return o
}

func (o InterfaceMapOutput) ToInterfaceMapOutputWithContext(ctx context.Context) InterfaceMapOutput {
	return o
}

func (o InterfaceMapOutput) MapIndex(k pulumi.StringInput) InterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Interface {
		return vs[0].(map[string]*Interface)[vs[1].(string)]
	}).(InterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceInput)(nil)).Elem(), &Interface{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceArrayInput)(nil)).Elem(), InterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceMapInput)(nil)).Elem(), InterfaceMap{})
	pulumi.RegisterOutputType(InterfaceOutput{})
	pulumi.RegisterOutputType(InterfaceArrayOutput{})
	pulumi.RegisterOutputType(InterfaceMapOutput{})
}
