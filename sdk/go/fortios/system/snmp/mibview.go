// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snmp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// SNMP Access Control MIB View configuration. Applies to FortiOS Version `>= 7.2.0`.
//
// ## Import
//
// SystemSnmp MibView can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/snmp/mibview:Mibview labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/snmp/mibview:Mibview labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Mibview struct {
	pulumi.CustomResourceState

	// The OID subtrees to be excluded in the view. Maximum 64 allowed.
	Exclude pulumi.StringOutput `pulumi:"exclude"`
	// The OID subtrees to be included in the view. Maximum 16 allowed.
	Include pulumi.StringOutput `pulumi:"include"`
	// MIB view name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewMibview registers a new resource with the given unique name, arguments, and options.
func NewMibview(ctx *pulumi.Context,
	name string, args *MibviewArgs, opts ...pulumi.ResourceOption) (*Mibview, error) {
	if args == nil {
		args = &MibviewArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Mibview
	err := ctx.RegisterResource("fortios:system/snmp/mibview:Mibview", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMibview gets an existing Mibview resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMibview(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MibviewState, opts ...pulumi.ResourceOption) (*Mibview, error) {
	var resource Mibview
	err := ctx.ReadResource("fortios:system/snmp/mibview:Mibview", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mibview resources.
type mibviewState struct {
	// The OID subtrees to be excluded in the view. Maximum 64 allowed.
	Exclude *string `pulumi:"exclude"`
	// The OID subtrees to be included in the view. Maximum 16 allowed.
	Include *string `pulumi:"include"`
	// MIB view name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type MibviewState struct {
	// The OID subtrees to be excluded in the view. Maximum 64 allowed.
	Exclude pulumi.StringPtrInput
	// The OID subtrees to be included in the view. Maximum 16 allowed.
	Include pulumi.StringPtrInput
	// MIB view name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (MibviewState) ElementType() reflect.Type {
	return reflect.TypeOf((*mibviewState)(nil)).Elem()
}

type mibviewArgs struct {
	// The OID subtrees to be excluded in the view. Maximum 64 allowed.
	Exclude *string `pulumi:"exclude"`
	// The OID subtrees to be included in the view. Maximum 16 allowed.
	Include *string `pulumi:"include"`
	// MIB view name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Mibview resource.
type MibviewArgs struct {
	// The OID subtrees to be excluded in the view. Maximum 64 allowed.
	Exclude pulumi.StringPtrInput
	// The OID subtrees to be included in the view. Maximum 16 allowed.
	Include pulumi.StringPtrInput
	// MIB view name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (MibviewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mibviewArgs)(nil)).Elem()
}

type MibviewInput interface {
	pulumi.Input

	ToMibviewOutput() MibviewOutput
	ToMibviewOutputWithContext(ctx context.Context) MibviewOutput
}

func (*Mibview) ElementType() reflect.Type {
	return reflect.TypeOf((**Mibview)(nil)).Elem()
}

func (i *Mibview) ToMibviewOutput() MibviewOutput {
	return i.ToMibviewOutputWithContext(context.Background())
}

func (i *Mibview) ToMibviewOutputWithContext(ctx context.Context) MibviewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MibviewOutput)
}

// MibviewArrayInput is an input type that accepts MibviewArray and MibviewArrayOutput values.
// You can construct a concrete instance of `MibviewArrayInput` via:
//
//	MibviewArray{ MibviewArgs{...} }
type MibviewArrayInput interface {
	pulumi.Input

	ToMibviewArrayOutput() MibviewArrayOutput
	ToMibviewArrayOutputWithContext(context.Context) MibviewArrayOutput
}

type MibviewArray []MibviewInput

func (MibviewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mibview)(nil)).Elem()
}

func (i MibviewArray) ToMibviewArrayOutput() MibviewArrayOutput {
	return i.ToMibviewArrayOutputWithContext(context.Background())
}

func (i MibviewArray) ToMibviewArrayOutputWithContext(ctx context.Context) MibviewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MibviewArrayOutput)
}

// MibviewMapInput is an input type that accepts MibviewMap and MibviewMapOutput values.
// You can construct a concrete instance of `MibviewMapInput` via:
//
//	MibviewMap{ "key": MibviewArgs{...} }
type MibviewMapInput interface {
	pulumi.Input

	ToMibviewMapOutput() MibviewMapOutput
	ToMibviewMapOutputWithContext(context.Context) MibviewMapOutput
}

type MibviewMap map[string]MibviewInput

func (MibviewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mibview)(nil)).Elem()
}

func (i MibviewMap) ToMibviewMapOutput() MibviewMapOutput {
	return i.ToMibviewMapOutputWithContext(context.Background())
}

func (i MibviewMap) ToMibviewMapOutputWithContext(ctx context.Context) MibviewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MibviewMapOutput)
}

type MibviewOutput struct{ *pulumi.OutputState }

func (MibviewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mibview)(nil)).Elem()
}

func (o MibviewOutput) ToMibviewOutput() MibviewOutput {
	return o
}

func (o MibviewOutput) ToMibviewOutputWithContext(ctx context.Context) MibviewOutput {
	return o
}

// The OID subtrees to be excluded in the view. Maximum 64 allowed.
func (o MibviewOutput) Exclude() pulumi.StringOutput {
	return o.ApplyT(func(v *Mibview) pulumi.StringOutput { return v.Exclude }).(pulumi.StringOutput)
}

// The OID subtrees to be included in the view. Maximum 16 allowed.
func (o MibviewOutput) Include() pulumi.StringOutput {
	return o.ApplyT(func(v *Mibview) pulumi.StringOutput { return v.Include }).(pulumi.StringOutput)
}

// MIB view name.
func (o MibviewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Mibview) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o MibviewOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Mibview) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type MibviewArrayOutput struct{ *pulumi.OutputState }

func (MibviewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mibview)(nil)).Elem()
}

func (o MibviewArrayOutput) ToMibviewArrayOutput() MibviewArrayOutput {
	return o
}

func (o MibviewArrayOutput) ToMibviewArrayOutputWithContext(ctx context.Context) MibviewArrayOutput {
	return o
}

func (o MibviewArrayOutput) Index(i pulumi.IntInput) MibviewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Mibview {
		return vs[0].([]*Mibview)[vs[1].(int)]
	}).(MibviewOutput)
}

type MibviewMapOutput struct{ *pulumi.OutputState }

func (MibviewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mibview)(nil)).Elem()
}

func (o MibviewMapOutput) ToMibviewMapOutput() MibviewMapOutput {
	return o
}

func (o MibviewMapOutput) ToMibviewMapOutputWithContext(ctx context.Context) MibviewMapOutput {
	return o
}

func (o MibviewMapOutput) MapIndex(k pulumi.StringInput) MibviewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Mibview {
		return vs[0].(map[string]*Mibview)[vs[1].(string)]
	}).(MibviewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MibviewInput)(nil)).Elem(), &Mibview{})
	pulumi.RegisterInputType(reflect.TypeOf((*MibviewArrayInput)(nil)).Elem(), MibviewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MibviewMapInput)(nil)).Elem(), MibviewMap{})
	pulumi.RegisterOutputType(MibviewOutput{})
	pulumi.RegisterOutputType(MibviewArrayOutput{})
	pulumi.RegisterOutputType(MibviewMapOutput{})
}
