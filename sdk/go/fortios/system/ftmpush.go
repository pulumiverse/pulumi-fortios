// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure FortiToken Mobile push services.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewFtmpush(ctx, "trname", &system.FtmpushArgs{
//				ServerIp:   pulumi.String("0.0.0.0"),
//				ServerPort: pulumi.Int(4433),
//				Status:     pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// System FtmPush can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/ftmpush:Ftmpush labelname SystemFtmPush
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/ftmpush:Ftmpush labelname SystemFtmPush
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Ftmpush struct {
	pulumi.CustomResourceState

	// Enable/disable communication to the proxy server in FortiGuard configuration. Valid values: `enable`, `disable`.
	Proxy pulumi.StringOutput `pulumi:"proxy"`
	// IPv4 address or domain name of FortiToken Mobile push services server.
	Server pulumi.StringOutput `pulumi:"server"`
	// Name of the server certificate to be used for SSL (default = Fortinet_Factory).
	ServerCert pulumi.StringOutput `pulumi:"serverCert"`
	// IPv4 address of FortiToken Mobile push services server (format: xxx.xxx.xxx.xxx).
	ServerIp pulumi.StringOutput `pulumi:"serverIp"`
	// Port to communicate with FortiToken Mobile push services server (1 - 65535, default = 4433).
	ServerPort pulumi.IntOutput `pulumi:"serverPort"`
	// Enable/disable the use of FortiToken Mobile push services. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFtmpush registers a new resource with the given unique name, arguments, and options.
func NewFtmpush(ctx *pulumi.Context,
	name string, args *FtmpushArgs, opts ...pulumi.ResourceOption) (*Ftmpush, error) {
	if args == nil {
		args = &FtmpushArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ftmpush
	err := ctx.RegisterResource("fortios:system/ftmpush:Ftmpush", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFtmpush gets an existing Ftmpush resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFtmpush(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FtmpushState, opts ...pulumi.ResourceOption) (*Ftmpush, error) {
	var resource Ftmpush
	err := ctx.ReadResource("fortios:system/ftmpush:Ftmpush", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ftmpush resources.
type ftmpushState struct {
	// Enable/disable communication to the proxy server in FortiGuard configuration. Valid values: `enable`, `disable`.
	Proxy *string `pulumi:"proxy"`
	// IPv4 address or domain name of FortiToken Mobile push services server.
	Server *string `pulumi:"server"`
	// Name of the server certificate to be used for SSL (default = Fortinet_Factory).
	ServerCert *string `pulumi:"serverCert"`
	// IPv4 address of FortiToken Mobile push services server (format: xxx.xxx.xxx.xxx).
	ServerIp *string `pulumi:"serverIp"`
	// Port to communicate with FortiToken Mobile push services server (1 - 65535, default = 4433).
	ServerPort *int `pulumi:"serverPort"`
	// Enable/disable the use of FortiToken Mobile push services. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FtmpushState struct {
	// Enable/disable communication to the proxy server in FortiGuard configuration. Valid values: `enable`, `disable`.
	Proxy pulumi.StringPtrInput
	// IPv4 address or domain name of FortiToken Mobile push services server.
	Server pulumi.StringPtrInput
	// Name of the server certificate to be used for SSL (default = Fortinet_Factory).
	ServerCert pulumi.StringPtrInput
	// IPv4 address of FortiToken Mobile push services server (format: xxx.xxx.xxx.xxx).
	ServerIp pulumi.StringPtrInput
	// Port to communicate with FortiToken Mobile push services server (1 - 65535, default = 4433).
	ServerPort pulumi.IntPtrInput
	// Enable/disable the use of FortiToken Mobile push services. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FtmpushState) ElementType() reflect.Type {
	return reflect.TypeOf((*ftmpushState)(nil)).Elem()
}

type ftmpushArgs struct {
	// Enable/disable communication to the proxy server in FortiGuard configuration. Valid values: `enable`, `disable`.
	Proxy *string `pulumi:"proxy"`
	// IPv4 address or domain name of FortiToken Mobile push services server.
	Server *string `pulumi:"server"`
	// Name of the server certificate to be used for SSL (default = Fortinet_Factory).
	ServerCert *string `pulumi:"serverCert"`
	// IPv4 address of FortiToken Mobile push services server (format: xxx.xxx.xxx.xxx).
	ServerIp *string `pulumi:"serverIp"`
	// Port to communicate with FortiToken Mobile push services server (1 - 65535, default = 4433).
	ServerPort *int `pulumi:"serverPort"`
	// Enable/disable the use of FortiToken Mobile push services. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Ftmpush resource.
type FtmpushArgs struct {
	// Enable/disable communication to the proxy server in FortiGuard configuration. Valid values: `enable`, `disable`.
	Proxy pulumi.StringPtrInput
	// IPv4 address or domain name of FortiToken Mobile push services server.
	Server pulumi.StringPtrInput
	// Name of the server certificate to be used for SSL (default = Fortinet_Factory).
	ServerCert pulumi.StringPtrInput
	// IPv4 address of FortiToken Mobile push services server (format: xxx.xxx.xxx.xxx).
	ServerIp pulumi.StringPtrInput
	// Port to communicate with FortiToken Mobile push services server (1 - 65535, default = 4433).
	ServerPort pulumi.IntPtrInput
	// Enable/disable the use of FortiToken Mobile push services. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FtmpushArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ftmpushArgs)(nil)).Elem()
}

type FtmpushInput interface {
	pulumi.Input

	ToFtmpushOutput() FtmpushOutput
	ToFtmpushOutputWithContext(ctx context.Context) FtmpushOutput
}

func (*Ftmpush) ElementType() reflect.Type {
	return reflect.TypeOf((**Ftmpush)(nil)).Elem()
}

func (i *Ftmpush) ToFtmpushOutput() FtmpushOutput {
	return i.ToFtmpushOutputWithContext(context.Background())
}

func (i *Ftmpush) ToFtmpushOutputWithContext(ctx context.Context) FtmpushOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FtmpushOutput)
}

// FtmpushArrayInput is an input type that accepts FtmpushArray and FtmpushArrayOutput values.
// You can construct a concrete instance of `FtmpushArrayInput` via:
//
//	FtmpushArray{ FtmpushArgs{...} }
type FtmpushArrayInput interface {
	pulumi.Input

	ToFtmpushArrayOutput() FtmpushArrayOutput
	ToFtmpushArrayOutputWithContext(context.Context) FtmpushArrayOutput
}

type FtmpushArray []FtmpushInput

func (FtmpushArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ftmpush)(nil)).Elem()
}

func (i FtmpushArray) ToFtmpushArrayOutput() FtmpushArrayOutput {
	return i.ToFtmpushArrayOutputWithContext(context.Background())
}

func (i FtmpushArray) ToFtmpushArrayOutputWithContext(ctx context.Context) FtmpushArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FtmpushArrayOutput)
}

// FtmpushMapInput is an input type that accepts FtmpushMap and FtmpushMapOutput values.
// You can construct a concrete instance of `FtmpushMapInput` via:
//
//	FtmpushMap{ "key": FtmpushArgs{...} }
type FtmpushMapInput interface {
	pulumi.Input

	ToFtmpushMapOutput() FtmpushMapOutput
	ToFtmpushMapOutputWithContext(context.Context) FtmpushMapOutput
}

type FtmpushMap map[string]FtmpushInput

func (FtmpushMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ftmpush)(nil)).Elem()
}

func (i FtmpushMap) ToFtmpushMapOutput() FtmpushMapOutput {
	return i.ToFtmpushMapOutputWithContext(context.Background())
}

func (i FtmpushMap) ToFtmpushMapOutputWithContext(ctx context.Context) FtmpushMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FtmpushMapOutput)
}

type FtmpushOutput struct{ *pulumi.OutputState }

func (FtmpushOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ftmpush)(nil)).Elem()
}

func (o FtmpushOutput) ToFtmpushOutput() FtmpushOutput {
	return o
}

func (o FtmpushOutput) ToFtmpushOutputWithContext(ctx context.Context) FtmpushOutput {
	return o
}

// Enable/disable communication to the proxy server in FortiGuard configuration. Valid values: `enable`, `disable`.
func (o FtmpushOutput) Proxy() pulumi.StringOutput {
	return o.ApplyT(func(v *Ftmpush) pulumi.StringOutput { return v.Proxy }).(pulumi.StringOutput)
}

// IPv4 address or domain name of FortiToken Mobile push services server.
func (o FtmpushOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *Ftmpush) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// Name of the server certificate to be used for SSL (default = Fortinet_Factory).
func (o FtmpushOutput) ServerCert() pulumi.StringOutput {
	return o.ApplyT(func(v *Ftmpush) pulumi.StringOutput { return v.ServerCert }).(pulumi.StringOutput)
}

// IPv4 address of FortiToken Mobile push services server (format: xxx.xxx.xxx.xxx).
func (o FtmpushOutput) ServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Ftmpush) pulumi.StringOutput { return v.ServerIp }).(pulumi.StringOutput)
}

// Port to communicate with FortiToken Mobile push services server (1 - 65535, default = 4433).
func (o FtmpushOutput) ServerPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Ftmpush) pulumi.IntOutput { return v.ServerPort }).(pulumi.IntOutput)
}

// Enable/disable the use of FortiToken Mobile push services. Valid values: `enable`, `disable`.
func (o FtmpushOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Ftmpush) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o FtmpushOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ftmpush) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FtmpushArrayOutput struct{ *pulumi.OutputState }

func (FtmpushArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ftmpush)(nil)).Elem()
}

func (o FtmpushArrayOutput) ToFtmpushArrayOutput() FtmpushArrayOutput {
	return o
}

func (o FtmpushArrayOutput) ToFtmpushArrayOutputWithContext(ctx context.Context) FtmpushArrayOutput {
	return o
}

func (o FtmpushArrayOutput) Index(i pulumi.IntInput) FtmpushOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ftmpush {
		return vs[0].([]*Ftmpush)[vs[1].(int)]
	}).(FtmpushOutput)
}

type FtmpushMapOutput struct{ *pulumi.OutputState }

func (FtmpushMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ftmpush)(nil)).Elem()
}

func (o FtmpushMapOutput) ToFtmpushMapOutput() FtmpushMapOutput {
	return o
}

func (o FtmpushMapOutput) ToFtmpushMapOutputWithContext(ctx context.Context) FtmpushMapOutput {
	return o
}

func (o FtmpushMapOutput) MapIndex(k pulumi.StringInput) FtmpushOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ftmpush {
		return vs[0].(map[string]*Ftmpush)[vs[1].(string)]
	}).(FtmpushOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FtmpushInput)(nil)).Elem(), &Ftmpush{})
	pulumi.RegisterInputType(reflect.TypeOf((*FtmpushArrayInput)(nil)).Elem(), FtmpushArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FtmpushMapInput)(nil)).Elem(), FtmpushMap{})
	pulumi.RegisterOutputType(FtmpushOutput{})
	pulumi.RegisterOutputType(FtmpushArrayOutput{})
	pulumi.RegisterOutputType(FtmpushMapOutput{})
}
