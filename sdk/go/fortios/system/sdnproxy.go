// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure SDN proxy. Applies to FortiOS Version `>= 7.4.0`.
//
// ## Import
//
// System SdnProxy can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/sdnproxy:Sdnproxy labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/sdnproxy:Sdnproxy labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Sdnproxy struct {
	pulumi.CustomResourceState

	// SDN proxy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// SDN proxy password.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Server address of the SDN proxy.
	Server pulumi.StringOutput `pulumi:"server"`
	// Port number of the SDN proxy.
	ServerPort pulumi.IntOutput `pulumi:"serverPort"`
	// Type of SDN proxy. Valid values: `general`, `fortimanager`.
	Type pulumi.StringOutput `pulumi:"type"`
	// SDN proxy username.
	Username pulumi.StringOutput `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSdnproxy registers a new resource with the given unique name, arguments, and options.
func NewSdnproxy(ctx *pulumi.Context,
	name string, args *SdnproxyArgs, opts ...pulumi.ResourceOption) (*Sdnproxy, error) {
	if args == nil {
		args = &SdnproxyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Sdnproxy
	err := ctx.RegisterResource("fortios:system/sdnproxy:Sdnproxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSdnproxy gets an existing Sdnproxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSdnproxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SdnproxyState, opts ...pulumi.ResourceOption) (*Sdnproxy, error) {
	var resource Sdnproxy
	err := ctx.ReadResource("fortios:system/sdnproxy:Sdnproxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sdnproxy resources.
type sdnproxyState struct {
	// SDN proxy name.
	Name *string `pulumi:"name"`
	// SDN proxy password.
	Password *string `pulumi:"password"`
	// Server address of the SDN proxy.
	Server *string `pulumi:"server"`
	// Port number of the SDN proxy.
	ServerPort *int `pulumi:"serverPort"`
	// Type of SDN proxy. Valid values: `general`, `fortimanager`.
	Type *string `pulumi:"type"`
	// SDN proxy username.
	Username *string `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SdnproxyState struct {
	// SDN proxy name.
	Name pulumi.StringPtrInput
	// SDN proxy password.
	Password pulumi.StringPtrInput
	// Server address of the SDN proxy.
	Server pulumi.StringPtrInput
	// Port number of the SDN proxy.
	ServerPort pulumi.IntPtrInput
	// Type of SDN proxy. Valid values: `general`, `fortimanager`.
	Type pulumi.StringPtrInput
	// SDN proxy username.
	Username pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SdnproxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sdnproxyState)(nil)).Elem()
}

type sdnproxyArgs struct {
	// SDN proxy name.
	Name *string `pulumi:"name"`
	// SDN proxy password.
	Password *string `pulumi:"password"`
	// Server address of the SDN proxy.
	Server *string `pulumi:"server"`
	// Port number of the SDN proxy.
	ServerPort *int `pulumi:"serverPort"`
	// Type of SDN proxy. Valid values: `general`, `fortimanager`.
	Type *string `pulumi:"type"`
	// SDN proxy username.
	Username *string `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Sdnproxy resource.
type SdnproxyArgs struct {
	// SDN proxy name.
	Name pulumi.StringPtrInput
	// SDN proxy password.
	Password pulumi.StringPtrInput
	// Server address of the SDN proxy.
	Server pulumi.StringPtrInput
	// Port number of the SDN proxy.
	ServerPort pulumi.IntPtrInput
	// Type of SDN proxy. Valid values: `general`, `fortimanager`.
	Type pulumi.StringPtrInput
	// SDN proxy username.
	Username pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SdnproxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sdnproxyArgs)(nil)).Elem()
}

type SdnproxyInput interface {
	pulumi.Input

	ToSdnproxyOutput() SdnproxyOutput
	ToSdnproxyOutputWithContext(ctx context.Context) SdnproxyOutput
}

func (*Sdnproxy) ElementType() reflect.Type {
	return reflect.TypeOf((**Sdnproxy)(nil)).Elem()
}

func (i *Sdnproxy) ToSdnproxyOutput() SdnproxyOutput {
	return i.ToSdnproxyOutputWithContext(context.Background())
}

func (i *Sdnproxy) ToSdnproxyOutputWithContext(ctx context.Context) SdnproxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SdnproxyOutput)
}

// SdnproxyArrayInput is an input type that accepts SdnproxyArray and SdnproxyArrayOutput values.
// You can construct a concrete instance of `SdnproxyArrayInput` via:
//
//	SdnproxyArray{ SdnproxyArgs{...} }
type SdnproxyArrayInput interface {
	pulumi.Input

	ToSdnproxyArrayOutput() SdnproxyArrayOutput
	ToSdnproxyArrayOutputWithContext(context.Context) SdnproxyArrayOutput
}

type SdnproxyArray []SdnproxyInput

func (SdnproxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sdnproxy)(nil)).Elem()
}

func (i SdnproxyArray) ToSdnproxyArrayOutput() SdnproxyArrayOutput {
	return i.ToSdnproxyArrayOutputWithContext(context.Background())
}

func (i SdnproxyArray) ToSdnproxyArrayOutputWithContext(ctx context.Context) SdnproxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SdnproxyArrayOutput)
}

// SdnproxyMapInput is an input type that accepts SdnproxyMap and SdnproxyMapOutput values.
// You can construct a concrete instance of `SdnproxyMapInput` via:
//
//	SdnproxyMap{ "key": SdnproxyArgs{...} }
type SdnproxyMapInput interface {
	pulumi.Input

	ToSdnproxyMapOutput() SdnproxyMapOutput
	ToSdnproxyMapOutputWithContext(context.Context) SdnproxyMapOutput
}

type SdnproxyMap map[string]SdnproxyInput

func (SdnproxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sdnproxy)(nil)).Elem()
}

func (i SdnproxyMap) ToSdnproxyMapOutput() SdnproxyMapOutput {
	return i.ToSdnproxyMapOutputWithContext(context.Background())
}

func (i SdnproxyMap) ToSdnproxyMapOutputWithContext(ctx context.Context) SdnproxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SdnproxyMapOutput)
}

type SdnproxyOutput struct{ *pulumi.OutputState }

func (SdnproxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sdnproxy)(nil)).Elem()
}

func (o SdnproxyOutput) ToSdnproxyOutput() SdnproxyOutput {
	return o
}

func (o SdnproxyOutput) ToSdnproxyOutputWithContext(ctx context.Context) SdnproxyOutput {
	return o
}

// SDN proxy name.
func (o SdnproxyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Sdnproxy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// SDN proxy password.
func (o SdnproxyOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sdnproxy) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Server address of the SDN proxy.
func (o SdnproxyOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *Sdnproxy) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// Port number of the SDN proxy.
func (o SdnproxyOutput) ServerPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Sdnproxy) pulumi.IntOutput { return v.ServerPort }).(pulumi.IntOutput)
}

// Type of SDN proxy. Valid values: `general`, `fortimanager`.
func (o SdnproxyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Sdnproxy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// SDN proxy username.
func (o SdnproxyOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *Sdnproxy) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SdnproxyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sdnproxy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SdnproxyArrayOutput struct{ *pulumi.OutputState }

func (SdnproxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sdnproxy)(nil)).Elem()
}

func (o SdnproxyArrayOutput) ToSdnproxyArrayOutput() SdnproxyArrayOutput {
	return o
}

func (o SdnproxyArrayOutput) ToSdnproxyArrayOutputWithContext(ctx context.Context) SdnproxyArrayOutput {
	return o
}

func (o SdnproxyArrayOutput) Index(i pulumi.IntInput) SdnproxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Sdnproxy {
		return vs[0].([]*Sdnproxy)[vs[1].(int)]
	}).(SdnproxyOutput)
}

type SdnproxyMapOutput struct{ *pulumi.OutputState }

func (SdnproxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sdnproxy)(nil)).Elem()
}

func (o SdnproxyMapOutput) ToSdnproxyMapOutput() SdnproxyMapOutput {
	return o
}

func (o SdnproxyMapOutput) ToSdnproxyMapOutputWithContext(ctx context.Context) SdnproxyMapOutput {
	return o
}

func (o SdnproxyMapOutput) MapIndex(k pulumi.StringInput) SdnproxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Sdnproxy {
		return vs[0].(map[string]*Sdnproxy)[vs[1].(string)]
	}).(SdnproxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SdnproxyInput)(nil)).Elem(), &Sdnproxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SdnproxyArrayInput)(nil)).Elem(), SdnproxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SdnproxyMapInput)(nil)).Elem(), SdnproxyMap{})
	pulumi.RegisterOutputType(SdnproxyOutput{})
	pulumi.RegisterOutputType(SdnproxyArrayOutput{})
	pulumi.RegisterOutputType(SdnproxyMapOutput{})
}
