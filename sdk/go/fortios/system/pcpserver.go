// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure PCP server information. Applies to FortiOS Version `>= 7.4.0`.
//
// ## Import
//
// System PcpServer can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/pcpserver:Pcpserver labelname SystemPcpServer
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/pcpserver:Pcpserver labelname SystemPcpServer
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Pcpserver struct {
	pulumi.CustomResourceState

	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Configure PCP pools. The structure of `pools` block is documented below.
	Pools PcpserverPoolArrayOutput `pulumi:"pools"`
	// Enable/disable PCP server. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewPcpserver registers a new resource with the given unique name, arguments, and options.
func NewPcpserver(ctx *pulumi.Context,
	name string, args *PcpserverArgs, opts ...pulumi.ResourceOption) (*Pcpserver, error) {
	if args == nil {
		args = &PcpserverArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pcpserver
	err := ctx.RegisterResource("fortios:system/pcpserver:Pcpserver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPcpserver gets an existing Pcpserver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPcpserver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PcpserverState, opts ...pulumi.ResourceOption) (*Pcpserver, error) {
	var resource Pcpserver
	err := ctx.ReadResource("fortios:system/pcpserver:Pcpserver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pcpserver resources.
type pcpserverState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Configure PCP pools. The structure of `pools` block is documented below.
	Pools []PcpserverPool `pulumi:"pools"`
	// Enable/disable PCP server. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type PcpserverState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Configure PCP pools. The structure of `pools` block is documented below.
	Pools PcpserverPoolArrayInput
	// Enable/disable PCP server. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (PcpserverState) ElementType() reflect.Type {
	return reflect.TypeOf((*pcpserverState)(nil)).Elem()
}

type pcpserverArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Configure PCP pools. The structure of `pools` block is documented below.
	Pools []PcpserverPool `pulumi:"pools"`
	// Enable/disable PCP server. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Pcpserver resource.
type PcpserverArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Configure PCP pools. The structure of `pools` block is documented below.
	Pools PcpserverPoolArrayInput
	// Enable/disable PCP server. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (PcpserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pcpserverArgs)(nil)).Elem()
}

type PcpserverInput interface {
	pulumi.Input

	ToPcpserverOutput() PcpserverOutput
	ToPcpserverOutputWithContext(ctx context.Context) PcpserverOutput
}

func (*Pcpserver) ElementType() reflect.Type {
	return reflect.TypeOf((**Pcpserver)(nil)).Elem()
}

func (i *Pcpserver) ToPcpserverOutput() PcpserverOutput {
	return i.ToPcpserverOutputWithContext(context.Background())
}

func (i *Pcpserver) ToPcpserverOutputWithContext(ctx context.Context) PcpserverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PcpserverOutput)
}

// PcpserverArrayInput is an input type that accepts PcpserverArray and PcpserverArrayOutput values.
// You can construct a concrete instance of `PcpserverArrayInput` via:
//
//	PcpserverArray{ PcpserverArgs{...} }
type PcpserverArrayInput interface {
	pulumi.Input

	ToPcpserverArrayOutput() PcpserverArrayOutput
	ToPcpserverArrayOutputWithContext(context.Context) PcpserverArrayOutput
}

type PcpserverArray []PcpserverInput

func (PcpserverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pcpserver)(nil)).Elem()
}

func (i PcpserverArray) ToPcpserverArrayOutput() PcpserverArrayOutput {
	return i.ToPcpserverArrayOutputWithContext(context.Background())
}

func (i PcpserverArray) ToPcpserverArrayOutputWithContext(ctx context.Context) PcpserverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PcpserverArrayOutput)
}

// PcpserverMapInput is an input type that accepts PcpserverMap and PcpserverMapOutput values.
// You can construct a concrete instance of `PcpserverMapInput` via:
//
//	PcpserverMap{ "key": PcpserverArgs{...} }
type PcpserverMapInput interface {
	pulumi.Input

	ToPcpserverMapOutput() PcpserverMapOutput
	ToPcpserverMapOutputWithContext(context.Context) PcpserverMapOutput
}

type PcpserverMap map[string]PcpserverInput

func (PcpserverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pcpserver)(nil)).Elem()
}

func (i PcpserverMap) ToPcpserverMapOutput() PcpserverMapOutput {
	return i.ToPcpserverMapOutputWithContext(context.Background())
}

func (i PcpserverMap) ToPcpserverMapOutputWithContext(ctx context.Context) PcpserverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PcpserverMapOutput)
}

type PcpserverOutput struct{ *pulumi.OutputState }

func (PcpserverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pcpserver)(nil)).Elem()
}

func (o PcpserverOutput) ToPcpserverOutput() PcpserverOutput {
	return o
}

func (o PcpserverOutput) ToPcpserverOutputWithContext(ctx context.Context) PcpserverOutput {
	return o
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o PcpserverOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pcpserver) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o PcpserverOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pcpserver) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Configure PCP pools. The structure of `pools` block is documented below.
func (o PcpserverOutput) Pools() PcpserverPoolArrayOutput {
	return o.ApplyT(func(v *Pcpserver) PcpserverPoolArrayOutput { return v.Pools }).(PcpserverPoolArrayOutput)
}

// Enable/disable PCP server. Valid values: `enable`, `disable`.
func (o PcpserverOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Pcpserver) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o PcpserverOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pcpserver) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type PcpserverArrayOutput struct{ *pulumi.OutputState }

func (PcpserverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pcpserver)(nil)).Elem()
}

func (o PcpserverArrayOutput) ToPcpserverArrayOutput() PcpserverArrayOutput {
	return o
}

func (o PcpserverArrayOutput) ToPcpserverArrayOutputWithContext(ctx context.Context) PcpserverArrayOutput {
	return o
}

func (o PcpserverArrayOutput) Index(i pulumi.IntInput) PcpserverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pcpserver {
		return vs[0].([]*Pcpserver)[vs[1].(int)]
	}).(PcpserverOutput)
}

type PcpserverMapOutput struct{ *pulumi.OutputState }

func (PcpserverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pcpserver)(nil)).Elem()
}

func (o PcpserverMapOutput) ToPcpserverMapOutput() PcpserverMapOutput {
	return o
}

func (o PcpserverMapOutput) ToPcpserverMapOutputWithContext(ctx context.Context) PcpserverMapOutput {
	return o
}

func (o PcpserverMapOutput) MapIndex(k pulumi.StringInput) PcpserverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pcpserver {
		return vs[0].(map[string]*Pcpserver)[vs[1].(string)]
	}).(PcpserverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PcpserverInput)(nil)).Elem(), &Pcpserver{})
	pulumi.RegisterInputType(reflect.TypeOf((*PcpserverArrayInput)(nil)).Elem(), PcpserverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PcpserverMapInput)(nil)).Elem(), PcpserverMap{})
	pulumi.RegisterOutputType(PcpserverOutput{})
	pulumi.RegisterOutputType(PcpserverArrayOutput{})
	pulumi.RegisterOutputType(PcpserverMapOutput{})
}
