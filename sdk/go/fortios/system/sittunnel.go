// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure IPv6 tunnel over IPv4.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewSittunnel(ctx, "trname", &system.SittunnelArgs{
//				Destination: pulumi.String("1.1.1.1"),
//				Interface:   pulumi.String("port2"),
//				Ip6:         pulumi.String("::/0"),
//				Source:      pulumi.String("2.2.2.2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// System SitTunnel can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/sittunnel:Sittunnel labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/sittunnel:Sittunnel labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Sittunnel struct {
	pulumi.CustomResourceState

	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringOutput `pulumi:"autoAsicOffload"`
	// Destination IP address of the tunnel.
	Destination pulumi.StringOutput `pulumi:"destination"`
	// Interface name.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// IPv6 address of the tunnel.
	Ip6 pulumi.StringOutput `pulumi:"ip6"`
	// Tunnel name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Source IP address of the tunnel.
	Source pulumi.StringOutput `pulumi:"source"`
	// Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
	UseSdwan pulumi.StringOutput `pulumi:"useSdwan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewSittunnel registers a new resource with the given unique name, arguments, and options.
func NewSittunnel(ctx *pulumi.Context,
	name string, args *SittunnelArgs, opts ...pulumi.ResourceOption) (*Sittunnel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Sittunnel
	err := ctx.RegisterResource("fortios:system/sittunnel:Sittunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSittunnel gets an existing Sittunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSittunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SittunnelState, opts ...pulumi.ResourceOption) (*Sittunnel, error) {
	var resource Sittunnel
	err := ctx.ReadResource("fortios:system/sittunnel:Sittunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sittunnel resources.
type sittunnelState struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Destination IP address of the tunnel.
	Destination *string `pulumi:"destination"`
	// Interface name.
	Interface *string `pulumi:"interface"`
	// IPv6 address of the tunnel.
	Ip6 *string `pulumi:"ip6"`
	// Tunnel name.
	Name *string `pulumi:"name"`
	// Source IP address of the tunnel.
	Source *string `pulumi:"source"`
	// Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
	UseSdwan *string `pulumi:"useSdwan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SittunnelState struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Destination IP address of the tunnel.
	Destination pulumi.StringPtrInput
	// Interface name.
	Interface pulumi.StringPtrInput
	// IPv6 address of the tunnel.
	Ip6 pulumi.StringPtrInput
	// Tunnel name.
	Name pulumi.StringPtrInput
	// Source IP address of the tunnel.
	Source pulumi.StringPtrInput
	// Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
	UseSdwan pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SittunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*sittunnelState)(nil)).Elem()
}

type sittunnelArgs struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Destination IP address of the tunnel.
	Destination string `pulumi:"destination"`
	// Interface name.
	Interface *string `pulumi:"interface"`
	// IPv6 address of the tunnel.
	Ip6 *string `pulumi:"ip6"`
	// Tunnel name.
	Name *string `pulumi:"name"`
	// Source IP address of the tunnel.
	Source *string `pulumi:"source"`
	// Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
	UseSdwan *string `pulumi:"useSdwan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Sittunnel resource.
type SittunnelArgs struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Destination IP address of the tunnel.
	Destination pulumi.StringInput
	// Interface name.
	Interface pulumi.StringPtrInput
	// IPv6 address of the tunnel.
	Ip6 pulumi.StringPtrInput
	// Tunnel name.
	Name pulumi.StringPtrInput
	// Source IP address of the tunnel.
	Source pulumi.StringPtrInput
	// Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
	UseSdwan pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SittunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sittunnelArgs)(nil)).Elem()
}

type SittunnelInput interface {
	pulumi.Input

	ToSittunnelOutput() SittunnelOutput
	ToSittunnelOutputWithContext(ctx context.Context) SittunnelOutput
}

func (*Sittunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**Sittunnel)(nil)).Elem()
}

func (i *Sittunnel) ToSittunnelOutput() SittunnelOutput {
	return i.ToSittunnelOutputWithContext(context.Background())
}

func (i *Sittunnel) ToSittunnelOutputWithContext(ctx context.Context) SittunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SittunnelOutput)
}

// SittunnelArrayInput is an input type that accepts SittunnelArray and SittunnelArrayOutput values.
// You can construct a concrete instance of `SittunnelArrayInput` via:
//
//	SittunnelArray{ SittunnelArgs{...} }
type SittunnelArrayInput interface {
	pulumi.Input

	ToSittunnelArrayOutput() SittunnelArrayOutput
	ToSittunnelArrayOutputWithContext(context.Context) SittunnelArrayOutput
}

type SittunnelArray []SittunnelInput

func (SittunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sittunnel)(nil)).Elem()
}

func (i SittunnelArray) ToSittunnelArrayOutput() SittunnelArrayOutput {
	return i.ToSittunnelArrayOutputWithContext(context.Background())
}

func (i SittunnelArray) ToSittunnelArrayOutputWithContext(ctx context.Context) SittunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SittunnelArrayOutput)
}

// SittunnelMapInput is an input type that accepts SittunnelMap and SittunnelMapOutput values.
// You can construct a concrete instance of `SittunnelMapInput` via:
//
//	SittunnelMap{ "key": SittunnelArgs{...} }
type SittunnelMapInput interface {
	pulumi.Input

	ToSittunnelMapOutput() SittunnelMapOutput
	ToSittunnelMapOutputWithContext(context.Context) SittunnelMapOutput
}

type SittunnelMap map[string]SittunnelInput

func (SittunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sittunnel)(nil)).Elem()
}

func (i SittunnelMap) ToSittunnelMapOutput() SittunnelMapOutput {
	return i.ToSittunnelMapOutputWithContext(context.Background())
}

func (i SittunnelMap) ToSittunnelMapOutputWithContext(ctx context.Context) SittunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SittunnelMapOutput)
}

type SittunnelOutput struct{ *pulumi.OutputState }

func (SittunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sittunnel)(nil)).Elem()
}

func (o SittunnelOutput) ToSittunnelOutput() SittunnelOutput {
	return o
}

func (o SittunnelOutput) ToSittunnelOutputWithContext(ctx context.Context) SittunnelOutput {
	return o
}

// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
func (o SittunnelOutput) AutoAsicOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *Sittunnel) pulumi.StringOutput { return v.AutoAsicOffload }).(pulumi.StringOutput)
}

// Destination IP address of the tunnel.
func (o SittunnelOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *Sittunnel) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

// Interface name.
func (o SittunnelOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Sittunnel) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// IPv6 address of the tunnel.
func (o SittunnelOutput) Ip6() pulumi.StringOutput {
	return o.ApplyT(func(v *Sittunnel) pulumi.StringOutput { return v.Ip6 }).(pulumi.StringOutput)
}

// Tunnel name.
func (o SittunnelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Sittunnel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Source IP address of the tunnel.
func (o SittunnelOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *Sittunnel) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
func (o SittunnelOutput) UseSdwan() pulumi.StringOutput {
	return o.ApplyT(func(v *Sittunnel) pulumi.StringOutput { return v.UseSdwan }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SittunnelOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Sittunnel) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type SittunnelArrayOutput struct{ *pulumi.OutputState }

func (SittunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sittunnel)(nil)).Elem()
}

func (o SittunnelArrayOutput) ToSittunnelArrayOutput() SittunnelArrayOutput {
	return o
}

func (o SittunnelArrayOutput) ToSittunnelArrayOutputWithContext(ctx context.Context) SittunnelArrayOutput {
	return o
}

func (o SittunnelArrayOutput) Index(i pulumi.IntInput) SittunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Sittunnel {
		return vs[0].([]*Sittunnel)[vs[1].(int)]
	}).(SittunnelOutput)
}

type SittunnelMapOutput struct{ *pulumi.OutputState }

func (SittunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sittunnel)(nil)).Elem()
}

func (o SittunnelMapOutput) ToSittunnelMapOutput() SittunnelMapOutput {
	return o
}

func (o SittunnelMapOutput) ToSittunnelMapOutputWithContext(ctx context.Context) SittunnelMapOutput {
	return o
}

func (o SittunnelMapOutput) MapIndex(k pulumi.StringInput) SittunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Sittunnel {
		return vs[0].(map[string]*Sittunnel)[vs[1].(string)]
	}).(SittunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SittunnelInput)(nil)).Elem(), &Sittunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*SittunnelArrayInput)(nil)).Elem(), SittunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SittunnelMapInput)(nil)).Elem(), SittunnelMap{})
	pulumi.RegisterOutputType(SittunnelOutput{})
	pulumi.RegisterOutputType(SittunnelArrayOutput{})
	pulumi.RegisterOutputType(SittunnelMapOutput{})
}
