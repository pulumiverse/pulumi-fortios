// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure FortiAI. Applies to FortiOS Version `7.0.1,7.0.2,7.0.3,7.0.4,7.0.5,7.0.6,7.0.7`.
//
// ## Import
//
// System Fortiai can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/fortiai:Fortiai labelname SystemFortiai
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/fortiai:Fortiai labelname SystemFortiai
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Fortiai struct {
	pulumi.CustomResourceState

	// Specify outgoing interface to reach server.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringOutput `pulumi:"interfaceSelectMethod"`
	// Source IP address for communications to FortiAI.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Enable/disable FortiAI. Valid values: `disable`, `enable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFortiai registers a new resource with the given unique name, arguments, and options.
func NewFortiai(ctx *pulumi.Context,
	name string, args *FortiaiArgs, opts ...pulumi.ResourceOption) (*Fortiai, error) {
	if args == nil {
		args = &FortiaiArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Fortiai
	err := ctx.RegisterResource("fortios:system/fortiai:Fortiai", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFortiai gets an existing Fortiai resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFortiai(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FortiaiState, opts ...pulumi.ResourceOption) (*Fortiai, error) {
	var resource Fortiai
	err := ctx.ReadResource("fortios:system/fortiai:Fortiai", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fortiai resources.
type fortiaiState struct {
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Source IP address for communications to FortiAI.
	SourceIp *string `pulumi:"sourceIp"`
	// Enable/disable FortiAI. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FortiaiState struct {
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Source IP address for communications to FortiAI.
	SourceIp pulumi.StringPtrInput
	// Enable/disable FortiAI. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FortiaiState) ElementType() reflect.Type {
	return reflect.TypeOf((*fortiaiState)(nil)).Elem()
}

type fortiaiArgs struct {
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Source IP address for communications to FortiAI.
	SourceIp *string `pulumi:"sourceIp"`
	// Enable/disable FortiAI. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Fortiai resource.
type FortiaiArgs struct {
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Source IP address for communications to FortiAI.
	SourceIp pulumi.StringPtrInput
	// Enable/disable FortiAI. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FortiaiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fortiaiArgs)(nil)).Elem()
}

type FortiaiInput interface {
	pulumi.Input

	ToFortiaiOutput() FortiaiOutput
	ToFortiaiOutputWithContext(ctx context.Context) FortiaiOutput
}

func (*Fortiai) ElementType() reflect.Type {
	return reflect.TypeOf((**Fortiai)(nil)).Elem()
}

func (i *Fortiai) ToFortiaiOutput() FortiaiOutput {
	return i.ToFortiaiOutputWithContext(context.Background())
}

func (i *Fortiai) ToFortiaiOutputWithContext(ctx context.Context) FortiaiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortiaiOutput)
}

// FortiaiArrayInput is an input type that accepts FortiaiArray and FortiaiArrayOutput values.
// You can construct a concrete instance of `FortiaiArrayInput` via:
//
//	FortiaiArray{ FortiaiArgs{...} }
type FortiaiArrayInput interface {
	pulumi.Input

	ToFortiaiArrayOutput() FortiaiArrayOutput
	ToFortiaiArrayOutputWithContext(context.Context) FortiaiArrayOutput
}

type FortiaiArray []FortiaiInput

func (FortiaiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fortiai)(nil)).Elem()
}

func (i FortiaiArray) ToFortiaiArrayOutput() FortiaiArrayOutput {
	return i.ToFortiaiArrayOutputWithContext(context.Background())
}

func (i FortiaiArray) ToFortiaiArrayOutputWithContext(ctx context.Context) FortiaiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortiaiArrayOutput)
}

// FortiaiMapInput is an input type that accepts FortiaiMap and FortiaiMapOutput values.
// You can construct a concrete instance of `FortiaiMapInput` via:
//
//	FortiaiMap{ "key": FortiaiArgs{...} }
type FortiaiMapInput interface {
	pulumi.Input

	ToFortiaiMapOutput() FortiaiMapOutput
	ToFortiaiMapOutputWithContext(context.Context) FortiaiMapOutput
}

type FortiaiMap map[string]FortiaiInput

func (FortiaiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fortiai)(nil)).Elem()
}

func (i FortiaiMap) ToFortiaiMapOutput() FortiaiMapOutput {
	return i.ToFortiaiMapOutputWithContext(context.Background())
}

func (i FortiaiMap) ToFortiaiMapOutputWithContext(ctx context.Context) FortiaiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortiaiMapOutput)
}

type FortiaiOutput struct{ *pulumi.OutputState }

func (FortiaiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fortiai)(nil)).Elem()
}

func (o FortiaiOutput) ToFortiaiOutput() FortiaiOutput {
	return o
}

func (o FortiaiOutput) ToFortiaiOutputWithContext(ctx context.Context) FortiaiOutput {
	return o
}

// Specify outgoing interface to reach server.
func (o FortiaiOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Fortiai) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
func (o FortiaiOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Fortiai) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

// Source IP address for communications to FortiAI.
func (o FortiaiOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Fortiai) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// Enable/disable FortiAI. Valid values: `disable`, `enable`.
func (o FortiaiOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Fortiai) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o FortiaiOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fortiai) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FortiaiArrayOutput struct{ *pulumi.OutputState }

func (FortiaiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fortiai)(nil)).Elem()
}

func (o FortiaiArrayOutput) ToFortiaiArrayOutput() FortiaiArrayOutput {
	return o
}

func (o FortiaiArrayOutput) ToFortiaiArrayOutputWithContext(ctx context.Context) FortiaiArrayOutput {
	return o
}

func (o FortiaiArrayOutput) Index(i pulumi.IntInput) FortiaiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Fortiai {
		return vs[0].([]*Fortiai)[vs[1].(int)]
	}).(FortiaiOutput)
}

type FortiaiMapOutput struct{ *pulumi.OutputState }

func (FortiaiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fortiai)(nil)).Elem()
}

func (o FortiaiMapOutput) ToFortiaiMapOutput() FortiaiMapOutput {
	return o
}

func (o FortiaiMapOutput) ToFortiaiMapOutputWithContext(ctx context.Context) FortiaiMapOutput {
	return o
}

func (o FortiaiMapOutput) MapIndex(k pulumi.StringInput) FortiaiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Fortiai {
		return vs[0].(map[string]*Fortiai)[vs[1].(string)]
	}).(FortiaiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FortiaiInput)(nil)).Elem(), &Fortiai{})
	pulumi.RegisterInputType(reflect.TypeOf((*FortiaiArrayInput)(nil)).Elem(), FortiaiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FortiaiMapInput)(nil)).Elem(), FortiaiMap{})
	pulumi.RegisterOutputType(FortiaiOutput{})
	pulumi.RegisterOutputType(FortiaiArrayOutput{})
	pulumi.RegisterOutputType(FortiaiMapOutput{})
}
