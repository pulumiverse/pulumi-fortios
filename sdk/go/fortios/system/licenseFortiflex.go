// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Provides a resource to download VM license using uploaded FortiFlex token for FortiOS. Reboots immediately if successful.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/system"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := system.NewLicenseFortiflex(ctx, "test", &system.LicenseFortiflexArgs{
//				Token: pulumi.String("5FE7B3CE6B606DEB20E3"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LicenseFortiflex struct {
	pulumi.CustomResourceState

	// HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
	ProxyUrl pulumi.StringPtrOutput `pulumi:"proxyUrl"`
	// FortiFlex VM license token.
	Token pulumi.StringOutput `pulumi:"token"`
}

// NewLicenseFortiflex registers a new resource with the given unique name, arguments, and options.
func NewLicenseFortiflex(ctx *pulumi.Context,
	name string, args *LicenseFortiflexArgs, opts ...pulumi.ResourceOption) (*LicenseFortiflex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LicenseFortiflex
	err := ctx.RegisterResource("fortios:system/licenseFortiflex:LicenseFortiflex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseFortiflex gets an existing LicenseFortiflex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseFortiflex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseFortiflexState, opts ...pulumi.ResourceOption) (*LicenseFortiflex, error) {
	var resource LicenseFortiflex
	err := ctx.ReadResource("fortios:system/licenseFortiflex:LicenseFortiflex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseFortiflex resources.
type licenseFortiflexState struct {
	// HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
	ProxyUrl *string `pulumi:"proxyUrl"`
	// FortiFlex VM license token.
	Token *string `pulumi:"token"`
}

type LicenseFortiflexState struct {
	// HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
	ProxyUrl pulumi.StringPtrInput
	// FortiFlex VM license token.
	Token pulumi.StringPtrInput
}

func (LicenseFortiflexState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseFortiflexState)(nil)).Elem()
}

type licenseFortiflexArgs struct {
	// HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
	ProxyUrl *string `pulumi:"proxyUrl"`
	// FortiFlex VM license token.
	Token string `pulumi:"token"`
}

// The set of arguments for constructing a LicenseFortiflex resource.
type LicenseFortiflexArgs struct {
	// HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
	ProxyUrl pulumi.StringPtrInput
	// FortiFlex VM license token.
	Token pulumi.StringInput
}

func (LicenseFortiflexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseFortiflexArgs)(nil)).Elem()
}

type LicenseFortiflexInput interface {
	pulumi.Input

	ToLicenseFortiflexOutput() LicenseFortiflexOutput
	ToLicenseFortiflexOutputWithContext(ctx context.Context) LicenseFortiflexOutput
}

func (*LicenseFortiflex) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseFortiflex)(nil)).Elem()
}

func (i *LicenseFortiflex) ToLicenseFortiflexOutput() LicenseFortiflexOutput {
	return i.ToLicenseFortiflexOutputWithContext(context.Background())
}

func (i *LicenseFortiflex) ToLicenseFortiflexOutputWithContext(ctx context.Context) LicenseFortiflexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseFortiflexOutput)
}

// LicenseFortiflexArrayInput is an input type that accepts LicenseFortiflexArray and LicenseFortiflexArrayOutput values.
// You can construct a concrete instance of `LicenseFortiflexArrayInput` via:
//
//	LicenseFortiflexArray{ LicenseFortiflexArgs{...} }
type LicenseFortiflexArrayInput interface {
	pulumi.Input

	ToLicenseFortiflexArrayOutput() LicenseFortiflexArrayOutput
	ToLicenseFortiflexArrayOutputWithContext(context.Context) LicenseFortiflexArrayOutput
}

type LicenseFortiflexArray []LicenseFortiflexInput

func (LicenseFortiflexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseFortiflex)(nil)).Elem()
}

func (i LicenseFortiflexArray) ToLicenseFortiflexArrayOutput() LicenseFortiflexArrayOutput {
	return i.ToLicenseFortiflexArrayOutputWithContext(context.Background())
}

func (i LicenseFortiflexArray) ToLicenseFortiflexArrayOutputWithContext(ctx context.Context) LicenseFortiflexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseFortiflexArrayOutput)
}

// LicenseFortiflexMapInput is an input type that accepts LicenseFortiflexMap and LicenseFortiflexMapOutput values.
// You can construct a concrete instance of `LicenseFortiflexMapInput` via:
//
//	LicenseFortiflexMap{ "key": LicenseFortiflexArgs{...} }
type LicenseFortiflexMapInput interface {
	pulumi.Input

	ToLicenseFortiflexMapOutput() LicenseFortiflexMapOutput
	ToLicenseFortiflexMapOutputWithContext(context.Context) LicenseFortiflexMapOutput
}

type LicenseFortiflexMap map[string]LicenseFortiflexInput

func (LicenseFortiflexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseFortiflex)(nil)).Elem()
}

func (i LicenseFortiflexMap) ToLicenseFortiflexMapOutput() LicenseFortiflexMapOutput {
	return i.ToLicenseFortiflexMapOutputWithContext(context.Background())
}

func (i LicenseFortiflexMap) ToLicenseFortiflexMapOutputWithContext(ctx context.Context) LicenseFortiflexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseFortiflexMapOutput)
}

type LicenseFortiflexOutput struct{ *pulumi.OutputState }

func (LicenseFortiflexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseFortiflex)(nil)).Elem()
}

func (o LicenseFortiflexOutput) ToLicenseFortiflexOutput() LicenseFortiflexOutput {
	return o
}

func (o LicenseFortiflexOutput) ToLicenseFortiflexOutputWithContext(ctx context.Context) LicenseFortiflexOutput {
	return o
}

// HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
func (o LicenseFortiflexOutput) ProxyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LicenseFortiflex) pulumi.StringPtrOutput { return v.ProxyUrl }).(pulumi.StringPtrOutput)
}

// FortiFlex VM license token.
func (o LicenseFortiflexOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseFortiflex) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

type LicenseFortiflexArrayOutput struct{ *pulumi.OutputState }

func (LicenseFortiflexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseFortiflex)(nil)).Elem()
}

func (o LicenseFortiflexArrayOutput) ToLicenseFortiflexArrayOutput() LicenseFortiflexArrayOutput {
	return o
}

func (o LicenseFortiflexArrayOutput) ToLicenseFortiflexArrayOutputWithContext(ctx context.Context) LicenseFortiflexArrayOutput {
	return o
}

func (o LicenseFortiflexArrayOutput) Index(i pulumi.IntInput) LicenseFortiflexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LicenseFortiflex {
		return vs[0].([]*LicenseFortiflex)[vs[1].(int)]
	}).(LicenseFortiflexOutput)
}

type LicenseFortiflexMapOutput struct{ *pulumi.OutputState }

func (LicenseFortiflexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseFortiflex)(nil)).Elem()
}

func (o LicenseFortiflexMapOutput) ToLicenseFortiflexMapOutput() LicenseFortiflexMapOutput {
	return o
}

func (o LicenseFortiflexMapOutput) ToLicenseFortiflexMapOutputWithContext(ctx context.Context) LicenseFortiflexMapOutput {
	return o
}

func (o LicenseFortiflexMapOutput) MapIndex(k pulumi.StringInput) LicenseFortiflexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LicenseFortiflex {
		return vs[0].(map[string]*LicenseFortiflex)[vs[1].(string)]
	}).(LicenseFortiflexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseFortiflexInput)(nil)).Elem(), &LicenseFortiflex{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseFortiflexArrayInput)(nil)).Elem(), LicenseFortiflexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseFortiflexMapInput)(nil)).Elem(), LicenseFortiflexMap{})
	pulumi.RegisterOutputType(LicenseFortiflexOutput{})
	pulumi.RegisterOutputType(LicenseFortiflexArrayOutput{})
	pulumi.RegisterOutputType(LicenseFortiflexMapOutput{})
}
