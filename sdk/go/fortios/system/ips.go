// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package system

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure IPS system settings. Applies to FortiOS Version `>= 6.4.2`.
//
// ## Import
//
// System Ips can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:system/ips:Ips labelname SystemIps
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:system/ips:Ips labelname SystemIps
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Ips struct {
	pulumi.CustomResourceState

	// Enable/disable override of hold of triggering signatures that are specified by IDs regardless of hold. Valid values: `enable`, `disable`.
	OverrideSignatureHoldById pulumi.StringOutput `pulumi:"overrideSignatureHoldById"`
	// Time to hold and monitor IPS signatures. Format <#d##h> (day range: 0 - 7, hour range: 0 - 23, max hold time: 7d0h, default hold time: 0d0h).
	SignatureHoldTime pulumi.StringOutput `pulumi:"signatureHoldTime"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewIps registers a new resource with the given unique name, arguments, and options.
func NewIps(ctx *pulumi.Context,
	name string, args *IpsArgs, opts ...pulumi.ResourceOption) (*Ips, error) {
	if args == nil {
		args = &IpsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ips
	err := ctx.RegisterResource("fortios:system/ips:Ips", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIps gets an existing Ips resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIps(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpsState, opts ...pulumi.ResourceOption) (*Ips, error) {
	var resource Ips
	err := ctx.ReadResource("fortios:system/ips:Ips", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ips resources.
type ipsState struct {
	// Enable/disable override of hold of triggering signatures that are specified by IDs regardless of hold. Valid values: `enable`, `disable`.
	OverrideSignatureHoldById *string `pulumi:"overrideSignatureHoldById"`
	// Time to hold and monitor IPS signatures. Format <#d##h> (day range: 0 - 7, hour range: 0 - 23, max hold time: 7d0h, default hold time: 0d0h).
	SignatureHoldTime *string `pulumi:"signatureHoldTime"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type IpsState struct {
	// Enable/disable override of hold of triggering signatures that are specified by IDs regardless of hold. Valid values: `enable`, `disable`.
	OverrideSignatureHoldById pulumi.StringPtrInput
	// Time to hold and monitor IPS signatures. Format <#d##h> (day range: 0 - 7, hour range: 0 - 23, max hold time: 7d0h, default hold time: 0d0h).
	SignatureHoldTime pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IpsState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsState)(nil)).Elem()
}

type ipsArgs struct {
	// Enable/disable override of hold of triggering signatures that are specified by IDs regardless of hold. Valid values: `enable`, `disable`.
	OverrideSignatureHoldById *string `pulumi:"overrideSignatureHoldById"`
	// Time to hold and monitor IPS signatures. Format <#d##h> (day range: 0 - 7, hour range: 0 - 23, max hold time: 7d0h, default hold time: 0d0h).
	SignatureHoldTime *string `pulumi:"signatureHoldTime"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Ips resource.
type IpsArgs struct {
	// Enable/disable override of hold of triggering signatures that are specified by IDs regardless of hold. Valid values: `enable`, `disable`.
	OverrideSignatureHoldById pulumi.StringPtrInput
	// Time to hold and monitor IPS signatures. Format <#d##h> (day range: 0 - 7, hour range: 0 - 23, max hold time: 7d0h, default hold time: 0d0h).
	SignatureHoldTime pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IpsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsArgs)(nil)).Elem()
}

type IpsInput interface {
	pulumi.Input

	ToIpsOutput() IpsOutput
	ToIpsOutputWithContext(ctx context.Context) IpsOutput
}

func (*Ips) ElementType() reflect.Type {
	return reflect.TypeOf((**Ips)(nil)).Elem()
}

func (i *Ips) ToIpsOutput() IpsOutput {
	return i.ToIpsOutputWithContext(context.Background())
}

func (i *Ips) ToIpsOutputWithContext(ctx context.Context) IpsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsOutput)
}

// IpsArrayInput is an input type that accepts IpsArray and IpsArrayOutput values.
// You can construct a concrete instance of `IpsArrayInput` via:
//
//	IpsArray{ IpsArgs{...} }
type IpsArrayInput interface {
	pulumi.Input

	ToIpsArrayOutput() IpsArrayOutput
	ToIpsArrayOutputWithContext(context.Context) IpsArrayOutput
}

type IpsArray []IpsInput

func (IpsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ips)(nil)).Elem()
}

func (i IpsArray) ToIpsArrayOutput() IpsArrayOutput {
	return i.ToIpsArrayOutputWithContext(context.Background())
}

func (i IpsArray) ToIpsArrayOutputWithContext(ctx context.Context) IpsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsArrayOutput)
}

// IpsMapInput is an input type that accepts IpsMap and IpsMapOutput values.
// You can construct a concrete instance of `IpsMapInput` via:
//
//	IpsMap{ "key": IpsArgs{...} }
type IpsMapInput interface {
	pulumi.Input

	ToIpsMapOutput() IpsMapOutput
	ToIpsMapOutputWithContext(context.Context) IpsMapOutput
}

type IpsMap map[string]IpsInput

func (IpsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ips)(nil)).Elem()
}

func (i IpsMap) ToIpsMapOutput() IpsMapOutput {
	return i.ToIpsMapOutputWithContext(context.Background())
}

func (i IpsMap) ToIpsMapOutputWithContext(ctx context.Context) IpsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsMapOutput)
}

type IpsOutput struct{ *pulumi.OutputState }

func (IpsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ips)(nil)).Elem()
}

func (o IpsOutput) ToIpsOutput() IpsOutput {
	return o
}

func (o IpsOutput) ToIpsOutputWithContext(ctx context.Context) IpsOutput {
	return o
}

// Enable/disable override of hold of triggering signatures that are specified by IDs regardless of hold. Valid values: `enable`, `disable`.
func (o IpsOutput) OverrideSignatureHoldById() pulumi.StringOutput {
	return o.ApplyT(func(v *Ips) pulumi.StringOutput { return v.OverrideSignatureHoldById }).(pulumi.StringOutput)
}

// Time to hold and monitor IPS signatures. Format <#d##h> (day range: 0 - 7, hour range: 0 - 23, max hold time: 7d0h, default hold time: 0d0h).
func (o IpsOutput) SignatureHoldTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Ips) pulumi.StringOutput { return v.SignatureHoldTime }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o IpsOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Ips) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type IpsArrayOutput struct{ *pulumi.OutputState }

func (IpsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ips)(nil)).Elem()
}

func (o IpsArrayOutput) ToIpsArrayOutput() IpsArrayOutput {
	return o
}

func (o IpsArrayOutput) ToIpsArrayOutputWithContext(ctx context.Context) IpsArrayOutput {
	return o
}

func (o IpsArrayOutput) Index(i pulumi.IntInput) IpsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ips {
		return vs[0].([]*Ips)[vs[1].(int)]
	}).(IpsOutput)
}

type IpsMapOutput struct{ *pulumi.OutputState }

func (IpsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ips)(nil)).Elem()
}

func (o IpsMapOutput) ToIpsMapOutput() IpsMapOutput {
	return o
}

func (o IpsMapOutput) ToIpsMapOutputWithContext(ctx context.Context) IpsMapOutput {
	return o
}

func (o IpsMapOutput) MapIndex(k pulumi.StringInput) IpsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ips {
		return vs[0].(map[string]*Ips)[vs[1].(string)]
	}).(IpsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpsInput)(nil)).Elem(), &Ips{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsArrayInput)(nil)).Elem(), IpsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsMapInput)(nil)).Elem(), IpsMap{})
	pulumi.RegisterOutputType(IpsOutput{})
	pulumi.RegisterOutputType(IpsArrayOutput{})
	pulumi.RegisterOutputType(IpsMapOutput{})
}
