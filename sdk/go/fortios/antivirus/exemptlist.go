// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package antivirus

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure a list of hashes to be exempt from AV scanning. Applies to FortiOS Version `>= 7.2.4`.
//
// ## Import
//
// Antivirus ExemptList can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:antivirus/exemptlist:Exemptlist labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:antivirus/exemptlist:Exemptlist labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Exemptlist struct {
	pulumi.CustomResourceState

	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Hash value to be matched.
	Hash pulumi.StringOutput `pulumi:"hash"`
	// Hash type. Valid values: `md5`, `sha1`, `sha256`.
	HashType pulumi.StringOutput `pulumi:"hashType"`
	// Table entry name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable table entry. Valid values: `disable`, `enable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewExemptlist registers a new resource with the given unique name, arguments, and options.
func NewExemptlist(ctx *pulumi.Context,
	name string, args *ExemptlistArgs, opts ...pulumi.ResourceOption) (*Exemptlist, error) {
	if args == nil {
		args = &ExemptlistArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Exemptlist
	err := ctx.RegisterResource("fortios:antivirus/exemptlist:Exemptlist", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExemptlist gets an existing Exemptlist resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExemptlist(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExemptlistState, opts ...pulumi.ResourceOption) (*Exemptlist, error) {
	var resource Exemptlist
	err := ctx.ReadResource("fortios:antivirus/exemptlist:Exemptlist", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Exemptlist resources.
type exemptlistState struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Hash value to be matched.
	Hash *string `pulumi:"hash"`
	// Hash type. Valid values: `md5`, `sha1`, `sha256`.
	HashType *string `pulumi:"hashType"`
	// Table entry name.
	Name *string `pulumi:"name"`
	// Enable/disable table entry. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type ExemptlistState struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Hash value to be matched.
	Hash pulumi.StringPtrInput
	// Hash type. Valid values: `md5`, `sha1`, `sha256`.
	HashType pulumi.StringPtrInput
	// Table entry name.
	Name pulumi.StringPtrInput
	// Enable/disable table entry. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ExemptlistState) ElementType() reflect.Type {
	return reflect.TypeOf((*exemptlistState)(nil)).Elem()
}

type exemptlistArgs struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Hash value to be matched.
	Hash *string `pulumi:"hash"`
	// Hash type. Valid values: `md5`, `sha1`, `sha256`.
	HashType *string `pulumi:"hashType"`
	// Table entry name.
	Name *string `pulumi:"name"`
	// Enable/disable table entry. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Exemptlist resource.
type ExemptlistArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Hash value to be matched.
	Hash pulumi.StringPtrInput
	// Hash type. Valid values: `md5`, `sha1`, `sha256`.
	HashType pulumi.StringPtrInput
	// Table entry name.
	Name pulumi.StringPtrInput
	// Enable/disable table entry. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ExemptlistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*exemptlistArgs)(nil)).Elem()
}

type ExemptlistInput interface {
	pulumi.Input

	ToExemptlistOutput() ExemptlistOutput
	ToExemptlistOutputWithContext(ctx context.Context) ExemptlistOutput
}

func (*Exemptlist) ElementType() reflect.Type {
	return reflect.TypeOf((**Exemptlist)(nil)).Elem()
}

func (i *Exemptlist) ToExemptlistOutput() ExemptlistOutput {
	return i.ToExemptlistOutputWithContext(context.Background())
}

func (i *Exemptlist) ToExemptlistOutputWithContext(ctx context.Context) ExemptlistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExemptlistOutput)
}

// ExemptlistArrayInput is an input type that accepts ExemptlistArray and ExemptlistArrayOutput values.
// You can construct a concrete instance of `ExemptlistArrayInput` via:
//
//	ExemptlistArray{ ExemptlistArgs{...} }
type ExemptlistArrayInput interface {
	pulumi.Input

	ToExemptlistArrayOutput() ExemptlistArrayOutput
	ToExemptlistArrayOutputWithContext(context.Context) ExemptlistArrayOutput
}

type ExemptlistArray []ExemptlistInput

func (ExemptlistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Exemptlist)(nil)).Elem()
}

func (i ExemptlistArray) ToExemptlistArrayOutput() ExemptlistArrayOutput {
	return i.ToExemptlistArrayOutputWithContext(context.Background())
}

func (i ExemptlistArray) ToExemptlistArrayOutputWithContext(ctx context.Context) ExemptlistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExemptlistArrayOutput)
}

// ExemptlistMapInput is an input type that accepts ExemptlistMap and ExemptlistMapOutput values.
// You can construct a concrete instance of `ExemptlistMapInput` via:
//
//	ExemptlistMap{ "key": ExemptlistArgs{...} }
type ExemptlistMapInput interface {
	pulumi.Input

	ToExemptlistMapOutput() ExemptlistMapOutput
	ToExemptlistMapOutputWithContext(context.Context) ExemptlistMapOutput
}

type ExemptlistMap map[string]ExemptlistInput

func (ExemptlistMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Exemptlist)(nil)).Elem()
}

func (i ExemptlistMap) ToExemptlistMapOutput() ExemptlistMapOutput {
	return i.ToExemptlistMapOutputWithContext(context.Background())
}

func (i ExemptlistMap) ToExemptlistMapOutputWithContext(ctx context.Context) ExemptlistMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExemptlistMapOutput)
}

type ExemptlistOutput struct{ *pulumi.OutputState }

func (ExemptlistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Exemptlist)(nil)).Elem()
}

func (o ExemptlistOutput) ToExemptlistOutput() ExemptlistOutput {
	return o
}

func (o ExemptlistOutput) ToExemptlistOutputWithContext(ctx context.Context) ExemptlistOutput {
	return o
}

// Comment.
func (o ExemptlistOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Exemptlist) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Hash value to be matched.
func (o ExemptlistOutput) Hash() pulumi.StringOutput {
	return o.ApplyT(func(v *Exemptlist) pulumi.StringOutput { return v.Hash }).(pulumi.StringOutput)
}

// Hash type. Valid values: `md5`, `sha1`, `sha256`.
func (o ExemptlistOutput) HashType() pulumi.StringOutput {
	return o.ApplyT(func(v *Exemptlist) pulumi.StringOutput { return v.HashType }).(pulumi.StringOutput)
}

// Table entry name.
func (o ExemptlistOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Exemptlist) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable table entry. Valid values: `disable`, `enable`.
func (o ExemptlistOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Exemptlist) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ExemptlistOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Exemptlist) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type ExemptlistArrayOutput struct{ *pulumi.OutputState }

func (ExemptlistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Exemptlist)(nil)).Elem()
}

func (o ExemptlistArrayOutput) ToExemptlistArrayOutput() ExemptlistArrayOutput {
	return o
}

func (o ExemptlistArrayOutput) ToExemptlistArrayOutputWithContext(ctx context.Context) ExemptlistArrayOutput {
	return o
}

func (o ExemptlistArrayOutput) Index(i pulumi.IntInput) ExemptlistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Exemptlist {
		return vs[0].([]*Exemptlist)[vs[1].(int)]
	}).(ExemptlistOutput)
}

type ExemptlistMapOutput struct{ *pulumi.OutputState }

func (ExemptlistMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Exemptlist)(nil)).Elem()
}

func (o ExemptlistMapOutput) ToExemptlistMapOutput() ExemptlistMapOutput {
	return o
}

func (o ExemptlistMapOutput) ToExemptlistMapOutputWithContext(ctx context.Context) ExemptlistMapOutput {
	return o
}

func (o ExemptlistMapOutput) MapIndex(k pulumi.StringInput) ExemptlistOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Exemptlist {
		return vs[0].(map[string]*Exemptlist)[vs[1].(string)]
	}).(ExemptlistOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExemptlistInput)(nil)).Elem(), &Exemptlist{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExemptlistArrayInput)(nil)).Elem(), ExemptlistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExemptlistMapInput)(nil)).Elem(), ExemptlistMap{})
	pulumi.RegisterOutputType(ExemptlistOutput{})
	pulumi.RegisterOutputType(ExemptlistArrayOutput{})
	pulumi.RegisterOutputType(ExemptlistMapOutput{})
}
