// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wirelesscontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure WiFi SSID policies. Applies to FortiOS Version `>= 7.0.1`.
//
// ## Import
//
// WirelessController SsidPolicy can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/ssidpolicy:Ssidpolicy labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/ssidpolicy:Ssidpolicy labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Ssidpolicy struct {
	pulumi.CustomResourceState

	// Description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
	// VLAN interface name.
	Vlan pulumi.StringOutput `pulumi:"vlan"`
}

// NewSsidpolicy registers a new resource with the given unique name, arguments, and options.
func NewSsidpolicy(ctx *pulumi.Context,
	name string, args *SsidpolicyArgs, opts ...pulumi.ResourceOption) (*Ssidpolicy, error) {
	if args == nil {
		args = &SsidpolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ssidpolicy
	err := ctx.RegisterResource("fortios:wirelesscontroller/ssidpolicy:Ssidpolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSsidpolicy gets an existing Ssidpolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSsidpolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SsidpolicyState, opts ...pulumi.ResourceOption) (*Ssidpolicy, error) {
	var resource Ssidpolicy
	err := ctx.ReadResource("fortios:wirelesscontroller/ssidpolicy:Ssidpolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ssidpolicy resources.
type ssidpolicyState struct {
	// Description.
	Description *string `pulumi:"description"`
	// Name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// VLAN interface name.
	Vlan *string `pulumi:"vlan"`
}

type SsidpolicyState struct {
	// Description.
	Description pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// VLAN interface name.
	Vlan pulumi.StringPtrInput
}

func (SsidpolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*ssidpolicyState)(nil)).Elem()
}

type ssidpolicyArgs struct {
	// Description.
	Description *string `pulumi:"description"`
	// Name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// VLAN interface name.
	Vlan *string `pulumi:"vlan"`
}

// The set of arguments for constructing a Ssidpolicy resource.
type SsidpolicyArgs struct {
	// Description.
	Description pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// VLAN interface name.
	Vlan pulumi.StringPtrInput
}

func (SsidpolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ssidpolicyArgs)(nil)).Elem()
}

type SsidpolicyInput interface {
	pulumi.Input

	ToSsidpolicyOutput() SsidpolicyOutput
	ToSsidpolicyOutputWithContext(ctx context.Context) SsidpolicyOutput
}

func (*Ssidpolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**Ssidpolicy)(nil)).Elem()
}

func (i *Ssidpolicy) ToSsidpolicyOutput() SsidpolicyOutput {
	return i.ToSsidpolicyOutputWithContext(context.Background())
}

func (i *Ssidpolicy) ToSsidpolicyOutputWithContext(ctx context.Context) SsidpolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsidpolicyOutput)
}

// SsidpolicyArrayInput is an input type that accepts SsidpolicyArray and SsidpolicyArrayOutput values.
// You can construct a concrete instance of `SsidpolicyArrayInput` via:
//
//	SsidpolicyArray{ SsidpolicyArgs{...} }
type SsidpolicyArrayInput interface {
	pulumi.Input

	ToSsidpolicyArrayOutput() SsidpolicyArrayOutput
	ToSsidpolicyArrayOutputWithContext(context.Context) SsidpolicyArrayOutput
}

type SsidpolicyArray []SsidpolicyInput

func (SsidpolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ssidpolicy)(nil)).Elem()
}

func (i SsidpolicyArray) ToSsidpolicyArrayOutput() SsidpolicyArrayOutput {
	return i.ToSsidpolicyArrayOutputWithContext(context.Background())
}

func (i SsidpolicyArray) ToSsidpolicyArrayOutputWithContext(ctx context.Context) SsidpolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsidpolicyArrayOutput)
}

// SsidpolicyMapInput is an input type that accepts SsidpolicyMap and SsidpolicyMapOutput values.
// You can construct a concrete instance of `SsidpolicyMapInput` via:
//
//	SsidpolicyMap{ "key": SsidpolicyArgs{...} }
type SsidpolicyMapInput interface {
	pulumi.Input

	ToSsidpolicyMapOutput() SsidpolicyMapOutput
	ToSsidpolicyMapOutputWithContext(context.Context) SsidpolicyMapOutput
}

type SsidpolicyMap map[string]SsidpolicyInput

func (SsidpolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ssidpolicy)(nil)).Elem()
}

func (i SsidpolicyMap) ToSsidpolicyMapOutput() SsidpolicyMapOutput {
	return i.ToSsidpolicyMapOutputWithContext(context.Background())
}

func (i SsidpolicyMap) ToSsidpolicyMapOutputWithContext(ctx context.Context) SsidpolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsidpolicyMapOutput)
}

type SsidpolicyOutput struct{ *pulumi.OutputState }

func (SsidpolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ssidpolicy)(nil)).Elem()
}

func (o SsidpolicyOutput) ToSsidpolicyOutput() SsidpolicyOutput {
	return o
}

func (o SsidpolicyOutput) ToSsidpolicyOutputWithContext(ctx context.Context) SsidpolicyOutput {
	return o
}

// Description.
func (o SsidpolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ssidpolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name.
func (o SsidpolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ssidpolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SsidpolicyOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Ssidpolicy) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

// VLAN interface name.
func (o SsidpolicyOutput) Vlan() pulumi.StringOutput {
	return o.ApplyT(func(v *Ssidpolicy) pulumi.StringOutput { return v.Vlan }).(pulumi.StringOutput)
}

type SsidpolicyArrayOutput struct{ *pulumi.OutputState }

func (SsidpolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ssidpolicy)(nil)).Elem()
}

func (o SsidpolicyArrayOutput) ToSsidpolicyArrayOutput() SsidpolicyArrayOutput {
	return o
}

func (o SsidpolicyArrayOutput) ToSsidpolicyArrayOutputWithContext(ctx context.Context) SsidpolicyArrayOutput {
	return o
}

func (o SsidpolicyArrayOutput) Index(i pulumi.IntInput) SsidpolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ssidpolicy {
		return vs[0].([]*Ssidpolicy)[vs[1].(int)]
	}).(SsidpolicyOutput)
}

type SsidpolicyMapOutput struct{ *pulumi.OutputState }

func (SsidpolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ssidpolicy)(nil)).Elem()
}

func (o SsidpolicyMapOutput) ToSsidpolicyMapOutput() SsidpolicyMapOutput {
	return o
}

func (o SsidpolicyMapOutput) ToSsidpolicyMapOutputWithContext(ctx context.Context) SsidpolicyMapOutput {
	return o
}

func (o SsidpolicyMapOutput) MapIndex(k pulumi.StringInput) SsidpolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ssidpolicy {
		return vs[0].(map[string]*Ssidpolicy)[vs[1].(string)]
	}).(SsidpolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SsidpolicyInput)(nil)).Elem(), &Ssidpolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsidpolicyArrayInput)(nil)).Elem(), SsidpolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsidpolicyMapInput)(nil)).Elem(), SsidpolicyMap{})
	pulumi.RegisterOutputType(SsidpolicyOutput{})
	pulumi.RegisterOutputType(SsidpolicyArrayOutput{})
	pulumi.RegisterOutputType(SsidpolicyMapOutput{})
}
