// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wirelesscontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure WTP profiles or FortiAP profiles that define radio settings for manageable FortiAP platforms.
//
// ## Import
//
// WirelessController WtpProfile can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/wtpprofile:Wtpprofile labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/wtpprofile:Wtpprofile labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Wtpprofile struct {
	pulumi.CustomResourceState

	// Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
	Allowaccess pulumi.StringOutput `pulumi:"allowaccess"`
	// Country in which this WTP, FortiAP or AP will operate (default = NA, automatically use the country configured for the current VDOM).
	ApCountry pulumi.StringOutput `pulumi:"apCountry"`
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff pulumi.StringOutput `pulumi:"apHandoff"`
	// AP local configuration profile name.
	ApcfgProfile pulumi.StringOutput `pulumi:"apcfgProfile"`
	// Bluetooth Low Energy profile name.
	BleProfile pulumi.StringOutput `pulumi:"bleProfile"`
	// Bonjour profile name.
	BonjourProfile pulumi.StringOutput `pulumi:"bonjourProfile"`
	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Enable/disable FAP console login access (default = enable). Valid values: `enable`, `disable`.
	ConsoleLogin pulumi.StringOutput `pulumi:"consoleLogin"`
	// Enable/disable CAPWAP control message data channel offload.
	ControlMessageOffload pulumi.StringOutput `pulumi:"controlMessageOffload"`
	// List of MAC addresses that are denied access to this WTP, FortiAP, or AP. The structure of `denyMacList` block is documented below.
	DenyMacLists WtpprofileDenyMacListArrayOutput `pulumi:"denyMacLists"`
	// Enable/disable data channel DTLS in kernel. Valid values: `enable`, `disable`.
	DtlsInKernel pulumi.StringOutput `pulumi:"dtlsInKernel"`
	// WTP data channel DTLS policy (default = clear-text).
	DtlsPolicy pulumi.StringOutput `pulumi:"dtlsPolicy"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Enable/disable use of energy efficient Ethernet on WTP. Valid values: `enable`, `disable`.
	EnergyEfficientEthernet pulumi.StringOutput `pulumi:"energyEfficientEthernet"`
	// ESL SES-imagotag dongle configuration. The structure of `eslSesDongle` block is documented below.
	EslSesDongle WtpprofileEslSesDongleOutput `pulumi:"eslSesDongle"`
	// Enable/disable station/VAP/radio extension information. Valid values: `enable`, `disable`.
	ExtInfoEnable pulumi.StringOutput `pulumi:"extInfoEnable"`
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff pulumi.StringOutput `pulumi:"frequencyHandoff"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Enable/disable client load balancing during roaming to avoid roaming delay (default = disable). Valid values: `enable`, `disable`.
	HandoffRoaming pulumi.StringOutput `pulumi:"handoffRoaming"`
	// Minimum received signal strength indicator (RSSI) value for handoff (20 - 30, default = 25).
	HandoffRssi pulumi.IntOutput `pulumi:"handoffRssi"`
	// Threshold value for AP handoff.
	HandoffStaThresh pulumi.IntOutput `pulumi:"handoffStaThresh"`
	// Set to allow indoor/outdoor-only channels under regulatory rules (default = platform-determined). Valid values: `platform-determined`, `outdoor`, `indoor`.
	IndoorOutdoorDeployment pulumi.StringOutput `pulumi:"indoorOutdoorDeployment"`
	// Select how to prevent IP fragmentation for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
	IpFragmentPreventing pulumi.StringOutput `pulumi:"ipFragmentPreventing"`
	// WTP LAN port mapping. The structure of `lan` block is documented below.
	Lan WtpprofileLanOutput `pulumi:"lan"`
	// Set various location based service (LBS) options. The structure of `lbs` block is documented below.
	Lbs WtpprofileLbsOutput `pulumi:"lbs"`
	// Recurring firewall schedules for illuminating LEDs on the FortiAP. If led-state is enabled, LEDs will be visible when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ledSchedules` block is documented below.
	LedSchedules WtpprofileLedScheduleArrayOutput `pulumi:"ledSchedules"`
	// Enable/disable use of LEDs on WTP (default = disable). Valid values: `enable`, `disable`.
	LedState pulumi.StringOutput `pulumi:"ledState"`
	// Enable/disable Link Layer Discovery Protocol (LLDP) for the WTP, FortiAP, or AP (default = disable). Valid values: `enable`, `disable`.
	Lldp pulumi.StringOutput `pulumi:"lldp"`
	// Set the managed WTP, FortiAP, or AP's administrator password.
	LoginPasswd pulumi.StringPtrOutput `pulumi:"loginPasswd"`
	// Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
	LoginPasswdChange pulumi.StringOutput `pulumi:"loginPasswdChange"`
	// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
	MaxClients pulumi.IntOutput `pulumi:"maxClients"`
	// WTP (or FortiAP or AP) profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// WTP, FortiAP, or AP platform. The structure of `platform` block is documented below.
	Platform WtpprofilePlatformOutput `pulumi:"platform"`
	// Set the WTP, FortiAP, or AP's PoE mode.
	PoeMode pulumi.StringOutput `pulumi:"poeMode"`
	// Configuration options for radio 1. The structure of `radio1` block is documented below.
	Radio1 WtpprofileRadio1Output `pulumi:"radio1"`
	// Configuration options for radio 2. The structure of `radio2` block is documented below.
	Radio2 WtpprofileRadio2Output `pulumi:"radio2"`
	// Configuration options for radio 3. The structure of `radio3` block is documented below.
	Radio3 WtpprofileRadio3Output `pulumi:"radio3"`
	// Configuration options for radio 4. The structure of `radio4` block is documented below.
	Radio4 WtpprofileRadio4Output `pulumi:"radio4"`
	// Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
	SplitTunnelingAclLocalApSubnet pulumi.StringOutput `pulumi:"splitTunnelingAclLocalApSubnet"`
	// Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
	SplitTunnelingAclPath pulumi.StringOutput `pulumi:"splitTunnelingAclPath"`
	// Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
	SplitTunnelingAcls WtpprofileSplitTunnelingAclArrayOutput `pulumi:"splitTunnelingAcls"`
	// System log server configuration profile name.
	SyslogProfile pulumi.StringOutput `pulumi:"syslogProfile"`
	// Downlink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuDownlink pulumi.IntOutput `pulumi:"tunMtuDownlink"`
	// Uplink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuUplink pulumi.IntOutput `pulumi:"tunMtuUplink"`
	// Enable/disable UNII-4 5Ghz band channels (default = disable). Valid values: `enable`, `disable`.
	Unii45ghzBand pulumi.StringOutput `pulumi:"unii45ghzBand"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Set WAN port authentication mode (default = none). Valid values: `none`, `802.1x`.
	WanPortAuth pulumi.StringOutput `pulumi:"wanPortAuth"`
	// Enable/disable WAN port 802.1x supplicant MACsec policy (default = disable). Valid values: `enable`, `disable`.
	WanPortAuthMacsec pulumi.StringOutput `pulumi:"wanPortAuthMacsec"`
	// WAN port 802.1x supplicant EAP methods (default = all). Valid values: `all`, `EAP-FAST`, `EAP-TLS`, `EAP-PEAP`.
	WanPortAuthMethods pulumi.StringOutput `pulumi:"wanPortAuthMethods"`
	// Set WAN port 802.1x supplicant password.
	WanPortAuthPassword pulumi.StringPtrOutput `pulumi:"wanPortAuthPassword"`
	// Set WAN port 802.1x supplicant user name.
	WanPortAuthUsrname pulumi.StringOutput `pulumi:"wanPortAuthUsrname"`
	// Enable/disable using a WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
	WanPortMode pulumi.StringOutput `pulumi:"wanPortMode"`
}

// NewWtpprofile registers a new resource with the given unique name, arguments, and options.
func NewWtpprofile(ctx *pulumi.Context,
	name string, args *WtpprofileArgs, opts ...pulumi.ResourceOption) (*Wtpprofile, error) {
	if args == nil {
		args = &WtpprofileArgs{}
	}

	if args.LoginPasswd != nil {
		args.LoginPasswd = pulumi.ToSecret(args.LoginPasswd).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"loginPasswd",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Wtpprofile
	err := ctx.RegisterResource("fortios:wirelesscontroller/wtpprofile:Wtpprofile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWtpprofile gets an existing Wtpprofile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWtpprofile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WtpprofileState, opts ...pulumi.ResourceOption) (*Wtpprofile, error) {
	var resource Wtpprofile
	err := ctx.ReadResource("fortios:wirelesscontroller/wtpprofile:Wtpprofile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Wtpprofile resources.
type wtpprofileState struct {
	// Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
	Allowaccess *string `pulumi:"allowaccess"`
	// Country in which this WTP, FortiAP or AP will operate (default = NA, automatically use the country configured for the current VDOM).
	ApCountry *string `pulumi:"apCountry"`
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff *string `pulumi:"apHandoff"`
	// AP local configuration profile name.
	ApcfgProfile *string `pulumi:"apcfgProfile"`
	// Bluetooth Low Energy profile name.
	BleProfile *string `pulumi:"bleProfile"`
	// Bonjour profile name.
	BonjourProfile *string `pulumi:"bonjourProfile"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Enable/disable FAP console login access (default = enable). Valid values: `enable`, `disable`.
	ConsoleLogin *string `pulumi:"consoleLogin"`
	// Enable/disable CAPWAP control message data channel offload.
	ControlMessageOffload *string `pulumi:"controlMessageOffload"`
	// List of MAC addresses that are denied access to this WTP, FortiAP, or AP. The structure of `denyMacList` block is documented below.
	DenyMacLists []WtpprofileDenyMacList `pulumi:"denyMacLists"`
	// Enable/disable data channel DTLS in kernel. Valid values: `enable`, `disable`.
	DtlsInKernel *string `pulumi:"dtlsInKernel"`
	// WTP data channel DTLS policy (default = clear-text).
	DtlsPolicy *string `pulumi:"dtlsPolicy"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable use of energy efficient Ethernet on WTP. Valid values: `enable`, `disable`.
	EnergyEfficientEthernet *string `pulumi:"energyEfficientEthernet"`
	// ESL SES-imagotag dongle configuration. The structure of `eslSesDongle` block is documented below.
	EslSesDongle *WtpprofileEslSesDongle `pulumi:"eslSesDongle"`
	// Enable/disable station/VAP/radio extension information. Valid values: `enable`, `disable`.
	ExtInfoEnable *string `pulumi:"extInfoEnable"`
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff *string `pulumi:"frequencyHandoff"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable client load balancing during roaming to avoid roaming delay (default = disable). Valid values: `enable`, `disable`.
	HandoffRoaming *string `pulumi:"handoffRoaming"`
	// Minimum received signal strength indicator (RSSI) value for handoff (20 - 30, default = 25).
	HandoffRssi *int `pulumi:"handoffRssi"`
	// Threshold value for AP handoff.
	HandoffStaThresh *int `pulumi:"handoffStaThresh"`
	// Set to allow indoor/outdoor-only channels under regulatory rules (default = platform-determined). Valid values: `platform-determined`, `outdoor`, `indoor`.
	IndoorOutdoorDeployment *string `pulumi:"indoorOutdoorDeployment"`
	// Select how to prevent IP fragmentation for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
	IpFragmentPreventing *string `pulumi:"ipFragmentPreventing"`
	// WTP LAN port mapping. The structure of `lan` block is documented below.
	Lan *WtpprofileLan `pulumi:"lan"`
	// Set various location based service (LBS) options. The structure of `lbs` block is documented below.
	Lbs *WtpprofileLbs `pulumi:"lbs"`
	// Recurring firewall schedules for illuminating LEDs on the FortiAP. If led-state is enabled, LEDs will be visible when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ledSchedules` block is documented below.
	LedSchedules []WtpprofileLedSchedule `pulumi:"ledSchedules"`
	// Enable/disable use of LEDs on WTP (default = disable). Valid values: `enable`, `disable`.
	LedState *string `pulumi:"ledState"`
	// Enable/disable Link Layer Discovery Protocol (LLDP) for the WTP, FortiAP, or AP (default = disable). Valid values: `enable`, `disable`.
	Lldp *string `pulumi:"lldp"`
	// Set the managed WTP, FortiAP, or AP's administrator password.
	LoginPasswd *string `pulumi:"loginPasswd"`
	// Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
	LoginPasswdChange *string `pulumi:"loginPasswdChange"`
	// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
	MaxClients *int `pulumi:"maxClients"`
	// WTP (or FortiAP or AP) profile name.
	Name *string `pulumi:"name"`
	// WTP, FortiAP, or AP platform. The structure of `platform` block is documented below.
	Platform *WtpprofilePlatform `pulumi:"platform"`
	// Set the WTP, FortiAP, or AP's PoE mode.
	PoeMode *string `pulumi:"poeMode"`
	// Configuration options for radio 1. The structure of `radio1` block is documented below.
	Radio1 *WtpprofileRadio1 `pulumi:"radio1"`
	// Configuration options for radio 2. The structure of `radio2` block is documented below.
	Radio2 *WtpprofileRadio2 `pulumi:"radio2"`
	// Configuration options for radio 3. The structure of `radio3` block is documented below.
	Radio3 *WtpprofileRadio3 `pulumi:"radio3"`
	// Configuration options for radio 4. The structure of `radio4` block is documented below.
	Radio4 *WtpprofileRadio4 `pulumi:"radio4"`
	// Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
	SplitTunnelingAclLocalApSubnet *string `pulumi:"splitTunnelingAclLocalApSubnet"`
	// Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
	SplitTunnelingAclPath *string `pulumi:"splitTunnelingAclPath"`
	// Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
	SplitTunnelingAcls []WtpprofileSplitTunnelingAcl `pulumi:"splitTunnelingAcls"`
	// System log server configuration profile name.
	SyslogProfile *string `pulumi:"syslogProfile"`
	// Downlink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuDownlink *int `pulumi:"tunMtuDownlink"`
	// Uplink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuUplink *int `pulumi:"tunMtuUplink"`
	// Enable/disable UNII-4 5Ghz band channels (default = disable). Valid values: `enable`, `disable`.
	Unii45ghzBand *string `pulumi:"unii45ghzBand"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Set WAN port authentication mode (default = none). Valid values: `none`, `802.1x`.
	WanPortAuth *string `pulumi:"wanPortAuth"`
	// Enable/disable WAN port 802.1x supplicant MACsec policy (default = disable). Valid values: `enable`, `disable`.
	WanPortAuthMacsec *string `pulumi:"wanPortAuthMacsec"`
	// WAN port 802.1x supplicant EAP methods (default = all). Valid values: `all`, `EAP-FAST`, `EAP-TLS`, `EAP-PEAP`.
	WanPortAuthMethods *string `pulumi:"wanPortAuthMethods"`
	// Set WAN port 802.1x supplicant password.
	WanPortAuthPassword *string `pulumi:"wanPortAuthPassword"`
	// Set WAN port 802.1x supplicant user name.
	WanPortAuthUsrname *string `pulumi:"wanPortAuthUsrname"`
	// Enable/disable using a WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
	WanPortMode *string `pulumi:"wanPortMode"`
}

type WtpprofileState struct {
	// Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
	Allowaccess pulumi.StringPtrInput
	// Country in which this WTP, FortiAP or AP will operate (default = NA, automatically use the country configured for the current VDOM).
	ApCountry pulumi.StringPtrInput
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff pulumi.StringPtrInput
	// AP local configuration profile name.
	ApcfgProfile pulumi.StringPtrInput
	// Bluetooth Low Energy profile name.
	BleProfile pulumi.StringPtrInput
	// Bonjour profile name.
	BonjourProfile pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Enable/disable FAP console login access (default = enable). Valid values: `enable`, `disable`.
	ConsoleLogin pulumi.StringPtrInput
	// Enable/disable CAPWAP control message data channel offload.
	ControlMessageOffload pulumi.StringPtrInput
	// List of MAC addresses that are denied access to this WTP, FortiAP, or AP. The structure of `denyMacList` block is documented below.
	DenyMacLists WtpprofileDenyMacListArrayInput
	// Enable/disable data channel DTLS in kernel. Valid values: `enable`, `disable`.
	DtlsInKernel pulumi.StringPtrInput
	// WTP data channel DTLS policy (default = clear-text).
	DtlsPolicy pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable use of energy efficient Ethernet on WTP. Valid values: `enable`, `disable`.
	EnergyEfficientEthernet pulumi.StringPtrInput
	// ESL SES-imagotag dongle configuration. The structure of `eslSesDongle` block is documented below.
	EslSesDongle WtpprofileEslSesDonglePtrInput
	// Enable/disable station/VAP/radio extension information. Valid values: `enable`, `disable`.
	ExtInfoEnable pulumi.StringPtrInput
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable client load balancing during roaming to avoid roaming delay (default = disable). Valid values: `enable`, `disable`.
	HandoffRoaming pulumi.StringPtrInput
	// Minimum received signal strength indicator (RSSI) value for handoff (20 - 30, default = 25).
	HandoffRssi pulumi.IntPtrInput
	// Threshold value for AP handoff.
	HandoffStaThresh pulumi.IntPtrInput
	// Set to allow indoor/outdoor-only channels under regulatory rules (default = platform-determined). Valid values: `platform-determined`, `outdoor`, `indoor`.
	IndoorOutdoorDeployment pulumi.StringPtrInput
	// Select how to prevent IP fragmentation for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
	IpFragmentPreventing pulumi.StringPtrInput
	// WTP LAN port mapping. The structure of `lan` block is documented below.
	Lan WtpprofileLanPtrInput
	// Set various location based service (LBS) options. The structure of `lbs` block is documented below.
	Lbs WtpprofileLbsPtrInput
	// Recurring firewall schedules for illuminating LEDs on the FortiAP. If led-state is enabled, LEDs will be visible when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ledSchedules` block is documented below.
	LedSchedules WtpprofileLedScheduleArrayInput
	// Enable/disable use of LEDs on WTP (default = disable). Valid values: `enable`, `disable`.
	LedState pulumi.StringPtrInput
	// Enable/disable Link Layer Discovery Protocol (LLDP) for the WTP, FortiAP, or AP (default = disable). Valid values: `enable`, `disable`.
	Lldp pulumi.StringPtrInput
	// Set the managed WTP, FortiAP, or AP's administrator password.
	LoginPasswd pulumi.StringPtrInput
	// Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
	LoginPasswdChange pulumi.StringPtrInput
	// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
	MaxClients pulumi.IntPtrInput
	// WTP (or FortiAP or AP) profile name.
	Name pulumi.StringPtrInput
	// WTP, FortiAP, or AP platform. The structure of `platform` block is documented below.
	Platform WtpprofilePlatformPtrInput
	// Set the WTP, FortiAP, or AP's PoE mode.
	PoeMode pulumi.StringPtrInput
	// Configuration options for radio 1. The structure of `radio1` block is documented below.
	Radio1 WtpprofileRadio1PtrInput
	// Configuration options for radio 2. The structure of `radio2` block is documented below.
	Radio2 WtpprofileRadio2PtrInput
	// Configuration options for radio 3. The structure of `radio3` block is documented below.
	Radio3 WtpprofileRadio3PtrInput
	// Configuration options for radio 4. The structure of `radio4` block is documented below.
	Radio4 WtpprofileRadio4PtrInput
	// Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
	SplitTunnelingAclLocalApSubnet pulumi.StringPtrInput
	// Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
	SplitTunnelingAclPath pulumi.StringPtrInput
	// Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
	SplitTunnelingAcls WtpprofileSplitTunnelingAclArrayInput
	// System log server configuration profile name.
	SyslogProfile pulumi.StringPtrInput
	// Downlink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuDownlink pulumi.IntPtrInput
	// Uplink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuUplink pulumi.IntPtrInput
	// Enable/disable UNII-4 5Ghz band channels (default = disable). Valid values: `enable`, `disable`.
	Unii45ghzBand pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Set WAN port authentication mode (default = none). Valid values: `none`, `802.1x`.
	WanPortAuth pulumi.StringPtrInput
	// Enable/disable WAN port 802.1x supplicant MACsec policy (default = disable). Valid values: `enable`, `disable`.
	WanPortAuthMacsec pulumi.StringPtrInput
	// WAN port 802.1x supplicant EAP methods (default = all). Valid values: `all`, `EAP-FAST`, `EAP-TLS`, `EAP-PEAP`.
	WanPortAuthMethods pulumi.StringPtrInput
	// Set WAN port 802.1x supplicant password.
	WanPortAuthPassword pulumi.StringPtrInput
	// Set WAN port 802.1x supplicant user name.
	WanPortAuthUsrname pulumi.StringPtrInput
	// Enable/disable using a WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
	WanPortMode pulumi.StringPtrInput
}

func (WtpprofileState) ElementType() reflect.Type {
	return reflect.TypeOf((*wtpprofileState)(nil)).Elem()
}

type wtpprofileArgs struct {
	// Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
	Allowaccess *string `pulumi:"allowaccess"`
	// Country in which this WTP, FortiAP or AP will operate (default = NA, automatically use the country configured for the current VDOM).
	ApCountry *string `pulumi:"apCountry"`
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff *string `pulumi:"apHandoff"`
	// AP local configuration profile name.
	ApcfgProfile *string `pulumi:"apcfgProfile"`
	// Bluetooth Low Energy profile name.
	BleProfile *string `pulumi:"bleProfile"`
	// Bonjour profile name.
	BonjourProfile *string `pulumi:"bonjourProfile"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Enable/disable FAP console login access (default = enable). Valid values: `enable`, `disable`.
	ConsoleLogin *string `pulumi:"consoleLogin"`
	// Enable/disable CAPWAP control message data channel offload.
	ControlMessageOffload *string `pulumi:"controlMessageOffload"`
	// List of MAC addresses that are denied access to this WTP, FortiAP, or AP. The structure of `denyMacList` block is documented below.
	DenyMacLists []WtpprofileDenyMacList `pulumi:"denyMacLists"`
	// Enable/disable data channel DTLS in kernel. Valid values: `enable`, `disable`.
	DtlsInKernel *string `pulumi:"dtlsInKernel"`
	// WTP data channel DTLS policy (default = clear-text).
	DtlsPolicy *string `pulumi:"dtlsPolicy"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable use of energy efficient Ethernet on WTP. Valid values: `enable`, `disable`.
	EnergyEfficientEthernet *string `pulumi:"energyEfficientEthernet"`
	// ESL SES-imagotag dongle configuration. The structure of `eslSesDongle` block is documented below.
	EslSesDongle *WtpprofileEslSesDongle `pulumi:"eslSesDongle"`
	// Enable/disable station/VAP/radio extension information. Valid values: `enable`, `disable`.
	ExtInfoEnable *string `pulumi:"extInfoEnable"`
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff *string `pulumi:"frequencyHandoff"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable client load balancing during roaming to avoid roaming delay (default = disable). Valid values: `enable`, `disable`.
	HandoffRoaming *string `pulumi:"handoffRoaming"`
	// Minimum received signal strength indicator (RSSI) value for handoff (20 - 30, default = 25).
	HandoffRssi *int `pulumi:"handoffRssi"`
	// Threshold value for AP handoff.
	HandoffStaThresh *int `pulumi:"handoffStaThresh"`
	// Set to allow indoor/outdoor-only channels under regulatory rules (default = platform-determined). Valid values: `platform-determined`, `outdoor`, `indoor`.
	IndoorOutdoorDeployment *string `pulumi:"indoorOutdoorDeployment"`
	// Select how to prevent IP fragmentation for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
	IpFragmentPreventing *string `pulumi:"ipFragmentPreventing"`
	// WTP LAN port mapping. The structure of `lan` block is documented below.
	Lan *WtpprofileLan `pulumi:"lan"`
	// Set various location based service (LBS) options. The structure of `lbs` block is documented below.
	Lbs *WtpprofileLbs `pulumi:"lbs"`
	// Recurring firewall schedules for illuminating LEDs on the FortiAP. If led-state is enabled, LEDs will be visible when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ledSchedules` block is documented below.
	LedSchedules []WtpprofileLedSchedule `pulumi:"ledSchedules"`
	// Enable/disable use of LEDs on WTP (default = disable). Valid values: `enable`, `disable`.
	LedState *string `pulumi:"ledState"`
	// Enable/disable Link Layer Discovery Protocol (LLDP) for the WTP, FortiAP, or AP (default = disable). Valid values: `enable`, `disable`.
	Lldp *string `pulumi:"lldp"`
	// Set the managed WTP, FortiAP, or AP's administrator password.
	LoginPasswd *string `pulumi:"loginPasswd"`
	// Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
	LoginPasswdChange *string `pulumi:"loginPasswdChange"`
	// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
	MaxClients *int `pulumi:"maxClients"`
	// WTP (or FortiAP or AP) profile name.
	Name *string `pulumi:"name"`
	// WTP, FortiAP, or AP platform. The structure of `platform` block is documented below.
	Platform *WtpprofilePlatform `pulumi:"platform"`
	// Set the WTP, FortiAP, or AP's PoE mode.
	PoeMode *string `pulumi:"poeMode"`
	// Configuration options for radio 1. The structure of `radio1` block is documented below.
	Radio1 *WtpprofileRadio1 `pulumi:"radio1"`
	// Configuration options for radio 2. The structure of `radio2` block is documented below.
	Radio2 *WtpprofileRadio2 `pulumi:"radio2"`
	// Configuration options for radio 3. The structure of `radio3` block is documented below.
	Radio3 *WtpprofileRadio3 `pulumi:"radio3"`
	// Configuration options for radio 4. The structure of `radio4` block is documented below.
	Radio4 *WtpprofileRadio4 `pulumi:"radio4"`
	// Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
	SplitTunnelingAclLocalApSubnet *string `pulumi:"splitTunnelingAclLocalApSubnet"`
	// Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
	SplitTunnelingAclPath *string `pulumi:"splitTunnelingAclPath"`
	// Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
	SplitTunnelingAcls []WtpprofileSplitTunnelingAcl `pulumi:"splitTunnelingAcls"`
	// System log server configuration profile name.
	SyslogProfile *string `pulumi:"syslogProfile"`
	// Downlink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuDownlink *int `pulumi:"tunMtuDownlink"`
	// Uplink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuUplink *int `pulumi:"tunMtuUplink"`
	// Enable/disable UNII-4 5Ghz band channels (default = disable). Valid values: `enable`, `disable`.
	Unii45ghzBand *string `pulumi:"unii45ghzBand"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Set WAN port authentication mode (default = none). Valid values: `none`, `802.1x`.
	WanPortAuth *string `pulumi:"wanPortAuth"`
	// Enable/disable WAN port 802.1x supplicant MACsec policy (default = disable). Valid values: `enable`, `disable`.
	WanPortAuthMacsec *string `pulumi:"wanPortAuthMacsec"`
	// WAN port 802.1x supplicant EAP methods (default = all). Valid values: `all`, `EAP-FAST`, `EAP-TLS`, `EAP-PEAP`.
	WanPortAuthMethods *string `pulumi:"wanPortAuthMethods"`
	// Set WAN port 802.1x supplicant password.
	WanPortAuthPassword *string `pulumi:"wanPortAuthPassword"`
	// Set WAN port 802.1x supplicant user name.
	WanPortAuthUsrname *string `pulumi:"wanPortAuthUsrname"`
	// Enable/disable using a WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
	WanPortMode *string `pulumi:"wanPortMode"`
}

// The set of arguments for constructing a Wtpprofile resource.
type WtpprofileArgs struct {
	// Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
	Allowaccess pulumi.StringPtrInput
	// Country in which this WTP, FortiAP or AP will operate (default = NA, automatically use the country configured for the current VDOM).
	ApCountry pulumi.StringPtrInput
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff pulumi.StringPtrInput
	// AP local configuration profile name.
	ApcfgProfile pulumi.StringPtrInput
	// Bluetooth Low Energy profile name.
	BleProfile pulumi.StringPtrInput
	// Bonjour profile name.
	BonjourProfile pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Enable/disable FAP console login access (default = enable). Valid values: `enable`, `disable`.
	ConsoleLogin pulumi.StringPtrInput
	// Enable/disable CAPWAP control message data channel offload.
	ControlMessageOffload pulumi.StringPtrInput
	// List of MAC addresses that are denied access to this WTP, FortiAP, or AP. The structure of `denyMacList` block is documented below.
	DenyMacLists WtpprofileDenyMacListArrayInput
	// Enable/disable data channel DTLS in kernel. Valid values: `enable`, `disable`.
	DtlsInKernel pulumi.StringPtrInput
	// WTP data channel DTLS policy (default = clear-text).
	DtlsPolicy pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable use of energy efficient Ethernet on WTP. Valid values: `enable`, `disable`.
	EnergyEfficientEthernet pulumi.StringPtrInput
	// ESL SES-imagotag dongle configuration. The structure of `eslSesDongle` block is documented below.
	EslSesDongle WtpprofileEslSesDonglePtrInput
	// Enable/disable station/VAP/radio extension information. Valid values: `enable`, `disable`.
	ExtInfoEnable pulumi.StringPtrInput
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable client load balancing during roaming to avoid roaming delay (default = disable). Valid values: `enable`, `disable`.
	HandoffRoaming pulumi.StringPtrInput
	// Minimum received signal strength indicator (RSSI) value for handoff (20 - 30, default = 25).
	HandoffRssi pulumi.IntPtrInput
	// Threshold value for AP handoff.
	HandoffStaThresh pulumi.IntPtrInput
	// Set to allow indoor/outdoor-only channels under regulatory rules (default = platform-determined). Valid values: `platform-determined`, `outdoor`, `indoor`.
	IndoorOutdoorDeployment pulumi.StringPtrInput
	// Select how to prevent IP fragmentation for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
	IpFragmentPreventing pulumi.StringPtrInput
	// WTP LAN port mapping. The structure of `lan` block is documented below.
	Lan WtpprofileLanPtrInput
	// Set various location based service (LBS) options. The structure of `lbs` block is documented below.
	Lbs WtpprofileLbsPtrInput
	// Recurring firewall schedules for illuminating LEDs on the FortiAP. If led-state is enabled, LEDs will be visible when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ledSchedules` block is documented below.
	LedSchedules WtpprofileLedScheduleArrayInput
	// Enable/disable use of LEDs on WTP (default = disable). Valid values: `enable`, `disable`.
	LedState pulumi.StringPtrInput
	// Enable/disable Link Layer Discovery Protocol (LLDP) for the WTP, FortiAP, or AP (default = disable). Valid values: `enable`, `disable`.
	Lldp pulumi.StringPtrInput
	// Set the managed WTP, FortiAP, or AP's administrator password.
	LoginPasswd pulumi.StringPtrInput
	// Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
	LoginPasswdChange pulumi.StringPtrInput
	// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
	MaxClients pulumi.IntPtrInput
	// WTP (or FortiAP or AP) profile name.
	Name pulumi.StringPtrInput
	// WTP, FortiAP, or AP platform. The structure of `platform` block is documented below.
	Platform WtpprofilePlatformPtrInput
	// Set the WTP, FortiAP, or AP's PoE mode.
	PoeMode pulumi.StringPtrInput
	// Configuration options for radio 1. The structure of `radio1` block is documented below.
	Radio1 WtpprofileRadio1PtrInput
	// Configuration options for radio 2. The structure of `radio2` block is documented below.
	Radio2 WtpprofileRadio2PtrInput
	// Configuration options for radio 3. The structure of `radio3` block is documented below.
	Radio3 WtpprofileRadio3PtrInput
	// Configuration options for radio 4. The structure of `radio4` block is documented below.
	Radio4 WtpprofileRadio4PtrInput
	// Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
	SplitTunnelingAclLocalApSubnet pulumi.StringPtrInput
	// Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
	SplitTunnelingAclPath pulumi.StringPtrInput
	// Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
	SplitTunnelingAcls WtpprofileSplitTunnelingAclArrayInput
	// System log server configuration profile name.
	SyslogProfile pulumi.StringPtrInput
	// Downlink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuDownlink pulumi.IntPtrInput
	// Uplink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
	TunMtuUplink pulumi.IntPtrInput
	// Enable/disable UNII-4 5Ghz band channels (default = disable). Valid values: `enable`, `disable`.
	Unii45ghzBand pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Set WAN port authentication mode (default = none). Valid values: `none`, `802.1x`.
	WanPortAuth pulumi.StringPtrInput
	// Enable/disable WAN port 802.1x supplicant MACsec policy (default = disable). Valid values: `enable`, `disable`.
	WanPortAuthMacsec pulumi.StringPtrInput
	// WAN port 802.1x supplicant EAP methods (default = all). Valid values: `all`, `EAP-FAST`, `EAP-TLS`, `EAP-PEAP`.
	WanPortAuthMethods pulumi.StringPtrInput
	// Set WAN port 802.1x supplicant password.
	WanPortAuthPassword pulumi.StringPtrInput
	// Set WAN port 802.1x supplicant user name.
	WanPortAuthUsrname pulumi.StringPtrInput
	// Enable/disable using a WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
	WanPortMode pulumi.StringPtrInput
}

func (WtpprofileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wtpprofileArgs)(nil)).Elem()
}

type WtpprofileInput interface {
	pulumi.Input

	ToWtpprofileOutput() WtpprofileOutput
	ToWtpprofileOutputWithContext(ctx context.Context) WtpprofileOutput
}

func (*Wtpprofile) ElementType() reflect.Type {
	return reflect.TypeOf((**Wtpprofile)(nil)).Elem()
}

func (i *Wtpprofile) ToWtpprofileOutput() WtpprofileOutput {
	return i.ToWtpprofileOutputWithContext(context.Background())
}

func (i *Wtpprofile) ToWtpprofileOutputWithContext(ctx context.Context) WtpprofileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileOutput)
}

// WtpprofileArrayInput is an input type that accepts WtpprofileArray and WtpprofileArrayOutput values.
// You can construct a concrete instance of `WtpprofileArrayInput` via:
//
//	WtpprofileArray{ WtpprofileArgs{...} }
type WtpprofileArrayInput interface {
	pulumi.Input

	ToWtpprofileArrayOutput() WtpprofileArrayOutput
	ToWtpprofileArrayOutputWithContext(context.Context) WtpprofileArrayOutput
}

type WtpprofileArray []WtpprofileInput

func (WtpprofileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Wtpprofile)(nil)).Elem()
}

func (i WtpprofileArray) ToWtpprofileArrayOutput() WtpprofileArrayOutput {
	return i.ToWtpprofileArrayOutputWithContext(context.Background())
}

func (i WtpprofileArray) ToWtpprofileArrayOutputWithContext(ctx context.Context) WtpprofileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileArrayOutput)
}

// WtpprofileMapInput is an input type that accepts WtpprofileMap and WtpprofileMapOutput values.
// You can construct a concrete instance of `WtpprofileMapInput` via:
//
//	WtpprofileMap{ "key": WtpprofileArgs{...} }
type WtpprofileMapInput interface {
	pulumi.Input

	ToWtpprofileMapOutput() WtpprofileMapOutput
	ToWtpprofileMapOutputWithContext(context.Context) WtpprofileMapOutput
}

type WtpprofileMap map[string]WtpprofileInput

func (WtpprofileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Wtpprofile)(nil)).Elem()
}

func (i WtpprofileMap) ToWtpprofileMapOutput() WtpprofileMapOutput {
	return i.ToWtpprofileMapOutputWithContext(context.Background())
}

func (i WtpprofileMap) ToWtpprofileMapOutputWithContext(ctx context.Context) WtpprofileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileMapOutput)
}

type WtpprofileOutput struct{ *pulumi.OutputState }

func (WtpprofileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Wtpprofile)(nil)).Elem()
}

func (o WtpprofileOutput) ToWtpprofileOutput() WtpprofileOutput {
	return o
}

func (o WtpprofileOutput) ToWtpprofileOutputWithContext(ctx context.Context) WtpprofileOutput {
	return o
}

// Control management access to the managed WTP, FortiAP, or AP. Separate entries with a space.
func (o WtpprofileOutput) Allowaccess() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.Allowaccess }).(pulumi.StringOutput)
}

// Country in which this WTP, FortiAP or AP will operate (default = NA, automatically use the country configured for the current VDOM).
func (o WtpprofileOutput) ApCountry() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.ApCountry }).(pulumi.StringOutput)
}

// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileOutput) ApHandoff() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.ApHandoff }).(pulumi.StringOutput)
}

// AP local configuration profile name.
func (o WtpprofileOutput) ApcfgProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.ApcfgProfile }).(pulumi.StringOutput)
}

// Bluetooth Low Energy profile name.
func (o WtpprofileOutput) BleProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.BleProfile }).(pulumi.StringOutput)
}

// Bonjour profile name.
func (o WtpprofileOutput) BonjourProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.BonjourProfile }).(pulumi.StringOutput)
}

// Comment.
func (o WtpprofileOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Enable/disable FAP console login access (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileOutput) ConsoleLogin() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.ConsoleLogin }).(pulumi.StringOutput)
}

// Enable/disable CAPWAP control message data channel offload.
func (o WtpprofileOutput) ControlMessageOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.ControlMessageOffload }).(pulumi.StringOutput)
}

// List of MAC addresses that are denied access to this WTP, FortiAP, or AP. The structure of `denyMacList` block is documented below.
func (o WtpprofileOutput) DenyMacLists() WtpprofileDenyMacListArrayOutput {
	return o.ApplyT(func(v *Wtpprofile) WtpprofileDenyMacListArrayOutput { return v.DenyMacLists }).(WtpprofileDenyMacListArrayOutput)
}

// Enable/disable data channel DTLS in kernel. Valid values: `enable`, `disable`.
func (o WtpprofileOutput) DtlsInKernel() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.DtlsInKernel }).(pulumi.StringOutput)
}

// WTP data channel DTLS policy (default = clear-text).
func (o WtpprofileOutput) DtlsPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.DtlsPolicy }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o WtpprofileOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Enable/disable use of energy efficient Ethernet on WTP. Valid values: `enable`, `disable`.
func (o WtpprofileOutput) EnergyEfficientEthernet() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.EnergyEfficientEthernet }).(pulumi.StringOutput)
}

// ESL SES-imagotag dongle configuration. The structure of `eslSesDongle` block is documented below.
func (o WtpprofileOutput) EslSesDongle() WtpprofileEslSesDongleOutput {
	return o.ApplyT(func(v *Wtpprofile) WtpprofileEslSesDongleOutput { return v.EslSesDongle }).(WtpprofileEslSesDongleOutput)
}

// Enable/disable station/VAP/radio extension information. Valid values: `enable`, `disable`.
func (o WtpprofileOutput) ExtInfoEnable() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.ExtInfoEnable }).(pulumi.StringOutput)
}

// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileOutput) FrequencyHandoff() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.FrequencyHandoff }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o WtpprofileOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Enable/disable client load balancing during roaming to avoid roaming delay (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileOutput) HandoffRoaming() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.HandoffRoaming }).(pulumi.StringOutput)
}

// Minimum received signal strength indicator (RSSI) value for handoff (20 - 30, default = 25).
func (o WtpprofileOutput) HandoffRssi() pulumi.IntOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.IntOutput { return v.HandoffRssi }).(pulumi.IntOutput)
}

// Threshold value for AP handoff.
func (o WtpprofileOutput) HandoffStaThresh() pulumi.IntOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.IntOutput { return v.HandoffStaThresh }).(pulumi.IntOutput)
}

// Set to allow indoor/outdoor-only channels under regulatory rules (default = platform-determined). Valid values: `platform-determined`, `outdoor`, `indoor`.
func (o WtpprofileOutput) IndoorOutdoorDeployment() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.IndoorOutdoorDeployment }).(pulumi.StringOutput)
}

// Select how to prevent IP fragmentation for CAPWAP tunneled control and data packets (default = tcp-mss-adjust). Valid values: `tcp-mss-adjust`, `icmp-unreachable`.
func (o WtpprofileOutput) IpFragmentPreventing() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.IpFragmentPreventing }).(pulumi.StringOutput)
}

// WTP LAN port mapping. The structure of `lan` block is documented below.
func (o WtpprofileOutput) Lan() WtpprofileLanOutput {
	return o.ApplyT(func(v *Wtpprofile) WtpprofileLanOutput { return v.Lan }).(WtpprofileLanOutput)
}

// Set various location based service (LBS) options. The structure of `lbs` block is documented below.
func (o WtpprofileOutput) Lbs() WtpprofileLbsOutput {
	return o.ApplyT(func(v *Wtpprofile) WtpprofileLbsOutput { return v.Lbs }).(WtpprofileLbsOutput)
}

// Recurring firewall schedules for illuminating LEDs on the FortiAP. If led-state is enabled, LEDs will be visible when at least one of the schedules is valid. Separate multiple schedule names with a space. The structure of `ledSchedules` block is documented below.
func (o WtpprofileOutput) LedSchedules() WtpprofileLedScheduleArrayOutput {
	return o.ApplyT(func(v *Wtpprofile) WtpprofileLedScheduleArrayOutput { return v.LedSchedules }).(WtpprofileLedScheduleArrayOutput)
}

// Enable/disable use of LEDs on WTP (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileOutput) LedState() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.LedState }).(pulumi.StringOutput)
}

// Enable/disable Link Layer Discovery Protocol (LLDP) for the WTP, FortiAP, or AP (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileOutput) Lldp() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.Lldp }).(pulumi.StringOutput)
}

// Set the managed WTP, FortiAP, or AP's administrator password.
func (o WtpprofileOutput) LoginPasswd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringPtrOutput { return v.LoginPasswd }).(pulumi.StringPtrOutput)
}

// Change or reset the administrator password of a managed WTP, FortiAP or AP (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
func (o WtpprofileOutput) LoginPasswdChange() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.LoginPasswdChange }).(pulumi.StringOutput)
}

// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
func (o WtpprofileOutput) MaxClients() pulumi.IntOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.IntOutput { return v.MaxClients }).(pulumi.IntOutput)
}

// WTP (or FortiAP or AP) profile name.
func (o WtpprofileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// WTP, FortiAP, or AP platform. The structure of `platform` block is documented below.
func (o WtpprofileOutput) Platform() WtpprofilePlatformOutput {
	return o.ApplyT(func(v *Wtpprofile) WtpprofilePlatformOutput { return v.Platform }).(WtpprofilePlatformOutput)
}

// Set the WTP, FortiAP, or AP's PoE mode.
func (o WtpprofileOutput) PoeMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.PoeMode }).(pulumi.StringOutput)
}

// Configuration options for radio 1. The structure of `radio1` block is documented below.
func (o WtpprofileOutput) Radio1() WtpprofileRadio1Output {
	return o.ApplyT(func(v *Wtpprofile) WtpprofileRadio1Output { return v.Radio1 }).(WtpprofileRadio1Output)
}

// Configuration options for radio 2. The structure of `radio2` block is documented below.
func (o WtpprofileOutput) Radio2() WtpprofileRadio2Output {
	return o.ApplyT(func(v *Wtpprofile) WtpprofileRadio2Output { return v.Radio2 }).(WtpprofileRadio2Output)
}

// Configuration options for radio 3. The structure of `radio3` block is documented below.
func (o WtpprofileOutput) Radio3() WtpprofileRadio3Output {
	return o.ApplyT(func(v *Wtpprofile) WtpprofileRadio3Output { return v.Radio3 }).(WtpprofileRadio3Output)
}

// Configuration options for radio 4. The structure of `radio4` block is documented below.
func (o WtpprofileOutput) Radio4() WtpprofileRadio4Output {
	return o.ApplyT(func(v *Wtpprofile) WtpprofileRadio4Output { return v.Radio4 }).(WtpprofileRadio4Output)
}

// Enable/disable automatically adding local subnetwork of FortiAP to split-tunneling ACL (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileOutput) SplitTunnelingAclLocalApSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.SplitTunnelingAclLocalApSubnet }).(pulumi.StringOutput)
}

// Split tunneling ACL path is local/tunnel. Valid values: `tunnel`, `local`.
func (o WtpprofileOutput) SplitTunnelingAclPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.SplitTunnelingAclPath }).(pulumi.StringOutput)
}

// Split tunneling ACL filter list. The structure of `splitTunnelingAcl` block is documented below.
func (o WtpprofileOutput) SplitTunnelingAcls() WtpprofileSplitTunnelingAclArrayOutput {
	return o.ApplyT(func(v *Wtpprofile) WtpprofileSplitTunnelingAclArrayOutput { return v.SplitTunnelingAcls }).(WtpprofileSplitTunnelingAclArrayOutput)
}

// System log server configuration profile name.
func (o WtpprofileOutput) SyslogProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.SyslogProfile }).(pulumi.StringOutput)
}

// Downlink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
func (o WtpprofileOutput) TunMtuDownlink() pulumi.IntOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.IntOutput { return v.TunMtuDownlink }).(pulumi.IntOutput)
}

// Uplink CAPWAP tunnel MTU (0, 576, or 1500 bytes, default = 0).
func (o WtpprofileOutput) TunMtuUplink() pulumi.IntOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.IntOutput { return v.TunMtuUplink }).(pulumi.IntOutput)
}

// Enable/disable UNII-4 5Ghz band channels (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileOutput) Unii45ghzBand() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.Unii45ghzBand }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o WtpprofileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Set WAN port authentication mode (default = none). Valid values: `none`, `802.1x`.
func (o WtpprofileOutput) WanPortAuth() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.WanPortAuth }).(pulumi.StringOutput)
}

// Enable/disable WAN port 802.1x supplicant MACsec policy (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileOutput) WanPortAuthMacsec() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.WanPortAuthMacsec }).(pulumi.StringOutput)
}

// WAN port 802.1x supplicant EAP methods (default = all). Valid values: `all`, `EAP-FAST`, `EAP-TLS`, `EAP-PEAP`.
func (o WtpprofileOutput) WanPortAuthMethods() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.WanPortAuthMethods }).(pulumi.StringOutput)
}

// Set WAN port 802.1x supplicant password.
func (o WtpprofileOutput) WanPortAuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringPtrOutput { return v.WanPortAuthPassword }).(pulumi.StringPtrOutput)
}

// Set WAN port 802.1x supplicant user name.
func (o WtpprofileOutput) WanPortAuthUsrname() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.WanPortAuthUsrname }).(pulumi.StringOutput)
}

// Enable/disable using a WAN port as a LAN port. Valid values: `wan-lan`, `wan-only`.
func (o WtpprofileOutput) WanPortMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Wtpprofile) pulumi.StringOutput { return v.WanPortMode }).(pulumi.StringOutput)
}

type WtpprofileArrayOutput struct{ *pulumi.OutputState }

func (WtpprofileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Wtpprofile)(nil)).Elem()
}

func (o WtpprofileArrayOutput) ToWtpprofileArrayOutput() WtpprofileArrayOutput {
	return o
}

func (o WtpprofileArrayOutput) ToWtpprofileArrayOutputWithContext(ctx context.Context) WtpprofileArrayOutput {
	return o
}

func (o WtpprofileArrayOutput) Index(i pulumi.IntInput) WtpprofileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Wtpprofile {
		return vs[0].([]*Wtpprofile)[vs[1].(int)]
	}).(WtpprofileOutput)
}

type WtpprofileMapOutput struct{ *pulumi.OutputState }

func (WtpprofileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Wtpprofile)(nil)).Elem()
}

func (o WtpprofileMapOutput) ToWtpprofileMapOutput() WtpprofileMapOutput {
	return o
}

func (o WtpprofileMapOutput) ToWtpprofileMapOutputWithContext(ctx context.Context) WtpprofileMapOutput {
	return o
}

func (o WtpprofileMapOutput) MapIndex(k pulumi.StringInput) WtpprofileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Wtpprofile {
		return vs[0].(map[string]*Wtpprofile)[vs[1].(string)]
	}).(WtpprofileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileInput)(nil)).Elem(), &Wtpprofile{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileArrayInput)(nil)).Elem(), WtpprofileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileMapInput)(nil)).Elem(), WtpprofileMap{})
	pulumi.RegisterOutputType(WtpprofileOutput{})
	pulumi.RegisterOutputType(WtpprofileArrayOutput{})
	pulumi.RegisterOutputType(WtpprofileMapOutput{})
}
