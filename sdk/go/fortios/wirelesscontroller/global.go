// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wirelesscontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure wireless controller global settings.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/wirelesscontroller"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := wirelesscontroller.NewGlobal(ctx, "trname", &wirelesscontroller.GlobalArgs{
//				ApLogServer:           pulumi.String("disable"),
//				ApLogServerIp:         pulumi.String("0.0.0.0"),
//				ApLogServerPort:       pulumi.Int(0),
//				ControlMessageOffload: pulumi.String("ebp-frame aeroscout-tag ap-list sta-list sta-cap-list stats aeroscout-mu"),
//				DataEthernetIi:        pulumi.String("disable"),
//				DiscoveryMcAddr:       pulumi.String("224.0.1.140"),
//				FiappEthType:          pulumi.Int(5252),
//				ImageDownload:         pulumi.String("enable"),
//				IpsecBaseIp:           pulumi.String("169.254.0.1"),
//				LinkAggregation:       pulumi.String("disable"),
//				MaxClients:            pulumi.Int(0),
//				MaxRetransmit:         pulumi.Int(3),
//				MeshEthType:           pulumi.Int(8755),
//				RogueScanMacAdjacency: pulumi.Int(7),
//				WtpShare:              pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// WirelessController Global can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/global:Global labelname WirelessControllerGlobal
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/global:Global labelname WirelessControllerGlobal
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Global struct {
	pulumi.CustomResourceState

	// Configure the number cwAcd daemons for multi-core CPU support (default = 0).
	AcdProcessCount pulumi.IntOutput `pulumi:"acdProcessCount"`
	// Enable/disable configuring APs or FortiAPs to send log messages to a syslog server (default = disable). Valid values: `enable`, `disable`.
	ApLogServer pulumi.StringOutput `pulumi:"apLogServer"`
	// IP address that APs or FortiAPs send log messages to.
	ApLogServerIp pulumi.StringOutput `pulumi:"apLogServerIp"`
	// Port that APs or FortiAPs send log messages to.
	ApLogServerPort pulumi.IntOutput `pulumi:"apLogServerPort"`
	// Configure CAPWAP control message data channel offload.
	ControlMessageOffload pulumi.StringOutput `pulumi:"controlMessageOffload"`
	// Configure the wireless controller to use Ethernet II or 802.3 frames with 802.3 data tunnel mode (default = disable). Valid values: `enable`, `disable`.
	DataEthernetIi pulumi.StringOutput `pulumi:"dataEthernetIi"`
	// Enable/disable DFS certificate lab test mode. Valid values: `enable`, `disable`.
	DfsLabTest pulumi.StringOutput `pulumi:"dfsLabTest"`
	// Multicast IP address for AP discovery (default = 244.0.1.140).
	DiscoveryMcAddr pulumi.StringOutput `pulumi:"discoveryMcAddr"`
	// Ethernet type for Fortinet Inter-Access Point Protocol (IAPP), or IEEE 802.11f, packets (0 - 65535, default = 5252).
	FiappEthType pulumi.IntOutput `pulumi:"fiappEthType"`
	// Enable/disable WTP image download at join time. Valid values: `enable`, `disable`.
	ImageDownload pulumi.StringOutput `pulumi:"imageDownload"`
	// Base IP address for IPsec VPN tunnels between the access points and the wireless controller (default = 169.254.0.1).
	IpsecBaseIp pulumi.StringOutput `pulumi:"ipsecBaseIp"`
	// Enable/disable calculating the CAPWAP transmit hash to load balance sessions to link aggregation nodes (default = disable). Valid values: `enable`, `disable`.
	LinkAggregation pulumi.StringOutput `pulumi:"linkAggregation"`
	// Description of the location of the wireless controller.
	Location pulumi.StringOutput `pulumi:"location"`
	// Maximum number of clients that can connect simultaneously (default = 0, meaning no limitation).
	MaxClients pulumi.IntOutput `pulumi:"maxClients"`
	// Maximum number of tunnel packet retransmissions (0 - 64, default = 3).
	MaxRetransmit pulumi.IntOutput `pulumi:"maxRetransmit"`
	// Mesh Ethernet identifier included in backhaul packets (0 - 65535, default = 8755).
	MeshEthType pulumi.IntOutput `pulumi:"meshEthType"`
	// Interval in seconds between two WiFi network access control (NAC) checks (10 - 600, default = 120).
	NacInterval pulumi.IntOutput `pulumi:"nacInterval"`
	// Name of the wireless controller.
	Name pulumi.StringOutput `pulumi:"name"`
	// Maximum numerical difference between an AP's Ethernet and wireless MAC values to match for rogue detection (0 - 31, default = 7).
	RogueScanMacAdjacency pulumi.IntOutput `pulumi:"rogueScanMacAdjacency"`
	// Enable/disable rolling WTP upgrade (default = disable). Valid values: `enable`, `disable`.
	RollingWtpUpgrade pulumi.StringOutput `pulumi:"rollingWtpUpgrade"`
	// Minimum signal level/threshold in dBm required for the managed WTP to be included in rolling WTP upgrade (-95 to -20, default = -80).
	RollingWtpUpgradeThreshold pulumi.StringOutput `pulumi:"rollingWtpUpgradeThreshold"`
	// Compatible/strict tunnel mode. Valid values: `compatible`, `strict`.
	TunnelMode pulumi.StringOutput `pulumi:"tunnelMode"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Wpad daemon process count for multi-core CPU support.
	WpadProcessCount pulumi.IntOutput `pulumi:"wpadProcessCount"`
	// Enable/disable sharing of WTPs between VDOMs. Valid values: `enable`, `disable`.
	WtpShare pulumi.StringOutput `pulumi:"wtpShare"`
}

// NewGlobal registers a new resource with the given unique name, arguments, and options.
func NewGlobal(ctx *pulumi.Context,
	name string, args *GlobalArgs, opts ...pulumi.ResourceOption) (*Global, error) {
	if args == nil {
		args = &GlobalArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Global
	err := ctx.RegisterResource("fortios:wirelesscontroller/global:Global", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlobal gets an existing Global resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlobalState, opts ...pulumi.ResourceOption) (*Global, error) {
	var resource Global
	err := ctx.ReadResource("fortios:wirelesscontroller/global:Global", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Global resources.
type globalState struct {
	// Configure the number cwAcd daemons for multi-core CPU support (default = 0).
	AcdProcessCount *int `pulumi:"acdProcessCount"`
	// Enable/disable configuring APs or FortiAPs to send log messages to a syslog server (default = disable). Valid values: `enable`, `disable`.
	ApLogServer *string `pulumi:"apLogServer"`
	// IP address that APs or FortiAPs send log messages to.
	ApLogServerIp *string `pulumi:"apLogServerIp"`
	// Port that APs or FortiAPs send log messages to.
	ApLogServerPort *int `pulumi:"apLogServerPort"`
	// Configure CAPWAP control message data channel offload.
	ControlMessageOffload *string `pulumi:"controlMessageOffload"`
	// Configure the wireless controller to use Ethernet II or 802.3 frames with 802.3 data tunnel mode (default = disable). Valid values: `enable`, `disable`.
	DataEthernetIi *string `pulumi:"dataEthernetIi"`
	// Enable/disable DFS certificate lab test mode. Valid values: `enable`, `disable`.
	DfsLabTest *string `pulumi:"dfsLabTest"`
	// Multicast IP address for AP discovery (default = 244.0.1.140).
	DiscoveryMcAddr *string `pulumi:"discoveryMcAddr"`
	// Ethernet type for Fortinet Inter-Access Point Protocol (IAPP), or IEEE 802.11f, packets (0 - 65535, default = 5252).
	FiappEthType *int `pulumi:"fiappEthType"`
	// Enable/disable WTP image download at join time. Valid values: `enable`, `disable`.
	ImageDownload *string `pulumi:"imageDownload"`
	// Base IP address for IPsec VPN tunnels between the access points and the wireless controller (default = 169.254.0.1).
	IpsecBaseIp *string `pulumi:"ipsecBaseIp"`
	// Enable/disable calculating the CAPWAP transmit hash to load balance sessions to link aggregation nodes (default = disable). Valid values: `enable`, `disable`.
	LinkAggregation *string `pulumi:"linkAggregation"`
	// Description of the location of the wireless controller.
	Location *string `pulumi:"location"`
	// Maximum number of clients that can connect simultaneously (default = 0, meaning no limitation).
	MaxClients *int `pulumi:"maxClients"`
	// Maximum number of tunnel packet retransmissions (0 - 64, default = 3).
	MaxRetransmit *int `pulumi:"maxRetransmit"`
	// Mesh Ethernet identifier included in backhaul packets (0 - 65535, default = 8755).
	MeshEthType *int `pulumi:"meshEthType"`
	// Interval in seconds between two WiFi network access control (NAC) checks (10 - 600, default = 120).
	NacInterval *int `pulumi:"nacInterval"`
	// Name of the wireless controller.
	Name *string `pulumi:"name"`
	// Maximum numerical difference between an AP's Ethernet and wireless MAC values to match for rogue detection (0 - 31, default = 7).
	RogueScanMacAdjacency *int `pulumi:"rogueScanMacAdjacency"`
	// Enable/disable rolling WTP upgrade (default = disable). Valid values: `enable`, `disable`.
	RollingWtpUpgrade *string `pulumi:"rollingWtpUpgrade"`
	// Minimum signal level/threshold in dBm required for the managed WTP to be included in rolling WTP upgrade (-95 to -20, default = -80).
	RollingWtpUpgradeThreshold *string `pulumi:"rollingWtpUpgradeThreshold"`
	// Compatible/strict tunnel mode. Valid values: `compatible`, `strict`.
	TunnelMode *string `pulumi:"tunnelMode"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Wpad daemon process count for multi-core CPU support.
	WpadProcessCount *int `pulumi:"wpadProcessCount"`
	// Enable/disable sharing of WTPs between VDOMs. Valid values: `enable`, `disable`.
	WtpShare *string `pulumi:"wtpShare"`
}

type GlobalState struct {
	// Configure the number cwAcd daemons for multi-core CPU support (default = 0).
	AcdProcessCount pulumi.IntPtrInput
	// Enable/disable configuring APs or FortiAPs to send log messages to a syslog server (default = disable). Valid values: `enable`, `disable`.
	ApLogServer pulumi.StringPtrInput
	// IP address that APs or FortiAPs send log messages to.
	ApLogServerIp pulumi.StringPtrInput
	// Port that APs or FortiAPs send log messages to.
	ApLogServerPort pulumi.IntPtrInput
	// Configure CAPWAP control message data channel offload.
	ControlMessageOffload pulumi.StringPtrInput
	// Configure the wireless controller to use Ethernet II or 802.3 frames with 802.3 data tunnel mode (default = disable). Valid values: `enable`, `disable`.
	DataEthernetIi pulumi.StringPtrInput
	// Enable/disable DFS certificate lab test mode. Valid values: `enable`, `disable`.
	DfsLabTest pulumi.StringPtrInput
	// Multicast IP address for AP discovery (default = 244.0.1.140).
	DiscoveryMcAddr pulumi.StringPtrInput
	// Ethernet type for Fortinet Inter-Access Point Protocol (IAPP), or IEEE 802.11f, packets (0 - 65535, default = 5252).
	FiappEthType pulumi.IntPtrInput
	// Enable/disable WTP image download at join time. Valid values: `enable`, `disable`.
	ImageDownload pulumi.StringPtrInput
	// Base IP address for IPsec VPN tunnels between the access points and the wireless controller (default = 169.254.0.1).
	IpsecBaseIp pulumi.StringPtrInput
	// Enable/disable calculating the CAPWAP transmit hash to load balance sessions to link aggregation nodes (default = disable). Valid values: `enable`, `disable`.
	LinkAggregation pulumi.StringPtrInput
	// Description of the location of the wireless controller.
	Location pulumi.StringPtrInput
	// Maximum number of clients that can connect simultaneously (default = 0, meaning no limitation).
	MaxClients pulumi.IntPtrInput
	// Maximum number of tunnel packet retransmissions (0 - 64, default = 3).
	MaxRetransmit pulumi.IntPtrInput
	// Mesh Ethernet identifier included in backhaul packets (0 - 65535, default = 8755).
	MeshEthType pulumi.IntPtrInput
	// Interval in seconds between two WiFi network access control (NAC) checks (10 - 600, default = 120).
	NacInterval pulumi.IntPtrInput
	// Name of the wireless controller.
	Name pulumi.StringPtrInput
	// Maximum numerical difference between an AP's Ethernet and wireless MAC values to match for rogue detection (0 - 31, default = 7).
	RogueScanMacAdjacency pulumi.IntPtrInput
	// Enable/disable rolling WTP upgrade (default = disable). Valid values: `enable`, `disable`.
	RollingWtpUpgrade pulumi.StringPtrInput
	// Minimum signal level/threshold in dBm required for the managed WTP to be included in rolling WTP upgrade (-95 to -20, default = -80).
	RollingWtpUpgradeThreshold pulumi.StringPtrInput
	// Compatible/strict tunnel mode. Valid values: `compatible`, `strict`.
	TunnelMode pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Wpad daemon process count for multi-core CPU support.
	WpadProcessCount pulumi.IntPtrInput
	// Enable/disable sharing of WTPs between VDOMs. Valid values: `enable`, `disable`.
	WtpShare pulumi.StringPtrInput
}

func (GlobalState) ElementType() reflect.Type {
	return reflect.TypeOf((*globalState)(nil)).Elem()
}

type globalArgs struct {
	// Configure the number cwAcd daemons for multi-core CPU support (default = 0).
	AcdProcessCount *int `pulumi:"acdProcessCount"`
	// Enable/disable configuring APs or FortiAPs to send log messages to a syslog server (default = disable). Valid values: `enable`, `disable`.
	ApLogServer *string `pulumi:"apLogServer"`
	// IP address that APs or FortiAPs send log messages to.
	ApLogServerIp *string `pulumi:"apLogServerIp"`
	// Port that APs or FortiAPs send log messages to.
	ApLogServerPort *int `pulumi:"apLogServerPort"`
	// Configure CAPWAP control message data channel offload.
	ControlMessageOffload *string `pulumi:"controlMessageOffload"`
	// Configure the wireless controller to use Ethernet II or 802.3 frames with 802.3 data tunnel mode (default = disable). Valid values: `enable`, `disable`.
	DataEthernetIi *string `pulumi:"dataEthernetIi"`
	// Enable/disable DFS certificate lab test mode. Valid values: `enable`, `disable`.
	DfsLabTest *string `pulumi:"dfsLabTest"`
	// Multicast IP address for AP discovery (default = 244.0.1.140).
	DiscoveryMcAddr *string `pulumi:"discoveryMcAddr"`
	// Ethernet type for Fortinet Inter-Access Point Protocol (IAPP), or IEEE 802.11f, packets (0 - 65535, default = 5252).
	FiappEthType *int `pulumi:"fiappEthType"`
	// Enable/disable WTP image download at join time. Valid values: `enable`, `disable`.
	ImageDownload *string `pulumi:"imageDownload"`
	// Base IP address for IPsec VPN tunnels between the access points and the wireless controller (default = 169.254.0.1).
	IpsecBaseIp *string `pulumi:"ipsecBaseIp"`
	// Enable/disable calculating the CAPWAP transmit hash to load balance sessions to link aggregation nodes (default = disable). Valid values: `enable`, `disable`.
	LinkAggregation *string `pulumi:"linkAggregation"`
	// Description of the location of the wireless controller.
	Location *string `pulumi:"location"`
	// Maximum number of clients that can connect simultaneously (default = 0, meaning no limitation).
	MaxClients *int `pulumi:"maxClients"`
	// Maximum number of tunnel packet retransmissions (0 - 64, default = 3).
	MaxRetransmit *int `pulumi:"maxRetransmit"`
	// Mesh Ethernet identifier included in backhaul packets (0 - 65535, default = 8755).
	MeshEthType *int `pulumi:"meshEthType"`
	// Interval in seconds between two WiFi network access control (NAC) checks (10 - 600, default = 120).
	NacInterval *int `pulumi:"nacInterval"`
	// Name of the wireless controller.
	Name *string `pulumi:"name"`
	// Maximum numerical difference between an AP's Ethernet and wireless MAC values to match for rogue detection (0 - 31, default = 7).
	RogueScanMacAdjacency *int `pulumi:"rogueScanMacAdjacency"`
	// Enable/disable rolling WTP upgrade (default = disable). Valid values: `enable`, `disable`.
	RollingWtpUpgrade *string `pulumi:"rollingWtpUpgrade"`
	// Minimum signal level/threshold in dBm required for the managed WTP to be included in rolling WTP upgrade (-95 to -20, default = -80).
	RollingWtpUpgradeThreshold *string `pulumi:"rollingWtpUpgradeThreshold"`
	// Compatible/strict tunnel mode. Valid values: `compatible`, `strict`.
	TunnelMode *string `pulumi:"tunnelMode"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Wpad daemon process count for multi-core CPU support.
	WpadProcessCount *int `pulumi:"wpadProcessCount"`
	// Enable/disable sharing of WTPs between VDOMs. Valid values: `enable`, `disable`.
	WtpShare *string `pulumi:"wtpShare"`
}

// The set of arguments for constructing a Global resource.
type GlobalArgs struct {
	// Configure the number cwAcd daemons for multi-core CPU support (default = 0).
	AcdProcessCount pulumi.IntPtrInput
	// Enable/disable configuring APs or FortiAPs to send log messages to a syslog server (default = disable). Valid values: `enable`, `disable`.
	ApLogServer pulumi.StringPtrInput
	// IP address that APs or FortiAPs send log messages to.
	ApLogServerIp pulumi.StringPtrInput
	// Port that APs or FortiAPs send log messages to.
	ApLogServerPort pulumi.IntPtrInput
	// Configure CAPWAP control message data channel offload.
	ControlMessageOffload pulumi.StringPtrInput
	// Configure the wireless controller to use Ethernet II or 802.3 frames with 802.3 data tunnel mode (default = disable). Valid values: `enable`, `disable`.
	DataEthernetIi pulumi.StringPtrInput
	// Enable/disable DFS certificate lab test mode. Valid values: `enable`, `disable`.
	DfsLabTest pulumi.StringPtrInput
	// Multicast IP address for AP discovery (default = 244.0.1.140).
	DiscoveryMcAddr pulumi.StringPtrInput
	// Ethernet type for Fortinet Inter-Access Point Protocol (IAPP), or IEEE 802.11f, packets (0 - 65535, default = 5252).
	FiappEthType pulumi.IntPtrInput
	// Enable/disable WTP image download at join time. Valid values: `enable`, `disable`.
	ImageDownload pulumi.StringPtrInput
	// Base IP address for IPsec VPN tunnels between the access points and the wireless controller (default = 169.254.0.1).
	IpsecBaseIp pulumi.StringPtrInput
	// Enable/disable calculating the CAPWAP transmit hash to load balance sessions to link aggregation nodes (default = disable). Valid values: `enable`, `disable`.
	LinkAggregation pulumi.StringPtrInput
	// Description of the location of the wireless controller.
	Location pulumi.StringPtrInput
	// Maximum number of clients that can connect simultaneously (default = 0, meaning no limitation).
	MaxClients pulumi.IntPtrInput
	// Maximum number of tunnel packet retransmissions (0 - 64, default = 3).
	MaxRetransmit pulumi.IntPtrInput
	// Mesh Ethernet identifier included in backhaul packets (0 - 65535, default = 8755).
	MeshEthType pulumi.IntPtrInput
	// Interval in seconds between two WiFi network access control (NAC) checks (10 - 600, default = 120).
	NacInterval pulumi.IntPtrInput
	// Name of the wireless controller.
	Name pulumi.StringPtrInput
	// Maximum numerical difference between an AP's Ethernet and wireless MAC values to match for rogue detection (0 - 31, default = 7).
	RogueScanMacAdjacency pulumi.IntPtrInput
	// Enable/disable rolling WTP upgrade (default = disable). Valid values: `enable`, `disable`.
	RollingWtpUpgrade pulumi.StringPtrInput
	// Minimum signal level/threshold in dBm required for the managed WTP to be included in rolling WTP upgrade (-95 to -20, default = -80).
	RollingWtpUpgradeThreshold pulumi.StringPtrInput
	// Compatible/strict tunnel mode. Valid values: `compatible`, `strict`.
	TunnelMode pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Wpad daemon process count for multi-core CPU support.
	WpadProcessCount pulumi.IntPtrInput
	// Enable/disable sharing of WTPs between VDOMs. Valid values: `enable`, `disable`.
	WtpShare pulumi.StringPtrInput
}

func (GlobalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*globalArgs)(nil)).Elem()
}

type GlobalInput interface {
	pulumi.Input

	ToGlobalOutput() GlobalOutput
	ToGlobalOutputWithContext(ctx context.Context) GlobalOutput
}

func (*Global) ElementType() reflect.Type {
	return reflect.TypeOf((**Global)(nil)).Elem()
}

func (i *Global) ToGlobalOutput() GlobalOutput {
	return i.ToGlobalOutputWithContext(context.Background())
}

func (i *Global) ToGlobalOutputWithContext(ctx context.Context) GlobalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalOutput)
}

// GlobalArrayInput is an input type that accepts GlobalArray and GlobalArrayOutput values.
// You can construct a concrete instance of `GlobalArrayInput` via:
//
//	GlobalArray{ GlobalArgs{...} }
type GlobalArrayInput interface {
	pulumi.Input

	ToGlobalArrayOutput() GlobalArrayOutput
	ToGlobalArrayOutputWithContext(context.Context) GlobalArrayOutput
}

type GlobalArray []GlobalInput

func (GlobalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Global)(nil)).Elem()
}

func (i GlobalArray) ToGlobalArrayOutput() GlobalArrayOutput {
	return i.ToGlobalArrayOutputWithContext(context.Background())
}

func (i GlobalArray) ToGlobalArrayOutputWithContext(ctx context.Context) GlobalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalArrayOutput)
}

// GlobalMapInput is an input type that accepts GlobalMap and GlobalMapOutput values.
// You can construct a concrete instance of `GlobalMapInput` via:
//
//	GlobalMap{ "key": GlobalArgs{...} }
type GlobalMapInput interface {
	pulumi.Input

	ToGlobalMapOutput() GlobalMapOutput
	ToGlobalMapOutputWithContext(context.Context) GlobalMapOutput
}

type GlobalMap map[string]GlobalInput

func (GlobalMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Global)(nil)).Elem()
}

func (i GlobalMap) ToGlobalMapOutput() GlobalMapOutput {
	return i.ToGlobalMapOutputWithContext(context.Background())
}

func (i GlobalMap) ToGlobalMapOutputWithContext(ctx context.Context) GlobalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalMapOutput)
}

type GlobalOutput struct{ *pulumi.OutputState }

func (GlobalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Global)(nil)).Elem()
}

func (o GlobalOutput) ToGlobalOutput() GlobalOutput {
	return o
}

func (o GlobalOutput) ToGlobalOutputWithContext(ctx context.Context) GlobalOutput {
	return o
}

// Configure the number cwAcd daemons for multi-core CPU support (default = 0).
func (o GlobalOutput) AcdProcessCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Global) pulumi.IntOutput { return v.AcdProcessCount }).(pulumi.IntOutput)
}

// Enable/disable configuring APs or FortiAPs to send log messages to a syslog server (default = disable). Valid values: `enable`, `disable`.
func (o GlobalOutput) ApLogServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Global) pulumi.StringOutput { return v.ApLogServer }).(pulumi.StringOutput)
}

// IP address that APs or FortiAPs send log messages to.
func (o GlobalOutput) ApLogServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Global) pulumi.StringOutput { return v.ApLogServerIp }).(pulumi.StringOutput)
}

// Port that APs or FortiAPs send log messages to.
func (o GlobalOutput) ApLogServerPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Global) pulumi.IntOutput { return v.ApLogServerPort }).(pulumi.IntOutput)
}

// Configure CAPWAP control message data channel offload.
func (o GlobalOutput) ControlMessageOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *Global) pulumi.StringOutput { return v.ControlMessageOffload }).(pulumi.StringOutput)
}

// Configure the wireless controller to use Ethernet II or 802.3 frames with 802.3 data tunnel mode (default = disable). Valid values: `enable`, `disable`.
func (o GlobalOutput) DataEthernetIi() pulumi.StringOutput {
	return o.ApplyT(func(v *Global) pulumi.StringOutput { return v.DataEthernetIi }).(pulumi.StringOutput)
}

// Enable/disable DFS certificate lab test mode. Valid values: `enable`, `disable`.
func (o GlobalOutput) DfsLabTest() pulumi.StringOutput {
	return o.ApplyT(func(v *Global) pulumi.StringOutput { return v.DfsLabTest }).(pulumi.StringOutput)
}

// Multicast IP address for AP discovery (default = 244.0.1.140).
func (o GlobalOutput) DiscoveryMcAddr() pulumi.StringOutput {
	return o.ApplyT(func(v *Global) pulumi.StringOutput { return v.DiscoveryMcAddr }).(pulumi.StringOutput)
}

// Ethernet type for Fortinet Inter-Access Point Protocol (IAPP), or IEEE 802.11f, packets (0 - 65535, default = 5252).
func (o GlobalOutput) FiappEthType() pulumi.IntOutput {
	return o.ApplyT(func(v *Global) pulumi.IntOutput { return v.FiappEthType }).(pulumi.IntOutput)
}

// Enable/disable WTP image download at join time. Valid values: `enable`, `disable`.
func (o GlobalOutput) ImageDownload() pulumi.StringOutput {
	return o.ApplyT(func(v *Global) pulumi.StringOutput { return v.ImageDownload }).(pulumi.StringOutput)
}

// Base IP address for IPsec VPN tunnels between the access points and the wireless controller (default = 169.254.0.1).
func (o GlobalOutput) IpsecBaseIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Global) pulumi.StringOutput { return v.IpsecBaseIp }).(pulumi.StringOutput)
}

// Enable/disable calculating the CAPWAP transmit hash to load balance sessions to link aggregation nodes (default = disable). Valid values: `enable`, `disable`.
func (o GlobalOutput) LinkAggregation() pulumi.StringOutput {
	return o.ApplyT(func(v *Global) pulumi.StringOutput { return v.LinkAggregation }).(pulumi.StringOutput)
}

// Description of the location of the wireless controller.
func (o GlobalOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Global) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Maximum number of clients that can connect simultaneously (default = 0, meaning no limitation).
func (o GlobalOutput) MaxClients() pulumi.IntOutput {
	return o.ApplyT(func(v *Global) pulumi.IntOutput { return v.MaxClients }).(pulumi.IntOutput)
}

// Maximum number of tunnel packet retransmissions (0 - 64, default = 3).
func (o GlobalOutput) MaxRetransmit() pulumi.IntOutput {
	return o.ApplyT(func(v *Global) pulumi.IntOutput { return v.MaxRetransmit }).(pulumi.IntOutput)
}

// Mesh Ethernet identifier included in backhaul packets (0 - 65535, default = 8755).
func (o GlobalOutput) MeshEthType() pulumi.IntOutput {
	return o.ApplyT(func(v *Global) pulumi.IntOutput { return v.MeshEthType }).(pulumi.IntOutput)
}

// Interval in seconds between two WiFi network access control (NAC) checks (10 - 600, default = 120).
func (o GlobalOutput) NacInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Global) pulumi.IntOutput { return v.NacInterval }).(pulumi.IntOutput)
}

// Name of the wireless controller.
func (o GlobalOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Global) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Maximum numerical difference between an AP's Ethernet and wireless MAC values to match for rogue detection (0 - 31, default = 7).
func (o GlobalOutput) RogueScanMacAdjacency() pulumi.IntOutput {
	return o.ApplyT(func(v *Global) pulumi.IntOutput { return v.RogueScanMacAdjacency }).(pulumi.IntOutput)
}

// Enable/disable rolling WTP upgrade (default = disable). Valid values: `enable`, `disable`.
func (o GlobalOutput) RollingWtpUpgrade() pulumi.StringOutput {
	return o.ApplyT(func(v *Global) pulumi.StringOutput { return v.RollingWtpUpgrade }).(pulumi.StringOutput)
}

// Minimum signal level/threshold in dBm required for the managed WTP to be included in rolling WTP upgrade (-95 to -20, default = -80).
func (o GlobalOutput) RollingWtpUpgradeThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v *Global) pulumi.StringOutput { return v.RollingWtpUpgradeThreshold }).(pulumi.StringOutput)
}

// Compatible/strict tunnel mode. Valid values: `compatible`, `strict`.
func (o GlobalOutput) TunnelMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Global) pulumi.StringOutput { return v.TunnelMode }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o GlobalOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Global) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Wpad daemon process count for multi-core CPU support.
func (o GlobalOutput) WpadProcessCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Global) pulumi.IntOutput { return v.WpadProcessCount }).(pulumi.IntOutput)
}

// Enable/disable sharing of WTPs between VDOMs. Valid values: `enable`, `disable`.
func (o GlobalOutput) WtpShare() pulumi.StringOutput {
	return o.ApplyT(func(v *Global) pulumi.StringOutput { return v.WtpShare }).(pulumi.StringOutput)
}

type GlobalArrayOutput struct{ *pulumi.OutputState }

func (GlobalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Global)(nil)).Elem()
}

func (o GlobalArrayOutput) ToGlobalArrayOutput() GlobalArrayOutput {
	return o
}

func (o GlobalArrayOutput) ToGlobalArrayOutputWithContext(ctx context.Context) GlobalArrayOutput {
	return o
}

func (o GlobalArrayOutput) Index(i pulumi.IntInput) GlobalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Global {
		return vs[0].([]*Global)[vs[1].(int)]
	}).(GlobalOutput)
}

type GlobalMapOutput struct{ *pulumi.OutputState }

func (GlobalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Global)(nil)).Elem()
}

func (o GlobalMapOutput) ToGlobalMapOutput() GlobalMapOutput {
	return o
}

func (o GlobalMapOutput) ToGlobalMapOutputWithContext(ctx context.Context) GlobalMapOutput {
	return o
}

func (o GlobalMapOutput) MapIndex(k pulumi.StringInput) GlobalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Global {
		return vs[0].(map[string]*Global)[vs[1].(string)]
	}).(GlobalOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalInput)(nil)).Elem(), &Global{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalArrayInput)(nil)).Elem(), GlobalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalMapInput)(nil)).Elem(), GlobalMap{})
	pulumi.RegisterOutputType(GlobalOutput{})
	pulumi.RegisterOutputType(GlobalArrayOutput{})
	pulumi.RegisterOutputType(GlobalMapOutput{})
}
