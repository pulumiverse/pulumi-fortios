// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wirelesscontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure wireless controller event log filters. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// WirelessController Log can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/log:Log labelname WirelessControllerLog
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/log:Log labelname WirelessControllerLog
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Log struct {
	pulumi.CustomResourceState

	// Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	AddrgrpLog pulumi.StringOutput `pulumi:"addrgrpLog"`
	// Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	BleLog pulumi.StringOutput `pulumi:"bleLog"`
	// Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	ClbLog pulumi.StringOutput `pulumi:"clbLog"`
	// Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	DhcpStarvLog pulumi.StringOutput `pulumi:"dhcpStarvLog"`
	// Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	LedSchedLog pulumi.StringOutput `pulumi:"ledSchedLog"`
	// Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RadioEventLog pulumi.StringOutput `pulumi:"radioEventLog"`
	// Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RogueEventLog pulumi.StringOutput `pulumi:"rogueEventLog"`
	// Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaEventLog pulumi.StringOutput `pulumi:"staEventLog"`
	// Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaLocateLog pulumi.StringOutput `pulumi:"staLocateLog"`
	// Enable/disable wireless event logging. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
	// Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WidsLog pulumi.StringOutput `pulumi:"widsLog"`
	// Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WtpEventLog pulumi.StringOutput `pulumi:"wtpEventLog"`
	// Lowest severity level to log FAP fips event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WtpFipsEventLog pulumi.StringOutput `pulumi:"wtpFipsEventLog"`
}

// NewLog registers a new resource with the given unique name, arguments, and options.
func NewLog(ctx *pulumi.Context,
	name string, args *LogArgs, opts ...pulumi.ResourceOption) (*Log, error) {
	if args == nil {
		args = &LogArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Log
	err := ctx.RegisterResource("fortios:wirelesscontroller/log:Log", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLog gets an existing Log resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogState, opts ...pulumi.ResourceOption) (*Log, error) {
	var resource Log
	err := ctx.ReadResource("fortios:wirelesscontroller/log:Log", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Log resources.
type logState struct {
	// Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	AddrgrpLog *string `pulumi:"addrgrpLog"`
	// Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	BleLog *string `pulumi:"bleLog"`
	// Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	ClbLog *string `pulumi:"clbLog"`
	// Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	DhcpStarvLog *string `pulumi:"dhcpStarvLog"`
	// Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	LedSchedLog *string `pulumi:"ledSchedLog"`
	// Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RadioEventLog *string `pulumi:"radioEventLog"`
	// Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RogueEventLog *string `pulumi:"rogueEventLog"`
	// Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaEventLog *string `pulumi:"staEventLog"`
	// Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaLocateLog *string `pulumi:"staLocateLog"`
	// Enable/disable wireless event logging. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WidsLog *string `pulumi:"widsLog"`
	// Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WtpEventLog *string `pulumi:"wtpEventLog"`
	// Lowest severity level to log FAP fips event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WtpFipsEventLog *string `pulumi:"wtpFipsEventLog"`
}

type LogState struct {
	// Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	AddrgrpLog pulumi.StringPtrInput
	// Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	BleLog pulumi.StringPtrInput
	// Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	ClbLog pulumi.StringPtrInput
	// Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	DhcpStarvLog pulumi.StringPtrInput
	// Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	LedSchedLog pulumi.StringPtrInput
	// Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RadioEventLog pulumi.StringPtrInput
	// Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RogueEventLog pulumi.StringPtrInput
	// Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaEventLog pulumi.StringPtrInput
	// Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaLocateLog pulumi.StringPtrInput
	// Enable/disable wireless event logging. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WidsLog pulumi.StringPtrInput
	// Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WtpEventLog pulumi.StringPtrInput
	// Lowest severity level to log FAP fips event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WtpFipsEventLog pulumi.StringPtrInput
}

func (LogState) ElementType() reflect.Type {
	return reflect.TypeOf((*logState)(nil)).Elem()
}

type logArgs struct {
	// Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	AddrgrpLog *string `pulumi:"addrgrpLog"`
	// Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	BleLog *string `pulumi:"bleLog"`
	// Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	ClbLog *string `pulumi:"clbLog"`
	// Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	DhcpStarvLog *string `pulumi:"dhcpStarvLog"`
	// Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	LedSchedLog *string `pulumi:"ledSchedLog"`
	// Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RadioEventLog *string `pulumi:"radioEventLog"`
	// Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RogueEventLog *string `pulumi:"rogueEventLog"`
	// Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaEventLog *string `pulumi:"staEventLog"`
	// Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaLocateLog *string `pulumi:"staLocateLog"`
	// Enable/disable wireless event logging. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WidsLog *string `pulumi:"widsLog"`
	// Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WtpEventLog *string `pulumi:"wtpEventLog"`
	// Lowest severity level to log FAP fips event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WtpFipsEventLog *string `pulumi:"wtpFipsEventLog"`
}

// The set of arguments for constructing a Log resource.
type LogArgs struct {
	// Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	AddrgrpLog pulumi.StringPtrInput
	// Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	BleLog pulumi.StringPtrInput
	// Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	ClbLog pulumi.StringPtrInput
	// Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	DhcpStarvLog pulumi.StringPtrInput
	// Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	LedSchedLog pulumi.StringPtrInput
	// Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RadioEventLog pulumi.StringPtrInput
	// Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	RogueEventLog pulumi.StringPtrInput
	// Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaEventLog pulumi.StringPtrInput
	// Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	StaLocateLog pulumi.StringPtrInput
	// Enable/disable wireless event logging. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WidsLog pulumi.StringPtrInput
	// Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WtpEventLog pulumi.StringPtrInput
	// Lowest severity level to log FAP fips event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	WtpFipsEventLog pulumi.StringPtrInput
}

func (LogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logArgs)(nil)).Elem()
}

type LogInput interface {
	pulumi.Input

	ToLogOutput() LogOutput
	ToLogOutputWithContext(ctx context.Context) LogOutput
}

func (*Log) ElementType() reflect.Type {
	return reflect.TypeOf((**Log)(nil)).Elem()
}

func (i *Log) ToLogOutput() LogOutput {
	return i.ToLogOutputWithContext(context.Background())
}

func (i *Log) ToLogOutputWithContext(ctx context.Context) LogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogOutput)
}

// LogArrayInput is an input type that accepts LogArray and LogArrayOutput values.
// You can construct a concrete instance of `LogArrayInput` via:
//
//	LogArray{ LogArgs{...} }
type LogArrayInput interface {
	pulumi.Input

	ToLogArrayOutput() LogArrayOutput
	ToLogArrayOutputWithContext(context.Context) LogArrayOutput
}

type LogArray []LogInput

func (LogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Log)(nil)).Elem()
}

func (i LogArray) ToLogArrayOutput() LogArrayOutput {
	return i.ToLogArrayOutputWithContext(context.Background())
}

func (i LogArray) ToLogArrayOutputWithContext(ctx context.Context) LogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogArrayOutput)
}

// LogMapInput is an input type that accepts LogMap and LogMapOutput values.
// You can construct a concrete instance of `LogMapInput` via:
//
//	LogMap{ "key": LogArgs{...} }
type LogMapInput interface {
	pulumi.Input

	ToLogMapOutput() LogMapOutput
	ToLogMapOutputWithContext(context.Context) LogMapOutput
}

type LogMap map[string]LogInput

func (LogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Log)(nil)).Elem()
}

func (i LogMap) ToLogMapOutput() LogMapOutput {
	return i.ToLogMapOutputWithContext(context.Background())
}

func (i LogMap) ToLogMapOutputWithContext(ctx context.Context) LogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMapOutput)
}

type LogOutput struct{ *pulumi.OutputState }

func (LogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Log)(nil)).Elem()
}

func (o LogOutput) ToLogOutput() LogOutput {
	return o
}

func (o LogOutput) ToLogOutputWithContext(ctx context.Context) LogOutput {
	return o
}

// Lowest severity level to log address group message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o LogOutput) AddrgrpLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Log) pulumi.StringOutput { return v.AddrgrpLog }).(pulumi.StringOutput)
}

// Lowest severity level to log BLE detection message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o LogOutput) BleLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Log) pulumi.StringOutput { return v.BleLog }).(pulumi.StringOutput)
}

// Lowest severity level to log client load balancing message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o LogOutput) ClbLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Log) pulumi.StringOutput { return v.ClbLog }).(pulumi.StringOutput)
}

// Lowest severity level to log DHCP starvation event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o LogOutput) DhcpStarvLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Log) pulumi.StringOutput { return v.DhcpStarvLog }).(pulumi.StringOutput)
}

// Lowest severity level to log LED schedule event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o LogOutput) LedSchedLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Log) pulumi.StringOutput { return v.LedSchedLog }).(pulumi.StringOutput)
}

// Lowest severity level to log radio event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o LogOutput) RadioEventLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Log) pulumi.StringOutput { return v.RadioEventLog }).(pulumi.StringOutput)
}

// Lowest severity level to log rogue AP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o LogOutput) RogueEventLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Log) pulumi.StringOutput { return v.RogueEventLog }).(pulumi.StringOutput)
}

// Lowest severity level to log station event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o LogOutput) StaEventLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Log) pulumi.StringOutput { return v.StaEventLog }).(pulumi.StringOutput)
}

// Lowest severity level to log station locate message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o LogOutput) StaLocateLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Log) pulumi.StringOutput { return v.StaLocateLog }).(pulumi.StringOutput)
}

// Enable/disable wireless event logging. Valid values: `enable`, `disable`.
func (o LogOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Log) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o LogOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Log) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

// Lowest severity level to log WIDS message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o LogOutput) WidsLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Log) pulumi.StringOutput { return v.WidsLog }).(pulumi.StringOutput)
}

// Lowest severity level to log WTP event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o LogOutput) WtpEventLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Log) pulumi.StringOutput { return v.WtpEventLog }).(pulumi.StringOutput)
}

// Lowest severity level to log FAP fips event message. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o LogOutput) WtpFipsEventLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Log) pulumi.StringOutput { return v.WtpFipsEventLog }).(pulumi.StringOutput)
}

type LogArrayOutput struct{ *pulumi.OutputState }

func (LogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Log)(nil)).Elem()
}

func (o LogArrayOutput) ToLogArrayOutput() LogArrayOutput {
	return o
}

func (o LogArrayOutput) ToLogArrayOutputWithContext(ctx context.Context) LogArrayOutput {
	return o
}

func (o LogArrayOutput) Index(i pulumi.IntInput) LogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Log {
		return vs[0].([]*Log)[vs[1].(int)]
	}).(LogOutput)
}

type LogMapOutput struct{ *pulumi.OutputState }

func (LogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Log)(nil)).Elem()
}

func (o LogMapOutput) ToLogMapOutput() LogMapOutput {
	return o
}

func (o LogMapOutput) ToLogMapOutputWithContext(ctx context.Context) LogMapOutput {
	return o
}

func (o LogMapOutput) MapIndex(k pulumi.StringInput) LogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Log {
		return vs[0].(map[string]*Log)[vs[1].(string)]
	}).(LogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogInput)(nil)).Elem(), &Log{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogArrayInput)(nil)).Elem(), LogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogMapInput)(nil)).Elem(), LogMap{})
	pulumi.RegisterOutputType(LogOutput{})
	pulumi.RegisterOutputType(LogArrayOutput{})
	pulumi.RegisterOutputType(LogMapOutput{})
}
