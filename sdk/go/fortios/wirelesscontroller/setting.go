// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wirelesscontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// VDOM wireless controller configuration.
//
// ## Import
//
// WirelessController Setting can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/setting:Setting labelname WirelessControllerSetting
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/setting:Setting labelname WirelessControllerSetting
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Setting struct {
	pulumi.CustomResourceState

	// FortiCloud customer account ID.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Country or region in which the FortiGate is located. The country determines the 802.11 bands and channels that are available.
	Country pulumi.StringOutput `pulumi:"country"`
	// Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 86400, 0 = disable).
	DarrpOptimize pulumi.IntOutput `pulumi:"darrpOptimize"`
	// Firewall schedules for DARRP running time. DARRP will run periodically based on darrp-optimize within the schedules. Separate multiple schedule names with a space. The structure of `darrpOptimizeSchedules` block is documented below.
	DarrpOptimizeSchedules SettingDarrpOptimizeScheduleArrayOutput `pulumi:"darrpOptimizeSchedules"`
	// Lower limit of creation time of device for identification in minutes (0 - 60, default = 5).
	DeviceHoldoff pulumi.IntOutput `pulumi:"deviceHoldoff"`
	// Upper limit of idle time of device for identification in minutes (0 - 14400, default = 1440).
	DeviceIdle pulumi.IntOutput `pulumi:"deviceIdle"`
	// Upper limit of confidence of device for identification (0 - 255, default = 1, 0 = disable).
	DeviceWeight pulumi.IntOutput `pulumi:"deviceWeight"`
	// Enable/disable allowing Virtual Access Points (VAPs) to use the same SSID name in the same VDOM. Valid values: `enable`, `disable`.
	DuplicateSsid pulumi.StringOutput `pulumi:"duplicateSsid"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Actions taken for detected fake SSID. Valid values: `log`, `suppress`.
	FakeSsidAction pulumi.StringOutput `pulumi:"fakeSsidAction"`
	// Enable/disable FAP-C series compatibility. Valid values: `enable`, `disable`.
	FapcCompatibility pulumi.StringOutput `pulumi:"fapcCompatibility"`
	// Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
	FirmwareProvisionOnAuthorization pulumi.StringOutput `pulumi:"firmwareProvisionOnAuthorization"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Configure offending SSID. The structure of `offendingSsid` block is documented below.
	OffendingSsids SettingOffendingSsidArrayOutput `pulumi:"offendingSsids"`
	// Enable/disable phishing SSID detection. Valid values: `enable`, `disable`.
	PhishingSsidDetect pulumi.StringOutput `pulumi:"phishingSsidDetect"`
	// Enable/disable rolling WTP upgrade (default = disable). Valid values: `enable`, `disable`.
	RollingWtpUpgrade pulumi.StringOutput `pulumi:"rollingWtpUpgrade"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Enable/disable WFA compatibility. Valid values: `enable`, `disable`.
	WfaCompatibility pulumi.StringOutput `pulumi:"wfaCompatibility"`
}

// NewSetting registers a new resource with the given unique name, arguments, and options.
func NewSetting(ctx *pulumi.Context,
	name string, args *SettingArgs, opts ...pulumi.ResourceOption) (*Setting, error) {
	if args == nil {
		args = &SettingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Setting
	err := ctx.RegisterResource("fortios:wirelesscontroller/setting:Setting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSetting gets an existing Setting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SettingState, opts ...pulumi.ResourceOption) (*Setting, error) {
	var resource Setting
	err := ctx.ReadResource("fortios:wirelesscontroller/setting:Setting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Setting resources.
type settingState struct {
	// FortiCloud customer account ID.
	AccountId *string `pulumi:"accountId"`
	// Country or region in which the FortiGate is located. The country determines the 802.11 bands and channels that are available.
	Country *string `pulumi:"country"`
	// Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 86400, 0 = disable).
	DarrpOptimize *int `pulumi:"darrpOptimize"`
	// Firewall schedules for DARRP running time. DARRP will run periodically based on darrp-optimize within the schedules. Separate multiple schedule names with a space. The structure of `darrpOptimizeSchedules` block is documented below.
	DarrpOptimizeSchedules []SettingDarrpOptimizeSchedule `pulumi:"darrpOptimizeSchedules"`
	// Lower limit of creation time of device for identification in minutes (0 - 60, default = 5).
	DeviceHoldoff *int `pulumi:"deviceHoldoff"`
	// Upper limit of idle time of device for identification in minutes (0 - 14400, default = 1440).
	DeviceIdle *int `pulumi:"deviceIdle"`
	// Upper limit of confidence of device for identification (0 - 255, default = 1, 0 = disable).
	DeviceWeight *int `pulumi:"deviceWeight"`
	// Enable/disable allowing Virtual Access Points (VAPs) to use the same SSID name in the same VDOM. Valid values: `enable`, `disable`.
	DuplicateSsid *string `pulumi:"duplicateSsid"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Actions taken for detected fake SSID. Valid values: `log`, `suppress`.
	FakeSsidAction *string `pulumi:"fakeSsidAction"`
	// Enable/disable FAP-C series compatibility. Valid values: `enable`, `disable`.
	FapcCompatibility *string `pulumi:"fapcCompatibility"`
	// Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
	FirmwareProvisionOnAuthorization *string `pulumi:"firmwareProvisionOnAuthorization"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Configure offending SSID. The structure of `offendingSsid` block is documented below.
	OffendingSsids []SettingOffendingSsid `pulumi:"offendingSsids"`
	// Enable/disable phishing SSID detection. Valid values: `enable`, `disable`.
	PhishingSsidDetect *string `pulumi:"phishingSsidDetect"`
	// Enable/disable rolling WTP upgrade (default = disable). Valid values: `enable`, `disable`.
	RollingWtpUpgrade *string `pulumi:"rollingWtpUpgrade"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable WFA compatibility. Valid values: `enable`, `disable`.
	WfaCompatibility *string `pulumi:"wfaCompatibility"`
}

type SettingState struct {
	// FortiCloud customer account ID.
	AccountId pulumi.StringPtrInput
	// Country or region in which the FortiGate is located. The country determines the 802.11 bands and channels that are available.
	Country pulumi.StringPtrInput
	// Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 86400, 0 = disable).
	DarrpOptimize pulumi.IntPtrInput
	// Firewall schedules for DARRP running time. DARRP will run periodically based on darrp-optimize within the schedules. Separate multiple schedule names with a space. The structure of `darrpOptimizeSchedules` block is documented below.
	DarrpOptimizeSchedules SettingDarrpOptimizeScheduleArrayInput
	// Lower limit of creation time of device for identification in minutes (0 - 60, default = 5).
	DeviceHoldoff pulumi.IntPtrInput
	// Upper limit of idle time of device for identification in minutes (0 - 14400, default = 1440).
	DeviceIdle pulumi.IntPtrInput
	// Upper limit of confidence of device for identification (0 - 255, default = 1, 0 = disable).
	DeviceWeight pulumi.IntPtrInput
	// Enable/disable allowing Virtual Access Points (VAPs) to use the same SSID name in the same VDOM. Valid values: `enable`, `disable`.
	DuplicateSsid pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Actions taken for detected fake SSID. Valid values: `log`, `suppress`.
	FakeSsidAction pulumi.StringPtrInput
	// Enable/disable FAP-C series compatibility. Valid values: `enable`, `disable`.
	FapcCompatibility pulumi.StringPtrInput
	// Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
	FirmwareProvisionOnAuthorization pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Configure offending SSID. The structure of `offendingSsid` block is documented below.
	OffendingSsids SettingOffendingSsidArrayInput
	// Enable/disable phishing SSID detection. Valid values: `enable`, `disable`.
	PhishingSsidDetect pulumi.StringPtrInput
	// Enable/disable rolling WTP upgrade (default = disable). Valid values: `enable`, `disable`.
	RollingWtpUpgrade pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable WFA compatibility. Valid values: `enable`, `disable`.
	WfaCompatibility pulumi.StringPtrInput
}

func (SettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*settingState)(nil)).Elem()
}

type settingArgs struct {
	// FortiCloud customer account ID.
	AccountId *string `pulumi:"accountId"`
	// Country or region in which the FortiGate is located. The country determines the 802.11 bands and channels that are available.
	Country *string `pulumi:"country"`
	// Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 86400, 0 = disable).
	DarrpOptimize *int `pulumi:"darrpOptimize"`
	// Firewall schedules for DARRP running time. DARRP will run periodically based on darrp-optimize within the schedules. Separate multiple schedule names with a space. The structure of `darrpOptimizeSchedules` block is documented below.
	DarrpOptimizeSchedules []SettingDarrpOptimizeSchedule `pulumi:"darrpOptimizeSchedules"`
	// Lower limit of creation time of device for identification in minutes (0 - 60, default = 5).
	DeviceHoldoff *int `pulumi:"deviceHoldoff"`
	// Upper limit of idle time of device for identification in minutes (0 - 14400, default = 1440).
	DeviceIdle *int `pulumi:"deviceIdle"`
	// Upper limit of confidence of device for identification (0 - 255, default = 1, 0 = disable).
	DeviceWeight *int `pulumi:"deviceWeight"`
	// Enable/disable allowing Virtual Access Points (VAPs) to use the same SSID name in the same VDOM. Valid values: `enable`, `disable`.
	DuplicateSsid *string `pulumi:"duplicateSsid"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Actions taken for detected fake SSID. Valid values: `log`, `suppress`.
	FakeSsidAction *string `pulumi:"fakeSsidAction"`
	// Enable/disable FAP-C series compatibility. Valid values: `enable`, `disable`.
	FapcCompatibility *string `pulumi:"fapcCompatibility"`
	// Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
	FirmwareProvisionOnAuthorization *string `pulumi:"firmwareProvisionOnAuthorization"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Configure offending SSID. The structure of `offendingSsid` block is documented below.
	OffendingSsids []SettingOffendingSsid `pulumi:"offendingSsids"`
	// Enable/disable phishing SSID detection. Valid values: `enable`, `disable`.
	PhishingSsidDetect *string `pulumi:"phishingSsidDetect"`
	// Enable/disable rolling WTP upgrade (default = disable). Valid values: `enable`, `disable`.
	RollingWtpUpgrade *string `pulumi:"rollingWtpUpgrade"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable WFA compatibility. Valid values: `enable`, `disable`.
	WfaCompatibility *string `pulumi:"wfaCompatibility"`
}

// The set of arguments for constructing a Setting resource.
type SettingArgs struct {
	// FortiCloud customer account ID.
	AccountId pulumi.StringPtrInput
	// Country or region in which the FortiGate is located. The country determines the 802.11 bands and channels that are available.
	Country pulumi.StringPtrInput
	// Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 86400, 0 = disable).
	DarrpOptimize pulumi.IntPtrInput
	// Firewall schedules for DARRP running time. DARRP will run periodically based on darrp-optimize within the schedules. Separate multiple schedule names with a space. The structure of `darrpOptimizeSchedules` block is documented below.
	DarrpOptimizeSchedules SettingDarrpOptimizeScheduleArrayInput
	// Lower limit of creation time of device for identification in minutes (0 - 60, default = 5).
	DeviceHoldoff pulumi.IntPtrInput
	// Upper limit of idle time of device for identification in minutes (0 - 14400, default = 1440).
	DeviceIdle pulumi.IntPtrInput
	// Upper limit of confidence of device for identification (0 - 255, default = 1, 0 = disable).
	DeviceWeight pulumi.IntPtrInput
	// Enable/disable allowing Virtual Access Points (VAPs) to use the same SSID name in the same VDOM. Valid values: `enable`, `disable`.
	DuplicateSsid pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Actions taken for detected fake SSID. Valid values: `log`, `suppress`.
	FakeSsidAction pulumi.StringPtrInput
	// Enable/disable FAP-C series compatibility. Valid values: `enable`, `disable`.
	FapcCompatibility pulumi.StringPtrInput
	// Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
	FirmwareProvisionOnAuthorization pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Configure offending SSID. The structure of `offendingSsid` block is documented below.
	OffendingSsids SettingOffendingSsidArrayInput
	// Enable/disable phishing SSID detection. Valid values: `enable`, `disable`.
	PhishingSsidDetect pulumi.StringPtrInput
	// Enable/disable rolling WTP upgrade (default = disable). Valid values: `enable`, `disable`.
	RollingWtpUpgrade pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable WFA compatibility. Valid values: `enable`, `disable`.
	WfaCompatibility pulumi.StringPtrInput
}

func (SettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*settingArgs)(nil)).Elem()
}

type SettingInput interface {
	pulumi.Input

	ToSettingOutput() SettingOutput
	ToSettingOutputWithContext(ctx context.Context) SettingOutput
}

func (*Setting) ElementType() reflect.Type {
	return reflect.TypeOf((**Setting)(nil)).Elem()
}

func (i *Setting) ToSettingOutput() SettingOutput {
	return i.ToSettingOutputWithContext(context.Background())
}

func (i *Setting) ToSettingOutputWithContext(ctx context.Context) SettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingOutput)
}

// SettingArrayInput is an input type that accepts SettingArray and SettingArrayOutput values.
// You can construct a concrete instance of `SettingArrayInput` via:
//
//	SettingArray{ SettingArgs{...} }
type SettingArrayInput interface {
	pulumi.Input

	ToSettingArrayOutput() SettingArrayOutput
	ToSettingArrayOutputWithContext(context.Context) SettingArrayOutput
}

type SettingArray []SettingInput

func (SettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Setting)(nil)).Elem()
}

func (i SettingArray) ToSettingArrayOutput() SettingArrayOutput {
	return i.ToSettingArrayOutputWithContext(context.Background())
}

func (i SettingArray) ToSettingArrayOutputWithContext(ctx context.Context) SettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingArrayOutput)
}

// SettingMapInput is an input type that accepts SettingMap and SettingMapOutput values.
// You can construct a concrete instance of `SettingMapInput` via:
//
//	SettingMap{ "key": SettingArgs{...} }
type SettingMapInput interface {
	pulumi.Input

	ToSettingMapOutput() SettingMapOutput
	ToSettingMapOutputWithContext(context.Context) SettingMapOutput
}

type SettingMap map[string]SettingInput

func (SettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Setting)(nil)).Elem()
}

func (i SettingMap) ToSettingMapOutput() SettingMapOutput {
	return i.ToSettingMapOutputWithContext(context.Background())
}

func (i SettingMap) ToSettingMapOutputWithContext(ctx context.Context) SettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMapOutput)
}

type SettingOutput struct{ *pulumi.OutputState }

func (SettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Setting)(nil)).Elem()
}

func (o SettingOutput) ToSettingOutput() SettingOutput {
	return o
}

func (o SettingOutput) ToSettingOutputWithContext(ctx context.Context) SettingOutput {
	return o
}

// FortiCloud customer account ID.
func (o SettingOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Country or region in which the FortiGate is located. The country determines the 802.11 bands and channels that are available.
func (o SettingOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.Country }).(pulumi.StringOutput)
}

// Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 86400, 0 = disable).
func (o SettingOutput) DarrpOptimize() pulumi.IntOutput {
	return o.ApplyT(func(v *Setting) pulumi.IntOutput { return v.DarrpOptimize }).(pulumi.IntOutput)
}

// Firewall schedules for DARRP running time. DARRP will run periodically based on darrp-optimize within the schedules. Separate multiple schedule names with a space. The structure of `darrpOptimizeSchedules` block is documented below.
func (o SettingOutput) DarrpOptimizeSchedules() SettingDarrpOptimizeScheduleArrayOutput {
	return o.ApplyT(func(v *Setting) SettingDarrpOptimizeScheduleArrayOutput { return v.DarrpOptimizeSchedules }).(SettingDarrpOptimizeScheduleArrayOutput)
}

// Lower limit of creation time of device for identification in minutes (0 - 60, default = 5).
func (o SettingOutput) DeviceHoldoff() pulumi.IntOutput {
	return o.ApplyT(func(v *Setting) pulumi.IntOutput { return v.DeviceHoldoff }).(pulumi.IntOutput)
}

// Upper limit of idle time of device for identification in minutes (0 - 14400, default = 1440).
func (o SettingOutput) DeviceIdle() pulumi.IntOutput {
	return o.ApplyT(func(v *Setting) pulumi.IntOutput { return v.DeviceIdle }).(pulumi.IntOutput)
}

// Upper limit of confidence of device for identification (0 - 255, default = 1, 0 = disable).
func (o SettingOutput) DeviceWeight() pulumi.IntOutput {
	return o.ApplyT(func(v *Setting) pulumi.IntOutput { return v.DeviceWeight }).(pulumi.IntOutput)
}

// Enable/disable allowing Virtual Access Points (VAPs) to use the same SSID name in the same VDOM. Valid values: `enable`, `disable`.
func (o SettingOutput) DuplicateSsid() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.DuplicateSsid }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SettingOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Actions taken for detected fake SSID. Valid values: `log`, `suppress`.
func (o SettingOutput) FakeSsidAction() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.FakeSsidAction }).(pulumi.StringOutput)
}

// Enable/disable FAP-C series compatibility. Valid values: `enable`, `disable`.
func (o SettingOutput) FapcCompatibility() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.FapcCompatibility }).(pulumi.StringOutput)
}

// Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
func (o SettingOutput) FirmwareProvisionOnAuthorization() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.FirmwareProvisionOnAuthorization }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o SettingOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Configure offending SSID. The structure of `offendingSsid` block is documented below.
func (o SettingOutput) OffendingSsids() SettingOffendingSsidArrayOutput {
	return o.ApplyT(func(v *Setting) SettingOffendingSsidArrayOutput { return v.OffendingSsids }).(SettingOffendingSsidArrayOutput)
}

// Enable/disable phishing SSID detection. Valid values: `enable`, `disable`.
func (o SettingOutput) PhishingSsidDetect() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.PhishingSsidDetect }).(pulumi.StringOutput)
}

// Enable/disable rolling WTP upgrade (default = disable). Valid values: `enable`, `disable`.
func (o SettingOutput) RollingWtpUpgrade() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.RollingWtpUpgrade }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SettingOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Enable/disable WFA compatibility. Valid values: `enable`, `disable`.
func (o SettingOutput) WfaCompatibility() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.WfaCompatibility }).(pulumi.StringOutput)
}

type SettingArrayOutput struct{ *pulumi.OutputState }

func (SettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Setting)(nil)).Elem()
}

func (o SettingArrayOutput) ToSettingArrayOutput() SettingArrayOutput {
	return o
}

func (o SettingArrayOutput) ToSettingArrayOutputWithContext(ctx context.Context) SettingArrayOutput {
	return o
}

func (o SettingArrayOutput) Index(i pulumi.IntInput) SettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Setting {
		return vs[0].([]*Setting)[vs[1].(int)]
	}).(SettingOutput)
}

type SettingMapOutput struct{ *pulumi.OutputState }

func (SettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Setting)(nil)).Elem()
}

func (o SettingMapOutput) ToSettingMapOutput() SettingMapOutput {
	return o
}

func (o SettingMapOutput) ToSettingMapOutputWithContext(ctx context.Context) SettingMapOutput {
	return o
}

func (o SettingMapOutput) MapIndex(k pulumi.StringInput) SettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Setting {
		return vs[0].(map[string]*Setting)[vs[1].(string)]
	}).(SettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SettingInput)(nil)).Elem(), &Setting{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingArrayInput)(nil)).Elem(), SettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingMapInput)(nil)).Elem(), SettingMap{})
	pulumi.RegisterOutputType(SettingOutput{})
	pulumi.RegisterOutputType(SettingArrayOutput{})
	pulumi.RegisterOutputType(SettingMapOutput{})
}
