// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wirelesscontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure CAPWAP timers.
//
// ## Import
//
// WirelessController Timers can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/timers:Timers labelname WirelessControllerTimers
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/timers:Timers labelname WirelessControllerTimers
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Timers struct {
	pulumi.CustomResourceState

	// Time in minutes to wait before AP reboots when there is no controller detected (5 - 65535, default = 0, 0 for no reboot).
	ApRebootWaitInterval1 pulumi.IntOutput `pulumi:"apRebootWaitInterval1"`
	// Time in minutes to wait before AP reboots when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session (5 - 65535, default = 0, 0 for no reboot).
	ApRebootWaitInterval2 pulumi.IntOutput `pulumi:"apRebootWaitInterval2"`
	// Time to reboot the AP when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session, format hh:mm.
	ApRebootWaitTime pulumi.StringOutput `pulumi:"apRebootWaitTime"`
	// Time after which a client is considered failed in RADIUS authentication and times out (5 - 30 sec, default = 5).
	AuthTimeout pulumi.IntOutput `pulumi:"authTimeout"`
	// Time between running Bluetooth Low Energy (BLE) reports (10 - 3600 sec, default = 30).
	BleScanReportIntv pulumi.IntOutput `pulumi:"bleScanReportIntv"`
	// Time after which a client is considered idle and disconnected from the home controller (2 - 3600 sec, default = 20, 0 for no timeout).
	ClientIdleRehomeTimeout pulumi.IntOutput `pulumi:"clientIdleRehomeTimeout"`
	// Time after which a client is considered idle and times out (20 - 3600 sec, default = 300, 0 for no timeout).
	ClientIdleTimeout pulumi.IntOutput `pulumi:"clientIdleTimeout"`
	// Weekday on which to run DARRP optimization. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	DarrpDay pulumi.StringOutput `pulumi:"darrpDay"`
	// Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 1800).
	DarrpOptimize pulumi.IntOutput `pulumi:"darrpOptimize"`
	// Time at which DARRP optimizations run (you can add up to 8 times). The structure of `darrpTime` block is documented below.
	DarrpTimes TimersDarrpTimeArrayOutput `pulumi:"darrpTimes"`
	// Time between discovery requests (2 - 180 sec, default = 5).
	DiscoveryInterval pulumi.IntOutput `pulumi:"discoveryInterval"`
	// Dynamic radio mode assignment (DRMA) schedule interval in minutes (10 - 1440, default = 60).
	DrmaInterval pulumi.IntOutput `pulumi:"drmaInterval"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Time between echo requests sent by the managed WTP, AP, or FortiAP (1 - 255 sec, default = 30).
	EchoInterval pulumi.IntOutput `pulumi:"echoInterval"`
	// Time between recording logs about fake APs if periodic fake AP logging is configured (0 - 1440 min, default = 1).
	FakeApLog pulumi.IntOutput `pulumi:"fakeApLog"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Time period to keep IPsec VPN interfaces up after WTP sessions are disconnected (30 - 3600 sec, default = 120).
	IpsecIntfCleanup pulumi.IntOutput `pulumi:"ipsecIntfCleanup"`
	// Maximal time in seconds between control requests sent by the managed WTP, AP, or FortiAP (0 - 255 sec, default = 0).
	NatSessionKeepAlive pulumi.IntOutput `pulumi:"natSessionKeepAlive"`
	// Time between running radio reports (1 - 255 sec, default = 15).
	RadioStatsInterval pulumi.IntOutput `pulumi:"radioStatsInterval"`
	// Time period in minutes to keep rogue AP after it is gone (default = 0).
	RogueApCleanup pulumi.IntOutput `pulumi:"rogueApCleanup"`
	// Time between logging rogue AP messages if periodic rogue AP logging is configured (0 - 1440 min, default = 0).
	RogueApLog pulumi.IntOutput `pulumi:"rogueApLog"`
	// Time between running station capability reports (1 - 255 sec, default = 30).
	StaCapabilityInterval pulumi.IntOutput `pulumi:"staCapabilityInterval"`
	// Time between running client presence flushes to remove clients that are listed but no longer present (0 - 86400 sec, default = 1800).
	StaLocateTimer pulumi.IntOutput `pulumi:"staLocateTimer"`
	// Time between running client (station) reports (1 - 255 sec, default = 1).
	StaStatsInterval pulumi.IntOutput `pulumi:"staStatsInterval"`
	// Time between running Virtual Access Point (VAP) reports (1 - 255 sec, default = 15).
	VapStatsInterval pulumi.IntOutput `pulumi:"vapStatsInterval"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewTimers registers a new resource with the given unique name, arguments, and options.
func NewTimers(ctx *pulumi.Context,
	name string, args *TimersArgs, opts ...pulumi.ResourceOption) (*Timers, error) {
	if args == nil {
		args = &TimersArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Timers
	err := ctx.RegisterResource("fortios:wirelesscontroller/timers:Timers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTimers gets an existing Timers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTimers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TimersState, opts ...pulumi.ResourceOption) (*Timers, error) {
	var resource Timers
	err := ctx.ReadResource("fortios:wirelesscontroller/timers:Timers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Timers resources.
type timersState struct {
	// Time in minutes to wait before AP reboots when there is no controller detected (5 - 65535, default = 0, 0 for no reboot).
	ApRebootWaitInterval1 *int `pulumi:"apRebootWaitInterval1"`
	// Time in minutes to wait before AP reboots when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session (5 - 65535, default = 0, 0 for no reboot).
	ApRebootWaitInterval2 *int `pulumi:"apRebootWaitInterval2"`
	// Time to reboot the AP when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session, format hh:mm.
	ApRebootWaitTime *string `pulumi:"apRebootWaitTime"`
	// Time after which a client is considered failed in RADIUS authentication and times out (5 - 30 sec, default = 5).
	AuthTimeout *int `pulumi:"authTimeout"`
	// Time between running Bluetooth Low Energy (BLE) reports (10 - 3600 sec, default = 30).
	BleScanReportIntv *int `pulumi:"bleScanReportIntv"`
	// Time after which a client is considered idle and disconnected from the home controller (2 - 3600 sec, default = 20, 0 for no timeout).
	ClientIdleRehomeTimeout *int `pulumi:"clientIdleRehomeTimeout"`
	// Time after which a client is considered idle and times out (20 - 3600 sec, default = 300, 0 for no timeout).
	ClientIdleTimeout *int `pulumi:"clientIdleTimeout"`
	// Weekday on which to run DARRP optimization. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	DarrpDay *string `pulumi:"darrpDay"`
	// Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 1800).
	DarrpOptimize *int `pulumi:"darrpOptimize"`
	// Time at which DARRP optimizations run (you can add up to 8 times). The structure of `darrpTime` block is documented below.
	DarrpTimes []TimersDarrpTime `pulumi:"darrpTimes"`
	// Time between discovery requests (2 - 180 sec, default = 5).
	DiscoveryInterval *int `pulumi:"discoveryInterval"`
	// Dynamic radio mode assignment (DRMA) schedule interval in minutes (10 - 1440, default = 60).
	DrmaInterval *int `pulumi:"drmaInterval"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Time between echo requests sent by the managed WTP, AP, or FortiAP (1 - 255 sec, default = 30).
	EchoInterval *int `pulumi:"echoInterval"`
	// Time between recording logs about fake APs if periodic fake AP logging is configured (0 - 1440 min, default = 1).
	FakeApLog *int `pulumi:"fakeApLog"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Time period to keep IPsec VPN interfaces up after WTP sessions are disconnected (30 - 3600 sec, default = 120).
	IpsecIntfCleanup *int `pulumi:"ipsecIntfCleanup"`
	// Maximal time in seconds between control requests sent by the managed WTP, AP, or FortiAP (0 - 255 sec, default = 0).
	NatSessionKeepAlive *int `pulumi:"natSessionKeepAlive"`
	// Time between running radio reports (1 - 255 sec, default = 15).
	RadioStatsInterval *int `pulumi:"radioStatsInterval"`
	// Time period in minutes to keep rogue AP after it is gone (default = 0).
	RogueApCleanup *int `pulumi:"rogueApCleanup"`
	// Time between logging rogue AP messages if periodic rogue AP logging is configured (0 - 1440 min, default = 0).
	RogueApLog *int `pulumi:"rogueApLog"`
	// Time between running station capability reports (1 - 255 sec, default = 30).
	StaCapabilityInterval *int `pulumi:"staCapabilityInterval"`
	// Time between running client presence flushes to remove clients that are listed but no longer present (0 - 86400 sec, default = 1800).
	StaLocateTimer *int `pulumi:"staLocateTimer"`
	// Time between running client (station) reports (1 - 255 sec, default = 1).
	StaStatsInterval *int `pulumi:"staStatsInterval"`
	// Time between running Virtual Access Point (VAP) reports (1 - 255 sec, default = 15).
	VapStatsInterval *int `pulumi:"vapStatsInterval"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type TimersState struct {
	// Time in minutes to wait before AP reboots when there is no controller detected (5 - 65535, default = 0, 0 for no reboot).
	ApRebootWaitInterval1 pulumi.IntPtrInput
	// Time in minutes to wait before AP reboots when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session (5 - 65535, default = 0, 0 for no reboot).
	ApRebootWaitInterval2 pulumi.IntPtrInput
	// Time to reboot the AP when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session, format hh:mm.
	ApRebootWaitTime pulumi.StringPtrInput
	// Time after which a client is considered failed in RADIUS authentication and times out (5 - 30 sec, default = 5).
	AuthTimeout pulumi.IntPtrInput
	// Time between running Bluetooth Low Energy (BLE) reports (10 - 3600 sec, default = 30).
	BleScanReportIntv pulumi.IntPtrInput
	// Time after which a client is considered idle and disconnected from the home controller (2 - 3600 sec, default = 20, 0 for no timeout).
	ClientIdleRehomeTimeout pulumi.IntPtrInput
	// Time after which a client is considered idle and times out (20 - 3600 sec, default = 300, 0 for no timeout).
	ClientIdleTimeout pulumi.IntPtrInput
	// Weekday on which to run DARRP optimization. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	DarrpDay pulumi.StringPtrInput
	// Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 1800).
	DarrpOptimize pulumi.IntPtrInput
	// Time at which DARRP optimizations run (you can add up to 8 times). The structure of `darrpTime` block is documented below.
	DarrpTimes TimersDarrpTimeArrayInput
	// Time between discovery requests (2 - 180 sec, default = 5).
	DiscoveryInterval pulumi.IntPtrInput
	// Dynamic radio mode assignment (DRMA) schedule interval in minutes (10 - 1440, default = 60).
	DrmaInterval pulumi.IntPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Time between echo requests sent by the managed WTP, AP, or FortiAP (1 - 255 sec, default = 30).
	EchoInterval pulumi.IntPtrInput
	// Time between recording logs about fake APs if periodic fake AP logging is configured (0 - 1440 min, default = 1).
	FakeApLog pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Time period to keep IPsec VPN interfaces up after WTP sessions are disconnected (30 - 3600 sec, default = 120).
	IpsecIntfCleanup pulumi.IntPtrInput
	// Maximal time in seconds between control requests sent by the managed WTP, AP, or FortiAP (0 - 255 sec, default = 0).
	NatSessionKeepAlive pulumi.IntPtrInput
	// Time between running radio reports (1 - 255 sec, default = 15).
	RadioStatsInterval pulumi.IntPtrInput
	// Time period in minutes to keep rogue AP after it is gone (default = 0).
	RogueApCleanup pulumi.IntPtrInput
	// Time between logging rogue AP messages if periodic rogue AP logging is configured (0 - 1440 min, default = 0).
	RogueApLog pulumi.IntPtrInput
	// Time between running station capability reports (1 - 255 sec, default = 30).
	StaCapabilityInterval pulumi.IntPtrInput
	// Time between running client presence flushes to remove clients that are listed but no longer present (0 - 86400 sec, default = 1800).
	StaLocateTimer pulumi.IntPtrInput
	// Time between running client (station) reports (1 - 255 sec, default = 1).
	StaStatsInterval pulumi.IntPtrInput
	// Time between running Virtual Access Point (VAP) reports (1 - 255 sec, default = 15).
	VapStatsInterval pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (TimersState) ElementType() reflect.Type {
	return reflect.TypeOf((*timersState)(nil)).Elem()
}

type timersArgs struct {
	// Time in minutes to wait before AP reboots when there is no controller detected (5 - 65535, default = 0, 0 for no reboot).
	ApRebootWaitInterval1 *int `pulumi:"apRebootWaitInterval1"`
	// Time in minutes to wait before AP reboots when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session (5 - 65535, default = 0, 0 for no reboot).
	ApRebootWaitInterval2 *int `pulumi:"apRebootWaitInterval2"`
	// Time to reboot the AP when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session, format hh:mm.
	ApRebootWaitTime *string `pulumi:"apRebootWaitTime"`
	// Time after which a client is considered failed in RADIUS authentication and times out (5 - 30 sec, default = 5).
	AuthTimeout *int `pulumi:"authTimeout"`
	// Time between running Bluetooth Low Energy (BLE) reports (10 - 3600 sec, default = 30).
	BleScanReportIntv *int `pulumi:"bleScanReportIntv"`
	// Time after which a client is considered idle and disconnected from the home controller (2 - 3600 sec, default = 20, 0 for no timeout).
	ClientIdleRehomeTimeout *int `pulumi:"clientIdleRehomeTimeout"`
	// Time after which a client is considered idle and times out (20 - 3600 sec, default = 300, 0 for no timeout).
	ClientIdleTimeout *int `pulumi:"clientIdleTimeout"`
	// Weekday on which to run DARRP optimization. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	DarrpDay *string `pulumi:"darrpDay"`
	// Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 1800).
	DarrpOptimize *int `pulumi:"darrpOptimize"`
	// Time at which DARRP optimizations run (you can add up to 8 times). The structure of `darrpTime` block is documented below.
	DarrpTimes []TimersDarrpTime `pulumi:"darrpTimes"`
	// Time between discovery requests (2 - 180 sec, default = 5).
	DiscoveryInterval *int `pulumi:"discoveryInterval"`
	// Dynamic radio mode assignment (DRMA) schedule interval in minutes (10 - 1440, default = 60).
	DrmaInterval *int `pulumi:"drmaInterval"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Time between echo requests sent by the managed WTP, AP, or FortiAP (1 - 255 sec, default = 30).
	EchoInterval *int `pulumi:"echoInterval"`
	// Time between recording logs about fake APs if periodic fake AP logging is configured (0 - 1440 min, default = 1).
	FakeApLog *int `pulumi:"fakeApLog"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Time period to keep IPsec VPN interfaces up after WTP sessions are disconnected (30 - 3600 sec, default = 120).
	IpsecIntfCleanup *int `pulumi:"ipsecIntfCleanup"`
	// Maximal time in seconds between control requests sent by the managed WTP, AP, or FortiAP (0 - 255 sec, default = 0).
	NatSessionKeepAlive *int `pulumi:"natSessionKeepAlive"`
	// Time between running radio reports (1 - 255 sec, default = 15).
	RadioStatsInterval *int `pulumi:"radioStatsInterval"`
	// Time period in minutes to keep rogue AP after it is gone (default = 0).
	RogueApCleanup *int `pulumi:"rogueApCleanup"`
	// Time between logging rogue AP messages if periodic rogue AP logging is configured (0 - 1440 min, default = 0).
	RogueApLog *int `pulumi:"rogueApLog"`
	// Time between running station capability reports (1 - 255 sec, default = 30).
	StaCapabilityInterval *int `pulumi:"staCapabilityInterval"`
	// Time between running client presence flushes to remove clients that are listed but no longer present (0 - 86400 sec, default = 1800).
	StaLocateTimer *int `pulumi:"staLocateTimer"`
	// Time between running client (station) reports (1 - 255 sec, default = 1).
	StaStatsInterval *int `pulumi:"staStatsInterval"`
	// Time between running Virtual Access Point (VAP) reports (1 - 255 sec, default = 15).
	VapStatsInterval *int `pulumi:"vapStatsInterval"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Timers resource.
type TimersArgs struct {
	// Time in minutes to wait before AP reboots when there is no controller detected (5 - 65535, default = 0, 0 for no reboot).
	ApRebootWaitInterval1 pulumi.IntPtrInput
	// Time in minutes to wait before AP reboots when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session (5 - 65535, default = 0, 0 for no reboot).
	ApRebootWaitInterval2 pulumi.IntPtrInput
	// Time to reboot the AP when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session, format hh:mm.
	ApRebootWaitTime pulumi.StringPtrInput
	// Time after which a client is considered failed in RADIUS authentication and times out (5 - 30 sec, default = 5).
	AuthTimeout pulumi.IntPtrInput
	// Time between running Bluetooth Low Energy (BLE) reports (10 - 3600 sec, default = 30).
	BleScanReportIntv pulumi.IntPtrInput
	// Time after which a client is considered idle and disconnected from the home controller (2 - 3600 sec, default = 20, 0 for no timeout).
	ClientIdleRehomeTimeout pulumi.IntPtrInput
	// Time after which a client is considered idle and times out (20 - 3600 sec, default = 300, 0 for no timeout).
	ClientIdleTimeout pulumi.IntPtrInput
	// Weekday on which to run DARRP optimization. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	DarrpDay pulumi.StringPtrInput
	// Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 1800).
	DarrpOptimize pulumi.IntPtrInput
	// Time at which DARRP optimizations run (you can add up to 8 times). The structure of `darrpTime` block is documented below.
	DarrpTimes TimersDarrpTimeArrayInput
	// Time between discovery requests (2 - 180 sec, default = 5).
	DiscoveryInterval pulumi.IntPtrInput
	// Dynamic radio mode assignment (DRMA) schedule interval in minutes (10 - 1440, default = 60).
	DrmaInterval pulumi.IntPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Time between echo requests sent by the managed WTP, AP, or FortiAP (1 - 255 sec, default = 30).
	EchoInterval pulumi.IntPtrInput
	// Time between recording logs about fake APs if periodic fake AP logging is configured (0 - 1440 min, default = 1).
	FakeApLog pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Time period to keep IPsec VPN interfaces up after WTP sessions are disconnected (30 - 3600 sec, default = 120).
	IpsecIntfCleanup pulumi.IntPtrInput
	// Maximal time in seconds between control requests sent by the managed WTP, AP, or FortiAP (0 - 255 sec, default = 0).
	NatSessionKeepAlive pulumi.IntPtrInput
	// Time between running radio reports (1 - 255 sec, default = 15).
	RadioStatsInterval pulumi.IntPtrInput
	// Time period in minutes to keep rogue AP after it is gone (default = 0).
	RogueApCleanup pulumi.IntPtrInput
	// Time between logging rogue AP messages if periodic rogue AP logging is configured (0 - 1440 min, default = 0).
	RogueApLog pulumi.IntPtrInput
	// Time between running station capability reports (1 - 255 sec, default = 30).
	StaCapabilityInterval pulumi.IntPtrInput
	// Time between running client presence flushes to remove clients that are listed but no longer present (0 - 86400 sec, default = 1800).
	StaLocateTimer pulumi.IntPtrInput
	// Time between running client (station) reports (1 - 255 sec, default = 1).
	StaStatsInterval pulumi.IntPtrInput
	// Time between running Virtual Access Point (VAP) reports (1 - 255 sec, default = 15).
	VapStatsInterval pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (TimersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*timersArgs)(nil)).Elem()
}

type TimersInput interface {
	pulumi.Input

	ToTimersOutput() TimersOutput
	ToTimersOutputWithContext(ctx context.Context) TimersOutput
}

func (*Timers) ElementType() reflect.Type {
	return reflect.TypeOf((**Timers)(nil)).Elem()
}

func (i *Timers) ToTimersOutput() TimersOutput {
	return i.ToTimersOutputWithContext(context.Background())
}

func (i *Timers) ToTimersOutputWithContext(ctx context.Context) TimersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimersOutput)
}

// TimersArrayInput is an input type that accepts TimersArray and TimersArrayOutput values.
// You can construct a concrete instance of `TimersArrayInput` via:
//
//	TimersArray{ TimersArgs{...} }
type TimersArrayInput interface {
	pulumi.Input

	ToTimersArrayOutput() TimersArrayOutput
	ToTimersArrayOutputWithContext(context.Context) TimersArrayOutput
}

type TimersArray []TimersInput

func (TimersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Timers)(nil)).Elem()
}

func (i TimersArray) ToTimersArrayOutput() TimersArrayOutput {
	return i.ToTimersArrayOutputWithContext(context.Background())
}

func (i TimersArray) ToTimersArrayOutputWithContext(ctx context.Context) TimersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimersArrayOutput)
}

// TimersMapInput is an input type that accepts TimersMap and TimersMapOutput values.
// You can construct a concrete instance of `TimersMapInput` via:
//
//	TimersMap{ "key": TimersArgs{...} }
type TimersMapInput interface {
	pulumi.Input

	ToTimersMapOutput() TimersMapOutput
	ToTimersMapOutputWithContext(context.Context) TimersMapOutput
}

type TimersMap map[string]TimersInput

func (TimersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Timers)(nil)).Elem()
}

func (i TimersMap) ToTimersMapOutput() TimersMapOutput {
	return i.ToTimersMapOutputWithContext(context.Background())
}

func (i TimersMap) ToTimersMapOutputWithContext(ctx context.Context) TimersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimersMapOutput)
}

type TimersOutput struct{ *pulumi.OutputState }

func (TimersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Timers)(nil)).Elem()
}

func (o TimersOutput) ToTimersOutput() TimersOutput {
	return o
}

func (o TimersOutput) ToTimersOutputWithContext(ctx context.Context) TimersOutput {
	return o
}

// Time in minutes to wait before AP reboots when there is no controller detected (5 - 65535, default = 0, 0 for no reboot).
func (o TimersOutput) ApRebootWaitInterval1() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.ApRebootWaitInterval1 }).(pulumi.IntOutput)
}

// Time in minutes to wait before AP reboots when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session (5 - 65535, default = 0, 0 for no reboot).
func (o TimersOutput) ApRebootWaitInterval2() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.ApRebootWaitInterval2 }).(pulumi.IntOutput)
}

// Time to reboot the AP when there is no controller detected and standalone SSIDs are pushed to the AP in the previous session, format hh:mm.
func (o TimersOutput) ApRebootWaitTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Timers) pulumi.StringOutput { return v.ApRebootWaitTime }).(pulumi.StringOutput)
}

// Time after which a client is considered failed in RADIUS authentication and times out (5 - 30 sec, default = 5).
func (o TimersOutput) AuthTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.AuthTimeout }).(pulumi.IntOutput)
}

// Time between running Bluetooth Low Energy (BLE) reports (10 - 3600 sec, default = 30).
func (o TimersOutput) BleScanReportIntv() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.BleScanReportIntv }).(pulumi.IntOutput)
}

// Time after which a client is considered idle and disconnected from the home controller (2 - 3600 sec, default = 20, 0 for no timeout).
func (o TimersOutput) ClientIdleRehomeTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.ClientIdleRehomeTimeout }).(pulumi.IntOutput)
}

// Time after which a client is considered idle and times out (20 - 3600 sec, default = 300, 0 for no timeout).
func (o TimersOutput) ClientIdleTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.ClientIdleTimeout }).(pulumi.IntOutput)
}

// Weekday on which to run DARRP optimization. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
func (o TimersOutput) DarrpDay() pulumi.StringOutput {
	return o.ApplyT(func(v *Timers) pulumi.StringOutput { return v.DarrpDay }).(pulumi.StringOutput)
}

// Time for running Dynamic Automatic Radio Resource Provisioning (DARRP) optimizations (0 - 86400 sec, default = 1800).
func (o TimersOutput) DarrpOptimize() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.DarrpOptimize }).(pulumi.IntOutput)
}

// Time at which DARRP optimizations run (you can add up to 8 times). The structure of `darrpTime` block is documented below.
func (o TimersOutput) DarrpTimes() TimersDarrpTimeArrayOutput {
	return o.ApplyT(func(v *Timers) TimersDarrpTimeArrayOutput { return v.DarrpTimes }).(TimersDarrpTimeArrayOutput)
}

// Time between discovery requests (2 - 180 sec, default = 5).
func (o TimersOutput) DiscoveryInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.DiscoveryInterval }).(pulumi.IntOutput)
}

// Dynamic radio mode assignment (DRMA) schedule interval in minutes (10 - 1440, default = 60).
func (o TimersOutput) DrmaInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.DrmaInterval }).(pulumi.IntOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o TimersOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Timers) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Time between echo requests sent by the managed WTP, AP, or FortiAP (1 - 255 sec, default = 30).
func (o TimersOutput) EchoInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.EchoInterval }).(pulumi.IntOutput)
}

// Time between recording logs about fake APs if periodic fake AP logging is configured (0 - 1440 min, default = 1).
func (o TimersOutput) FakeApLog() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.FakeApLog }).(pulumi.IntOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o TimersOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Timers) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Time period to keep IPsec VPN interfaces up after WTP sessions are disconnected (30 - 3600 sec, default = 120).
func (o TimersOutput) IpsecIntfCleanup() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.IpsecIntfCleanup }).(pulumi.IntOutput)
}

// Maximal time in seconds between control requests sent by the managed WTP, AP, or FortiAP (0 - 255 sec, default = 0).
func (o TimersOutput) NatSessionKeepAlive() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.NatSessionKeepAlive }).(pulumi.IntOutput)
}

// Time between running radio reports (1 - 255 sec, default = 15).
func (o TimersOutput) RadioStatsInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.RadioStatsInterval }).(pulumi.IntOutput)
}

// Time period in minutes to keep rogue AP after it is gone (default = 0).
func (o TimersOutput) RogueApCleanup() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.RogueApCleanup }).(pulumi.IntOutput)
}

// Time between logging rogue AP messages if periodic rogue AP logging is configured (0 - 1440 min, default = 0).
func (o TimersOutput) RogueApLog() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.RogueApLog }).(pulumi.IntOutput)
}

// Time between running station capability reports (1 - 255 sec, default = 30).
func (o TimersOutput) StaCapabilityInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.StaCapabilityInterval }).(pulumi.IntOutput)
}

// Time between running client presence flushes to remove clients that are listed but no longer present (0 - 86400 sec, default = 1800).
func (o TimersOutput) StaLocateTimer() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.StaLocateTimer }).(pulumi.IntOutput)
}

// Time between running client (station) reports (1 - 255 sec, default = 1).
func (o TimersOutput) StaStatsInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.StaStatsInterval }).(pulumi.IntOutput)
}

// Time between running Virtual Access Point (VAP) reports (1 - 255 sec, default = 15).
func (o TimersOutput) VapStatsInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Timers) pulumi.IntOutput { return v.VapStatsInterval }).(pulumi.IntOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o TimersOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Timers) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type TimersArrayOutput struct{ *pulumi.OutputState }

func (TimersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Timers)(nil)).Elem()
}

func (o TimersArrayOutput) ToTimersArrayOutput() TimersArrayOutput {
	return o
}

func (o TimersArrayOutput) ToTimersArrayOutputWithContext(ctx context.Context) TimersArrayOutput {
	return o
}

func (o TimersArrayOutput) Index(i pulumi.IntInput) TimersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Timers {
		return vs[0].([]*Timers)[vs[1].(int)]
	}).(TimersOutput)
}

type TimersMapOutput struct{ *pulumi.OutputState }

func (TimersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Timers)(nil)).Elem()
}

func (o TimersMapOutput) ToTimersMapOutput() TimersMapOutput {
	return o
}

func (o TimersMapOutput) ToTimersMapOutputWithContext(ctx context.Context) TimersMapOutput {
	return o
}

func (o TimersMapOutput) MapIndex(k pulumi.StringInput) TimersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Timers {
		return vs[0].(map[string]*Timers)[vs[1].(string)]
	}).(TimersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TimersInput)(nil)).Elem(), &Timers{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimersArrayInput)(nil)).Elem(), TimersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimersMapInput)(nil)).Elem(), TimersMap{})
	pulumi.RegisterOutputType(TimersOutput{})
	pulumi.RegisterOutputType(TimersArrayOutput{})
	pulumi.RegisterOutputType(TimersMapOutput{})
}
