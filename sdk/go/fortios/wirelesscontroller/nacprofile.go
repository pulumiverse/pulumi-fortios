// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wirelesscontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure WiFi network access control (NAC) profiles. Applies to FortiOS Version `>= 7.0.1`.
//
// ## Import
//
// WirelessController NacProfile can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/nacprofile:Nacprofile labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/nacprofile:Nacprofile labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Nacprofile struct {
	pulumi.CustomResourceState

	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// VLAN interface name.
	OnboardingVlan pulumi.StringOutput `pulumi:"onboardingVlan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewNacprofile registers a new resource with the given unique name, arguments, and options.
func NewNacprofile(ctx *pulumi.Context,
	name string, args *NacprofileArgs, opts ...pulumi.ResourceOption) (*Nacprofile, error) {
	if args == nil {
		args = &NacprofileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Nacprofile
	err := ctx.RegisterResource("fortios:wirelesscontroller/nacprofile:Nacprofile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNacprofile gets an existing Nacprofile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNacprofile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NacprofileState, opts ...pulumi.ResourceOption) (*Nacprofile, error) {
	var resource Nacprofile
	err := ctx.ReadResource("fortios:wirelesscontroller/nacprofile:Nacprofile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Nacprofile resources.
type nacprofileState struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Name.
	Name *string `pulumi:"name"`
	// VLAN interface name.
	OnboardingVlan *string `pulumi:"onboardingVlan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type NacprofileState struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// VLAN interface name.
	OnboardingVlan pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (NacprofileState) ElementType() reflect.Type {
	return reflect.TypeOf((*nacprofileState)(nil)).Elem()
}

type nacprofileArgs struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Name.
	Name *string `pulumi:"name"`
	// VLAN interface name.
	OnboardingVlan *string `pulumi:"onboardingVlan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Nacprofile resource.
type NacprofileArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// VLAN interface name.
	OnboardingVlan pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (NacprofileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nacprofileArgs)(nil)).Elem()
}

type NacprofileInput interface {
	pulumi.Input

	ToNacprofileOutput() NacprofileOutput
	ToNacprofileOutputWithContext(ctx context.Context) NacprofileOutput
}

func (*Nacprofile) ElementType() reflect.Type {
	return reflect.TypeOf((**Nacprofile)(nil)).Elem()
}

func (i *Nacprofile) ToNacprofileOutput() NacprofileOutput {
	return i.ToNacprofileOutputWithContext(context.Background())
}

func (i *Nacprofile) ToNacprofileOutputWithContext(ctx context.Context) NacprofileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacprofileOutput)
}

// NacprofileArrayInput is an input type that accepts NacprofileArray and NacprofileArrayOutput values.
// You can construct a concrete instance of `NacprofileArrayInput` via:
//
//	NacprofileArray{ NacprofileArgs{...} }
type NacprofileArrayInput interface {
	pulumi.Input

	ToNacprofileArrayOutput() NacprofileArrayOutput
	ToNacprofileArrayOutputWithContext(context.Context) NacprofileArrayOutput
}

type NacprofileArray []NacprofileInput

func (NacprofileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Nacprofile)(nil)).Elem()
}

func (i NacprofileArray) ToNacprofileArrayOutput() NacprofileArrayOutput {
	return i.ToNacprofileArrayOutputWithContext(context.Background())
}

func (i NacprofileArray) ToNacprofileArrayOutputWithContext(ctx context.Context) NacprofileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacprofileArrayOutput)
}

// NacprofileMapInput is an input type that accepts NacprofileMap and NacprofileMapOutput values.
// You can construct a concrete instance of `NacprofileMapInput` via:
//
//	NacprofileMap{ "key": NacprofileArgs{...} }
type NacprofileMapInput interface {
	pulumi.Input

	ToNacprofileMapOutput() NacprofileMapOutput
	ToNacprofileMapOutputWithContext(context.Context) NacprofileMapOutput
}

type NacprofileMap map[string]NacprofileInput

func (NacprofileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Nacprofile)(nil)).Elem()
}

func (i NacprofileMap) ToNacprofileMapOutput() NacprofileMapOutput {
	return i.ToNacprofileMapOutputWithContext(context.Background())
}

func (i NacprofileMap) ToNacprofileMapOutputWithContext(ctx context.Context) NacprofileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacprofileMapOutput)
}

type NacprofileOutput struct{ *pulumi.OutputState }

func (NacprofileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Nacprofile)(nil)).Elem()
}

func (o NacprofileOutput) ToNacprofileOutput() NacprofileOutput {
	return o
}

func (o NacprofileOutput) ToNacprofileOutputWithContext(ctx context.Context) NacprofileOutput {
	return o
}

// Comment.
func (o NacprofileOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacprofile) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Name.
func (o NacprofileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Nacprofile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// VLAN interface name.
func (o NacprofileOutput) OnboardingVlan() pulumi.StringOutput {
	return o.ApplyT(func(v *Nacprofile) pulumi.StringOutput { return v.OnboardingVlan }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o NacprofileOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Nacprofile) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type NacprofileArrayOutput struct{ *pulumi.OutputState }

func (NacprofileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Nacprofile)(nil)).Elem()
}

func (o NacprofileArrayOutput) ToNacprofileArrayOutput() NacprofileArrayOutput {
	return o
}

func (o NacprofileArrayOutput) ToNacprofileArrayOutputWithContext(ctx context.Context) NacprofileArrayOutput {
	return o
}

func (o NacprofileArrayOutput) Index(i pulumi.IntInput) NacprofileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Nacprofile {
		return vs[0].([]*Nacprofile)[vs[1].(int)]
	}).(NacprofileOutput)
}

type NacprofileMapOutput struct{ *pulumi.OutputState }

func (NacprofileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Nacprofile)(nil)).Elem()
}

func (o NacprofileMapOutput) ToNacprofileMapOutput() NacprofileMapOutput {
	return o
}

func (o NacprofileMapOutput) ToNacprofileMapOutputWithContext(ctx context.Context) NacprofileMapOutput {
	return o
}

func (o NacprofileMapOutput) MapIndex(k pulumi.StringInput) NacprofileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Nacprofile {
		return vs[0].(map[string]*Nacprofile)[vs[1].(string)]
	}).(NacprofileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NacprofileInput)(nil)).Elem(), &Nacprofile{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacprofileArrayInput)(nil)).Elem(), NacprofileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacprofileMapInput)(nil)).Elem(), NacprofileMap{})
	pulumi.RegisterOutputType(NacprofileOutput{})
	pulumi.RegisterOutputType(NacprofileArrayOutput{})
	pulumi.RegisterOutputType(NacprofileMapOutput{})
}
