// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wirelesscontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure WiFi bridge access control list. Applies to FortiOS Version `>= 6.4.0`.
//
// ## Import
//
// WirelessController AccessControlList can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/accesscontrollist:Accesscontrollist labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/accesscontrollist:Accesscontrollist labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Accesscontrollist struct {
	pulumi.CustomResourceState

	// Description.
	Comment pulumi.StringOutput `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// AP ACL layer3 ipv4 rule list. The structure of `layer3Ipv4Rules` block is documented below.
	Layer3Ipv4Rules AccesscontrollistLayer3Ipv4RuleArrayOutput `pulumi:"layer3Ipv4Rules"`
	// AP ACL layer3 ipv6 rule list. The structure of `layer3Ipv6Rules` block is documented below.
	Layer3Ipv6Rules AccesscontrollistLayer3Ipv6RuleArrayOutput `pulumi:"layer3Ipv6Rules"`
	// AP access control list name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	//
	// The `layer3Ipv4Rules` block supports:
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewAccesscontrollist registers a new resource with the given unique name, arguments, and options.
func NewAccesscontrollist(ctx *pulumi.Context,
	name string, args *AccesscontrollistArgs, opts ...pulumi.ResourceOption) (*Accesscontrollist, error) {
	if args == nil {
		args = &AccesscontrollistArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Accesscontrollist
	err := ctx.RegisterResource("fortios:wirelesscontroller/accesscontrollist:Accesscontrollist", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccesscontrollist gets an existing Accesscontrollist resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccesscontrollist(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccesscontrollistState, opts ...pulumi.ResourceOption) (*Accesscontrollist, error) {
	var resource Accesscontrollist
	err := ctx.ReadResource("fortios:wirelesscontroller/accesscontrollist:Accesscontrollist", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Accesscontrollist resources.
type accesscontrollistState struct {
	// Description.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// AP ACL layer3 ipv4 rule list. The structure of `layer3Ipv4Rules` block is documented below.
	Layer3Ipv4Rules []AccesscontrollistLayer3Ipv4Rule `pulumi:"layer3Ipv4Rules"`
	// AP ACL layer3 ipv6 rule list. The structure of `layer3Ipv6Rules` block is documented below.
	Layer3Ipv6Rules []AccesscontrollistLayer3Ipv6Rule `pulumi:"layer3Ipv6Rules"`
	// AP access control list name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	//
	// The `layer3Ipv4Rules` block supports:
	Vdomparam *string `pulumi:"vdomparam"`
}

type AccesscontrollistState struct {
	// Description.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// AP ACL layer3 ipv4 rule list. The structure of `layer3Ipv4Rules` block is documented below.
	Layer3Ipv4Rules AccesscontrollistLayer3Ipv4RuleArrayInput
	// AP ACL layer3 ipv6 rule list. The structure of `layer3Ipv6Rules` block is documented below.
	Layer3Ipv6Rules AccesscontrollistLayer3Ipv6RuleArrayInput
	// AP access control list name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	//
	// The `layer3Ipv4Rules` block supports:
	Vdomparam pulumi.StringPtrInput
}

func (AccesscontrollistState) ElementType() reflect.Type {
	return reflect.TypeOf((*accesscontrollistState)(nil)).Elem()
}

type accesscontrollistArgs struct {
	// Description.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// AP ACL layer3 ipv4 rule list. The structure of `layer3Ipv4Rules` block is documented below.
	Layer3Ipv4Rules []AccesscontrollistLayer3Ipv4Rule `pulumi:"layer3Ipv4Rules"`
	// AP ACL layer3 ipv6 rule list. The structure of `layer3Ipv6Rules` block is documented below.
	Layer3Ipv6Rules []AccesscontrollistLayer3Ipv6Rule `pulumi:"layer3Ipv6Rules"`
	// AP access control list name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	//
	// The `layer3Ipv4Rules` block supports:
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Accesscontrollist resource.
type AccesscontrollistArgs struct {
	// Description.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// AP ACL layer3 ipv4 rule list. The structure of `layer3Ipv4Rules` block is documented below.
	Layer3Ipv4Rules AccesscontrollistLayer3Ipv4RuleArrayInput
	// AP ACL layer3 ipv6 rule list. The structure of `layer3Ipv6Rules` block is documented below.
	Layer3Ipv6Rules AccesscontrollistLayer3Ipv6RuleArrayInput
	// AP access control list name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	//
	// The `layer3Ipv4Rules` block supports:
	Vdomparam pulumi.StringPtrInput
}

func (AccesscontrollistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accesscontrollistArgs)(nil)).Elem()
}

type AccesscontrollistInput interface {
	pulumi.Input

	ToAccesscontrollistOutput() AccesscontrollistOutput
	ToAccesscontrollistOutputWithContext(ctx context.Context) AccesscontrollistOutput
}

func (*Accesscontrollist) ElementType() reflect.Type {
	return reflect.TypeOf((**Accesscontrollist)(nil)).Elem()
}

func (i *Accesscontrollist) ToAccesscontrollistOutput() AccesscontrollistOutput {
	return i.ToAccesscontrollistOutputWithContext(context.Background())
}

func (i *Accesscontrollist) ToAccesscontrollistOutputWithContext(ctx context.Context) AccesscontrollistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccesscontrollistOutput)
}

// AccesscontrollistArrayInput is an input type that accepts AccesscontrollistArray and AccesscontrollistArrayOutput values.
// You can construct a concrete instance of `AccesscontrollistArrayInput` via:
//
//	AccesscontrollistArray{ AccesscontrollistArgs{...} }
type AccesscontrollistArrayInput interface {
	pulumi.Input

	ToAccesscontrollistArrayOutput() AccesscontrollistArrayOutput
	ToAccesscontrollistArrayOutputWithContext(context.Context) AccesscontrollistArrayOutput
}

type AccesscontrollistArray []AccesscontrollistInput

func (AccesscontrollistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Accesscontrollist)(nil)).Elem()
}

func (i AccesscontrollistArray) ToAccesscontrollistArrayOutput() AccesscontrollistArrayOutput {
	return i.ToAccesscontrollistArrayOutputWithContext(context.Background())
}

func (i AccesscontrollistArray) ToAccesscontrollistArrayOutputWithContext(ctx context.Context) AccesscontrollistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccesscontrollistArrayOutput)
}

// AccesscontrollistMapInput is an input type that accepts AccesscontrollistMap and AccesscontrollistMapOutput values.
// You can construct a concrete instance of `AccesscontrollistMapInput` via:
//
//	AccesscontrollistMap{ "key": AccesscontrollistArgs{...} }
type AccesscontrollistMapInput interface {
	pulumi.Input

	ToAccesscontrollistMapOutput() AccesscontrollistMapOutput
	ToAccesscontrollistMapOutputWithContext(context.Context) AccesscontrollistMapOutput
}

type AccesscontrollistMap map[string]AccesscontrollistInput

func (AccesscontrollistMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Accesscontrollist)(nil)).Elem()
}

func (i AccesscontrollistMap) ToAccesscontrollistMapOutput() AccesscontrollistMapOutput {
	return i.ToAccesscontrollistMapOutputWithContext(context.Background())
}

func (i AccesscontrollistMap) ToAccesscontrollistMapOutputWithContext(ctx context.Context) AccesscontrollistMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccesscontrollistMapOutput)
}

type AccesscontrollistOutput struct{ *pulumi.OutputState }

func (AccesscontrollistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Accesscontrollist)(nil)).Elem()
}

func (o AccesscontrollistOutput) ToAccesscontrollistOutput() AccesscontrollistOutput {
	return o
}

func (o AccesscontrollistOutput) ToAccesscontrollistOutputWithContext(ctx context.Context) AccesscontrollistOutput {
	return o
}

// Description.
func (o AccesscontrollistOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v *Accesscontrollist) pulumi.StringOutput { return v.Comment }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o AccesscontrollistOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Accesscontrollist) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o AccesscontrollistOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Accesscontrollist) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// AP ACL layer3 ipv4 rule list. The structure of `layer3Ipv4Rules` block is documented below.
func (o AccesscontrollistOutput) Layer3Ipv4Rules() AccesscontrollistLayer3Ipv4RuleArrayOutput {
	return o.ApplyT(func(v *Accesscontrollist) AccesscontrollistLayer3Ipv4RuleArrayOutput { return v.Layer3Ipv4Rules }).(AccesscontrollistLayer3Ipv4RuleArrayOutput)
}

// AP ACL layer3 ipv6 rule list. The structure of `layer3Ipv6Rules` block is documented below.
func (o AccesscontrollistOutput) Layer3Ipv6Rules() AccesscontrollistLayer3Ipv6RuleArrayOutput {
	return o.ApplyT(func(v *Accesscontrollist) AccesscontrollistLayer3Ipv6RuleArrayOutput { return v.Layer3Ipv6Rules }).(AccesscontrollistLayer3Ipv6RuleArrayOutput)
}

// AP access control list name.
func (o AccesscontrollistOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Accesscontrollist) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
//
// The `layer3Ipv4Rules` block supports:
func (o AccesscontrollistOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Accesscontrollist) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type AccesscontrollistArrayOutput struct{ *pulumi.OutputState }

func (AccesscontrollistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Accesscontrollist)(nil)).Elem()
}

func (o AccesscontrollistArrayOutput) ToAccesscontrollistArrayOutput() AccesscontrollistArrayOutput {
	return o
}

func (o AccesscontrollistArrayOutput) ToAccesscontrollistArrayOutputWithContext(ctx context.Context) AccesscontrollistArrayOutput {
	return o
}

func (o AccesscontrollistArrayOutput) Index(i pulumi.IntInput) AccesscontrollistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Accesscontrollist {
		return vs[0].([]*Accesscontrollist)[vs[1].(int)]
	}).(AccesscontrollistOutput)
}

type AccesscontrollistMapOutput struct{ *pulumi.OutputState }

func (AccesscontrollistMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Accesscontrollist)(nil)).Elem()
}

func (o AccesscontrollistMapOutput) ToAccesscontrollistMapOutput() AccesscontrollistMapOutput {
	return o
}

func (o AccesscontrollistMapOutput) ToAccesscontrollistMapOutputWithContext(ctx context.Context) AccesscontrollistMapOutput {
	return o
}

func (o AccesscontrollistMapOutput) MapIndex(k pulumi.StringInput) AccesscontrollistOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Accesscontrollist {
		return vs[0].(map[string]*Accesscontrollist)[vs[1].(string)]
	}).(AccesscontrollistOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccesscontrollistInput)(nil)).Elem(), &Accesscontrollist{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccesscontrollistArrayInput)(nil)).Elem(), AccesscontrollistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccesscontrollistMapInput)(nil)).Elem(), AccesscontrollistMap{})
	pulumi.RegisterOutputType(AccesscontrollistOutput{})
	pulumi.RegisterOutputType(AccesscontrollistArrayOutput{})
	pulumi.RegisterOutputType(AccesscontrollistMapOutput{})
}
