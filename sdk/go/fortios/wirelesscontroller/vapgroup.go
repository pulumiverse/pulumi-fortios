// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wirelesscontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure virtual Access Point (VAP) groups.
//
// ## Import
//
// WirelessController VapGroup can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/vapgroup:Vapgroup labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/vapgroup:Vapgroup labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Vapgroup struct {
	pulumi.CustomResourceState

	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Group Name
	Name pulumi.StringOutput `pulumi:"name"`
	// List of SSIDs to be included in the VAP group. The structure of `vaps` block is documented below.
	Vaps VapgroupVapArrayOutput `pulumi:"vaps"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVapgroup registers a new resource with the given unique name, arguments, and options.
func NewVapgroup(ctx *pulumi.Context,
	name string, args *VapgroupArgs, opts ...pulumi.ResourceOption) (*Vapgroup, error) {
	if args == nil {
		args = &VapgroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vapgroup
	err := ctx.RegisterResource("fortios:wirelesscontroller/vapgroup:Vapgroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVapgroup gets an existing Vapgroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVapgroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VapgroupState, opts ...pulumi.ResourceOption) (*Vapgroup, error) {
	var resource Vapgroup
	err := ctx.ReadResource("fortios:wirelesscontroller/vapgroup:Vapgroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vapgroup resources.
type vapgroupState struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Group Name
	Name *string `pulumi:"name"`
	// List of SSIDs to be included in the VAP group. The structure of `vaps` block is documented below.
	Vaps []VapgroupVap `pulumi:"vaps"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type VapgroupState struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Group Name
	Name pulumi.StringPtrInput
	// List of SSIDs to be included in the VAP group. The structure of `vaps` block is documented below.
	Vaps VapgroupVapArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VapgroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*vapgroupState)(nil)).Elem()
}

type vapgroupArgs struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Group Name
	Name *string `pulumi:"name"`
	// List of SSIDs to be included in the VAP group. The structure of `vaps` block is documented below.
	Vaps []VapgroupVap `pulumi:"vaps"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Vapgroup resource.
type VapgroupArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Group Name
	Name pulumi.StringPtrInput
	// List of SSIDs to be included in the VAP group. The structure of `vaps` block is documented below.
	Vaps VapgroupVapArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VapgroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vapgroupArgs)(nil)).Elem()
}

type VapgroupInput interface {
	pulumi.Input

	ToVapgroupOutput() VapgroupOutput
	ToVapgroupOutputWithContext(ctx context.Context) VapgroupOutput
}

func (*Vapgroup) ElementType() reflect.Type {
	return reflect.TypeOf((**Vapgroup)(nil)).Elem()
}

func (i *Vapgroup) ToVapgroupOutput() VapgroupOutput {
	return i.ToVapgroupOutputWithContext(context.Background())
}

func (i *Vapgroup) ToVapgroupOutputWithContext(ctx context.Context) VapgroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapgroupOutput)
}

// VapgroupArrayInput is an input type that accepts VapgroupArray and VapgroupArrayOutput values.
// You can construct a concrete instance of `VapgroupArrayInput` via:
//
//	VapgroupArray{ VapgroupArgs{...} }
type VapgroupArrayInput interface {
	pulumi.Input

	ToVapgroupArrayOutput() VapgroupArrayOutput
	ToVapgroupArrayOutputWithContext(context.Context) VapgroupArrayOutput
}

type VapgroupArray []VapgroupInput

func (VapgroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vapgroup)(nil)).Elem()
}

func (i VapgroupArray) ToVapgroupArrayOutput() VapgroupArrayOutput {
	return i.ToVapgroupArrayOutputWithContext(context.Background())
}

func (i VapgroupArray) ToVapgroupArrayOutputWithContext(ctx context.Context) VapgroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapgroupArrayOutput)
}

// VapgroupMapInput is an input type that accepts VapgroupMap and VapgroupMapOutput values.
// You can construct a concrete instance of `VapgroupMapInput` via:
//
//	VapgroupMap{ "key": VapgroupArgs{...} }
type VapgroupMapInput interface {
	pulumi.Input

	ToVapgroupMapOutput() VapgroupMapOutput
	ToVapgroupMapOutputWithContext(context.Context) VapgroupMapOutput
}

type VapgroupMap map[string]VapgroupInput

func (VapgroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vapgroup)(nil)).Elem()
}

func (i VapgroupMap) ToVapgroupMapOutput() VapgroupMapOutput {
	return i.ToVapgroupMapOutputWithContext(context.Background())
}

func (i VapgroupMap) ToVapgroupMapOutputWithContext(ctx context.Context) VapgroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapgroupMapOutput)
}

type VapgroupOutput struct{ *pulumi.OutputState }

func (VapgroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vapgroup)(nil)).Elem()
}

func (o VapgroupOutput) ToVapgroupOutput() VapgroupOutput {
	return o
}

func (o VapgroupOutput) ToVapgroupOutputWithContext(ctx context.Context) VapgroupOutput {
	return o
}

// Comment.
func (o VapgroupOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vapgroup) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o VapgroupOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vapgroup) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o VapgroupOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vapgroup) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Group Name
func (o VapgroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vapgroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of SSIDs to be included in the VAP group. The structure of `vaps` block is documented below.
func (o VapgroupOutput) Vaps() VapgroupVapArrayOutput {
	return o.ApplyT(func(v *Vapgroup) VapgroupVapArrayOutput { return v.Vaps }).(VapgroupVapArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o VapgroupOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vapgroup) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type VapgroupArrayOutput struct{ *pulumi.OutputState }

func (VapgroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vapgroup)(nil)).Elem()
}

func (o VapgroupArrayOutput) ToVapgroupArrayOutput() VapgroupArrayOutput {
	return o
}

func (o VapgroupArrayOutput) ToVapgroupArrayOutputWithContext(ctx context.Context) VapgroupArrayOutput {
	return o
}

func (o VapgroupArrayOutput) Index(i pulumi.IntInput) VapgroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vapgroup {
		return vs[0].([]*Vapgroup)[vs[1].(int)]
	}).(VapgroupOutput)
}

type VapgroupMapOutput struct{ *pulumi.OutputState }

func (VapgroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vapgroup)(nil)).Elem()
}

func (o VapgroupMapOutput) ToVapgroupMapOutput() VapgroupMapOutput {
	return o
}

func (o VapgroupMapOutput) ToVapgroupMapOutputWithContext(ctx context.Context) VapgroupMapOutput {
	return o
}

func (o VapgroupMapOutput) MapIndex(k pulumi.StringInput) VapgroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vapgroup {
		return vs[0].(map[string]*Vapgroup)[vs[1].(string)]
	}).(VapgroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VapgroupInput)(nil)).Elem(), &Vapgroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapgroupArrayInput)(nil)).Elem(), VapgroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapgroupMapInput)(nil)).Elem(), VapgroupMap{})
	pulumi.RegisterOutputType(VapgroupOutput{})
	pulumi.RegisterOutputType(VapgroupArrayOutput{})
	pulumi.RegisterOutputType(VapgroupMapOutput{})
}
