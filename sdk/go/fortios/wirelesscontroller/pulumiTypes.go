// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wirelesscontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

var _ = internal.GetEnvOrDefault

type AccesscontrollistLayer3Ipv4Rule struct {
	// Policy action (allow | deny). Valid values: `allow`, `deny`.
	Action *string `pulumi:"action"`
	// Description.
	Comment *string `pulumi:"comment"`
	// Destination IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
	Dstaddr *string `pulumi:"dstaddr"`
	// Destination port (0 - 65535, default = 0, meaning any).
	Dstport *int `pulumi:"dstport"`
	// Protocol type as defined by IANA (0 - 255, default = 255, meaning any).
	Protocol *int `pulumi:"protocol"`
	// Rule ID (1 - 65535).
	RuleId *int `pulumi:"ruleId"`
	// Source IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
	Srcaddr *string `pulumi:"srcaddr"`
	// Source port (0 - 65535, default = 0, meaning any).
	Srcport *int `pulumi:"srcport"`
}

// AccesscontrollistLayer3Ipv4RuleInput is an input type that accepts AccesscontrollistLayer3Ipv4RuleArgs and AccesscontrollistLayer3Ipv4RuleOutput values.
// You can construct a concrete instance of `AccesscontrollistLayer3Ipv4RuleInput` via:
//
//	AccesscontrollistLayer3Ipv4RuleArgs{...}
type AccesscontrollistLayer3Ipv4RuleInput interface {
	pulumi.Input

	ToAccesscontrollistLayer3Ipv4RuleOutput() AccesscontrollistLayer3Ipv4RuleOutput
	ToAccesscontrollistLayer3Ipv4RuleOutputWithContext(context.Context) AccesscontrollistLayer3Ipv4RuleOutput
}

type AccesscontrollistLayer3Ipv4RuleArgs struct {
	// Policy action (allow | deny). Valid values: `allow`, `deny`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Description.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Destination IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
	Dstaddr pulumi.StringPtrInput `pulumi:"dstaddr"`
	// Destination port (0 - 65535, default = 0, meaning any).
	Dstport pulumi.IntPtrInput `pulumi:"dstport"`
	// Protocol type as defined by IANA (0 - 255, default = 255, meaning any).
	Protocol pulumi.IntPtrInput `pulumi:"protocol"`
	// Rule ID (1 - 65535).
	RuleId pulumi.IntPtrInput `pulumi:"ruleId"`
	// Source IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
	Srcaddr pulumi.StringPtrInput `pulumi:"srcaddr"`
	// Source port (0 - 65535, default = 0, meaning any).
	Srcport pulumi.IntPtrInput `pulumi:"srcport"`
}

func (AccesscontrollistLayer3Ipv4RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccesscontrollistLayer3Ipv4Rule)(nil)).Elem()
}

func (i AccesscontrollistLayer3Ipv4RuleArgs) ToAccesscontrollistLayer3Ipv4RuleOutput() AccesscontrollistLayer3Ipv4RuleOutput {
	return i.ToAccesscontrollistLayer3Ipv4RuleOutputWithContext(context.Background())
}

func (i AccesscontrollistLayer3Ipv4RuleArgs) ToAccesscontrollistLayer3Ipv4RuleOutputWithContext(ctx context.Context) AccesscontrollistLayer3Ipv4RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccesscontrollistLayer3Ipv4RuleOutput)
}

// AccesscontrollistLayer3Ipv4RuleArrayInput is an input type that accepts AccesscontrollistLayer3Ipv4RuleArray and AccesscontrollistLayer3Ipv4RuleArrayOutput values.
// You can construct a concrete instance of `AccesscontrollistLayer3Ipv4RuleArrayInput` via:
//
//	AccesscontrollistLayer3Ipv4RuleArray{ AccesscontrollistLayer3Ipv4RuleArgs{...} }
type AccesscontrollistLayer3Ipv4RuleArrayInput interface {
	pulumi.Input

	ToAccesscontrollistLayer3Ipv4RuleArrayOutput() AccesscontrollistLayer3Ipv4RuleArrayOutput
	ToAccesscontrollistLayer3Ipv4RuleArrayOutputWithContext(context.Context) AccesscontrollistLayer3Ipv4RuleArrayOutput
}

type AccesscontrollistLayer3Ipv4RuleArray []AccesscontrollistLayer3Ipv4RuleInput

func (AccesscontrollistLayer3Ipv4RuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccesscontrollistLayer3Ipv4Rule)(nil)).Elem()
}

func (i AccesscontrollistLayer3Ipv4RuleArray) ToAccesscontrollistLayer3Ipv4RuleArrayOutput() AccesscontrollistLayer3Ipv4RuleArrayOutput {
	return i.ToAccesscontrollistLayer3Ipv4RuleArrayOutputWithContext(context.Background())
}

func (i AccesscontrollistLayer3Ipv4RuleArray) ToAccesscontrollistLayer3Ipv4RuleArrayOutputWithContext(ctx context.Context) AccesscontrollistLayer3Ipv4RuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccesscontrollistLayer3Ipv4RuleArrayOutput)
}

type AccesscontrollistLayer3Ipv4RuleOutput struct{ *pulumi.OutputState }

func (AccesscontrollistLayer3Ipv4RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccesscontrollistLayer3Ipv4Rule)(nil)).Elem()
}

func (o AccesscontrollistLayer3Ipv4RuleOutput) ToAccesscontrollistLayer3Ipv4RuleOutput() AccesscontrollistLayer3Ipv4RuleOutput {
	return o
}

func (o AccesscontrollistLayer3Ipv4RuleOutput) ToAccesscontrollistLayer3Ipv4RuleOutputWithContext(ctx context.Context) AccesscontrollistLayer3Ipv4RuleOutput {
	return o
}

// Policy action (allow | deny). Valid values: `allow`, `deny`.
func (o AccesscontrollistLayer3Ipv4RuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccesscontrollistLayer3Ipv4Rule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Description.
func (o AccesscontrollistLayer3Ipv4RuleOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccesscontrollistLayer3Ipv4Rule) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Destination IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
func (o AccesscontrollistLayer3Ipv4RuleOutput) Dstaddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccesscontrollistLayer3Ipv4Rule) *string { return v.Dstaddr }).(pulumi.StringPtrOutput)
}

// Destination port (0 - 65535, default = 0, meaning any).
func (o AccesscontrollistLayer3Ipv4RuleOutput) Dstport() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AccesscontrollistLayer3Ipv4Rule) *int { return v.Dstport }).(pulumi.IntPtrOutput)
}

// Protocol type as defined by IANA (0 - 255, default = 255, meaning any).
func (o AccesscontrollistLayer3Ipv4RuleOutput) Protocol() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AccesscontrollistLayer3Ipv4Rule) *int { return v.Protocol }).(pulumi.IntPtrOutput)
}

// Rule ID (1 - 65535).
func (o AccesscontrollistLayer3Ipv4RuleOutput) RuleId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AccesscontrollistLayer3Ipv4Rule) *int { return v.RuleId }).(pulumi.IntPtrOutput)
}

// Source IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
func (o AccesscontrollistLayer3Ipv4RuleOutput) Srcaddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccesscontrollistLayer3Ipv4Rule) *string { return v.Srcaddr }).(pulumi.StringPtrOutput)
}

// Source port (0 - 65535, default = 0, meaning any).
func (o AccesscontrollistLayer3Ipv4RuleOutput) Srcport() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AccesscontrollistLayer3Ipv4Rule) *int { return v.Srcport }).(pulumi.IntPtrOutput)
}

type AccesscontrollistLayer3Ipv4RuleArrayOutput struct{ *pulumi.OutputState }

func (AccesscontrollistLayer3Ipv4RuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccesscontrollistLayer3Ipv4Rule)(nil)).Elem()
}

func (o AccesscontrollistLayer3Ipv4RuleArrayOutput) ToAccesscontrollistLayer3Ipv4RuleArrayOutput() AccesscontrollistLayer3Ipv4RuleArrayOutput {
	return o
}

func (o AccesscontrollistLayer3Ipv4RuleArrayOutput) ToAccesscontrollistLayer3Ipv4RuleArrayOutputWithContext(ctx context.Context) AccesscontrollistLayer3Ipv4RuleArrayOutput {
	return o
}

func (o AccesscontrollistLayer3Ipv4RuleArrayOutput) Index(i pulumi.IntInput) AccesscontrollistLayer3Ipv4RuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccesscontrollistLayer3Ipv4Rule {
		return vs[0].([]AccesscontrollistLayer3Ipv4Rule)[vs[1].(int)]
	}).(AccesscontrollistLayer3Ipv4RuleOutput)
}

type AccesscontrollistLayer3Ipv6Rule struct {
	// Policy action (allow | deny). Valid values: `allow`, `deny`.
	Action *string `pulumi:"action"`
	// Description.
	Comment *string `pulumi:"comment"`
	// Destination IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
	Dstaddr *string `pulumi:"dstaddr"`
	// Destination port (0 - 65535, default = 0, meaning any).
	Dstport *int `pulumi:"dstport"`
	// Protocol type as defined by IANA (0 - 255, default = 255, meaning any).
	Protocol *int `pulumi:"protocol"`
	// Rule ID (1 - 65535).
	RuleId *int `pulumi:"ruleId"`
	// Source IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
	Srcaddr *string `pulumi:"srcaddr"`
	// Source port (0 - 65535, default = 0, meaning any).
	Srcport *int `pulumi:"srcport"`
}

// AccesscontrollistLayer3Ipv6RuleInput is an input type that accepts AccesscontrollistLayer3Ipv6RuleArgs and AccesscontrollistLayer3Ipv6RuleOutput values.
// You can construct a concrete instance of `AccesscontrollistLayer3Ipv6RuleInput` via:
//
//	AccesscontrollistLayer3Ipv6RuleArgs{...}
type AccesscontrollistLayer3Ipv6RuleInput interface {
	pulumi.Input

	ToAccesscontrollistLayer3Ipv6RuleOutput() AccesscontrollistLayer3Ipv6RuleOutput
	ToAccesscontrollistLayer3Ipv6RuleOutputWithContext(context.Context) AccesscontrollistLayer3Ipv6RuleOutput
}

type AccesscontrollistLayer3Ipv6RuleArgs struct {
	// Policy action (allow | deny). Valid values: `allow`, `deny`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Description.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Destination IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
	Dstaddr pulumi.StringPtrInput `pulumi:"dstaddr"`
	// Destination port (0 - 65535, default = 0, meaning any).
	Dstport pulumi.IntPtrInput `pulumi:"dstport"`
	// Protocol type as defined by IANA (0 - 255, default = 255, meaning any).
	Protocol pulumi.IntPtrInput `pulumi:"protocol"`
	// Rule ID (1 - 65535).
	RuleId pulumi.IntPtrInput `pulumi:"ruleId"`
	// Source IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
	Srcaddr pulumi.StringPtrInput `pulumi:"srcaddr"`
	// Source port (0 - 65535, default = 0, meaning any).
	Srcport pulumi.IntPtrInput `pulumi:"srcport"`
}

func (AccesscontrollistLayer3Ipv6RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccesscontrollistLayer3Ipv6Rule)(nil)).Elem()
}

func (i AccesscontrollistLayer3Ipv6RuleArgs) ToAccesscontrollistLayer3Ipv6RuleOutput() AccesscontrollistLayer3Ipv6RuleOutput {
	return i.ToAccesscontrollistLayer3Ipv6RuleOutputWithContext(context.Background())
}

func (i AccesscontrollistLayer3Ipv6RuleArgs) ToAccesscontrollistLayer3Ipv6RuleOutputWithContext(ctx context.Context) AccesscontrollistLayer3Ipv6RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccesscontrollistLayer3Ipv6RuleOutput)
}

// AccesscontrollistLayer3Ipv6RuleArrayInput is an input type that accepts AccesscontrollistLayer3Ipv6RuleArray and AccesscontrollistLayer3Ipv6RuleArrayOutput values.
// You can construct a concrete instance of `AccesscontrollistLayer3Ipv6RuleArrayInput` via:
//
//	AccesscontrollistLayer3Ipv6RuleArray{ AccesscontrollistLayer3Ipv6RuleArgs{...} }
type AccesscontrollistLayer3Ipv6RuleArrayInput interface {
	pulumi.Input

	ToAccesscontrollistLayer3Ipv6RuleArrayOutput() AccesscontrollistLayer3Ipv6RuleArrayOutput
	ToAccesscontrollistLayer3Ipv6RuleArrayOutputWithContext(context.Context) AccesscontrollistLayer3Ipv6RuleArrayOutput
}

type AccesscontrollistLayer3Ipv6RuleArray []AccesscontrollistLayer3Ipv6RuleInput

func (AccesscontrollistLayer3Ipv6RuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccesscontrollistLayer3Ipv6Rule)(nil)).Elem()
}

func (i AccesscontrollistLayer3Ipv6RuleArray) ToAccesscontrollistLayer3Ipv6RuleArrayOutput() AccesscontrollistLayer3Ipv6RuleArrayOutput {
	return i.ToAccesscontrollistLayer3Ipv6RuleArrayOutputWithContext(context.Background())
}

func (i AccesscontrollistLayer3Ipv6RuleArray) ToAccesscontrollistLayer3Ipv6RuleArrayOutputWithContext(ctx context.Context) AccesscontrollistLayer3Ipv6RuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccesscontrollistLayer3Ipv6RuleArrayOutput)
}

type AccesscontrollistLayer3Ipv6RuleOutput struct{ *pulumi.OutputState }

func (AccesscontrollistLayer3Ipv6RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccesscontrollistLayer3Ipv6Rule)(nil)).Elem()
}

func (o AccesscontrollistLayer3Ipv6RuleOutput) ToAccesscontrollistLayer3Ipv6RuleOutput() AccesscontrollistLayer3Ipv6RuleOutput {
	return o
}

func (o AccesscontrollistLayer3Ipv6RuleOutput) ToAccesscontrollistLayer3Ipv6RuleOutputWithContext(ctx context.Context) AccesscontrollistLayer3Ipv6RuleOutput {
	return o
}

// Policy action (allow | deny). Valid values: `allow`, `deny`.
func (o AccesscontrollistLayer3Ipv6RuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccesscontrollistLayer3Ipv6Rule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Description.
func (o AccesscontrollistLayer3Ipv6RuleOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccesscontrollistLayer3Ipv6Rule) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Destination IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
func (o AccesscontrollistLayer3Ipv6RuleOutput) Dstaddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccesscontrollistLayer3Ipv6Rule) *string { return v.Dstaddr }).(pulumi.StringPtrOutput)
}

// Destination port (0 - 65535, default = 0, meaning any).
func (o AccesscontrollistLayer3Ipv6RuleOutput) Dstport() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AccesscontrollistLayer3Ipv6Rule) *int { return v.Dstport }).(pulumi.IntPtrOutput)
}

// Protocol type as defined by IANA (0 - 255, default = 255, meaning any).
func (o AccesscontrollistLayer3Ipv6RuleOutput) Protocol() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AccesscontrollistLayer3Ipv6Rule) *int { return v.Protocol }).(pulumi.IntPtrOutput)
}

// Rule ID (1 - 65535).
func (o AccesscontrollistLayer3Ipv6RuleOutput) RuleId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AccesscontrollistLayer3Ipv6Rule) *int { return v.RuleId }).(pulumi.IntPtrOutput)
}

// Source IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
func (o AccesscontrollistLayer3Ipv6RuleOutput) Srcaddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccesscontrollistLayer3Ipv6Rule) *string { return v.Srcaddr }).(pulumi.StringPtrOutput)
}

// Source port (0 - 65535, default = 0, meaning any).
func (o AccesscontrollistLayer3Ipv6RuleOutput) Srcport() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AccesscontrollistLayer3Ipv6Rule) *int { return v.Srcport }).(pulumi.IntPtrOutput)
}

type AccesscontrollistLayer3Ipv6RuleArrayOutput struct{ *pulumi.OutputState }

func (AccesscontrollistLayer3Ipv6RuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccesscontrollistLayer3Ipv6Rule)(nil)).Elem()
}

func (o AccesscontrollistLayer3Ipv6RuleArrayOutput) ToAccesscontrollistLayer3Ipv6RuleArrayOutput() AccesscontrollistLayer3Ipv6RuleArrayOutput {
	return o
}

func (o AccesscontrollistLayer3Ipv6RuleArrayOutput) ToAccesscontrollistLayer3Ipv6RuleArrayOutputWithContext(ctx context.Context) AccesscontrollistLayer3Ipv6RuleArrayOutput {
	return o
}

func (o AccesscontrollistLayer3Ipv6RuleArrayOutput) Index(i pulumi.IntInput) AccesscontrollistLayer3Ipv6RuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccesscontrollistLayer3Ipv6Rule {
		return vs[0].([]AccesscontrollistLayer3Ipv6Rule)[vs[1].(int)]
	}).(AccesscontrollistLayer3Ipv6RuleOutput)
}

type AddrgrpAddress struct {
	// Address ID.
	Id *string `pulumi:"id"`
}

// AddrgrpAddressInput is an input type that accepts AddrgrpAddressArgs and AddrgrpAddressOutput values.
// You can construct a concrete instance of `AddrgrpAddressInput` via:
//
//	AddrgrpAddressArgs{...}
type AddrgrpAddressInput interface {
	pulumi.Input

	ToAddrgrpAddressOutput() AddrgrpAddressOutput
	ToAddrgrpAddressOutputWithContext(context.Context) AddrgrpAddressOutput
}

type AddrgrpAddressArgs struct {
	// Address ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (AddrgrpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddrgrpAddress)(nil)).Elem()
}

func (i AddrgrpAddressArgs) ToAddrgrpAddressOutput() AddrgrpAddressOutput {
	return i.ToAddrgrpAddressOutputWithContext(context.Background())
}

func (i AddrgrpAddressArgs) ToAddrgrpAddressOutputWithContext(ctx context.Context) AddrgrpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddrgrpAddressOutput)
}

// AddrgrpAddressArrayInput is an input type that accepts AddrgrpAddressArray and AddrgrpAddressArrayOutput values.
// You can construct a concrete instance of `AddrgrpAddressArrayInput` via:
//
//	AddrgrpAddressArray{ AddrgrpAddressArgs{...} }
type AddrgrpAddressArrayInput interface {
	pulumi.Input

	ToAddrgrpAddressArrayOutput() AddrgrpAddressArrayOutput
	ToAddrgrpAddressArrayOutputWithContext(context.Context) AddrgrpAddressArrayOutput
}

type AddrgrpAddressArray []AddrgrpAddressInput

func (AddrgrpAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AddrgrpAddress)(nil)).Elem()
}

func (i AddrgrpAddressArray) ToAddrgrpAddressArrayOutput() AddrgrpAddressArrayOutput {
	return i.ToAddrgrpAddressArrayOutputWithContext(context.Background())
}

func (i AddrgrpAddressArray) ToAddrgrpAddressArrayOutputWithContext(ctx context.Context) AddrgrpAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddrgrpAddressArrayOutput)
}

type AddrgrpAddressOutput struct{ *pulumi.OutputState }

func (AddrgrpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddrgrpAddress)(nil)).Elem()
}

func (o AddrgrpAddressOutput) ToAddrgrpAddressOutput() AddrgrpAddressOutput {
	return o
}

func (o AddrgrpAddressOutput) ToAddrgrpAddressOutputWithContext(ctx context.Context) AddrgrpAddressOutput {
	return o
}

// Address ID.
func (o AddrgrpAddressOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddrgrpAddress) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type AddrgrpAddressArrayOutput struct{ *pulumi.OutputState }

func (AddrgrpAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AddrgrpAddress)(nil)).Elem()
}

func (o AddrgrpAddressArrayOutput) ToAddrgrpAddressArrayOutput() AddrgrpAddressArrayOutput {
	return o
}

func (o AddrgrpAddressArrayOutput) ToAddrgrpAddressArrayOutputWithContext(ctx context.Context) AddrgrpAddressArrayOutput {
	return o
}

func (o AddrgrpAddressArrayOutput) Index(i pulumi.IntInput) AddrgrpAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AddrgrpAddress {
		return vs[0].([]AddrgrpAddress)[vs[1].(int)]
	}).(AddrgrpAddressOutput)
}

type ApcfgprofileCommandList struct {
	// Command ID.
	Id *int `pulumi:"id"`
	// AP local configuration command name.
	Name *string `pulumi:"name"`
	// AP local configuration command password value.
	PasswdValue *string `pulumi:"passwdValue"`
	// The command type (default = non-password). Valid values: `non-password`, `password`.
	Type *string `pulumi:"type"`
	// AP local configuration command value.
	Value *string `pulumi:"value"`
}

// ApcfgprofileCommandListInput is an input type that accepts ApcfgprofileCommandListArgs and ApcfgprofileCommandListOutput values.
// You can construct a concrete instance of `ApcfgprofileCommandListInput` via:
//
//	ApcfgprofileCommandListArgs{...}
type ApcfgprofileCommandListInput interface {
	pulumi.Input

	ToApcfgprofileCommandListOutput() ApcfgprofileCommandListOutput
	ToApcfgprofileCommandListOutputWithContext(context.Context) ApcfgprofileCommandListOutput
}

type ApcfgprofileCommandListArgs struct {
	// Command ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// AP local configuration command name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// AP local configuration command password value.
	PasswdValue pulumi.StringPtrInput `pulumi:"passwdValue"`
	// The command type (default = non-password). Valid values: `non-password`, `password`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// AP local configuration command value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ApcfgprofileCommandListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApcfgprofileCommandList)(nil)).Elem()
}

func (i ApcfgprofileCommandListArgs) ToApcfgprofileCommandListOutput() ApcfgprofileCommandListOutput {
	return i.ToApcfgprofileCommandListOutputWithContext(context.Background())
}

func (i ApcfgprofileCommandListArgs) ToApcfgprofileCommandListOutputWithContext(ctx context.Context) ApcfgprofileCommandListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApcfgprofileCommandListOutput)
}

// ApcfgprofileCommandListArrayInput is an input type that accepts ApcfgprofileCommandListArray and ApcfgprofileCommandListArrayOutput values.
// You can construct a concrete instance of `ApcfgprofileCommandListArrayInput` via:
//
//	ApcfgprofileCommandListArray{ ApcfgprofileCommandListArgs{...} }
type ApcfgprofileCommandListArrayInput interface {
	pulumi.Input

	ToApcfgprofileCommandListArrayOutput() ApcfgprofileCommandListArrayOutput
	ToApcfgprofileCommandListArrayOutputWithContext(context.Context) ApcfgprofileCommandListArrayOutput
}

type ApcfgprofileCommandListArray []ApcfgprofileCommandListInput

func (ApcfgprofileCommandListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApcfgprofileCommandList)(nil)).Elem()
}

func (i ApcfgprofileCommandListArray) ToApcfgprofileCommandListArrayOutput() ApcfgprofileCommandListArrayOutput {
	return i.ToApcfgprofileCommandListArrayOutputWithContext(context.Background())
}

func (i ApcfgprofileCommandListArray) ToApcfgprofileCommandListArrayOutputWithContext(ctx context.Context) ApcfgprofileCommandListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApcfgprofileCommandListArrayOutput)
}

type ApcfgprofileCommandListOutput struct{ *pulumi.OutputState }

func (ApcfgprofileCommandListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApcfgprofileCommandList)(nil)).Elem()
}

func (o ApcfgprofileCommandListOutput) ToApcfgprofileCommandListOutput() ApcfgprofileCommandListOutput {
	return o
}

func (o ApcfgprofileCommandListOutput) ToApcfgprofileCommandListOutputWithContext(ctx context.Context) ApcfgprofileCommandListOutput {
	return o
}

// Command ID.
func (o ApcfgprofileCommandListOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApcfgprofileCommandList) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// AP local configuration command name.
func (o ApcfgprofileCommandListOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApcfgprofileCommandList) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// AP local configuration command password value.
func (o ApcfgprofileCommandListOutput) PasswdValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApcfgprofileCommandList) *string { return v.PasswdValue }).(pulumi.StringPtrOutput)
}

// The command type (default = non-password). Valid values: `non-password`, `password`.
func (o ApcfgprofileCommandListOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApcfgprofileCommandList) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// AP local configuration command value.
func (o ApcfgprofileCommandListOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApcfgprofileCommandList) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApcfgprofileCommandListArrayOutput struct{ *pulumi.OutputState }

func (ApcfgprofileCommandListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApcfgprofileCommandList)(nil)).Elem()
}

func (o ApcfgprofileCommandListArrayOutput) ToApcfgprofileCommandListArrayOutput() ApcfgprofileCommandListArrayOutput {
	return o
}

func (o ApcfgprofileCommandListArrayOutput) ToApcfgprofileCommandListArrayOutputWithContext(ctx context.Context) ApcfgprofileCommandListArrayOutput {
	return o
}

func (o ApcfgprofileCommandListArrayOutput) Index(i pulumi.IntInput) ApcfgprofileCommandListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApcfgprofileCommandList {
		return vs[0].([]ApcfgprofileCommandList)[vs[1].(int)]
	}).(ApcfgprofileCommandListOutput)
}

type ArrpprofileDarrpOptimizeSchedule struct {
	// Schedule name.
	Name *string `pulumi:"name"`
}

// ArrpprofileDarrpOptimizeScheduleInput is an input type that accepts ArrpprofileDarrpOptimizeScheduleArgs and ArrpprofileDarrpOptimizeScheduleOutput values.
// You can construct a concrete instance of `ArrpprofileDarrpOptimizeScheduleInput` via:
//
//	ArrpprofileDarrpOptimizeScheduleArgs{...}
type ArrpprofileDarrpOptimizeScheduleInput interface {
	pulumi.Input

	ToArrpprofileDarrpOptimizeScheduleOutput() ArrpprofileDarrpOptimizeScheduleOutput
	ToArrpprofileDarrpOptimizeScheduleOutputWithContext(context.Context) ArrpprofileDarrpOptimizeScheduleOutput
}

type ArrpprofileDarrpOptimizeScheduleArgs struct {
	// Schedule name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ArrpprofileDarrpOptimizeScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArrpprofileDarrpOptimizeSchedule)(nil)).Elem()
}

func (i ArrpprofileDarrpOptimizeScheduleArgs) ToArrpprofileDarrpOptimizeScheduleOutput() ArrpprofileDarrpOptimizeScheduleOutput {
	return i.ToArrpprofileDarrpOptimizeScheduleOutputWithContext(context.Background())
}

func (i ArrpprofileDarrpOptimizeScheduleArgs) ToArrpprofileDarrpOptimizeScheduleOutputWithContext(ctx context.Context) ArrpprofileDarrpOptimizeScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArrpprofileDarrpOptimizeScheduleOutput)
}

// ArrpprofileDarrpOptimizeScheduleArrayInput is an input type that accepts ArrpprofileDarrpOptimizeScheduleArray and ArrpprofileDarrpOptimizeScheduleArrayOutput values.
// You can construct a concrete instance of `ArrpprofileDarrpOptimizeScheduleArrayInput` via:
//
//	ArrpprofileDarrpOptimizeScheduleArray{ ArrpprofileDarrpOptimizeScheduleArgs{...} }
type ArrpprofileDarrpOptimizeScheduleArrayInput interface {
	pulumi.Input

	ToArrpprofileDarrpOptimizeScheduleArrayOutput() ArrpprofileDarrpOptimizeScheduleArrayOutput
	ToArrpprofileDarrpOptimizeScheduleArrayOutputWithContext(context.Context) ArrpprofileDarrpOptimizeScheduleArrayOutput
}

type ArrpprofileDarrpOptimizeScheduleArray []ArrpprofileDarrpOptimizeScheduleInput

func (ArrpprofileDarrpOptimizeScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArrpprofileDarrpOptimizeSchedule)(nil)).Elem()
}

func (i ArrpprofileDarrpOptimizeScheduleArray) ToArrpprofileDarrpOptimizeScheduleArrayOutput() ArrpprofileDarrpOptimizeScheduleArrayOutput {
	return i.ToArrpprofileDarrpOptimizeScheduleArrayOutputWithContext(context.Background())
}

func (i ArrpprofileDarrpOptimizeScheduleArray) ToArrpprofileDarrpOptimizeScheduleArrayOutputWithContext(ctx context.Context) ArrpprofileDarrpOptimizeScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArrpprofileDarrpOptimizeScheduleArrayOutput)
}

type ArrpprofileDarrpOptimizeScheduleOutput struct{ *pulumi.OutputState }

func (ArrpprofileDarrpOptimizeScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArrpprofileDarrpOptimizeSchedule)(nil)).Elem()
}

func (o ArrpprofileDarrpOptimizeScheduleOutput) ToArrpprofileDarrpOptimizeScheduleOutput() ArrpprofileDarrpOptimizeScheduleOutput {
	return o
}

func (o ArrpprofileDarrpOptimizeScheduleOutput) ToArrpprofileDarrpOptimizeScheduleOutputWithContext(ctx context.Context) ArrpprofileDarrpOptimizeScheduleOutput {
	return o
}

// Schedule name.
func (o ArrpprofileDarrpOptimizeScheduleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArrpprofileDarrpOptimizeSchedule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ArrpprofileDarrpOptimizeScheduleArrayOutput struct{ *pulumi.OutputState }

func (ArrpprofileDarrpOptimizeScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArrpprofileDarrpOptimizeSchedule)(nil)).Elem()
}

func (o ArrpprofileDarrpOptimizeScheduleArrayOutput) ToArrpprofileDarrpOptimizeScheduleArrayOutput() ArrpprofileDarrpOptimizeScheduleArrayOutput {
	return o
}

func (o ArrpprofileDarrpOptimizeScheduleArrayOutput) ToArrpprofileDarrpOptimizeScheduleArrayOutputWithContext(ctx context.Context) ArrpprofileDarrpOptimizeScheduleArrayOutput {
	return o
}

func (o ArrpprofileDarrpOptimizeScheduleArrayOutput) Index(i pulumi.IntInput) ArrpprofileDarrpOptimizeScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArrpprofileDarrpOptimizeSchedule {
		return vs[0].([]ArrpprofileDarrpOptimizeSchedule)[vs[1].(int)]
	}).(ArrpprofileDarrpOptimizeScheduleOutput)
}

type BonjourprofilePolicyList struct {
	// Description.
	Description *string `pulumi:"description"`
	// VLAN ID from which the Bonjour service is advertised (0 - 4094, default = 0).
	FromVlan *string `pulumi:"fromVlan"`
	// Policy ID.
	PolicyId *int `pulumi:"policyId"`
	// Bonjour services for the VLAN connecting to the Bonjour network.
	Services *string `pulumi:"services"`
	// VLAN ID to which the Bonjour service is made available (0 - 4094, default = all).
	ToVlan *string `pulumi:"toVlan"`
}

// BonjourprofilePolicyListInput is an input type that accepts BonjourprofilePolicyListArgs and BonjourprofilePolicyListOutput values.
// You can construct a concrete instance of `BonjourprofilePolicyListInput` via:
//
//	BonjourprofilePolicyListArgs{...}
type BonjourprofilePolicyListInput interface {
	pulumi.Input

	ToBonjourprofilePolicyListOutput() BonjourprofilePolicyListOutput
	ToBonjourprofilePolicyListOutputWithContext(context.Context) BonjourprofilePolicyListOutput
}

type BonjourprofilePolicyListArgs struct {
	// Description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// VLAN ID from which the Bonjour service is advertised (0 - 4094, default = 0).
	FromVlan pulumi.StringPtrInput `pulumi:"fromVlan"`
	// Policy ID.
	PolicyId pulumi.IntPtrInput `pulumi:"policyId"`
	// Bonjour services for the VLAN connecting to the Bonjour network.
	Services pulumi.StringPtrInput `pulumi:"services"`
	// VLAN ID to which the Bonjour service is made available (0 - 4094, default = all).
	ToVlan pulumi.StringPtrInput `pulumi:"toVlan"`
}

func (BonjourprofilePolicyListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BonjourprofilePolicyList)(nil)).Elem()
}

func (i BonjourprofilePolicyListArgs) ToBonjourprofilePolicyListOutput() BonjourprofilePolicyListOutput {
	return i.ToBonjourprofilePolicyListOutputWithContext(context.Background())
}

func (i BonjourprofilePolicyListArgs) ToBonjourprofilePolicyListOutputWithContext(ctx context.Context) BonjourprofilePolicyListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BonjourprofilePolicyListOutput)
}

// BonjourprofilePolicyListArrayInput is an input type that accepts BonjourprofilePolicyListArray and BonjourprofilePolicyListArrayOutput values.
// You can construct a concrete instance of `BonjourprofilePolicyListArrayInput` via:
//
//	BonjourprofilePolicyListArray{ BonjourprofilePolicyListArgs{...} }
type BonjourprofilePolicyListArrayInput interface {
	pulumi.Input

	ToBonjourprofilePolicyListArrayOutput() BonjourprofilePolicyListArrayOutput
	ToBonjourprofilePolicyListArrayOutputWithContext(context.Context) BonjourprofilePolicyListArrayOutput
}

type BonjourprofilePolicyListArray []BonjourprofilePolicyListInput

func (BonjourprofilePolicyListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BonjourprofilePolicyList)(nil)).Elem()
}

func (i BonjourprofilePolicyListArray) ToBonjourprofilePolicyListArrayOutput() BonjourprofilePolicyListArrayOutput {
	return i.ToBonjourprofilePolicyListArrayOutputWithContext(context.Background())
}

func (i BonjourprofilePolicyListArray) ToBonjourprofilePolicyListArrayOutputWithContext(ctx context.Context) BonjourprofilePolicyListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BonjourprofilePolicyListArrayOutput)
}

type BonjourprofilePolicyListOutput struct{ *pulumi.OutputState }

func (BonjourprofilePolicyListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BonjourprofilePolicyList)(nil)).Elem()
}

func (o BonjourprofilePolicyListOutput) ToBonjourprofilePolicyListOutput() BonjourprofilePolicyListOutput {
	return o
}

func (o BonjourprofilePolicyListOutput) ToBonjourprofilePolicyListOutputWithContext(ctx context.Context) BonjourprofilePolicyListOutput {
	return o
}

// Description.
func (o BonjourprofilePolicyListOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BonjourprofilePolicyList) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// VLAN ID from which the Bonjour service is advertised (0 - 4094, default = 0).
func (o BonjourprofilePolicyListOutput) FromVlan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BonjourprofilePolicyList) *string { return v.FromVlan }).(pulumi.StringPtrOutput)
}

// Policy ID.
func (o BonjourprofilePolicyListOutput) PolicyId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BonjourprofilePolicyList) *int { return v.PolicyId }).(pulumi.IntPtrOutput)
}

// Bonjour services for the VLAN connecting to the Bonjour network.
func (o BonjourprofilePolicyListOutput) Services() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BonjourprofilePolicyList) *string { return v.Services }).(pulumi.StringPtrOutput)
}

// VLAN ID to which the Bonjour service is made available (0 - 4094, default = all).
func (o BonjourprofilePolicyListOutput) ToVlan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BonjourprofilePolicyList) *string { return v.ToVlan }).(pulumi.StringPtrOutput)
}

type BonjourprofilePolicyListArrayOutput struct{ *pulumi.OutputState }

func (BonjourprofilePolicyListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BonjourprofilePolicyList)(nil)).Elem()
}

func (o BonjourprofilePolicyListArrayOutput) ToBonjourprofilePolicyListArrayOutput() BonjourprofilePolicyListArrayOutput {
	return o
}

func (o BonjourprofilePolicyListArrayOutput) ToBonjourprofilePolicyListArrayOutputWithContext(ctx context.Context) BonjourprofilePolicyListArrayOutput {
	return o
}

func (o BonjourprofilePolicyListArrayOutput) Index(i pulumi.IntInput) BonjourprofilePolicyListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BonjourprofilePolicyList {
		return vs[0].([]BonjourprofilePolicyList)[vs[1].(int)]
	}).(BonjourprofilePolicyListOutput)
}

type IntercontrollerInterControllerPeer struct {
	// ID.
	Id *int `pulumi:"id"`
	// Peer wireless controller's IP address.
	PeerIp *string `pulumi:"peerIp"`
	// Port used by the wireless controller's for inter-controller communications (1024 - 49150, default = 5246).
	PeerPort *int `pulumi:"peerPort"`
	// Peer wireless controller's priority (primary or secondary, default = primary). Valid values: `primary`, `secondary`.
	PeerPriority *string `pulumi:"peerPriority"`
}

// IntercontrollerInterControllerPeerInput is an input type that accepts IntercontrollerInterControllerPeerArgs and IntercontrollerInterControllerPeerOutput values.
// You can construct a concrete instance of `IntercontrollerInterControllerPeerInput` via:
//
//	IntercontrollerInterControllerPeerArgs{...}
type IntercontrollerInterControllerPeerInput interface {
	pulumi.Input

	ToIntercontrollerInterControllerPeerOutput() IntercontrollerInterControllerPeerOutput
	ToIntercontrollerInterControllerPeerOutputWithContext(context.Context) IntercontrollerInterControllerPeerOutput
}

type IntercontrollerInterControllerPeerArgs struct {
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Peer wireless controller's IP address.
	PeerIp pulumi.StringPtrInput `pulumi:"peerIp"`
	// Port used by the wireless controller's for inter-controller communications (1024 - 49150, default = 5246).
	PeerPort pulumi.IntPtrInput `pulumi:"peerPort"`
	// Peer wireless controller's priority (primary or secondary, default = primary). Valid values: `primary`, `secondary`.
	PeerPriority pulumi.StringPtrInput `pulumi:"peerPriority"`
}

func (IntercontrollerInterControllerPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntercontrollerInterControllerPeer)(nil)).Elem()
}

func (i IntercontrollerInterControllerPeerArgs) ToIntercontrollerInterControllerPeerOutput() IntercontrollerInterControllerPeerOutput {
	return i.ToIntercontrollerInterControllerPeerOutputWithContext(context.Background())
}

func (i IntercontrollerInterControllerPeerArgs) ToIntercontrollerInterControllerPeerOutputWithContext(ctx context.Context) IntercontrollerInterControllerPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntercontrollerInterControllerPeerOutput)
}

// IntercontrollerInterControllerPeerArrayInput is an input type that accepts IntercontrollerInterControllerPeerArray and IntercontrollerInterControllerPeerArrayOutput values.
// You can construct a concrete instance of `IntercontrollerInterControllerPeerArrayInput` via:
//
//	IntercontrollerInterControllerPeerArray{ IntercontrollerInterControllerPeerArgs{...} }
type IntercontrollerInterControllerPeerArrayInput interface {
	pulumi.Input

	ToIntercontrollerInterControllerPeerArrayOutput() IntercontrollerInterControllerPeerArrayOutput
	ToIntercontrollerInterControllerPeerArrayOutputWithContext(context.Context) IntercontrollerInterControllerPeerArrayOutput
}

type IntercontrollerInterControllerPeerArray []IntercontrollerInterControllerPeerInput

func (IntercontrollerInterControllerPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntercontrollerInterControllerPeer)(nil)).Elem()
}

func (i IntercontrollerInterControllerPeerArray) ToIntercontrollerInterControllerPeerArrayOutput() IntercontrollerInterControllerPeerArrayOutput {
	return i.ToIntercontrollerInterControllerPeerArrayOutputWithContext(context.Background())
}

func (i IntercontrollerInterControllerPeerArray) ToIntercontrollerInterControllerPeerArrayOutputWithContext(ctx context.Context) IntercontrollerInterControllerPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntercontrollerInterControllerPeerArrayOutput)
}

type IntercontrollerInterControllerPeerOutput struct{ *pulumi.OutputState }

func (IntercontrollerInterControllerPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntercontrollerInterControllerPeer)(nil)).Elem()
}

func (o IntercontrollerInterControllerPeerOutput) ToIntercontrollerInterControllerPeerOutput() IntercontrollerInterControllerPeerOutput {
	return o
}

func (o IntercontrollerInterControllerPeerOutput) ToIntercontrollerInterControllerPeerOutputWithContext(ctx context.Context) IntercontrollerInterControllerPeerOutput {
	return o
}

// ID.
func (o IntercontrollerInterControllerPeerOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntercontrollerInterControllerPeer) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Peer wireless controller's IP address.
func (o IntercontrollerInterControllerPeerOutput) PeerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntercontrollerInterControllerPeer) *string { return v.PeerIp }).(pulumi.StringPtrOutput)
}

// Port used by the wireless controller's for inter-controller communications (1024 - 49150, default = 5246).
func (o IntercontrollerInterControllerPeerOutput) PeerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntercontrollerInterControllerPeer) *int { return v.PeerPort }).(pulumi.IntPtrOutput)
}

// Peer wireless controller's priority (primary or secondary, default = primary). Valid values: `primary`, `secondary`.
func (o IntercontrollerInterControllerPeerOutput) PeerPriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntercontrollerInterControllerPeer) *string { return v.PeerPriority }).(pulumi.StringPtrOutput)
}

type IntercontrollerInterControllerPeerArrayOutput struct{ *pulumi.OutputState }

func (IntercontrollerInterControllerPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntercontrollerInterControllerPeer)(nil)).Elem()
}

func (o IntercontrollerInterControllerPeerArrayOutput) ToIntercontrollerInterControllerPeerArrayOutput() IntercontrollerInterControllerPeerArrayOutput {
	return o
}

func (o IntercontrollerInterControllerPeerArrayOutput) ToIntercontrollerInterControllerPeerArrayOutputWithContext(ctx context.Context) IntercontrollerInterControllerPeerArrayOutput {
	return o
}

func (o IntercontrollerInterControllerPeerArrayOutput) Index(i pulumi.IntInput) IntercontrollerInterControllerPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntercontrollerInterControllerPeer {
		return vs[0].([]IntercontrollerInterControllerPeer)[vs[1].(int)]
	}).(IntercontrollerInterControllerPeerOutput)
}

type MpskprofileMpskGroup struct {
	// List of multiple PSK entries. The structure of `mpskKey` block is documented below.
	MpskKeys []MpskprofileMpskGroupMpskKey `pulumi:"mpskKeys"`
	// MPSK group name.
	Name *string `pulumi:"name"`
	// Optional VLAN ID.
	VlanId *int `pulumi:"vlanId"`
	// MPSK group VLAN options. Valid values: `no-vlan`, `fixed-vlan`.
	VlanType *string `pulumi:"vlanType"`
}

// MpskprofileMpskGroupInput is an input type that accepts MpskprofileMpskGroupArgs and MpskprofileMpskGroupOutput values.
// You can construct a concrete instance of `MpskprofileMpskGroupInput` via:
//
//	MpskprofileMpskGroupArgs{...}
type MpskprofileMpskGroupInput interface {
	pulumi.Input

	ToMpskprofileMpskGroupOutput() MpskprofileMpskGroupOutput
	ToMpskprofileMpskGroupOutputWithContext(context.Context) MpskprofileMpskGroupOutput
}

type MpskprofileMpskGroupArgs struct {
	// List of multiple PSK entries. The structure of `mpskKey` block is documented below.
	MpskKeys MpskprofileMpskGroupMpskKeyArrayInput `pulumi:"mpskKeys"`
	// MPSK group name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Optional VLAN ID.
	VlanId pulumi.IntPtrInput `pulumi:"vlanId"`
	// MPSK group VLAN options. Valid values: `no-vlan`, `fixed-vlan`.
	VlanType pulumi.StringPtrInput `pulumi:"vlanType"`
}

func (MpskprofileMpskGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MpskprofileMpskGroup)(nil)).Elem()
}

func (i MpskprofileMpskGroupArgs) ToMpskprofileMpskGroupOutput() MpskprofileMpskGroupOutput {
	return i.ToMpskprofileMpskGroupOutputWithContext(context.Background())
}

func (i MpskprofileMpskGroupArgs) ToMpskprofileMpskGroupOutputWithContext(ctx context.Context) MpskprofileMpskGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpskprofileMpskGroupOutput)
}

// MpskprofileMpskGroupArrayInput is an input type that accepts MpskprofileMpskGroupArray and MpskprofileMpskGroupArrayOutput values.
// You can construct a concrete instance of `MpskprofileMpskGroupArrayInput` via:
//
//	MpskprofileMpskGroupArray{ MpskprofileMpskGroupArgs{...} }
type MpskprofileMpskGroupArrayInput interface {
	pulumi.Input

	ToMpskprofileMpskGroupArrayOutput() MpskprofileMpskGroupArrayOutput
	ToMpskprofileMpskGroupArrayOutputWithContext(context.Context) MpskprofileMpskGroupArrayOutput
}

type MpskprofileMpskGroupArray []MpskprofileMpskGroupInput

func (MpskprofileMpskGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MpskprofileMpskGroup)(nil)).Elem()
}

func (i MpskprofileMpskGroupArray) ToMpskprofileMpskGroupArrayOutput() MpskprofileMpskGroupArrayOutput {
	return i.ToMpskprofileMpskGroupArrayOutputWithContext(context.Background())
}

func (i MpskprofileMpskGroupArray) ToMpskprofileMpskGroupArrayOutputWithContext(ctx context.Context) MpskprofileMpskGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpskprofileMpskGroupArrayOutput)
}

type MpskprofileMpskGroupOutput struct{ *pulumi.OutputState }

func (MpskprofileMpskGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MpskprofileMpskGroup)(nil)).Elem()
}

func (o MpskprofileMpskGroupOutput) ToMpskprofileMpskGroupOutput() MpskprofileMpskGroupOutput {
	return o
}

func (o MpskprofileMpskGroupOutput) ToMpskprofileMpskGroupOutputWithContext(ctx context.Context) MpskprofileMpskGroupOutput {
	return o
}

// List of multiple PSK entries. The structure of `mpskKey` block is documented below.
func (o MpskprofileMpskGroupOutput) MpskKeys() MpskprofileMpskGroupMpskKeyArrayOutput {
	return o.ApplyT(func(v MpskprofileMpskGroup) []MpskprofileMpskGroupMpskKey { return v.MpskKeys }).(MpskprofileMpskGroupMpskKeyArrayOutput)
}

// MPSK group name.
func (o MpskprofileMpskGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MpskprofileMpskGroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Optional VLAN ID.
func (o MpskprofileMpskGroupOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MpskprofileMpskGroup) *int { return v.VlanId }).(pulumi.IntPtrOutput)
}

// MPSK group VLAN options. Valid values: `no-vlan`, `fixed-vlan`.
func (o MpskprofileMpskGroupOutput) VlanType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MpskprofileMpskGroup) *string { return v.VlanType }).(pulumi.StringPtrOutput)
}

type MpskprofileMpskGroupArrayOutput struct{ *pulumi.OutputState }

func (MpskprofileMpskGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MpskprofileMpskGroup)(nil)).Elem()
}

func (o MpskprofileMpskGroupArrayOutput) ToMpskprofileMpskGroupArrayOutput() MpskprofileMpskGroupArrayOutput {
	return o
}

func (o MpskprofileMpskGroupArrayOutput) ToMpskprofileMpskGroupArrayOutputWithContext(ctx context.Context) MpskprofileMpskGroupArrayOutput {
	return o
}

func (o MpskprofileMpskGroupArrayOutput) Index(i pulumi.IntInput) MpskprofileMpskGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MpskprofileMpskGroup {
		return vs[0].([]MpskprofileMpskGroup)[vs[1].(int)]
	}).(MpskprofileMpskGroupOutput)
}

type MpskprofileMpskGroupMpskKey struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// MPSK client limit type options. Valid values: `default`, `unlimited`, `specified`.
	ConcurrentClientLimitType *string `pulumi:"concurrentClientLimitType"`
	// Number of clients that can connect using this pre-shared key (1 - 65535, default is 256).
	ConcurrentClients *int `pulumi:"concurrentClients"`
	// MAC address.
	Mac *string `pulumi:"mac"`
	// Firewall schedule for MPSK passphrase. The passphrase will be effective only when at least one schedule is valid. The structure of `mpskSchedules` block is documented below.
	MpskSchedules []MpskprofileMpskGroupMpskKeyMpskSchedule `pulumi:"mpskSchedules"`
	// Pre-shared key name.
	Name *string `pulumi:"name"`
	// WPA Pre-shared key.
	Passphrase *string `pulumi:"passphrase"`
}

// MpskprofileMpskGroupMpskKeyInput is an input type that accepts MpskprofileMpskGroupMpskKeyArgs and MpskprofileMpskGroupMpskKeyOutput values.
// You can construct a concrete instance of `MpskprofileMpskGroupMpskKeyInput` via:
//
//	MpskprofileMpskGroupMpskKeyArgs{...}
type MpskprofileMpskGroupMpskKeyInput interface {
	pulumi.Input

	ToMpskprofileMpskGroupMpskKeyOutput() MpskprofileMpskGroupMpskKeyOutput
	ToMpskprofileMpskGroupMpskKeyOutputWithContext(context.Context) MpskprofileMpskGroupMpskKeyOutput
}

type MpskprofileMpskGroupMpskKeyArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// MPSK client limit type options. Valid values: `default`, `unlimited`, `specified`.
	ConcurrentClientLimitType pulumi.StringPtrInput `pulumi:"concurrentClientLimitType"`
	// Number of clients that can connect using this pre-shared key (1 - 65535, default is 256).
	ConcurrentClients pulumi.IntPtrInput `pulumi:"concurrentClients"`
	// MAC address.
	Mac pulumi.StringPtrInput `pulumi:"mac"`
	// Firewall schedule for MPSK passphrase. The passphrase will be effective only when at least one schedule is valid. The structure of `mpskSchedules` block is documented below.
	MpskSchedules MpskprofileMpskGroupMpskKeyMpskScheduleArrayInput `pulumi:"mpskSchedules"`
	// Pre-shared key name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// WPA Pre-shared key.
	Passphrase pulumi.StringPtrInput `pulumi:"passphrase"`
}

func (MpskprofileMpskGroupMpskKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MpskprofileMpskGroupMpskKey)(nil)).Elem()
}

func (i MpskprofileMpskGroupMpskKeyArgs) ToMpskprofileMpskGroupMpskKeyOutput() MpskprofileMpskGroupMpskKeyOutput {
	return i.ToMpskprofileMpskGroupMpskKeyOutputWithContext(context.Background())
}

func (i MpskprofileMpskGroupMpskKeyArgs) ToMpskprofileMpskGroupMpskKeyOutputWithContext(ctx context.Context) MpskprofileMpskGroupMpskKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpskprofileMpskGroupMpskKeyOutput)
}

// MpskprofileMpskGroupMpskKeyArrayInput is an input type that accepts MpskprofileMpskGroupMpskKeyArray and MpskprofileMpskGroupMpskKeyArrayOutput values.
// You can construct a concrete instance of `MpskprofileMpskGroupMpskKeyArrayInput` via:
//
//	MpskprofileMpskGroupMpskKeyArray{ MpskprofileMpskGroupMpskKeyArgs{...} }
type MpskprofileMpskGroupMpskKeyArrayInput interface {
	pulumi.Input

	ToMpskprofileMpskGroupMpskKeyArrayOutput() MpskprofileMpskGroupMpskKeyArrayOutput
	ToMpskprofileMpskGroupMpskKeyArrayOutputWithContext(context.Context) MpskprofileMpskGroupMpskKeyArrayOutput
}

type MpskprofileMpskGroupMpskKeyArray []MpskprofileMpskGroupMpskKeyInput

func (MpskprofileMpskGroupMpskKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MpskprofileMpskGroupMpskKey)(nil)).Elem()
}

func (i MpskprofileMpskGroupMpskKeyArray) ToMpskprofileMpskGroupMpskKeyArrayOutput() MpskprofileMpskGroupMpskKeyArrayOutput {
	return i.ToMpskprofileMpskGroupMpskKeyArrayOutputWithContext(context.Background())
}

func (i MpskprofileMpskGroupMpskKeyArray) ToMpskprofileMpskGroupMpskKeyArrayOutputWithContext(ctx context.Context) MpskprofileMpskGroupMpskKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpskprofileMpskGroupMpskKeyArrayOutput)
}

type MpskprofileMpskGroupMpskKeyOutput struct{ *pulumi.OutputState }

func (MpskprofileMpskGroupMpskKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MpskprofileMpskGroupMpskKey)(nil)).Elem()
}

func (o MpskprofileMpskGroupMpskKeyOutput) ToMpskprofileMpskGroupMpskKeyOutput() MpskprofileMpskGroupMpskKeyOutput {
	return o
}

func (o MpskprofileMpskGroupMpskKeyOutput) ToMpskprofileMpskGroupMpskKeyOutputWithContext(ctx context.Context) MpskprofileMpskGroupMpskKeyOutput {
	return o
}

// Comment.
func (o MpskprofileMpskGroupMpskKeyOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MpskprofileMpskGroupMpskKey) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// MPSK client limit type options. Valid values: `default`, `unlimited`, `specified`.
func (o MpskprofileMpskGroupMpskKeyOutput) ConcurrentClientLimitType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MpskprofileMpskGroupMpskKey) *string { return v.ConcurrentClientLimitType }).(pulumi.StringPtrOutput)
}

// Number of clients that can connect using this pre-shared key (1 - 65535, default is 256).
func (o MpskprofileMpskGroupMpskKeyOutput) ConcurrentClients() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MpskprofileMpskGroupMpskKey) *int { return v.ConcurrentClients }).(pulumi.IntPtrOutput)
}

// MAC address.
func (o MpskprofileMpskGroupMpskKeyOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MpskprofileMpskGroupMpskKey) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

// Firewall schedule for MPSK passphrase. The passphrase will be effective only when at least one schedule is valid. The structure of `mpskSchedules` block is documented below.
func (o MpskprofileMpskGroupMpskKeyOutput) MpskSchedules() MpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput {
	return o.ApplyT(func(v MpskprofileMpskGroupMpskKey) []MpskprofileMpskGroupMpskKeyMpskSchedule { return v.MpskSchedules }).(MpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput)
}

// Pre-shared key name.
func (o MpskprofileMpskGroupMpskKeyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MpskprofileMpskGroupMpskKey) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// WPA Pre-shared key.
func (o MpskprofileMpskGroupMpskKeyOutput) Passphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MpskprofileMpskGroupMpskKey) *string { return v.Passphrase }).(pulumi.StringPtrOutput)
}

type MpskprofileMpskGroupMpskKeyArrayOutput struct{ *pulumi.OutputState }

func (MpskprofileMpskGroupMpskKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MpskprofileMpskGroupMpskKey)(nil)).Elem()
}

func (o MpskprofileMpskGroupMpskKeyArrayOutput) ToMpskprofileMpskGroupMpskKeyArrayOutput() MpskprofileMpskGroupMpskKeyArrayOutput {
	return o
}

func (o MpskprofileMpskGroupMpskKeyArrayOutput) ToMpskprofileMpskGroupMpskKeyArrayOutputWithContext(ctx context.Context) MpskprofileMpskGroupMpskKeyArrayOutput {
	return o
}

func (o MpskprofileMpskGroupMpskKeyArrayOutput) Index(i pulumi.IntInput) MpskprofileMpskGroupMpskKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MpskprofileMpskGroupMpskKey {
		return vs[0].([]MpskprofileMpskGroupMpskKey)[vs[1].(int)]
	}).(MpskprofileMpskGroupMpskKeyOutput)
}

type MpskprofileMpskGroupMpskKeyMpskSchedule struct {
	// Schedule name.
	Name *string `pulumi:"name"`
}

// MpskprofileMpskGroupMpskKeyMpskScheduleInput is an input type that accepts MpskprofileMpskGroupMpskKeyMpskScheduleArgs and MpskprofileMpskGroupMpskKeyMpskScheduleOutput values.
// You can construct a concrete instance of `MpskprofileMpskGroupMpskKeyMpskScheduleInput` via:
//
//	MpskprofileMpskGroupMpskKeyMpskScheduleArgs{...}
type MpskprofileMpskGroupMpskKeyMpskScheduleInput interface {
	pulumi.Input

	ToMpskprofileMpskGroupMpskKeyMpskScheduleOutput() MpskprofileMpskGroupMpskKeyMpskScheduleOutput
	ToMpskprofileMpskGroupMpskKeyMpskScheduleOutputWithContext(context.Context) MpskprofileMpskGroupMpskKeyMpskScheduleOutput
}

type MpskprofileMpskGroupMpskKeyMpskScheduleArgs struct {
	// Schedule name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (MpskprofileMpskGroupMpskKeyMpskScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MpskprofileMpskGroupMpskKeyMpskSchedule)(nil)).Elem()
}

func (i MpskprofileMpskGroupMpskKeyMpskScheduleArgs) ToMpskprofileMpskGroupMpskKeyMpskScheduleOutput() MpskprofileMpskGroupMpskKeyMpskScheduleOutput {
	return i.ToMpskprofileMpskGroupMpskKeyMpskScheduleOutputWithContext(context.Background())
}

func (i MpskprofileMpskGroupMpskKeyMpskScheduleArgs) ToMpskprofileMpskGroupMpskKeyMpskScheduleOutputWithContext(ctx context.Context) MpskprofileMpskGroupMpskKeyMpskScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpskprofileMpskGroupMpskKeyMpskScheduleOutput)
}

// MpskprofileMpskGroupMpskKeyMpskScheduleArrayInput is an input type that accepts MpskprofileMpskGroupMpskKeyMpskScheduleArray and MpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput values.
// You can construct a concrete instance of `MpskprofileMpskGroupMpskKeyMpskScheduleArrayInput` via:
//
//	MpskprofileMpskGroupMpskKeyMpskScheduleArray{ MpskprofileMpskGroupMpskKeyMpskScheduleArgs{...} }
type MpskprofileMpskGroupMpskKeyMpskScheduleArrayInput interface {
	pulumi.Input

	ToMpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput() MpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput
	ToMpskprofileMpskGroupMpskKeyMpskScheduleArrayOutputWithContext(context.Context) MpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput
}

type MpskprofileMpskGroupMpskKeyMpskScheduleArray []MpskprofileMpskGroupMpskKeyMpskScheduleInput

func (MpskprofileMpskGroupMpskKeyMpskScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MpskprofileMpskGroupMpskKeyMpskSchedule)(nil)).Elem()
}

func (i MpskprofileMpskGroupMpskKeyMpskScheduleArray) ToMpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput() MpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput {
	return i.ToMpskprofileMpskGroupMpskKeyMpskScheduleArrayOutputWithContext(context.Background())
}

func (i MpskprofileMpskGroupMpskKeyMpskScheduleArray) ToMpskprofileMpskGroupMpskKeyMpskScheduleArrayOutputWithContext(ctx context.Context) MpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput)
}

type MpskprofileMpskGroupMpskKeyMpskScheduleOutput struct{ *pulumi.OutputState }

func (MpskprofileMpskGroupMpskKeyMpskScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MpskprofileMpskGroupMpskKeyMpskSchedule)(nil)).Elem()
}

func (o MpskprofileMpskGroupMpskKeyMpskScheduleOutput) ToMpskprofileMpskGroupMpskKeyMpskScheduleOutput() MpskprofileMpskGroupMpskKeyMpskScheduleOutput {
	return o
}

func (o MpskprofileMpskGroupMpskKeyMpskScheduleOutput) ToMpskprofileMpskGroupMpskKeyMpskScheduleOutputWithContext(ctx context.Context) MpskprofileMpskGroupMpskKeyMpskScheduleOutput {
	return o
}

// Schedule name.
func (o MpskprofileMpskGroupMpskKeyMpskScheduleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MpskprofileMpskGroupMpskKeyMpskSchedule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput struct{ *pulumi.OutputState }

func (MpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MpskprofileMpskGroupMpskKeyMpskSchedule)(nil)).Elem()
}

func (o MpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput) ToMpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput() MpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput {
	return o
}

func (o MpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput) ToMpskprofileMpskGroupMpskKeyMpskScheduleArrayOutputWithContext(ctx context.Context) MpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput {
	return o
}

func (o MpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput) Index(i pulumi.IntInput) MpskprofileMpskGroupMpskKeyMpskScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MpskprofileMpskGroupMpskKeyMpskSchedule {
		return vs[0].([]MpskprofileMpskGroupMpskKeyMpskSchedule)[vs[1].(int)]
	}).(MpskprofileMpskGroupMpskKeyMpskScheduleOutput)
}

type QosprofileDscpWmmBe struct {
	// DSCP WMM mapping numbers (0 - 63).
	Id *int `pulumi:"id"`
}

// QosprofileDscpWmmBeInput is an input type that accepts QosprofileDscpWmmBeArgs and QosprofileDscpWmmBeOutput values.
// You can construct a concrete instance of `QosprofileDscpWmmBeInput` via:
//
//	QosprofileDscpWmmBeArgs{...}
type QosprofileDscpWmmBeInput interface {
	pulumi.Input

	ToQosprofileDscpWmmBeOutput() QosprofileDscpWmmBeOutput
	ToQosprofileDscpWmmBeOutputWithContext(context.Context) QosprofileDscpWmmBeOutput
}

type QosprofileDscpWmmBeArgs struct {
	// DSCP WMM mapping numbers (0 - 63).
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (QosprofileDscpWmmBeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QosprofileDscpWmmBe)(nil)).Elem()
}

func (i QosprofileDscpWmmBeArgs) ToQosprofileDscpWmmBeOutput() QosprofileDscpWmmBeOutput {
	return i.ToQosprofileDscpWmmBeOutputWithContext(context.Background())
}

func (i QosprofileDscpWmmBeArgs) ToQosprofileDscpWmmBeOutputWithContext(ctx context.Context) QosprofileDscpWmmBeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QosprofileDscpWmmBeOutput)
}

// QosprofileDscpWmmBeArrayInput is an input type that accepts QosprofileDscpWmmBeArray and QosprofileDscpWmmBeArrayOutput values.
// You can construct a concrete instance of `QosprofileDscpWmmBeArrayInput` via:
//
//	QosprofileDscpWmmBeArray{ QosprofileDscpWmmBeArgs{...} }
type QosprofileDscpWmmBeArrayInput interface {
	pulumi.Input

	ToQosprofileDscpWmmBeArrayOutput() QosprofileDscpWmmBeArrayOutput
	ToQosprofileDscpWmmBeArrayOutputWithContext(context.Context) QosprofileDscpWmmBeArrayOutput
}

type QosprofileDscpWmmBeArray []QosprofileDscpWmmBeInput

func (QosprofileDscpWmmBeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QosprofileDscpWmmBe)(nil)).Elem()
}

func (i QosprofileDscpWmmBeArray) ToQosprofileDscpWmmBeArrayOutput() QosprofileDscpWmmBeArrayOutput {
	return i.ToQosprofileDscpWmmBeArrayOutputWithContext(context.Background())
}

func (i QosprofileDscpWmmBeArray) ToQosprofileDscpWmmBeArrayOutputWithContext(ctx context.Context) QosprofileDscpWmmBeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QosprofileDscpWmmBeArrayOutput)
}

type QosprofileDscpWmmBeOutput struct{ *pulumi.OutputState }

func (QosprofileDscpWmmBeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QosprofileDscpWmmBe)(nil)).Elem()
}

func (o QosprofileDscpWmmBeOutput) ToQosprofileDscpWmmBeOutput() QosprofileDscpWmmBeOutput {
	return o
}

func (o QosprofileDscpWmmBeOutput) ToQosprofileDscpWmmBeOutputWithContext(ctx context.Context) QosprofileDscpWmmBeOutput {
	return o
}

// DSCP WMM mapping numbers (0 - 63).
func (o QosprofileDscpWmmBeOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QosprofileDscpWmmBe) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type QosprofileDscpWmmBeArrayOutput struct{ *pulumi.OutputState }

func (QosprofileDscpWmmBeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QosprofileDscpWmmBe)(nil)).Elem()
}

func (o QosprofileDscpWmmBeArrayOutput) ToQosprofileDscpWmmBeArrayOutput() QosprofileDscpWmmBeArrayOutput {
	return o
}

func (o QosprofileDscpWmmBeArrayOutput) ToQosprofileDscpWmmBeArrayOutputWithContext(ctx context.Context) QosprofileDscpWmmBeArrayOutput {
	return o
}

func (o QosprofileDscpWmmBeArrayOutput) Index(i pulumi.IntInput) QosprofileDscpWmmBeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QosprofileDscpWmmBe {
		return vs[0].([]QosprofileDscpWmmBe)[vs[1].(int)]
	}).(QosprofileDscpWmmBeOutput)
}

type QosprofileDscpWmmBk struct {
	// DSCP WMM mapping numbers (0 - 63).
	Id *int `pulumi:"id"`
}

// QosprofileDscpWmmBkInput is an input type that accepts QosprofileDscpWmmBkArgs and QosprofileDscpWmmBkOutput values.
// You can construct a concrete instance of `QosprofileDscpWmmBkInput` via:
//
//	QosprofileDscpWmmBkArgs{...}
type QosprofileDscpWmmBkInput interface {
	pulumi.Input

	ToQosprofileDscpWmmBkOutput() QosprofileDscpWmmBkOutput
	ToQosprofileDscpWmmBkOutputWithContext(context.Context) QosprofileDscpWmmBkOutput
}

type QosprofileDscpWmmBkArgs struct {
	// DSCP WMM mapping numbers (0 - 63).
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (QosprofileDscpWmmBkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QosprofileDscpWmmBk)(nil)).Elem()
}

func (i QosprofileDscpWmmBkArgs) ToQosprofileDscpWmmBkOutput() QosprofileDscpWmmBkOutput {
	return i.ToQosprofileDscpWmmBkOutputWithContext(context.Background())
}

func (i QosprofileDscpWmmBkArgs) ToQosprofileDscpWmmBkOutputWithContext(ctx context.Context) QosprofileDscpWmmBkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QosprofileDscpWmmBkOutput)
}

// QosprofileDscpWmmBkArrayInput is an input type that accepts QosprofileDscpWmmBkArray and QosprofileDscpWmmBkArrayOutput values.
// You can construct a concrete instance of `QosprofileDscpWmmBkArrayInput` via:
//
//	QosprofileDscpWmmBkArray{ QosprofileDscpWmmBkArgs{...} }
type QosprofileDscpWmmBkArrayInput interface {
	pulumi.Input

	ToQosprofileDscpWmmBkArrayOutput() QosprofileDscpWmmBkArrayOutput
	ToQosprofileDscpWmmBkArrayOutputWithContext(context.Context) QosprofileDscpWmmBkArrayOutput
}

type QosprofileDscpWmmBkArray []QosprofileDscpWmmBkInput

func (QosprofileDscpWmmBkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QosprofileDscpWmmBk)(nil)).Elem()
}

func (i QosprofileDscpWmmBkArray) ToQosprofileDscpWmmBkArrayOutput() QosprofileDscpWmmBkArrayOutput {
	return i.ToQosprofileDscpWmmBkArrayOutputWithContext(context.Background())
}

func (i QosprofileDscpWmmBkArray) ToQosprofileDscpWmmBkArrayOutputWithContext(ctx context.Context) QosprofileDscpWmmBkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QosprofileDscpWmmBkArrayOutput)
}

type QosprofileDscpWmmBkOutput struct{ *pulumi.OutputState }

func (QosprofileDscpWmmBkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QosprofileDscpWmmBk)(nil)).Elem()
}

func (o QosprofileDscpWmmBkOutput) ToQosprofileDscpWmmBkOutput() QosprofileDscpWmmBkOutput {
	return o
}

func (o QosprofileDscpWmmBkOutput) ToQosprofileDscpWmmBkOutputWithContext(ctx context.Context) QosprofileDscpWmmBkOutput {
	return o
}

// DSCP WMM mapping numbers (0 - 63).
func (o QosprofileDscpWmmBkOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QosprofileDscpWmmBk) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type QosprofileDscpWmmBkArrayOutput struct{ *pulumi.OutputState }

func (QosprofileDscpWmmBkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QosprofileDscpWmmBk)(nil)).Elem()
}

func (o QosprofileDscpWmmBkArrayOutput) ToQosprofileDscpWmmBkArrayOutput() QosprofileDscpWmmBkArrayOutput {
	return o
}

func (o QosprofileDscpWmmBkArrayOutput) ToQosprofileDscpWmmBkArrayOutputWithContext(ctx context.Context) QosprofileDscpWmmBkArrayOutput {
	return o
}

func (o QosprofileDscpWmmBkArrayOutput) Index(i pulumi.IntInput) QosprofileDscpWmmBkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QosprofileDscpWmmBk {
		return vs[0].([]QosprofileDscpWmmBk)[vs[1].(int)]
	}).(QosprofileDscpWmmBkOutput)
}

type QosprofileDscpWmmVi struct {
	// DSCP WMM mapping numbers (0 - 63).
	Id *int `pulumi:"id"`
}

// QosprofileDscpWmmViInput is an input type that accepts QosprofileDscpWmmViArgs and QosprofileDscpWmmViOutput values.
// You can construct a concrete instance of `QosprofileDscpWmmViInput` via:
//
//	QosprofileDscpWmmViArgs{...}
type QosprofileDscpWmmViInput interface {
	pulumi.Input

	ToQosprofileDscpWmmViOutput() QosprofileDscpWmmViOutput
	ToQosprofileDscpWmmViOutputWithContext(context.Context) QosprofileDscpWmmViOutput
}

type QosprofileDscpWmmViArgs struct {
	// DSCP WMM mapping numbers (0 - 63).
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (QosprofileDscpWmmViArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QosprofileDscpWmmVi)(nil)).Elem()
}

func (i QosprofileDscpWmmViArgs) ToQosprofileDscpWmmViOutput() QosprofileDscpWmmViOutput {
	return i.ToQosprofileDscpWmmViOutputWithContext(context.Background())
}

func (i QosprofileDscpWmmViArgs) ToQosprofileDscpWmmViOutputWithContext(ctx context.Context) QosprofileDscpWmmViOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QosprofileDscpWmmViOutput)
}

// QosprofileDscpWmmViArrayInput is an input type that accepts QosprofileDscpWmmViArray and QosprofileDscpWmmViArrayOutput values.
// You can construct a concrete instance of `QosprofileDscpWmmViArrayInput` via:
//
//	QosprofileDscpWmmViArray{ QosprofileDscpWmmViArgs{...} }
type QosprofileDscpWmmViArrayInput interface {
	pulumi.Input

	ToQosprofileDscpWmmViArrayOutput() QosprofileDscpWmmViArrayOutput
	ToQosprofileDscpWmmViArrayOutputWithContext(context.Context) QosprofileDscpWmmViArrayOutput
}

type QosprofileDscpWmmViArray []QosprofileDscpWmmViInput

func (QosprofileDscpWmmViArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QosprofileDscpWmmVi)(nil)).Elem()
}

func (i QosprofileDscpWmmViArray) ToQosprofileDscpWmmViArrayOutput() QosprofileDscpWmmViArrayOutput {
	return i.ToQosprofileDscpWmmViArrayOutputWithContext(context.Background())
}

func (i QosprofileDscpWmmViArray) ToQosprofileDscpWmmViArrayOutputWithContext(ctx context.Context) QosprofileDscpWmmViArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QosprofileDscpWmmViArrayOutput)
}

type QosprofileDscpWmmViOutput struct{ *pulumi.OutputState }

func (QosprofileDscpWmmViOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QosprofileDscpWmmVi)(nil)).Elem()
}

func (o QosprofileDscpWmmViOutput) ToQosprofileDscpWmmViOutput() QosprofileDscpWmmViOutput {
	return o
}

func (o QosprofileDscpWmmViOutput) ToQosprofileDscpWmmViOutputWithContext(ctx context.Context) QosprofileDscpWmmViOutput {
	return o
}

// DSCP WMM mapping numbers (0 - 63).
func (o QosprofileDscpWmmViOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QosprofileDscpWmmVi) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type QosprofileDscpWmmViArrayOutput struct{ *pulumi.OutputState }

func (QosprofileDscpWmmViArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QosprofileDscpWmmVi)(nil)).Elem()
}

func (o QosprofileDscpWmmViArrayOutput) ToQosprofileDscpWmmViArrayOutput() QosprofileDscpWmmViArrayOutput {
	return o
}

func (o QosprofileDscpWmmViArrayOutput) ToQosprofileDscpWmmViArrayOutputWithContext(ctx context.Context) QosprofileDscpWmmViArrayOutput {
	return o
}

func (o QosprofileDscpWmmViArrayOutput) Index(i pulumi.IntInput) QosprofileDscpWmmViOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QosprofileDscpWmmVi {
		return vs[0].([]QosprofileDscpWmmVi)[vs[1].(int)]
	}).(QosprofileDscpWmmViOutput)
}

type QosprofileDscpWmmVo struct {
	// DSCP WMM mapping numbers (0 - 63).
	Id *int `pulumi:"id"`
}

// QosprofileDscpWmmVoInput is an input type that accepts QosprofileDscpWmmVoArgs and QosprofileDscpWmmVoOutput values.
// You can construct a concrete instance of `QosprofileDscpWmmVoInput` via:
//
//	QosprofileDscpWmmVoArgs{...}
type QosprofileDscpWmmVoInput interface {
	pulumi.Input

	ToQosprofileDscpWmmVoOutput() QosprofileDscpWmmVoOutput
	ToQosprofileDscpWmmVoOutputWithContext(context.Context) QosprofileDscpWmmVoOutput
}

type QosprofileDscpWmmVoArgs struct {
	// DSCP WMM mapping numbers (0 - 63).
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (QosprofileDscpWmmVoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QosprofileDscpWmmVo)(nil)).Elem()
}

func (i QosprofileDscpWmmVoArgs) ToQosprofileDscpWmmVoOutput() QosprofileDscpWmmVoOutput {
	return i.ToQosprofileDscpWmmVoOutputWithContext(context.Background())
}

func (i QosprofileDscpWmmVoArgs) ToQosprofileDscpWmmVoOutputWithContext(ctx context.Context) QosprofileDscpWmmVoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QosprofileDscpWmmVoOutput)
}

// QosprofileDscpWmmVoArrayInput is an input type that accepts QosprofileDscpWmmVoArray and QosprofileDscpWmmVoArrayOutput values.
// You can construct a concrete instance of `QosprofileDscpWmmVoArrayInput` via:
//
//	QosprofileDscpWmmVoArray{ QosprofileDscpWmmVoArgs{...} }
type QosprofileDscpWmmVoArrayInput interface {
	pulumi.Input

	ToQosprofileDscpWmmVoArrayOutput() QosprofileDscpWmmVoArrayOutput
	ToQosprofileDscpWmmVoArrayOutputWithContext(context.Context) QosprofileDscpWmmVoArrayOutput
}

type QosprofileDscpWmmVoArray []QosprofileDscpWmmVoInput

func (QosprofileDscpWmmVoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QosprofileDscpWmmVo)(nil)).Elem()
}

func (i QosprofileDscpWmmVoArray) ToQosprofileDscpWmmVoArrayOutput() QosprofileDscpWmmVoArrayOutput {
	return i.ToQosprofileDscpWmmVoArrayOutputWithContext(context.Background())
}

func (i QosprofileDscpWmmVoArray) ToQosprofileDscpWmmVoArrayOutputWithContext(ctx context.Context) QosprofileDscpWmmVoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QosprofileDscpWmmVoArrayOutput)
}

type QosprofileDscpWmmVoOutput struct{ *pulumi.OutputState }

func (QosprofileDscpWmmVoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QosprofileDscpWmmVo)(nil)).Elem()
}

func (o QosprofileDscpWmmVoOutput) ToQosprofileDscpWmmVoOutput() QosprofileDscpWmmVoOutput {
	return o
}

func (o QosprofileDscpWmmVoOutput) ToQosprofileDscpWmmVoOutputWithContext(ctx context.Context) QosprofileDscpWmmVoOutput {
	return o
}

// DSCP WMM mapping numbers (0 - 63).
func (o QosprofileDscpWmmVoOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QosprofileDscpWmmVo) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type QosprofileDscpWmmVoArrayOutput struct{ *pulumi.OutputState }

func (QosprofileDscpWmmVoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QosprofileDscpWmmVo)(nil)).Elem()
}

func (o QosprofileDscpWmmVoArrayOutput) ToQosprofileDscpWmmVoArrayOutput() QosprofileDscpWmmVoArrayOutput {
	return o
}

func (o QosprofileDscpWmmVoArrayOutput) ToQosprofileDscpWmmVoArrayOutputWithContext(ctx context.Context) QosprofileDscpWmmVoArrayOutput {
	return o
}

func (o QosprofileDscpWmmVoArrayOutput) Index(i pulumi.IntInput) QosprofileDscpWmmVoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QosprofileDscpWmmVo {
		return vs[0].([]QosprofileDscpWmmVo)[vs[1].(int)]
	}).(QosprofileDscpWmmVoOutput)
}

type SettingDarrpOptimizeSchedule struct {
	// Schedule name.
	Name *string `pulumi:"name"`
}

// SettingDarrpOptimizeScheduleInput is an input type that accepts SettingDarrpOptimizeScheduleArgs and SettingDarrpOptimizeScheduleOutput values.
// You can construct a concrete instance of `SettingDarrpOptimizeScheduleInput` via:
//
//	SettingDarrpOptimizeScheduleArgs{...}
type SettingDarrpOptimizeScheduleInput interface {
	pulumi.Input

	ToSettingDarrpOptimizeScheduleOutput() SettingDarrpOptimizeScheduleOutput
	ToSettingDarrpOptimizeScheduleOutputWithContext(context.Context) SettingDarrpOptimizeScheduleOutput
}

type SettingDarrpOptimizeScheduleArgs struct {
	// Schedule name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SettingDarrpOptimizeScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingDarrpOptimizeSchedule)(nil)).Elem()
}

func (i SettingDarrpOptimizeScheduleArgs) ToSettingDarrpOptimizeScheduleOutput() SettingDarrpOptimizeScheduleOutput {
	return i.ToSettingDarrpOptimizeScheduleOutputWithContext(context.Background())
}

func (i SettingDarrpOptimizeScheduleArgs) ToSettingDarrpOptimizeScheduleOutputWithContext(ctx context.Context) SettingDarrpOptimizeScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingDarrpOptimizeScheduleOutput)
}

// SettingDarrpOptimizeScheduleArrayInput is an input type that accepts SettingDarrpOptimizeScheduleArray and SettingDarrpOptimizeScheduleArrayOutput values.
// You can construct a concrete instance of `SettingDarrpOptimizeScheduleArrayInput` via:
//
//	SettingDarrpOptimizeScheduleArray{ SettingDarrpOptimizeScheduleArgs{...} }
type SettingDarrpOptimizeScheduleArrayInput interface {
	pulumi.Input

	ToSettingDarrpOptimizeScheduleArrayOutput() SettingDarrpOptimizeScheduleArrayOutput
	ToSettingDarrpOptimizeScheduleArrayOutputWithContext(context.Context) SettingDarrpOptimizeScheduleArrayOutput
}

type SettingDarrpOptimizeScheduleArray []SettingDarrpOptimizeScheduleInput

func (SettingDarrpOptimizeScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingDarrpOptimizeSchedule)(nil)).Elem()
}

func (i SettingDarrpOptimizeScheduleArray) ToSettingDarrpOptimizeScheduleArrayOutput() SettingDarrpOptimizeScheduleArrayOutput {
	return i.ToSettingDarrpOptimizeScheduleArrayOutputWithContext(context.Background())
}

func (i SettingDarrpOptimizeScheduleArray) ToSettingDarrpOptimizeScheduleArrayOutputWithContext(ctx context.Context) SettingDarrpOptimizeScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingDarrpOptimizeScheduleArrayOutput)
}

type SettingDarrpOptimizeScheduleOutput struct{ *pulumi.OutputState }

func (SettingDarrpOptimizeScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingDarrpOptimizeSchedule)(nil)).Elem()
}

func (o SettingDarrpOptimizeScheduleOutput) ToSettingDarrpOptimizeScheduleOutput() SettingDarrpOptimizeScheduleOutput {
	return o
}

func (o SettingDarrpOptimizeScheduleOutput) ToSettingDarrpOptimizeScheduleOutputWithContext(ctx context.Context) SettingDarrpOptimizeScheduleOutput {
	return o
}

// Schedule name.
func (o SettingDarrpOptimizeScheduleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingDarrpOptimizeSchedule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SettingDarrpOptimizeScheduleArrayOutput struct{ *pulumi.OutputState }

func (SettingDarrpOptimizeScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingDarrpOptimizeSchedule)(nil)).Elem()
}

func (o SettingDarrpOptimizeScheduleArrayOutput) ToSettingDarrpOptimizeScheduleArrayOutput() SettingDarrpOptimizeScheduleArrayOutput {
	return o
}

func (o SettingDarrpOptimizeScheduleArrayOutput) ToSettingDarrpOptimizeScheduleArrayOutputWithContext(ctx context.Context) SettingDarrpOptimizeScheduleArrayOutput {
	return o
}

func (o SettingDarrpOptimizeScheduleArrayOutput) Index(i pulumi.IntInput) SettingDarrpOptimizeScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingDarrpOptimizeSchedule {
		return vs[0].([]SettingDarrpOptimizeSchedule)[vs[1].(int)]
	}).(SettingDarrpOptimizeScheduleOutput)
}

type SettingOffendingSsid struct {
	// Actions taken for detected offending SSID. Valid values: `log`, `suppress`.
	Action *string `pulumi:"action"`
	// ID.
	Id *int `pulumi:"id"`
	// Define offending SSID pattern (case insensitive), eg: word, word*, *word, wo*rd.
	SsidPattern *string `pulumi:"ssidPattern"`
}

// SettingOffendingSsidInput is an input type that accepts SettingOffendingSsidArgs and SettingOffendingSsidOutput values.
// You can construct a concrete instance of `SettingOffendingSsidInput` via:
//
//	SettingOffendingSsidArgs{...}
type SettingOffendingSsidInput interface {
	pulumi.Input

	ToSettingOffendingSsidOutput() SettingOffendingSsidOutput
	ToSettingOffendingSsidOutputWithContext(context.Context) SettingOffendingSsidOutput
}

type SettingOffendingSsidArgs struct {
	// Actions taken for detected offending SSID. Valid values: `log`, `suppress`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Define offending SSID pattern (case insensitive), eg: word, word*, *word, wo*rd.
	SsidPattern pulumi.StringPtrInput `pulumi:"ssidPattern"`
}

func (SettingOffendingSsidArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingOffendingSsid)(nil)).Elem()
}

func (i SettingOffendingSsidArgs) ToSettingOffendingSsidOutput() SettingOffendingSsidOutput {
	return i.ToSettingOffendingSsidOutputWithContext(context.Background())
}

func (i SettingOffendingSsidArgs) ToSettingOffendingSsidOutputWithContext(ctx context.Context) SettingOffendingSsidOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingOffendingSsidOutput)
}

// SettingOffendingSsidArrayInput is an input type that accepts SettingOffendingSsidArray and SettingOffendingSsidArrayOutput values.
// You can construct a concrete instance of `SettingOffendingSsidArrayInput` via:
//
//	SettingOffendingSsidArray{ SettingOffendingSsidArgs{...} }
type SettingOffendingSsidArrayInput interface {
	pulumi.Input

	ToSettingOffendingSsidArrayOutput() SettingOffendingSsidArrayOutput
	ToSettingOffendingSsidArrayOutputWithContext(context.Context) SettingOffendingSsidArrayOutput
}

type SettingOffendingSsidArray []SettingOffendingSsidInput

func (SettingOffendingSsidArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingOffendingSsid)(nil)).Elem()
}

func (i SettingOffendingSsidArray) ToSettingOffendingSsidArrayOutput() SettingOffendingSsidArrayOutput {
	return i.ToSettingOffendingSsidArrayOutputWithContext(context.Background())
}

func (i SettingOffendingSsidArray) ToSettingOffendingSsidArrayOutputWithContext(ctx context.Context) SettingOffendingSsidArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingOffendingSsidArrayOutput)
}

type SettingOffendingSsidOutput struct{ *pulumi.OutputState }

func (SettingOffendingSsidOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingOffendingSsid)(nil)).Elem()
}

func (o SettingOffendingSsidOutput) ToSettingOffendingSsidOutput() SettingOffendingSsidOutput {
	return o
}

func (o SettingOffendingSsidOutput) ToSettingOffendingSsidOutputWithContext(ctx context.Context) SettingOffendingSsidOutput {
	return o
}

// Actions taken for detected offending SSID. Valid values: `log`, `suppress`.
func (o SettingOffendingSsidOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingOffendingSsid) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// ID.
func (o SettingOffendingSsidOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingOffendingSsid) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Define offending SSID pattern (case insensitive), eg: word, word*, *word, wo*rd.
func (o SettingOffendingSsidOutput) SsidPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingOffendingSsid) *string { return v.SsidPattern }).(pulumi.StringPtrOutput)
}

type SettingOffendingSsidArrayOutput struct{ *pulumi.OutputState }

func (SettingOffendingSsidArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingOffendingSsid)(nil)).Elem()
}

func (o SettingOffendingSsidArrayOutput) ToSettingOffendingSsidArrayOutput() SettingOffendingSsidArrayOutput {
	return o
}

func (o SettingOffendingSsidArrayOutput) ToSettingOffendingSsidArrayOutputWithContext(ctx context.Context) SettingOffendingSsidArrayOutput {
	return o
}

func (o SettingOffendingSsidArrayOutput) Index(i pulumi.IntInput) SettingOffendingSsidOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingOffendingSsid {
		return vs[0].([]SettingOffendingSsid)[vs[1].(int)]
	}).(SettingOffendingSsidOutput)
}

type SnmpCommunity struct {
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts []SnmpCommunityHost `pulumi:"hosts"`
	// Community ID.
	Id *int `pulumi:"id"`
	// Community name.
	Name *string `pulumi:"name"`
	// Enable/disable SNMP v1 queries. Valid values: `enable`, `disable`.
	QueryV1Status *string `pulumi:"queryV1Status"`
	// Enable/disable SNMP v2c queries. Valid values: `enable`, `disable`.
	QueryV2cStatus *string `pulumi:"queryV2cStatus"`
	// Enable/disable this SNMP community. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Enable/disable SNMP v1 traps. Valid values: `enable`, `disable`.
	TrapV1Status *string `pulumi:"trapV1Status"`
	// Enable/disable SNMP v2c traps. Valid values: `enable`, `disable`.
	TrapV2cStatus *string `pulumi:"trapV2cStatus"`
}

// SnmpCommunityInput is an input type that accepts SnmpCommunityArgs and SnmpCommunityOutput values.
// You can construct a concrete instance of `SnmpCommunityInput` via:
//
//	SnmpCommunityArgs{...}
type SnmpCommunityInput interface {
	pulumi.Input

	ToSnmpCommunityOutput() SnmpCommunityOutput
	ToSnmpCommunityOutputWithContext(context.Context) SnmpCommunityOutput
}

type SnmpCommunityArgs struct {
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts SnmpCommunityHostArrayInput `pulumi:"hosts"`
	// Community ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Community name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Enable/disable SNMP v1 queries. Valid values: `enable`, `disable`.
	QueryV1Status pulumi.StringPtrInput `pulumi:"queryV1Status"`
	// Enable/disable SNMP v2c queries. Valid values: `enable`, `disable`.
	QueryV2cStatus pulumi.StringPtrInput `pulumi:"queryV2cStatus"`
	// Enable/disable this SNMP community. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Enable/disable SNMP v1 traps. Valid values: `enable`, `disable`.
	TrapV1Status pulumi.StringPtrInput `pulumi:"trapV1Status"`
	// Enable/disable SNMP v2c traps. Valid values: `enable`, `disable`.
	TrapV2cStatus pulumi.StringPtrInput `pulumi:"trapV2cStatus"`
}

func (SnmpCommunityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpCommunity)(nil)).Elem()
}

func (i SnmpCommunityArgs) ToSnmpCommunityOutput() SnmpCommunityOutput {
	return i.ToSnmpCommunityOutputWithContext(context.Background())
}

func (i SnmpCommunityArgs) ToSnmpCommunityOutputWithContext(ctx context.Context) SnmpCommunityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpCommunityOutput)
}

// SnmpCommunityArrayInput is an input type that accepts SnmpCommunityArray and SnmpCommunityArrayOutput values.
// You can construct a concrete instance of `SnmpCommunityArrayInput` via:
//
//	SnmpCommunityArray{ SnmpCommunityArgs{...} }
type SnmpCommunityArrayInput interface {
	pulumi.Input

	ToSnmpCommunityArrayOutput() SnmpCommunityArrayOutput
	ToSnmpCommunityArrayOutputWithContext(context.Context) SnmpCommunityArrayOutput
}

type SnmpCommunityArray []SnmpCommunityInput

func (SnmpCommunityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpCommunity)(nil)).Elem()
}

func (i SnmpCommunityArray) ToSnmpCommunityArrayOutput() SnmpCommunityArrayOutput {
	return i.ToSnmpCommunityArrayOutputWithContext(context.Background())
}

func (i SnmpCommunityArray) ToSnmpCommunityArrayOutputWithContext(ctx context.Context) SnmpCommunityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpCommunityArrayOutput)
}

type SnmpCommunityOutput struct{ *pulumi.OutputState }

func (SnmpCommunityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpCommunity)(nil)).Elem()
}

func (o SnmpCommunityOutput) ToSnmpCommunityOutput() SnmpCommunityOutput {
	return o
}

func (o SnmpCommunityOutput) ToSnmpCommunityOutputWithContext(ctx context.Context) SnmpCommunityOutput {
	return o
}

// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
func (o SnmpCommunityOutput) Hosts() SnmpCommunityHostArrayOutput {
	return o.ApplyT(func(v SnmpCommunity) []SnmpCommunityHost { return v.Hosts }).(SnmpCommunityHostArrayOutput)
}

// Community ID.
func (o SnmpCommunityOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SnmpCommunity) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Community name.
func (o SnmpCommunityOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpCommunity) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Enable/disable SNMP v1 queries. Valid values: `enable`, `disable`.
func (o SnmpCommunityOutput) QueryV1Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpCommunity) *string { return v.QueryV1Status }).(pulumi.StringPtrOutput)
}

// Enable/disable SNMP v2c queries. Valid values: `enable`, `disable`.
func (o SnmpCommunityOutput) QueryV2cStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpCommunity) *string { return v.QueryV2cStatus }).(pulumi.StringPtrOutput)
}

// Enable/disable this SNMP community. Valid values: `enable`, `disable`.
func (o SnmpCommunityOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpCommunity) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Enable/disable SNMP v1 traps. Valid values: `enable`, `disable`.
func (o SnmpCommunityOutput) TrapV1Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpCommunity) *string { return v.TrapV1Status }).(pulumi.StringPtrOutput)
}

// Enable/disable SNMP v2c traps. Valid values: `enable`, `disable`.
func (o SnmpCommunityOutput) TrapV2cStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpCommunity) *string { return v.TrapV2cStatus }).(pulumi.StringPtrOutput)
}

type SnmpCommunityArrayOutput struct{ *pulumi.OutputState }

func (SnmpCommunityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpCommunity)(nil)).Elem()
}

func (o SnmpCommunityArrayOutput) ToSnmpCommunityArrayOutput() SnmpCommunityArrayOutput {
	return o
}

func (o SnmpCommunityArrayOutput) ToSnmpCommunityArrayOutputWithContext(ctx context.Context) SnmpCommunityArrayOutput {
	return o
}

func (o SnmpCommunityArrayOutput) Index(i pulumi.IntInput) SnmpCommunityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SnmpCommunity {
		return vs[0].([]SnmpCommunity)[vs[1].(int)]
	}).(SnmpCommunityOutput)
}

type SnmpCommunityHost struct {
	// Host entry ID.
	Id *int `pulumi:"id"`
	// IPv4 address of the SNMP manager (host).
	Ip *string `pulumi:"ip"`
}

// SnmpCommunityHostInput is an input type that accepts SnmpCommunityHostArgs and SnmpCommunityHostOutput values.
// You can construct a concrete instance of `SnmpCommunityHostInput` via:
//
//	SnmpCommunityHostArgs{...}
type SnmpCommunityHostInput interface {
	pulumi.Input

	ToSnmpCommunityHostOutput() SnmpCommunityHostOutput
	ToSnmpCommunityHostOutputWithContext(context.Context) SnmpCommunityHostOutput
}

type SnmpCommunityHostArgs struct {
	// Host entry ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// IPv4 address of the SNMP manager (host).
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (SnmpCommunityHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpCommunityHost)(nil)).Elem()
}

func (i SnmpCommunityHostArgs) ToSnmpCommunityHostOutput() SnmpCommunityHostOutput {
	return i.ToSnmpCommunityHostOutputWithContext(context.Background())
}

func (i SnmpCommunityHostArgs) ToSnmpCommunityHostOutputWithContext(ctx context.Context) SnmpCommunityHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpCommunityHostOutput)
}

// SnmpCommunityHostArrayInput is an input type that accepts SnmpCommunityHostArray and SnmpCommunityHostArrayOutput values.
// You can construct a concrete instance of `SnmpCommunityHostArrayInput` via:
//
//	SnmpCommunityHostArray{ SnmpCommunityHostArgs{...} }
type SnmpCommunityHostArrayInput interface {
	pulumi.Input

	ToSnmpCommunityHostArrayOutput() SnmpCommunityHostArrayOutput
	ToSnmpCommunityHostArrayOutputWithContext(context.Context) SnmpCommunityHostArrayOutput
}

type SnmpCommunityHostArray []SnmpCommunityHostInput

func (SnmpCommunityHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpCommunityHost)(nil)).Elem()
}

func (i SnmpCommunityHostArray) ToSnmpCommunityHostArrayOutput() SnmpCommunityHostArrayOutput {
	return i.ToSnmpCommunityHostArrayOutputWithContext(context.Background())
}

func (i SnmpCommunityHostArray) ToSnmpCommunityHostArrayOutputWithContext(ctx context.Context) SnmpCommunityHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpCommunityHostArrayOutput)
}

type SnmpCommunityHostOutput struct{ *pulumi.OutputState }

func (SnmpCommunityHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpCommunityHost)(nil)).Elem()
}

func (o SnmpCommunityHostOutput) ToSnmpCommunityHostOutput() SnmpCommunityHostOutput {
	return o
}

func (o SnmpCommunityHostOutput) ToSnmpCommunityHostOutputWithContext(ctx context.Context) SnmpCommunityHostOutput {
	return o
}

// Host entry ID.
func (o SnmpCommunityHostOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SnmpCommunityHost) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// IPv4 address of the SNMP manager (host).
func (o SnmpCommunityHostOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpCommunityHost) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type SnmpCommunityHostArrayOutput struct{ *pulumi.OutputState }

func (SnmpCommunityHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpCommunityHost)(nil)).Elem()
}

func (o SnmpCommunityHostArrayOutput) ToSnmpCommunityHostArrayOutput() SnmpCommunityHostArrayOutput {
	return o
}

func (o SnmpCommunityHostArrayOutput) ToSnmpCommunityHostArrayOutputWithContext(ctx context.Context) SnmpCommunityHostArrayOutput {
	return o
}

func (o SnmpCommunityHostArrayOutput) Index(i pulumi.IntInput) SnmpCommunityHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SnmpCommunityHost {
		return vs[0].([]SnmpCommunityHost)[vs[1].(int)]
	}).(SnmpCommunityHostOutput)
}

type SnmpUser struct {
	// Authentication protocol. Valid values: `md5`, `sha`.
	AuthProto *string `pulumi:"authProto"`
	// Password for authentication protocol.
	AuthPwd *string `pulumi:"authPwd"`
	// SNMP User Name
	Name *string `pulumi:"name"`
	// Configure SNMP User Notify Hosts.
	NotifyHosts *string `pulumi:"notifyHosts"`
	// Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
	PrivProto *string `pulumi:"privProto"`
	// Password for privacy (encryption) protocol.
	PrivPwd *string `pulumi:"privPwd"`
	// Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
	Queries *string `pulumi:"queries"`
	// Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
	SecurityLevel *string `pulumi:"securityLevel"`
	// SNMP User Enable Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
	TrapStatus *string `pulumi:"trapStatus"`
}

// SnmpUserInput is an input type that accepts SnmpUserArgs and SnmpUserOutput values.
// You can construct a concrete instance of `SnmpUserInput` via:
//
//	SnmpUserArgs{...}
type SnmpUserInput interface {
	pulumi.Input

	ToSnmpUserOutput() SnmpUserOutput
	ToSnmpUserOutputWithContext(context.Context) SnmpUserOutput
}

type SnmpUserArgs struct {
	// Authentication protocol. Valid values: `md5`, `sha`.
	AuthProto pulumi.StringPtrInput `pulumi:"authProto"`
	// Password for authentication protocol.
	AuthPwd pulumi.StringPtrInput `pulumi:"authPwd"`
	// SNMP User Name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Configure SNMP User Notify Hosts.
	NotifyHosts pulumi.StringPtrInput `pulumi:"notifyHosts"`
	// Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
	PrivProto pulumi.StringPtrInput `pulumi:"privProto"`
	// Password for privacy (encryption) protocol.
	PrivPwd pulumi.StringPtrInput `pulumi:"privPwd"`
	// Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
	Queries pulumi.StringPtrInput `pulumi:"queries"`
	// Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
	SecurityLevel pulumi.StringPtrInput `pulumi:"securityLevel"`
	// SNMP User Enable Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
	TrapStatus pulumi.StringPtrInput `pulumi:"trapStatus"`
}

func (SnmpUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpUser)(nil)).Elem()
}

func (i SnmpUserArgs) ToSnmpUserOutput() SnmpUserOutput {
	return i.ToSnmpUserOutputWithContext(context.Background())
}

func (i SnmpUserArgs) ToSnmpUserOutputWithContext(ctx context.Context) SnmpUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpUserOutput)
}

// SnmpUserArrayInput is an input type that accepts SnmpUserArray and SnmpUserArrayOutput values.
// You can construct a concrete instance of `SnmpUserArrayInput` via:
//
//	SnmpUserArray{ SnmpUserArgs{...} }
type SnmpUserArrayInput interface {
	pulumi.Input

	ToSnmpUserArrayOutput() SnmpUserArrayOutput
	ToSnmpUserArrayOutputWithContext(context.Context) SnmpUserArrayOutput
}

type SnmpUserArray []SnmpUserInput

func (SnmpUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpUser)(nil)).Elem()
}

func (i SnmpUserArray) ToSnmpUserArrayOutput() SnmpUserArrayOutput {
	return i.ToSnmpUserArrayOutputWithContext(context.Background())
}

func (i SnmpUserArray) ToSnmpUserArrayOutputWithContext(ctx context.Context) SnmpUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpUserArrayOutput)
}

type SnmpUserOutput struct{ *pulumi.OutputState }

func (SnmpUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpUser)(nil)).Elem()
}

func (o SnmpUserOutput) ToSnmpUserOutput() SnmpUserOutput {
	return o
}

func (o SnmpUserOutput) ToSnmpUserOutputWithContext(ctx context.Context) SnmpUserOutput {
	return o
}

// Authentication protocol. Valid values: `md5`, `sha`.
func (o SnmpUserOutput) AuthProto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpUser) *string { return v.AuthProto }).(pulumi.StringPtrOutput)
}

// Password for authentication protocol.
func (o SnmpUserOutput) AuthPwd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpUser) *string { return v.AuthPwd }).(pulumi.StringPtrOutput)
}

// SNMP User Name
func (o SnmpUserOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpUser) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Configure SNMP User Notify Hosts.
func (o SnmpUserOutput) NotifyHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpUser) *string { return v.NotifyHosts }).(pulumi.StringPtrOutput)
}

// Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
func (o SnmpUserOutput) PrivProto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpUser) *string { return v.PrivProto }).(pulumi.StringPtrOutput)
}

// Password for privacy (encryption) protocol.
func (o SnmpUserOutput) PrivPwd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpUser) *string { return v.PrivPwd }).(pulumi.StringPtrOutput)
}

// Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
func (o SnmpUserOutput) Queries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpUser) *string { return v.Queries }).(pulumi.StringPtrOutput)
}

// Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
func (o SnmpUserOutput) SecurityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpUser) *string { return v.SecurityLevel }).(pulumi.StringPtrOutput)
}

// SNMP User Enable Valid values: `enable`, `disable`.
func (o SnmpUserOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpUser) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
func (o SnmpUserOutput) TrapStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpUser) *string { return v.TrapStatus }).(pulumi.StringPtrOutput)
}

type SnmpUserArrayOutput struct{ *pulumi.OutputState }

func (SnmpUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpUser)(nil)).Elem()
}

func (o SnmpUserArrayOutput) ToSnmpUserArrayOutput() SnmpUserArrayOutput {
	return o
}

func (o SnmpUserArrayOutput) ToSnmpUserArrayOutputWithContext(ctx context.Context) SnmpUserArrayOutput {
	return o
}

func (o SnmpUserArrayOutput) Index(i pulumi.IntInput) SnmpUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SnmpUser {
		return vs[0].([]SnmpUser)[vs[1].(int)]
	}).(SnmpUserOutput)
}

type TimersDarrpTime struct {
	// Time.
	Time *string `pulumi:"time"`
}

// TimersDarrpTimeInput is an input type that accepts TimersDarrpTimeArgs and TimersDarrpTimeOutput values.
// You can construct a concrete instance of `TimersDarrpTimeInput` via:
//
//	TimersDarrpTimeArgs{...}
type TimersDarrpTimeInput interface {
	pulumi.Input

	ToTimersDarrpTimeOutput() TimersDarrpTimeOutput
	ToTimersDarrpTimeOutputWithContext(context.Context) TimersDarrpTimeOutput
}

type TimersDarrpTimeArgs struct {
	// Time.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (TimersDarrpTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimersDarrpTime)(nil)).Elem()
}

func (i TimersDarrpTimeArgs) ToTimersDarrpTimeOutput() TimersDarrpTimeOutput {
	return i.ToTimersDarrpTimeOutputWithContext(context.Background())
}

func (i TimersDarrpTimeArgs) ToTimersDarrpTimeOutputWithContext(ctx context.Context) TimersDarrpTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimersDarrpTimeOutput)
}

// TimersDarrpTimeArrayInput is an input type that accepts TimersDarrpTimeArray and TimersDarrpTimeArrayOutput values.
// You can construct a concrete instance of `TimersDarrpTimeArrayInput` via:
//
//	TimersDarrpTimeArray{ TimersDarrpTimeArgs{...} }
type TimersDarrpTimeArrayInput interface {
	pulumi.Input

	ToTimersDarrpTimeArrayOutput() TimersDarrpTimeArrayOutput
	ToTimersDarrpTimeArrayOutputWithContext(context.Context) TimersDarrpTimeArrayOutput
}

type TimersDarrpTimeArray []TimersDarrpTimeInput

func (TimersDarrpTimeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimersDarrpTime)(nil)).Elem()
}

func (i TimersDarrpTimeArray) ToTimersDarrpTimeArrayOutput() TimersDarrpTimeArrayOutput {
	return i.ToTimersDarrpTimeArrayOutputWithContext(context.Background())
}

func (i TimersDarrpTimeArray) ToTimersDarrpTimeArrayOutputWithContext(ctx context.Context) TimersDarrpTimeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimersDarrpTimeArrayOutput)
}

type TimersDarrpTimeOutput struct{ *pulumi.OutputState }

func (TimersDarrpTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimersDarrpTime)(nil)).Elem()
}

func (o TimersDarrpTimeOutput) ToTimersDarrpTimeOutput() TimersDarrpTimeOutput {
	return o
}

func (o TimersDarrpTimeOutput) ToTimersDarrpTimeOutputWithContext(ctx context.Context) TimersDarrpTimeOutput {
	return o
}

// Time.
func (o TimersDarrpTimeOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimersDarrpTime) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type TimersDarrpTimeArrayOutput struct{ *pulumi.OutputState }

func (TimersDarrpTimeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimersDarrpTime)(nil)).Elem()
}

func (o TimersDarrpTimeArrayOutput) ToTimersDarrpTimeArrayOutput() TimersDarrpTimeArrayOutput {
	return o
}

func (o TimersDarrpTimeArrayOutput) ToTimersDarrpTimeArrayOutputWithContext(ctx context.Context) TimersDarrpTimeArrayOutput {
	return o
}

func (o TimersDarrpTimeArrayOutput) Index(i pulumi.IntInput) TimersDarrpTimeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimersDarrpTime {
		return vs[0].([]TimersDarrpTime)[vs[1].(int)]
	}).(TimersDarrpTimeOutput)
}

type VapMacFilterList struct {
	// ID.
	Id *int `pulumi:"id"`
	// MAC address.
	Mac *string `pulumi:"mac"`
	// Deny or allow the client with this MAC address. Valid values: `allow`, `deny`.
	MacFilterPolicy *string `pulumi:"macFilterPolicy"`
}

// VapMacFilterListInput is an input type that accepts VapMacFilterListArgs and VapMacFilterListOutput values.
// You can construct a concrete instance of `VapMacFilterListInput` via:
//
//	VapMacFilterListArgs{...}
type VapMacFilterListInput interface {
	pulumi.Input

	ToVapMacFilterListOutput() VapMacFilterListOutput
	ToVapMacFilterListOutputWithContext(context.Context) VapMacFilterListOutput
}

type VapMacFilterListArgs struct {
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// MAC address.
	Mac pulumi.StringPtrInput `pulumi:"mac"`
	// Deny or allow the client with this MAC address. Valid values: `allow`, `deny`.
	MacFilterPolicy pulumi.StringPtrInput `pulumi:"macFilterPolicy"`
}

func (VapMacFilterListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VapMacFilterList)(nil)).Elem()
}

func (i VapMacFilterListArgs) ToVapMacFilterListOutput() VapMacFilterListOutput {
	return i.ToVapMacFilterListOutputWithContext(context.Background())
}

func (i VapMacFilterListArgs) ToVapMacFilterListOutputWithContext(ctx context.Context) VapMacFilterListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapMacFilterListOutput)
}

// VapMacFilterListArrayInput is an input type that accepts VapMacFilterListArray and VapMacFilterListArrayOutput values.
// You can construct a concrete instance of `VapMacFilterListArrayInput` via:
//
//	VapMacFilterListArray{ VapMacFilterListArgs{...} }
type VapMacFilterListArrayInput interface {
	pulumi.Input

	ToVapMacFilterListArrayOutput() VapMacFilterListArrayOutput
	ToVapMacFilterListArrayOutputWithContext(context.Context) VapMacFilterListArrayOutput
}

type VapMacFilterListArray []VapMacFilterListInput

func (VapMacFilterListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapMacFilterList)(nil)).Elem()
}

func (i VapMacFilterListArray) ToVapMacFilterListArrayOutput() VapMacFilterListArrayOutput {
	return i.ToVapMacFilterListArrayOutputWithContext(context.Background())
}

func (i VapMacFilterListArray) ToVapMacFilterListArrayOutputWithContext(ctx context.Context) VapMacFilterListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapMacFilterListArrayOutput)
}

type VapMacFilterListOutput struct{ *pulumi.OutputState }

func (VapMacFilterListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VapMacFilterList)(nil)).Elem()
}

func (o VapMacFilterListOutput) ToVapMacFilterListOutput() VapMacFilterListOutput {
	return o
}

func (o VapMacFilterListOutput) ToVapMacFilterListOutputWithContext(ctx context.Context) VapMacFilterListOutput {
	return o
}

// ID.
func (o VapMacFilterListOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VapMacFilterList) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// MAC address.
func (o VapMacFilterListOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VapMacFilterList) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

// Deny or allow the client with this MAC address. Valid values: `allow`, `deny`.
func (o VapMacFilterListOutput) MacFilterPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VapMacFilterList) *string { return v.MacFilterPolicy }).(pulumi.StringPtrOutput)
}

type VapMacFilterListArrayOutput struct{ *pulumi.OutputState }

func (VapMacFilterListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapMacFilterList)(nil)).Elem()
}

func (o VapMacFilterListArrayOutput) ToVapMacFilterListArrayOutput() VapMacFilterListArrayOutput {
	return o
}

func (o VapMacFilterListArrayOutput) ToVapMacFilterListArrayOutputWithContext(ctx context.Context) VapMacFilterListArrayOutput {
	return o
}

func (o VapMacFilterListArrayOutput) Index(i pulumi.IntInput) VapMacFilterListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VapMacFilterList {
		return vs[0].([]VapMacFilterList)[vs[1].(int)]
	}).(VapMacFilterListOutput)
}

type VapMpskKey struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Number of clients that can connect using this pre-shared key.
	ConcurrentClients *string `pulumi:"concurrentClients"`
	// Pre-shared key name.
	KeyName *string `pulumi:"keyName"`
	// Firewall schedule for MPSK passphrase. The passphrase will be effective only when at least one schedule is valid. The structure of `mpskSchedules` block is documented below.
	MpskSchedules []VapMpskKeyMpskSchedule `pulumi:"mpskSchedules"`
	// WPA Pre-shared key.
	Passphrase *string `pulumi:"passphrase"`
}

// VapMpskKeyInput is an input type that accepts VapMpskKeyArgs and VapMpskKeyOutput values.
// You can construct a concrete instance of `VapMpskKeyInput` via:
//
//	VapMpskKeyArgs{...}
type VapMpskKeyInput interface {
	pulumi.Input

	ToVapMpskKeyOutput() VapMpskKeyOutput
	ToVapMpskKeyOutputWithContext(context.Context) VapMpskKeyOutput
}

type VapMpskKeyArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Number of clients that can connect using this pre-shared key.
	ConcurrentClients pulumi.StringPtrInput `pulumi:"concurrentClients"`
	// Pre-shared key name.
	KeyName pulumi.StringPtrInput `pulumi:"keyName"`
	// Firewall schedule for MPSK passphrase. The passphrase will be effective only when at least one schedule is valid. The structure of `mpskSchedules` block is documented below.
	MpskSchedules VapMpskKeyMpskScheduleArrayInput `pulumi:"mpskSchedules"`
	// WPA Pre-shared key.
	Passphrase pulumi.StringPtrInput `pulumi:"passphrase"`
}

func (VapMpskKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VapMpskKey)(nil)).Elem()
}

func (i VapMpskKeyArgs) ToVapMpskKeyOutput() VapMpskKeyOutput {
	return i.ToVapMpskKeyOutputWithContext(context.Background())
}

func (i VapMpskKeyArgs) ToVapMpskKeyOutputWithContext(ctx context.Context) VapMpskKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapMpskKeyOutput)
}

// VapMpskKeyArrayInput is an input type that accepts VapMpskKeyArray and VapMpskKeyArrayOutput values.
// You can construct a concrete instance of `VapMpskKeyArrayInput` via:
//
//	VapMpskKeyArray{ VapMpskKeyArgs{...} }
type VapMpskKeyArrayInput interface {
	pulumi.Input

	ToVapMpskKeyArrayOutput() VapMpskKeyArrayOutput
	ToVapMpskKeyArrayOutputWithContext(context.Context) VapMpskKeyArrayOutput
}

type VapMpskKeyArray []VapMpskKeyInput

func (VapMpskKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapMpskKey)(nil)).Elem()
}

func (i VapMpskKeyArray) ToVapMpskKeyArrayOutput() VapMpskKeyArrayOutput {
	return i.ToVapMpskKeyArrayOutputWithContext(context.Background())
}

func (i VapMpskKeyArray) ToVapMpskKeyArrayOutputWithContext(ctx context.Context) VapMpskKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapMpskKeyArrayOutput)
}

type VapMpskKeyOutput struct{ *pulumi.OutputState }

func (VapMpskKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VapMpskKey)(nil)).Elem()
}

func (o VapMpskKeyOutput) ToVapMpskKeyOutput() VapMpskKeyOutput {
	return o
}

func (o VapMpskKeyOutput) ToVapMpskKeyOutputWithContext(ctx context.Context) VapMpskKeyOutput {
	return o
}

// Comment.
func (o VapMpskKeyOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VapMpskKey) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Number of clients that can connect using this pre-shared key.
func (o VapMpskKeyOutput) ConcurrentClients() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VapMpskKey) *string { return v.ConcurrentClients }).(pulumi.StringPtrOutput)
}

// Pre-shared key name.
func (o VapMpskKeyOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VapMpskKey) *string { return v.KeyName }).(pulumi.StringPtrOutput)
}

// Firewall schedule for MPSK passphrase. The passphrase will be effective only when at least one schedule is valid. The structure of `mpskSchedules` block is documented below.
func (o VapMpskKeyOutput) MpskSchedules() VapMpskKeyMpskScheduleArrayOutput {
	return o.ApplyT(func(v VapMpskKey) []VapMpskKeyMpskSchedule { return v.MpskSchedules }).(VapMpskKeyMpskScheduleArrayOutput)
}

// WPA Pre-shared key.
func (o VapMpskKeyOutput) Passphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VapMpskKey) *string { return v.Passphrase }).(pulumi.StringPtrOutput)
}

type VapMpskKeyArrayOutput struct{ *pulumi.OutputState }

func (VapMpskKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapMpskKey)(nil)).Elem()
}

func (o VapMpskKeyArrayOutput) ToVapMpskKeyArrayOutput() VapMpskKeyArrayOutput {
	return o
}

func (o VapMpskKeyArrayOutput) ToVapMpskKeyArrayOutputWithContext(ctx context.Context) VapMpskKeyArrayOutput {
	return o
}

func (o VapMpskKeyArrayOutput) Index(i pulumi.IntInput) VapMpskKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VapMpskKey {
		return vs[0].([]VapMpskKey)[vs[1].(int)]
	}).(VapMpskKeyOutput)
}

type VapMpskKeyMpskSchedule struct {
	// Schedule name.
	Name *string `pulumi:"name"`
}

// VapMpskKeyMpskScheduleInput is an input type that accepts VapMpskKeyMpskScheduleArgs and VapMpskKeyMpskScheduleOutput values.
// You can construct a concrete instance of `VapMpskKeyMpskScheduleInput` via:
//
//	VapMpskKeyMpskScheduleArgs{...}
type VapMpskKeyMpskScheduleInput interface {
	pulumi.Input

	ToVapMpskKeyMpskScheduleOutput() VapMpskKeyMpskScheduleOutput
	ToVapMpskKeyMpskScheduleOutputWithContext(context.Context) VapMpskKeyMpskScheduleOutput
}

type VapMpskKeyMpskScheduleArgs struct {
	// Schedule name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (VapMpskKeyMpskScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VapMpskKeyMpskSchedule)(nil)).Elem()
}

func (i VapMpskKeyMpskScheduleArgs) ToVapMpskKeyMpskScheduleOutput() VapMpskKeyMpskScheduleOutput {
	return i.ToVapMpskKeyMpskScheduleOutputWithContext(context.Background())
}

func (i VapMpskKeyMpskScheduleArgs) ToVapMpskKeyMpskScheduleOutputWithContext(ctx context.Context) VapMpskKeyMpskScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapMpskKeyMpskScheduleOutput)
}

// VapMpskKeyMpskScheduleArrayInput is an input type that accepts VapMpskKeyMpskScheduleArray and VapMpskKeyMpskScheduleArrayOutput values.
// You can construct a concrete instance of `VapMpskKeyMpskScheduleArrayInput` via:
//
//	VapMpskKeyMpskScheduleArray{ VapMpskKeyMpskScheduleArgs{...} }
type VapMpskKeyMpskScheduleArrayInput interface {
	pulumi.Input

	ToVapMpskKeyMpskScheduleArrayOutput() VapMpskKeyMpskScheduleArrayOutput
	ToVapMpskKeyMpskScheduleArrayOutputWithContext(context.Context) VapMpskKeyMpskScheduleArrayOutput
}

type VapMpskKeyMpskScheduleArray []VapMpskKeyMpskScheduleInput

func (VapMpskKeyMpskScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapMpskKeyMpskSchedule)(nil)).Elem()
}

func (i VapMpskKeyMpskScheduleArray) ToVapMpskKeyMpskScheduleArrayOutput() VapMpskKeyMpskScheduleArrayOutput {
	return i.ToVapMpskKeyMpskScheduleArrayOutputWithContext(context.Background())
}

func (i VapMpskKeyMpskScheduleArray) ToVapMpskKeyMpskScheduleArrayOutputWithContext(ctx context.Context) VapMpskKeyMpskScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapMpskKeyMpskScheduleArrayOutput)
}

type VapMpskKeyMpskScheduleOutput struct{ *pulumi.OutputState }

func (VapMpskKeyMpskScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VapMpskKeyMpskSchedule)(nil)).Elem()
}

func (o VapMpskKeyMpskScheduleOutput) ToVapMpskKeyMpskScheduleOutput() VapMpskKeyMpskScheduleOutput {
	return o
}

func (o VapMpskKeyMpskScheduleOutput) ToVapMpskKeyMpskScheduleOutputWithContext(ctx context.Context) VapMpskKeyMpskScheduleOutput {
	return o
}

// Schedule name.
func (o VapMpskKeyMpskScheduleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VapMpskKeyMpskSchedule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type VapMpskKeyMpskScheduleArrayOutput struct{ *pulumi.OutputState }

func (VapMpskKeyMpskScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapMpskKeyMpskSchedule)(nil)).Elem()
}

func (o VapMpskKeyMpskScheduleArrayOutput) ToVapMpskKeyMpskScheduleArrayOutput() VapMpskKeyMpskScheduleArrayOutput {
	return o
}

func (o VapMpskKeyMpskScheduleArrayOutput) ToVapMpskKeyMpskScheduleArrayOutputWithContext(ctx context.Context) VapMpskKeyMpskScheduleArrayOutput {
	return o
}

func (o VapMpskKeyMpskScheduleArrayOutput) Index(i pulumi.IntInput) VapMpskKeyMpskScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VapMpskKeyMpskSchedule {
		return vs[0].([]VapMpskKeyMpskSchedule)[vs[1].(int)]
	}).(VapMpskKeyMpskScheduleOutput)
}

type VapPortalMessageOverrides struct {
	// Override auth-disclaimer-page message with message from portal-message-overrides group.
	AuthDisclaimerPage *string `pulumi:"authDisclaimerPage"`
	// Override auth-login-failed-page message with message from portal-message-overrides group.
	AuthLoginFailedPage *string `pulumi:"authLoginFailedPage"`
	// Override auth-login-page message with message from portal-message-overrides group.
	AuthLoginPage *string `pulumi:"authLoginPage"`
	// Override auth-reject-page message with message from portal-message-overrides group.
	AuthRejectPage *string `pulumi:"authRejectPage"`
}

// VapPortalMessageOverridesInput is an input type that accepts VapPortalMessageOverridesArgs and VapPortalMessageOverridesOutput values.
// You can construct a concrete instance of `VapPortalMessageOverridesInput` via:
//
//	VapPortalMessageOverridesArgs{...}
type VapPortalMessageOverridesInput interface {
	pulumi.Input

	ToVapPortalMessageOverridesOutput() VapPortalMessageOverridesOutput
	ToVapPortalMessageOverridesOutputWithContext(context.Context) VapPortalMessageOverridesOutput
}

type VapPortalMessageOverridesArgs struct {
	// Override auth-disclaimer-page message with message from portal-message-overrides group.
	AuthDisclaimerPage pulumi.StringPtrInput `pulumi:"authDisclaimerPage"`
	// Override auth-login-failed-page message with message from portal-message-overrides group.
	AuthLoginFailedPage pulumi.StringPtrInput `pulumi:"authLoginFailedPage"`
	// Override auth-login-page message with message from portal-message-overrides group.
	AuthLoginPage pulumi.StringPtrInput `pulumi:"authLoginPage"`
	// Override auth-reject-page message with message from portal-message-overrides group.
	AuthRejectPage pulumi.StringPtrInput `pulumi:"authRejectPage"`
}

func (VapPortalMessageOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VapPortalMessageOverrides)(nil)).Elem()
}

func (i VapPortalMessageOverridesArgs) ToVapPortalMessageOverridesOutput() VapPortalMessageOverridesOutput {
	return i.ToVapPortalMessageOverridesOutputWithContext(context.Background())
}

func (i VapPortalMessageOverridesArgs) ToVapPortalMessageOverridesOutputWithContext(ctx context.Context) VapPortalMessageOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapPortalMessageOverridesOutput)
}

func (i VapPortalMessageOverridesArgs) ToVapPortalMessageOverridesPtrOutput() VapPortalMessageOverridesPtrOutput {
	return i.ToVapPortalMessageOverridesPtrOutputWithContext(context.Background())
}

func (i VapPortalMessageOverridesArgs) ToVapPortalMessageOverridesPtrOutputWithContext(ctx context.Context) VapPortalMessageOverridesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapPortalMessageOverridesOutput).ToVapPortalMessageOverridesPtrOutputWithContext(ctx)
}

// VapPortalMessageOverridesPtrInput is an input type that accepts VapPortalMessageOverridesArgs, VapPortalMessageOverridesPtr and VapPortalMessageOverridesPtrOutput values.
// You can construct a concrete instance of `VapPortalMessageOverridesPtrInput` via:
//
//	        VapPortalMessageOverridesArgs{...}
//
//	or:
//
//	        nil
type VapPortalMessageOverridesPtrInput interface {
	pulumi.Input

	ToVapPortalMessageOverridesPtrOutput() VapPortalMessageOverridesPtrOutput
	ToVapPortalMessageOverridesPtrOutputWithContext(context.Context) VapPortalMessageOverridesPtrOutput
}

type vapPortalMessageOverridesPtrType VapPortalMessageOverridesArgs

func VapPortalMessageOverridesPtr(v *VapPortalMessageOverridesArgs) VapPortalMessageOverridesPtrInput {
	return (*vapPortalMessageOverridesPtrType)(v)
}

func (*vapPortalMessageOverridesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VapPortalMessageOverrides)(nil)).Elem()
}

func (i *vapPortalMessageOverridesPtrType) ToVapPortalMessageOverridesPtrOutput() VapPortalMessageOverridesPtrOutput {
	return i.ToVapPortalMessageOverridesPtrOutputWithContext(context.Background())
}

func (i *vapPortalMessageOverridesPtrType) ToVapPortalMessageOverridesPtrOutputWithContext(ctx context.Context) VapPortalMessageOverridesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapPortalMessageOverridesPtrOutput)
}

type VapPortalMessageOverridesOutput struct{ *pulumi.OutputState }

func (VapPortalMessageOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VapPortalMessageOverrides)(nil)).Elem()
}

func (o VapPortalMessageOverridesOutput) ToVapPortalMessageOverridesOutput() VapPortalMessageOverridesOutput {
	return o
}

func (o VapPortalMessageOverridesOutput) ToVapPortalMessageOverridesOutputWithContext(ctx context.Context) VapPortalMessageOverridesOutput {
	return o
}

func (o VapPortalMessageOverridesOutput) ToVapPortalMessageOverridesPtrOutput() VapPortalMessageOverridesPtrOutput {
	return o.ToVapPortalMessageOverridesPtrOutputWithContext(context.Background())
}

func (o VapPortalMessageOverridesOutput) ToVapPortalMessageOverridesPtrOutputWithContext(ctx context.Context) VapPortalMessageOverridesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VapPortalMessageOverrides) *VapPortalMessageOverrides {
		return &v
	}).(VapPortalMessageOverridesPtrOutput)
}

// Override auth-disclaimer-page message with message from portal-message-overrides group.
func (o VapPortalMessageOverridesOutput) AuthDisclaimerPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VapPortalMessageOverrides) *string { return v.AuthDisclaimerPage }).(pulumi.StringPtrOutput)
}

// Override auth-login-failed-page message with message from portal-message-overrides group.
func (o VapPortalMessageOverridesOutput) AuthLoginFailedPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VapPortalMessageOverrides) *string { return v.AuthLoginFailedPage }).(pulumi.StringPtrOutput)
}

// Override auth-login-page message with message from portal-message-overrides group.
func (o VapPortalMessageOverridesOutput) AuthLoginPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VapPortalMessageOverrides) *string { return v.AuthLoginPage }).(pulumi.StringPtrOutput)
}

// Override auth-reject-page message with message from portal-message-overrides group.
func (o VapPortalMessageOverridesOutput) AuthRejectPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VapPortalMessageOverrides) *string { return v.AuthRejectPage }).(pulumi.StringPtrOutput)
}

type VapPortalMessageOverridesPtrOutput struct{ *pulumi.OutputState }

func (VapPortalMessageOverridesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VapPortalMessageOverrides)(nil)).Elem()
}

func (o VapPortalMessageOverridesPtrOutput) ToVapPortalMessageOverridesPtrOutput() VapPortalMessageOverridesPtrOutput {
	return o
}

func (o VapPortalMessageOverridesPtrOutput) ToVapPortalMessageOverridesPtrOutputWithContext(ctx context.Context) VapPortalMessageOverridesPtrOutput {
	return o
}

func (o VapPortalMessageOverridesPtrOutput) Elem() VapPortalMessageOverridesOutput {
	return o.ApplyT(func(v *VapPortalMessageOverrides) VapPortalMessageOverrides {
		if v != nil {
			return *v
		}
		var ret VapPortalMessageOverrides
		return ret
	}).(VapPortalMessageOverridesOutput)
}

// Override auth-disclaimer-page message with message from portal-message-overrides group.
func (o VapPortalMessageOverridesPtrOutput) AuthDisclaimerPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VapPortalMessageOverrides) *string {
		if v == nil {
			return nil
		}
		return v.AuthDisclaimerPage
	}).(pulumi.StringPtrOutput)
}

// Override auth-login-failed-page message with message from portal-message-overrides group.
func (o VapPortalMessageOverridesPtrOutput) AuthLoginFailedPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VapPortalMessageOverrides) *string {
		if v == nil {
			return nil
		}
		return v.AuthLoginFailedPage
	}).(pulumi.StringPtrOutput)
}

// Override auth-login-page message with message from portal-message-overrides group.
func (o VapPortalMessageOverridesPtrOutput) AuthLoginPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VapPortalMessageOverrides) *string {
		if v == nil {
			return nil
		}
		return v.AuthLoginPage
	}).(pulumi.StringPtrOutput)
}

// Override auth-reject-page message with message from portal-message-overrides group.
func (o VapPortalMessageOverridesPtrOutput) AuthRejectPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VapPortalMessageOverrides) *string {
		if v == nil {
			return nil
		}
		return v.AuthRejectPage
	}).(pulumi.StringPtrOutput)
}

type VapRadiusMacAuthUsergroup struct {
	// User group name.
	Name *string `pulumi:"name"`
}

// VapRadiusMacAuthUsergroupInput is an input type that accepts VapRadiusMacAuthUsergroupArgs and VapRadiusMacAuthUsergroupOutput values.
// You can construct a concrete instance of `VapRadiusMacAuthUsergroupInput` via:
//
//	VapRadiusMacAuthUsergroupArgs{...}
type VapRadiusMacAuthUsergroupInput interface {
	pulumi.Input

	ToVapRadiusMacAuthUsergroupOutput() VapRadiusMacAuthUsergroupOutput
	ToVapRadiusMacAuthUsergroupOutputWithContext(context.Context) VapRadiusMacAuthUsergroupOutput
}

type VapRadiusMacAuthUsergroupArgs struct {
	// User group name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (VapRadiusMacAuthUsergroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VapRadiusMacAuthUsergroup)(nil)).Elem()
}

func (i VapRadiusMacAuthUsergroupArgs) ToVapRadiusMacAuthUsergroupOutput() VapRadiusMacAuthUsergroupOutput {
	return i.ToVapRadiusMacAuthUsergroupOutputWithContext(context.Background())
}

func (i VapRadiusMacAuthUsergroupArgs) ToVapRadiusMacAuthUsergroupOutputWithContext(ctx context.Context) VapRadiusMacAuthUsergroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapRadiusMacAuthUsergroupOutput)
}

// VapRadiusMacAuthUsergroupArrayInput is an input type that accepts VapRadiusMacAuthUsergroupArray and VapRadiusMacAuthUsergroupArrayOutput values.
// You can construct a concrete instance of `VapRadiusMacAuthUsergroupArrayInput` via:
//
//	VapRadiusMacAuthUsergroupArray{ VapRadiusMacAuthUsergroupArgs{...} }
type VapRadiusMacAuthUsergroupArrayInput interface {
	pulumi.Input

	ToVapRadiusMacAuthUsergroupArrayOutput() VapRadiusMacAuthUsergroupArrayOutput
	ToVapRadiusMacAuthUsergroupArrayOutputWithContext(context.Context) VapRadiusMacAuthUsergroupArrayOutput
}

type VapRadiusMacAuthUsergroupArray []VapRadiusMacAuthUsergroupInput

func (VapRadiusMacAuthUsergroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapRadiusMacAuthUsergroup)(nil)).Elem()
}

func (i VapRadiusMacAuthUsergroupArray) ToVapRadiusMacAuthUsergroupArrayOutput() VapRadiusMacAuthUsergroupArrayOutput {
	return i.ToVapRadiusMacAuthUsergroupArrayOutputWithContext(context.Background())
}

func (i VapRadiusMacAuthUsergroupArray) ToVapRadiusMacAuthUsergroupArrayOutputWithContext(ctx context.Context) VapRadiusMacAuthUsergroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapRadiusMacAuthUsergroupArrayOutput)
}

type VapRadiusMacAuthUsergroupOutput struct{ *pulumi.OutputState }

func (VapRadiusMacAuthUsergroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VapRadiusMacAuthUsergroup)(nil)).Elem()
}

func (o VapRadiusMacAuthUsergroupOutput) ToVapRadiusMacAuthUsergroupOutput() VapRadiusMacAuthUsergroupOutput {
	return o
}

func (o VapRadiusMacAuthUsergroupOutput) ToVapRadiusMacAuthUsergroupOutputWithContext(ctx context.Context) VapRadiusMacAuthUsergroupOutput {
	return o
}

// User group name.
func (o VapRadiusMacAuthUsergroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VapRadiusMacAuthUsergroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type VapRadiusMacAuthUsergroupArrayOutput struct{ *pulumi.OutputState }

func (VapRadiusMacAuthUsergroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapRadiusMacAuthUsergroup)(nil)).Elem()
}

func (o VapRadiusMacAuthUsergroupArrayOutput) ToVapRadiusMacAuthUsergroupArrayOutput() VapRadiusMacAuthUsergroupArrayOutput {
	return o
}

func (o VapRadiusMacAuthUsergroupArrayOutput) ToVapRadiusMacAuthUsergroupArrayOutputWithContext(ctx context.Context) VapRadiusMacAuthUsergroupArrayOutput {
	return o
}

func (o VapRadiusMacAuthUsergroupArrayOutput) Index(i pulumi.IntInput) VapRadiusMacAuthUsergroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VapRadiusMacAuthUsergroup {
		return vs[0].([]VapRadiusMacAuthUsergroup)[vs[1].(int)]
	}).(VapRadiusMacAuthUsergroupOutput)
}

type VapSelectedUsergroup struct {
	// User group name.
	Name *string `pulumi:"name"`
}

// VapSelectedUsergroupInput is an input type that accepts VapSelectedUsergroupArgs and VapSelectedUsergroupOutput values.
// You can construct a concrete instance of `VapSelectedUsergroupInput` via:
//
//	VapSelectedUsergroupArgs{...}
type VapSelectedUsergroupInput interface {
	pulumi.Input

	ToVapSelectedUsergroupOutput() VapSelectedUsergroupOutput
	ToVapSelectedUsergroupOutputWithContext(context.Context) VapSelectedUsergroupOutput
}

type VapSelectedUsergroupArgs struct {
	// User group name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (VapSelectedUsergroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VapSelectedUsergroup)(nil)).Elem()
}

func (i VapSelectedUsergroupArgs) ToVapSelectedUsergroupOutput() VapSelectedUsergroupOutput {
	return i.ToVapSelectedUsergroupOutputWithContext(context.Background())
}

func (i VapSelectedUsergroupArgs) ToVapSelectedUsergroupOutputWithContext(ctx context.Context) VapSelectedUsergroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapSelectedUsergroupOutput)
}

// VapSelectedUsergroupArrayInput is an input type that accepts VapSelectedUsergroupArray and VapSelectedUsergroupArrayOutput values.
// You can construct a concrete instance of `VapSelectedUsergroupArrayInput` via:
//
//	VapSelectedUsergroupArray{ VapSelectedUsergroupArgs{...} }
type VapSelectedUsergroupArrayInput interface {
	pulumi.Input

	ToVapSelectedUsergroupArrayOutput() VapSelectedUsergroupArrayOutput
	ToVapSelectedUsergroupArrayOutputWithContext(context.Context) VapSelectedUsergroupArrayOutput
}

type VapSelectedUsergroupArray []VapSelectedUsergroupInput

func (VapSelectedUsergroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapSelectedUsergroup)(nil)).Elem()
}

func (i VapSelectedUsergroupArray) ToVapSelectedUsergroupArrayOutput() VapSelectedUsergroupArrayOutput {
	return i.ToVapSelectedUsergroupArrayOutputWithContext(context.Background())
}

func (i VapSelectedUsergroupArray) ToVapSelectedUsergroupArrayOutputWithContext(ctx context.Context) VapSelectedUsergroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapSelectedUsergroupArrayOutput)
}

type VapSelectedUsergroupOutput struct{ *pulumi.OutputState }

func (VapSelectedUsergroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VapSelectedUsergroup)(nil)).Elem()
}

func (o VapSelectedUsergroupOutput) ToVapSelectedUsergroupOutput() VapSelectedUsergroupOutput {
	return o
}

func (o VapSelectedUsergroupOutput) ToVapSelectedUsergroupOutputWithContext(ctx context.Context) VapSelectedUsergroupOutput {
	return o
}

// User group name.
func (o VapSelectedUsergroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VapSelectedUsergroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type VapSelectedUsergroupArrayOutput struct{ *pulumi.OutputState }

func (VapSelectedUsergroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapSelectedUsergroup)(nil)).Elem()
}

func (o VapSelectedUsergroupArrayOutput) ToVapSelectedUsergroupArrayOutput() VapSelectedUsergroupArrayOutput {
	return o
}

func (o VapSelectedUsergroupArrayOutput) ToVapSelectedUsergroupArrayOutputWithContext(ctx context.Context) VapSelectedUsergroupArrayOutput {
	return o
}

func (o VapSelectedUsergroupArrayOutput) Index(i pulumi.IntInput) VapSelectedUsergroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VapSelectedUsergroup {
		return vs[0].([]VapSelectedUsergroup)[vs[1].(int)]
	}).(VapSelectedUsergroupOutput)
}

type VapUsergroup struct {
	// User group name.
	Name *string `pulumi:"name"`
}

// VapUsergroupInput is an input type that accepts VapUsergroupArgs and VapUsergroupOutput values.
// You can construct a concrete instance of `VapUsergroupInput` via:
//
//	VapUsergroupArgs{...}
type VapUsergroupInput interface {
	pulumi.Input

	ToVapUsergroupOutput() VapUsergroupOutput
	ToVapUsergroupOutputWithContext(context.Context) VapUsergroupOutput
}

type VapUsergroupArgs struct {
	// User group name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (VapUsergroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VapUsergroup)(nil)).Elem()
}

func (i VapUsergroupArgs) ToVapUsergroupOutput() VapUsergroupOutput {
	return i.ToVapUsergroupOutputWithContext(context.Background())
}

func (i VapUsergroupArgs) ToVapUsergroupOutputWithContext(ctx context.Context) VapUsergroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapUsergroupOutput)
}

// VapUsergroupArrayInput is an input type that accepts VapUsergroupArray and VapUsergroupArrayOutput values.
// You can construct a concrete instance of `VapUsergroupArrayInput` via:
//
//	VapUsergroupArray{ VapUsergroupArgs{...} }
type VapUsergroupArrayInput interface {
	pulumi.Input

	ToVapUsergroupArrayOutput() VapUsergroupArrayOutput
	ToVapUsergroupArrayOutputWithContext(context.Context) VapUsergroupArrayOutput
}

type VapUsergroupArray []VapUsergroupInput

func (VapUsergroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapUsergroup)(nil)).Elem()
}

func (i VapUsergroupArray) ToVapUsergroupArrayOutput() VapUsergroupArrayOutput {
	return i.ToVapUsergroupArrayOutputWithContext(context.Background())
}

func (i VapUsergroupArray) ToVapUsergroupArrayOutputWithContext(ctx context.Context) VapUsergroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapUsergroupArrayOutput)
}

type VapUsergroupOutput struct{ *pulumi.OutputState }

func (VapUsergroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VapUsergroup)(nil)).Elem()
}

func (o VapUsergroupOutput) ToVapUsergroupOutput() VapUsergroupOutput {
	return o
}

func (o VapUsergroupOutput) ToVapUsergroupOutputWithContext(ctx context.Context) VapUsergroupOutput {
	return o
}

// User group name.
func (o VapUsergroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VapUsergroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type VapUsergroupArrayOutput struct{ *pulumi.OutputState }

func (VapUsergroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapUsergroup)(nil)).Elem()
}

func (o VapUsergroupArrayOutput) ToVapUsergroupArrayOutput() VapUsergroupArrayOutput {
	return o
}

func (o VapUsergroupArrayOutput) ToVapUsergroupArrayOutputWithContext(ctx context.Context) VapUsergroupArrayOutput {
	return o
}

func (o VapUsergroupArrayOutput) Index(i pulumi.IntInput) VapUsergroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VapUsergroup {
		return vs[0].([]VapUsergroup)[vs[1].(int)]
	}).(VapUsergroupOutput)
}

type VapVlanName struct {
	// VLAN name.
	Name *string `pulumi:"name"`
	// VLAN ID.
	VlanId *int `pulumi:"vlanId"`
}

// VapVlanNameInput is an input type that accepts VapVlanNameArgs and VapVlanNameOutput values.
// You can construct a concrete instance of `VapVlanNameInput` via:
//
//	VapVlanNameArgs{...}
type VapVlanNameInput interface {
	pulumi.Input

	ToVapVlanNameOutput() VapVlanNameOutput
	ToVapVlanNameOutputWithContext(context.Context) VapVlanNameOutput
}

type VapVlanNameArgs struct {
	// VLAN name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// VLAN ID.
	VlanId pulumi.IntPtrInput `pulumi:"vlanId"`
}

func (VapVlanNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VapVlanName)(nil)).Elem()
}

func (i VapVlanNameArgs) ToVapVlanNameOutput() VapVlanNameOutput {
	return i.ToVapVlanNameOutputWithContext(context.Background())
}

func (i VapVlanNameArgs) ToVapVlanNameOutputWithContext(ctx context.Context) VapVlanNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapVlanNameOutput)
}

// VapVlanNameArrayInput is an input type that accepts VapVlanNameArray and VapVlanNameArrayOutput values.
// You can construct a concrete instance of `VapVlanNameArrayInput` via:
//
//	VapVlanNameArray{ VapVlanNameArgs{...} }
type VapVlanNameArrayInput interface {
	pulumi.Input

	ToVapVlanNameArrayOutput() VapVlanNameArrayOutput
	ToVapVlanNameArrayOutputWithContext(context.Context) VapVlanNameArrayOutput
}

type VapVlanNameArray []VapVlanNameInput

func (VapVlanNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapVlanName)(nil)).Elem()
}

func (i VapVlanNameArray) ToVapVlanNameArrayOutput() VapVlanNameArrayOutput {
	return i.ToVapVlanNameArrayOutputWithContext(context.Background())
}

func (i VapVlanNameArray) ToVapVlanNameArrayOutputWithContext(ctx context.Context) VapVlanNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapVlanNameArrayOutput)
}

type VapVlanNameOutput struct{ *pulumi.OutputState }

func (VapVlanNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VapVlanName)(nil)).Elem()
}

func (o VapVlanNameOutput) ToVapVlanNameOutput() VapVlanNameOutput {
	return o
}

func (o VapVlanNameOutput) ToVapVlanNameOutputWithContext(ctx context.Context) VapVlanNameOutput {
	return o
}

// VLAN name.
func (o VapVlanNameOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VapVlanName) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// VLAN ID.
func (o VapVlanNameOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VapVlanName) *int { return v.VlanId }).(pulumi.IntPtrOutput)
}

type VapVlanNameArrayOutput struct{ *pulumi.OutputState }

func (VapVlanNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapVlanName)(nil)).Elem()
}

func (o VapVlanNameArrayOutput) ToVapVlanNameArrayOutput() VapVlanNameArrayOutput {
	return o
}

func (o VapVlanNameArrayOutput) ToVapVlanNameArrayOutputWithContext(ctx context.Context) VapVlanNameArrayOutput {
	return o
}

func (o VapVlanNameArrayOutput) Index(i pulumi.IntInput) VapVlanNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VapVlanName {
		return vs[0].([]VapVlanName)[vs[1].(int)]
	}).(VapVlanNameOutput)
}

type VapVlanPool struct {
	// ID.
	Id *int `pulumi:"id"`
	// WTP group name.
	WtpGroup *string `pulumi:"wtpGroup"`
}

// VapVlanPoolInput is an input type that accepts VapVlanPoolArgs and VapVlanPoolOutput values.
// You can construct a concrete instance of `VapVlanPoolInput` via:
//
//	VapVlanPoolArgs{...}
type VapVlanPoolInput interface {
	pulumi.Input

	ToVapVlanPoolOutput() VapVlanPoolOutput
	ToVapVlanPoolOutputWithContext(context.Context) VapVlanPoolOutput
}

type VapVlanPoolArgs struct {
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// WTP group name.
	WtpGroup pulumi.StringPtrInput `pulumi:"wtpGroup"`
}

func (VapVlanPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VapVlanPool)(nil)).Elem()
}

func (i VapVlanPoolArgs) ToVapVlanPoolOutput() VapVlanPoolOutput {
	return i.ToVapVlanPoolOutputWithContext(context.Background())
}

func (i VapVlanPoolArgs) ToVapVlanPoolOutputWithContext(ctx context.Context) VapVlanPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapVlanPoolOutput)
}

// VapVlanPoolArrayInput is an input type that accepts VapVlanPoolArray and VapVlanPoolArrayOutput values.
// You can construct a concrete instance of `VapVlanPoolArrayInput` via:
//
//	VapVlanPoolArray{ VapVlanPoolArgs{...} }
type VapVlanPoolArrayInput interface {
	pulumi.Input

	ToVapVlanPoolArrayOutput() VapVlanPoolArrayOutput
	ToVapVlanPoolArrayOutputWithContext(context.Context) VapVlanPoolArrayOutput
}

type VapVlanPoolArray []VapVlanPoolInput

func (VapVlanPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapVlanPool)(nil)).Elem()
}

func (i VapVlanPoolArray) ToVapVlanPoolArrayOutput() VapVlanPoolArrayOutput {
	return i.ToVapVlanPoolArrayOutputWithContext(context.Background())
}

func (i VapVlanPoolArray) ToVapVlanPoolArrayOutputWithContext(ctx context.Context) VapVlanPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapVlanPoolArrayOutput)
}

type VapVlanPoolOutput struct{ *pulumi.OutputState }

func (VapVlanPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VapVlanPool)(nil)).Elem()
}

func (o VapVlanPoolOutput) ToVapVlanPoolOutput() VapVlanPoolOutput {
	return o
}

func (o VapVlanPoolOutput) ToVapVlanPoolOutputWithContext(ctx context.Context) VapVlanPoolOutput {
	return o
}

// ID.
func (o VapVlanPoolOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VapVlanPool) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// WTP group name.
func (o VapVlanPoolOutput) WtpGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VapVlanPool) *string { return v.WtpGroup }).(pulumi.StringPtrOutput)
}

type VapVlanPoolArrayOutput struct{ *pulumi.OutputState }

func (VapVlanPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapVlanPool)(nil)).Elem()
}

func (o VapVlanPoolArrayOutput) ToVapVlanPoolArrayOutput() VapVlanPoolArrayOutput {
	return o
}

func (o VapVlanPoolArrayOutput) ToVapVlanPoolArrayOutputWithContext(ctx context.Context) VapVlanPoolArrayOutput {
	return o
}

func (o VapVlanPoolArrayOutput) Index(i pulumi.IntInput) VapVlanPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VapVlanPool {
		return vs[0].([]VapVlanPool)[vs[1].(int)]
	}).(VapVlanPoolOutput)
}

type VapgroupVap struct {
	// vap name
	Name *string `pulumi:"name"`
}

// VapgroupVapInput is an input type that accepts VapgroupVapArgs and VapgroupVapOutput values.
// You can construct a concrete instance of `VapgroupVapInput` via:
//
//	VapgroupVapArgs{...}
type VapgroupVapInput interface {
	pulumi.Input

	ToVapgroupVapOutput() VapgroupVapOutput
	ToVapgroupVapOutputWithContext(context.Context) VapgroupVapOutput
}

type VapgroupVapArgs struct {
	// vap name
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (VapgroupVapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VapgroupVap)(nil)).Elem()
}

func (i VapgroupVapArgs) ToVapgroupVapOutput() VapgroupVapOutput {
	return i.ToVapgroupVapOutputWithContext(context.Background())
}

func (i VapgroupVapArgs) ToVapgroupVapOutputWithContext(ctx context.Context) VapgroupVapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapgroupVapOutput)
}

// VapgroupVapArrayInput is an input type that accepts VapgroupVapArray and VapgroupVapArrayOutput values.
// You can construct a concrete instance of `VapgroupVapArrayInput` via:
//
//	VapgroupVapArray{ VapgroupVapArgs{...} }
type VapgroupVapArrayInput interface {
	pulumi.Input

	ToVapgroupVapArrayOutput() VapgroupVapArrayOutput
	ToVapgroupVapArrayOutputWithContext(context.Context) VapgroupVapArrayOutput
}

type VapgroupVapArray []VapgroupVapInput

func (VapgroupVapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapgroupVap)(nil)).Elem()
}

func (i VapgroupVapArray) ToVapgroupVapArrayOutput() VapgroupVapArrayOutput {
	return i.ToVapgroupVapArrayOutputWithContext(context.Background())
}

func (i VapgroupVapArray) ToVapgroupVapArrayOutputWithContext(ctx context.Context) VapgroupVapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VapgroupVapArrayOutput)
}

type VapgroupVapOutput struct{ *pulumi.OutputState }

func (VapgroupVapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VapgroupVap)(nil)).Elem()
}

func (o VapgroupVapOutput) ToVapgroupVapOutput() VapgroupVapOutput {
	return o
}

func (o VapgroupVapOutput) ToVapgroupVapOutputWithContext(ctx context.Context) VapgroupVapOutput {
	return o
}

// vap name
func (o VapgroupVapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VapgroupVap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type VapgroupVapArrayOutput struct{ *pulumi.OutputState }

func (VapgroupVapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VapgroupVap)(nil)).Elem()
}

func (o VapgroupVapArrayOutput) ToVapgroupVapArrayOutput() VapgroupVapArrayOutput {
	return o
}

func (o VapgroupVapArrayOutput) ToVapgroupVapArrayOutputWithContext(ctx context.Context) VapgroupVapArrayOutput {
	return o
}

func (o VapgroupVapArrayOutput) Index(i pulumi.IntInput) VapgroupVapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VapgroupVap {
		return vs[0].([]VapgroupVap)[vs[1].(int)]
	}).(VapgroupVapOutput)
}

type WidsprofileApBgscanDisableSchedule struct {
	// Schedule name.
	Name *string `pulumi:"name"`
}

// WidsprofileApBgscanDisableScheduleInput is an input type that accepts WidsprofileApBgscanDisableScheduleArgs and WidsprofileApBgscanDisableScheduleOutput values.
// You can construct a concrete instance of `WidsprofileApBgscanDisableScheduleInput` via:
//
//	WidsprofileApBgscanDisableScheduleArgs{...}
type WidsprofileApBgscanDisableScheduleInput interface {
	pulumi.Input

	ToWidsprofileApBgscanDisableScheduleOutput() WidsprofileApBgscanDisableScheduleOutput
	ToWidsprofileApBgscanDisableScheduleOutputWithContext(context.Context) WidsprofileApBgscanDisableScheduleOutput
}

type WidsprofileApBgscanDisableScheduleArgs struct {
	// Schedule name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (WidsprofileApBgscanDisableScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WidsprofileApBgscanDisableSchedule)(nil)).Elem()
}

func (i WidsprofileApBgscanDisableScheduleArgs) ToWidsprofileApBgscanDisableScheduleOutput() WidsprofileApBgscanDisableScheduleOutput {
	return i.ToWidsprofileApBgscanDisableScheduleOutputWithContext(context.Background())
}

func (i WidsprofileApBgscanDisableScheduleArgs) ToWidsprofileApBgscanDisableScheduleOutputWithContext(ctx context.Context) WidsprofileApBgscanDisableScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WidsprofileApBgscanDisableScheduleOutput)
}

// WidsprofileApBgscanDisableScheduleArrayInput is an input type that accepts WidsprofileApBgscanDisableScheduleArray and WidsprofileApBgscanDisableScheduleArrayOutput values.
// You can construct a concrete instance of `WidsprofileApBgscanDisableScheduleArrayInput` via:
//
//	WidsprofileApBgscanDisableScheduleArray{ WidsprofileApBgscanDisableScheduleArgs{...} }
type WidsprofileApBgscanDisableScheduleArrayInput interface {
	pulumi.Input

	ToWidsprofileApBgscanDisableScheduleArrayOutput() WidsprofileApBgscanDisableScheduleArrayOutput
	ToWidsprofileApBgscanDisableScheduleArrayOutputWithContext(context.Context) WidsprofileApBgscanDisableScheduleArrayOutput
}

type WidsprofileApBgscanDisableScheduleArray []WidsprofileApBgscanDisableScheduleInput

func (WidsprofileApBgscanDisableScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WidsprofileApBgscanDisableSchedule)(nil)).Elem()
}

func (i WidsprofileApBgscanDisableScheduleArray) ToWidsprofileApBgscanDisableScheduleArrayOutput() WidsprofileApBgscanDisableScheduleArrayOutput {
	return i.ToWidsprofileApBgscanDisableScheduleArrayOutputWithContext(context.Background())
}

func (i WidsprofileApBgscanDisableScheduleArray) ToWidsprofileApBgscanDisableScheduleArrayOutputWithContext(ctx context.Context) WidsprofileApBgscanDisableScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WidsprofileApBgscanDisableScheduleArrayOutput)
}

type WidsprofileApBgscanDisableScheduleOutput struct{ *pulumi.OutputState }

func (WidsprofileApBgscanDisableScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WidsprofileApBgscanDisableSchedule)(nil)).Elem()
}

func (o WidsprofileApBgscanDisableScheduleOutput) ToWidsprofileApBgscanDisableScheduleOutput() WidsprofileApBgscanDisableScheduleOutput {
	return o
}

func (o WidsprofileApBgscanDisableScheduleOutput) ToWidsprofileApBgscanDisableScheduleOutputWithContext(ctx context.Context) WidsprofileApBgscanDisableScheduleOutput {
	return o
}

// Schedule name.
func (o WidsprofileApBgscanDisableScheduleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WidsprofileApBgscanDisableSchedule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type WidsprofileApBgscanDisableScheduleArrayOutput struct{ *pulumi.OutputState }

func (WidsprofileApBgscanDisableScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WidsprofileApBgscanDisableSchedule)(nil)).Elem()
}

func (o WidsprofileApBgscanDisableScheduleArrayOutput) ToWidsprofileApBgscanDisableScheduleArrayOutput() WidsprofileApBgscanDisableScheduleArrayOutput {
	return o
}

func (o WidsprofileApBgscanDisableScheduleArrayOutput) ToWidsprofileApBgscanDisableScheduleArrayOutputWithContext(ctx context.Context) WidsprofileApBgscanDisableScheduleArrayOutput {
	return o
}

func (o WidsprofileApBgscanDisableScheduleArrayOutput) Index(i pulumi.IntInput) WidsprofileApBgscanDisableScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WidsprofileApBgscanDisableSchedule {
		return vs[0].([]WidsprofileApBgscanDisableSchedule)[vs[1].(int)]
	}).(WidsprofileApBgscanDisableScheduleOutput)
}

type WidsprofileApScanChannelList2g5g struct {
	// Channel 6g number.
	Chan *string `pulumi:"chan"`
}

// WidsprofileApScanChannelList2g5gInput is an input type that accepts WidsprofileApScanChannelList2g5gArgs and WidsprofileApScanChannelList2g5gOutput values.
// You can construct a concrete instance of `WidsprofileApScanChannelList2g5gInput` via:
//
//	WidsprofileApScanChannelList2g5gArgs{...}
type WidsprofileApScanChannelList2g5gInput interface {
	pulumi.Input

	ToWidsprofileApScanChannelList2g5gOutput() WidsprofileApScanChannelList2g5gOutput
	ToWidsprofileApScanChannelList2g5gOutputWithContext(context.Context) WidsprofileApScanChannelList2g5gOutput
}

type WidsprofileApScanChannelList2g5gArgs struct {
	// Channel 6g number.
	Chan pulumi.StringPtrInput `pulumi:"chan"`
}

func (WidsprofileApScanChannelList2g5gArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WidsprofileApScanChannelList2g5g)(nil)).Elem()
}

func (i WidsprofileApScanChannelList2g5gArgs) ToWidsprofileApScanChannelList2g5gOutput() WidsprofileApScanChannelList2g5gOutput {
	return i.ToWidsprofileApScanChannelList2g5gOutputWithContext(context.Background())
}

func (i WidsprofileApScanChannelList2g5gArgs) ToWidsprofileApScanChannelList2g5gOutputWithContext(ctx context.Context) WidsprofileApScanChannelList2g5gOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WidsprofileApScanChannelList2g5gOutput)
}

// WidsprofileApScanChannelList2g5gArrayInput is an input type that accepts WidsprofileApScanChannelList2g5gArray and WidsprofileApScanChannelList2g5gArrayOutput values.
// You can construct a concrete instance of `WidsprofileApScanChannelList2g5gArrayInput` via:
//
//	WidsprofileApScanChannelList2g5gArray{ WidsprofileApScanChannelList2g5gArgs{...} }
type WidsprofileApScanChannelList2g5gArrayInput interface {
	pulumi.Input

	ToWidsprofileApScanChannelList2g5gArrayOutput() WidsprofileApScanChannelList2g5gArrayOutput
	ToWidsprofileApScanChannelList2g5gArrayOutputWithContext(context.Context) WidsprofileApScanChannelList2g5gArrayOutput
}

type WidsprofileApScanChannelList2g5gArray []WidsprofileApScanChannelList2g5gInput

func (WidsprofileApScanChannelList2g5gArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WidsprofileApScanChannelList2g5g)(nil)).Elem()
}

func (i WidsprofileApScanChannelList2g5gArray) ToWidsprofileApScanChannelList2g5gArrayOutput() WidsprofileApScanChannelList2g5gArrayOutput {
	return i.ToWidsprofileApScanChannelList2g5gArrayOutputWithContext(context.Background())
}

func (i WidsprofileApScanChannelList2g5gArray) ToWidsprofileApScanChannelList2g5gArrayOutputWithContext(ctx context.Context) WidsprofileApScanChannelList2g5gArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WidsprofileApScanChannelList2g5gArrayOutput)
}

type WidsprofileApScanChannelList2g5gOutput struct{ *pulumi.OutputState }

func (WidsprofileApScanChannelList2g5gOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WidsprofileApScanChannelList2g5g)(nil)).Elem()
}

func (o WidsprofileApScanChannelList2g5gOutput) ToWidsprofileApScanChannelList2g5gOutput() WidsprofileApScanChannelList2g5gOutput {
	return o
}

func (o WidsprofileApScanChannelList2g5gOutput) ToWidsprofileApScanChannelList2g5gOutputWithContext(ctx context.Context) WidsprofileApScanChannelList2g5gOutput {
	return o
}

// Channel 6g number.
func (o WidsprofileApScanChannelList2g5gOutput) Chan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WidsprofileApScanChannelList2g5g) *string { return v.Chan }).(pulumi.StringPtrOutput)
}

type WidsprofileApScanChannelList2g5gArrayOutput struct{ *pulumi.OutputState }

func (WidsprofileApScanChannelList2g5gArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WidsprofileApScanChannelList2g5g)(nil)).Elem()
}

func (o WidsprofileApScanChannelList2g5gArrayOutput) ToWidsprofileApScanChannelList2g5gArrayOutput() WidsprofileApScanChannelList2g5gArrayOutput {
	return o
}

func (o WidsprofileApScanChannelList2g5gArrayOutput) ToWidsprofileApScanChannelList2g5gArrayOutputWithContext(ctx context.Context) WidsprofileApScanChannelList2g5gArrayOutput {
	return o
}

func (o WidsprofileApScanChannelList2g5gArrayOutput) Index(i pulumi.IntInput) WidsprofileApScanChannelList2g5gOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WidsprofileApScanChannelList2g5g {
		return vs[0].([]WidsprofileApScanChannelList2g5g)[vs[1].(int)]
	}).(WidsprofileApScanChannelList2g5gOutput)
}

type WidsprofileApScanChannelList6g struct {
	// Channel 6g number.
	Chan *string `pulumi:"chan"`
}

// WidsprofileApScanChannelList6gInput is an input type that accepts WidsprofileApScanChannelList6gArgs and WidsprofileApScanChannelList6gOutput values.
// You can construct a concrete instance of `WidsprofileApScanChannelList6gInput` via:
//
//	WidsprofileApScanChannelList6gArgs{...}
type WidsprofileApScanChannelList6gInput interface {
	pulumi.Input

	ToWidsprofileApScanChannelList6gOutput() WidsprofileApScanChannelList6gOutput
	ToWidsprofileApScanChannelList6gOutputWithContext(context.Context) WidsprofileApScanChannelList6gOutput
}

type WidsprofileApScanChannelList6gArgs struct {
	// Channel 6g number.
	Chan pulumi.StringPtrInput `pulumi:"chan"`
}

func (WidsprofileApScanChannelList6gArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WidsprofileApScanChannelList6g)(nil)).Elem()
}

func (i WidsprofileApScanChannelList6gArgs) ToWidsprofileApScanChannelList6gOutput() WidsprofileApScanChannelList6gOutput {
	return i.ToWidsprofileApScanChannelList6gOutputWithContext(context.Background())
}

func (i WidsprofileApScanChannelList6gArgs) ToWidsprofileApScanChannelList6gOutputWithContext(ctx context.Context) WidsprofileApScanChannelList6gOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WidsprofileApScanChannelList6gOutput)
}

// WidsprofileApScanChannelList6gArrayInput is an input type that accepts WidsprofileApScanChannelList6gArray and WidsprofileApScanChannelList6gArrayOutput values.
// You can construct a concrete instance of `WidsprofileApScanChannelList6gArrayInput` via:
//
//	WidsprofileApScanChannelList6gArray{ WidsprofileApScanChannelList6gArgs{...} }
type WidsprofileApScanChannelList6gArrayInput interface {
	pulumi.Input

	ToWidsprofileApScanChannelList6gArrayOutput() WidsprofileApScanChannelList6gArrayOutput
	ToWidsprofileApScanChannelList6gArrayOutputWithContext(context.Context) WidsprofileApScanChannelList6gArrayOutput
}

type WidsprofileApScanChannelList6gArray []WidsprofileApScanChannelList6gInput

func (WidsprofileApScanChannelList6gArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WidsprofileApScanChannelList6g)(nil)).Elem()
}

func (i WidsprofileApScanChannelList6gArray) ToWidsprofileApScanChannelList6gArrayOutput() WidsprofileApScanChannelList6gArrayOutput {
	return i.ToWidsprofileApScanChannelList6gArrayOutputWithContext(context.Background())
}

func (i WidsprofileApScanChannelList6gArray) ToWidsprofileApScanChannelList6gArrayOutputWithContext(ctx context.Context) WidsprofileApScanChannelList6gArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WidsprofileApScanChannelList6gArrayOutput)
}

type WidsprofileApScanChannelList6gOutput struct{ *pulumi.OutputState }

func (WidsprofileApScanChannelList6gOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WidsprofileApScanChannelList6g)(nil)).Elem()
}

func (o WidsprofileApScanChannelList6gOutput) ToWidsprofileApScanChannelList6gOutput() WidsprofileApScanChannelList6gOutput {
	return o
}

func (o WidsprofileApScanChannelList6gOutput) ToWidsprofileApScanChannelList6gOutputWithContext(ctx context.Context) WidsprofileApScanChannelList6gOutput {
	return o
}

// Channel 6g number.
func (o WidsprofileApScanChannelList6gOutput) Chan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WidsprofileApScanChannelList6g) *string { return v.Chan }).(pulumi.StringPtrOutput)
}

type WidsprofileApScanChannelList6gArrayOutput struct{ *pulumi.OutputState }

func (WidsprofileApScanChannelList6gArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WidsprofileApScanChannelList6g)(nil)).Elem()
}

func (o WidsprofileApScanChannelList6gArrayOutput) ToWidsprofileApScanChannelList6gArrayOutput() WidsprofileApScanChannelList6gArrayOutput {
	return o
}

func (o WidsprofileApScanChannelList6gArrayOutput) ToWidsprofileApScanChannelList6gArrayOutputWithContext(ctx context.Context) WidsprofileApScanChannelList6gArrayOutput {
	return o
}

func (o WidsprofileApScanChannelList6gArrayOutput) Index(i pulumi.IntInput) WidsprofileApScanChannelList6gOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WidsprofileApScanChannelList6g {
		return vs[0].([]WidsprofileApScanChannelList6g)[vs[1].(int)]
	}).(WidsprofileApScanChannelList6gOutput)
}

type WtpLan struct {
	// LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port1Mode *string `pulumi:"port1Mode"`
	// Bridge LAN port 1 to SSID.
	Port1Ssid *string `pulumi:"port1Ssid"`
	// LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port2Mode *string `pulumi:"port2Mode"`
	// Bridge LAN port 2 to SSID.
	Port2Ssid *string `pulumi:"port2Ssid"`
	// LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port3Mode *string `pulumi:"port3Mode"`
	// Bridge LAN port 3 to SSID.
	Port3Ssid *string `pulumi:"port3Ssid"`
	// LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port4Mode *string `pulumi:"port4Mode"`
	// Bridge LAN port 4 to SSID.
	Port4Ssid *string `pulumi:"port4Ssid"`
	// LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port5Mode *string `pulumi:"port5Mode"`
	// Bridge LAN port 5 to SSID.
	Port5Ssid *string `pulumi:"port5Ssid"`
	// LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port6Mode *string `pulumi:"port6Mode"`
	// Bridge LAN port 6 to SSID.
	Port6Ssid *string `pulumi:"port6Ssid"`
	// LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port7Mode *string `pulumi:"port7Mode"`
	// Bridge LAN port 7 to SSID.
	Port7Ssid *string `pulumi:"port7Ssid"`
	// LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port8Mode *string `pulumi:"port8Mode"`
	// Bridge LAN port 8 to SSID.
	Port8Ssid *string `pulumi:"port8Ssid"`
	// ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	PortEslMode *string `pulumi:"portEslMode"`
	// Bridge ESL port to SSID.
	//
	// The `radio1` block supports:
	PortEslSsid *string `pulumi:"portEslSsid"`
	// LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	PortMode *string `pulumi:"portMode"`
	// Bridge LAN port to SSID.
	PortSsid *string `pulumi:"portSsid"`
}

// WtpLanInput is an input type that accepts WtpLanArgs and WtpLanOutput values.
// You can construct a concrete instance of `WtpLanInput` via:
//
//	WtpLanArgs{...}
type WtpLanInput interface {
	pulumi.Input

	ToWtpLanOutput() WtpLanOutput
	ToWtpLanOutputWithContext(context.Context) WtpLanOutput
}

type WtpLanArgs struct {
	// LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port1Mode pulumi.StringPtrInput `pulumi:"port1Mode"`
	// Bridge LAN port 1 to SSID.
	Port1Ssid pulumi.StringPtrInput `pulumi:"port1Ssid"`
	// LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port2Mode pulumi.StringPtrInput `pulumi:"port2Mode"`
	// Bridge LAN port 2 to SSID.
	Port2Ssid pulumi.StringPtrInput `pulumi:"port2Ssid"`
	// LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port3Mode pulumi.StringPtrInput `pulumi:"port3Mode"`
	// Bridge LAN port 3 to SSID.
	Port3Ssid pulumi.StringPtrInput `pulumi:"port3Ssid"`
	// LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port4Mode pulumi.StringPtrInput `pulumi:"port4Mode"`
	// Bridge LAN port 4 to SSID.
	Port4Ssid pulumi.StringPtrInput `pulumi:"port4Ssid"`
	// LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port5Mode pulumi.StringPtrInput `pulumi:"port5Mode"`
	// Bridge LAN port 5 to SSID.
	Port5Ssid pulumi.StringPtrInput `pulumi:"port5Ssid"`
	// LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port6Mode pulumi.StringPtrInput `pulumi:"port6Mode"`
	// Bridge LAN port 6 to SSID.
	Port6Ssid pulumi.StringPtrInput `pulumi:"port6Ssid"`
	// LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port7Mode pulumi.StringPtrInput `pulumi:"port7Mode"`
	// Bridge LAN port 7 to SSID.
	Port7Ssid pulumi.StringPtrInput `pulumi:"port7Ssid"`
	// LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port8Mode pulumi.StringPtrInput `pulumi:"port8Mode"`
	// Bridge LAN port 8 to SSID.
	Port8Ssid pulumi.StringPtrInput `pulumi:"port8Ssid"`
	// ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	PortEslMode pulumi.StringPtrInput `pulumi:"portEslMode"`
	// Bridge ESL port to SSID.
	//
	// The `radio1` block supports:
	PortEslSsid pulumi.StringPtrInput `pulumi:"portEslSsid"`
	// LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	PortMode pulumi.StringPtrInput `pulumi:"portMode"`
	// Bridge LAN port to SSID.
	PortSsid pulumi.StringPtrInput `pulumi:"portSsid"`
}

func (WtpLanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpLan)(nil)).Elem()
}

func (i WtpLanArgs) ToWtpLanOutput() WtpLanOutput {
	return i.ToWtpLanOutputWithContext(context.Background())
}

func (i WtpLanArgs) ToWtpLanOutputWithContext(ctx context.Context) WtpLanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpLanOutput)
}

func (i WtpLanArgs) ToWtpLanPtrOutput() WtpLanPtrOutput {
	return i.ToWtpLanPtrOutputWithContext(context.Background())
}

func (i WtpLanArgs) ToWtpLanPtrOutputWithContext(ctx context.Context) WtpLanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpLanOutput).ToWtpLanPtrOutputWithContext(ctx)
}

// WtpLanPtrInput is an input type that accepts WtpLanArgs, WtpLanPtr and WtpLanPtrOutput values.
// You can construct a concrete instance of `WtpLanPtrInput` via:
//
//	        WtpLanArgs{...}
//
//	or:
//
//	        nil
type WtpLanPtrInput interface {
	pulumi.Input

	ToWtpLanPtrOutput() WtpLanPtrOutput
	ToWtpLanPtrOutputWithContext(context.Context) WtpLanPtrOutput
}

type wtpLanPtrType WtpLanArgs

func WtpLanPtr(v *WtpLanArgs) WtpLanPtrInput {
	return (*wtpLanPtrType)(v)
}

func (*wtpLanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpLan)(nil)).Elem()
}

func (i *wtpLanPtrType) ToWtpLanPtrOutput() WtpLanPtrOutput {
	return i.ToWtpLanPtrOutputWithContext(context.Background())
}

func (i *wtpLanPtrType) ToWtpLanPtrOutputWithContext(ctx context.Context) WtpLanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpLanPtrOutput)
}

type WtpLanOutput struct{ *pulumi.OutputState }

func (WtpLanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpLan)(nil)).Elem()
}

func (o WtpLanOutput) ToWtpLanOutput() WtpLanOutput {
	return o
}

func (o WtpLanOutput) ToWtpLanOutputWithContext(ctx context.Context) WtpLanOutput {
	return o
}

func (o WtpLanOutput) ToWtpLanPtrOutput() WtpLanPtrOutput {
	return o.ToWtpLanPtrOutputWithContext(context.Background())
}

func (o WtpLanOutput) ToWtpLanPtrOutputWithContext(ctx context.Context) WtpLanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WtpLan) *WtpLan {
		return &v
	}).(WtpLanPtrOutput)
}

// LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanOutput) Port1Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.Port1Mode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port 1 to SSID.
func (o WtpLanOutput) Port1Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.Port1Ssid }).(pulumi.StringPtrOutput)
}

// LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanOutput) Port2Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.Port2Mode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port 2 to SSID.
func (o WtpLanOutput) Port2Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.Port2Ssid }).(pulumi.StringPtrOutput)
}

// LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanOutput) Port3Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.Port3Mode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port 3 to SSID.
func (o WtpLanOutput) Port3Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.Port3Ssid }).(pulumi.StringPtrOutput)
}

// LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanOutput) Port4Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.Port4Mode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port 4 to SSID.
func (o WtpLanOutput) Port4Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.Port4Ssid }).(pulumi.StringPtrOutput)
}

// LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanOutput) Port5Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.Port5Mode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port 5 to SSID.
func (o WtpLanOutput) Port5Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.Port5Ssid }).(pulumi.StringPtrOutput)
}

// LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanOutput) Port6Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.Port6Mode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port 6 to SSID.
func (o WtpLanOutput) Port6Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.Port6Ssid }).(pulumi.StringPtrOutput)
}

// LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanOutput) Port7Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.Port7Mode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port 7 to SSID.
func (o WtpLanOutput) Port7Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.Port7Ssid }).(pulumi.StringPtrOutput)
}

// LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanOutput) Port8Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.Port8Mode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port 8 to SSID.
func (o WtpLanOutput) Port8Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.Port8Ssid }).(pulumi.StringPtrOutput)
}

// ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanOutput) PortEslMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.PortEslMode }).(pulumi.StringPtrOutput)
}

// Bridge ESL port to SSID.
//
// The `radio1` block supports:
func (o WtpLanOutput) PortEslSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.PortEslSsid }).(pulumi.StringPtrOutput)
}

// LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanOutput) PortMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.PortMode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port to SSID.
func (o WtpLanOutput) PortSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpLan) *string { return v.PortSsid }).(pulumi.StringPtrOutput)
}

type WtpLanPtrOutput struct{ *pulumi.OutputState }

func (WtpLanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpLan)(nil)).Elem()
}

func (o WtpLanPtrOutput) ToWtpLanPtrOutput() WtpLanPtrOutput {
	return o
}

func (o WtpLanPtrOutput) ToWtpLanPtrOutputWithContext(ctx context.Context) WtpLanPtrOutput {
	return o
}

func (o WtpLanPtrOutput) Elem() WtpLanOutput {
	return o.ApplyT(func(v *WtpLan) WtpLan {
		if v != nil {
			return *v
		}
		var ret WtpLan
		return ret
	}).(WtpLanOutput)
}

// LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanPtrOutput) Port1Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.Port1Mode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port 1 to SSID.
func (o WtpLanPtrOutput) Port1Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.Port1Ssid
	}).(pulumi.StringPtrOutput)
}

// LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanPtrOutput) Port2Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.Port2Mode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port 2 to SSID.
func (o WtpLanPtrOutput) Port2Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.Port2Ssid
	}).(pulumi.StringPtrOutput)
}

// LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanPtrOutput) Port3Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.Port3Mode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port 3 to SSID.
func (o WtpLanPtrOutput) Port3Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.Port3Ssid
	}).(pulumi.StringPtrOutput)
}

// LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanPtrOutput) Port4Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.Port4Mode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port 4 to SSID.
func (o WtpLanPtrOutput) Port4Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.Port4Ssid
	}).(pulumi.StringPtrOutput)
}

// LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanPtrOutput) Port5Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.Port5Mode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port 5 to SSID.
func (o WtpLanPtrOutput) Port5Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.Port5Ssid
	}).(pulumi.StringPtrOutput)
}

// LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanPtrOutput) Port6Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.Port6Mode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port 6 to SSID.
func (o WtpLanPtrOutput) Port6Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.Port6Ssid
	}).(pulumi.StringPtrOutput)
}

// LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanPtrOutput) Port7Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.Port7Mode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port 7 to SSID.
func (o WtpLanPtrOutput) Port7Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.Port7Ssid
	}).(pulumi.StringPtrOutput)
}

// LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanPtrOutput) Port8Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.Port8Mode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port 8 to SSID.
func (o WtpLanPtrOutput) Port8Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.Port8Ssid
	}).(pulumi.StringPtrOutput)
}

// ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanPtrOutput) PortEslMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.PortEslMode
	}).(pulumi.StringPtrOutput)
}

// Bridge ESL port to SSID.
//
// The `radio1` block supports:
func (o WtpLanPtrOutput) PortEslSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.PortEslSsid
	}).(pulumi.StringPtrOutput)
}

// LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpLanPtrOutput) PortMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.PortMode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port to SSID.
func (o WtpLanPtrOutput) PortSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpLan) *string {
		if v == nil {
			return nil
		}
		return v.PortSsid
	}).(pulumi.StringPtrOutput)
}

type WtpRadio1 struct {
	// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerHigh *int `pulumi:"autoPowerHigh"`
	// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
	AutoPowerLevel *string `pulumi:"autoPowerLevel"`
	// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerLow *int `pulumi:"autoPowerLow"`
	// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
	AutoPowerTarget *string `pulumi:"autoPowerTarget"`
	// WiFi band that Radio 4 operates on.
	Band *string `pulumi:"band"`
	// Selected list of wireless radio channels. The structure of `channel` block is documented below.
	Channels []WtpRadio1Channel `pulumi:"channels"`
	// Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
	DrmaManualMode *string `pulumi:"drmaManualMode"`
	// Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
	OverrideAnalysis *string `pulumi:"overrideAnalysis"`
	// Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
	OverrideBand *string `pulumi:"overrideBand"`
	// Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
	OverrideChannel *string `pulumi:"overrideChannel"`
	// Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
	OverrideTxpower *string `pulumi:"overrideTxpower"`
	// Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
	OverrideVaps *string `pulumi:"overrideVaps"`
	// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
	PowerLevel *int `pulumi:"powerLevel"`
	// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
	PowerMode *string `pulumi:"powerMode"`
	// Radio EIRP power in dBm (1 - 33, default = 27).
	PowerValue *int `pulumi:"powerValue"`
	// radio-id
	RadioId *int `pulumi:"radioId"`
	// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
	SpectrumAnalysis *string `pulumi:"spectrumAnalysis"`
	// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
	VapAll *string `pulumi:"vapAll"`
	// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
	Vaps []WtpRadio1Vap `pulumi:"vaps"`
}

// WtpRadio1Input is an input type that accepts WtpRadio1Args and WtpRadio1Output values.
// You can construct a concrete instance of `WtpRadio1Input` via:
//
//	WtpRadio1Args{...}
type WtpRadio1Input interface {
	pulumi.Input

	ToWtpRadio1Output() WtpRadio1Output
	ToWtpRadio1OutputWithContext(context.Context) WtpRadio1Output
}

type WtpRadio1Args struct {
	// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerHigh pulumi.IntPtrInput `pulumi:"autoPowerHigh"`
	// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
	AutoPowerLevel pulumi.StringPtrInput `pulumi:"autoPowerLevel"`
	// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerLow pulumi.IntPtrInput `pulumi:"autoPowerLow"`
	// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
	AutoPowerTarget pulumi.StringPtrInput `pulumi:"autoPowerTarget"`
	// WiFi band that Radio 4 operates on.
	Band pulumi.StringPtrInput `pulumi:"band"`
	// Selected list of wireless radio channels. The structure of `channel` block is documented below.
	Channels WtpRadio1ChannelArrayInput `pulumi:"channels"`
	// Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
	DrmaManualMode pulumi.StringPtrInput `pulumi:"drmaManualMode"`
	// Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
	OverrideAnalysis pulumi.StringPtrInput `pulumi:"overrideAnalysis"`
	// Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
	OverrideBand pulumi.StringPtrInput `pulumi:"overrideBand"`
	// Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
	OverrideChannel pulumi.StringPtrInput `pulumi:"overrideChannel"`
	// Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
	OverrideTxpower pulumi.StringPtrInput `pulumi:"overrideTxpower"`
	// Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
	OverrideVaps pulumi.StringPtrInput `pulumi:"overrideVaps"`
	// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
	PowerLevel pulumi.IntPtrInput `pulumi:"powerLevel"`
	// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
	PowerMode pulumi.StringPtrInput `pulumi:"powerMode"`
	// Radio EIRP power in dBm (1 - 33, default = 27).
	PowerValue pulumi.IntPtrInput `pulumi:"powerValue"`
	// radio-id
	RadioId pulumi.IntPtrInput `pulumi:"radioId"`
	// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
	SpectrumAnalysis pulumi.StringPtrInput `pulumi:"spectrumAnalysis"`
	// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
	VapAll pulumi.StringPtrInput `pulumi:"vapAll"`
	// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
	Vaps WtpRadio1VapArrayInput `pulumi:"vaps"`
}

func (WtpRadio1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio1)(nil)).Elem()
}

func (i WtpRadio1Args) ToWtpRadio1Output() WtpRadio1Output {
	return i.ToWtpRadio1OutputWithContext(context.Background())
}

func (i WtpRadio1Args) ToWtpRadio1OutputWithContext(ctx context.Context) WtpRadio1Output {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio1Output)
}

func (i WtpRadio1Args) ToWtpRadio1PtrOutput() WtpRadio1PtrOutput {
	return i.ToWtpRadio1PtrOutputWithContext(context.Background())
}

func (i WtpRadio1Args) ToWtpRadio1PtrOutputWithContext(ctx context.Context) WtpRadio1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio1Output).ToWtpRadio1PtrOutputWithContext(ctx)
}

// WtpRadio1PtrInput is an input type that accepts WtpRadio1Args, WtpRadio1Ptr and WtpRadio1PtrOutput values.
// You can construct a concrete instance of `WtpRadio1PtrInput` via:
//
//	        WtpRadio1Args{...}
//
//	or:
//
//	        nil
type WtpRadio1PtrInput interface {
	pulumi.Input

	ToWtpRadio1PtrOutput() WtpRadio1PtrOutput
	ToWtpRadio1PtrOutputWithContext(context.Context) WtpRadio1PtrOutput
}

type wtpRadio1PtrType WtpRadio1Args

func WtpRadio1Ptr(v *WtpRadio1Args) WtpRadio1PtrInput {
	return (*wtpRadio1PtrType)(v)
}

func (*wtpRadio1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpRadio1)(nil)).Elem()
}

func (i *wtpRadio1PtrType) ToWtpRadio1PtrOutput() WtpRadio1PtrOutput {
	return i.ToWtpRadio1PtrOutputWithContext(context.Background())
}

func (i *wtpRadio1PtrType) ToWtpRadio1PtrOutputWithContext(ctx context.Context) WtpRadio1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio1PtrOutput)
}

type WtpRadio1Output struct{ *pulumi.OutputState }

func (WtpRadio1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio1)(nil)).Elem()
}

func (o WtpRadio1Output) ToWtpRadio1Output() WtpRadio1Output {
	return o
}

func (o WtpRadio1Output) ToWtpRadio1OutputWithContext(ctx context.Context) WtpRadio1Output {
	return o
}

func (o WtpRadio1Output) ToWtpRadio1PtrOutput() WtpRadio1PtrOutput {
	return o.ToWtpRadio1PtrOutputWithContext(context.Background())
}

func (o WtpRadio1Output) ToWtpRadio1PtrOutputWithContext(ctx context.Context) WtpRadio1PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WtpRadio1) *WtpRadio1 {
		return &v
	}).(WtpRadio1PtrOutput)
}

// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpRadio1Output) AutoPowerHigh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio1) *int { return v.AutoPowerHigh }).(pulumi.IntPtrOutput)
}

// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
func (o WtpRadio1Output) AutoPowerLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio1) *string { return v.AutoPowerLevel }).(pulumi.StringPtrOutput)
}

// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpRadio1Output) AutoPowerLow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio1) *int { return v.AutoPowerLow }).(pulumi.IntPtrOutput)
}

// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
func (o WtpRadio1Output) AutoPowerTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio1) *string { return v.AutoPowerTarget }).(pulumi.StringPtrOutput)
}

// WiFi band that Radio 4 operates on.
func (o WtpRadio1Output) Band() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio1) *string { return v.Band }).(pulumi.StringPtrOutput)
}

// Selected list of wireless radio channels. The structure of `channel` block is documented below.
func (o WtpRadio1Output) Channels() WtpRadio1ChannelArrayOutput {
	return o.ApplyT(func(v WtpRadio1) []WtpRadio1Channel { return v.Channels }).(WtpRadio1ChannelArrayOutput)
}

// Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
func (o WtpRadio1Output) DrmaManualMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio1) *string { return v.DrmaManualMode }).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
func (o WtpRadio1Output) OverrideAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio1) *string { return v.OverrideAnalysis }).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
func (o WtpRadio1Output) OverrideBand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio1) *string { return v.OverrideBand }).(pulumi.StringPtrOutput)
}

// Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
func (o WtpRadio1Output) OverrideChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio1) *string { return v.OverrideChannel }).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
func (o WtpRadio1Output) OverrideTxpower() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio1) *string { return v.OverrideTxpower }).(pulumi.StringPtrOutput)
}

// Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
func (o WtpRadio1Output) OverrideVaps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio1) *string { return v.OverrideVaps }).(pulumi.StringPtrOutput)
}

// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
func (o WtpRadio1Output) PowerLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio1) *int { return v.PowerLevel }).(pulumi.IntPtrOutput)
}

// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
func (o WtpRadio1Output) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio1) *string { return v.PowerMode }).(pulumi.StringPtrOutput)
}

// Radio EIRP power in dBm (1 - 33, default = 27).
func (o WtpRadio1Output) PowerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio1) *int { return v.PowerValue }).(pulumi.IntPtrOutput)
}

// radio-id
func (o WtpRadio1Output) RadioId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio1) *int { return v.RadioId }).(pulumi.IntPtrOutput)
}

// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
func (o WtpRadio1Output) SpectrumAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio1) *string { return v.SpectrumAnalysis }).(pulumi.StringPtrOutput)
}

// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
func (o WtpRadio1Output) VapAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio1) *string { return v.VapAll }).(pulumi.StringPtrOutput)
}

// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
func (o WtpRadio1Output) Vaps() WtpRadio1VapArrayOutput {
	return o.ApplyT(func(v WtpRadio1) []WtpRadio1Vap { return v.Vaps }).(WtpRadio1VapArrayOutput)
}

type WtpRadio1PtrOutput struct{ *pulumi.OutputState }

func (WtpRadio1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpRadio1)(nil)).Elem()
}

func (o WtpRadio1PtrOutput) ToWtpRadio1PtrOutput() WtpRadio1PtrOutput {
	return o
}

func (o WtpRadio1PtrOutput) ToWtpRadio1PtrOutputWithContext(ctx context.Context) WtpRadio1PtrOutput {
	return o
}

func (o WtpRadio1PtrOutput) Elem() WtpRadio1Output {
	return o.ApplyT(func(v *WtpRadio1) WtpRadio1 {
		if v != nil {
			return *v
		}
		var ret WtpRadio1
		return ret
	}).(WtpRadio1Output)
}

// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpRadio1PtrOutput) AutoPowerHigh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio1) *int {
		if v == nil {
			return nil
		}
		return v.AutoPowerHigh
	}).(pulumi.IntPtrOutput)
}

// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
func (o WtpRadio1PtrOutput) AutoPowerLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio1) *string {
		if v == nil {
			return nil
		}
		return v.AutoPowerLevel
	}).(pulumi.StringPtrOutput)
}

// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpRadio1PtrOutput) AutoPowerLow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio1) *int {
		if v == nil {
			return nil
		}
		return v.AutoPowerLow
	}).(pulumi.IntPtrOutput)
}

// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
func (o WtpRadio1PtrOutput) AutoPowerTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio1) *string {
		if v == nil {
			return nil
		}
		return v.AutoPowerTarget
	}).(pulumi.StringPtrOutput)
}

// WiFi band that Radio 4 operates on.
func (o WtpRadio1PtrOutput) Band() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio1) *string {
		if v == nil {
			return nil
		}
		return v.Band
	}).(pulumi.StringPtrOutput)
}

// Selected list of wireless radio channels. The structure of `channel` block is documented below.
func (o WtpRadio1PtrOutput) Channels() WtpRadio1ChannelArrayOutput {
	return o.ApplyT(func(v *WtpRadio1) []WtpRadio1Channel {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(WtpRadio1ChannelArrayOutput)
}

// Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
func (o WtpRadio1PtrOutput) DrmaManualMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio1) *string {
		if v == nil {
			return nil
		}
		return v.DrmaManualMode
	}).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
func (o WtpRadio1PtrOutput) OverrideAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio1) *string {
		if v == nil {
			return nil
		}
		return v.OverrideAnalysis
	}).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
func (o WtpRadio1PtrOutput) OverrideBand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio1) *string {
		if v == nil {
			return nil
		}
		return v.OverrideBand
	}).(pulumi.StringPtrOutput)
}

// Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
func (o WtpRadio1PtrOutput) OverrideChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio1) *string {
		if v == nil {
			return nil
		}
		return v.OverrideChannel
	}).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
func (o WtpRadio1PtrOutput) OverrideTxpower() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio1) *string {
		if v == nil {
			return nil
		}
		return v.OverrideTxpower
	}).(pulumi.StringPtrOutput)
}

// Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
func (o WtpRadio1PtrOutput) OverrideVaps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio1) *string {
		if v == nil {
			return nil
		}
		return v.OverrideVaps
	}).(pulumi.StringPtrOutput)
}

// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
func (o WtpRadio1PtrOutput) PowerLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio1) *int {
		if v == nil {
			return nil
		}
		return v.PowerLevel
	}).(pulumi.IntPtrOutput)
}

// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
func (o WtpRadio1PtrOutput) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio1) *string {
		if v == nil {
			return nil
		}
		return v.PowerMode
	}).(pulumi.StringPtrOutput)
}

// Radio EIRP power in dBm (1 - 33, default = 27).
func (o WtpRadio1PtrOutput) PowerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio1) *int {
		if v == nil {
			return nil
		}
		return v.PowerValue
	}).(pulumi.IntPtrOutput)
}

// radio-id
func (o WtpRadio1PtrOutput) RadioId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio1) *int {
		if v == nil {
			return nil
		}
		return v.RadioId
	}).(pulumi.IntPtrOutput)
}

// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
func (o WtpRadio1PtrOutput) SpectrumAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SpectrumAnalysis
	}).(pulumi.StringPtrOutput)
}

// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
func (o WtpRadio1PtrOutput) VapAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio1) *string {
		if v == nil {
			return nil
		}
		return v.VapAll
	}).(pulumi.StringPtrOutput)
}

// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
func (o WtpRadio1PtrOutput) Vaps() WtpRadio1VapArrayOutput {
	return o.ApplyT(func(v *WtpRadio1) []WtpRadio1Vap {
		if v == nil {
			return nil
		}
		return v.Vaps
	}).(WtpRadio1VapArrayOutput)
}

type WtpRadio1Channel struct {
	// Channel number.
	Chan *string `pulumi:"chan"`
}

// WtpRadio1ChannelInput is an input type that accepts WtpRadio1ChannelArgs and WtpRadio1ChannelOutput values.
// You can construct a concrete instance of `WtpRadio1ChannelInput` via:
//
//	WtpRadio1ChannelArgs{...}
type WtpRadio1ChannelInput interface {
	pulumi.Input

	ToWtpRadio1ChannelOutput() WtpRadio1ChannelOutput
	ToWtpRadio1ChannelOutputWithContext(context.Context) WtpRadio1ChannelOutput
}

type WtpRadio1ChannelArgs struct {
	// Channel number.
	Chan pulumi.StringPtrInput `pulumi:"chan"`
}

func (WtpRadio1ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio1Channel)(nil)).Elem()
}

func (i WtpRadio1ChannelArgs) ToWtpRadio1ChannelOutput() WtpRadio1ChannelOutput {
	return i.ToWtpRadio1ChannelOutputWithContext(context.Background())
}

func (i WtpRadio1ChannelArgs) ToWtpRadio1ChannelOutputWithContext(ctx context.Context) WtpRadio1ChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio1ChannelOutput)
}

// WtpRadio1ChannelArrayInput is an input type that accepts WtpRadio1ChannelArray and WtpRadio1ChannelArrayOutput values.
// You can construct a concrete instance of `WtpRadio1ChannelArrayInput` via:
//
//	WtpRadio1ChannelArray{ WtpRadio1ChannelArgs{...} }
type WtpRadio1ChannelArrayInput interface {
	pulumi.Input

	ToWtpRadio1ChannelArrayOutput() WtpRadio1ChannelArrayOutput
	ToWtpRadio1ChannelArrayOutputWithContext(context.Context) WtpRadio1ChannelArrayOutput
}

type WtpRadio1ChannelArray []WtpRadio1ChannelInput

func (WtpRadio1ChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpRadio1Channel)(nil)).Elem()
}

func (i WtpRadio1ChannelArray) ToWtpRadio1ChannelArrayOutput() WtpRadio1ChannelArrayOutput {
	return i.ToWtpRadio1ChannelArrayOutputWithContext(context.Background())
}

func (i WtpRadio1ChannelArray) ToWtpRadio1ChannelArrayOutputWithContext(ctx context.Context) WtpRadio1ChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio1ChannelArrayOutput)
}

type WtpRadio1ChannelOutput struct{ *pulumi.OutputState }

func (WtpRadio1ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio1Channel)(nil)).Elem()
}

func (o WtpRadio1ChannelOutput) ToWtpRadio1ChannelOutput() WtpRadio1ChannelOutput {
	return o
}

func (o WtpRadio1ChannelOutput) ToWtpRadio1ChannelOutputWithContext(ctx context.Context) WtpRadio1ChannelOutput {
	return o
}

// Channel number.
func (o WtpRadio1ChannelOutput) Chan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio1Channel) *string { return v.Chan }).(pulumi.StringPtrOutput)
}

type WtpRadio1ChannelArrayOutput struct{ *pulumi.OutputState }

func (WtpRadio1ChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpRadio1Channel)(nil)).Elem()
}

func (o WtpRadio1ChannelArrayOutput) ToWtpRadio1ChannelArrayOutput() WtpRadio1ChannelArrayOutput {
	return o
}

func (o WtpRadio1ChannelArrayOutput) ToWtpRadio1ChannelArrayOutputWithContext(ctx context.Context) WtpRadio1ChannelArrayOutput {
	return o
}

func (o WtpRadio1ChannelArrayOutput) Index(i pulumi.IntInput) WtpRadio1ChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpRadio1Channel {
		return vs[0].([]WtpRadio1Channel)[vs[1].(int)]
	}).(WtpRadio1ChannelOutput)
}

type WtpRadio1Vap struct {
	// Virtual Access Point (VAP) name.
	Name *string `pulumi:"name"`
}

// WtpRadio1VapInput is an input type that accepts WtpRadio1VapArgs and WtpRadio1VapOutput values.
// You can construct a concrete instance of `WtpRadio1VapInput` via:
//
//	WtpRadio1VapArgs{...}
type WtpRadio1VapInput interface {
	pulumi.Input

	ToWtpRadio1VapOutput() WtpRadio1VapOutput
	ToWtpRadio1VapOutputWithContext(context.Context) WtpRadio1VapOutput
}

type WtpRadio1VapArgs struct {
	// Virtual Access Point (VAP) name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (WtpRadio1VapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio1Vap)(nil)).Elem()
}

func (i WtpRadio1VapArgs) ToWtpRadio1VapOutput() WtpRadio1VapOutput {
	return i.ToWtpRadio1VapOutputWithContext(context.Background())
}

func (i WtpRadio1VapArgs) ToWtpRadio1VapOutputWithContext(ctx context.Context) WtpRadio1VapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio1VapOutput)
}

// WtpRadio1VapArrayInput is an input type that accepts WtpRadio1VapArray and WtpRadio1VapArrayOutput values.
// You can construct a concrete instance of `WtpRadio1VapArrayInput` via:
//
//	WtpRadio1VapArray{ WtpRadio1VapArgs{...} }
type WtpRadio1VapArrayInput interface {
	pulumi.Input

	ToWtpRadio1VapArrayOutput() WtpRadio1VapArrayOutput
	ToWtpRadio1VapArrayOutputWithContext(context.Context) WtpRadio1VapArrayOutput
}

type WtpRadio1VapArray []WtpRadio1VapInput

func (WtpRadio1VapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpRadio1Vap)(nil)).Elem()
}

func (i WtpRadio1VapArray) ToWtpRadio1VapArrayOutput() WtpRadio1VapArrayOutput {
	return i.ToWtpRadio1VapArrayOutputWithContext(context.Background())
}

func (i WtpRadio1VapArray) ToWtpRadio1VapArrayOutputWithContext(ctx context.Context) WtpRadio1VapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio1VapArrayOutput)
}

type WtpRadio1VapOutput struct{ *pulumi.OutputState }

func (WtpRadio1VapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio1Vap)(nil)).Elem()
}

func (o WtpRadio1VapOutput) ToWtpRadio1VapOutput() WtpRadio1VapOutput {
	return o
}

func (o WtpRadio1VapOutput) ToWtpRadio1VapOutputWithContext(ctx context.Context) WtpRadio1VapOutput {
	return o
}

// Virtual Access Point (VAP) name.
func (o WtpRadio1VapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio1Vap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type WtpRadio1VapArrayOutput struct{ *pulumi.OutputState }

func (WtpRadio1VapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpRadio1Vap)(nil)).Elem()
}

func (o WtpRadio1VapArrayOutput) ToWtpRadio1VapArrayOutput() WtpRadio1VapArrayOutput {
	return o
}

func (o WtpRadio1VapArrayOutput) ToWtpRadio1VapArrayOutputWithContext(ctx context.Context) WtpRadio1VapArrayOutput {
	return o
}

func (o WtpRadio1VapArrayOutput) Index(i pulumi.IntInput) WtpRadio1VapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpRadio1Vap {
		return vs[0].([]WtpRadio1Vap)[vs[1].(int)]
	}).(WtpRadio1VapOutput)
}

type WtpRadio2 struct {
	// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerHigh *int `pulumi:"autoPowerHigh"`
	// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
	AutoPowerLevel *string `pulumi:"autoPowerLevel"`
	// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerLow *int `pulumi:"autoPowerLow"`
	// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
	AutoPowerTarget *string `pulumi:"autoPowerTarget"`
	// WiFi band that Radio 4 operates on.
	Band *string `pulumi:"band"`
	// Selected list of wireless radio channels. The structure of `channel` block is documented below.
	Channels []WtpRadio2Channel `pulumi:"channels"`
	// Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
	DrmaManualMode *string `pulumi:"drmaManualMode"`
	// Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
	OverrideAnalysis *string `pulumi:"overrideAnalysis"`
	// Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
	OverrideBand *string `pulumi:"overrideBand"`
	// Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
	OverrideChannel *string `pulumi:"overrideChannel"`
	// Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
	OverrideTxpower *string `pulumi:"overrideTxpower"`
	// Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
	OverrideVaps *string `pulumi:"overrideVaps"`
	// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
	PowerLevel *int `pulumi:"powerLevel"`
	// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
	PowerMode *string `pulumi:"powerMode"`
	// Radio EIRP power in dBm (1 - 33, default = 27).
	PowerValue *int `pulumi:"powerValue"`
	// radio-id
	RadioId *int `pulumi:"radioId"`
	// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
	SpectrumAnalysis *string `pulumi:"spectrumAnalysis"`
	// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
	VapAll *string `pulumi:"vapAll"`
	// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
	Vaps []WtpRadio2Vap `pulumi:"vaps"`
}

// WtpRadio2Input is an input type that accepts WtpRadio2Args and WtpRadio2Output values.
// You can construct a concrete instance of `WtpRadio2Input` via:
//
//	WtpRadio2Args{...}
type WtpRadio2Input interface {
	pulumi.Input

	ToWtpRadio2Output() WtpRadio2Output
	ToWtpRadio2OutputWithContext(context.Context) WtpRadio2Output
}

type WtpRadio2Args struct {
	// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerHigh pulumi.IntPtrInput `pulumi:"autoPowerHigh"`
	// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
	AutoPowerLevel pulumi.StringPtrInput `pulumi:"autoPowerLevel"`
	// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerLow pulumi.IntPtrInput `pulumi:"autoPowerLow"`
	// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
	AutoPowerTarget pulumi.StringPtrInput `pulumi:"autoPowerTarget"`
	// WiFi band that Radio 4 operates on.
	Band pulumi.StringPtrInput `pulumi:"band"`
	// Selected list of wireless radio channels. The structure of `channel` block is documented below.
	Channels WtpRadio2ChannelArrayInput `pulumi:"channels"`
	// Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
	DrmaManualMode pulumi.StringPtrInput `pulumi:"drmaManualMode"`
	// Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
	OverrideAnalysis pulumi.StringPtrInput `pulumi:"overrideAnalysis"`
	// Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
	OverrideBand pulumi.StringPtrInput `pulumi:"overrideBand"`
	// Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
	OverrideChannel pulumi.StringPtrInput `pulumi:"overrideChannel"`
	// Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
	OverrideTxpower pulumi.StringPtrInput `pulumi:"overrideTxpower"`
	// Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
	OverrideVaps pulumi.StringPtrInput `pulumi:"overrideVaps"`
	// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
	PowerLevel pulumi.IntPtrInput `pulumi:"powerLevel"`
	// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
	PowerMode pulumi.StringPtrInput `pulumi:"powerMode"`
	// Radio EIRP power in dBm (1 - 33, default = 27).
	PowerValue pulumi.IntPtrInput `pulumi:"powerValue"`
	// radio-id
	RadioId pulumi.IntPtrInput `pulumi:"radioId"`
	// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
	SpectrumAnalysis pulumi.StringPtrInput `pulumi:"spectrumAnalysis"`
	// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
	VapAll pulumi.StringPtrInput `pulumi:"vapAll"`
	// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
	Vaps WtpRadio2VapArrayInput `pulumi:"vaps"`
}

func (WtpRadio2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio2)(nil)).Elem()
}

func (i WtpRadio2Args) ToWtpRadio2Output() WtpRadio2Output {
	return i.ToWtpRadio2OutputWithContext(context.Background())
}

func (i WtpRadio2Args) ToWtpRadio2OutputWithContext(ctx context.Context) WtpRadio2Output {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio2Output)
}

func (i WtpRadio2Args) ToWtpRadio2PtrOutput() WtpRadio2PtrOutput {
	return i.ToWtpRadio2PtrOutputWithContext(context.Background())
}

func (i WtpRadio2Args) ToWtpRadio2PtrOutputWithContext(ctx context.Context) WtpRadio2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio2Output).ToWtpRadio2PtrOutputWithContext(ctx)
}

// WtpRadio2PtrInput is an input type that accepts WtpRadio2Args, WtpRadio2Ptr and WtpRadio2PtrOutput values.
// You can construct a concrete instance of `WtpRadio2PtrInput` via:
//
//	        WtpRadio2Args{...}
//
//	or:
//
//	        nil
type WtpRadio2PtrInput interface {
	pulumi.Input

	ToWtpRadio2PtrOutput() WtpRadio2PtrOutput
	ToWtpRadio2PtrOutputWithContext(context.Context) WtpRadio2PtrOutput
}

type wtpRadio2PtrType WtpRadio2Args

func WtpRadio2Ptr(v *WtpRadio2Args) WtpRadio2PtrInput {
	return (*wtpRadio2PtrType)(v)
}

func (*wtpRadio2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpRadio2)(nil)).Elem()
}

func (i *wtpRadio2PtrType) ToWtpRadio2PtrOutput() WtpRadio2PtrOutput {
	return i.ToWtpRadio2PtrOutputWithContext(context.Background())
}

func (i *wtpRadio2PtrType) ToWtpRadio2PtrOutputWithContext(ctx context.Context) WtpRadio2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio2PtrOutput)
}

type WtpRadio2Output struct{ *pulumi.OutputState }

func (WtpRadio2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio2)(nil)).Elem()
}

func (o WtpRadio2Output) ToWtpRadio2Output() WtpRadio2Output {
	return o
}

func (o WtpRadio2Output) ToWtpRadio2OutputWithContext(ctx context.Context) WtpRadio2Output {
	return o
}

func (o WtpRadio2Output) ToWtpRadio2PtrOutput() WtpRadio2PtrOutput {
	return o.ToWtpRadio2PtrOutputWithContext(context.Background())
}

func (o WtpRadio2Output) ToWtpRadio2PtrOutputWithContext(ctx context.Context) WtpRadio2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WtpRadio2) *WtpRadio2 {
		return &v
	}).(WtpRadio2PtrOutput)
}

// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpRadio2Output) AutoPowerHigh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio2) *int { return v.AutoPowerHigh }).(pulumi.IntPtrOutput)
}

// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
func (o WtpRadio2Output) AutoPowerLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio2) *string { return v.AutoPowerLevel }).(pulumi.StringPtrOutput)
}

// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpRadio2Output) AutoPowerLow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio2) *int { return v.AutoPowerLow }).(pulumi.IntPtrOutput)
}

// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
func (o WtpRadio2Output) AutoPowerTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio2) *string { return v.AutoPowerTarget }).(pulumi.StringPtrOutput)
}

// WiFi band that Radio 4 operates on.
func (o WtpRadio2Output) Band() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio2) *string { return v.Band }).(pulumi.StringPtrOutput)
}

// Selected list of wireless radio channels. The structure of `channel` block is documented below.
func (o WtpRadio2Output) Channels() WtpRadio2ChannelArrayOutput {
	return o.ApplyT(func(v WtpRadio2) []WtpRadio2Channel { return v.Channels }).(WtpRadio2ChannelArrayOutput)
}

// Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
func (o WtpRadio2Output) DrmaManualMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio2) *string { return v.DrmaManualMode }).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
func (o WtpRadio2Output) OverrideAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio2) *string { return v.OverrideAnalysis }).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
func (o WtpRadio2Output) OverrideBand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio2) *string { return v.OverrideBand }).(pulumi.StringPtrOutput)
}

// Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
func (o WtpRadio2Output) OverrideChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio2) *string { return v.OverrideChannel }).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
func (o WtpRadio2Output) OverrideTxpower() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio2) *string { return v.OverrideTxpower }).(pulumi.StringPtrOutput)
}

// Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
func (o WtpRadio2Output) OverrideVaps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio2) *string { return v.OverrideVaps }).(pulumi.StringPtrOutput)
}

// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
func (o WtpRadio2Output) PowerLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio2) *int { return v.PowerLevel }).(pulumi.IntPtrOutput)
}

// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
func (o WtpRadio2Output) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio2) *string { return v.PowerMode }).(pulumi.StringPtrOutput)
}

// Radio EIRP power in dBm (1 - 33, default = 27).
func (o WtpRadio2Output) PowerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio2) *int { return v.PowerValue }).(pulumi.IntPtrOutput)
}

// radio-id
func (o WtpRadio2Output) RadioId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio2) *int { return v.RadioId }).(pulumi.IntPtrOutput)
}

// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
func (o WtpRadio2Output) SpectrumAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio2) *string { return v.SpectrumAnalysis }).(pulumi.StringPtrOutput)
}

// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
func (o WtpRadio2Output) VapAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio2) *string { return v.VapAll }).(pulumi.StringPtrOutput)
}

// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
func (o WtpRadio2Output) Vaps() WtpRadio2VapArrayOutput {
	return o.ApplyT(func(v WtpRadio2) []WtpRadio2Vap { return v.Vaps }).(WtpRadio2VapArrayOutput)
}

type WtpRadio2PtrOutput struct{ *pulumi.OutputState }

func (WtpRadio2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpRadio2)(nil)).Elem()
}

func (o WtpRadio2PtrOutput) ToWtpRadio2PtrOutput() WtpRadio2PtrOutput {
	return o
}

func (o WtpRadio2PtrOutput) ToWtpRadio2PtrOutputWithContext(ctx context.Context) WtpRadio2PtrOutput {
	return o
}

func (o WtpRadio2PtrOutput) Elem() WtpRadio2Output {
	return o.ApplyT(func(v *WtpRadio2) WtpRadio2 {
		if v != nil {
			return *v
		}
		var ret WtpRadio2
		return ret
	}).(WtpRadio2Output)
}

// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpRadio2PtrOutput) AutoPowerHigh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio2) *int {
		if v == nil {
			return nil
		}
		return v.AutoPowerHigh
	}).(pulumi.IntPtrOutput)
}

// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
func (o WtpRadio2PtrOutput) AutoPowerLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio2) *string {
		if v == nil {
			return nil
		}
		return v.AutoPowerLevel
	}).(pulumi.StringPtrOutput)
}

// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpRadio2PtrOutput) AutoPowerLow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio2) *int {
		if v == nil {
			return nil
		}
		return v.AutoPowerLow
	}).(pulumi.IntPtrOutput)
}

// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
func (o WtpRadio2PtrOutput) AutoPowerTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio2) *string {
		if v == nil {
			return nil
		}
		return v.AutoPowerTarget
	}).(pulumi.StringPtrOutput)
}

// WiFi band that Radio 4 operates on.
func (o WtpRadio2PtrOutput) Band() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio2) *string {
		if v == nil {
			return nil
		}
		return v.Band
	}).(pulumi.StringPtrOutput)
}

// Selected list of wireless radio channels. The structure of `channel` block is documented below.
func (o WtpRadio2PtrOutput) Channels() WtpRadio2ChannelArrayOutput {
	return o.ApplyT(func(v *WtpRadio2) []WtpRadio2Channel {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(WtpRadio2ChannelArrayOutput)
}

// Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
func (o WtpRadio2PtrOutput) DrmaManualMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio2) *string {
		if v == nil {
			return nil
		}
		return v.DrmaManualMode
	}).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
func (o WtpRadio2PtrOutput) OverrideAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio2) *string {
		if v == nil {
			return nil
		}
		return v.OverrideAnalysis
	}).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
func (o WtpRadio2PtrOutput) OverrideBand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio2) *string {
		if v == nil {
			return nil
		}
		return v.OverrideBand
	}).(pulumi.StringPtrOutput)
}

// Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
func (o WtpRadio2PtrOutput) OverrideChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio2) *string {
		if v == nil {
			return nil
		}
		return v.OverrideChannel
	}).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
func (o WtpRadio2PtrOutput) OverrideTxpower() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio2) *string {
		if v == nil {
			return nil
		}
		return v.OverrideTxpower
	}).(pulumi.StringPtrOutput)
}

// Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
func (o WtpRadio2PtrOutput) OverrideVaps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio2) *string {
		if v == nil {
			return nil
		}
		return v.OverrideVaps
	}).(pulumi.StringPtrOutput)
}

// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
func (o WtpRadio2PtrOutput) PowerLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio2) *int {
		if v == nil {
			return nil
		}
		return v.PowerLevel
	}).(pulumi.IntPtrOutput)
}

// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
func (o WtpRadio2PtrOutput) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio2) *string {
		if v == nil {
			return nil
		}
		return v.PowerMode
	}).(pulumi.StringPtrOutput)
}

// Radio EIRP power in dBm (1 - 33, default = 27).
func (o WtpRadio2PtrOutput) PowerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio2) *int {
		if v == nil {
			return nil
		}
		return v.PowerValue
	}).(pulumi.IntPtrOutput)
}

// radio-id
func (o WtpRadio2PtrOutput) RadioId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio2) *int {
		if v == nil {
			return nil
		}
		return v.RadioId
	}).(pulumi.IntPtrOutput)
}

// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
func (o WtpRadio2PtrOutput) SpectrumAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SpectrumAnalysis
	}).(pulumi.StringPtrOutput)
}

// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
func (o WtpRadio2PtrOutput) VapAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio2) *string {
		if v == nil {
			return nil
		}
		return v.VapAll
	}).(pulumi.StringPtrOutput)
}

// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
func (o WtpRadio2PtrOutput) Vaps() WtpRadio2VapArrayOutput {
	return o.ApplyT(func(v *WtpRadio2) []WtpRadio2Vap {
		if v == nil {
			return nil
		}
		return v.Vaps
	}).(WtpRadio2VapArrayOutput)
}

type WtpRadio2Channel struct {
	// Channel number.
	Chan *string `pulumi:"chan"`
}

// WtpRadio2ChannelInput is an input type that accepts WtpRadio2ChannelArgs and WtpRadio2ChannelOutput values.
// You can construct a concrete instance of `WtpRadio2ChannelInput` via:
//
//	WtpRadio2ChannelArgs{...}
type WtpRadio2ChannelInput interface {
	pulumi.Input

	ToWtpRadio2ChannelOutput() WtpRadio2ChannelOutput
	ToWtpRadio2ChannelOutputWithContext(context.Context) WtpRadio2ChannelOutput
}

type WtpRadio2ChannelArgs struct {
	// Channel number.
	Chan pulumi.StringPtrInput `pulumi:"chan"`
}

func (WtpRadio2ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio2Channel)(nil)).Elem()
}

func (i WtpRadio2ChannelArgs) ToWtpRadio2ChannelOutput() WtpRadio2ChannelOutput {
	return i.ToWtpRadio2ChannelOutputWithContext(context.Background())
}

func (i WtpRadio2ChannelArgs) ToWtpRadio2ChannelOutputWithContext(ctx context.Context) WtpRadio2ChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio2ChannelOutput)
}

// WtpRadio2ChannelArrayInput is an input type that accepts WtpRadio2ChannelArray and WtpRadio2ChannelArrayOutput values.
// You can construct a concrete instance of `WtpRadio2ChannelArrayInput` via:
//
//	WtpRadio2ChannelArray{ WtpRadio2ChannelArgs{...} }
type WtpRadio2ChannelArrayInput interface {
	pulumi.Input

	ToWtpRadio2ChannelArrayOutput() WtpRadio2ChannelArrayOutput
	ToWtpRadio2ChannelArrayOutputWithContext(context.Context) WtpRadio2ChannelArrayOutput
}

type WtpRadio2ChannelArray []WtpRadio2ChannelInput

func (WtpRadio2ChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpRadio2Channel)(nil)).Elem()
}

func (i WtpRadio2ChannelArray) ToWtpRadio2ChannelArrayOutput() WtpRadio2ChannelArrayOutput {
	return i.ToWtpRadio2ChannelArrayOutputWithContext(context.Background())
}

func (i WtpRadio2ChannelArray) ToWtpRadio2ChannelArrayOutputWithContext(ctx context.Context) WtpRadio2ChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio2ChannelArrayOutput)
}

type WtpRadio2ChannelOutput struct{ *pulumi.OutputState }

func (WtpRadio2ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio2Channel)(nil)).Elem()
}

func (o WtpRadio2ChannelOutput) ToWtpRadio2ChannelOutput() WtpRadio2ChannelOutput {
	return o
}

func (o WtpRadio2ChannelOutput) ToWtpRadio2ChannelOutputWithContext(ctx context.Context) WtpRadio2ChannelOutput {
	return o
}

// Channel number.
func (o WtpRadio2ChannelOutput) Chan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio2Channel) *string { return v.Chan }).(pulumi.StringPtrOutput)
}

type WtpRadio2ChannelArrayOutput struct{ *pulumi.OutputState }

func (WtpRadio2ChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpRadio2Channel)(nil)).Elem()
}

func (o WtpRadio2ChannelArrayOutput) ToWtpRadio2ChannelArrayOutput() WtpRadio2ChannelArrayOutput {
	return o
}

func (o WtpRadio2ChannelArrayOutput) ToWtpRadio2ChannelArrayOutputWithContext(ctx context.Context) WtpRadio2ChannelArrayOutput {
	return o
}

func (o WtpRadio2ChannelArrayOutput) Index(i pulumi.IntInput) WtpRadio2ChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpRadio2Channel {
		return vs[0].([]WtpRadio2Channel)[vs[1].(int)]
	}).(WtpRadio2ChannelOutput)
}

type WtpRadio2Vap struct {
	// Virtual Access Point (VAP) name.
	Name *string `pulumi:"name"`
}

// WtpRadio2VapInput is an input type that accepts WtpRadio2VapArgs and WtpRadio2VapOutput values.
// You can construct a concrete instance of `WtpRadio2VapInput` via:
//
//	WtpRadio2VapArgs{...}
type WtpRadio2VapInput interface {
	pulumi.Input

	ToWtpRadio2VapOutput() WtpRadio2VapOutput
	ToWtpRadio2VapOutputWithContext(context.Context) WtpRadio2VapOutput
}

type WtpRadio2VapArgs struct {
	// Virtual Access Point (VAP) name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (WtpRadio2VapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio2Vap)(nil)).Elem()
}

func (i WtpRadio2VapArgs) ToWtpRadio2VapOutput() WtpRadio2VapOutput {
	return i.ToWtpRadio2VapOutputWithContext(context.Background())
}

func (i WtpRadio2VapArgs) ToWtpRadio2VapOutputWithContext(ctx context.Context) WtpRadio2VapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio2VapOutput)
}

// WtpRadio2VapArrayInput is an input type that accepts WtpRadio2VapArray and WtpRadio2VapArrayOutput values.
// You can construct a concrete instance of `WtpRadio2VapArrayInput` via:
//
//	WtpRadio2VapArray{ WtpRadio2VapArgs{...} }
type WtpRadio2VapArrayInput interface {
	pulumi.Input

	ToWtpRadio2VapArrayOutput() WtpRadio2VapArrayOutput
	ToWtpRadio2VapArrayOutputWithContext(context.Context) WtpRadio2VapArrayOutput
}

type WtpRadio2VapArray []WtpRadio2VapInput

func (WtpRadio2VapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpRadio2Vap)(nil)).Elem()
}

func (i WtpRadio2VapArray) ToWtpRadio2VapArrayOutput() WtpRadio2VapArrayOutput {
	return i.ToWtpRadio2VapArrayOutputWithContext(context.Background())
}

func (i WtpRadio2VapArray) ToWtpRadio2VapArrayOutputWithContext(ctx context.Context) WtpRadio2VapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio2VapArrayOutput)
}

type WtpRadio2VapOutput struct{ *pulumi.OutputState }

func (WtpRadio2VapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio2Vap)(nil)).Elem()
}

func (o WtpRadio2VapOutput) ToWtpRadio2VapOutput() WtpRadio2VapOutput {
	return o
}

func (o WtpRadio2VapOutput) ToWtpRadio2VapOutputWithContext(ctx context.Context) WtpRadio2VapOutput {
	return o
}

// Virtual Access Point (VAP) name.
func (o WtpRadio2VapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio2Vap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type WtpRadio2VapArrayOutput struct{ *pulumi.OutputState }

func (WtpRadio2VapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpRadio2Vap)(nil)).Elem()
}

func (o WtpRadio2VapArrayOutput) ToWtpRadio2VapArrayOutput() WtpRadio2VapArrayOutput {
	return o
}

func (o WtpRadio2VapArrayOutput) ToWtpRadio2VapArrayOutputWithContext(ctx context.Context) WtpRadio2VapArrayOutput {
	return o
}

func (o WtpRadio2VapArrayOutput) Index(i pulumi.IntInput) WtpRadio2VapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpRadio2Vap {
		return vs[0].([]WtpRadio2Vap)[vs[1].(int)]
	}).(WtpRadio2VapOutput)
}

type WtpRadio3 struct {
	// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerHigh *int `pulumi:"autoPowerHigh"`
	// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
	AutoPowerLevel *string `pulumi:"autoPowerLevel"`
	// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerLow *int `pulumi:"autoPowerLow"`
	// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
	AutoPowerTarget *string `pulumi:"autoPowerTarget"`
	// WiFi band that Radio 4 operates on.
	Band *string `pulumi:"band"`
	// Selected list of wireless radio channels. The structure of `channel` block is documented below.
	Channels []WtpRadio3Channel `pulumi:"channels"`
	// Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
	DrmaManualMode *string `pulumi:"drmaManualMode"`
	// Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
	OverrideAnalysis *string `pulumi:"overrideAnalysis"`
	// Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
	OverrideBand *string `pulumi:"overrideBand"`
	// Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
	OverrideChannel *string `pulumi:"overrideChannel"`
	// Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
	OverrideTxpower *string `pulumi:"overrideTxpower"`
	// Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
	OverrideVaps *string `pulumi:"overrideVaps"`
	// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
	PowerLevel *int `pulumi:"powerLevel"`
	// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
	PowerMode *string `pulumi:"powerMode"`
	// Radio EIRP power in dBm (1 - 33, default = 27).
	PowerValue *int `pulumi:"powerValue"`
	// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
	SpectrumAnalysis *string `pulumi:"spectrumAnalysis"`
	// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
	VapAll *string `pulumi:"vapAll"`
	// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
	Vaps []WtpRadio3Vap `pulumi:"vaps"`
}

// WtpRadio3Input is an input type that accepts WtpRadio3Args and WtpRadio3Output values.
// You can construct a concrete instance of `WtpRadio3Input` via:
//
//	WtpRadio3Args{...}
type WtpRadio3Input interface {
	pulumi.Input

	ToWtpRadio3Output() WtpRadio3Output
	ToWtpRadio3OutputWithContext(context.Context) WtpRadio3Output
}

type WtpRadio3Args struct {
	// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerHigh pulumi.IntPtrInput `pulumi:"autoPowerHigh"`
	// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
	AutoPowerLevel pulumi.StringPtrInput `pulumi:"autoPowerLevel"`
	// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerLow pulumi.IntPtrInput `pulumi:"autoPowerLow"`
	// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
	AutoPowerTarget pulumi.StringPtrInput `pulumi:"autoPowerTarget"`
	// WiFi band that Radio 4 operates on.
	Band pulumi.StringPtrInput `pulumi:"band"`
	// Selected list of wireless radio channels. The structure of `channel` block is documented below.
	Channels WtpRadio3ChannelArrayInput `pulumi:"channels"`
	// Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
	DrmaManualMode pulumi.StringPtrInput `pulumi:"drmaManualMode"`
	// Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
	OverrideAnalysis pulumi.StringPtrInput `pulumi:"overrideAnalysis"`
	// Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
	OverrideBand pulumi.StringPtrInput `pulumi:"overrideBand"`
	// Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
	OverrideChannel pulumi.StringPtrInput `pulumi:"overrideChannel"`
	// Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
	OverrideTxpower pulumi.StringPtrInput `pulumi:"overrideTxpower"`
	// Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
	OverrideVaps pulumi.StringPtrInput `pulumi:"overrideVaps"`
	// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
	PowerLevel pulumi.IntPtrInput `pulumi:"powerLevel"`
	// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
	PowerMode pulumi.StringPtrInput `pulumi:"powerMode"`
	// Radio EIRP power in dBm (1 - 33, default = 27).
	PowerValue pulumi.IntPtrInput `pulumi:"powerValue"`
	// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
	SpectrumAnalysis pulumi.StringPtrInput `pulumi:"spectrumAnalysis"`
	// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
	VapAll pulumi.StringPtrInput `pulumi:"vapAll"`
	// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
	Vaps WtpRadio3VapArrayInput `pulumi:"vaps"`
}

func (WtpRadio3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio3)(nil)).Elem()
}

func (i WtpRadio3Args) ToWtpRadio3Output() WtpRadio3Output {
	return i.ToWtpRadio3OutputWithContext(context.Background())
}

func (i WtpRadio3Args) ToWtpRadio3OutputWithContext(ctx context.Context) WtpRadio3Output {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio3Output)
}

func (i WtpRadio3Args) ToWtpRadio3PtrOutput() WtpRadio3PtrOutput {
	return i.ToWtpRadio3PtrOutputWithContext(context.Background())
}

func (i WtpRadio3Args) ToWtpRadio3PtrOutputWithContext(ctx context.Context) WtpRadio3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio3Output).ToWtpRadio3PtrOutputWithContext(ctx)
}

// WtpRadio3PtrInput is an input type that accepts WtpRadio3Args, WtpRadio3Ptr and WtpRadio3PtrOutput values.
// You can construct a concrete instance of `WtpRadio3PtrInput` via:
//
//	        WtpRadio3Args{...}
//
//	or:
//
//	        nil
type WtpRadio3PtrInput interface {
	pulumi.Input

	ToWtpRadio3PtrOutput() WtpRadio3PtrOutput
	ToWtpRadio3PtrOutputWithContext(context.Context) WtpRadio3PtrOutput
}

type wtpRadio3PtrType WtpRadio3Args

func WtpRadio3Ptr(v *WtpRadio3Args) WtpRadio3PtrInput {
	return (*wtpRadio3PtrType)(v)
}

func (*wtpRadio3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpRadio3)(nil)).Elem()
}

func (i *wtpRadio3PtrType) ToWtpRadio3PtrOutput() WtpRadio3PtrOutput {
	return i.ToWtpRadio3PtrOutputWithContext(context.Background())
}

func (i *wtpRadio3PtrType) ToWtpRadio3PtrOutputWithContext(ctx context.Context) WtpRadio3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio3PtrOutput)
}

type WtpRadio3Output struct{ *pulumi.OutputState }

func (WtpRadio3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio3)(nil)).Elem()
}

func (o WtpRadio3Output) ToWtpRadio3Output() WtpRadio3Output {
	return o
}

func (o WtpRadio3Output) ToWtpRadio3OutputWithContext(ctx context.Context) WtpRadio3Output {
	return o
}

func (o WtpRadio3Output) ToWtpRadio3PtrOutput() WtpRadio3PtrOutput {
	return o.ToWtpRadio3PtrOutputWithContext(context.Background())
}

func (o WtpRadio3Output) ToWtpRadio3PtrOutputWithContext(ctx context.Context) WtpRadio3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WtpRadio3) *WtpRadio3 {
		return &v
	}).(WtpRadio3PtrOutput)
}

// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpRadio3Output) AutoPowerHigh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio3) *int { return v.AutoPowerHigh }).(pulumi.IntPtrOutput)
}

// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
func (o WtpRadio3Output) AutoPowerLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio3) *string { return v.AutoPowerLevel }).(pulumi.StringPtrOutput)
}

// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpRadio3Output) AutoPowerLow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio3) *int { return v.AutoPowerLow }).(pulumi.IntPtrOutput)
}

// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
func (o WtpRadio3Output) AutoPowerTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio3) *string { return v.AutoPowerTarget }).(pulumi.StringPtrOutput)
}

// WiFi band that Radio 4 operates on.
func (o WtpRadio3Output) Band() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio3) *string { return v.Band }).(pulumi.StringPtrOutput)
}

// Selected list of wireless radio channels. The structure of `channel` block is documented below.
func (o WtpRadio3Output) Channels() WtpRadio3ChannelArrayOutput {
	return o.ApplyT(func(v WtpRadio3) []WtpRadio3Channel { return v.Channels }).(WtpRadio3ChannelArrayOutput)
}

// Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
func (o WtpRadio3Output) DrmaManualMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio3) *string { return v.DrmaManualMode }).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
func (o WtpRadio3Output) OverrideAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio3) *string { return v.OverrideAnalysis }).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
func (o WtpRadio3Output) OverrideBand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio3) *string { return v.OverrideBand }).(pulumi.StringPtrOutput)
}

// Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
func (o WtpRadio3Output) OverrideChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio3) *string { return v.OverrideChannel }).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
func (o WtpRadio3Output) OverrideTxpower() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio3) *string { return v.OverrideTxpower }).(pulumi.StringPtrOutput)
}

// Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
func (o WtpRadio3Output) OverrideVaps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio3) *string { return v.OverrideVaps }).(pulumi.StringPtrOutput)
}

// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
func (o WtpRadio3Output) PowerLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio3) *int { return v.PowerLevel }).(pulumi.IntPtrOutput)
}

// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
func (o WtpRadio3Output) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio3) *string { return v.PowerMode }).(pulumi.StringPtrOutput)
}

// Radio EIRP power in dBm (1 - 33, default = 27).
func (o WtpRadio3Output) PowerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio3) *int { return v.PowerValue }).(pulumi.IntPtrOutput)
}

// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
func (o WtpRadio3Output) SpectrumAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio3) *string { return v.SpectrumAnalysis }).(pulumi.StringPtrOutput)
}

// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
func (o WtpRadio3Output) VapAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio3) *string { return v.VapAll }).(pulumi.StringPtrOutput)
}

// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
func (o WtpRadio3Output) Vaps() WtpRadio3VapArrayOutput {
	return o.ApplyT(func(v WtpRadio3) []WtpRadio3Vap { return v.Vaps }).(WtpRadio3VapArrayOutput)
}

type WtpRadio3PtrOutput struct{ *pulumi.OutputState }

func (WtpRadio3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpRadio3)(nil)).Elem()
}

func (o WtpRadio3PtrOutput) ToWtpRadio3PtrOutput() WtpRadio3PtrOutput {
	return o
}

func (o WtpRadio3PtrOutput) ToWtpRadio3PtrOutputWithContext(ctx context.Context) WtpRadio3PtrOutput {
	return o
}

func (o WtpRadio3PtrOutput) Elem() WtpRadio3Output {
	return o.ApplyT(func(v *WtpRadio3) WtpRadio3 {
		if v != nil {
			return *v
		}
		var ret WtpRadio3
		return ret
	}).(WtpRadio3Output)
}

// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpRadio3PtrOutput) AutoPowerHigh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio3) *int {
		if v == nil {
			return nil
		}
		return v.AutoPowerHigh
	}).(pulumi.IntPtrOutput)
}

// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
func (o WtpRadio3PtrOutput) AutoPowerLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio3) *string {
		if v == nil {
			return nil
		}
		return v.AutoPowerLevel
	}).(pulumi.StringPtrOutput)
}

// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpRadio3PtrOutput) AutoPowerLow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio3) *int {
		if v == nil {
			return nil
		}
		return v.AutoPowerLow
	}).(pulumi.IntPtrOutput)
}

// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
func (o WtpRadio3PtrOutput) AutoPowerTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio3) *string {
		if v == nil {
			return nil
		}
		return v.AutoPowerTarget
	}).(pulumi.StringPtrOutput)
}

// WiFi band that Radio 4 operates on.
func (o WtpRadio3PtrOutput) Band() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio3) *string {
		if v == nil {
			return nil
		}
		return v.Band
	}).(pulumi.StringPtrOutput)
}

// Selected list of wireless radio channels. The structure of `channel` block is documented below.
func (o WtpRadio3PtrOutput) Channels() WtpRadio3ChannelArrayOutput {
	return o.ApplyT(func(v *WtpRadio3) []WtpRadio3Channel {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(WtpRadio3ChannelArrayOutput)
}

// Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
func (o WtpRadio3PtrOutput) DrmaManualMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio3) *string {
		if v == nil {
			return nil
		}
		return v.DrmaManualMode
	}).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
func (o WtpRadio3PtrOutput) OverrideAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio3) *string {
		if v == nil {
			return nil
		}
		return v.OverrideAnalysis
	}).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
func (o WtpRadio3PtrOutput) OverrideBand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio3) *string {
		if v == nil {
			return nil
		}
		return v.OverrideBand
	}).(pulumi.StringPtrOutput)
}

// Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
func (o WtpRadio3PtrOutput) OverrideChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio3) *string {
		if v == nil {
			return nil
		}
		return v.OverrideChannel
	}).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
func (o WtpRadio3PtrOutput) OverrideTxpower() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio3) *string {
		if v == nil {
			return nil
		}
		return v.OverrideTxpower
	}).(pulumi.StringPtrOutput)
}

// Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
func (o WtpRadio3PtrOutput) OverrideVaps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio3) *string {
		if v == nil {
			return nil
		}
		return v.OverrideVaps
	}).(pulumi.StringPtrOutput)
}

// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
func (o WtpRadio3PtrOutput) PowerLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio3) *int {
		if v == nil {
			return nil
		}
		return v.PowerLevel
	}).(pulumi.IntPtrOutput)
}

// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
func (o WtpRadio3PtrOutput) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio3) *string {
		if v == nil {
			return nil
		}
		return v.PowerMode
	}).(pulumi.StringPtrOutput)
}

// Radio EIRP power in dBm (1 - 33, default = 27).
func (o WtpRadio3PtrOutput) PowerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio3) *int {
		if v == nil {
			return nil
		}
		return v.PowerValue
	}).(pulumi.IntPtrOutput)
}

// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
func (o WtpRadio3PtrOutput) SpectrumAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SpectrumAnalysis
	}).(pulumi.StringPtrOutput)
}

// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
func (o WtpRadio3PtrOutput) VapAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio3) *string {
		if v == nil {
			return nil
		}
		return v.VapAll
	}).(pulumi.StringPtrOutput)
}

// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
func (o WtpRadio3PtrOutput) Vaps() WtpRadio3VapArrayOutput {
	return o.ApplyT(func(v *WtpRadio3) []WtpRadio3Vap {
		if v == nil {
			return nil
		}
		return v.Vaps
	}).(WtpRadio3VapArrayOutput)
}

type WtpRadio3Channel struct {
	// Channel number.
	Chan *string `pulumi:"chan"`
}

// WtpRadio3ChannelInput is an input type that accepts WtpRadio3ChannelArgs and WtpRadio3ChannelOutput values.
// You can construct a concrete instance of `WtpRadio3ChannelInput` via:
//
//	WtpRadio3ChannelArgs{...}
type WtpRadio3ChannelInput interface {
	pulumi.Input

	ToWtpRadio3ChannelOutput() WtpRadio3ChannelOutput
	ToWtpRadio3ChannelOutputWithContext(context.Context) WtpRadio3ChannelOutput
}

type WtpRadio3ChannelArgs struct {
	// Channel number.
	Chan pulumi.StringPtrInput `pulumi:"chan"`
}

func (WtpRadio3ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio3Channel)(nil)).Elem()
}

func (i WtpRadio3ChannelArgs) ToWtpRadio3ChannelOutput() WtpRadio3ChannelOutput {
	return i.ToWtpRadio3ChannelOutputWithContext(context.Background())
}

func (i WtpRadio3ChannelArgs) ToWtpRadio3ChannelOutputWithContext(ctx context.Context) WtpRadio3ChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio3ChannelOutput)
}

// WtpRadio3ChannelArrayInput is an input type that accepts WtpRadio3ChannelArray and WtpRadio3ChannelArrayOutput values.
// You can construct a concrete instance of `WtpRadio3ChannelArrayInput` via:
//
//	WtpRadio3ChannelArray{ WtpRadio3ChannelArgs{...} }
type WtpRadio3ChannelArrayInput interface {
	pulumi.Input

	ToWtpRadio3ChannelArrayOutput() WtpRadio3ChannelArrayOutput
	ToWtpRadio3ChannelArrayOutputWithContext(context.Context) WtpRadio3ChannelArrayOutput
}

type WtpRadio3ChannelArray []WtpRadio3ChannelInput

func (WtpRadio3ChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpRadio3Channel)(nil)).Elem()
}

func (i WtpRadio3ChannelArray) ToWtpRadio3ChannelArrayOutput() WtpRadio3ChannelArrayOutput {
	return i.ToWtpRadio3ChannelArrayOutputWithContext(context.Background())
}

func (i WtpRadio3ChannelArray) ToWtpRadio3ChannelArrayOutputWithContext(ctx context.Context) WtpRadio3ChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio3ChannelArrayOutput)
}

type WtpRadio3ChannelOutput struct{ *pulumi.OutputState }

func (WtpRadio3ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio3Channel)(nil)).Elem()
}

func (o WtpRadio3ChannelOutput) ToWtpRadio3ChannelOutput() WtpRadio3ChannelOutput {
	return o
}

func (o WtpRadio3ChannelOutput) ToWtpRadio3ChannelOutputWithContext(ctx context.Context) WtpRadio3ChannelOutput {
	return o
}

// Channel number.
func (o WtpRadio3ChannelOutput) Chan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio3Channel) *string { return v.Chan }).(pulumi.StringPtrOutput)
}

type WtpRadio3ChannelArrayOutput struct{ *pulumi.OutputState }

func (WtpRadio3ChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpRadio3Channel)(nil)).Elem()
}

func (o WtpRadio3ChannelArrayOutput) ToWtpRadio3ChannelArrayOutput() WtpRadio3ChannelArrayOutput {
	return o
}

func (o WtpRadio3ChannelArrayOutput) ToWtpRadio3ChannelArrayOutputWithContext(ctx context.Context) WtpRadio3ChannelArrayOutput {
	return o
}

func (o WtpRadio3ChannelArrayOutput) Index(i pulumi.IntInput) WtpRadio3ChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpRadio3Channel {
		return vs[0].([]WtpRadio3Channel)[vs[1].(int)]
	}).(WtpRadio3ChannelOutput)
}

type WtpRadio3Vap struct {
	// Virtual Access Point (VAP) name.
	Name *string `pulumi:"name"`
}

// WtpRadio3VapInput is an input type that accepts WtpRadio3VapArgs and WtpRadio3VapOutput values.
// You can construct a concrete instance of `WtpRadio3VapInput` via:
//
//	WtpRadio3VapArgs{...}
type WtpRadio3VapInput interface {
	pulumi.Input

	ToWtpRadio3VapOutput() WtpRadio3VapOutput
	ToWtpRadio3VapOutputWithContext(context.Context) WtpRadio3VapOutput
}

type WtpRadio3VapArgs struct {
	// Virtual Access Point (VAP) name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (WtpRadio3VapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio3Vap)(nil)).Elem()
}

func (i WtpRadio3VapArgs) ToWtpRadio3VapOutput() WtpRadio3VapOutput {
	return i.ToWtpRadio3VapOutputWithContext(context.Background())
}

func (i WtpRadio3VapArgs) ToWtpRadio3VapOutputWithContext(ctx context.Context) WtpRadio3VapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio3VapOutput)
}

// WtpRadio3VapArrayInput is an input type that accepts WtpRadio3VapArray and WtpRadio3VapArrayOutput values.
// You can construct a concrete instance of `WtpRadio3VapArrayInput` via:
//
//	WtpRadio3VapArray{ WtpRadio3VapArgs{...} }
type WtpRadio3VapArrayInput interface {
	pulumi.Input

	ToWtpRadio3VapArrayOutput() WtpRadio3VapArrayOutput
	ToWtpRadio3VapArrayOutputWithContext(context.Context) WtpRadio3VapArrayOutput
}

type WtpRadio3VapArray []WtpRadio3VapInput

func (WtpRadio3VapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpRadio3Vap)(nil)).Elem()
}

func (i WtpRadio3VapArray) ToWtpRadio3VapArrayOutput() WtpRadio3VapArrayOutput {
	return i.ToWtpRadio3VapArrayOutputWithContext(context.Background())
}

func (i WtpRadio3VapArray) ToWtpRadio3VapArrayOutputWithContext(ctx context.Context) WtpRadio3VapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio3VapArrayOutput)
}

type WtpRadio3VapOutput struct{ *pulumi.OutputState }

func (WtpRadio3VapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio3Vap)(nil)).Elem()
}

func (o WtpRadio3VapOutput) ToWtpRadio3VapOutput() WtpRadio3VapOutput {
	return o
}

func (o WtpRadio3VapOutput) ToWtpRadio3VapOutputWithContext(ctx context.Context) WtpRadio3VapOutput {
	return o
}

// Virtual Access Point (VAP) name.
func (o WtpRadio3VapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio3Vap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type WtpRadio3VapArrayOutput struct{ *pulumi.OutputState }

func (WtpRadio3VapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpRadio3Vap)(nil)).Elem()
}

func (o WtpRadio3VapArrayOutput) ToWtpRadio3VapArrayOutput() WtpRadio3VapArrayOutput {
	return o
}

func (o WtpRadio3VapArrayOutput) ToWtpRadio3VapArrayOutputWithContext(ctx context.Context) WtpRadio3VapArrayOutput {
	return o
}

func (o WtpRadio3VapArrayOutput) Index(i pulumi.IntInput) WtpRadio3VapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpRadio3Vap {
		return vs[0].([]WtpRadio3Vap)[vs[1].(int)]
	}).(WtpRadio3VapOutput)
}

type WtpRadio4 struct {
	// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerHigh *int `pulumi:"autoPowerHigh"`
	// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
	AutoPowerLevel *string `pulumi:"autoPowerLevel"`
	// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerLow *int `pulumi:"autoPowerLow"`
	// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
	AutoPowerTarget *string `pulumi:"autoPowerTarget"`
	// WiFi band that Radio 4 operates on.
	Band *string `pulumi:"band"`
	// Selected list of wireless radio channels. The structure of `channel` block is documented below.
	Channels []WtpRadio4Channel `pulumi:"channels"`
	// Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
	DrmaManualMode *string `pulumi:"drmaManualMode"`
	// Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
	OverrideAnalysis *string `pulumi:"overrideAnalysis"`
	// Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
	OverrideBand *string `pulumi:"overrideBand"`
	// Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
	OverrideChannel *string `pulumi:"overrideChannel"`
	// Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
	OverrideTxpower *string `pulumi:"overrideTxpower"`
	// Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
	OverrideVaps *string `pulumi:"overrideVaps"`
	// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
	PowerLevel *int `pulumi:"powerLevel"`
	// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
	PowerMode *string `pulumi:"powerMode"`
	// Radio EIRP power in dBm (1 - 33, default = 27).
	PowerValue *int `pulumi:"powerValue"`
	// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
	SpectrumAnalysis *string `pulumi:"spectrumAnalysis"`
	// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
	VapAll *string `pulumi:"vapAll"`
	// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
	Vaps []WtpRadio4Vap `pulumi:"vaps"`
}

// WtpRadio4Input is an input type that accepts WtpRadio4Args and WtpRadio4Output values.
// You can construct a concrete instance of `WtpRadio4Input` via:
//
//	WtpRadio4Args{...}
type WtpRadio4Input interface {
	pulumi.Input

	ToWtpRadio4Output() WtpRadio4Output
	ToWtpRadio4OutputWithContext(context.Context) WtpRadio4Output
}

type WtpRadio4Args struct {
	// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerHigh pulumi.IntPtrInput `pulumi:"autoPowerHigh"`
	// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
	AutoPowerLevel pulumi.StringPtrInput `pulumi:"autoPowerLevel"`
	// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerLow pulumi.IntPtrInput `pulumi:"autoPowerLow"`
	// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
	AutoPowerTarget pulumi.StringPtrInput `pulumi:"autoPowerTarget"`
	// WiFi band that Radio 4 operates on.
	Band pulumi.StringPtrInput `pulumi:"band"`
	// Selected list of wireless radio channels. The structure of `channel` block is documented below.
	Channels WtpRadio4ChannelArrayInput `pulumi:"channels"`
	// Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
	DrmaManualMode pulumi.StringPtrInput `pulumi:"drmaManualMode"`
	// Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
	OverrideAnalysis pulumi.StringPtrInput `pulumi:"overrideAnalysis"`
	// Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
	OverrideBand pulumi.StringPtrInput `pulumi:"overrideBand"`
	// Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
	OverrideChannel pulumi.StringPtrInput `pulumi:"overrideChannel"`
	// Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
	OverrideTxpower pulumi.StringPtrInput `pulumi:"overrideTxpower"`
	// Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
	OverrideVaps pulumi.StringPtrInput `pulumi:"overrideVaps"`
	// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
	PowerLevel pulumi.IntPtrInput `pulumi:"powerLevel"`
	// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
	PowerMode pulumi.StringPtrInput `pulumi:"powerMode"`
	// Radio EIRP power in dBm (1 - 33, default = 27).
	PowerValue pulumi.IntPtrInput `pulumi:"powerValue"`
	// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
	SpectrumAnalysis pulumi.StringPtrInput `pulumi:"spectrumAnalysis"`
	// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
	VapAll pulumi.StringPtrInput `pulumi:"vapAll"`
	// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
	Vaps WtpRadio4VapArrayInput `pulumi:"vaps"`
}

func (WtpRadio4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio4)(nil)).Elem()
}

func (i WtpRadio4Args) ToWtpRadio4Output() WtpRadio4Output {
	return i.ToWtpRadio4OutputWithContext(context.Background())
}

func (i WtpRadio4Args) ToWtpRadio4OutputWithContext(ctx context.Context) WtpRadio4Output {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio4Output)
}

func (i WtpRadio4Args) ToWtpRadio4PtrOutput() WtpRadio4PtrOutput {
	return i.ToWtpRadio4PtrOutputWithContext(context.Background())
}

func (i WtpRadio4Args) ToWtpRadio4PtrOutputWithContext(ctx context.Context) WtpRadio4PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio4Output).ToWtpRadio4PtrOutputWithContext(ctx)
}

// WtpRadio4PtrInput is an input type that accepts WtpRadio4Args, WtpRadio4Ptr and WtpRadio4PtrOutput values.
// You can construct a concrete instance of `WtpRadio4PtrInput` via:
//
//	        WtpRadio4Args{...}
//
//	or:
//
//	        nil
type WtpRadio4PtrInput interface {
	pulumi.Input

	ToWtpRadio4PtrOutput() WtpRadio4PtrOutput
	ToWtpRadio4PtrOutputWithContext(context.Context) WtpRadio4PtrOutput
}

type wtpRadio4PtrType WtpRadio4Args

func WtpRadio4Ptr(v *WtpRadio4Args) WtpRadio4PtrInput {
	return (*wtpRadio4PtrType)(v)
}

func (*wtpRadio4PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpRadio4)(nil)).Elem()
}

func (i *wtpRadio4PtrType) ToWtpRadio4PtrOutput() WtpRadio4PtrOutput {
	return i.ToWtpRadio4PtrOutputWithContext(context.Background())
}

func (i *wtpRadio4PtrType) ToWtpRadio4PtrOutputWithContext(ctx context.Context) WtpRadio4PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio4PtrOutput)
}

type WtpRadio4Output struct{ *pulumi.OutputState }

func (WtpRadio4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio4)(nil)).Elem()
}

func (o WtpRadio4Output) ToWtpRadio4Output() WtpRadio4Output {
	return o
}

func (o WtpRadio4Output) ToWtpRadio4OutputWithContext(ctx context.Context) WtpRadio4Output {
	return o
}

func (o WtpRadio4Output) ToWtpRadio4PtrOutput() WtpRadio4PtrOutput {
	return o.ToWtpRadio4PtrOutputWithContext(context.Background())
}

func (o WtpRadio4Output) ToWtpRadio4PtrOutputWithContext(ctx context.Context) WtpRadio4PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WtpRadio4) *WtpRadio4 {
		return &v
	}).(WtpRadio4PtrOutput)
}

// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpRadio4Output) AutoPowerHigh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio4) *int { return v.AutoPowerHigh }).(pulumi.IntPtrOutput)
}

// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
func (o WtpRadio4Output) AutoPowerLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio4) *string { return v.AutoPowerLevel }).(pulumi.StringPtrOutput)
}

// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpRadio4Output) AutoPowerLow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio4) *int { return v.AutoPowerLow }).(pulumi.IntPtrOutput)
}

// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
func (o WtpRadio4Output) AutoPowerTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio4) *string { return v.AutoPowerTarget }).(pulumi.StringPtrOutput)
}

// WiFi band that Radio 4 operates on.
func (o WtpRadio4Output) Band() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio4) *string { return v.Band }).(pulumi.StringPtrOutput)
}

// Selected list of wireless radio channels. The structure of `channel` block is documented below.
func (o WtpRadio4Output) Channels() WtpRadio4ChannelArrayOutput {
	return o.ApplyT(func(v WtpRadio4) []WtpRadio4Channel { return v.Channels }).(WtpRadio4ChannelArrayOutput)
}

// Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
func (o WtpRadio4Output) DrmaManualMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio4) *string { return v.DrmaManualMode }).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
func (o WtpRadio4Output) OverrideAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio4) *string { return v.OverrideAnalysis }).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
func (o WtpRadio4Output) OverrideBand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio4) *string { return v.OverrideBand }).(pulumi.StringPtrOutput)
}

// Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
func (o WtpRadio4Output) OverrideChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio4) *string { return v.OverrideChannel }).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
func (o WtpRadio4Output) OverrideTxpower() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio4) *string { return v.OverrideTxpower }).(pulumi.StringPtrOutput)
}

// Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
func (o WtpRadio4Output) OverrideVaps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio4) *string { return v.OverrideVaps }).(pulumi.StringPtrOutput)
}

// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
func (o WtpRadio4Output) PowerLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio4) *int { return v.PowerLevel }).(pulumi.IntPtrOutput)
}

// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
func (o WtpRadio4Output) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio4) *string { return v.PowerMode }).(pulumi.StringPtrOutput)
}

// Radio EIRP power in dBm (1 - 33, default = 27).
func (o WtpRadio4Output) PowerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpRadio4) *int { return v.PowerValue }).(pulumi.IntPtrOutput)
}

// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
func (o WtpRadio4Output) SpectrumAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio4) *string { return v.SpectrumAnalysis }).(pulumi.StringPtrOutput)
}

// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
func (o WtpRadio4Output) VapAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio4) *string { return v.VapAll }).(pulumi.StringPtrOutput)
}

// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
func (o WtpRadio4Output) Vaps() WtpRadio4VapArrayOutput {
	return o.ApplyT(func(v WtpRadio4) []WtpRadio4Vap { return v.Vaps }).(WtpRadio4VapArrayOutput)
}

type WtpRadio4PtrOutput struct{ *pulumi.OutputState }

func (WtpRadio4PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpRadio4)(nil)).Elem()
}

func (o WtpRadio4PtrOutput) ToWtpRadio4PtrOutput() WtpRadio4PtrOutput {
	return o
}

func (o WtpRadio4PtrOutput) ToWtpRadio4PtrOutputWithContext(ctx context.Context) WtpRadio4PtrOutput {
	return o
}

func (o WtpRadio4PtrOutput) Elem() WtpRadio4Output {
	return o.ApplyT(func(v *WtpRadio4) WtpRadio4 {
		if v != nil {
			return *v
		}
		var ret WtpRadio4
		return ret
	}).(WtpRadio4Output)
}

// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpRadio4PtrOutput) AutoPowerHigh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio4) *int {
		if v == nil {
			return nil
		}
		return v.AutoPowerHigh
	}).(pulumi.IntPtrOutput)
}

// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
func (o WtpRadio4PtrOutput) AutoPowerLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio4) *string {
		if v == nil {
			return nil
		}
		return v.AutoPowerLevel
	}).(pulumi.StringPtrOutput)
}

// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpRadio4PtrOutput) AutoPowerLow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio4) *int {
		if v == nil {
			return nil
		}
		return v.AutoPowerLow
	}).(pulumi.IntPtrOutput)
}

// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
func (o WtpRadio4PtrOutput) AutoPowerTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio4) *string {
		if v == nil {
			return nil
		}
		return v.AutoPowerTarget
	}).(pulumi.StringPtrOutput)
}

// WiFi band that Radio 4 operates on.
func (o WtpRadio4PtrOutput) Band() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio4) *string {
		if v == nil {
			return nil
		}
		return v.Band
	}).(pulumi.StringPtrOutput)
}

// Selected list of wireless radio channels. The structure of `channel` block is documented below.
func (o WtpRadio4PtrOutput) Channels() WtpRadio4ChannelArrayOutput {
	return o.ApplyT(func(v *WtpRadio4) []WtpRadio4Channel {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(WtpRadio4ChannelArrayOutput)
}

// Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
func (o WtpRadio4PtrOutput) DrmaManualMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio4) *string {
		if v == nil {
			return nil
		}
		return v.DrmaManualMode
	}).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
func (o WtpRadio4PtrOutput) OverrideAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio4) *string {
		if v == nil {
			return nil
		}
		return v.OverrideAnalysis
	}).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
func (o WtpRadio4PtrOutput) OverrideBand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio4) *string {
		if v == nil {
			return nil
		}
		return v.OverrideBand
	}).(pulumi.StringPtrOutput)
}

// Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
func (o WtpRadio4PtrOutput) OverrideChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio4) *string {
		if v == nil {
			return nil
		}
		return v.OverrideChannel
	}).(pulumi.StringPtrOutput)
}

// Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
func (o WtpRadio4PtrOutput) OverrideTxpower() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio4) *string {
		if v == nil {
			return nil
		}
		return v.OverrideTxpower
	}).(pulumi.StringPtrOutput)
}

// Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
func (o WtpRadio4PtrOutput) OverrideVaps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio4) *string {
		if v == nil {
			return nil
		}
		return v.OverrideVaps
	}).(pulumi.StringPtrOutput)
}

// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
func (o WtpRadio4PtrOutput) PowerLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio4) *int {
		if v == nil {
			return nil
		}
		return v.PowerLevel
	}).(pulumi.IntPtrOutput)
}

// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
func (o WtpRadio4PtrOutput) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio4) *string {
		if v == nil {
			return nil
		}
		return v.PowerMode
	}).(pulumi.StringPtrOutput)
}

// Radio EIRP power in dBm (1 - 33, default = 27).
func (o WtpRadio4PtrOutput) PowerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpRadio4) *int {
		if v == nil {
			return nil
		}
		return v.PowerValue
	}).(pulumi.IntPtrOutput)
}

// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
func (o WtpRadio4PtrOutput) SpectrumAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SpectrumAnalysis
	}).(pulumi.StringPtrOutput)
}

// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
func (o WtpRadio4PtrOutput) VapAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpRadio4) *string {
		if v == nil {
			return nil
		}
		return v.VapAll
	}).(pulumi.StringPtrOutput)
}

// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
func (o WtpRadio4PtrOutput) Vaps() WtpRadio4VapArrayOutput {
	return o.ApplyT(func(v *WtpRadio4) []WtpRadio4Vap {
		if v == nil {
			return nil
		}
		return v.Vaps
	}).(WtpRadio4VapArrayOutput)
}

type WtpRadio4Channel struct {
	// Channel number.
	Chan *string `pulumi:"chan"`
}

// WtpRadio4ChannelInput is an input type that accepts WtpRadio4ChannelArgs and WtpRadio4ChannelOutput values.
// You can construct a concrete instance of `WtpRadio4ChannelInput` via:
//
//	WtpRadio4ChannelArgs{...}
type WtpRadio4ChannelInput interface {
	pulumi.Input

	ToWtpRadio4ChannelOutput() WtpRadio4ChannelOutput
	ToWtpRadio4ChannelOutputWithContext(context.Context) WtpRadio4ChannelOutput
}

type WtpRadio4ChannelArgs struct {
	// Channel number.
	Chan pulumi.StringPtrInput `pulumi:"chan"`
}

func (WtpRadio4ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio4Channel)(nil)).Elem()
}

func (i WtpRadio4ChannelArgs) ToWtpRadio4ChannelOutput() WtpRadio4ChannelOutput {
	return i.ToWtpRadio4ChannelOutputWithContext(context.Background())
}

func (i WtpRadio4ChannelArgs) ToWtpRadio4ChannelOutputWithContext(ctx context.Context) WtpRadio4ChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio4ChannelOutput)
}

// WtpRadio4ChannelArrayInput is an input type that accepts WtpRadio4ChannelArray and WtpRadio4ChannelArrayOutput values.
// You can construct a concrete instance of `WtpRadio4ChannelArrayInput` via:
//
//	WtpRadio4ChannelArray{ WtpRadio4ChannelArgs{...} }
type WtpRadio4ChannelArrayInput interface {
	pulumi.Input

	ToWtpRadio4ChannelArrayOutput() WtpRadio4ChannelArrayOutput
	ToWtpRadio4ChannelArrayOutputWithContext(context.Context) WtpRadio4ChannelArrayOutput
}

type WtpRadio4ChannelArray []WtpRadio4ChannelInput

func (WtpRadio4ChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpRadio4Channel)(nil)).Elem()
}

func (i WtpRadio4ChannelArray) ToWtpRadio4ChannelArrayOutput() WtpRadio4ChannelArrayOutput {
	return i.ToWtpRadio4ChannelArrayOutputWithContext(context.Background())
}

func (i WtpRadio4ChannelArray) ToWtpRadio4ChannelArrayOutputWithContext(ctx context.Context) WtpRadio4ChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio4ChannelArrayOutput)
}

type WtpRadio4ChannelOutput struct{ *pulumi.OutputState }

func (WtpRadio4ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio4Channel)(nil)).Elem()
}

func (o WtpRadio4ChannelOutput) ToWtpRadio4ChannelOutput() WtpRadio4ChannelOutput {
	return o
}

func (o WtpRadio4ChannelOutput) ToWtpRadio4ChannelOutputWithContext(ctx context.Context) WtpRadio4ChannelOutput {
	return o
}

// Channel number.
func (o WtpRadio4ChannelOutput) Chan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio4Channel) *string { return v.Chan }).(pulumi.StringPtrOutput)
}

type WtpRadio4ChannelArrayOutput struct{ *pulumi.OutputState }

func (WtpRadio4ChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpRadio4Channel)(nil)).Elem()
}

func (o WtpRadio4ChannelArrayOutput) ToWtpRadio4ChannelArrayOutput() WtpRadio4ChannelArrayOutput {
	return o
}

func (o WtpRadio4ChannelArrayOutput) ToWtpRadio4ChannelArrayOutputWithContext(ctx context.Context) WtpRadio4ChannelArrayOutput {
	return o
}

func (o WtpRadio4ChannelArrayOutput) Index(i pulumi.IntInput) WtpRadio4ChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpRadio4Channel {
		return vs[0].([]WtpRadio4Channel)[vs[1].(int)]
	}).(WtpRadio4ChannelOutput)
}

type WtpRadio4Vap struct {
	// Virtual Access Point (VAP) name.
	Name *string `pulumi:"name"`
}

// WtpRadio4VapInput is an input type that accepts WtpRadio4VapArgs and WtpRadio4VapOutput values.
// You can construct a concrete instance of `WtpRadio4VapInput` via:
//
//	WtpRadio4VapArgs{...}
type WtpRadio4VapInput interface {
	pulumi.Input

	ToWtpRadio4VapOutput() WtpRadio4VapOutput
	ToWtpRadio4VapOutputWithContext(context.Context) WtpRadio4VapOutput
}

type WtpRadio4VapArgs struct {
	// Virtual Access Point (VAP) name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (WtpRadio4VapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio4Vap)(nil)).Elem()
}

func (i WtpRadio4VapArgs) ToWtpRadio4VapOutput() WtpRadio4VapOutput {
	return i.ToWtpRadio4VapOutputWithContext(context.Background())
}

func (i WtpRadio4VapArgs) ToWtpRadio4VapOutputWithContext(ctx context.Context) WtpRadio4VapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio4VapOutput)
}

// WtpRadio4VapArrayInput is an input type that accepts WtpRadio4VapArray and WtpRadio4VapArrayOutput values.
// You can construct a concrete instance of `WtpRadio4VapArrayInput` via:
//
//	WtpRadio4VapArray{ WtpRadio4VapArgs{...} }
type WtpRadio4VapArrayInput interface {
	pulumi.Input

	ToWtpRadio4VapArrayOutput() WtpRadio4VapArrayOutput
	ToWtpRadio4VapArrayOutputWithContext(context.Context) WtpRadio4VapArrayOutput
}

type WtpRadio4VapArray []WtpRadio4VapInput

func (WtpRadio4VapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpRadio4Vap)(nil)).Elem()
}

func (i WtpRadio4VapArray) ToWtpRadio4VapArrayOutput() WtpRadio4VapArrayOutput {
	return i.ToWtpRadio4VapArrayOutputWithContext(context.Background())
}

func (i WtpRadio4VapArray) ToWtpRadio4VapArrayOutputWithContext(ctx context.Context) WtpRadio4VapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpRadio4VapArrayOutput)
}

type WtpRadio4VapOutput struct{ *pulumi.OutputState }

func (WtpRadio4VapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpRadio4Vap)(nil)).Elem()
}

func (o WtpRadio4VapOutput) ToWtpRadio4VapOutput() WtpRadio4VapOutput {
	return o
}

func (o WtpRadio4VapOutput) ToWtpRadio4VapOutputWithContext(ctx context.Context) WtpRadio4VapOutput {
	return o
}

// Virtual Access Point (VAP) name.
func (o WtpRadio4VapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpRadio4Vap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type WtpRadio4VapArrayOutput struct{ *pulumi.OutputState }

func (WtpRadio4VapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpRadio4Vap)(nil)).Elem()
}

func (o WtpRadio4VapArrayOutput) ToWtpRadio4VapArrayOutput() WtpRadio4VapArrayOutput {
	return o
}

func (o WtpRadio4VapArrayOutput) ToWtpRadio4VapArrayOutputWithContext(ctx context.Context) WtpRadio4VapArrayOutput {
	return o
}

func (o WtpRadio4VapArrayOutput) Index(i pulumi.IntInput) WtpRadio4VapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpRadio4Vap {
		return vs[0].([]WtpRadio4Vap)[vs[1].(int)]
	}).(WtpRadio4VapOutput)
}

type WtpSplitTunnelingAcl struct {
	// Destination IP and mask for the split-tunneling subnet.
	DestIp *string `pulumi:"destIp"`
	// ID.
	Id *int `pulumi:"id"`
}

// WtpSplitTunnelingAclInput is an input type that accepts WtpSplitTunnelingAclArgs and WtpSplitTunnelingAclOutput values.
// You can construct a concrete instance of `WtpSplitTunnelingAclInput` via:
//
//	WtpSplitTunnelingAclArgs{...}
type WtpSplitTunnelingAclInput interface {
	pulumi.Input

	ToWtpSplitTunnelingAclOutput() WtpSplitTunnelingAclOutput
	ToWtpSplitTunnelingAclOutputWithContext(context.Context) WtpSplitTunnelingAclOutput
}

type WtpSplitTunnelingAclArgs struct {
	// Destination IP and mask for the split-tunneling subnet.
	DestIp pulumi.StringPtrInput `pulumi:"destIp"`
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (WtpSplitTunnelingAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpSplitTunnelingAcl)(nil)).Elem()
}

func (i WtpSplitTunnelingAclArgs) ToWtpSplitTunnelingAclOutput() WtpSplitTunnelingAclOutput {
	return i.ToWtpSplitTunnelingAclOutputWithContext(context.Background())
}

func (i WtpSplitTunnelingAclArgs) ToWtpSplitTunnelingAclOutputWithContext(ctx context.Context) WtpSplitTunnelingAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpSplitTunnelingAclOutput)
}

// WtpSplitTunnelingAclArrayInput is an input type that accepts WtpSplitTunnelingAclArray and WtpSplitTunnelingAclArrayOutput values.
// You can construct a concrete instance of `WtpSplitTunnelingAclArrayInput` via:
//
//	WtpSplitTunnelingAclArray{ WtpSplitTunnelingAclArgs{...} }
type WtpSplitTunnelingAclArrayInput interface {
	pulumi.Input

	ToWtpSplitTunnelingAclArrayOutput() WtpSplitTunnelingAclArrayOutput
	ToWtpSplitTunnelingAclArrayOutputWithContext(context.Context) WtpSplitTunnelingAclArrayOutput
}

type WtpSplitTunnelingAclArray []WtpSplitTunnelingAclInput

func (WtpSplitTunnelingAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpSplitTunnelingAcl)(nil)).Elem()
}

func (i WtpSplitTunnelingAclArray) ToWtpSplitTunnelingAclArrayOutput() WtpSplitTunnelingAclArrayOutput {
	return i.ToWtpSplitTunnelingAclArrayOutputWithContext(context.Background())
}

func (i WtpSplitTunnelingAclArray) ToWtpSplitTunnelingAclArrayOutputWithContext(ctx context.Context) WtpSplitTunnelingAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpSplitTunnelingAclArrayOutput)
}

type WtpSplitTunnelingAclOutput struct{ *pulumi.OutputState }

func (WtpSplitTunnelingAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpSplitTunnelingAcl)(nil)).Elem()
}

func (o WtpSplitTunnelingAclOutput) ToWtpSplitTunnelingAclOutput() WtpSplitTunnelingAclOutput {
	return o
}

func (o WtpSplitTunnelingAclOutput) ToWtpSplitTunnelingAclOutputWithContext(ctx context.Context) WtpSplitTunnelingAclOutput {
	return o
}

// Destination IP and mask for the split-tunneling subnet.
func (o WtpSplitTunnelingAclOutput) DestIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpSplitTunnelingAcl) *string { return v.DestIp }).(pulumi.StringPtrOutput)
}

// ID.
func (o WtpSplitTunnelingAclOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpSplitTunnelingAcl) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type WtpSplitTunnelingAclArrayOutput struct{ *pulumi.OutputState }

func (WtpSplitTunnelingAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpSplitTunnelingAcl)(nil)).Elem()
}

func (o WtpSplitTunnelingAclArrayOutput) ToWtpSplitTunnelingAclArrayOutput() WtpSplitTunnelingAclArrayOutput {
	return o
}

func (o WtpSplitTunnelingAclArrayOutput) ToWtpSplitTunnelingAclArrayOutputWithContext(ctx context.Context) WtpSplitTunnelingAclArrayOutput {
	return o
}

func (o WtpSplitTunnelingAclArrayOutput) Index(i pulumi.IntInput) WtpSplitTunnelingAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpSplitTunnelingAcl {
		return vs[0].([]WtpSplitTunnelingAcl)[vs[1].(int)]
	}).(WtpSplitTunnelingAclOutput)
}

type WtpgroupWtp struct {
	// WTP ID.
	WtpId *string `pulumi:"wtpId"`
}

// WtpgroupWtpInput is an input type that accepts WtpgroupWtpArgs and WtpgroupWtpOutput values.
// You can construct a concrete instance of `WtpgroupWtpInput` via:
//
//	WtpgroupWtpArgs{...}
type WtpgroupWtpInput interface {
	pulumi.Input

	ToWtpgroupWtpOutput() WtpgroupWtpOutput
	ToWtpgroupWtpOutputWithContext(context.Context) WtpgroupWtpOutput
}

type WtpgroupWtpArgs struct {
	// WTP ID.
	WtpId pulumi.StringPtrInput `pulumi:"wtpId"`
}

func (WtpgroupWtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpgroupWtp)(nil)).Elem()
}

func (i WtpgroupWtpArgs) ToWtpgroupWtpOutput() WtpgroupWtpOutput {
	return i.ToWtpgroupWtpOutputWithContext(context.Background())
}

func (i WtpgroupWtpArgs) ToWtpgroupWtpOutputWithContext(ctx context.Context) WtpgroupWtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpgroupWtpOutput)
}

// WtpgroupWtpArrayInput is an input type that accepts WtpgroupWtpArray and WtpgroupWtpArrayOutput values.
// You can construct a concrete instance of `WtpgroupWtpArrayInput` via:
//
//	WtpgroupWtpArray{ WtpgroupWtpArgs{...} }
type WtpgroupWtpArrayInput interface {
	pulumi.Input

	ToWtpgroupWtpArrayOutput() WtpgroupWtpArrayOutput
	ToWtpgroupWtpArrayOutputWithContext(context.Context) WtpgroupWtpArrayOutput
}

type WtpgroupWtpArray []WtpgroupWtpInput

func (WtpgroupWtpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpgroupWtp)(nil)).Elem()
}

func (i WtpgroupWtpArray) ToWtpgroupWtpArrayOutput() WtpgroupWtpArrayOutput {
	return i.ToWtpgroupWtpArrayOutputWithContext(context.Background())
}

func (i WtpgroupWtpArray) ToWtpgroupWtpArrayOutputWithContext(ctx context.Context) WtpgroupWtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpgroupWtpArrayOutput)
}

type WtpgroupWtpOutput struct{ *pulumi.OutputState }

func (WtpgroupWtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpgroupWtp)(nil)).Elem()
}

func (o WtpgroupWtpOutput) ToWtpgroupWtpOutput() WtpgroupWtpOutput {
	return o
}

func (o WtpgroupWtpOutput) ToWtpgroupWtpOutputWithContext(ctx context.Context) WtpgroupWtpOutput {
	return o
}

// WTP ID.
func (o WtpgroupWtpOutput) WtpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpgroupWtp) *string { return v.WtpId }).(pulumi.StringPtrOutput)
}

type WtpgroupWtpArrayOutput struct{ *pulumi.OutputState }

func (WtpgroupWtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpgroupWtp)(nil)).Elem()
}

func (o WtpgroupWtpArrayOutput) ToWtpgroupWtpArrayOutput() WtpgroupWtpArrayOutput {
	return o
}

func (o WtpgroupWtpArrayOutput) ToWtpgroupWtpArrayOutputWithContext(ctx context.Context) WtpgroupWtpArrayOutput {
	return o
}

func (o WtpgroupWtpArrayOutput) Index(i pulumi.IntInput) WtpgroupWtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpgroupWtp {
		return vs[0].([]WtpgroupWtp)[vs[1].(int)]
	}).(WtpgroupWtpOutput)
}

type WtpprofileDenyMacList struct {
	// ID.
	Id *int `pulumi:"id"`
	// A WiFi device with this MAC address is denied access to this WTP, FortiAP or AP.
	Mac *string `pulumi:"mac"`
}

// WtpprofileDenyMacListInput is an input type that accepts WtpprofileDenyMacListArgs and WtpprofileDenyMacListOutput values.
// You can construct a concrete instance of `WtpprofileDenyMacListInput` via:
//
//	WtpprofileDenyMacListArgs{...}
type WtpprofileDenyMacListInput interface {
	pulumi.Input

	ToWtpprofileDenyMacListOutput() WtpprofileDenyMacListOutput
	ToWtpprofileDenyMacListOutputWithContext(context.Context) WtpprofileDenyMacListOutput
}

type WtpprofileDenyMacListArgs struct {
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// A WiFi device with this MAC address is denied access to this WTP, FortiAP or AP.
	Mac pulumi.StringPtrInput `pulumi:"mac"`
}

func (WtpprofileDenyMacListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileDenyMacList)(nil)).Elem()
}

func (i WtpprofileDenyMacListArgs) ToWtpprofileDenyMacListOutput() WtpprofileDenyMacListOutput {
	return i.ToWtpprofileDenyMacListOutputWithContext(context.Background())
}

func (i WtpprofileDenyMacListArgs) ToWtpprofileDenyMacListOutputWithContext(ctx context.Context) WtpprofileDenyMacListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileDenyMacListOutput)
}

// WtpprofileDenyMacListArrayInput is an input type that accepts WtpprofileDenyMacListArray and WtpprofileDenyMacListArrayOutput values.
// You can construct a concrete instance of `WtpprofileDenyMacListArrayInput` via:
//
//	WtpprofileDenyMacListArray{ WtpprofileDenyMacListArgs{...} }
type WtpprofileDenyMacListArrayInput interface {
	pulumi.Input

	ToWtpprofileDenyMacListArrayOutput() WtpprofileDenyMacListArrayOutput
	ToWtpprofileDenyMacListArrayOutputWithContext(context.Context) WtpprofileDenyMacListArrayOutput
}

type WtpprofileDenyMacListArray []WtpprofileDenyMacListInput

func (WtpprofileDenyMacListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileDenyMacList)(nil)).Elem()
}

func (i WtpprofileDenyMacListArray) ToWtpprofileDenyMacListArrayOutput() WtpprofileDenyMacListArrayOutput {
	return i.ToWtpprofileDenyMacListArrayOutputWithContext(context.Background())
}

func (i WtpprofileDenyMacListArray) ToWtpprofileDenyMacListArrayOutputWithContext(ctx context.Context) WtpprofileDenyMacListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileDenyMacListArrayOutput)
}

type WtpprofileDenyMacListOutput struct{ *pulumi.OutputState }

func (WtpprofileDenyMacListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileDenyMacList)(nil)).Elem()
}

func (o WtpprofileDenyMacListOutput) ToWtpprofileDenyMacListOutput() WtpprofileDenyMacListOutput {
	return o
}

func (o WtpprofileDenyMacListOutput) ToWtpprofileDenyMacListOutputWithContext(ctx context.Context) WtpprofileDenyMacListOutput {
	return o
}

// ID.
func (o WtpprofileDenyMacListOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileDenyMacList) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// A WiFi device with this MAC address is denied access to this WTP, FortiAP or AP.
func (o WtpprofileDenyMacListOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileDenyMacList) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

type WtpprofileDenyMacListArrayOutput struct{ *pulumi.OutputState }

func (WtpprofileDenyMacListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileDenyMacList)(nil)).Elem()
}

func (o WtpprofileDenyMacListArrayOutput) ToWtpprofileDenyMacListArrayOutput() WtpprofileDenyMacListArrayOutput {
	return o
}

func (o WtpprofileDenyMacListArrayOutput) ToWtpprofileDenyMacListArrayOutputWithContext(ctx context.Context) WtpprofileDenyMacListArrayOutput {
	return o
}

func (o WtpprofileDenyMacListArrayOutput) Index(i pulumi.IntInput) WtpprofileDenyMacListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpprofileDenyMacList {
		return vs[0].([]WtpprofileDenyMacList)[vs[1].(int)]
	}).(WtpprofileDenyMacListOutput)
}

type WtpprofileEslSesDongle struct {
	// ESL SES-imagotag APC address type (default = fqdn). Valid values: `fqdn`, `ip`.
	ApcAddrType *string `pulumi:"apcAddrType"`
	// FQDN of ESL SES-imagotag Access Point Controller (APC).
	ApcFqdn *string `pulumi:"apcFqdn"`
	// IP address of ESL SES-imagotag Access Point Controller (APC).
	ApcIp *string `pulumi:"apcIp"`
	// Port of ESL SES-imagotag Access Point Controller (APC).
	ApcPort *int `pulumi:"apcPort"`
	// ESL SES-imagotag dongle coexistence level (default = none). Valid values: `none`.
	CoexLevel *string `pulumi:"coexLevel"`
	// Compliance levels for the ESL solution integration (default = compliance-level-2). Valid values: `compliance-level-2`.
	ComplianceLevel *string `pulumi:"complianceLevel"`
	// ESL SES-imagotag dongle channel (default = 127). Valid values: `-1`, `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `127`.
	EslChannel *string `pulumi:"eslChannel"`
	// ESL SES-imagotag dongle output power (default = A). Valid values: `a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`.
	OutputPower *string `pulumi:"outputPower"`
	// Enable/disable ESL SES-imagotag Serial Communication Daemon (SCD) (default = disable). Valid values: `enable`, `disable`.
	ScdEnable *string `pulumi:"scdEnable"`
	// Enable/disable TLS Certificate verification. (default = enable). Valid values: `enable`, `disable`.
	TlsCertVerification *string `pulumi:"tlsCertVerification"`
	// Enable/disable TLS Certificate verification. (default = disable). Valid values: `enable`, `disable`.
	TlsFqdnVerification *string `pulumi:"tlsFqdnVerification"`
}

// WtpprofileEslSesDongleInput is an input type that accepts WtpprofileEslSesDongleArgs and WtpprofileEslSesDongleOutput values.
// You can construct a concrete instance of `WtpprofileEslSesDongleInput` via:
//
//	WtpprofileEslSesDongleArgs{...}
type WtpprofileEslSesDongleInput interface {
	pulumi.Input

	ToWtpprofileEslSesDongleOutput() WtpprofileEslSesDongleOutput
	ToWtpprofileEslSesDongleOutputWithContext(context.Context) WtpprofileEslSesDongleOutput
}

type WtpprofileEslSesDongleArgs struct {
	// ESL SES-imagotag APC address type (default = fqdn). Valid values: `fqdn`, `ip`.
	ApcAddrType pulumi.StringPtrInput `pulumi:"apcAddrType"`
	// FQDN of ESL SES-imagotag Access Point Controller (APC).
	ApcFqdn pulumi.StringPtrInput `pulumi:"apcFqdn"`
	// IP address of ESL SES-imagotag Access Point Controller (APC).
	ApcIp pulumi.StringPtrInput `pulumi:"apcIp"`
	// Port of ESL SES-imagotag Access Point Controller (APC).
	ApcPort pulumi.IntPtrInput `pulumi:"apcPort"`
	// ESL SES-imagotag dongle coexistence level (default = none). Valid values: `none`.
	CoexLevel pulumi.StringPtrInput `pulumi:"coexLevel"`
	// Compliance levels for the ESL solution integration (default = compliance-level-2). Valid values: `compliance-level-2`.
	ComplianceLevel pulumi.StringPtrInput `pulumi:"complianceLevel"`
	// ESL SES-imagotag dongle channel (default = 127). Valid values: `-1`, `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `127`.
	EslChannel pulumi.StringPtrInput `pulumi:"eslChannel"`
	// ESL SES-imagotag dongle output power (default = A). Valid values: `a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`.
	OutputPower pulumi.StringPtrInput `pulumi:"outputPower"`
	// Enable/disable ESL SES-imagotag Serial Communication Daemon (SCD) (default = disable). Valid values: `enable`, `disable`.
	ScdEnable pulumi.StringPtrInput `pulumi:"scdEnable"`
	// Enable/disable TLS Certificate verification. (default = enable). Valid values: `enable`, `disable`.
	TlsCertVerification pulumi.StringPtrInput `pulumi:"tlsCertVerification"`
	// Enable/disable TLS Certificate verification. (default = disable). Valid values: `enable`, `disable`.
	TlsFqdnVerification pulumi.StringPtrInput `pulumi:"tlsFqdnVerification"`
}

func (WtpprofileEslSesDongleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileEslSesDongle)(nil)).Elem()
}

func (i WtpprofileEslSesDongleArgs) ToWtpprofileEslSesDongleOutput() WtpprofileEslSesDongleOutput {
	return i.ToWtpprofileEslSesDongleOutputWithContext(context.Background())
}

func (i WtpprofileEslSesDongleArgs) ToWtpprofileEslSesDongleOutputWithContext(ctx context.Context) WtpprofileEslSesDongleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileEslSesDongleOutput)
}

func (i WtpprofileEslSesDongleArgs) ToWtpprofileEslSesDonglePtrOutput() WtpprofileEslSesDonglePtrOutput {
	return i.ToWtpprofileEslSesDonglePtrOutputWithContext(context.Background())
}

func (i WtpprofileEslSesDongleArgs) ToWtpprofileEslSesDonglePtrOutputWithContext(ctx context.Context) WtpprofileEslSesDonglePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileEslSesDongleOutput).ToWtpprofileEslSesDonglePtrOutputWithContext(ctx)
}

// WtpprofileEslSesDonglePtrInput is an input type that accepts WtpprofileEslSesDongleArgs, WtpprofileEslSesDonglePtr and WtpprofileEslSesDonglePtrOutput values.
// You can construct a concrete instance of `WtpprofileEslSesDonglePtrInput` via:
//
//	        WtpprofileEslSesDongleArgs{...}
//
//	or:
//
//	        nil
type WtpprofileEslSesDonglePtrInput interface {
	pulumi.Input

	ToWtpprofileEslSesDonglePtrOutput() WtpprofileEslSesDonglePtrOutput
	ToWtpprofileEslSesDonglePtrOutputWithContext(context.Context) WtpprofileEslSesDonglePtrOutput
}

type wtpprofileEslSesDonglePtrType WtpprofileEslSesDongleArgs

func WtpprofileEslSesDonglePtr(v *WtpprofileEslSesDongleArgs) WtpprofileEslSesDonglePtrInput {
	return (*wtpprofileEslSesDonglePtrType)(v)
}

func (*wtpprofileEslSesDonglePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpprofileEslSesDongle)(nil)).Elem()
}

func (i *wtpprofileEslSesDonglePtrType) ToWtpprofileEslSesDonglePtrOutput() WtpprofileEslSesDonglePtrOutput {
	return i.ToWtpprofileEslSesDonglePtrOutputWithContext(context.Background())
}

func (i *wtpprofileEslSesDonglePtrType) ToWtpprofileEslSesDonglePtrOutputWithContext(ctx context.Context) WtpprofileEslSesDonglePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileEslSesDonglePtrOutput)
}

type WtpprofileEslSesDongleOutput struct{ *pulumi.OutputState }

func (WtpprofileEslSesDongleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileEslSesDongle)(nil)).Elem()
}

func (o WtpprofileEslSesDongleOutput) ToWtpprofileEslSesDongleOutput() WtpprofileEslSesDongleOutput {
	return o
}

func (o WtpprofileEslSesDongleOutput) ToWtpprofileEslSesDongleOutputWithContext(ctx context.Context) WtpprofileEslSesDongleOutput {
	return o
}

func (o WtpprofileEslSesDongleOutput) ToWtpprofileEslSesDonglePtrOutput() WtpprofileEslSesDonglePtrOutput {
	return o.ToWtpprofileEslSesDonglePtrOutputWithContext(context.Background())
}

func (o WtpprofileEslSesDongleOutput) ToWtpprofileEslSesDonglePtrOutputWithContext(ctx context.Context) WtpprofileEslSesDonglePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WtpprofileEslSesDongle) *WtpprofileEslSesDongle {
		return &v
	}).(WtpprofileEslSesDonglePtrOutput)
}

// ESL SES-imagotag APC address type (default = fqdn). Valid values: `fqdn`, `ip`.
func (o WtpprofileEslSesDongleOutput) ApcAddrType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileEslSesDongle) *string { return v.ApcAddrType }).(pulumi.StringPtrOutput)
}

// FQDN of ESL SES-imagotag Access Point Controller (APC).
func (o WtpprofileEslSesDongleOutput) ApcFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileEslSesDongle) *string { return v.ApcFqdn }).(pulumi.StringPtrOutput)
}

// IP address of ESL SES-imagotag Access Point Controller (APC).
func (o WtpprofileEslSesDongleOutput) ApcIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileEslSesDongle) *string { return v.ApcIp }).(pulumi.StringPtrOutput)
}

// Port of ESL SES-imagotag Access Point Controller (APC).
func (o WtpprofileEslSesDongleOutput) ApcPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileEslSesDongle) *int { return v.ApcPort }).(pulumi.IntPtrOutput)
}

// ESL SES-imagotag dongle coexistence level (default = none). Valid values: `none`.
func (o WtpprofileEslSesDongleOutput) CoexLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileEslSesDongle) *string { return v.CoexLevel }).(pulumi.StringPtrOutput)
}

// Compliance levels for the ESL solution integration (default = compliance-level-2). Valid values: `compliance-level-2`.
func (o WtpprofileEslSesDongleOutput) ComplianceLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileEslSesDongle) *string { return v.ComplianceLevel }).(pulumi.StringPtrOutput)
}

// ESL SES-imagotag dongle channel (default = 127). Valid values: `-1`, `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `127`.
func (o WtpprofileEslSesDongleOutput) EslChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileEslSesDongle) *string { return v.EslChannel }).(pulumi.StringPtrOutput)
}

// ESL SES-imagotag dongle output power (default = A). Valid values: `a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`.
func (o WtpprofileEslSesDongleOutput) OutputPower() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileEslSesDongle) *string { return v.OutputPower }).(pulumi.StringPtrOutput)
}

// Enable/disable ESL SES-imagotag Serial Communication Daemon (SCD) (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileEslSesDongleOutput) ScdEnable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileEslSesDongle) *string { return v.ScdEnable }).(pulumi.StringPtrOutput)
}

// Enable/disable TLS Certificate verification. (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileEslSesDongleOutput) TlsCertVerification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileEslSesDongle) *string { return v.TlsCertVerification }).(pulumi.StringPtrOutput)
}

// Enable/disable TLS Certificate verification. (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileEslSesDongleOutput) TlsFqdnVerification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileEslSesDongle) *string { return v.TlsFqdnVerification }).(pulumi.StringPtrOutput)
}

type WtpprofileEslSesDonglePtrOutput struct{ *pulumi.OutputState }

func (WtpprofileEslSesDonglePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpprofileEslSesDongle)(nil)).Elem()
}

func (o WtpprofileEslSesDonglePtrOutput) ToWtpprofileEslSesDonglePtrOutput() WtpprofileEslSesDonglePtrOutput {
	return o
}

func (o WtpprofileEslSesDonglePtrOutput) ToWtpprofileEslSesDonglePtrOutputWithContext(ctx context.Context) WtpprofileEslSesDonglePtrOutput {
	return o
}

func (o WtpprofileEslSesDonglePtrOutput) Elem() WtpprofileEslSesDongleOutput {
	return o.ApplyT(func(v *WtpprofileEslSesDongle) WtpprofileEslSesDongle {
		if v != nil {
			return *v
		}
		var ret WtpprofileEslSesDongle
		return ret
	}).(WtpprofileEslSesDongleOutput)
}

// ESL SES-imagotag APC address type (default = fqdn). Valid values: `fqdn`, `ip`.
func (o WtpprofileEslSesDonglePtrOutput) ApcAddrType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileEslSesDongle) *string {
		if v == nil {
			return nil
		}
		return v.ApcAddrType
	}).(pulumi.StringPtrOutput)
}

// FQDN of ESL SES-imagotag Access Point Controller (APC).
func (o WtpprofileEslSesDonglePtrOutput) ApcFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileEslSesDongle) *string {
		if v == nil {
			return nil
		}
		return v.ApcFqdn
	}).(pulumi.StringPtrOutput)
}

// IP address of ESL SES-imagotag Access Point Controller (APC).
func (o WtpprofileEslSesDonglePtrOutput) ApcIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileEslSesDongle) *string {
		if v == nil {
			return nil
		}
		return v.ApcIp
	}).(pulumi.StringPtrOutput)
}

// Port of ESL SES-imagotag Access Point Controller (APC).
func (o WtpprofileEslSesDonglePtrOutput) ApcPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileEslSesDongle) *int {
		if v == nil {
			return nil
		}
		return v.ApcPort
	}).(pulumi.IntPtrOutput)
}

// ESL SES-imagotag dongle coexistence level (default = none). Valid values: `none`.
func (o WtpprofileEslSesDonglePtrOutput) CoexLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileEslSesDongle) *string {
		if v == nil {
			return nil
		}
		return v.CoexLevel
	}).(pulumi.StringPtrOutput)
}

// Compliance levels for the ESL solution integration (default = compliance-level-2). Valid values: `compliance-level-2`.
func (o WtpprofileEslSesDonglePtrOutput) ComplianceLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileEslSesDongle) *string {
		if v == nil {
			return nil
		}
		return v.ComplianceLevel
	}).(pulumi.StringPtrOutput)
}

// ESL SES-imagotag dongle channel (default = 127). Valid values: `-1`, `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `127`.
func (o WtpprofileEslSesDonglePtrOutput) EslChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileEslSesDongle) *string {
		if v == nil {
			return nil
		}
		return v.EslChannel
	}).(pulumi.StringPtrOutput)
}

// ESL SES-imagotag dongle output power (default = A). Valid values: `a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`.
func (o WtpprofileEslSesDonglePtrOutput) OutputPower() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileEslSesDongle) *string {
		if v == nil {
			return nil
		}
		return v.OutputPower
	}).(pulumi.StringPtrOutput)
}

// Enable/disable ESL SES-imagotag Serial Communication Daemon (SCD) (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileEslSesDonglePtrOutput) ScdEnable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileEslSesDongle) *string {
		if v == nil {
			return nil
		}
		return v.ScdEnable
	}).(pulumi.StringPtrOutput)
}

// Enable/disable TLS Certificate verification. (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileEslSesDonglePtrOutput) TlsCertVerification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileEslSesDongle) *string {
		if v == nil {
			return nil
		}
		return v.TlsCertVerification
	}).(pulumi.StringPtrOutput)
}

// Enable/disable TLS Certificate verification. (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileEslSesDonglePtrOutput) TlsFqdnVerification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileEslSesDongle) *string {
		if v == nil {
			return nil
		}
		return v.TlsFqdnVerification
	}).(pulumi.StringPtrOutput)
}

type WtpprofileLan struct {
	// LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port1Mode *string `pulumi:"port1Mode"`
	// Bridge LAN port 1 to SSID.
	Port1Ssid *string `pulumi:"port1Ssid"`
	// LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port2Mode *string `pulumi:"port2Mode"`
	// Bridge LAN port 2 to SSID.
	Port2Ssid *string `pulumi:"port2Ssid"`
	// LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port3Mode *string `pulumi:"port3Mode"`
	// Bridge LAN port 3 to SSID.
	Port3Ssid *string `pulumi:"port3Ssid"`
	// LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port4Mode *string `pulumi:"port4Mode"`
	// Bridge LAN port 4 to SSID.
	Port4Ssid *string `pulumi:"port4Ssid"`
	// LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port5Mode *string `pulumi:"port5Mode"`
	// Bridge LAN port 5 to SSID.
	Port5Ssid *string `pulumi:"port5Ssid"`
	// LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port6Mode *string `pulumi:"port6Mode"`
	// Bridge LAN port 6 to SSID.
	Port6Ssid *string `pulumi:"port6Ssid"`
	// LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port7Mode *string `pulumi:"port7Mode"`
	// Bridge LAN port 7 to SSID.
	Port7Ssid *string `pulumi:"port7Ssid"`
	// LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port8Mode *string `pulumi:"port8Mode"`
	// Bridge LAN port 8 to SSID.
	Port8Ssid *string `pulumi:"port8Ssid"`
	// ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	PortEslMode *string `pulumi:"portEslMode"`
	// Bridge ESL port to SSID.
	PortEslSsid *string `pulumi:"portEslSsid"`
	// LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	PortMode *string `pulumi:"portMode"`
	// Bridge LAN port to SSID.
	PortSsid *string `pulumi:"portSsid"`
}

// WtpprofileLanInput is an input type that accepts WtpprofileLanArgs and WtpprofileLanOutput values.
// You can construct a concrete instance of `WtpprofileLanInput` via:
//
//	WtpprofileLanArgs{...}
type WtpprofileLanInput interface {
	pulumi.Input

	ToWtpprofileLanOutput() WtpprofileLanOutput
	ToWtpprofileLanOutputWithContext(context.Context) WtpprofileLanOutput
}

type WtpprofileLanArgs struct {
	// LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port1Mode pulumi.StringPtrInput `pulumi:"port1Mode"`
	// Bridge LAN port 1 to SSID.
	Port1Ssid pulumi.StringPtrInput `pulumi:"port1Ssid"`
	// LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port2Mode pulumi.StringPtrInput `pulumi:"port2Mode"`
	// Bridge LAN port 2 to SSID.
	Port2Ssid pulumi.StringPtrInput `pulumi:"port2Ssid"`
	// LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port3Mode pulumi.StringPtrInput `pulumi:"port3Mode"`
	// Bridge LAN port 3 to SSID.
	Port3Ssid pulumi.StringPtrInput `pulumi:"port3Ssid"`
	// LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port4Mode pulumi.StringPtrInput `pulumi:"port4Mode"`
	// Bridge LAN port 4 to SSID.
	Port4Ssid pulumi.StringPtrInput `pulumi:"port4Ssid"`
	// LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port5Mode pulumi.StringPtrInput `pulumi:"port5Mode"`
	// Bridge LAN port 5 to SSID.
	Port5Ssid pulumi.StringPtrInput `pulumi:"port5Ssid"`
	// LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port6Mode pulumi.StringPtrInput `pulumi:"port6Mode"`
	// Bridge LAN port 6 to SSID.
	Port6Ssid pulumi.StringPtrInput `pulumi:"port6Ssid"`
	// LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port7Mode pulumi.StringPtrInput `pulumi:"port7Mode"`
	// Bridge LAN port 7 to SSID.
	Port7Ssid pulumi.StringPtrInput `pulumi:"port7Ssid"`
	// LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	Port8Mode pulumi.StringPtrInput `pulumi:"port8Mode"`
	// Bridge LAN port 8 to SSID.
	Port8Ssid pulumi.StringPtrInput `pulumi:"port8Ssid"`
	// ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	PortEslMode pulumi.StringPtrInput `pulumi:"portEslMode"`
	// Bridge ESL port to SSID.
	PortEslSsid pulumi.StringPtrInput `pulumi:"portEslSsid"`
	// LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
	PortMode pulumi.StringPtrInput `pulumi:"portMode"`
	// Bridge LAN port to SSID.
	PortSsid pulumi.StringPtrInput `pulumi:"portSsid"`
}

func (WtpprofileLanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileLan)(nil)).Elem()
}

func (i WtpprofileLanArgs) ToWtpprofileLanOutput() WtpprofileLanOutput {
	return i.ToWtpprofileLanOutputWithContext(context.Background())
}

func (i WtpprofileLanArgs) ToWtpprofileLanOutputWithContext(ctx context.Context) WtpprofileLanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileLanOutput)
}

func (i WtpprofileLanArgs) ToWtpprofileLanPtrOutput() WtpprofileLanPtrOutput {
	return i.ToWtpprofileLanPtrOutputWithContext(context.Background())
}

func (i WtpprofileLanArgs) ToWtpprofileLanPtrOutputWithContext(ctx context.Context) WtpprofileLanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileLanOutput).ToWtpprofileLanPtrOutputWithContext(ctx)
}

// WtpprofileLanPtrInput is an input type that accepts WtpprofileLanArgs, WtpprofileLanPtr and WtpprofileLanPtrOutput values.
// You can construct a concrete instance of `WtpprofileLanPtrInput` via:
//
//	        WtpprofileLanArgs{...}
//
//	or:
//
//	        nil
type WtpprofileLanPtrInput interface {
	pulumi.Input

	ToWtpprofileLanPtrOutput() WtpprofileLanPtrOutput
	ToWtpprofileLanPtrOutputWithContext(context.Context) WtpprofileLanPtrOutput
}

type wtpprofileLanPtrType WtpprofileLanArgs

func WtpprofileLanPtr(v *WtpprofileLanArgs) WtpprofileLanPtrInput {
	return (*wtpprofileLanPtrType)(v)
}

func (*wtpprofileLanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpprofileLan)(nil)).Elem()
}

func (i *wtpprofileLanPtrType) ToWtpprofileLanPtrOutput() WtpprofileLanPtrOutput {
	return i.ToWtpprofileLanPtrOutputWithContext(context.Background())
}

func (i *wtpprofileLanPtrType) ToWtpprofileLanPtrOutputWithContext(ctx context.Context) WtpprofileLanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileLanPtrOutput)
}

type WtpprofileLanOutput struct{ *pulumi.OutputState }

func (WtpprofileLanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileLan)(nil)).Elem()
}

func (o WtpprofileLanOutput) ToWtpprofileLanOutput() WtpprofileLanOutput {
	return o
}

func (o WtpprofileLanOutput) ToWtpprofileLanOutputWithContext(ctx context.Context) WtpprofileLanOutput {
	return o
}

func (o WtpprofileLanOutput) ToWtpprofileLanPtrOutput() WtpprofileLanPtrOutput {
	return o.ToWtpprofileLanPtrOutputWithContext(context.Background())
}

func (o WtpprofileLanOutput) ToWtpprofileLanPtrOutputWithContext(ctx context.Context) WtpprofileLanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WtpprofileLan) *WtpprofileLan {
		return &v
	}).(WtpprofileLanPtrOutput)
}

// LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanOutput) Port1Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.Port1Mode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port 1 to SSID.
func (o WtpprofileLanOutput) Port1Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.Port1Ssid }).(pulumi.StringPtrOutput)
}

// LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanOutput) Port2Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.Port2Mode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port 2 to SSID.
func (o WtpprofileLanOutput) Port2Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.Port2Ssid }).(pulumi.StringPtrOutput)
}

// LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanOutput) Port3Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.Port3Mode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port 3 to SSID.
func (o WtpprofileLanOutput) Port3Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.Port3Ssid }).(pulumi.StringPtrOutput)
}

// LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanOutput) Port4Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.Port4Mode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port 4 to SSID.
func (o WtpprofileLanOutput) Port4Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.Port4Ssid }).(pulumi.StringPtrOutput)
}

// LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanOutput) Port5Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.Port5Mode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port 5 to SSID.
func (o WtpprofileLanOutput) Port5Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.Port5Ssid }).(pulumi.StringPtrOutput)
}

// LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanOutput) Port6Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.Port6Mode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port 6 to SSID.
func (o WtpprofileLanOutput) Port6Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.Port6Ssid }).(pulumi.StringPtrOutput)
}

// LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanOutput) Port7Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.Port7Mode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port 7 to SSID.
func (o WtpprofileLanOutput) Port7Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.Port7Ssid }).(pulumi.StringPtrOutput)
}

// LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanOutput) Port8Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.Port8Mode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port 8 to SSID.
func (o WtpprofileLanOutput) Port8Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.Port8Ssid }).(pulumi.StringPtrOutput)
}

// ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanOutput) PortEslMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.PortEslMode }).(pulumi.StringPtrOutput)
}

// Bridge ESL port to SSID.
func (o WtpprofileLanOutput) PortEslSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.PortEslSsid }).(pulumi.StringPtrOutput)
}

// LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanOutput) PortMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.PortMode }).(pulumi.StringPtrOutput)
}

// Bridge LAN port to SSID.
func (o WtpprofileLanOutput) PortSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLan) *string { return v.PortSsid }).(pulumi.StringPtrOutput)
}

type WtpprofileLanPtrOutput struct{ *pulumi.OutputState }

func (WtpprofileLanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpprofileLan)(nil)).Elem()
}

func (o WtpprofileLanPtrOutput) ToWtpprofileLanPtrOutput() WtpprofileLanPtrOutput {
	return o
}

func (o WtpprofileLanPtrOutput) ToWtpprofileLanPtrOutputWithContext(ctx context.Context) WtpprofileLanPtrOutput {
	return o
}

func (o WtpprofileLanPtrOutput) Elem() WtpprofileLanOutput {
	return o.ApplyT(func(v *WtpprofileLan) WtpprofileLan {
		if v != nil {
			return *v
		}
		var ret WtpprofileLan
		return ret
	}).(WtpprofileLanOutput)
}

// LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanPtrOutput) Port1Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.Port1Mode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port 1 to SSID.
func (o WtpprofileLanPtrOutput) Port1Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.Port1Ssid
	}).(pulumi.StringPtrOutput)
}

// LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanPtrOutput) Port2Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.Port2Mode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port 2 to SSID.
func (o WtpprofileLanPtrOutput) Port2Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.Port2Ssid
	}).(pulumi.StringPtrOutput)
}

// LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanPtrOutput) Port3Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.Port3Mode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port 3 to SSID.
func (o WtpprofileLanPtrOutput) Port3Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.Port3Ssid
	}).(pulumi.StringPtrOutput)
}

// LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanPtrOutput) Port4Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.Port4Mode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port 4 to SSID.
func (o WtpprofileLanPtrOutput) Port4Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.Port4Ssid
	}).(pulumi.StringPtrOutput)
}

// LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanPtrOutput) Port5Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.Port5Mode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port 5 to SSID.
func (o WtpprofileLanPtrOutput) Port5Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.Port5Ssid
	}).(pulumi.StringPtrOutput)
}

// LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanPtrOutput) Port6Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.Port6Mode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port 6 to SSID.
func (o WtpprofileLanPtrOutput) Port6Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.Port6Ssid
	}).(pulumi.StringPtrOutput)
}

// LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanPtrOutput) Port7Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.Port7Mode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port 7 to SSID.
func (o WtpprofileLanPtrOutput) Port7Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.Port7Ssid
	}).(pulumi.StringPtrOutput)
}

// LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanPtrOutput) Port8Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.Port8Mode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port 8 to SSID.
func (o WtpprofileLanPtrOutput) Port8Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.Port8Ssid
	}).(pulumi.StringPtrOutput)
}

// ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanPtrOutput) PortEslMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.PortEslMode
	}).(pulumi.StringPtrOutput)
}

// Bridge ESL port to SSID.
func (o WtpprofileLanPtrOutput) PortEslSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.PortEslSsid
	}).(pulumi.StringPtrOutput)
}

// LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
func (o WtpprofileLanPtrOutput) PortMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.PortMode
	}).(pulumi.StringPtrOutput)
}

// Bridge LAN port to SSID.
func (o WtpprofileLanPtrOutput) PortSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLan) *string {
		if v == nil {
			return nil
		}
		return v.PortSsid
	}).(pulumi.StringPtrOutput)
}

type WtpprofileLbs struct {
	// Enable/disable AeroScout Real Time Location Service (RTLS) support. Valid values: `enable`, `disable`.
	Aeroscout *string `pulumi:"aeroscout"`
	// Use BSSID or board MAC address as AP MAC address in the Aeroscout AP message. Valid values: `bssid`, `board-mac`.
	AeroscoutApMac *string `pulumi:"aeroscoutApMac"`
	// Enable/disable MU compounded report. Valid values: `enable`, `disable`.
	AeroscoutMmuReport *string `pulumi:"aeroscoutMmuReport"`
	// Enable/disable AeroScout support. Valid values: `enable`, `disable`.
	AeroscoutMu *string `pulumi:"aeroscoutMu"`
	// AeroScout Mobile Unit (MU) mode dilution factor (default = 20).
	AeroscoutMuFactor *int `pulumi:"aeroscoutMuFactor"`
	// AeroScout MU mode timeout (0 - 65535 sec, default = 5).
	AeroscoutMuTimeout *int `pulumi:"aeroscoutMuTimeout"`
	// IP address of AeroScout server.
	AeroscoutServerIp *string `pulumi:"aeroscoutServerIp"`
	// AeroScout server UDP listening port.
	AeroscoutServerPort *int `pulumi:"aeroscoutServerPort"`
	// Enable/disable Ekahua blink mode (also called AiRISTA Flow Blink Mode) to find the location of devices connected to a wireless LAN (default = disable). Valid values: `enable`, `disable`.
	EkahauBlinkMode *string `pulumi:"ekahauBlinkMode"`
	// WiFi frame MAC address or WiFi Tag.
	EkahauTag *string `pulumi:"ekahauTag"`
	// IP address of Ekahua RTLS Controller (ERC).
	ErcServerIp *string `pulumi:"ercServerIp"`
	// Ekahua RTLS Controller (ERC) UDP listening port.
	ErcServerPort *int `pulumi:"ercServerPort"`
	// Enable/disable FortiPresence to monitor the location and activity of WiFi clients even if they don't connect to this WiFi network (default = disable). Valid values: `foreign`, `both`, `disable`.
	Fortipresence *string `pulumi:"fortipresence"`
	// Enable/disable FortiPresence finding and reporting BLE devices. Valid values: `enable`, `disable`.
	FortipresenceBle *string `pulumi:"fortipresenceBle"`
	// FortiPresence report transmit frequency (5 - 65535 sec, default = 30).
	FortipresenceFrequency *int `pulumi:"fortipresenceFrequency"`
	// FortiPresence server UDP listening port (default = 3000).
	FortipresencePort *int `pulumi:"fortipresencePort"`
	// FortiPresence project name (max. 16 characters, default = fortipresence).
	FortipresenceProject *string `pulumi:"fortipresenceProject"`
	// Enable/disable FortiPresence finding and reporting rogue APs. Valid values: `enable`, `disable`.
	FortipresenceRogue *string `pulumi:"fortipresenceRogue"`
	// FortiPresence secret password (max. 16 characters).
	FortipresenceSecret *string `pulumi:"fortipresenceSecret"`
	// FortiPresence server IP address.
	FortipresenceServer *string `pulumi:"fortipresenceServer"`
	// FortiPresence server address type (default = ipv4). Valid values: `ipv4`, `fqdn`.
	FortipresenceServerAddrType *string `pulumi:"fortipresenceServerAddrType"`
	// FQDN of FortiPresence server.
	FortipresenceServerFqdn *string `pulumi:"fortipresenceServerFqdn"`
	// Enable/disable FortiPresence finding and reporting unassociated stations. Valid values: `enable`, `disable`.
	FortipresenceUnassoc *string `pulumi:"fortipresenceUnassoc"`
	// Enable/disable PoleStar BLE NAO Track Real Time Location Service (RTLS) support (default = disable). Valid values: `enable`, `disable`.
	Polestar *string `pulumi:"polestar"`
	// Time that measurements should be accumulated in seconds (default = 2).
	PolestarAccumulationInterval *int `pulumi:"polestarAccumulationInterval"`
	// Tags and asset addrgrp list to be reported.
	PolestarAssetAddrgrpList *string `pulumi:"polestarAssetAddrgrpList"`
	// Tags and asset UUID list 1 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
	PolestarAssetUuidList1 *string `pulumi:"polestarAssetUuidList1"`
	// Tags and asset UUID list 2 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
	PolestarAssetUuidList2 *string `pulumi:"polestarAssetUuidList2"`
	// Tags and asset UUID list 3 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
	PolestarAssetUuidList3 *string `pulumi:"polestarAssetUuidList3"`
	// Tags and asset UUID list 4 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
	PolestarAssetUuidList4 *string `pulumi:"polestarAssetUuidList4"`
	// Select the protocol to report Measurements, Advertising Data, or Location Data to NAO Cloud. (default = WSS). Valid values: `WSS`.
	PolestarProtocol *string `pulumi:"polestarProtocol"`
	// Time between reporting accumulated measurements in seconds (default = 2).
	PolestarReportingInterval *int `pulumi:"polestarReportingInterval"`
	// FQDN of PoleStar Nao Track Server (default = ws.nao-cloud.com).
	PolestarServerFqdn *string `pulumi:"polestarServerFqdn"`
	// Path of PoleStar Nao Track Server (default = /v1/token/<access_token>/pst-v2).
	PolestarServerPath *string `pulumi:"polestarServerPath"`
	// Port of PoleStar Nao Track Server (default = 443).
	PolestarServerPort *int `pulumi:"polestarServerPort"`
	// Access Token of PoleStar Nao Track Server.
	PolestarServerToken *string `pulumi:"polestarServerToken"`
	// Enable/disable client station locating services for all clients, whether associated or not (default = disable). Valid values: `enable`, `disable`.
	StationLocate *string `pulumi:"stationLocate"`
}

// WtpprofileLbsInput is an input type that accepts WtpprofileLbsArgs and WtpprofileLbsOutput values.
// You can construct a concrete instance of `WtpprofileLbsInput` via:
//
//	WtpprofileLbsArgs{...}
type WtpprofileLbsInput interface {
	pulumi.Input

	ToWtpprofileLbsOutput() WtpprofileLbsOutput
	ToWtpprofileLbsOutputWithContext(context.Context) WtpprofileLbsOutput
}

type WtpprofileLbsArgs struct {
	// Enable/disable AeroScout Real Time Location Service (RTLS) support. Valid values: `enable`, `disable`.
	Aeroscout pulumi.StringPtrInput `pulumi:"aeroscout"`
	// Use BSSID or board MAC address as AP MAC address in the Aeroscout AP message. Valid values: `bssid`, `board-mac`.
	AeroscoutApMac pulumi.StringPtrInput `pulumi:"aeroscoutApMac"`
	// Enable/disable MU compounded report. Valid values: `enable`, `disable`.
	AeroscoutMmuReport pulumi.StringPtrInput `pulumi:"aeroscoutMmuReport"`
	// Enable/disable AeroScout support. Valid values: `enable`, `disable`.
	AeroscoutMu pulumi.StringPtrInput `pulumi:"aeroscoutMu"`
	// AeroScout Mobile Unit (MU) mode dilution factor (default = 20).
	AeroscoutMuFactor pulumi.IntPtrInput `pulumi:"aeroscoutMuFactor"`
	// AeroScout MU mode timeout (0 - 65535 sec, default = 5).
	AeroscoutMuTimeout pulumi.IntPtrInput `pulumi:"aeroscoutMuTimeout"`
	// IP address of AeroScout server.
	AeroscoutServerIp pulumi.StringPtrInput `pulumi:"aeroscoutServerIp"`
	// AeroScout server UDP listening port.
	AeroscoutServerPort pulumi.IntPtrInput `pulumi:"aeroscoutServerPort"`
	// Enable/disable Ekahua blink mode (also called AiRISTA Flow Blink Mode) to find the location of devices connected to a wireless LAN (default = disable). Valid values: `enable`, `disable`.
	EkahauBlinkMode pulumi.StringPtrInput `pulumi:"ekahauBlinkMode"`
	// WiFi frame MAC address or WiFi Tag.
	EkahauTag pulumi.StringPtrInput `pulumi:"ekahauTag"`
	// IP address of Ekahua RTLS Controller (ERC).
	ErcServerIp pulumi.StringPtrInput `pulumi:"ercServerIp"`
	// Ekahua RTLS Controller (ERC) UDP listening port.
	ErcServerPort pulumi.IntPtrInput `pulumi:"ercServerPort"`
	// Enable/disable FortiPresence to monitor the location and activity of WiFi clients even if they don't connect to this WiFi network (default = disable). Valid values: `foreign`, `both`, `disable`.
	Fortipresence pulumi.StringPtrInput `pulumi:"fortipresence"`
	// Enable/disable FortiPresence finding and reporting BLE devices. Valid values: `enable`, `disable`.
	FortipresenceBle pulumi.StringPtrInput `pulumi:"fortipresenceBle"`
	// FortiPresence report transmit frequency (5 - 65535 sec, default = 30).
	FortipresenceFrequency pulumi.IntPtrInput `pulumi:"fortipresenceFrequency"`
	// FortiPresence server UDP listening port (default = 3000).
	FortipresencePort pulumi.IntPtrInput `pulumi:"fortipresencePort"`
	// FortiPresence project name (max. 16 characters, default = fortipresence).
	FortipresenceProject pulumi.StringPtrInput `pulumi:"fortipresenceProject"`
	// Enable/disable FortiPresence finding and reporting rogue APs. Valid values: `enable`, `disable`.
	FortipresenceRogue pulumi.StringPtrInput `pulumi:"fortipresenceRogue"`
	// FortiPresence secret password (max. 16 characters).
	FortipresenceSecret pulumi.StringPtrInput `pulumi:"fortipresenceSecret"`
	// FortiPresence server IP address.
	FortipresenceServer pulumi.StringPtrInput `pulumi:"fortipresenceServer"`
	// FortiPresence server address type (default = ipv4). Valid values: `ipv4`, `fqdn`.
	FortipresenceServerAddrType pulumi.StringPtrInput `pulumi:"fortipresenceServerAddrType"`
	// FQDN of FortiPresence server.
	FortipresenceServerFqdn pulumi.StringPtrInput `pulumi:"fortipresenceServerFqdn"`
	// Enable/disable FortiPresence finding and reporting unassociated stations. Valid values: `enable`, `disable`.
	FortipresenceUnassoc pulumi.StringPtrInput `pulumi:"fortipresenceUnassoc"`
	// Enable/disable PoleStar BLE NAO Track Real Time Location Service (RTLS) support (default = disable). Valid values: `enable`, `disable`.
	Polestar pulumi.StringPtrInput `pulumi:"polestar"`
	// Time that measurements should be accumulated in seconds (default = 2).
	PolestarAccumulationInterval pulumi.IntPtrInput `pulumi:"polestarAccumulationInterval"`
	// Tags and asset addrgrp list to be reported.
	PolestarAssetAddrgrpList pulumi.StringPtrInput `pulumi:"polestarAssetAddrgrpList"`
	// Tags and asset UUID list 1 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
	PolestarAssetUuidList1 pulumi.StringPtrInput `pulumi:"polestarAssetUuidList1"`
	// Tags and asset UUID list 2 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
	PolestarAssetUuidList2 pulumi.StringPtrInput `pulumi:"polestarAssetUuidList2"`
	// Tags and asset UUID list 3 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
	PolestarAssetUuidList3 pulumi.StringPtrInput `pulumi:"polestarAssetUuidList3"`
	// Tags and asset UUID list 4 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
	PolestarAssetUuidList4 pulumi.StringPtrInput `pulumi:"polestarAssetUuidList4"`
	// Select the protocol to report Measurements, Advertising Data, or Location Data to NAO Cloud. (default = WSS). Valid values: `WSS`.
	PolestarProtocol pulumi.StringPtrInput `pulumi:"polestarProtocol"`
	// Time between reporting accumulated measurements in seconds (default = 2).
	PolestarReportingInterval pulumi.IntPtrInput `pulumi:"polestarReportingInterval"`
	// FQDN of PoleStar Nao Track Server (default = ws.nao-cloud.com).
	PolestarServerFqdn pulumi.StringPtrInput `pulumi:"polestarServerFqdn"`
	// Path of PoleStar Nao Track Server (default = /v1/token/<access_token>/pst-v2).
	PolestarServerPath pulumi.StringPtrInput `pulumi:"polestarServerPath"`
	// Port of PoleStar Nao Track Server (default = 443).
	PolestarServerPort pulumi.IntPtrInput `pulumi:"polestarServerPort"`
	// Access Token of PoleStar Nao Track Server.
	PolestarServerToken pulumi.StringPtrInput `pulumi:"polestarServerToken"`
	// Enable/disable client station locating services for all clients, whether associated or not (default = disable). Valid values: `enable`, `disable`.
	StationLocate pulumi.StringPtrInput `pulumi:"stationLocate"`
}

func (WtpprofileLbsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileLbs)(nil)).Elem()
}

func (i WtpprofileLbsArgs) ToWtpprofileLbsOutput() WtpprofileLbsOutput {
	return i.ToWtpprofileLbsOutputWithContext(context.Background())
}

func (i WtpprofileLbsArgs) ToWtpprofileLbsOutputWithContext(ctx context.Context) WtpprofileLbsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileLbsOutput)
}

func (i WtpprofileLbsArgs) ToWtpprofileLbsPtrOutput() WtpprofileLbsPtrOutput {
	return i.ToWtpprofileLbsPtrOutputWithContext(context.Background())
}

func (i WtpprofileLbsArgs) ToWtpprofileLbsPtrOutputWithContext(ctx context.Context) WtpprofileLbsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileLbsOutput).ToWtpprofileLbsPtrOutputWithContext(ctx)
}

// WtpprofileLbsPtrInput is an input type that accepts WtpprofileLbsArgs, WtpprofileLbsPtr and WtpprofileLbsPtrOutput values.
// You can construct a concrete instance of `WtpprofileLbsPtrInput` via:
//
//	        WtpprofileLbsArgs{...}
//
//	or:
//
//	        nil
type WtpprofileLbsPtrInput interface {
	pulumi.Input

	ToWtpprofileLbsPtrOutput() WtpprofileLbsPtrOutput
	ToWtpprofileLbsPtrOutputWithContext(context.Context) WtpprofileLbsPtrOutput
}

type wtpprofileLbsPtrType WtpprofileLbsArgs

func WtpprofileLbsPtr(v *WtpprofileLbsArgs) WtpprofileLbsPtrInput {
	return (*wtpprofileLbsPtrType)(v)
}

func (*wtpprofileLbsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpprofileLbs)(nil)).Elem()
}

func (i *wtpprofileLbsPtrType) ToWtpprofileLbsPtrOutput() WtpprofileLbsPtrOutput {
	return i.ToWtpprofileLbsPtrOutputWithContext(context.Background())
}

func (i *wtpprofileLbsPtrType) ToWtpprofileLbsPtrOutputWithContext(ctx context.Context) WtpprofileLbsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileLbsPtrOutput)
}

type WtpprofileLbsOutput struct{ *pulumi.OutputState }

func (WtpprofileLbsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileLbs)(nil)).Elem()
}

func (o WtpprofileLbsOutput) ToWtpprofileLbsOutput() WtpprofileLbsOutput {
	return o
}

func (o WtpprofileLbsOutput) ToWtpprofileLbsOutputWithContext(ctx context.Context) WtpprofileLbsOutput {
	return o
}

func (o WtpprofileLbsOutput) ToWtpprofileLbsPtrOutput() WtpprofileLbsPtrOutput {
	return o.ToWtpprofileLbsPtrOutputWithContext(context.Background())
}

func (o WtpprofileLbsOutput) ToWtpprofileLbsPtrOutputWithContext(ctx context.Context) WtpprofileLbsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WtpprofileLbs) *WtpprofileLbs {
		return &v
	}).(WtpprofileLbsPtrOutput)
}

// Enable/disable AeroScout Real Time Location Service (RTLS) support. Valid values: `enable`, `disable`.
func (o WtpprofileLbsOutput) Aeroscout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.Aeroscout }).(pulumi.StringPtrOutput)
}

// Use BSSID or board MAC address as AP MAC address in the Aeroscout AP message. Valid values: `bssid`, `board-mac`.
func (o WtpprofileLbsOutput) AeroscoutApMac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.AeroscoutApMac }).(pulumi.StringPtrOutput)
}

// Enable/disable MU compounded report. Valid values: `enable`, `disable`.
func (o WtpprofileLbsOutput) AeroscoutMmuReport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.AeroscoutMmuReport }).(pulumi.StringPtrOutput)
}

// Enable/disable AeroScout support. Valid values: `enable`, `disable`.
func (o WtpprofileLbsOutput) AeroscoutMu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.AeroscoutMu }).(pulumi.StringPtrOutput)
}

// AeroScout Mobile Unit (MU) mode dilution factor (default = 20).
func (o WtpprofileLbsOutput) AeroscoutMuFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *int { return v.AeroscoutMuFactor }).(pulumi.IntPtrOutput)
}

// AeroScout MU mode timeout (0 - 65535 sec, default = 5).
func (o WtpprofileLbsOutput) AeroscoutMuTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *int { return v.AeroscoutMuTimeout }).(pulumi.IntPtrOutput)
}

// IP address of AeroScout server.
func (o WtpprofileLbsOutput) AeroscoutServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.AeroscoutServerIp }).(pulumi.StringPtrOutput)
}

// AeroScout server UDP listening port.
func (o WtpprofileLbsOutput) AeroscoutServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *int { return v.AeroscoutServerPort }).(pulumi.IntPtrOutput)
}

// Enable/disable Ekahua blink mode (also called AiRISTA Flow Blink Mode) to find the location of devices connected to a wireless LAN (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileLbsOutput) EkahauBlinkMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.EkahauBlinkMode }).(pulumi.StringPtrOutput)
}

// WiFi frame MAC address or WiFi Tag.
func (o WtpprofileLbsOutput) EkahauTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.EkahauTag }).(pulumi.StringPtrOutput)
}

// IP address of Ekahua RTLS Controller (ERC).
func (o WtpprofileLbsOutput) ErcServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.ErcServerIp }).(pulumi.StringPtrOutput)
}

// Ekahua RTLS Controller (ERC) UDP listening port.
func (o WtpprofileLbsOutput) ErcServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *int { return v.ErcServerPort }).(pulumi.IntPtrOutput)
}

// Enable/disable FortiPresence to monitor the location and activity of WiFi clients even if they don't connect to this WiFi network (default = disable). Valid values: `foreign`, `both`, `disable`.
func (o WtpprofileLbsOutput) Fortipresence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.Fortipresence }).(pulumi.StringPtrOutput)
}

// Enable/disable FortiPresence finding and reporting BLE devices. Valid values: `enable`, `disable`.
func (o WtpprofileLbsOutput) FortipresenceBle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.FortipresenceBle }).(pulumi.StringPtrOutput)
}

// FortiPresence report transmit frequency (5 - 65535 sec, default = 30).
func (o WtpprofileLbsOutput) FortipresenceFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *int { return v.FortipresenceFrequency }).(pulumi.IntPtrOutput)
}

// FortiPresence server UDP listening port (default = 3000).
func (o WtpprofileLbsOutput) FortipresencePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *int { return v.FortipresencePort }).(pulumi.IntPtrOutput)
}

// FortiPresence project name (max. 16 characters, default = fortipresence).
func (o WtpprofileLbsOutput) FortipresenceProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.FortipresenceProject }).(pulumi.StringPtrOutput)
}

// Enable/disable FortiPresence finding and reporting rogue APs. Valid values: `enable`, `disable`.
func (o WtpprofileLbsOutput) FortipresenceRogue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.FortipresenceRogue }).(pulumi.StringPtrOutput)
}

// FortiPresence secret password (max. 16 characters).
func (o WtpprofileLbsOutput) FortipresenceSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.FortipresenceSecret }).(pulumi.StringPtrOutput)
}

// FortiPresence server IP address.
func (o WtpprofileLbsOutput) FortipresenceServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.FortipresenceServer }).(pulumi.StringPtrOutput)
}

// FortiPresence server address type (default = ipv4). Valid values: `ipv4`, `fqdn`.
func (o WtpprofileLbsOutput) FortipresenceServerAddrType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.FortipresenceServerAddrType }).(pulumi.StringPtrOutput)
}

// FQDN of FortiPresence server.
func (o WtpprofileLbsOutput) FortipresenceServerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.FortipresenceServerFqdn }).(pulumi.StringPtrOutput)
}

// Enable/disable FortiPresence finding and reporting unassociated stations. Valid values: `enable`, `disable`.
func (o WtpprofileLbsOutput) FortipresenceUnassoc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.FortipresenceUnassoc }).(pulumi.StringPtrOutput)
}

// Enable/disable PoleStar BLE NAO Track Real Time Location Service (RTLS) support (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileLbsOutput) Polestar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.Polestar }).(pulumi.StringPtrOutput)
}

// Time that measurements should be accumulated in seconds (default = 2).
func (o WtpprofileLbsOutput) PolestarAccumulationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *int { return v.PolestarAccumulationInterval }).(pulumi.IntPtrOutput)
}

// Tags and asset addrgrp list to be reported.
func (o WtpprofileLbsOutput) PolestarAssetAddrgrpList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.PolestarAssetAddrgrpList }).(pulumi.StringPtrOutput)
}

// Tags and asset UUID list 1 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
func (o WtpprofileLbsOutput) PolestarAssetUuidList1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.PolestarAssetUuidList1 }).(pulumi.StringPtrOutput)
}

// Tags and asset UUID list 2 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
func (o WtpprofileLbsOutput) PolestarAssetUuidList2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.PolestarAssetUuidList2 }).(pulumi.StringPtrOutput)
}

// Tags and asset UUID list 3 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
func (o WtpprofileLbsOutput) PolestarAssetUuidList3() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.PolestarAssetUuidList3 }).(pulumi.StringPtrOutput)
}

// Tags and asset UUID list 4 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
func (o WtpprofileLbsOutput) PolestarAssetUuidList4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.PolestarAssetUuidList4 }).(pulumi.StringPtrOutput)
}

// Select the protocol to report Measurements, Advertising Data, or Location Data to NAO Cloud. (default = WSS). Valid values: `WSS`.
func (o WtpprofileLbsOutput) PolestarProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.PolestarProtocol }).(pulumi.StringPtrOutput)
}

// Time between reporting accumulated measurements in seconds (default = 2).
func (o WtpprofileLbsOutput) PolestarReportingInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *int { return v.PolestarReportingInterval }).(pulumi.IntPtrOutput)
}

// FQDN of PoleStar Nao Track Server (default = ws.nao-cloud.com).
func (o WtpprofileLbsOutput) PolestarServerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.PolestarServerFqdn }).(pulumi.StringPtrOutput)
}

// Path of PoleStar Nao Track Server (default = /v1/token/<access_token>/pst-v2).
func (o WtpprofileLbsOutput) PolestarServerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.PolestarServerPath }).(pulumi.StringPtrOutput)
}

// Port of PoleStar Nao Track Server (default = 443).
func (o WtpprofileLbsOutput) PolestarServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *int { return v.PolestarServerPort }).(pulumi.IntPtrOutput)
}

// Access Token of PoleStar Nao Track Server.
func (o WtpprofileLbsOutput) PolestarServerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.PolestarServerToken }).(pulumi.StringPtrOutput)
}

// Enable/disable client station locating services for all clients, whether associated or not (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileLbsOutput) StationLocate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLbs) *string { return v.StationLocate }).(pulumi.StringPtrOutput)
}

type WtpprofileLbsPtrOutput struct{ *pulumi.OutputState }

func (WtpprofileLbsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpprofileLbs)(nil)).Elem()
}

func (o WtpprofileLbsPtrOutput) ToWtpprofileLbsPtrOutput() WtpprofileLbsPtrOutput {
	return o
}

func (o WtpprofileLbsPtrOutput) ToWtpprofileLbsPtrOutputWithContext(ctx context.Context) WtpprofileLbsPtrOutput {
	return o
}

func (o WtpprofileLbsPtrOutput) Elem() WtpprofileLbsOutput {
	return o.ApplyT(func(v *WtpprofileLbs) WtpprofileLbs {
		if v != nil {
			return *v
		}
		var ret WtpprofileLbs
		return ret
	}).(WtpprofileLbsOutput)
}

// Enable/disable AeroScout Real Time Location Service (RTLS) support. Valid values: `enable`, `disable`.
func (o WtpprofileLbsPtrOutput) Aeroscout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.Aeroscout
	}).(pulumi.StringPtrOutput)
}

// Use BSSID or board MAC address as AP MAC address in the Aeroscout AP message. Valid values: `bssid`, `board-mac`.
func (o WtpprofileLbsPtrOutput) AeroscoutApMac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.AeroscoutApMac
	}).(pulumi.StringPtrOutput)
}

// Enable/disable MU compounded report. Valid values: `enable`, `disable`.
func (o WtpprofileLbsPtrOutput) AeroscoutMmuReport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.AeroscoutMmuReport
	}).(pulumi.StringPtrOutput)
}

// Enable/disable AeroScout support. Valid values: `enable`, `disable`.
func (o WtpprofileLbsPtrOutput) AeroscoutMu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.AeroscoutMu
	}).(pulumi.StringPtrOutput)
}

// AeroScout Mobile Unit (MU) mode dilution factor (default = 20).
func (o WtpprofileLbsPtrOutput) AeroscoutMuFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *int {
		if v == nil {
			return nil
		}
		return v.AeroscoutMuFactor
	}).(pulumi.IntPtrOutput)
}

// AeroScout MU mode timeout (0 - 65535 sec, default = 5).
func (o WtpprofileLbsPtrOutput) AeroscoutMuTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *int {
		if v == nil {
			return nil
		}
		return v.AeroscoutMuTimeout
	}).(pulumi.IntPtrOutput)
}

// IP address of AeroScout server.
func (o WtpprofileLbsPtrOutput) AeroscoutServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.AeroscoutServerIp
	}).(pulumi.StringPtrOutput)
}

// AeroScout server UDP listening port.
func (o WtpprofileLbsPtrOutput) AeroscoutServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *int {
		if v == nil {
			return nil
		}
		return v.AeroscoutServerPort
	}).(pulumi.IntPtrOutput)
}

// Enable/disable Ekahua blink mode (also called AiRISTA Flow Blink Mode) to find the location of devices connected to a wireless LAN (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileLbsPtrOutput) EkahauBlinkMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.EkahauBlinkMode
	}).(pulumi.StringPtrOutput)
}

// WiFi frame MAC address or WiFi Tag.
func (o WtpprofileLbsPtrOutput) EkahauTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.EkahauTag
	}).(pulumi.StringPtrOutput)
}

// IP address of Ekahua RTLS Controller (ERC).
func (o WtpprofileLbsPtrOutput) ErcServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.ErcServerIp
	}).(pulumi.StringPtrOutput)
}

// Ekahua RTLS Controller (ERC) UDP listening port.
func (o WtpprofileLbsPtrOutput) ErcServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *int {
		if v == nil {
			return nil
		}
		return v.ErcServerPort
	}).(pulumi.IntPtrOutput)
}

// Enable/disable FortiPresence to monitor the location and activity of WiFi clients even if they don't connect to this WiFi network (default = disable). Valid values: `foreign`, `both`, `disable`.
func (o WtpprofileLbsPtrOutput) Fortipresence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.Fortipresence
	}).(pulumi.StringPtrOutput)
}

// Enable/disable FortiPresence finding and reporting BLE devices. Valid values: `enable`, `disable`.
func (o WtpprofileLbsPtrOutput) FortipresenceBle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.FortipresenceBle
	}).(pulumi.StringPtrOutput)
}

// FortiPresence report transmit frequency (5 - 65535 sec, default = 30).
func (o WtpprofileLbsPtrOutput) FortipresenceFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *int {
		if v == nil {
			return nil
		}
		return v.FortipresenceFrequency
	}).(pulumi.IntPtrOutput)
}

// FortiPresence server UDP listening port (default = 3000).
func (o WtpprofileLbsPtrOutput) FortipresencePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *int {
		if v == nil {
			return nil
		}
		return v.FortipresencePort
	}).(pulumi.IntPtrOutput)
}

// FortiPresence project name (max. 16 characters, default = fortipresence).
func (o WtpprofileLbsPtrOutput) FortipresenceProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.FortipresenceProject
	}).(pulumi.StringPtrOutput)
}

// Enable/disable FortiPresence finding and reporting rogue APs. Valid values: `enable`, `disable`.
func (o WtpprofileLbsPtrOutput) FortipresenceRogue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.FortipresenceRogue
	}).(pulumi.StringPtrOutput)
}

// FortiPresence secret password (max. 16 characters).
func (o WtpprofileLbsPtrOutput) FortipresenceSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.FortipresenceSecret
	}).(pulumi.StringPtrOutput)
}

// FortiPresence server IP address.
func (o WtpprofileLbsPtrOutput) FortipresenceServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.FortipresenceServer
	}).(pulumi.StringPtrOutput)
}

// FortiPresence server address type (default = ipv4). Valid values: `ipv4`, `fqdn`.
func (o WtpprofileLbsPtrOutput) FortipresenceServerAddrType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.FortipresenceServerAddrType
	}).(pulumi.StringPtrOutput)
}

// FQDN of FortiPresence server.
func (o WtpprofileLbsPtrOutput) FortipresenceServerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.FortipresenceServerFqdn
	}).(pulumi.StringPtrOutput)
}

// Enable/disable FortiPresence finding and reporting unassociated stations. Valid values: `enable`, `disable`.
func (o WtpprofileLbsPtrOutput) FortipresenceUnassoc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.FortipresenceUnassoc
	}).(pulumi.StringPtrOutput)
}

// Enable/disable PoleStar BLE NAO Track Real Time Location Service (RTLS) support (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileLbsPtrOutput) Polestar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.Polestar
	}).(pulumi.StringPtrOutput)
}

// Time that measurements should be accumulated in seconds (default = 2).
func (o WtpprofileLbsPtrOutput) PolestarAccumulationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *int {
		if v == nil {
			return nil
		}
		return v.PolestarAccumulationInterval
	}).(pulumi.IntPtrOutput)
}

// Tags and asset addrgrp list to be reported.
func (o WtpprofileLbsPtrOutput) PolestarAssetAddrgrpList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.PolestarAssetAddrgrpList
	}).(pulumi.StringPtrOutput)
}

// Tags and asset UUID list 1 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
func (o WtpprofileLbsPtrOutput) PolestarAssetUuidList1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.PolestarAssetUuidList1
	}).(pulumi.StringPtrOutput)
}

// Tags and asset UUID list 2 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
func (o WtpprofileLbsPtrOutput) PolestarAssetUuidList2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.PolestarAssetUuidList2
	}).(pulumi.StringPtrOutput)
}

// Tags and asset UUID list 3 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
func (o WtpprofileLbsPtrOutput) PolestarAssetUuidList3() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.PolestarAssetUuidList3
	}).(pulumi.StringPtrOutput)
}

// Tags and asset UUID list 4 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
func (o WtpprofileLbsPtrOutput) PolestarAssetUuidList4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.PolestarAssetUuidList4
	}).(pulumi.StringPtrOutput)
}

// Select the protocol to report Measurements, Advertising Data, or Location Data to NAO Cloud. (default = WSS). Valid values: `WSS`.
func (o WtpprofileLbsPtrOutput) PolestarProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.PolestarProtocol
	}).(pulumi.StringPtrOutput)
}

// Time between reporting accumulated measurements in seconds (default = 2).
func (o WtpprofileLbsPtrOutput) PolestarReportingInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *int {
		if v == nil {
			return nil
		}
		return v.PolestarReportingInterval
	}).(pulumi.IntPtrOutput)
}

// FQDN of PoleStar Nao Track Server (default = ws.nao-cloud.com).
func (o WtpprofileLbsPtrOutput) PolestarServerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.PolestarServerFqdn
	}).(pulumi.StringPtrOutput)
}

// Path of PoleStar Nao Track Server (default = /v1/token/<access_token>/pst-v2).
func (o WtpprofileLbsPtrOutput) PolestarServerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.PolestarServerPath
	}).(pulumi.StringPtrOutput)
}

// Port of PoleStar Nao Track Server (default = 443).
func (o WtpprofileLbsPtrOutput) PolestarServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *int {
		if v == nil {
			return nil
		}
		return v.PolestarServerPort
	}).(pulumi.IntPtrOutput)
}

// Access Token of PoleStar Nao Track Server.
func (o WtpprofileLbsPtrOutput) PolestarServerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.PolestarServerToken
	}).(pulumi.StringPtrOutput)
}

// Enable/disable client station locating services for all clients, whether associated or not (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileLbsPtrOutput) StationLocate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileLbs) *string {
		if v == nil {
			return nil
		}
		return v.StationLocate
	}).(pulumi.StringPtrOutput)
}

type WtpprofileLedSchedule struct {
	// LED schedule name.
	Name *string `pulumi:"name"`
}

// WtpprofileLedScheduleInput is an input type that accepts WtpprofileLedScheduleArgs and WtpprofileLedScheduleOutput values.
// You can construct a concrete instance of `WtpprofileLedScheduleInput` via:
//
//	WtpprofileLedScheduleArgs{...}
type WtpprofileLedScheduleInput interface {
	pulumi.Input

	ToWtpprofileLedScheduleOutput() WtpprofileLedScheduleOutput
	ToWtpprofileLedScheduleOutputWithContext(context.Context) WtpprofileLedScheduleOutput
}

type WtpprofileLedScheduleArgs struct {
	// LED schedule name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (WtpprofileLedScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileLedSchedule)(nil)).Elem()
}

func (i WtpprofileLedScheduleArgs) ToWtpprofileLedScheduleOutput() WtpprofileLedScheduleOutput {
	return i.ToWtpprofileLedScheduleOutputWithContext(context.Background())
}

func (i WtpprofileLedScheduleArgs) ToWtpprofileLedScheduleOutputWithContext(ctx context.Context) WtpprofileLedScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileLedScheduleOutput)
}

// WtpprofileLedScheduleArrayInput is an input type that accepts WtpprofileLedScheduleArray and WtpprofileLedScheduleArrayOutput values.
// You can construct a concrete instance of `WtpprofileLedScheduleArrayInput` via:
//
//	WtpprofileLedScheduleArray{ WtpprofileLedScheduleArgs{...} }
type WtpprofileLedScheduleArrayInput interface {
	pulumi.Input

	ToWtpprofileLedScheduleArrayOutput() WtpprofileLedScheduleArrayOutput
	ToWtpprofileLedScheduleArrayOutputWithContext(context.Context) WtpprofileLedScheduleArrayOutput
}

type WtpprofileLedScheduleArray []WtpprofileLedScheduleInput

func (WtpprofileLedScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileLedSchedule)(nil)).Elem()
}

func (i WtpprofileLedScheduleArray) ToWtpprofileLedScheduleArrayOutput() WtpprofileLedScheduleArrayOutput {
	return i.ToWtpprofileLedScheduleArrayOutputWithContext(context.Background())
}

func (i WtpprofileLedScheduleArray) ToWtpprofileLedScheduleArrayOutputWithContext(ctx context.Context) WtpprofileLedScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileLedScheduleArrayOutput)
}

type WtpprofileLedScheduleOutput struct{ *pulumi.OutputState }

func (WtpprofileLedScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileLedSchedule)(nil)).Elem()
}

func (o WtpprofileLedScheduleOutput) ToWtpprofileLedScheduleOutput() WtpprofileLedScheduleOutput {
	return o
}

func (o WtpprofileLedScheduleOutput) ToWtpprofileLedScheduleOutputWithContext(ctx context.Context) WtpprofileLedScheduleOutput {
	return o
}

// LED schedule name.
func (o WtpprofileLedScheduleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileLedSchedule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type WtpprofileLedScheduleArrayOutput struct{ *pulumi.OutputState }

func (WtpprofileLedScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileLedSchedule)(nil)).Elem()
}

func (o WtpprofileLedScheduleArrayOutput) ToWtpprofileLedScheduleArrayOutput() WtpprofileLedScheduleArrayOutput {
	return o
}

func (o WtpprofileLedScheduleArrayOutput) ToWtpprofileLedScheduleArrayOutputWithContext(ctx context.Context) WtpprofileLedScheduleArrayOutput {
	return o
}

func (o WtpprofileLedScheduleArrayOutput) Index(i pulumi.IntInput) WtpprofileLedScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpprofileLedSchedule {
		return vs[0].([]WtpprofileLedSchedule)[vs[1].(int)]
	}).(WtpprofileLedScheduleOutput)
}

type WtpprofilePlatform struct {
	// Enable/disable use of one radio for dedicated dual-band scanning to detect RF characterization and wireless threat management. Valid values: `enable`, `disable`.
	Ddscan *string `pulumi:"ddscan"`
	// Configure operation mode of 5G radios (default = single-5G). Valid values: `single-5G`, `dual-5G`.
	Mode *string `pulumi:"mode"`
	// WTP, FortiAP or AP platform type. There are built-in WTP profiles for all supported FortiAP models. You can select a built-in profile and customize it or create a new profile.
	Type *string `pulumi:"type"`
}

// WtpprofilePlatformInput is an input type that accepts WtpprofilePlatformArgs and WtpprofilePlatformOutput values.
// You can construct a concrete instance of `WtpprofilePlatformInput` via:
//
//	WtpprofilePlatformArgs{...}
type WtpprofilePlatformInput interface {
	pulumi.Input

	ToWtpprofilePlatformOutput() WtpprofilePlatformOutput
	ToWtpprofilePlatformOutputWithContext(context.Context) WtpprofilePlatformOutput
}

type WtpprofilePlatformArgs struct {
	// Enable/disable use of one radio for dedicated dual-band scanning to detect RF characterization and wireless threat management. Valid values: `enable`, `disable`.
	Ddscan pulumi.StringPtrInput `pulumi:"ddscan"`
	// Configure operation mode of 5G radios (default = single-5G). Valid values: `single-5G`, `dual-5G`.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// WTP, FortiAP or AP platform type. There are built-in WTP profiles for all supported FortiAP models. You can select a built-in profile and customize it or create a new profile.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (WtpprofilePlatformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofilePlatform)(nil)).Elem()
}

func (i WtpprofilePlatformArgs) ToWtpprofilePlatformOutput() WtpprofilePlatformOutput {
	return i.ToWtpprofilePlatformOutputWithContext(context.Background())
}

func (i WtpprofilePlatformArgs) ToWtpprofilePlatformOutputWithContext(ctx context.Context) WtpprofilePlatformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofilePlatformOutput)
}

func (i WtpprofilePlatformArgs) ToWtpprofilePlatformPtrOutput() WtpprofilePlatformPtrOutput {
	return i.ToWtpprofilePlatformPtrOutputWithContext(context.Background())
}

func (i WtpprofilePlatformArgs) ToWtpprofilePlatformPtrOutputWithContext(ctx context.Context) WtpprofilePlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofilePlatformOutput).ToWtpprofilePlatformPtrOutputWithContext(ctx)
}

// WtpprofilePlatformPtrInput is an input type that accepts WtpprofilePlatformArgs, WtpprofilePlatformPtr and WtpprofilePlatformPtrOutput values.
// You can construct a concrete instance of `WtpprofilePlatformPtrInput` via:
//
//	        WtpprofilePlatformArgs{...}
//
//	or:
//
//	        nil
type WtpprofilePlatformPtrInput interface {
	pulumi.Input

	ToWtpprofilePlatformPtrOutput() WtpprofilePlatformPtrOutput
	ToWtpprofilePlatformPtrOutputWithContext(context.Context) WtpprofilePlatformPtrOutput
}

type wtpprofilePlatformPtrType WtpprofilePlatformArgs

func WtpprofilePlatformPtr(v *WtpprofilePlatformArgs) WtpprofilePlatformPtrInput {
	return (*wtpprofilePlatformPtrType)(v)
}

func (*wtpprofilePlatformPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpprofilePlatform)(nil)).Elem()
}

func (i *wtpprofilePlatformPtrType) ToWtpprofilePlatformPtrOutput() WtpprofilePlatformPtrOutput {
	return i.ToWtpprofilePlatformPtrOutputWithContext(context.Background())
}

func (i *wtpprofilePlatformPtrType) ToWtpprofilePlatformPtrOutputWithContext(ctx context.Context) WtpprofilePlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofilePlatformPtrOutput)
}

type WtpprofilePlatformOutput struct{ *pulumi.OutputState }

func (WtpprofilePlatformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofilePlatform)(nil)).Elem()
}

func (o WtpprofilePlatformOutput) ToWtpprofilePlatformOutput() WtpprofilePlatformOutput {
	return o
}

func (o WtpprofilePlatformOutput) ToWtpprofilePlatformOutputWithContext(ctx context.Context) WtpprofilePlatformOutput {
	return o
}

func (o WtpprofilePlatformOutput) ToWtpprofilePlatformPtrOutput() WtpprofilePlatformPtrOutput {
	return o.ToWtpprofilePlatformPtrOutputWithContext(context.Background())
}

func (o WtpprofilePlatformOutput) ToWtpprofilePlatformPtrOutputWithContext(ctx context.Context) WtpprofilePlatformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WtpprofilePlatform) *WtpprofilePlatform {
		return &v
	}).(WtpprofilePlatformPtrOutput)
}

// Enable/disable use of one radio for dedicated dual-band scanning to detect RF characterization and wireless threat management. Valid values: `enable`, `disable`.
func (o WtpprofilePlatformOutput) Ddscan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofilePlatform) *string { return v.Ddscan }).(pulumi.StringPtrOutput)
}

// Configure operation mode of 5G radios (default = single-5G). Valid values: `single-5G`, `dual-5G`.
func (o WtpprofilePlatformOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofilePlatform) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// WTP, FortiAP or AP platform type. There are built-in WTP profiles for all supported FortiAP models. You can select a built-in profile and customize it or create a new profile.
func (o WtpprofilePlatformOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofilePlatform) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type WtpprofilePlatformPtrOutput struct{ *pulumi.OutputState }

func (WtpprofilePlatformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpprofilePlatform)(nil)).Elem()
}

func (o WtpprofilePlatformPtrOutput) ToWtpprofilePlatformPtrOutput() WtpprofilePlatformPtrOutput {
	return o
}

func (o WtpprofilePlatformPtrOutput) ToWtpprofilePlatformPtrOutputWithContext(ctx context.Context) WtpprofilePlatformPtrOutput {
	return o
}

func (o WtpprofilePlatformPtrOutput) Elem() WtpprofilePlatformOutput {
	return o.ApplyT(func(v *WtpprofilePlatform) WtpprofilePlatform {
		if v != nil {
			return *v
		}
		var ret WtpprofilePlatform
		return ret
	}).(WtpprofilePlatformOutput)
}

// Enable/disable use of one radio for dedicated dual-band scanning to detect RF characterization and wireless threat management. Valid values: `enable`, `disable`.
func (o WtpprofilePlatformPtrOutput) Ddscan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofilePlatform) *string {
		if v == nil {
			return nil
		}
		return v.Ddscan
	}).(pulumi.StringPtrOutput)
}

// Configure operation mode of 5G radios (default = single-5G). Valid values: `single-5G`, `dual-5G`.
func (o WtpprofilePlatformPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofilePlatform) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// WTP, FortiAP or AP platform type. There are built-in WTP profiles for all supported FortiAP models. You can select a built-in profile and customize it or create a new profile.
func (o WtpprofilePlatformPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofilePlatform) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type WtpprofileRadio1 struct {
	// Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
	AirtimeFairness *string `pulumi:"airtimeFairness"`
	// Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
	Amsdu *string `pulumi:"amsdu"`
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff *string `pulumi:"apHandoff"`
	// MAC address to monitor.
	ApSnifferAddr *string `pulumi:"apSnifferAddr"`
	// Sniffer buffer size (1 - 32 MB, default = 16).
	ApSnifferBufsize *int `pulumi:"apSnifferBufsize"`
	// Channel on which to operate the sniffer (default = 6).
	ApSnifferChan *int `pulumi:"apSnifferChan"`
	// Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
	ApSnifferCtl *string `pulumi:"apSnifferCtl"`
	// Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
	ApSnifferData *string `pulumi:"apSnifferData"`
	// Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtBeacon *string `pulumi:"apSnifferMgmtBeacon"`
	// Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtOther *string `pulumi:"apSnifferMgmtOther"`
	// Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtProbe *string `pulumi:"apSnifferMgmtProbe"`
	// Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
	ArrpProfile *string `pulumi:"arrpProfile"`
	// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerHigh *int `pulumi:"autoPowerHigh"`
	// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
	AutoPowerLevel *string `pulumi:"autoPowerLevel"`
	// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerLow *int `pulumi:"autoPowerLow"`
	// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
	AutoPowerTarget *string `pulumi:"autoPowerTarget"`
	// WiFi band that Radio 3 operates on.
	Band *string `pulumi:"band"`
	// WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
	Band5gType *string `pulumi:"band5gType"`
	// Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
	BandwidthAdmissionControl *string `pulumi:"bandwidthAdmissionControl"`
	// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
	BandwidthCapacity *int `pulumi:"bandwidthCapacity"`
	// Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
	BeaconInterval *int `pulumi:"beaconInterval"`
	// BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
	BssColor *int `pulumi:"bssColor"`
	// BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
	BssColorMode *string `pulumi:"bssColorMode"`
	// Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
	CallAdmissionControl *string `pulumi:"callAdmissionControl"`
	// Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
	CallCapacity *int `pulumi:"callCapacity"`
	// Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
	ChannelBonding *string `pulumi:"channelBonding"`
	// Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
	ChannelUtilization *string `pulumi:"channelUtilization"`
	// Selected list of wireless radio channels. The structure of `channel` block is documented below.
	Channels []WtpprofileRadio1Channel `pulumi:"channels"`
	// Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
	Coexistence *string `pulumi:"coexistence"`
	// Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
	Darrp *string `pulumi:"darrp"`
	// Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
	Drma *string `pulumi:"drma"`
	// Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
	DrmaSensitivity *string `pulumi:"drmaSensitivity"`
	// Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
	Dtim *int `pulumi:"dtim"`
	// Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
	FragThreshold *int `pulumi:"fragThreshold"`
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff *string `pulumi:"frequencyHandoff"`
	// Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
	IperfProtocol *string `pulumi:"iperfProtocol"`
	// Iperf service port number.
	IperfServerPort *int `pulumi:"iperfServerPort"`
	// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
	MaxClients *int `pulumi:"maxClients"`
	// Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
	MaxDistance *int `pulumi:"maxDistance"`
	// Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
	MimoMode *string `pulumi:"mimoMode"`
	// Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
	Mode *string `pulumi:"mode"`
	// Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
	N80211d *string `pulumi:"n80211d"`
	// Optional antenna used on FAP (default = none).
	OptionalAntenna *string `pulumi:"optionalAntenna"`
	// Optional antenna gain in dBi (0 to 20, default = 0).
	OptionalAntennaGain *string `pulumi:"optionalAntennaGain"`
	// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
	PowerLevel *int `pulumi:"powerLevel"`
	// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
	PowerMode *string `pulumi:"powerMode"`
	// Radio EIRP power in dBm (1 - 33, default = 27).
	PowerValue *int `pulumi:"powerValue"`
	// Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
	PowersaveOptimize *string `pulumi:"powersaveOptimize"`
	// Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
	ProtectionMode *string `pulumi:"protectionMode"`
	// radio-id
	RadioId *int `pulumi:"radioId"`
	// Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
	RtsThreshold *int `pulumi:"rtsThreshold"`
	// BSSID for WiFi network.
	SamBssid *string `pulumi:"samBssid"`
	// CA certificate for WPA2/WPA3-ENTERPRISE.
	SamCaCertificate *string `pulumi:"samCaCertificate"`
	// Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
	SamCaptivePortal *string `pulumi:"samCaptivePortal"`
	// Client certificate for WPA2/WPA3-ENTERPRISE.
	SamClientCertificate *string `pulumi:"samClientCertificate"`
	// Failure identification on the page after an incorrect login.
	SamCwpFailureString *string `pulumi:"samCwpFailureString"`
	// Identification string from the captive portal login form.
	SamCwpMatchString *string `pulumi:"samCwpMatchString"`
	// Password for captive portal authentication.
	SamCwpPassword *string `pulumi:"samCwpPassword"`
	// Success identification on the page after a successful login.
	SamCwpSuccessString *string `pulumi:"samCwpSuccessString"`
	// Website the client is trying to access.
	SamCwpTestUrl *string `pulumi:"samCwpTestUrl"`
	// Username for captive portal authentication.
	SamCwpUsername *string `pulumi:"samCwpUsername"`
	// Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
	SamEapMethod *string `pulumi:"samEapMethod"`
	// Passphrase for WiFi network connection.
	SamPassword *string `pulumi:"samPassword"`
	// Private key for WPA2/WPA3-ENTERPRISE.
	SamPrivateKey *string `pulumi:"samPrivateKey"`
	// Password for private key file for WPA2/WPA3-ENTERPRISE.
	SamPrivateKeyPassword *string `pulumi:"samPrivateKeyPassword"`
	// SAM report interval (sec), 0 for a one-time report.
	SamReportIntv *int `pulumi:"samReportIntv"`
	// Select WiFi network security type (default = "wpa-personal").
	SamSecurityType *string `pulumi:"samSecurityType"`
	// SAM test server domain name.
	SamServerFqdn *string `pulumi:"samServerFqdn"`
	// SAM test server IP address.
	SamServerIp *string `pulumi:"samServerIp"`
	// Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
	SamServerType *string `pulumi:"samServerType"`
	// SSID for WiFi network.
	SamSsid *string `pulumi:"samSsid"`
	// Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
	SamTest *string `pulumi:"samTest"`
	// Username for WiFi network connection.
	SamUsername *string `pulumi:"samUsername"`
	// Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
	ShortGuardInterval *string `pulumi:"shortGuardInterval"`
	// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
	SpectrumAnalysis *string `pulumi:"spectrumAnalysis"`
	// Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
	TransmitOptimize *string `pulumi:"transmitOptimize"`
	// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
	VapAll *string `pulumi:"vapAll"`
	// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
	Vaps []WtpprofileRadio1Vap `pulumi:"vaps"`
	// Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
	WidsProfile *string `pulumi:"widsProfile"`
	// Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
	ZeroWaitDfs *string `pulumi:"zeroWaitDfs"`
}

// WtpprofileRadio1Input is an input type that accepts WtpprofileRadio1Args and WtpprofileRadio1Output values.
// You can construct a concrete instance of `WtpprofileRadio1Input` via:
//
//	WtpprofileRadio1Args{...}
type WtpprofileRadio1Input interface {
	pulumi.Input

	ToWtpprofileRadio1Output() WtpprofileRadio1Output
	ToWtpprofileRadio1OutputWithContext(context.Context) WtpprofileRadio1Output
}

type WtpprofileRadio1Args struct {
	// Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
	AirtimeFairness pulumi.StringPtrInput `pulumi:"airtimeFairness"`
	// Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
	Amsdu pulumi.StringPtrInput `pulumi:"amsdu"`
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff pulumi.StringPtrInput `pulumi:"apHandoff"`
	// MAC address to monitor.
	ApSnifferAddr pulumi.StringPtrInput `pulumi:"apSnifferAddr"`
	// Sniffer buffer size (1 - 32 MB, default = 16).
	ApSnifferBufsize pulumi.IntPtrInput `pulumi:"apSnifferBufsize"`
	// Channel on which to operate the sniffer (default = 6).
	ApSnifferChan pulumi.IntPtrInput `pulumi:"apSnifferChan"`
	// Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
	ApSnifferCtl pulumi.StringPtrInput `pulumi:"apSnifferCtl"`
	// Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
	ApSnifferData pulumi.StringPtrInput `pulumi:"apSnifferData"`
	// Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtBeacon pulumi.StringPtrInput `pulumi:"apSnifferMgmtBeacon"`
	// Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtOther pulumi.StringPtrInput `pulumi:"apSnifferMgmtOther"`
	// Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtProbe pulumi.StringPtrInput `pulumi:"apSnifferMgmtProbe"`
	// Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
	ArrpProfile pulumi.StringPtrInput `pulumi:"arrpProfile"`
	// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerHigh pulumi.IntPtrInput `pulumi:"autoPowerHigh"`
	// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
	AutoPowerLevel pulumi.StringPtrInput `pulumi:"autoPowerLevel"`
	// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerLow pulumi.IntPtrInput `pulumi:"autoPowerLow"`
	// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
	AutoPowerTarget pulumi.StringPtrInput `pulumi:"autoPowerTarget"`
	// WiFi band that Radio 3 operates on.
	Band pulumi.StringPtrInput `pulumi:"band"`
	// WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
	Band5gType pulumi.StringPtrInput `pulumi:"band5gType"`
	// Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
	BandwidthAdmissionControl pulumi.StringPtrInput `pulumi:"bandwidthAdmissionControl"`
	// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
	BandwidthCapacity pulumi.IntPtrInput `pulumi:"bandwidthCapacity"`
	// Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
	BeaconInterval pulumi.IntPtrInput `pulumi:"beaconInterval"`
	// BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
	BssColor pulumi.IntPtrInput `pulumi:"bssColor"`
	// BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
	BssColorMode pulumi.StringPtrInput `pulumi:"bssColorMode"`
	// Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
	CallAdmissionControl pulumi.StringPtrInput `pulumi:"callAdmissionControl"`
	// Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
	CallCapacity pulumi.IntPtrInput `pulumi:"callCapacity"`
	// Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
	ChannelBonding pulumi.StringPtrInput `pulumi:"channelBonding"`
	// Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
	ChannelUtilization pulumi.StringPtrInput `pulumi:"channelUtilization"`
	// Selected list of wireless radio channels. The structure of `channel` block is documented below.
	Channels WtpprofileRadio1ChannelArrayInput `pulumi:"channels"`
	// Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
	Coexistence pulumi.StringPtrInput `pulumi:"coexistence"`
	// Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
	Darrp pulumi.StringPtrInput `pulumi:"darrp"`
	// Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
	Drma pulumi.StringPtrInput `pulumi:"drma"`
	// Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
	DrmaSensitivity pulumi.StringPtrInput `pulumi:"drmaSensitivity"`
	// Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
	Dtim pulumi.IntPtrInput `pulumi:"dtim"`
	// Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
	FragThreshold pulumi.IntPtrInput `pulumi:"fragThreshold"`
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff pulumi.StringPtrInput `pulumi:"frequencyHandoff"`
	// Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
	IperfProtocol pulumi.StringPtrInput `pulumi:"iperfProtocol"`
	// Iperf service port number.
	IperfServerPort pulumi.IntPtrInput `pulumi:"iperfServerPort"`
	// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
	MaxClients pulumi.IntPtrInput `pulumi:"maxClients"`
	// Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
	MaxDistance pulumi.IntPtrInput `pulumi:"maxDistance"`
	// Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
	MimoMode pulumi.StringPtrInput `pulumi:"mimoMode"`
	// Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
	N80211d pulumi.StringPtrInput `pulumi:"n80211d"`
	// Optional antenna used on FAP (default = none).
	OptionalAntenna pulumi.StringPtrInput `pulumi:"optionalAntenna"`
	// Optional antenna gain in dBi (0 to 20, default = 0).
	OptionalAntennaGain pulumi.StringPtrInput `pulumi:"optionalAntennaGain"`
	// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
	PowerLevel pulumi.IntPtrInput `pulumi:"powerLevel"`
	// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
	PowerMode pulumi.StringPtrInput `pulumi:"powerMode"`
	// Radio EIRP power in dBm (1 - 33, default = 27).
	PowerValue pulumi.IntPtrInput `pulumi:"powerValue"`
	// Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
	PowersaveOptimize pulumi.StringPtrInput `pulumi:"powersaveOptimize"`
	// Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
	ProtectionMode pulumi.StringPtrInput `pulumi:"protectionMode"`
	// radio-id
	RadioId pulumi.IntPtrInput `pulumi:"radioId"`
	// Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
	RtsThreshold pulumi.IntPtrInput `pulumi:"rtsThreshold"`
	// BSSID for WiFi network.
	SamBssid pulumi.StringPtrInput `pulumi:"samBssid"`
	// CA certificate for WPA2/WPA3-ENTERPRISE.
	SamCaCertificate pulumi.StringPtrInput `pulumi:"samCaCertificate"`
	// Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
	SamCaptivePortal pulumi.StringPtrInput `pulumi:"samCaptivePortal"`
	// Client certificate for WPA2/WPA3-ENTERPRISE.
	SamClientCertificate pulumi.StringPtrInput `pulumi:"samClientCertificate"`
	// Failure identification on the page after an incorrect login.
	SamCwpFailureString pulumi.StringPtrInput `pulumi:"samCwpFailureString"`
	// Identification string from the captive portal login form.
	SamCwpMatchString pulumi.StringPtrInput `pulumi:"samCwpMatchString"`
	// Password for captive portal authentication.
	SamCwpPassword pulumi.StringPtrInput `pulumi:"samCwpPassword"`
	// Success identification on the page after a successful login.
	SamCwpSuccessString pulumi.StringPtrInput `pulumi:"samCwpSuccessString"`
	// Website the client is trying to access.
	SamCwpTestUrl pulumi.StringPtrInput `pulumi:"samCwpTestUrl"`
	// Username for captive portal authentication.
	SamCwpUsername pulumi.StringPtrInput `pulumi:"samCwpUsername"`
	// Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
	SamEapMethod pulumi.StringPtrInput `pulumi:"samEapMethod"`
	// Passphrase for WiFi network connection.
	SamPassword pulumi.StringPtrInput `pulumi:"samPassword"`
	// Private key for WPA2/WPA3-ENTERPRISE.
	SamPrivateKey pulumi.StringPtrInput `pulumi:"samPrivateKey"`
	// Password for private key file for WPA2/WPA3-ENTERPRISE.
	SamPrivateKeyPassword pulumi.StringPtrInput `pulumi:"samPrivateKeyPassword"`
	// SAM report interval (sec), 0 for a one-time report.
	SamReportIntv pulumi.IntPtrInput `pulumi:"samReportIntv"`
	// Select WiFi network security type (default = "wpa-personal").
	SamSecurityType pulumi.StringPtrInput `pulumi:"samSecurityType"`
	// SAM test server domain name.
	SamServerFqdn pulumi.StringPtrInput `pulumi:"samServerFqdn"`
	// SAM test server IP address.
	SamServerIp pulumi.StringPtrInput `pulumi:"samServerIp"`
	// Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
	SamServerType pulumi.StringPtrInput `pulumi:"samServerType"`
	// SSID for WiFi network.
	SamSsid pulumi.StringPtrInput `pulumi:"samSsid"`
	// Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
	SamTest pulumi.StringPtrInput `pulumi:"samTest"`
	// Username for WiFi network connection.
	SamUsername pulumi.StringPtrInput `pulumi:"samUsername"`
	// Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
	ShortGuardInterval pulumi.StringPtrInput `pulumi:"shortGuardInterval"`
	// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
	SpectrumAnalysis pulumi.StringPtrInput `pulumi:"spectrumAnalysis"`
	// Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
	TransmitOptimize pulumi.StringPtrInput `pulumi:"transmitOptimize"`
	// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
	VapAll pulumi.StringPtrInput `pulumi:"vapAll"`
	// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
	Vaps WtpprofileRadio1VapArrayInput `pulumi:"vaps"`
	// Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
	WidsProfile pulumi.StringPtrInput `pulumi:"widsProfile"`
	// Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
	ZeroWaitDfs pulumi.StringPtrInput `pulumi:"zeroWaitDfs"`
}

func (WtpprofileRadio1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio1)(nil)).Elem()
}

func (i WtpprofileRadio1Args) ToWtpprofileRadio1Output() WtpprofileRadio1Output {
	return i.ToWtpprofileRadio1OutputWithContext(context.Background())
}

func (i WtpprofileRadio1Args) ToWtpprofileRadio1OutputWithContext(ctx context.Context) WtpprofileRadio1Output {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio1Output)
}

func (i WtpprofileRadio1Args) ToWtpprofileRadio1PtrOutput() WtpprofileRadio1PtrOutput {
	return i.ToWtpprofileRadio1PtrOutputWithContext(context.Background())
}

func (i WtpprofileRadio1Args) ToWtpprofileRadio1PtrOutputWithContext(ctx context.Context) WtpprofileRadio1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio1Output).ToWtpprofileRadio1PtrOutputWithContext(ctx)
}

// WtpprofileRadio1PtrInput is an input type that accepts WtpprofileRadio1Args, WtpprofileRadio1Ptr and WtpprofileRadio1PtrOutput values.
// You can construct a concrete instance of `WtpprofileRadio1PtrInput` via:
//
//	        WtpprofileRadio1Args{...}
//
//	or:
//
//	        nil
type WtpprofileRadio1PtrInput interface {
	pulumi.Input

	ToWtpprofileRadio1PtrOutput() WtpprofileRadio1PtrOutput
	ToWtpprofileRadio1PtrOutputWithContext(context.Context) WtpprofileRadio1PtrOutput
}

type wtpprofileRadio1PtrType WtpprofileRadio1Args

func WtpprofileRadio1Ptr(v *WtpprofileRadio1Args) WtpprofileRadio1PtrInput {
	return (*wtpprofileRadio1PtrType)(v)
}

func (*wtpprofileRadio1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpprofileRadio1)(nil)).Elem()
}

func (i *wtpprofileRadio1PtrType) ToWtpprofileRadio1PtrOutput() WtpprofileRadio1PtrOutput {
	return i.ToWtpprofileRadio1PtrOutputWithContext(context.Background())
}

func (i *wtpprofileRadio1PtrType) ToWtpprofileRadio1PtrOutputWithContext(ctx context.Context) WtpprofileRadio1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio1PtrOutput)
}

type WtpprofileRadio1Output struct{ *pulumi.OutputState }

func (WtpprofileRadio1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio1)(nil)).Elem()
}

func (o WtpprofileRadio1Output) ToWtpprofileRadio1Output() WtpprofileRadio1Output {
	return o
}

func (o WtpprofileRadio1Output) ToWtpprofileRadio1OutputWithContext(ctx context.Context) WtpprofileRadio1Output {
	return o
}

func (o WtpprofileRadio1Output) ToWtpprofileRadio1PtrOutput() WtpprofileRadio1PtrOutput {
	return o.ToWtpprofileRadio1PtrOutputWithContext(context.Background())
}

func (o WtpprofileRadio1Output) ToWtpprofileRadio1PtrOutputWithContext(ctx context.Context) WtpprofileRadio1PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WtpprofileRadio1) *WtpprofileRadio1 {
		return &v
	}).(WtpprofileRadio1PtrOutput)
}

// Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) AirtimeFairness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.AirtimeFairness }).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) Amsdu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.Amsdu }).(pulumi.StringPtrOutput)
}

// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) ApHandoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.ApHandoff }).(pulumi.StringPtrOutput)
}

// MAC address to monitor.
func (o WtpprofileRadio1Output) ApSnifferAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.ApSnifferAddr }).(pulumi.StringPtrOutput)
}

// Sniffer buffer size (1 - 32 MB, default = 16).
func (o WtpprofileRadio1Output) ApSnifferBufsize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.ApSnifferBufsize }).(pulumi.IntPtrOutput)
}

// Channel on which to operate the sniffer (default = 6).
func (o WtpprofileRadio1Output) ApSnifferChan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.ApSnifferChan }).(pulumi.IntPtrOutput)
}

// Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) ApSnifferCtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.ApSnifferCtl }).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) ApSnifferData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.ApSnifferData }).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) ApSnifferMgmtBeacon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.ApSnifferMgmtBeacon }).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) ApSnifferMgmtOther() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.ApSnifferMgmtOther }).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) ApSnifferMgmtProbe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.ApSnifferMgmtProbe }).(pulumi.StringPtrOutput)
}

// Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
func (o WtpprofileRadio1Output) ArrpProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.ArrpProfile }).(pulumi.StringPtrOutput)
}

// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpprofileRadio1Output) AutoPowerHigh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.AutoPowerHigh }).(pulumi.IntPtrOutput)
}

// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) AutoPowerLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.AutoPowerLevel }).(pulumi.StringPtrOutput)
}

// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpprofileRadio1Output) AutoPowerLow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.AutoPowerLow }).(pulumi.IntPtrOutput)
}

// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
func (o WtpprofileRadio1Output) AutoPowerTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.AutoPowerTarget }).(pulumi.StringPtrOutput)
}

// WiFi band that Radio 3 operates on.
func (o WtpprofileRadio1Output) Band() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.Band }).(pulumi.StringPtrOutput)
}

// WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
func (o WtpprofileRadio1Output) Band5gType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.Band5gType }).(pulumi.StringPtrOutput)
}

// Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) BandwidthAdmissionControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.BandwidthAdmissionControl }).(pulumi.StringPtrOutput)
}

// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
func (o WtpprofileRadio1Output) BandwidthCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.BandwidthCapacity }).(pulumi.IntPtrOutput)
}

// Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
func (o WtpprofileRadio1Output) BeaconInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.BeaconInterval }).(pulumi.IntPtrOutput)
}

// BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
func (o WtpprofileRadio1Output) BssColor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.BssColor }).(pulumi.IntPtrOutput)
}

// BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
func (o WtpprofileRadio1Output) BssColorMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.BssColorMode }).(pulumi.StringPtrOutput)
}

// Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) CallAdmissionControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.CallAdmissionControl }).(pulumi.StringPtrOutput)
}

// Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
func (o WtpprofileRadio1Output) CallCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.CallCapacity }).(pulumi.IntPtrOutput)
}

// Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
func (o WtpprofileRadio1Output) ChannelBonding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.ChannelBonding }).(pulumi.StringPtrOutput)
}

// Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) ChannelUtilization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.ChannelUtilization }).(pulumi.StringPtrOutput)
}

// Selected list of wireless radio channels. The structure of `channel` block is documented below.
func (o WtpprofileRadio1Output) Channels() WtpprofileRadio1ChannelArrayOutput {
	return o.ApplyT(func(v WtpprofileRadio1) []WtpprofileRadio1Channel { return v.Channels }).(WtpprofileRadio1ChannelArrayOutput)
}

// Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) Coexistence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.Coexistence }).(pulumi.StringPtrOutput)
}

// Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) Darrp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.Darrp }).(pulumi.StringPtrOutput)
}

// Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
func (o WtpprofileRadio1Output) Drma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.Drma }).(pulumi.StringPtrOutput)
}

// Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
func (o WtpprofileRadio1Output) DrmaSensitivity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.DrmaSensitivity }).(pulumi.StringPtrOutput)
}

// Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
func (o WtpprofileRadio1Output) Dtim() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.Dtim }).(pulumi.IntPtrOutput)
}

// Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
func (o WtpprofileRadio1Output) FragThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.FragThreshold }).(pulumi.IntPtrOutput)
}

// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) FrequencyHandoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.FrequencyHandoff }).(pulumi.StringPtrOutput)
}

// Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
func (o WtpprofileRadio1Output) IperfProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.IperfProtocol }).(pulumi.StringPtrOutput)
}

// Iperf service port number.
func (o WtpprofileRadio1Output) IperfServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.IperfServerPort }).(pulumi.IntPtrOutput)
}

// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
func (o WtpprofileRadio1Output) MaxClients() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.MaxClients }).(pulumi.IntPtrOutput)
}

// Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
func (o WtpprofileRadio1Output) MaxDistance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.MaxDistance }).(pulumi.IntPtrOutput)
}

// Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
func (o WtpprofileRadio1Output) MimoMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.MimoMode }).(pulumi.StringPtrOutput)
}

// Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
func (o WtpprofileRadio1Output) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) N80211d() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.N80211d }).(pulumi.StringPtrOutput)
}

// Optional antenna used on FAP (default = none).
func (o WtpprofileRadio1Output) OptionalAntenna() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.OptionalAntenna }).(pulumi.StringPtrOutput)
}

// Optional antenna gain in dBi (0 to 20, default = 0).
func (o WtpprofileRadio1Output) OptionalAntennaGain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.OptionalAntennaGain }).(pulumi.StringPtrOutput)
}

// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
func (o WtpprofileRadio1Output) PowerLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.PowerLevel }).(pulumi.IntPtrOutput)
}

// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
func (o WtpprofileRadio1Output) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.PowerMode }).(pulumi.StringPtrOutput)
}

// Radio EIRP power in dBm (1 - 33, default = 27).
func (o WtpprofileRadio1Output) PowerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.PowerValue }).(pulumi.IntPtrOutput)
}

// Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
func (o WtpprofileRadio1Output) PowersaveOptimize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.PowersaveOptimize }).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
func (o WtpprofileRadio1Output) ProtectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.ProtectionMode }).(pulumi.StringPtrOutput)
}

// radio-id
func (o WtpprofileRadio1Output) RadioId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.RadioId }).(pulumi.IntPtrOutput)
}

// Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
func (o WtpprofileRadio1Output) RtsThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.RtsThreshold }).(pulumi.IntPtrOutput)
}

// BSSID for WiFi network.
func (o WtpprofileRadio1Output) SamBssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamBssid }).(pulumi.StringPtrOutput)
}

// CA certificate for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio1Output) SamCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamCaCertificate }).(pulumi.StringPtrOutput)
}

// Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) SamCaptivePortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamCaptivePortal }).(pulumi.StringPtrOutput)
}

// Client certificate for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio1Output) SamClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamClientCertificate }).(pulumi.StringPtrOutput)
}

// Failure identification on the page after an incorrect login.
func (o WtpprofileRadio1Output) SamCwpFailureString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamCwpFailureString }).(pulumi.StringPtrOutput)
}

// Identification string from the captive portal login form.
func (o WtpprofileRadio1Output) SamCwpMatchString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamCwpMatchString }).(pulumi.StringPtrOutput)
}

// Password for captive portal authentication.
func (o WtpprofileRadio1Output) SamCwpPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamCwpPassword }).(pulumi.StringPtrOutput)
}

// Success identification on the page after a successful login.
func (o WtpprofileRadio1Output) SamCwpSuccessString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamCwpSuccessString }).(pulumi.StringPtrOutput)
}

// Website the client is trying to access.
func (o WtpprofileRadio1Output) SamCwpTestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamCwpTestUrl }).(pulumi.StringPtrOutput)
}

// Username for captive portal authentication.
func (o WtpprofileRadio1Output) SamCwpUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamCwpUsername }).(pulumi.StringPtrOutput)
}

// Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
func (o WtpprofileRadio1Output) SamEapMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamEapMethod }).(pulumi.StringPtrOutput)
}

// Passphrase for WiFi network connection.
func (o WtpprofileRadio1Output) SamPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamPassword }).(pulumi.StringPtrOutput)
}

// Private key for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio1Output) SamPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamPrivateKey }).(pulumi.StringPtrOutput)
}

// Password for private key file for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio1Output) SamPrivateKeyPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamPrivateKeyPassword }).(pulumi.StringPtrOutput)
}

// SAM report interval (sec), 0 for a one-time report.
func (o WtpprofileRadio1Output) SamReportIntv() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *int { return v.SamReportIntv }).(pulumi.IntPtrOutput)
}

// Select WiFi network security type (default = "wpa-personal").
func (o WtpprofileRadio1Output) SamSecurityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamSecurityType }).(pulumi.StringPtrOutput)
}

// SAM test server domain name.
func (o WtpprofileRadio1Output) SamServerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamServerFqdn }).(pulumi.StringPtrOutput)
}

// SAM test server IP address.
func (o WtpprofileRadio1Output) SamServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamServerIp }).(pulumi.StringPtrOutput)
}

// Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
func (o WtpprofileRadio1Output) SamServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamServerType }).(pulumi.StringPtrOutput)
}

// SSID for WiFi network.
func (o WtpprofileRadio1Output) SamSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamSsid }).(pulumi.StringPtrOutput)
}

// Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
func (o WtpprofileRadio1Output) SamTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamTest }).(pulumi.StringPtrOutput)
}

// Username for WiFi network connection.
func (o WtpprofileRadio1Output) SamUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SamUsername }).(pulumi.StringPtrOutput)
}

// Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) ShortGuardInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.ShortGuardInterval }).(pulumi.StringPtrOutput)
}

// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
func (o WtpprofileRadio1Output) SpectrumAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.SpectrumAnalysis }).(pulumi.StringPtrOutput)
}

// Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
func (o WtpprofileRadio1Output) TransmitOptimize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.TransmitOptimize }).(pulumi.StringPtrOutput)
}

// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
func (o WtpprofileRadio1Output) VapAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.VapAll }).(pulumi.StringPtrOutput)
}

// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
func (o WtpprofileRadio1Output) Vaps() WtpprofileRadio1VapArrayOutput {
	return o.ApplyT(func(v WtpprofileRadio1) []WtpprofileRadio1Vap { return v.Vaps }).(WtpprofileRadio1VapArrayOutput)
}

// Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
func (o WtpprofileRadio1Output) WidsProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.WidsProfile }).(pulumi.StringPtrOutput)
}

// Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1Output) ZeroWaitDfs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1) *string { return v.ZeroWaitDfs }).(pulumi.StringPtrOutput)
}

type WtpprofileRadio1PtrOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpprofileRadio1)(nil)).Elem()
}

func (o WtpprofileRadio1PtrOutput) ToWtpprofileRadio1PtrOutput() WtpprofileRadio1PtrOutput {
	return o
}

func (o WtpprofileRadio1PtrOutput) ToWtpprofileRadio1PtrOutputWithContext(ctx context.Context) WtpprofileRadio1PtrOutput {
	return o
}

func (o WtpprofileRadio1PtrOutput) Elem() WtpprofileRadio1Output {
	return o.ApplyT(func(v *WtpprofileRadio1) WtpprofileRadio1 {
		if v != nil {
			return *v
		}
		var ret WtpprofileRadio1
		return ret
	}).(WtpprofileRadio1Output)
}

// Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) AirtimeFairness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.AirtimeFairness
	}).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) Amsdu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.Amsdu
	}).(pulumi.StringPtrOutput)
}

// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) ApHandoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.ApHandoff
	}).(pulumi.StringPtrOutput)
}

// MAC address to monitor.
func (o WtpprofileRadio1PtrOutput) ApSnifferAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferAddr
	}).(pulumi.StringPtrOutput)
}

// Sniffer buffer size (1 - 32 MB, default = 16).
func (o WtpprofileRadio1PtrOutput) ApSnifferBufsize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.ApSnifferBufsize
	}).(pulumi.IntPtrOutput)
}

// Channel on which to operate the sniffer (default = 6).
func (o WtpprofileRadio1PtrOutput) ApSnifferChan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.ApSnifferChan
	}).(pulumi.IntPtrOutput)
}

// Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) ApSnifferCtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferCtl
	}).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) ApSnifferData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferData
	}).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) ApSnifferMgmtBeacon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferMgmtBeacon
	}).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) ApSnifferMgmtOther() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferMgmtOther
	}).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) ApSnifferMgmtProbe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferMgmtProbe
	}).(pulumi.StringPtrOutput)
}

// Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
func (o WtpprofileRadio1PtrOutput) ArrpProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.ArrpProfile
	}).(pulumi.StringPtrOutput)
}

// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpprofileRadio1PtrOutput) AutoPowerHigh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.AutoPowerHigh
	}).(pulumi.IntPtrOutput)
}

// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) AutoPowerLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.AutoPowerLevel
	}).(pulumi.StringPtrOutput)
}

// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpprofileRadio1PtrOutput) AutoPowerLow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.AutoPowerLow
	}).(pulumi.IntPtrOutput)
}

// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
func (o WtpprofileRadio1PtrOutput) AutoPowerTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.AutoPowerTarget
	}).(pulumi.StringPtrOutput)
}

// WiFi band that Radio 3 operates on.
func (o WtpprofileRadio1PtrOutput) Band() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.Band
	}).(pulumi.StringPtrOutput)
}

// WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
func (o WtpprofileRadio1PtrOutput) Band5gType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.Band5gType
	}).(pulumi.StringPtrOutput)
}

// Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) BandwidthAdmissionControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.BandwidthAdmissionControl
	}).(pulumi.StringPtrOutput)
}

// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
func (o WtpprofileRadio1PtrOutput) BandwidthCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.BandwidthCapacity
	}).(pulumi.IntPtrOutput)
}

// Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
func (o WtpprofileRadio1PtrOutput) BeaconInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.BeaconInterval
	}).(pulumi.IntPtrOutput)
}

// BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
func (o WtpprofileRadio1PtrOutput) BssColor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.BssColor
	}).(pulumi.IntPtrOutput)
}

// BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
func (o WtpprofileRadio1PtrOutput) BssColorMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.BssColorMode
	}).(pulumi.StringPtrOutput)
}

// Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) CallAdmissionControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.CallAdmissionControl
	}).(pulumi.StringPtrOutput)
}

// Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
func (o WtpprofileRadio1PtrOutput) CallCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.CallCapacity
	}).(pulumi.IntPtrOutput)
}

// Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
func (o WtpprofileRadio1PtrOutput) ChannelBonding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.ChannelBonding
	}).(pulumi.StringPtrOutput)
}

// Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) ChannelUtilization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.ChannelUtilization
	}).(pulumi.StringPtrOutput)
}

// Selected list of wireless radio channels. The structure of `channel` block is documented below.
func (o WtpprofileRadio1PtrOutput) Channels() WtpprofileRadio1ChannelArrayOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) []WtpprofileRadio1Channel {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(WtpprofileRadio1ChannelArrayOutput)
}

// Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) Coexistence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.Coexistence
	}).(pulumi.StringPtrOutput)
}

// Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) Darrp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.Darrp
	}).(pulumi.StringPtrOutput)
}

// Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
func (o WtpprofileRadio1PtrOutput) Drma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.Drma
	}).(pulumi.StringPtrOutput)
}

// Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
func (o WtpprofileRadio1PtrOutput) DrmaSensitivity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.DrmaSensitivity
	}).(pulumi.StringPtrOutput)
}

// Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
func (o WtpprofileRadio1PtrOutput) Dtim() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.Dtim
	}).(pulumi.IntPtrOutput)
}

// Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
func (o WtpprofileRadio1PtrOutput) FragThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.FragThreshold
	}).(pulumi.IntPtrOutput)
}

// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) FrequencyHandoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.FrequencyHandoff
	}).(pulumi.StringPtrOutput)
}

// Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
func (o WtpprofileRadio1PtrOutput) IperfProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.IperfProtocol
	}).(pulumi.StringPtrOutput)
}

// Iperf service port number.
func (o WtpprofileRadio1PtrOutput) IperfServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.IperfServerPort
	}).(pulumi.IntPtrOutput)
}

// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
func (o WtpprofileRadio1PtrOutput) MaxClients() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.MaxClients
	}).(pulumi.IntPtrOutput)
}

// Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
func (o WtpprofileRadio1PtrOutput) MaxDistance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.MaxDistance
	}).(pulumi.IntPtrOutput)
}

// Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
func (o WtpprofileRadio1PtrOutput) MimoMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.MimoMode
	}).(pulumi.StringPtrOutput)
}

// Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
func (o WtpprofileRadio1PtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) N80211d() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.N80211d
	}).(pulumi.StringPtrOutput)
}

// Optional antenna used on FAP (default = none).
func (o WtpprofileRadio1PtrOutput) OptionalAntenna() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.OptionalAntenna
	}).(pulumi.StringPtrOutput)
}

// Optional antenna gain in dBi (0 to 20, default = 0).
func (o WtpprofileRadio1PtrOutput) OptionalAntennaGain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.OptionalAntennaGain
	}).(pulumi.StringPtrOutput)
}

// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
func (o WtpprofileRadio1PtrOutput) PowerLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.PowerLevel
	}).(pulumi.IntPtrOutput)
}

// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
func (o WtpprofileRadio1PtrOutput) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.PowerMode
	}).(pulumi.StringPtrOutput)
}

// Radio EIRP power in dBm (1 - 33, default = 27).
func (o WtpprofileRadio1PtrOutput) PowerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.PowerValue
	}).(pulumi.IntPtrOutput)
}

// Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
func (o WtpprofileRadio1PtrOutput) PowersaveOptimize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.PowersaveOptimize
	}).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
func (o WtpprofileRadio1PtrOutput) ProtectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionMode
	}).(pulumi.StringPtrOutput)
}

// radio-id
func (o WtpprofileRadio1PtrOutput) RadioId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.RadioId
	}).(pulumi.IntPtrOutput)
}

// Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
func (o WtpprofileRadio1PtrOutput) RtsThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.RtsThreshold
	}).(pulumi.IntPtrOutput)
}

// BSSID for WiFi network.
func (o WtpprofileRadio1PtrOutput) SamBssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamBssid
	}).(pulumi.StringPtrOutput)
}

// CA certificate for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio1PtrOutput) SamCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamCaCertificate
	}).(pulumi.StringPtrOutput)
}

// Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) SamCaptivePortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamCaptivePortal
	}).(pulumi.StringPtrOutput)
}

// Client certificate for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio1PtrOutput) SamClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamClientCertificate
	}).(pulumi.StringPtrOutput)
}

// Failure identification on the page after an incorrect login.
func (o WtpprofileRadio1PtrOutput) SamCwpFailureString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpFailureString
	}).(pulumi.StringPtrOutput)
}

// Identification string from the captive portal login form.
func (o WtpprofileRadio1PtrOutput) SamCwpMatchString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpMatchString
	}).(pulumi.StringPtrOutput)
}

// Password for captive portal authentication.
func (o WtpprofileRadio1PtrOutput) SamCwpPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpPassword
	}).(pulumi.StringPtrOutput)
}

// Success identification on the page after a successful login.
func (o WtpprofileRadio1PtrOutput) SamCwpSuccessString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpSuccessString
	}).(pulumi.StringPtrOutput)
}

// Website the client is trying to access.
func (o WtpprofileRadio1PtrOutput) SamCwpTestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpTestUrl
	}).(pulumi.StringPtrOutput)
}

// Username for captive portal authentication.
func (o WtpprofileRadio1PtrOutput) SamCwpUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpUsername
	}).(pulumi.StringPtrOutput)
}

// Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
func (o WtpprofileRadio1PtrOutput) SamEapMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamEapMethod
	}).(pulumi.StringPtrOutput)
}

// Passphrase for WiFi network connection.
func (o WtpprofileRadio1PtrOutput) SamPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamPassword
	}).(pulumi.StringPtrOutput)
}

// Private key for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio1PtrOutput) SamPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamPrivateKey
	}).(pulumi.StringPtrOutput)
}

// Password for private key file for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio1PtrOutput) SamPrivateKeyPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamPrivateKeyPassword
	}).(pulumi.StringPtrOutput)
}

// SAM report interval (sec), 0 for a one-time report.
func (o WtpprofileRadio1PtrOutput) SamReportIntv() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *int {
		if v == nil {
			return nil
		}
		return v.SamReportIntv
	}).(pulumi.IntPtrOutput)
}

// Select WiFi network security type (default = "wpa-personal").
func (o WtpprofileRadio1PtrOutput) SamSecurityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamSecurityType
	}).(pulumi.StringPtrOutput)
}

// SAM test server domain name.
func (o WtpprofileRadio1PtrOutput) SamServerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamServerFqdn
	}).(pulumi.StringPtrOutput)
}

// SAM test server IP address.
func (o WtpprofileRadio1PtrOutput) SamServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamServerIp
	}).(pulumi.StringPtrOutput)
}

// Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
func (o WtpprofileRadio1PtrOutput) SamServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamServerType
	}).(pulumi.StringPtrOutput)
}

// SSID for WiFi network.
func (o WtpprofileRadio1PtrOutput) SamSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamSsid
	}).(pulumi.StringPtrOutput)
}

// Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
func (o WtpprofileRadio1PtrOutput) SamTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamTest
	}).(pulumi.StringPtrOutput)
}

// Username for WiFi network connection.
func (o WtpprofileRadio1PtrOutput) SamUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SamUsername
	}).(pulumi.StringPtrOutput)
}

// Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) ShortGuardInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.ShortGuardInterval
	}).(pulumi.StringPtrOutput)
}

// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
func (o WtpprofileRadio1PtrOutput) SpectrumAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.SpectrumAnalysis
	}).(pulumi.StringPtrOutput)
}

// Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
func (o WtpprofileRadio1PtrOutput) TransmitOptimize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.TransmitOptimize
	}).(pulumi.StringPtrOutput)
}

// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
func (o WtpprofileRadio1PtrOutput) VapAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.VapAll
	}).(pulumi.StringPtrOutput)
}

// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
func (o WtpprofileRadio1PtrOutput) Vaps() WtpprofileRadio1VapArrayOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) []WtpprofileRadio1Vap {
		if v == nil {
			return nil
		}
		return v.Vaps
	}).(WtpprofileRadio1VapArrayOutput)
}

// Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
func (o WtpprofileRadio1PtrOutput) WidsProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.WidsProfile
	}).(pulumi.StringPtrOutput)
}

// Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio1PtrOutput) ZeroWaitDfs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio1) *string {
		if v == nil {
			return nil
		}
		return v.ZeroWaitDfs
	}).(pulumi.StringPtrOutput)
}

type WtpprofileRadio1Channel struct {
	// Channel number.
	Chan *string `pulumi:"chan"`
}

// WtpprofileRadio1ChannelInput is an input type that accepts WtpprofileRadio1ChannelArgs and WtpprofileRadio1ChannelOutput values.
// You can construct a concrete instance of `WtpprofileRadio1ChannelInput` via:
//
//	WtpprofileRadio1ChannelArgs{...}
type WtpprofileRadio1ChannelInput interface {
	pulumi.Input

	ToWtpprofileRadio1ChannelOutput() WtpprofileRadio1ChannelOutput
	ToWtpprofileRadio1ChannelOutputWithContext(context.Context) WtpprofileRadio1ChannelOutput
}

type WtpprofileRadio1ChannelArgs struct {
	// Channel number.
	Chan pulumi.StringPtrInput `pulumi:"chan"`
}

func (WtpprofileRadio1ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio1Channel)(nil)).Elem()
}

func (i WtpprofileRadio1ChannelArgs) ToWtpprofileRadio1ChannelOutput() WtpprofileRadio1ChannelOutput {
	return i.ToWtpprofileRadio1ChannelOutputWithContext(context.Background())
}

func (i WtpprofileRadio1ChannelArgs) ToWtpprofileRadio1ChannelOutputWithContext(ctx context.Context) WtpprofileRadio1ChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio1ChannelOutput)
}

// WtpprofileRadio1ChannelArrayInput is an input type that accepts WtpprofileRadio1ChannelArray and WtpprofileRadio1ChannelArrayOutput values.
// You can construct a concrete instance of `WtpprofileRadio1ChannelArrayInput` via:
//
//	WtpprofileRadio1ChannelArray{ WtpprofileRadio1ChannelArgs{...} }
type WtpprofileRadio1ChannelArrayInput interface {
	pulumi.Input

	ToWtpprofileRadio1ChannelArrayOutput() WtpprofileRadio1ChannelArrayOutput
	ToWtpprofileRadio1ChannelArrayOutputWithContext(context.Context) WtpprofileRadio1ChannelArrayOutput
}

type WtpprofileRadio1ChannelArray []WtpprofileRadio1ChannelInput

func (WtpprofileRadio1ChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileRadio1Channel)(nil)).Elem()
}

func (i WtpprofileRadio1ChannelArray) ToWtpprofileRadio1ChannelArrayOutput() WtpprofileRadio1ChannelArrayOutput {
	return i.ToWtpprofileRadio1ChannelArrayOutputWithContext(context.Background())
}

func (i WtpprofileRadio1ChannelArray) ToWtpprofileRadio1ChannelArrayOutputWithContext(ctx context.Context) WtpprofileRadio1ChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio1ChannelArrayOutput)
}

type WtpprofileRadio1ChannelOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio1ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio1Channel)(nil)).Elem()
}

func (o WtpprofileRadio1ChannelOutput) ToWtpprofileRadio1ChannelOutput() WtpprofileRadio1ChannelOutput {
	return o
}

func (o WtpprofileRadio1ChannelOutput) ToWtpprofileRadio1ChannelOutputWithContext(ctx context.Context) WtpprofileRadio1ChannelOutput {
	return o
}

// Channel number.
func (o WtpprofileRadio1ChannelOutput) Chan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1Channel) *string { return v.Chan }).(pulumi.StringPtrOutput)
}

type WtpprofileRadio1ChannelArrayOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio1ChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileRadio1Channel)(nil)).Elem()
}

func (o WtpprofileRadio1ChannelArrayOutput) ToWtpprofileRadio1ChannelArrayOutput() WtpprofileRadio1ChannelArrayOutput {
	return o
}

func (o WtpprofileRadio1ChannelArrayOutput) ToWtpprofileRadio1ChannelArrayOutputWithContext(ctx context.Context) WtpprofileRadio1ChannelArrayOutput {
	return o
}

func (o WtpprofileRadio1ChannelArrayOutput) Index(i pulumi.IntInput) WtpprofileRadio1ChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpprofileRadio1Channel {
		return vs[0].([]WtpprofileRadio1Channel)[vs[1].(int)]
	}).(WtpprofileRadio1ChannelOutput)
}

type WtpprofileRadio1Vap struct {
	// Virtual Access Point (VAP) name.
	Name *string `pulumi:"name"`
}

// WtpprofileRadio1VapInput is an input type that accepts WtpprofileRadio1VapArgs and WtpprofileRadio1VapOutput values.
// You can construct a concrete instance of `WtpprofileRadio1VapInput` via:
//
//	WtpprofileRadio1VapArgs{...}
type WtpprofileRadio1VapInput interface {
	pulumi.Input

	ToWtpprofileRadio1VapOutput() WtpprofileRadio1VapOutput
	ToWtpprofileRadio1VapOutputWithContext(context.Context) WtpprofileRadio1VapOutput
}

type WtpprofileRadio1VapArgs struct {
	// Virtual Access Point (VAP) name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (WtpprofileRadio1VapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio1Vap)(nil)).Elem()
}

func (i WtpprofileRadio1VapArgs) ToWtpprofileRadio1VapOutput() WtpprofileRadio1VapOutput {
	return i.ToWtpprofileRadio1VapOutputWithContext(context.Background())
}

func (i WtpprofileRadio1VapArgs) ToWtpprofileRadio1VapOutputWithContext(ctx context.Context) WtpprofileRadio1VapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio1VapOutput)
}

// WtpprofileRadio1VapArrayInput is an input type that accepts WtpprofileRadio1VapArray and WtpprofileRadio1VapArrayOutput values.
// You can construct a concrete instance of `WtpprofileRadio1VapArrayInput` via:
//
//	WtpprofileRadio1VapArray{ WtpprofileRadio1VapArgs{...} }
type WtpprofileRadio1VapArrayInput interface {
	pulumi.Input

	ToWtpprofileRadio1VapArrayOutput() WtpprofileRadio1VapArrayOutput
	ToWtpprofileRadio1VapArrayOutputWithContext(context.Context) WtpprofileRadio1VapArrayOutput
}

type WtpprofileRadio1VapArray []WtpprofileRadio1VapInput

func (WtpprofileRadio1VapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileRadio1Vap)(nil)).Elem()
}

func (i WtpprofileRadio1VapArray) ToWtpprofileRadio1VapArrayOutput() WtpprofileRadio1VapArrayOutput {
	return i.ToWtpprofileRadio1VapArrayOutputWithContext(context.Background())
}

func (i WtpprofileRadio1VapArray) ToWtpprofileRadio1VapArrayOutputWithContext(ctx context.Context) WtpprofileRadio1VapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio1VapArrayOutput)
}

type WtpprofileRadio1VapOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio1VapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio1Vap)(nil)).Elem()
}

func (o WtpprofileRadio1VapOutput) ToWtpprofileRadio1VapOutput() WtpprofileRadio1VapOutput {
	return o
}

func (o WtpprofileRadio1VapOutput) ToWtpprofileRadio1VapOutputWithContext(ctx context.Context) WtpprofileRadio1VapOutput {
	return o
}

// Virtual Access Point (VAP) name.
func (o WtpprofileRadio1VapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio1Vap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type WtpprofileRadio1VapArrayOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio1VapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileRadio1Vap)(nil)).Elem()
}

func (o WtpprofileRadio1VapArrayOutput) ToWtpprofileRadio1VapArrayOutput() WtpprofileRadio1VapArrayOutput {
	return o
}

func (o WtpprofileRadio1VapArrayOutput) ToWtpprofileRadio1VapArrayOutputWithContext(ctx context.Context) WtpprofileRadio1VapArrayOutput {
	return o
}

func (o WtpprofileRadio1VapArrayOutput) Index(i pulumi.IntInput) WtpprofileRadio1VapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpprofileRadio1Vap {
		return vs[0].([]WtpprofileRadio1Vap)[vs[1].(int)]
	}).(WtpprofileRadio1VapOutput)
}

type WtpprofileRadio2 struct {
	// Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
	AirtimeFairness *string `pulumi:"airtimeFairness"`
	// Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
	Amsdu *string `pulumi:"amsdu"`
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff *string `pulumi:"apHandoff"`
	// MAC address to monitor.
	ApSnifferAddr *string `pulumi:"apSnifferAddr"`
	// Sniffer buffer size (1 - 32 MB, default = 16).
	ApSnifferBufsize *int `pulumi:"apSnifferBufsize"`
	// Channel on which to operate the sniffer (default = 6).
	ApSnifferChan *int `pulumi:"apSnifferChan"`
	// Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
	ApSnifferCtl *string `pulumi:"apSnifferCtl"`
	// Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
	ApSnifferData *string `pulumi:"apSnifferData"`
	// Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtBeacon *string `pulumi:"apSnifferMgmtBeacon"`
	// Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtOther *string `pulumi:"apSnifferMgmtOther"`
	// Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtProbe *string `pulumi:"apSnifferMgmtProbe"`
	// Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
	ArrpProfile *string `pulumi:"arrpProfile"`
	// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerHigh *int `pulumi:"autoPowerHigh"`
	// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
	AutoPowerLevel *string `pulumi:"autoPowerLevel"`
	// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerLow *int `pulumi:"autoPowerLow"`
	// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
	AutoPowerTarget *string `pulumi:"autoPowerTarget"`
	// WiFi band that Radio 3 operates on.
	Band *string `pulumi:"band"`
	// WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
	Band5gType *string `pulumi:"band5gType"`
	// Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
	BandwidthAdmissionControl *string `pulumi:"bandwidthAdmissionControl"`
	// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
	BandwidthCapacity *int `pulumi:"bandwidthCapacity"`
	// Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
	BeaconInterval *int `pulumi:"beaconInterval"`
	// BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
	BssColor *int `pulumi:"bssColor"`
	// BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
	BssColorMode *string `pulumi:"bssColorMode"`
	// Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
	CallAdmissionControl *string `pulumi:"callAdmissionControl"`
	// Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
	CallCapacity *int `pulumi:"callCapacity"`
	// Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
	ChannelBonding *string `pulumi:"channelBonding"`
	// Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
	ChannelUtilization *string `pulumi:"channelUtilization"`
	// Selected list of wireless radio channels. The structure of `channel` block is documented below.
	Channels []WtpprofileRadio2Channel `pulumi:"channels"`
	// Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
	Coexistence *string `pulumi:"coexistence"`
	// Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
	Darrp *string `pulumi:"darrp"`
	// Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
	Drma *string `pulumi:"drma"`
	// Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
	DrmaSensitivity *string `pulumi:"drmaSensitivity"`
	// Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
	Dtim *int `pulumi:"dtim"`
	// Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
	FragThreshold *int `pulumi:"fragThreshold"`
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff *string `pulumi:"frequencyHandoff"`
	// Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
	IperfProtocol *string `pulumi:"iperfProtocol"`
	// Iperf service port number.
	IperfServerPort *int `pulumi:"iperfServerPort"`
	// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
	MaxClients *int `pulumi:"maxClients"`
	// Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
	MaxDistance *int `pulumi:"maxDistance"`
	// Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
	MimoMode *string `pulumi:"mimoMode"`
	// Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
	Mode *string `pulumi:"mode"`
	// Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
	N80211d *string `pulumi:"n80211d"`
	// Optional antenna used on FAP (default = none).
	OptionalAntenna *string `pulumi:"optionalAntenna"`
	// Optional antenna gain in dBi (0 to 20, default = 0).
	OptionalAntennaGain *string `pulumi:"optionalAntennaGain"`
	// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
	PowerLevel *int `pulumi:"powerLevel"`
	// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
	PowerMode *string `pulumi:"powerMode"`
	// Radio EIRP power in dBm (1 - 33, default = 27).
	PowerValue *int `pulumi:"powerValue"`
	// Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
	PowersaveOptimize *string `pulumi:"powersaveOptimize"`
	// Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
	ProtectionMode *string `pulumi:"protectionMode"`
	// radio-id
	RadioId *int `pulumi:"radioId"`
	// Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
	RtsThreshold *int `pulumi:"rtsThreshold"`
	// BSSID for WiFi network.
	SamBssid *string `pulumi:"samBssid"`
	// CA certificate for WPA2/WPA3-ENTERPRISE.
	SamCaCertificate *string `pulumi:"samCaCertificate"`
	// Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
	SamCaptivePortal *string `pulumi:"samCaptivePortal"`
	// Client certificate for WPA2/WPA3-ENTERPRISE.
	SamClientCertificate *string `pulumi:"samClientCertificate"`
	// Failure identification on the page after an incorrect login.
	SamCwpFailureString *string `pulumi:"samCwpFailureString"`
	// Identification string from the captive portal login form.
	SamCwpMatchString *string `pulumi:"samCwpMatchString"`
	// Password for captive portal authentication.
	SamCwpPassword *string `pulumi:"samCwpPassword"`
	// Success identification on the page after a successful login.
	SamCwpSuccessString *string `pulumi:"samCwpSuccessString"`
	// Website the client is trying to access.
	SamCwpTestUrl *string `pulumi:"samCwpTestUrl"`
	// Username for captive portal authentication.
	SamCwpUsername *string `pulumi:"samCwpUsername"`
	// Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
	SamEapMethod *string `pulumi:"samEapMethod"`
	// Passphrase for WiFi network connection.
	SamPassword *string `pulumi:"samPassword"`
	// Private key for WPA2/WPA3-ENTERPRISE.
	SamPrivateKey *string `pulumi:"samPrivateKey"`
	// Password for private key file for WPA2/WPA3-ENTERPRISE.
	SamPrivateKeyPassword *string `pulumi:"samPrivateKeyPassword"`
	// SAM report interval (sec), 0 for a one-time report.
	SamReportIntv *int `pulumi:"samReportIntv"`
	// Select WiFi network security type (default = "wpa-personal").
	SamSecurityType *string `pulumi:"samSecurityType"`
	// SAM test server domain name.
	SamServerFqdn *string `pulumi:"samServerFqdn"`
	// SAM test server IP address.
	SamServerIp *string `pulumi:"samServerIp"`
	// Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
	SamServerType *string `pulumi:"samServerType"`
	// SSID for WiFi network.
	SamSsid *string `pulumi:"samSsid"`
	// Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
	SamTest *string `pulumi:"samTest"`
	// Username for WiFi network connection.
	SamUsername *string `pulumi:"samUsername"`
	// Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
	ShortGuardInterval *string `pulumi:"shortGuardInterval"`
	// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
	SpectrumAnalysis *string `pulumi:"spectrumAnalysis"`
	// Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
	TransmitOptimize *string `pulumi:"transmitOptimize"`
	// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
	VapAll *string `pulumi:"vapAll"`
	// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
	Vaps []WtpprofileRadio2Vap `pulumi:"vaps"`
	// Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
	WidsProfile *string `pulumi:"widsProfile"`
	// Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
	ZeroWaitDfs *string `pulumi:"zeroWaitDfs"`
}

// WtpprofileRadio2Input is an input type that accepts WtpprofileRadio2Args and WtpprofileRadio2Output values.
// You can construct a concrete instance of `WtpprofileRadio2Input` via:
//
//	WtpprofileRadio2Args{...}
type WtpprofileRadio2Input interface {
	pulumi.Input

	ToWtpprofileRadio2Output() WtpprofileRadio2Output
	ToWtpprofileRadio2OutputWithContext(context.Context) WtpprofileRadio2Output
}

type WtpprofileRadio2Args struct {
	// Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
	AirtimeFairness pulumi.StringPtrInput `pulumi:"airtimeFairness"`
	// Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
	Amsdu pulumi.StringPtrInput `pulumi:"amsdu"`
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff pulumi.StringPtrInput `pulumi:"apHandoff"`
	// MAC address to monitor.
	ApSnifferAddr pulumi.StringPtrInput `pulumi:"apSnifferAddr"`
	// Sniffer buffer size (1 - 32 MB, default = 16).
	ApSnifferBufsize pulumi.IntPtrInput `pulumi:"apSnifferBufsize"`
	// Channel on which to operate the sniffer (default = 6).
	ApSnifferChan pulumi.IntPtrInput `pulumi:"apSnifferChan"`
	// Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
	ApSnifferCtl pulumi.StringPtrInput `pulumi:"apSnifferCtl"`
	// Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
	ApSnifferData pulumi.StringPtrInput `pulumi:"apSnifferData"`
	// Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtBeacon pulumi.StringPtrInput `pulumi:"apSnifferMgmtBeacon"`
	// Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtOther pulumi.StringPtrInput `pulumi:"apSnifferMgmtOther"`
	// Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtProbe pulumi.StringPtrInput `pulumi:"apSnifferMgmtProbe"`
	// Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
	ArrpProfile pulumi.StringPtrInput `pulumi:"arrpProfile"`
	// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerHigh pulumi.IntPtrInput `pulumi:"autoPowerHigh"`
	// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
	AutoPowerLevel pulumi.StringPtrInput `pulumi:"autoPowerLevel"`
	// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerLow pulumi.IntPtrInput `pulumi:"autoPowerLow"`
	// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
	AutoPowerTarget pulumi.StringPtrInput `pulumi:"autoPowerTarget"`
	// WiFi band that Radio 3 operates on.
	Band pulumi.StringPtrInput `pulumi:"band"`
	// WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
	Band5gType pulumi.StringPtrInput `pulumi:"band5gType"`
	// Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
	BandwidthAdmissionControl pulumi.StringPtrInput `pulumi:"bandwidthAdmissionControl"`
	// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
	BandwidthCapacity pulumi.IntPtrInput `pulumi:"bandwidthCapacity"`
	// Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
	BeaconInterval pulumi.IntPtrInput `pulumi:"beaconInterval"`
	// BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
	BssColor pulumi.IntPtrInput `pulumi:"bssColor"`
	// BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
	BssColorMode pulumi.StringPtrInput `pulumi:"bssColorMode"`
	// Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
	CallAdmissionControl pulumi.StringPtrInput `pulumi:"callAdmissionControl"`
	// Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
	CallCapacity pulumi.IntPtrInput `pulumi:"callCapacity"`
	// Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
	ChannelBonding pulumi.StringPtrInput `pulumi:"channelBonding"`
	// Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
	ChannelUtilization pulumi.StringPtrInput `pulumi:"channelUtilization"`
	// Selected list of wireless radio channels. The structure of `channel` block is documented below.
	Channels WtpprofileRadio2ChannelArrayInput `pulumi:"channels"`
	// Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
	Coexistence pulumi.StringPtrInput `pulumi:"coexistence"`
	// Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
	Darrp pulumi.StringPtrInput `pulumi:"darrp"`
	// Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
	Drma pulumi.StringPtrInput `pulumi:"drma"`
	// Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
	DrmaSensitivity pulumi.StringPtrInput `pulumi:"drmaSensitivity"`
	// Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
	Dtim pulumi.IntPtrInput `pulumi:"dtim"`
	// Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
	FragThreshold pulumi.IntPtrInput `pulumi:"fragThreshold"`
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff pulumi.StringPtrInput `pulumi:"frequencyHandoff"`
	// Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
	IperfProtocol pulumi.StringPtrInput `pulumi:"iperfProtocol"`
	// Iperf service port number.
	IperfServerPort pulumi.IntPtrInput `pulumi:"iperfServerPort"`
	// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
	MaxClients pulumi.IntPtrInput `pulumi:"maxClients"`
	// Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
	MaxDistance pulumi.IntPtrInput `pulumi:"maxDistance"`
	// Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
	MimoMode pulumi.StringPtrInput `pulumi:"mimoMode"`
	// Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
	N80211d pulumi.StringPtrInput `pulumi:"n80211d"`
	// Optional antenna used on FAP (default = none).
	OptionalAntenna pulumi.StringPtrInput `pulumi:"optionalAntenna"`
	// Optional antenna gain in dBi (0 to 20, default = 0).
	OptionalAntennaGain pulumi.StringPtrInput `pulumi:"optionalAntennaGain"`
	// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
	PowerLevel pulumi.IntPtrInput `pulumi:"powerLevel"`
	// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
	PowerMode pulumi.StringPtrInput `pulumi:"powerMode"`
	// Radio EIRP power in dBm (1 - 33, default = 27).
	PowerValue pulumi.IntPtrInput `pulumi:"powerValue"`
	// Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
	PowersaveOptimize pulumi.StringPtrInput `pulumi:"powersaveOptimize"`
	// Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
	ProtectionMode pulumi.StringPtrInput `pulumi:"protectionMode"`
	// radio-id
	RadioId pulumi.IntPtrInput `pulumi:"radioId"`
	// Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
	RtsThreshold pulumi.IntPtrInput `pulumi:"rtsThreshold"`
	// BSSID for WiFi network.
	SamBssid pulumi.StringPtrInput `pulumi:"samBssid"`
	// CA certificate for WPA2/WPA3-ENTERPRISE.
	SamCaCertificate pulumi.StringPtrInput `pulumi:"samCaCertificate"`
	// Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
	SamCaptivePortal pulumi.StringPtrInput `pulumi:"samCaptivePortal"`
	// Client certificate for WPA2/WPA3-ENTERPRISE.
	SamClientCertificate pulumi.StringPtrInput `pulumi:"samClientCertificate"`
	// Failure identification on the page after an incorrect login.
	SamCwpFailureString pulumi.StringPtrInput `pulumi:"samCwpFailureString"`
	// Identification string from the captive portal login form.
	SamCwpMatchString pulumi.StringPtrInput `pulumi:"samCwpMatchString"`
	// Password for captive portal authentication.
	SamCwpPassword pulumi.StringPtrInput `pulumi:"samCwpPassword"`
	// Success identification on the page after a successful login.
	SamCwpSuccessString pulumi.StringPtrInput `pulumi:"samCwpSuccessString"`
	// Website the client is trying to access.
	SamCwpTestUrl pulumi.StringPtrInput `pulumi:"samCwpTestUrl"`
	// Username for captive portal authentication.
	SamCwpUsername pulumi.StringPtrInput `pulumi:"samCwpUsername"`
	// Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
	SamEapMethod pulumi.StringPtrInput `pulumi:"samEapMethod"`
	// Passphrase for WiFi network connection.
	SamPassword pulumi.StringPtrInput `pulumi:"samPassword"`
	// Private key for WPA2/WPA3-ENTERPRISE.
	SamPrivateKey pulumi.StringPtrInput `pulumi:"samPrivateKey"`
	// Password for private key file for WPA2/WPA3-ENTERPRISE.
	SamPrivateKeyPassword pulumi.StringPtrInput `pulumi:"samPrivateKeyPassword"`
	// SAM report interval (sec), 0 for a one-time report.
	SamReportIntv pulumi.IntPtrInput `pulumi:"samReportIntv"`
	// Select WiFi network security type (default = "wpa-personal").
	SamSecurityType pulumi.StringPtrInput `pulumi:"samSecurityType"`
	// SAM test server domain name.
	SamServerFqdn pulumi.StringPtrInput `pulumi:"samServerFqdn"`
	// SAM test server IP address.
	SamServerIp pulumi.StringPtrInput `pulumi:"samServerIp"`
	// Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
	SamServerType pulumi.StringPtrInput `pulumi:"samServerType"`
	// SSID for WiFi network.
	SamSsid pulumi.StringPtrInput `pulumi:"samSsid"`
	// Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
	SamTest pulumi.StringPtrInput `pulumi:"samTest"`
	// Username for WiFi network connection.
	SamUsername pulumi.StringPtrInput `pulumi:"samUsername"`
	// Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
	ShortGuardInterval pulumi.StringPtrInput `pulumi:"shortGuardInterval"`
	// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
	SpectrumAnalysis pulumi.StringPtrInput `pulumi:"spectrumAnalysis"`
	// Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
	TransmitOptimize pulumi.StringPtrInput `pulumi:"transmitOptimize"`
	// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
	VapAll pulumi.StringPtrInput `pulumi:"vapAll"`
	// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
	Vaps WtpprofileRadio2VapArrayInput `pulumi:"vaps"`
	// Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
	WidsProfile pulumi.StringPtrInput `pulumi:"widsProfile"`
	// Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
	ZeroWaitDfs pulumi.StringPtrInput `pulumi:"zeroWaitDfs"`
}

func (WtpprofileRadio2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio2)(nil)).Elem()
}

func (i WtpprofileRadio2Args) ToWtpprofileRadio2Output() WtpprofileRadio2Output {
	return i.ToWtpprofileRadio2OutputWithContext(context.Background())
}

func (i WtpprofileRadio2Args) ToWtpprofileRadio2OutputWithContext(ctx context.Context) WtpprofileRadio2Output {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio2Output)
}

func (i WtpprofileRadio2Args) ToWtpprofileRadio2PtrOutput() WtpprofileRadio2PtrOutput {
	return i.ToWtpprofileRadio2PtrOutputWithContext(context.Background())
}

func (i WtpprofileRadio2Args) ToWtpprofileRadio2PtrOutputWithContext(ctx context.Context) WtpprofileRadio2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio2Output).ToWtpprofileRadio2PtrOutputWithContext(ctx)
}

// WtpprofileRadio2PtrInput is an input type that accepts WtpprofileRadio2Args, WtpprofileRadio2Ptr and WtpprofileRadio2PtrOutput values.
// You can construct a concrete instance of `WtpprofileRadio2PtrInput` via:
//
//	        WtpprofileRadio2Args{...}
//
//	or:
//
//	        nil
type WtpprofileRadio2PtrInput interface {
	pulumi.Input

	ToWtpprofileRadio2PtrOutput() WtpprofileRadio2PtrOutput
	ToWtpprofileRadio2PtrOutputWithContext(context.Context) WtpprofileRadio2PtrOutput
}

type wtpprofileRadio2PtrType WtpprofileRadio2Args

func WtpprofileRadio2Ptr(v *WtpprofileRadio2Args) WtpprofileRadio2PtrInput {
	return (*wtpprofileRadio2PtrType)(v)
}

func (*wtpprofileRadio2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpprofileRadio2)(nil)).Elem()
}

func (i *wtpprofileRadio2PtrType) ToWtpprofileRadio2PtrOutput() WtpprofileRadio2PtrOutput {
	return i.ToWtpprofileRadio2PtrOutputWithContext(context.Background())
}

func (i *wtpprofileRadio2PtrType) ToWtpprofileRadio2PtrOutputWithContext(ctx context.Context) WtpprofileRadio2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio2PtrOutput)
}

type WtpprofileRadio2Output struct{ *pulumi.OutputState }

func (WtpprofileRadio2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio2)(nil)).Elem()
}

func (o WtpprofileRadio2Output) ToWtpprofileRadio2Output() WtpprofileRadio2Output {
	return o
}

func (o WtpprofileRadio2Output) ToWtpprofileRadio2OutputWithContext(ctx context.Context) WtpprofileRadio2Output {
	return o
}

func (o WtpprofileRadio2Output) ToWtpprofileRadio2PtrOutput() WtpprofileRadio2PtrOutput {
	return o.ToWtpprofileRadio2PtrOutputWithContext(context.Background())
}

func (o WtpprofileRadio2Output) ToWtpprofileRadio2PtrOutputWithContext(ctx context.Context) WtpprofileRadio2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WtpprofileRadio2) *WtpprofileRadio2 {
		return &v
	}).(WtpprofileRadio2PtrOutput)
}

// Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) AirtimeFairness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.AirtimeFairness }).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) Amsdu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.Amsdu }).(pulumi.StringPtrOutput)
}

// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) ApHandoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.ApHandoff }).(pulumi.StringPtrOutput)
}

// MAC address to monitor.
func (o WtpprofileRadio2Output) ApSnifferAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.ApSnifferAddr }).(pulumi.StringPtrOutput)
}

// Sniffer buffer size (1 - 32 MB, default = 16).
func (o WtpprofileRadio2Output) ApSnifferBufsize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.ApSnifferBufsize }).(pulumi.IntPtrOutput)
}

// Channel on which to operate the sniffer (default = 6).
func (o WtpprofileRadio2Output) ApSnifferChan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.ApSnifferChan }).(pulumi.IntPtrOutput)
}

// Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) ApSnifferCtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.ApSnifferCtl }).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) ApSnifferData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.ApSnifferData }).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) ApSnifferMgmtBeacon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.ApSnifferMgmtBeacon }).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) ApSnifferMgmtOther() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.ApSnifferMgmtOther }).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) ApSnifferMgmtProbe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.ApSnifferMgmtProbe }).(pulumi.StringPtrOutput)
}

// Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
func (o WtpprofileRadio2Output) ArrpProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.ArrpProfile }).(pulumi.StringPtrOutput)
}

// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpprofileRadio2Output) AutoPowerHigh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.AutoPowerHigh }).(pulumi.IntPtrOutput)
}

// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) AutoPowerLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.AutoPowerLevel }).(pulumi.StringPtrOutput)
}

// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpprofileRadio2Output) AutoPowerLow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.AutoPowerLow }).(pulumi.IntPtrOutput)
}

// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
func (o WtpprofileRadio2Output) AutoPowerTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.AutoPowerTarget }).(pulumi.StringPtrOutput)
}

// WiFi band that Radio 3 operates on.
func (o WtpprofileRadio2Output) Band() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.Band }).(pulumi.StringPtrOutput)
}

// WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
func (o WtpprofileRadio2Output) Band5gType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.Band5gType }).(pulumi.StringPtrOutput)
}

// Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) BandwidthAdmissionControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.BandwidthAdmissionControl }).(pulumi.StringPtrOutput)
}

// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
func (o WtpprofileRadio2Output) BandwidthCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.BandwidthCapacity }).(pulumi.IntPtrOutput)
}

// Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
func (o WtpprofileRadio2Output) BeaconInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.BeaconInterval }).(pulumi.IntPtrOutput)
}

// BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
func (o WtpprofileRadio2Output) BssColor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.BssColor }).(pulumi.IntPtrOutput)
}

// BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
func (o WtpprofileRadio2Output) BssColorMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.BssColorMode }).(pulumi.StringPtrOutput)
}

// Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) CallAdmissionControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.CallAdmissionControl }).(pulumi.StringPtrOutput)
}

// Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
func (o WtpprofileRadio2Output) CallCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.CallCapacity }).(pulumi.IntPtrOutput)
}

// Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
func (o WtpprofileRadio2Output) ChannelBonding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.ChannelBonding }).(pulumi.StringPtrOutput)
}

// Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) ChannelUtilization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.ChannelUtilization }).(pulumi.StringPtrOutput)
}

// Selected list of wireless radio channels. The structure of `channel` block is documented below.
func (o WtpprofileRadio2Output) Channels() WtpprofileRadio2ChannelArrayOutput {
	return o.ApplyT(func(v WtpprofileRadio2) []WtpprofileRadio2Channel { return v.Channels }).(WtpprofileRadio2ChannelArrayOutput)
}

// Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) Coexistence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.Coexistence }).(pulumi.StringPtrOutput)
}

// Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) Darrp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.Darrp }).(pulumi.StringPtrOutput)
}

// Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
func (o WtpprofileRadio2Output) Drma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.Drma }).(pulumi.StringPtrOutput)
}

// Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
func (o WtpprofileRadio2Output) DrmaSensitivity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.DrmaSensitivity }).(pulumi.StringPtrOutput)
}

// Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
func (o WtpprofileRadio2Output) Dtim() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.Dtim }).(pulumi.IntPtrOutput)
}

// Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
func (o WtpprofileRadio2Output) FragThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.FragThreshold }).(pulumi.IntPtrOutput)
}

// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) FrequencyHandoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.FrequencyHandoff }).(pulumi.StringPtrOutput)
}

// Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
func (o WtpprofileRadio2Output) IperfProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.IperfProtocol }).(pulumi.StringPtrOutput)
}

// Iperf service port number.
func (o WtpprofileRadio2Output) IperfServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.IperfServerPort }).(pulumi.IntPtrOutput)
}

// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
func (o WtpprofileRadio2Output) MaxClients() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.MaxClients }).(pulumi.IntPtrOutput)
}

// Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
func (o WtpprofileRadio2Output) MaxDistance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.MaxDistance }).(pulumi.IntPtrOutput)
}

// Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
func (o WtpprofileRadio2Output) MimoMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.MimoMode }).(pulumi.StringPtrOutput)
}

// Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
func (o WtpprofileRadio2Output) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) N80211d() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.N80211d }).(pulumi.StringPtrOutput)
}

// Optional antenna used on FAP (default = none).
func (o WtpprofileRadio2Output) OptionalAntenna() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.OptionalAntenna }).(pulumi.StringPtrOutput)
}

// Optional antenna gain in dBi (0 to 20, default = 0).
func (o WtpprofileRadio2Output) OptionalAntennaGain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.OptionalAntennaGain }).(pulumi.StringPtrOutput)
}

// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
func (o WtpprofileRadio2Output) PowerLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.PowerLevel }).(pulumi.IntPtrOutput)
}

// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
func (o WtpprofileRadio2Output) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.PowerMode }).(pulumi.StringPtrOutput)
}

// Radio EIRP power in dBm (1 - 33, default = 27).
func (o WtpprofileRadio2Output) PowerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.PowerValue }).(pulumi.IntPtrOutput)
}

// Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
func (o WtpprofileRadio2Output) PowersaveOptimize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.PowersaveOptimize }).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
func (o WtpprofileRadio2Output) ProtectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.ProtectionMode }).(pulumi.StringPtrOutput)
}

// radio-id
func (o WtpprofileRadio2Output) RadioId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.RadioId }).(pulumi.IntPtrOutput)
}

// Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
func (o WtpprofileRadio2Output) RtsThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.RtsThreshold }).(pulumi.IntPtrOutput)
}

// BSSID for WiFi network.
func (o WtpprofileRadio2Output) SamBssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamBssid }).(pulumi.StringPtrOutput)
}

// CA certificate for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio2Output) SamCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamCaCertificate }).(pulumi.StringPtrOutput)
}

// Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) SamCaptivePortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamCaptivePortal }).(pulumi.StringPtrOutput)
}

// Client certificate for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio2Output) SamClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamClientCertificate }).(pulumi.StringPtrOutput)
}

// Failure identification on the page after an incorrect login.
func (o WtpprofileRadio2Output) SamCwpFailureString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamCwpFailureString }).(pulumi.StringPtrOutput)
}

// Identification string from the captive portal login form.
func (o WtpprofileRadio2Output) SamCwpMatchString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamCwpMatchString }).(pulumi.StringPtrOutput)
}

// Password for captive portal authentication.
func (o WtpprofileRadio2Output) SamCwpPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamCwpPassword }).(pulumi.StringPtrOutput)
}

// Success identification on the page after a successful login.
func (o WtpprofileRadio2Output) SamCwpSuccessString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamCwpSuccessString }).(pulumi.StringPtrOutput)
}

// Website the client is trying to access.
func (o WtpprofileRadio2Output) SamCwpTestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamCwpTestUrl }).(pulumi.StringPtrOutput)
}

// Username for captive portal authentication.
func (o WtpprofileRadio2Output) SamCwpUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamCwpUsername }).(pulumi.StringPtrOutput)
}

// Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
func (o WtpprofileRadio2Output) SamEapMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamEapMethod }).(pulumi.StringPtrOutput)
}

// Passphrase for WiFi network connection.
func (o WtpprofileRadio2Output) SamPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamPassword }).(pulumi.StringPtrOutput)
}

// Private key for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio2Output) SamPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamPrivateKey }).(pulumi.StringPtrOutput)
}

// Password for private key file for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio2Output) SamPrivateKeyPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamPrivateKeyPassword }).(pulumi.StringPtrOutput)
}

// SAM report interval (sec), 0 for a one-time report.
func (o WtpprofileRadio2Output) SamReportIntv() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *int { return v.SamReportIntv }).(pulumi.IntPtrOutput)
}

// Select WiFi network security type (default = "wpa-personal").
func (o WtpprofileRadio2Output) SamSecurityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamSecurityType }).(pulumi.StringPtrOutput)
}

// SAM test server domain name.
func (o WtpprofileRadio2Output) SamServerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamServerFqdn }).(pulumi.StringPtrOutput)
}

// SAM test server IP address.
func (o WtpprofileRadio2Output) SamServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamServerIp }).(pulumi.StringPtrOutput)
}

// Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
func (o WtpprofileRadio2Output) SamServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamServerType }).(pulumi.StringPtrOutput)
}

// SSID for WiFi network.
func (o WtpprofileRadio2Output) SamSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamSsid }).(pulumi.StringPtrOutput)
}

// Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
func (o WtpprofileRadio2Output) SamTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamTest }).(pulumi.StringPtrOutput)
}

// Username for WiFi network connection.
func (o WtpprofileRadio2Output) SamUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SamUsername }).(pulumi.StringPtrOutput)
}

// Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) ShortGuardInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.ShortGuardInterval }).(pulumi.StringPtrOutput)
}

// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
func (o WtpprofileRadio2Output) SpectrumAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.SpectrumAnalysis }).(pulumi.StringPtrOutput)
}

// Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
func (o WtpprofileRadio2Output) TransmitOptimize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.TransmitOptimize }).(pulumi.StringPtrOutput)
}

// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
func (o WtpprofileRadio2Output) VapAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.VapAll }).(pulumi.StringPtrOutput)
}

// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
func (o WtpprofileRadio2Output) Vaps() WtpprofileRadio2VapArrayOutput {
	return o.ApplyT(func(v WtpprofileRadio2) []WtpprofileRadio2Vap { return v.Vaps }).(WtpprofileRadio2VapArrayOutput)
}

// Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
func (o WtpprofileRadio2Output) WidsProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.WidsProfile }).(pulumi.StringPtrOutput)
}

// Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2Output) ZeroWaitDfs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2) *string { return v.ZeroWaitDfs }).(pulumi.StringPtrOutput)
}

type WtpprofileRadio2PtrOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpprofileRadio2)(nil)).Elem()
}

func (o WtpprofileRadio2PtrOutput) ToWtpprofileRadio2PtrOutput() WtpprofileRadio2PtrOutput {
	return o
}

func (o WtpprofileRadio2PtrOutput) ToWtpprofileRadio2PtrOutputWithContext(ctx context.Context) WtpprofileRadio2PtrOutput {
	return o
}

func (o WtpprofileRadio2PtrOutput) Elem() WtpprofileRadio2Output {
	return o.ApplyT(func(v *WtpprofileRadio2) WtpprofileRadio2 {
		if v != nil {
			return *v
		}
		var ret WtpprofileRadio2
		return ret
	}).(WtpprofileRadio2Output)
}

// Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) AirtimeFairness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.AirtimeFairness
	}).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) Amsdu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.Amsdu
	}).(pulumi.StringPtrOutput)
}

// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) ApHandoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.ApHandoff
	}).(pulumi.StringPtrOutput)
}

// MAC address to monitor.
func (o WtpprofileRadio2PtrOutput) ApSnifferAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferAddr
	}).(pulumi.StringPtrOutput)
}

// Sniffer buffer size (1 - 32 MB, default = 16).
func (o WtpprofileRadio2PtrOutput) ApSnifferBufsize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.ApSnifferBufsize
	}).(pulumi.IntPtrOutput)
}

// Channel on which to operate the sniffer (default = 6).
func (o WtpprofileRadio2PtrOutput) ApSnifferChan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.ApSnifferChan
	}).(pulumi.IntPtrOutput)
}

// Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) ApSnifferCtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferCtl
	}).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) ApSnifferData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferData
	}).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) ApSnifferMgmtBeacon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferMgmtBeacon
	}).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) ApSnifferMgmtOther() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferMgmtOther
	}).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) ApSnifferMgmtProbe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferMgmtProbe
	}).(pulumi.StringPtrOutput)
}

// Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
func (o WtpprofileRadio2PtrOutput) ArrpProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.ArrpProfile
	}).(pulumi.StringPtrOutput)
}

// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpprofileRadio2PtrOutput) AutoPowerHigh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.AutoPowerHigh
	}).(pulumi.IntPtrOutput)
}

// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) AutoPowerLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.AutoPowerLevel
	}).(pulumi.StringPtrOutput)
}

// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpprofileRadio2PtrOutput) AutoPowerLow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.AutoPowerLow
	}).(pulumi.IntPtrOutput)
}

// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
func (o WtpprofileRadio2PtrOutput) AutoPowerTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.AutoPowerTarget
	}).(pulumi.StringPtrOutput)
}

// WiFi band that Radio 3 operates on.
func (o WtpprofileRadio2PtrOutput) Band() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.Band
	}).(pulumi.StringPtrOutput)
}

// WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
func (o WtpprofileRadio2PtrOutput) Band5gType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.Band5gType
	}).(pulumi.StringPtrOutput)
}

// Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) BandwidthAdmissionControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.BandwidthAdmissionControl
	}).(pulumi.StringPtrOutput)
}

// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
func (o WtpprofileRadio2PtrOutput) BandwidthCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.BandwidthCapacity
	}).(pulumi.IntPtrOutput)
}

// Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
func (o WtpprofileRadio2PtrOutput) BeaconInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.BeaconInterval
	}).(pulumi.IntPtrOutput)
}

// BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
func (o WtpprofileRadio2PtrOutput) BssColor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.BssColor
	}).(pulumi.IntPtrOutput)
}

// BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
func (o WtpprofileRadio2PtrOutput) BssColorMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.BssColorMode
	}).(pulumi.StringPtrOutput)
}

// Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) CallAdmissionControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.CallAdmissionControl
	}).(pulumi.StringPtrOutput)
}

// Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
func (o WtpprofileRadio2PtrOutput) CallCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.CallCapacity
	}).(pulumi.IntPtrOutput)
}

// Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
func (o WtpprofileRadio2PtrOutput) ChannelBonding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.ChannelBonding
	}).(pulumi.StringPtrOutput)
}

// Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) ChannelUtilization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.ChannelUtilization
	}).(pulumi.StringPtrOutput)
}

// Selected list of wireless radio channels. The structure of `channel` block is documented below.
func (o WtpprofileRadio2PtrOutput) Channels() WtpprofileRadio2ChannelArrayOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) []WtpprofileRadio2Channel {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(WtpprofileRadio2ChannelArrayOutput)
}

// Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) Coexistence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.Coexistence
	}).(pulumi.StringPtrOutput)
}

// Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) Darrp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.Darrp
	}).(pulumi.StringPtrOutput)
}

// Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
func (o WtpprofileRadio2PtrOutput) Drma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.Drma
	}).(pulumi.StringPtrOutput)
}

// Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
func (o WtpprofileRadio2PtrOutput) DrmaSensitivity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.DrmaSensitivity
	}).(pulumi.StringPtrOutput)
}

// Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
func (o WtpprofileRadio2PtrOutput) Dtim() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.Dtim
	}).(pulumi.IntPtrOutput)
}

// Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
func (o WtpprofileRadio2PtrOutput) FragThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.FragThreshold
	}).(pulumi.IntPtrOutput)
}

// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) FrequencyHandoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.FrequencyHandoff
	}).(pulumi.StringPtrOutput)
}

// Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
func (o WtpprofileRadio2PtrOutput) IperfProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.IperfProtocol
	}).(pulumi.StringPtrOutput)
}

// Iperf service port number.
func (o WtpprofileRadio2PtrOutput) IperfServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.IperfServerPort
	}).(pulumi.IntPtrOutput)
}

// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
func (o WtpprofileRadio2PtrOutput) MaxClients() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.MaxClients
	}).(pulumi.IntPtrOutput)
}

// Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
func (o WtpprofileRadio2PtrOutput) MaxDistance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.MaxDistance
	}).(pulumi.IntPtrOutput)
}

// Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
func (o WtpprofileRadio2PtrOutput) MimoMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.MimoMode
	}).(pulumi.StringPtrOutput)
}

// Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
func (o WtpprofileRadio2PtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) N80211d() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.N80211d
	}).(pulumi.StringPtrOutput)
}

// Optional antenna used on FAP (default = none).
func (o WtpprofileRadio2PtrOutput) OptionalAntenna() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.OptionalAntenna
	}).(pulumi.StringPtrOutput)
}

// Optional antenna gain in dBi (0 to 20, default = 0).
func (o WtpprofileRadio2PtrOutput) OptionalAntennaGain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.OptionalAntennaGain
	}).(pulumi.StringPtrOutput)
}

// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
func (o WtpprofileRadio2PtrOutput) PowerLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.PowerLevel
	}).(pulumi.IntPtrOutput)
}

// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
func (o WtpprofileRadio2PtrOutput) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.PowerMode
	}).(pulumi.StringPtrOutput)
}

// Radio EIRP power in dBm (1 - 33, default = 27).
func (o WtpprofileRadio2PtrOutput) PowerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.PowerValue
	}).(pulumi.IntPtrOutput)
}

// Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
func (o WtpprofileRadio2PtrOutput) PowersaveOptimize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.PowersaveOptimize
	}).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
func (o WtpprofileRadio2PtrOutput) ProtectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionMode
	}).(pulumi.StringPtrOutput)
}

// radio-id
func (o WtpprofileRadio2PtrOutput) RadioId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.RadioId
	}).(pulumi.IntPtrOutput)
}

// Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
func (o WtpprofileRadio2PtrOutput) RtsThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.RtsThreshold
	}).(pulumi.IntPtrOutput)
}

// BSSID for WiFi network.
func (o WtpprofileRadio2PtrOutput) SamBssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamBssid
	}).(pulumi.StringPtrOutput)
}

// CA certificate for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio2PtrOutput) SamCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamCaCertificate
	}).(pulumi.StringPtrOutput)
}

// Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) SamCaptivePortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamCaptivePortal
	}).(pulumi.StringPtrOutput)
}

// Client certificate for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio2PtrOutput) SamClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamClientCertificate
	}).(pulumi.StringPtrOutput)
}

// Failure identification on the page after an incorrect login.
func (o WtpprofileRadio2PtrOutput) SamCwpFailureString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpFailureString
	}).(pulumi.StringPtrOutput)
}

// Identification string from the captive portal login form.
func (o WtpprofileRadio2PtrOutput) SamCwpMatchString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpMatchString
	}).(pulumi.StringPtrOutput)
}

// Password for captive portal authentication.
func (o WtpprofileRadio2PtrOutput) SamCwpPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpPassword
	}).(pulumi.StringPtrOutput)
}

// Success identification on the page after a successful login.
func (o WtpprofileRadio2PtrOutput) SamCwpSuccessString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpSuccessString
	}).(pulumi.StringPtrOutput)
}

// Website the client is trying to access.
func (o WtpprofileRadio2PtrOutput) SamCwpTestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpTestUrl
	}).(pulumi.StringPtrOutput)
}

// Username for captive portal authentication.
func (o WtpprofileRadio2PtrOutput) SamCwpUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpUsername
	}).(pulumi.StringPtrOutput)
}

// Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
func (o WtpprofileRadio2PtrOutput) SamEapMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamEapMethod
	}).(pulumi.StringPtrOutput)
}

// Passphrase for WiFi network connection.
func (o WtpprofileRadio2PtrOutput) SamPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamPassword
	}).(pulumi.StringPtrOutput)
}

// Private key for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio2PtrOutput) SamPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamPrivateKey
	}).(pulumi.StringPtrOutput)
}

// Password for private key file for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio2PtrOutput) SamPrivateKeyPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamPrivateKeyPassword
	}).(pulumi.StringPtrOutput)
}

// SAM report interval (sec), 0 for a one-time report.
func (o WtpprofileRadio2PtrOutput) SamReportIntv() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *int {
		if v == nil {
			return nil
		}
		return v.SamReportIntv
	}).(pulumi.IntPtrOutput)
}

// Select WiFi network security type (default = "wpa-personal").
func (o WtpprofileRadio2PtrOutput) SamSecurityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamSecurityType
	}).(pulumi.StringPtrOutput)
}

// SAM test server domain name.
func (o WtpprofileRadio2PtrOutput) SamServerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamServerFqdn
	}).(pulumi.StringPtrOutput)
}

// SAM test server IP address.
func (o WtpprofileRadio2PtrOutput) SamServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamServerIp
	}).(pulumi.StringPtrOutput)
}

// Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
func (o WtpprofileRadio2PtrOutput) SamServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamServerType
	}).(pulumi.StringPtrOutput)
}

// SSID for WiFi network.
func (o WtpprofileRadio2PtrOutput) SamSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamSsid
	}).(pulumi.StringPtrOutput)
}

// Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
func (o WtpprofileRadio2PtrOutput) SamTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamTest
	}).(pulumi.StringPtrOutput)
}

// Username for WiFi network connection.
func (o WtpprofileRadio2PtrOutput) SamUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SamUsername
	}).(pulumi.StringPtrOutput)
}

// Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) ShortGuardInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.ShortGuardInterval
	}).(pulumi.StringPtrOutput)
}

// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
func (o WtpprofileRadio2PtrOutput) SpectrumAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.SpectrumAnalysis
	}).(pulumi.StringPtrOutput)
}

// Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
func (o WtpprofileRadio2PtrOutput) TransmitOptimize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.TransmitOptimize
	}).(pulumi.StringPtrOutput)
}

// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
func (o WtpprofileRadio2PtrOutput) VapAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.VapAll
	}).(pulumi.StringPtrOutput)
}

// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
func (o WtpprofileRadio2PtrOutput) Vaps() WtpprofileRadio2VapArrayOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) []WtpprofileRadio2Vap {
		if v == nil {
			return nil
		}
		return v.Vaps
	}).(WtpprofileRadio2VapArrayOutput)
}

// Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
func (o WtpprofileRadio2PtrOutput) WidsProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.WidsProfile
	}).(pulumi.StringPtrOutput)
}

// Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio2PtrOutput) ZeroWaitDfs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio2) *string {
		if v == nil {
			return nil
		}
		return v.ZeroWaitDfs
	}).(pulumi.StringPtrOutput)
}

type WtpprofileRadio2Channel struct {
	// Channel number.
	Chan *string `pulumi:"chan"`
}

// WtpprofileRadio2ChannelInput is an input type that accepts WtpprofileRadio2ChannelArgs and WtpprofileRadio2ChannelOutput values.
// You can construct a concrete instance of `WtpprofileRadio2ChannelInput` via:
//
//	WtpprofileRadio2ChannelArgs{...}
type WtpprofileRadio2ChannelInput interface {
	pulumi.Input

	ToWtpprofileRadio2ChannelOutput() WtpprofileRadio2ChannelOutput
	ToWtpprofileRadio2ChannelOutputWithContext(context.Context) WtpprofileRadio2ChannelOutput
}

type WtpprofileRadio2ChannelArgs struct {
	// Channel number.
	Chan pulumi.StringPtrInput `pulumi:"chan"`
}

func (WtpprofileRadio2ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio2Channel)(nil)).Elem()
}

func (i WtpprofileRadio2ChannelArgs) ToWtpprofileRadio2ChannelOutput() WtpprofileRadio2ChannelOutput {
	return i.ToWtpprofileRadio2ChannelOutputWithContext(context.Background())
}

func (i WtpprofileRadio2ChannelArgs) ToWtpprofileRadio2ChannelOutputWithContext(ctx context.Context) WtpprofileRadio2ChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio2ChannelOutput)
}

// WtpprofileRadio2ChannelArrayInput is an input type that accepts WtpprofileRadio2ChannelArray and WtpprofileRadio2ChannelArrayOutput values.
// You can construct a concrete instance of `WtpprofileRadio2ChannelArrayInput` via:
//
//	WtpprofileRadio2ChannelArray{ WtpprofileRadio2ChannelArgs{...} }
type WtpprofileRadio2ChannelArrayInput interface {
	pulumi.Input

	ToWtpprofileRadio2ChannelArrayOutput() WtpprofileRadio2ChannelArrayOutput
	ToWtpprofileRadio2ChannelArrayOutputWithContext(context.Context) WtpprofileRadio2ChannelArrayOutput
}

type WtpprofileRadio2ChannelArray []WtpprofileRadio2ChannelInput

func (WtpprofileRadio2ChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileRadio2Channel)(nil)).Elem()
}

func (i WtpprofileRadio2ChannelArray) ToWtpprofileRadio2ChannelArrayOutput() WtpprofileRadio2ChannelArrayOutput {
	return i.ToWtpprofileRadio2ChannelArrayOutputWithContext(context.Background())
}

func (i WtpprofileRadio2ChannelArray) ToWtpprofileRadio2ChannelArrayOutputWithContext(ctx context.Context) WtpprofileRadio2ChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio2ChannelArrayOutput)
}

type WtpprofileRadio2ChannelOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio2ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio2Channel)(nil)).Elem()
}

func (o WtpprofileRadio2ChannelOutput) ToWtpprofileRadio2ChannelOutput() WtpprofileRadio2ChannelOutput {
	return o
}

func (o WtpprofileRadio2ChannelOutput) ToWtpprofileRadio2ChannelOutputWithContext(ctx context.Context) WtpprofileRadio2ChannelOutput {
	return o
}

// Channel number.
func (o WtpprofileRadio2ChannelOutput) Chan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2Channel) *string { return v.Chan }).(pulumi.StringPtrOutput)
}

type WtpprofileRadio2ChannelArrayOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio2ChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileRadio2Channel)(nil)).Elem()
}

func (o WtpprofileRadio2ChannelArrayOutput) ToWtpprofileRadio2ChannelArrayOutput() WtpprofileRadio2ChannelArrayOutput {
	return o
}

func (o WtpprofileRadio2ChannelArrayOutput) ToWtpprofileRadio2ChannelArrayOutputWithContext(ctx context.Context) WtpprofileRadio2ChannelArrayOutput {
	return o
}

func (o WtpprofileRadio2ChannelArrayOutput) Index(i pulumi.IntInput) WtpprofileRadio2ChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpprofileRadio2Channel {
		return vs[0].([]WtpprofileRadio2Channel)[vs[1].(int)]
	}).(WtpprofileRadio2ChannelOutput)
}

type WtpprofileRadio2Vap struct {
	// Virtual Access Point (VAP) name.
	Name *string `pulumi:"name"`
}

// WtpprofileRadio2VapInput is an input type that accepts WtpprofileRadio2VapArgs and WtpprofileRadio2VapOutput values.
// You can construct a concrete instance of `WtpprofileRadio2VapInput` via:
//
//	WtpprofileRadio2VapArgs{...}
type WtpprofileRadio2VapInput interface {
	pulumi.Input

	ToWtpprofileRadio2VapOutput() WtpprofileRadio2VapOutput
	ToWtpprofileRadio2VapOutputWithContext(context.Context) WtpprofileRadio2VapOutput
}

type WtpprofileRadio2VapArgs struct {
	// Virtual Access Point (VAP) name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (WtpprofileRadio2VapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio2Vap)(nil)).Elem()
}

func (i WtpprofileRadio2VapArgs) ToWtpprofileRadio2VapOutput() WtpprofileRadio2VapOutput {
	return i.ToWtpprofileRadio2VapOutputWithContext(context.Background())
}

func (i WtpprofileRadio2VapArgs) ToWtpprofileRadio2VapOutputWithContext(ctx context.Context) WtpprofileRadio2VapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio2VapOutput)
}

// WtpprofileRadio2VapArrayInput is an input type that accepts WtpprofileRadio2VapArray and WtpprofileRadio2VapArrayOutput values.
// You can construct a concrete instance of `WtpprofileRadio2VapArrayInput` via:
//
//	WtpprofileRadio2VapArray{ WtpprofileRadio2VapArgs{...} }
type WtpprofileRadio2VapArrayInput interface {
	pulumi.Input

	ToWtpprofileRadio2VapArrayOutput() WtpprofileRadio2VapArrayOutput
	ToWtpprofileRadio2VapArrayOutputWithContext(context.Context) WtpprofileRadio2VapArrayOutput
}

type WtpprofileRadio2VapArray []WtpprofileRadio2VapInput

func (WtpprofileRadio2VapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileRadio2Vap)(nil)).Elem()
}

func (i WtpprofileRadio2VapArray) ToWtpprofileRadio2VapArrayOutput() WtpprofileRadio2VapArrayOutput {
	return i.ToWtpprofileRadio2VapArrayOutputWithContext(context.Background())
}

func (i WtpprofileRadio2VapArray) ToWtpprofileRadio2VapArrayOutputWithContext(ctx context.Context) WtpprofileRadio2VapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio2VapArrayOutput)
}

type WtpprofileRadio2VapOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio2VapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio2Vap)(nil)).Elem()
}

func (o WtpprofileRadio2VapOutput) ToWtpprofileRadio2VapOutput() WtpprofileRadio2VapOutput {
	return o
}

func (o WtpprofileRadio2VapOutput) ToWtpprofileRadio2VapOutputWithContext(ctx context.Context) WtpprofileRadio2VapOutput {
	return o
}

// Virtual Access Point (VAP) name.
func (o WtpprofileRadio2VapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio2Vap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type WtpprofileRadio2VapArrayOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio2VapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileRadio2Vap)(nil)).Elem()
}

func (o WtpprofileRadio2VapArrayOutput) ToWtpprofileRadio2VapArrayOutput() WtpprofileRadio2VapArrayOutput {
	return o
}

func (o WtpprofileRadio2VapArrayOutput) ToWtpprofileRadio2VapArrayOutputWithContext(ctx context.Context) WtpprofileRadio2VapArrayOutput {
	return o
}

func (o WtpprofileRadio2VapArrayOutput) Index(i pulumi.IntInput) WtpprofileRadio2VapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpprofileRadio2Vap {
		return vs[0].([]WtpprofileRadio2Vap)[vs[1].(int)]
	}).(WtpprofileRadio2VapOutput)
}

type WtpprofileRadio3 struct {
	// Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
	AirtimeFairness *string `pulumi:"airtimeFairness"`
	// Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
	Amsdu *string `pulumi:"amsdu"`
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff *string `pulumi:"apHandoff"`
	// MAC address to monitor.
	ApSnifferAddr *string `pulumi:"apSnifferAddr"`
	// Sniffer buffer size (1 - 32 MB, default = 16).
	ApSnifferBufsize *int `pulumi:"apSnifferBufsize"`
	// Channel on which to operate the sniffer (default = 6).
	ApSnifferChan *int `pulumi:"apSnifferChan"`
	// Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
	ApSnifferCtl *string `pulumi:"apSnifferCtl"`
	// Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
	ApSnifferData *string `pulumi:"apSnifferData"`
	// Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtBeacon *string `pulumi:"apSnifferMgmtBeacon"`
	// Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtOther *string `pulumi:"apSnifferMgmtOther"`
	// Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtProbe *string `pulumi:"apSnifferMgmtProbe"`
	// Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
	ArrpProfile *string `pulumi:"arrpProfile"`
	// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerHigh *int `pulumi:"autoPowerHigh"`
	// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
	AutoPowerLevel *string `pulumi:"autoPowerLevel"`
	// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerLow *int `pulumi:"autoPowerLow"`
	// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
	AutoPowerTarget *string `pulumi:"autoPowerTarget"`
	// WiFi band that Radio 3 operates on.
	Band *string `pulumi:"band"`
	// WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
	Band5gType *string `pulumi:"band5gType"`
	// Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
	BandwidthAdmissionControl *string `pulumi:"bandwidthAdmissionControl"`
	// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
	BandwidthCapacity *int `pulumi:"bandwidthCapacity"`
	// Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
	BeaconInterval *int `pulumi:"beaconInterval"`
	// BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
	BssColor *int `pulumi:"bssColor"`
	// BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
	BssColorMode *string `pulumi:"bssColorMode"`
	// Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
	CallAdmissionControl *string `pulumi:"callAdmissionControl"`
	// Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
	CallCapacity *int `pulumi:"callCapacity"`
	// Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
	ChannelBonding *string `pulumi:"channelBonding"`
	// Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
	ChannelUtilization *string `pulumi:"channelUtilization"`
	// Selected list of wireless radio channels. The structure of `channel` block is documented below.
	Channels []WtpprofileRadio3Channel `pulumi:"channels"`
	// Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
	Coexistence *string `pulumi:"coexistence"`
	// Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
	Darrp *string `pulumi:"darrp"`
	// Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
	Drma *string `pulumi:"drma"`
	// Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
	DrmaSensitivity *string `pulumi:"drmaSensitivity"`
	// Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
	Dtim *int `pulumi:"dtim"`
	// Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
	FragThreshold *int `pulumi:"fragThreshold"`
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff *string `pulumi:"frequencyHandoff"`
	// Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
	IperfProtocol *string `pulumi:"iperfProtocol"`
	// Iperf service port number.
	IperfServerPort *int `pulumi:"iperfServerPort"`
	// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
	MaxClients *int `pulumi:"maxClients"`
	// Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
	MaxDistance *int `pulumi:"maxDistance"`
	// Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
	MimoMode *string `pulumi:"mimoMode"`
	// Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
	Mode *string `pulumi:"mode"`
	// Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
	N80211d *string `pulumi:"n80211d"`
	// Optional antenna used on FAP (default = none).
	OptionalAntenna *string `pulumi:"optionalAntenna"`
	// Optional antenna gain in dBi (0 to 20, default = 0).
	OptionalAntennaGain *string `pulumi:"optionalAntennaGain"`
	// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
	PowerLevel *int `pulumi:"powerLevel"`
	// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
	PowerMode *string `pulumi:"powerMode"`
	// Radio EIRP power in dBm (1 - 33, default = 27).
	PowerValue *int `pulumi:"powerValue"`
	// Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
	PowersaveOptimize *string `pulumi:"powersaveOptimize"`
	// Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
	ProtectionMode *string `pulumi:"protectionMode"`
	// Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
	RtsThreshold *int `pulumi:"rtsThreshold"`
	// BSSID for WiFi network.
	SamBssid *string `pulumi:"samBssid"`
	// CA certificate for WPA2/WPA3-ENTERPRISE.
	SamCaCertificate *string `pulumi:"samCaCertificate"`
	// Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
	SamCaptivePortal *string `pulumi:"samCaptivePortal"`
	// Client certificate for WPA2/WPA3-ENTERPRISE.
	SamClientCertificate *string `pulumi:"samClientCertificate"`
	// Failure identification on the page after an incorrect login.
	SamCwpFailureString *string `pulumi:"samCwpFailureString"`
	// Identification string from the captive portal login form.
	SamCwpMatchString *string `pulumi:"samCwpMatchString"`
	// Password for captive portal authentication.
	SamCwpPassword *string `pulumi:"samCwpPassword"`
	// Success identification on the page after a successful login.
	SamCwpSuccessString *string `pulumi:"samCwpSuccessString"`
	// Website the client is trying to access.
	SamCwpTestUrl *string `pulumi:"samCwpTestUrl"`
	// Username for captive portal authentication.
	SamCwpUsername *string `pulumi:"samCwpUsername"`
	// Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
	SamEapMethod *string `pulumi:"samEapMethod"`
	// Passphrase for WiFi network connection.
	SamPassword *string `pulumi:"samPassword"`
	// Private key for WPA2/WPA3-ENTERPRISE.
	SamPrivateKey *string `pulumi:"samPrivateKey"`
	// Password for private key file for WPA2/WPA3-ENTERPRISE.
	SamPrivateKeyPassword *string `pulumi:"samPrivateKeyPassword"`
	// SAM report interval (sec), 0 for a one-time report.
	SamReportIntv *int `pulumi:"samReportIntv"`
	// Select WiFi network security type (default = "wpa-personal").
	SamSecurityType *string `pulumi:"samSecurityType"`
	// SAM test server domain name.
	SamServerFqdn *string `pulumi:"samServerFqdn"`
	// SAM test server IP address.
	SamServerIp *string `pulumi:"samServerIp"`
	// Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
	SamServerType *string `pulumi:"samServerType"`
	// SSID for WiFi network.
	SamSsid *string `pulumi:"samSsid"`
	// Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
	SamTest *string `pulumi:"samTest"`
	// Username for WiFi network connection.
	SamUsername *string `pulumi:"samUsername"`
	// Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
	ShortGuardInterval *string `pulumi:"shortGuardInterval"`
	// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
	SpectrumAnalysis *string `pulumi:"spectrumAnalysis"`
	// Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
	TransmitOptimize *string `pulumi:"transmitOptimize"`
	// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
	VapAll *string `pulumi:"vapAll"`
	// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
	Vaps []WtpprofileRadio3Vap `pulumi:"vaps"`
	// Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
	WidsProfile *string `pulumi:"widsProfile"`
	// Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
	ZeroWaitDfs *string `pulumi:"zeroWaitDfs"`
}

// WtpprofileRadio3Input is an input type that accepts WtpprofileRadio3Args and WtpprofileRadio3Output values.
// You can construct a concrete instance of `WtpprofileRadio3Input` via:
//
//	WtpprofileRadio3Args{...}
type WtpprofileRadio3Input interface {
	pulumi.Input

	ToWtpprofileRadio3Output() WtpprofileRadio3Output
	ToWtpprofileRadio3OutputWithContext(context.Context) WtpprofileRadio3Output
}

type WtpprofileRadio3Args struct {
	// Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
	AirtimeFairness pulumi.StringPtrInput `pulumi:"airtimeFairness"`
	// Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
	Amsdu pulumi.StringPtrInput `pulumi:"amsdu"`
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff pulumi.StringPtrInput `pulumi:"apHandoff"`
	// MAC address to monitor.
	ApSnifferAddr pulumi.StringPtrInput `pulumi:"apSnifferAddr"`
	// Sniffer buffer size (1 - 32 MB, default = 16).
	ApSnifferBufsize pulumi.IntPtrInput `pulumi:"apSnifferBufsize"`
	// Channel on which to operate the sniffer (default = 6).
	ApSnifferChan pulumi.IntPtrInput `pulumi:"apSnifferChan"`
	// Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
	ApSnifferCtl pulumi.StringPtrInput `pulumi:"apSnifferCtl"`
	// Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
	ApSnifferData pulumi.StringPtrInput `pulumi:"apSnifferData"`
	// Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtBeacon pulumi.StringPtrInput `pulumi:"apSnifferMgmtBeacon"`
	// Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtOther pulumi.StringPtrInput `pulumi:"apSnifferMgmtOther"`
	// Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtProbe pulumi.StringPtrInput `pulumi:"apSnifferMgmtProbe"`
	// Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
	ArrpProfile pulumi.StringPtrInput `pulumi:"arrpProfile"`
	// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerHigh pulumi.IntPtrInput `pulumi:"autoPowerHigh"`
	// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
	AutoPowerLevel pulumi.StringPtrInput `pulumi:"autoPowerLevel"`
	// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerLow pulumi.IntPtrInput `pulumi:"autoPowerLow"`
	// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
	AutoPowerTarget pulumi.StringPtrInput `pulumi:"autoPowerTarget"`
	// WiFi band that Radio 3 operates on.
	Band pulumi.StringPtrInput `pulumi:"band"`
	// WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
	Band5gType pulumi.StringPtrInput `pulumi:"band5gType"`
	// Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
	BandwidthAdmissionControl pulumi.StringPtrInput `pulumi:"bandwidthAdmissionControl"`
	// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
	BandwidthCapacity pulumi.IntPtrInput `pulumi:"bandwidthCapacity"`
	// Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
	BeaconInterval pulumi.IntPtrInput `pulumi:"beaconInterval"`
	// BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
	BssColor pulumi.IntPtrInput `pulumi:"bssColor"`
	// BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
	BssColorMode pulumi.StringPtrInput `pulumi:"bssColorMode"`
	// Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
	CallAdmissionControl pulumi.StringPtrInput `pulumi:"callAdmissionControl"`
	// Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
	CallCapacity pulumi.IntPtrInput `pulumi:"callCapacity"`
	// Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
	ChannelBonding pulumi.StringPtrInput `pulumi:"channelBonding"`
	// Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
	ChannelUtilization pulumi.StringPtrInput `pulumi:"channelUtilization"`
	// Selected list of wireless radio channels. The structure of `channel` block is documented below.
	Channels WtpprofileRadio3ChannelArrayInput `pulumi:"channels"`
	// Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
	Coexistence pulumi.StringPtrInput `pulumi:"coexistence"`
	// Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
	Darrp pulumi.StringPtrInput `pulumi:"darrp"`
	// Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
	Drma pulumi.StringPtrInput `pulumi:"drma"`
	// Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
	DrmaSensitivity pulumi.StringPtrInput `pulumi:"drmaSensitivity"`
	// Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
	Dtim pulumi.IntPtrInput `pulumi:"dtim"`
	// Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
	FragThreshold pulumi.IntPtrInput `pulumi:"fragThreshold"`
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff pulumi.StringPtrInput `pulumi:"frequencyHandoff"`
	// Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
	IperfProtocol pulumi.StringPtrInput `pulumi:"iperfProtocol"`
	// Iperf service port number.
	IperfServerPort pulumi.IntPtrInput `pulumi:"iperfServerPort"`
	// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
	MaxClients pulumi.IntPtrInput `pulumi:"maxClients"`
	// Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
	MaxDistance pulumi.IntPtrInput `pulumi:"maxDistance"`
	// Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
	MimoMode pulumi.StringPtrInput `pulumi:"mimoMode"`
	// Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
	N80211d pulumi.StringPtrInput `pulumi:"n80211d"`
	// Optional antenna used on FAP (default = none).
	OptionalAntenna pulumi.StringPtrInput `pulumi:"optionalAntenna"`
	// Optional antenna gain in dBi (0 to 20, default = 0).
	OptionalAntennaGain pulumi.StringPtrInput `pulumi:"optionalAntennaGain"`
	// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
	PowerLevel pulumi.IntPtrInput `pulumi:"powerLevel"`
	// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
	PowerMode pulumi.StringPtrInput `pulumi:"powerMode"`
	// Radio EIRP power in dBm (1 - 33, default = 27).
	PowerValue pulumi.IntPtrInput `pulumi:"powerValue"`
	// Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
	PowersaveOptimize pulumi.StringPtrInput `pulumi:"powersaveOptimize"`
	// Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
	ProtectionMode pulumi.StringPtrInput `pulumi:"protectionMode"`
	// Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
	RtsThreshold pulumi.IntPtrInput `pulumi:"rtsThreshold"`
	// BSSID for WiFi network.
	SamBssid pulumi.StringPtrInput `pulumi:"samBssid"`
	// CA certificate for WPA2/WPA3-ENTERPRISE.
	SamCaCertificate pulumi.StringPtrInput `pulumi:"samCaCertificate"`
	// Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
	SamCaptivePortal pulumi.StringPtrInput `pulumi:"samCaptivePortal"`
	// Client certificate for WPA2/WPA3-ENTERPRISE.
	SamClientCertificate pulumi.StringPtrInput `pulumi:"samClientCertificate"`
	// Failure identification on the page after an incorrect login.
	SamCwpFailureString pulumi.StringPtrInput `pulumi:"samCwpFailureString"`
	// Identification string from the captive portal login form.
	SamCwpMatchString pulumi.StringPtrInput `pulumi:"samCwpMatchString"`
	// Password for captive portal authentication.
	SamCwpPassword pulumi.StringPtrInput `pulumi:"samCwpPassword"`
	// Success identification on the page after a successful login.
	SamCwpSuccessString pulumi.StringPtrInput `pulumi:"samCwpSuccessString"`
	// Website the client is trying to access.
	SamCwpTestUrl pulumi.StringPtrInput `pulumi:"samCwpTestUrl"`
	// Username for captive portal authentication.
	SamCwpUsername pulumi.StringPtrInput `pulumi:"samCwpUsername"`
	// Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
	SamEapMethod pulumi.StringPtrInput `pulumi:"samEapMethod"`
	// Passphrase for WiFi network connection.
	SamPassword pulumi.StringPtrInput `pulumi:"samPassword"`
	// Private key for WPA2/WPA3-ENTERPRISE.
	SamPrivateKey pulumi.StringPtrInput `pulumi:"samPrivateKey"`
	// Password for private key file for WPA2/WPA3-ENTERPRISE.
	SamPrivateKeyPassword pulumi.StringPtrInput `pulumi:"samPrivateKeyPassword"`
	// SAM report interval (sec), 0 for a one-time report.
	SamReportIntv pulumi.IntPtrInput `pulumi:"samReportIntv"`
	// Select WiFi network security type (default = "wpa-personal").
	SamSecurityType pulumi.StringPtrInput `pulumi:"samSecurityType"`
	// SAM test server domain name.
	SamServerFqdn pulumi.StringPtrInput `pulumi:"samServerFqdn"`
	// SAM test server IP address.
	SamServerIp pulumi.StringPtrInput `pulumi:"samServerIp"`
	// Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
	SamServerType pulumi.StringPtrInput `pulumi:"samServerType"`
	// SSID for WiFi network.
	SamSsid pulumi.StringPtrInput `pulumi:"samSsid"`
	// Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
	SamTest pulumi.StringPtrInput `pulumi:"samTest"`
	// Username for WiFi network connection.
	SamUsername pulumi.StringPtrInput `pulumi:"samUsername"`
	// Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
	ShortGuardInterval pulumi.StringPtrInput `pulumi:"shortGuardInterval"`
	// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
	SpectrumAnalysis pulumi.StringPtrInput `pulumi:"spectrumAnalysis"`
	// Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
	TransmitOptimize pulumi.StringPtrInput `pulumi:"transmitOptimize"`
	// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
	VapAll pulumi.StringPtrInput `pulumi:"vapAll"`
	// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
	Vaps WtpprofileRadio3VapArrayInput `pulumi:"vaps"`
	// Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
	WidsProfile pulumi.StringPtrInput `pulumi:"widsProfile"`
	// Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
	ZeroWaitDfs pulumi.StringPtrInput `pulumi:"zeroWaitDfs"`
}

func (WtpprofileRadio3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio3)(nil)).Elem()
}

func (i WtpprofileRadio3Args) ToWtpprofileRadio3Output() WtpprofileRadio3Output {
	return i.ToWtpprofileRadio3OutputWithContext(context.Background())
}

func (i WtpprofileRadio3Args) ToWtpprofileRadio3OutputWithContext(ctx context.Context) WtpprofileRadio3Output {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio3Output)
}

func (i WtpprofileRadio3Args) ToWtpprofileRadio3PtrOutput() WtpprofileRadio3PtrOutput {
	return i.ToWtpprofileRadio3PtrOutputWithContext(context.Background())
}

func (i WtpprofileRadio3Args) ToWtpprofileRadio3PtrOutputWithContext(ctx context.Context) WtpprofileRadio3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio3Output).ToWtpprofileRadio3PtrOutputWithContext(ctx)
}

// WtpprofileRadio3PtrInput is an input type that accepts WtpprofileRadio3Args, WtpprofileRadio3Ptr and WtpprofileRadio3PtrOutput values.
// You can construct a concrete instance of `WtpprofileRadio3PtrInput` via:
//
//	        WtpprofileRadio3Args{...}
//
//	or:
//
//	        nil
type WtpprofileRadio3PtrInput interface {
	pulumi.Input

	ToWtpprofileRadio3PtrOutput() WtpprofileRadio3PtrOutput
	ToWtpprofileRadio3PtrOutputWithContext(context.Context) WtpprofileRadio3PtrOutput
}

type wtpprofileRadio3PtrType WtpprofileRadio3Args

func WtpprofileRadio3Ptr(v *WtpprofileRadio3Args) WtpprofileRadio3PtrInput {
	return (*wtpprofileRadio3PtrType)(v)
}

func (*wtpprofileRadio3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpprofileRadio3)(nil)).Elem()
}

func (i *wtpprofileRadio3PtrType) ToWtpprofileRadio3PtrOutput() WtpprofileRadio3PtrOutput {
	return i.ToWtpprofileRadio3PtrOutputWithContext(context.Background())
}

func (i *wtpprofileRadio3PtrType) ToWtpprofileRadio3PtrOutputWithContext(ctx context.Context) WtpprofileRadio3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio3PtrOutput)
}

type WtpprofileRadio3Output struct{ *pulumi.OutputState }

func (WtpprofileRadio3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio3)(nil)).Elem()
}

func (o WtpprofileRadio3Output) ToWtpprofileRadio3Output() WtpprofileRadio3Output {
	return o
}

func (o WtpprofileRadio3Output) ToWtpprofileRadio3OutputWithContext(ctx context.Context) WtpprofileRadio3Output {
	return o
}

func (o WtpprofileRadio3Output) ToWtpprofileRadio3PtrOutput() WtpprofileRadio3PtrOutput {
	return o.ToWtpprofileRadio3PtrOutputWithContext(context.Background())
}

func (o WtpprofileRadio3Output) ToWtpprofileRadio3PtrOutputWithContext(ctx context.Context) WtpprofileRadio3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WtpprofileRadio3) *WtpprofileRadio3 {
		return &v
	}).(WtpprofileRadio3PtrOutput)
}

// Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) AirtimeFairness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.AirtimeFairness }).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) Amsdu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.Amsdu }).(pulumi.StringPtrOutput)
}

// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) ApHandoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.ApHandoff }).(pulumi.StringPtrOutput)
}

// MAC address to monitor.
func (o WtpprofileRadio3Output) ApSnifferAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.ApSnifferAddr }).(pulumi.StringPtrOutput)
}

// Sniffer buffer size (1 - 32 MB, default = 16).
func (o WtpprofileRadio3Output) ApSnifferBufsize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *int { return v.ApSnifferBufsize }).(pulumi.IntPtrOutput)
}

// Channel on which to operate the sniffer (default = 6).
func (o WtpprofileRadio3Output) ApSnifferChan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *int { return v.ApSnifferChan }).(pulumi.IntPtrOutput)
}

// Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) ApSnifferCtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.ApSnifferCtl }).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) ApSnifferData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.ApSnifferData }).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) ApSnifferMgmtBeacon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.ApSnifferMgmtBeacon }).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) ApSnifferMgmtOther() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.ApSnifferMgmtOther }).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) ApSnifferMgmtProbe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.ApSnifferMgmtProbe }).(pulumi.StringPtrOutput)
}

// Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
func (o WtpprofileRadio3Output) ArrpProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.ArrpProfile }).(pulumi.StringPtrOutput)
}

// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpprofileRadio3Output) AutoPowerHigh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *int { return v.AutoPowerHigh }).(pulumi.IntPtrOutput)
}

// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) AutoPowerLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.AutoPowerLevel }).(pulumi.StringPtrOutput)
}

// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpprofileRadio3Output) AutoPowerLow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *int { return v.AutoPowerLow }).(pulumi.IntPtrOutput)
}

// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
func (o WtpprofileRadio3Output) AutoPowerTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.AutoPowerTarget }).(pulumi.StringPtrOutput)
}

// WiFi band that Radio 3 operates on.
func (o WtpprofileRadio3Output) Band() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.Band }).(pulumi.StringPtrOutput)
}

// WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
func (o WtpprofileRadio3Output) Band5gType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.Band5gType }).(pulumi.StringPtrOutput)
}

// Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) BandwidthAdmissionControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.BandwidthAdmissionControl }).(pulumi.StringPtrOutput)
}

// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
func (o WtpprofileRadio3Output) BandwidthCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *int { return v.BandwidthCapacity }).(pulumi.IntPtrOutput)
}

// Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
func (o WtpprofileRadio3Output) BeaconInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *int { return v.BeaconInterval }).(pulumi.IntPtrOutput)
}

// BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
func (o WtpprofileRadio3Output) BssColor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *int { return v.BssColor }).(pulumi.IntPtrOutput)
}

// BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
func (o WtpprofileRadio3Output) BssColorMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.BssColorMode }).(pulumi.StringPtrOutput)
}

// Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) CallAdmissionControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.CallAdmissionControl }).(pulumi.StringPtrOutput)
}

// Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
func (o WtpprofileRadio3Output) CallCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *int { return v.CallCapacity }).(pulumi.IntPtrOutput)
}

// Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
func (o WtpprofileRadio3Output) ChannelBonding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.ChannelBonding }).(pulumi.StringPtrOutput)
}

// Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) ChannelUtilization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.ChannelUtilization }).(pulumi.StringPtrOutput)
}

// Selected list of wireless radio channels. The structure of `channel` block is documented below.
func (o WtpprofileRadio3Output) Channels() WtpprofileRadio3ChannelArrayOutput {
	return o.ApplyT(func(v WtpprofileRadio3) []WtpprofileRadio3Channel { return v.Channels }).(WtpprofileRadio3ChannelArrayOutput)
}

// Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) Coexistence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.Coexistence }).(pulumi.StringPtrOutput)
}

// Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) Darrp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.Darrp }).(pulumi.StringPtrOutput)
}

// Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
func (o WtpprofileRadio3Output) Drma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.Drma }).(pulumi.StringPtrOutput)
}

// Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
func (o WtpprofileRadio3Output) DrmaSensitivity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.DrmaSensitivity }).(pulumi.StringPtrOutput)
}

// Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
func (o WtpprofileRadio3Output) Dtim() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *int { return v.Dtim }).(pulumi.IntPtrOutput)
}

// Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
func (o WtpprofileRadio3Output) FragThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *int { return v.FragThreshold }).(pulumi.IntPtrOutput)
}

// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) FrequencyHandoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.FrequencyHandoff }).(pulumi.StringPtrOutput)
}

// Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
func (o WtpprofileRadio3Output) IperfProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.IperfProtocol }).(pulumi.StringPtrOutput)
}

// Iperf service port number.
func (o WtpprofileRadio3Output) IperfServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *int { return v.IperfServerPort }).(pulumi.IntPtrOutput)
}

// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
func (o WtpprofileRadio3Output) MaxClients() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *int { return v.MaxClients }).(pulumi.IntPtrOutput)
}

// Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
func (o WtpprofileRadio3Output) MaxDistance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *int { return v.MaxDistance }).(pulumi.IntPtrOutput)
}

// Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
func (o WtpprofileRadio3Output) MimoMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.MimoMode }).(pulumi.StringPtrOutput)
}

// Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
func (o WtpprofileRadio3Output) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) N80211d() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.N80211d }).(pulumi.StringPtrOutput)
}

// Optional antenna used on FAP (default = none).
func (o WtpprofileRadio3Output) OptionalAntenna() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.OptionalAntenna }).(pulumi.StringPtrOutput)
}

// Optional antenna gain in dBi (0 to 20, default = 0).
func (o WtpprofileRadio3Output) OptionalAntennaGain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.OptionalAntennaGain }).(pulumi.StringPtrOutput)
}

// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
func (o WtpprofileRadio3Output) PowerLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *int { return v.PowerLevel }).(pulumi.IntPtrOutput)
}

// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
func (o WtpprofileRadio3Output) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.PowerMode }).(pulumi.StringPtrOutput)
}

// Radio EIRP power in dBm (1 - 33, default = 27).
func (o WtpprofileRadio3Output) PowerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *int { return v.PowerValue }).(pulumi.IntPtrOutput)
}

// Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
func (o WtpprofileRadio3Output) PowersaveOptimize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.PowersaveOptimize }).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
func (o WtpprofileRadio3Output) ProtectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.ProtectionMode }).(pulumi.StringPtrOutput)
}

// Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
func (o WtpprofileRadio3Output) RtsThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *int { return v.RtsThreshold }).(pulumi.IntPtrOutput)
}

// BSSID for WiFi network.
func (o WtpprofileRadio3Output) SamBssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamBssid }).(pulumi.StringPtrOutput)
}

// CA certificate for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio3Output) SamCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamCaCertificate }).(pulumi.StringPtrOutput)
}

// Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) SamCaptivePortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamCaptivePortal }).(pulumi.StringPtrOutput)
}

// Client certificate for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio3Output) SamClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamClientCertificate }).(pulumi.StringPtrOutput)
}

// Failure identification on the page after an incorrect login.
func (o WtpprofileRadio3Output) SamCwpFailureString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamCwpFailureString }).(pulumi.StringPtrOutput)
}

// Identification string from the captive portal login form.
func (o WtpprofileRadio3Output) SamCwpMatchString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamCwpMatchString }).(pulumi.StringPtrOutput)
}

// Password for captive portal authentication.
func (o WtpprofileRadio3Output) SamCwpPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamCwpPassword }).(pulumi.StringPtrOutput)
}

// Success identification on the page after a successful login.
func (o WtpprofileRadio3Output) SamCwpSuccessString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamCwpSuccessString }).(pulumi.StringPtrOutput)
}

// Website the client is trying to access.
func (o WtpprofileRadio3Output) SamCwpTestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamCwpTestUrl }).(pulumi.StringPtrOutput)
}

// Username for captive portal authentication.
func (o WtpprofileRadio3Output) SamCwpUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamCwpUsername }).(pulumi.StringPtrOutput)
}

// Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
func (o WtpprofileRadio3Output) SamEapMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamEapMethod }).(pulumi.StringPtrOutput)
}

// Passphrase for WiFi network connection.
func (o WtpprofileRadio3Output) SamPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamPassword }).(pulumi.StringPtrOutput)
}

// Private key for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio3Output) SamPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamPrivateKey }).(pulumi.StringPtrOutput)
}

// Password for private key file for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio3Output) SamPrivateKeyPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamPrivateKeyPassword }).(pulumi.StringPtrOutput)
}

// SAM report interval (sec), 0 for a one-time report.
func (o WtpprofileRadio3Output) SamReportIntv() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *int { return v.SamReportIntv }).(pulumi.IntPtrOutput)
}

// Select WiFi network security type (default = "wpa-personal").
func (o WtpprofileRadio3Output) SamSecurityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamSecurityType }).(pulumi.StringPtrOutput)
}

// SAM test server domain name.
func (o WtpprofileRadio3Output) SamServerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamServerFqdn }).(pulumi.StringPtrOutput)
}

// SAM test server IP address.
func (o WtpprofileRadio3Output) SamServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamServerIp }).(pulumi.StringPtrOutput)
}

// Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
func (o WtpprofileRadio3Output) SamServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamServerType }).(pulumi.StringPtrOutput)
}

// SSID for WiFi network.
func (o WtpprofileRadio3Output) SamSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamSsid }).(pulumi.StringPtrOutput)
}

// Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
func (o WtpprofileRadio3Output) SamTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamTest }).(pulumi.StringPtrOutput)
}

// Username for WiFi network connection.
func (o WtpprofileRadio3Output) SamUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SamUsername }).(pulumi.StringPtrOutput)
}

// Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) ShortGuardInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.ShortGuardInterval }).(pulumi.StringPtrOutput)
}

// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
func (o WtpprofileRadio3Output) SpectrumAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.SpectrumAnalysis }).(pulumi.StringPtrOutput)
}

// Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
func (o WtpprofileRadio3Output) TransmitOptimize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.TransmitOptimize }).(pulumi.StringPtrOutput)
}

// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
func (o WtpprofileRadio3Output) VapAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.VapAll }).(pulumi.StringPtrOutput)
}

// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
func (o WtpprofileRadio3Output) Vaps() WtpprofileRadio3VapArrayOutput {
	return o.ApplyT(func(v WtpprofileRadio3) []WtpprofileRadio3Vap { return v.Vaps }).(WtpprofileRadio3VapArrayOutput)
}

// Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
func (o WtpprofileRadio3Output) WidsProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.WidsProfile }).(pulumi.StringPtrOutput)
}

// Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3Output) ZeroWaitDfs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3) *string { return v.ZeroWaitDfs }).(pulumi.StringPtrOutput)
}

type WtpprofileRadio3PtrOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpprofileRadio3)(nil)).Elem()
}

func (o WtpprofileRadio3PtrOutput) ToWtpprofileRadio3PtrOutput() WtpprofileRadio3PtrOutput {
	return o
}

func (o WtpprofileRadio3PtrOutput) ToWtpprofileRadio3PtrOutputWithContext(ctx context.Context) WtpprofileRadio3PtrOutput {
	return o
}

func (o WtpprofileRadio3PtrOutput) Elem() WtpprofileRadio3Output {
	return o.ApplyT(func(v *WtpprofileRadio3) WtpprofileRadio3 {
		if v != nil {
			return *v
		}
		var ret WtpprofileRadio3
		return ret
	}).(WtpprofileRadio3Output)
}

// Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) AirtimeFairness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.AirtimeFairness
	}).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) Amsdu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.Amsdu
	}).(pulumi.StringPtrOutput)
}

// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) ApHandoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.ApHandoff
	}).(pulumi.StringPtrOutput)
}

// MAC address to monitor.
func (o WtpprofileRadio3PtrOutput) ApSnifferAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferAddr
	}).(pulumi.StringPtrOutput)
}

// Sniffer buffer size (1 - 32 MB, default = 16).
func (o WtpprofileRadio3PtrOutput) ApSnifferBufsize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *int {
		if v == nil {
			return nil
		}
		return v.ApSnifferBufsize
	}).(pulumi.IntPtrOutput)
}

// Channel on which to operate the sniffer (default = 6).
func (o WtpprofileRadio3PtrOutput) ApSnifferChan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *int {
		if v == nil {
			return nil
		}
		return v.ApSnifferChan
	}).(pulumi.IntPtrOutput)
}

// Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) ApSnifferCtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferCtl
	}).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) ApSnifferData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferData
	}).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) ApSnifferMgmtBeacon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferMgmtBeacon
	}).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) ApSnifferMgmtOther() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferMgmtOther
	}).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) ApSnifferMgmtProbe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferMgmtProbe
	}).(pulumi.StringPtrOutput)
}

// Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
func (o WtpprofileRadio3PtrOutput) ArrpProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.ArrpProfile
	}).(pulumi.StringPtrOutput)
}

// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpprofileRadio3PtrOutput) AutoPowerHigh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *int {
		if v == nil {
			return nil
		}
		return v.AutoPowerHigh
	}).(pulumi.IntPtrOutput)
}

// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) AutoPowerLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.AutoPowerLevel
	}).(pulumi.StringPtrOutput)
}

// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpprofileRadio3PtrOutput) AutoPowerLow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *int {
		if v == nil {
			return nil
		}
		return v.AutoPowerLow
	}).(pulumi.IntPtrOutput)
}

// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
func (o WtpprofileRadio3PtrOutput) AutoPowerTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.AutoPowerTarget
	}).(pulumi.StringPtrOutput)
}

// WiFi band that Radio 3 operates on.
func (o WtpprofileRadio3PtrOutput) Band() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.Band
	}).(pulumi.StringPtrOutput)
}

// WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
func (o WtpprofileRadio3PtrOutput) Band5gType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.Band5gType
	}).(pulumi.StringPtrOutput)
}

// Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) BandwidthAdmissionControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.BandwidthAdmissionControl
	}).(pulumi.StringPtrOutput)
}

// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
func (o WtpprofileRadio3PtrOutput) BandwidthCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *int {
		if v == nil {
			return nil
		}
		return v.BandwidthCapacity
	}).(pulumi.IntPtrOutput)
}

// Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
func (o WtpprofileRadio3PtrOutput) BeaconInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *int {
		if v == nil {
			return nil
		}
		return v.BeaconInterval
	}).(pulumi.IntPtrOutput)
}

// BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
func (o WtpprofileRadio3PtrOutput) BssColor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *int {
		if v == nil {
			return nil
		}
		return v.BssColor
	}).(pulumi.IntPtrOutput)
}

// BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
func (o WtpprofileRadio3PtrOutput) BssColorMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.BssColorMode
	}).(pulumi.StringPtrOutput)
}

// Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) CallAdmissionControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.CallAdmissionControl
	}).(pulumi.StringPtrOutput)
}

// Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
func (o WtpprofileRadio3PtrOutput) CallCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *int {
		if v == nil {
			return nil
		}
		return v.CallCapacity
	}).(pulumi.IntPtrOutput)
}

// Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
func (o WtpprofileRadio3PtrOutput) ChannelBonding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.ChannelBonding
	}).(pulumi.StringPtrOutput)
}

// Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) ChannelUtilization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.ChannelUtilization
	}).(pulumi.StringPtrOutput)
}

// Selected list of wireless radio channels. The structure of `channel` block is documented below.
func (o WtpprofileRadio3PtrOutput) Channels() WtpprofileRadio3ChannelArrayOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) []WtpprofileRadio3Channel {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(WtpprofileRadio3ChannelArrayOutput)
}

// Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) Coexistence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.Coexistence
	}).(pulumi.StringPtrOutput)
}

// Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) Darrp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.Darrp
	}).(pulumi.StringPtrOutput)
}

// Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
func (o WtpprofileRadio3PtrOutput) Drma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.Drma
	}).(pulumi.StringPtrOutput)
}

// Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
func (o WtpprofileRadio3PtrOutput) DrmaSensitivity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.DrmaSensitivity
	}).(pulumi.StringPtrOutput)
}

// Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
func (o WtpprofileRadio3PtrOutput) Dtim() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *int {
		if v == nil {
			return nil
		}
		return v.Dtim
	}).(pulumi.IntPtrOutput)
}

// Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
func (o WtpprofileRadio3PtrOutput) FragThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *int {
		if v == nil {
			return nil
		}
		return v.FragThreshold
	}).(pulumi.IntPtrOutput)
}

// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) FrequencyHandoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.FrequencyHandoff
	}).(pulumi.StringPtrOutput)
}

// Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
func (o WtpprofileRadio3PtrOutput) IperfProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.IperfProtocol
	}).(pulumi.StringPtrOutput)
}

// Iperf service port number.
func (o WtpprofileRadio3PtrOutput) IperfServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *int {
		if v == nil {
			return nil
		}
		return v.IperfServerPort
	}).(pulumi.IntPtrOutput)
}

// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
func (o WtpprofileRadio3PtrOutput) MaxClients() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *int {
		if v == nil {
			return nil
		}
		return v.MaxClients
	}).(pulumi.IntPtrOutput)
}

// Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
func (o WtpprofileRadio3PtrOutput) MaxDistance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *int {
		if v == nil {
			return nil
		}
		return v.MaxDistance
	}).(pulumi.IntPtrOutput)
}

// Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
func (o WtpprofileRadio3PtrOutput) MimoMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.MimoMode
	}).(pulumi.StringPtrOutput)
}

// Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
func (o WtpprofileRadio3PtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) N80211d() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.N80211d
	}).(pulumi.StringPtrOutput)
}

// Optional antenna used on FAP (default = none).
func (o WtpprofileRadio3PtrOutput) OptionalAntenna() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.OptionalAntenna
	}).(pulumi.StringPtrOutput)
}

// Optional antenna gain in dBi (0 to 20, default = 0).
func (o WtpprofileRadio3PtrOutput) OptionalAntennaGain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.OptionalAntennaGain
	}).(pulumi.StringPtrOutput)
}

// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
func (o WtpprofileRadio3PtrOutput) PowerLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *int {
		if v == nil {
			return nil
		}
		return v.PowerLevel
	}).(pulumi.IntPtrOutput)
}

// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
func (o WtpprofileRadio3PtrOutput) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.PowerMode
	}).(pulumi.StringPtrOutput)
}

// Radio EIRP power in dBm (1 - 33, default = 27).
func (o WtpprofileRadio3PtrOutput) PowerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *int {
		if v == nil {
			return nil
		}
		return v.PowerValue
	}).(pulumi.IntPtrOutput)
}

// Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
func (o WtpprofileRadio3PtrOutput) PowersaveOptimize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.PowersaveOptimize
	}).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
func (o WtpprofileRadio3PtrOutput) ProtectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionMode
	}).(pulumi.StringPtrOutput)
}

// Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
func (o WtpprofileRadio3PtrOutput) RtsThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *int {
		if v == nil {
			return nil
		}
		return v.RtsThreshold
	}).(pulumi.IntPtrOutput)
}

// BSSID for WiFi network.
func (o WtpprofileRadio3PtrOutput) SamBssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamBssid
	}).(pulumi.StringPtrOutput)
}

// CA certificate for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio3PtrOutput) SamCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamCaCertificate
	}).(pulumi.StringPtrOutput)
}

// Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) SamCaptivePortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamCaptivePortal
	}).(pulumi.StringPtrOutput)
}

// Client certificate for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio3PtrOutput) SamClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamClientCertificate
	}).(pulumi.StringPtrOutput)
}

// Failure identification on the page after an incorrect login.
func (o WtpprofileRadio3PtrOutput) SamCwpFailureString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpFailureString
	}).(pulumi.StringPtrOutput)
}

// Identification string from the captive portal login form.
func (o WtpprofileRadio3PtrOutput) SamCwpMatchString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpMatchString
	}).(pulumi.StringPtrOutput)
}

// Password for captive portal authentication.
func (o WtpprofileRadio3PtrOutput) SamCwpPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpPassword
	}).(pulumi.StringPtrOutput)
}

// Success identification on the page after a successful login.
func (o WtpprofileRadio3PtrOutput) SamCwpSuccessString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpSuccessString
	}).(pulumi.StringPtrOutput)
}

// Website the client is trying to access.
func (o WtpprofileRadio3PtrOutput) SamCwpTestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpTestUrl
	}).(pulumi.StringPtrOutput)
}

// Username for captive portal authentication.
func (o WtpprofileRadio3PtrOutput) SamCwpUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpUsername
	}).(pulumi.StringPtrOutput)
}

// Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
func (o WtpprofileRadio3PtrOutput) SamEapMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamEapMethod
	}).(pulumi.StringPtrOutput)
}

// Passphrase for WiFi network connection.
func (o WtpprofileRadio3PtrOutput) SamPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamPassword
	}).(pulumi.StringPtrOutput)
}

// Private key for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio3PtrOutput) SamPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamPrivateKey
	}).(pulumi.StringPtrOutput)
}

// Password for private key file for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio3PtrOutput) SamPrivateKeyPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamPrivateKeyPassword
	}).(pulumi.StringPtrOutput)
}

// SAM report interval (sec), 0 for a one-time report.
func (o WtpprofileRadio3PtrOutput) SamReportIntv() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *int {
		if v == nil {
			return nil
		}
		return v.SamReportIntv
	}).(pulumi.IntPtrOutput)
}

// Select WiFi network security type (default = "wpa-personal").
func (o WtpprofileRadio3PtrOutput) SamSecurityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamSecurityType
	}).(pulumi.StringPtrOutput)
}

// SAM test server domain name.
func (o WtpprofileRadio3PtrOutput) SamServerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamServerFqdn
	}).(pulumi.StringPtrOutput)
}

// SAM test server IP address.
func (o WtpprofileRadio3PtrOutput) SamServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamServerIp
	}).(pulumi.StringPtrOutput)
}

// Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
func (o WtpprofileRadio3PtrOutput) SamServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamServerType
	}).(pulumi.StringPtrOutput)
}

// SSID for WiFi network.
func (o WtpprofileRadio3PtrOutput) SamSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamSsid
	}).(pulumi.StringPtrOutput)
}

// Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
func (o WtpprofileRadio3PtrOutput) SamTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamTest
	}).(pulumi.StringPtrOutput)
}

// Username for WiFi network connection.
func (o WtpprofileRadio3PtrOutput) SamUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SamUsername
	}).(pulumi.StringPtrOutput)
}

// Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) ShortGuardInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.ShortGuardInterval
	}).(pulumi.StringPtrOutput)
}

// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
func (o WtpprofileRadio3PtrOutput) SpectrumAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.SpectrumAnalysis
	}).(pulumi.StringPtrOutput)
}

// Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
func (o WtpprofileRadio3PtrOutput) TransmitOptimize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.TransmitOptimize
	}).(pulumi.StringPtrOutput)
}

// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
func (o WtpprofileRadio3PtrOutput) VapAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.VapAll
	}).(pulumi.StringPtrOutput)
}

// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
func (o WtpprofileRadio3PtrOutput) Vaps() WtpprofileRadio3VapArrayOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) []WtpprofileRadio3Vap {
		if v == nil {
			return nil
		}
		return v.Vaps
	}).(WtpprofileRadio3VapArrayOutput)
}

// Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
func (o WtpprofileRadio3PtrOutput) WidsProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.WidsProfile
	}).(pulumi.StringPtrOutput)
}

// Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio3PtrOutput) ZeroWaitDfs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio3) *string {
		if v == nil {
			return nil
		}
		return v.ZeroWaitDfs
	}).(pulumi.StringPtrOutput)
}

type WtpprofileRadio3Channel struct {
	// Channel number.
	Chan *string `pulumi:"chan"`
}

// WtpprofileRadio3ChannelInput is an input type that accepts WtpprofileRadio3ChannelArgs and WtpprofileRadio3ChannelOutput values.
// You can construct a concrete instance of `WtpprofileRadio3ChannelInput` via:
//
//	WtpprofileRadio3ChannelArgs{...}
type WtpprofileRadio3ChannelInput interface {
	pulumi.Input

	ToWtpprofileRadio3ChannelOutput() WtpprofileRadio3ChannelOutput
	ToWtpprofileRadio3ChannelOutputWithContext(context.Context) WtpprofileRadio3ChannelOutput
}

type WtpprofileRadio3ChannelArgs struct {
	// Channel number.
	Chan pulumi.StringPtrInput `pulumi:"chan"`
}

func (WtpprofileRadio3ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio3Channel)(nil)).Elem()
}

func (i WtpprofileRadio3ChannelArgs) ToWtpprofileRadio3ChannelOutput() WtpprofileRadio3ChannelOutput {
	return i.ToWtpprofileRadio3ChannelOutputWithContext(context.Background())
}

func (i WtpprofileRadio3ChannelArgs) ToWtpprofileRadio3ChannelOutputWithContext(ctx context.Context) WtpprofileRadio3ChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio3ChannelOutput)
}

// WtpprofileRadio3ChannelArrayInput is an input type that accepts WtpprofileRadio3ChannelArray and WtpprofileRadio3ChannelArrayOutput values.
// You can construct a concrete instance of `WtpprofileRadio3ChannelArrayInput` via:
//
//	WtpprofileRadio3ChannelArray{ WtpprofileRadio3ChannelArgs{...} }
type WtpprofileRadio3ChannelArrayInput interface {
	pulumi.Input

	ToWtpprofileRadio3ChannelArrayOutput() WtpprofileRadio3ChannelArrayOutput
	ToWtpprofileRadio3ChannelArrayOutputWithContext(context.Context) WtpprofileRadio3ChannelArrayOutput
}

type WtpprofileRadio3ChannelArray []WtpprofileRadio3ChannelInput

func (WtpprofileRadio3ChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileRadio3Channel)(nil)).Elem()
}

func (i WtpprofileRadio3ChannelArray) ToWtpprofileRadio3ChannelArrayOutput() WtpprofileRadio3ChannelArrayOutput {
	return i.ToWtpprofileRadio3ChannelArrayOutputWithContext(context.Background())
}

func (i WtpprofileRadio3ChannelArray) ToWtpprofileRadio3ChannelArrayOutputWithContext(ctx context.Context) WtpprofileRadio3ChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio3ChannelArrayOutput)
}

type WtpprofileRadio3ChannelOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio3ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio3Channel)(nil)).Elem()
}

func (o WtpprofileRadio3ChannelOutput) ToWtpprofileRadio3ChannelOutput() WtpprofileRadio3ChannelOutput {
	return o
}

func (o WtpprofileRadio3ChannelOutput) ToWtpprofileRadio3ChannelOutputWithContext(ctx context.Context) WtpprofileRadio3ChannelOutput {
	return o
}

// Channel number.
func (o WtpprofileRadio3ChannelOutput) Chan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3Channel) *string { return v.Chan }).(pulumi.StringPtrOutput)
}

type WtpprofileRadio3ChannelArrayOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio3ChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileRadio3Channel)(nil)).Elem()
}

func (o WtpprofileRadio3ChannelArrayOutput) ToWtpprofileRadio3ChannelArrayOutput() WtpprofileRadio3ChannelArrayOutput {
	return o
}

func (o WtpprofileRadio3ChannelArrayOutput) ToWtpprofileRadio3ChannelArrayOutputWithContext(ctx context.Context) WtpprofileRadio3ChannelArrayOutput {
	return o
}

func (o WtpprofileRadio3ChannelArrayOutput) Index(i pulumi.IntInput) WtpprofileRadio3ChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpprofileRadio3Channel {
		return vs[0].([]WtpprofileRadio3Channel)[vs[1].(int)]
	}).(WtpprofileRadio3ChannelOutput)
}

type WtpprofileRadio3Vap struct {
	// Virtual Access Point (VAP) name.
	Name *string `pulumi:"name"`
}

// WtpprofileRadio3VapInput is an input type that accepts WtpprofileRadio3VapArgs and WtpprofileRadio3VapOutput values.
// You can construct a concrete instance of `WtpprofileRadio3VapInput` via:
//
//	WtpprofileRadio3VapArgs{...}
type WtpprofileRadio3VapInput interface {
	pulumi.Input

	ToWtpprofileRadio3VapOutput() WtpprofileRadio3VapOutput
	ToWtpprofileRadio3VapOutputWithContext(context.Context) WtpprofileRadio3VapOutput
}

type WtpprofileRadio3VapArgs struct {
	// Virtual Access Point (VAP) name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (WtpprofileRadio3VapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio3Vap)(nil)).Elem()
}

func (i WtpprofileRadio3VapArgs) ToWtpprofileRadio3VapOutput() WtpprofileRadio3VapOutput {
	return i.ToWtpprofileRadio3VapOutputWithContext(context.Background())
}

func (i WtpprofileRadio3VapArgs) ToWtpprofileRadio3VapOutputWithContext(ctx context.Context) WtpprofileRadio3VapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio3VapOutput)
}

// WtpprofileRadio3VapArrayInput is an input type that accepts WtpprofileRadio3VapArray and WtpprofileRadio3VapArrayOutput values.
// You can construct a concrete instance of `WtpprofileRadio3VapArrayInput` via:
//
//	WtpprofileRadio3VapArray{ WtpprofileRadio3VapArgs{...} }
type WtpprofileRadio3VapArrayInput interface {
	pulumi.Input

	ToWtpprofileRadio3VapArrayOutput() WtpprofileRadio3VapArrayOutput
	ToWtpprofileRadio3VapArrayOutputWithContext(context.Context) WtpprofileRadio3VapArrayOutput
}

type WtpprofileRadio3VapArray []WtpprofileRadio3VapInput

func (WtpprofileRadio3VapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileRadio3Vap)(nil)).Elem()
}

func (i WtpprofileRadio3VapArray) ToWtpprofileRadio3VapArrayOutput() WtpprofileRadio3VapArrayOutput {
	return i.ToWtpprofileRadio3VapArrayOutputWithContext(context.Background())
}

func (i WtpprofileRadio3VapArray) ToWtpprofileRadio3VapArrayOutputWithContext(ctx context.Context) WtpprofileRadio3VapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio3VapArrayOutput)
}

type WtpprofileRadio3VapOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio3VapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio3Vap)(nil)).Elem()
}

func (o WtpprofileRadio3VapOutput) ToWtpprofileRadio3VapOutput() WtpprofileRadio3VapOutput {
	return o
}

func (o WtpprofileRadio3VapOutput) ToWtpprofileRadio3VapOutputWithContext(ctx context.Context) WtpprofileRadio3VapOutput {
	return o
}

// Virtual Access Point (VAP) name.
func (o WtpprofileRadio3VapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio3Vap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type WtpprofileRadio3VapArrayOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio3VapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileRadio3Vap)(nil)).Elem()
}

func (o WtpprofileRadio3VapArrayOutput) ToWtpprofileRadio3VapArrayOutput() WtpprofileRadio3VapArrayOutput {
	return o
}

func (o WtpprofileRadio3VapArrayOutput) ToWtpprofileRadio3VapArrayOutputWithContext(ctx context.Context) WtpprofileRadio3VapArrayOutput {
	return o
}

func (o WtpprofileRadio3VapArrayOutput) Index(i pulumi.IntInput) WtpprofileRadio3VapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpprofileRadio3Vap {
		return vs[0].([]WtpprofileRadio3Vap)[vs[1].(int)]
	}).(WtpprofileRadio3VapOutput)
}

type WtpprofileRadio4 struct {
	// Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
	AirtimeFairness *string `pulumi:"airtimeFairness"`
	// Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
	Amsdu *string `pulumi:"amsdu"`
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff *string `pulumi:"apHandoff"`
	// MAC address to monitor.
	ApSnifferAddr *string `pulumi:"apSnifferAddr"`
	// Sniffer buffer size (1 - 32 MB, default = 16).
	ApSnifferBufsize *int `pulumi:"apSnifferBufsize"`
	// Channel on which to operate the sniffer (default = 6).
	ApSnifferChan *int `pulumi:"apSnifferChan"`
	// Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
	ApSnifferCtl *string `pulumi:"apSnifferCtl"`
	// Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
	ApSnifferData *string `pulumi:"apSnifferData"`
	// Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtBeacon *string `pulumi:"apSnifferMgmtBeacon"`
	// Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtOther *string `pulumi:"apSnifferMgmtOther"`
	// Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtProbe *string `pulumi:"apSnifferMgmtProbe"`
	// Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
	ArrpProfile *string `pulumi:"arrpProfile"`
	// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerHigh *int `pulumi:"autoPowerHigh"`
	// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
	AutoPowerLevel *string `pulumi:"autoPowerLevel"`
	// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerLow *int `pulumi:"autoPowerLow"`
	// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
	AutoPowerTarget *string `pulumi:"autoPowerTarget"`
	// WiFi band that Radio 3 operates on.
	Band *string `pulumi:"band"`
	// WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
	Band5gType *string `pulumi:"band5gType"`
	// Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
	BandwidthAdmissionControl *string `pulumi:"bandwidthAdmissionControl"`
	// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
	BandwidthCapacity *int `pulumi:"bandwidthCapacity"`
	// Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
	BeaconInterval *int `pulumi:"beaconInterval"`
	// BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
	BssColor *int `pulumi:"bssColor"`
	// BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
	BssColorMode *string `pulumi:"bssColorMode"`
	// Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
	CallAdmissionControl *string `pulumi:"callAdmissionControl"`
	// Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
	CallCapacity *int `pulumi:"callCapacity"`
	// Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
	ChannelBonding *string `pulumi:"channelBonding"`
	// Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
	ChannelUtilization *string `pulumi:"channelUtilization"`
	// Selected list of wireless radio channels. The structure of `channel` block is documented below.
	Channels []WtpprofileRadio4Channel `pulumi:"channels"`
	// Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
	Coexistence *string `pulumi:"coexistence"`
	// Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
	Darrp *string `pulumi:"darrp"`
	// Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
	Drma *string `pulumi:"drma"`
	// Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
	DrmaSensitivity *string `pulumi:"drmaSensitivity"`
	// Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
	Dtim *int `pulumi:"dtim"`
	// Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
	FragThreshold *int `pulumi:"fragThreshold"`
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff *string `pulumi:"frequencyHandoff"`
	// Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
	IperfProtocol *string `pulumi:"iperfProtocol"`
	// Iperf service port number.
	IperfServerPort *int `pulumi:"iperfServerPort"`
	// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
	MaxClients *int `pulumi:"maxClients"`
	// Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
	MaxDistance *int `pulumi:"maxDistance"`
	// Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
	MimoMode *string `pulumi:"mimoMode"`
	// Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
	Mode *string `pulumi:"mode"`
	// Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
	N80211d *string `pulumi:"n80211d"`
	// Optional antenna used on FAP (default = none).
	OptionalAntenna *string `pulumi:"optionalAntenna"`
	// Optional antenna gain in dBi (0 to 20, default = 0).
	OptionalAntennaGain *string `pulumi:"optionalAntennaGain"`
	// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
	PowerLevel *int `pulumi:"powerLevel"`
	// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
	PowerMode *string `pulumi:"powerMode"`
	// Radio EIRP power in dBm (1 - 33, default = 27).
	PowerValue *int `pulumi:"powerValue"`
	// Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
	PowersaveOptimize *string `pulumi:"powersaveOptimize"`
	// Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
	ProtectionMode *string `pulumi:"protectionMode"`
	// Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
	RtsThreshold *int `pulumi:"rtsThreshold"`
	// BSSID for WiFi network.
	SamBssid *string `pulumi:"samBssid"`
	// CA certificate for WPA2/WPA3-ENTERPRISE.
	SamCaCertificate *string `pulumi:"samCaCertificate"`
	// Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
	SamCaptivePortal *string `pulumi:"samCaptivePortal"`
	// Client certificate for WPA2/WPA3-ENTERPRISE.
	SamClientCertificate *string `pulumi:"samClientCertificate"`
	// Failure identification on the page after an incorrect login.
	SamCwpFailureString *string `pulumi:"samCwpFailureString"`
	// Identification string from the captive portal login form.
	SamCwpMatchString *string `pulumi:"samCwpMatchString"`
	// Password for captive portal authentication.
	SamCwpPassword *string `pulumi:"samCwpPassword"`
	// Success identification on the page after a successful login.
	SamCwpSuccessString *string `pulumi:"samCwpSuccessString"`
	// Website the client is trying to access.
	SamCwpTestUrl *string `pulumi:"samCwpTestUrl"`
	// Username for captive portal authentication.
	SamCwpUsername *string `pulumi:"samCwpUsername"`
	// Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
	SamEapMethod *string `pulumi:"samEapMethod"`
	// Passphrase for WiFi network connection.
	SamPassword *string `pulumi:"samPassword"`
	// Private key for WPA2/WPA3-ENTERPRISE.
	SamPrivateKey *string `pulumi:"samPrivateKey"`
	// Password for private key file for WPA2/WPA3-ENTERPRISE.
	SamPrivateKeyPassword *string `pulumi:"samPrivateKeyPassword"`
	// SAM report interval (sec), 0 for a one-time report.
	SamReportIntv *int `pulumi:"samReportIntv"`
	// Select WiFi network security type (default = "wpa-personal").
	SamSecurityType *string `pulumi:"samSecurityType"`
	// SAM test server domain name.
	SamServerFqdn *string `pulumi:"samServerFqdn"`
	// SAM test server IP address.
	SamServerIp *string `pulumi:"samServerIp"`
	// Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
	SamServerType *string `pulumi:"samServerType"`
	// SSID for WiFi network.
	SamSsid *string `pulumi:"samSsid"`
	// Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
	SamTest *string `pulumi:"samTest"`
	// Username for WiFi network connection.
	SamUsername *string `pulumi:"samUsername"`
	// Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
	ShortGuardInterval *string `pulumi:"shortGuardInterval"`
	// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
	SpectrumAnalysis *string `pulumi:"spectrumAnalysis"`
	// Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
	TransmitOptimize *string `pulumi:"transmitOptimize"`
	// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
	VapAll *string `pulumi:"vapAll"`
	// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
	Vaps []WtpprofileRadio4Vap `pulumi:"vaps"`
	// Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
	WidsProfile *string `pulumi:"widsProfile"`
	// Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
	ZeroWaitDfs *string `pulumi:"zeroWaitDfs"`
}

// WtpprofileRadio4Input is an input type that accepts WtpprofileRadio4Args and WtpprofileRadio4Output values.
// You can construct a concrete instance of `WtpprofileRadio4Input` via:
//
//	WtpprofileRadio4Args{...}
type WtpprofileRadio4Input interface {
	pulumi.Input

	ToWtpprofileRadio4Output() WtpprofileRadio4Output
	ToWtpprofileRadio4OutputWithContext(context.Context) WtpprofileRadio4Output
}

type WtpprofileRadio4Args struct {
	// Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
	AirtimeFairness pulumi.StringPtrInput `pulumi:"airtimeFairness"`
	// Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
	Amsdu pulumi.StringPtrInput `pulumi:"amsdu"`
	// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
	ApHandoff pulumi.StringPtrInput `pulumi:"apHandoff"`
	// MAC address to monitor.
	ApSnifferAddr pulumi.StringPtrInput `pulumi:"apSnifferAddr"`
	// Sniffer buffer size (1 - 32 MB, default = 16).
	ApSnifferBufsize pulumi.IntPtrInput `pulumi:"apSnifferBufsize"`
	// Channel on which to operate the sniffer (default = 6).
	ApSnifferChan pulumi.IntPtrInput `pulumi:"apSnifferChan"`
	// Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
	ApSnifferCtl pulumi.StringPtrInput `pulumi:"apSnifferCtl"`
	// Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
	ApSnifferData pulumi.StringPtrInput `pulumi:"apSnifferData"`
	// Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtBeacon pulumi.StringPtrInput `pulumi:"apSnifferMgmtBeacon"`
	// Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtOther pulumi.StringPtrInput `pulumi:"apSnifferMgmtOther"`
	// Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
	ApSnifferMgmtProbe pulumi.StringPtrInput `pulumi:"apSnifferMgmtProbe"`
	// Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
	ArrpProfile pulumi.StringPtrInput `pulumi:"arrpProfile"`
	// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerHigh pulumi.IntPtrInput `pulumi:"autoPowerHigh"`
	// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
	AutoPowerLevel pulumi.StringPtrInput `pulumi:"autoPowerLevel"`
	// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
	AutoPowerLow pulumi.IntPtrInput `pulumi:"autoPowerLow"`
	// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
	AutoPowerTarget pulumi.StringPtrInput `pulumi:"autoPowerTarget"`
	// WiFi band that Radio 3 operates on.
	Band pulumi.StringPtrInput `pulumi:"band"`
	// WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
	Band5gType pulumi.StringPtrInput `pulumi:"band5gType"`
	// Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
	BandwidthAdmissionControl pulumi.StringPtrInput `pulumi:"bandwidthAdmissionControl"`
	// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
	BandwidthCapacity pulumi.IntPtrInput `pulumi:"bandwidthCapacity"`
	// Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
	BeaconInterval pulumi.IntPtrInput `pulumi:"beaconInterval"`
	// BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
	BssColor pulumi.IntPtrInput `pulumi:"bssColor"`
	// BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
	BssColorMode pulumi.StringPtrInput `pulumi:"bssColorMode"`
	// Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
	CallAdmissionControl pulumi.StringPtrInput `pulumi:"callAdmissionControl"`
	// Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
	CallCapacity pulumi.IntPtrInput `pulumi:"callCapacity"`
	// Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
	ChannelBonding pulumi.StringPtrInput `pulumi:"channelBonding"`
	// Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
	ChannelUtilization pulumi.StringPtrInput `pulumi:"channelUtilization"`
	// Selected list of wireless radio channels. The structure of `channel` block is documented below.
	Channels WtpprofileRadio4ChannelArrayInput `pulumi:"channels"`
	// Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
	Coexistence pulumi.StringPtrInput `pulumi:"coexistence"`
	// Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
	Darrp pulumi.StringPtrInput `pulumi:"darrp"`
	// Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
	Drma pulumi.StringPtrInput `pulumi:"drma"`
	// Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
	DrmaSensitivity pulumi.StringPtrInput `pulumi:"drmaSensitivity"`
	// Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
	Dtim pulumi.IntPtrInput `pulumi:"dtim"`
	// Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
	FragThreshold pulumi.IntPtrInput `pulumi:"fragThreshold"`
	// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
	FrequencyHandoff pulumi.StringPtrInput `pulumi:"frequencyHandoff"`
	// Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
	IperfProtocol pulumi.StringPtrInput `pulumi:"iperfProtocol"`
	// Iperf service port number.
	IperfServerPort pulumi.IntPtrInput `pulumi:"iperfServerPort"`
	// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
	MaxClients pulumi.IntPtrInput `pulumi:"maxClients"`
	// Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
	MaxDistance pulumi.IntPtrInput `pulumi:"maxDistance"`
	// Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
	MimoMode pulumi.StringPtrInput `pulumi:"mimoMode"`
	// Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
	N80211d pulumi.StringPtrInput `pulumi:"n80211d"`
	// Optional antenna used on FAP (default = none).
	OptionalAntenna pulumi.StringPtrInput `pulumi:"optionalAntenna"`
	// Optional antenna gain in dBi (0 to 20, default = 0).
	OptionalAntennaGain pulumi.StringPtrInput `pulumi:"optionalAntennaGain"`
	// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
	PowerLevel pulumi.IntPtrInput `pulumi:"powerLevel"`
	// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
	PowerMode pulumi.StringPtrInput `pulumi:"powerMode"`
	// Radio EIRP power in dBm (1 - 33, default = 27).
	PowerValue pulumi.IntPtrInput `pulumi:"powerValue"`
	// Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
	PowersaveOptimize pulumi.StringPtrInput `pulumi:"powersaveOptimize"`
	// Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
	ProtectionMode pulumi.StringPtrInput `pulumi:"protectionMode"`
	// Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
	RtsThreshold pulumi.IntPtrInput `pulumi:"rtsThreshold"`
	// BSSID for WiFi network.
	SamBssid pulumi.StringPtrInput `pulumi:"samBssid"`
	// CA certificate for WPA2/WPA3-ENTERPRISE.
	SamCaCertificate pulumi.StringPtrInput `pulumi:"samCaCertificate"`
	// Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
	SamCaptivePortal pulumi.StringPtrInput `pulumi:"samCaptivePortal"`
	// Client certificate for WPA2/WPA3-ENTERPRISE.
	SamClientCertificate pulumi.StringPtrInput `pulumi:"samClientCertificate"`
	// Failure identification on the page after an incorrect login.
	SamCwpFailureString pulumi.StringPtrInput `pulumi:"samCwpFailureString"`
	// Identification string from the captive portal login form.
	SamCwpMatchString pulumi.StringPtrInput `pulumi:"samCwpMatchString"`
	// Password for captive portal authentication.
	SamCwpPassword pulumi.StringPtrInput `pulumi:"samCwpPassword"`
	// Success identification on the page after a successful login.
	SamCwpSuccessString pulumi.StringPtrInput `pulumi:"samCwpSuccessString"`
	// Website the client is trying to access.
	SamCwpTestUrl pulumi.StringPtrInput `pulumi:"samCwpTestUrl"`
	// Username for captive portal authentication.
	SamCwpUsername pulumi.StringPtrInput `pulumi:"samCwpUsername"`
	// Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
	SamEapMethod pulumi.StringPtrInput `pulumi:"samEapMethod"`
	// Passphrase for WiFi network connection.
	SamPassword pulumi.StringPtrInput `pulumi:"samPassword"`
	// Private key for WPA2/WPA3-ENTERPRISE.
	SamPrivateKey pulumi.StringPtrInput `pulumi:"samPrivateKey"`
	// Password for private key file for WPA2/WPA3-ENTERPRISE.
	SamPrivateKeyPassword pulumi.StringPtrInput `pulumi:"samPrivateKeyPassword"`
	// SAM report interval (sec), 0 for a one-time report.
	SamReportIntv pulumi.IntPtrInput `pulumi:"samReportIntv"`
	// Select WiFi network security type (default = "wpa-personal").
	SamSecurityType pulumi.StringPtrInput `pulumi:"samSecurityType"`
	// SAM test server domain name.
	SamServerFqdn pulumi.StringPtrInput `pulumi:"samServerFqdn"`
	// SAM test server IP address.
	SamServerIp pulumi.StringPtrInput `pulumi:"samServerIp"`
	// Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
	SamServerType pulumi.StringPtrInput `pulumi:"samServerType"`
	// SSID for WiFi network.
	SamSsid pulumi.StringPtrInput `pulumi:"samSsid"`
	// Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
	SamTest pulumi.StringPtrInput `pulumi:"samTest"`
	// Username for WiFi network connection.
	SamUsername pulumi.StringPtrInput `pulumi:"samUsername"`
	// Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
	ShortGuardInterval pulumi.StringPtrInput `pulumi:"shortGuardInterval"`
	// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
	SpectrumAnalysis pulumi.StringPtrInput `pulumi:"spectrumAnalysis"`
	// Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
	TransmitOptimize pulumi.StringPtrInput `pulumi:"transmitOptimize"`
	// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
	VapAll pulumi.StringPtrInput `pulumi:"vapAll"`
	// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
	Vaps WtpprofileRadio4VapArrayInput `pulumi:"vaps"`
	// Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
	WidsProfile pulumi.StringPtrInput `pulumi:"widsProfile"`
	// Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
	ZeroWaitDfs pulumi.StringPtrInput `pulumi:"zeroWaitDfs"`
}

func (WtpprofileRadio4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio4)(nil)).Elem()
}

func (i WtpprofileRadio4Args) ToWtpprofileRadio4Output() WtpprofileRadio4Output {
	return i.ToWtpprofileRadio4OutputWithContext(context.Background())
}

func (i WtpprofileRadio4Args) ToWtpprofileRadio4OutputWithContext(ctx context.Context) WtpprofileRadio4Output {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio4Output)
}

func (i WtpprofileRadio4Args) ToWtpprofileRadio4PtrOutput() WtpprofileRadio4PtrOutput {
	return i.ToWtpprofileRadio4PtrOutputWithContext(context.Background())
}

func (i WtpprofileRadio4Args) ToWtpprofileRadio4PtrOutputWithContext(ctx context.Context) WtpprofileRadio4PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio4Output).ToWtpprofileRadio4PtrOutputWithContext(ctx)
}

// WtpprofileRadio4PtrInput is an input type that accepts WtpprofileRadio4Args, WtpprofileRadio4Ptr and WtpprofileRadio4PtrOutput values.
// You can construct a concrete instance of `WtpprofileRadio4PtrInput` via:
//
//	        WtpprofileRadio4Args{...}
//
//	or:
//
//	        nil
type WtpprofileRadio4PtrInput interface {
	pulumi.Input

	ToWtpprofileRadio4PtrOutput() WtpprofileRadio4PtrOutput
	ToWtpprofileRadio4PtrOutputWithContext(context.Context) WtpprofileRadio4PtrOutput
}

type wtpprofileRadio4PtrType WtpprofileRadio4Args

func WtpprofileRadio4Ptr(v *WtpprofileRadio4Args) WtpprofileRadio4PtrInput {
	return (*wtpprofileRadio4PtrType)(v)
}

func (*wtpprofileRadio4PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpprofileRadio4)(nil)).Elem()
}

func (i *wtpprofileRadio4PtrType) ToWtpprofileRadio4PtrOutput() WtpprofileRadio4PtrOutput {
	return i.ToWtpprofileRadio4PtrOutputWithContext(context.Background())
}

func (i *wtpprofileRadio4PtrType) ToWtpprofileRadio4PtrOutputWithContext(ctx context.Context) WtpprofileRadio4PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio4PtrOutput)
}

type WtpprofileRadio4Output struct{ *pulumi.OutputState }

func (WtpprofileRadio4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio4)(nil)).Elem()
}

func (o WtpprofileRadio4Output) ToWtpprofileRadio4Output() WtpprofileRadio4Output {
	return o
}

func (o WtpprofileRadio4Output) ToWtpprofileRadio4OutputWithContext(ctx context.Context) WtpprofileRadio4Output {
	return o
}

func (o WtpprofileRadio4Output) ToWtpprofileRadio4PtrOutput() WtpprofileRadio4PtrOutput {
	return o.ToWtpprofileRadio4PtrOutputWithContext(context.Background())
}

func (o WtpprofileRadio4Output) ToWtpprofileRadio4PtrOutputWithContext(ctx context.Context) WtpprofileRadio4PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WtpprofileRadio4) *WtpprofileRadio4 {
		return &v
	}).(WtpprofileRadio4PtrOutput)
}

// Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) AirtimeFairness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.AirtimeFairness }).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) Amsdu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.Amsdu }).(pulumi.StringPtrOutput)
}

// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) ApHandoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.ApHandoff }).(pulumi.StringPtrOutput)
}

// MAC address to monitor.
func (o WtpprofileRadio4Output) ApSnifferAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.ApSnifferAddr }).(pulumi.StringPtrOutput)
}

// Sniffer buffer size (1 - 32 MB, default = 16).
func (o WtpprofileRadio4Output) ApSnifferBufsize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *int { return v.ApSnifferBufsize }).(pulumi.IntPtrOutput)
}

// Channel on which to operate the sniffer (default = 6).
func (o WtpprofileRadio4Output) ApSnifferChan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *int { return v.ApSnifferChan }).(pulumi.IntPtrOutput)
}

// Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) ApSnifferCtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.ApSnifferCtl }).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) ApSnifferData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.ApSnifferData }).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) ApSnifferMgmtBeacon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.ApSnifferMgmtBeacon }).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) ApSnifferMgmtOther() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.ApSnifferMgmtOther }).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) ApSnifferMgmtProbe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.ApSnifferMgmtProbe }).(pulumi.StringPtrOutput)
}

// Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
func (o WtpprofileRadio4Output) ArrpProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.ArrpProfile }).(pulumi.StringPtrOutput)
}

// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpprofileRadio4Output) AutoPowerHigh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *int { return v.AutoPowerHigh }).(pulumi.IntPtrOutput)
}

// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) AutoPowerLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.AutoPowerLevel }).(pulumi.StringPtrOutput)
}

// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpprofileRadio4Output) AutoPowerLow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *int { return v.AutoPowerLow }).(pulumi.IntPtrOutput)
}

// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
func (o WtpprofileRadio4Output) AutoPowerTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.AutoPowerTarget }).(pulumi.StringPtrOutput)
}

// WiFi band that Radio 3 operates on.
func (o WtpprofileRadio4Output) Band() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.Band }).(pulumi.StringPtrOutput)
}

// WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
func (o WtpprofileRadio4Output) Band5gType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.Band5gType }).(pulumi.StringPtrOutput)
}

// Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) BandwidthAdmissionControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.BandwidthAdmissionControl }).(pulumi.StringPtrOutput)
}

// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
func (o WtpprofileRadio4Output) BandwidthCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *int { return v.BandwidthCapacity }).(pulumi.IntPtrOutput)
}

// Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
func (o WtpprofileRadio4Output) BeaconInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *int { return v.BeaconInterval }).(pulumi.IntPtrOutput)
}

// BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
func (o WtpprofileRadio4Output) BssColor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *int { return v.BssColor }).(pulumi.IntPtrOutput)
}

// BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
func (o WtpprofileRadio4Output) BssColorMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.BssColorMode }).(pulumi.StringPtrOutput)
}

// Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) CallAdmissionControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.CallAdmissionControl }).(pulumi.StringPtrOutput)
}

// Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
func (o WtpprofileRadio4Output) CallCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *int { return v.CallCapacity }).(pulumi.IntPtrOutput)
}

// Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
func (o WtpprofileRadio4Output) ChannelBonding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.ChannelBonding }).(pulumi.StringPtrOutput)
}

// Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) ChannelUtilization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.ChannelUtilization }).(pulumi.StringPtrOutput)
}

// Selected list of wireless radio channels. The structure of `channel` block is documented below.
func (o WtpprofileRadio4Output) Channels() WtpprofileRadio4ChannelArrayOutput {
	return o.ApplyT(func(v WtpprofileRadio4) []WtpprofileRadio4Channel { return v.Channels }).(WtpprofileRadio4ChannelArrayOutput)
}

// Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) Coexistence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.Coexistence }).(pulumi.StringPtrOutput)
}

// Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) Darrp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.Darrp }).(pulumi.StringPtrOutput)
}

// Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
func (o WtpprofileRadio4Output) Drma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.Drma }).(pulumi.StringPtrOutput)
}

// Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
func (o WtpprofileRadio4Output) DrmaSensitivity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.DrmaSensitivity }).(pulumi.StringPtrOutput)
}

// Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
func (o WtpprofileRadio4Output) Dtim() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *int { return v.Dtim }).(pulumi.IntPtrOutput)
}

// Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
func (o WtpprofileRadio4Output) FragThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *int { return v.FragThreshold }).(pulumi.IntPtrOutput)
}

// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) FrequencyHandoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.FrequencyHandoff }).(pulumi.StringPtrOutput)
}

// Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
func (o WtpprofileRadio4Output) IperfProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.IperfProtocol }).(pulumi.StringPtrOutput)
}

// Iperf service port number.
func (o WtpprofileRadio4Output) IperfServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *int { return v.IperfServerPort }).(pulumi.IntPtrOutput)
}

// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
func (o WtpprofileRadio4Output) MaxClients() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *int { return v.MaxClients }).(pulumi.IntPtrOutput)
}

// Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
func (o WtpprofileRadio4Output) MaxDistance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *int { return v.MaxDistance }).(pulumi.IntPtrOutput)
}

// Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
func (o WtpprofileRadio4Output) MimoMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.MimoMode }).(pulumi.StringPtrOutput)
}

// Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
func (o WtpprofileRadio4Output) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) N80211d() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.N80211d }).(pulumi.StringPtrOutput)
}

// Optional antenna used on FAP (default = none).
func (o WtpprofileRadio4Output) OptionalAntenna() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.OptionalAntenna }).(pulumi.StringPtrOutput)
}

// Optional antenna gain in dBi (0 to 20, default = 0).
func (o WtpprofileRadio4Output) OptionalAntennaGain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.OptionalAntennaGain }).(pulumi.StringPtrOutput)
}

// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
func (o WtpprofileRadio4Output) PowerLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *int { return v.PowerLevel }).(pulumi.IntPtrOutput)
}

// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
func (o WtpprofileRadio4Output) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.PowerMode }).(pulumi.StringPtrOutput)
}

// Radio EIRP power in dBm (1 - 33, default = 27).
func (o WtpprofileRadio4Output) PowerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *int { return v.PowerValue }).(pulumi.IntPtrOutput)
}

// Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
func (o WtpprofileRadio4Output) PowersaveOptimize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.PowersaveOptimize }).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
func (o WtpprofileRadio4Output) ProtectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.ProtectionMode }).(pulumi.StringPtrOutput)
}

// Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
func (o WtpprofileRadio4Output) RtsThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *int { return v.RtsThreshold }).(pulumi.IntPtrOutput)
}

// BSSID for WiFi network.
func (o WtpprofileRadio4Output) SamBssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamBssid }).(pulumi.StringPtrOutput)
}

// CA certificate for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio4Output) SamCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamCaCertificate }).(pulumi.StringPtrOutput)
}

// Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) SamCaptivePortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamCaptivePortal }).(pulumi.StringPtrOutput)
}

// Client certificate for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio4Output) SamClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamClientCertificate }).(pulumi.StringPtrOutput)
}

// Failure identification on the page after an incorrect login.
func (o WtpprofileRadio4Output) SamCwpFailureString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamCwpFailureString }).(pulumi.StringPtrOutput)
}

// Identification string from the captive portal login form.
func (o WtpprofileRadio4Output) SamCwpMatchString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamCwpMatchString }).(pulumi.StringPtrOutput)
}

// Password for captive portal authentication.
func (o WtpprofileRadio4Output) SamCwpPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamCwpPassword }).(pulumi.StringPtrOutput)
}

// Success identification on the page after a successful login.
func (o WtpprofileRadio4Output) SamCwpSuccessString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamCwpSuccessString }).(pulumi.StringPtrOutput)
}

// Website the client is trying to access.
func (o WtpprofileRadio4Output) SamCwpTestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamCwpTestUrl }).(pulumi.StringPtrOutput)
}

// Username for captive portal authentication.
func (o WtpprofileRadio4Output) SamCwpUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamCwpUsername }).(pulumi.StringPtrOutput)
}

// Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
func (o WtpprofileRadio4Output) SamEapMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamEapMethod }).(pulumi.StringPtrOutput)
}

// Passphrase for WiFi network connection.
func (o WtpprofileRadio4Output) SamPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamPassword }).(pulumi.StringPtrOutput)
}

// Private key for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio4Output) SamPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamPrivateKey }).(pulumi.StringPtrOutput)
}

// Password for private key file for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio4Output) SamPrivateKeyPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamPrivateKeyPassword }).(pulumi.StringPtrOutput)
}

// SAM report interval (sec), 0 for a one-time report.
func (o WtpprofileRadio4Output) SamReportIntv() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *int { return v.SamReportIntv }).(pulumi.IntPtrOutput)
}

// Select WiFi network security type (default = "wpa-personal").
func (o WtpprofileRadio4Output) SamSecurityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamSecurityType }).(pulumi.StringPtrOutput)
}

// SAM test server domain name.
func (o WtpprofileRadio4Output) SamServerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamServerFqdn }).(pulumi.StringPtrOutput)
}

// SAM test server IP address.
func (o WtpprofileRadio4Output) SamServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamServerIp }).(pulumi.StringPtrOutput)
}

// Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
func (o WtpprofileRadio4Output) SamServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamServerType }).(pulumi.StringPtrOutput)
}

// SSID for WiFi network.
func (o WtpprofileRadio4Output) SamSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamSsid }).(pulumi.StringPtrOutput)
}

// Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
func (o WtpprofileRadio4Output) SamTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamTest }).(pulumi.StringPtrOutput)
}

// Username for WiFi network connection.
func (o WtpprofileRadio4Output) SamUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SamUsername }).(pulumi.StringPtrOutput)
}

// Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) ShortGuardInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.ShortGuardInterval }).(pulumi.StringPtrOutput)
}

// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
func (o WtpprofileRadio4Output) SpectrumAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.SpectrumAnalysis }).(pulumi.StringPtrOutput)
}

// Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
func (o WtpprofileRadio4Output) TransmitOptimize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.TransmitOptimize }).(pulumi.StringPtrOutput)
}

// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
func (o WtpprofileRadio4Output) VapAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.VapAll }).(pulumi.StringPtrOutput)
}

// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
func (o WtpprofileRadio4Output) Vaps() WtpprofileRadio4VapArrayOutput {
	return o.ApplyT(func(v WtpprofileRadio4) []WtpprofileRadio4Vap { return v.Vaps }).(WtpprofileRadio4VapArrayOutput)
}

// Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
func (o WtpprofileRadio4Output) WidsProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.WidsProfile }).(pulumi.StringPtrOutput)
}

// Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4Output) ZeroWaitDfs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4) *string { return v.ZeroWaitDfs }).(pulumi.StringPtrOutput)
}

type WtpprofileRadio4PtrOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio4PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WtpprofileRadio4)(nil)).Elem()
}

func (o WtpprofileRadio4PtrOutput) ToWtpprofileRadio4PtrOutput() WtpprofileRadio4PtrOutput {
	return o
}

func (o WtpprofileRadio4PtrOutput) ToWtpprofileRadio4PtrOutputWithContext(ctx context.Context) WtpprofileRadio4PtrOutput {
	return o
}

func (o WtpprofileRadio4PtrOutput) Elem() WtpprofileRadio4Output {
	return o.ApplyT(func(v *WtpprofileRadio4) WtpprofileRadio4 {
		if v != nil {
			return *v
		}
		var ret WtpprofileRadio4
		return ret
	}).(WtpprofileRadio4Output)
}

// Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) AirtimeFairness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.AirtimeFairness
	}).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) Amsdu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.Amsdu
	}).(pulumi.StringPtrOutput)
}

// Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) ApHandoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.ApHandoff
	}).(pulumi.StringPtrOutput)
}

// MAC address to monitor.
func (o WtpprofileRadio4PtrOutput) ApSnifferAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferAddr
	}).(pulumi.StringPtrOutput)
}

// Sniffer buffer size (1 - 32 MB, default = 16).
func (o WtpprofileRadio4PtrOutput) ApSnifferBufsize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *int {
		if v == nil {
			return nil
		}
		return v.ApSnifferBufsize
	}).(pulumi.IntPtrOutput)
}

// Channel on which to operate the sniffer (default = 6).
func (o WtpprofileRadio4PtrOutput) ApSnifferChan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *int {
		if v == nil {
			return nil
		}
		return v.ApSnifferChan
	}).(pulumi.IntPtrOutput)
}

// Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) ApSnifferCtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferCtl
	}).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) ApSnifferData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferData
	}).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) ApSnifferMgmtBeacon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferMgmtBeacon
	}).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) ApSnifferMgmtOther() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferMgmtOther
	}).(pulumi.StringPtrOutput)
}

// Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) ApSnifferMgmtProbe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.ApSnifferMgmtProbe
	}).(pulumi.StringPtrOutput)
}

// Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
func (o WtpprofileRadio4PtrOutput) ArrpProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.ArrpProfile
	}).(pulumi.StringPtrOutput)
}

// The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpprofileRadio4PtrOutput) AutoPowerHigh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *int {
		if v == nil {
			return nil
		}
		return v.AutoPowerHigh
	}).(pulumi.IntPtrOutput)
}

// Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) AutoPowerLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.AutoPowerLevel
	}).(pulumi.StringPtrOutput)
}

// The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
func (o WtpprofileRadio4PtrOutput) AutoPowerLow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *int {
		if v == nil {
			return nil
		}
		return v.AutoPowerLow
	}).(pulumi.IntPtrOutput)
}

// The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
func (o WtpprofileRadio4PtrOutput) AutoPowerTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.AutoPowerTarget
	}).(pulumi.StringPtrOutput)
}

// WiFi band that Radio 3 operates on.
func (o WtpprofileRadio4PtrOutput) Band() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.Band
	}).(pulumi.StringPtrOutput)
}

// WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
func (o WtpprofileRadio4PtrOutput) Band5gType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.Band5gType
	}).(pulumi.StringPtrOutput)
}

// Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) BandwidthAdmissionControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.BandwidthAdmissionControl
	}).(pulumi.StringPtrOutput)
}

// Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
func (o WtpprofileRadio4PtrOutput) BandwidthCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *int {
		if v == nil {
			return nil
		}
		return v.BandwidthCapacity
	}).(pulumi.IntPtrOutput)
}

// Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
func (o WtpprofileRadio4PtrOutput) BeaconInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *int {
		if v == nil {
			return nil
		}
		return v.BeaconInterval
	}).(pulumi.IntPtrOutput)
}

// BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
func (o WtpprofileRadio4PtrOutput) BssColor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *int {
		if v == nil {
			return nil
		}
		return v.BssColor
	}).(pulumi.IntPtrOutput)
}

// BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
func (o WtpprofileRadio4PtrOutput) BssColorMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.BssColorMode
	}).(pulumi.StringPtrOutput)
}

// Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) CallAdmissionControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.CallAdmissionControl
	}).(pulumi.StringPtrOutput)
}

// Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
func (o WtpprofileRadio4PtrOutput) CallCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *int {
		if v == nil {
			return nil
		}
		return v.CallCapacity
	}).(pulumi.IntPtrOutput)
}

// Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
func (o WtpprofileRadio4PtrOutput) ChannelBonding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.ChannelBonding
	}).(pulumi.StringPtrOutput)
}

// Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) ChannelUtilization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.ChannelUtilization
	}).(pulumi.StringPtrOutput)
}

// Selected list of wireless radio channels. The structure of `channel` block is documented below.
func (o WtpprofileRadio4PtrOutput) Channels() WtpprofileRadio4ChannelArrayOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) []WtpprofileRadio4Channel {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(WtpprofileRadio4ChannelArrayOutput)
}

// Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) Coexistence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.Coexistence
	}).(pulumi.StringPtrOutput)
}

// Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) Darrp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.Darrp
	}).(pulumi.StringPtrOutput)
}

// Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
func (o WtpprofileRadio4PtrOutput) Drma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.Drma
	}).(pulumi.StringPtrOutput)
}

// Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
func (o WtpprofileRadio4PtrOutput) DrmaSensitivity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.DrmaSensitivity
	}).(pulumi.StringPtrOutput)
}

// Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
func (o WtpprofileRadio4PtrOutput) Dtim() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *int {
		if v == nil {
			return nil
		}
		return v.Dtim
	}).(pulumi.IntPtrOutput)
}

// Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
func (o WtpprofileRadio4PtrOutput) FragThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *int {
		if v == nil {
			return nil
		}
		return v.FragThreshold
	}).(pulumi.IntPtrOutput)
}

// Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) FrequencyHandoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.FrequencyHandoff
	}).(pulumi.StringPtrOutput)
}

// Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
func (o WtpprofileRadio4PtrOutput) IperfProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.IperfProtocol
	}).(pulumi.StringPtrOutput)
}

// Iperf service port number.
func (o WtpprofileRadio4PtrOutput) IperfServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *int {
		if v == nil {
			return nil
		}
		return v.IperfServerPort
	}).(pulumi.IntPtrOutput)
}

// Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
func (o WtpprofileRadio4PtrOutput) MaxClients() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *int {
		if v == nil {
			return nil
		}
		return v.MaxClients
	}).(pulumi.IntPtrOutput)
}

// Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
func (o WtpprofileRadio4PtrOutput) MaxDistance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *int {
		if v == nil {
			return nil
		}
		return v.MaxDistance
	}).(pulumi.IntPtrOutput)
}

// Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
func (o WtpprofileRadio4PtrOutput) MimoMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.MimoMode
	}).(pulumi.StringPtrOutput)
}

// Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
func (o WtpprofileRadio4PtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) N80211d() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.N80211d
	}).(pulumi.StringPtrOutput)
}

// Optional antenna used on FAP (default = none).
func (o WtpprofileRadio4PtrOutput) OptionalAntenna() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.OptionalAntenna
	}).(pulumi.StringPtrOutput)
}

// Optional antenna gain in dBi (0 to 20, default = 0).
func (o WtpprofileRadio4PtrOutput) OptionalAntennaGain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.OptionalAntennaGain
	}).(pulumi.StringPtrOutput)
}

// Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
func (o WtpprofileRadio4PtrOutput) PowerLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *int {
		if v == nil {
			return nil
		}
		return v.PowerLevel
	}).(pulumi.IntPtrOutput)
}

// Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
func (o WtpprofileRadio4PtrOutput) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.PowerMode
	}).(pulumi.StringPtrOutput)
}

// Radio EIRP power in dBm (1 - 33, default = 27).
func (o WtpprofileRadio4PtrOutput) PowerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *int {
		if v == nil {
			return nil
		}
		return v.PowerValue
	}).(pulumi.IntPtrOutput)
}

// Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
func (o WtpprofileRadio4PtrOutput) PowersaveOptimize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.PowersaveOptimize
	}).(pulumi.StringPtrOutput)
}

// Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
func (o WtpprofileRadio4PtrOutput) ProtectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionMode
	}).(pulumi.StringPtrOutput)
}

// Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
func (o WtpprofileRadio4PtrOutput) RtsThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *int {
		if v == nil {
			return nil
		}
		return v.RtsThreshold
	}).(pulumi.IntPtrOutput)
}

// BSSID for WiFi network.
func (o WtpprofileRadio4PtrOutput) SamBssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamBssid
	}).(pulumi.StringPtrOutput)
}

// CA certificate for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio4PtrOutput) SamCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamCaCertificate
	}).(pulumi.StringPtrOutput)
}

// Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) SamCaptivePortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamCaptivePortal
	}).(pulumi.StringPtrOutput)
}

// Client certificate for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio4PtrOutput) SamClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamClientCertificate
	}).(pulumi.StringPtrOutput)
}

// Failure identification on the page after an incorrect login.
func (o WtpprofileRadio4PtrOutput) SamCwpFailureString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpFailureString
	}).(pulumi.StringPtrOutput)
}

// Identification string from the captive portal login form.
func (o WtpprofileRadio4PtrOutput) SamCwpMatchString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpMatchString
	}).(pulumi.StringPtrOutput)
}

// Password for captive portal authentication.
func (o WtpprofileRadio4PtrOutput) SamCwpPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpPassword
	}).(pulumi.StringPtrOutput)
}

// Success identification on the page after a successful login.
func (o WtpprofileRadio4PtrOutput) SamCwpSuccessString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpSuccessString
	}).(pulumi.StringPtrOutput)
}

// Website the client is trying to access.
func (o WtpprofileRadio4PtrOutput) SamCwpTestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpTestUrl
	}).(pulumi.StringPtrOutput)
}

// Username for captive portal authentication.
func (o WtpprofileRadio4PtrOutput) SamCwpUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamCwpUsername
	}).(pulumi.StringPtrOutput)
}

// Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
func (o WtpprofileRadio4PtrOutput) SamEapMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamEapMethod
	}).(pulumi.StringPtrOutput)
}

// Passphrase for WiFi network connection.
func (o WtpprofileRadio4PtrOutput) SamPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamPassword
	}).(pulumi.StringPtrOutput)
}

// Private key for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio4PtrOutput) SamPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamPrivateKey
	}).(pulumi.StringPtrOutput)
}

// Password for private key file for WPA2/WPA3-ENTERPRISE.
func (o WtpprofileRadio4PtrOutput) SamPrivateKeyPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamPrivateKeyPassword
	}).(pulumi.StringPtrOutput)
}

// SAM report interval (sec), 0 for a one-time report.
func (o WtpprofileRadio4PtrOutput) SamReportIntv() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *int {
		if v == nil {
			return nil
		}
		return v.SamReportIntv
	}).(pulumi.IntPtrOutput)
}

// Select WiFi network security type (default = "wpa-personal").
func (o WtpprofileRadio4PtrOutput) SamSecurityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamSecurityType
	}).(pulumi.StringPtrOutput)
}

// SAM test server domain name.
func (o WtpprofileRadio4PtrOutput) SamServerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamServerFqdn
	}).(pulumi.StringPtrOutput)
}

// SAM test server IP address.
func (o WtpprofileRadio4PtrOutput) SamServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamServerIp
	}).(pulumi.StringPtrOutput)
}

// Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
func (o WtpprofileRadio4PtrOutput) SamServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamServerType
	}).(pulumi.StringPtrOutput)
}

// SSID for WiFi network.
func (o WtpprofileRadio4PtrOutput) SamSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamSsid
	}).(pulumi.StringPtrOutput)
}

// Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
func (o WtpprofileRadio4PtrOutput) SamTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamTest
	}).(pulumi.StringPtrOutput)
}

// Username for WiFi network connection.
func (o WtpprofileRadio4PtrOutput) SamUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SamUsername
	}).(pulumi.StringPtrOutput)
}

// Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) ShortGuardInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.ShortGuardInterval
	}).(pulumi.StringPtrOutput)
}

// Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
func (o WtpprofileRadio4PtrOutput) SpectrumAnalysis() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.SpectrumAnalysis
	}).(pulumi.StringPtrOutput)
}

// Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
func (o WtpprofileRadio4PtrOutput) TransmitOptimize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.TransmitOptimize
	}).(pulumi.StringPtrOutput)
}

// Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
func (o WtpprofileRadio4PtrOutput) VapAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.VapAll
	}).(pulumi.StringPtrOutput)
}

// Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
func (o WtpprofileRadio4PtrOutput) Vaps() WtpprofileRadio4VapArrayOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) []WtpprofileRadio4Vap {
		if v == nil {
			return nil
		}
		return v.Vaps
	}).(WtpprofileRadio4VapArrayOutput)
}

// Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
func (o WtpprofileRadio4PtrOutput) WidsProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.WidsProfile
	}).(pulumi.StringPtrOutput)
}

// Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
func (o WtpprofileRadio4PtrOutput) ZeroWaitDfs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WtpprofileRadio4) *string {
		if v == nil {
			return nil
		}
		return v.ZeroWaitDfs
	}).(pulumi.StringPtrOutput)
}

type WtpprofileRadio4Channel struct {
	// Channel number.
	Chan *string `pulumi:"chan"`
}

// WtpprofileRadio4ChannelInput is an input type that accepts WtpprofileRadio4ChannelArgs and WtpprofileRadio4ChannelOutput values.
// You can construct a concrete instance of `WtpprofileRadio4ChannelInput` via:
//
//	WtpprofileRadio4ChannelArgs{...}
type WtpprofileRadio4ChannelInput interface {
	pulumi.Input

	ToWtpprofileRadio4ChannelOutput() WtpprofileRadio4ChannelOutput
	ToWtpprofileRadio4ChannelOutputWithContext(context.Context) WtpprofileRadio4ChannelOutput
}

type WtpprofileRadio4ChannelArgs struct {
	// Channel number.
	Chan pulumi.StringPtrInput `pulumi:"chan"`
}

func (WtpprofileRadio4ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio4Channel)(nil)).Elem()
}

func (i WtpprofileRadio4ChannelArgs) ToWtpprofileRadio4ChannelOutput() WtpprofileRadio4ChannelOutput {
	return i.ToWtpprofileRadio4ChannelOutputWithContext(context.Background())
}

func (i WtpprofileRadio4ChannelArgs) ToWtpprofileRadio4ChannelOutputWithContext(ctx context.Context) WtpprofileRadio4ChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio4ChannelOutput)
}

// WtpprofileRadio4ChannelArrayInput is an input type that accepts WtpprofileRadio4ChannelArray and WtpprofileRadio4ChannelArrayOutput values.
// You can construct a concrete instance of `WtpprofileRadio4ChannelArrayInput` via:
//
//	WtpprofileRadio4ChannelArray{ WtpprofileRadio4ChannelArgs{...} }
type WtpprofileRadio4ChannelArrayInput interface {
	pulumi.Input

	ToWtpprofileRadio4ChannelArrayOutput() WtpprofileRadio4ChannelArrayOutput
	ToWtpprofileRadio4ChannelArrayOutputWithContext(context.Context) WtpprofileRadio4ChannelArrayOutput
}

type WtpprofileRadio4ChannelArray []WtpprofileRadio4ChannelInput

func (WtpprofileRadio4ChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileRadio4Channel)(nil)).Elem()
}

func (i WtpprofileRadio4ChannelArray) ToWtpprofileRadio4ChannelArrayOutput() WtpprofileRadio4ChannelArrayOutput {
	return i.ToWtpprofileRadio4ChannelArrayOutputWithContext(context.Background())
}

func (i WtpprofileRadio4ChannelArray) ToWtpprofileRadio4ChannelArrayOutputWithContext(ctx context.Context) WtpprofileRadio4ChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio4ChannelArrayOutput)
}

type WtpprofileRadio4ChannelOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio4ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio4Channel)(nil)).Elem()
}

func (o WtpprofileRadio4ChannelOutput) ToWtpprofileRadio4ChannelOutput() WtpprofileRadio4ChannelOutput {
	return o
}

func (o WtpprofileRadio4ChannelOutput) ToWtpprofileRadio4ChannelOutputWithContext(ctx context.Context) WtpprofileRadio4ChannelOutput {
	return o
}

// Channel number.
func (o WtpprofileRadio4ChannelOutput) Chan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4Channel) *string { return v.Chan }).(pulumi.StringPtrOutput)
}

type WtpprofileRadio4ChannelArrayOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio4ChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileRadio4Channel)(nil)).Elem()
}

func (o WtpprofileRadio4ChannelArrayOutput) ToWtpprofileRadio4ChannelArrayOutput() WtpprofileRadio4ChannelArrayOutput {
	return o
}

func (o WtpprofileRadio4ChannelArrayOutput) ToWtpprofileRadio4ChannelArrayOutputWithContext(ctx context.Context) WtpprofileRadio4ChannelArrayOutput {
	return o
}

func (o WtpprofileRadio4ChannelArrayOutput) Index(i pulumi.IntInput) WtpprofileRadio4ChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpprofileRadio4Channel {
		return vs[0].([]WtpprofileRadio4Channel)[vs[1].(int)]
	}).(WtpprofileRadio4ChannelOutput)
}

type WtpprofileRadio4Vap struct {
	// Virtual Access Point (VAP) name.
	Name *string `pulumi:"name"`
}

// WtpprofileRadio4VapInput is an input type that accepts WtpprofileRadio4VapArgs and WtpprofileRadio4VapOutput values.
// You can construct a concrete instance of `WtpprofileRadio4VapInput` via:
//
//	WtpprofileRadio4VapArgs{...}
type WtpprofileRadio4VapInput interface {
	pulumi.Input

	ToWtpprofileRadio4VapOutput() WtpprofileRadio4VapOutput
	ToWtpprofileRadio4VapOutputWithContext(context.Context) WtpprofileRadio4VapOutput
}

type WtpprofileRadio4VapArgs struct {
	// Virtual Access Point (VAP) name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (WtpprofileRadio4VapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio4Vap)(nil)).Elem()
}

func (i WtpprofileRadio4VapArgs) ToWtpprofileRadio4VapOutput() WtpprofileRadio4VapOutput {
	return i.ToWtpprofileRadio4VapOutputWithContext(context.Background())
}

func (i WtpprofileRadio4VapArgs) ToWtpprofileRadio4VapOutputWithContext(ctx context.Context) WtpprofileRadio4VapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio4VapOutput)
}

// WtpprofileRadio4VapArrayInput is an input type that accepts WtpprofileRadio4VapArray and WtpprofileRadio4VapArrayOutput values.
// You can construct a concrete instance of `WtpprofileRadio4VapArrayInput` via:
//
//	WtpprofileRadio4VapArray{ WtpprofileRadio4VapArgs{...} }
type WtpprofileRadio4VapArrayInput interface {
	pulumi.Input

	ToWtpprofileRadio4VapArrayOutput() WtpprofileRadio4VapArrayOutput
	ToWtpprofileRadio4VapArrayOutputWithContext(context.Context) WtpprofileRadio4VapArrayOutput
}

type WtpprofileRadio4VapArray []WtpprofileRadio4VapInput

func (WtpprofileRadio4VapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileRadio4Vap)(nil)).Elem()
}

func (i WtpprofileRadio4VapArray) ToWtpprofileRadio4VapArrayOutput() WtpprofileRadio4VapArrayOutput {
	return i.ToWtpprofileRadio4VapArrayOutputWithContext(context.Background())
}

func (i WtpprofileRadio4VapArray) ToWtpprofileRadio4VapArrayOutputWithContext(ctx context.Context) WtpprofileRadio4VapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileRadio4VapArrayOutput)
}

type WtpprofileRadio4VapOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio4VapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileRadio4Vap)(nil)).Elem()
}

func (o WtpprofileRadio4VapOutput) ToWtpprofileRadio4VapOutput() WtpprofileRadio4VapOutput {
	return o
}

func (o WtpprofileRadio4VapOutput) ToWtpprofileRadio4VapOutputWithContext(ctx context.Context) WtpprofileRadio4VapOutput {
	return o
}

// Virtual Access Point (VAP) name.
func (o WtpprofileRadio4VapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileRadio4Vap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type WtpprofileRadio4VapArrayOutput struct{ *pulumi.OutputState }

func (WtpprofileRadio4VapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileRadio4Vap)(nil)).Elem()
}

func (o WtpprofileRadio4VapArrayOutput) ToWtpprofileRadio4VapArrayOutput() WtpprofileRadio4VapArrayOutput {
	return o
}

func (o WtpprofileRadio4VapArrayOutput) ToWtpprofileRadio4VapArrayOutputWithContext(ctx context.Context) WtpprofileRadio4VapArrayOutput {
	return o
}

func (o WtpprofileRadio4VapArrayOutput) Index(i pulumi.IntInput) WtpprofileRadio4VapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpprofileRadio4Vap {
		return vs[0].([]WtpprofileRadio4Vap)[vs[1].(int)]
	}).(WtpprofileRadio4VapOutput)
}

type WtpprofileSplitTunnelingAcl struct {
	// Destination IP and mask for the split-tunneling subnet.
	//
	// The `radio1` block supports:
	DestIp *string `pulumi:"destIp"`
	// ID.
	Id *int `pulumi:"id"`
}

// WtpprofileSplitTunnelingAclInput is an input type that accepts WtpprofileSplitTunnelingAclArgs and WtpprofileSplitTunnelingAclOutput values.
// You can construct a concrete instance of `WtpprofileSplitTunnelingAclInput` via:
//
//	WtpprofileSplitTunnelingAclArgs{...}
type WtpprofileSplitTunnelingAclInput interface {
	pulumi.Input

	ToWtpprofileSplitTunnelingAclOutput() WtpprofileSplitTunnelingAclOutput
	ToWtpprofileSplitTunnelingAclOutputWithContext(context.Context) WtpprofileSplitTunnelingAclOutput
}

type WtpprofileSplitTunnelingAclArgs struct {
	// Destination IP and mask for the split-tunneling subnet.
	//
	// The `radio1` block supports:
	DestIp pulumi.StringPtrInput `pulumi:"destIp"`
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (WtpprofileSplitTunnelingAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileSplitTunnelingAcl)(nil)).Elem()
}

func (i WtpprofileSplitTunnelingAclArgs) ToWtpprofileSplitTunnelingAclOutput() WtpprofileSplitTunnelingAclOutput {
	return i.ToWtpprofileSplitTunnelingAclOutputWithContext(context.Background())
}

func (i WtpprofileSplitTunnelingAclArgs) ToWtpprofileSplitTunnelingAclOutputWithContext(ctx context.Context) WtpprofileSplitTunnelingAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileSplitTunnelingAclOutput)
}

// WtpprofileSplitTunnelingAclArrayInput is an input type that accepts WtpprofileSplitTunnelingAclArray and WtpprofileSplitTunnelingAclArrayOutput values.
// You can construct a concrete instance of `WtpprofileSplitTunnelingAclArrayInput` via:
//
//	WtpprofileSplitTunnelingAclArray{ WtpprofileSplitTunnelingAclArgs{...} }
type WtpprofileSplitTunnelingAclArrayInput interface {
	pulumi.Input

	ToWtpprofileSplitTunnelingAclArrayOutput() WtpprofileSplitTunnelingAclArrayOutput
	ToWtpprofileSplitTunnelingAclArrayOutputWithContext(context.Context) WtpprofileSplitTunnelingAclArrayOutput
}

type WtpprofileSplitTunnelingAclArray []WtpprofileSplitTunnelingAclInput

func (WtpprofileSplitTunnelingAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileSplitTunnelingAcl)(nil)).Elem()
}

func (i WtpprofileSplitTunnelingAclArray) ToWtpprofileSplitTunnelingAclArrayOutput() WtpprofileSplitTunnelingAclArrayOutput {
	return i.ToWtpprofileSplitTunnelingAclArrayOutputWithContext(context.Background())
}

func (i WtpprofileSplitTunnelingAclArray) ToWtpprofileSplitTunnelingAclArrayOutputWithContext(ctx context.Context) WtpprofileSplitTunnelingAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WtpprofileSplitTunnelingAclArrayOutput)
}

type WtpprofileSplitTunnelingAclOutput struct{ *pulumi.OutputState }

func (WtpprofileSplitTunnelingAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WtpprofileSplitTunnelingAcl)(nil)).Elem()
}

func (o WtpprofileSplitTunnelingAclOutput) ToWtpprofileSplitTunnelingAclOutput() WtpprofileSplitTunnelingAclOutput {
	return o
}

func (o WtpprofileSplitTunnelingAclOutput) ToWtpprofileSplitTunnelingAclOutputWithContext(ctx context.Context) WtpprofileSplitTunnelingAclOutput {
	return o
}

// Destination IP and mask for the split-tunneling subnet.
//
// The `radio1` block supports:
func (o WtpprofileSplitTunnelingAclOutput) DestIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WtpprofileSplitTunnelingAcl) *string { return v.DestIp }).(pulumi.StringPtrOutput)
}

// ID.
func (o WtpprofileSplitTunnelingAclOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WtpprofileSplitTunnelingAcl) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type WtpprofileSplitTunnelingAclArrayOutput struct{ *pulumi.OutputState }

func (WtpprofileSplitTunnelingAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WtpprofileSplitTunnelingAcl)(nil)).Elem()
}

func (o WtpprofileSplitTunnelingAclArrayOutput) ToWtpprofileSplitTunnelingAclArrayOutput() WtpprofileSplitTunnelingAclArrayOutput {
	return o
}

func (o WtpprofileSplitTunnelingAclArrayOutput) ToWtpprofileSplitTunnelingAclArrayOutputWithContext(ctx context.Context) WtpprofileSplitTunnelingAclArrayOutput {
	return o
}

func (o WtpprofileSplitTunnelingAclArrayOutput) Index(i pulumi.IntInput) WtpprofileSplitTunnelingAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WtpprofileSplitTunnelingAcl {
		return vs[0].([]WtpprofileSplitTunnelingAcl)[vs[1].(int)]
	}).(WtpprofileSplitTunnelingAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccesscontrollistLayer3Ipv4RuleInput)(nil)).Elem(), AccesscontrollistLayer3Ipv4RuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccesscontrollistLayer3Ipv4RuleArrayInput)(nil)).Elem(), AccesscontrollistLayer3Ipv4RuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccesscontrollistLayer3Ipv6RuleInput)(nil)).Elem(), AccesscontrollistLayer3Ipv6RuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccesscontrollistLayer3Ipv6RuleArrayInput)(nil)).Elem(), AccesscontrollistLayer3Ipv6RuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddrgrpAddressInput)(nil)).Elem(), AddrgrpAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddrgrpAddressArrayInput)(nil)).Elem(), AddrgrpAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApcfgprofileCommandListInput)(nil)).Elem(), ApcfgprofileCommandListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApcfgprofileCommandListArrayInput)(nil)).Elem(), ApcfgprofileCommandListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArrpprofileDarrpOptimizeScheduleInput)(nil)).Elem(), ArrpprofileDarrpOptimizeScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArrpprofileDarrpOptimizeScheduleArrayInput)(nil)).Elem(), ArrpprofileDarrpOptimizeScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BonjourprofilePolicyListInput)(nil)).Elem(), BonjourprofilePolicyListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BonjourprofilePolicyListArrayInput)(nil)).Elem(), BonjourprofilePolicyListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntercontrollerInterControllerPeerInput)(nil)).Elem(), IntercontrollerInterControllerPeerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntercontrollerInterControllerPeerArrayInput)(nil)).Elem(), IntercontrollerInterControllerPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MpskprofileMpskGroupInput)(nil)).Elem(), MpskprofileMpskGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MpskprofileMpskGroupArrayInput)(nil)).Elem(), MpskprofileMpskGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MpskprofileMpskGroupMpskKeyInput)(nil)).Elem(), MpskprofileMpskGroupMpskKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MpskprofileMpskGroupMpskKeyArrayInput)(nil)).Elem(), MpskprofileMpskGroupMpskKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MpskprofileMpskGroupMpskKeyMpskScheduleInput)(nil)).Elem(), MpskprofileMpskGroupMpskKeyMpskScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MpskprofileMpskGroupMpskKeyMpskScheduleArrayInput)(nil)).Elem(), MpskprofileMpskGroupMpskKeyMpskScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QosprofileDscpWmmBeInput)(nil)).Elem(), QosprofileDscpWmmBeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QosprofileDscpWmmBeArrayInput)(nil)).Elem(), QosprofileDscpWmmBeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QosprofileDscpWmmBkInput)(nil)).Elem(), QosprofileDscpWmmBkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QosprofileDscpWmmBkArrayInput)(nil)).Elem(), QosprofileDscpWmmBkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QosprofileDscpWmmViInput)(nil)).Elem(), QosprofileDscpWmmViArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QosprofileDscpWmmViArrayInput)(nil)).Elem(), QosprofileDscpWmmViArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QosprofileDscpWmmVoInput)(nil)).Elem(), QosprofileDscpWmmVoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QosprofileDscpWmmVoArrayInput)(nil)).Elem(), QosprofileDscpWmmVoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingDarrpOptimizeScheduleInput)(nil)).Elem(), SettingDarrpOptimizeScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingDarrpOptimizeScheduleArrayInput)(nil)).Elem(), SettingDarrpOptimizeScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingOffendingSsidInput)(nil)).Elem(), SettingOffendingSsidArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingOffendingSsidArrayInput)(nil)).Elem(), SettingOffendingSsidArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpCommunityInput)(nil)).Elem(), SnmpCommunityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpCommunityArrayInput)(nil)).Elem(), SnmpCommunityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpCommunityHostInput)(nil)).Elem(), SnmpCommunityHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpCommunityHostArrayInput)(nil)).Elem(), SnmpCommunityHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpUserInput)(nil)).Elem(), SnmpUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpUserArrayInput)(nil)).Elem(), SnmpUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimersDarrpTimeInput)(nil)).Elem(), TimersDarrpTimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimersDarrpTimeArrayInput)(nil)).Elem(), TimersDarrpTimeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapMacFilterListInput)(nil)).Elem(), VapMacFilterListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapMacFilterListArrayInput)(nil)).Elem(), VapMacFilterListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapMpskKeyInput)(nil)).Elem(), VapMpskKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapMpskKeyArrayInput)(nil)).Elem(), VapMpskKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapMpskKeyMpskScheduleInput)(nil)).Elem(), VapMpskKeyMpskScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapMpskKeyMpskScheduleArrayInput)(nil)).Elem(), VapMpskKeyMpskScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapPortalMessageOverridesInput)(nil)).Elem(), VapPortalMessageOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapPortalMessageOverridesPtrInput)(nil)).Elem(), VapPortalMessageOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapRadiusMacAuthUsergroupInput)(nil)).Elem(), VapRadiusMacAuthUsergroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapRadiusMacAuthUsergroupArrayInput)(nil)).Elem(), VapRadiusMacAuthUsergroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapSelectedUsergroupInput)(nil)).Elem(), VapSelectedUsergroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapSelectedUsergroupArrayInput)(nil)).Elem(), VapSelectedUsergroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapUsergroupInput)(nil)).Elem(), VapUsergroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapUsergroupArrayInput)(nil)).Elem(), VapUsergroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapVlanNameInput)(nil)).Elem(), VapVlanNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapVlanNameArrayInput)(nil)).Elem(), VapVlanNameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapVlanPoolInput)(nil)).Elem(), VapVlanPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapVlanPoolArrayInput)(nil)).Elem(), VapVlanPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapgroupVapInput)(nil)).Elem(), VapgroupVapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VapgroupVapArrayInput)(nil)).Elem(), VapgroupVapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WidsprofileApBgscanDisableScheduleInput)(nil)).Elem(), WidsprofileApBgscanDisableScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WidsprofileApBgscanDisableScheduleArrayInput)(nil)).Elem(), WidsprofileApBgscanDisableScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WidsprofileApScanChannelList2g5gInput)(nil)).Elem(), WidsprofileApScanChannelList2g5gArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WidsprofileApScanChannelList2g5gArrayInput)(nil)).Elem(), WidsprofileApScanChannelList2g5gArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WidsprofileApScanChannelList6gInput)(nil)).Elem(), WidsprofileApScanChannelList6gArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WidsprofileApScanChannelList6gArrayInput)(nil)).Elem(), WidsprofileApScanChannelList6gArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpLanInput)(nil)).Elem(), WtpLanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpLanPtrInput)(nil)).Elem(), WtpLanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio1Input)(nil)).Elem(), WtpRadio1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio1PtrInput)(nil)).Elem(), WtpRadio1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio1ChannelInput)(nil)).Elem(), WtpRadio1ChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio1ChannelArrayInput)(nil)).Elem(), WtpRadio1ChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio1VapInput)(nil)).Elem(), WtpRadio1VapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio1VapArrayInput)(nil)).Elem(), WtpRadio1VapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio2Input)(nil)).Elem(), WtpRadio2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio2PtrInput)(nil)).Elem(), WtpRadio2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio2ChannelInput)(nil)).Elem(), WtpRadio2ChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio2ChannelArrayInput)(nil)).Elem(), WtpRadio2ChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio2VapInput)(nil)).Elem(), WtpRadio2VapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio2VapArrayInput)(nil)).Elem(), WtpRadio2VapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio3Input)(nil)).Elem(), WtpRadio3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio3PtrInput)(nil)).Elem(), WtpRadio3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio3ChannelInput)(nil)).Elem(), WtpRadio3ChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio3ChannelArrayInput)(nil)).Elem(), WtpRadio3ChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio3VapInput)(nil)).Elem(), WtpRadio3VapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio3VapArrayInput)(nil)).Elem(), WtpRadio3VapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio4Input)(nil)).Elem(), WtpRadio4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio4PtrInput)(nil)).Elem(), WtpRadio4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio4ChannelInput)(nil)).Elem(), WtpRadio4ChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio4ChannelArrayInput)(nil)).Elem(), WtpRadio4ChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio4VapInput)(nil)).Elem(), WtpRadio4VapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpRadio4VapArrayInput)(nil)).Elem(), WtpRadio4VapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpSplitTunnelingAclInput)(nil)).Elem(), WtpSplitTunnelingAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpSplitTunnelingAclArrayInput)(nil)).Elem(), WtpSplitTunnelingAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpgroupWtpInput)(nil)).Elem(), WtpgroupWtpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpgroupWtpArrayInput)(nil)).Elem(), WtpgroupWtpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileDenyMacListInput)(nil)).Elem(), WtpprofileDenyMacListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileDenyMacListArrayInput)(nil)).Elem(), WtpprofileDenyMacListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileEslSesDongleInput)(nil)).Elem(), WtpprofileEslSesDongleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileEslSesDonglePtrInput)(nil)).Elem(), WtpprofileEslSesDongleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileLanInput)(nil)).Elem(), WtpprofileLanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileLanPtrInput)(nil)).Elem(), WtpprofileLanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileLbsInput)(nil)).Elem(), WtpprofileLbsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileLbsPtrInput)(nil)).Elem(), WtpprofileLbsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileLedScheduleInput)(nil)).Elem(), WtpprofileLedScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileLedScheduleArrayInput)(nil)).Elem(), WtpprofileLedScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofilePlatformInput)(nil)).Elem(), WtpprofilePlatformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofilePlatformPtrInput)(nil)).Elem(), WtpprofilePlatformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio1Input)(nil)).Elem(), WtpprofileRadio1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio1PtrInput)(nil)).Elem(), WtpprofileRadio1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio1ChannelInput)(nil)).Elem(), WtpprofileRadio1ChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio1ChannelArrayInput)(nil)).Elem(), WtpprofileRadio1ChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio1VapInput)(nil)).Elem(), WtpprofileRadio1VapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio1VapArrayInput)(nil)).Elem(), WtpprofileRadio1VapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio2Input)(nil)).Elem(), WtpprofileRadio2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio2PtrInput)(nil)).Elem(), WtpprofileRadio2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio2ChannelInput)(nil)).Elem(), WtpprofileRadio2ChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio2ChannelArrayInput)(nil)).Elem(), WtpprofileRadio2ChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio2VapInput)(nil)).Elem(), WtpprofileRadio2VapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio2VapArrayInput)(nil)).Elem(), WtpprofileRadio2VapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio3Input)(nil)).Elem(), WtpprofileRadio3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio3PtrInput)(nil)).Elem(), WtpprofileRadio3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio3ChannelInput)(nil)).Elem(), WtpprofileRadio3ChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio3ChannelArrayInput)(nil)).Elem(), WtpprofileRadio3ChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio3VapInput)(nil)).Elem(), WtpprofileRadio3VapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio3VapArrayInput)(nil)).Elem(), WtpprofileRadio3VapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio4Input)(nil)).Elem(), WtpprofileRadio4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio4PtrInput)(nil)).Elem(), WtpprofileRadio4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio4ChannelInput)(nil)).Elem(), WtpprofileRadio4ChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio4ChannelArrayInput)(nil)).Elem(), WtpprofileRadio4ChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio4VapInput)(nil)).Elem(), WtpprofileRadio4VapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileRadio4VapArrayInput)(nil)).Elem(), WtpprofileRadio4VapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileSplitTunnelingAclInput)(nil)).Elem(), WtpprofileSplitTunnelingAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WtpprofileSplitTunnelingAclArrayInput)(nil)).Elem(), WtpprofileSplitTunnelingAclArray{})
	pulumi.RegisterOutputType(AccesscontrollistLayer3Ipv4RuleOutput{})
	pulumi.RegisterOutputType(AccesscontrollistLayer3Ipv4RuleArrayOutput{})
	pulumi.RegisterOutputType(AccesscontrollistLayer3Ipv6RuleOutput{})
	pulumi.RegisterOutputType(AccesscontrollistLayer3Ipv6RuleArrayOutput{})
	pulumi.RegisterOutputType(AddrgrpAddressOutput{})
	pulumi.RegisterOutputType(AddrgrpAddressArrayOutput{})
	pulumi.RegisterOutputType(ApcfgprofileCommandListOutput{})
	pulumi.RegisterOutputType(ApcfgprofileCommandListArrayOutput{})
	pulumi.RegisterOutputType(ArrpprofileDarrpOptimizeScheduleOutput{})
	pulumi.RegisterOutputType(ArrpprofileDarrpOptimizeScheduleArrayOutput{})
	pulumi.RegisterOutputType(BonjourprofilePolicyListOutput{})
	pulumi.RegisterOutputType(BonjourprofilePolicyListArrayOutput{})
	pulumi.RegisterOutputType(IntercontrollerInterControllerPeerOutput{})
	pulumi.RegisterOutputType(IntercontrollerInterControllerPeerArrayOutput{})
	pulumi.RegisterOutputType(MpskprofileMpskGroupOutput{})
	pulumi.RegisterOutputType(MpskprofileMpskGroupArrayOutput{})
	pulumi.RegisterOutputType(MpskprofileMpskGroupMpskKeyOutput{})
	pulumi.RegisterOutputType(MpskprofileMpskGroupMpskKeyArrayOutput{})
	pulumi.RegisterOutputType(MpskprofileMpskGroupMpskKeyMpskScheduleOutput{})
	pulumi.RegisterOutputType(MpskprofileMpskGroupMpskKeyMpskScheduleArrayOutput{})
	pulumi.RegisterOutputType(QosprofileDscpWmmBeOutput{})
	pulumi.RegisterOutputType(QosprofileDscpWmmBeArrayOutput{})
	pulumi.RegisterOutputType(QosprofileDscpWmmBkOutput{})
	pulumi.RegisterOutputType(QosprofileDscpWmmBkArrayOutput{})
	pulumi.RegisterOutputType(QosprofileDscpWmmViOutput{})
	pulumi.RegisterOutputType(QosprofileDscpWmmViArrayOutput{})
	pulumi.RegisterOutputType(QosprofileDscpWmmVoOutput{})
	pulumi.RegisterOutputType(QosprofileDscpWmmVoArrayOutput{})
	pulumi.RegisterOutputType(SettingDarrpOptimizeScheduleOutput{})
	pulumi.RegisterOutputType(SettingDarrpOptimizeScheduleArrayOutput{})
	pulumi.RegisterOutputType(SettingOffendingSsidOutput{})
	pulumi.RegisterOutputType(SettingOffendingSsidArrayOutput{})
	pulumi.RegisterOutputType(SnmpCommunityOutput{})
	pulumi.RegisterOutputType(SnmpCommunityArrayOutput{})
	pulumi.RegisterOutputType(SnmpCommunityHostOutput{})
	pulumi.RegisterOutputType(SnmpCommunityHostArrayOutput{})
	pulumi.RegisterOutputType(SnmpUserOutput{})
	pulumi.RegisterOutputType(SnmpUserArrayOutput{})
	pulumi.RegisterOutputType(TimersDarrpTimeOutput{})
	pulumi.RegisterOutputType(TimersDarrpTimeArrayOutput{})
	pulumi.RegisterOutputType(VapMacFilterListOutput{})
	pulumi.RegisterOutputType(VapMacFilterListArrayOutput{})
	pulumi.RegisterOutputType(VapMpskKeyOutput{})
	pulumi.RegisterOutputType(VapMpskKeyArrayOutput{})
	pulumi.RegisterOutputType(VapMpskKeyMpskScheduleOutput{})
	pulumi.RegisterOutputType(VapMpskKeyMpskScheduleArrayOutput{})
	pulumi.RegisterOutputType(VapPortalMessageOverridesOutput{})
	pulumi.RegisterOutputType(VapPortalMessageOverridesPtrOutput{})
	pulumi.RegisterOutputType(VapRadiusMacAuthUsergroupOutput{})
	pulumi.RegisterOutputType(VapRadiusMacAuthUsergroupArrayOutput{})
	pulumi.RegisterOutputType(VapSelectedUsergroupOutput{})
	pulumi.RegisterOutputType(VapSelectedUsergroupArrayOutput{})
	pulumi.RegisterOutputType(VapUsergroupOutput{})
	pulumi.RegisterOutputType(VapUsergroupArrayOutput{})
	pulumi.RegisterOutputType(VapVlanNameOutput{})
	pulumi.RegisterOutputType(VapVlanNameArrayOutput{})
	pulumi.RegisterOutputType(VapVlanPoolOutput{})
	pulumi.RegisterOutputType(VapVlanPoolArrayOutput{})
	pulumi.RegisterOutputType(VapgroupVapOutput{})
	pulumi.RegisterOutputType(VapgroupVapArrayOutput{})
	pulumi.RegisterOutputType(WidsprofileApBgscanDisableScheduleOutput{})
	pulumi.RegisterOutputType(WidsprofileApBgscanDisableScheduleArrayOutput{})
	pulumi.RegisterOutputType(WidsprofileApScanChannelList2g5gOutput{})
	pulumi.RegisterOutputType(WidsprofileApScanChannelList2g5gArrayOutput{})
	pulumi.RegisterOutputType(WidsprofileApScanChannelList6gOutput{})
	pulumi.RegisterOutputType(WidsprofileApScanChannelList6gArrayOutput{})
	pulumi.RegisterOutputType(WtpLanOutput{})
	pulumi.RegisterOutputType(WtpLanPtrOutput{})
	pulumi.RegisterOutputType(WtpRadio1Output{})
	pulumi.RegisterOutputType(WtpRadio1PtrOutput{})
	pulumi.RegisterOutputType(WtpRadio1ChannelOutput{})
	pulumi.RegisterOutputType(WtpRadio1ChannelArrayOutput{})
	pulumi.RegisterOutputType(WtpRadio1VapOutput{})
	pulumi.RegisterOutputType(WtpRadio1VapArrayOutput{})
	pulumi.RegisterOutputType(WtpRadio2Output{})
	pulumi.RegisterOutputType(WtpRadio2PtrOutput{})
	pulumi.RegisterOutputType(WtpRadio2ChannelOutput{})
	pulumi.RegisterOutputType(WtpRadio2ChannelArrayOutput{})
	pulumi.RegisterOutputType(WtpRadio2VapOutput{})
	pulumi.RegisterOutputType(WtpRadio2VapArrayOutput{})
	pulumi.RegisterOutputType(WtpRadio3Output{})
	pulumi.RegisterOutputType(WtpRadio3PtrOutput{})
	pulumi.RegisterOutputType(WtpRadio3ChannelOutput{})
	pulumi.RegisterOutputType(WtpRadio3ChannelArrayOutput{})
	pulumi.RegisterOutputType(WtpRadio3VapOutput{})
	pulumi.RegisterOutputType(WtpRadio3VapArrayOutput{})
	pulumi.RegisterOutputType(WtpRadio4Output{})
	pulumi.RegisterOutputType(WtpRadio4PtrOutput{})
	pulumi.RegisterOutputType(WtpRadio4ChannelOutput{})
	pulumi.RegisterOutputType(WtpRadio4ChannelArrayOutput{})
	pulumi.RegisterOutputType(WtpRadio4VapOutput{})
	pulumi.RegisterOutputType(WtpRadio4VapArrayOutput{})
	pulumi.RegisterOutputType(WtpSplitTunnelingAclOutput{})
	pulumi.RegisterOutputType(WtpSplitTunnelingAclArrayOutput{})
	pulumi.RegisterOutputType(WtpgroupWtpOutput{})
	pulumi.RegisterOutputType(WtpgroupWtpArrayOutput{})
	pulumi.RegisterOutputType(WtpprofileDenyMacListOutput{})
	pulumi.RegisterOutputType(WtpprofileDenyMacListArrayOutput{})
	pulumi.RegisterOutputType(WtpprofileEslSesDongleOutput{})
	pulumi.RegisterOutputType(WtpprofileEslSesDonglePtrOutput{})
	pulumi.RegisterOutputType(WtpprofileLanOutput{})
	pulumi.RegisterOutputType(WtpprofileLanPtrOutput{})
	pulumi.RegisterOutputType(WtpprofileLbsOutput{})
	pulumi.RegisterOutputType(WtpprofileLbsPtrOutput{})
	pulumi.RegisterOutputType(WtpprofileLedScheduleOutput{})
	pulumi.RegisterOutputType(WtpprofileLedScheduleArrayOutput{})
	pulumi.RegisterOutputType(WtpprofilePlatformOutput{})
	pulumi.RegisterOutputType(WtpprofilePlatformPtrOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio1Output{})
	pulumi.RegisterOutputType(WtpprofileRadio1PtrOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio1ChannelOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio1ChannelArrayOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio1VapOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio1VapArrayOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio2Output{})
	pulumi.RegisterOutputType(WtpprofileRadio2PtrOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio2ChannelOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio2ChannelArrayOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio2VapOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio2VapArrayOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio3Output{})
	pulumi.RegisterOutputType(WtpprofileRadio3PtrOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio3ChannelOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio3ChannelArrayOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio3VapOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio3VapArrayOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio4Output{})
	pulumi.RegisterOutputType(WtpprofileRadio4PtrOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio4ChannelOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio4ChannelArrayOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio4VapOutput{})
	pulumi.RegisterOutputType(WtpprofileRadio4VapArrayOutput{})
	pulumi.RegisterOutputType(WtpprofileSplitTunnelingAclOutput{})
	pulumi.RegisterOutputType(WtpprofileSplitTunnelingAclArrayOutput{})
}
