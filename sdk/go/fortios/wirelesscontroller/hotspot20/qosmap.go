// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hotspot20

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure QoS map set.
//
// ## Import
//
// WirelessControllerHotspot20 QosMap can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/hotspot20/qosmap:Qosmap labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/hotspot20/qosmap:Qosmap labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Qosmap struct {
	pulumi.CustomResourceState

	// Differentiated Services Code Point (DSCP) exceptions. The structure of `dscpExcept` block is documented below.
	DscpExcepts QosmapDscpExceptArrayOutput `pulumi:"dscpExcepts"`
	// Differentiated Services Code Point (DSCP) ranges. The structure of `dscpRange` block is documented below.
	DscpRanges QosmapDscpRangeArrayOutput `pulumi:"dscpRanges"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// QOS-MAP name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewQosmap registers a new resource with the given unique name, arguments, and options.
func NewQosmap(ctx *pulumi.Context,
	name string, args *QosmapArgs, opts ...pulumi.ResourceOption) (*Qosmap, error) {
	if args == nil {
		args = &QosmapArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Qosmap
	err := ctx.RegisterResource("fortios:wirelesscontroller/hotspot20/qosmap:Qosmap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQosmap gets an existing Qosmap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQosmap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QosmapState, opts ...pulumi.ResourceOption) (*Qosmap, error) {
	var resource Qosmap
	err := ctx.ReadResource("fortios:wirelesscontroller/hotspot20/qosmap:Qosmap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Qosmap resources.
type qosmapState struct {
	// Differentiated Services Code Point (DSCP) exceptions. The structure of `dscpExcept` block is documented below.
	DscpExcepts []QosmapDscpExcept `pulumi:"dscpExcepts"`
	// Differentiated Services Code Point (DSCP) ranges. The structure of `dscpRange` block is documented below.
	DscpRanges []QosmapDscpRange `pulumi:"dscpRanges"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// QOS-MAP name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type QosmapState struct {
	// Differentiated Services Code Point (DSCP) exceptions. The structure of `dscpExcept` block is documented below.
	DscpExcepts QosmapDscpExceptArrayInput
	// Differentiated Services Code Point (DSCP) ranges. The structure of `dscpRange` block is documented below.
	DscpRanges QosmapDscpRangeArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// QOS-MAP name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (QosmapState) ElementType() reflect.Type {
	return reflect.TypeOf((*qosmapState)(nil)).Elem()
}

type qosmapArgs struct {
	// Differentiated Services Code Point (DSCP) exceptions. The structure of `dscpExcept` block is documented below.
	DscpExcepts []QosmapDscpExcept `pulumi:"dscpExcepts"`
	// Differentiated Services Code Point (DSCP) ranges. The structure of `dscpRange` block is documented below.
	DscpRanges []QosmapDscpRange `pulumi:"dscpRanges"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// QOS-MAP name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Qosmap resource.
type QosmapArgs struct {
	// Differentiated Services Code Point (DSCP) exceptions. The structure of `dscpExcept` block is documented below.
	DscpExcepts QosmapDscpExceptArrayInput
	// Differentiated Services Code Point (DSCP) ranges. The structure of `dscpRange` block is documented below.
	DscpRanges QosmapDscpRangeArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// QOS-MAP name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (QosmapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*qosmapArgs)(nil)).Elem()
}

type QosmapInput interface {
	pulumi.Input

	ToQosmapOutput() QosmapOutput
	ToQosmapOutputWithContext(ctx context.Context) QosmapOutput
}

func (*Qosmap) ElementType() reflect.Type {
	return reflect.TypeOf((**Qosmap)(nil)).Elem()
}

func (i *Qosmap) ToQosmapOutput() QosmapOutput {
	return i.ToQosmapOutputWithContext(context.Background())
}

func (i *Qosmap) ToQosmapOutputWithContext(ctx context.Context) QosmapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QosmapOutput)
}

// QosmapArrayInput is an input type that accepts QosmapArray and QosmapArrayOutput values.
// You can construct a concrete instance of `QosmapArrayInput` via:
//
//	QosmapArray{ QosmapArgs{...} }
type QosmapArrayInput interface {
	pulumi.Input

	ToQosmapArrayOutput() QosmapArrayOutput
	ToQosmapArrayOutputWithContext(context.Context) QosmapArrayOutput
}

type QosmapArray []QosmapInput

func (QosmapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Qosmap)(nil)).Elem()
}

func (i QosmapArray) ToQosmapArrayOutput() QosmapArrayOutput {
	return i.ToQosmapArrayOutputWithContext(context.Background())
}

func (i QosmapArray) ToQosmapArrayOutputWithContext(ctx context.Context) QosmapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QosmapArrayOutput)
}

// QosmapMapInput is an input type that accepts QosmapMap and QosmapMapOutput values.
// You can construct a concrete instance of `QosmapMapInput` via:
//
//	QosmapMap{ "key": QosmapArgs{...} }
type QosmapMapInput interface {
	pulumi.Input

	ToQosmapMapOutput() QosmapMapOutput
	ToQosmapMapOutputWithContext(context.Context) QosmapMapOutput
}

type QosmapMap map[string]QosmapInput

func (QosmapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Qosmap)(nil)).Elem()
}

func (i QosmapMap) ToQosmapMapOutput() QosmapMapOutput {
	return i.ToQosmapMapOutputWithContext(context.Background())
}

func (i QosmapMap) ToQosmapMapOutputWithContext(ctx context.Context) QosmapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QosmapMapOutput)
}

type QosmapOutput struct{ *pulumi.OutputState }

func (QosmapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Qosmap)(nil)).Elem()
}

func (o QosmapOutput) ToQosmapOutput() QosmapOutput {
	return o
}

func (o QosmapOutput) ToQosmapOutputWithContext(ctx context.Context) QosmapOutput {
	return o
}

// Differentiated Services Code Point (DSCP) exceptions. The structure of `dscpExcept` block is documented below.
func (o QosmapOutput) DscpExcepts() QosmapDscpExceptArrayOutput {
	return o.ApplyT(func(v *Qosmap) QosmapDscpExceptArrayOutput { return v.DscpExcepts }).(QosmapDscpExceptArrayOutput)
}

// Differentiated Services Code Point (DSCP) ranges. The structure of `dscpRange` block is documented below.
func (o QosmapOutput) DscpRanges() QosmapDscpRangeArrayOutput {
	return o.ApplyT(func(v *Qosmap) QosmapDscpRangeArrayOutput { return v.DscpRanges }).(QosmapDscpRangeArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o QosmapOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Qosmap) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o QosmapOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Qosmap) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// QOS-MAP name.
func (o QosmapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Qosmap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o QosmapOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Qosmap) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type QosmapArrayOutput struct{ *pulumi.OutputState }

func (QosmapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Qosmap)(nil)).Elem()
}

func (o QosmapArrayOutput) ToQosmapArrayOutput() QosmapArrayOutput {
	return o
}

func (o QosmapArrayOutput) ToQosmapArrayOutputWithContext(ctx context.Context) QosmapArrayOutput {
	return o
}

func (o QosmapArrayOutput) Index(i pulumi.IntInput) QosmapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Qosmap {
		return vs[0].([]*Qosmap)[vs[1].(int)]
	}).(QosmapOutput)
}

type QosmapMapOutput struct{ *pulumi.OutputState }

func (QosmapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Qosmap)(nil)).Elem()
}

func (o QosmapMapOutput) ToQosmapMapOutput() QosmapMapOutput {
	return o
}

func (o QosmapMapOutput) ToQosmapMapOutputWithContext(ctx context.Context) QosmapMapOutput {
	return o
}

func (o QosmapMapOutput) MapIndex(k pulumi.StringInput) QosmapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Qosmap {
		return vs[0].(map[string]*Qosmap)[vs[1].(string)]
	}).(QosmapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QosmapInput)(nil)).Elem(), &Qosmap{})
	pulumi.RegisterInputType(reflect.TypeOf((*QosmapArrayInput)(nil)).Elem(), QosmapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QosmapMapInput)(nil)).Elem(), QosmapMap{})
	pulumi.RegisterOutputType(QosmapOutput{})
	pulumi.RegisterOutputType(QosmapArrayOutput{})
	pulumi.RegisterOutputType(QosmapMapOutput{})
}
