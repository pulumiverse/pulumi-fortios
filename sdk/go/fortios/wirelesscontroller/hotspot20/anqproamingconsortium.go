// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hotspot20

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure roaming consortium.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/wirelesscontroller"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := wirelesscontroller.NewAnqproamingconsortium(ctx, "trname", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// WirelessControllerHotspot20 AnqpRoamingConsortium can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/hotspot20/anqproamingconsortium:Anqproamingconsortium labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:wirelesscontroller/hotspot20/anqproamingconsortium:Anqproamingconsortium labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Anqproamingconsortium struct {
	pulumi.CustomResourceState

	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Roaming consortium name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Organization identifier list. The structure of `oiList` block is documented below.
	OiLists AnqproamingconsortiumOiListArrayOutput `pulumi:"oiLists"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewAnqproamingconsortium registers a new resource with the given unique name, arguments, and options.
func NewAnqproamingconsortium(ctx *pulumi.Context,
	name string, args *AnqproamingconsortiumArgs, opts ...pulumi.ResourceOption) (*Anqproamingconsortium, error) {
	if args == nil {
		args = &AnqproamingconsortiumArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Anqproamingconsortium
	err := ctx.RegisterResource("fortios:wirelesscontroller/hotspot20/anqproamingconsortium:Anqproamingconsortium", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnqproamingconsortium gets an existing Anqproamingconsortium resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnqproamingconsortium(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnqproamingconsortiumState, opts ...pulumi.ResourceOption) (*Anqproamingconsortium, error) {
	var resource Anqproamingconsortium
	err := ctx.ReadResource("fortios:wirelesscontroller/hotspot20/anqproamingconsortium:Anqproamingconsortium", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Anqproamingconsortium resources.
type anqproamingconsortiumState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Roaming consortium name.
	Name *string `pulumi:"name"`
	// Organization identifier list. The structure of `oiList` block is documented below.
	OiLists []AnqproamingconsortiumOiList `pulumi:"oiLists"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type AnqproamingconsortiumState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Roaming consortium name.
	Name pulumi.StringPtrInput
	// Organization identifier list. The structure of `oiList` block is documented below.
	OiLists AnqproamingconsortiumOiListArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (AnqproamingconsortiumState) ElementType() reflect.Type {
	return reflect.TypeOf((*anqproamingconsortiumState)(nil)).Elem()
}

type anqproamingconsortiumArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Roaming consortium name.
	Name *string `pulumi:"name"`
	// Organization identifier list. The structure of `oiList` block is documented below.
	OiLists []AnqproamingconsortiumOiList `pulumi:"oiLists"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Anqproamingconsortium resource.
type AnqproamingconsortiumArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Roaming consortium name.
	Name pulumi.StringPtrInput
	// Organization identifier list. The structure of `oiList` block is documented below.
	OiLists AnqproamingconsortiumOiListArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (AnqproamingconsortiumArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*anqproamingconsortiumArgs)(nil)).Elem()
}

type AnqproamingconsortiumInput interface {
	pulumi.Input

	ToAnqproamingconsortiumOutput() AnqproamingconsortiumOutput
	ToAnqproamingconsortiumOutputWithContext(ctx context.Context) AnqproamingconsortiumOutput
}

func (*Anqproamingconsortium) ElementType() reflect.Type {
	return reflect.TypeOf((**Anqproamingconsortium)(nil)).Elem()
}

func (i *Anqproamingconsortium) ToAnqproamingconsortiumOutput() AnqproamingconsortiumOutput {
	return i.ToAnqproamingconsortiumOutputWithContext(context.Background())
}

func (i *Anqproamingconsortium) ToAnqproamingconsortiumOutputWithContext(ctx context.Context) AnqproamingconsortiumOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnqproamingconsortiumOutput)
}

// AnqproamingconsortiumArrayInput is an input type that accepts AnqproamingconsortiumArray and AnqproamingconsortiumArrayOutput values.
// You can construct a concrete instance of `AnqproamingconsortiumArrayInput` via:
//
//	AnqproamingconsortiumArray{ AnqproamingconsortiumArgs{...} }
type AnqproamingconsortiumArrayInput interface {
	pulumi.Input

	ToAnqproamingconsortiumArrayOutput() AnqproamingconsortiumArrayOutput
	ToAnqproamingconsortiumArrayOutputWithContext(context.Context) AnqproamingconsortiumArrayOutput
}

type AnqproamingconsortiumArray []AnqproamingconsortiumInput

func (AnqproamingconsortiumArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Anqproamingconsortium)(nil)).Elem()
}

func (i AnqproamingconsortiumArray) ToAnqproamingconsortiumArrayOutput() AnqproamingconsortiumArrayOutput {
	return i.ToAnqproamingconsortiumArrayOutputWithContext(context.Background())
}

func (i AnqproamingconsortiumArray) ToAnqproamingconsortiumArrayOutputWithContext(ctx context.Context) AnqproamingconsortiumArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnqproamingconsortiumArrayOutput)
}

// AnqproamingconsortiumMapInput is an input type that accepts AnqproamingconsortiumMap and AnqproamingconsortiumMapOutput values.
// You can construct a concrete instance of `AnqproamingconsortiumMapInput` via:
//
//	AnqproamingconsortiumMap{ "key": AnqproamingconsortiumArgs{...} }
type AnqproamingconsortiumMapInput interface {
	pulumi.Input

	ToAnqproamingconsortiumMapOutput() AnqproamingconsortiumMapOutput
	ToAnqproamingconsortiumMapOutputWithContext(context.Context) AnqproamingconsortiumMapOutput
}

type AnqproamingconsortiumMap map[string]AnqproamingconsortiumInput

func (AnqproamingconsortiumMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Anqproamingconsortium)(nil)).Elem()
}

func (i AnqproamingconsortiumMap) ToAnqproamingconsortiumMapOutput() AnqproamingconsortiumMapOutput {
	return i.ToAnqproamingconsortiumMapOutputWithContext(context.Background())
}

func (i AnqproamingconsortiumMap) ToAnqproamingconsortiumMapOutputWithContext(ctx context.Context) AnqproamingconsortiumMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnqproamingconsortiumMapOutput)
}

type AnqproamingconsortiumOutput struct{ *pulumi.OutputState }

func (AnqproamingconsortiumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Anqproamingconsortium)(nil)).Elem()
}

func (o AnqproamingconsortiumOutput) ToAnqproamingconsortiumOutput() AnqproamingconsortiumOutput {
	return o
}

func (o AnqproamingconsortiumOutput) ToAnqproamingconsortiumOutputWithContext(ctx context.Context) AnqproamingconsortiumOutput {
	return o
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o AnqproamingconsortiumOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Anqproamingconsortium) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o AnqproamingconsortiumOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Anqproamingconsortium) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Roaming consortium name.
func (o AnqproamingconsortiumOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Anqproamingconsortium) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Organization identifier list. The structure of `oiList` block is documented below.
func (o AnqproamingconsortiumOutput) OiLists() AnqproamingconsortiumOiListArrayOutput {
	return o.ApplyT(func(v *Anqproamingconsortium) AnqproamingconsortiumOiListArrayOutput { return v.OiLists }).(AnqproamingconsortiumOiListArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o AnqproamingconsortiumOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Anqproamingconsortium) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type AnqproamingconsortiumArrayOutput struct{ *pulumi.OutputState }

func (AnqproamingconsortiumArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Anqproamingconsortium)(nil)).Elem()
}

func (o AnqproamingconsortiumArrayOutput) ToAnqproamingconsortiumArrayOutput() AnqproamingconsortiumArrayOutput {
	return o
}

func (o AnqproamingconsortiumArrayOutput) ToAnqproamingconsortiumArrayOutputWithContext(ctx context.Context) AnqproamingconsortiumArrayOutput {
	return o
}

func (o AnqproamingconsortiumArrayOutput) Index(i pulumi.IntInput) AnqproamingconsortiumOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Anqproamingconsortium {
		return vs[0].([]*Anqproamingconsortium)[vs[1].(int)]
	}).(AnqproamingconsortiumOutput)
}

type AnqproamingconsortiumMapOutput struct{ *pulumi.OutputState }

func (AnqproamingconsortiumMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Anqproamingconsortium)(nil)).Elem()
}

func (o AnqproamingconsortiumMapOutput) ToAnqproamingconsortiumMapOutput() AnqproamingconsortiumMapOutput {
	return o
}

func (o AnqproamingconsortiumMapOutput) ToAnqproamingconsortiumMapOutputWithContext(ctx context.Context) AnqproamingconsortiumMapOutput {
	return o
}

func (o AnqproamingconsortiumMapOutput) MapIndex(k pulumi.StringInput) AnqproamingconsortiumOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Anqproamingconsortium {
		return vs[0].(map[string]*Anqproamingconsortium)[vs[1].(string)]
	}).(AnqproamingconsortiumOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnqproamingconsortiumInput)(nil)).Elem(), &Anqproamingconsortium{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnqproamingconsortiumArrayInput)(nil)).Elem(), AnqproamingconsortiumArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnqproamingconsortiumMapInput)(nil)).Elem(), AnqproamingconsortiumMap{})
	pulumi.RegisterOutputType(AnqproamingconsortiumOutput{})
	pulumi.RegisterOutputType(AnqproamingconsortiumArrayOutput{})
	pulumi.RegisterOutputType(AnqproamingconsortiumMapOutput{})
}
