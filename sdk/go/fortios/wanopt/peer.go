// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wanopt

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure WAN optimization peers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/wanopt"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := wanopt.NewPeer(ctx, "trname", &wanopt.PeerArgs{
//				Ip:         pulumi.String("1.1.1.1"),
//				PeerHostId: pulumi.String("1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Wanopt Peer can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:wanopt/peer:Peer labelname {{peer_host_id}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:wanopt/peer:Peer labelname {{peer_host_id}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Peer struct {
	pulumi.CustomResourceState

	// Peer IP address.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Peer host ID.
	PeerHostId pulumi.StringOutput `pulumi:"peerHostId"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewPeer registers a new resource with the given unique name, arguments, and options.
func NewPeer(ctx *pulumi.Context,
	name string, args *PeerArgs, opts ...pulumi.ResourceOption) (*Peer, error) {
	if args == nil {
		args = &PeerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Peer
	err := ctx.RegisterResource("fortios:wanopt/peer:Peer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeer gets an existing Peer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeerState, opts ...pulumi.ResourceOption) (*Peer, error) {
	var resource Peer
	err := ctx.ReadResource("fortios:wanopt/peer:Peer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Peer resources.
type peerState struct {
	// Peer IP address.
	Ip *string `pulumi:"ip"`
	// Peer host ID.
	PeerHostId *string `pulumi:"peerHostId"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type PeerState struct {
	// Peer IP address.
	Ip pulumi.StringPtrInput
	// Peer host ID.
	PeerHostId pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (PeerState) ElementType() reflect.Type {
	return reflect.TypeOf((*peerState)(nil)).Elem()
}

type peerArgs struct {
	// Peer IP address.
	Ip *string `pulumi:"ip"`
	// Peer host ID.
	PeerHostId *string `pulumi:"peerHostId"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Peer resource.
type PeerArgs struct {
	// Peer IP address.
	Ip pulumi.StringPtrInput
	// Peer host ID.
	PeerHostId pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (PeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peerArgs)(nil)).Elem()
}

type PeerInput interface {
	pulumi.Input

	ToPeerOutput() PeerOutput
	ToPeerOutputWithContext(ctx context.Context) PeerOutput
}

func (*Peer) ElementType() reflect.Type {
	return reflect.TypeOf((**Peer)(nil)).Elem()
}

func (i *Peer) ToPeerOutput() PeerOutput {
	return i.ToPeerOutputWithContext(context.Background())
}

func (i *Peer) ToPeerOutputWithContext(ctx context.Context) PeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerOutput)
}

// PeerArrayInput is an input type that accepts PeerArray and PeerArrayOutput values.
// You can construct a concrete instance of `PeerArrayInput` via:
//
//	PeerArray{ PeerArgs{...} }
type PeerArrayInput interface {
	pulumi.Input

	ToPeerArrayOutput() PeerArrayOutput
	ToPeerArrayOutputWithContext(context.Context) PeerArrayOutput
}

type PeerArray []PeerInput

func (PeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Peer)(nil)).Elem()
}

func (i PeerArray) ToPeerArrayOutput() PeerArrayOutput {
	return i.ToPeerArrayOutputWithContext(context.Background())
}

func (i PeerArray) ToPeerArrayOutputWithContext(ctx context.Context) PeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerArrayOutput)
}

// PeerMapInput is an input type that accepts PeerMap and PeerMapOutput values.
// You can construct a concrete instance of `PeerMapInput` via:
//
//	PeerMap{ "key": PeerArgs{...} }
type PeerMapInput interface {
	pulumi.Input

	ToPeerMapOutput() PeerMapOutput
	ToPeerMapOutputWithContext(context.Context) PeerMapOutput
}

type PeerMap map[string]PeerInput

func (PeerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Peer)(nil)).Elem()
}

func (i PeerMap) ToPeerMapOutput() PeerMapOutput {
	return i.ToPeerMapOutputWithContext(context.Background())
}

func (i PeerMap) ToPeerMapOutputWithContext(ctx context.Context) PeerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerMapOutput)
}

type PeerOutput struct{ *pulumi.OutputState }

func (PeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Peer)(nil)).Elem()
}

func (o PeerOutput) ToPeerOutput() PeerOutput {
	return o
}

func (o PeerOutput) ToPeerOutputWithContext(ctx context.Context) PeerOutput {
	return o
}

// Peer IP address.
func (o PeerOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// Peer host ID.
func (o PeerOutput) PeerHostId() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.PeerHostId }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o PeerOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type PeerArrayOutput struct{ *pulumi.OutputState }

func (PeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Peer)(nil)).Elem()
}

func (o PeerArrayOutput) ToPeerArrayOutput() PeerArrayOutput {
	return o
}

func (o PeerArrayOutput) ToPeerArrayOutputWithContext(ctx context.Context) PeerArrayOutput {
	return o
}

func (o PeerArrayOutput) Index(i pulumi.IntInput) PeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Peer {
		return vs[0].([]*Peer)[vs[1].(int)]
	}).(PeerOutput)
}

type PeerMapOutput struct{ *pulumi.OutputState }

func (PeerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Peer)(nil)).Elem()
}

func (o PeerMapOutput) ToPeerMapOutput() PeerMapOutput {
	return o
}

func (o PeerMapOutput) ToPeerMapOutputWithContext(ctx context.Context) PeerMapOutput {
	return o
}

func (o PeerMapOutput) MapIndex(k pulumi.StringInput) PeerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Peer {
		return vs[0].(map[string]*Peer)[vs[1].(string)]
	}).(PeerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PeerInput)(nil)).Elem(), &Peer{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeerArrayInput)(nil)).Elem(), PeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeerMapInput)(nil)).Elem(), PeerMap{})
	pulumi.RegisterOutputType(PeerOutput{})
	pulumi.RegisterOutputType(PeerArrayOutput{})
	pulumi.RegisterOutputType(PeerMapOutput{})
}
