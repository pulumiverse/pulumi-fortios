// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wanopt

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

var _ = internal.GetEnvOrDefault

type CacheserviceDstPeer struct {
	// Set authentication type for this peer.
	AuthType *int `pulumi:"authType"`
	// Device ID of this peer.
	DeviceId *string `pulumi:"deviceId"`
	// Set encode type for this peer.
	EncodeType *int `pulumi:"encodeType"`
	// Set cluster IP address of this peer.
	Ip *string `pulumi:"ip"`
	// Set priority for this peer.
	Priority *int `pulumi:"priority"`
}

// CacheserviceDstPeerInput is an input type that accepts CacheserviceDstPeerArgs and CacheserviceDstPeerOutput values.
// You can construct a concrete instance of `CacheserviceDstPeerInput` via:
//
//	CacheserviceDstPeerArgs{...}
type CacheserviceDstPeerInput interface {
	pulumi.Input

	ToCacheserviceDstPeerOutput() CacheserviceDstPeerOutput
	ToCacheserviceDstPeerOutputWithContext(context.Context) CacheserviceDstPeerOutput
}

type CacheserviceDstPeerArgs struct {
	// Set authentication type for this peer.
	AuthType pulumi.IntPtrInput `pulumi:"authType"`
	// Device ID of this peer.
	DeviceId pulumi.StringPtrInput `pulumi:"deviceId"`
	// Set encode type for this peer.
	EncodeType pulumi.IntPtrInput `pulumi:"encodeType"`
	// Set cluster IP address of this peer.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Set priority for this peer.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
}

func (CacheserviceDstPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheserviceDstPeer)(nil)).Elem()
}

func (i CacheserviceDstPeerArgs) ToCacheserviceDstPeerOutput() CacheserviceDstPeerOutput {
	return i.ToCacheserviceDstPeerOutputWithContext(context.Background())
}

func (i CacheserviceDstPeerArgs) ToCacheserviceDstPeerOutputWithContext(ctx context.Context) CacheserviceDstPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheserviceDstPeerOutput)
}

// CacheserviceDstPeerArrayInput is an input type that accepts CacheserviceDstPeerArray and CacheserviceDstPeerArrayOutput values.
// You can construct a concrete instance of `CacheserviceDstPeerArrayInput` via:
//
//	CacheserviceDstPeerArray{ CacheserviceDstPeerArgs{...} }
type CacheserviceDstPeerArrayInput interface {
	pulumi.Input

	ToCacheserviceDstPeerArrayOutput() CacheserviceDstPeerArrayOutput
	ToCacheserviceDstPeerArrayOutputWithContext(context.Context) CacheserviceDstPeerArrayOutput
}

type CacheserviceDstPeerArray []CacheserviceDstPeerInput

func (CacheserviceDstPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CacheserviceDstPeer)(nil)).Elem()
}

func (i CacheserviceDstPeerArray) ToCacheserviceDstPeerArrayOutput() CacheserviceDstPeerArrayOutput {
	return i.ToCacheserviceDstPeerArrayOutputWithContext(context.Background())
}

func (i CacheserviceDstPeerArray) ToCacheserviceDstPeerArrayOutputWithContext(ctx context.Context) CacheserviceDstPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheserviceDstPeerArrayOutput)
}

type CacheserviceDstPeerOutput struct{ *pulumi.OutputState }

func (CacheserviceDstPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheserviceDstPeer)(nil)).Elem()
}

func (o CacheserviceDstPeerOutput) ToCacheserviceDstPeerOutput() CacheserviceDstPeerOutput {
	return o
}

func (o CacheserviceDstPeerOutput) ToCacheserviceDstPeerOutputWithContext(ctx context.Context) CacheserviceDstPeerOutput {
	return o
}

// Set authentication type for this peer.
func (o CacheserviceDstPeerOutput) AuthType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheserviceDstPeer) *int { return v.AuthType }).(pulumi.IntPtrOutput)
}

// Device ID of this peer.
func (o CacheserviceDstPeerOutput) DeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheserviceDstPeer) *string { return v.DeviceId }).(pulumi.StringPtrOutput)
}

// Set encode type for this peer.
func (o CacheserviceDstPeerOutput) EncodeType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheserviceDstPeer) *int { return v.EncodeType }).(pulumi.IntPtrOutput)
}

// Set cluster IP address of this peer.
func (o CacheserviceDstPeerOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheserviceDstPeer) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Set priority for this peer.
func (o CacheserviceDstPeerOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheserviceDstPeer) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

type CacheserviceDstPeerArrayOutput struct{ *pulumi.OutputState }

func (CacheserviceDstPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CacheserviceDstPeer)(nil)).Elem()
}

func (o CacheserviceDstPeerArrayOutput) ToCacheserviceDstPeerArrayOutput() CacheserviceDstPeerArrayOutput {
	return o
}

func (o CacheserviceDstPeerArrayOutput) ToCacheserviceDstPeerArrayOutputWithContext(ctx context.Context) CacheserviceDstPeerArrayOutput {
	return o
}

func (o CacheserviceDstPeerArrayOutput) Index(i pulumi.IntInput) CacheserviceDstPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CacheserviceDstPeer {
		return vs[0].([]CacheserviceDstPeer)[vs[1].(int)]
	}).(CacheserviceDstPeerOutput)
}

type CacheserviceSrcPeer struct {
	// Set authentication type for this peer.
	AuthType *int `pulumi:"authType"`
	// Device ID of this peer.
	DeviceId *string `pulumi:"deviceId"`
	// Set encode type for this peer.
	EncodeType *int `pulumi:"encodeType"`
	// Set cluster IP address of this peer.
	Ip *string `pulumi:"ip"`
	// Set priority for this peer.
	Priority *int `pulumi:"priority"`
}

// CacheserviceSrcPeerInput is an input type that accepts CacheserviceSrcPeerArgs and CacheserviceSrcPeerOutput values.
// You can construct a concrete instance of `CacheserviceSrcPeerInput` via:
//
//	CacheserviceSrcPeerArgs{...}
type CacheserviceSrcPeerInput interface {
	pulumi.Input

	ToCacheserviceSrcPeerOutput() CacheserviceSrcPeerOutput
	ToCacheserviceSrcPeerOutputWithContext(context.Context) CacheserviceSrcPeerOutput
}

type CacheserviceSrcPeerArgs struct {
	// Set authentication type for this peer.
	AuthType pulumi.IntPtrInput `pulumi:"authType"`
	// Device ID of this peer.
	DeviceId pulumi.StringPtrInput `pulumi:"deviceId"`
	// Set encode type for this peer.
	EncodeType pulumi.IntPtrInput `pulumi:"encodeType"`
	// Set cluster IP address of this peer.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Set priority for this peer.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
}

func (CacheserviceSrcPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheserviceSrcPeer)(nil)).Elem()
}

func (i CacheserviceSrcPeerArgs) ToCacheserviceSrcPeerOutput() CacheserviceSrcPeerOutput {
	return i.ToCacheserviceSrcPeerOutputWithContext(context.Background())
}

func (i CacheserviceSrcPeerArgs) ToCacheserviceSrcPeerOutputWithContext(ctx context.Context) CacheserviceSrcPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheserviceSrcPeerOutput)
}

// CacheserviceSrcPeerArrayInput is an input type that accepts CacheserviceSrcPeerArray and CacheserviceSrcPeerArrayOutput values.
// You can construct a concrete instance of `CacheserviceSrcPeerArrayInput` via:
//
//	CacheserviceSrcPeerArray{ CacheserviceSrcPeerArgs{...} }
type CacheserviceSrcPeerArrayInput interface {
	pulumi.Input

	ToCacheserviceSrcPeerArrayOutput() CacheserviceSrcPeerArrayOutput
	ToCacheserviceSrcPeerArrayOutputWithContext(context.Context) CacheserviceSrcPeerArrayOutput
}

type CacheserviceSrcPeerArray []CacheserviceSrcPeerInput

func (CacheserviceSrcPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CacheserviceSrcPeer)(nil)).Elem()
}

func (i CacheserviceSrcPeerArray) ToCacheserviceSrcPeerArrayOutput() CacheserviceSrcPeerArrayOutput {
	return i.ToCacheserviceSrcPeerArrayOutputWithContext(context.Background())
}

func (i CacheserviceSrcPeerArray) ToCacheserviceSrcPeerArrayOutputWithContext(ctx context.Context) CacheserviceSrcPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheserviceSrcPeerArrayOutput)
}

type CacheserviceSrcPeerOutput struct{ *pulumi.OutputState }

func (CacheserviceSrcPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheserviceSrcPeer)(nil)).Elem()
}

func (o CacheserviceSrcPeerOutput) ToCacheserviceSrcPeerOutput() CacheserviceSrcPeerOutput {
	return o
}

func (o CacheserviceSrcPeerOutput) ToCacheserviceSrcPeerOutputWithContext(ctx context.Context) CacheserviceSrcPeerOutput {
	return o
}

// Set authentication type for this peer.
func (o CacheserviceSrcPeerOutput) AuthType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheserviceSrcPeer) *int { return v.AuthType }).(pulumi.IntPtrOutput)
}

// Device ID of this peer.
func (o CacheserviceSrcPeerOutput) DeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheserviceSrcPeer) *string { return v.DeviceId }).(pulumi.StringPtrOutput)
}

// Set encode type for this peer.
func (o CacheserviceSrcPeerOutput) EncodeType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheserviceSrcPeer) *int { return v.EncodeType }).(pulumi.IntPtrOutput)
}

// Set cluster IP address of this peer.
func (o CacheserviceSrcPeerOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheserviceSrcPeer) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Set priority for this peer.
func (o CacheserviceSrcPeerOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheserviceSrcPeer) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

type CacheserviceSrcPeerArrayOutput struct{ *pulumi.OutputState }

func (CacheserviceSrcPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CacheserviceSrcPeer)(nil)).Elem()
}

func (o CacheserviceSrcPeerArrayOutput) ToCacheserviceSrcPeerArrayOutput() CacheserviceSrcPeerArrayOutput {
	return o
}

func (o CacheserviceSrcPeerArrayOutput) ToCacheserviceSrcPeerArrayOutputWithContext(ctx context.Context) CacheserviceSrcPeerArrayOutput {
	return o
}

func (o CacheserviceSrcPeerArrayOutput) Index(i pulumi.IntInput) CacheserviceSrcPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CacheserviceSrcPeer {
		return vs[0].([]CacheserviceSrcPeer)[vs[1].(int)]
	}).(CacheserviceSrcPeerOutput)
}

type ContentdeliverynetworkruleHostDomainNameSuffix struct {
	// Suffix portion of the fully qualified domain name.
	Name *string `pulumi:"name"`
}

// ContentdeliverynetworkruleHostDomainNameSuffixInput is an input type that accepts ContentdeliverynetworkruleHostDomainNameSuffixArgs and ContentdeliverynetworkruleHostDomainNameSuffixOutput values.
// You can construct a concrete instance of `ContentdeliverynetworkruleHostDomainNameSuffixInput` via:
//
//	ContentdeliverynetworkruleHostDomainNameSuffixArgs{...}
type ContentdeliverynetworkruleHostDomainNameSuffixInput interface {
	pulumi.Input

	ToContentdeliverynetworkruleHostDomainNameSuffixOutput() ContentdeliverynetworkruleHostDomainNameSuffixOutput
	ToContentdeliverynetworkruleHostDomainNameSuffixOutputWithContext(context.Context) ContentdeliverynetworkruleHostDomainNameSuffixOutput
}

type ContentdeliverynetworkruleHostDomainNameSuffixArgs struct {
	// Suffix portion of the fully qualified domain name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ContentdeliverynetworkruleHostDomainNameSuffixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentdeliverynetworkruleHostDomainNameSuffix)(nil)).Elem()
}

func (i ContentdeliverynetworkruleHostDomainNameSuffixArgs) ToContentdeliverynetworkruleHostDomainNameSuffixOutput() ContentdeliverynetworkruleHostDomainNameSuffixOutput {
	return i.ToContentdeliverynetworkruleHostDomainNameSuffixOutputWithContext(context.Background())
}

func (i ContentdeliverynetworkruleHostDomainNameSuffixArgs) ToContentdeliverynetworkruleHostDomainNameSuffixOutputWithContext(ctx context.Context) ContentdeliverynetworkruleHostDomainNameSuffixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentdeliverynetworkruleHostDomainNameSuffixOutput)
}

// ContentdeliverynetworkruleHostDomainNameSuffixArrayInput is an input type that accepts ContentdeliverynetworkruleHostDomainNameSuffixArray and ContentdeliverynetworkruleHostDomainNameSuffixArrayOutput values.
// You can construct a concrete instance of `ContentdeliverynetworkruleHostDomainNameSuffixArrayInput` via:
//
//	ContentdeliverynetworkruleHostDomainNameSuffixArray{ ContentdeliverynetworkruleHostDomainNameSuffixArgs{...} }
type ContentdeliverynetworkruleHostDomainNameSuffixArrayInput interface {
	pulumi.Input

	ToContentdeliverynetworkruleHostDomainNameSuffixArrayOutput() ContentdeliverynetworkruleHostDomainNameSuffixArrayOutput
	ToContentdeliverynetworkruleHostDomainNameSuffixArrayOutputWithContext(context.Context) ContentdeliverynetworkruleHostDomainNameSuffixArrayOutput
}

type ContentdeliverynetworkruleHostDomainNameSuffixArray []ContentdeliverynetworkruleHostDomainNameSuffixInput

func (ContentdeliverynetworkruleHostDomainNameSuffixArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentdeliverynetworkruleHostDomainNameSuffix)(nil)).Elem()
}

func (i ContentdeliverynetworkruleHostDomainNameSuffixArray) ToContentdeliverynetworkruleHostDomainNameSuffixArrayOutput() ContentdeliverynetworkruleHostDomainNameSuffixArrayOutput {
	return i.ToContentdeliverynetworkruleHostDomainNameSuffixArrayOutputWithContext(context.Background())
}

func (i ContentdeliverynetworkruleHostDomainNameSuffixArray) ToContentdeliverynetworkruleHostDomainNameSuffixArrayOutputWithContext(ctx context.Context) ContentdeliverynetworkruleHostDomainNameSuffixArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentdeliverynetworkruleHostDomainNameSuffixArrayOutput)
}

type ContentdeliverynetworkruleHostDomainNameSuffixOutput struct{ *pulumi.OutputState }

func (ContentdeliverynetworkruleHostDomainNameSuffixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentdeliverynetworkruleHostDomainNameSuffix)(nil)).Elem()
}

func (o ContentdeliverynetworkruleHostDomainNameSuffixOutput) ToContentdeliverynetworkruleHostDomainNameSuffixOutput() ContentdeliverynetworkruleHostDomainNameSuffixOutput {
	return o
}

func (o ContentdeliverynetworkruleHostDomainNameSuffixOutput) ToContentdeliverynetworkruleHostDomainNameSuffixOutputWithContext(ctx context.Context) ContentdeliverynetworkruleHostDomainNameSuffixOutput {
	return o
}

// Suffix portion of the fully qualified domain name.
func (o ContentdeliverynetworkruleHostDomainNameSuffixOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleHostDomainNameSuffix) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ContentdeliverynetworkruleHostDomainNameSuffixArrayOutput struct{ *pulumi.OutputState }

func (ContentdeliverynetworkruleHostDomainNameSuffixArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentdeliverynetworkruleHostDomainNameSuffix)(nil)).Elem()
}

func (o ContentdeliverynetworkruleHostDomainNameSuffixArrayOutput) ToContentdeliverynetworkruleHostDomainNameSuffixArrayOutput() ContentdeliverynetworkruleHostDomainNameSuffixArrayOutput {
	return o
}

func (o ContentdeliverynetworkruleHostDomainNameSuffixArrayOutput) ToContentdeliverynetworkruleHostDomainNameSuffixArrayOutputWithContext(ctx context.Context) ContentdeliverynetworkruleHostDomainNameSuffixArrayOutput {
	return o
}

func (o ContentdeliverynetworkruleHostDomainNameSuffixArrayOutput) Index(i pulumi.IntInput) ContentdeliverynetworkruleHostDomainNameSuffixOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentdeliverynetworkruleHostDomainNameSuffix {
		return vs[0].([]ContentdeliverynetworkruleHostDomainNameSuffix)[vs[1].(int)]
	}).(ContentdeliverynetworkruleHostDomainNameSuffixOutput)
}

type ContentdeliverynetworkruleRule struct {
	// Content ID settings. The structure of `contentId` block is documented below.
	ContentId *ContentdeliverynetworkruleRuleContentId `pulumi:"contentId"`
	// List of entries to match. The structure of `matchEntries` block is documented below.
	MatchEntries []ContentdeliverynetworkruleRuleMatchEntry `pulumi:"matchEntries"`
	// Match criteria for collecting content ID. Valid values: `all`, `any`.
	MatchMode *string `pulumi:"matchMode"`
	// WAN optimization content delivery network rule name.
	Name *string `pulumi:"name"`
	// List of entries to skip. The structure of `skipEntries` block is documented below.
	SkipEntries []ContentdeliverynetworkruleRuleSkipEntry `pulumi:"skipEntries"`
	// Skip mode when evaluating skip-rules. Valid values: `all`, `any`.
	SkipRuleMode *string `pulumi:"skipRuleMode"`
}

// ContentdeliverynetworkruleRuleInput is an input type that accepts ContentdeliverynetworkruleRuleArgs and ContentdeliverynetworkruleRuleOutput values.
// You can construct a concrete instance of `ContentdeliverynetworkruleRuleInput` via:
//
//	ContentdeliverynetworkruleRuleArgs{...}
type ContentdeliverynetworkruleRuleInput interface {
	pulumi.Input

	ToContentdeliverynetworkruleRuleOutput() ContentdeliverynetworkruleRuleOutput
	ToContentdeliverynetworkruleRuleOutputWithContext(context.Context) ContentdeliverynetworkruleRuleOutput
}

type ContentdeliverynetworkruleRuleArgs struct {
	// Content ID settings. The structure of `contentId` block is documented below.
	ContentId ContentdeliverynetworkruleRuleContentIdPtrInput `pulumi:"contentId"`
	// List of entries to match. The structure of `matchEntries` block is documented below.
	MatchEntries ContentdeliverynetworkruleRuleMatchEntryArrayInput `pulumi:"matchEntries"`
	// Match criteria for collecting content ID. Valid values: `all`, `any`.
	MatchMode pulumi.StringPtrInput `pulumi:"matchMode"`
	// WAN optimization content delivery network rule name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of entries to skip. The structure of `skipEntries` block is documented below.
	SkipEntries ContentdeliverynetworkruleRuleSkipEntryArrayInput `pulumi:"skipEntries"`
	// Skip mode when evaluating skip-rules. Valid values: `all`, `any`.
	SkipRuleMode pulumi.StringPtrInput `pulumi:"skipRuleMode"`
}

func (ContentdeliverynetworkruleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentdeliverynetworkruleRule)(nil)).Elem()
}

func (i ContentdeliverynetworkruleRuleArgs) ToContentdeliverynetworkruleRuleOutput() ContentdeliverynetworkruleRuleOutput {
	return i.ToContentdeliverynetworkruleRuleOutputWithContext(context.Background())
}

func (i ContentdeliverynetworkruleRuleArgs) ToContentdeliverynetworkruleRuleOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentdeliverynetworkruleRuleOutput)
}

// ContentdeliverynetworkruleRuleArrayInput is an input type that accepts ContentdeliverynetworkruleRuleArray and ContentdeliverynetworkruleRuleArrayOutput values.
// You can construct a concrete instance of `ContentdeliverynetworkruleRuleArrayInput` via:
//
//	ContentdeliverynetworkruleRuleArray{ ContentdeliverynetworkruleRuleArgs{...} }
type ContentdeliverynetworkruleRuleArrayInput interface {
	pulumi.Input

	ToContentdeliverynetworkruleRuleArrayOutput() ContentdeliverynetworkruleRuleArrayOutput
	ToContentdeliverynetworkruleRuleArrayOutputWithContext(context.Context) ContentdeliverynetworkruleRuleArrayOutput
}

type ContentdeliverynetworkruleRuleArray []ContentdeliverynetworkruleRuleInput

func (ContentdeliverynetworkruleRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentdeliverynetworkruleRule)(nil)).Elem()
}

func (i ContentdeliverynetworkruleRuleArray) ToContentdeliverynetworkruleRuleArrayOutput() ContentdeliverynetworkruleRuleArrayOutput {
	return i.ToContentdeliverynetworkruleRuleArrayOutputWithContext(context.Background())
}

func (i ContentdeliverynetworkruleRuleArray) ToContentdeliverynetworkruleRuleArrayOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentdeliverynetworkruleRuleArrayOutput)
}

type ContentdeliverynetworkruleRuleOutput struct{ *pulumi.OutputState }

func (ContentdeliverynetworkruleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentdeliverynetworkruleRule)(nil)).Elem()
}

func (o ContentdeliverynetworkruleRuleOutput) ToContentdeliverynetworkruleRuleOutput() ContentdeliverynetworkruleRuleOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleOutput) ToContentdeliverynetworkruleRuleOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleOutput {
	return o
}

// Content ID settings. The structure of `contentId` block is documented below.
func (o ContentdeliverynetworkruleRuleOutput) ContentId() ContentdeliverynetworkruleRuleContentIdPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRule) *ContentdeliverynetworkruleRuleContentId { return v.ContentId }).(ContentdeliverynetworkruleRuleContentIdPtrOutput)
}

// List of entries to match. The structure of `matchEntries` block is documented below.
func (o ContentdeliverynetworkruleRuleOutput) MatchEntries() ContentdeliverynetworkruleRuleMatchEntryArrayOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRule) []ContentdeliverynetworkruleRuleMatchEntry {
		return v.MatchEntries
	}).(ContentdeliverynetworkruleRuleMatchEntryArrayOutput)
}

// Match criteria for collecting content ID. Valid values: `all`, `any`.
func (o ContentdeliverynetworkruleRuleOutput) MatchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRule) *string { return v.MatchMode }).(pulumi.StringPtrOutput)
}

// WAN optimization content delivery network rule name.
func (o ContentdeliverynetworkruleRuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of entries to skip. The structure of `skipEntries` block is documented below.
func (o ContentdeliverynetworkruleRuleOutput) SkipEntries() ContentdeliverynetworkruleRuleSkipEntryArrayOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRule) []ContentdeliverynetworkruleRuleSkipEntry { return v.SkipEntries }).(ContentdeliverynetworkruleRuleSkipEntryArrayOutput)
}

// Skip mode when evaluating skip-rules. Valid values: `all`, `any`.
func (o ContentdeliverynetworkruleRuleOutput) SkipRuleMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRule) *string { return v.SkipRuleMode }).(pulumi.StringPtrOutput)
}

type ContentdeliverynetworkruleRuleArrayOutput struct{ *pulumi.OutputState }

func (ContentdeliverynetworkruleRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentdeliverynetworkruleRule)(nil)).Elem()
}

func (o ContentdeliverynetworkruleRuleArrayOutput) ToContentdeliverynetworkruleRuleArrayOutput() ContentdeliverynetworkruleRuleArrayOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleArrayOutput) ToContentdeliverynetworkruleRuleArrayOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleArrayOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleArrayOutput) Index(i pulumi.IntInput) ContentdeliverynetworkruleRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentdeliverynetworkruleRule {
		return vs[0].([]ContentdeliverynetworkruleRule)[vs[1].(int)]
	}).(ContentdeliverynetworkruleRuleOutput)
}

type ContentdeliverynetworkruleRuleContentId struct {
	// Search direction from end-str match. Valid values: `forward`, `backward`.
	EndDirection *string `pulumi:"endDirection"`
	// Number of characters in URL to skip after end-str has been matched.
	EndSkip *int `pulumi:"endSkip"`
	// String from which to end search.
	EndStr *string `pulumi:"endStr"`
	// Name of content ID within the start string and end string.
	RangeStr *string `pulumi:"rangeStr"`
	// Search direction from start-str match. Valid values: `forward`, `backward`.
	StartDirection *string `pulumi:"startDirection"`
	// Number of characters in URL to skip after start-str has been matched.
	StartSkip *int `pulumi:"startSkip"`
	// String from which to start search.
	StartStr *string `pulumi:"startStr"`
	// Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`, `hls-manifest`, `dash-manifest`, `hls-fragment`, `dash-fragment`.
	Target *string `pulumi:"target"`
}

// ContentdeliverynetworkruleRuleContentIdInput is an input type that accepts ContentdeliverynetworkruleRuleContentIdArgs and ContentdeliverynetworkruleRuleContentIdOutput values.
// You can construct a concrete instance of `ContentdeliverynetworkruleRuleContentIdInput` via:
//
//	ContentdeliverynetworkruleRuleContentIdArgs{...}
type ContentdeliverynetworkruleRuleContentIdInput interface {
	pulumi.Input

	ToContentdeliverynetworkruleRuleContentIdOutput() ContentdeliverynetworkruleRuleContentIdOutput
	ToContentdeliverynetworkruleRuleContentIdOutputWithContext(context.Context) ContentdeliverynetworkruleRuleContentIdOutput
}

type ContentdeliverynetworkruleRuleContentIdArgs struct {
	// Search direction from end-str match. Valid values: `forward`, `backward`.
	EndDirection pulumi.StringPtrInput `pulumi:"endDirection"`
	// Number of characters in URL to skip after end-str has been matched.
	EndSkip pulumi.IntPtrInput `pulumi:"endSkip"`
	// String from which to end search.
	EndStr pulumi.StringPtrInput `pulumi:"endStr"`
	// Name of content ID within the start string and end string.
	RangeStr pulumi.StringPtrInput `pulumi:"rangeStr"`
	// Search direction from start-str match. Valid values: `forward`, `backward`.
	StartDirection pulumi.StringPtrInput `pulumi:"startDirection"`
	// Number of characters in URL to skip after start-str has been matched.
	StartSkip pulumi.IntPtrInput `pulumi:"startSkip"`
	// String from which to start search.
	StartStr pulumi.StringPtrInput `pulumi:"startStr"`
	// Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`, `hls-manifest`, `dash-manifest`, `hls-fragment`, `dash-fragment`.
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (ContentdeliverynetworkruleRuleContentIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentdeliverynetworkruleRuleContentId)(nil)).Elem()
}

func (i ContentdeliverynetworkruleRuleContentIdArgs) ToContentdeliverynetworkruleRuleContentIdOutput() ContentdeliverynetworkruleRuleContentIdOutput {
	return i.ToContentdeliverynetworkruleRuleContentIdOutputWithContext(context.Background())
}

func (i ContentdeliverynetworkruleRuleContentIdArgs) ToContentdeliverynetworkruleRuleContentIdOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleContentIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentdeliverynetworkruleRuleContentIdOutput)
}

func (i ContentdeliverynetworkruleRuleContentIdArgs) ToContentdeliverynetworkruleRuleContentIdPtrOutput() ContentdeliverynetworkruleRuleContentIdPtrOutput {
	return i.ToContentdeliverynetworkruleRuleContentIdPtrOutputWithContext(context.Background())
}

func (i ContentdeliverynetworkruleRuleContentIdArgs) ToContentdeliverynetworkruleRuleContentIdPtrOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleContentIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentdeliverynetworkruleRuleContentIdOutput).ToContentdeliverynetworkruleRuleContentIdPtrOutputWithContext(ctx)
}

// ContentdeliverynetworkruleRuleContentIdPtrInput is an input type that accepts ContentdeliverynetworkruleRuleContentIdArgs, ContentdeliverynetworkruleRuleContentIdPtr and ContentdeliverynetworkruleRuleContentIdPtrOutput values.
// You can construct a concrete instance of `ContentdeliverynetworkruleRuleContentIdPtrInput` via:
//
//	        ContentdeliverynetworkruleRuleContentIdArgs{...}
//
//	or:
//
//	        nil
type ContentdeliverynetworkruleRuleContentIdPtrInput interface {
	pulumi.Input

	ToContentdeliverynetworkruleRuleContentIdPtrOutput() ContentdeliverynetworkruleRuleContentIdPtrOutput
	ToContentdeliverynetworkruleRuleContentIdPtrOutputWithContext(context.Context) ContentdeliverynetworkruleRuleContentIdPtrOutput
}

type contentdeliverynetworkruleRuleContentIdPtrType ContentdeliverynetworkruleRuleContentIdArgs

func ContentdeliverynetworkruleRuleContentIdPtr(v *ContentdeliverynetworkruleRuleContentIdArgs) ContentdeliverynetworkruleRuleContentIdPtrInput {
	return (*contentdeliverynetworkruleRuleContentIdPtrType)(v)
}

func (*contentdeliverynetworkruleRuleContentIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentdeliverynetworkruleRuleContentId)(nil)).Elem()
}

func (i *contentdeliverynetworkruleRuleContentIdPtrType) ToContentdeliverynetworkruleRuleContentIdPtrOutput() ContentdeliverynetworkruleRuleContentIdPtrOutput {
	return i.ToContentdeliverynetworkruleRuleContentIdPtrOutputWithContext(context.Background())
}

func (i *contentdeliverynetworkruleRuleContentIdPtrType) ToContentdeliverynetworkruleRuleContentIdPtrOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleContentIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentdeliverynetworkruleRuleContentIdPtrOutput)
}

type ContentdeliverynetworkruleRuleContentIdOutput struct{ *pulumi.OutputState }

func (ContentdeliverynetworkruleRuleContentIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentdeliverynetworkruleRuleContentId)(nil)).Elem()
}

func (o ContentdeliverynetworkruleRuleContentIdOutput) ToContentdeliverynetworkruleRuleContentIdOutput() ContentdeliverynetworkruleRuleContentIdOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleContentIdOutput) ToContentdeliverynetworkruleRuleContentIdOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleContentIdOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleContentIdOutput) ToContentdeliverynetworkruleRuleContentIdPtrOutput() ContentdeliverynetworkruleRuleContentIdPtrOutput {
	return o.ToContentdeliverynetworkruleRuleContentIdPtrOutputWithContext(context.Background())
}

func (o ContentdeliverynetworkruleRuleContentIdOutput) ToContentdeliverynetworkruleRuleContentIdPtrOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleContentIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContentdeliverynetworkruleRuleContentId) *ContentdeliverynetworkruleRuleContentId {
		return &v
	}).(ContentdeliverynetworkruleRuleContentIdPtrOutput)
}

// Search direction from end-str match. Valid values: `forward`, `backward`.
func (o ContentdeliverynetworkruleRuleContentIdOutput) EndDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRuleContentId) *string { return v.EndDirection }).(pulumi.StringPtrOutput)
}

// Number of characters in URL to skip after end-str has been matched.
func (o ContentdeliverynetworkruleRuleContentIdOutput) EndSkip() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRuleContentId) *int { return v.EndSkip }).(pulumi.IntPtrOutput)
}

// String from which to end search.
func (o ContentdeliverynetworkruleRuleContentIdOutput) EndStr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRuleContentId) *string { return v.EndStr }).(pulumi.StringPtrOutput)
}

// Name of content ID within the start string and end string.
func (o ContentdeliverynetworkruleRuleContentIdOutput) RangeStr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRuleContentId) *string { return v.RangeStr }).(pulumi.StringPtrOutput)
}

// Search direction from start-str match. Valid values: `forward`, `backward`.
func (o ContentdeliverynetworkruleRuleContentIdOutput) StartDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRuleContentId) *string { return v.StartDirection }).(pulumi.StringPtrOutput)
}

// Number of characters in URL to skip after start-str has been matched.
func (o ContentdeliverynetworkruleRuleContentIdOutput) StartSkip() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRuleContentId) *int { return v.StartSkip }).(pulumi.IntPtrOutput)
}

// String from which to start search.
func (o ContentdeliverynetworkruleRuleContentIdOutput) StartStr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRuleContentId) *string { return v.StartStr }).(pulumi.StringPtrOutput)
}

// Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`, `hls-manifest`, `dash-manifest`, `hls-fragment`, `dash-fragment`.
func (o ContentdeliverynetworkruleRuleContentIdOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRuleContentId) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ContentdeliverynetworkruleRuleContentIdPtrOutput struct{ *pulumi.OutputState }

func (ContentdeliverynetworkruleRuleContentIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentdeliverynetworkruleRuleContentId)(nil)).Elem()
}

func (o ContentdeliverynetworkruleRuleContentIdPtrOutput) ToContentdeliverynetworkruleRuleContentIdPtrOutput() ContentdeliverynetworkruleRuleContentIdPtrOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleContentIdPtrOutput) ToContentdeliverynetworkruleRuleContentIdPtrOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleContentIdPtrOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleContentIdPtrOutput) Elem() ContentdeliverynetworkruleRuleContentIdOutput {
	return o.ApplyT(func(v *ContentdeliverynetworkruleRuleContentId) ContentdeliverynetworkruleRuleContentId {
		if v != nil {
			return *v
		}
		var ret ContentdeliverynetworkruleRuleContentId
		return ret
	}).(ContentdeliverynetworkruleRuleContentIdOutput)
}

// Search direction from end-str match. Valid values: `forward`, `backward`.
func (o ContentdeliverynetworkruleRuleContentIdPtrOutput) EndDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentdeliverynetworkruleRuleContentId) *string {
		if v == nil {
			return nil
		}
		return v.EndDirection
	}).(pulumi.StringPtrOutput)
}

// Number of characters in URL to skip after end-str has been matched.
func (o ContentdeliverynetworkruleRuleContentIdPtrOutput) EndSkip() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentdeliverynetworkruleRuleContentId) *int {
		if v == nil {
			return nil
		}
		return v.EndSkip
	}).(pulumi.IntPtrOutput)
}

// String from which to end search.
func (o ContentdeliverynetworkruleRuleContentIdPtrOutput) EndStr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentdeliverynetworkruleRuleContentId) *string {
		if v == nil {
			return nil
		}
		return v.EndStr
	}).(pulumi.StringPtrOutput)
}

// Name of content ID within the start string and end string.
func (o ContentdeliverynetworkruleRuleContentIdPtrOutput) RangeStr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentdeliverynetworkruleRuleContentId) *string {
		if v == nil {
			return nil
		}
		return v.RangeStr
	}).(pulumi.StringPtrOutput)
}

// Search direction from start-str match. Valid values: `forward`, `backward`.
func (o ContentdeliverynetworkruleRuleContentIdPtrOutput) StartDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentdeliverynetworkruleRuleContentId) *string {
		if v == nil {
			return nil
		}
		return v.StartDirection
	}).(pulumi.StringPtrOutput)
}

// Number of characters in URL to skip after start-str has been matched.
func (o ContentdeliverynetworkruleRuleContentIdPtrOutput) StartSkip() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentdeliverynetworkruleRuleContentId) *int {
		if v == nil {
			return nil
		}
		return v.StartSkip
	}).(pulumi.IntPtrOutput)
}

// String from which to start search.
func (o ContentdeliverynetworkruleRuleContentIdPtrOutput) StartStr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentdeliverynetworkruleRuleContentId) *string {
		if v == nil {
			return nil
		}
		return v.StartStr
	}).(pulumi.StringPtrOutput)
}

// Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`, `hls-manifest`, `dash-manifest`, `hls-fragment`, `dash-fragment`.
func (o ContentdeliverynetworkruleRuleContentIdPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentdeliverynetworkruleRuleContentId) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

type ContentdeliverynetworkruleRuleMatchEntry struct {
	// Rule ID.
	Id *int `pulumi:"id"`
	// Pattern string for matching target (Referrer or URL pattern, eg. "a", "a*c", "*a*", "a*c*e", and "*"). The structure of `pattern` block is documented below.
	Patterns []ContentdeliverynetworkruleRuleMatchEntryPattern `pulumi:"patterns"`
	// Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`.
	Target *string `pulumi:"target"`
}

// ContentdeliverynetworkruleRuleMatchEntryInput is an input type that accepts ContentdeliverynetworkruleRuleMatchEntryArgs and ContentdeliverynetworkruleRuleMatchEntryOutput values.
// You can construct a concrete instance of `ContentdeliverynetworkruleRuleMatchEntryInput` via:
//
//	ContentdeliverynetworkruleRuleMatchEntryArgs{...}
type ContentdeliverynetworkruleRuleMatchEntryInput interface {
	pulumi.Input

	ToContentdeliverynetworkruleRuleMatchEntryOutput() ContentdeliverynetworkruleRuleMatchEntryOutput
	ToContentdeliverynetworkruleRuleMatchEntryOutputWithContext(context.Context) ContentdeliverynetworkruleRuleMatchEntryOutput
}

type ContentdeliverynetworkruleRuleMatchEntryArgs struct {
	// Rule ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Pattern string for matching target (Referrer or URL pattern, eg. "a", "a*c", "*a*", "a*c*e", and "*"). The structure of `pattern` block is documented below.
	Patterns ContentdeliverynetworkruleRuleMatchEntryPatternArrayInput `pulumi:"patterns"`
	// Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`.
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (ContentdeliverynetworkruleRuleMatchEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentdeliverynetworkruleRuleMatchEntry)(nil)).Elem()
}

func (i ContentdeliverynetworkruleRuleMatchEntryArgs) ToContentdeliverynetworkruleRuleMatchEntryOutput() ContentdeliverynetworkruleRuleMatchEntryOutput {
	return i.ToContentdeliverynetworkruleRuleMatchEntryOutputWithContext(context.Background())
}

func (i ContentdeliverynetworkruleRuleMatchEntryArgs) ToContentdeliverynetworkruleRuleMatchEntryOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleMatchEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentdeliverynetworkruleRuleMatchEntryOutput)
}

// ContentdeliverynetworkruleRuleMatchEntryArrayInput is an input type that accepts ContentdeliverynetworkruleRuleMatchEntryArray and ContentdeliverynetworkruleRuleMatchEntryArrayOutput values.
// You can construct a concrete instance of `ContentdeliverynetworkruleRuleMatchEntryArrayInput` via:
//
//	ContentdeliverynetworkruleRuleMatchEntryArray{ ContentdeliverynetworkruleRuleMatchEntryArgs{...} }
type ContentdeliverynetworkruleRuleMatchEntryArrayInput interface {
	pulumi.Input

	ToContentdeliverynetworkruleRuleMatchEntryArrayOutput() ContentdeliverynetworkruleRuleMatchEntryArrayOutput
	ToContentdeliverynetworkruleRuleMatchEntryArrayOutputWithContext(context.Context) ContentdeliverynetworkruleRuleMatchEntryArrayOutput
}

type ContentdeliverynetworkruleRuleMatchEntryArray []ContentdeliverynetworkruleRuleMatchEntryInput

func (ContentdeliverynetworkruleRuleMatchEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentdeliverynetworkruleRuleMatchEntry)(nil)).Elem()
}

func (i ContentdeliverynetworkruleRuleMatchEntryArray) ToContentdeliverynetworkruleRuleMatchEntryArrayOutput() ContentdeliverynetworkruleRuleMatchEntryArrayOutput {
	return i.ToContentdeliverynetworkruleRuleMatchEntryArrayOutputWithContext(context.Background())
}

func (i ContentdeliverynetworkruleRuleMatchEntryArray) ToContentdeliverynetworkruleRuleMatchEntryArrayOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleMatchEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentdeliverynetworkruleRuleMatchEntryArrayOutput)
}

type ContentdeliverynetworkruleRuleMatchEntryOutput struct{ *pulumi.OutputState }

func (ContentdeliverynetworkruleRuleMatchEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentdeliverynetworkruleRuleMatchEntry)(nil)).Elem()
}

func (o ContentdeliverynetworkruleRuleMatchEntryOutput) ToContentdeliverynetworkruleRuleMatchEntryOutput() ContentdeliverynetworkruleRuleMatchEntryOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleMatchEntryOutput) ToContentdeliverynetworkruleRuleMatchEntryOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleMatchEntryOutput {
	return o
}

// Rule ID.
func (o ContentdeliverynetworkruleRuleMatchEntryOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRuleMatchEntry) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Pattern string for matching target (Referrer or URL pattern, eg. "a", "a*c", "*a*", "a*c*e", and "*"). The structure of `pattern` block is documented below.
func (o ContentdeliverynetworkruleRuleMatchEntryOutput) Patterns() ContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRuleMatchEntry) []ContentdeliverynetworkruleRuleMatchEntryPattern {
		return v.Patterns
	}).(ContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput)
}

// Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`.
func (o ContentdeliverynetworkruleRuleMatchEntryOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRuleMatchEntry) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ContentdeliverynetworkruleRuleMatchEntryArrayOutput struct{ *pulumi.OutputState }

func (ContentdeliverynetworkruleRuleMatchEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentdeliverynetworkruleRuleMatchEntry)(nil)).Elem()
}

func (o ContentdeliverynetworkruleRuleMatchEntryArrayOutput) ToContentdeliverynetworkruleRuleMatchEntryArrayOutput() ContentdeliverynetworkruleRuleMatchEntryArrayOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleMatchEntryArrayOutput) ToContentdeliverynetworkruleRuleMatchEntryArrayOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleMatchEntryArrayOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleMatchEntryArrayOutput) Index(i pulumi.IntInput) ContentdeliverynetworkruleRuleMatchEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentdeliverynetworkruleRuleMatchEntry {
		return vs[0].([]ContentdeliverynetworkruleRuleMatchEntry)[vs[1].(int)]
	}).(ContentdeliverynetworkruleRuleMatchEntryOutput)
}

type ContentdeliverynetworkruleRuleMatchEntryPattern struct {
	// Pattern strings.
	String *string `pulumi:"string"`
}

// ContentdeliverynetworkruleRuleMatchEntryPatternInput is an input type that accepts ContentdeliverynetworkruleRuleMatchEntryPatternArgs and ContentdeliverynetworkruleRuleMatchEntryPatternOutput values.
// You can construct a concrete instance of `ContentdeliverynetworkruleRuleMatchEntryPatternInput` via:
//
//	ContentdeliverynetworkruleRuleMatchEntryPatternArgs{...}
type ContentdeliverynetworkruleRuleMatchEntryPatternInput interface {
	pulumi.Input

	ToContentdeliverynetworkruleRuleMatchEntryPatternOutput() ContentdeliverynetworkruleRuleMatchEntryPatternOutput
	ToContentdeliverynetworkruleRuleMatchEntryPatternOutputWithContext(context.Context) ContentdeliverynetworkruleRuleMatchEntryPatternOutput
}

type ContentdeliverynetworkruleRuleMatchEntryPatternArgs struct {
	// Pattern strings.
	String pulumi.StringPtrInput `pulumi:"string"`
}

func (ContentdeliverynetworkruleRuleMatchEntryPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentdeliverynetworkruleRuleMatchEntryPattern)(nil)).Elem()
}

func (i ContentdeliverynetworkruleRuleMatchEntryPatternArgs) ToContentdeliverynetworkruleRuleMatchEntryPatternOutput() ContentdeliverynetworkruleRuleMatchEntryPatternOutput {
	return i.ToContentdeliverynetworkruleRuleMatchEntryPatternOutputWithContext(context.Background())
}

func (i ContentdeliverynetworkruleRuleMatchEntryPatternArgs) ToContentdeliverynetworkruleRuleMatchEntryPatternOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleMatchEntryPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentdeliverynetworkruleRuleMatchEntryPatternOutput)
}

// ContentdeliverynetworkruleRuleMatchEntryPatternArrayInput is an input type that accepts ContentdeliverynetworkruleRuleMatchEntryPatternArray and ContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput values.
// You can construct a concrete instance of `ContentdeliverynetworkruleRuleMatchEntryPatternArrayInput` via:
//
//	ContentdeliverynetworkruleRuleMatchEntryPatternArray{ ContentdeliverynetworkruleRuleMatchEntryPatternArgs{...} }
type ContentdeliverynetworkruleRuleMatchEntryPatternArrayInput interface {
	pulumi.Input

	ToContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput() ContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput
	ToContentdeliverynetworkruleRuleMatchEntryPatternArrayOutputWithContext(context.Context) ContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput
}

type ContentdeliverynetworkruleRuleMatchEntryPatternArray []ContentdeliverynetworkruleRuleMatchEntryPatternInput

func (ContentdeliverynetworkruleRuleMatchEntryPatternArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentdeliverynetworkruleRuleMatchEntryPattern)(nil)).Elem()
}

func (i ContentdeliverynetworkruleRuleMatchEntryPatternArray) ToContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput() ContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput {
	return i.ToContentdeliverynetworkruleRuleMatchEntryPatternArrayOutputWithContext(context.Background())
}

func (i ContentdeliverynetworkruleRuleMatchEntryPatternArray) ToContentdeliverynetworkruleRuleMatchEntryPatternArrayOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput)
}

type ContentdeliverynetworkruleRuleMatchEntryPatternOutput struct{ *pulumi.OutputState }

func (ContentdeliverynetworkruleRuleMatchEntryPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentdeliverynetworkruleRuleMatchEntryPattern)(nil)).Elem()
}

func (o ContentdeliverynetworkruleRuleMatchEntryPatternOutput) ToContentdeliverynetworkruleRuleMatchEntryPatternOutput() ContentdeliverynetworkruleRuleMatchEntryPatternOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleMatchEntryPatternOutput) ToContentdeliverynetworkruleRuleMatchEntryPatternOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleMatchEntryPatternOutput {
	return o
}

// Pattern strings.
func (o ContentdeliverynetworkruleRuleMatchEntryPatternOutput) String() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRuleMatchEntryPattern) *string { return v.String }).(pulumi.StringPtrOutput)
}

type ContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput struct{ *pulumi.OutputState }

func (ContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentdeliverynetworkruleRuleMatchEntryPattern)(nil)).Elem()
}

func (o ContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput) ToContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput() ContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput) ToContentdeliverynetworkruleRuleMatchEntryPatternArrayOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput) Index(i pulumi.IntInput) ContentdeliverynetworkruleRuleMatchEntryPatternOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentdeliverynetworkruleRuleMatchEntryPattern {
		return vs[0].([]ContentdeliverynetworkruleRuleMatchEntryPattern)[vs[1].(int)]
	}).(ContentdeliverynetworkruleRuleMatchEntryPatternOutput)
}

type ContentdeliverynetworkruleRuleSkipEntry struct {
	// Rule ID.
	Id *int `pulumi:"id"`
	// Pattern string for matching target (Referrer or URL pattern, eg. "a", "a*c", "*a*", "a*c*e", and "*"). The structure of `pattern` block is documented below.
	Patterns []ContentdeliverynetworkruleRuleSkipEntryPattern `pulumi:"patterns"`
	// Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`.
	Target *string `pulumi:"target"`
}

// ContentdeliverynetworkruleRuleSkipEntryInput is an input type that accepts ContentdeliverynetworkruleRuleSkipEntryArgs and ContentdeliverynetworkruleRuleSkipEntryOutput values.
// You can construct a concrete instance of `ContentdeliverynetworkruleRuleSkipEntryInput` via:
//
//	ContentdeliverynetworkruleRuleSkipEntryArgs{...}
type ContentdeliverynetworkruleRuleSkipEntryInput interface {
	pulumi.Input

	ToContentdeliverynetworkruleRuleSkipEntryOutput() ContentdeliverynetworkruleRuleSkipEntryOutput
	ToContentdeliverynetworkruleRuleSkipEntryOutputWithContext(context.Context) ContentdeliverynetworkruleRuleSkipEntryOutput
}

type ContentdeliverynetworkruleRuleSkipEntryArgs struct {
	// Rule ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Pattern string for matching target (Referrer or URL pattern, eg. "a", "a*c", "*a*", "a*c*e", and "*"). The structure of `pattern` block is documented below.
	Patterns ContentdeliverynetworkruleRuleSkipEntryPatternArrayInput `pulumi:"patterns"`
	// Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`.
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (ContentdeliverynetworkruleRuleSkipEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentdeliverynetworkruleRuleSkipEntry)(nil)).Elem()
}

func (i ContentdeliverynetworkruleRuleSkipEntryArgs) ToContentdeliverynetworkruleRuleSkipEntryOutput() ContentdeliverynetworkruleRuleSkipEntryOutput {
	return i.ToContentdeliverynetworkruleRuleSkipEntryOutputWithContext(context.Background())
}

func (i ContentdeliverynetworkruleRuleSkipEntryArgs) ToContentdeliverynetworkruleRuleSkipEntryOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleSkipEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentdeliverynetworkruleRuleSkipEntryOutput)
}

// ContentdeliverynetworkruleRuleSkipEntryArrayInput is an input type that accepts ContentdeliverynetworkruleRuleSkipEntryArray and ContentdeliverynetworkruleRuleSkipEntryArrayOutput values.
// You can construct a concrete instance of `ContentdeliverynetworkruleRuleSkipEntryArrayInput` via:
//
//	ContentdeliverynetworkruleRuleSkipEntryArray{ ContentdeliverynetworkruleRuleSkipEntryArgs{...} }
type ContentdeliverynetworkruleRuleSkipEntryArrayInput interface {
	pulumi.Input

	ToContentdeliverynetworkruleRuleSkipEntryArrayOutput() ContentdeliverynetworkruleRuleSkipEntryArrayOutput
	ToContentdeliverynetworkruleRuleSkipEntryArrayOutputWithContext(context.Context) ContentdeliverynetworkruleRuleSkipEntryArrayOutput
}

type ContentdeliverynetworkruleRuleSkipEntryArray []ContentdeliverynetworkruleRuleSkipEntryInput

func (ContentdeliverynetworkruleRuleSkipEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentdeliverynetworkruleRuleSkipEntry)(nil)).Elem()
}

func (i ContentdeliverynetworkruleRuleSkipEntryArray) ToContentdeliverynetworkruleRuleSkipEntryArrayOutput() ContentdeliverynetworkruleRuleSkipEntryArrayOutput {
	return i.ToContentdeliverynetworkruleRuleSkipEntryArrayOutputWithContext(context.Background())
}

func (i ContentdeliverynetworkruleRuleSkipEntryArray) ToContentdeliverynetworkruleRuleSkipEntryArrayOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleSkipEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentdeliverynetworkruleRuleSkipEntryArrayOutput)
}

type ContentdeliverynetworkruleRuleSkipEntryOutput struct{ *pulumi.OutputState }

func (ContentdeliverynetworkruleRuleSkipEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentdeliverynetworkruleRuleSkipEntry)(nil)).Elem()
}

func (o ContentdeliverynetworkruleRuleSkipEntryOutput) ToContentdeliverynetworkruleRuleSkipEntryOutput() ContentdeliverynetworkruleRuleSkipEntryOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleSkipEntryOutput) ToContentdeliverynetworkruleRuleSkipEntryOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleSkipEntryOutput {
	return o
}

// Rule ID.
func (o ContentdeliverynetworkruleRuleSkipEntryOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRuleSkipEntry) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Pattern string for matching target (Referrer or URL pattern, eg. "a", "a*c", "*a*", "a*c*e", and "*"). The structure of `pattern` block is documented below.
func (o ContentdeliverynetworkruleRuleSkipEntryOutput) Patterns() ContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRuleSkipEntry) []ContentdeliverynetworkruleRuleSkipEntryPattern {
		return v.Patterns
	}).(ContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput)
}

// Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`.
func (o ContentdeliverynetworkruleRuleSkipEntryOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRuleSkipEntry) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ContentdeliverynetworkruleRuleSkipEntryArrayOutput struct{ *pulumi.OutputState }

func (ContentdeliverynetworkruleRuleSkipEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentdeliverynetworkruleRuleSkipEntry)(nil)).Elem()
}

func (o ContentdeliverynetworkruleRuleSkipEntryArrayOutput) ToContentdeliverynetworkruleRuleSkipEntryArrayOutput() ContentdeliverynetworkruleRuleSkipEntryArrayOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleSkipEntryArrayOutput) ToContentdeliverynetworkruleRuleSkipEntryArrayOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleSkipEntryArrayOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleSkipEntryArrayOutput) Index(i pulumi.IntInput) ContentdeliverynetworkruleRuleSkipEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentdeliverynetworkruleRuleSkipEntry {
		return vs[0].([]ContentdeliverynetworkruleRuleSkipEntry)[vs[1].(int)]
	}).(ContentdeliverynetworkruleRuleSkipEntryOutput)
}

type ContentdeliverynetworkruleRuleSkipEntryPattern struct {
	// Pattern strings.
	String *string `pulumi:"string"`
}

// ContentdeliverynetworkruleRuleSkipEntryPatternInput is an input type that accepts ContentdeliverynetworkruleRuleSkipEntryPatternArgs and ContentdeliverynetworkruleRuleSkipEntryPatternOutput values.
// You can construct a concrete instance of `ContentdeliverynetworkruleRuleSkipEntryPatternInput` via:
//
//	ContentdeliverynetworkruleRuleSkipEntryPatternArgs{...}
type ContentdeliverynetworkruleRuleSkipEntryPatternInput interface {
	pulumi.Input

	ToContentdeliverynetworkruleRuleSkipEntryPatternOutput() ContentdeliverynetworkruleRuleSkipEntryPatternOutput
	ToContentdeliverynetworkruleRuleSkipEntryPatternOutputWithContext(context.Context) ContentdeliverynetworkruleRuleSkipEntryPatternOutput
}

type ContentdeliverynetworkruleRuleSkipEntryPatternArgs struct {
	// Pattern strings.
	String pulumi.StringPtrInput `pulumi:"string"`
}

func (ContentdeliverynetworkruleRuleSkipEntryPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentdeliverynetworkruleRuleSkipEntryPattern)(nil)).Elem()
}

func (i ContentdeliverynetworkruleRuleSkipEntryPatternArgs) ToContentdeliverynetworkruleRuleSkipEntryPatternOutput() ContentdeliverynetworkruleRuleSkipEntryPatternOutput {
	return i.ToContentdeliverynetworkruleRuleSkipEntryPatternOutputWithContext(context.Background())
}

func (i ContentdeliverynetworkruleRuleSkipEntryPatternArgs) ToContentdeliverynetworkruleRuleSkipEntryPatternOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleSkipEntryPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentdeliverynetworkruleRuleSkipEntryPatternOutput)
}

// ContentdeliverynetworkruleRuleSkipEntryPatternArrayInput is an input type that accepts ContentdeliverynetworkruleRuleSkipEntryPatternArray and ContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput values.
// You can construct a concrete instance of `ContentdeliverynetworkruleRuleSkipEntryPatternArrayInput` via:
//
//	ContentdeliverynetworkruleRuleSkipEntryPatternArray{ ContentdeliverynetworkruleRuleSkipEntryPatternArgs{...} }
type ContentdeliverynetworkruleRuleSkipEntryPatternArrayInput interface {
	pulumi.Input

	ToContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput() ContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput
	ToContentdeliverynetworkruleRuleSkipEntryPatternArrayOutputWithContext(context.Context) ContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput
}

type ContentdeliverynetworkruleRuleSkipEntryPatternArray []ContentdeliverynetworkruleRuleSkipEntryPatternInput

func (ContentdeliverynetworkruleRuleSkipEntryPatternArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentdeliverynetworkruleRuleSkipEntryPattern)(nil)).Elem()
}

func (i ContentdeliverynetworkruleRuleSkipEntryPatternArray) ToContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput() ContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput {
	return i.ToContentdeliverynetworkruleRuleSkipEntryPatternArrayOutputWithContext(context.Background())
}

func (i ContentdeliverynetworkruleRuleSkipEntryPatternArray) ToContentdeliverynetworkruleRuleSkipEntryPatternArrayOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput)
}

type ContentdeliverynetworkruleRuleSkipEntryPatternOutput struct{ *pulumi.OutputState }

func (ContentdeliverynetworkruleRuleSkipEntryPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentdeliverynetworkruleRuleSkipEntryPattern)(nil)).Elem()
}

func (o ContentdeliverynetworkruleRuleSkipEntryPatternOutput) ToContentdeliverynetworkruleRuleSkipEntryPatternOutput() ContentdeliverynetworkruleRuleSkipEntryPatternOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleSkipEntryPatternOutput) ToContentdeliverynetworkruleRuleSkipEntryPatternOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleSkipEntryPatternOutput {
	return o
}

// Pattern strings.
func (o ContentdeliverynetworkruleRuleSkipEntryPatternOutput) String() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentdeliverynetworkruleRuleSkipEntryPattern) *string { return v.String }).(pulumi.StringPtrOutput)
}

type ContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput struct{ *pulumi.OutputState }

func (ContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentdeliverynetworkruleRuleSkipEntryPattern)(nil)).Elem()
}

func (o ContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput) ToContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput() ContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput) ToContentdeliverynetworkruleRuleSkipEntryPatternArrayOutputWithContext(ctx context.Context) ContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput {
	return o
}

func (o ContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput) Index(i pulumi.IntInput) ContentdeliverynetworkruleRuleSkipEntryPatternOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentdeliverynetworkruleRuleSkipEntryPattern {
		return vs[0].([]ContentdeliverynetworkruleRuleSkipEntryPattern)[vs[1].(int)]
	}).(ContentdeliverynetworkruleRuleSkipEntryPatternOutput)
}

type ProfileCifs struct {
	// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
	ByteCaching *string `pulumi:"byteCaching"`
	// Enable/disable logging. Valid values: `enable`, `disable`.
	LogTraffic *string `pulumi:"logTraffic"`
	// Single port number or port number range for CIFS. Only packets with a destination port number that matches this port number or range are accepted by this profile.
	Port *int `pulumi:"port"`
	// Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
	PreferChunking *string `pulumi:"preferChunking"`
	// Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
	ProtocolOpt *string `pulumi:"protocolOpt"`
	// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
	SecureTunnel *string `pulumi:"secureTunnel"`
	// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
	TunnelSharing *string `pulumi:"tunnelSharing"`
}

// ProfileCifsInput is an input type that accepts ProfileCifsArgs and ProfileCifsOutput values.
// You can construct a concrete instance of `ProfileCifsInput` via:
//
//	ProfileCifsArgs{...}
type ProfileCifsInput interface {
	pulumi.Input

	ToProfileCifsOutput() ProfileCifsOutput
	ToProfileCifsOutputWithContext(context.Context) ProfileCifsOutput
}

type ProfileCifsArgs struct {
	// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
	ByteCaching pulumi.StringPtrInput `pulumi:"byteCaching"`
	// Enable/disable logging. Valid values: `enable`, `disable`.
	LogTraffic pulumi.StringPtrInput `pulumi:"logTraffic"`
	// Single port number or port number range for CIFS. Only packets with a destination port number that matches this port number or range are accepted by this profile.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
	PreferChunking pulumi.StringPtrInput `pulumi:"preferChunking"`
	// Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
	ProtocolOpt pulumi.StringPtrInput `pulumi:"protocolOpt"`
	// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
	SecureTunnel pulumi.StringPtrInput `pulumi:"secureTunnel"`
	// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
	TunnelSharing pulumi.StringPtrInput `pulumi:"tunnelSharing"`
}

func (ProfileCifsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileCifs)(nil)).Elem()
}

func (i ProfileCifsArgs) ToProfileCifsOutput() ProfileCifsOutput {
	return i.ToProfileCifsOutputWithContext(context.Background())
}

func (i ProfileCifsArgs) ToProfileCifsOutputWithContext(ctx context.Context) ProfileCifsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileCifsOutput)
}

func (i ProfileCifsArgs) ToProfileCifsPtrOutput() ProfileCifsPtrOutput {
	return i.ToProfileCifsPtrOutputWithContext(context.Background())
}

func (i ProfileCifsArgs) ToProfileCifsPtrOutputWithContext(ctx context.Context) ProfileCifsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileCifsOutput).ToProfileCifsPtrOutputWithContext(ctx)
}

// ProfileCifsPtrInput is an input type that accepts ProfileCifsArgs, ProfileCifsPtr and ProfileCifsPtrOutput values.
// You can construct a concrete instance of `ProfileCifsPtrInput` via:
//
//	        ProfileCifsArgs{...}
//
//	or:
//
//	        nil
type ProfileCifsPtrInput interface {
	pulumi.Input

	ToProfileCifsPtrOutput() ProfileCifsPtrOutput
	ToProfileCifsPtrOutputWithContext(context.Context) ProfileCifsPtrOutput
}

type profileCifsPtrType ProfileCifsArgs

func ProfileCifsPtr(v *ProfileCifsArgs) ProfileCifsPtrInput {
	return (*profileCifsPtrType)(v)
}

func (*profileCifsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileCifs)(nil)).Elem()
}

func (i *profileCifsPtrType) ToProfileCifsPtrOutput() ProfileCifsPtrOutput {
	return i.ToProfileCifsPtrOutputWithContext(context.Background())
}

func (i *profileCifsPtrType) ToProfileCifsPtrOutputWithContext(ctx context.Context) ProfileCifsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileCifsPtrOutput)
}

type ProfileCifsOutput struct{ *pulumi.OutputState }

func (ProfileCifsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileCifs)(nil)).Elem()
}

func (o ProfileCifsOutput) ToProfileCifsOutput() ProfileCifsOutput {
	return o
}

func (o ProfileCifsOutput) ToProfileCifsOutputWithContext(ctx context.Context) ProfileCifsOutput {
	return o
}

func (o ProfileCifsOutput) ToProfileCifsPtrOutput() ProfileCifsPtrOutput {
	return o.ToProfileCifsPtrOutputWithContext(context.Background())
}

func (o ProfileCifsOutput) ToProfileCifsPtrOutputWithContext(ctx context.Context) ProfileCifsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileCifs) *ProfileCifs {
		return &v
	}).(ProfileCifsPtrOutput)
}

// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
func (o ProfileCifsOutput) ByteCaching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileCifs) *string { return v.ByteCaching }).(pulumi.StringPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileCifsOutput) LogTraffic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileCifs) *string { return v.LogTraffic }).(pulumi.StringPtrOutput)
}

// Single port number or port number range for CIFS. Only packets with a destination port number that matches this port number or range are accepted by this profile.
func (o ProfileCifsOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileCifs) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
func (o ProfileCifsOutput) PreferChunking() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileCifs) *string { return v.PreferChunking }).(pulumi.StringPtrOutput)
}

// Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
func (o ProfileCifsOutput) ProtocolOpt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileCifs) *string { return v.ProtocolOpt }).(pulumi.StringPtrOutput)
}

// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
func (o ProfileCifsOutput) SecureTunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileCifs) *string { return v.SecureTunnel }).(pulumi.StringPtrOutput)
}

// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
func (o ProfileCifsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileCifs) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
func (o ProfileCifsOutput) TunnelSharing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileCifs) *string { return v.TunnelSharing }).(pulumi.StringPtrOutput)
}

type ProfileCifsPtrOutput struct{ *pulumi.OutputState }

func (ProfileCifsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileCifs)(nil)).Elem()
}

func (o ProfileCifsPtrOutput) ToProfileCifsPtrOutput() ProfileCifsPtrOutput {
	return o
}

func (o ProfileCifsPtrOutput) ToProfileCifsPtrOutputWithContext(ctx context.Context) ProfileCifsPtrOutput {
	return o
}

func (o ProfileCifsPtrOutput) Elem() ProfileCifsOutput {
	return o.ApplyT(func(v *ProfileCifs) ProfileCifs {
		if v != nil {
			return *v
		}
		var ret ProfileCifs
		return ret
	}).(ProfileCifsOutput)
}

// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
func (o ProfileCifsPtrOutput) ByteCaching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileCifs) *string {
		if v == nil {
			return nil
		}
		return v.ByteCaching
	}).(pulumi.StringPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileCifsPtrOutput) LogTraffic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileCifs) *string {
		if v == nil {
			return nil
		}
		return v.LogTraffic
	}).(pulumi.StringPtrOutput)
}

// Single port number or port number range for CIFS. Only packets with a destination port number that matches this port number or range are accepted by this profile.
func (o ProfileCifsPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileCifs) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
func (o ProfileCifsPtrOutput) PreferChunking() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileCifs) *string {
		if v == nil {
			return nil
		}
		return v.PreferChunking
	}).(pulumi.StringPtrOutput)
}

// Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
func (o ProfileCifsPtrOutput) ProtocolOpt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileCifs) *string {
		if v == nil {
			return nil
		}
		return v.ProtocolOpt
	}).(pulumi.StringPtrOutput)
}

// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
func (o ProfileCifsPtrOutput) SecureTunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileCifs) *string {
		if v == nil {
			return nil
		}
		return v.SecureTunnel
	}).(pulumi.StringPtrOutput)
}

// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
func (o ProfileCifsPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileCifs) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
func (o ProfileCifsPtrOutput) TunnelSharing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileCifs) *string {
		if v == nil {
			return nil
		}
		return v.TunnelSharing
	}).(pulumi.StringPtrOutput)
}

type ProfileFtp struct {
	// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
	ByteCaching *string `pulumi:"byteCaching"`
	// Enable/disable logging. Valid values: `enable`, `disable`.
	LogTraffic *string `pulumi:"logTraffic"`
	// Single port number or port number range for FTP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
	Port *int `pulumi:"port"`
	// Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
	PreferChunking *string `pulumi:"preferChunking"`
	// Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
	ProtocolOpt *string `pulumi:"protocolOpt"`
	// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
	SecureTunnel *string `pulumi:"secureTunnel"`
	// Enable/disable SSL/TLS offloading (hardware acceleration) for traffic in this tunnel. Valid values: `enable`, `disable`.
	Ssl *string `pulumi:"ssl"`
	// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
	TunnelSharing *string `pulumi:"tunnelSharing"`
}

// ProfileFtpInput is an input type that accepts ProfileFtpArgs and ProfileFtpOutput values.
// You can construct a concrete instance of `ProfileFtpInput` via:
//
//	ProfileFtpArgs{...}
type ProfileFtpInput interface {
	pulumi.Input

	ToProfileFtpOutput() ProfileFtpOutput
	ToProfileFtpOutputWithContext(context.Context) ProfileFtpOutput
}

type ProfileFtpArgs struct {
	// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
	ByteCaching pulumi.StringPtrInput `pulumi:"byteCaching"`
	// Enable/disable logging. Valid values: `enable`, `disable`.
	LogTraffic pulumi.StringPtrInput `pulumi:"logTraffic"`
	// Single port number or port number range for FTP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
	PreferChunking pulumi.StringPtrInput `pulumi:"preferChunking"`
	// Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
	ProtocolOpt pulumi.StringPtrInput `pulumi:"protocolOpt"`
	// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
	SecureTunnel pulumi.StringPtrInput `pulumi:"secureTunnel"`
	// Enable/disable SSL/TLS offloading (hardware acceleration) for traffic in this tunnel. Valid values: `enable`, `disable`.
	Ssl pulumi.StringPtrInput `pulumi:"ssl"`
	// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
	TunnelSharing pulumi.StringPtrInput `pulumi:"tunnelSharing"`
}

func (ProfileFtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileFtp)(nil)).Elem()
}

func (i ProfileFtpArgs) ToProfileFtpOutput() ProfileFtpOutput {
	return i.ToProfileFtpOutputWithContext(context.Background())
}

func (i ProfileFtpArgs) ToProfileFtpOutputWithContext(ctx context.Context) ProfileFtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileFtpOutput)
}

func (i ProfileFtpArgs) ToProfileFtpPtrOutput() ProfileFtpPtrOutput {
	return i.ToProfileFtpPtrOutputWithContext(context.Background())
}

func (i ProfileFtpArgs) ToProfileFtpPtrOutputWithContext(ctx context.Context) ProfileFtpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileFtpOutput).ToProfileFtpPtrOutputWithContext(ctx)
}

// ProfileFtpPtrInput is an input type that accepts ProfileFtpArgs, ProfileFtpPtr and ProfileFtpPtrOutput values.
// You can construct a concrete instance of `ProfileFtpPtrInput` via:
//
//	        ProfileFtpArgs{...}
//
//	or:
//
//	        nil
type ProfileFtpPtrInput interface {
	pulumi.Input

	ToProfileFtpPtrOutput() ProfileFtpPtrOutput
	ToProfileFtpPtrOutputWithContext(context.Context) ProfileFtpPtrOutput
}

type profileFtpPtrType ProfileFtpArgs

func ProfileFtpPtr(v *ProfileFtpArgs) ProfileFtpPtrInput {
	return (*profileFtpPtrType)(v)
}

func (*profileFtpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileFtp)(nil)).Elem()
}

func (i *profileFtpPtrType) ToProfileFtpPtrOutput() ProfileFtpPtrOutput {
	return i.ToProfileFtpPtrOutputWithContext(context.Background())
}

func (i *profileFtpPtrType) ToProfileFtpPtrOutputWithContext(ctx context.Context) ProfileFtpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileFtpPtrOutput)
}

type ProfileFtpOutput struct{ *pulumi.OutputState }

func (ProfileFtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileFtp)(nil)).Elem()
}

func (o ProfileFtpOutput) ToProfileFtpOutput() ProfileFtpOutput {
	return o
}

func (o ProfileFtpOutput) ToProfileFtpOutputWithContext(ctx context.Context) ProfileFtpOutput {
	return o
}

func (o ProfileFtpOutput) ToProfileFtpPtrOutput() ProfileFtpPtrOutput {
	return o.ToProfileFtpPtrOutputWithContext(context.Background())
}

func (o ProfileFtpOutput) ToProfileFtpPtrOutputWithContext(ctx context.Context) ProfileFtpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileFtp) *ProfileFtp {
		return &v
	}).(ProfileFtpPtrOutput)
}

// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
func (o ProfileFtpOutput) ByteCaching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileFtp) *string { return v.ByteCaching }).(pulumi.StringPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileFtpOutput) LogTraffic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileFtp) *string { return v.LogTraffic }).(pulumi.StringPtrOutput)
}

// Single port number or port number range for FTP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
func (o ProfileFtpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileFtp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
func (o ProfileFtpOutput) PreferChunking() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileFtp) *string { return v.PreferChunking }).(pulumi.StringPtrOutput)
}

// Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
func (o ProfileFtpOutput) ProtocolOpt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileFtp) *string { return v.ProtocolOpt }).(pulumi.StringPtrOutput)
}

// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
func (o ProfileFtpOutput) SecureTunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileFtp) *string { return v.SecureTunnel }).(pulumi.StringPtrOutput)
}

// Enable/disable SSL/TLS offloading (hardware acceleration) for traffic in this tunnel. Valid values: `enable`, `disable`.
func (o ProfileFtpOutput) Ssl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileFtp) *string { return v.Ssl }).(pulumi.StringPtrOutput)
}

// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
func (o ProfileFtpOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileFtp) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
func (o ProfileFtpOutput) TunnelSharing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileFtp) *string { return v.TunnelSharing }).(pulumi.StringPtrOutput)
}

type ProfileFtpPtrOutput struct{ *pulumi.OutputState }

func (ProfileFtpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileFtp)(nil)).Elem()
}

func (o ProfileFtpPtrOutput) ToProfileFtpPtrOutput() ProfileFtpPtrOutput {
	return o
}

func (o ProfileFtpPtrOutput) ToProfileFtpPtrOutputWithContext(ctx context.Context) ProfileFtpPtrOutput {
	return o
}

func (o ProfileFtpPtrOutput) Elem() ProfileFtpOutput {
	return o.ApplyT(func(v *ProfileFtp) ProfileFtp {
		if v != nil {
			return *v
		}
		var ret ProfileFtp
		return ret
	}).(ProfileFtpOutput)
}

// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
func (o ProfileFtpPtrOutput) ByteCaching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileFtp) *string {
		if v == nil {
			return nil
		}
		return v.ByteCaching
	}).(pulumi.StringPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileFtpPtrOutput) LogTraffic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileFtp) *string {
		if v == nil {
			return nil
		}
		return v.LogTraffic
	}).(pulumi.StringPtrOutput)
}

// Single port number or port number range for FTP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
func (o ProfileFtpPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileFtp) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
func (o ProfileFtpPtrOutput) PreferChunking() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileFtp) *string {
		if v == nil {
			return nil
		}
		return v.PreferChunking
	}).(pulumi.StringPtrOutput)
}

// Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
func (o ProfileFtpPtrOutput) ProtocolOpt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileFtp) *string {
		if v == nil {
			return nil
		}
		return v.ProtocolOpt
	}).(pulumi.StringPtrOutput)
}

// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
func (o ProfileFtpPtrOutput) SecureTunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileFtp) *string {
		if v == nil {
			return nil
		}
		return v.SecureTunnel
	}).(pulumi.StringPtrOutput)
}

// Enable/disable SSL/TLS offloading (hardware acceleration) for traffic in this tunnel. Valid values: `enable`, `disable`.
func (o ProfileFtpPtrOutput) Ssl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileFtp) *string {
		if v == nil {
			return nil
		}
		return v.Ssl
	}).(pulumi.StringPtrOutput)
}

// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
func (o ProfileFtpPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileFtp) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
func (o ProfileFtpPtrOutput) TunnelSharing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileFtp) *string {
		if v == nil {
			return nil
		}
		return v.TunnelSharing
	}).(pulumi.StringPtrOutput)
}

type ProfileHttp struct {
	// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
	ByteCaching *string `pulumi:"byteCaching"`
	// Enable/disable logging. Valid values: `enable`, `disable`.
	LogTraffic *string `pulumi:"logTraffic"`
	// Single port number or port number range for HTTP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
	Port *int `pulumi:"port"`
	// Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
	PreferChunking *string `pulumi:"preferChunking"`
	// Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
	ProtocolOpt *string `pulumi:"protocolOpt"`
	// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
	SecureTunnel *string `pulumi:"secureTunnel"`
	// Enable/disable SSL/TLS offloading (hardware acceleration) for traffic in this tunnel. Valid values: `enable`, `disable`.
	Ssl *string `pulumi:"ssl"`
	// Port on which to expect HTTPS traffic for SSL/TLS offloading.
	SslPort *int `pulumi:"sslPort"`
	// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Configure how to process non-HTTP traffic when a profile configured for HTTP traffic accepts a non-HTTP session. Can occur if an application sends non-HTTP traffic using an HTTP destination port. Valid values: `enable`, `disable`.
	TunnelNonHttp *string `pulumi:"tunnelNonHttp"`
	// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
	TunnelSharing *string `pulumi:"tunnelSharing"`
	// How to handle HTTP sessions that do not comply with HTTP 0.9, 1.0, or 1.1. Valid values: `reject`, `tunnel`, `best-effort`.
	UnknownHttpVersion *string `pulumi:"unknownHttpVersion"`
}

// ProfileHttpInput is an input type that accepts ProfileHttpArgs and ProfileHttpOutput values.
// You can construct a concrete instance of `ProfileHttpInput` via:
//
//	ProfileHttpArgs{...}
type ProfileHttpInput interface {
	pulumi.Input

	ToProfileHttpOutput() ProfileHttpOutput
	ToProfileHttpOutputWithContext(context.Context) ProfileHttpOutput
}

type ProfileHttpArgs struct {
	// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
	ByteCaching pulumi.StringPtrInput `pulumi:"byteCaching"`
	// Enable/disable logging. Valid values: `enable`, `disable`.
	LogTraffic pulumi.StringPtrInput `pulumi:"logTraffic"`
	// Single port number or port number range for HTTP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
	PreferChunking pulumi.StringPtrInput `pulumi:"preferChunking"`
	// Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
	ProtocolOpt pulumi.StringPtrInput `pulumi:"protocolOpt"`
	// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
	SecureTunnel pulumi.StringPtrInput `pulumi:"secureTunnel"`
	// Enable/disable SSL/TLS offloading (hardware acceleration) for traffic in this tunnel. Valid values: `enable`, `disable`.
	Ssl pulumi.StringPtrInput `pulumi:"ssl"`
	// Port on which to expect HTTPS traffic for SSL/TLS offloading.
	SslPort pulumi.IntPtrInput `pulumi:"sslPort"`
	// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Configure how to process non-HTTP traffic when a profile configured for HTTP traffic accepts a non-HTTP session. Can occur if an application sends non-HTTP traffic using an HTTP destination port. Valid values: `enable`, `disable`.
	TunnelNonHttp pulumi.StringPtrInput `pulumi:"tunnelNonHttp"`
	// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
	TunnelSharing pulumi.StringPtrInput `pulumi:"tunnelSharing"`
	// How to handle HTTP sessions that do not comply with HTTP 0.9, 1.0, or 1.1. Valid values: `reject`, `tunnel`, `best-effort`.
	UnknownHttpVersion pulumi.StringPtrInput `pulumi:"unknownHttpVersion"`
}

func (ProfileHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileHttp)(nil)).Elem()
}

func (i ProfileHttpArgs) ToProfileHttpOutput() ProfileHttpOutput {
	return i.ToProfileHttpOutputWithContext(context.Background())
}

func (i ProfileHttpArgs) ToProfileHttpOutputWithContext(ctx context.Context) ProfileHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileHttpOutput)
}

func (i ProfileHttpArgs) ToProfileHttpPtrOutput() ProfileHttpPtrOutput {
	return i.ToProfileHttpPtrOutputWithContext(context.Background())
}

func (i ProfileHttpArgs) ToProfileHttpPtrOutputWithContext(ctx context.Context) ProfileHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileHttpOutput).ToProfileHttpPtrOutputWithContext(ctx)
}

// ProfileHttpPtrInput is an input type that accepts ProfileHttpArgs, ProfileHttpPtr and ProfileHttpPtrOutput values.
// You can construct a concrete instance of `ProfileHttpPtrInput` via:
//
//	        ProfileHttpArgs{...}
//
//	or:
//
//	        nil
type ProfileHttpPtrInput interface {
	pulumi.Input

	ToProfileHttpPtrOutput() ProfileHttpPtrOutput
	ToProfileHttpPtrOutputWithContext(context.Context) ProfileHttpPtrOutput
}

type profileHttpPtrType ProfileHttpArgs

func ProfileHttpPtr(v *ProfileHttpArgs) ProfileHttpPtrInput {
	return (*profileHttpPtrType)(v)
}

func (*profileHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileHttp)(nil)).Elem()
}

func (i *profileHttpPtrType) ToProfileHttpPtrOutput() ProfileHttpPtrOutput {
	return i.ToProfileHttpPtrOutputWithContext(context.Background())
}

func (i *profileHttpPtrType) ToProfileHttpPtrOutputWithContext(ctx context.Context) ProfileHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileHttpPtrOutput)
}

type ProfileHttpOutput struct{ *pulumi.OutputState }

func (ProfileHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileHttp)(nil)).Elem()
}

func (o ProfileHttpOutput) ToProfileHttpOutput() ProfileHttpOutput {
	return o
}

func (o ProfileHttpOutput) ToProfileHttpOutputWithContext(ctx context.Context) ProfileHttpOutput {
	return o
}

func (o ProfileHttpOutput) ToProfileHttpPtrOutput() ProfileHttpPtrOutput {
	return o.ToProfileHttpPtrOutputWithContext(context.Background())
}

func (o ProfileHttpOutput) ToProfileHttpPtrOutputWithContext(ctx context.Context) ProfileHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileHttp) *ProfileHttp {
		return &v
	}).(ProfileHttpPtrOutput)
}

// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
func (o ProfileHttpOutput) ByteCaching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileHttp) *string { return v.ByteCaching }).(pulumi.StringPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileHttpOutput) LogTraffic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileHttp) *string { return v.LogTraffic }).(pulumi.StringPtrOutput)
}

// Single port number or port number range for HTTP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
func (o ProfileHttpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileHttp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
func (o ProfileHttpOutput) PreferChunking() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileHttp) *string { return v.PreferChunking }).(pulumi.StringPtrOutput)
}

// Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
func (o ProfileHttpOutput) ProtocolOpt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileHttp) *string { return v.ProtocolOpt }).(pulumi.StringPtrOutput)
}

// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
func (o ProfileHttpOutput) SecureTunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileHttp) *string { return v.SecureTunnel }).(pulumi.StringPtrOutput)
}

// Enable/disable SSL/TLS offloading (hardware acceleration) for traffic in this tunnel. Valid values: `enable`, `disable`.
func (o ProfileHttpOutput) Ssl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileHttp) *string { return v.Ssl }).(pulumi.StringPtrOutput)
}

// Port on which to expect HTTPS traffic for SSL/TLS offloading.
func (o ProfileHttpOutput) SslPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileHttp) *int { return v.SslPort }).(pulumi.IntPtrOutput)
}

// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
func (o ProfileHttpOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileHttp) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Configure how to process non-HTTP traffic when a profile configured for HTTP traffic accepts a non-HTTP session. Can occur if an application sends non-HTTP traffic using an HTTP destination port. Valid values: `enable`, `disable`.
func (o ProfileHttpOutput) TunnelNonHttp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileHttp) *string { return v.TunnelNonHttp }).(pulumi.StringPtrOutput)
}

// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
func (o ProfileHttpOutput) TunnelSharing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileHttp) *string { return v.TunnelSharing }).(pulumi.StringPtrOutput)
}

// How to handle HTTP sessions that do not comply with HTTP 0.9, 1.0, or 1.1. Valid values: `reject`, `tunnel`, `best-effort`.
func (o ProfileHttpOutput) UnknownHttpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileHttp) *string { return v.UnknownHttpVersion }).(pulumi.StringPtrOutput)
}

type ProfileHttpPtrOutput struct{ *pulumi.OutputState }

func (ProfileHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileHttp)(nil)).Elem()
}

func (o ProfileHttpPtrOutput) ToProfileHttpPtrOutput() ProfileHttpPtrOutput {
	return o
}

func (o ProfileHttpPtrOutput) ToProfileHttpPtrOutputWithContext(ctx context.Context) ProfileHttpPtrOutput {
	return o
}

func (o ProfileHttpPtrOutput) Elem() ProfileHttpOutput {
	return o.ApplyT(func(v *ProfileHttp) ProfileHttp {
		if v != nil {
			return *v
		}
		var ret ProfileHttp
		return ret
	}).(ProfileHttpOutput)
}

// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
func (o ProfileHttpPtrOutput) ByteCaching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileHttp) *string {
		if v == nil {
			return nil
		}
		return v.ByteCaching
	}).(pulumi.StringPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileHttpPtrOutput) LogTraffic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileHttp) *string {
		if v == nil {
			return nil
		}
		return v.LogTraffic
	}).(pulumi.StringPtrOutput)
}

// Single port number or port number range for HTTP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
func (o ProfileHttpPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileHttp) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
func (o ProfileHttpPtrOutput) PreferChunking() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileHttp) *string {
		if v == nil {
			return nil
		}
		return v.PreferChunking
	}).(pulumi.StringPtrOutput)
}

// Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
func (o ProfileHttpPtrOutput) ProtocolOpt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileHttp) *string {
		if v == nil {
			return nil
		}
		return v.ProtocolOpt
	}).(pulumi.StringPtrOutput)
}

// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
func (o ProfileHttpPtrOutput) SecureTunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileHttp) *string {
		if v == nil {
			return nil
		}
		return v.SecureTunnel
	}).(pulumi.StringPtrOutput)
}

// Enable/disable SSL/TLS offloading (hardware acceleration) for traffic in this tunnel. Valid values: `enable`, `disable`.
func (o ProfileHttpPtrOutput) Ssl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileHttp) *string {
		if v == nil {
			return nil
		}
		return v.Ssl
	}).(pulumi.StringPtrOutput)
}

// Port on which to expect HTTPS traffic for SSL/TLS offloading.
func (o ProfileHttpPtrOutput) SslPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileHttp) *int {
		if v == nil {
			return nil
		}
		return v.SslPort
	}).(pulumi.IntPtrOutput)
}

// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
func (o ProfileHttpPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileHttp) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Configure how to process non-HTTP traffic when a profile configured for HTTP traffic accepts a non-HTTP session. Can occur if an application sends non-HTTP traffic using an HTTP destination port. Valid values: `enable`, `disable`.
func (o ProfileHttpPtrOutput) TunnelNonHttp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileHttp) *string {
		if v == nil {
			return nil
		}
		return v.TunnelNonHttp
	}).(pulumi.StringPtrOutput)
}

// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
func (o ProfileHttpPtrOutput) TunnelSharing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileHttp) *string {
		if v == nil {
			return nil
		}
		return v.TunnelSharing
	}).(pulumi.StringPtrOutput)
}

// How to handle HTTP sessions that do not comply with HTTP 0.9, 1.0, or 1.1. Valid values: `reject`, `tunnel`, `best-effort`.
func (o ProfileHttpPtrOutput) UnknownHttpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileHttp) *string {
		if v == nil {
			return nil
		}
		return v.UnknownHttpVersion
	}).(pulumi.StringPtrOutput)
}

type ProfileMapi struct {
	// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
	ByteCaching *string `pulumi:"byteCaching"`
	// Enable/disable logging. Valid values: `enable`, `disable`.
	LogTraffic *string `pulumi:"logTraffic"`
	// Single port number or port number range for MAPI. Only packets with a destination port number that matches this port number or range are accepted by this profile.
	Port *int `pulumi:"port"`
	// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
	SecureTunnel *string `pulumi:"secureTunnel"`
	// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
	TunnelSharing *string `pulumi:"tunnelSharing"`
}

// ProfileMapiInput is an input type that accepts ProfileMapiArgs and ProfileMapiOutput values.
// You can construct a concrete instance of `ProfileMapiInput` via:
//
//	ProfileMapiArgs{...}
type ProfileMapiInput interface {
	pulumi.Input

	ToProfileMapiOutput() ProfileMapiOutput
	ToProfileMapiOutputWithContext(context.Context) ProfileMapiOutput
}

type ProfileMapiArgs struct {
	// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
	ByteCaching pulumi.StringPtrInput `pulumi:"byteCaching"`
	// Enable/disable logging. Valid values: `enable`, `disable`.
	LogTraffic pulumi.StringPtrInput `pulumi:"logTraffic"`
	// Single port number or port number range for MAPI. Only packets with a destination port number that matches this port number or range are accepted by this profile.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
	SecureTunnel pulumi.StringPtrInput `pulumi:"secureTunnel"`
	// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
	TunnelSharing pulumi.StringPtrInput `pulumi:"tunnelSharing"`
}

func (ProfileMapiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileMapi)(nil)).Elem()
}

func (i ProfileMapiArgs) ToProfileMapiOutput() ProfileMapiOutput {
	return i.ToProfileMapiOutputWithContext(context.Background())
}

func (i ProfileMapiArgs) ToProfileMapiOutputWithContext(ctx context.Context) ProfileMapiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMapiOutput)
}

func (i ProfileMapiArgs) ToProfileMapiPtrOutput() ProfileMapiPtrOutput {
	return i.ToProfileMapiPtrOutputWithContext(context.Background())
}

func (i ProfileMapiArgs) ToProfileMapiPtrOutputWithContext(ctx context.Context) ProfileMapiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMapiOutput).ToProfileMapiPtrOutputWithContext(ctx)
}

// ProfileMapiPtrInput is an input type that accepts ProfileMapiArgs, ProfileMapiPtr and ProfileMapiPtrOutput values.
// You can construct a concrete instance of `ProfileMapiPtrInput` via:
//
//	        ProfileMapiArgs{...}
//
//	or:
//
//	        nil
type ProfileMapiPtrInput interface {
	pulumi.Input

	ToProfileMapiPtrOutput() ProfileMapiPtrOutput
	ToProfileMapiPtrOutputWithContext(context.Context) ProfileMapiPtrOutput
}

type profileMapiPtrType ProfileMapiArgs

func ProfileMapiPtr(v *ProfileMapiArgs) ProfileMapiPtrInput {
	return (*profileMapiPtrType)(v)
}

func (*profileMapiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileMapi)(nil)).Elem()
}

func (i *profileMapiPtrType) ToProfileMapiPtrOutput() ProfileMapiPtrOutput {
	return i.ToProfileMapiPtrOutputWithContext(context.Background())
}

func (i *profileMapiPtrType) ToProfileMapiPtrOutputWithContext(ctx context.Context) ProfileMapiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMapiPtrOutput)
}

type ProfileMapiOutput struct{ *pulumi.OutputState }

func (ProfileMapiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileMapi)(nil)).Elem()
}

func (o ProfileMapiOutput) ToProfileMapiOutput() ProfileMapiOutput {
	return o
}

func (o ProfileMapiOutput) ToProfileMapiOutputWithContext(ctx context.Context) ProfileMapiOutput {
	return o
}

func (o ProfileMapiOutput) ToProfileMapiPtrOutput() ProfileMapiPtrOutput {
	return o.ToProfileMapiPtrOutputWithContext(context.Background())
}

func (o ProfileMapiOutput) ToProfileMapiPtrOutputWithContext(ctx context.Context) ProfileMapiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileMapi) *ProfileMapi {
		return &v
	}).(ProfileMapiPtrOutput)
}

// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
func (o ProfileMapiOutput) ByteCaching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileMapi) *string { return v.ByteCaching }).(pulumi.StringPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileMapiOutput) LogTraffic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileMapi) *string { return v.LogTraffic }).(pulumi.StringPtrOutput)
}

// Single port number or port number range for MAPI. Only packets with a destination port number that matches this port number or range are accepted by this profile.
func (o ProfileMapiOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileMapi) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
func (o ProfileMapiOutput) SecureTunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileMapi) *string { return v.SecureTunnel }).(pulumi.StringPtrOutput)
}

// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
func (o ProfileMapiOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileMapi) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
func (o ProfileMapiOutput) TunnelSharing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileMapi) *string { return v.TunnelSharing }).(pulumi.StringPtrOutput)
}

type ProfileMapiPtrOutput struct{ *pulumi.OutputState }

func (ProfileMapiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileMapi)(nil)).Elem()
}

func (o ProfileMapiPtrOutput) ToProfileMapiPtrOutput() ProfileMapiPtrOutput {
	return o
}

func (o ProfileMapiPtrOutput) ToProfileMapiPtrOutputWithContext(ctx context.Context) ProfileMapiPtrOutput {
	return o
}

func (o ProfileMapiPtrOutput) Elem() ProfileMapiOutput {
	return o.ApplyT(func(v *ProfileMapi) ProfileMapi {
		if v != nil {
			return *v
		}
		var ret ProfileMapi
		return ret
	}).(ProfileMapiOutput)
}

// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
func (o ProfileMapiPtrOutput) ByteCaching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileMapi) *string {
		if v == nil {
			return nil
		}
		return v.ByteCaching
	}).(pulumi.StringPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileMapiPtrOutput) LogTraffic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileMapi) *string {
		if v == nil {
			return nil
		}
		return v.LogTraffic
	}).(pulumi.StringPtrOutput)
}

// Single port number or port number range for MAPI. Only packets with a destination port number that matches this port number or range are accepted by this profile.
func (o ProfileMapiPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileMapi) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
func (o ProfileMapiPtrOutput) SecureTunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileMapi) *string {
		if v == nil {
			return nil
		}
		return v.SecureTunnel
	}).(pulumi.StringPtrOutput)
}

// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
func (o ProfileMapiPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileMapi) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
func (o ProfileMapiPtrOutput) TunnelSharing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileMapi) *string {
		if v == nil {
			return nil
		}
		return v.TunnelSharing
	}).(pulumi.StringPtrOutput)
}

type ProfileTcp struct {
	// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
	ByteCaching *string `pulumi:"byteCaching"`
	// Select whether TCP byte-caching uses system memory only or both memory and disk space. Valid values: `mem-only`, `mem-disk`.
	ByteCachingOpt *string `pulumi:"byteCachingOpt"`
	// Enable/disable logging. Valid values: `enable`, `disable`.
	LogTraffic *string `pulumi:"logTraffic"`
	// Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
	Port *string `pulumi:"port"`
	// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
	SecureTunnel *string `pulumi:"secureTunnel"`
	// Enable/disable SSL/TLS offloading (hardware acceleration) for traffic in this tunnel. Valid values: `enable`, `disable`.
	Ssl *string `pulumi:"ssl"`
	// Port on which to expect HTTPS traffic for SSL/TLS offloading.
	SslPort *int `pulumi:"sslPort"`
	// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
	TunnelSharing *string `pulumi:"tunnelSharing"`
}

// ProfileTcpInput is an input type that accepts ProfileTcpArgs and ProfileTcpOutput values.
// You can construct a concrete instance of `ProfileTcpInput` via:
//
//	ProfileTcpArgs{...}
type ProfileTcpInput interface {
	pulumi.Input

	ToProfileTcpOutput() ProfileTcpOutput
	ToProfileTcpOutputWithContext(context.Context) ProfileTcpOutput
}

type ProfileTcpArgs struct {
	// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
	ByteCaching pulumi.StringPtrInput `pulumi:"byteCaching"`
	// Select whether TCP byte-caching uses system memory only or both memory and disk space. Valid values: `mem-only`, `mem-disk`.
	ByteCachingOpt pulumi.StringPtrInput `pulumi:"byteCachingOpt"`
	// Enable/disable logging. Valid values: `enable`, `disable`.
	LogTraffic pulumi.StringPtrInput `pulumi:"logTraffic"`
	// Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
	Port pulumi.StringPtrInput `pulumi:"port"`
	// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
	SecureTunnel pulumi.StringPtrInput `pulumi:"secureTunnel"`
	// Enable/disable SSL/TLS offloading (hardware acceleration) for traffic in this tunnel. Valid values: `enable`, `disable`.
	Ssl pulumi.StringPtrInput `pulumi:"ssl"`
	// Port on which to expect HTTPS traffic for SSL/TLS offloading.
	SslPort pulumi.IntPtrInput `pulumi:"sslPort"`
	// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
	TunnelSharing pulumi.StringPtrInput `pulumi:"tunnelSharing"`
}

func (ProfileTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileTcp)(nil)).Elem()
}

func (i ProfileTcpArgs) ToProfileTcpOutput() ProfileTcpOutput {
	return i.ToProfileTcpOutputWithContext(context.Background())
}

func (i ProfileTcpArgs) ToProfileTcpOutputWithContext(ctx context.Context) ProfileTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileTcpOutput)
}

func (i ProfileTcpArgs) ToProfileTcpPtrOutput() ProfileTcpPtrOutput {
	return i.ToProfileTcpPtrOutputWithContext(context.Background())
}

func (i ProfileTcpArgs) ToProfileTcpPtrOutputWithContext(ctx context.Context) ProfileTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileTcpOutput).ToProfileTcpPtrOutputWithContext(ctx)
}

// ProfileTcpPtrInput is an input type that accepts ProfileTcpArgs, ProfileTcpPtr and ProfileTcpPtrOutput values.
// You can construct a concrete instance of `ProfileTcpPtrInput` via:
//
//	        ProfileTcpArgs{...}
//
//	or:
//
//	        nil
type ProfileTcpPtrInput interface {
	pulumi.Input

	ToProfileTcpPtrOutput() ProfileTcpPtrOutput
	ToProfileTcpPtrOutputWithContext(context.Context) ProfileTcpPtrOutput
}

type profileTcpPtrType ProfileTcpArgs

func ProfileTcpPtr(v *ProfileTcpArgs) ProfileTcpPtrInput {
	return (*profileTcpPtrType)(v)
}

func (*profileTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileTcp)(nil)).Elem()
}

func (i *profileTcpPtrType) ToProfileTcpPtrOutput() ProfileTcpPtrOutput {
	return i.ToProfileTcpPtrOutputWithContext(context.Background())
}

func (i *profileTcpPtrType) ToProfileTcpPtrOutputWithContext(ctx context.Context) ProfileTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileTcpPtrOutput)
}

type ProfileTcpOutput struct{ *pulumi.OutputState }

func (ProfileTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileTcp)(nil)).Elem()
}

func (o ProfileTcpOutput) ToProfileTcpOutput() ProfileTcpOutput {
	return o
}

func (o ProfileTcpOutput) ToProfileTcpOutputWithContext(ctx context.Context) ProfileTcpOutput {
	return o
}

func (o ProfileTcpOutput) ToProfileTcpPtrOutput() ProfileTcpPtrOutput {
	return o.ToProfileTcpPtrOutputWithContext(context.Background())
}

func (o ProfileTcpOutput) ToProfileTcpPtrOutputWithContext(ctx context.Context) ProfileTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileTcp) *ProfileTcp {
		return &v
	}).(ProfileTcpPtrOutput)
}

// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
func (o ProfileTcpOutput) ByteCaching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileTcp) *string { return v.ByteCaching }).(pulumi.StringPtrOutput)
}

// Select whether TCP byte-caching uses system memory only or both memory and disk space. Valid values: `mem-only`, `mem-disk`.
func (o ProfileTcpOutput) ByteCachingOpt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileTcp) *string { return v.ByteCachingOpt }).(pulumi.StringPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileTcpOutput) LogTraffic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileTcp) *string { return v.LogTraffic }).(pulumi.StringPtrOutput)
}

// Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
func (o ProfileTcpOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileTcp) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
func (o ProfileTcpOutput) SecureTunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileTcp) *string { return v.SecureTunnel }).(pulumi.StringPtrOutput)
}

// Enable/disable SSL/TLS offloading (hardware acceleration) for traffic in this tunnel. Valid values: `enable`, `disable`.
func (o ProfileTcpOutput) Ssl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileTcp) *string { return v.Ssl }).(pulumi.StringPtrOutput)
}

// Port on which to expect HTTPS traffic for SSL/TLS offloading.
func (o ProfileTcpOutput) SslPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileTcp) *int { return v.SslPort }).(pulumi.IntPtrOutput)
}

// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
func (o ProfileTcpOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileTcp) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
func (o ProfileTcpOutput) TunnelSharing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileTcp) *string { return v.TunnelSharing }).(pulumi.StringPtrOutput)
}

type ProfileTcpPtrOutput struct{ *pulumi.OutputState }

func (ProfileTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileTcp)(nil)).Elem()
}

func (o ProfileTcpPtrOutput) ToProfileTcpPtrOutput() ProfileTcpPtrOutput {
	return o
}

func (o ProfileTcpPtrOutput) ToProfileTcpPtrOutputWithContext(ctx context.Context) ProfileTcpPtrOutput {
	return o
}

func (o ProfileTcpPtrOutput) Elem() ProfileTcpOutput {
	return o.ApplyT(func(v *ProfileTcp) ProfileTcp {
		if v != nil {
			return *v
		}
		var ret ProfileTcp
		return ret
	}).(ProfileTcpOutput)
}

// Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
func (o ProfileTcpPtrOutput) ByteCaching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTcp) *string {
		if v == nil {
			return nil
		}
		return v.ByteCaching
	}).(pulumi.StringPtrOutput)
}

// Select whether TCP byte-caching uses system memory only or both memory and disk space. Valid values: `mem-only`, `mem-disk`.
func (o ProfileTcpPtrOutput) ByteCachingOpt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTcp) *string {
		if v == nil {
			return nil
		}
		return v.ByteCachingOpt
	}).(pulumi.StringPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileTcpPtrOutput) LogTraffic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTcp) *string {
		if v == nil {
			return nil
		}
		return v.LogTraffic
	}).(pulumi.StringPtrOutput)
}

// Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
func (o ProfileTcpPtrOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTcp) *string {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.StringPtrOutput)
}

// Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
func (o ProfileTcpPtrOutput) SecureTunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTcp) *string {
		if v == nil {
			return nil
		}
		return v.SecureTunnel
	}).(pulumi.StringPtrOutput)
}

// Enable/disable SSL/TLS offloading (hardware acceleration) for traffic in this tunnel. Valid values: `enable`, `disable`.
func (o ProfileTcpPtrOutput) Ssl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTcp) *string {
		if v == nil {
			return nil
		}
		return v.Ssl
	}).(pulumi.StringPtrOutput)
}

// Port on which to expect HTTPS traffic for SSL/TLS offloading.
func (o ProfileTcpPtrOutput) SslPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileTcp) *int {
		if v == nil {
			return nil
		}
		return v.SslPort
	}).(pulumi.IntPtrOutput)
}

// Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
func (o ProfileTcpPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTcp) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
func (o ProfileTcpPtrOutput) TunnelSharing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTcp) *string {
		if v == nil {
			return nil
		}
		return v.TunnelSharing
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CacheserviceDstPeerInput)(nil)).Elem(), CacheserviceDstPeerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheserviceDstPeerArrayInput)(nil)).Elem(), CacheserviceDstPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheserviceSrcPeerInput)(nil)).Elem(), CacheserviceSrcPeerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheserviceSrcPeerArrayInput)(nil)).Elem(), CacheserviceSrcPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentdeliverynetworkruleHostDomainNameSuffixInput)(nil)).Elem(), ContentdeliverynetworkruleHostDomainNameSuffixArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentdeliverynetworkruleHostDomainNameSuffixArrayInput)(nil)).Elem(), ContentdeliverynetworkruleHostDomainNameSuffixArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentdeliverynetworkruleRuleInput)(nil)).Elem(), ContentdeliverynetworkruleRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentdeliverynetworkruleRuleArrayInput)(nil)).Elem(), ContentdeliverynetworkruleRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentdeliverynetworkruleRuleContentIdInput)(nil)).Elem(), ContentdeliverynetworkruleRuleContentIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentdeliverynetworkruleRuleContentIdPtrInput)(nil)).Elem(), ContentdeliverynetworkruleRuleContentIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentdeliverynetworkruleRuleMatchEntryInput)(nil)).Elem(), ContentdeliverynetworkruleRuleMatchEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentdeliverynetworkruleRuleMatchEntryArrayInput)(nil)).Elem(), ContentdeliverynetworkruleRuleMatchEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentdeliverynetworkruleRuleMatchEntryPatternInput)(nil)).Elem(), ContentdeliverynetworkruleRuleMatchEntryPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentdeliverynetworkruleRuleMatchEntryPatternArrayInput)(nil)).Elem(), ContentdeliverynetworkruleRuleMatchEntryPatternArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentdeliverynetworkruleRuleSkipEntryInput)(nil)).Elem(), ContentdeliverynetworkruleRuleSkipEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentdeliverynetworkruleRuleSkipEntryArrayInput)(nil)).Elem(), ContentdeliverynetworkruleRuleSkipEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentdeliverynetworkruleRuleSkipEntryPatternInput)(nil)).Elem(), ContentdeliverynetworkruleRuleSkipEntryPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentdeliverynetworkruleRuleSkipEntryPatternArrayInput)(nil)).Elem(), ContentdeliverynetworkruleRuleSkipEntryPatternArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileCifsInput)(nil)).Elem(), ProfileCifsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileCifsPtrInput)(nil)).Elem(), ProfileCifsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileFtpInput)(nil)).Elem(), ProfileFtpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileFtpPtrInput)(nil)).Elem(), ProfileFtpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileHttpInput)(nil)).Elem(), ProfileHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileHttpPtrInput)(nil)).Elem(), ProfileHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileMapiInput)(nil)).Elem(), ProfileMapiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileMapiPtrInput)(nil)).Elem(), ProfileMapiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileTcpInput)(nil)).Elem(), ProfileTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileTcpPtrInput)(nil)).Elem(), ProfileTcpArgs{})
	pulumi.RegisterOutputType(CacheserviceDstPeerOutput{})
	pulumi.RegisterOutputType(CacheserviceDstPeerArrayOutput{})
	pulumi.RegisterOutputType(CacheserviceSrcPeerOutput{})
	pulumi.RegisterOutputType(CacheserviceSrcPeerArrayOutput{})
	pulumi.RegisterOutputType(ContentdeliverynetworkruleHostDomainNameSuffixOutput{})
	pulumi.RegisterOutputType(ContentdeliverynetworkruleHostDomainNameSuffixArrayOutput{})
	pulumi.RegisterOutputType(ContentdeliverynetworkruleRuleOutput{})
	pulumi.RegisterOutputType(ContentdeliverynetworkruleRuleArrayOutput{})
	pulumi.RegisterOutputType(ContentdeliverynetworkruleRuleContentIdOutput{})
	pulumi.RegisterOutputType(ContentdeliverynetworkruleRuleContentIdPtrOutput{})
	pulumi.RegisterOutputType(ContentdeliverynetworkruleRuleMatchEntryOutput{})
	pulumi.RegisterOutputType(ContentdeliverynetworkruleRuleMatchEntryArrayOutput{})
	pulumi.RegisterOutputType(ContentdeliverynetworkruleRuleMatchEntryPatternOutput{})
	pulumi.RegisterOutputType(ContentdeliverynetworkruleRuleMatchEntryPatternArrayOutput{})
	pulumi.RegisterOutputType(ContentdeliverynetworkruleRuleSkipEntryOutput{})
	pulumi.RegisterOutputType(ContentdeliverynetworkruleRuleSkipEntryArrayOutput{})
	pulumi.RegisterOutputType(ContentdeliverynetworkruleRuleSkipEntryPatternOutput{})
	pulumi.RegisterOutputType(ContentdeliverynetworkruleRuleSkipEntryPatternArrayOutput{})
	pulumi.RegisterOutputType(ProfileCifsOutput{})
	pulumi.RegisterOutputType(ProfileCifsPtrOutput{})
	pulumi.RegisterOutputType(ProfileFtpOutput{})
	pulumi.RegisterOutputType(ProfileFtpPtrOutput{})
	pulumi.RegisterOutputType(ProfileHttpOutput{})
	pulumi.RegisterOutputType(ProfileHttpPtrOutput{})
	pulumi.RegisterOutputType(ProfileMapiOutput{})
	pulumi.RegisterOutputType(ProfileMapiPtrOutput{})
	pulumi.RegisterOutputType(ProfileTcpOutput{})
	pulumi.RegisterOutputType(ProfileTcpPtrOutput{})
}
