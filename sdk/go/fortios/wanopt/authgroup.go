// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wanopt

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure WAN optimization authentication groups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/wanopt"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := wanopt.NewAuthgroup(ctx, "trname", &wanopt.AuthgroupArgs{
//				AuthMethod: pulumi.String("cert"),
//				Cert:       pulumi.String("Fortinet_CA_SSL"),
//				PeerAccept: pulumi.String("any"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Wanopt AuthGroup can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:wanopt/authgroup:Authgroup labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:wanopt/authgroup:Authgroup labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Authgroup struct {
	pulumi.CustomResourceState

	// Select certificate or pre-shared key authentication for this authentication group. Valid values: `cert`, `psk`.
	AuthMethod pulumi.StringOutput `pulumi:"authMethod"`
	// Name of certificate to identify this peer.
	Cert pulumi.StringOutput `pulumi:"cert"`
	// Auth-group name.
	Name pulumi.StringOutput `pulumi:"name"`
	// If peer-accept is set to one, select the name of one peer to add to this authentication group. The peer must have added with the wanopt peer command.
	Peer pulumi.StringOutput `pulumi:"peer"`
	// Determine if this auth group accepts, any peer, a list of defined peers, or just one peer. Valid values: `any`, `defined`, `one`.
	PeerAccept pulumi.StringOutput `pulumi:"peerAccept"`
	// Pre-shared key used by the peers in this authentication group.
	Psk pulumi.StringPtrOutput `pulumi:"psk"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewAuthgroup registers a new resource with the given unique name, arguments, and options.
func NewAuthgroup(ctx *pulumi.Context,
	name string, args *AuthgroupArgs, opts ...pulumi.ResourceOption) (*Authgroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cert == nil {
		return nil, errors.New("invalid value for required argument 'Cert'")
	}
	if args.Psk != nil {
		args.Psk = pulumi.ToSecret(args.Psk).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"psk",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Authgroup
	err := ctx.RegisterResource("fortios:wanopt/authgroup:Authgroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthgroup gets an existing Authgroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthgroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthgroupState, opts ...pulumi.ResourceOption) (*Authgroup, error) {
	var resource Authgroup
	err := ctx.ReadResource("fortios:wanopt/authgroup:Authgroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Authgroup resources.
type authgroupState struct {
	// Select certificate or pre-shared key authentication for this authentication group. Valid values: `cert`, `psk`.
	AuthMethod *string `pulumi:"authMethod"`
	// Name of certificate to identify this peer.
	Cert *string `pulumi:"cert"`
	// Auth-group name.
	Name *string `pulumi:"name"`
	// If peer-accept is set to one, select the name of one peer to add to this authentication group. The peer must have added with the wanopt peer command.
	Peer *string `pulumi:"peer"`
	// Determine if this auth group accepts, any peer, a list of defined peers, or just one peer. Valid values: `any`, `defined`, `one`.
	PeerAccept *string `pulumi:"peerAccept"`
	// Pre-shared key used by the peers in this authentication group.
	Psk *string `pulumi:"psk"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type AuthgroupState struct {
	// Select certificate or pre-shared key authentication for this authentication group. Valid values: `cert`, `psk`.
	AuthMethod pulumi.StringPtrInput
	// Name of certificate to identify this peer.
	Cert pulumi.StringPtrInput
	// Auth-group name.
	Name pulumi.StringPtrInput
	// If peer-accept is set to one, select the name of one peer to add to this authentication group. The peer must have added with the wanopt peer command.
	Peer pulumi.StringPtrInput
	// Determine if this auth group accepts, any peer, a list of defined peers, or just one peer. Valid values: `any`, `defined`, `one`.
	PeerAccept pulumi.StringPtrInput
	// Pre-shared key used by the peers in this authentication group.
	Psk pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (AuthgroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*authgroupState)(nil)).Elem()
}

type authgroupArgs struct {
	// Select certificate or pre-shared key authentication for this authentication group. Valid values: `cert`, `psk`.
	AuthMethod *string `pulumi:"authMethod"`
	// Name of certificate to identify this peer.
	Cert string `pulumi:"cert"`
	// Auth-group name.
	Name *string `pulumi:"name"`
	// If peer-accept is set to one, select the name of one peer to add to this authentication group. The peer must have added with the wanopt peer command.
	Peer *string `pulumi:"peer"`
	// Determine if this auth group accepts, any peer, a list of defined peers, or just one peer. Valid values: `any`, `defined`, `one`.
	PeerAccept *string `pulumi:"peerAccept"`
	// Pre-shared key used by the peers in this authentication group.
	Psk *string `pulumi:"psk"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Authgroup resource.
type AuthgroupArgs struct {
	// Select certificate or pre-shared key authentication for this authentication group. Valid values: `cert`, `psk`.
	AuthMethod pulumi.StringPtrInput
	// Name of certificate to identify this peer.
	Cert pulumi.StringInput
	// Auth-group name.
	Name pulumi.StringPtrInput
	// If peer-accept is set to one, select the name of one peer to add to this authentication group. The peer must have added with the wanopt peer command.
	Peer pulumi.StringPtrInput
	// Determine if this auth group accepts, any peer, a list of defined peers, or just one peer. Valid values: `any`, `defined`, `one`.
	PeerAccept pulumi.StringPtrInput
	// Pre-shared key used by the peers in this authentication group.
	Psk pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (AuthgroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authgroupArgs)(nil)).Elem()
}

type AuthgroupInput interface {
	pulumi.Input

	ToAuthgroupOutput() AuthgroupOutput
	ToAuthgroupOutputWithContext(ctx context.Context) AuthgroupOutput
}

func (*Authgroup) ElementType() reflect.Type {
	return reflect.TypeOf((**Authgroup)(nil)).Elem()
}

func (i *Authgroup) ToAuthgroupOutput() AuthgroupOutput {
	return i.ToAuthgroupOutputWithContext(context.Background())
}

func (i *Authgroup) ToAuthgroupOutputWithContext(ctx context.Context) AuthgroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthgroupOutput)
}

// AuthgroupArrayInput is an input type that accepts AuthgroupArray and AuthgroupArrayOutput values.
// You can construct a concrete instance of `AuthgroupArrayInput` via:
//
//	AuthgroupArray{ AuthgroupArgs{...} }
type AuthgroupArrayInput interface {
	pulumi.Input

	ToAuthgroupArrayOutput() AuthgroupArrayOutput
	ToAuthgroupArrayOutputWithContext(context.Context) AuthgroupArrayOutput
}

type AuthgroupArray []AuthgroupInput

func (AuthgroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Authgroup)(nil)).Elem()
}

func (i AuthgroupArray) ToAuthgroupArrayOutput() AuthgroupArrayOutput {
	return i.ToAuthgroupArrayOutputWithContext(context.Background())
}

func (i AuthgroupArray) ToAuthgroupArrayOutputWithContext(ctx context.Context) AuthgroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthgroupArrayOutput)
}

// AuthgroupMapInput is an input type that accepts AuthgroupMap and AuthgroupMapOutput values.
// You can construct a concrete instance of `AuthgroupMapInput` via:
//
//	AuthgroupMap{ "key": AuthgroupArgs{...} }
type AuthgroupMapInput interface {
	pulumi.Input

	ToAuthgroupMapOutput() AuthgroupMapOutput
	ToAuthgroupMapOutputWithContext(context.Context) AuthgroupMapOutput
}

type AuthgroupMap map[string]AuthgroupInput

func (AuthgroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Authgroup)(nil)).Elem()
}

func (i AuthgroupMap) ToAuthgroupMapOutput() AuthgroupMapOutput {
	return i.ToAuthgroupMapOutputWithContext(context.Background())
}

func (i AuthgroupMap) ToAuthgroupMapOutputWithContext(ctx context.Context) AuthgroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthgroupMapOutput)
}

type AuthgroupOutput struct{ *pulumi.OutputState }

func (AuthgroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Authgroup)(nil)).Elem()
}

func (o AuthgroupOutput) ToAuthgroupOutput() AuthgroupOutput {
	return o
}

func (o AuthgroupOutput) ToAuthgroupOutputWithContext(ctx context.Context) AuthgroupOutput {
	return o
}

// Select certificate or pre-shared key authentication for this authentication group. Valid values: `cert`, `psk`.
func (o AuthgroupOutput) AuthMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Authgroup) pulumi.StringOutput { return v.AuthMethod }).(pulumi.StringOutput)
}

// Name of certificate to identify this peer.
func (o AuthgroupOutput) Cert() pulumi.StringOutput {
	return o.ApplyT(func(v *Authgroup) pulumi.StringOutput { return v.Cert }).(pulumi.StringOutput)
}

// Auth-group name.
func (o AuthgroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Authgroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// If peer-accept is set to one, select the name of one peer to add to this authentication group. The peer must have added with the wanopt peer command.
func (o AuthgroupOutput) Peer() pulumi.StringOutput {
	return o.ApplyT(func(v *Authgroup) pulumi.StringOutput { return v.Peer }).(pulumi.StringOutput)
}

// Determine if this auth group accepts, any peer, a list of defined peers, or just one peer. Valid values: `any`, `defined`, `one`.
func (o AuthgroupOutput) PeerAccept() pulumi.StringOutput {
	return o.ApplyT(func(v *Authgroup) pulumi.StringOutput { return v.PeerAccept }).(pulumi.StringOutput)
}

// Pre-shared key used by the peers in this authentication group.
func (o AuthgroupOutput) Psk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authgroup) pulumi.StringPtrOutput { return v.Psk }).(pulumi.StringPtrOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o AuthgroupOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Authgroup) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type AuthgroupArrayOutput struct{ *pulumi.OutputState }

func (AuthgroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Authgroup)(nil)).Elem()
}

func (o AuthgroupArrayOutput) ToAuthgroupArrayOutput() AuthgroupArrayOutput {
	return o
}

func (o AuthgroupArrayOutput) ToAuthgroupArrayOutputWithContext(ctx context.Context) AuthgroupArrayOutput {
	return o
}

func (o AuthgroupArrayOutput) Index(i pulumi.IntInput) AuthgroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Authgroup {
		return vs[0].([]*Authgroup)[vs[1].(int)]
	}).(AuthgroupOutput)
}

type AuthgroupMapOutput struct{ *pulumi.OutputState }

func (AuthgroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Authgroup)(nil)).Elem()
}

func (o AuthgroupMapOutput) ToAuthgroupMapOutput() AuthgroupMapOutput {
	return o
}

func (o AuthgroupMapOutput) ToAuthgroupMapOutputWithContext(ctx context.Context) AuthgroupMapOutput {
	return o
}

func (o AuthgroupMapOutput) MapIndex(k pulumi.StringInput) AuthgroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Authgroup {
		return vs[0].(map[string]*Authgroup)[vs[1].(string)]
	}).(AuthgroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthgroupInput)(nil)).Elem(), &Authgroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthgroupArrayInput)(nil)).Elem(), AuthgroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthgroupMapInput)(nil)).Elem(), AuthgroupMap{})
	pulumi.RegisterOutputType(AuthgroupOutput{})
	pulumi.RegisterOutputType(AuthgroupArrayOutput{})
	pulumi.RegisterOutputType(AuthgroupMapOutput{})
}
