// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wanopt

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Designate cache-service for wan-optimization and webcache.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/wanopt"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := wanopt.NewCacheservice(ctx, "trname", &wanopt.CacheserviceArgs{
//				AcceptableConnections: pulumi.String("any"),
//				Collaboration:         pulumi.String("disable"),
//				DeviceId:              pulumi.String("default_dev_id"),
//				PreferScenario:        pulumi.String("balance"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Wanopt CacheService can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:wanopt/cacheservice:Cacheservice labelname WanoptCacheService
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:wanopt/cacheservice:Cacheservice labelname WanoptCacheService
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Cacheservice struct {
	pulumi.CustomResourceState

	// Set strategy when accepting cache collaboration connection. Valid values: `any`, `peers`.
	AcceptableConnections pulumi.StringOutput `pulumi:"acceptableConnections"`
	// Enable/disable cache-collaboration between cache-service clusters. Valid values: `enable`, `disable`.
	Collaboration pulumi.StringOutput `pulumi:"collaboration"`
	// Set identifier for this cache device.
	DeviceId pulumi.StringOutput `pulumi:"deviceId"`
	// Modify cache-service destination peer list. The structure of `dstPeer` block is documented below.
	DstPeers CacheserviceDstPeerArrayOutput `pulumi:"dstPeers"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Set the preferred cache behavior towards the balance between latency and hit-ratio. Valid values: `balance`, `prefer-speed`, `prefer-cache`.
	PreferScenario pulumi.StringOutput `pulumi:"preferScenario"`
	// Modify cache-service source peer list. The structure of `srcPeer` block is documented below.
	SrcPeers CacheserviceSrcPeerArrayOutput `pulumi:"srcPeers"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewCacheservice registers a new resource with the given unique name, arguments, and options.
func NewCacheservice(ctx *pulumi.Context,
	name string, args *CacheserviceArgs, opts ...pulumi.ResourceOption) (*Cacheservice, error) {
	if args == nil {
		args = &CacheserviceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cacheservice
	err := ctx.RegisterResource("fortios:wanopt/cacheservice:Cacheservice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCacheservice gets an existing Cacheservice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCacheservice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CacheserviceState, opts ...pulumi.ResourceOption) (*Cacheservice, error) {
	var resource Cacheservice
	err := ctx.ReadResource("fortios:wanopt/cacheservice:Cacheservice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cacheservice resources.
type cacheserviceState struct {
	// Set strategy when accepting cache collaboration connection. Valid values: `any`, `peers`.
	AcceptableConnections *string `pulumi:"acceptableConnections"`
	// Enable/disable cache-collaboration between cache-service clusters. Valid values: `enable`, `disable`.
	Collaboration *string `pulumi:"collaboration"`
	// Set identifier for this cache device.
	DeviceId *string `pulumi:"deviceId"`
	// Modify cache-service destination peer list. The structure of `dstPeer` block is documented below.
	DstPeers []CacheserviceDstPeer `pulumi:"dstPeers"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Set the preferred cache behavior towards the balance between latency and hit-ratio. Valid values: `balance`, `prefer-speed`, `prefer-cache`.
	PreferScenario *string `pulumi:"preferScenario"`
	// Modify cache-service source peer list. The structure of `srcPeer` block is documented below.
	SrcPeers []CacheserviceSrcPeer `pulumi:"srcPeers"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type CacheserviceState struct {
	// Set strategy when accepting cache collaboration connection. Valid values: `any`, `peers`.
	AcceptableConnections pulumi.StringPtrInput
	// Enable/disable cache-collaboration between cache-service clusters. Valid values: `enable`, `disable`.
	Collaboration pulumi.StringPtrInput
	// Set identifier for this cache device.
	DeviceId pulumi.StringPtrInput
	// Modify cache-service destination peer list. The structure of `dstPeer` block is documented below.
	DstPeers CacheserviceDstPeerArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Set the preferred cache behavior towards the balance between latency and hit-ratio. Valid values: `balance`, `prefer-speed`, `prefer-cache`.
	PreferScenario pulumi.StringPtrInput
	// Modify cache-service source peer list. The structure of `srcPeer` block is documented below.
	SrcPeers CacheserviceSrcPeerArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (CacheserviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*cacheserviceState)(nil)).Elem()
}

type cacheserviceArgs struct {
	// Set strategy when accepting cache collaboration connection. Valid values: `any`, `peers`.
	AcceptableConnections *string `pulumi:"acceptableConnections"`
	// Enable/disable cache-collaboration between cache-service clusters. Valid values: `enable`, `disable`.
	Collaboration *string `pulumi:"collaboration"`
	// Set identifier for this cache device.
	DeviceId *string `pulumi:"deviceId"`
	// Modify cache-service destination peer list. The structure of `dstPeer` block is documented below.
	DstPeers []CacheserviceDstPeer `pulumi:"dstPeers"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Set the preferred cache behavior towards the balance between latency and hit-ratio. Valid values: `balance`, `prefer-speed`, `prefer-cache`.
	PreferScenario *string `pulumi:"preferScenario"`
	// Modify cache-service source peer list. The structure of `srcPeer` block is documented below.
	SrcPeers []CacheserviceSrcPeer `pulumi:"srcPeers"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Cacheservice resource.
type CacheserviceArgs struct {
	// Set strategy when accepting cache collaboration connection. Valid values: `any`, `peers`.
	AcceptableConnections pulumi.StringPtrInput
	// Enable/disable cache-collaboration between cache-service clusters. Valid values: `enable`, `disable`.
	Collaboration pulumi.StringPtrInput
	// Set identifier for this cache device.
	DeviceId pulumi.StringPtrInput
	// Modify cache-service destination peer list. The structure of `dstPeer` block is documented below.
	DstPeers CacheserviceDstPeerArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Set the preferred cache behavior towards the balance between latency and hit-ratio. Valid values: `balance`, `prefer-speed`, `prefer-cache`.
	PreferScenario pulumi.StringPtrInput
	// Modify cache-service source peer list. The structure of `srcPeer` block is documented below.
	SrcPeers CacheserviceSrcPeerArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (CacheserviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cacheserviceArgs)(nil)).Elem()
}

type CacheserviceInput interface {
	pulumi.Input

	ToCacheserviceOutput() CacheserviceOutput
	ToCacheserviceOutputWithContext(ctx context.Context) CacheserviceOutput
}

func (*Cacheservice) ElementType() reflect.Type {
	return reflect.TypeOf((**Cacheservice)(nil)).Elem()
}

func (i *Cacheservice) ToCacheserviceOutput() CacheserviceOutput {
	return i.ToCacheserviceOutputWithContext(context.Background())
}

func (i *Cacheservice) ToCacheserviceOutputWithContext(ctx context.Context) CacheserviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheserviceOutput)
}

// CacheserviceArrayInput is an input type that accepts CacheserviceArray and CacheserviceArrayOutput values.
// You can construct a concrete instance of `CacheserviceArrayInput` via:
//
//	CacheserviceArray{ CacheserviceArgs{...} }
type CacheserviceArrayInput interface {
	pulumi.Input

	ToCacheserviceArrayOutput() CacheserviceArrayOutput
	ToCacheserviceArrayOutputWithContext(context.Context) CacheserviceArrayOutput
}

type CacheserviceArray []CacheserviceInput

func (CacheserviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cacheservice)(nil)).Elem()
}

func (i CacheserviceArray) ToCacheserviceArrayOutput() CacheserviceArrayOutput {
	return i.ToCacheserviceArrayOutputWithContext(context.Background())
}

func (i CacheserviceArray) ToCacheserviceArrayOutputWithContext(ctx context.Context) CacheserviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheserviceArrayOutput)
}

// CacheserviceMapInput is an input type that accepts CacheserviceMap and CacheserviceMapOutput values.
// You can construct a concrete instance of `CacheserviceMapInput` via:
//
//	CacheserviceMap{ "key": CacheserviceArgs{...} }
type CacheserviceMapInput interface {
	pulumi.Input

	ToCacheserviceMapOutput() CacheserviceMapOutput
	ToCacheserviceMapOutputWithContext(context.Context) CacheserviceMapOutput
}

type CacheserviceMap map[string]CacheserviceInput

func (CacheserviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cacheservice)(nil)).Elem()
}

func (i CacheserviceMap) ToCacheserviceMapOutput() CacheserviceMapOutput {
	return i.ToCacheserviceMapOutputWithContext(context.Background())
}

func (i CacheserviceMap) ToCacheserviceMapOutputWithContext(ctx context.Context) CacheserviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheserviceMapOutput)
}

type CacheserviceOutput struct{ *pulumi.OutputState }

func (CacheserviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cacheservice)(nil)).Elem()
}

func (o CacheserviceOutput) ToCacheserviceOutput() CacheserviceOutput {
	return o
}

func (o CacheserviceOutput) ToCacheserviceOutputWithContext(ctx context.Context) CacheserviceOutput {
	return o
}

// Set strategy when accepting cache collaboration connection. Valid values: `any`, `peers`.
func (o CacheserviceOutput) AcceptableConnections() pulumi.StringOutput {
	return o.ApplyT(func(v *Cacheservice) pulumi.StringOutput { return v.AcceptableConnections }).(pulumi.StringOutput)
}

// Enable/disable cache-collaboration between cache-service clusters. Valid values: `enable`, `disable`.
func (o CacheserviceOutput) Collaboration() pulumi.StringOutput {
	return o.ApplyT(func(v *Cacheservice) pulumi.StringOutput { return v.Collaboration }).(pulumi.StringOutput)
}

// Set identifier for this cache device.
func (o CacheserviceOutput) DeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cacheservice) pulumi.StringOutput { return v.DeviceId }).(pulumi.StringOutput)
}

// Modify cache-service destination peer list. The structure of `dstPeer` block is documented below.
func (o CacheserviceOutput) DstPeers() CacheserviceDstPeerArrayOutput {
	return o.ApplyT(func(v *Cacheservice) CacheserviceDstPeerArrayOutput { return v.DstPeers }).(CacheserviceDstPeerArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o CacheserviceOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cacheservice) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o CacheserviceOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cacheservice) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Set the preferred cache behavior towards the balance between latency and hit-ratio. Valid values: `balance`, `prefer-speed`, `prefer-cache`.
func (o CacheserviceOutput) PreferScenario() pulumi.StringOutput {
	return o.ApplyT(func(v *Cacheservice) pulumi.StringOutput { return v.PreferScenario }).(pulumi.StringOutput)
}

// Modify cache-service source peer list. The structure of `srcPeer` block is documented below.
func (o CacheserviceOutput) SrcPeers() CacheserviceSrcPeerArrayOutput {
	return o.ApplyT(func(v *Cacheservice) CacheserviceSrcPeerArrayOutput { return v.SrcPeers }).(CacheserviceSrcPeerArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o CacheserviceOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cacheservice) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type CacheserviceArrayOutput struct{ *pulumi.OutputState }

func (CacheserviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cacheservice)(nil)).Elem()
}

func (o CacheserviceArrayOutput) ToCacheserviceArrayOutput() CacheserviceArrayOutput {
	return o
}

func (o CacheserviceArrayOutput) ToCacheserviceArrayOutputWithContext(ctx context.Context) CacheserviceArrayOutput {
	return o
}

func (o CacheserviceArrayOutput) Index(i pulumi.IntInput) CacheserviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cacheservice {
		return vs[0].([]*Cacheservice)[vs[1].(int)]
	}).(CacheserviceOutput)
}

type CacheserviceMapOutput struct{ *pulumi.OutputState }

func (CacheserviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cacheservice)(nil)).Elem()
}

func (o CacheserviceMapOutput) ToCacheserviceMapOutput() CacheserviceMapOutput {
	return o
}

func (o CacheserviceMapOutput) ToCacheserviceMapOutputWithContext(ctx context.Context) CacheserviceMapOutput {
	return o
}

func (o CacheserviceMapOutput) MapIndex(k pulumi.StringInput) CacheserviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cacheservice {
		return vs[0].(map[string]*Cacheservice)[vs[1].(string)]
	}).(CacheserviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CacheserviceInput)(nil)).Elem(), &Cacheservice{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheserviceArrayInput)(nil)).Elem(), CacheserviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheserviceMapInput)(nil)).Elem(), CacheserviceMap{})
	pulumi.RegisterOutputType(CacheserviceOutput{})
	pulumi.RegisterOutputType(CacheserviceArrayOutput{})
	pulumi.RegisterOutputType(CacheserviceMapOutput{})
}
