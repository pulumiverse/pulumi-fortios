// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package router

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure key-chain.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/router"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := router.NewKeychain(ctx, "trname", &router.KeychainArgs{
//				Keys: router.KeychainKeyArray{
//					&router.KeychainKeyArgs{
//						AcceptLifetime: pulumi.String("04:00:00 01 01 2008 04:00:00 01 01 2022"),
//						KeyString:      pulumi.String("ewiwn3i23232s212"),
//						SendLifetime:   pulumi.String("04:00:00 01 01 2008 04:00:00 01 01 2022"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Router KeyChain can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:router/keychain:Keychain labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:router/keychain:Keychain labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Keychain struct {
	pulumi.CustomResourceState

	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Configuration method to edit key settings. The structure of `key` block is documented below.
	Keys KeychainKeyArrayOutput `pulumi:"keys"`
	// Key-chain name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewKeychain registers a new resource with the given unique name, arguments, and options.
func NewKeychain(ctx *pulumi.Context,
	name string, args *KeychainArgs, opts ...pulumi.ResourceOption) (*Keychain, error) {
	if args == nil {
		args = &KeychainArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Keychain
	err := ctx.RegisterResource("fortios:router/keychain:Keychain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeychain gets an existing Keychain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeychain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeychainState, opts ...pulumi.ResourceOption) (*Keychain, error) {
	var resource Keychain
	err := ctx.ReadResource("fortios:router/keychain:Keychain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Keychain resources.
type keychainState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Configuration method to edit key settings. The structure of `key` block is documented below.
	Keys []KeychainKey `pulumi:"keys"`
	// Key-chain name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type KeychainState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Configuration method to edit key settings. The structure of `key` block is documented below.
	Keys KeychainKeyArrayInput
	// Key-chain name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (KeychainState) ElementType() reflect.Type {
	return reflect.TypeOf((*keychainState)(nil)).Elem()
}

type keychainArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Configuration method to edit key settings. The structure of `key` block is documented below.
	Keys []KeychainKey `pulumi:"keys"`
	// Key-chain name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Keychain resource.
type KeychainArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Configuration method to edit key settings. The structure of `key` block is documented below.
	Keys KeychainKeyArrayInput
	// Key-chain name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (KeychainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keychainArgs)(nil)).Elem()
}

type KeychainInput interface {
	pulumi.Input

	ToKeychainOutput() KeychainOutput
	ToKeychainOutputWithContext(ctx context.Context) KeychainOutput
}

func (*Keychain) ElementType() reflect.Type {
	return reflect.TypeOf((**Keychain)(nil)).Elem()
}

func (i *Keychain) ToKeychainOutput() KeychainOutput {
	return i.ToKeychainOutputWithContext(context.Background())
}

func (i *Keychain) ToKeychainOutputWithContext(ctx context.Context) KeychainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeychainOutput)
}

// KeychainArrayInput is an input type that accepts KeychainArray and KeychainArrayOutput values.
// You can construct a concrete instance of `KeychainArrayInput` via:
//
//	KeychainArray{ KeychainArgs{...} }
type KeychainArrayInput interface {
	pulumi.Input

	ToKeychainArrayOutput() KeychainArrayOutput
	ToKeychainArrayOutputWithContext(context.Context) KeychainArrayOutput
}

type KeychainArray []KeychainInput

func (KeychainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keychain)(nil)).Elem()
}

func (i KeychainArray) ToKeychainArrayOutput() KeychainArrayOutput {
	return i.ToKeychainArrayOutputWithContext(context.Background())
}

func (i KeychainArray) ToKeychainArrayOutputWithContext(ctx context.Context) KeychainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeychainArrayOutput)
}

// KeychainMapInput is an input type that accepts KeychainMap and KeychainMapOutput values.
// You can construct a concrete instance of `KeychainMapInput` via:
//
//	KeychainMap{ "key": KeychainArgs{...} }
type KeychainMapInput interface {
	pulumi.Input

	ToKeychainMapOutput() KeychainMapOutput
	ToKeychainMapOutputWithContext(context.Context) KeychainMapOutput
}

type KeychainMap map[string]KeychainInput

func (KeychainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keychain)(nil)).Elem()
}

func (i KeychainMap) ToKeychainMapOutput() KeychainMapOutput {
	return i.ToKeychainMapOutputWithContext(context.Background())
}

func (i KeychainMap) ToKeychainMapOutputWithContext(ctx context.Context) KeychainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeychainMapOutput)
}

type KeychainOutput struct{ *pulumi.OutputState }

func (KeychainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Keychain)(nil)).Elem()
}

func (o KeychainOutput) ToKeychainOutput() KeychainOutput {
	return o
}

func (o KeychainOutput) ToKeychainOutputWithContext(ctx context.Context) KeychainOutput {
	return o
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o KeychainOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keychain) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o KeychainOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keychain) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Configuration method to edit key settings. The structure of `key` block is documented below.
func (o KeychainOutput) Keys() KeychainKeyArrayOutput {
	return o.ApplyT(func(v *Keychain) KeychainKeyArrayOutput { return v.Keys }).(KeychainKeyArrayOutput)
}

// Key-chain name.
func (o KeychainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Keychain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o KeychainOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keychain) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type KeychainArrayOutput struct{ *pulumi.OutputState }

func (KeychainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keychain)(nil)).Elem()
}

func (o KeychainArrayOutput) ToKeychainArrayOutput() KeychainArrayOutput {
	return o
}

func (o KeychainArrayOutput) ToKeychainArrayOutputWithContext(ctx context.Context) KeychainArrayOutput {
	return o
}

func (o KeychainArrayOutput) Index(i pulumi.IntInput) KeychainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Keychain {
		return vs[0].([]*Keychain)[vs[1].(int)]
	}).(KeychainOutput)
}

type KeychainMapOutput struct{ *pulumi.OutputState }

func (KeychainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keychain)(nil)).Elem()
}

func (o KeychainMapOutput) ToKeychainMapOutput() KeychainMapOutput {
	return o
}

func (o KeychainMapOutput) ToKeychainMapOutputWithContext(ctx context.Context) KeychainMapOutput {
	return o
}

func (o KeychainMapOutput) MapIndex(k pulumi.StringInput) KeychainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Keychain {
		return vs[0].(map[string]*Keychain)[vs[1].(string)]
	}).(KeychainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeychainInput)(nil)).Elem(), &Keychain{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeychainArrayInput)(nil)).Elem(), KeychainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeychainMapInput)(nil)).Elem(), KeychainMap{})
	pulumi.RegisterOutputType(KeychainOutput{})
	pulumi.RegisterOutputType(KeychainArrayOutput{})
	pulumi.RegisterOutputType(KeychainMapOutput{})
}
