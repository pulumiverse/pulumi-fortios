// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package router

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure IPv4 prefix lists.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/router"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := router.NewPrefixlist(ctx, "trname", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Router PrefixList can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:router/prefixlist:Prefixlist labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:router/prefixlist:Prefixlist labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Prefixlist struct {
	pulumi.CustomResourceState

	// Comment.
	Comments pulumi.StringOutput `pulumi:"comments"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// IPv4 prefix list rule. The structure of `rule` block is documented below.
	Rules PrefixlistRuleArrayOutput `pulumi:"rules"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewPrefixlist registers a new resource with the given unique name, arguments, and options.
func NewPrefixlist(ctx *pulumi.Context,
	name string, args *PrefixlistArgs, opts ...pulumi.ResourceOption) (*Prefixlist, error) {
	if args == nil {
		args = &PrefixlistArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Prefixlist
	err := ctx.RegisterResource("fortios:router/prefixlist:Prefixlist", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrefixlist gets an existing Prefixlist resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrefixlist(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrefixlistState, opts ...pulumi.ResourceOption) (*Prefixlist, error) {
	var resource Prefixlist
	err := ctx.ReadResource("fortios:router/prefixlist:Prefixlist", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Prefixlist resources.
type prefixlistState struct {
	// Comment.
	Comments *string `pulumi:"comments"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Name.
	Name *string `pulumi:"name"`
	// IPv4 prefix list rule. The structure of `rule` block is documented below.
	Rules []PrefixlistRule `pulumi:"rules"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type PrefixlistState struct {
	// Comment.
	Comments pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// IPv4 prefix list rule. The structure of `rule` block is documented below.
	Rules PrefixlistRuleArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (PrefixlistState) ElementType() reflect.Type {
	return reflect.TypeOf((*prefixlistState)(nil)).Elem()
}

type prefixlistArgs struct {
	// Comment.
	Comments *string `pulumi:"comments"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Name.
	Name *string `pulumi:"name"`
	// IPv4 prefix list rule. The structure of `rule` block is documented below.
	Rules []PrefixlistRule `pulumi:"rules"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Prefixlist resource.
type PrefixlistArgs struct {
	// Comment.
	Comments pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// IPv4 prefix list rule. The structure of `rule` block is documented below.
	Rules PrefixlistRuleArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (PrefixlistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*prefixlistArgs)(nil)).Elem()
}

type PrefixlistInput interface {
	pulumi.Input

	ToPrefixlistOutput() PrefixlistOutput
	ToPrefixlistOutputWithContext(ctx context.Context) PrefixlistOutput
}

func (*Prefixlist) ElementType() reflect.Type {
	return reflect.TypeOf((**Prefixlist)(nil)).Elem()
}

func (i *Prefixlist) ToPrefixlistOutput() PrefixlistOutput {
	return i.ToPrefixlistOutputWithContext(context.Background())
}

func (i *Prefixlist) ToPrefixlistOutputWithContext(ctx context.Context) PrefixlistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixlistOutput)
}

// PrefixlistArrayInput is an input type that accepts PrefixlistArray and PrefixlistArrayOutput values.
// You can construct a concrete instance of `PrefixlistArrayInput` via:
//
//	PrefixlistArray{ PrefixlistArgs{...} }
type PrefixlistArrayInput interface {
	pulumi.Input

	ToPrefixlistArrayOutput() PrefixlistArrayOutput
	ToPrefixlistArrayOutputWithContext(context.Context) PrefixlistArrayOutput
}

type PrefixlistArray []PrefixlistInput

func (PrefixlistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Prefixlist)(nil)).Elem()
}

func (i PrefixlistArray) ToPrefixlistArrayOutput() PrefixlistArrayOutput {
	return i.ToPrefixlistArrayOutputWithContext(context.Background())
}

func (i PrefixlistArray) ToPrefixlistArrayOutputWithContext(ctx context.Context) PrefixlistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixlistArrayOutput)
}

// PrefixlistMapInput is an input type that accepts PrefixlistMap and PrefixlistMapOutput values.
// You can construct a concrete instance of `PrefixlistMapInput` via:
//
//	PrefixlistMap{ "key": PrefixlistArgs{...} }
type PrefixlistMapInput interface {
	pulumi.Input

	ToPrefixlistMapOutput() PrefixlistMapOutput
	ToPrefixlistMapOutputWithContext(context.Context) PrefixlistMapOutput
}

type PrefixlistMap map[string]PrefixlistInput

func (PrefixlistMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Prefixlist)(nil)).Elem()
}

func (i PrefixlistMap) ToPrefixlistMapOutput() PrefixlistMapOutput {
	return i.ToPrefixlistMapOutputWithContext(context.Background())
}

func (i PrefixlistMap) ToPrefixlistMapOutputWithContext(ctx context.Context) PrefixlistMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixlistMapOutput)
}

type PrefixlistOutput struct{ *pulumi.OutputState }

func (PrefixlistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Prefixlist)(nil)).Elem()
}

func (o PrefixlistOutput) ToPrefixlistOutput() PrefixlistOutput {
	return o
}

func (o PrefixlistOutput) ToPrefixlistOutputWithContext(ctx context.Context) PrefixlistOutput {
	return o
}

// Comment.
func (o PrefixlistOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v *Prefixlist) pulumi.StringOutput { return v.Comments }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o PrefixlistOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Prefixlist) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o PrefixlistOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Prefixlist) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Name.
func (o PrefixlistOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Prefixlist) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// IPv4 prefix list rule. The structure of `rule` block is documented below.
func (o PrefixlistOutput) Rules() PrefixlistRuleArrayOutput {
	return o.ApplyT(func(v *Prefixlist) PrefixlistRuleArrayOutput { return v.Rules }).(PrefixlistRuleArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o PrefixlistOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Prefixlist) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type PrefixlistArrayOutput struct{ *pulumi.OutputState }

func (PrefixlistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Prefixlist)(nil)).Elem()
}

func (o PrefixlistArrayOutput) ToPrefixlistArrayOutput() PrefixlistArrayOutput {
	return o
}

func (o PrefixlistArrayOutput) ToPrefixlistArrayOutputWithContext(ctx context.Context) PrefixlistArrayOutput {
	return o
}

func (o PrefixlistArrayOutput) Index(i pulumi.IntInput) PrefixlistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Prefixlist {
		return vs[0].([]*Prefixlist)[vs[1].(int)]
	}).(PrefixlistOutput)
}

type PrefixlistMapOutput struct{ *pulumi.OutputState }

func (PrefixlistMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Prefixlist)(nil)).Elem()
}

func (o PrefixlistMapOutput) ToPrefixlistMapOutput() PrefixlistMapOutput {
	return o
}

func (o PrefixlistMapOutput) ToPrefixlistMapOutputWithContext(ctx context.Context) PrefixlistMapOutput {
	return o
}

func (o PrefixlistMapOutput) MapIndex(k pulumi.StringInput) PrefixlistOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Prefixlist {
		return vs[0].(map[string]*Prefixlist)[vs[1].(string)]
	}).(PrefixlistOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixlistInput)(nil)).Elem(), &Prefixlist{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixlistArrayInput)(nil)).Elem(), PrefixlistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixlistMapInput)(nil)).Elem(), PrefixlistMap{})
	pulumi.RegisterOutputType(PrefixlistOutput{})
	pulumi.RegisterOutputType(PrefixlistArrayOutput{})
	pulumi.RegisterOutputType(PrefixlistMapOutput{})
}
