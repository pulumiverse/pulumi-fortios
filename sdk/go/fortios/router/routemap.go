// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package router

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure route maps.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/router"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := router.NewRoutemap(ctx, "trname", &router.RoutemapArgs{
//				Rules: router.RoutemapRuleArray{
//					&router.RoutemapRuleArgs{
//						Action:                             pulumi.String("deny"),
//						MatchCommunityExact:                pulumi.String("disable"),
//						MatchFlags:                         pulumi.Int(0),
//						MatchMetric:                        pulumi.Int(0),
//						MatchOrigin:                        pulumi.String("none"),
//						MatchRouteType:                     pulumi.String("No type specified"),
//						MatchTag:                           pulumi.Int(0),
//						SetAggregatorAs:                    pulumi.Int(0),
//						SetAggregatorIp:                    pulumi.String("0.0.0.0"),
//						SetAspathAction:                    pulumi.String("prepend"),
//						SetAtomicAggregate:                 pulumi.String("disable"),
//						SetCommunityAdditive:               pulumi.String("disable"),
//						SetDampeningMaxSuppress:            pulumi.Int(0),
//						SetDampeningReachabilityHalfLife:   pulumi.Int(0),
//						SetDampeningReuse:                  pulumi.Int(0),
//						SetDampeningSuppress:               pulumi.Int(0),
//						SetDampeningUnreachabilityHalfLife: pulumi.Int(0),
//						SetFlags:                           pulumi.Int(128),
//						SetIp6Nexthop:                      pulumi.String("::"),
//						SetIp6NexthopLocal:                 pulumi.String("::"),
//						SetIpNexthop:                       pulumi.String("0.0.0.0"),
//						SetLocalPreference:                 pulumi.Int(0),
//						SetMetric:                          pulumi.Int(0),
//						SetMetricType:                      pulumi.String("No type specified"),
//						SetOrigin:                          pulumi.String("none"),
//						SetOriginatorId:                    pulumi.String("0.0.0.0"),
//						SetRouteTag:                        pulumi.Int(0),
//						SetTag:                             pulumi.Int(0),
//						SetWeight:                          pulumi.Int(21),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Router RouteMap can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:router/routemap:Routemap labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:router/routemap:Routemap labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Routemap struct {
	pulumi.CustomResourceState

	// Optional comments.
	Comments pulumi.StringOutput `pulumi:"comments"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Rule. The structure of `rule` block is documented below.
	Rules RoutemapRuleArrayOutput `pulumi:"rules"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewRoutemap registers a new resource with the given unique name, arguments, and options.
func NewRoutemap(ctx *pulumi.Context,
	name string, args *RoutemapArgs, opts ...pulumi.ResourceOption) (*Routemap, error) {
	if args == nil {
		args = &RoutemapArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Routemap
	err := ctx.RegisterResource("fortios:router/routemap:Routemap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoutemap gets an existing Routemap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoutemap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutemapState, opts ...pulumi.ResourceOption) (*Routemap, error) {
	var resource Routemap
	err := ctx.ReadResource("fortios:router/routemap:Routemap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Routemap resources.
type routemapState struct {
	// Optional comments.
	Comments *string `pulumi:"comments"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Name.
	Name *string `pulumi:"name"`
	// Rule. The structure of `rule` block is documented below.
	Rules []RoutemapRule `pulumi:"rules"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type RoutemapState struct {
	// Optional comments.
	Comments pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Rule. The structure of `rule` block is documented below.
	Rules RoutemapRuleArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RoutemapState) ElementType() reflect.Type {
	return reflect.TypeOf((*routemapState)(nil)).Elem()
}

type routemapArgs struct {
	// Optional comments.
	Comments *string `pulumi:"comments"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Name.
	Name *string `pulumi:"name"`
	// Rule. The structure of `rule` block is documented below.
	Rules []RoutemapRule `pulumi:"rules"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Routemap resource.
type RoutemapArgs struct {
	// Optional comments.
	Comments pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Rule. The structure of `rule` block is documented below.
	Rules RoutemapRuleArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RoutemapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routemapArgs)(nil)).Elem()
}

type RoutemapInput interface {
	pulumi.Input

	ToRoutemapOutput() RoutemapOutput
	ToRoutemapOutputWithContext(ctx context.Context) RoutemapOutput
}

func (*Routemap) ElementType() reflect.Type {
	return reflect.TypeOf((**Routemap)(nil)).Elem()
}

func (i *Routemap) ToRoutemapOutput() RoutemapOutput {
	return i.ToRoutemapOutputWithContext(context.Background())
}

func (i *Routemap) ToRoutemapOutputWithContext(ctx context.Context) RoutemapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutemapOutput)
}

// RoutemapArrayInput is an input type that accepts RoutemapArray and RoutemapArrayOutput values.
// You can construct a concrete instance of `RoutemapArrayInput` via:
//
//	RoutemapArray{ RoutemapArgs{...} }
type RoutemapArrayInput interface {
	pulumi.Input

	ToRoutemapArrayOutput() RoutemapArrayOutput
	ToRoutemapArrayOutputWithContext(context.Context) RoutemapArrayOutput
}

type RoutemapArray []RoutemapInput

func (RoutemapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Routemap)(nil)).Elem()
}

func (i RoutemapArray) ToRoutemapArrayOutput() RoutemapArrayOutput {
	return i.ToRoutemapArrayOutputWithContext(context.Background())
}

func (i RoutemapArray) ToRoutemapArrayOutputWithContext(ctx context.Context) RoutemapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutemapArrayOutput)
}

// RoutemapMapInput is an input type that accepts RoutemapMap and RoutemapMapOutput values.
// You can construct a concrete instance of `RoutemapMapInput` via:
//
//	RoutemapMap{ "key": RoutemapArgs{...} }
type RoutemapMapInput interface {
	pulumi.Input

	ToRoutemapMapOutput() RoutemapMapOutput
	ToRoutemapMapOutputWithContext(context.Context) RoutemapMapOutput
}

type RoutemapMap map[string]RoutemapInput

func (RoutemapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Routemap)(nil)).Elem()
}

func (i RoutemapMap) ToRoutemapMapOutput() RoutemapMapOutput {
	return i.ToRoutemapMapOutputWithContext(context.Background())
}

func (i RoutemapMap) ToRoutemapMapOutputWithContext(ctx context.Context) RoutemapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutemapMapOutput)
}

type RoutemapOutput struct{ *pulumi.OutputState }

func (RoutemapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Routemap)(nil)).Elem()
}

func (o RoutemapOutput) ToRoutemapOutput() RoutemapOutput {
	return o
}

func (o RoutemapOutput) ToRoutemapOutputWithContext(ctx context.Context) RoutemapOutput {
	return o
}

// Optional comments.
func (o RoutemapOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v *Routemap) pulumi.StringOutput { return v.Comments }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o RoutemapOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Routemap) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o RoutemapOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Routemap) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Name.
func (o RoutemapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Routemap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Rule. The structure of `rule` block is documented below.
func (o RoutemapOutput) Rules() RoutemapRuleArrayOutput {
	return o.ApplyT(func(v *Routemap) RoutemapRuleArrayOutput { return v.Rules }).(RoutemapRuleArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o RoutemapOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Routemap) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type RoutemapArrayOutput struct{ *pulumi.OutputState }

func (RoutemapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Routemap)(nil)).Elem()
}

func (o RoutemapArrayOutput) ToRoutemapArrayOutput() RoutemapArrayOutput {
	return o
}

func (o RoutemapArrayOutput) ToRoutemapArrayOutputWithContext(ctx context.Context) RoutemapArrayOutput {
	return o
}

func (o RoutemapArrayOutput) Index(i pulumi.IntInput) RoutemapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Routemap {
		return vs[0].([]*Routemap)[vs[1].(int)]
	}).(RoutemapOutput)
}

type RoutemapMapOutput struct{ *pulumi.OutputState }

func (RoutemapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Routemap)(nil)).Elem()
}

func (o RoutemapMapOutput) ToRoutemapMapOutput() RoutemapMapOutput {
	return o
}

func (o RoutemapMapOutput) ToRoutemapMapOutputWithContext(ctx context.Context) RoutemapMapOutput {
	return o
}

func (o RoutemapMapOutput) MapIndex(k pulumi.StringInput) RoutemapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Routemap {
		return vs[0].(map[string]*Routemap)[vs[1].(string)]
	}).(RoutemapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoutemapInput)(nil)).Elem(), &Routemap{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutemapArrayInput)(nil)).Elem(), RoutemapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutemapMapInput)(nil)).Elem(), RoutemapMap{})
	pulumi.RegisterOutputType(RoutemapOutput{})
	pulumi.RegisterOutputType(RoutemapArrayOutput{})
	pulumi.RegisterOutputType(RoutemapMapOutput{})
}
