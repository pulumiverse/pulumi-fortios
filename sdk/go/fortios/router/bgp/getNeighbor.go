// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bgp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Use this data source to get information on an fortios routerbgp neighbor
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/router"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sample1, err := router.GetNeighbor(ctx, &bgp.GetNeighborArgs{
//				Ip: "21.1.1.12",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("output1", sample1)
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupNeighbor(ctx *pulumi.Context, args *LookupNeighborArgs, opts ...pulumi.InvokeOption) (*LookupNeighborResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNeighborResult
	err := ctx.Invoke("fortios:router/bgp/getNeighbor:getNeighbor", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNeighbor.
type LookupNeighborArgs struct {
	// Specify the ip of the desired routerbgp neighbor.
	Ip string `pulumi:"ip"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by getNeighbor.
type LookupNeighborResult struct {
	// Enable/disable address family IPv4 for this neighbor.
	Activate string `pulumi:"activate"`
	// Enable/disable address family IPv6 for this neighbor.
	Activate6 string `pulumi:"activate6"`
	// Enable/disable address family L2VPN EVPN for this neighbor.
	ActivateEvpn string `pulumi:"activateEvpn"`
	// Enable/disable address family VPNv4 for this neighbor.
	ActivateVpnv4 string `pulumi:"activateVpnv4"`
	// Enable/disable address family VPNv6 for this neighbor.
	ActivateVpnv6 string `pulumi:"activateVpnv6"`
	// Enable/disable IPv4 additional-path capability.
	AdditionalPath string `pulumi:"additionalPath"`
	// Enable/disable IPv6 additional-path capability.
	AdditionalPath6 string `pulumi:"additionalPath6"`
	// Enable/disable VPNv4 additional-path capability.
	AdditionalPathVpnv4 string `pulumi:"additionalPathVpnv4"`
	// Enable/disable VPNv6 additional-path capability.
	AdditionalPathVpnv6 string `pulumi:"additionalPathVpnv6"`
	// Number of IPv4 additional paths that can be advertised to this neighbor.
	AdvAdditionalPath int `pulumi:"advAdditionalPath"`
	// Number of IPv6 additional paths that can be advertised to this neighbor.
	AdvAdditionalPath6 int `pulumi:"advAdditionalPath6"`
	// Number of VPNv4 additional paths that can be advertised to this neighbor.
	AdvAdditionalPathVpnv4 int `pulumi:"advAdditionalPathVpnv4"`
	// Number of VPNv6 additional paths that can be advertised to this neighbor.
	AdvAdditionalPathVpnv6 int `pulumi:"advAdditionalPathVpnv6"`
	// Minimum interval (sec) between sending updates.
	AdvertisementInterval int `pulumi:"advertisementInterval"`
	// IPv4 The maximum number of occurrence of my AS number allowed.
	AllowasIn int `pulumi:"allowasIn"`
	// IPv6 The maximum number of occurrence of my AS number allowed.
	AllowasIn6 int `pulumi:"allowasIn6"`
	// Enable/disable IPv4 Enable to allow my AS in AS path.
	AllowasInEnable string `pulumi:"allowasInEnable"`
	// Enable/disable IPv6 Enable to allow my AS in AS path.
	AllowasInEnable6 string `pulumi:"allowasInEnable6"`
	// Enable/disable to allow my AS in AS path for L2VPN EVPN route.
	AllowasInEnableEvpn string `pulumi:"allowasInEnableEvpn"`
	// Enable/disable to allow my AS in AS path for VPNv4 route.
	AllowasInEnableVpnv4 string `pulumi:"allowasInEnableVpnv4"`
	// Enable/disable use of my AS in AS path for VPNv6 route.
	AllowasInEnableVpnv6 string `pulumi:"allowasInEnableVpnv6"`
	// The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
	AllowasInEvpn int `pulumi:"allowasInEvpn"`
	// The maximum number of occurrence of my AS number allowed for VPNv4 route.
	AllowasInVpnv4 int `pulumi:"allowasInVpnv4"`
	// The maximum number of occurrence of my AS number allowed for VPNv6 route.
	AllowasInVpnv6 int `pulumi:"allowasInVpnv6"`
	// Enable/disable replace peer AS with own AS for IPv4.
	AsOverride string `pulumi:"asOverride"`
	// Enable/disable replace peer AS with own AS for IPv6.
	AsOverride6 string `pulumi:"asOverride6"`
	// IPv4 List of attributes that should be unchanged.
	AttributeUnchanged string `pulumi:"attributeUnchanged"`
	// IPv6 List of attributes that should be unchanged.
	AttributeUnchanged6 string `pulumi:"attributeUnchanged6"`
	// List of attributes that should be unchanged for VPNv4 route.
	AttributeUnchangedVpnv4 string `pulumi:"attributeUnchangedVpnv4"`
	// List of attributes that should not be changed for VPNv6 route.
	AttributeUnchangedVpnv6 string `pulumi:"attributeUnchangedVpnv6"`
	// Key-chain name for TCP authentication options.
	AuthOptions string `pulumi:"authOptions"`
	// Enable/disable BFD for this neighbor.
	Bfd string `pulumi:"bfd"`
	// Enable/disable advertise default IPv4 route to this neighbor.
	CapabilityDefaultOriginate string `pulumi:"capabilityDefaultOriginate"`
	// Enable/disable advertise default IPv6 route to this neighbor.
	CapabilityDefaultOriginate6 string `pulumi:"capabilityDefaultOriginate6"`
	// Enable/disable advertise dynamic capability to this neighbor.
	CapabilityDynamic string `pulumi:"capabilityDynamic"`
	// Enable/disable advertise IPv4 graceful restart capability to this neighbor.
	CapabilityGracefulRestart string `pulumi:"capabilityGracefulRestart"`
	// Enable/disable advertise IPv6 graceful restart capability to this neighbor.
	CapabilityGracefulRestart6 string `pulumi:"capabilityGracefulRestart6"`
	// Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor.
	CapabilityGracefulRestartEvpn string `pulumi:"capabilityGracefulRestartEvpn"`
	// Enable/disable advertise VPNv4 graceful restart capability to this neighbor.
	CapabilityGracefulRestartVpnv4 string `pulumi:"capabilityGracefulRestartVpnv4"`
	// Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor.
	CapabilityGracefulRestartVpnv6 string `pulumi:"capabilityGracefulRestartVpnv6"`
	// Accept/Send IPv4 ORF lists to/from this neighbor.
	CapabilityOrf string `pulumi:"capabilityOrf"`
	// Accept/Send IPv6 ORF lists to/from this neighbor.
	CapabilityOrf6 string `pulumi:"capabilityOrf6"`
	// Enable/disable advertise route refresh capability to this neighbor.
	CapabilityRouteRefresh string `pulumi:"capabilityRouteRefresh"`
	// IPv6 conditional advertisement. The structure of `conditionalAdvertise6` block is documented below.
	ConditionalAdvertise6s []GetNeighborConditionalAdvertise6 `pulumi:"conditionalAdvertise6s"`
	// Conditional advertisement. The structure of `conditionalAdvertise` block is documented below.
	ConditionalAdvertises []GetNeighborConditionalAdvertise `pulumi:"conditionalAdvertises"`
	// Interval (sec) for connect timer.
	ConnectTimer int `pulumi:"connectTimer"`
	// Route map to specify criteria to originate IPv4 default.
	DefaultOriginateRoutemap string `pulumi:"defaultOriginateRoutemap"`
	// Route map to specify criteria to originate IPv6 default.
	DefaultOriginateRoutemap6 string `pulumi:"defaultOriginateRoutemap6"`
	// Description.
	Description string `pulumi:"description"`
	// Filter for IPv4 updates from this neighbor.
	DistributeListIn string `pulumi:"distributeListIn"`
	// Filter for IPv6 updates from this neighbor.
	DistributeListIn6 string `pulumi:"distributeListIn6"`
	// Filter for VPNv4 updates from this neighbor.
	DistributeListInVpnv4 string `pulumi:"distributeListInVpnv4"`
	// Filter for VPNv6 updates from this neighbor.
	DistributeListInVpnv6 string `pulumi:"distributeListInVpnv6"`
	// Filter for IPv4 updates to this neighbor.
	DistributeListOut string `pulumi:"distributeListOut"`
	// Filter for IPv6 updates to this neighbor.
	DistributeListOut6 string `pulumi:"distributeListOut6"`
	// Filter for VPNv4 updates to this neighbor.
	DistributeListOutVpnv4 string `pulumi:"distributeListOutVpnv4"`
	// Filter for VPNv6 updates to this neighbor.
	DistributeListOutVpnv6 string `pulumi:"distributeListOutVpnv6"`
	// Don't negotiate capabilities with this neighbor
	DontCapabilityNegotiate string `pulumi:"dontCapabilityNegotiate"`
	// Enable/disable allow multi-hop EBGP neighbors.
	EbgpEnforceMultihop string `pulumi:"ebgpEnforceMultihop"`
	// EBGP multihop TTL for this peer.
	EbgpMultihopTtl int `pulumi:"ebgpMultihopTtl"`
	// BGP filter for IPv4 inbound routes.
	FilterListIn string `pulumi:"filterListIn"`
	// BGP filter for IPv6 inbound routes.
	FilterListIn6 string `pulumi:"filterListIn6"`
	// BGP filter for VPNv4 inbound routes.
	FilterListInVpnv4 string `pulumi:"filterListInVpnv4"`
	// BGP filter for VPNv6 inbound routes.
	FilterListInVpnv6 string `pulumi:"filterListInVpnv6"`
	// BGP filter for IPv4 outbound routes.
	FilterListOut string `pulumi:"filterListOut"`
	// BGP filter for IPv6 outbound routes.
	FilterListOut6 string `pulumi:"filterListOut6"`
	// BGP filter for VPNv4 outbound routes.
	FilterListOutVpnv4 string `pulumi:"filterListOutVpnv4"`
	// BGP filter for VPNv6 outbound routes.
	FilterListOutVpnv6 string `pulumi:"filterListOutVpnv6"`
	// Interval (sec) before peer considered dead.
	HoldtimeTimer int `pulumi:"holdtimeTimer"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Interface
	Interface string `pulumi:"interface"`
	// IP/IPv6 address of neighbor.
	Ip string `pulumi:"ip"`
	// Keep alive timer interval (sec).
	KeepAliveTimer int `pulumi:"keepAliveTimer"`
	// Enable/disable failover upon link down.
	LinkDownFailover string `pulumi:"linkDownFailover"`
	// Local AS number of neighbor.
	LocalAs int `pulumi:"localAs"`
	// Do not prepend local-as to incoming updates.
	LocalAsNoPrepend string `pulumi:"localAsNoPrepend"`
	// Replace real AS with local-as in outgoing updates.
	LocalAsReplaceAs string `pulumi:"localAsReplaceAs"`
	// Maximum number of IPv4 prefixes to accept from this peer.
	MaximumPrefix int `pulumi:"maximumPrefix"`
	// Maximum number of IPv6 prefixes to accept from this peer.
	MaximumPrefix6 int `pulumi:"maximumPrefix6"`
	// Maximum number of L2VPN EVPN prefixes to accept from this peer.
	MaximumPrefixEvpn int `pulumi:"maximumPrefixEvpn"`
	// Maximum IPv4 prefix threshold value (1 - 100 percent).
	MaximumPrefixThreshold int `pulumi:"maximumPrefixThreshold"`
	// Maximum IPv6 prefix threshold value (1 - 100 percent).
	MaximumPrefixThreshold6 int `pulumi:"maximumPrefixThreshold6"`
	// Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdEvpn int `pulumi:"maximumPrefixThresholdEvpn"`
	// Maximum VPNv4 prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdVpnv4 int `pulumi:"maximumPrefixThresholdVpnv4"`
	// Maximum VPNv6 prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdVpnv6 int `pulumi:"maximumPrefixThresholdVpnv6"`
	// Maximum number of VPNv4 prefixes to accept from this peer.
	MaximumPrefixVpnv4 int `pulumi:"maximumPrefixVpnv4"`
	// Maximum number of VPNv6 prefixes to accept from this peer.
	MaximumPrefixVpnv6 int `pulumi:"maximumPrefixVpnv6"`
	// Enable/disable IPv4 Only give warning message when limit is exceeded.
	MaximumPrefixWarningOnly string `pulumi:"maximumPrefixWarningOnly"`
	// Enable/disable IPv6 Only give warning message when limit is exceeded.
	MaximumPrefixWarningOnly6 string `pulumi:"maximumPrefixWarningOnly6"`
	// Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes.
	MaximumPrefixWarningOnlyEvpn string `pulumi:"maximumPrefixWarningOnlyEvpn"`
	// Enable/disable only giving warning message when limit is exceeded for VPNv4 routes.
	MaximumPrefixWarningOnlyVpnv4 string `pulumi:"maximumPrefixWarningOnlyVpnv4"`
	// Enable/disable warning message when limit is exceeded for VPNv6 routes.
	MaximumPrefixWarningOnlyVpnv6 string `pulumi:"maximumPrefixWarningOnlyVpnv6"`
	// Enable/disable IPv4 next-hop calculation for this neighbor.
	NextHopSelf string `pulumi:"nextHopSelf"`
	// Enable/disable IPv6 next-hop calculation for this neighbor.
	NextHopSelf6 string `pulumi:"nextHopSelf6"`
	// Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes.
	NextHopSelfRr string `pulumi:"nextHopSelfRr"`
	// Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes.
	NextHopSelfRr6 string `pulumi:"nextHopSelfRr6"`
	// Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor.
	NextHopSelfVpnv4 string `pulumi:"nextHopSelfVpnv4"`
	// Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor.
	NextHopSelfVpnv6 string `pulumi:"nextHopSelfVpnv6"`
	// Enable/disable override result of capability negotiation.
	OverrideCapability string `pulumi:"overrideCapability"`
	// Enable/disable sending of open messages to this neighbor.
	Passive string `pulumi:"passive"`
	// Password used in MD5 authentication.
	Password string `pulumi:"password"`
	// IPv4 Inbound filter for updates from this neighbor.
	PrefixListIn string `pulumi:"prefixListIn"`
	// IPv6 Inbound filter for updates from this neighbor.
	PrefixListIn6 string `pulumi:"prefixListIn6"`
	// Inbound filter for VPNv4 updates from this neighbor.
	PrefixListInVpnv4 string `pulumi:"prefixListInVpnv4"`
	// Inbound filter for VPNv6 updates from this neighbor.
	PrefixListInVpnv6 string `pulumi:"prefixListInVpnv6"`
	// IPv4 Outbound filter for updates to this neighbor.
	PrefixListOut string `pulumi:"prefixListOut"`
	// IPv6 Outbound filter for updates to this neighbor.
	PrefixListOut6 string `pulumi:"prefixListOut6"`
	// Outbound filter for VPNv4 updates to this neighbor.
	PrefixListOutVpnv4 string `pulumi:"prefixListOutVpnv4"`
	// Outbound filter for VPNv6 updates to this neighbor.
	PrefixListOutVpnv6 string `pulumi:"prefixListOutVpnv6"`
	// AS number of neighbor.
	RemoteAs int `pulumi:"remoteAs"`
	// Enable/disable remove private AS number from IPv4 outbound updates.
	RemovePrivateAs string `pulumi:"removePrivateAs"`
	// Enable/disable remove private AS number from IPv6 outbound updates.
	RemovePrivateAs6 string `pulumi:"removePrivateAs6"`
	// Enable/disable removing private AS number from L2VPN EVPN outbound updates.
	RemovePrivateAsEvpn string `pulumi:"removePrivateAsEvpn"`
	// Enable/disable remove private AS number from VPNv4 outbound updates.
	RemovePrivateAsVpnv4 string `pulumi:"removePrivateAsVpnv4"`
	// Enable/disable to remove private AS number from VPNv6 outbound updates.
	RemovePrivateAsVpnv6 string `pulumi:"removePrivateAsVpnv6"`
	// Graceful restart delay time (sec, 0 = global default).
	RestartTime int `pulumi:"restartTime"`
	// Time to retain stale routes.
	RetainStaleTime int `pulumi:"retainStaleTime"`
	// IPv4 Inbound route map filter.
	RouteMapIn string `pulumi:"routeMapIn"`
	// IPv6 Inbound route map filter.
	RouteMapIn6 string `pulumi:"routeMapIn6"`
	// L2VPN EVPN inbound route map filter.
	RouteMapInEvpn string `pulumi:"routeMapInEvpn"`
	// VPNv4 inbound route map filter.
	RouteMapInVpnv4 string `pulumi:"routeMapInVpnv4"`
	// VPNv6 inbound route map filter.
	RouteMapInVpnv6 string `pulumi:"routeMapInVpnv6"`
	// IPv4 Outbound route map filter.
	RouteMapOut string `pulumi:"routeMapOut"`
	// IPv6 Outbound route map filter.
	RouteMapOut6 string `pulumi:"routeMapOut6"`
	// IPv6 outbound route map filter if the peer is preferred.
	RouteMapOut6Preferable string `pulumi:"routeMapOut6Preferable"`
	// L2VPN EVPN outbound route map filter.
	RouteMapOutEvpn string `pulumi:"routeMapOutEvpn"`
	// IPv4 outbound route map filter if the peer is preferred.
	RouteMapOutPreferable string `pulumi:"routeMapOutPreferable"`
	// VPNv4 outbound route map filter.
	RouteMapOutVpnv4 string `pulumi:"routeMapOutVpnv4"`
	// VPNv4 outbound route map filter if the peer is preferred.
	RouteMapOutVpnv4Preferable string `pulumi:"routeMapOutVpnv4Preferable"`
	// VPNv6 outbound route map filter.
	RouteMapOutVpnv6 string `pulumi:"routeMapOutVpnv6"`
	// VPNv6 outbound route map filter if this neighbor is preferred.
	RouteMapOutVpnv6Preferable string `pulumi:"routeMapOutVpnv6Preferable"`
	// Enable/disable IPv4 AS route reflector client.
	RouteReflectorClient string `pulumi:"routeReflectorClient"`
	// Enable/disable IPv6 AS route reflector client.
	RouteReflectorClient6 string `pulumi:"routeReflectorClient6"`
	// Enable/disable L2VPN EVPN AS route reflector client for this neighbor.
	RouteReflectorClientEvpn string `pulumi:"routeReflectorClientEvpn"`
	// Enable/disable VPNv4 AS route reflector client for this neighbor.
	RouteReflectorClientVpnv4 string `pulumi:"routeReflectorClientVpnv4"`
	// Enable/disable VPNv6 AS route reflector client for this neighbor.
	RouteReflectorClientVpnv6 string `pulumi:"routeReflectorClientVpnv6"`
	// Enable/disable IPv4 AS route server client.
	RouteServerClient string `pulumi:"routeServerClient"`
	// Enable/disable IPv6 AS route server client.
	RouteServerClient6 string `pulumi:"routeServerClient6"`
	// Enable/disable L2VPN EVPN AS route server client for this neighbor.
	RouteServerClientEvpn string `pulumi:"routeServerClientEvpn"`
	// Enable/disable VPNv4 AS route server client for this neighbor.
	RouteServerClientVpnv4 string `pulumi:"routeServerClientVpnv4"`
	// Enable/disable VPNv6 AS route server client for this neighbor.
	RouteServerClientVpnv6 string `pulumi:"routeServerClientVpnv6"`
	// IPv4 Send community attribute to neighbor.
	SendCommunity string `pulumi:"sendCommunity"`
	// IPv6 Send community attribute to neighbor.
	SendCommunity6 string `pulumi:"sendCommunity6"`
	// Enable/disable sending community attribute to neighbor for L2VPN EVPN address family.
	SendCommunityEvpn string `pulumi:"sendCommunityEvpn"`
	// Send community attribute to neighbor for VPNv4 address family.
	SendCommunityVpnv4 string `pulumi:"sendCommunityVpnv4"`
	// Enable/disable sending community attribute to this neighbor for VPNv6 address family.
	SendCommunityVpnv6 string `pulumi:"sendCommunityVpnv6"`
	// Enable/disable shutdown this neighbor.
	Shutdown string `pulumi:"shutdown"`
	// Enable/disable allow IPv4 inbound soft reconfiguration.
	SoftReconfiguration string `pulumi:"softReconfiguration"`
	// Enable/disable allow IPv6 inbound soft reconfiguration.
	SoftReconfiguration6 string `pulumi:"softReconfiguration6"`
	// Enable/disable L2VPN EVPN inbound soft reconfiguration.
	SoftReconfigurationEvpn string `pulumi:"softReconfigurationEvpn"`
	// Enable/disable allow VPNv4 inbound soft reconfiguration.
	SoftReconfigurationVpnv4 string `pulumi:"softReconfigurationVpnv4"`
	// Enable/disable VPNv6 inbound soft reconfiguration.
	SoftReconfigurationVpnv6 string `pulumi:"softReconfigurationVpnv6"`
	// Enable/disable stale route after neighbor down.
	StaleRoute string `pulumi:"staleRoute"`
	// Enable/disable strict capability matching.
	StrictCapabilityMatch string `pulumi:"strictCapabilityMatch"`
	// IPv4 Route map to selectively unsuppress suppressed routes.
	UnsuppressMap string `pulumi:"unsuppressMap"`
	// IPv6 Route map to selectively unsuppress suppressed routes.
	UnsuppressMap6 string `pulumi:"unsuppressMap6"`
	// Interface to use as source IP/IPv6 address of TCP connections.
	UpdateSource string  `pulumi:"updateSource"`
	Vdomparam    *string `pulumi:"vdomparam"`
	// Neighbor weight.
	Weight int `pulumi:"weight"`
}

func LookupNeighborOutput(ctx *pulumi.Context, args LookupNeighborOutputArgs, opts ...pulumi.InvokeOption) LookupNeighborResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNeighborResult, error) {
			args := v.(LookupNeighborArgs)
			r, err := LookupNeighbor(ctx, &args, opts...)
			var s LookupNeighborResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNeighborResultOutput)
}

// A collection of arguments for invoking getNeighbor.
type LookupNeighborOutputArgs struct {
	// Specify the ip of the desired routerbgp neighbor.
	Ip pulumi.StringInput `pulumi:"ip"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupNeighborOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNeighborArgs)(nil)).Elem()
}

// A collection of values returned by getNeighbor.
type LookupNeighborResultOutput struct{ *pulumi.OutputState }

func (LookupNeighborResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNeighborResult)(nil)).Elem()
}

func (o LookupNeighborResultOutput) ToLookupNeighborResultOutput() LookupNeighborResultOutput {
	return o
}

func (o LookupNeighborResultOutput) ToLookupNeighborResultOutputWithContext(ctx context.Context) LookupNeighborResultOutput {
	return o
}

// Enable/disable address family IPv4 for this neighbor.
func (o LookupNeighborResultOutput) Activate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.Activate }).(pulumi.StringOutput)
}

// Enable/disable address family IPv6 for this neighbor.
func (o LookupNeighborResultOutput) Activate6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.Activate6 }).(pulumi.StringOutput)
}

// Enable/disable address family L2VPN EVPN for this neighbor.
func (o LookupNeighborResultOutput) ActivateEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.ActivateEvpn }).(pulumi.StringOutput)
}

// Enable/disable address family VPNv4 for this neighbor.
func (o LookupNeighborResultOutput) ActivateVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.ActivateVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable address family VPNv6 for this neighbor.
func (o LookupNeighborResultOutput) ActivateVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.ActivateVpnv6 }).(pulumi.StringOutput)
}

// Enable/disable IPv4 additional-path capability.
func (o LookupNeighborResultOutput) AdditionalPath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.AdditionalPath }).(pulumi.StringOutput)
}

// Enable/disable IPv6 additional-path capability.
func (o LookupNeighborResultOutput) AdditionalPath6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.AdditionalPath6 }).(pulumi.StringOutput)
}

// Enable/disable VPNv4 additional-path capability.
func (o LookupNeighborResultOutput) AdditionalPathVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.AdditionalPathVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable VPNv6 additional-path capability.
func (o LookupNeighborResultOutput) AdditionalPathVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.AdditionalPathVpnv6 }).(pulumi.StringOutput)
}

// Number of IPv4 additional paths that can be advertised to this neighbor.
func (o LookupNeighborResultOutput) AdvAdditionalPath() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.AdvAdditionalPath }).(pulumi.IntOutput)
}

// Number of IPv6 additional paths that can be advertised to this neighbor.
func (o LookupNeighborResultOutput) AdvAdditionalPath6() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.AdvAdditionalPath6 }).(pulumi.IntOutput)
}

// Number of VPNv4 additional paths that can be advertised to this neighbor.
func (o LookupNeighborResultOutput) AdvAdditionalPathVpnv4() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.AdvAdditionalPathVpnv4 }).(pulumi.IntOutput)
}

// Number of VPNv6 additional paths that can be advertised to this neighbor.
func (o LookupNeighborResultOutput) AdvAdditionalPathVpnv6() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.AdvAdditionalPathVpnv6 }).(pulumi.IntOutput)
}

// Minimum interval (sec) between sending updates.
func (o LookupNeighborResultOutput) AdvertisementInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.AdvertisementInterval }).(pulumi.IntOutput)
}

// IPv4 The maximum number of occurrence of my AS number allowed.
func (o LookupNeighborResultOutput) AllowasIn() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.AllowasIn }).(pulumi.IntOutput)
}

// IPv6 The maximum number of occurrence of my AS number allowed.
func (o LookupNeighborResultOutput) AllowasIn6() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.AllowasIn6 }).(pulumi.IntOutput)
}

// Enable/disable IPv4 Enable to allow my AS in AS path.
func (o LookupNeighborResultOutput) AllowasInEnable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.AllowasInEnable }).(pulumi.StringOutput)
}

// Enable/disable IPv6 Enable to allow my AS in AS path.
func (o LookupNeighborResultOutput) AllowasInEnable6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.AllowasInEnable6 }).(pulumi.StringOutput)
}

// Enable/disable to allow my AS in AS path for L2VPN EVPN route.
func (o LookupNeighborResultOutput) AllowasInEnableEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.AllowasInEnableEvpn }).(pulumi.StringOutput)
}

// Enable/disable to allow my AS in AS path for VPNv4 route.
func (o LookupNeighborResultOutput) AllowasInEnableVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.AllowasInEnableVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable use of my AS in AS path for VPNv6 route.
func (o LookupNeighborResultOutput) AllowasInEnableVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.AllowasInEnableVpnv6 }).(pulumi.StringOutput)
}

// The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
func (o LookupNeighborResultOutput) AllowasInEvpn() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.AllowasInEvpn }).(pulumi.IntOutput)
}

// The maximum number of occurrence of my AS number allowed for VPNv4 route.
func (o LookupNeighborResultOutput) AllowasInVpnv4() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.AllowasInVpnv4 }).(pulumi.IntOutput)
}

// The maximum number of occurrence of my AS number allowed for VPNv6 route.
func (o LookupNeighborResultOutput) AllowasInVpnv6() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.AllowasInVpnv6 }).(pulumi.IntOutput)
}

// Enable/disable replace peer AS with own AS for IPv4.
func (o LookupNeighborResultOutput) AsOverride() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.AsOverride }).(pulumi.StringOutput)
}

// Enable/disable replace peer AS with own AS for IPv6.
func (o LookupNeighborResultOutput) AsOverride6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.AsOverride6 }).(pulumi.StringOutput)
}

// IPv4 List of attributes that should be unchanged.
func (o LookupNeighborResultOutput) AttributeUnchanged() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.AttributeUnchanged }).(pulumi.StringOutput)
}

// IPv6 List of attributes that should be unchanged.
func (o LookupNeighborResultOutput) AttributeUnchanged6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.AttributeUnchanged6 }).(pulumi.StringOutput)
}

// List of attributes that should be unchanged for VPNv4 route.
func (o LookupNeighborResultOutput) AttributeUnchangedVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.AttributeUnchangedVpnv4 }).(pulumi.StringOutput)
}

// List of attributes that should not be changed for VPNv6 route.
func (o LookupNeighborResultOutput) AttributeUnchangedVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.AttributeUnchangedVpnv6 }).(pulumi.StringOutput)
}

// Key-chain name for TCP authentication options.
func (o LookupNeighborResultOutput) AuthOptions() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.AuthOptions }).(pulumi.StringOutput)
}

// Enable/disable BFD for this neighbor.
func (o LookupNeighborResultOutput) Bfd() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.Bfd }).(pulumi.StringOutput)
}

// Enable/disable advertise default IPv4 route to this neighbor.
func (o LookupNeighborResultOutput) CapabilityDefaultOriginate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.CapabilityDefaultOriginate }).(pulumi.StringOutput)
}

// Enable/disable advertise default IPv6 route to this neighbor.
func (o LookupNeighborResultOutput) CapabilityDefaultOriginate6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.CapabilityDefaultOriginate6 }).(pulumi.StringOutput)
}

// Enable/disable advertise dynamic capability to this neighbor.
func (o LookupNeighborResultOutput) CapabilityDynamic() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.CapabilityDynamic }).(pulumi.StringOutput)
}

// Enable/disable advertise IPv4 graceful restart capability to this neighbor.
func (o LookupNeighborResultOutput) CapabilityGracefulRestart() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.CapabilityGracefulRestart }).(pulumi.StringOutput)
}

// Enable/disable advertise IPv6 graceful restart capability to this neighbor.
func (o LookupNeighborResultOutput) CapabilityGracefulRestart6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.CapabilityGracefulRestart6 }).(pulumi.StringOutput)
}

// Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor.
func (o LookupNeighborResultOutput) CapabilityGracefulRestartEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.CapabilityGracefulRestartEvpn }).(pulumi.StringOutput)
}

// Enable/disable advertise VPNv4 graceful restart capability to this neighbor.
func (o LookupNeighborResultOutput) CapabilityGracefulRestartVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.CapabilityGracefulRestartVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor.
func (o LookupNeighborResultOutput) CapabilityGracefulRestartVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.CapabilityGracefulRestartVpnv6 }).(pulumi.StringOutput)
}

// Accept/Send IPv4 ORF lists to/from this neighbor.
func (o LookupNeighborResultOutput) CapabilityOrf() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.CapabilityOrf }).(pulumi.StringOutput)
}

// Accept/Send IPv6 ORF lists to/from this neighbor.
func (o LookupNeighborResultOutput) CapabilityOrf6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.CapabilityOrf6 }).(pulumi.StringOutput)
}

// Enable/disable advertise route refresh capability to this neighbor.
func (o LookupNeighborResultOutput) CapabilityRouteRefresh() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.CapabilityRouteRefresh }).(pulumi.StringOutput)
}

// IPv6 conditional advertisement. The structure of `conditionalAdvertise6` block is documented below.
func (o LookupNeighborResultOutput) ConditionalAdvertise6s() GetNeighborConditionalAdvertise6ArrayOutput {
	return o.ApplyT(func(v LookupNeighborResult) []GetNeighborConditionalAdvertise6 { return v.ConditionalAdvertise6s }).(GetNeighborConditionalAdvertise6ArrayOutput)
}

// Conditional advertisement. The structure of `conditionalAdvertise` block is documented below.
func (o LookupNeighborResultOutput) ConditionalAdvertises() GetNeighborConditionalAdvertiseArrayOutput {
	return o.ApplyT(func(v LookupNeighborResult) []GetNeighborConditionalAdvertise { return v.ConditionalAdvertises }).(GetNeighborConditionalAdvertiseArrayOutput)
}

// Interval (sec) for connect timer.
func (o LookupNeighborResultOutput) ConnectTimer() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.ConnectTimer }).(pulumi.IntOutput)
}

// Route map to specify criteria to originate IPv4 default.
func (o LookupNeighborResultOutput) DefaultOriginateRoutemap() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.DefaultOriginateRoutemap }).(pulumi.StringOutput)
}

// Route map to specify criteria to originate IPv6 default.
func (o LookupNeighborResultOutput) DefaultOriginateRoutemap6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.DefaultOriginateRoutemap6 }).(pulumi.StringOutput)
}

// Description.
func (o LookupNeighborResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.Description }).(pulumi.StringOutput)
}

// Filter for IPv4 updates from this neighbor.
func (o LookupNeighborResultOutput) DistributeListIn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.DistributeListIn }).(pulumi.StringOutput)
}

// Filter for IPv6 updates from this neighbor.
func (o LookupNeighborResultOutput) DistributeListIn6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.DistributeListIn6 }).(pulumi.StringOutput)
}

// Filter for VPNv4 updates from this neighbor.
func (o LookupNeighborResultOutput) DistributeListInVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.DistributeListInVpnv4 }).(pulumi.StringOutput)
}

// Filter for VPNv6 updates from this neighbor.
func (o LookupNeighborResultOutput) DistributeListInVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.DistributeListInVpnv6 }).(pulumi.StringOutput)
}

// Filter for IPv4 updates to this neighbor.
func (o LookupNeighborResultOutput) DistributeListOut() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.DistributeListOut }).(pulumi.StringOutput)
}

// Filter for IPv6 updates to this neighbor.
func (o LookupNeighborResultOutput) DistributeListOut6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.DistributeListOut6 }).(pulumi.StringOutput)
}

// Filter for VPNv4 updates to this neighbor.
func (o LookupNeighborResultOutput) DistributeListOutVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.DistributeListOutVpnv4 }).(pulumi.StringOutput)
}

// Filter for VPNv6 updates to this neighbor.
func (o LookupNeighborResultOutput) DistributeListOutVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.DistributeListOutVpnv6 }).(pulumi.StringOutput)
}

// Don't negotiate capabilities with this neighbor
func (o LookupNeighborResultOutput) DontCapabilityNegotiate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.DontCapabilityNegotiate }).(pulumi.StringOutput)
}

// Enable/disable allow multi-hop EBGP neighbors.
func (o LookupNeighborResultOutput) EbgpEnforceMultihop() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.EbgpEnforceMultihop }).(pulumi.StringOutput)
}

// EBGP multihop TTL for this peer.
func (o LookupNeighborResultOutput) EbgpMultihopTtl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.EbgpMultihopTtl }).(pulumi.IntOutput)
}

// BGP filter for IPv4 inbound routes.
func (o LookupNeighborResultOutput) FilterListIn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.FilterListIn }).(pulumi.StringOutput)
}

// BGP filter for IPv6 inbound routes.
func (o LookupNeighborResultOutput) FilterListIn6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.FilterListIn6 }).(pulumi.StringOutput)
}

// BGP filter for VPNv4 inbound routes.
func (o LookupNeighborResultOutput) FilterListInVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.FilterListInVpnv4 }).(pulumi.StringOutput)
}

// BGP filter for VPNv6 inbound routes.
func (o LookupNeighborResultOutput) FilterListInVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.FilterListInVpnv6 }).(pulumi.StringOutput)
}

// BGP filter for IPv4 outbound routes.
func (o LookupNeighborResultOutput) FilterListOut() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.FilterListOut }).(pulumi.StringOutput)
}

// BGP filter for IPv6 outbound routes.
func (o LookupNeighborResultOutput) FilterListOut6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.FilterListOut6 }).(pulumi.StringOutput)
}

// BGP filter for VPNv4 outbound routes.
func (o LookupNeighborResultOutput) FilterListOutVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.FilterListOutVpnv4 }).(pulumi.StringOutput)
}

// BGP filter for VPNv6 outbound routes.
func (o LookupNeighborResultOutput) FilterListOutVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.FilterListOutVpnv6 }).(pulumi.StringOutput)
}

// Interval (sec) before peer considered dead.
func (o LookupNeighborResultOutput) HoldtimeTimer() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.HoldtimeTimer }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNeighborResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.Id }).(pulumi.StringOutput)
}

// Interface
func (o LookupNeighborResultOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.Interface }).(pulumi.StringOutput)
}

// IP/IPv6 address of neighbor.
func (o LookupNeighborResultOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.Ip }).(pulumi.StringOutput)
}

// Keep alive timer interval (sec).
func (o LookupNeighborResultOutput) KeepAliveTimer() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.KeepAliveTimer }).(pulumi.IntOutput)
}

// Enable/disable failover upon link down.
func (o LookupNeighborResultOutput) LinkDownFailover() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.LinkDownFailover }).(pulumi.StringOutput)
}

// Local AS number of neighbor.
func (o LookupNeighborResultOutput) LocalAs() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.LocalAs }).(pulumi.IntOutput)
}

// Do not prepend local-as to incoming updates.
func (o LookupNeighborResultOutput) LocalAsNoPrepend() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.LocalAsNoPrepend }).(pulumi.StringOutput)
}

// Replace real AS with local-as in outgoing updates.
func (o LookupNeighborResultOutput) LocalAsReplaceAs() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.LocalAsReplaceAs }).(pulumi.StringOutput)
}

// Maximum number of IPv4 prefixes to accept from this peer.
func (o LookupNeighborResultOutput) MaximumPrefix() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.MaximumPrefix }).(pulumi.IntOutput)
}

// Maximum number of IPv6 prefixes to accept from this peer.
func (o LookupNeighborResultOutput) MaximumPrefix6() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.MaximumPrefix6 }).(pulumi.IntOutput)
}

// Maximum number of L2VPN EVPN prefixes to accept from this peer.
func (o LookupNeighborResultOutput) MaximumPrefixEvpn() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.MaximumPrefixEvpn }).(pulumi.IntOutput)
}

// Maximum IPv4 prefix threshold value (1 - 100 percent).
func (o LookupNeighborResultOutput) MaximumPrefixThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.MaximumPrefixThreshold }).(pulumi.IntOutput)
}

// Maximum IPv6 prefix threshold value (1 - 100 percent).
func (o LookupNeighborResultOutput) MaximumPrefixThreshold6() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.MaximumPrefixThreshold6 }).(pulumi.IntOutput)
}

// Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
func (o LookupNeighborResultOutput) MaximumPrefixThresholdEvpn() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.MaximumPrefixThresholdEvpn }).(pulumi.IntOutput)
}

// Maximum VPNv4 prefix threshold value (1 - 100 percent).
func (o LookupNeighborResultOutput) MaximumPrefixThresholdVpnv4() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.MaximumPrefixThresholdVpnv4 }).(pulumi.IntOutput)
}

// Maximum VPNv6 prefix threshold value (1 - 100 percent).
func (o LookupNeighborResultOutput) MaximumPrefixThresholdVpnv6() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.MaximumPrefixThresholdVpnv6 }).(pulumi.IntOutput)
}

// Maximum number of VPNv4 prefixes to accept from this peer.
func (o LookupNeighborResultOutput) MaximumPrefixVpnv4() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.MaximumPrefixVpnv4 }).(pulumi.IntOutput)
}

// Maximum number of VPNv6 prefixes to accept from this peer.
func (o LookupNeighborResultOutput) MaximumPrefixVpnv6() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.MaximumPrefixVpnv6 }).(pulumi.IntOutput)
}

// Enable/disable IPv4 Only give warning message when limit is exceeded.
func (o LookupNeighborResultOutput) MaximumPrefixWarningOnly() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.MaximumPrefixWarningOnly }).(pulumi.StringOutput)
}

// Enable/disable IPv6 Only give warning message when limit is exceeded.
func (o LookupNeighborResultOutput) MaximumPrefixWarningOnly6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.MaximumPrefixWarningOnly6 }).(pulumi.StringOutput)
}

// Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes.
func (o LookupNeighborResultOutput) MaximumPrefixWarningOnlyEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.MaximumPrefixWarningOnlyEvpn }).(pulumi.StringOutput)
}

// Enable/disable only giving warning message when limit is exceeded for VPNv4 routes.
func (o LookupNeighborResultOutput) MaximumPrefixWarningOnlyVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.MaximumPrefixWarningOnlyVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable warning message when limit is exceeded for VPNv6 routes.
func (o LookupNeighborResultOutput) MaximumPrefixWarningOnlyVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.MaximumPrefixWarningOnlyVpnv6 }).(pulumi.StringOutput)
}

// Enable/disable IPv4 next-hop calculation for this neighbor.
func (o LookupNeighborResultOutput) NextHopSelf() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.NextHopSelf }).(pulumi.StringOutput)
}

// Enable/disable IPv6 next-hop calculation for this neighbor.
func (o LookupNeighborResultOutput) NextHopSelf6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.NextHopSelf6 }).(pulumi.StringOutput)
}

// Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes.
func (o LookupNeighborResultOutput) NextHopSelfRr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.NextHopSelfRr }).(pulumi.StringOutput)
}

// Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes.
func (o LookupNeighborResultOutput) NextHopSelfRr6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.NextHopSelfRr6 }).(pulumi.StringOutput)
}

// Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor.
func (o LookupNeighborResultOutput) NextHopSelfVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.NextHopSelfVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor.
func (o LookupNeighborResultOutput) NextHopSelfVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.NextHopSelfVpnv6 }).(pulumi.StringOutput)
}

// Enable/disable override result of capability negotiation.
func (o LookupNeighborResultOutput) OverrideCapability() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.OverrideCapability }).(pulumi.StringOutput)
}

// Enable/disable sending of open messages to this neighbor.
func (o LookupNeighborResultOutput) Passive() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.Passive }).(pulumi.StringOutput)
}

// Password used in MD5 authentication.
func (o LookupNeighborResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.Password }).(pulumi.StringOutput)
}

// IPv4 Inbound filter for updates from this neighbor.
func (o LookupNeighborResultOutput) PrefixListIn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.PrefixListIn }).(pulumi.StringOutput)
}

// IPv6 Inbound filter for updates from this neighbor.
func (o LookupNeighborResultOutput) PrefixListIn6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.PrefixListIn6 }).(pulumi.StringOutput)
}

// Inbound filter for VPNv4 updates from this neighbor.
func (o LookupNeighborResultOutput) PrefixListInVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.PrefixListInVpnv4 }).(pulumi.StringOutput)
}

// Inbound filter for VPNv6 updates from this neighbor.
func (o LookupNeighborResultOutput) PrefixListInVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.PrefixListInVpnv6 }).(pulumi.StringOutput)
}

// IPv4 Outbound filter for updates to this neighbor.
func (o LookupNeighborResultOutput) PrefixListOut() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.PrefixListOut }).(pulumi.StringOutput)
}

// IPv6 Outbound filter for updates to this neighbor.
func (o LookupNeighborResultOutput) PrefixListOut6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.PrefixListOut6 }).(pulumi.StringOutput)
}

// Outbound filter for VPNv4 updates to this neighbor.
func (o LookupNeighborResultOutput) PrefixListOutVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.PrefixListOutVpnv4 }).(pulumi.StringOutput)
}

// Outbound filter for VPNv6 updates to this neighbor.
func (o LookupNeighborResultOutput) PrefixListOutVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.PrefixListOutVpnv6 }).(pulumi.StringOutput)
}

// AS number of neighbor.
func (o LookupNeighborResultOutput) RemoteAs() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.RemoteAs }).(pulumi.IntOutput)
}

// Enable/disable remove private AS number from IPv4 outbound updates.
func (o LookupNeighborResultOutput) RemovePrivateAs() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RemovePrivateAs }).(pulumi.StringOutput)
}

// Enable/disable remove private AS number from IPv6 outbound updates.
func (o LookupNeighborResultOutput) RemovePrivateAs6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RemovePrivateAs6 }).(pulumi.StringOutput)
}

// Enable/disable removing private AS number from L2VPN EVPN outbound updates.
func (o LookupNeighborResultOutput) RemovePrivateAsEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RemovePrivateAsEvpn }).(pulumi.StringOutput)
}

// Enable/disable remove private AS number from VPNv4 outbound updates.
func (o LookupNeighborResultOutput) RemovePrivateAsVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RemovePrivateAsVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable to remove private AS number from VPNv6 outbound updates.
func (o LookupNeighborResultOutput) RemovePrivateAsVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RemovePrivateAsVpnv6 }).(pulumi.StringOutput)
}

// Graceful restart delay time (sec, 0 = global default).
func (o LookupNeighborResultOutput) RestartTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.RestartTime }).(pulumi.IntOutput)
}

// Time to retain stale routes.
func (o LookupNeighborResultOutput) RetainStaleTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.RetainStaleTime }).(pulumi.IntOutput)
}

// IPv4 Inbound route map filter.
func (o LookupNeighborResultOutput) RouteMapIn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteMapIn }).(pulumi.StringOutput)
}

// IPv6 Inbound route map filter.
func (o LookupNeighborResultOutput) RouteMapIn6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteMapIn6 }).(pulumi.StringOutput)
}

// L2VPN EVPN inbound route map filter.
func (o LookupNeighborResultOutput) RouteMapInEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteMapInEvpn }).(pulumi.StringOutput)
}

// VPNv4 inbound route map filter.
func (o LookupNeighborResultOutput) RouteMapInVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteMapInVpnv4 }).(pulumi.StringOutput)
}

// VPNv6 inbound route map filter.
func (o LookupNeighborResultOutput) RouteMapInVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteMapInVpnv6 }).(pulumi.StringOutput)
}

// IPv4 Outbound route map filter.
func (o LookupNeighborResultOutput) RouteMapOut() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteMapOut }).(pulumi.StringOutput)
}

// IPv6 Outbound route map filter.
func (o LookupNeighborResultOutput) RouteMapOut6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteMapOut6 }).(pulumi.StringOutput)
}

// IPv6 outbound route map filter if the peer is preferred.
func (o LookupNeighborResultOutput) RouteMapOut6Preferable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteMapOut6Preferable }).(pulumi.StringOutput)
}

// L2VPN EVPN outbound route map filter.
func (o LookupNeighborResultOutput) RouteMapOutEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteMapOutEvpn }).(pulumi.StringOutput)
}

// IPv4 outbound route map filter if the peer is preferred.
func (o LookupNeighborResultOutput) RouteMapOutPreferable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteMapOutPreferable }).(pulumi.StringOutput)
}

// VPNv4 outbound route map filter.
func (o LookupNeighborResultOutput) RouteMapOutVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteMapOutVpnv4 }).(pulumi.StringOutput)
}

// VPNv4 outbound route map filter if the peer is preferred.
func (o LookupNeighborResultOutput) RouteMapOutVpnv4Preferable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteMapOutVpnv4Preferable }).(pulumi.StringOutput)
}

// VPNv6 outbound route map filter.
func (o LookupNeighborResultOutput) RouteMapOutVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteMapOutVpnv6 }).(pulumi.StringOutput)
}

// VPNv6 outbound route map filter if this neighbor is preferred.
func (o LookupNeighborResultOutput) RouteMapOutVpnv6Preferable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteMapOutVpnv6Preferable }).(pulumi.StringOutput)
}

// Enable/disable IPv4 AS route reflector client.
func (o LookupNeighborResultOutput) RouteReflectorClient() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteReflectorClient }).(pulumi.StringOutput)
}

// Enable/disable IPv6 AS route reflector client.
func (o LookupNeighborResultOutput) RouteReflectorClient6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteReflectorClient6 }).(pulumi.StringOutput)
}

// Enable/disable L2VPN EVPN AS route reflector client for this neighbor.
func (o LookupNeighborResultOutput) RouteReflectorClientEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteReflectorClientEvpn }).(pulumi.StringOutput)
}

// Enable/disable VPNv4 AS route reflector client for this neighbor.
func (o LookupNeighborResultOutput) RouteReflectorClientVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteReflectorClientVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable VPNv6 AS route reflector client for this neighbor.
func (o LookupNeighborResultOutput) RouteReflectorClientVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteReflectorClientVpnv6 }).(pulumi.StringOutput)
}

// Enable/disable IPv4 AS route server client.
func (o LookupNeighborResultOutput) RouteServerClient() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteServerClient }).(pulumi.StringOutput)
}

// Enable/disable IPv6 AS route server client.
func (o LookupNeighborResultOutput) RouteServerClient6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteServerClient6 }).(pulumi.StringOutput)
}

// Enable/disable L2VPN EVPN AS route server client for this neighbor.
func (o LookupNeighborResultOutput) RouteServerClientEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteServerClientEvpn }).(pulumi.StringOutput)
}

// Enable/disable VPNv4 AS route server client for this neighbor.
func (o LookupNeighborResultOutput) RouteServerClientVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteServerClientVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable VPNv6 AS route server client for this neighbor.
func (o LookupNeighborResultOutput) RouteServerClientVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.RouteServerClientVpnv6 }).(pulumi.StringOutput)
}

// IPv4 Send community attribute to neighbor.
func (o LookupNeighborResultOutput) SendCommunity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.SendCommunity }).(pulumi.StringOutput)
}

// IPv6 Send community attribute to neighbor.
func (o LookupNeighborResultOutput) SendCommunity6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.SendCommunity6 }).(pulumi.StringOutput)
}

// Enable/disable sending community attribute to neighbor for L2VPN EVPN address family.
func (o LookupNeighborResultOutput) SendCommunityEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.SendCommunityEvpn }).(pulumi.StringOutput)
}

// Send community attribute to neighbor for VPNv4 address family.
func (o LookupNeighborResultOutput) SendCommunityVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.SendCommunityVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable sending community attribute to this neighbor for VPNv6 address family.
func (o LookupNeighborResultOutput) SendCommunityVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.SendCommunityVpnv6 }).(pulumi.StringOutput)
}

// Enable/disable shutdown this neighbor.
func (o LookupNeighborResultOutput) Shutdown() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.Shutdown }).(pulumi.StringOutput)
}

// Enable/disable allow IPv4 inbound soft reconfiguration.
func (o LookupNeighborResultOutput) SoftReconfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.SoftReconfiguration }).(pulumi.StringOutput)
}

// Enable/disable allow IPv6 inbound soft reconfiguration.
func (o LookupNeighborResultOutput) SoftReconfiguration6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.SoftReconfiguration6 }).(pulumi.StringOutput)
}

// Enable/disable L2VPN EVPN inbound soft reconfiguration.
func (o LookupNeighborResultOutput) SoftReconfigurationEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.SoftReconfigurationEvpn }).(pulumi.StringOutput)
}

// Enable/disable allow VPNv4 inbound soft reconfiguration.
func (o LookupNeighborResultOutput) SoftReconfigurationVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.SoftReconfigurationVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable VPNv6 inbound soft reconfiguration.
func (o LookupNeighborResultOutput) SoftReconfigurationVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.SoftReconfigurationVpnv6 }).(pulumi.StringOutput)
}

// Enable/disable stale route after neighbor down.
func (o LookupNeighborResultOutput) StaleRoute() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.StaleRoute }).(pulumi.StringOutput)
}

// Enable/disable strict capability matching.
func (o LookupNeighborResultOutput) StrictCapabilityMatch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.StrictCapabilityMatch }).(pulumi.StringOutput)
}

// IPv4 Route map to selectively unsuppress suppressed routes.
func (o LookupNeighborResultOutput) UnsuppressMap() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.UnsuppressMap }).(pulumi.StringOutput)
}

// IPv6 Route map to selectively unsuppress suppressed routes.
func (o LookupNeighborResultOutput) UnsuppressMap6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.UnsuppressMap6 }).(pulumi.StringOutput)
}

// Interface to use as source IP/IPv6 address of TCP connections.
func (o LookupNeighborResultOutput) UpdateSource() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNeighborResult) string { return v.UpdateSource }).(pulumi.StringOutput)
}

func (o LookupNeighborResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNeighborResult) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Neighbor weight.
func (o LookupNeighborResultOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNeighborResult) int { return v.Weight }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNeighborResultOutput{})
}
