// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bgp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// BGP neighbor table.
//
// > The provider supports the definition of Neighbor in Router Bgp `router.Bgp`, and also allows the definition of separate Neighbor resources `router/bgp.Neighbor`, but do not use a `router.Bgp` with in-line Neighbor in conjunction with any `router/bgp.Neighbor` resources, otherwise conflicts and overwrite will occur.
//
// ## Import
//
// Routerbgp Neighbor can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:router/bgp/neighbor:Neighbor labelname {{ip}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:router/bgp/neighbor:Neighbor labelname {{ip}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Neighbor struct {
	pulumi.CustomResourceState

	// Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
	Activate pulumi.StringOutput `pulumi:"activate"`
	// Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
	Activate6 pulumi.StringOutput `pulumi:"activate6"`
	// Enable/disable address family L2VPN EVPN for this neighbor. Valid values: `enable`, `disable`.
	ActivateEvpn pulumi.StringOutput `pulumi:"activateEvpn"`
	// Enable/disable address family VPNv4 for this neighbor. Valid values: `enable`, `disable`.
	ActivateVpnv4 pulumi.StringOutput `pulumi:"activateVpnv4"`
	// Enable/disable address family VPNv6 for this neighbor. Valid values: `enable`, `disable`.
	ActivateVpnv6 pulumi.StringOutput `pulumi:"activateVpnv6"`
	// Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPath pulumi.StringOutput `pulumi:"additionalPath"`
	// Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPath6 pulumi.StringOutput `pulumi:"additionalPath6"`
	// Enable/disable VPNv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPathVpnv4 pulumi.StringOutput `pulumi:"additionalPathVpnv4"`
	// Enable/disable VPNv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPathVpnv6 pulumi.StringOutput `pulumi:"additionalPathVpnv6"`
	// Number of IPv4 additional paths that can be advertised to this neighbor.
	AdvAdditionalPath pulumi.IntOutput `pulumi:"advAdditionalPath"`
	// Number of IPv6 additional paths that can be advertised to this neighbor.
	AdvAdditionalPath6 pulumi.IntOutput `pulumi:"advAdditionalPath6"`
	// Number of VPNv4 additional paths that can be advertised to this neighbor.
	AdvAdditionalPathVpnv4 pulumi.IntOutput `pulumi:"advAdditionalPathVpnv4"`
	// Number of VPNv6 additional paths that can be advertised to this neighbor.
	AdvAdditionalPathVpnv6 pulumi.IntOutput `pulumi:"advAdditionalPathVpnv6"`
	// Minimum interval (sec) between sending updates.
	AdvertisementInterval pulumi.IntOutput `pulumi:"advertisementInterval"`
	// IPv4 The maximum number of occurrence of my AS number allowed.
	AllowasIn pulumi.IntOutput `pulumi:"allowasIn"`
	// IPv6 The maximum number of occurrence of my AS number allowed.
	AllowasIn6 pulumi.IntOutput `pulumi:"allowasIn6"`
	// Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
	AllowasInEnable pulumi.StringOutput `pulumi:"allowasInEnable"`
	// Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
	AllowasInEnable6 pulumi.StringOutput `pulumi:"allowasInEnable6"`
	// Enable/disable to allow my AS in AS path for L2VPN EVPN route. Valid values: `enable`, `disable`.
	AllowasInEnableEvpn pulumi.StringOutput `pulumi:"allowasInEnableEvpn"`
	// Enable/disable to allow my AS in AS path for VPNv4 route. Valid values: `enable`, `disable`.
	AllowasInEnableVpnv4 pulumi.StringOutput `pulumi:"allowasInEnableVpnv4"`
	// Enable/disable use of my AS in AS path for VPNv6 route. Valid values: `enable`, `disable`.
	AllowasInEnableVpnv6 pulumi.StringOutput `pulumi:"allowasInEnableVpnv6"`
	// The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
	AllowasInEvpn pulumi.IntOutput `pulumi:"allowasInEvpn"`
	// The maximum number of occurrence of my AS number allowed for VPNv4 route.
	AllowasInVpnv4 pulumi.IntOutput `pulumi:"allowasInVpnv4"`
	// The maximum number of occurrence of my AS number allowed for VPNv6 route.
	AllowasInVpnv6 pulumi.IntOutput `pulumi:"allowasInVpnv6"`
	// Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
	AsOverride pulumi.StringOutput `pulumi:"asOverride"`
	// Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
	AsOverride6 pulumi.StringOutput `pulumi:"asOverride6"`
	// IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchanged pulumi.StringOutput `pulumi:"attributeUnchanged"`
	// IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchanged6 pulumi.StringOutput `pulumi:"attributeUnchanged6"`
	// List of attributes that should be unchanged for VPNv4 route. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchangedVpnv4 pulumi.StringOutput `pulumi:"attributeUnchangedVpnv4"`
	// List of attributes that should not be changed for VPNv6 route. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchangedVpnv6 pulumi.StringOutput `pulumi:"attributeUnchangedVpnv6"`
	// Key-chain name for TCP authentication options.
	AuthOptions pulumi.StringOutput `pulumi:"authOptions"`
	// Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
	Bfd pulumi.StringOutput `pulumi:"bfd"`
	// Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
	CapabilityDefaultOriginate pulumi.StringOutput `pulumi:"capabilityDefaultOriginate"`
	// Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
	CapabilityDefaultOriginate6 pulumi.StringOutput `pulumi:"capabilityDefaultOriginate6"`
	// Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityDynamic pulumi.StringOutput `pulumi:"capabilityDynamic"`
	// Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestart pulumi.StringOutput `pulumi:"capabilityGracefulRestart"`
	// Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestart6 pulumi.StringOutput `pulumi:"capabilityGracefulRestart6"`
	// Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestartEvpn pulumi.StringOutput `pulumi:"capabilityGracefulRestartEvpn"`
	// Enable/disable advertise VPNv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestartVpnv4 pulumi.StringOutput `pulumi:"capabilityGracefulRestartVpnv4"`
	// Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestartVpnv6 pulumi.StringOutput `pulumi:"capabilityGracefulRestartVpnv6"`
	// Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
	CapabilityOrf pulumi.StringOutput `pulumi:"capabilityOrf"`
	// Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
	CapabilityOrf6 pulumi.StringOutput `pulumi:"capabilityOrf6"`
	// Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityRouteRefresh pulumi.StringOutput `pulumi:"capabilityRouteRefresh"`
	// IPv6 conditional advertisement. The structure of `conditionalAdvertise6` block is documented below.
	ConditionalAdvertise6s NeighborConditionalAdvertise6ArrayOutput `pulumi:"conditionalAdvertise6s"`
	// Conditional advertisement. The structure of `conditionalAdvertise` block is documented below.
	ConditionalAdvertises NeighborConditionalAdvertiseArrayOutput `pulumi:"conditionalAdvertises"`
	// Interval (sec) for connect timer.
	ConnectTimer pulumi.IntOutput `pulumi:"connectTimer"`
	// Route map to specify criteria to originate IPv4 default.
	DefaultOriginateRoutemap pulumi.StringOutput `pulumi:"defaultOriginateRoutemap"`
	// Route map to specify criteria to originate IPv6 default.
	DefaultOriginateRoutemap6 pulumi.StringOutput `pulumi:"defaultOriginateRoutemap6"`
	// Description.
	Description pulumi.StringOutput `pulumi:"description"`
	// Filter for IPv4 updates from this neighbor.
	DistributeListIn pulumi.StringOutput `pulumi:"distributeListIn"`
	// Filter for IPv6 updates from this neighbor.
	DistributeListIn6 pulumi.StringOutput `pulumi:"distributeListIn6"`
	// Filter for VPNv4 updates from this neighbor.
	DistributeListInVpnv4 pulumi.StringOutput `pulumi:"distributeListInVpnv4"`
	// Filter for VPNv6 updates from this neighbor.
	DistributeListInVpnv6 pulumi.StringOutput `pulumi:"distributeListInVpnv6"`
	// Filter for IPv4 updates to this neighbor.
	DistributeListOut pulumi.StringOutput `pulumi:"distributeListOut"`
	// Filter for IPv6 updates to this neighbor.
	DistributeListOut6 pulumi.StringOutput `pulumi:"distributeListOut6"`
	// Filter for VPNv4 updates to this neighbor.
	DistributeListOutVpnv4 pulumi.StringOutput `pulumi:"distributeListOutVpnv4"`
	// Filter for VPNv6 updates to this neighbor.
	DistributeListOutVpnv6 pulumi.StringOutput `pulumi:"distributeListOutVpnv6"`
	// Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
	DontCapabilityNegotiate pulumi.StringOutput `pulumi:"dontCapabilityNegotiate"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
	EbgpEnforceMultihop pulumi.StringOutput `pulumi:"ebgpEnforceMultihop"`
	// EBGP multihop TTL for this peer.
	EbgpMultihopTtl pulumi.IntOutput `pulumi:"ebgpMultihopTtl"`
	// BGP filter for IPv4 inbound routes.
	FilterListIn pulumi.StringOutput `pulumi:"filterListIn"`
	// BGP filter for IPv6 inbound routes.
	FilterListIn6 pulumi.StringOutput `pulumi:"filterListIn6"`
	// BGP filter for VPNv4 inbound routes.
	FilterListInVpnv4 pulumi.StringOutput `pulumi:"filterListInVpnv4"`
	// BGP filter for VPNv6 inbound routes.
	FilterListInVpnv6 pulumi.StringOutput `pulumi:"filterListInVpnv6"`
	// BGP filter for IPv4 outbound routes.
	FilterListOut pulumi.StringOutput `pulumi:"filterListOut"`
	// BGP filter for IPv6 outbound routes.
	FilterListOut6 pulumi.StringOutput `pulumi:"filterListOut6"`
	// BGP filter for VPNv4 outbound routes.
	FilterListOutVpnv4 pulumi.StringOutput `pulumi:"filterListOutVpnv4"`
	// BGP filter for VPNv6 outbound routes.
	FilterListOutVpnv6 pulumi.StringOutput `pulumi:"filterListOutVpnv6"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Interval (sec) before peer considered dead.
	HoldtimeTimer pulumi.IntOutput `pulumi:"holdtimeTimer"`
	// Interface
	Interface pulumi.StringOutput `pulumi:"interface"`
	// IP/IPv6 address of neighbor.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Keep alive timer interval (sec).
	KeepAliveTimer pulumi.IntOutput `pulumi:"keepAliveTimer"`
	// Enable/disable failover upon link down. Valid values: `enable`, `disable`.
	LinkDownFailover pulumi.StringOutput `pulumi:"linkDownFailover"`
	// Local AS number of neighbor.
	LocalAs pulumi.IntOutput `pulumi:"localAs"`
	// Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
	LocalAsNoPrepend pulumi.StringOutput `pulumi:"localAsNoPrepend"`
	// Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
	LocalAsReplaceAs pulumi.StringOutput `pulumi:"localAsReplaceAs"`
	// Maximum number of IPv4 prefixes to accept from this peer.
	MaximumPrefix pulumi.IntOutput `pulumi:"maximumPrefix"`
	// Maximum number of IPv6 prefixes to accept from this peer.
	MaximumPrefix6 pulumi.IntOutput `pulumi:"maximumPrefix6"`
	// Maximum number of L2VPN EVPN prefixes to accept from this peer.
	MaximumPrefixEvpn pulumi.IntOutput `pulumi:"maximumPrefixEvpn"`
	// Maximum IPv4 prefix threshold value (1 - 100 percent).
	MaximumPrefixThreshold pulumi.IntOutput `pulumi:"maximumPrefixThreshold"`
	// Maximum IPv6 prefix threshold value (1 - 100 percent).
	MaximumPrefixThreshold6 pulumi.IntOutput `pulumi:"maximumPrefixThreshold6"`
	// Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdEvpn pulumi.IntOutput `pulumi:"maximumPrefixThresholdEvpn"`
	// Maximum VPNv4 prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdVpnv4 pulumi.IntOutput `pulumi:"maximumPrefixThresholdVpnv4"`
	// Maximum VPNv6 prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdVpnv6 pulumi.IntOutput `pulumi:"maximumPrefixThresholdVpnv6"`
	// Maximum number of VPNv4 prefixes to accept from this peer.
	MaximumPrefixVpnv4 pulumi.IntOutput `pulumi:"maximumPrefixVpnv4"`
	// Maximum number of VPNv6 prefixes to accept from this peer.
	MaximumPrefixVpnv6 pulumi.IntOutput `pulumi:"maximumPrefixVpnv6"`
	// Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnly pulumi.StringOutput `pulumi:"maximumPrefixWarningOnly"`
	// Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnly6 pulumi.StringOutput `pulumi:"maximumPrefixWarningOnly6"`
	// Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnlyEvpn pulumi.StringOutput `pulumi:"maximumPrefixWarningOnlyEvpn"`
	// Enable/disable only giving warning message when limit is exceeded for VPNv4 routes. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnlyVpnv4 pulumi.StringOutput `pulumi:"maximumPrefixWarningOnlyVpnv4"`
	// Enable/disable warning message when limit is exceeded for VPNv6 routes. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnlyVpnv6 pulumi.StringOutput `pulumi:"maximumPrefixWarningOnlyVpnv6"`
	// Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelf pulumi.StringOutput `pulumi:"nextHopSelf"`
	// Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelf6 pulumi.StringOutput `pulumi:"nextHopSelf6"`
	// Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
	NextHopSelfRr pulumi.StringOutput `pulumi:"nextHopSelfRr"`
	// Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
	NextHopSelfRr6 pulumi.StringOutput `pulumi:"nextHopSelfRr6"`
	// Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelfVpnv4 pulumi.StringOutput `pulumi:"nextHopSelfVpnv4"`
	// Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelfVpnv6 pulumi.StringOutput `pulumi:"nextHopSelfVpnv6"`
	// Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
	OverrideCapability pulumi.StringOutput `pulumi:"overrideCapability"`
	// Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
	Passive pulumi.StringOutput `pulumi:"passive"`
	// Password used in MD5 authentication.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// IPv4 Inbound filter for updates from this neighbor.
	PrefixListIn pulumi.StringOutput `pulumi:"prefixListIn"`
	// IPv6 Inbound filter for updates from this neighbor.
	PrefixListIn6 pulumi.StringOutput `pulumi:"prefixListIn6"`
	// Inbound filter for VPNv4 updates from this neighbor.
	PrefixListInVpnv4 pulumi.StringOutput `pulumi:"prefixListInVpnv4"`
	// Inbound filter for VPNv6 updates from this neighbor.
	PrefixListInVpnv6 pulumi.StringOutput `pulumi:"prefixListInVpnv6"`
	// IPv4 Outbound filter for updates to this neighbor.
	PrefixListOut pulumi.StringOutput `pulumi:"prefixListOut"`
	// IPv6 Outbound filter for updates to this neighbor.
	PrefixListOut6 pulumi.StringOutput `pulumi:"prefixListOut6"`
	// Outbound filter for VPNv4 updates to this neighbor.
	PrefixListOutVpnv4 pulumi.StringOutput `pulumi:"prefixListOutVpnv4"`
	// Outbound filter for VPNv6 updates to this neighbor.
	PrefixListOutVpnv6 pulumi.StringOutput `pulumi:"prefixListOutVpnv6"`
	// AS number of neighbor.
	RemoteAs pulumi.IntOutput `pulumi:"remoteAs"`
	// Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAs pulumi.StringOutput `pulumi:"removePrivateAs"`
	// Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAs6 pulumi.StringOutput `pulumi:"removePrivateAs6"`
	// Enable/disable removing private AS number from L2VPN EVPN outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAsEvpn pulumi.StringOutput `pulumi:"removePrivateAsEvpn"`
	// Enable/disable remove private AS number from VPNv4 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAsVpnv4 pulumi.StringOutput `pulumi:"removePrivateAsVpnv4"`
	// Enable/disable to remove private AS number from VPNv6 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAsVpnv6 pulumi.StringOutput `pulumi:"removePrivateAsVpnv6"`
	// Graceful restart delay time (sec, 0 = global default).
	RestartTime pulumi.IntOutput `pulumi:"restartTime"`
	// Time to retain stale routes.
	RetainStaleTime pulumi.IntOutput `pulumi:"retainStaleTime"`
	// IPv4 Inbound route map filter.
	RouteMapIn pulumi.StringOutput `pulumi:"routeMapIn"`
	// IPv6 Inbound route map filter.
	RouteMapIn6 pulumi.StringOutput `pulumi:"routeMapIn6"`
	// L2VPN EVPN inbound route map filter.
	RouteMapInEvpn pulumi.StringOutput `pulumi:"routeMapInEvpn"`
	// VPNv4 inbound route map filter.
	RouteMapInVpnv4 pulumi.StringOutput `pulumi:"routeMapInVpnv4"`
	// VPNv6 inbound route map filter.
	RouteMapInVpnv6 pulumi.StringOutput `pulumi:"routeMapInVpnv6"`
	// IPv4 Outbound route map filter.
	RouteMapOut pulumi.StringOutput `pulumi:"routeMapOut"`
	// IPv6 Outbound route map filter.
	RouteMapOut6 pulumi.StringOutput `pulumi:"routeMapOut6"`
	// IPv6 outbound route map filter if the peer is preferred.
	RouteMapOut6Preferable pulumi.StringOutput `pulumi:"routeMapOut6Preferable"`
	// L2VPN EVPN outbound route map filter.
	RouteMapOutEvpn pulumi.StringOutput `pulumi:"routeMapOutEvpn"`
	// IPv4 outbound route map filter if the peer is preferred.
	RouteMapOutPreferable pulumi.StringOutput `pulumi:"routeMapOutPreferable"`
	// VPNv4 outbound route map filter.
	RouteMapOutVpnv4 pulumi.StringOutput `pulumi:"routeMapOutVpnv4"`
	// VPNv4 outbound route map filter if the peer is preferred.
	RouteMapOutVpnv4Preferable pulumi.StringOutput `pulumi:"routeMapOutVpnv4Preferable"`
	// VPNv6 outbound route map filter.
	RouteMapOutVpnv6 pulumi.StringOutput `pulumi:"routeMapOutVpnv6"`
	// VPNv6 outbound route map filter if this neighbor is preferred.
	RouteMapOutVpnv6Preferable pulumi.StringOutput `pulumi:"routeMapOutVpnv6Preferable"`
	// Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
	RouteReflectorClient pulumi.StringOutput `pulumi:"routeReflectorClient"`
	// Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
	RouteReflectorClient6 pulumi.StringOutput `pulumi:"routeReflectorClient6"`
	// Enable/disable L2VPN EVPN AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
	RouteReflectorClientEvpn pulumi.StringOutput `pulumi:"routeReflectorClientEvpn"`
	// Enable/disable VPNv4 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
	RouteReflectorClientVpnv4 pulumi.StringOutput `pulumi:"routeReflectorClientVpnv4"`
	// Enable/disable VPNv6 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
	RouteReflectorClientVpnv6 pulumi.StringOutput `pulumi:"routeReflectorClientVpnv6"`
	// Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
	RouteServerClient pulumi.StringOutput `pulumi:"routeServerClient"`
	// Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
	RouteServerClient6 pulumi.StringOutput `pulumi:"routeServerClient6"`
	// Enable/disable L2VPN EVPN AS route server client for this neighbor. Valid values: `enable`, `disable`.
	RouteServerClientEvpn pulumi.StringOutput `pulumi:"routeServerClientEvpn"`
	// Enable/disable VPNv4 AS route server client for this neighbor. Valid values: `enable`, `disable`.
	RouteServerClientVpnv4 pulumi.StringOutput `pulumi:"routeServerClientVpnv4"`
	// Enable/disable VPNv6 AS route server client for this neighbor. Valid values: `enable`, `disable`.
	RouteServerClientVpnv6 pulumi.StringOutput `pulumi:"routeServerClientVpnv6"`
	// IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunity pulumi.StringOutput `pulumi:"sendCommunity"`
	// IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunity6 pulumi.StringOutput `pulumi:"sendCommunity6"`
	// Enable/disable sending community attribute to neighbor for L2VPN EVPN address family. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunityEvpn pulumi.StringOutput `pulumi:"sendCommunityEvpn"`
	// Send community attribute to neighbor for VPNv4 address family. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunityVpnv4 pulumi.StringOutput `pulumi:"sendCommunityVpnv4"`
	// Enable/disable sending community attribute to this neighbor for VPNv6 address family. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunityVpnv6 pulumi.StringOutput `pulumi:"sendCommunityVpnv6"`
	// Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
	Shutdown pulumi.StringOutput `pulumi:"shutdown"`
	// Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfiguration pulumi.StringOutput `pulumi:"softReconfiguration"`
	// Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfiguration6 pulumi.StringOutput `pulumi:"softReconfiguration6"`
	// Enable/disable L2VPN EVPN inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfigurationEvpn pulumi.StringOutput `pulumi:"softReconfigurationEvpn"`
	// Enable/disable allow VPNv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfigurationVpnv4 pulumi.StringOutput `pulumi:"softReconfigurationVpnv4"`
	// Enable/disable VPNv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfigurationVpnv6 pulumi.StringOutput `pulumi:"softReconfigurationVpnv6"`
	// Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
	StaleRoute pulumi.StringOutput `pulumi:"staleRoute"`
	// Enable/disable strict capability matching. Valid values: `enable`, `disable`.
	StrictCapabilityMatch pulumi.StringOutput `pulumi:"strictCapabilityMatch"`
	// IPv4 Route map to selectively unsuppress suppressed routes.
	UnsuppressMap pulumi.StringOutput `pulumi:"unsuppressMap"`
	// IPv6 Route map to selectively unsuppress suppressed routes.
	UnsuppressMap6 pulumi.StringOutput `pulumi:"unsuppressMap6"`
	// Interface to use as source IP/IPv6 address of TCP connections.
	UpdateSource pulumi.StringOutput `pulumi:"updateSource"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Neighbor weight.
	Weight pulumi.IntOutput `pulumi:"weight"`
}

// NewNeighbor registers a new resource with the given unique name, arguments, and options.
func NewNeighbor(ctx *pulumi.Context,
	name string, args *NeighborArgs, opts ...pulumi.ResourceOption) (*Neighbor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Neighbor
	err := ctx.RegisterResource("fortios:router/bgp/neighbor:Neighbor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNeighbor gets an existing Neighbor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNeighbor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NeighborState, opts ...pulumi.ResourceOption) (*Neighbor, error) {
	var resource Neighbor
	err := ctx.ReadResource("fortios:router/bgp/neighbor:Neighbor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Neighbor resources.
type neighborState struct {
	// Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
	Activate *string `pulumi:"activate"`
	// Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
	Activate6 *string `pulumi:"activate6"`
	// Enable/disable address family L2VPN EVPN for this neighbor. Valid values: `enable`, `disable`.
	ActivateEvpn *string `pulumi:"activateEvpn"`
	// Enable/disable address family VPNv4 for this neighbor. Valid values: `enable`, `disable`.
	ActivateVpnv4 *string `pulumi:"activateVpnv4"`
	// Enable/disable address family VPNv6 for this neighbor. Valid values: `enable`, `disable`.
	ActivateVpnv6 *string `pulumi:"activateVpnv6"`
	// Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPath *string `pulumi:"additionalPath"`
	// Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPath6 *string `pulumi:"additionalPath6"`
	// Enable/disable VPNv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPathVpnv4 *string `pulumi:"additionalPathVpnv4"`
	// Enable/disable VPNv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPathVpnv6 *string `pulumi:"additionalPathVpnv6"`
	// Number of IPv4 additional paths that can be advertised to this neighbor.
	AdvAdditionalPath *int `pulumi:"advAdditionalPath"`
	// Number of IPv6 additional paths that can be advertised to this neighbor.
	AdvAdditionalPath6 *int `pulumi:"advAdditionalPath6"`
	// Number of VPNv4 additional paths that can be advertised to this neighbor.
	AdvAdditionalPathVpnv4 *int `pulumi:"advAdditionalPathVpnv4"`
	// Number of VPNv6 additional paths that can be advertised to this neighbor.
	AdvAdditionalPathVpnv6 *int `pulumi:"advAdditionalPathVpnv6"`
	// Minimum interval (sec) between sending updates.
	AdvertisementInterval *int `pulumi:"advertisementInterval"`
	// IPv4 The maximum number of occurrence of my AS number allowed.
	AllowasIn *int `pulumi:"allowasIn"`
	// IPv6 The maximum number of occurrence of my AS number allowed.
	AllowasIn6 *int `pulumi:"allowasIn6"`
	// Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
	AllowasInEnable *string `pulumi:"allowasInEnable"`
	// Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
	AllowasInEnable6 *string `pulumi:"allowasInEnable6"`
	// Enable/disable to allow my AS in AS path for L2VPN EVPN route. Valid values: `enable`, `disable`.
	AllowasInEnableEvpn *string `pulumi:"allowasInEnableEvpn"`
	// Enable/disable to allow my AS in AS path for VPNv4 route. Valid values: `enable`, `disable`.
	AllowasInEnableVpnv4 *string `pulumi:"allowasInEnableVpnv4"`
	// Enable/disable use of my AS in AS path for VPNv6 route. Valid values: `enable`, `disable`.
	AllowasInEnableVpnv6 *string `pulumi:"allowasInEnableVpnv6"`
	// The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
	AllowasInEvpn *int `pulumi:"allowasInEvpn"`
	// The maximum number of occurrence of my AS number allowed for VPNv4 route.
	AllowasInVpnv4 *int `pulumi:"allowasInVpnv4"`
	// The maximum number of occurrence of my AS number allowed for VPNv6 route.
	AllowasInVpnv6 *int `pulumi:"allowasInVpnv6"`
	// Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
	AsOverride *string `pulumi:"asOverride"`
	// Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
	AsOverride6 *string `pulumi:"asOverride6"`
	// IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchanged *string `pulumi:"attributeUnchanged"`
	// IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchanged6 *string `pulumi:"attributeUnchanged6"`
	// List of attributes that should be unchanged for VPNv4 route. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchangedVpnv4 *string `pulumi:"attributeUnchangedVpnv4"`
	// List of attributes that should not be changed for VPNv6 route. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchangedVpnv6 *string `pulumi:"attributeUnchangedVpnv6"`
	// Key-chain name for TCP authentication options.
	AuthOptions *string `pulumi:"authOptions"`
	// Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
	Bfd *string `pulumi:"bfd"`
	// Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
	CapabilityDefaultOriginate *string `pulumi:"capabilityDefaultOriginate"`
	// Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
	CapabilityDefaultOriginate6 *string `pulumi:"capabilityDefaultOriginate6"`
	// Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityDynamic *string `pulumi:"capabilityDynamic"`
	// Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestart *string `pulumi:"capabilityGracefulRestart"`
	// Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestart6 *string `pulumi:"capabilityGracefulRestart6"`
	// Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestartEvpn *string `pulumi:"capabilityGracefulRestartEvpn"`
	// Enable/disable advertise VPNv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestartVpnv4 *string `pulumi:"capabilityGracefulRestartVpnv4"`
	// Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestartVpnv6 *string `pulumi:"capabilityGracefulRestartVpnv6"`
	// Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
	CapabilityOrf *string `pulumi:"capabilityOrf"`
	// Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
	CapabilityOrf6 *string `pulumi:"capabilityOrf6"`
	// Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityRouteRefresh *string `pulumi:"capabilityRouteRefresh"`
	// IPv6 conditional advertisement. The structure of `conditionalAdvertise6` block is documented below.
	ConditionalAdvertise6s []NeighborConditionalAdvertise6 `pulumi:"conditionalAdvertise6s"`
	// Conditional advertisement. The structure of `conditionalAdvertise` block is documented below.
	ConditionalAdvertises []NeighborConditionalAdvertise `pulumi:"conditionalAdvertises"`
	// Interval (sec) for connect timer.
	ConnectTimer *int `pulumi:"connectTimer"`
	// Route map to specify criteria to originate IPv4 default.
	DefaultOriginateRoutemap *string `pulumi:"defaultOriginateRoutemap"`
	// Route map to specify criteria to originate IPv6 default.
	DefaultOriginateRoutemap6 *string `pulumi:"defaultOriginateRoutemap6"`
	// Description.
	Description *string `pulumi:"description"`
	// Filter for IPv4 updates from this neighbor.
	DistributeListIn *string `pulumi:"distributeListIn"`
	// Filter for IPv6 updates from this neighbor.
	DistributeListIn6 *string `pulumi:"distributeListIn6"`
	// Filter for VPNv4 updates from this neighbor.
	DistributeListInVpnv4 *string `pulumi:"distributeListInVpnv4"`
	// Filter for VPNv6 updates from this neighbor.
	DistributeListInVpnv6 *string `pulumi:"distributeListInVpnv6"`
	// Filter for IPv4 updates to this neighbor.
	DistributeListOut *string `pulumi:"distributeListOut"`
	// Filter for IPv6 updates to this neighbor.
	DistributeListOut6 *string `pulumi:"distributeListOut6"`
	// Filter for VPNv4 updates to this neighbor.
	DistributeListOutVpnv4 *string `pulumi:"distributeListOutVpnv4"`
	// Filter for VPNv6 updates to this neighbor.
	DistributeListOutVpnv6 *string `pulumi:"distributeListOutVpnv6"`
	// Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
	DontCapabilityNegotiate *string `pulumi:"dontCapabilityNegotiate"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
	EbgpEnforceMultihop *string `pulumi:"ebgpEnforceMultihop"`
	// EBGP multihop TTL for this peer.
	EbgpMultihopTtl *int `pulumi:"ebgpMultihopTtl"`
	// BGP filter for IPv4 inbound routes.
	FilterListIn *string `pulumi:"filterListIn"`
	// BGP filter for IPv6 inbound routes.
	FilterListIn6 *string `pulumi:"filterListIn6"`
	// BGP filter for VPNv4 inbound routes.
	FilterListInVpnv4 *string `pulumi:"filterListInVpnv4"`
	// BGP filter for VPNv6 inbound routes.
	FilterListInVpnv6 *string `pulumi:"filterListInVpnv6"`
	// BGP filter for IPv4 outbound routes.
	FilterListOut *string `pulumi:"filterListOut"`
	// BGP filter for IPv6 outbound routes.
	FilterListOut6 *string `pulumi:"filterListOut6"`
	// BGP filter for VPNv4 outbound routes.
	FilterListOutVpnv4 *string `pulumi:"filterListOutVpnv4"`
	// BGP filter for VPNv6 outbound routes.
	FilterListOutVpnv6 *string `pulumi:"filterListOutVpnv6"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Interval (sec) before peer considered dead.
	HoldtimeTimer *int `pulumi:"holdtimeTimer"`
	// Interface
	Interface *string `pulumi:"interface"`
	// IP/IPv6 address of neighbor.
	Ip *string `pulumi:"ip"`
	// Keep alive timer interval (sec).
	KeepAliveTimer *int `pulumi:"keepAliveTimer"`
	// Enable/disable failover upon link down. Valid values: `enable`, `disable`.
	LinkDownFailover *string `pulumi:"linkDownFailover"`
	// Local AS number of neighbor.
	LocalAs *int `pulumi:"localAs"`
	// Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
	LocalAsNoPrepend *string `pulumi:"localAsNoPrepend"`
	// Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
	LocalAsReplaceAs *string `pulumi:"localAsReplaceAs"`
	// Maximum number of IPv4 prefixes to accept from this peer.
	MaximumPrefix *int `pulumi:"maximumPrefix"`
	// Maximum number of IPv6 prefixes to accept from this peer.
	MaximumPrefix6 *int `pulumi:"maximumPrefix6"`
	// Maximum number of L2VPN EVPN prefixes to accept from this peer.
	MaximumPrefixEvpn *int `pulumi:"maximumPrefixEvpn"`
	// Maximum IPv4 prefix threshold value (1 - 100 percent).
	MaximumPrefixThreshold *int `pulumi:"maximumPrefixThreshold"`
	// Maximum IPv6 prefix threshold value (1 - 100 percent).
	MaximumPrefixThreshold6 *int `pulumi:"maximumPrefixThreshold6"`
	// Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdEvpn *int `pulumi:"maximumPrefixThresholdEvpn"`
	// Maximum VPNv4 prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdVpnv4 *int `pulumi:"maximumPrefixThresholdVpnv4"`
	// Maximum VPNv6 prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdVpnv6 *int `pulumi:"maximumPrefixThresholdVpnv6"`
	// Maximum number of VPNv4 prefixes to accept from this peer.
	MaximumPrefixVpnv4 *int `pulumi:"maximumPrefixVpnv4"`
	// Maximum number of VPNv6 prefixes to accept from this peer.
	MaximumPrefixVpnv6 *int `pulumi:"maximumPrefixVpnv6"`
	// Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnly *string `pulumi:"maximumPrefixWarningOnly"`
	// Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnly6 *string `pulumi:"maximumPrefixWarningOnly6"`
	// Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnlyEvpn *string `pulumi:"maximumPrefixWarningOnlyEvpn"`
	// Enable/disable only giving warning message when limit is exceeded for VPNv4 routes. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnlyVpnv4 *string `pulumi:"maximumPrefixWarningOnlyVpnv4"`
	// Enable/disable warning message when limit is exceeded for VPNv6 routes. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnlyVpnv6 *string `pulumi:"maximumPrefixWarningOnlyVpnv6"`
	// Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelf *string `pulumi:"nextHopSelf"`
	// Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelf6 *string `pulumi:"nextHopSelf6"`
	// Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
	NextHopSelfRr *string `pulumi:"nextHopSelfRr"`
	// Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
	NextHopSelfRr6 *string `pulumi:"nextHopSelfRr6"`
	// Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelfVpnv4 *string `pulumi:"nextHopSelfVpnv4"`
	// Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelfVpnv6 *string `pulumi:"nextHopSelfVpnv6"`
	// Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
	OverrideCapability *string `pulumi:"overrideCapability"`
	// Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
	Passive *string `pulumi:"passive"`
	// Password used in MD5 authentication.
	Password *string `pulumi:"password"`
	// IPv4 Inbound filter for updates from this neighbor.
	PrefixListIn *string `pulumi:"prefixListIn"`
	// IPv6 Inbound filter for updates from this neighbor.
	PrefixListIn6 *string `pulumi:"prefixListIn6"`
	// Inbound filter for VPNv4 updates from this neighbor.
	PrefixListInVpnv4 *string `pulumi:"prefixListInVpnv4"`
	// Inbound filter for VPNv6 updates from this neighbor.
	PrefixListInVpnv6 *string `pulumi:"prefixListInVpnv6"`
	// IPv4 Outbound filter for updates to this neighbor.
	PrefixListOut *string `pulumi:"prefixListOut"`
	// IPv6 Outbound filter for updates to this neighbor.
	PrefixListOut6 *string `pulumi:"prefixListOut6"`
	// Outbound filter for VPNv4 updates to this neighbor.
	PrefixListOutVpnv4 *string `pulumi:"prefixListOutVpnv4"`
	// Outbound filter for VPNv6 updates to this neighbor.
	PrefixListOutVpnv6 *string `pulumi:"prefixListOutVpnv6"`
	// AS number of neighbor.
	RemoteAs *int `pulumi:"remoteAs"`
	// Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAs *string `pulumi:"removePrivateAs"`
	// Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAs6 *string `pulumi:"removePrivateAs6"`
	// Enable/disable removing private AS number from L2VPN EVPN outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAsEvpn *string `pulumi:"removePrivateAsEvpn"`
	// Enable/disable remove private AS number from VPNv4 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAsVpnv4 *string `pulumi:"removePrivateAsVpnv4"`
	// Enable/disable to remove private AS number from VPNv6 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAsVpnv6 *string `pulumi:"removePrivateAsVpnv6"`
	// Graceful restart delay time (sec, 0 = global default).
	RestartTime *int `pulumi:"restartTime"`
	// Time to retain stale routes.
	RetainStaleTime *int `pulumi:"retainStaleTime"`
	// IPv4 Inbound route map filter.
	RouteMapIn *string `pulumi:"routeMapIn"`
	// IPv6 Inbound route map filter.
	RouteMapIn6 *string `pulumi:"routeMapIn6"`
	// L2VPN EVPN inbound route map filter.
	RouteMapInEvpn *string `pulumi:"routeMapInEvpn"`
	// VPNv4 inbound route map filter.
	RouteMapInVpnv4 *string `pulumi:"routeMapInVpnv4"`
	// VPNv6 inbound route map filter.
	RouteMapInVpnv6 *string `pulumi:"routeMapInVpnv6"`
	// IPv4 Outbound route map filter.
	RouteMapOut *string `pulumi:"routeMapOut"`
	// IPv6 Outbound route map filter.
	RouteMapOut6 *string `pulumi:"routeMapOut6"`
	// IPv6 outbound route map filter if the peer is preferred.
	RouteMapOut6Preferable *string `pulumi:"routeMapOut6Preferable"`
	// L2VPN EVPN outbound route map filter.
	RouteMapOutEvpn *string `pulumi:"routeMapOutEvpn"`
	// IPv4 outbound route map filter if the peer is preferred.
	RouteMapOutPreferable *string `pulumi:"routeMapOutPreferable"`
	// VPNv4 outbound route map filter.
	RouteMapOutVpnv4 *string `pulumi:"routeMapOutVpnv4"`
	// VPNv4 outbound route map filter if the peer is preferred.
	RouteMapOutVpnv4Preferable *string `pulumi:"routeMapOutVpnv4Preferable"`
	// VPNv6 outbound route map filter.
	RouteMapOutVpnv6 *string `pulumi:"routeMapOutVpnv6"`
	// VPNv6 outbound route map filter if this neighbor is preferred.
	RouteMapOutVpnv6Preferable *string `pulumi:"routeMapOutVpnv6Preferable"`
	// Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
	RouteReflectorClient *string `pulumi:"routeReflectorClient"`
	// Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
	RouteReflectorClient6 *string `pulumi:"routeReflectorClient6"`
	// Enable/disable L2VPN EVPN AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
	RouteReflectorClientEvpn *string `pulumi:"routeReflectorClientEvpn"`
	// Enable/disable VPNv4 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
	RouteReflectorClientVpnv4 *string `pulumi:"routeReflectorClientVpnv4"`
	// Enable/disable VPNv6 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
	RouteReflectorClientVpnv6 *string `pulumi:"routeReflectorClientVpnv6"`
	// Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
	RouteServerClient *string `pulumi:"routeServerClient"`
	// Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
	RouteServerClient6 *string `pulumi:"routeServerClient6"`
	// Enable/disable L2VPN EVPN AS route server client for this neighbor. Valid values: `enable`, `disable`.
	RouteServerClientEvpn *string `pulumi:"routeServerClientEvpn"`
	// Enable/disable VPNv4 AS route server client for this neighbor. Valid values: `enable`, `disable`.
	RouteServerClientVpnv4 *string `pulumi:"routeServerClientVpnv4"`
	// Enable/disable VPNv6 AS route server client for this neighbor. Valid values: `enable`, `disable`.
	RouteServerClientVpnv6 *string `pulumi:"routeServerClientVpnv6"`
	// IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunity *string `pulumi:"sendCommunity"`
	// IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunity6 *string `pulumi:"sendCommunity6"`
	// Enable/disable sending community attribute to neighbor for L2VPN EVPN address family. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunityEvpn *string `pulumi:"sendCommunityEvpn"`
	// Send community attribute to neighbor for VPNv4 address family. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunityVpnv4 *string `pulumi:"sendCommunityVpnv4"`
	// Enable/disable sending community attribute to this neighbor for VPNv6 address family. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunityVpnv6 *string `pulumi:"sendCommunityVpnv6"`
	// Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
	Shutdown *string `pulumi:"shutdown"`
	// Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfiguration *string `pulumi:"softReconfiguration"`
	// Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfiguration6 *string `pulumi:"softReconfiguration6"`
	// Enable/disable L2VPN EVPN inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfigurationEvpn *string `pulumi:"softReconfigurationEvpn"`
	// Enable/disable allow VPNv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfigurationVpnv4 *string `pulumi:"softReconfigurationVpnv4"`
	// Enable/disable VPNv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfigurationVpnv6 *string `pulumi:"softReconfigurationVpnv6"`
	// Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
	StaleRoute *string `pulumi:"staleRoute"`
	// Enable/disable strict capability matching. Valid values: `enable`, `disable`.
	StrictCapabilityMatch *string `pulumi:"strictCapabilityMatch"`
	// IPv4 Route map to selectively unsuppress suppressed routes.
	UnsuppressMap *string `pulumi:"unsuppressMap"`
	// IPv6 Route map to selectively unsuppress suppressed routes.
	UnsuppressMap6 *string `pulumi:"unsuppressMap6"`
	// Interface to use as source IP/IPv6 address of TCP connections.
	UpdateSource *string `pulumi:"updateSource"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Neighbor weight.
	Weight *int `pulumi:"weight"`
}

type NeighborState struct {
	// Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
	Activate pulumi.StringPtrInput
	// Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
	Activate6 pulumi.StringPtrInput
	// Enable/disable address family L2VPN EVPN for this neighbor. Valid values: `enable`, `disable`.
	ActivateEvpn pulumi.StringPtrInput
	// Enable/disable address family VPNv4 for this neighbor. Valid values: `enable`, `disable`.
	ActivateVpnv4 pulumi.StringPtrInput
	// Enable/disable address family VPNv6 for this neighbor. Valid values: `enable`, `disable`.
	ActivateVpnv6 pulumi.StringPtrInput
	// Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPath pulumi.StringPtrInput
	// Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPath6 pulumi.StringPtrInput
	// Enable/disable VPNv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPathVpnv4 pulumi.StringPtrInput
	// Enable/disable VPNv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPathVpnv6 pulumi.StringPtrInput
	// Number of IPv4 additional paths that can be advertised to this neighbor.
	AdvAdditionalPath pulumi.IntPtrInput
	// Number of IPv6 additional paths that can be advertised to this neighbor.
	AdvAdditionalPath6 pulumi.IntPtrInput
	// Number of VPNv4 additional paths that can be advertised to this neighbor.
	AdvAdditionalPathVpnv4 pulumi.IntPtrInput
	// Number of VPNv6 additional paths that can be advertised to this neighbor.
	AdvAdditionalPathVpnv6 pulumi.IntPtrInput
	// Minimum interval (sec) between sending updates.
	AdvertisementInterval pulumi.IntPtrInput
	// IPv4 The maximum number of occurrence of my AS number allowed.
	AllowasIn pulumi.IntPtrInput
	// IPv6 The maximum number of occurrence of my AS number allowed.
	AllowasIn6 pulumi.IntPtrInput
	// Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
	AllowasInEnable pulumi.StringPtrInput
	// Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
	AllowasInEnable6 pulumi.StringPtrInput
	// Enable/disable to allow my AS in AS path for L2VPN EVPN route. Valid values: `enable`, `disable`.
	AllowasInEnableEvpn pulumi.StringPtrInput
	// Enable/disable to allow my AS in AS path for VPNv4 route. Valid values: `enable`, `disable`.
	AllowasInEnableVpnv4 pulumi.StringPtrInput
	// Enable/disable use of my AS in AS path for VPNv6 route. Valid values: `enable`, `disable`.
	AllowasInEnableVpnv6 pulumi.StringPtrInput
	// The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
	AllowasInEvpn pulumi.IntPtrInput
	// The maximum number of occurrence of my AS number allowed for VPNv4 route.
	AllowasInVpnv4 pulumi.IntPtrInput
	// The maximum number of occurrence of my AS number allowed for VPNv6 route.
	AllowasInVpnv6 pulumi.IntPtrInput
	// Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
	AsOverride pulumi.StringPtrInput
	// Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
	AsOverride6 pulumi.StringPtrInput
	// IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchanged pulumi.StringPtrInput
	// IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchanged6 pulumi.StringPtrInput
	// List of attributes that should be unchanged for VPNv4 route. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchangedVpnv4 pulumi.StringPtrInput
	// List of attributes that should not be changed for VPNv6 route. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchangedVpnv6 pulumi.StringPtrInput
	// Key-chain name for TCP authentication options.
	AuthOptions pulumi.StringPtrInput
	// Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
	Bfd pulumi.StringPtrInput
	// Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
	CapabilityDefaultOriginate pulumi.StringPtrInput
	// Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
	CapabilityDefaultOriginate6 pulumi.StringPtrInput
	// Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityDynamic pulumi.StringPtrInput
	// Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestart pulumi.StringPtrInput
	// Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestart6 pulumi.StringPtrInput
	// Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestartEvpn pulumi.StringPtrInput
	// Enable/disable advertise VPNv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestartVpnv4 pulumi.StringPtrInput
	// Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestartVpnv6 pulumi.StringPtrInput
	// Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
	CapabilityOrf pulumi.StringPtrInput
	// Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
	CapabilityOrf6 pulumi.StringPtrInput
	// Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityRouteRefresh pulumi.StringPtrInput
	// IPv6 conditional advertisement. The structure of `conditionalAdvertise6` block is documented below.
	ConditionalAdvertise6s NeighborConditionalAdvertise6ArrayInput
	// Conditional advertisement. The structure of `conditionalAdvertise` block is documented below.
	ConditionalAdvertises NeighborConditionalAdvertiseArrayInput
	// Interval (sec) for connect timer.
	ConnectTimer pulumi.IntPtrInput
	// Route map to specify criteria to originate IPv4 default.
	DefaultOriginateRoutemap pulumi.StringPtrInput
	// Route map to specify criteria to originate IPv6 default.
	DefaultOriginateRoutemap6 pulumi.StringPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// Filter for IPv4 updates from this neighbor.
	DistributeListIn pulumi.StringPtrInput
	// Filter for IPv6 updates from this neighbor.
	DistributeListIn6 pulumi.StringPtrInput
	// Filter for VPNv4 updates from this neighbor.
	DistributeListInVpnv4 pulumi.StringPtrInput
	// Filter for VPNv6 updates from this neighbor.
	DistributeListInVpnv6 pulumi.StringPtrInput
	// Filter for IPv4 updates to this neighbor.
	DistributeListOut pulumi.StringPtrInput
	// Filter for IPv6 updates to this neighbor.
	DistributeListOut6 pulumi.StringPtrInput
	// Filter for VPNv4 updates to this neighbor.
	DistributeListOutVpnv4 pulumi.StringPtrInput
	// Filter for VPNv6 updates to this neighbor.
	DistributeListOutVpnv6 pulumi.StringPtrInput
	// Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
	DontCapabilityNegotiate pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
	EbgpEnforceMultihop pulumi.StringPtrInput
	// EBGP multihop TTL for this peer.
	EbgpMultihopTtl pulumi.IntPtrInput
	// BGP filter for IPv4 inbound routes.
	FilterListIn pulumi.StringPtrInput
	// BGP filter for IPv6 inbound routes.
	FilterListIn6 pulumi.StringPtrInput
	// BGP filter for VPNv4 inbound routes.
	FilterListInVpnv4 pulumi.StringPtrInput
	// BGP filter for VPNv6 inbound routes.
	FilterListInVpnv6 pulumi.StringPtrInput
	// BGP filter for IPv4 outbound routes.
	FilterListOut pulumi.StringPtrInput
	// BGP filter for IPv6 outbound routes.
	FilterListOut6 pulumi.StringPtrInput
	// BGP filter for VPNv4 outbound routes.
	FilterListOutVpnv4 pulumi.StringPtrInput
	// BGP filter for VPNv6 outbound routes.
	FilterListOutVpnv6 pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Interval (sec) before peer considered dead.
	HoldtimeTimer pulumi.IntPtrInput
	// Interface
	Interface pulumi.StringPtrInput
	// IP/IPv6 address of neighbor.
	Ip pulumi.StringPtrInput
	// Keep alive timer interval (sec).
	KeepAliveTimer pulumi.IntPtrInput
	// Enable/disable failover upon link down. Valid values: `enable`, `disable`.
	LinkDownFailover pulumi.StringPtrInput
	// Local AS number of neighbor.
	LocalAs pulumi.IntPtrInput
	// Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
	LocalAsNoPrepend pulumi.StringPtrInput
	// Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
	LocalAsReplaceAs pulumi.StringPtrInput
	// Maximum number of IPv4 prefixes to accept from this peer.
	MaximumPrefix pulumi.IntPtrInput
	// Maximum number of IPv6 prefixes to accept from this peer.
	MaximumPrefix6 pulumi.IntPtrInput
	// Maximum number of L2VPN EVPN prefixes to accept from this peer.
	MaximumPrefixEvpn pulumi.IntPtrInput
	// Maximum IPv4 prefix threshold value (1 - 100 percent).
	MaximumPrefixThreshold pulumi.IntPtrInput
	// Maximum IPv6 prefix threshold value (1 - 100 percent).
	MaximumPrefixThreshold6 pulumi.IntPtrInput
	// Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdEvpn pulumi.IntPtrInput
	// Maximum VPNv4 prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdVpnv4 pulumi.IntPtrInput
	// Maximum VPNv6 prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdVpnv6 pulumi.IntPtrInput
	// Maximum number of VPNv4 prefixes to accept from this peer.
	MaximumPrefixVpnv4 pulumi.IntPtrInput
	// Maximum number of VPNv6 prefixes to accept from this peer.
	MaximumPrefixVpnv6 pulumi.IntPtrInput
	// Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnly pulumi.StringPtrInput
	// Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnly6 pulumi.StringPtrInput
	// Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnlyEvpn pulumi.StringPtrInput
	// Enable/disable only giving warning message when limit is exceeded for VPNv4 routes. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnlyVpnv4 pulumi.StringPtrInput
	// Enable/disable warning message when limit is exceeded for VPNv6 routes. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnlyVpnv6 pulumi.StringPtrInput
	// Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelf pulumi.StringPtrInput
	// Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelf6 pulumi.StringPtrInput
	// Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
	NextHopSelfRr pulumi.StringPtrInput
	// Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
	NextHopSelfRr6 pulumi.StringPtrInput
	// Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelfVpnv4 pulumi.StringPtrInput
	// Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelfVpnv6 pulumi.StringPtrInput
	// Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
	OverrideCapability pulumi.StringPtrInput
	// Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
	Passive pulumi.StringPtrInput
	// Password used in MD5 authentication.
	Password pulumi.StringPtrInput
	// IPv4 Inbound filter for updates from this neighbor.
	PrefixListIn pulumi.StringPtrInput
	// IPv6 Inbound filter for updates from this neighbor.
	PrefixListIn6 pulumi.StringPtrInput
	// Inbound filter for VPNv4 updates from this neighbor.
	PrefixListInVpnv4 pulumi.StringPtrInput
	// Inbound filter for VPNv6 updates from this neighbor.
	PrefixListInVpnv6 pulumi.StringPtrInput
	// IPv4 Outbound filter for updates to this neighbor.
	PrefixListOut pulumi.StringPtrInput
	// IPv6 Outbound filter for updates to this neighbor.
	PrefixListOut6 pulumi.StringPtrInput
	// Outbound filter for VPNv4 updates to this neighbor.
	PrefixListOutVpnv4 pulumi.StringPtrInput
	// Outbound filter for VPNv6 updates to this neighbor.
	PrefixListOutVpnv6 pulumi.StringPtrInput
	// AS number of neighbor.
	RemoteAs pulumi.IntPtrInput
	// Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAs pulumi.StringPtrInput
	// Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAs6 pulumi.StringPtrInput
	// Enable/disable removing private AS number from L2VPN EVPN outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAsEvpn pulumi.StringPtrInput
	// Enable/disable remove private AS number from VPNv4 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAsVpnv4 pulumi.StringPtrInput
	// Enable/disable to remove private AS number from VPNv6 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAsVpnv6 pulumi.StringPtrInput
	// Graceful restart delay time (sec, 0 = global default).
	RestartTime pulumi.IntPtrInput
	// Time to retain stale routes.
	RetainStaleTime pulumi.IntPtrInput
	// IPv4 Inbound route map filter.
	RouteMapIn pulumi.StringPtrInput
	// IPv6 Inbound route map filter.
	RouteMapIn6 pulumi.StringPtrInput
	// L2VPN EVPN inbound route map filter.
	RouteMapInEvpn pulumi.StringPtrInput
	// VPNv4 inbound route map filter.
	RouteMapInVpnv4 pulumi.StringPtrInput
	// VPNv6 inbound route map filter.
	RouteMapInVpnv6 pulumi.StringPtrInput
	// IPv4 Outbound route map filter.
	RouteMapOut pulumi.StringPtrInput
	// IPv6 Outbound route map filter.
	RouteMapOut6 pulumi.StringPtrInput
	// IPv6 outbound route map filter if the peer is preferred.
	RouteMapOut6Preferable pulumi.StringPtrInput
	// L2VPN EVPN outbound route map filter.
	RouteMapOutEvpn pulumi.StringPtrInput
	// IPv4 outbound route map filter if the peer is preferred.
	RouteMapOutPreferable pulumi.StringPtrInput
	// VPNv4 outbound route map filter.
	RouteMapOutVpnv4 pulumi.StringPtrInput
	// VPNv4 outbound route map filter if the peer is preferred.
	RouteMapOutVpnv4Preferable pulumi.StringPtrInput
	// VPNv6 outbound route map filter.
	RouteMapOutVpnv6 pulumi.StringPtrInput
	// VPNv6 outbound route map filter if this neighbor is preferred.
	RouteMapOutVpnv6Preferable pulumi.StringPtrInput
	// Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
	RouteReflectorClient pulumi.StringPtrInput
	// Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
	RouteReflectorClient6 pulumi.StringPtrInput
	// Enable/disable L2VPN EVPN AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
	RouteReflectorClientEvpn pulumi.StringPtrInput
	// Enable/disable VPNv4 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
	RouteReflectorClientVpnv4 pulumi.StringPtrInput
	// Enable/disable VPNv6 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
	RouteReflectorClientVpnv6 pulumi.StringPtrInput
	// Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
	RouteServerClient pulumi.StringPtrInput
	// Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
	RouteServerClient6 pulumi.StringPtrInput
	// Enable/disable L2VPN EVPN AS route server client for this neighbor. Valid values: `enable`, `disable`.
	RouteServerClientEvpn pulumi.StringPtrInput
	// Enable/disable VPNv4 AS route server client for this neighbor. Valid values: `enable`, `disable`.
	RouteServerClientVpnv4 pulumi.StringPtrInput
	// Enable/disable VPNv6 AS route server client for this neighbor. Valid values: `enable`, `disable`.
	RouteServerClientVpnv6 pulumi.StringPtrInput
	// IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunity pulumi.StringPtrInput
	// IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunity6 pulumi.StringPtrInput
	// Enable/disable sending community attribute to neighbor for L2VPN EVPN address family. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunityEvpn pulumi.StringPtrInput
	// Send community attribute to neighbor for VPNv4 address family. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunityVpnv4 pulumi.StringPtrInput
	// Enable/disable sending community attribute to this neighbor for VPNv6 address family. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunityVpnv6 pulumi.StringPtrInput
	// Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
	Shutdown pulumi.StringPtrInput
	// Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfiguration pulumi.StringPtrInput
	// Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfiguration6 pulumi.StringPtrInput
	// Enable/disable L2VPN EVPN inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfigurationEvpn pulumi.StringPtrInput
	// Enable/disable allow VPNv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfigurationVpnv4 pulumi.StringPtrInput
	// Enable/disable VPNv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfigurationVpnv6 pulumi.StringPtrInput
	// Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
	StaleRoute pulumi.StringPtrInput
	// Enable/disable strict capability matching. Valid values: `enable`, `disable`.
	StrictCapabilityMatch pulumi.StringPtrInput
	// IPv4 Route map to selectively unsuppress suppressed routes.
	UnsuppressMap pulumi.StringPtrInput
	// IPv6 Route map to selectively unsuppress suppressed routes.
	UnsuppressMap6 pulumi.StringPtrInput
	// Interface to use as source IP/IPv6 address of TCP connections.
	UpdateSource pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Neighbor weight.
	Weight pulumi.IntPtrInput
}

func (NeighborState) ElementType() reflect.Type {
	return reflect.TypeOf((*neighborState)(nil)).Elem()
}

type neighborArgs struct {
	// Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
	Activate *string `pulumi:"activate"`
	// Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
	Activate6 *string `pulumi:"activate6"`
	// Enable/disable address family L2VPN EVPN for this neighbor. Valid values: `enable`, `disable`.
	ActivateEvpn *string `pulumi:"activateEvpn"`
	// Enable/disable address family VPNv4 for this neighbor. Valid values: `enable`, `disable`.
	ActivateVpnv4 *string `pulumi:"activateVpnv4"`
	// Enable/disable address family VPNv6 for this neighbor. Valid values: `enable`, `disable`.
	ActivateVpnv6 *string `pulumi:"activateVpnv6"`
	// Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPath *string `pulumi:"additionalPath"`
	// Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPath6 *string `pulumi:"additionalPath6"`
	// Enable/disable VPNv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPathVpnv4 *string `pulumi:"additionalPathVpnv4"`
	// Enable/disable VPNv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPathVpnv6 *string `pulumi:"additionalPathVpnv6"`
	// Number of IPv4 additional paths that can be advertised to this neighbor.
	AdvAdditionalPath *int `pulumi:"advAdditionalPath"`
	// Number of IPv6 additional paths that can be advertised to this neighbor.
	AdvAdditionalPath6 *int `pulumi:"advAdditionalPath6"`
	// Number of VPNv4 additional paths that can be advertised to this neighbor.
	AdvAdditionalPathVpnv4 *int `pulumi:"advAdditionalPathVpnv4"`
	// Number of VPNv6 additional paths that can be advertised to this neighbor.
	AdvAdditionalPathVpnv6 *int `pulumi:"advAdditionalPathVpnv6"`
	// Minimum interval (sec) between sending updates.
	AdvertisementInterval *int `pulumi:"advertisementInterval"`
	// IPv4 The maximum number of occurrence of my AS number allowed.
	AllowasIn *int `pulumi:"allowasIn"`
	// IPv6 The maximum number of occurrence of my AS number allowed.
	AllowasIn6 *int `pulumi:"allowasIn6"`
	// Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
	AllowasInEnable *string `pulumi:"allowasInEnable"`
	// Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
	AllowasInEnable6 *string `pulumi:"allowasInEnable6"`
	// Enable/disable to allow my AS in AS path for L2VPN EVPN route. Valid values: `enable`, `disable`.
	AllowasInEnableEvpn *string `pulumi:"allowasInEnableEvpn"`
	// Enable/disable to allow my AS in AS path for VPNv4 route. Valid values: `enable`, `disable`.
	AllowasInEnableVpnv4 *string `pulumi:"allowasInEnableVpnv4"`
	// Enable/disable use of my AS in AS path for VPNv6 route. Valid values: `enable`, `disable`.
	AllowasInEnableVpnv6 *string `pulumi:"allowasInEnableVpnv6"`
	// The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
	AllowasInEvpn *int `pulumi:"allowasInEvpn"`
	// The maximum number of occurrence of my AS number allowed for VPNv4 route.
	AllowasInVpnv4 *int `pulumi:"allowasInVpnv4"`
	// The maximum number of occurrence of my AS number allowed for VPNv6 route.
	AllowasInVpnv6 *int `pulumi:"allowasInVpnv6"`
	// Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
	AsOverride *string `pulumi:"asOverride"`
	// Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
	AsOverride6 *string `pulumi:"asOverride6"`
	// IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchanged *string `pulumi:"attributeUnchanged"`
	// IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchanged6 *string `pulumi:"attributeUnchanged6"`
	// List of attributes that should be unchanged for VPNv4 route. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchangedVpnv4 *string `pulumi:"attributeUnchangedVpnv4"`
	// List of attributes that should not be changed for VPNv6 route. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchangedVpnv6 *string `pulumi:"attributeUnchangedVpnv6"`
	// Key-chain name for TCP authentication options.
	AuthOptions *string `pulumi:"authOptions"`
	// Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
	Bfd *string `pulumi:"bfd"`
	// Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
	CapabilityDefaultOriginate *string `pulumi:"capabilityDefaultOriginate"`
	// Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
	CapabilityDefaultOriginate6 *string `pulumi:"capabilityDefaultOriginate6"`
	// Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityDynamic *string `pulumi:"capabilityDynamic"`
	// Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestart *string `pulumi:"capabilityGracefulRestart"`
	// Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestart6 *string `pulumi:"capabilityGracefulRestart6"`
	// Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestartEvpn *string `pulumi:"capabilityGracefulRestartEvpn"`
	// Enable/disable advertise VPNv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestartVpnv4 *string `pulumi:"capabilityGracefulRestartVpnv4"`
	// Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestartVpnv6 *string `pulumi:"capabilityGracefulRestartVpnv6"`
	// Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
	CapabilityOrf *string `pulumi:"capabilityOrf"`
	// Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
	CapabilityOrf6 *string `pulumi:"capabilityOrf6"`
	// Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityRouteRefresh *string `pulumi:"capabilityRouteRefresh"`
	// IPv6 conditional advertisement. The structure of `conditionalAdvertise6` block is documented below.
	ConditionalAdvertise6s []NeighborConditionalAdvertise6 `pulumi:"conditionalAdvertise6s"`
	// Conditional advertisement. The structure of `conditionalAdvertise` block is documented below.
	ConditionalAdvertises []NeighborConditionalAdvertise `pulumi:"conditionalAdvertises"`
	// Interval (sec) for connect timer.
	ConnectTimer *int `pulumi:"connectTimer"`
	// Route map to specify criteria to originate IPv4 default.
	DefaultOriginateRoutemap *string `pulumi:"defaultOriginateRoutemap"`
	// Route map to specify criteria to originate IPv6 default.
	DefaultOriginateRoutemap6 *string `pulumi:"defaultOriginateRoutemap6"`
	// Description.
	Description *string `pulumi:"description"`
	// Filter for IPv4 updates from this neighbor.
	DistributeListIn *string `pulumi:"distributeListIn"`
	// Filter for IPv6 updates from this neighbor.
	DistributeListIn6 *string `pulumi:"distributeListIn6"`
	// Filter for VPNv4 updates from this neighbor.
	DistributeListInVpnv4 *string `pulumi:"distributeListInVpnv4"`
	// Filter for VPNv6 updates from this neighbor.
	DistributeListInVpnv6 *string `pulumi:"distributeListInVpnv6"`
	// Filter for IPv4 updates to this neighbor.
	DistributeListOut *string `pulumi:"distributeListOut"`
	// Filter for IPv6 updates to this neighbor.
	DistributeListOut6 *string `pulumi:"distributeListOut6"`
	// Filter for VPNv4 updates to this neighbor.
	DistributeListOutVpnv4 *string `pulumi:"distributeListOutVpnv4"`
	// Filter for VPNv6 updates to this neighbor.
	DistributeListOutVpnv6 *string `pulumi:"distributeListOutVpnv6"`
	// Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
	DontCapabilityNegotiate *string `pulumi:"dontCapabilityNegotiate"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
	EbgpEnforceMultihop *string `pulumi:"ebgpEnforceMultihop"`
	// EBGP multihop TTL for this peer.
	EbgpMultihopTtl *int `pulumi:"ebgpMultihopTtl"`
	// BGP filter for IPv4 inbound routes.
	FilterListIn *string `pulumi:"filterListIn"`
	// BGP filter for IPv6 inbound routes.
	FilterListIn6 *string `pulumi:"filterListIn6"`
	// BGP filter for VPNv4 inbound routes.
	FilterListInVpnv4 *string `pulumi:"filterListInVpnv4"`
	// BGP filter for VPNv6 inbound routes.
	FilterListInVpnv6 *string `pulumi:"filterListInVpnv6"`
	// BGP filter for IPv4 outbound routes.
	FilterListOut *string `pulumi:"filterListOut"`
	// BGP filter for IPv6 outbound routes.
	FilterListOut6 *string `pulumi:"filterListOut6"`
	// BGP filter for VPNv4 outbound routes.
	FilterListOutVpnv4 *string `pulumi:"filterListOutVpnv4"`
	// BGP filter for VPNv6 outbound routes.
	FilterListOutVpnv6 *string `pulumi:"filterListOutVpnv6"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Interval (sec) before peer considered dead.
	HoldtimeTimer *int `pulumi:"holdtimeTimer"`
	// Interface
	Interface *string `pulumi:"interface"`
	// IP/IPv6 address of neighbor.
	Ip string `pulumi:"ip"`
	// Keep alive timer interval (sec).
	KeepAliveTimer *int `pulumi:"keepAliveTimer"`
	// Enable/disable failover upon link down. Valid values: `enable`, `disable`.
	LinkDownFailover *string `pulumi:"linkDownFailover"`
	// Local AS number of neighbor.
	LocalAs *int `pulumi:"localAs"`
	// Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
	LocalAsNoPrepend *string `pulumi:"localAsNoPrepend"`
	// Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
	LocalAsReplaceAs *string `pulumi:"localAsReplaceAs"`
	// Maximum number of IPv4 prefixes to accept from this peer.
	MaximumPrefix *int `pulumi:"maximumPrefix"`
	// Maximum number of IPv6 prefixes to accept from this peer.
	MaximumPrefix6 *int `pulumi:"maximumPrefix6"`
	// Maximum number of L2VPN EVPN prefixes to accept from this peer.
	MaximumPrefixEvpn *int `pulumi:"maximumPrefixEvpn"`
	// Maximum IPv4 prefix threshold value (1 - 100 percent).
	MaximumPrefixThreshold *int `pulumi:"maximumPrefixThreshold"`
	// Maximum IPv6 prefix threshold value (1 - 100 percent).
	MaximumPrefixThreshold6 *int `pulumi:"maximumPrefixThreshold6"`
	// Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdEvpn *int `pulumi:"maximumPrefixThresholdEvpn"`
	// Maximum VPNv4 prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdVpnv4 *int `pulumi:"maximumPrefixThresholdVpnv4"`
	// Maximum VPNv6 prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdVpnv6 *int `pulumi:"maximumPrefixThresholdVpnv6"`
	// Maximum number of VPNv4 prefixes to accept from this peer.
	MaximumPrefixVpnv4 *int `pulumi:"maximumPrefixVpnv4"`
	// Maximum number of VPNv6 prefixes to accept from this peer.
	MaximumPrefixVpnv6 *int `pulumi:"maximumPrefixVpnv6"`
	// Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnly *string `pulumi:"maximumPrefixWarningOnly"`
	// Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnly6 *string `pulumi:"maximumPrefixWarningOnly6"`
	// Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnlyEvpn *string `pulumi:"maximumPrefixWarningOnlyEvpn"`
	// Enable/disable only giving warning message when limit is exceeded for VPNv4 routes. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnlyVpnv4 *string `pulumi:"maximumPrefixWarningOnlyVpnv4"`
	// Enable/disable warning message when limit is exceeded for VPNv6 routes. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnlyVpnv6 *string `pulumi:"maximumPrefixWarningOnlyVpnv6"`
	// Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelf *string `pulumi:"nextHopSelf"`
	// Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelf6 *string `pulumi:"nextHopSelf6"`
	// Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
	NextHopSelfRr *string `pulumi:"nextHopSelfRr"`
	// Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
	NextHopSelfRr6 *string `pulumi:"nextHopSelfRr6"`
	// Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelfVpnv4 *string `pulumi:"nextHopSelfVpnv4"`
	// Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelfVpnv6 *string `pulumi:"nextHopSelfVpnv6"`
	// Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
	OverrideCapability *string `pulumi:"overrideCapability"`
	// Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
	Passive *string `pulumi:"passive"`
	// Password used in MD5 authentication.
	Password *string `pulumi:"password"`
	// IPv4 Inbound filter for updates from this neighbor.
	PrefixListIn *string `pulumi:"prefixListIn"`
	// IPv6 Inbound filter for updates from this neighbor.
	PrefixListIn6 *string `pulumi:"prefixListIn6"`
	// Inbound filter for VPNv4 updates from this neighbor.
	PrefixListInVpnv4 *string `pulumi:"prefixListInVpnv4"`
	// Inbound filter for VPNv6 updates from this neighbor.
	PrefixListInVpnv6 *string `pulumi:"prefixListInVpnv6"`
	// IPv4 Outbound filter for updates to this neighbor.
	PrefixListOut *string `pulumi:"prefixListOut"`
	// IPv6 Outbound filter for updates to this neighbor.
	PrefixListOut6 *string `pulumi:"prefixListOut6"`
	// Outbound filter for VPNv4 updates to this neighbor.
	PrefixListOutVpnv4 *string `pulumi:"prefixListOutVpnv4"`
	// Outbound filter for VPNv6 updates to this neighbor.
	PrefixListOutVpnv6 *string `pulumi:"prefixListOutVpnv6"`
	// AS number of neighbor.
	RemoteAs *int `pulumi:"remoteAs"`
	// Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAs *string `pulumi:"removePrivateAs"`
	// Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAs6 *string `pulumi:"removePrivateAs6"`
	// Enable/disable removing private AS number from L2VPN EVPN outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAsEvpn *string `pulumi:"removePrivateAsEvpn"`
	// Enable/disable remove private AS number from VPNv4 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAsVpnv4 *string `pulumi:"removePrivateAsVpnv4"`
	// Enable/disable to remove private AS number from VPNv6 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAsVpnv6 *string `pulumi:"removePrivateAsVpnv6"`
	// Graceful restart delay time (sec, 0 = global default).
	RestartTime *int `pulumi:"restartTime"`
	// Time to retain stale routes.
	RetainStaleTime *int `pulumi:"retainStaleTime"`
	// IPv4 Inbound route map filter.
	RouteMapIn *string `pulumi:"routeMapIn"`
	// IPv6 Inbound route map filter.
	RouteMapIn6 *string `pulumi:"routeMapIn6"`
	// L2VPN EVPN inbound route map filter.
	RouteMapInEvpn *string `pulumi:"routeMapInEvpn"`
	// VPNv4 inbound route map filter.
	RouteMapInVpnv4 *string `pulumi:"routeMapInVpnv4"`
	// VPNv6 inbound route map filter.
	RouteMapInVpnv6 *string `pulumi:"routeMapInVpnv6"`
	// IPv4 Outbound route map filter.
	RouteMapOut *string `pulumi:"routeMapOut"`
	// IPv6 Outbound route map filter.
	RouteMapOut6 *string `pulumi:"routeMapOut6"`
	// IPv6 outbound route map filter if the peer is preferred.
	RouteMapOut6Preferable *string `pulumi:"routeMapOut6Preferable"`
	// L2VPN EVPN outbound route map filter.
	RouteMapOutEvpn *string `pulumi:"routeMapOutEvpn"`
	// IPv4 outbound route map filter if the peer is preferred.
	RouteMapOutPreferable *string `pulumi:"routeMapOutPreferable"`
	// VPNv4 outbound route map filter.
	RouteMapOutVpnv4 *string `pulumi:"routeMapOutVpnv4"`
	// VPNv4 outbound route map filter if the peer is preferred.
	RouteMapOutVpnv4Preferable *string `pulumi:"routeMapOutVpnv4Preferable"`
	// VPNv6 outbound route map filter.
	RouteMapOutVpnv6 *string `pulumi:"routeMapOutVpnv6"`
	// VPNv6 outbound route map filter if this neighbor is preferred.
	RouteMapOutVpnv6Preferable *string `pulumi:"routeMapOutVpnv6Preferable"`
	// Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
	RouteReflectorClient *string `pulumi:"routeReflectorClient"`
	// Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
	RouteReflectorClient6 *string `pulumi:"routeReflectorClient6"`
	// Enable/disable L2VPN EVPN AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
	RouteReflectorClientEvpn *string `pulumi:"routeReflectorClientEvpn"`
	// Enable/disable VPNv4 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
	RouteReflectorClientVpnv4 *string `pulumi:"routeReflectorClientVpnv4"`
	// Enable/disable VPNv6 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
	RouteReflectorClientVpnv6 *string `pulumi:"routeReflectorClientVpnv6"`
	// Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
	RouteServerClient *string `pulumi:"routeServerClient"`
	// Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
	RouteServerClient6 *string `pulumi:"routeServerClient6"`
	// Enable/disable L2VPN EVPN AS route server client for this neighbor. Valid values: `enable`, `disable`.
	RouteServerClientEvpn *string `pulumi:"routeServerClientEvpn"`
	// Enable/disable VPNv4 AS route server client for this neighbor. Valid values: `enable`, `disable`.
	RouteServerClientVpnv4 *string `pulumi:"routeServerClientVpnv4"`
	// Enable/disable VPNv6 AS route server client for this neighbor. Valid values: `enable`, `disable`.
	RouteServerClientVpnv6 *string `pulumi:"routeServerClientVpnv6"`
	// IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunity *string `pulumi:"sendCommunity"`
	// IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunity6 *string `pulumi:"sendCommunity6"`
	// Enable/disable sending community attribute to neighbor for L2VPN EVPN address family. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunityEvpn *string `pulumi:"sendCommunityEvpn"`
	// Send community attribute to neighbor for VPNv4 address family. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunityVpnv4 *string `pulumi:"sendCommunityVpnv4"`
	// Enable/disable sending community attribute to this neighbor for VPNv6 address family. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunityVpnv6 *string `pulumi:"sendCommunityVpnv6"`
	// Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
	Shutdown *string `pulumi:"shutdown"`
	// Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfiguration *string `pulumi:"softReconfiguration"`
	// Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfiguration6 *string `pulumi:"softReconfiguration6"`
	// Enable/disable L2VPN EVPN inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfigurationEvpn *string `pulumi:"softReconfigurationEvpn"`
	// Enable/disable allow VPNv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfigurationVpnv4 *string `pulumi:"softReconfigurationVpnv4"`
	// Enable/disable VPNv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfigurationVpnv6 *string `pulumi:"softReconfigurationVpnv6"`
	// Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
	StaleRoute *string `pulumi:"staleRoute"`
	// Enable/disable strict capability matching. Valid values: `enable`, `disable`.
	StrictCapabilityMatch *string `pulumi:"strictCapabilityMatch"`
	// IPv4 Route map to selectively unsuppress suppressed routes.
	UnsuppressMap *string `pulumi:"unsuppressMap"`
	// IPv6 Route map to selectively unsuppress suppressed routes.
	UnsuppressMap6 *string `pulumi:"unsuppressMap6"`
	// Interface to use as source IP/IPv6 address of TCP connections.
	UpdateSource *string `pulumi:"updateSource"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Neighbor weight.
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a Neighbor resource.
type NeighborArgs struct {
	// Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
	Activate pulumi.StringPtrInput
	// Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
	Activate6 pulumi.StringPtrInput
	// Enable/disable address family L2VPN EVPN for this neighbor. Valid values: `enable`, `disable`.
	ActivateEvpn pulumi.StringPtrInput
	// Enable/disable address family VPNv4 for this neighbor. Valid values: `enable`, `disable`.
	ActivateVpnv4 pulumi.StringPtrInput
	// Enable/disable address family VPNv6 for this neighbor. Valid values: `enable`, `disable`.
	ActivateVpnv6 pulumi.StringPtrInput
	// Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPath pulumi.StringPtrInput
	// Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPath6 pulumi.StringPtrInput
	// Enable/disable VPNv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPathVpnv4 pulumi.StringPtrInput
	// Enable/disable VPNv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
	AdditionalPathVpnv6 pulumi.StringPtrInput
	// Number of IPv4 additional paths that can be advertised to this neighbor.
	AdvAdditionalPath pulumi.IntPtrInput
	// Number of IPv6 additional paths that can be advertised to this neighbor.
	AdvAdditionalPath6 pulumi.IntPtrInput
	// Number of VPNv4 additional paths that can be advertised to this neighbor.
	AdvAdditionalPathVpnv4 pulumi.IntPtrInput
	// Number of VPNv6 additional paths that can be advertised to this neighbor.
	AdvAdditionalPathVpnv6 pulumi.IntPtrInput
	// Minimum interval (sec) between sending updates.
	AdvertisementInterval pulumi.IntPtrInput
	// IPv4 The maximum number of occurrence of my AS number allowed.
	AllowasIn pulumi.IntPtrInput
	// IPv6 The maximum number of occurrence of my AS number allowed.
	AllowasIn6 pulumi.IntPtrInput
	// Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
	AllowasInEnable pulumi.StringPtrInput
	// Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
	AllowasInEnable6 pulumi.StringPtrInput
	// Enable/disable to allow my AS in AS path for L2VPN EVPN route. Valid values: `enable`, `disable`.
	AllowasInEnableEvpn pulumi.StringPtrInput
	// Enable/disable to allow my AS in AS path for VPNv4 route. Valid values: `enable`, `disable`.
	AllowasInEnableVpnv4 pulumi.StringPtrInput
	// Enable/disable use of my AS in AS path for VPNv6 route. Valid values: `enable`, `disable`.
	AllowasInEnableVpnv6 pulumi.StringPtrInput
	// The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
	AllowasInEvpn pulumi.IntPtrInput
	// The maximum number of occurrence of my AS number allowed for VPNv4 route.
	AllowasInVpnv4 pulumi.IntPtrInput
	// The maximum number of occurrence of my AS number allowed for VPNv6 route.
	AllowasInVpnv6 pulumi.IntPtrInput
	// Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
	AsOverride pulumi.StringPtrInput
	// Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
	AsOverride6 pulumi.StringPtrInput
	// IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchanged pulumi.StringPtrInput
	// IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchanged6 pulumi.StringPtrInput
	// List of attributes that should be unchanged for VPNv4 route. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchangedVpnv4 pulumi.StringPtrInput
	// List of attributes that should not be changed for VPNv6 route. Valid values: `as-path`, `med`, `next-hop`.
	AttributeUnchangedVpnv6 pulumi.StringPtrInput
	// Key-chain name for TCP authentication options.
	AuthOptions pulumi.StringPtrInput
	// Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
	Bfd pulumi.StringPtrInput
	// Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
	CapabilityDefaultOriginate pulumi.StringPtrInput
	// Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
	CapabilityDefaultOriginate6 pulumi.StringPtrInput
	// Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityDynamic pulumi.StringPtrInput
	// Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestart pulumi.StringPtrInput
	// Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestart6 pulumi.StringPtrInput
	// Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestartEvpn pulumi.StringPtrInput
	// Enable/disable advertise VPNv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestartVpnv4 pulumi.StringPtrInput
	// Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityGracefulRestartVpnv6 pulumi.StringPtrInput
	// Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
	CapabilityOrf pulumi.StringPtrInput
	// Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
	CapabilityOrf6 pulumi.StringPtrInput
	// Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
	CapabilityRouteRefresh pulumi.StringPtrInput
	// IPv6 conditional advertisement. The structure of `conditionalAdvertise6` block is documented below.
	ConditionalAdvertise6s NeighborConditionalAdvertise6ArrayInput
	// Conditional advertisement. The structure of `conditionalAdvertise` block is documented below.
	ConditionalAdvertises NeighborConditionalAdvertiseArrayInput
	// Interval (sec) for connect timer.
	ConnectTimer pulumi.IntPtrInput
	// Route map to specify criteria to originate IPv4 default.
	DefaultOriginateRoutemap pulumi.StringPtrInput
	// Route map to specify criteria to originate IPv6 default.
	DefaultOriginateRoutemap6 pulumi.StringPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// Filter for IPv4 updates from this neighbor.
	DistributeListIn pulumi.StringPtrInput
	// Filter for IPv6 updates from this neighbor.
	DistributeListIn6 pulumi.StringPtrInput
	// Filter for VPNv4 updates from this neighbor.
	DistributeListInVpnv4 pulumi.StringPtrInput
	// Filter for VPNv6 updates from this neighbor.
	DistributeListInVpnv6 pulumi.StringPtrInput
	// Filter for IPv4 updates to this neighbor.
	DistributeListOut pulumi.StringPtrInput
	// Filter for IPv6 updates to this neighbor.
	DistributeListOut6 pulumi.StringPtrInput
	// Filter for VPNv4 updates to this neighbor.
	DistributeListOutVpnv4 pulumi.StringPtrInput
	// Filter for VPNv6 updates to this neighbor.
	DistributeListOutVpnv6 pulumi.StringPtrInput
	// Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
	DontCapabilityNegotiate pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
	EbgpEnforceMultihop pulumi.StringPtrInput
	// EBGP multihop TTL for this peer.
	EbgpMultihopTtl pulumi.IntPtrInput
	// BGP filter for IPv4 inbound routes.
	FilterListIn pulumi.StringPtrInput
	// BGP filter for IPv6 inbound routes.
	FilterListIn6 pulumi.StringPtrInput
	// BGP filter for VPNv4 inbound routes.
	FilterListInVpnv4 pulumi.StringPtrInput
	// BGP filter for VPNv6 inbound routes.
	FilterListInVpnv6 pulumi.StringPtrInput
	// BGP filter for IPv4 outbound routes.
	FilterListOut pulumi.StringPtrInput
	// BGP filter for IPv6 outbound routes.
	FilterListOut6 pulumi.StringPtrInput
	// BGP filter for VPNv4 outbound routes.
	FilterListOutVpnv4 pulumi.StringPtrInput
	// BGP filter for VPNv6 outbound routes.
	FilterListOutVpnv6 pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Interval (sec) before peer considered dead.
	HoldtimeTimer pulumi.IntPtrInput
	// Interface
	Interface pulumi.StringPtrInput
	// IP/IPv6 address of neighbor.
	Ip pulumi.StringInput
	// Keep alive timer interval (sec).
	KeepAliveTimer pulumi.IntPtrInput
	// Enable/disable failover upon link down. Valid values: `enable`, `disable`.
	LinkDownFailover pulumi.StringPtrInput
	// Local AS number of neighbor.
	LocalAs pulumi.IntPtrInput
	// Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
	LocalAsNoPrepend pulumi.StringPtrInput
	// Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
	LocalAsReplaceAs pulumi.StringPtrInput
	// Maximum number of IPv4 prefixes to accept from this peer.
	MaximumPrefix pulumi.IntPtrInput
	// Maximum number of IPv6 prefixes to accept from this peer.
	MaximumPrefix6 pulumi.IntPtrInput
	// Maximum number of L2VPN EVPN prefixes to accept from this peer.
	MaximumPrefixEvpn pulumi.IntPtrInput
	// Maximum IPv4 prefix threshold value (1 - 100 percent).
	MaximumPrefixThreshold pulumi.IntPtrInput
	// Maximum IPv6 prefix threshold value (1 - 100 percent).
	MaximumPrefixThreshold6 pulumi.IntPtrInput
	// Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdEvpn pulumi.IntPtrInput
	// Maximum VPNv4 prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdVpnv4 pulumi.IntPtrInput
	// Maximum VPNv6 prefix threshold value (1 - 100 percent).
	MaximumPrefixThresholdVpnv6 pulumi.IntPtrInput
	// Maximum number of VPNv4 prefixes to accept from this peer.
	MaximumPrefixVpnv4 pulumi.IntPtrInput
	// Maximum number of VPNv6 prefixes to accept from this peer.
	MaximumPrefixVpnv6 pulumi.IntPtrInput
	// Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnly pulumi.StringPtrInput
	// Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnly6 pulumi.StringPtrInput
	// Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnlyEvpn pulumi.StringPtrInput
	// Enable/disable only giving warning message when limit is exceeded for VPNv4 routes. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnlyVpnv4 pulumi.StringPtrInput
	// Enable/disable warning message when limit is exceeded for VPNv6 routes. Valid values: `enable`, `disable`.
	MaximumPrefixWarningOnlyVpnv6 pulumi.StringPtrInput
	// Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelf pulumi.StringPtrInput
	// Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelf6 pulumi.StringPtrInput
	// Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
	NextHopSelfRr pulumi.StringPtrInput
	// Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
	NextHopSelfRr6 pulumi.StringPtrInput
	// Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelfVpnv4 pulumi.StringPtrInput
	// Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor. Valid values: `enable`, `disable`.
	NextHopSelfVpnv6 pulumi.StringPtrInput
	// Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
	OverrideCapability pulumi.StringPtrInput
	// Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
	Passive pulumi.StringPtrInput
	// Password used in MD5 authentication.
	Password pulumi.StringPtrInput
	// IPv4 Inbound filter for updates from this neighbor.
	PrefixListIn pulumi.StringPtrInput
	// IPv6 Inbound filter for updates from this neighbor.
	PrefixListIn6 pulumi.StringPtrInput
	// Inbound filter for VPNv4 updates from this neighbor.
	PrefixListInVpnv4 pulumi.StringPtrInput
	// Inbound filter for VPNv6 updates from this neighbor.
	PrefixListInVpnv6 pulumi.StringPtrInput
	// IPv4 Outbound filter for updates to this neighbor.
	PrefixListOut pulumi.StringPtrInput
	// IPv6 Outbound filter for updates to this neighbor.
	PrefixListOut6 pulumi.StringPtrInput
	// Outbound filter for VPNv4 updates to this neighbor.
	PrefixListOutVpnv4 pulumi.StringPtrInput
	// Outbound filter for VPNv6 updates to this neighbor.
	PrefixListOutVpnv6 pulumi.StringPtrInput
	// AS number of neighbor.
	RemoteAs pulumi.IntPtrInput
	// Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAs pulumi.StringPtrInput
	// Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAs6 pulumi.StringPtrInput
	// Enable/disable removing private AS number from L2VPN EVPN outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAsEvpn pulumi.StringPtrInput
	// Enable/disable remove private AS number from VPNv4 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAsVpnv4 pulumi.StringPtrInput
	// Enable/disable to remove private AS number from VPNv6 outbound updates. Valid values: `enable`, `disable`.
	RemovePrivateAsVpnv6 pulumi.StringPtrInput
	// Graceful restart delay time (sec, 0 = global default).
	RestartTime pulumi.IntPtrInput
	// Time to retain stale routes.
	RetainStaleTime pulumi.IntPtrInput
	// IPv4 Inbound route map filter.
	RouteMapIn pulumi.StringPtrInput
	// IPv6 Inbound route map filter.
	RouteMapIn6 pulumi.StringPtrInput
	// L2VPN EVPN inbound route map filter.
	RouteMapInEvpn pulumi.StringPtrInput
	// VPNv4 inbound route map filter.
	RouteMapInVpnv4 pulumi.StringPtrInput
	// VPNv6 inbound route map filter.
	RouteMapInVpnv6 pulumi.StringPtrInput
	// IPv4 Outbound route map filter.
	RouteMapOut pulumi.StringPtrInput
	// IPv6 Outbound route map filter.
	RouteMapOut6 pulumi.StringPtrInput
	// IPv6 outbound route map filter if the peer is preferred.
	RouteMapOut6Preferable pulumi.StringPtrInput
	// L2VPN EVPN outbound route map filter.
	RouteMapOutEvpn pulumi.StringPtrInput
	// IPv4 outbound route map filter if the peer is preferred.
	RouteMapOutPreferable pulumi.StringPtrInput
	// VPNv4 outbound route map filter.
	RouteMapOutVpnv4 pulumi.StringPtrInput
	// VPNv4 outbound route map filter if the peer is preferred.
	RouteMapOutVpnv4Preferable pulumi.StringPtrInput
	// VPNv6 outbound route map filter.
	RouteMapOutVpnv6 pulumi.StringPtrInput
	// VPNv6 outbound route map filter if this neighbor is preferred.
	RouteMapOutVpnv6Preferable pulumi.StringPtrInput
	// Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
	RouteReflectorClient pulumi.StringPtrInput
	// Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
	RouteReflectorClient6 pulumi.StringPtrInput
	// Enable/disable L2VPN EVPN AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
	RouteReflectorClientEvpn pulumi.StringPtrInput
	// Enable/disable VPNv4 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
	RouteReflectorClientVpnv4 pulumi.StringPtrInput
	// Enable/disable VPNv6 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
	RouteReflectorClientVpnv6 pulumi.StringPtrInput
	// Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
	RouteServerClient pulumi.StringPtrInput
	// Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
	RouteServerClient6 pulumi.StringPtrInput
	// Enable/disable L2VPN EVPN AS route server client for this neighbor. Valid values: `enable`, `disable`.
	RouteServerClientEvpn pulumi.StringPtrInput
	// Enable/disable VPNv4 AS route server client for this neighbor. Valid values: `enable`, `disable`.
	RouteServerClientVpnv4 pulumi.StringPtrInput
	// Enable/disable VPNv6 AS route server client for this neighbor. Valid values: `enable`, `disable`.
	RouteServerClientVpnv6 pulumi.StringPtrInput
	// IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunity pulumi.StringPtrInput
	// IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunity6 pulumi.StringPtrInput
	// Enable/disable sending community attribute to neighbor for L2VPN EVPN address family. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunityEvpn pulumi.StringPtrInput
	// Send community attribute to neighbor for VPNv4 address family. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunityVpnv4 pulumi.StringPtrInput
	// Enable/disable sending community attribute to this neighbor for VPNv6 address family. Valid values: `standard`, `extended`, `both`, `disable`.
	SendCommunityVpnv6 pulumi.StringPtrInput
	// Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
	Shutdown pulumi.StringPtrInput
	// Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfiguration pulumi.StringPtrInput
	// Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfiguration6 pulumi.StringPtrInput
	// Enable/disable L2VPN EVPN inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfigurationEvpn pulumi.StringPtrInput
	// Enable/disable allow VPNv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfigurationVpnv4 pulumi.StringPtrInput
	// Enable/disable VPNv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
	SoftReconfigurationVpnv6 pulumi.StringPtrInput
	// Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
	StaleRoute pulumi.StringPtrInput
	// Enable/disable strict capability matching. Valid values: `enable`, `disable`.
	StrictCapabilityMatch pulumi.StringPtrInput
	// IPv4 Route map to selectively unsuppress suppressed routes.
	UnsuppressMap pulumi.StringPtrInput
	// IPv6 Route map to selectively unsuppress suppressed routes.
	UnsuppressMap6 pulumi.StringPtrInput
	// Interface to use as source IP/IPv6 address of TCP connections.
	UpdateSource pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Neighbor weight.
	Weight pulumi.IntPtrInput
}

func (NeighborArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*neighborArgs)(nil)).Elem()
}

type NeighborInput interface {
	pulumi.Input

	ToNeighborOutput() NeighborOutput
	ToNeighborOutputWithContext(ctx context.Context) NeighborOutput
}

func (*Neighbor) ElementType() reflect.Type {
	return reflect.TypeOf((**Neighbor)(nil)).Elem()
}

func (i *Neighbor) ToNeighborOutput() NeighborOutput {
	return i.ToNeighborOutputWithContext(context.Background())
}

func (i *Neighbor) ToNeighborOutputWithContext(ctx context.Context) NeighborOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NeighborOutput)
}

// NeighborArrayInput is an input type that accepts NeighborArray and NeighborArrayOutput values.
// You can construct a concrete instance of `NeighborArrayInput` via:
//
//	NeighborArray{ NeighborArgs{...} }
type NeighborArrayInput interface {
	pulumi.Input

	ToNeighborArrayOutput() NeighborArrayOutput
	ToNeighborArrayOutputWithContext(context.Context) NeighborArrayOutput
}

type NeighborArray []NeighborInput

func (NeighborArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Neighbor)(nil)).Elem()
}

func (i NeighborArray) ToNeighborArrayOutput() NeighborArrayOutput {
	return i.ToNeighborArrayOutputWithContext(context.Background())
}

func (i NeighborArray) ToNeighborArrayOutputWithContext(ctx context.Context) NeighborArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NeighborArrayOutput)
}

// NeighborMapInput is an input type that accepts NeighborMap and NeighborMapOutput values.
// You can construct a concrete instance of `NeighborMapInput` via:
//
//	NeighborMap{ "key": NeighborArgs{...} }
type NeighborMapInput interface {
	pulumi.Input

	ToNeighborMapOutput() NeighborMapOutput
	ToNeighborMapOutputWithContext(context.Context) NeighborMapOutput
}

type NeighborMap map[string]NeighborInput

func (NeighborMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Neighbor)(nil)).Elem()
}

func (i NeighborMap) ToNeighborMapOutput() NeighborMapOutput {
	return i.ToNeighborMapOutputWithContext(context.Background())
}

func (i NeighborMap) ToNeighborMapOutputWithContext(ctx context.Context) NeighborMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NeighborMapOutput)
}

type NeighborOutput struct{ *pulumi.OutputState }

func (NeighborOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Neighbor)(nil)).Elem()
}

func (o NeighborOutput) ToNeighborOutput() NeighborOutput {
	return o
}

func (o NeighborOutput) ToNeighborOutputWithContext(ctx context.Context) NeighborOutput {
	return o
}

// Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) Activate() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.Activate }).(pulumi.StringOutput)
}

// Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) Activate6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.Activate6 }).(pulumi.StringOutput)
}

// Enable/disable address family L2VPN EVPN for this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) ActivateEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.ActivateEvpn }).(pulumi.StringOutput)
}

// Enable/disable address family VPNv4 for this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) ActivateVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.ActivateVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable address family VPNv6 for this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) ActivateVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.ActivateVpnv6 }).(pulumi.StringOutput)
}

// Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
func (o NeighborOutput) AdditionalPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.AdditionalPath }).(pulumi.StringOutput)
}

// Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
func (o NeighborOutput) AdditionalPath6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.AdditionalPath6 }).(pulumi.StringOutput)
}

// Enable/disable VPNv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
func (o NeighborOutput) AdditionalPathVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.AdditionalPathVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable VPNv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
func (o NeighborOutput) AdditionalPathVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.AdditionalPathVpnv6 }).(pulumi.StringOutput)
}

// Number of IPv4 additional paths that can be advertised to this neighbor.
func (o NeighborOutput) AdvAdditionalPath() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.AdvAdditionalPath }).(pulumi.IntOutput)
}

// Number of IPv6 additional paths that can be advertised to this neighbor.
func (o NeighborOutput) AdvAdditionalPath6() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.AdvAdditionalPath6 }).(pulumi.IntOutput)
}

// Number of VPNv4 additional paths that can be advertised to this neighbor.
func (o NeighborOutput) AdvAdditionalPathVpnv4() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.AdvAdditionalPathVpnv4 }).(pulumi.IntOutput)
}

// Number of VPNv6 additional paths that can be advertised to this neighbor.
func (o NeighborOutput) AdvAdditionalPathVpnv6() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.AdvAdditionalPathVpnv6 }).(pulumi.IntOutput)
}

// Minimum interval (sec) between sending updates.
func (o NeighborOutput) AdvertisementInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.AdvertisementInterval }).(pulumi.IntOutput)
}

// IPv4 The maximum number of occurrence of my AS number allowed.
func (o NeighborOutput) AllowasIn() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.AllowasIn }).(pulumi.IntOutput)
}

// IPv6 The maximum number of occurrence of my AS number allowed.
func (o NeighborOutput) AllowasIn6() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.AllowasIn6 }).(pulumi.IntOutput)
}

// Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
func (o NeighborOutput) AllowasInEnable() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.AllowasInEnable }).(pulumi.StringOutput)
}

// Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
func (o NeighborOutput) AllowasInEnable6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.AllowasInEnable6 }).(pulumi.StringOutput)
}

// Enable/disable to allow my AS in AS path for L2VPN EVPN route. Valid values: `enable`, `disable`.
func (o NeighborOutput) AllowasInEnableEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.AllowasInEnableEvpn }).(pulumi.StringOutput)
}

// Enable/disable to allow my AS in AS path for VPNv4 route. Valid values: `enable`, `disable`.
func (o NeighborOutput) AllowasInEnableVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.AllowasInEnableVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable use of my AS in AS path for VPNv6 route. Valid values: `enable`, `disable`.
func (o NeighborOutput) AllowasInEnableVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.AllowasInEnableVpnv6 }).(pulumi.StringOutput)
}

// The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
func (o NeighborOutput) AllowasInEvpn() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.AllowasInEvpn }).(pulumi.IntOutput)
}

// The maximum number of occurrence of my AS number allowed for VPNv4 route.
func (o NeighborOutput) AllowasInVpnv4() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.AllowasInVpnv4 }).(pulumi.IntOutput)
}

// The maximum number of occurrence of my AS number allowed for VPNv6 route.
func (o NeighborOutput) AllowasInVpnv6() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.AllowasInVpnv6 }).(pulumi.IntOutput)
}

// Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
func (o NeighborOutput) AsOverride() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.AsOverride }).(pulumi.StringOutput)
}

// Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
func (o NeighborOutput) AsOverride6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.AsOverride6 }).(pulumi.StringOutput)
}

// IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
func (o NeighborOutput) AttributeUnchanged() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.AttributeUnchanged }).(pulumi.StringOutput)
}

// IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
func (o NeighborOutput) AttributeUnchanged6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.AttributeUnchanged6 }).(pulumi.StringOutput)
}

// List of attributes that should be unchanged for VPNv4 route. Valid values: `as-path`, `med`, `next-hop`.
func (o NeighborOutput) AttributeUnchangedVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.AttributeUnchangedVpnv4 }).(pulumi.StringOutput)
}

// List of attributes that should not be changed for VPNv6 route. Valid values: `as-path`, `med`, `next-hop`.
func (o NeighborOutput) AttributeUnchangedVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.AttributeUnchangedVpnv6 }).(pulumi.StringOutput)
}

// Key-chain name for TCP authentication options.
func (o NeighborOutput) AuthOptions() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.AuthOptions }).(pulumi.StringOutput)
}

// Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) Bfd() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.Bfd }).(pulumi.StringOutput)
}

// Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) CapabilityDefaultOriginate() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.CapabilityDefaultOriginate }).(pulumi.StringOutput)
}

// Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) CapabilityDefaultOriginate6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.CapabilityDefaultOriginate6 }).(pulumi.StringOutput)
}

// Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) CapabilityDynamic() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.CapabilityDynamic }).(pulumi.StringOutput)
}

// Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) CapabilityGracefulRestart() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.CapabilityGracefulRestart }).(pulumi.StringOutput)
}

// Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) CapabilityGracefulRestart6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.CapabilityGracefulRestart6 }).(pulumi.StringOutput)
}

// Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) CapabilityGracefulRestartEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.CapabilityGracefulRestartEvpn }).(pulumi.StringOutput)
}

// Enable/disable advertise VPNv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) CapabilityGracefulRestartVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.CapabilityGracefulRestartVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) CapabilityGracefulRestartVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.CapabilityGracefulRestartVpnv6 }).(pulumi.StringOutput)
}

// Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
func (o NeighborOutput) CapabilityOrf() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.CapabilityOrf }).(pulumi.StringOutput)
}

// Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
func (o NeighborOutput) CapabilityOrf6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.CapabilityOrf6 }).(pulumi.StringOutput)
}

// Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) CapabilityRouteRefresh() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.CapabilityRouteRefresh }).(pulumi.StringOutput)
}

// IPv6 conditional advertisement. The structure of `conditionalAdvertise6` block is documented below.
func (o NeighborOutput) ConditionalAdvertise6s() NeighborConditionalAdvertise6ArrayOutput {
	return o.ApplyT(func(v *Neighbor) NeighborConditionalAdvertise6ArrayOutput { return v.ConditionalAdvertise6s }).(NeighborConditionalAdvertise6ArrayOutput)
}

// Conditional advertisement. The structure of `conditionalAdvertise` block is documented below.
func (o NeighborOutput) ConditionalAdvertises() NeighborConditionalAdvertiseArrayOutput {
	return o.ApplyT(func(v *Neighbor) NeighborConditionalAdvertiseArrayOutput { return v.ConditionalAdvertises }).(NeighborConditionalAdvertiseArrayOutput)
}

// Interval (sec) for connect timer.
func (o NeighborOutput) ConnectTimer() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.ConnectTimer }).(pulumi.IntOutput)
}

// Route map to specify criteria to originate IPv4 default.
func (o NeighborOutput) DefaultOriginateRoutemap() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.DefaultOriginateRoutemap }).(pulumi.StringOutput)
}

// Route map to specify criteria to originate IPv6 default.
func (o NeighborOutput) DefaultOriginateRoutemap6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.DefaultOriginateRoutemap6 }).(pulumi.StringOutput)
}

// Description.
func (o NeighborOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Filter for IPv4 updates from this neighbor.
func (o NeighborOutput) DistributeListIn() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.DistributeListIn }).(pulumi.StringOutput)
}

// Filter for IPv6 updates from this neighbor.
func (o NeighborOutput) DistributeListIn6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.DistributeListIn6 }).(pulumi.StringOutput)
}

// Filter for VPNv4 updates from this neighbor.
func (o NeighborOutput) DistributeListInVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.DistributeListInVpnv4 }).(pulumi.StringOutput)
}

// Filter for VPNv6 updates from this neighbor.
func (o NeighborOutput) DistributeListInVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.DistributeListInVpnv6 }).(pulumi.StringOutput)
}

// Filter for IPv4 updates to this neighbor.
func (o NeighborOutput) DistributeListOut() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.DistributeListOut }).(pulumi.StringOutput)
}

// Filter for IPv6 updates to this neighbor.
func (o NeighborOutput) DistributeListOut6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.DistributeListOut6 }).(pulumi.StringOutput)
}

// Filter for VPNv4 updates to this neighbor.
func (o NeighborOutput) DistributeListOutVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.DistributeListOutVpnv4 }).(pulumi.StringOutput)
}

// Filter for VPNv6 updates to this neighbor.
func (o NeighborOutput) DistributeListOutVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.DistributeListOutVpnv6 }).(pulumi.StringOutput)
}

// Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
func (o NeighborOutput) DontCapabilityNegotiate() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.DontCapabilityNegotiate }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o NeighborOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
func (o NeighborOutput) EbgpEnforceMultihop() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.EbgpEnforceMultihop }).(pulumi.StringOutput)
}

// EBGP multihop TTL for this peer.
func (o NeighborOutput) EbgpMultihopTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.EbgpMultihopTtl }).(pulumi.IntOutput)
}

// BGP filter for IPv4 inbound routes.
func (o NeighborOutput) FilterListIn() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.FilterListIn }).(pulumi.StringOutput)
}

// BGP filter for IPv6 inbound routes.
func (o NeighborOutput) FilterListIn6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.FilterListIn6 }).(pulumi.StringOutput)
}

// BGP filter for VPNv4 inbound routes.
func (o NeighborOutput) FilterListInVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.FilterListInVpnv4 }).(pulumi.StringOutput)
}

// BGP filter for VPNv6 inbound routes.
func (o NeighborOutput) FilterListInVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.FilterListInVpnv6 }).(pulumi.StringOutput)
}

// BGP filter for IPv4 outbound routes.
func (o NeighborOutput) FilterListOut() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.FilterListOut }).(pulumi.StringOutput)
}

// BGP filter for IPv6 outbound routes.
func (o NeighborOutput) FilterListOut6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.FilterListOut6 }).(pulumi.StringOutput)
}

// BGP filter for VPNv4 outbound routes.
func (o NeighborOutput) FilterListOutVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.FilterListOutVpnv4 }).(pulumi.StringOutput)
}

// BGP filter for VPNv6 outbound routes.
func (o NeighborOutput) FilterListOutVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.FilterListOutVpnv6 }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o NeighborOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Interval (sec) before peer considered dead.
func (o NeighborOutput) HoldtimeTimer() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.HoldtimeTimer }).(pulumi.IntOutput)
}

// Interface
func (o NeighborOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// IP/IPv6 address of neighbor.
func (o NeighborOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// Keep alive timer interval (sec).
func (o NeighborOutput) KeepAliveTimer() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.KeepAliveTimer }).(pulumi.IntOutput)
}

// Enable/disable failover upon link down. Valid values: `enable`, `disable`.
func (o NeighborOutput) LinkDownFailover() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.LinkDownFailover }).(pulumi.StringOutput)
}

// Local AS number of neighbor.
func (o NeighborOutput) LocalAs() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.LocalAs }).(pulumi.IntOutput)
}

// Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
func (o NeighborOutput) LocalAsNoPrepend() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.LocalAsNoPrepend }).(pulumi.StringOutput)
}

// Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
func (o NeighborOutput) LocalAsReplaceAs() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.LocalAsReplaceAs }).(pulumi.StringOutput)
}

// Maximum number of IPv4 prefixes to accept from this peer.
func (o NeighborOutput) MaximumPrefix() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.MaximumPrefix }).(pulumi.IntOutput)
}

// Maximum number of IPv6 prefixes to accept from this peer.
func (o NeighborOutput) MaximumPrefix6() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.MaximumPrefix6 }).(pulumi.IntOutput)
}

// Maximum number of L2VPN EVPN prefixes to accept from this peer.
func (o NeighborOutput) MaximumPrefixEvpn() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.MaximumPrefixEvpn }).(pulumi.IntOutput)
}

// Maximum IPv4 prefix threshold value (1 - 100 percent).
func (o NeighborOutput) MaximumPrefixThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.MaximumPrefixThreshold }).(pulumi.IntOutput)
}

// Maximum IPv6 prefix threshold value (1 - 100 percent).
func (o NeighborOutput) MaximumPrefixThreshold6() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.MaximumPrefixThreshold6 }).(pulumi.IntOutput)
}

// Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
func (o NeighborOutput) MaximumPrefixThresholdEvpn() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.MaximumPrefixThresholdEvpn }).(pulumi.IntOutput)
}

// Maximum VPNv4 prefix threshold value (1 - 100 percent).
func (o NeighborOutput) MaximumPrefixThresholdVpnv4() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.MaximumPrefixThresholdVpnv4 }).(pulumi.IntOutput)
}

// Maximum VPNv6 prefix threshold value (1 - 100 percent).
func (o NeighborOutput) MaximumPrefixThresholdVpnv6() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.MaximumPrefixThresholdVpnv6 }).(pulumi.IntOutput)
}

// Maximum number of VPNv4 prefixes to accept from this peer.
func (o NeighborOutput) MaximumPrefixVpnv4() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.MaximumPrefixVpnv4 }).(pulumi.IntOutput)
}

// Maximum number of VPNv6 prefixes to accept from this peer.
func (o NeighborOutput) MaximumPrefixVpnv6() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.MaximumPrefixVpnv6 }).(pulumi.IntOutput)
}

// Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
func (o NeighborOutput) MaximumPrefixWarningOnly() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.MaximumPrefixWarningOnly }).(pulumi.StringOutput)
}

// Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
func (o NeighborOutput) MaximumPrefixWarningOnly6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.MaximumPrefixWarningOnly6 }).(pulumi.StringOutput)
}

// Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes. Valid values: `enable`, `disable`.
func (o NeighborOutput) MaximumPrefixWarningOnlyEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.MaximumPrefixWarningOnlyEvpn }).(pulumi.StringOutput)
}

// Enable/disable only giving warning message when limit is exceeded for VPNv4 routes. Valid values: `enable`, `disable`.
func (o NeighborOutput) MaximumPrefixWarningOnlyVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.MaximumPrefixWarningOnlyVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable warning message when limit is exceeded for VPNv6 routes. Valid values: `enable`, `disable`.
func (o NeighborOutput) MaximumPrefixWarningOnlyVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.MaximumPrefixWarningOnlyVpnv6 }).(pulumi.StringOutput)
}

// Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) NextHopSelf() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.NextHopSelf }).(pulumi.StringOutput)
}

// Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) NextHopSelf6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.NextHopSelf6 }).(pulumi.StringOutput)
}

// Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
func (o NeighborOutput) NextHopSelfRr() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.NextHopSelfRr }).(pulumi.StringOutput)
}

// Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
func (o NeighborOutput) NextHopSelfRr6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.NextHopSelfRr6 }).(pulumi.StringOutput)
}

// Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) NextHopSelfVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.NextHopSelfVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) NextHopSelfVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.NextHopSelfVpnv6 }).(pulumi.StringOutput)
}

// Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
func (o NeighborOutput) OverrideCapability() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.OverrideCapability }).(pulumi.StringOutput)
}

// Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) Passive() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.Passive }).(pulumi.StringOutput)
}

// Password used in MD5 authentication.
func (o NeighborOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// IPv4 Inbound filter for updates from this neighbor.
func (o NeighborOutput) PrefixListIn() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.PrefixListIn }).(pulumi.StringOutput)
}

// IPv6 Inbound filter for updates from this neighbor.
func (o NeighborOutput) PrefixListIn6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.PrefixListIn6 }).(pulumi.StringOutput)
}

// Inbound filter for VPNv4 updates from this neighbor.
func (o NeighborOutput) PrefixListInVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.PrefixListInVpnv4 }).(pulumi.StringOutput)
}

// Inbound filter for VPNv6 updates from this neighbor.
func (o NeighborOutput) PrefixListInVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.PrefixListInVpnv6 }).(pulumi.StringOutput)
}

// IPv4 Outbound filter for updates to this neighbor.
func (o NeighborOutput) PrefixListOut() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.PrefixListOut }).(pulumi.StringOutput)
}

// IPv6 Outbound filter for updates to this neighbor.
func (o NeighborOutput) PrefixListOut6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.PrefixListOut6 }).(pulumi.StringOutput)
}

// Outbound filter for VPNv4 updates to this neighbor.
func (o NeighborOutput) PrefixListOutVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.PrefixListOutVpnv4 }).(pulumi.StringOutput)
}

// Outbound filter for VPNv6 updates to this neighbor.
func (o NeighborOutput) PrefixListOutVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.PrefixListOutVpnv6 }).(pulumi.StringOutput)
}

// AS number of neighbor.
func (o NeighborOutput) RemoteAs() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.RemoteAs }).(pulumi.IntOutput)
}

// Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
func (o NeighborOutput) RemovePrivateAs() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RemovePrivateAs }).(pulumi.StringOutput)
}

// Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
func (o NeighborOutput) RemovePrivateAs6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RemovePrivateAs6 }).(pulumi.StringOutput)
}

// Enable/disable removing private AS number from L2VPN EVPN outbound updates. Valid values: `enable`, `disable`.
func (o NeighborOutput) RemovePrivateAsEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RemovePrivateAsEvpn }).(pulumi.StringOutput)
}

// Enable/disable remove private AS number from VPNv4 outbound updates. Valid values: `enable`, `disable`.
func (o NeighborOutput) RemovePrivateAsVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RemovePrivateAsVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable to remove private AS number from VPNv6 outbound updates. Valid values: `enable`, `disable`.
func (o NeighborOutput) RemovePrivateAsVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RemovePrivateAsVpnv6 }).(pulumi.StringOutput)
}

// Graceful restart delay time (sec, 0 = global default).
func (o NeighborOutput) RestartTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.RestartTime }).(pulumi.IntOutput)
}

// Time to retain stale routes.
func (o NeighborOutput) RetainStaleTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.RetainStaleTime }).(pulumi.IntOutput)
}

// IPv4 Inbound route map filter.
func (o NeighborOutput) RouteMapIn() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteMapIn }).(pulumi.StringOutput)
}

// IPv6 Inbound route map filter.
func (o NeighborOutput) RouteMapIn6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteMapIn6 }).(pulumi.StringOutput)
}

// L2VPN EVPN inbound route map filter.
func (o NeighborOutput) RouteMapInEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteMapInEvpn }).(pulumi.StringOutput)
}

// VPNv4 inbound route map filter.
func (o NeighborOutput) RouteMapInVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteMapInVpnv4 }).(pulumi.StringOutput)
}

// VPNv6 inbound route map filter.
func (o NeighborOutput) RouteMapInVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteMapInVpnv6 }).(pulumi.StringOutput)
}

// IPv4 Outbound route map filter.
func (o NeighborOutput) RouteMapOut() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteMapOut }).(pulumi.StringOutput)
}

// IPv6 Outbound route map filter.
func (o NeighborOutput) RouteMapOut6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteMapOut6 }).(pulumi.StringOutput)
}

// IPv6 outbound route map filter if the peer is preferred.
func (o NeighborOutput) RouteMapOut6Preferable() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteMapOut6Preferable }).(pulumi.StringOutput)
}

// L2VPN EVPN outbound route map filter.
func (o NeighborOutput) RouteMapOutEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteMapOutEvpn }).(pulumi.StringOutput)
}

// IPv4 outbound route map filter if the peer is preferred.
func (o NeighborOutput) RouteMapOutPreferable() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteMapOutPreferable }).(pulumi.StringOutput)
}

// VPNv4 outbound route map filter.
func (o NeighborOutput) RouteMapOutVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteMapOutVpnv4 }).(pulumi.StringOutput)
}

// VPNv4 outbound route map filter if the peer is preferred.
func (o NeighborOutput) RouteMapOutVpnv4Preferable() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteMapOutVpnv4Preferable }).(pulumi.StringOutput)
}

// VPNv6 outbound route map filter.
func (o NeighborOutput) RouteMapOutVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteMapOutVpnv6 }).(pulumi.StringOutput)
}

// VPNv6 outbound route map filter if this neighbor is preferred.
func (o NeighborOutput) RouteMapOutVpnv6Preferable() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteMapOutVpnv6Preferable }).(pulumi.StringOutput)
}

// Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
func (o NeighborOutput) RouteReflectorClient() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteReflectorClient }).(pulumi.StringOutput)
}

// Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
func (o NeighborOutput) RouteReflectorClient6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteReflectorClient6 }).(pulumi.StringOutput)
}

// Enable/disable L2VPN EVPN AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) RouteReflectorClientEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteReflectorClientEvpn }).(pulumi.StringOutput)
}

// Enable/disable VPNv4 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) RouteReflectorClientVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteReflectorClientVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable VPNv6 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) RouteReflectorClientVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteReflectorClientVpnv6 }).(pulumi.StringOutput)
}

// Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
func (o NeighborOutput) RouteServerClient() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteServerClient }).(pulumi.StringOutput)
}

// Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
func (o NeighborOutput) RouteServerClient6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteServerClient6 }).(pulumi.StringOutput)
}

// Enable/disable L2VPN EVPN AS route server client for this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) RouteServerClientEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteServerClientEvpn }).(pulumi.StringOutput)
}

// Enable/disable VPNv4 AS route server client for this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) RouteServerClientVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteServerClientVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable VPNv6 AS route server client for this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) RouteServerClientVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.RouteServerClientVpnv6 }).(pulumi.StringOutput)
}

// IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
func (o NeighborOutput) SendCommunity() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.SendCommunity }).(pulumi.StringOutput)
}

// IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
func (o NeighborOutput) SendCommunity6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.SendCommunity6 }).(pulumi.StringOutput)
}

// Enable/disable sending community attribute to neighbor for L2VPN EVPN address family. Valid values: `standard`, `extended`, `both`, `disable`.
func (o NeighborOutput) SendCommunityEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.SendCommunityEvpn }).(pulumi.StringOutput)
}

// Send community attribute to neighbor for VPNv4 address family. Valid values: `standard`, `extended`, `both`, `disable`.
func (o NeighborOutput) SendCommunityVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.SendCommunityVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable sending community attribute to this neighbor for VPNv6 address family. Valid values: `standard`, `extended`, `both`, `disable`.
func (o NeighborOutput) SendCommunityVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.SendCommunityVpnv6 }).(pulumi.StringOutput)
}

// Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
func (o NeighborOutput) Shutdown() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.Shutdown }).(pulumi.StringOutput)
}

// Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
func (o NeighborOutput) SoftReconfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.SoftReconfiguration }).(pulumi.StringOutput)
}

// Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
func (o NeighborOutput) SoftReconfiguration6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.SoftReconfiguration6 }).(pulumi.StringOutput)
}

// Enable/disable L2VPN EVPN inbound soft reconfiguration. Valid values: `enable`, `disable`.
func (o NeighborOutput) SoftReconfigurationEvpn() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.SoftReconfigurationEvpn }).(pulumi.StringOutput)
}

// Enable/disable allow VPNv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
func (o NeighborOutput) SoftReconfigurationVpnv4() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.SoftReconfigurationVpnv4 }).(pulumi.StringOutput)
}

// Enable/disable VPNv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
func (o NeighborOutput) SoftReconfigurationVpnv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.SoftReconfigurationVpnv6 }).(pulumi.StringOutput)
}

// Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
func (o NeighborOutput) StaleRoute() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.StaleRoute }).(pulumi.StringOutput)
}

// Enable/disable strict capability matching. Valid values: `enable`, `disable`.
func (o NeighborOutput) StrictCapabilityMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.StrictCapabilityMatch }).(pulumi.StringOutput)
}

// IPv4 Route map to selectively unsuppress suppressed routes.
func (o NeighborOutput) UnsuppressMap() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.UnsuppressMap }).(pulumi.StringOutput)
}

// IPv6 Route map to selectively unsuppress suppressed routes.
func (o NeighborOutput) UnsuppressMap6() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.UnsuppressMap6 }).(pulumi.StringOutput)
}

// Interface to use as source IP/IPv6 address of TCP connections.
func (o NeighborOutput) UpdateSource() pulumi.StringOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringOutput { return v.UpdateSource }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o NeighborOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Neighbor weight.
func (o NeighborOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v *Neighbor) pulumi.IntOutput { return v.Weight }).(pulumi.IntOutput)
}

type NeighborArrayOutput struct{ *pulumi.OutputState }

func (NeighborArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Neighbor)(nil)).Elem()
}

func (o NeighborArrayOutput) ToNeighborArrayOutput() NeighborArrayOutput {
	return o
}

func (o NeighborArrayOutput) ToNeighborArrayOutputWithContext(ctx context.Context) NeighborArrayOutput {
	return o
}

func (o NeighborArrayOutput) Index(i pulumi.IntInput) NeighborOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Neighbor {
		return vs[0].([]*Neighbor)[vs[1].(int)]
	}).(NeighborOutput)
}

type NeighborMapOutput struct{ *pulumi.OutputState }

func (NeighborMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Neighbor)(nil)).Elem()
}

func (o NeighborMapOutput) ToNeighborMapOutput() NeighborMapOutput {
	return o
}

func (o NeighborMapOutput) ToNeighborMapOutputWithContext(ctx context.Context) NeighborMapOutput {
	return o
}

func (o NeighborMapOutput) MapIndex(k pulumi.StringInput) NeighborOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Neighbor {
		return vs[0].(map[string]*Neighbor)[vs[1].(string)]
	}).(NeighborOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NeighborInput)(nil)).Elem(), &Neighbor{})
	pulumi.RegisterInputType(reflect.TypeOf((*NeighborArrayInput)(nil)).Elem(), NeighborArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NeighborMapInput)(nil)).Elem(), NeighborMap{})
	pulumi.RegisterOutputType(NeighborOutput{})
	pulumi.RegisterOutputType(NeighborArrayOutput{})
	pulumi.RegisterOutputType(NeighborMapOutput{})
}
