// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package router

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure IS-IS.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/router"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := router.NewIsis(ctx, "trname", &router.IsisArgs{
//				AdjacencyCheck:     pulumi.String("disable"),
//				AdjacencyCheck6:    pulumi.String("disable"),
//				AdvPassiveOnly:     pulumi.String("disable"),
//				AdvPassiveOnly6:    pulumi.String("disable"),
//				AuthModeL1:         pulumi.String("password"),
//				AuthModeL2:         pulumi.String("password"),
//				AuthSendonlyL1:     pulumi.String("disable"),
//				AuthSendonlyL2:     pulumi.String("disable"),
//				DefaultOriginate:   pulumi.String("disable"),
//				DefaultOriginate6:  pulumi.String("disable"),
//				DynamicHostname:    pulumi.String("disable"),
//				IgnoreLspErrors:    pulumi.String("disable"),
//				IsType:             pulumi.String("level-1-2"),
//				LspGenIntervalL1:   pulumi.Int(30),
//				LspGenIntervalL2:   pulumi.Int(30),
//				LspRefreshInterval: pulumi.Int(900),
//				MaxLspLifetime:     pulumi.Int(1200),
//				MetricStyle:        pulumi.String("narrow"),
//				OverloadBit:        pulumi.String("disable"),
//				Redistribute6L1:    pulumi.String("disable"),
//				Redistribute6L2:    pulumi.String("disable"),
//				RedistributeL1:     pulumi.String("disable"),
//				RedistributeL2:     pulumi.String("disable"),
//				SpfIntervalExpL1:   pulumi.String("500 50000"),
//				SpfIntervalExpL2:   pulumi.String("500 50000"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Router Isis can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:router/isis:Isis labelname RouterIsis
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:router/isis:Isis labelname RouterIsis
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Isis struct {
	pulumi.CustomResourceState

	// Enable/disable adjacency check. Valid values: `enable`, `disable`.
	AdjacencyCheck pulumi.StringOutput `pulumi:"adjacencyCheck"`
	// Enable/disable IPv6 adjacency check. Valid values: `enable`, `disable`.
	AdjacencyCheck6 pulumi.StringOutput `pulumi:"adjacencyCheck6"`
	// Enable/disable IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
	AdvPassiveOnly pulumi.StringOutput `pulumi:"advPassiveOnly"`
	// Enable/disable IPv6 IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
	AdvPassiveOnly6 pulumi.StringOutput `pulumi:"advPassiveOnly6"`
	// Authentication key-chain for level 1 PDUs.
	AuthKeychainL1 pulumi.StringOutput `pulumi:"authKeychainL1"`
	// Authentication key-chain for level 2 PDUs.
	AuthKeychainL2 pulumi.StringOutput `pulumi:"authKeychainL2"`
	// Level 1 authentication mode. Valid values: `password`, `md5`.
	AuthModeL1 pulumi.StringOutput `pulumi:"authModeL1"`
	// Level 2 authentication mode. Valid values: `password`, `md5`.
	AuthModeL2 pulumi.StringOutput `pulumi:"authModeL2"`
	// Authentication password for level 1 PDUs.
	AuthPasswordL1 pulumi.StringPtrOutput `pulumi:"authPasswordL1"`
	// Authentication password for level 2 PDUs.
	AuthPasswordL2 pulumi.StringPtrOutput `pulumi:"authPasswordL2"`
	// Enable/disable level 1 authentication send-only. Valid values: `enable`, `disable`.
	AuthSendonlyL1 pulumi.StringOutput `pulumi:"authSendonlyL1"`
	// Enable/disable level 2 authentication send-only. Valid values: `enable`, `disable`.
	AuthSendonlyL2 pulumi.StringOutput `pulumi:"authSendonlyL2"`
	// Enable/disable distribution of default route information. Valid values: `enable`, `disable`.
	DefaultOriginate pulumi.StringOutput `pulumi:"defaultOriginate"`
	// Enable/disable distribution of default IPv6 route information. Valid values: `enable`, `disable`.
	DefaultOriginate6 pulumi.StringOutput `pulumi:"defaultOriginate6"`
	// Enable/disable dynamic hostname. Valid values: `enable`, `disable`.
	DynamicHostname pulumi.StringOutput `pulumi:"dynamicHostname"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Enable/disable ignoring of LSP errors with bad checksums. Valid values: `enable`, `disable`.
	IgnoreLspErrors pulumi.StringOutput `pulumi:"ignoreLspErrors"`
	// IS type. Valid values: `level-1-2`, `level-1`, `level-2-only`.
	IsType pulumi.StringOutput `pulumi:"isType"`
	// IS-IS interface configuration. The structure of `isisInterface` block is documented below.
	IsisInterfaces IsisIsisInterfaceArrayOutput `pulumi:"isisInterfaces"`
	// IS-IS net configuration. The structure of `isisNet` block is documented below.
	IsisNets IsisIsisNetArrayOutput `pulumi:"isisNets"`
	// Minimum interval for level 1 LSP regenerating.
	LspGenIntervalL1 pulumi.IntOutput `pulumi:"lspGenIntervalL1"`
	// Minimum interval for level 2 LSP regenerating.
	LspGenIntervalL2 pulumi.IntOutput `pulumi:"lspGenIntervalL2"`
	// LSP refresh time in seconds.
	LspRefreshInterval pulumi.IntOutput `pulumi:"lspRefreshInterval"`
	// Maximum LSP lifetime in seconds.
	MaxLspLifetime pulumi.IntOutput `pulumi:"maxLspLifetime"`
	// Use old-style (ISO 10589) or new-style packet formats Valid values: `narrow`, `wide`, `transition`, `narrow-transition`, `narrow-transition-l1`, `narrow-transition-l2`, `wide-l1`, `wide-l2`, `wide-transition`, `wide-transition-l1`, `wide-transition-l2`, `transition-l1`, `transition-l2`.
	MetricStyle pulumi.StringOutput `pulumi:"metricStyle"`
	// Enable/disable signal other routers not to use us in SPF. Valid values: `enable`, `disable`.
	OverloadBit pulumi.StringOutput `pulumi:"overloadBit"`
	// Overload-bit only temporarily after reboot.
	OverloadBitOnStartup pulumi.IntOutput `pulumi:"overloadBitOnStartup"`
	// Suppress overload-bit for the specific prefixes. Valid values: `external`, `interlevel`.
	OverloadBitSuppress pulumi.StringOutput `pulumi:"overloadBitSuppress"`
	// Enable/disable redistribution of level 1 IPv6 routes into level 2. Valid values: `enable`, `disable`.
	Redistribute6L1 pulumi.StringOutput `pulumi:"redistribute6L1"`
	// Access-list for IPv6 route redistribution from l1 to l2.
	Redistribute6L1List pulumi.StringOutput `pulumi:"redistribute6L1List"`
	// Enable/disable redistribution of level 2 IPv6 routes into level 1. Valid values: `enable`, `disable`.
	Redistribute6L2 pulumi.StringOutput `pulumi:"redistribute6L2"`
	// Access-list for IPv6 route redistribution from l2 to l1.
	Redistribute6L2List pulumi.StringOutput `pulumi:"redistribute6L2List"`
	// IS-IS IPv6 redistribution for routing protocols. The structure of `redistribute6` block is documented below.
	Redistribute6s IsisRedistribute6ArrayOutput `pulumi:"redistribute6s"`
	// Enable/disable redistribution of level 1 routes into level 2. Valid values: `enable`, `disable`.
	RedistributeL1 pulumi.StringOutput `pulumi:"redistributeL1"`
	// Access-list for route redistribution from l1 to l2.
	RedistributeL1List pulumi.StringOutput `pulumi:"redistributeL1List"`
	// Enable/disable redistribution of level 2 routes into level 1. Valid values: `enable`, `disable`.
	RedistributeL2 pulumi.StringOutput `pulumi:"redistributeL2"`
	// Access-list for route redistribution from l2 to l1.
	RedistributeL2List pulumi.StringOutput `pulumi:"redistributeL2List"`
	// IS-IS redistribute protocols. The structure of `redistribute` block is documented below.
	Redistributes IsisRedistributeArrayOutput `pulumi:"redistributes"`
	// Level 1 SPF calculation delay.
	SpfIntervalExpL1 pulumi.StringOutput `pulumi:"spfIntervalExpL1"`
	// Level 2 SPF calculation delay.
	SpfIntervalExpL2 pulumi.StringOutput `pulumi:"spfIntervalExpL2"`
	// IS-IS IPv6 summary address. The structure of `summaryAddress6` block is documented below.
	SummaryAddress6s IsisSummaryAddress6ArrayOutput `pulumi:"summaryAddress6s"`
	// IS-IS summary addresses. The structure of `summaryAddress` block is documented below.
	SummaryAddresses IsisSummaryAddressArrayOutput `pulumi:"summaryAddresses"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewIsis registers a new resource with the given unique name, arguments, and options.
func NewIsis(ctx *pulumi.Context,
	name string, args *IsisArgs, opts ...pulumi.ResourceOption) (*Isis, error) {
	if args == nil {
		args = &IsisArgs{}
	}

	if args.AuthPasswordL1 != nil {
		args.AuthPasswordL1 = pulumi.ToSecret(args.AuthPasswordL1).(pulumi.StringPtrInput)
	}
	if args.AuthPasswordL2 != nil {
		args.AuthPasswordL2 = pulumi.ToSecret(args.AuthPasswordL2).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"authPasswordL1",
		"authPasswordL2",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Isis
	err := ctx.RegisterResource("fortios:router/isis:Isis", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIsis gets an existing Isis resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIsis(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IsisState, opts ...pulumi.ResourceOption) (*Isis, error) {
	var resource Isis
	err := ctx.ReadResource("fortios:router/isis:Isis", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Isis resources.
type isisState struct {
	// Enable/disable adjacency check. Valid values: `enable`, `disable`.
	AdjacencyCheck *string `pulumi:"adjacencyCheck"`
	// Enable/disable IPv6 adjacency check. Valid values: `enable`, `disable`.
	AdjacencyCheck6 *string `pulumi:"adjacencyCheck6"`
	// Enable/disable IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
	AdvPassiveOnly *string `pulumi:"advPassiveOnly"`
	// Enable/disable IPv6 IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
	AdvPassiveOnly6 *string `pulumi:"advPassiveOnly6"`
	// Authentication key-chain for level 1 PDUs.
	AuthKeychainL1 *string `pulumi:"authKeychainL1"`
	// Authentication key-chain for level 2 PDUs.
	AuthKeychainL2 *string `pulumi:"authKeychainL2"`
	// Level 1 authentication mode. Valid values: `password`, `md5`.
	AuthModeL1 *string `pulumi:"authModeL1"`
	// Level 2 authentication mode. Valid values: `password`, `md5`.
	AuthModeL2 *string `pulumi:"authModeL2"`
	// Authentication password for level 1 PDUs.
	AuthPasswordL1 *string `pulumi:"authPasswordL1"`
	// Authentication password for level 2 PDUs.
	AuthPasswordL2 *string `pulumi:"authPasswordL2"`
	// Enable/disable level 1 authentication send-only. Valid values: `enable`, `disable`.
	AuthSendonlyL1 *string `pulumi:"authSendonlyL1"`
	// Enable/disable level 2 authentication send-only. Valid values: `enable`, `disable`.
	AuthSendonlyL2 *string `pulumi:"authSendonlyL2"`
	// Enable/disable distribution of default route information. Valid values: `enable`, `disable`.
	DefaultOriginate *string `pulumi:"defaultOriginate"`
	// Enable/disable distribution of default IPv6 route information. Valid values: `enable`, `disable`.
	DefaultOriginate6 *string `pulumi:"defaultOriginate6"`
	// Enable/disable dynamic hostname. Valid values: `enable`, `disable`.
	DynamicHostname *string `pulumi:"dynamicHostname"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable ignoring of LSP errors with bad checksums. Valid values: `enable`, `disable`.
	IgnoreLspErrors *string `pulumi:"ignoreLspErrors"`
	// IS type. Valid values: `level-1-2`, `level-1`, `level-2-only`.
	IsType *string `pulumi:"isType"`
	// IS-IS interface configuration. The structure of `isisInterface` block is documented below.
	IsisInterfaces []IsisIsisInterface `pulumi:"isisInterfaces"`
	// IS-IS net configuration. The structure of `isisNet` block is documented below.
	IsisNets []IsisIsisNet `pulumi:"isisNets"`
	// Minimum interval for level 1 LSP regenerating.
	LspGenIntervalL1 *int `pulumi:"lspGenIntervalL1"`
	// Minimum interval for level 2 LSP regenerating.
	LspGenIntervalL2 *int `pulumi:"lspGenIntervalL2"`
	// LSP refresh time in seconds.
	LspRefreshInterval *int `pulumi:"lspRefreshInterval"`
	// Maximum LSP lifetime in seconds.
	MaxLspLifetime *int `pulumi:"maxLspLifetime"`
	// Use old-style (ISO 10589) or new-style packet formats Valid values: `narrow`, `wide`, `transition`, `narrow-transition`, `narrow-transition-l1`, `narrow-transition-l2`, `wide-l1`, `wide-l2`, `wide-transition`, `wide-transition-l1`, `wide-transition-l2`, `transition-l1`, `transition-l2`.
	MetricStyle *string `pulumi:"metricStyle"`
	// Enable/disable signal other routers not to use us in SPF. Valid values: `enable`, `disable`.
	OverloadBit *string `pulumi:"overloadBit"`
	// Overload-bit only temporarily after reboot.
	OverloadBitOnStartup *int `pulumi:"overloadBitOnStartup"`
	// Suppress overload-bit for the specific prefixes. Valid values: `external`, `interlevel`.
	OverloadBitSuppress *string `pulumi:"overloadBitSuppress"`
	// Enable/disable redistribution of level 1 IPv6 routes into level 2. Valid values: `enable`, `disable`.
	Redistribute6L1 *string `pulumi:"redistribute6L1"`
	// Access-list for IPv6 route redistribution from l1 to l2.
	Redistribute6L1List *string `pulumi:"redistribute6L1List"`
	// Enable/disable redistribution of level 2 IPv6 routes into level 1. Valid values: `enable`, `disable`.
	Redistribute6L2 *string `pulumi:"redistribute6L2"`
	// Access-list for IPv6 route redistribution from l2 to l1.
	Redistribute6L2List *string `pulumi:"redistribute6L2List"`
	// IS-IS IPv6 redistribution for routing protocols. The structure of `redistribute6` block is documented below.
	Redistribute6s []IsisRedistribute6 `pulumi:"redistribute6s"`
	// Enable/disable redistribution of level 1 routes into level 2. Valid values: `enable`, `disable`.
	RedistributeL1 *string `pulumi:"redistributeL1"`
	// Access-list for route redistribution from l1 to l2.
	RedistributeL1List *string `pulumi:"redistributeL1List"`
	// Enable/disable redistribution of level 2 routes into level 1. Valid values: `enable`, `disable`.
	RedistributeL2 *string `pulumi:"redistributeL2"`
	// Access-list for route redistribution from l2 to l1.
	RedistributeL2List *string `pulumi:"redistributeL2List"`
	// IS-IS redistribute protocols. The structure of `redistribute` block is documented below.
	Redistributes []IsisRedistribute `pulumi:"redistributes"`
	// Level 1 SPF calculation delay.
	SpfIntervalExpL1 *string `pulumi:"spfIntervalExpL1"`
	// Level 2 SPF calculation delay.
	SpfIntervalExpL2 *string `pulumi:"spfIntervalExpL2"`
	// IS-IS IPv6 summary address. The structure of `summaryAddress6` block is documented below.
	SummaryAddress6s []IsisSummaryAddress6 `pulumi:"summaryAddress6s"`
	// IS-IS summary addresses. The structure of `summaryAddress` block is documented below.
	SummaryAddresses []IsisSummaryAddress `pulumi:"summaryAddresses"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type IsisState struct {
	// Enable/disable adjacency check. Valid values: `enable`, `disable`.
	AdjacencyCheck pulumi.StringPtrInput
	// Enable/disable IPv6 adjacency check. Valid values: `enable`, `disable`.
	AdjacencyCheck6 pulumi.StringPtrInput
	// Enable/disable IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
	AdvPassiveOnly pulumi.StringPtrInput
	// Enable/disable IPv6 IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
	AdvPassiveOnly6 pulumi.StringPtrInput
	// Authentication key-chain for level 1 PDUs.
	AuthKeychainL1 pulumi.StringPtrInput
	// Authentication key-chain for level 2 PDUs.
	AuthKeychainL2 pulumi.StringPtrInput
	// Level 1 authentication mode. Valid values: `password`, `md5`.
	AuthModeL1 pulumi.StringPtrInput
	// Level 2 authentication mode. Valid values: `password`, `md5`.
	AuthModeL2 pulumi.StringPtrInput
	// Authentication password for level 1 PDUs.
	AuthPasswordL1 pulumi.StringPtrInput
	// Authentication password for level 2 PDUs.
	AuthPasswordL2 pulumi.StringPtrInput
	// Enable/disable level 1 authentication send-only. Valid values: `enable`, `disable`.
	AuthSendonlyL1 pulumi.StringPtrInput
	// Enable/disable level 2 authentication send-only. Valid values: `enable`, `disable`.
	AuthSendonlyL2 pulumi.StringPtrInput
	// Enable/disable distribution of default route information. Valid values: `enable`, `disable`.
	DefaultOriginate pulumi.StringPtrInput
	// Enable/disable distribution of default IPv6 route information. Valid values: `enable`, `disable`.
	DefaultOriginate6 pulumi.StringPtrInput
	// Enable/disable dynamic hostname. Valid values: `enable`, `disable`.
	DynamicHostname pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable ignoring of LSP errors with bad checksums. Valid values: `enable`, `disable`.
	IgnoreLspErrors pulumi.StringPtrInput
	// IS type. Valid values: `level-1-2`, `level-1`, `level-2-only`.
	IsType pulumi.StringPtrInput
	// IS-IS interface configuration. The structure of `isisInterface` block is documented below.
	IsisInterfaces IsisIsisInterfaceArrayInput
	// IS-IS net configuration. The structure of `isisNet` block is documented below.
	IsisNets IsisIsisNetArrayInput
	// Minimum interval for level 1 LSP regenerating.
	LspGenIntervalL1 pulumi.IntPtrInput
	// Minimum interval for level 2 LSP regenerating.
	LspGenIntervalL2 pulumi.IntPtrInput
	// LSP refresh time in seconds.
	LspRefreshInterval pulumi.IntPtrInput
	// Maximum LSP lifetime in seconds.
	MaxLspLifetime pulumi.IntPtrInput
	// Use old-style (ISO 10589) or new-style packet formats Valid values: `narrow`, `wide`, `transition`, `narrow-transition`, `narrow-transition-l1`, `narrow-transition-l2`, `wide-l1`, `wide-l2`, `wide-transition`, `wide-transition-l1`, `wide-transition-l2`, `transition-l1`, `transition-l2`.
	MetricStyle pulumi.StringPtrInput
	// Enable/disable signal other routers not to use us in SPF. Valid values: `enable`, `disable`.
	OverloadBit pulumi.StringPtrInput
	// Overload-bit only temporarily after reboot.
	OverloadBitOnStartup pulumi.IntPtrInput
	// Suppress overload-bit for the specific prefixes. Valid values: `external`, `interlevel`.
	OverloadBitSuppress pulumi.StringPtrInput
	// Enable/disable redistribution of level 1 IPv6 routes into level 2. Valid values: `enable`, `disable`.
	Redistribute6L1 pulumi.StringPtrInput
	// Access-list for IPv6 route redistribution from l1 to l2.
	Redistribute6L1List pulumi.StringPtrInput
	// Enable/disable redistribution of level 2 IPv6 routes into level 1. Valid values: `enable`, `disable`.
	Redistribute6L2 pulumi.StringPtrInput
	// Access-list for IPv6 route redistribution from l2 to l1.
	Redistribute6L2List pulumi.StringPtrInput
	// IS-IS IPv6 redistribution for routing protocols. The structure of `redistribute6` block is documented below.
	Redistribute6s IsisRedistribute6ArrayInput
	// Enable/disable redistribution of level 1 routes into level 2. Valid values: `enable`, `disable`.
	RedistributeL1 pulumi.StringPtrInput
	// Access-list for route redistribution from l1 to l2.
	RedistributeL1List pulumi.StringPtrInput
	// Enable/disable redistribution of level 2 routes into level 1. Valid values: `enable`, `disable`.
	RedistributeL2 pulumi.StringPtrInput
	// Access-list for route redistribution from l2 to l1.
	RedistributeL2List pulumi.StringPtrInput
	// IS-IS redistribute protocols. The structure of `redistribute` block is documented below.
	Redistributes IsisRedistributeArrayInput
	// Level 1 SPF calculation delay.
	SpfIntervalExpL1 pulumi.StringPtrInput
	// Level 2 SPF calculation delay.
	SpfIntervalExpL2 pulumi.StringPtrInput
	// IS-IS IPv6 summary address. The structure of `summaryAddress6` block is documented below.
	SummaryAddress6s IsisSummaryAddress6ArrayInput
	// IS-IS summary addresses. The structure of `summaryAddress` block is documented below.
	SummaryAddresses IsisSummaryAddressArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IsisState) ElementType() reflect.Type {
	return reflect.TypeOf((*isisState)(nil)).Elem()
}

type isisArgs struct {
	// Enable/disable adjacency check. Valid values: `enable`, `disable`.
	AdjacencyCheck *string `pulumi:"adjacencyCheck"`
	// Enable/disable IPv6 adjacency check. Valid values: `enable`, `disable`.
	AdjacencyCheck6 *string `pulumi:"adjacencyCheck6"`
	// Enable/disable IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
	AdvPassiveOnly *string `pulumi:"advPassiveOnly"`
	// Enable/disable IPv6 IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
	AdvPassiveOnly6 *string `pulumi:"advPassiveOnly6"`
	// Authentication key-chain for level 1 PDUs.
	AuthKeychainL1 *string `pulumi:"authKeychainL1"`
	// Authentication key-chain for level 2 PDUs.
	AuthKeychainL2 *string `pulumi:"authKeychainL2"`
	// Level 1 authentication mode. Valid values: `password`, `md5`.
	AuthModeL1 *string `pulumi:"authModeL1"`
	// Level 2 authentication mode. Valid values: `password`, `md5`.
	AuthModeL2 *string `pulumi:"authModeL2"`
	// Authentication password for level 1 PDUs.
	AuthPasswordL1 *string `pulumi:"authPasswordL1"`
	// Authentication password for level 2 PDUs.
	AuthPasswordL2 *string `pulumi:"authPasswordL2"`
	// Enable/disable level 1 authentication send-only. Valid values: `enable`, `disable`.
	AuthSendonlyL1 *string `pulumi:"authSendonlyL1"`
	// Enable/disable level 2 authentication send-only. Valid values: `enable`, `disable`.
	AuthSendonlyL2 *string `pulumi:"authSendonlyL2"`
	// Enable/disable distribution of default route information. Valid values: `enable`, `disable`.
	DefaultOriginate *string `pulumi:"defaultOriginate"`
	// Enable/disable distribution of default IPv6 route information. Valid values: `enable`, `disable`.
	DefaultOriginate6 *string `pulumi:"defaultOriginate6"`
	// Enable/disable dynamic hostname. Valid values: `enable`, `disable`.
	DynamicHostname *string `pulumi:"dynamicHostname"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable ignoring of LSP errors with bad checksums. Valid values: `enable`, `disable`.
	IgnoreLspErrors *string `pulumi:"ignoreLspErrors"`
	// IS type. Valid values: `level-1-2`, `level-1`, `level-2-only`.
	IsType *string `pulumi:"isType"`
	// IS-IS interface configuration. The structure of `isisInterface` block is documented below.
	IsisInterfaces []IsisIsisInterface `pulumi:"isisInterfaces"`
	// IS-IS net configuration. The structure of `isisNet` block is documented below.
	IsisNets []IsisIsisNet `pulumi:"isisNets"`
	// Minimum interval for level 1 LSP regenerating.
	LspGenIntervalL1 *int `pulumi:"lspGenIntervalL1"`
	// Minimum interval for level 2 LSP regenerating.
	LspGenIntervalL2 *int `pulumi:"lspGenIntervalL2"`
	// LSP refresh time in seconds.
	LspRefreshInterval *int `pulumi:"lspRefreshInterval"`
	// Maximum LSP lifetime in seconds.
	MaxLspLifetime *int `pulumi:"maxLspLifetime"`
	// Use old-style (ISO 10589) or new-style packet formats Valid values: `narrow`, `wide`, `transition`, `narrow-transition`, `narrow-transition-l1`, `narrow-transition-l2`, `wide-l1`, `wide-l2`, `wide-transition`, `wide-transition-l1`, `wide-transition-l2`, `transition-l1`, `transition-l2`.
	MetricStyle *string `pulumi:"metricStyle"`
	// Enable/disable signal other routers not to use us in SPF. Valid values: `enable`, `disable`.
	OverloadBit *string `pulumi:"overloadBit"`
	// Overload-bit only temporarily after reboot.
	OverloadBitOnStartup *int `pulumi:"overloadBitOnStartup"`
	// Suppress overload-bit for the specific prefixes. Valid values: `external`, `interlevel`.
	OverloadBitSuppress *string `pulumi:"overloadBitSuppress"`
	// Enable/disable redistribution of level 1 IPv6 routes into level 2. Valid values: `enable`, `disable`.
	Redistribute6L1 *string `pulumi:"redistribute6L1"`
	// Access-list for IPv6 route redistribution from l1 to l2.
	Redistribute6L1List *string `pulumi:"redistribute6L1List"`
	// Enable/disable redistribution of level 2 IPv6 routes into level 1. Valid values: `enable`, `disable`.
	Redistribute6L2 *string `pulumi:"redistribute6L2"`
	// Access-list for IPv6 route redistribution from l2 to l1.
	Redistribute6L2List *string `pulumi:"redistribute6L2List"`
	// IS-IS IPv6 redistribution for routing protocols. The structure of `redistribute6` block is documented below.
	Redistribute6s []IsisRedistribute6 `pulumi:"redistribute6s"`
	// Enable/disable redistribution of level 1 routes into level 2. Valid values: `enable`, `disable`.
	RedistributeL1 *string `pulumi:"redistributeL1"`
	// Access-list for route redistribution from l1 to l2.
	RedistributeL1List *string `pulumi:"redistributeL1List"`
	// Enable/disable redistribution of level 2 routes into level 1. Valid values: `enable`, `disable`.
	RedistributeL2 *string `pulumi:"redistributeL2"`
	// Access-list for route redistribution from l2 to l1.
	RedistributeL2List *string `pulumi:"redistributeL2List"`
	// IS-IS redistribute protocols. The structure of `redistribute` block is documented below.
	Redistributes []IsisRedistribute `pulumi:"redistributes"`
	// Level 1 SPF calculation delay.
	SpfIntervalExpL1 *string `pulumi:"spfIntervalExpL1"`
	// Level 2 SPF calculation delay.
	SpfIntervalExpL2 *string `pulumi:"spfIntervalExpL2"`
	// IS-IS IPv6 summary address. The structure of `summaryAddress6` block is documented below.
	SummaryAddress6s []IsisSummaryAddress6 `pulumi:"summaryAddress6s"`
	// IS-IS summary addresses. The structure of `summaryAddress` block is documented below.
	SummaryAddresses []IsisSummaryAddress `pulumi:"summaryAddresses"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Isis resource.
type IsisArgs struct {
	// Enable/disable adjacency check. Valid values: `enable`, `disable`.
	AdjacencyCheck pulumi.StringPtrInput
	// Enable/disable IPv6 adjacency check. Valid values: `enable`, `disable`.
	AdjacencyCheck6 pulumi.StringPtrInput
	// Enable/disable IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
	AdvPassiveOnly pulumi.StringPtrInput
	// Enable/disable IPv6 IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
	AdvPassiveOnly6 pulumi.StringPtrInput
	// Authentication key-chain for level 1 PDUs.
	AuthKeychainL1 pulumi.StringPtrInput
	// Authentication key-chain for level 2 PDUs.
	AuthKeychainL2 pulumi.StringPtrInput
	// Level 1 authentication mode. Valid values: `password`, `md5`.
	AuthModeL1 pulumi.StringPtrInput
	// Level 2 authentication mode. Valid values: `password`, `md5`.
	AuthModeL2 pulumi.StringPtrInput
	// Authentication password for level 1 PDUs.
	AuthPasswordL1 pulumi.StringPtrInput
	// Authentication password for level 2 PDUs.
	AuthPasswordL2 pulumi.StringPtrInput
	// Enable/disable level 1 authentication send-only. Valid values: `enable`, `disable`.
	AuthSendonlyL1 pulumi.StringPtrInput
	// Enable/disable level 2 authentication send-only. Valid values: `enable`, `disable`.
	AuthSendonlyL2 pulumi.StringPtrInput
	// Enable/disable distribution of default route information. Valid values: `enable`, `disable`.
	DefaultOriginate pulumi.StringPtrInput
	// Enable/disable distribution of default IPv6 route information. Valid values: `enable`, `disable`.
	DefaultOriginate6 pulumi.StringPtrInput
	// Enable/disable dynamic hostname. Valid values: `enable`, `disable`.
	DynamicHostname pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable ignoring of LSP errors with bad checksums. Valid values: `enable`, `disable`.
	IgnoreLspErrors pulumi.StringPtrInput
	// IS type. Valid values: `level-1-2`, `level-1`, `level-2-only`.
	IsType pulumi.StringPtrInput
	// IS-IS interface configuration. The structure of `isisInterface` block is documented below.
	IsisInterfaces IsisIsisInterfaceArrayInput
	// IS-IS net configuration. The structure of `isisNet` block is documented below.
	IsisNets IsisIsisNetArrayInput
	// Minimum interval for level 1 LSP regenerating.
	LspGenIntervalL1 pulumi.IntPtrInput
	// Minimum interval for level 2 LSP regenerating.
	LspGenIntervalL2 pulumi.IntPtrInput
	// LSP refresh time in seconds.
	LspRefreshInterval pulumi.IntPtrInput
	// Maximum LSP lifetime in seconds.
	MaxLspLifetime pulumi.IntPtrInput
	// Use old-style (ISO 10589) or new-style packet formats Valid values: `narrow`, `wide`, `transition`, `narrow-transition`, `narrow-transition-l1`, `narrow-transition-l2`, `wide-l1`, `wide-l2`, `wide-transition`, `wide-transition-l1`, `wide-transition-l2`, `transition-l1`, `transition-l2`.
	MetricStyle pulumi.StringPtrInput
	// Enable/disable signal other routers not to use us in SPF. Valid values: `enable`, `disable`.
	OverloadBit pulumi.StringPtrInput
	// Overload-bit only temporarily after reboot.
	OverloadBitOnStartup pulumi.IntPtrInput
	// Suppress overload-bit for the specific prefixes. Valid values: `external`, `interlevel`.
	OverloadBitSuppress pulumi.StringPtrInput
	// Enable/disable redistribution of level 1 IPv6 routes into level 2. Valid values: `enable`, `disable`.
	Redistribute6L1 pulumi.StringPtrInput
	// Access-list for IPv6 route redistribution from l1 to l2.
	Redistribute6L1List pulumi.StringPtrInput
	// Enable/disable redistribution of level 2 IPv6 routes into level 1. Valid values: `enable`, `disable`.
	Redistribute6L2 pulumi.StringPtrInput
	// Access-list for IPv6 route redistribution from l2 to l1.
	Redistribute6L2List pulumi.StringPtrInput
	// IS-IS IPv6 redistribution for routing protocols. The structure of `redistribute6` block is documented below.
	Redistribute6s IsisRedistribute6ArrayInput
	// Enable/disable redistribution of level 1 routes into level 2. Valid values: `enable`, `disable`.
	RedistributeL1 pulumi.StringPtrInput
	// Access-list for route redistribution from l1 to l2.
	RedistributeL1List pulumi.StringPtrInput
	// Enable/disable redistribution of level 2 routes into level 1. Valid values: `enable`, `disable`.
	RedistributeL2 pulumi.StringPtrInput
	// Access-list for route redistribution from l2 to l1.
	RedistributeL2List pulumi.StringPtrInput
	// IS-IS redistribute protocols. The structure of `redistribute` block is documented below.
	Redistributes IsisRedistributeArrayInput
	// Level 1 SPF calculation delay.
	SpfIntervalExpL1 pulumi.StringPtrInput
	// Level 2 SPF calculation delay.
	SpfIntervalExpL2 pulumi.StringPtrInput
	// IS-IS IPv6 summary address. The structure of `summaryAddress6` block is documented below.
	SummaryAddress6s IsisSummaryAddress6ArrayInput
	// IS-IS summary addresses. The structure of `summaryAddress` block is documented below.
	SummaryAddresses IsisSummaryAddressArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IsisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*isisArgs)(nil)).Elem()
}

type IsisInput interface {
	pulumi.Input

	ToIsisOutput() IsisOutput
	ToIsisOutputWithContext(ctx context.Context) IsisOutput
}

func (*Isis) ElementType() reflect.Type {
	return reflect.TypeOf((**Isis)(nil)).Elem()
}

func (i *Isis) ToIsisOutput() IsisOutput {
	return i.ToIsisOutputWithContext(context.Background())
}

func (i *Isis) ToIsisOutputWithContext(ctx context.Context) IsisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsisOutput)
}

// IsisArrayInput is an input type that accepts IsisArray and IsisArrayOutput values.
// You can construct a concrete instance of `IsisArrayInput` via:
//
//	IsisArray{ IsisArgs{...} }
type IsisArrayInput interface {
	pulumi.Input

	ToIsisArrayOutput() IsisArrayOutput
	ToIsisArrayOutputWithContext(context.Context) IsisArrayOutput
}

type IsisArray []IsisInput

func (IsisArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Isis)(nil)).Elem()
}

func (i IsisArray) ToIsisArrayOutput() IsisArrayOutput {
	return i.ToIsisArrayOutputWithContext(context.Background())
}

func (i IsisArray) ToIsisArrayOutputWithContext(ctx context.Context) IsisArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsisArrayOutput)
}

// IsisMapInput is an input type that accepts IsisMap and IsisMapOutput values.
// You can construct a concrete instance of `IsisMapInput` via:
//
//	IsisMap{ "key": IsisArgs{...} }
type IsisMapInput interface {
	pulumi.Input

	ToIsisMapOutput() IsisMapOutput
	ToIsisMapOutputWithContext(context.Context) IsisMapOutput
}

type IsisMap map[string]IsisInput

func (IsisMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Isis)(nil)).Elem()
}

func (i IsisMap) ToIsisMapOutput() IsisMapOutput {
	return i.ToIsisMapOutputWithContext(context.Background())
}

func (i IsisMap) ToIsisMapOutputWithContext(ctx context.Context) IsisMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsisMapOutput)
}

type IsisOutput struct{ *pulumi.OutputState }

func (IsisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Isis)(nil)).Elem()
}

func (o IsisOutput) ToIsisOutput() IsisOutput {
	return o
}

func (o IsisOutput) ToIsisOutputWithContext(ctx context.Context) IsisOutput {
	return o
}

// Enable/disable adjacency check. Valid values: `enable`, `disable`.
func (o IsisOutput) AdjacencyCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.AdjacencyCheck }).(pulumi.StringOutput)
}

// Enable/disable IPv6 adjacency check. Valid values: `enable`, `disable`.
func (o IsisOutput) AdjacencyCheck6() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.AdjacencyCheck6 }).(pulumi.StringOutput)
}

// Enable/disable IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
func (o IsisOutput) AdvPassiveOnly() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.AdvPassiveOnly }).(pulumi.StringOutput)
}

// Enable/disable IPv6 IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
func (o IsisOutput) AdvPassiveOnly6() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.AdvPassiveOnly6 }).(pulumi.StringOutput)
}

// Authentication key-chain for level 1 PDUs.
func (o IsisOutput) AuthKeychainL1() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.AuthKeychainL1 }).(pulumi.StringOutput)
}

// Authentication key-chain for level 2 PDUs.
func (o IsisOutput) AuthKeychainL2() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.AuthKeychainL2 }).(pulumi.StringOutput)
}

// Level 1 authentication mode. Valid values: `password`, `md5`.
func (o IsisOutput) AuthModeL1() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.AuthModeL1 }).(pulumi.StringOutput)
}

// Level 2 authentication mode. Valid values: `password`, `md5`.
func (o IsisOutput) AuthModeL2() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.AuthModeL2 }).(pulumi.StringOutput)
}

// Authentication password for level 1 PDUs.
func (o IsisOutput) AuthPasswordL1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringPtrOutput { return v.AuthPasswordL1 }).(pulumi.StringPtrOutput)
}

// Authentication password for level 2 PDUs.
func (o IsisOutput) AuthPasswordL2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringPtrOutput { return v.AuthPasswordL2 }).(pulumi.StringPtrOutput)
}

// Enable/disable level 1 authentication send-only. Valid values: `enable`, `disable`.
func (o IsisOutput) AuthSendonlyL1() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.AuthSendonlyL1 }).(pulumi.StringOutput)
}

// Enable/disable level 2 authentication send-only. Valid values: `enable`, `disable`.
func (o IsisOutput) AuthSendonlyL2() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.AuthSendonlyL2 }).(pulumi.StringOutput)
}

// Enable/disable distribution of default route information. Valid values: `enable`, `disable`.
func (o IsisOutput) DefaultOriginate() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.DefaultOriginate }).(pulumi.StringOutput)
}

// Enable/disable distribution of default IPv6 route information. Valid values: `enable`, `disable`.
func (o IsisOutput) DefaultOriginate6() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.DefaultOriginate6 }).(pulumi.StringOutput)
}

// Enable/disable dynamic hostname. Valid values: `enable`, `disable`.
func (o IsisOutput) DynamicHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.DynamicHostname }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o IsisOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o IsisOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Enable/disable ignoring of LSP errors with bad checksums. Valid values: `enable`, `disable`.
func (o IsisOutput) IgnoreLspErrors() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.IgnoreLspErrors }).(pulumi.StringOutput)
}

// IS type. Valid values: `level-1-2`, `level-1`, `level-2-only`.
func (o IsisOutput) IsType() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.IsType }).(pulumi.StringOutput)
}

// IS-IS interface configuration. The structure of `isisInterface` block is documented below.
func (o IsisOutput) IsisInterfaces() IsisIsisInterfaceArrayOutput {
	return o.ApplyT(func(v *Isis) IsisIsisInterfaceArrayOutput { return v.IsisInterfaces }).(IsisIsisInterfaceArrayOutput)
}

// IS-IS net configuration. The structure of `isisNet` block is documented below.
func (o IsisOutput) IsisNets() IsisIsisNetArrayOutput {
	return o.ApplyT(func(v *Isis) IsisIsisNetArrayOutput { return v.IsisNets }).(IsisIsisNetArrayOutput)
}

// Minimum interval for level 1 LSP regenerating.
func (o IsisOutput) LspGenIntervalL1() pulumi.IntOutput {
	return o.ApplyT(func(v *Isis) pulumi.IntOutput { return v.LspGenIntervalL1 }).(pulumi.IntOutput)
}

// Minimum interval for level 2 LSP regenerating.
func (o IsisOutput) LspGenIntervalL2() pulumi.IntOutput {
	return o.ApplyT(func(v *Isis) pulumi.IntOutput { return v.LspGenIntervalL2 }).(pulumi.IntOutput)
}

// LSP refresh time in seconds.
func (o IsisOutput) LspRefreshInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Isis) pulumi.IntOutput { return v.LspRefreshInterval }).(pulumi.IntOutput)
}

// Maximum LSP lifetime in seconds.
func (o IsisOutput) MaxLspLifetime() pulumi.IntOutput {
	return o.ApplyT(func(v *Isis) pulumi.IntOutput { return v.MaxLspLifetime }).(pulumi.IntOutput)
}

// Use old-style (ISO 10589) or new-style packet formats Valid values: `narrow`, `wide`, `transition`, `narrow-transition`, `narrow-transition-l1`, `narrow-transition-l2`, `wide-l1`, `wide-l2`, `wide-transition`, `wide-transition-l1`, `wide-transition-l2`, `transition-l1`, `transition-l2`.
func (o IsisOutput) MetricStyle() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.MetricStyle }).(pulumi.StringOutput)
}

// Enable/disable signal other routers not to use us in SPF. Valid values: `enable`, `disable`.
func (o IsisOutput) OverloadBit() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.OverloadBit }).(pulumi.StringOutput)
}

// Overload-bit only temporarily after reboot.
func (o IsisOutput) OverloadBitOnStartup() pulumi.IntOutput {
	return o.ApplyT(func(v *Isis) pulumi.IntOutput { return v.OverloadBitOnStartup }).(pulumi.IntOutput)
}

// Suppress overload-bit for the specific prefixes. Valid values: `external`, `interlevel`.
func (o IsisOutput) OverloadBitSuppress() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.OverloadBitSuppress }).(pulumi.StringOutput)
}

// Enable/disable redistribution of level 1 IPv6 routes into level 2. Valid values: `enable`, `disable`.
func (o IsisOutput) Redistribute6L1() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.Redistribute6L1 }).(pulumi.StringOutput)
}

// Access-list for IPv6 route redistribution from l1 to l2.
func (o IsisOutput) Redistribute6L1List() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.Redistribute6L1List }).(pulumi.StringOutput)
}

// Enable/disable redistribution of level 2 IPv6 routes into level 1. Valid values: `enable`, `disable`.
func (o IsisOutput) Redistribute6L2() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.Redistribute6L2 }).(pulumi.StringOutput)
}

// Access-list for IPv6 route redistribution from l2 to l1.
func (o IsisOutput) Redistribute6L2List() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.Redistribute6L2List }).(pulumi.StringOutput)
}

// IS-IS IPv6 redistribution for routing protocols. The structure of `redistribute6` block is documented below.
func (o IsisOutput) Redistribute6s() IsisRedistribute6ArrayOutput {
	return o.ApplyT(func(v *Isis) IsisRedistribute6ArrayOutput { return v.Redistribute6s }).(IsisRedistribute6ArrayOutput)
}

// Enable/disable redistribution of level 1 routes into level 2. Valid values: `enable`, `disable`.
func (o IsisOutput) RedistributeL1() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.RedistributeL1 }).(pulumi.StringOutput)
}

// Access-list for route redistribution from l1 to l2.
func (o IsisOutput) RedistributeL1List() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.RedistributeL1List }).(pulumi.StringOutput)
}

// Enable/disable redistribution of level 2 routes into level 1. Valid values: `enable`, `disable`.
func (o IsisOutput) RedistributeL2() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.RedistributeL2 }).(pulumi.StringOutput)
}

// Access-list for route redistribution from l2 to l1.
func (o IsisOutput) RedistributeL2List() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.RedistributeL2List }).(pulumi.StringOutput)
}

// IS-IS redistribute protocols. The structure of `redistribute` block is documented below.
func (o IsisOutput) Redistributes() IsisRedistributeArrayOutput {
	return o.ApplyT(func(v *Isis) IsisRedistributeArrayOutput { return v.Redistributes }).(IsisRedistributeArrayOutput)
}

// Level 1 SPF calculation delay.
func (o IsisOutput) SpfIntervalExpL1() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.SpfIntervalExpL1 }).(pulumi.StringOutput)
}

// Level 2 SPF calculation delay.
func (o IsisOutput) SpfIntervalExpL2() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.SpfIntervalExpL2 }).(pulumi.StringOutput)
}

// IS-IS IPv6 summary address. The structure of `summaryAddress6` block is documented below.
func (o IsisOutput) SummaryAddress6s() IsisSummaryAddress6ArrayOutput {
	return o.ApplyT(func(v *Isis) IsisSummaryAddress6ArrayOutput { return v.SummaryAddress6s }).(IsisSummaryAddress6ArrayOutput)
}

// IS-IS summary addresses. The structure of `summaryAddress` block is documented below.
func (o IsisOutput) SummaryAddresses() IsisSummaryAddressArrayOutput {
	return o.ApplyT(func(v *Isis) IsisSummaryAddressArrayOutput { return v.SummaryAddresses }).(IsisSummaryAddressArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o IsisOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type IsisArrayOutput struct{ *pulumi.OutputState }

func (IsisArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Isis)(nil)).Elem()
}

func (o IsisArrayOutput) ToIsisArrayOutput() IsisArrayOutput {
	return o
}

func (o IsisArrayOutput) ToIsisArrayOutputWithContext(ctx context.Context) IsisArrayOutput {
	return o
}

func (o IsisArrayOutput) Index(i pulumi.IntInput) IsisOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Isis {
		return vs[0].([]*Isis)[vs[1].(int)]
	}).(IsisOutput)
}

type IsisMapOutput struct{ *pulumi.OutputState }

func (IsisMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Isis)(nil)).Elem()
}

func (o IsisMapOutput) ToIsisMapOutput() IsisMapOutput {
	return o
}

func (o IsisMapOutput) ToIsisMapOutputWithContext(ctx context.Context) IsisMapOutput {
	return o
}

func (o IsisMapOutput) MapIndex(k pulumi.StringInput) IsisOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Isis {
		return vs[0].(map[string]*Isis)[vs[1].(string)]
	}).(IsisOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IsisInput)(nil)).Elem(), &Isis{})
	pulumi.RegisterInputType(reflect.TypeOf((*IsisArrayInput)(nil)).Elem(), IsisArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IsisMapInput)(nil)).Elem(), IsisMap{})
	pulumi.RegisterOutputType(IsisOutput{})
	pulumi.RegisterOutputType(IsisArrayOutput{})
	pulumi.RegisterOutputType(IsisMapOutput{})
}
