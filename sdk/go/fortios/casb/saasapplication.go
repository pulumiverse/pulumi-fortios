// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package casb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure CASB SaaS application. Applies to FortiOS Version `>= 7.4.1`.
//
// ## Import
//
// Casb SaasApplication can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:casb/saasapplication:Saasapplication labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:casb/saasapplication:Saasapplication labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Saasapplication struct {
	pulumi.CustomResourceState

	// SaaS application signature name.
	CasbName pulumi.StringOutput `pulumi:"casbName"`
	// SaaS application description.
	Description pulumi.StringOutput `pulumi:"description"`
	// SaaS application domain list. The structure of `domains` block is documented below.
	Domains SaasapplicationDomainArrayOutput `pulumi:"domains"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// SaaS application name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable setting. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// SaaS application type. Valid values: `built-in`, `customized`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSaasapplication registers a new resource with the given unique name, arguments, and options.
func NewSaasapplication(ctx *pulumi.Context,
	name string, args *SaasapplicationArgs, opts ...pulumi.ResourceOption) (*Saasapplication, error) {
	if args == nil {
		args = &SaasapplicationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Saasapplication
	err := ctx.RegisterResource("fortios:casb/saasapplication:Saasapplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSaasapplication gets an existing Saasapplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSaasapplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SaasapplicationState, opts ...pulumi.ResourceOption) (*Saasapplication, error) {
	var resource Saasapplication
	err := ctx.ReadResource("fortios:casb/saasapplication:Saasapplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Saasapplication resources.
type saasapplicationState struct {
	// SaaS application signature name.
	CasbName *string `pulumi:"casbName"`
	// SaaS application description.
	Description *string `pulumi:"description"`
	// SaaS application domain list. The structure of `domains` block is documented below.
	Domains []SaasapplicationDomain `pulumi:"domains"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// SaaS application name.
	Name *string `pulumi:"name"`
	// Enable/disable setting. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// SaaS application type. Valid values: `built-in`, `customized`.
	Type *string `pulumi:"type"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SaasapplicationState struct {
	// SaaS application signature name.
	CasbName pulumi.StringPtrInput
	// SaaS application description.
	Description pulumi.StringPtrInput
	// SaaS application domain list. The structure of `domains` block is documented below.
	Domains SaasapplicationDomainArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// SaaS application name.
	Name pulumi.StringPtrInput
	// Enable/disable setting. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// SaaS application type. Valid values: `built-in`, `customized`.
	Type pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SaasapplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*saasapplicationState)(nil)).Elem()
}

type saasapplicationArgs struct {
	// SaaS application signature name.
	CasbName *string `pulumi:"casbName"`
	// SaaS application description.
	Description *string `pulumi:"description"`
	// SaaS application domain list. The structure of `domains` block is documented below.
	Domains []SaasapplicationDomain `pulumi:"domains"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// SaaS application name.
	Name *string `pulumi:"name"`
	// Enable/disable setting. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// SaaS application type. Valid values: `built-in`, `customized`.
	Type *string `pulumi:"type"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Saasapplication resource.
type SaasapplicationArgs struct {
	// SaaS application signature name.
	CasbName pulumi.StringPtrInput
	// SaaS application description.
	Description pulumi.StringPtrInput
	// SaaS application domain list. The structure of `domains` block is documented below.
	Domains SaasapplicationDomainArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// SaaS application name.
	Name pulumi.StringPtrInput
	// Enable/disable setting. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// SaaS application type. Valid values: `built-in`, `customized`.
	Type pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SaasapplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*saasapplicationArgs)(nil)).Elem()
}

type SaasapplicationInput interface {
	pulumi.Input

	ToSaasapplicationOutput() SaasapplicationOutput
	ToSaasapplicationOutputWithContext(ctx context.Context) SaasapplicationOutput
}

func (*Saasapplication) ElementType() reflect.Type {
	return reflect.TypeOf((**Saasapplication)(nil)).Elem()
}

func (i *Saasapplication) ToSaasapplicationOutput() SaasapplicationOutput {
	return i.ToSaasapplicationOutputWithContext(context.Background())
}

func (i *Saasapplication) ToSaasapplicationOutputWithContext(ctx context.Context) SaasapplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaasapplicationOutput)
}

// SaasapplicationArrayInput is an input type that accepts SaasapplicationArray and SaasapplicationArrayOutput values.
// You can construct a concrete instance of `SaasapplicationArrayInput` via:
//
//	SaasapplicationArray{ SaasapplicationArgs{...} }
type SaasapplicationArrayInput interface {
	pulumi.Input

	ToSaasapplicationArrayOutput() SaasapplicationArrayOutput
	ToSaasapplicationArrayOutputWithContext(context.Context) SaasapplicationArrayOutput
}

type SaasapplicationArray []SaasapplicationInput

func (SaasapplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Saasapplication)(nil)).Elem()
}

func (i SaasapplicationArray) ToSaasapplicationArrayOutput() SaasapplicationArrayOutput {
	return i.ToSaasapplicationArrayOutputWithContext(context.Background())
}

func (i SaasapplicationArray) ToSaasapplicationArrayOutputWithContext(ctx context.Context) SaasapplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaasapplicationArrayOutput)
}

// SaasapplicationMapInput is an input type that accepts SaasapplicationMap and SaasapplicationMapOutput values.
// You can construct a concrete instance of `SaasapplicationMapInput` via:
//
//	SaasapplicationMap{ "key": SaasapplicationArgs{...} }
type SaasapplicationMapInput interface {
	pulumi.Input

	ToSaasapplicationMapOutput() SaasapplicationMapOutput
	ToSaasapplicationMapOutputWithContext(context.Context) SaasapplicationMapOutput
}

type SaasapplicationMap map[string]SaasapplicationInput

func (SaasapplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Saasapplication)(nil)).Elem()
}

func (i SaasapplicationMap) ToSaasapplicationMapOutput() SaasapplicationMapOutput {
	return i.ToSaasapplicationMapOutputWithContext(context.Background())
}

func (i SaasapplicationMap) ToSaasapplicationMapOutputWithContext(ctx context.Context) SaasapplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaasapplicationMapOutput)
}

type SaasapplicationOutput struct{ *pulumi.OutputState }

func (SaasapplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Saasapplication)(nil)).Elem()
}

func (o SaasapplicationOutput) ToSaasapplicationOutput() SaasapplicationOutput {
	return o
}

func (o SaasapplicationOutput) ToSaasapplicationOutputWithContext(ctx context.Context) SaasapplicationOutput {
	return o
}

// SaaS application signature name.
func (o SaasapplicationOutput) CasbName() pulumi.StringOutput {
	return o.ApplyT(func(v *Saasapplication) pulumi.StringOutput { return v.CasbName }).(pulumi.StringOutput)
}

// SaaS application description.
func (o SaasapplicationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Saasapplication) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// SaaS application domain list. The structure of `domains` block is documented below.
func (o SaasapplicationOutput) Domains() SaasapplicationDomainArrayOutput {
	return o.ApplyT(func(v *Saasapplication) SaasapplicationDomainArrayOutput { return v.Domains }).(SaasapplicationDomainArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SaasapplicationOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saasapplication) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o SaasapplicationOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saasapplication) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// SaaS application name.
func (o SaasapplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Saasapplication) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable setting. Valid values: `enable`, `disable`.
func (o SaasapplicationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Saasapplication) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// SaaS application type. Valid values: `built-in`, `customized`.
func (o SaasapplicationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Saasapplication) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o SaasapplicationOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Saasapplication) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SaasapplicationOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saasapplication) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SaasapplicationArrayOutput struct{ *pulumi.OutputState }

func (SaasapplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Saasapplication)(nil)).Elem()
}

func (o SaasapplicationArrayOutput) ToSaasapplicationArrayOutput() SaasapplicationArrayOutput {
	return o
}

func (o SaasapplicationArrayOutput) ToSaasapplicationArrayOutputWithContext(ctx context.Context) SaasapplicationArrayOutput {
	return o
}

func (o SaasapplicationArrayOutput) Index(i pulumi.IntInput) SaasapplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Saasapplication {
		return vs[0].([]*Saasapplication)[vs[1].(int)]
	}).(SaasapplicationOutput)
}

type SaasapplicationMapOutput struct{ *pulumi.OutputState }

func (SaasapplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Saasapplication)(nil)).Elem()
}

func (o SaasapplicationMapOutput) ToSaasapplicationMapOutput() SaasapplicationMapOutput {
	return o
}

func (o SaasapplicationMapOutput) ToSaasapplicationMapOutputWithContext(ctx context.Context) SaasapplicationMapOutput {
	return o
}

func (o SaasapplicationMapOutput) MapIndex(k pulumi.StringInput) SaasapplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Saasapplication {
		return vs[0].(map[string]*Saasapplication)[vs[1].(string)]
	}).(SaasapplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SaasapplicationInput)(nil)).Elem(), &Saasapplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*SaasapplicationArrayInput)(nil)).Elem(), SaasapplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SaasapplicationMapInput)(nil)).Elem(), SaasapplicationMap{})
	pulumi.RegisterOutputType(SaasapplicationOutput{})
	pulumi.RegisterOutputType(SaasapplicationArrayOutput{})
	pulumi.RegisterOutputType(SaasapplicationMapOutput{})
}
