// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package switchcontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure FortiSwitch traffic policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/switchcontroller"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := switchcontroller.NewTrafficpolicy(ctx, "trname", &switchcontroller.TrafficpolicyArgs{
//				GuaranteedBandwidth: pulumi.Int(0),
//				GuaranteedBurst:     pulumi.Int(0),
//				MaximumBurst:        pulumi.Int(0),
//				PolicerStatus:       pulumi.String("enable"),
//				Type:                pulumi.String("ingress"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SwitchController TrafficPolicy can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:switchcontroller/trafficpolicy:Trafficpolicy labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:switchcontroller/trafficpolicy:Trafficpolicy labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Trafficpolicy struct {
	pulumi.CustomResourceState

	// COS queue(0 - 7), or unset to disable.
	Cos pulumi.IntOutput `pulumi:"cos"`
	// COS queue(0 - 7), or unset to disable.
	CosQueue pulumi.IntOutput `pulumi:"cosQueue"`
	// Description of the traffic policy.
	Description pulumi.StringOutput `pulumi:"description"`
	// FSW Policer id
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Guaranteed bandwidth in kbps (max value = 524287000).
	GuaranteedBandwidth pulumi.IntOutput `pulumi:"guaranteedBandwidth"`
	// Guaranteed burst size in bytes (max value = 4294967295).
	GuaranteedBurst pulumi.IntOutput `pulumi:"guaranteedBurst"`
	// Maximum burst size in bytes (max value = 4294967295).
	MaximumBurst pulumi.IntOutput `pulumi:"maximumBurst"`
	// Traffic policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
	PolicerStatus pulumi.StringOutput `pulumi:"policerStatus"`
	// Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewTrafficpolicy registers a new resource with the given unique name, arguments, and options.
func NewTrafficpolicy(ctx *pulumi.Context,
	name string, args *TrafficpolicyArgs, opts ...pulumi.ResourceOption) (*Trafficpolicy, error) {
	if args == nil {
		args = &TrafficpolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Trafficpolicy
	err := ctx.RegisterResource("fortios:switchcontroller/trafficpolicy:Trafficpolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficpolicy gets an existing Trafficpolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficpolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficpolicyState, opts ...pulumi.ResourceOption) (*Trafficpolicy, error) {
	var resource Trafficpolicy
	err := ctx.ReadResource("fortios:switchcontroller/trafficpolicy:Trafficpolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Trafficpolicy resources.
type trafficpolicyState struct {
	// COS queue(0 - 7), or unset to disable.
	Cos *int `pulumi:"cos"`
	// COS queue(0 - 7), or unset to disable.
	CosQueue *int `pulumi:"cosQueue"`
	// Description of the traffic policy.
	Description *string `pulumi:"description"`
	// FSW Policer id
	Fosid *int `pulumi:"fosid"`
	// Guaranteed bandwidth in kbps (max value = 524287000).
	GuaranteedBandwidth *int `pulumi:"guaranteedBandwidth"`
	// Guaranteed burst size in bytes (max value = 4294967295).
	GuaranteedBurst *int `pulumi:"guaranteedBurst"`
	// Maximum burst size in bytes (max value = 4294967295).
	MaximumBurst *int `pulumi:"maximumBurst"`
	// Traffic policy name.
	Name *string `pulumi:"name"`
	// Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
	PolicerStatus *string `pulumi:"policerStatus"`
	// Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type TrafficpolicyState struct {
	// COS queue(0 - 7), or unset to disable.
	Cos pulumi.IntPtrInput
	// COS queue(0 - 7), or unset to disable.
	CosQueue pulumi.IntPtrInput
	// Description of the traffic policy.
	Description pulumi.StringPtrInput
	// FSW Policer id
	Fosid pulumi.IntPtrInput
	// Guaranteed bandwidth in kbps (max value = 524287000).
	GuaranteedBandwidth pulumi.IntPtrInput
	// Guaranteed burst size in bytes (max value = 4294967295).
	GuaranteedBurst pulumi.IntPtrInput
	// Maximum burst size in bytes (max value = 4294967295).
	MaximumBurst pulumi.IntPtrInput
	// Traffic policy name.
	Name pulumi.StringPtrInput
	// Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
	PolicerStatus pulumi.StringPtrInput
	// Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (TrafficpolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficpolicyState)(nil)).Elem()
}

type trafficpolicyArgs struct {
	// COS queue(0 - 7), or unset to disable.
	Cos *int `pulumi:"cos"`
	// COS queue(0 - 7), or unset to disable.
	CosQueue *int `pulumi:"cosQueue"`
	// Description of the traffic policy.
	Description *string `pulumi:"description"`
	// FSW Policer id
	Fosid *int `pulumi:"fosid"`
	// Guaranteed bandwidth in kbps (max value = 524287000).
	GuaranteedBandwidth *int `pulumi:"guaranteedBandwidth"`
	// Guaranteed burst size in bytes (max value = 4294967295).
	GuaranteedBurst *int `pulumi:"guaranteedBurst"`
	// Maximum burst size in bytes (max value = 4294967295).
	MaximumBurst *int `pulumi:"maximumBurst"`
	// Traffic policy name.
	Name *string `pulumi:"name"`
	// Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
	PolicerStatus *string `pulumi:"policerStatus"`
	// Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Trafficpolicy resource.
type TrafficpolicyArgs struct {
	// COS queue(0 - 7), or unset to disable.
	Cos pulumi.IntPtrInput
	// COS queue(0 - 7), or unset to disable.
	CosQueue pulumi.IntPtrInput
	// Description of the traffic policy.
	Description pulumi.StringPtrInput
	// FSW Policer id
	Fosid pulumi.IntPtrInput
	// Guaranteed bandwidth in kbps (max value = 524287000).
	GuaranteedBandwidth pulumi.IntPtrInput
	// Guaranteed burst size in bytes (max value = 4294967295).
	GuaranteedBurst pulumi.IntPtrInput
	// Maximum burst size in bytes (max value = 4294967295).
	MaximumBurst pulumi.IntPtrInput
	// Traffic policy name.
	Name pulumi.StringPtrInput
	// Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
	PolicerStatus pulumi.StringPtrInput
	// Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (TrafficpolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficpolicyArgs)(nil)).Elem()
}

type TrafficpolicyInput interface {
	pulumi.Input

	ToTrafficpolicyOutput() TrafficpolicyOutput
	ToTrafficpolicyOutputWithContext(ctx context.Context) TrafficpolicyOutput
}

func (*Trafficpolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**Trafficpolicy)(nil)).Elem()
}

func (i *Trafficpolicy) ToTrafficpolicyOutput() TrafficpolicyOutput {
	return i.ToTrafficpolicyOutputWithContext(context.Background())
}

func (i *Trafficpolicy) ToTrafficpolicyOutputWithContext(ctx context.Context) TrafficpolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficpolicyOutput)
}

// TrafficpolicyArrayInput is an input type that accepts TrafficpolicyArray and TrafficpolicyArrayOutput values.
// You can construct a concrete instance of `TrafficpolicyArrayInput` via:
//
//	TrafficpolicyArray{ TrafficpolicyArgs{...} }
type TrafficpolicyArrayInput interface {
	pulumi.Input

	ToTrafficpolicyArrayOutput() TrafficpolicyArrayOutput
	ToTrafficpolicyArrayOutputWithContext(context.Context) TrafficpolicyArrayOutput
}

type TrafficpolicyArray []TrafficpolicyInput

func (TrafficpolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Trafficpolicy)(nil)).Elem()
}

func (i TrafficpolicyArray) ToTrafficpolicyArrayOutput() TrafficpolicyArrayOutput {
	return i.ToTrafficpolicyArrayOutputWithContext(context.Background())
}

func (i TrafficpolicyArray) ToTrafficpolicyArrayOutputWithContext(ctx context.Context) TrafficpolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficpolicyArrayOutput)
}

// TrafficpolicyMapInput is an input type that accepts TrafficpolicyMap and TrafficpolicyMapOutput values.
// You can construct a concrete instance of `TrafficpolicyMapInput` via:
//
//	TrafficpolicyMap{ "key": TrafficpolicyArgs{...} }
type TrafficpolicyMapInput interface {
	pulumi.Input

	ToTrafficpolicyMapOutput() TrafficpolicyMapOutput
	ToTrafficpolicyMapOutputWithContext(context.Context) TrafficpolicyMapOutput
}

type TrafficpolicyMap map[string]TrafficpolicyInput

func (TrafficpolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Trafficpolicy)(nil)).Elem()
}

func (i TrafficpolicyMap) ToTrafficpolicyMapOutput() TrafficpolicyMapOutput {
	return i.ToTrafficpolicyMapOutputWithContext(context.Background())
}

func (i TrafficpolicyMap) ToTrafficpolicyMapOutputWithContext(ctx context.Context) TrafficpolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficpolicyMapOutput)
}

type TrafficpolicyOutput struct{ *pulumi.OutputState }

func (TrafficpolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Trafficpolicy)(nil)).Elem()
}

func (o TrafficpolicyOutput) ToTrafficpolicyOutput() TrafficpolicyOutput {
	return o
}

func (o TrafficpolicyOutput) ToTrafficpolicyOutputWithContext(ctx context.Context) TrafficpolicyOutput {
	return o
}

// COS queue(0 - 7), or unset to disable.
func (o TrafficpolicyOutput) Cos() pulumi.IntOutput {
	return o.ApplyT(func(v *Trafficpolicy) pulumi.IntOutput { return v.Cos }).(pulumi.IntOutput)
}

// COS queue(0 - 7), or unset to disable.
func (o TrafficpolicyOutput) CosQueue() pulumi.IntOutput {
	return o.ApplyT(func(v *Trafficpolicy) pulumi.IntOutput { return v.CosQueue }).(pulumi.IntOutput)
}

// Description of the traffic policy.
func (o TrafficpolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficpolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// FSW Policer id
func (o TrafficpolicyOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *Trafficpolicy) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Guaranteed bandwidth in kbps (max value = 524287000).
func (o TrafficpolicyOutput) GuaranteedBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Trafficpolicy) pulumi.IntOutput { return v.GuaranteedBandwidth }).(pulumi.IntOutput)
}

// Guaranteed burst size in bytes (max value = 4294967295).
func (o TrafficpolicyOutput) GuaranteedBurst() pulumi.IntOutput {
	return o.ApplyT(func(v *Trafficpolicy) pulumi.IntOutput { return v.GuaranteedBurst }).(pulumi.IntOutput)
}

// Maximum burst size in bytes (max value = 4294967295).
func (o TrafficpolicyOutput) MaximumBurst() pulumi.IntOutput {
	return o.ApplyT(func(v *Trafficpolicy) pulumi.IntOutput { return v.MaximumBurst }).(pulumi.IntOutput)
}

// Traffic policy name.
func (o TrafficpolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficpolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
func (o TrafficpolicyOutput) PolicerStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficpolicy) pulumi.StringOutput { return v.PolicerStatus }).(pulumi.StringOutput)
}

// Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
func (o TrafficpolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficpolicy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o TrafficpolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trafficpolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type TrafficpolicyArrayOutput struct{ *pulumi.OutputState }

func (TrafficpolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Trafficpolicy)(nil)).Elem()
}

func (o TrafficpolicyArrayOutput) ToTrafficpolicyArrayOutput() TrafficpolicyArrayOutput {
	return o
}

func (o TrafficpolicyArrayOutput) ToTrafficpolicyArrayOutputWithContext(ctx context.Context) TrafficpolicyArrayOutput {
	return o
}

func (o TrafficpolicyArrayOutput) Index(i pulumi.IntInput) TrafficpolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Trafficpolicy {
		return vs[0].([]*Trafficpolicy)[vs[1].(int)]
	}).(TrafficpolicyOutput)
}

type TrafficpolicyMapOutput struct{ *pulumi.OutputState }

func (TrafficpolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Trafficpolicy)(nil)).Elem()
}

func (o TrafficpolicyMapOutput) ToTrafficpolicyMapOutput() TrafficpolicyMapOutput {
	return o
}

func (o TrafficpolicyMapOutput) ToTrafficpolicyMapOutputWithContext(ctx context.Context) TrafficpolicyMapOutput {
	return o
}

func (o TrafficpolicyMapOutput) MapIndex(k pulumi.StringInput) TrafficpolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Trafficpolicy {
		return vs[0].(map[string]*Trafficpolicy)[vs[1].(string)]
	}).(TrafficpolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficpolicyInput)(nil)).Elem(), &Trafficpolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficpolicyArrayInput)(nil)).Elem(), TrafficpolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficpolicyMapInput)(nil)).Elem(), TrafficpolicyMap{})
	pulumi.RegisterOutputType(TrafficpolicyOutput{})
	pulumi.RegisterOutputType(TrafficpolicyArrayOutput{})
	pulumi.RegisterOutputType(TrafficpolicyMapOutput{})
}
