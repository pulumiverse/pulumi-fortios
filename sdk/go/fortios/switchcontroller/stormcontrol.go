// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package switchcontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure FortiSwitch storm control.
//
// ## Import
//
// SwitchController StormControl can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:switchcontroller/stormcontrol:Stormcontrol labelname SwitchControllerStormControl
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:switchcontroller/stormcontrol:Stormcontrol labelname SwitchControllerStormControl
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Stormcontrol struct {
	pulumi.CustomResourceState

	// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
	Broadcast pulumi.StringOutput `pulumi:"broadcast"`
	// Rate in packets per second at which storm control drops excess traffic, default=500. On FortiOS versions 6.2.0-7.2.8: 1 - 10000000. On FortiOS versions >= 7.4.0: 0-10000000, drop-all=0.
	Rate pulumi.IntOutput `pulumi:"rate"`
	// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
	UnknownMulticast pulumi.StringOutput `pulumi:"unknownMulticast"`
	// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
	UnknownUnicast pulumi.StringOutput `pulumi:"unknownUnicast"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewStormcontrol registers a new resource with the given unique name, arguments, and options.
func NewStormcontrol(ctx *pulumi.Context,
	name string, args *StormcontrolArgs, opts ...pulumi.ResourceOption) (*Stormcontrol, error) {
	if args == nil {
		args = &StormcontrolArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Stormcontrol
	err := ctx.RegisterResource("fortios:switchcontroller/stormcontrol:Stormcontrol", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStormcontrol gets an existing Stormcontrol resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStormcontrol(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StormcontrolState, opts ...pulumi.ResourceOption) (*Stormcontrol, error) {
	var resource Stormcontrol
	err := ctx.ReadResource("fortios:switchcontroller/stormcontrol:Stormcontrol", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Stormcontrol resources.
type stormcontrolState struct {
	// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
	Broadcast *string `pulumi:"broadcast"`
	// Rate in packets per second at which storm control drops excess traffic, default=500. On FortiOS versions 6.2.0-7.2.8: 1 - 10000000. On FortiOS versions >= 7.4.0: 0-10000000, drop-all=0.
	Rate *int `pulumi:"rate"`
	// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
	UnknownMulticast *string `pulumi:"unknownMulticast"`
	// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
	UnknownUnicast *string `pulumi:"unknownUnicast"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type StormcontrolState struct {
	// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
	Broadcast pulumi.StringPtrInput
	// Rate in packets per second at which storm control drops excess traffic, default=500. On FortiOS versions 6.2.0-7.2.8: 1 - 10000000. On FortiOS versions >= 7.4.0: 0-10000000, drop-all=0.
	Rate pulumi.IntPtrInput
	// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
	UnknownMulticast pulumi.StringPtrInput
	// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
	UnknownUnicast pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (StormcontrolState) ElementType() reflect.Type {
	return reflect.TypeOf((*stormcontrolState)(nil)).Elem()
}

type stormcontrolArgs struct {
	// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
	Broadcast *string `pulumi:"broadcast"`
	// Rate in packets per second at which storm control drops excess traffic, default=500. On FortiOS versions 6.2.0-7.2.8: 1 - 10000000. On FortiOS versions >= 7.4.0: 0-10000000, drop-all=0.
	Rate *int `pulumi:"rate"`
	// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
	UnknownMulticast *string `pulumi:"unknownMulticast"`
	// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
	UnknownUnicast *string `pulumi:"unknownUnicast"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Stormcontrol resource.
type StormcontrolArgs struct {
	// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
	Broadcast pulumi.StringPtrInput
	// Rate in packets per second at which storm control drops excess traffic, default=500. On FortiOS versions 6.2.0-7.2.8: 1 - 10000000. On FortiOS versions >= 7.4.0: 0-10000000, drop-all=0.
	Rate pulumi.IntPtrInput
	// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
	UnknownMulticast pulumi.StringPtrInput
	// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
	UnknownUnicast pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (StormcontrolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stormcontrolArgs)(nil)).Elem()
}

type StormcontrolInput interface {
	pulumi.Input

	ToStormcontrolOutput() StormcontrolOutput
	ToStormcontrolOutputWithContext(ctx context.Context) StormcontrolOutput
}

func (*Stormcontrol) ElementType() reflect.Type {
	return reflect.TypeOf((**Stormcontrol)(nil)).Elem()
}

func (i *Stormcontrol) ToStormcontrolOutput() StormcontrolOutput {
	return i.ToStormcontrolOutputWithContext(context.Background())
}

func (i *Stormcontrol) ToStormcontrolOutputWithContext(ctx context.Context) StormcontrolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormcontrolOutput)
}

// StormcontrolArrayInput is an input type that accepts StormcontrolArray and StormcontrolArrayOutput values.
// You can construct a concrete instance of `StormcontrolArrayInput` via:
//
//	StormcontrolArray{ StormcontrolArgs{...} }
type StormcontrolArrayInput interface {
	pulumi.Input

	ToStormcontrolArrayOutput() StormcontrolArrayOutput
	ToStormcontrolArrayOutputWithContext(context.Context) StormcontrolArrayOutput
}

type StormcontrolArray []StormcontrolInput

func (StormcontrolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Stormcontrol)(nil)).Elem()
}

func (i StormcontrolArray) ToStormcontrolArrayOutput() StormcontrolArrayOutput {
	return i.ToStormcontrolArrayOutputWithContext(context.Background())
}

func (i StormcontrolArray) ToStormcontrolArrayOutputWithContext(ctx context.Context) StormcontrolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormcontrolArrayOutput)
}

// StormcontrolMapInput is an input type that accepts StormcontrolMap and StormcontrolMapOutput values.
// You can construct a concrete instance of `StormcontrolMapInput` via:
//
//	StormcontrolMap{ "key": StormcontrolArgs{...} }
type StormcontrolMapInput interface {
	pulumi.Input

	ToStormcontrolMapOutput() StormcontrolMapOutput
	ToStormcontrolMapOutputWithContext(context.Context) StormcontrolMapOutput
}

type StormcontrolMap map[string]StormcontrolInput

func (StormcontrolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Stormcontrol)(nil)).Elem()
}

func (i StormcontrolMap) ToStormcontrolMapOutput() StormcontrolMapOutput {
	return i.ToStormcontrolMapOutputWithContext(context.Background())
}

func (i StormcontrolMap) ToStormcontrolMapOutputWithContext(ctx context.Context) StormcontrolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormcontrolMapOutput)
}

type StormcontrolOutput struct{ *pulumi.OutputState }

func (StormcontrolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Stormcontrol)(nil)).Elem()
}

func (o StormcontrolOutput) ToStormcontrolOutput() StormcontrolOutput {
	return o
}

func (o StormcontrolOutput) ToStormcontrolOutputWithContext(ctx context.Context) StormcontrolOutput {
	return o
}

// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
func (o StormcontrolOutput) Broadcast() pulumi.StringOutput {
	return o.ApplyT(func(v *Stormcontrol) pulumi.StringOutput { return v.Broadcast }).(pulumi.StringOutput)
}

// Rate in packets per second at which storm control drops excess traffic, default=500. On FortiOS versions 6.2.0-7.2.8: 1 - 10000000. On FortiOS versions >= 7.4.0: 0-10000000, drop-all=0.
func (o StormcontrolOutput) Rate() pulumi.IntOutput {
	return o.ApplyT(func(v *Stormcontrol) pulumi.IntOutput { return v.Rate }).(pulumi.IntOutput)
}

// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
func (o StormcontrolOutput) UnknownMulticast() pulumi.StringOutput {
	return o.ApplyT(func(v *Stormcontrol) pulumi.StringOutput { return v.UnknownMulticast }).(pulumi.StringOutput)
}

// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
func (o StormcontrolOutput) UnknownUnicast() pulumi.StringOutput {
	return o.ApplyT(func(v *Stormcontrol) pulumi.StringOutput { return v.UnknownUnicast }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o StormcontrolOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Stormcontrol) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type StormcontrolArrayOutput struct{ *pulumi.OutputState }

func (StormcontrolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Stormcontrol)(nil)).Elem()
}

func (o StormcontrolArrayOutput) ToStormcontrolArrayOutput() StormcontrolArrayOutput {
	return o
}

func (o StormcontrolArrayOutput) ToStormcontrolArrayOutputWithContext(ctx context.Context) StormcontrolArrayOutput {
	return o
}

func (o StormcontrolArrayOutput) Index(i pulumi.IntInput) StormcontrolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Stormcontrol {
		return vs[0].([]*Stormcontrol)[vs[1].(int)]
	}).(StormcontrolOutput)
}

type StormcontrolMapOutput struct{ *pulumi.OutputState }

func (StormcontrolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Stormcontrol)(nil)).Elem()
}

func (o StormcontrolMapOutput) ToStormcontrolMapOutput() StormcontrolMapOutput {
	return o
}

func (o StormcontrolMapOutput) ToStormcontrolMapOutputWithContext(ctx context.Context) StormcontrolMapOutput {
	return o
}

func (o StormcontrolMapOutput) MapIndex(k pulumi.StringInput) StormcontrolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Stormcontrol {
		return vs[0].(map[string]*Stormcontrol)[vs[1].(string)]
	}).(StormcontrolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StormcontrolInput)(nil)).Elem(), &Stormcontrol{})
	pulumi.RegisterInputType(reflect.TypeOf((*StormcontrolArrayInput)(nil)).Elem(), StormcontrolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StormcontrolMapInput)(nil)).Elem(), StormcontrolMap{})
	pulumi.RegisterOutputType(StormcontrolOutput{})
	pulumi.RegisterOutputType(StormcontrolArrayOutput{})
	pulumi.RegisterOutputType(StormcontrolMapOutput{})
}
