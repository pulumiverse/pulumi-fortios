// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitypolicy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Names of VLANs that use captive portal authentication. Applies to FortiOS Version `<= 6.2.0`.
//
// ## Import
//
// SwitchControllerSecurityPolicy CaptivePortal can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:switchcontroller/securitypolicy/captiveportal:Captiveportal labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:switchcontroller/securitypolicy/captiveportal:Captiveportal labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Captiveportal struct {
	pulumi.CustomResourceState

	// Policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Policy type. Valid values: `captive-portal`.
	PolicyType pulumi.StringOutput `pulumi:"policyType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
	// Names of VLANs that use captive portal authentication.
	Vlan pulumi.StringOutput `pulumi:"vlan"`
}

// NewCaptiveportal registers a new resource with the given unique name, arguments, and options.
func NewCaptiveportal(ctx *pulumi.Context,
	name string, args *CaptiveportalArgs, opts ...pulumi.ResourceOption) (*Captiveportal, error) {
	if args == nil {
		args = &CaptiveportalArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Captiveportal
	err := ctx.RegisterResource("fortios:switchcontroller/securitypolicy/captiveportal:Captiveportal", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCaptiveportal gets an existing Captiveportal resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCaptiveportal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CaptiveportalState, opts ...pulumi.ResourceOption) (*Captiveportal, error) {
	var resource Captiveportal
	err := ctx.ReadResource("fortios:switchcontroller/securitypolicy/captiveportal:Captiveportal", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Captiveportal resources.
type captiveportalState struct {
	// Policy name.
	Name *string `pulumi:"name"`
	// Policy type. Valid values: `captive-portal`.
	PolicyType *string `pulumi:"policyType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Names of VLANs that use captive portal authentication.
	Vlan *string `pulumi:"vlan"`
}

type CaptiveportalState struct {
	// Policy name.
	Name pulumi.StringPtrInput
	// Policy type. Valid values: `captive-portal`.
	PolicyType pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Names of VLANs that use captive portal authentication.
	Vlan pulumi.StringPtrInput
}

func (CaptiveportalState) ElementType() reflect.Type {
	return reflect.TypeOf((*captiveportalState)(nil)).Elem()
}

type captiveportalArgs struct {
	// Policy name.
	Name *string `pulumi:"name"`
	// Policy type. Valid values: `captive-portal`.
	PolicyType *string `pulumi:"policyType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Names of VLANs that use captive portal authentication.
	Vlan *string `pulumi:"vlan"`
}

// The set of arguments for constructing a Captiveportal resource.
type CaptiveportalArgs struct {
	// Policy name.
	Name pulumi.StringPtrInput
	// Policy type. Valid values: `captive-portal`.
	PolicyType pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Names of VLANs that use captive portal authentication.
	Vlan pulumi.StringPtrInput
}

func (CaptiveportalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*captiveportalArgs)(nil)).Elem()
}

type CaptiveportalInput interface {
	pulumi.Input

	ToCaptiveportalOutput() CaptiveportalOutput
	ToCaptiveportalOutputWithContext(ctx context.Context) CaptiveportalOutput
}

func (*Captiveportal) ElementType() reflect.Type {
	return reflect.TypeOf((**Captiveportal)(nil)).Elem()
}

func (i *Captiveportal) ToCaptiveportalOutput() CaptiveportalOutput {
	return i.ToCaptiveportalOutputWithContext(context.Background())
}

func (i *Captiveportal) ToCaptiveportalOutputWithContext(ctx context.Context) CaptiveportalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaptiveportalOutput)
}

// CaptiveportalArrayInput is an input type that accepts CaptiveportalArray and CaptiveportalArrayOutput values.
// You can construct a concrete instance of `CaptiveportalArrayInput` via:
//
//	CaptiveportalArray{ CaptiveportalArgs{...} }
type CaptiveportalArrayInput interface {
	pulumi.Input

	ToCaptiveportalArrayOutput() CaptiveportalArrayOutput
	ToCaptiveportalArrayOutputWithContext(context.Context) CaptiveportalArrayOutput
}

type CaptiveportalArray []CaptiveportalInput

func (CaptiveportalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Captiveportal)(nil)).Elem()
}

func (i CaptiveportalArray) ToCaptiveportalArrayOutput() CaptiveportalArrayOutput {
	return i.ToCaptiveportalArrayOutputWithContext(context.Background())
}

func (i CaptiveportalArray) ToCaptiveportalArrayOutputWithContext(ctx context.Context) CaptiveportalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaptiveportalArrayOutput)
}

// CaptiveportalMapInput is an input type that accepts CaptiveportalMap and CaptiveportalMapOutput values.
// You can construct a concrete instance of `CaptiveportalMapInput` via:
//
//	CaptiveportalMap{ "key": CaptiveportalArgs{...} }
type CaptiveportalMapInput interface {
	pulumi.Input

	ToCaptiveportalMapOutput() CaptiveportalMapOutput
	ToCaptiveportalMapOutputWithContext(context.Context) CaptiveportalMapOutput
}

type CaptiveportalMap map[string]CaptiveportalInput

func (CaptiveportalMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Captiveportal)(nil)).Elem()
}

func (i CaptiveportalMap) ToCaptiveportalMapOutput() CaptiveportalMapOutput {
	return i.ToCaptiveportalMapOutputWithContext(context.Background())
}

func (i CaptiveportalMap) ToCaptiveportalMapOutputWithContext(ctx context.Context) CaptiveportalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaptiveportalMapOutput)
}

type CaptiveportalOutput struct{ *pulumi.OutputState }

func (CaptiveportalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Captiveportal)(nil)).Elem()
}

func (o CaptiveportalOutput) ToCaptiveportalOutput() CaptiveportalOutput {
	return o
}

func (o CaptiveportalOutput) ToCaptiveportalOutputWithContext(ctx context.Context) CaptiveportalOutput {
	return o
}

// Policy name.
func (o CaptiveportalOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Captiveportal) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Policy type. Valid values: `captive-portal`.
func (o CaptiveportalOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *Captiveportal) pulumi.StringOutput { return v.PolicyType }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o CaptiveportalOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Captiveportal) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

// Names of VLANs that use captive portal authentication.
func (o CaptiveportalOutput) Vlan() pulumi.StringOutput {
	return o.ApplyT(func(v *Captiveportal) pulumi.StringOutput { return v.Vlan }).(pulumi.StringOutput)
}

type CaptiveportalArrayOutput struct{ *pulumi.OutputState }

func (CaptiveportalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Captiveportal)(nil)).Elem()
}

func (o CaptiveportalArrayOutput) ToCaptiveportalArrayOutput() CaptiveportalArrayOutput {
	return o
}

func (o CaptiveportalArrayOutput) ToCaptiveportalArrayOutputWithContext(ctx context.Context) CaptiveportalArrayOutput {
	return o
}

func (o CaptiveportalArrayOutput) Index(i pulumi.IntInput) CaptiveportalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Captiveportal {
		return vs[0].([]*Captiveportal)[vs[1].(int)]
	}).(CaptiveportalOutput)
}

type CaptiveportalMapOutput struct{ *pulumi.OutputState }

func (CaptiveportalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Captiveportal)(nil)).Elem()
}

func (o CaptiveportalMapOutput) ToCaptiveportalMapOutput() CaptiveportalMapOutput {
	return o
}

func (o CaptiveportalMapOutput) ToCaptiveportalMapOutputWithContext(ctx context.Context) CaptiveportalMapOutput {
	return o
}

func (o CaptiveportalMapOutput) MapIndex(k pulumi.StringInput) CaptiveportalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Captiveportal {
		return vs[0].(map[string]*Captiveportal)[vs[1].(string)]
	}).(CaptiveportalOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CaptiveportalInput)(nil)).Elem(), &Captiveportal{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaptiveportalArrayInput)(nil)).Elem(), CaptiveportalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaptiveportalMapInput)(nil)).Elem(), CaptiveportalMap{})
	pulumi.RegisterOutputType(CaptiveportalOutput{})
	pulumi.RegisterOutputType(CaptiveportalArrayOutput{})
	pulumi.RegisterOutputType(CaptiveportalMapOutput{})
}
