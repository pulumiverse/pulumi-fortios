// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package qos

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure FortiSwitch QoS egress queue policy.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/switchcontroller"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := switchcontroller.NewQueuepolicy(ctx, "trname", &switchcontroller.QueuepolicyArgs{
//				RateBy:   pulumi.String("kbps"),
//				Schedule: pulumi.String("round-robin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// SwitchControllerQos QueuePolicy can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:switchcontroller/qos/queuepolicy:Queuepolicy labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:switchcontroller/qos/queuepolicy:Queuepolicy labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Queuepolicy struct {
	pulumi.CustomResourceState

	// COS queue configuration. The structure of `cosQueue` block is documented below.
	CosQueues QueuepolicyCosQueueArrayOutput `pulumi:"cosQueues"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// QoS policy name
	Name pulumi.StringOutput `pulumi:"name"`
	// COS queue rate by kbps or percent. Valid values: `kbps`, `percent`.
	RateBy pulumi.StringOutput `pulumi:"rateBy"`
	// COS queue scheduling. Valid values: `strict`, `round-robin`, `weighted`.
	Schedule pulumi.StringOutput `pulumi:"schedule"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewQueuepolicy registers a new resource with the given unique name, arguments, and options.
func NewQueuepolicy(ctx *pulumi.Context,
	name string, args *QueuepolicyArgs, opts ...pulumi.ResourceOption) (*Queuepolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RateBy == nil {
		return nil, errors.New("invalid value for required argument 'RateBy'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Queuepolicy
	err := ctx.RegisterResource("fortios:switchcontroller/qos/queuepolicy:Queuepolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueuepolicy gets an existing Queuepolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueuepolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueuepolicyState, opts ...pulumi.ResourceOption) (*Queuepolicy, error) {
	var resource Queuepolicy
	err := ctx.ReadResource("fortios:switchcontroller/qos/queuepolicy:Queuepolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Queuepolicy resources.
type queuepolicyState struct {
	// COS queue configuration. The structure of `cosQueue` block is documented below.
	CosQueues []QueuepolicyCosQueue `pulumi:"cosQueues"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// QoS policy name
	Name *string `pulumi:"name"`
	// COS queue rate by kbps or percent. Valid values: `kbps`, `percent`.
	RateBy *string `pulumi:"rateBy"`
	// COS queue scheduling. Valid values: `strict`, `round-robin`, `weighted`.
	Schedule *string `pulumi:"schedule"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type QueuepolicyState struct {
	// COS queue configuration. The structure of `cosQueue` block is documented below.
	CosQueues QueuepolicyCosQueueArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// QoS policy name
	Name pulumi.StringPtrInput
	// COS queue rate by kbps or percent. Valid values: `kbps`, `percent`.
	RateBy pulumi.StringPtrInput
	// COS queue scheduling. Valid values: `strict`, `round-robin`, `weighted`.
	Schedule pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (QueuepolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*queuepolicyState)(nil)).Elem()
}

type queuepolicyArgs struct {
	// COS queue configuration. The structure of `cosQueue` block is documented below.
	CosQueues []QueuepolicyCosQueue `pulumi:"cosQueues"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// QoS policy name
	Name *string `pulumi:"name"`
	// COS queue rate by kbps or percent. Valid values: `kbps`, `percent`.
	RateBy string `pulumi:"rateBy"`
	// COS queue scheduling. Valid values: `strict`, `round-robin`, `weighted`.
	Schedule string `pulumi:"schedule"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Queuepolicy resource.
type QueuepolicyArgs struct {
	// COS queue configuration. The structure of `cosQueue` block is documented below.
	CosQueues QueuepolicyCosQueueArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// QoS policy name
	Name pulumi.StringPtrInput
	// COS queue rate by kbps or percent. Valid values: `kbps`, `percent`.
	RateBy pulumi.StringInput
	// COS queue scheduling. Valid values: `strict`, `round-robin`, `weighted`.
	Schedule pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (QueuepolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queuepolicyArgs)(nil)).Elem()
}

type QueuepolicyInput interface {
	pulumi.Input

	ToQueuepolicyOutput() QueuepolicyOutput
	ToQueuepolicyOutputWithContext(ctx context.Context) QueuepolicyOutput
}

func (*Queuepolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**Queuepolicy)(nil)).Elem()
}

func (i *Queuepolicy) ToQueuepolicyOutput() QueuepolicyOutput {
	return i.ToQueuepolicyOutputWithContext(context.Background())
}

func (i *Queuepolicy) ToQueuepolicyOutputWithContext(ctx context.Context) QueuepolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuepolicyOutput)
}

// QueuepolicyArrayInput is an input type that accepts QueuepolicyArray and QueuepolicyArrayOutput values.
// You can construct a concrete instance of `QueuepolicyArrayInput` via:
//
//	QueuepolicyArray{ QueuepolicyArgs{...} }
type QueuepolicyArrayInput interface {
	pulumi.Input

	ToQueuepolicyArrayOutput() QueuepolicyArrayOutput
	ToQueuepolicyArrayOutputWithContext(context.Context) QueuepolicyArrayOutput
}

type QueuepolicyArray []QueuepolicyInput

func (QueuepolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Queuepolicy)(nil)).Elem()
}

func (i QueuepolicyArray) ToQueuepolicyArrayOutput() QueuepolicyArrayOutput {
	return i.ToQueuepolicyArrayOutputWithContext(context.Background())
}

func (i QueuepolicyArray) ToQueuepolicyArrayOutputWithContext(ctx context.Context) QueuepolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuepolicyArrayOutput)
}

// QueuepolicyMapInput is an input type that accepts QueuepolicyMap and QueuepolicyMapOutput values.
// You can construct a concrete instance of `QueuepolicyMapInput` via:
//
//	QueuepolicyMap{ "key": QueuepolicyArgs{...} }
type QueuepolicyMapInput interface {
	pulumi.Input

	ToQueuepolicyMapOutput() QueuepolicyMapOutput
	ToQueuepolicyMapOutputWithContext(context.Context) QueuepolicyMapOutput
}

type QueuepolicyMap map[string]QueuepolicyInput

func (QueuepolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Queuepolicy)(nil)).Elem()
}

func (i QueuepolicyMap) ToQueuepolicyMapOutput() QueuepolicyMapOutput {
	return i.ToQueuepolicyMapOutputWithContext(context.Background())
}

func (i QueuepolicyMap) ToQueuepolicyMapOutputWithContext(ctx context.Context) QueuepolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuepolicyMapOutput)
}

type QueuepolicyOutput struct{ *pulumi.OutputState }

func (QueuepolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Queuepolicy)(nil)).Elem()
}

func (o QueuepolicyOutput) ToQueuepolicyOutput() QueuepolicyOutput {
	return o
}

func (o QueuepolicyOutput) ToQueuepolicyOutputWithContext(ctx context.Context) QueuepolicyOutput {
	return o
}

// COS queue configuration. The structure of `cosQueue` block is documented below.
func (o QueuepolicyOutput) CosQueues() QueuepolicyCosQueueArrayOutput {
	return o.ApplyT(func(v *Queuepolicy) QueuepolicyCosQueueArrayOutput { return v.CosQueues }).(QueuepolicyCosQueueArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o QueuepolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Queuepolicy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o QueuepolicyOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Queuepolicy) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// QoS policy name
func (o QueuepolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Queuepolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// COS queue rate by kbps or percent. Valid values: `kbps`, `percent`.
func (o QueuepolicyOutput) RateBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Queuepolicy) pulumi.StringOutput { return v.RateBy }).(pulumi.StringOutput)
}

// COS queue scheduling. Valid values: `strict`, `round-robin`, `weighted`.
func (o QueuepolicyOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v *Queuepolicy) pulumi.StringOutput { return v.Schedule }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o QueuepolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Queuepolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type QueuepolicyArrayOutput struct{ *pulumi.OutputState }

func (QueuepolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Queuepolicy)(nil)).Elem()
}

func (o QueuepolicyArrayOutput) ToQueuepolicyArrayOutput() QueuepolicyArrayOutput {
	return o
}

func (o QueuepolicyArrayOutput) ToQueuepolicyArrayOutputWithContext(ctx context.Context) QueuepolicyArrayOutput {
	return o
}

func (o QueuepolicyArrayOutput) Index(i pulumi.IntInput) QueuepolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Queuepolicy {
		return vs[0].([]*Queuepolicy)[vs[1].(int)]
	}).(QueuepolicyOutput)
}

type QueuepolicyMapOutput struct{ *pulumi.OutputState }

func (QueuepolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Queuepolicy)(nil)).Elem()
}

func (o QueuepolicyMapOutput) ToQueuepolicyMapOutput() QueuepolicyMapOutput {
	return o
}

func (o QueuepolicyMapOutput) ToQueuepolicyMapOutputWithContext(ctx context.Context) QueuepolicyMapOutput {
	return o
}

func (o QueuepolicyMapOutput) MapIndex(k pulumi.StringInput) QueuepolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Queuepolicy {
		return vs[0].(map[string]*Queuepolicy)[vs[1].(string)]
	}).(QueuepolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueuepolicyInput)(nil)).Elem(), &Queuepolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueuepolicyArrayInput)(nil)).Elem(), QueuepolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueuepolicyMapInput)(nil)).Elem(), QueuepolicyMap{})
	pulumi.RegisterOutputType(QueuepolicyOutput{})
	pulumi.RegisterOutputType(QueuepolicyArrayOutput{})
	pulumi.RegisterOutputType(QueuepolicyMapOutput{})
}
