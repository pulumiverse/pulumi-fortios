// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package qos

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure FortiSwitch QoS IP precedence/DSCP.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/switchcontroller"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := switchcontroller.NewIpdscpmap(ctx, "trname", &switchcontroller.IpdscpmapArgs{
//				Description: pulumi.String("DEIW"),
//				Maps: qos.IpdscpmapMapTypeArray{
//					&qos.IpdscpmapMapTypeArgs{
//						CosQueue: pulumi.Int(3),
//						Diffserv: pulumi.String("CS0 CS1 AF11"),
//						Name:     pulumi.String("1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// SwitchControllerQos IpDscpMap can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:switchcontroller/qos/ipdscpmap:Ipdscpmap labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:switchcontroller/qos/ipdscpmap:Ipdscpmap labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Ipdscpmap struct {
	pulumi.CustomResourceState

	// Description of the ip-dscp map name.
	Description pulumi.StringOutput `pulumi:"description"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Maps between IP-DSCP value to COS queue. The structure of `map` block is documented below.
	Maps IpdscpmapMapTypeArrayOutput `pulumi:"maps"`
	// Dscp map name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewIpdscpmap registers a new resource with the given unique name, arguments, and options.
func NewIpdscpmap(ctx *pulumi.Context,
	name string, args *IpdscpmapArgs, opts ...pulumi.ResourceOption) (*Ipdscpmap, error) {
	if args == nil {
		args = &IpdscpmapArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ipdscpmap
	err := ctx.RegisterResource("fortios:switchcontroller/qos/ipdscpmap:Ipdscpmap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpdscpmap gets an existing Ipdscpmap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpdscpmap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpdscpmapState, opts ...pulumi.ResourceOption) (*Ipdscpmap, error) {
	var resource Ipdscpmap
	err := ctx.ReadResource("fortios:switchcontroller/qos/ipdscpmap:Ipdscpmap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipdscpmap resources.
type ipdscpmapState struct {
	// Description of the ip-dscp map name.
	Description *string `pulumi:"description"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Maps between IP-DSCP value to COS queue. The structure of `map` block is documented below.
	Maps []IpdscpmapMapType `pulumi:"maps"`
	// Dscp map name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type IpdscpmapState struct {
	// Description of the ip-dscp map name.
	Description pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Maps between IP-DSCP value to COS queue. The structure of `map` block is documented below.
	Maps IpdscpmapMapTypeArrayInput
	// Dscp map name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IpdscpmapState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipdscpmapState)(nil)).Elem()
}

type ipdscpmapArgs struct {
	// Description of the ip-dscp map name.
	Description *string `pulumi:"description"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Maps between IP-DSCP value to COS queue. The structure of `map` block is documented below.
	Maps []IpdscpmapMapType `pulumi:"maps"`
	// Dscp map name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Ipdscpmap resource.
type IpdscpmapArgs struct {
	// Description of the ip-dscp map name.
	Description pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Maps between IP-DSCP value to COS queue. The structure of `map` block is documented below.
	Maps IpdscpmapMapTypeArrayInput
	// Dscp map name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IpdscpmapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipdscpmapArgs)(nil)).Elem()
}

type IpdscpmapInput interface {
	pulumi.Input

	ToIpdscpmapOutput() IpdscpmapOutput
	ToIpdscpmapOutputWithContext(ctx context.Context) IpdscpmapOutput
}

func (*Ipdscpmap) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipdscpmap)(nil)).Elem()
}

func (i *Ipdscpmap) ToIpdscpmapOutput() IpdscpmapOutput {
	return i.ToIpdscpmapOutputWithContext(context.Background())
}

func (i *Ipdscpmap) ToIpdscpmapOutputWithContext(ctx context.Context) IpdscpmapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpdscpmapOutput)
}

// IpdscpmapArrayInput is an input type that accepts IpdscpmapArray and IpdscpmapArrayOutput values.
// You can construct a concrete instance of `IpdscpmapArrayInput` via:
//
//	IpdscpmapArray{ IpdscpmapArgs{...} }
type IpdscpmapArrayInput interface {
	pulumi.Input

	ToIpdscpmapArrayOutput() IpdscpmapArrayOutput
	ToIpdscpmapArrayOutputWithContext(context.Context) IpdscpmapArrayOutput
}

type IpdscpmapArray []IpdscpmapInput

func (IpdscpmapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipdscpmap)(nil)).Elem()
}

func (i IpdscpmapArray) ToIpdscpmapArrayOutput() IpdscpmapArrayOutput {
	return i.ToIpdscpmapArrayOutputWithContext(context.Background())
}

func (i IpdscpmapArray) ToIpdscpmapArrayOutputWithContext(ctx context.Context) IpdscpmapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpdscpmapArrayOutput)
}

// IpdscpmapMapInput is an input type that accepts IpdscpmapMap and IpdscpmapMapOutput values.
// You can construct a concrete instance of `IpdscpmapMapInput` via:
//
//	IpdscpmapMap{ "key": IpdscpmapArgs{...} }
type IpdscpmapMapInput interface {
	pulumi.Input

	ToIpdscpmapMapOutput() IpdscpmapMapOutput
	ToIpdscpmapMapOutputWithContext(context.Context) IpdscpmapMapOutput
}

type IpdscpmapMap map[string]IpdscpmapInput

func (IpdscpmapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipdscpmap)(nil)).Elem()
}

func (i IpdscpmapMap) ToIpdscpmapMapOutput() IpdscpmapMapOutput {
	return i.ToIpdscpmapMapOutputWithContext(context.Background())
}

func (i IpdscpmapMap) ToIpdscpmapMapOutputWithContext(ctx context.Context) IpdscpmapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpdscpmapMapOutput)
}

type IpdscpmapOutput struct{ *pulumi.OutputState }

func (IpdscpmapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipdscpmap)(nil)).Elem()
}

func (o IpdscpmapOutput) ToIpdscpmapOutput() IpdscpmapOutput {
	return o
}

func (o IpdscpmapOutput) ToIpdscpmapOutputWithContext(ctx context.Context) IpdscpmapOutput {
	return o
}

// Description of the ip-dscp map name.
func (o IpdscpmapOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipdscpmap) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o IpdscpmapOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipdscpmap) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o IpdscpmapOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipdscpmap) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Maps between IP-DSCP value to COS queue. The structure of `map` block is documented below.
func (o IpdscpmapOutput) Maps() IpdscpmapMapTypeArrayOutput {
	return o.ApplyT(func(v *Ipdscpmap) IpdscpmapMapTypeArrayOutput { return v.Maps }).(IpdscpmapMapTypeArrayOutput)
}

// Dscp map name.
func (o IpdscpmapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipdscpmap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o IpdscpmapOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipdscpmap) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type IpdscpmapArrayOutput struct{ *pulumi.OutputState }

func (IpdscpmapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipdscpmap)(nil)).Elem()
}

func (o IpdscpmapArrayOutput) ToIpdscpmapArrayOutput() IpdscpmapArrayOutput {
	return o
}

func (o IpdscpmapArrayOutput) ToIpdscpmapArrayOutputWithContext(ctx context.Context) IpdscpmapArrayOutput {
	return o
}

func (o IpdscpmapArrayOutput) Index(i pulumi.IntInput) IpdscpmapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipdscpmap {
		return vs[0].([]*Ipdscpmap)[vs[1].(int)]
	}).(IpdscpmapOutput)
}

type IpdscpmapMapOutput struct{ *pulumi.OutputState }

func (IpdscpmapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipdscpmap)(nil)).Elem()
}

func (o IpdscpmapMapOutput) ToIpdscpmapMapOutput() IpdscpmapMapOutput {
	return o
}

func (o IpdscpmapMapOutput) ToIpdscpmapMapOutputWithContext(ctx context.Context) IpdscpmapMapOutput {
	return o
}

func (o IpdscpmapMapOutput) MapIndex(k pulumi.StringInput) IpdscpmapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipdscpmap {
		return vs[0].(map[string]*Ipdscpmap)[vs[1].(string)]
	}).(IpdscpmapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpdscpmapInput)(nil)).Elem(), &Ipdscpmap{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpdscpmapArrayInput)(nil)).Elem(), IpdscpmapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpdscpmapMapInput)(nil)).Elem(), IpdscpmapMap{})
	pulumi.RegisterOutputType(IpdscpmapOutput{})
	pulumi.RegisterOutputType(IpdscpmapArrayOutput{})
	pulumi.RegisterOutputType(IpdscpmapMapOutput{})
}
