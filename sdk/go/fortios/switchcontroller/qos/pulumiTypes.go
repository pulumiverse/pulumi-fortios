// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package qos

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

var _ = internal.GetEnvOrDefault

type IpdscpmapMapType struct {
	// COS queue number.
	CosQueue *int `pulumi:"cosQueue"`
	// Differentiated service. Valid values: `CS0`, `CS1`, `AF11`, `AF12`, `AF13`, `CS2`, `AF21`, `AF22`, `AF23`, `CS3`, `AF31`, `AF32`, `AF33`, `CS4`, `AF41`, `AF42`, `AF43`, `CS5`, `EF`, `CS6`, `CS7`.
	Diffserv *string `pulumi:"diffserv"`
	// IP Precedence. Valid values: `network-control`, `internetwork-control`, `critic-ecp`, `flashoverride`, `flash`, `immediate`, `priority`, `routine`.
	IpPrecedence *string `pulumi:"ipPrecedence"`
	// Dscp mapping entry name.
	Name *string `pulumi:"name"`
	// Raw values of DSCP (0 - 63).
	Value *string `pulumi:"value"`
}

// IpdscpmapMapTypeInput is an input type that accepts IpdscpmapMapTypeArgs and IpdscpmapMapTypeOutput values.
// You can construct a concrete instance of `IpdscpmapMapTypeInput` via:
//
//	IpdscpmapMapTypeArgs{...}
type IpdscpmapMapTypeInput interface {
	pulumi.Input

	ToIpdscpmapMapTypeOutput() IpdscpmapMapTypeOutput
	ToIpdscpmapMapTypeOutputWithContext(context.Context) IpdscpmapMapTypeOutput
}

type IpdscpmapMapTypeArgs struct {
	// COS queue number.
	CosQueue pulumi.IntPtrInput `pulumi:"cosQueue"`
	// Differentiated service. Valid values: `CS0`, `CS1`, `AF11`, `AF12`, `AF13`, `CS2`, `AF21`, `AF22`, `AF23`, `CS3`, `AF31`, `AF32`, `AF33`, `CS4`, `AF41`, `AF42`, `AF43`, `CS5`, `EF`, `CS6`, `CS7`.
	Diffserv pulumi.StringPtrInput `pulumi:"diffserv"`
	// IP Precedence. Valid values: `network-control`, `internetwork-control`, `critic-ecp`, `flashoverride`, `flash`, `immediate`, `priority`, `routine`.
	IpPrecedence pulumi.StringPtrInput `pulumi:"ipPrecedence"`
	// Dscp mapping entry name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Raw values of DSCP (0 - 63).
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (IpdscpmapMapTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpdscpmapMapType)(nil)).Elem()
}

func (i IpdscpmapMapTypeArgs) ToIpdscpmapMapTypeOutput() IpdscpmapMapTypeOutput {
	return i.ToIpdscpmapMapTypeOutputWithContext(context.Background())
}

func (i IpdscpmapMapTypeArgs) ToIpdscpmapMapTypeOutputWithContext(ctx context.Context) IpdscpmapMapTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpdscpmapMapTypeOutput)
}

// IpdscpmapMapTypeArrayInput is an input type that accepts IpdscpmapMapTypeArray and IpdscpmapMapTypeArrayOutput values.
// You can construct a concrete instance of `IpdscpmapMapTypeArrayInput` via:
//
//	IpdscpmapMapTypeArray{ IpdscpmapMapTypeArgs{...} }
type IpdscpmapMapTypeArrayInput interface {
	pulumi.Input

	ToIpdscpmapMapTypeArrayOutput() IpdscpmapMapTypeArrayOutput
	ToIpdscpmapMapTypeArrayOutputWithContext(context.Context) IpdscpmapMapTypeArrayOutput
}

type IpdscpmapMapTypeArray []IpdscpmapMapTypeInput

func (IpdscpmapMapTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpdscpmapMapType)(nil)).Elem()
}

func (i IpdscpmapMapTypeArray) ToIpdscpmapMapTypeArrayOutput() IpdscpmapMapTypeArrayOutput {
	return i.ToIpdscpmapMapTypeArrayOutputWithContext(context.Background())
}

func (i IpdscpmapMapTypeArray) ToIpdscpmapMapTypeArrayOutputWithContext(ctx context.Context) IpdscpmapMapTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpdscpmapMapTypeArrayOutput)
}

type IpdscpmapMapTypeOutput struct{ *pulumi.OutputState }

func (IpdscpmapMapTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpdscpmapMapType)(nil)).Elem()
}

func (o IpdscpmapMapTypeOutput) ToIpdscpmapMapTypeOutput() IpdscpmapMapTypeOutput {
	return o
}

func (o IpdscpmapMapTypeOutput) ToIpdscpmapMapTypeOutputWithContext(ctx context.Context) IpdscpmapMapTypeOutput {
	return o
}

// COS queue number.
func (o IpdscpmapMapTypeOutput) CosQueue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IpdscpmapMapType) *int { return v.CosQueue }).(pulumi.IntPtrOutput)
}

// Differentiated service. Valid values: `CS0`, `CS1`, `AF11`, `AF12`, `AF13`, `CS2`, `AF21`, `AF22`, `AF23`, `CS3`, `AF31`, `AF32`, `AF33`, `CS4`, `AF41`, `AF42`, `AF43`, `CS5`, `EF`, `CS6`, `CS7`.
func (o IpdscpmapMapTypeOutput) Diffserv() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpdscpmapMapType) *string { return v.Diffserv }).(pulumi.StringPtrOutput)
}

// IP Precedence. Valid values: `network-control`, `internetwork-control`, `critic-ecp`, `flashoverride`, `flash`, `immediate`, `priority`, `routine`.
func (o IpdscpmapMapTypeOutput) IpPrecedence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpdscpmapMapType) *string { return v.IpPrecedence }).(pulumi.StringPtrOutput)
}

// Dscp mapping entry name.
func (o IpdscpmapMapTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpdscpmapMapType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Raw values of DSCP (0 - 63).
func (o IpdscpmapMapTypeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpdscpmapMapType) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type IpdscpmapMapTypeArrayOutput struct{ *pulumi.OutputState }

func (IpdscpmapMapTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpdscpmapMapType)(nil)).Elem()
}

func (o IpdscpmapMapTypeArrayOutput) ToIpdscpmapMapTypeArrayOutput() IpdscpmapMapTypeArrayOutput {
	return o
}

func (o IpdscpmapMapTypeArrayOutput) ToIpdscpmapMapTypeArrayOutputWithContext(ctx context.Context) IpdscpmapMapTypeArrayOutput {
	return o
}

func (o IpdscpmapMapTypeArrayOutput) Index(i pulumi.IntInput) IpdscpmapMapTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpdscpmapMapType {
		return vs[0].([]IpdscpmapMapType)[vs[1].(int)]
	}).(IpdscpmapMapTypeOutput)
}

type QueuepolicyCosQueue struct {
	// Description of the COS queue.
	Description *string `pulumi:"description"`
	// COS queue drop policy. Valid values: `taildrop`, `weighted-random-early-detection`.
	DropPolicy *string `pulumi:"dropPolicy"`
	// Enable/disable ECN packet marking to drop eligible packets. Valid values: `disable`, `enable`.
	Ecn *string `pulumi:"ecn"`
	// Maximum rate (0 - 4294967295 kbps, 0 to disable).
	MaxRate *int `pulumi:"maxRate"`
	// Maximum rate (% of link speed).
	MaxRatePercent *int `pulumi:"maxRatePercent"`
	// Minimum rate (0 - 4294967295 kbps, 0 to disable).
	MinRate *int `pulumi:"minRate"`
	// Minimum rate (% of link speed).
	MinRatePercent *int `pulumi:"minRatePercent"`
	// Cos queue ID.
	Name *string `pulumi:"name"`
	// Weight of weighted round robin scheduling.
	Weight *int `pulumi:"weight"`
}

// QueuepolicyCosQueueInput is an input type that accepts QueuepolicyCosQueueArgs and QueuepolicyCosQueueOutput values.
// You can construct a concrete instance of `QueuepolicyCosQueueInput` via:
//
//	QueuepolicyCosQueueArgs{...}
type QueuepolicyCosQueueInput interface {
	pulumi.Input

	ToQueuepolicyCosQueueOutput() QueuepolicyCosQueueOutput
	ToQueuepolicyCosQueueOutputWithContext(context.Context) QueuepolicyCosQueueOutput
}

type QueuepolicyCosQueueArgs struct {
	// Description of the COS queue.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// COS queue drop policy. Valid values: `taildrop`, `weighted-random-early-detection`.
	DropPolicy pulumi.StringPtrInput `pulumi:"dropPolicy"`
	// Enable/disable ECN packet marking to drop eligible packets. Valid values: `disable`, `enable`.
	Ecn pulumi.StringPtrInput `pulumi:"ecn"`
	// Maximum rate (0 - 4294967295 kbps, 0 to disable).
	MaxRate pulumi.IntPtrInput `pulumi:"maxRate"`
	// Maximum rate (% of link speed).
	MaxRatePercent pulumi.IntPtrInput `pulumi:"maxRatePercent"`
	// Minimum rate (0 - 4294967295 kbps, 0 to disable).
	MinRate pulumi.IntPtrInput `pulumi:"minRate"`
	// Minimum rate (% of link speed).
	MinRatePercent pulumi.IntPtrInput `pulumi:"minRatePercent"`
	// Cos queue ID.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Weight of weighted round robin scheduling.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (QueuepolicyCosQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueuepolicyCosQueue)(nil)).Elem()
}

func (i QueuepolicyCosQueueArgs) ToQueuepolicyCosQueueOutput() QueuepolicyCosQueueOutput {
	return i.ToQueuepolicyCosQueueOutputWithContext(context.Background())
}

func (i QueuepolicyCosQueueArgs) ToQueuepolicyCosQueueOutputWithContext(ctx context.Context) QueuepolicyCosQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuepolicyCosQueueOutput)
}

// QueuepolicyCosQueueArrayInput is an input type that accepts QueuepolicyCosQueueArray and QueuepolicyCosQueueArrayOutput values.
// You can construct a concrete instance of `QueuepolicyCosQueueArrayInput` via:
//
//	QueuepolicyCosQueueArray{ QueuepolicyCosQueueArgs{...} }
type QueuepolicyCosQueueArrayInput interface {
	pulumi.Input

	ToQueuepolicyCosQueueArrayOutput() QueuepolicyCosQueueArrayOutput
	ToQueuepolicyCosQueueArrayOutputWithContext(context.Context) QueuepolicyCosQueueArrayOutput
}

type QueuepolicyCosQueueArray []QueuepolicyCosQueueInput

func (QueuepolicyCosQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueuepolicyCosQueue)(nil)).Elem()
}

func (i QueuepolicyCosQueueArray) ToQueuepolicyCosQueueArrayOutput() QueuepolicyCosQueueArrayOutput {
	return i.ToQueuepolicyCosQueueArrayOutputWithContext(context.Background())
}

func (i QueuepolicyCosQueueArray) ToQueuepolicyCosQueueArrayOutputWithContext(ctx context.Context) QueuepolicyCosQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuepolicyCosQueueArrayOutput)
}

type QueuepolicyCosQueueOutput struct{ *pulumi.OutputState }

func (QueuepolicyCosQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueuepolicyCosQueue)(nil)).Elem()
}

func (o QueuepolicyCosQueueOutput) ToQueuepolicyCosQueueOutput() QueuepolicyCosQueueOutput {
	return o
}

func (o QueuepolicyCosQueueOutput) ToQueuepolicyCosQueueOutputWithContext(ctx context.Context) QueuepolicyCosQueueOutput {
	return o
}

// Description of the COS queue.
func (o QueuepolicyCosQueueOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueuepolicyCosQueue) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// COS queue drop policy. Valid values: `taildrop`, `weighted-random-early-detection`.
func (o QueuepolicyCosQueueOutput) DropPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueuepolicyCosQueue) *string { return v.DropPolicy }).(pulumi.StringPtrOutput)
}

// Enable/disable ECN packet marking to drop eligible packets. Valid values: `disable`, `enable`.
func (o QueuepolicyCosQueueOutput) Ecn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueuepolicyCosQueue) *string { return v.Ecn }).(pulumi.StringPtrOutput)
}

// Maximum rate (0 - 4294967295 kbps, 0 to disable).
func (o QueuepolicyCosQueueOutput) MaxRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueuepolicyCosQueue) *int { return v.MaxRate }).(pulumi.IntPtrOutput)
}

// Maximum rate (% of link speed).
func (o QueuepolicyCosQueueOutput) MaxRatePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueuepolicyCosQueue) *int { return v.MaxRatePercent }).(pulumi.IntPtrOutput)
}

// Minimum rate (0 - 4294967295 kbps, 0 to disable).
func (o QueuepolicyCosQueueOutput) MinRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueuepolicyCosQueue) *int { return v.MinRate }).(pulumi.IntPtrOutput)
}

// Minimum rate (% of link speed).
func (o QueuepolicyCosQueueOutput) MinRatePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueuepolicyCosQueue) *int { return v.MinRatePercent }).(pulumi.IntPtrOutput)
}

// Cos queue ID.
func (o QueuepolicyCosQueueOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueuepolicyCosQueue) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Weight of weighted round robin scheduling.
func (o QueuepolicyCosQueueOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueuepolicyCosQueue) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type QueuepolicyCosQueueArrayOutput struct{ *pulumi.OutputState }

func (QueuepolicyCosQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueuepolicyCosQueue)(nil)).Elem()
}

func (o QueuepolicyCosQueueArrayOutput) ToQueuepolicyCosQueueArrayOutput() QueuepolicyCosQueueArrayOutput {
	return o
}

func (o QueuepolicyCosQueueArrayOutput) ToQueuepolicyCosQueueArrayOutputWithContext(ctx context.Context) QueuepolicyCosQueueArrayOutput {
	return o
}

func (o QueuepolicyCosQueueArrayOutput) Index(i pulumi.IntInput) QueuepolicyCosQueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueuepolicyCosQueue {
		return vs[0].([]QueuepolicyCosQueue)[vs[1].(int)]
	}).(QueuepolicyCosQueueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpdscpmapMapTypeInput)(nil)).Elem(), IpdscpmapMapTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpdscpmapMapTypeArrayInput)(nil)).Elem(), IpdscpmapMapTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueuepolicyCosQueueInput)(nil)).Elem(), QueuepolicyCosQueueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueuepolicyCosQueueArrayInput)(nil)).Elem(), QueuepolicyCosQueueArray{})
	pulumi.RegisterOutputType(IpdscpmapMapTypeOutput{})
	pulumi.RegisterOutputType(IpdscpmapMapTypeArrayOutput{})
	pulumi.RegisterOutputType(QueuepolicyCosQueueOutput{})
	pulumi.RegisterOutputType(QueuepolicyCosQueueArrayOutput{})
}
