// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package switchcontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure FortiSwitch storm control policy to be applied on managed-switch ports. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// SwitchController StormControlPolicy can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:switchcontroller/stormcontrolpolicy:Stormcontrolpolicy labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:switchcontroller/stormcontrolpolicy:Stormcontrolpolicy labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Stormcontrolpolicy struct {
	pulumi.CustomResourceState

	// Enable/disable storm control to drop/allow broadcast traffic in override mode. Valid values: `enable`, `disable`.
	Broadcast pulumi.StringOutput `pulumi:"broadcast"`
	// Description of the storm control policy.
	Description pulumi.StringOutput `pulumi:"description"`
	// Storm control policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Threshold rate in packets per second at which storm traffic is controlled in override mode (default=500, 0 to drop all).
	Rate pulumi.IntOutput `pulumi:"rate"`
	// Set Storm control mode. Valid values: `global`, `override`, `disabled`.
	StormControlMode pulumi.StringOutput `pulumi:"stormControlMode"`
	// Enable/disable storm control to drop/allow unknown multicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownMulticast pulumi.StringOutput `pulumi:"unknownMulticast"`
	// Enable/disable storm control to drop/allow unknown unicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownUnicast pulumi.StringOutput `pulumi:"unknownUnicast"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewStormcontrolpolicy registers a new resource with the given unique name, arguments, and options.
func NewStormcontrolpolicy(ctx *pulumi.Context,
	name string, args *StormcontrolpolicyArgs, opts ...pulumi.ResourceOption) (*Stormcontrolpolicy, error) {
	if args == nil {
		args = &StormcontrolpolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Stormcontrolpolicy
	err := ctx.RegisterResource("fortios:switchcontroller/stormcontrolpolicy:Stormcontrolpolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStormcontrolpolicy gets an existing Stormcontrolpolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStormcontrolpolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StormcontrolpolicyState, opts ...pulumi.ResourceOption) (*Stormcontrolpolicy, error) {
	var resource Stormcontrolpolicy
	err := ctx.ReadResource("fortios:switchcontroller/stormcontrolpolicy:Stormcontrolpolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Stormcontrolpolicy resources.
type stormcontrolpolicyState struct {
	// Enable/disable storm control to drop/allow broadcast traffic in override mode. Valid values: `enable`, `disable`.
	Broadcast *string `pulumi:"broadcast"`
	// Description of the storm control policy.
	Description *string `pulumi:"description"`
	// Storm control policy name.
	Name *string `pulumi:"name"`
	// Threshold rate in packets per second at which storm traffic is controlled in override mode (default=500, 0 to drop all).
	Rate *int `pulumi:"rate"`
	// Set Storm control mode. Valid values: `global`, `override`, `disabled`.
	StormControlMode *string `pulumi:"stormControlMode"`
	// Enable/disable storm control to drop/allow unknown multicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownMulticast *string `pulumi:"unknownMulticast"`
	// Enable/disable storm control to drop/allow unknown unicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownUnicast *string `pulumi:"unknownUnicast"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type StormcontrolpolicyState struct {
	// Enable/disable storm control to drop/allow broadcast traffic in override mode. Valid values: `enable`, `disable`.
	Broadcast pulumi.StringPtrInput
	// Description of the storm control policy.
	Description pulumi.StringPtrInput
	// Storm control policy name.
	Name pulumi.StringPtrInput
	// Threshold rate in packets per second at which storm traffic is controlled in override mode (default=500, 0 to drop all).
	Rate pulumi.IntPtrInput
	// Set Storm control mode. Valid values: `global`, `override`, `disabled`.
	StormControlMode pulumi.StringPtrInput
	// Enable/disable storm control to drop/allow unknown multicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownMulticast pulumi.StringPtrInput
	// Enable/disable storm control to drop/allow unknown unicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownUnicast pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (StormcontrolpolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*stormcontrolpolicyState)(nil)).Elem()
}

type stormcontrolpolicyArgs struct {
	// Enable/disable storm control to drop/allow broadcast traffic in override mode. Valid values: `enable`, `disable`.
	Broadcast *string `pulumi:"broadcast"`
	// Description of the storm control policy.
	Description *string `pulumi:"description"`
	// Storm control policy name.
	Name *string `pulumi:"name"`
	// Threshold rate in packets per second at which storm traffic is controlled in override mode (default=500, 0 to drop all).
	Rate *int `pulumi:"rate"`
	// Set Storm control mode. Valid values: `global`, `override`, `disabled`.
	StormControlMode *string `pulumi:"stormControlMode"`
	// Enable/disable storm control to drop/allow unknown multicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownMulticast *string `pulumi:"unknownMulticast"`
	// Enable/disable storm control to drop/allow unknown unicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownUnicast *string `pulumi:"unknownUnicast"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Stormcontrolpolicy resource.
type StormcontrolpolicyArgs struct {
	// Enable/disable storm control to drop/allow broadcast traffic in override mode. Valid values: `enable`, `disable`.
	Broadcast pulumi.StringPtrInput
	// Description of the storm control policy.
	Description pulumi.StringPtrInput
	// Storm control policy name.
	Name pulumi.StringPtrInput
	// Threshold rate in packets per second at which storm traffic is controlled in override mode (default=500, 0 to drop all).
	Rate pulumi.IntPtrInput
	// Set Storm control mode. Valid values: `global`, `override`, `disabled`.
	StormControlMode pulumi.StringPtrInput
	// Enable/disable storm control to drop/allow unknown multicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownMulticast pulumi.StringPtrInput
	// Enable/disable storm control to drop/allow unknown unicast traffic in override mode. Valid values: `enable`, `disable`.
	UnknownUnicast pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (StormcontrolpolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stormcontrolpolicyArgs)(nil)).Elem()
}

type StormcontrolpolicyInput interface {
	pulumi.Input

	ToStormcontrolpolicyOutput() StormcontrolpolicyOutput
	ToStormcontrolpolicyOutputWithContext(ctx context.Context) StormcontrolpolicyOutput
}

func (*Stormcontrolpolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**Stormcontrolpolicy)(nil)).Elem()
}

func (i *Stormcontrolpolicy) ToStormcontrolpolicyOutput() StormcontrolpolicyOutput {
	return i.ToStormcontrolpolicyOutputWithContext(context.Background())
}

func (i *Stormcontrolpolicy) ToStormcontrolpolicyOutputWithContext(ctx context.Context) StormcontrolpolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormcontrolpolicyOutput)
}

// StormcontrolpolicyArrayInput is an input type that accepts StormcontrolpolicyArray and StormcontrolpolicyArrayOutput values.
// You can construct a concrete instance of `StormcontrolpolicyArrayInput` via:
//
//	StormcontrolpolicyArray{ StormcontrolpolicyArgs{...} }
type StormcontrolpolicyArrayInput interface {
	pulumi.Input

	ToStormcontrolpolicyArrayOutput() StormcontrolpolicyArrayOutput
	ToStormcontrolpolicyArrayOutputWithContext(context.Context) StormcontrolpolicyArrayOutput
}

type StormcontrolpolicyArray []StormcontrolpolicyInput

func (StormcontrolpolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Stormcontrolpolicy)(nil)).Elem()
}

func (i StormcontrolpolicyArray) ToStormcontrolpolicyArrayOutput() StormcontrolpolicyArrayOutput {
	return i.ToStormcontrolpolicyArrayOutputWithContext(context.Background())
}

func (i StormcontrolpolicyArray) ToStormcontrolpolicyArrayOutputWithContext(ctx context.Context) StormcontrolpolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormcontrolpolicyArrayOutput)
}

// StormcontrolpolicyMapInput is an input type that accepts StormcontrolpolicyMap and StormcontrolpolicyMapOutput values.
// You can construct a concrete instance of `StormcontrolpolicyMapInput` via:
//
//	StormcontrolpolicyMap{ "key": StormcontrolpolicyArgs{...} }
type StormcontrolpolicyMapInput interface {
	pulumi.Input

	ToStormcontrolpolicyMapOutput() StormcontrolpolicyMapOutput
	ToStormcontrolpolicyMapOutputWithContext(context.Context) StormcontrolpolicyMapOutput
}

type StormcontrolpolicyMap map[string]StormcontrolpolicyInput

func (StormcontrolpolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Stormcontrolpolicy)(nil)).Elem()
}

func (i StormcontrolpolicyMap) ToStormcontrolpolicyMapOutput() StormcontrolpolicyMapOutput {
	return i.ToStormcontrolpolicyMapOutputWithContext(context.Background())
}

func (i StormcontrolpolicyMap) ToStormcontrolpolicyMapOutputWithContext(ctx context.Context) StormcontrolpolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormcontrolpolicyMapOutput)
}

type StormcontrolpolicyOutput struct{ *pulumi.OutputState }

func (StormcontrolpolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Stormcontrolpolicy)(nil)).Elem()
}

func (o StormcontrolpolicyOutput) ToStormcontrolpolicyOutput() StormcontrolpolicyOutput {
	return o
}

func (o StormcontrolpolicyOutput) ToStormcontrolpolicyOutputWithContext(ctx context.Context) StormcontrolpolicyOutput {
	return o
}

// Enable/disable storm control to drop/allow broadcast traffic in override mode. Valid values: `enable`, `disable`.
func (o StormcontrolpolicyOutput) Broadcast() pulumi.StringOutput {
	return o.ApplyT(func(v *Stormcontrolpolicy) pulumi.StringOutput { return v.Broadcast }).(pulumi.StringOutput)
}

// Description of the storm control policy.
func (o StormcontrolpolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Stormcontrolpolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Storm control policy name.
func (o StormcontrolpolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Stormcontrolpolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Threshold rate in packets per second at which storm traffic is controlled in override mode (default=500, 0 to drop all).
func (o StormcontrolpolicyOutput) Rate() pulumi.IntOutput {
	return o.ApplyT(func(v *Stormcontrolpolicy) pulumi.IntOutput { return v.Rate }).(pulumi.IntOutput)
}

// Set Storm control mode. Valid values: `global`, `override`, `disabled`.
func (o StormcontrolpolicyOutput) StormControlMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Stormcontrolpolicy) pulumi.StringOutput { return v.StormControlMode }).(pulumi.StringOutput)
}

// Enable/disable storm control to drop/allow unknown multicast traffic in override mode. Valid values: `enable`, `disable`.
func (o StormcontrolpolicyOutput) UnknownMulticast() pulumi.StringOutput {
	return o.ApplyT(func(v *Stormcontrolpolicy) pulumi.StringOutput { return v.UnknownMulticast }).(pulumi.StringOutput)
}

// Enable/disable storm control to drop/allow unknown unicast traffic in override mode. Valid values: `enable`, `disable`.
func (o StormcontrolpolicyOutput) UnknownUnicast() pulumi.StringOutput {
	return o.ApplyT(func(v *Stormcontrolpolicy) pulumi.StringOutput { return v.UnknownUnicast }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o StormcontrolpolicyOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Stormcontrolpolicy) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type StormcontrolpolicyArrayOutput struct{ *pulumi.OutputState }

func (StormcontrolpolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Stormcontrolpolicy)(nil)).Elem()
}

func (o StormcontrolpolicyArrayOutput) ToStormcontrolpolicyArrayOutput() StormcontrolpolicyArrayOutput {
	return o
}

func (o StormcontrolpolicyArrayOutput) ToStormcontrolpolicyArrayOutputWithContext(ctx context.Context) StormcontrolpolicyArrayOutput {
	return o
}

func (o StormcontrolpolicyArrayOutput) Index(i pulumi.IntInput) StormcontrolpolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Stormcontrolpolicy {
		return vs[0].([]*Stormcontrolpolicy)[vs[1].(int)]
	}).(StormcontrolpolicyOutput)
}

type StormcontrolpolicyMapOutput struct{ *pulumi.OutputState }

func (StormcontrolpolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Stormcontrolpolicy)(nil)).Elem()
}

func (o StormcontrolpolicyMapOutput) ToStormcontrolpolicyMapOutput() StormcontrolpolicyMapOutput {
	return o
}

func (o StormcontrolpolicyMapOutput) ToStormcontrolpolicyMapOutputWithContext(ctx context.Context) StormcontrolpolicyMapOutput {
	return o
}

func (o StormcontrolpolicyMapOutput) MapIndex(k pulumi.StringInput) StormcontrolpolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Stormcontrolpolicy {
		return vs[0].(map[string]*Stormcontrolpolicy)[vs[1].(string)]
	}).(StormcontrolpolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StormcontrolpolicyInput)(nil)).Elem(), &Stormcontrolpolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*StormcontrolpolicyArrayInput)(nil)).Elem(), StormcontrolpolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StormcontrolpolicyMapInput)(nil)).Elem(), StormcontrolpolicyMap{})
	pulumi.RegisterOutputType(StormcontrolpolicyOutput{})
	pulumi.RegisterOutputType(StormcontrolpolicyArrayOutput{})
	pulumi.RegisterOutputType(StormcontrolpolicyMapOutput{})
}
