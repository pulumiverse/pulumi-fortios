// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package switchcontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure logging by FortiSwitch device to a remote syslog server. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// SwitchController RemoteLog can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:switchcontroller/remotelog:Remotelog labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:switchcontroller/remotelog:Remotelog labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Remotelog struct {
	pulumi.CustomResourceState

	// Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
	Csv pulumi.StringOutput `pulumi:"csv"`
	// Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
	Facility pulumi.StringOutput `pulumi:"facility"`
	// Remote log name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Remote syslog server listening port.
	Port pulumi.IntOutput `pulumi:"port"`
	// IPv4 address of the remote syslog server.
	Server pulumi.StringOutput `pulumi:"server"`
	// Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity pulumi.StringOutput `pulumi:"severity"`
	// Enable/disable logging by FortiSwitch device to a remote syslog server. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewRemotelog registers a new resource with the given unique name, arguments, and options.
func NewRemotelog(ctx *pulumi.Context,
	name string, args *RemotelogArgs, opts ...pulumi.ResourceOption) (*Remotelog, error) {
	if args == nil {
		args = &RemotelogArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Remotelog
	err := ctx.RegisterResource("fortios:switchcontroller/remotelog:Remotelog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRemotelog gets an existing Remotelog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRemotelog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RemotelogState, opts ...pulumi.ResourceOption) (*Remotelog, error) {
	var resource Remotelog
	err := ctx.ReadResource("fortios:switchcontroller/remotelog:Remotelog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Remotelog resources.
type remotelogState struct {
	// Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
	Csv *string `pulumi:"csv"`
	// Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
	Facility *string `pulumi:"facility"`
	// Remote log name.
	Name *string `pulumi:"name"`
	// Remote syslog server listening port.
	Port *int `pulumi:"port"`
	// IPv4 address of the remote syslog server.
	Server *string `pulumi:"server"`
	// Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity *string `pulumi:"severity"`
	// Enable/disable logging by FortiSwitch device to a remote syslog server. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type RemotelogState struct {
	// Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
	Csv pulumi.StringPtrInput
	// Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
	Facility pulumi.StringPtrInput
	// Remote log name.
	Name pulumi.StringPtrInput
	// Remote syslog server listening port.
	Port pulumi.IntPtrInput
	// IPv4 address of the remote syslog server.
	Server pulumi.StringPtrInput
	// Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity pulumi.StringPtrInput
	// Enable/disable logging by FortiSwitch device to a remote syslog server. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RemotelogState) ElementType() reflect.Type {
	return reflect.TypeOf((*remotelogState)(nil)).Elem()
}

type remotelogArgs struct {
	// Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
	Csv *string `pulumi:"csv"`
	// Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
	Facility *string `pulumi:"facility"`
	// Remote log name.
	Name *string `pulumi:"name"`
	// Remote syslog server listening port.
	Port *int `pulumi:"port"`
	// IPv4 address of the remote syslog server.
	Server *string `pulumi:"server"`
	// Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity *string `pulumi:"severity"`
	// Enable/disable logging by FortiSwitch device to a remote syslog server. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Remotelog resource.
type RemotelogArgs struct {
	// Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
	Csv pulumi.StringPtrInput
	// Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
	Facility pulumi.StringPtrInput
	// Remote log name.
	Name pulumi.StringPtrInput
	// Remote syslog server listening port.
	Port pulumi.IntPtrInput
	// IPv4 address of the remote syslog server.
	Server pulumi.StringPtrInput
	// Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity pulumi.StringPtrInput
	// Enable/disable logging by FortiSwitch device to a remote syslog server. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RemotelogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*remotelogArgs)(nil)).Elem()
}

type RemotelogInput interface {
	pulumi.Input

	ToRemotelogOutput() RemotelogOutput
	ToRemotelogOutputWithContext(ctx context.Context) RemotelogOutput
}

func (*Remotelog) ElementType() reflect.Type {
	return reflect.TypeOf((**Remotelog)(nil)).Elem()
}

func (i *Remotelog) ToRemotelogOutput() RemotelogOutput {
	return i.ToRemotelogOutputWithContext(context.Background())
}

func (i *Remotelog) ToRemotelogOutputWithContext(ctx context.Context) RemotelogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotelogOutput)
}

// RemotelogArrayInput is an input type that accepts RemotelogArray and RemotelogArrayOutput values.
// You can construct a concrete instance of `RemotelogArrayInput` via:
//
//	RemotelogArray{ RemotelogArgs{...} }
type RemotelogArrayInput interface {
	pulumi.Input

	ToRemotelogArrayOutput() RemotelogArrayOutput
	ToRemotelogArrayOutputWithContext(context.Context) RemotelogArrayOutput
}

type RemotelogArray []RemotelogInput

func (RemotelogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Remotelog)(nil)).Elem()
}

func (i RemotelogArray) ToRemotelogArrayOutput() RemotelogArrayOutput {
	return i.ToRemotelogArrayOutputWithContext(context.Background())
}

func (i RemotelogArray) ToRemotelogArrayOutputWithContext(ctx context.Context) RemotelogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotelogArrayOutput)
}

// RemotelogMapInput is an input type that accepts RemotelogMap and RemotelogMapOutput values.
// You can construct a concrete instance of `RemotelogMapInput` via:
//
//	RemotelogMap{ "key": RemotelogArgs{...} }
type RemotelogMapInput interface {
	pulumi.Input

	ToRemotelogMapOutput() RemotelogMapOutput
	ToRemotelogMapOutputWithContext(context.Context) RemotelogMapOutput
}

type RemotelogMap map[string]RemotelogInput

func (RemotelogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Remotelog)(nil)).Elem()
}

func (i RemotelogMap) ToRemotelogMapOutput() RemotelogMapOutput {
	return i.ToRemotelogMapOutputWithContext(context.Background())
}

func (i RemotelogMap) ToRemotelogMapOutputWithContext(ctx context.Context) RemotelogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemotelogMapOutput)
}

type RemotelogOutput struct{ *pulumi.OutputState }

func (RemotelogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Remotelog)(nil)).Elem()
}

func (o RemotelogOutput) ToRemotelogOutput() RemotelogOutput {
	return o
}

func (o RemotelogOutput) ToRemotelogOutputWithContext(ctx context.Context) RemotelogOutput {
	return o
}

// Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
func (o RemotelogOutput) Csv() pulumi.StringOutput {
	return o.ApplyT(func(v *Remotelog) pulumi.StringOutput { return v.Csv }).(pulumi.StringOutput)
}

// Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
func (o RemotelogOutput) Facility() pulumi.StringOutput {
	return o.ApplyT(func(v *Remotelog) pulumi.StringOutput { return v.Facility }).(pulumi.StringOutput)
}

// Remote log name.
func (o RemotelogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Remotelog) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Remote syslog server listening port.
func (o RemotelogOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Remotelog) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// IPv4 address of the remote syslog server.
func (o RemotelogOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *Remotelog) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o RemotelogOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v *Remotelog) pulumi.StringOutput { return v.Severity }).(pulumi.StringOutput)
}

// Enable/disable logging by FortiSwitch device to a remote syslog server. Valid values: `enable`, `disable`.
func (o RemotelogOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Remotelog) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o RemotelogOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Remotelog) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type RemotelogArrayOutput struct{ *pulumi.OutputState }

func (RemotelogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Remotelog)(nil)).Elem()
}

func (o RemotelogArrayOutput) ToRemotelogArrayOutput() RemotelogArrayOutput {
	return o
}

func (o RemotelogArrayOutput) ToRemotelogArrayOutputWithContext(ctx context.Context) RemotelogArrayOutput {
	return o
}

func (o RemotelogArrayOutput) Index(i pulumi.IntInput) RemotelogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Remotelog {
		return vs[0].([]*Remotelog)[vs[1].(int)]
	}).(RemotelogOutput)
}

type RemotelogMapOutput struct{ *pulumi.OutputState }

func (RemotelogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Remotelog)(nil)).Elem()
}

func (o RemotelogMapOutput) ToRemotelogMapOutput() RemotelogMapOutput {
	return o
}

func (o RemotelogMapOutput) ToRemotelogMapOutputWithContext(ctx context.Context) RemotelogMapOutput {
	return o
}

func (o RemotelogMapOutput) MapIndex(k pulumi.StringInput) RemotelogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Remotelog {
		return vs[0].(map[string]*Remotelog)[vs[1].(string)]
	}).(RemotelogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RemotelogInput)(nil)).Elem(), &Remotelog{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemotelogArrayInput)(nil)).Elem(), RemotelogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemotelogMapInput)(nil)).Elem(), RemotelogMap{})
	pulumi.RegisterOutputType(RemotelogOutput{})
	pulumi.RegisterOutputType(RemotelogArrayOutput{})
	pulumi.RegisterOutputType(RemotelogMapOutput{})
}
