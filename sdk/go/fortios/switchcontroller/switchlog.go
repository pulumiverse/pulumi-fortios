// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package switchcontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure FortiSwitch logging (logs are transferred to and inserted into FortiGate event log).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/switchcontroller"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := switchcontroller.NewSwitchlog(ctx, "trname", &switchcontroller.SwitchlogArgs{
//				Severity: pulumi.String("critical"),
//				Status:   pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SwitchController SwitchLog can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:switchcontroller/switchlog:Switchlog labelname SwitchControllerSwitchLog
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:switchcontroller/switchlog:Switchlog labelname SwitchControllerSwitchLog
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Switchlog struct {
	pulumi.CustomResourceState

	// Severity of FortiSwitch logs that are added to the FortiGate event log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity pulumi.StringOutput `pulumi:"severity"`
	// Enable/disable adding FortiSwitch logs to FortiGate event log. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewSwitchlog registers a new resource with the given unique name, arguments, and options.
func NewSwitchlog(ctx *pulumi.Context,
	name string, args *SwitchlogArgs, opts ...pulumi.ResourceOption) (*Switchlog, error) {
	if args == nil {
		args = &SwitchlogArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Switchlog
	err := ctx.RegisterResource("fortios:switchcontroller/switchlog:Switchlog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchlog gets an existing Switchlog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchlog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchlogState, opts ...pulumi.ResourceOption) (*Switchlog, error) {
	var resource Switchlog
	err := ctx.ReadResource("fortios:switchcontroller/switchlog:Switchlog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Switchlog resources.
type switchlogState struct {
	// Severity of FortiSwitch logs that are added to the FortiGate event log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity *string `pulumi:"severity"`
	// Enable/disable adding FortiSwitch logs to FortiGate event log. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchlogState struct {
	// Severity of FortiSwitch logs that are added to the FortiGate event log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity pulumi.StringPtrInput
	// Enable/disable adding FortiSwitch logs to FortiGate event log. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchlogState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchlogState)(nil)).Elem()
}

type switchlogArgs struct {
	// Severity of FortiSwitch logs that are added to the FortiGate event log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity *string `pulumi:"severity"`
	// Enable/disable adding FortiSwitch logs to FortiGate event log. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Switchlog resource.
type SwitchlogArgs struct {
	// Severity of FortiSwitch logs that are added to the FortiGate event log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity pulumi.StringPtrInput
	// Enable/disable adding FortiSwitch logs to FortiGate event log. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchlogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchlogArgs)(nil)).Elem()
}

type SwitchlogInput interface {
	pulumi.Input

	ToSwitchlogOutput() SwitchlogOutput
	ToSwitchlogOutputWithContext(ctx context.Context) SwitchlogOutput
}

func (*Switchlog) ElementType() reflect.Type {
	return reflect.TypeOf((**Switchlog)(nil)).Elem()
}

func (i *Switchlog) ToSwitchlogOutput() SwitchlogOutput {
	return i.ToSwitchlogOutputWithContext(context.Background())
}

func (i *Switchlog) ToSwitchlogOutputWithContext(ctx context.Context) SwitchlogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchlogOutput)
}

// SwitchlogArrayInput is an input type that accepts SwitchlogArray and SwitchlogArrayOutput values.
// You can construct a concrete instance of `SwitchlogArrayInput` via:
//
//	SwitchlogArray{ SwitchlogArgs{...} }
type SwitchlogArrayInput interface {
	pulumi.Input

	ToSwitchlogArrayOutput() SwitchlogArrayOutput
	ToSwitchlogArrayOutputWithContext(context.Context) SwitchlogArrayOutput
}

type SwitchlogArray []SwitchlogInput

func (SwitchlogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Switchlog)(nil)).Elem()
}

func (i SwitchlogArray) ToSwitchlogArrayOutput() SwitchlogArrayOutput {
	return i.ToSwitchlogArrayOutputWithContext(context.Background())
}

func (i SwitchlogArray) ToSwitchlogArrayOutputWithContext(ctx context.Context) SwitchlogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchlogArrayOutput)
}

// SwitchlogMapInput is an input type that accepts SwitchlogMap and SwitchlogMapOutput values.
// You can construct a concrete instance of `SwitchlogMapInput` via:
//
//	SwitchlogMap{ "key": SwitchlogArgs{...} }
type SwitchlogMapInput interface {
	pulumi.Input

	ToSwitchlogMapOutput() SwitchlogMapOutput
	ToSwitchlogMapOutputWithContext(context.Context) SwitchlogMapOutput
}

type SwitchlogMap map[string]SwitchlogInput

func (SwitchlogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Switchlog)(nil)).Elem()
}

func (i SwitchlogMap) ToSwitchlogMapOutput() SwitchlogMapOutput {
	return i.ToSwitchlogMapOutputWithContext(context.Background())
}

func (i SwitchlogMap) ToSwitchlogMapOutputWithContext(ctx context.Context) SwitchlogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchlogMapOutput)
}

type SwitchlogOutput struct{ *pulumi.OutputState }

func (SwitchlogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Switchlog)(nil)).Elem()
}

func (o SwitchlogOutput) ToSwitchlogOutput() SwitchlogOutput {
	return o
}

func (o SwitchlogOutput) ToSwitchlogOutputWithContext(ctx context.Context) SwitchlogOutput {
	return o
}

// Severity of FortiSwitch logs that are added to the FortiGate event log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o SwitchlogOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v *Switchlog) pulumi.StringOutput { return v.Severity }).(pulumi.StringOutput)
}

// Enable/disable adding FortiSwitch logs to FortiGate event log. Valid values: `enable`, `disable`.
func (o SwitchlogOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Switchlog) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SwitchlogOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Switchlog) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type SwitchlogArrayOutput struct{ *pulumi.OutputState }

func (SwitchlogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Switchlog)(nil)).Elem()
}

func (o SwitchlogArrayOutput) ToSwitchlogArrayOutput() SwitchlogArrayOutput {
	return o
}

func (o SwitchlogArrayOutput) ToSwitchlogArrayOutputWithContext(ctx context.Context) SwitchlogArrayOutput {
	return o
}

func (o SwitchlogArrayOutput) Index(i pulumi.IntInput) SwitchlogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Switchlog {
		return vs[0].([]*Switchlog)[vs[1].(int)]
	}).(SwitchlogOutput)
}

type SwitchlogMapOutput struct{ *pulumi.OutputState }

func (SwitchlogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Switchlog)(nil)).Elem()
}

func (o SwitchlogMapOutput) ToSwitchlogMapOutput() SwitchlogMapOutput {
	return o
}

func (o SwitchlogMapOutput) ToSwitchlogMapOutputWithContext(ctx context.Context) SwitchlogMapOutput {
	return o
}

func (o SwitchlogMapOutput) MapIndex(k pulumi.StringInput) SwitchlogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Switchlog {
		return vs[0].(map[string]*Switchlog)[vs[1].(string)]
	}).(SwitchlogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchlogInput)(nil)).Elem(), &Switchlog{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchlogArrayInput)(nil)).Elem(), SwitchlogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchlogMapInput)(nil)).Elem(), SwitchlogMap{})
	pulumi.RegisterOutputType(SwitchlogOutput{})
	pulumi.RegisterOutputType(SwitchlogArrayOutput{})
	pulumi.RegisterOutputType(SwitchlogMapOutput{})
}
