// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package switchcontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

var _ = internal.GetEnvOrDefault

type DynamicportpolicyPolicy struct {
	// Enable/disable bouncing (administratively bring the link down, up) of a switch port where this policy is applied. Helps to clear and reassign VLAN from lldp-profile. Valid values: `disable`, `enable`.
	BouncePortLink *string `pulumi:"bouncePortLink"`
	// Category of Dynamic port policy. Valid values: `device`, `interface-tag`.
	Category *string `pulumi:"category"`
	// Description for the policy.
	Description *string `pulumi:"description"`
	// Policy matching family.
	Family *string `pulumi:"family"`
	// Policy matching host.
	Host *string `pulumi:"host"`
	// Match policy based on hardware vendor.
	HwVendor *string `pulumi:"hwVendor"`
	// Policy matching the FortiSwitch interface object tags. The structure of `interfaceTags` block is documented below.
	InterfaceTags []DynamicportpolicyPolicyInterfaceTag `pulumi:"interfaceTags"`
	// LLDP profile to be applied when using this policy.
	LldpProfile *string `pulumi:"lldpProfile"`
	// Policy matching MAC address.
	Mac *string `pulumi:"mac"`
	// 802.1x security policy to be applied when using this policy.
	N8021x *string `pulumi:"n8021x"`
	// Policy name.
	Name *string `pulumi:"name"`
	// QoS policy to be applied when using this policy.
	QosPolicy *string `pulumi:"qosPolicy"`
	// Enable/disable policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Policy matching type.
	Type *string `pulumi:"type"`
	// VLAN policy to be applied when using this policy.
	VlanPolicy *string `pulumi:"vlanPolicy"`
}

// DynamicportpolicyPolicyInput is an input type that accepts DynamicportpolicyPolicyArgs and DynamicportpolicyPolicyOutput values.
// You can construct a concrete instance of `DynamicportpolicyPolicyInput` via:
//
//	DynamicportpolicyPolicyArgs{...}
type DynamicportpolicyPolicyInput interface {
	pulumi.Input

	ToDynamicportpolicyPolicyOutput() DynamicportpolicyPolicyOutput
	ToDynamicportpolicyPolicyOutputWithContext(context.Context) DynamicportpolicyPolicyOutput
}

type DynamicportpolicyPolicyArgs struct {
	// Enable/disable bouncing (administratively bring the link down, up) of a switch port where this policy is applied. Helps to clear and reassign VLAN from lldp-profile. Valid values: `disable`, `enable`.
	BouncePortLink pulumi.StringPtrInput `pulumi:"bouncePortLink"`
	// Category of Dynamic port policy. Valid values: `device`, `interface-tag`.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// Description for the policy.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Policy matching family.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// Policy matching host.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Match policy based on hardware vendor.
	HwVendor pulumi.StringPtrInput `pulumi:"hwVendor"`
	// Policy matching the FortiSwitch interface object tags. The structure of `interfaceTags` block is documented below.
	InterfaceTags DynamicportpolicyPolicyInterfaceTagArrayInput `pulumi:"interfaceTags"`
	// LLDP profile to be applied when using this policy.
	LldpProfile pulumi.StringPtrInput `pulumi:"lldpProfile"`
	// Policy matching MAC address.
	Mac pulumi.StringPtrInput `pulumi:"mac"`
	// 802.1x security policy to be applied when using this policy.
	N8021x pulumi.StringPtrInput `pulumi:"n8021x"`
	// Policy name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// QoS policy to be applied when using this policy.
	QosPolicy pulumi.StringPtrInput `pulumi:"qosPolicy"`
	// Enable/disable policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Policy matching type.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// VLAN policy to be applied when using this policy.
	VlanPolicy pulumi.StringPtrInput `pulumi:"vlanPolicy"`
}

func (DynamicportpolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicportpolicyPolicy)(nil)).Elem()
}

func (i DynamicportpolicyPolicyArgs) ToDynamicportpolicyPolicyOutput() DynamicportpolicyPolicyOutput {
	return i.ToDynamicportpolicyPolicyOutputWithContext(context.Background())
}

func (i DynamicportpolicyPolicyArgs) ToDynamicportpolicyPolicyOutputWithContext(ctx context.Context) DynamicportpolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicportpolicyPolicyOutput)
}

// DynamicportpolicyPolicyArrayInput is an input type that accepts DynamicportpolicyPolicyArray and DynamicportpolicyPolicyArrayOutput values.
// You can construct a concrete instance of `DynamicportpolicyPolicyArrayInput` via:
//
//	DynamicportpolicyPolicyArray{ DynamicportpolicyPolicyArgs{...} }
type DynamicportpolicyPolicyArrayInput interface {
	pulumi.Input

	ToDynamicportpolicyPolicyArrayOutput() DynamicportpolicyPolicyArrayOutput
	ToDynamicportpolicyPolicyArrayOutputWithContext(context.Context) DynamicportpolicyPolicyArrayOutput
}

type DynamicportpolicyPolicyArray []DynamicportpolicyPolicyInput

func (DynamicportpolicyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicportpolicyPolicy)(nil)).Elem()
}

func (i DynamicportpolicyPolicyArray) ToDynamicportpolicyPolicyArrayOutput() DynamicportpolicyPolicyArrayOutput {
	return i.ToDynamicportpolicyPolicyArrayOutputWithContext(context.Background())
}

func (i DynamicportpolicyPolicyArray) ToDynamicportpolicyPolicyArrayOutputWithContext(ctx context.Context) DynamicportpolicyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicportpolicyPolicyArrayOutput)
}

type DynamicportpolicyPolicyOutput struct{ *pulumi.OutputState }

func (DynamicportpolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicportpolicyPolicy)(nil)).Elem()
}

func (o DynamicportpolicyPolicyOutput) ToDynamicportpolicyPolicyOutput() DynamicportpolicyPolicyOutput {
	return o
}

func (o DynamicportpolicyPolicyOutput) ToDynamicportpolicyPolicyOutputWithContext(ctx context.Context) DynamicportpolicyPolicyOutput {
	return o
}

// Enable/disable bouncing (administratively bring the link down, up) of a switch port where this policy is applied. Helps to clear and reassign VLAN from lldp-profile. Valid values: `disable`, `enable`.
func (o DynamicportpolicyPolicyOutput) BouncePortLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicportpolicyPolicy) *string { return v.BouncePortLink }).(pulumi.StringPtrOutput)
}

// Category of Dynamic port policy. Valid values: `device`, `interface-tag`.
func (o DynamicportpolicyPolicyOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicportpolicyPolicy) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Description for the policy.
func (o DynamicportpolicyPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicportpolicyPolicy) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Policy matching family.
func (o DynamicportpolicyPolicyOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicportpolicyPolicy) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// Policy matching host.
func (o DynamicportpolicyPolicyOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicportpolicyPolicy) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Match policy based on hardware vendor.
func (o DynamicportpolicyPolicyOutput) HwVendor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicportpolicyPolicy) *string { return v.HwVendor }).(pulumi.StringPtrOutput)
}

// Policy matching the FortiSwitch interface object tags. The structure of `interfaceTags` block is documented below.
func (o DynamicportpolicyPolicyOutput) InterfaceTags() DynamicportpolicyPolicyInterfaceTagArrayOutput {
	return o.ApplyT(func(v DynamicportpolicyPolicy) []DynamicportpolicyPolicyInterfaceTag { return v.InterfaceTags }).(DynamicportpolicyPolicyInterfaceTagArrayOutput)
}

// LLDP profile to be applied when using this policy.
func (o DynamicportpolicyPolicyOutput) LldpProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicportpolicyPolicy) *string { return v.LldpProfile }).(pulumi.StringPtrOutput)
}

// Policy matching MAC address.
func (o DynamicportpolicyPolicyOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicportpolicyPolicy) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

// 802.1x security policy to be applied when using this policy.
func (o DynamicportpolicyPolicyOutput) N8021x() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicportpolicyPolicy) *string { return v.N8021x }).(pulumi.StringPtrOutput)
}

// Policy name.
func (o DynamicportpolicyPolicyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicportpolicyPolicy) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// QoS policy to be applied when using this policy.
func (o DynamicportpolicyPolicyOutput) QosPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicportpolicyPolicy) *string { return v.QosPolicy }).(pulumi.StringPtrOutput)
}

// Enable/disable policy. Valid values: `enable`, `disable`.
func (o DynamicportpolicyPolicyOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicportpolicyPolicy) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Policy matching type.
func (o DynamicportpolicyPolicyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicportpolicyPolicy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// VLAN policy to be applied when using this policy.
func (o DynamicportpolicyPolicyOutput) VlanPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicportpolicyPolicy) *string { return v.VlanPolicy }).(pulumi.StringPtrOutput)
}

type DynamicportpolicyPolicyArrayOutput struct{ *pulumi.OutputState }

func (DynamicportpolicyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicportpolicyPolicy)(nil)).Elem()
}

func (o DynamicportpolicyPolicyArrayOutput) ToDynamicportpolicyPolicyArrayOutput() DynamicportpolicyPolicyArrayOutput {
	return o
}

func (o DynamicportpolicyPolicyArrayOutput) ToDynamicportpolicyPolicyArrayOutputWithContext(ctx context.Context) DynamicportpolicyPolicyArrayOutput {
	return o
}

func (o DynamicportpolicyPolicyArrayOutput) Index(i pulumi.IntInput) DynamicportpolicyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DynamicportpolicyPolicy {
		return vs[0].([]DynamicportpolicyPolicy)[vs[1].(int)]
	}).(DynamicportpolicyPolicyOutput)
}

type DynamicportpolicyPolicyInterfaceTag struct {
	// FortiSwitch port tag name.
	TagName *string `pulumi:"tagName"`
}

// DynamicportpolicyPolicyInterfaceTagInput is an input type that accepts DynamicportpolicyPolicyInterfaceTagArgs and DynamicportpolicyPolicyInterfaceTagOutput values.
// You can construct a concrete instance of `DynamicportpolicyPolicyInterfaceTagInput` via:
//
//	DynamicportpolicyPolicyInterfaceTagArgs{...}
type DynamicportpolicyPolicyInterfaceTagInput interface {
	pulumi.Input

	ToDynamicportpolicyPolicyInterfaceTagOutput() DynamicportpolicyPolicyInterfaceTagOutput
	ToDynamicportpolicyPolicyInterfaceTagOutputWithContext(context.Context) DynamicportpolicyPolicyInterfaceTagOutput
}

type DynamicportpolicyPolicyInterfaceTagArgs struct {
	// FortiSwitch port tag name.
	TagName pulumi.StringPtrInput `pulumi:"tagName"`
}

func (DynamicportpolicyPolicyInterfaceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicportpolicyPolicyInterfaceTag)(nil)).Elem()
}

func (i DynamicportpolicyPolicyInterfaceTagArgs) ToDynamicportpolicyPolicyInterfaceTagOutput() DynamicportpolicyPolicyInterfaceTagOutput {
	return i.ToDynamicportpolicyPolicyInterfaceTagOutputWithContext(context.Background())
}

func (i DynamicportpolicyPolicyInterfaceTagArgs) ToDynamicportpolicyPolicyInterfaceTagOutputWithContext(ctx context.Context) DynamicportpolicyPolicyInterfaceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicportpolicyPolicyInterfaceTagOutput)
}

// DynamicportpolicyPolicyInterfaceTagArrayInput is an input type that accepts DynamicportpolicyPolicyInterfaceTagArray and DynamicportpolicyPolicyInterfaceTagArrayOutput values.
// You can construct a concrete instance of `DynamicportpolicyPolicyInterfaceTagArrayInput` via:
//
//	DynamicportpolicyPolicyInterfaceTagArray{ DynamicportpolicyPolicyInterfaceTagArgs{...} }
type DynamicportpolicyPolicyInterfaceTagArrayInput interface {
	pulumi.Input

	ToDynamicportpolicyPolicyInterfaceTagArrayOutput() DynamicportpolicyPolicyInterfaceTagArrayOutput
	ToDynamicportpolicyPolicyInterfaceTagArrayOutputWithContext(context.Context) DynamicportpolicyPolicyInterfaceTagArrayOutput
}

type DynamicportpolicyPolicyInterfaceTagArray []DynamicportpolicyPolicyInterfaceTagInput

func (DynamicportpolicyPolicyInterfaceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicportpolicyPolicyInterfaceTag)(nil)).Elem()
}

func (i DynamicportpolicyPolicyInterfaceTagArray) ToDynamicportpolicyPolicyInterfaceTagArrayOutput() DynamicportpolicyPolicyInterfaceTagArrayOutput {
	return i.ToDynamicportpolicyPolicyInterfaceTagArrayOutputWithContext(context.Background())
}

func (i DynamicportpolicyPolicyInterfaceTagArray) ToDynamicportpolicyPolicyInterfaceTagArrayOutputWithContext(ctx context.Context) DynamicportpolicyPolicyInterfaceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicportpolicyPolicyInterfaceTagArrayOutput)
}

type DynamicportpolicyPolicyInterfaceTagOutput struct{ *pulumi.OutputState }

func (DynamicportpolicyPolicyInterfaceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicportpolicyPolicyInterfaceTag)(nil)).Elem()
}

func (o DynamicportpolicyPolicyInterfaceTagOutput) ToDynamicportpolicyPolicyInterfaceTagOutput() DynamicportpolicyPolicyInterfaceTagOutput {
	return o
}

func (o DynamicportpolicyPolicyInterfaceTagOutput) ToDynamicportpolicyPolicyInterfaceTagOutputWithContext(ctx context.Context) DynamicportpolicyPolicyInterfaceTagOutput {
	return o
}

// FortiSwitch port tag name.
func (o DynamicportpolicyPolicyInterfaceTagOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicportpolicyPolicyInterfaceTag) *string { return v.TagName }).(pulumi.StringPtrOutput)
}

type DynamicportpolicyPolicyInterfaceTagArrayOutput struct{ *pulumi.OutputState }

func (DynamicportpolicyPolicyInterfaceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicportpolicyPolicyInterfaceTag)(nil)).Elem()
}

func (o DynamicportpolicyPolicyInterfaceTagArrayOutput) ToDynamicportpolicyPolicyInterfaceTagArrayOutput() DynamicportpolicyPolicyInterfaceTagArrayOutput {
	return o
}

func (o DynamicportpolicyPolicyInterfaceTagArrayOutput) ToDynamicportpolicyPolicyInterfaceTagArrayOutputWithContext(ctx context.Context) DynamicportpolicyPolicyInterfaceTagArrayOutput {
	return o
}

func (o DynamicportpolicyPolicyInterfaceTagArrayOutput) Index(i pulumi.IntInput) DynamicportpolicyPolicyInterfaceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DynamicportpolicyPolicyInterfaceTag {
		return vs[0].([]DynamicportpolicyPolicyInterfaceTag)[vs[1].(int)]
	}).(DynamicportpolicyPolicyInterfaceTagOutput)
}

type FlowtrackingAggregate struct {
	// Aggregate id.
	Id *int `pulumi:"id"`
	// IP address to group all matching traffic sessions to a flow.
	Ip *string `pulumi:"ip"`
}

// FlowtrackingAggregateInput is an input type that accepts FlowtrackingAggregateArgs and FlowtrackingAggregateOutput values.
// You can construct a concrete instance of `FlowtrackingAggregateInput` via:
//
//	FlowtrackingAggregateArgs{...}
type FlowtrackingAggregateInput interface {
	pulumi.Input

	ToFlowtrackingAggregateOutput() FlowtrackingAggregateOutput
	ToFlowtrackingAggregateOutputWithContext(context.Context) FlowtrackingAggregateOutput
}

type FlowtrackingAggregateArgs struct {
	// Aggregate id.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// IP address to group all matching traffic sessions to a flow.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (FlowtrackingAggregateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowtrackingAggregate)(nil)).Elem()
}

func (i FlowtrackingAggregateArgs) ToFlowtrackingAggregateOutput() FlowtrackingAggregateOutput {
	return i.ToFlowtrackingAggregateOutputWithContext(context.Background())
}

func (i FlowtrackingAggregateArgs) ToFlowtrackingAggregateOutputWithContext(ctx context.Context) FlowtrackingAggregateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowtrackingAggregateOutput)
}

// FlowtrackingAggregateArrayInput is an input type that accepts FlowtrackingAggregateArray and FlowtrackingAggregateArrayOutput values.
// You can construct a concrete instance of `FlowtrackingAggregateArrayInput` via:
//
//	FlowtrackingAggregateArray{ FlowtrackingAggregateArgs{...} }
type FlowtrackingAggregateArrayInput interface {
	pulumi.Input

	ToFlowtrackingAggregateArrayOutput() FlowtrackingAggregateArrayOutput
	ToFlowtrackingAggregateArrayOutputWithContext(context.Context) FlowtrackingAggregateArrayOutput
}

type FlowtrackingAggregateArray []FlowtrackingAggregateInput

func (FlowtrackingAggregateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowtrackingAggregate)(nil)).Elem()
}

func (i FlowtrackingAggregateArray) ToFlowtrackingAggregateArrayOutput() FlowtrackingAggregateArrayOutput {
	return i.ToFlowtrackingAggregateArrayOutputWithContext(context.Background())
}

func (i FlowtrackingAggregateArray) ToFlowtrackingAggregateArrayOutputWithContext(ctx context.Context) FlowtrackingAggregateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowtrackingAggregateArrayOutput)
}

type FlowtrackingAggregateOutput struct{ *pulumi.OutputState }

func (FlowtrackingAggregateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowtrackingAggregate)(nil)).Elem()
}

func (o FlowtrackingAggregateOutput) ToFlowtrackingAggregateOutput() FlowtrackingAggregateOutput {
	return o
}

func (o FlowtrackingAggregateOutput) ToFlowtrackingAggregateOutputWithContext(ctx context.Context) FlowtrackingAggregateOutput {
	return o
}

// Aggregate id.
func (o FlowtrackingAggregateOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowtrackingAggregate) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// IP address to group all matching traffic sessions to a flow.
func (o FlowtrackingAggregateOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowtrackingAggregate) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type FlowtrackingAggregateArrayOutput struct{ *pulumi.OutputState }

func (FlowtrackingAggregateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowtrackingAggregate)(nil)).Elem()
}

func (o FlowtrackingAggregateArrayOutput) ToFlowtrackingAggregateArrayOutput() FlowtrackingAggregateArrayOutput {
	return o
}

func (o FlowtrackingAggregateArrayOutput) ToFlowtrackingAggregateArrayOutputWithContext(ctx context.Context) FlowtrackingAggregateArrayOutput {
	return o
}

func (o FlowtrackingAggregateArrayOutput) Index(i pulumi.IntInput) FlowtrackingAggregateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlowtrackingAggregate {
		return vs[0].([]FlowtrackingAggregate)[vs[1].(int)]
	}).(FlowtrackingAggregateOutput)
}

type FlowtrackingCollector struct {
	// Collector IP address.
	Ip *string `pulumi:"ip"`
	// Collector name.
	Name *string `pulumi:"name"`
	// Collector port number(0-65535, default:0, netflow:2055, ipfix:4739).
	Port *int `pulumi:"port"`
	// Collector L4 transport protocol for exporting packets. Valid values: `udp`, `tcp`, `sctp`.
	Transport *string `pulumi:"transport"`
}

// FlowtrackingCollectorInput is an input type that accepts FlowtrackingCollectorArgs and FlowtrackingCollectorOutput values.
// You can construct a concrete instance of `FlowtrackingCollectorInput` via:
//
//	FlowtrackingCollectorArgs{...}
type FlowtrackingCollectorInput interface {
	pulumi.Input

	ToFlowtrackingCollectorOutput() FlowtrackingCollectorOutput
	ToFlowtrackingCollectorOutputWithContext(context.Context) FlowtrackingCollectorOutput
}

type FlowtrackingCollectorArgs struct {
	// Collector IP address.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Collector name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Collector port number(0-65535, default:0, netflow:2055, ipfix:4739).
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Collector L4 transport protocol for exporting packets. Valid values: `udp`, `tcp`, `sctp`.
	Transport pulumi.StringPtrInput `pulumi:"transport"`
}

func (FlowtrackingCollectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowtrackingCollector)(nil)).Elem()
}

func (i FlowtrackingCollectorArgs) ToFlowtrackingCollectorOutput() FlowtrackingCollectorOutput {
	return i.ToFlowtrackingCollectorOutputWithContext(context.Background())
}

func (i FlowtrackingCollectorArgs) ToFlowtrackingCollectorOutputWithContext(ctx context.Context) FlowtrackingCollectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowtrackingCollectorOutput)
}

// FlowtrackingCollectorArrayInput is an input type that accepts FlowtrackingCollectorArray and FlowtrackingCollectorArrayOutput values.
// You can construct a concrete instance of `FlowtrackingCollectorArrayInput` via:
//
//	FlowtrackingCollectorArray{ FlowtrackingCollectorArgs{...} }
type FlowtrackingCollectorArrayInput interface {
	pulumi.Input

	ToFlowtrackingCollectorArrayOutput() FlowtrackingCollectorArrayOutput
	ToFlowtrackingCollectorArrayOutputWithContext(context.Context) FlowtrackingCollectorArrayOutput
}

type FlowtrackingCollectorArray []FlowtrackingCollectorInput

func (FlowtrackingCollectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowtrackingCollector)(nil)).Elem()
}

func (i FlowtrackingCollectorArray) ToFlowtrackingCollectorArrayOutput() FlowtrackingCollectorArrayOutput {
	return i.ToFlowtrackingCollectorArrayOutputWithContext(context.Background())
}

func (i FlowtrackingCollectorArray) ToFlowtrackingCollectorArrayOutputWithContext(ctx context.Context) FlowtrackingCollectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowtrackingCollectorArrayOutput)
}

type FlowtrackingCollectorOutput struct{ *pulumi.OutputState }

func (FlowtrackingCollectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowtrackingCollector)(nil)).Elem()
}

func (o FlowtrackingCollectorOutput) ToFlowtrackingCollectorOutput() FlowtrackingCollectorOutput {
	return o
}

func (o FlowtrackingCollectorOutput) ToFlowtrackingCollectorOutputWithContext(ctx context.Context) FlowtrackingCollectorOutput {
	return o
}

// Collector IP address.
func (o FlowtrackingCollectorOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowtrackingCollector) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Collector name.
func (o FlowtrackingCollectorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowtrackingCollector) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Collector port number(0-65535, default:0, netflow:2055, ipfix:4739).
func (o FlowtrackingCollectorOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowtrackingCollector) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Collector L4 transport protocol for exporting packets. Valid values: `udp`, `tcp`, `sctp`.
func (o FlowtrackingCollectorOutput) Transport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowtrackingCollector) *string { return v.Transport }).(pulumi.StringPtrOutput)
}

type FlowtrackingCollectorArrayOutput struct{ *pulumi.OutputState }

func (FlowtrackingCollectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowtrackingCollector)(nil)).Elem()
}

func (o FlowtrackingCollectorArrayOutput) ToFlowtrackingCollectorArrayOutput() FlowtrackingCollectorArrayOutput {
	return o
}

func (o FlowtrackingCollectorArrayOutput) ToFlowtrackingCollectorArrayOutputWithContext(ctx context.Context) FlowtrackingCollectorArrayOutput {
	return o
}

func (o FlowtrackingCollectorArrayOutput) Index(i pulumi.IntInput) FlowtrackingCollectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlowtrackingCollector {
		return vs[0].([]FlowtrackingCollector)[vs[1].(int)]
	}).(FlowtrackingCollectorOutput)
}

type FortilinksettingsNacPorts struct {
	// Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
	BounceNacPort *string `pulumi:"bounceNacPort"`
	// Enable/disable LAN segment feature on the FortiLink interface. Valid values: `enabled`, `disabled`.
	LanSegment *string `pulumi:"lanSegment"`
	// Member change flag.
	MemberChange *int `pulumi:"memberChange"`
	// Configure NAC LAN interface.
	NacLanInterface *string `pulumi:"nacLanInterface"`
	// Configure NAC segment VLANs. The structure of `nacSegmentVlans` block is documented below.
	NacSegmentVlans []FortilinksettingsNacPortsNacSegmentVlan `pulumi:"nacSegmentVlans"`
	// Default NAC Onboarding VLAN when NAC devices are discovered.
	OnboardingVlan *string `pulumi:"onboardingVlan"`
	// Parent key name.
	ParentKey *string `pulumi:"parentKey"`
}

// FortilinksettingsNacPortsInput is an input type that accepts FortilinksettingsNacPortsArgs and FortilinksettingsNacPortsOutput values.
// You can construct a concrete instance of `FortilinksettingsNacPortsInput` via:
//
//	FortilinksettingsNacPortsArgs{...}
type FortilinksettingsNacPortsInput interface {
	pulumi.Input

	ToFortilinksettingsNacPortsOutput() FortilinksettingsNacPortsOutput
	ToFortilinksettingsNacPortsOutputWithContext(context.Context) FortilinksettingsNacPortsOutput
}

type FortilinksettingsNacPortsArgs struct {
	// Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
	BounceNacPort pulumi.StringPtrInput `pulumi:"bounceNacPort"`
	// Enable/disable LAN segment feature on the FortiLink interface. Valid values: `enabled`, `disabled`.
	LanSegment pulumi.StringPtrInput `pulumi:"lanSegment"`
	// Member change flag.
	MemberChange pulumi.IntPtrInput `pulumi:"memberChange"`
	// Configure NAC LAN interface.
	NacLanInterface pulumi.StringPtrInput `pulumi:"nacLanInterface"`
	// Configure NAC segment VLANs. The structure of `nacSegmentVlans` block is documented below.
	NacSegmentVlans FortilinksettingsNacPortsNacSegmentVlanArrayInput `pulumi:"nacSegmentVlans"`
	// Default NAC Onboarding VLAN when NAC devices are discovered.
	OnboardingVlan pulumi.StringPtrInput `pulumi:"onboardingVlan"`
	// Parent key name.
	ParentKey pulumi.StringPtrInput `pulumi:"parentKey"`
}

func (FortilinksettingsNacPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FortilinksettingsNacPorts)(nil)).Elem()
}

func (i FortilinksettingsNacPortsArgs) ToFortilinksettingsNacPortsOutput() FortilinksettingsNacPortsOutput {
	return i.ToFortilinksettingsNacPortsOutputWithContext(context.Background())
}

func (i FortilinksettingsNacPortsArgs) ToFortilinksettingsNacPortsOutputWithContext(ctx context.Context) FortilinksettingsNacPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortilinksettingsNacPortsOutput)
}

func (i FortilinksettingsNacPortsArgs) ToFortilinksettingsNacPortsPtrOutput() FortilinksettingsNacPortsPtrOutput {
	return i.ToFortilinksettingsNacPortsPtrOutputWithContext(context.Background())
}

func (i FortilinksettingsNacPortsArgs) ToFortilinksettingsNacPortsPtrOutputWithContext(ctx context.Context) FortilinksettingsNacPortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortilinksettingsNacPortsOutput).ToFortilinksettingsNacPortsPtrOutputWithContext(ctx)
}

// FortilinksettingsNacPortsPtrInput is an input type that accepts FortilinksettingsNacPortsArgs, FortilinksettingsNacPortsPtr and FortilinksettingsNacPortsPtrOutput values.
// You can construct a concrete instance of `FortilinksettingsNacPortsPtrInput` via:
//
//	        FortilinksettingsNacPortsArgs{...}
//
//	or:
//
//	        nil
type FortilinksettingsNacPortsPtrInput interface {
	pulumi.Input

	ToFortilinksettingsNacPortsPtrOutput() FortilinksettingsNacPortsPtrOutput
	ToFortilinksettingsNacPortsPtrOutputWithContext(context.Context) FortilinksettingsNacPortsPtrOutput
}

type fortilinksettingsNacPortsPtrType FortilinksettingsNacPortsArgs

func FortilinksettingsNacPortsPtr(v *FortilinksettingsNacPortsArgs) FortilinksettingsNacPortsPtrInput {
	return (*fortilinksettingsNacPortsPtrType)(v)
}

func (*fortilinksettingsNacPortsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FortilinksettingsNacPorts)(nil)).Elem()
}

func (i *fortilinksettingsNacPortsPtrType) ToFortilinksettingsNacPortsPtrOutput() FortilinksettingsNacPortsPtrOutput {
	return i.ToFortilinksettingsNacPortsPtrOutputWithContext(context.Background())
}

func (i *fortilinksettingsNacPortsPtrType) ToFortilinksettingsNacPortsPtrOutputWithContext(ctx context.Context) FortilinksettingsNacPortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortilinksettingsNacPortsPtrOutput)
}

type FortilinksettingsNacPortsOutput struct{ *pulumi.OutputState }

func (FortilinksettingsNacPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FortilinksettingsNacPorts)(nil)).Elem()
}

func (o FortilinksettingsNacPortsOutput) ToFortilinksettingsNacPortsOutput() FortilinksettingsNacPortsOutput {
	return o
}

func (o FortilinksettingsNacPortsOutput) ToFortilinksettingsNacPortsOutputWithContext(ctx context.Context) FortilinksettingsNacPortsOutput {
	return o
}

func (o FortilinksettingsNacPortsOutput) ToFortilinksettingsNacPortsPtrOutput() FortilinksettingsNacPortsPtrOutput {
	return o.ToFortilinksettingsNacPortsPtrOutputWithContext(context.Background())
}

func (o FortilinksettingsNacPortsOutput) ToFortilinksettingsNacPortsPtrOutputWithContext(ctx context.Context) FortilinksettingsNacPortsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FortilinksettingsNacPorts) *FortilinksettingsNacPorts {
		return &v
	}).(FortilinksettingsNacPortsPtrOutput)
}

// Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
func (o FortilinksettingsNacPortsOutput) BounceNacPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FortilinksettingsNacPorts) *string { return v.BounceNacPort }).(pulumi.StringPtrOutput)
}

// Enable/disable LAN segment feature on the FortiLink interface. Valid values: `enabled`, `disabled`.
func (o FortilinksettingsNacPortsOutput) LanSegment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FortilinksettingsNacPorts) *string { return v.LanSegment }).(pulumi.StringPtrOutput)
}

// Member change flag.
func (o FortilinksettingsNacPortsOutput) MemberChange() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FortilinksettingsNacPorts) *int { return v.MemberChange }).(pulumi.IntPtrOutput)
}

// Configure NAC LAN interface.
func (o FortilinksettingsNacPortsOutput) NacLanInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FortilinksettingsNacPorts) *string { return v.NacLanInterface }).(pulumi.StringPtrOutput)
}

// Configure NAC segment VLANs. The structure of `nacSegmentVlans` block is documented below.
func (o FortilinksettingsNacPortsOutput) NacSegmentVlans() FortilinksettingsNacPortsNacSegmentVlanArrayOutput {
	return o.ApplyT(func(v FortilinksettingsNacPorts) []FortilinksettingsNacPortsNacSegmentVlan { return v.NacSegmentVlans }).(FortilinksettingsNacPortsNacSegmentVlanArrayOutput)
}

// Default NAC Onboarding VLAN when NAC devices are discovered.
func (o FortilinksettingsNacPortsOutput) OnboardingVlan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FortilinksettingsNacPorts) *string { return v.OnboardingVlan }).(pulumi.StringPtrOutput)
}

// Parent key name.
func (o FortilinksettingsNacPortsOutput) ParentKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FortilinksettingsNacPorts) *string { return v.ParentKey }).(pulumi.StringPtrOutput)
}

type FortilinksettingsNacPortsPtrOutput struct{ *pulumi.OutputState }

func (FortilinksettingsNacPortsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FortilinksettingsNacPorts)(nil)).Elem()
}

func (o FortilinksettingsNacPortsPtrOutput) ToFortilinksettingsNacPortsPtrOutput() FortilinksettingsNacPortsPtrOutput {
	return o
}

func (o FortilinksettingsNacPortsPtrOutput) ToFortilinksettingsNacPortsPtrOutputWithContext(ctx context.Context) FortilinksettingsNacPortsPtrOutput {
	return o
}

func (o FortilinksettingsNacPortsPtrOutput) Elem() FortilinksettingsNacPortsOutput {
	return o.ApplyT(func(v *FortilinksettingsNacPorts) FortilinksettingsNacPorts {
		if v != nil {
			return *v
		}
		var ret FortilinksettingsNacPorts
		return ret
	}).(FortilinksettingsNacPortsOutput)
}

// Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
func (o FortilinksettingsNacPortsPtrOutput) BounceNacPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FortilinksettingsNacPorts) *string {
		if v == nil {
			return nil
		}
		return v.BounceNacPort
	}).(pulumi.StringPtrOutput)
}

// Enable/disable LAN segment feature on the FortiLink interface. Valid values: `enabled`, `disabled`.
func (o FortilinksettingsNacPortsPtrOutput) LanSegment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FortilinksettingsNacPorts) *string {
		if v == nil {
			return nil
		}
		return v.LanSegment
	}).(pulumi.StringPtrOutput)
}

// Member change flag.
func (o FortilinksettingsNacPortsPtrOutput) MemberChange() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FortilinksettingsNacPorts) *int {
		if v == nil {
			return nil
		}
		return v.MemberChange
	}).(pulumi.IntPtrOutput)
}

// Configure NAC LAN interface.
func (o FortilinksettingsNacPortsPtrOutput) NacLanInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FortilinksettingsNacPorts) *string {
		if v == nil {
			return nil
		}
		return v.NacLanInterface
	}).(pulumi.StringPtrOutput)
}

// Configure NAC segment VLANs. The structure of `nacSegmentVlans` block is documented below.
func (o FortilinksettingsNacPortsPtrOutput) NacSegmentVlans() FortilinksettingsNacPortsNacSegmentVlanArrayOutput {
	return o.ApplyT(func(v *FortilinksettingsNacPorts) []FortilinksettingsNacPortsNacSegmentVlan {
		if v == nil {
			return nil
		}
		return v.NacSegmentVlans
	}).(FortilinksettingsNacPortsNacSegmentVlanArrayOutput)
}

// Default NAC Onboarding VLAN when NAC devices are discovered.
func (o FortilinksettingsNacPortsPtrOutput) OnboardingVlan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FortilinksettingsNacPorts) *string {
		if v == nil {
			return nil
		}
		return v.OnboardingVlan
	}).(pulumi.StringPtrOutput)
}

// Parent key name.
func (o FortilinksettingsNacPortsPtrOutput) ParentKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FortilinksettingsNacPorts) *string {
		if v == nil {
			return nil
		}
		return v.ParentKey
	}).(pulumi.StringPtrOutput)
}

type FortilinksettingsNacPortsNacSegmentVlan struct {
	// VLAN interface name.
	VlanName *string `pulumi:"vlanName"`
}

// FortilinksettingsNacPortsNacSegmentVlanInput is an input type that accepts FortilinksettingsNacPortsNacSegmentVlanArgs and FortilinksettingsNacPortsNacSegmentVlanOutput values.
// You can construct a concrete instance of `FortilinksettingsNacPortsNacSegmentVlanInput` via:
//
//	FortilinksettingsNacPortsNacSegmentVlanArgs{...}
type FortilinksettingsNacPortsNacSegmentVlanInput interface {
	pulumi.Input

	ToFortilinksettingsNacPortsNacSegmentVlanOutput() FortilinksettingsNacPortsNacSegmentVlanOutput
	ToFortilinksettingsNacPortsNacSegmentVlanOutputWithContext(context.Context) FortilinksettingsNacPortsNacSegmentVlanOutput
}

type FortilinksettingsNacPortsNacSegmentVlanArgs struct {
	// VLAN interface name.
	VlanName pulumi.StringPtrInput `pulumi:"vlanName"`
}

func (FortilinksettingsNacPortsNacSegmentVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FortilinksettingsNacPortsNacSegmentVlan)(nil)).Elem()
}

func (i FortilinksettingsNacPortsNacSegmentVlanArgs) ToFortilinksettingsNacPortsNacSegmentVlanOutput() FortilinksettingsNacPortsNacSegmentVlanOutput {
	return i.ToFortilinksettingsNacPortsNacSegmentVlanOutputWithContext(context.Background())
}

func (i FortilinksettingsNacPortsNacSegmentVlanArgs) ToFortilinksettingsNacPortsNacSegmentVlanOutputWithContext(ctx context.Context) FortilinksettingsNacPortsNacSegmentVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortilinksettingsNacPortsNacSegmentVlanOutput)
}

// FortilinksettingsNacPortsNacSegmentVlanArrayInput is an input type that accepts FortilinksettingsNacPortsNacSegmentVlanArray and FortilinksettingsNacPortsNacSegmentVlanArrayOutput values.
// You can construct a concrete instance of `FortilinksettingsNacPortsNacSegmentVlanArrayInput` via:
//
//	FortilinksettingsNacPortsNacSegmentVlanArray{ FortilinksettingsNacPortsNacSegmentVlanArgs{...} }
type FortilinksettingsNacPortsNacSegmentVlanArrayInput interface {
	pulumi.Input

	ToFortilinksettingsNacPortsNacSegmentVlanArrayOutput() FortilinksettingsNacPortsNacSegmentVlanArrayOutput
	ToFortilinksettingsNacPortsNacSegmentVlanArrayOutputWithContext(context.Context) FortilinksettingsNacPortsNacSegmentVlanArrayOutput
}

type FortilinksettingsNacPortsNacSegmentVlanArray []FortilinksettingsNacPortsNacSegmentVlanInput

func (FortilinksettingsNacPortsNacSegmentVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FortilinksettingsNacPortsNacSegmentVlan)(nil)).Elem()
}

func (i FortilinksettingsNacPortsNacSegmentVlanArray) ToFortilinksettingsNacPortsNacSegmentVlanArrayOutput() FortilinksettingsNacPortsNacSegmentVlanArrayOutput {
	return i.ToFortilinksettingsNacPortsNacSegmentVlanArrayOutputWithContext(context.Background())
}

func (i FortilinksettingsNacPortsNacSegmentVlanArray) ToFortilinksettingsNacPortsNacSegmentVlanArrayOutputWithContext(ctx context.Context) FortilinksettingsNacPortsNacSegmentVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortilinksettingsNacPortsNacSegmentVlanArrayOutput)
}

type FortilinksettingsNacPortsNacSegmentVlanOutput struct{ *pulumi.OutputState }

func (FortilinksettingsNacPortsNacSegmentVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FortilinksettingsNacPortsNacSegmentVlan)(nil)).Elem()
}

func (o FortilinksettingsNacPortsNacSegmentVlanOutput) ToFortilinksettingsNacPortsNacSegmentVlanOutput() FortilinksettingsNacPortsNacSegmentVlanOutput {
	return o
}

func (o FortilinksettingsNacPortsNacSegmentVlanOutput) ToFortilinksettingsNacPortsNacSegmentVlanOutputWithContext(ctx context.Context) FortilinksettingsNacPortsNacSegmentVlanOutput {
	return o
}

// VLAN interface name.
func (o FortilinksettingsNacPortsNacSegmentVlanOutput) VlanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FortilinksettingsNacPortsNacSegmentVlan) *string { return v.VlanName }).(pulumi.StringPtrOutput)
}

type FortilinksettingsNacPortsNacSegmentVlanArrayOutput struct{ *pulumi.OutputState }

func (FortilinksettingsNacPortsNacSegmentVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FortilinksettingsNacPortsNacSegmentVlan)(nil)).Elem()
}

func (o FortilinksettingsNacPortsNacSegmentVlanArrayOutput) ToFortilinksettingsNacPortsNacSegmentVlanArrayOutput() FortilinksettingsNacPortsNacSegmentVlanArrayOutput {
	return o
}

func (o FortilinksettingsNacPortsNacSegmentVlanArrayOutput) ToFortilinksettingsNacPortsNacSegmentVlanArrayOutputWithContext(ctx context.Context) FortilinksettingsNacPortsNacSegmentVlanArrayOutput {
	return o
}

func (o FortilinksettingsNacPortsNacSegmentVlanArrayOutput) Index(i pulumi.IntInput) FortilinksettingsNacPortsNacSegmentVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FortilinksettingsNacPortsNacSegmentVlan {
		return vs[0].([]FortilinksettingsNacPortsNacSegmentVlan)[vs[1].(int)]
	}).(FortilinksettingsNacPortsNacSegmentVlanOutput)
}

type GlobalCustomCommand struct {
	// List of FortiSwitch commands.
	CommandEntry *string `pulumi:"commandEntry"`
	// Name of custom command to push to all FortiSwitches in VDOM.
	CommandName *string `pulumi:"commandName"`
}

// GlobalCustomCommandInput is an input type that accepts GlobalCustomCommandArgs and GlobalCustomCommandOutput values.
// You can construct a concrete instance of `GlobalCustomCommandInput` via:
//
//	GlobalCustomCommandArgs{...}
type GlobalCustomCommandInput interface {
	pulumi.Input

	ToGlobalCustomCommandOutput() GlobalCustomCommandOutput
	ToGlobalCustomCommandOutputWithContext(context.Context) GlobalCustomCommandOutput
}

type GlobalCustomCommandArgs struct {
	// List of FortiSwitch commands.
	CommandEntry pulumi.StringPtrInput `pulumi:"commandEntry"`
	// Name of custom command to push to all FortiSwitches in VDOM.
	CommandName pulumi.StringPtrInput `pulumi:"commandName"`
}

func (GlobalCustomCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalCustomCommand)(nil)).Elem()
}

func (i GlobalCustomCommandArgs) ToGlobalCustomCommandOutput() GlobalCustomCommandOutput {
	return i.ToGlobalCustomCommandOutputWithContext(context.Background())
}

func (i GlobalCustomCommandArgs) ToGlobalCustomCommandOutputWithContext(ctx context.Context) GlobalCustomCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalCustomCommandOutput)
}

// GlobalCustomCommandArrayInput is an input type that accepts GlobalCustomCommandArray and GlobalCustomCommandArrayOutput values.
// You can construct a concrete instance of `GlobalCustomCommandArrayInput` via:
//
//	GlobalCustomCommandArray{ GlobalCustomCommandArgs{...} }
type GlobalCustomCommandArrayInput interface {
	pulumi.Input

	ToGlobalCustomCommandArrayOutput() GlobalCustomCommandArrayOutput
	ToGlobalCustomCommandArrayOutputWithContext(context.Context) GlobalCustomCommandArrayOutput
}

type GlobalCustomCommandArray []GlobalCustomCommandInput

func (GlobalCustomCommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalCustomCommand)(nil)).Elem()
}

func (i GlobalCustomCommandArray) ToGlobalCustomCommandArrayOutput() GlobalCustomCommandArrayOutput {
	return i.ToGlobalCustomCommandArrayOutputWithContext(context.Background())
}

func (i GlobalCustomCommandArray) ToGlobalCustomCommandArrayOutputWithContext(ctx context.Context) GlobalCustomCommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalCustomCommandArrayOutput)
}

type GlobalCustomCommandOutput struct{ *pulumi.OutputState }

func (GlobalCustomCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalCustomCommand)(nil)).Elem()
}

func (o GlobalCustomCommandOutput) ToGlobalCustomCommandOutput() GlobalCustomCommandOutput {
	return o
}

func (o GlobalCustomCommandOutput) ToGlobalCustomCommandOutputWithContext(ctx context.Context) GlobalCustomCommandOutput {
	return o
}

// List of FortiSwitch commands.
func (o GlobalCustomCommandOutput) CommandEntry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalCustomCommand) *string { return v.CommandEntry }).(pulumi.StringPtrOutput)
}

// Name of custom command to push to all FortiSwitches in VDOM.
func (o GlobalCustomCommandOutput) CommandName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalCustomCommand) *string { return v.CommandName }).(pulumi.StringPtrOutput)
}

type GlobalCustomCommandArrayOutput struct{ *pulumi.OutputState }

func (GlobalCustomCommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalCustomCommand)(nil)).Elem()
}

func (o GlobalCustomCommandArrayOutput) ToGlobalCustomCommandArrayOutput() GlobalCustomCommandArrayOutput {
	return o
}

func (o GlobalCustomCommandArrayOutput) ToGlobalCustomCommandArrayOutputWithContext(ctx context.Context) GlobalCustomCommandArrayOutput {
	return o
}

func (o GlobalCustomCommandArrayOutput) Index(i pulumi.IntInput) GlobalCustomCommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlobalCustomCommand {
		return vs[0].([]GlobalCustomCommand)[vs[1].(int)]
	}).(GlobalCustomCommandOutput)
}

type GlobalDisableDiscovery struct {
	// Managed device ID.
	Name *string `pulumi:"name"`
}

// GlobalDisableDiscoveryInput is an input type that accepts GlobalDisableDiscoveryArgs and GlobalDisableDiscoveryOutput values.
// You can construct a concrete instance of `GlobalDisableDiscoveryInput` via:
//
//	GlobalDisableDiscoveryArgs{...}
type GlobalDisableDiscoveryInput interface {
	pulumi.Input

	ToGlobalDisableDiscoveryOutput() GlobalDisableDiscoveryOutput
	ToGlobalDisableDiscoveryOutputWithContext(context.Context) GlobalDisableDiscoveryOutput
}

type GlobalDisableDiscoveryArgs struct {
	// Managed device ID.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GlobalDisableDiscoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDisableDiscovery)(nil)).Elem()
}

func (i GlobalDisableDiscoveryArgs) ToGlobalDisableDiscoveryOutput() GlobalDisableDiscoveryOutput {
	return i.ToGlobalDisableDiscoveryOutputWithContext(context.Background())
}

func (i GlobalDisableDiscoveryArgs) ToGlobalDisableDiscoveryOutputWithContext(ctx context.Context) GlobalDisableDiscoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDisableDiscoveryOutput)
}

// GlobalDisableDiscoveryArrayInput is an input type that accepts GlobalDisableDiscoveryArray and GlobalDisableDiscoveryArrayOutput values.
// You can construct a concrete instance of `GlobalDisableDiscoveryArrayInput` via:
//
//	GlobalDisableDiscoveryArray{ GlobalDisableDiscoveryArgs{...} }
type GlobalDisableDiscoveryArrayInput interface {
	pulumi.Input

	ToGlobalDisableDiscoveryArrayOutput() GlobalDisableDiscoveryArrayOutput
	ToGlobalDisableDiscoveryArrayOutputWithContext(context.Context) GlobalDisableDiscoveryArrayOutput
}

type GlobalDisableDiscoveryArray []GlobalDisableDiscoveryInput

func (GlobalDisableDiscoveryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalDisableDiscovery)(nil)).Elem()
}

func (i GlobalDisableDiscoveryArray) ToGlobalDisableDiscoveryArrayOutput() GlobalDisableDiscoveryArrayOutput {
	return i.ToGlobalDisableDiscoveryArrayOutputWithContext(context.Background())
}

func (i GlobalDisableDiscoveryArray) ToGlobalDisableDiscoveryArrayOutputWithContext(ctx context.Context) GlobalDisableDiscoveryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDisableDiscoveryArrayOutput)
}

type GlobalDisableDiscoveryOutput struct{ *pulumi.OutputState }

func (GlobalDisableDiscoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDisableDiscovery)(nil)).Elem()
}

func (o GlobalDisableDiscoveryOutput) ToGlobalDisableDiscoveryOutput() GlobalDisableDiscoveryOutput {
	return o
}

func (o GlobalDisableDiscoveryOutput) ToGlobalDisableDiscoveryOutputWithContext(ctx context.Context) GlobalDisableDiscoveryOutput {
	return o
}

// Managed device ID.
func (o GlobalDisableDiscoveryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDisableDiscovery) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GlobalDisableDiscoveryArrayOutput struct{ *pulumi.OutputState }

func (GlobalDisableDiscoveryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalDisableDiscovery)(nil)).Elem()
}

func (o GlobalDisableDiscoveryArrayOutput) ToGlobalDisableDiscoveryArrayOutput() GlobalDisableDiscoveryArrayOutput {
	return o
}

func (o GlobalDisableDiscoveryArrayOutput) ToGlobalDisableDiscoveryArrayOutputWithContext(ctx context.Context) GlobalDisableDiscoveryArrayOutput {
	return o
}

func (o GlobalDisableDiscoveryArrayOutput) Index(i pulumi.IntInput) GlobalDisableDiscoveryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlobalDisableDiscovery {
		return vs[0].([]GlobalDisableDiscovery)[vs[1].(int)]
	}).(GlobalDisableDiscoveryOutput)
}

type LldpprofileCustomTlv struct {
	// Organizationally defined information string (0 - 507 hexadecimal bytes).
	InformationString *string `pulumi:"informationString"`
	// TLV name (not sent).
	Name *string `pulumi:"name"`
	// Organizationally unique identifier (OUI), a 3-byte hexadecimal number, for this TLV.
	Oui *string `pulumi:"oui"`
	// Organizationally defined subtype (0 - 255).
	Subtype *int `pulumi:"subtype"`
}

// LldpprofileCustomTlvInput is an input type that accepts LldpprofileCustomTlvArgs and LldpprofileCustomTlvOutput values.
// You can construct a concrete instance of `LldpprofileCustomTlvInput` via:
//
//	LldpprofileCustomTlvArgs{...}
type LldpprofileCustomTlvInput interface {
	pulumi.Input

	ToLldpprofileCustomTlvOutput() LldpprofileCustomTlvOutput
	ToLldpprofileCustomTlvOutputWithContext(context.Context) LldpprofileCustomTlvOutput
}

type LldpprofileCustomTlvArgs struct {
	// Organizationally defined information string (0 - 507 hexadecimal bytes).
	InformationString pulumi.StringPtrInput `pulumi:"informationString"`
	// TLV name (not sent).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Organizationally unique identifier (OUI), a 3-byte hexadecimal number, for this TLV.
	Oui pulumi.StringPtrInput `pulumi:"oui"`
	// Organizationally defined subtype (0 - 255).
	Subtype pulumi.IntPtrInput `pulumi:"subtype"`
}

func (LldpprofileCustomTlvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LldpprofileCustomTlv)(nil)).Elem()
}

func (i LldpprofileCustomTlvArgs) ToLldpprofileCustomTlvOutput() LldpprofileCustomTlvOutput {
	return i.ToLldpprofileCustomTlvOutputWithContext(context.Background())
}

func (i LldpprofileCustomTlvArgs) ToLldpprofileCustomTlvOutputWithContext(ctx context.Context) LldpprofileCustomTlvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LldpprofileCustomTlvOutput)
}

// LldpprofileCustomTlvArrayInput is an input type that accepts LldpprofileCustomTlvArray and LldpprofileCustomTlvArrayOutput values.
// You can construct a concrete instance of `LldpprofileCustomTlvArrayInput` via:
//
//	LldpprofileCustomTlvArray{ LldpprofileCustomTlvArgs{...} }
type LldpprofileCustomTlvArrayInput interface {
	pulumi.Input

	ToLldpprofileCustomTlvArrayOutput() LldpprofileCustomTlvArrayOutput
	ToLldpprofileCustomTlvArrayOutputWithContext(context.Context) LldpprofileCustomTlvArrayOutput
}

type LldpprofileCustomTlvArray []LldpprofileCustomTlvInput

func (LldpprofileCustomTlvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LldpprofileCustomTlv)(nil)).Elem()
}

func (i LldpprofileCustomTlvArray) ToLldpprofileCustomTlvArrayOutput() LldpprofileCustomTlvArrayOutput {
	return i.ToLldpprofileCustomTlvArrayOutputWithContext(context.Background())
}

func (i LldpprofileCustomTlvArray) ToLldpprofileCustomTlvArrayOutputWithContext(ctx context.Context) LldpprofileCustomTlvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LldpprofileCustomTlvArrayOutput)
}

type LldpprofileCustomTlvOutput struct{ *pulumi.OutputState }

func (LldpprofileCustomTlvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LldpprofileCustomTlv)(nil)).Elem()
}

func (o LldpprofileCustomTlvOutput) ToLldpprofileCustomTlvOutput() LldpprofileCustomTlvOutput {
	return o
}

func (o LldpprofileCustomTlvOutput) ToLldpprofileCustomTlvOutputWithContext(ctx context.Context) LldpprofileCustomTlvOutput {
	return o
}

// Organizationally defined information string (0 - 507 hexadecimal bytes).
func (o LldpprofileCustomTlvOutput) InformationString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LldpprofileCustomTlv) *string { return v.InformationString }).(pulumi.StringPtrOutput)
}

// TLV name (not sent).
func (o LldpprofileCustomTlvOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LldpprofileCustomTlv) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Organizationally unique identifier (OUI), a 3-byte hexadecimal number, for this TLV.
func (o LldpprofileCustomTlvOutput) Oui() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LldpprofileCustomTlv) *string { return v.Oui }).(pulumi.StringPtrOutput)
}

// Organizationally defined subtype (0 - 255).
func (o LldpprofileCustomTlvOutput) Subtype() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LldpprofileCustomTlv) *int { return v.Subtype }).(pulumi.IntPtrOutput)
}

type LldpprofileCustomTlvArrayOutput struct{ *pulumi.OutputState }

func (LldpprofileCustomTlvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LldpprofileCustomTlv)(nil)).Elem()
}

func (o LldpprofileCustomTlvArrayOutput) ToLldpprofileCustomTlvArrayOutput() LldpprofileCustomTlvArrayOutput {
	return o
}

func (o LldpprofileCustomTlvArrayOutput) ToLldpprofileCustomTlvArrayOutputWithContext(ctx context.Context) LldpprofileCustomTlvArrayOutput {
	return o
}

func (o LldpprofileCustomTlvArrayOutput) Index(i pulumi.IntInput) LldpprofileCustomTlvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LldpprofileCustomTlv {
		return vs[0].([]LldpprofileCustomTlv)[vs[1].(int)]
	}).(LldpprofileCustomTlvOutput)
}

type LldpprofileMedLocationService struct {
	// Location service type name.
	Name *string `pulumi:"name"`
	// Enable or disable this TLV. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// Location service ID.
	SysLocationId *string `pulumi:"sysLocationId"`
}

// LldpprofileMedLocationServiceInput is an input type that accepts LldpprofileMedLocationServiceArgs and LldpprofileMedLocationServiceOutput values.
// You can construct a concrete instance of `LldpprofileMedLocationServiceInput` via:
//
//	LldpprofileMedLocationServiceArgs{...}
type LldpprofileMedLocationServiceInput interface {
	pulumi.Input

	ToLldpprofileMedLocationServiceOutput() LldpprofileMedLocationServiceOutput
	ToLldpprofileMedLocationServiceOutputWithContext(context.Context) LldpprofileMedLocationServiceOutput
}

type LldpprofileMedLocationServiceArgs struct {
	// Location service type name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Enable or disable this TLV. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Location service ID.
	SysLocationId pulumi.StringPtrInput `pulumi:"sysLocationId"`
}

func (LldpprofileMedLocationServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LldpprofileMedLocationService)(nil)).Elem()
}

func (i LldpprofileMedLocationServiceArgs) ToLldpprofileMedLocationServiceOutput() LldpprofileMedLocationServiceOutput {
	return i.ToLldpprofileMedLocationServiceOutputWithContext(context.Background())
}

func (i LldpprofileMedLocationServiceArgs) ToLldpprofileMedLocationServiceOutputWithContext(ctx context.Context) LldpprofileMedLocationServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LldpprofileMedLocationServiceOutput)
}

// LldpprofileMedLocationServiceArrayInput is an input type that accepts LldpprofileMedLocationServiceArray and LldpprofileMedLocationServiceArrayOutput values.
// You can construct a concrete instance of `LldpprofileMedLocationServiceArrayInput` via:
//
//	LldpprofileMedLocationServiceArray{ LldpprofileMedLocationServiceArgs{...} }
type LldpprofileMedLocationServiceArrayInput interface {
	pulumi.Input

	ToLldpprofileMedLocationServiceArrayOutput() LldpprofileMedLocationServiceArrayOutput
	ToLldpprofileMedLocationServiceArrayOutputWithContext(context.Context) LldpprofileMedLocationServiceArrayOutput
}

type LldpprofileMedLocationServiceArray []LldpprofileMedLocationServiceInput

func (LldpprofileMedLocationServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LldpprofileMedLocationService)(nil)).Elem()
}

func (i LldpprofileMedLocationServiceArray) ToLldpprofileMedLocationServiceArrayOutput() LldpprofileMedLocationServiceArrayOutput {
	return i.ToLldpprofileMedLocationServiceArrayOutputWithContext(context.Background())
}

func (i LldpprofileMedLocationServiceArray) ToLldpprofileMedLocationServiceArrayOutputWithContext(ctx context.Context) LldpprofileMedLocationServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LldpprofileMedLocationServiceArrayOutput)
}

type LldpprofileMedLocationServiceOutput struct{ *pulumi.OutputState }

func (LldpprofileMedLocationServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LldpprofileMedLocationService)(nil)).Elem()
}

func (o LldpprofileMedLocationServiceOutput) ToLldpprofileMedLocationServiceOutput() LldpprofileMedLocationServiceOutput {
	return o
}

func (o LldpprofileMedLocationServiceOutput) ToLldpprofileMedLocationServiceOutputWithContext(ctx context.Context) LldpprofileMedLocationServiceOutput {
	return o
}

// Location service type name.
func (o LldpprofileMedLocationServiceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LldpprofileMedLocationService) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Enable or disable this TLV. Valid values: `disable`, `enable`.
func (o LldpprofileMedLocationServiceOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LldpprofileMedLocationService) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Location service ID.
func (o LldpprofileMedLocationServiceOutput) SysLocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LldpprofileMedLocationService) *string { return v.SysLocationId }).(pulumi.StringPtrOutput)
}

type LldpprofileMedLocationServiceArrayOutput struct{ *pulumi.OutputState }

func (LldpprofileMedLocationServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LldpprofileMedLocationService)(nil)).Elem()
}

func (o LldpprofileMedLocationServiceArrayOutput) ToLldpprofileMedLocationServiceArrayOutput() LldpprofileMedLocationServiceArrayOutput {
	return o
}

func (o LldpprofileMedLocationServiceArrayOutput) ToLldpprofileMedLocationServiceArrayOutputWithContext(ctx context.Context) LldpprofileMedLocationServiceArrayOutput {
	return o
}

func (o LldpprofileMedLocationServiceArrayOutput) Index(i pulumi.IntInput) LldpprofileMedLocationServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LldpprofileMedLocationService {
		return vs[0].([]LldpprofileMedLocationService)[vs[1].(int)]
	}).(LldpprofileMedLocationServiceOutput)
}

type LldpprofileMedNetworkPolicy struct {
	// Enable/disable VLAN assignment when this profile is applied on managed FortiSwitch port. Valid values: `disable`, `enable`.
	AssignVlan *string `pulumi:"assignVlan"`
	// Advertised Differentiated Services Code Point (DSCP) value, a packet header value indicating the level of service requested for traffic, such as high priority or best effort delivery.
	Dscp *int `pulumi:"dscp"`
	// Policy type name.
	Name *string `pulumi:"name"`
	// Advertised Layer 2 priority (0 - 7; from lowest to highest priority).
	Priority *int `pulumi:"priority"`
	// Enable or disable this TLV. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// ID of VLAN to advertise, if configured on port (0 - 4094, 0 = priority tag).
	Vlan *int `pulumi:"vlan"`
	// VLAN interface to advertise; if configured on port.
	VlanIntf *string `pulumi:"vlanIntf"`
}

// LldpprofileMedNetworkPolicyInput is an input type that accepts LldpprofileMedNetworkPolicyArgs and LldpprofileMedNetworkPolicyOutput values.
// You can construct a concrete instance of `LldpprofileMedNetworkPolicyInput` via:
//
//	LldpprofileMedNetworkPolicyArgs{...}
type LldpprofileMedNetworkPolicyInput interface {
	pulumi.Input

	ToLldpprofileMedNetworkPolicyOutput() LldpprofileMedNetworkPolicyOutput
	ToLldpprofileMedNetworkPolicyOutputWithContext(context.Context) LldpprofileMedNetworkPolicyOutput
}

type LldpprofileMedNetworkPolicyArgs struct {
	// Enable/disable VLAN assignment when this profile is applied on managed FortiSwitch port. Valid values: `disable`, `enable`.
	AssignVlan pulumi.StringPtrInput `pulumi:"assignVlan"`
	// Advertised Differentiated Services Code Point (DSCP) value, a packet header value indicating the level of service requested for traffic, such as high priority or best effort delivery.
	Dscp pulumi.IntPtrInput `pulumi:"dscp"`
	// Policy type name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Advertised Layer 2 priority (0 - 7; from lowest to highest priority).
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Enable or disable this TLV. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// ID of VLAN to advertise, if configured on port (0 - 4094, 0 = priority tag).
	Vlan pulumi.IntPtrInput `pulumi:"vlan"`
	// VLAN interface to advertise; if configured on port.
	VlanIntf pulumi.StringPtrInput `pulumi:"vlanIntf"`
}

func (LldpprofileMedNetworkPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LldpprofileMedNetworkPolicy)(nil)).Elem()
}

func (i LldpprofileMedNetworkPolicyArgs) ToLldpprofileMedNetworkPolicyOutput() LldpprofileMedNetworkPolicyOutput {
	return i.ToLldpprofileMedNetworkPolicyOutputWithContext(context.Background())
}

func (i LldpprofileMedNetworkPolicyArgs) ToLldpprofileMedNetworkPolicyOutputWithContext(ctx context.Context) LldpprofileMedNetworkPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LldpprofileMedNetworkPolicyOutput)
}

// LldpprofileMedNetworkPolicyArrayInput is an input type that accepts LldpprofileMedNetworkPolicyArray and LldpprofileMedNetworkPolicyArrayOutput values.
// You can construct a concrete instance of `LldpprofileMedNetworkPolicyArrayInput` via:
//
//	LldpprofileMedNetworkPolicyArray{ LldpprofileMedNetworkPolicyArgs{...} }
type LldpprofileMedNetworkPolicyArrayInput interface {
	pulumi.Input

	ToLldpprofileMedNetworkPolicyArrayOutput() LldpprofileMedNetworkPolicyArrayOutput
	ToLldpprofileMedNetworkPolicyArrayOutputWithContext(context.Context) LldpprofileMedNetworkPolicyArrayOutput
}

type LldpprofileMedNetworkPolicyArray []LldpprofileMedNetworkPolicyInput

func (LldpprofileMedNetworkPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LldpprofileMedNetworkPolicy)(nil)).Elem()
}

func (i LldpprofileMedNetworkPolicyArray) ToLldpprofileMedNetworkPolicyArrayOutput() LldpprofileMedNetworkPolicyArrayOutput {
	return i.ToLldpprofileMedNetworkPolicyArrayOutputWithContext(context.Background())
}

func (i LldpprofileMedNetworkPolicyArray) ToLldpprofileMedNetworkPolicyArrayOutputWithContext(ctx context.Context) LldpprofileMedNetworkPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LldpprofileMedNetworkPolicyArrayOutput)
}

type LldpprofileMedNetworkPolicyOutput struct{ *pulumi.OutputState }

func (LldpprofileMedNetworkPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LldpprofileMedNetworkPolicy)(nil)).Elem()
}

func (o LldpprofileMedNetworkPolicyOutput) ToLldpprofileMedNetworkPolicyOutput() LldpprofileMedNetworkPolicyOutput {
	return o
}

func (o LldpprofileMedNetworkPolicyOutput) ToLldpprofileMedNetworkPolicyOutputWithContext(ctx context.Context) LldpprofileMedNetworkPolicyOutput {
	return o
}

// Enable/disable VLAN assignment when this profile is applied on managed FortiSwitch port. Valid values: `disable`, `enable`.
func (o LldpprofileMedNetworkPolicyOutput) AssignVlan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LldpprofileMedNetworkPolicy) *string { return v.AssignVlan }).(pulumi.StringPtrOutput)
}

// Advertised Differentiated Services Code Point (DSCP) value, a packet header value indicating the level of service requested for traffic, such as high priority or best effort delivery.
func (o LldpprofileMedNetworkPolicyOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LldpprofileMedNetworkPolicy) *int { return v.Dscp }).(pulumi.IntPtrOutput)
}

// Policy type name.
func (o LldpprofileMedNetworkPolicyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LldpprofileMedNetworkPolicy) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Advertised Layer 2 priority (0 - 7; from lowest to highest priority).
func (o LldpprofileMedNetworkPolicyOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LldpprofileMedNetworkPolicy) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Enable or disable this TLV. Valid values: `disable`, `enable`.
func (o LldpprofileMedNetworkPolicyOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LldpprofileMedNetworkPolicy) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// ID of VLAN to advertise, if configured on port (0 - 4094, 0 = priority tag).
func (o LldpprofileMedNetworkPolicyOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LldpprofileMedNetworkPolicy) *int { return v.Vlan }).(pulumi.IntPtrOutput)
}

// VLAN interface to advertise; if configured on port.
func (o LldpprofileMedNetworkPolicyOutput) VlanIntf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LldpprofileMedNetworkPolicy) *string { return v.VlanIntf }).(pulumi.StringPtrOutput)
}

type LldpprofileMedNetworkPolicyArrayOutput struct{ *pulumi.OutputState }

func (LldpprofileMedNetworkPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LldpprofileMedNetworkPolicy)(nil)).Elem()
}

func (o LldpprofileMedNetworkPolicyArrayOutput) ToLldpprofileMedNetworkPolicyArrayOutput() LldpprofileMedNetworkPolicyArrayOutput {
	return o
}

func (o LldpprofileMedNetworkPolicyArrayOutput) ToLldpprofileMedNetworkPolicyArrayOutputWithContext(ctx context.Context) LldpprofileMedNetworkPolicyArrayOutput {
	return o
}

func (o LldpprofileMedNetworkPolicyArrayOutput) Index(i pulumi.IntInput) LldpprofileMedNetworkPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LldpprofileMedNetworkPolicy {
		return vs[0].([]LldpprofileMedNetworkPolicy)[vs[1].(int)]
	}).(LldpprofileMedNetworkPolicyOutput)
}

type LocationAddressCivic struct {
	// Location additional details.
	Additional *string `pulumi:"additional"`
	// Location additional code details.
	AdditionalCode *string `pulumi:"additionalCode"`
	// Location block details.
	Block *string `pulumi:"block"`
	// Location branch road details.
	BranchRoad *string `pulumi:"branchRoad"`
	// Location building details.
	Building *string `pulumi:"building"`
	// Location city details.
	City *string `pulumi:"city"`
	// Location city division details.
	CityDivision *string `pulumi:"cityDivision"`
	// The two-letter ISO 3166 country code in capital ASCII letters eg. US, CA, DK, DE.
	Country *string `pulumi:"country"`
	// National subdivisions (state, canton, region, province, or prefecture).
	CountrySubdivision *string `pulumi:"countrySubdivision"`
	// County, parish, gun (JP), or district (IN).
	County *string `pulumi:"county"`
	// Leading street direction.
	Direction *string `pulumi:"direction"`
	// Floor.
	Floor *string `pulumi:"floor"`
	// Landmark or vanity address.
	Landmark *string `pulumi:"landmark"`
	// Language.
	Language *string `pulumi:"language"`
	// Name (residence and office occupant).
	Name *string `pulumi:"name"`
	// House number.
	Number *string `pulumi:"number"`
	// House number suffix.
	NumberSuffix *string `pulumi:"numberSuffix"`
	// Parent key name.
	ParentKey *string `pulumi:"parentKey"`
	// Placetype.
	PlaceType *string `pulumi:"placeType"`
	// Post office box (P.O. box).
	PostOfficeBox *string `pulumi:"postOfficeBox"`
	// Postal community name.
	PostalCommunity *string `pulumi:"postalCommunity"`
	// Primary road name.
	PrimaryRoad *string `pulumi:"primaryRoad"`
	// Road section.
	RoadSection *string `pulumi:"roadSection"`
	// Room number.
	Room *string `pulumi:"room"`
	// Script used to present the address information.
	Script *string `pulumi:"script"`
	// Seat number.
	Seat *string `pulumi:"seat"`
	// Street.
	Street *string `pulumi:"street"`
	// Street name post modifier.
	StreetNamePostMod *string `pulumi:"streetNamePostMod"`
	// Street name pre modifier.
	StreetNamePreMod *string `pulumi:"streetNamePreMod"`
	// Street suffix.
	StreetSuffix *string `pulumi:"streetSuffix"`
	// Sub branch road name.
	SubBranchRoad *string `pulumi:"subBranchRoad"`
	// Trailing street suffix.
	TrailingStrSuffix *string `pulumi:"trailingStrSuffix"`
	// Unit (apartment, suite).
	Unit *string `pulumi:"unit"`
	// Postal/zip code.
	Zip *string `pulumi:"zip"`
}

// LocationAddressCivicInput is an input type that accepts LocationAddressCivicArgs and LocationAddressCivicOutput values.
// You can construct a concrete instance of `LocationAddressCivicInput` via:
//
//	LocationAddressCivicArgs{...}
type LocationAddressCivicInput interface {
	pulumi.Input

	ToLocationAddressCivicOutput() LocationAddressCivicOutput
	ToLocationAddressCivicOutputWithContext(context.Context) LocationAddressCivicOutput
}

type LocationAddressCivicArgs struct {
	// Location additional details.
	Additional pulumi.StringPtrInput `pulumi:"additional"`
	// Location additional code details.
	AdditionalCode pulumi.StringPtrInput `pulumi:"additionalCode"`
	// Location block details.
	Block pulumi.StringPtrInput `pulumi:"block"`
	// Location branch road details.
	BranchRoad pulumi.StringPtrInput `pulumi:"branchRoad"`
	// Location building details.
	Building pulumi.StringPtrInput `pulumi:"building"`
	// Location city details.
	City pulumi.StringPtrInput `pulumi:"city"`
	// Location city division details.
	CityDivision pulumi.StringPtrInput `pulumi:"cityDivision"`
	// The two-letter ISO 3166 country code in capital ASCII letters eg. US, CA, DK, DE.
	Country pulumi.StringPtrInput `pulumi:"country"`
	// National subdivisions (state, canton, region, province, or prefecture).
	CountrySubdivision pulumi.StringPtrInput `pulumi:"countrySubdivision"`
	// County, parish, gun (JP), or district (IN).
	County pulumi.StringPtrInput `pulumi:"county"`
	// Leading street direction.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Floor.
	Floor pulumi.StringPtrInput `pulumi:"floor"`
	// Landmark or vanity address.
	Landmark pulumi.StringPtrInput `pulumi:"landmark"`
	// Language.
	Language pulumi.StringPtrInput `pulumi:"language"`
	// Name (residence and office occupant).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// House number.
	Number pulumi.StringPtrInput `pulumi:"number"`
	// House number suffix.
	NumberSuffix pulumi.StringPtrInput `pulumi:"numberSuffix"`
	// Parent key name.
	ParentKey pulumi.StringPtrInput `pulumi:"parentKey"`
	// Placetype.
	PlaceType pulumi.StringPtrInput `pulumi:"placeType"`
	// Post office box (P.O. box).
	PostOfficeBox pulumi.StringPtrInput `pulumi:"postOfficeBox"`
	// Postal community name.
	PostalCommunity pulumi.StringPtrInput `pulumi:"postalCommunity"`
	// Primary road name.
	PrimaryRoad pulumi.StringPtrInput `pulumi:"primaryRoad"`
	// Road section.
	RoadSection pulumi.StringPtrInput `pulumi:"roadSection"`
	// Room number.
	Room pulumi.StringPtrInput `pulumi:"room"`
	// Script used to present the address information.
	Script pulumi.StringPtrInput `pulumi:"script"`
	// Seat number.
	Seat pulumi.StringPtrInput `pulumi:"seat"`
	// Street.
	Street pulumi.StringPtrInput `pulumi:"street"`
	// Street name post modifier.
	StreetNamePostMod pulumi.StringPtrInput `pulumi:"streetNamePostMod"`
	// Street name pre modifier.
	StreetNamePreMod pulumi.StringPtrInput `pulumi:"streetNamePreMod"`
	// Street suffix.
	StreetSuffix pulumi.StringPtrInput `pulumi:"streetSuffix"`
	// Sub branch road name.
	SubBranchRoad pulumi.StringPtrInput `pulumi:"subBranchRoad"`
	// Trailing street suffix.
	TrailingStrSuffix pulumi.StringPtrInput `pulumi:"trailingStrSuffix"`
	// Unit (apartment, suite).
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// Postal/zip code.
	Zip pulumi.StringPtrInput `pulumi:"zip"`
}

func (LocationAddressCivicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationAddressCivic)(nil)).Elem()
}

func (i LocationAddressCivicArgs) ToLocationAddressCivicOutput() LocationAddressCivicOutput {
	return i.ToLocationAddressCivicOutputWithContext(context.Background())
}

func (i LocationAddressCivicArgs) ToLocationAddressCivicOutputWithContext(ctx context.Context) LocationAddressCivicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationAddressCivicOutput)
}

func (i LocationAddressCivicArgs) ToLocationAddressCivicPtrOutput() LocationAddressCivicPtrOutput {
	return i.ToLocationAddressCivicPtrOutputWithContext(context.Background())
}

func (i LocationAddressCivicArgs) ToLocationAddressCivicPtrOutputWithContext(ctx context.Context) LocationAddressCivicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationAddressCivicOutput).ToLocationAddressCivicPtrOutputWithContext(ctx)
}

// LocationAddressCivicPtrInput is an input type that accepts LocationAddressCivicArgs, LocationAddressCivicPtr and LocationAddressCivicPtrOutput values.
// You can construct a concrete instance of `LocationAddressCivicPtrInput` via:
//
//	        LocationAddressCivicArgs{...}
//
//	or:
//
//	        nil
type LocationAddressCivicPtrInput interface {
	pulumi.Input

	ToLocationAddressCivicPtrOutput() LocationAddressCivicPtrOutput
	ToLocationAddressCivicPtrOutputWithContext(context.Context) LocationAddressCivicPtrOutput
}

type locationAddressCivicPtrType LocationAddressCivicArgs

func LocationAddressCivicPtr(v *LocationAddressCivicArgs) LocationAddressCivicPtrInput {
	return (*locationAddressCivicPtrType)(v)
}

func (*locationAddressCivicPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationAddressCivic)(nil)).Elem()
}

func (i *locationAddressCivicPtrType) ToLocationAddressCivicPtrOutput() LocationAddressCivicPtrOutput {
	return i.ToLocationAddressCivicPtrOutputWithContext(context.Background())
}

func (i *locationAddressCivicPtrType) ToLocationAddressCivicPtrOutputWithContext(ctx context.Context) LocationAddressCivicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationAddressCivicPtrOutput)
}

type LocationAddressCivicOutput struct{ *pulumi.OutputState }

func (LocationAddressCivicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationAddressCivic)(nil)).Elem()
}

func (o LocationAddressCivicOutput) ToLocationAddressCivicOutput() LocationAddressCivicOutput {
	return o
}

func (o LocationAddressCivicOutput) ToLocationAddressCivicOutputWithContext(ctx context.Context) LocationAddressCivicOutput {
	return o
}

func (o LocationAddressCivicOutput) ToLocationAddressCivicPtrOutput() LocationAddressCivicPtrOutput {
	return o.ToLocationAddressCivicPtrOutputWithContext(context.Background())
}

func (o LocationAddressCivicOutput) ToLocationAddressCivicPtrOutputWithContext(ctx context.Context) LocationAddressCivicPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationAddressCivic) *LocationAddressCivic {
		return &v
	}).(LocationAddressCivicPtrOutput)
}

// Location additional details.
func (o LocationAddressCivicOutput) Additional() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.Additional }).(pulumi.StringPtrOutput)
}

// Location additional code details.
func (o LocationAddressCivicOutput) AdditionalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.AdditionalCode }).(pulumi.StringPtrOutput)
}

// Location block details.
func (o LocationAddressCivicOutput) Block() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.Block }).(pulumi.StringPtrOutput)
}

// Location branch road details.
func (o LocationAddressCivicOutput) BranchRoad() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.BranchRoad }).(pulumi.StringPtrOutput)
}

// Location building details.
func (o LocationAddressCivicOutput) Building() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.Building }).(pulumi.StringPtrOutput)
}

// Location city details.
func (o LocationAddressCivicOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.City }).(pulumi.StringPtrOutput)
}

// Location city division details.
func (o LocationAddressCivicOutput) CityDivision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.CityDivision }).(pulumi.StringPtrOutput)
}

// The two-letter ISO 3166 country code in capital ASCII letters eg. US, CA, DK, DE.
func (o LocationAddressCivicOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.Country }).(pulumi.StringPtrOutput)
}

// National subdivisions (state, canton, region, province, or prefecture).
func (o LocationAddressCivicOutput) CountrySubdivision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.CountrySubdivision }).(pulumi.StringPtrOutput)
}

// County, parish, gun (JP), or district (IN).
func (o LocationAddressCivicOutput) County() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.County }).(pulumi.StringPtrOutput)
}

// Leading street direction.
func (o LocationAddressCivicOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Floor.
func (o LocationAddressCivicOutput) Floor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.Floor }).(pulumi.StringPtrOutput)
}

// Landmark or vanity address.
func (o LocationAddressCivicOutput) Landmark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.Landmark }).(pulumi.StringPtrOutput)
}

// Language.
func (o LocationAddressCivicOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.Language }).(pulumi.StringPtrOutput)
}

// Name (residence and office occupant).
func (o LocationAddressCivicOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// House number.
func (o LocationAddressCivicOutput) Number() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.Number }).(pulumi.StringPtrOutput)
}

// House number suffix.
func (o LocationAddressCivicOutput) NumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.NumberSuffix }).(pulumi.StringPtrOutput)
}

// Parent key name.
func (o LocationAddressCivicOutput) ParentKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.ParentKey }).(pulumi.StringPtrOutput)
}

// Placetype.
func (o LocationAddressCivicOutput) PlaceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.PlaceType }).(pulumi.StringPtrOutput)
}

// Post office box (P.O. box).
func (o LocationAddressCivicOutput) PostOfficeBox() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.PostOfficeBox }).(pulumi.StringPtrOutput)
}

// Postal community name.
func (o LocationAddressCivicOutput) PostalCommunity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.PostalCommunity }).(pulumi.StringPtrOutput)
}

// Primary road name.
func (o LocationAddressCivicOutput) PrimaryRoad() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.PrimaryRoad }).(pulumi.StringPtrOutput)
}

// Road section.
func (o LocationAddressCivicOutput) RoadSection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.RoadSection }).(pulumi.StringPtrOutput)
}

// Room number.
func (o LocationAddressCivicOutput) Room() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.Room }).(pulumi.StringPtrOutput)
}

// Script used to present the address information.
func (o LocationAddressCivicOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// Seat number.
func (o LocationAddressCivicOutput) Seat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.Seat }).(pulumi.StringPtrOutput)
}

// Street.
func (o LocationAddressCivicOutput) Street() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.Street }).(pulumi.StringPtrOutput)
}

// Street name post modifier.
func (o LocationAddressCivicOutput) StreetNamePostMod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.StreetNamePostMod }).(pulumi.StringPtrOutput)
}

// Street name pre modifier.
func (o LocationAddressCivicOutput) StreetNamePreMod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.StreetNamePreMod }).(pulumi.StringPtrOutput)
}

// Street suffix.
func (o LocationAddressCivicOutput) StreetSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.StreetSuffix }).(pulumi.StringPtrOutput)
}

// Sub branch road name.
func (o LocationAddressCivicOutput) SubBranchRoad() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.SubBranchRoad }).(pulumi.StringPtrOutput)
}

// Trailing street suffix.
func (o LocationAddressCivicOutput) TrailingStrSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.TrailingStrSuffix }).(pulumi.StringPtrOutput)
}

// Unit (apartment, suite).
func (o LocationAddressCivicOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// Postal/zip code.
func (o LocationAddressCivicOutput) Zip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationAddressCivic) *string { return v.Zip }).(pulumi.StringPtrOutput)
}

type LocationAddressCivicPtrOutput struct{ *pulumi.OutputState }

func (LocationAddressCivicPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationAddressCivic)(nil)).Elem()
}

func (o LocationAddressCivicPtrOutput) ToLocationAddressCivicPtrOutput() LocationAddressCivicPtrOutput {
	return o
}

func (o LocationAddressCivicPtrOutput) ToLocationAddressCivicPtrOutputWithContext(ctx context.Context) LocationAddressCivicPtrOutput {
	return o
}

func (o LocationAddressCivicPtrOutput) Elem() LocationAddressCivicOutput {
	return o.ApplyT(func(v *LocationAddressCivic) LocationAddressCivic {
		if v != nil {
			return *v
		}
		var ret LocationAddressCivic
		return ret
	}).(LocationAddressCivicOutput)
}

// Location additional details.
func (o LocationAddressCivicPtrOutput) Additional() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.Additional
	}).(pulumi.StringPtrOutput)
}

// Location additional code details.
func (o LocationAddressCivicPtrOutput) AdditionalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.AdditionalCode
	}).(pulumi.StringPtrOutput)
}

// Location block details.
func (o LocationAddressCivicPtrOutput) Block() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.Block
	}).(pulumi.StringPtrOutput)
}

// Location branch road details.
func (o LocationAddressCivicPtrOutput) BranchRoad() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.BranchRoad
	}).(pulumi.StringPtrOutput)
}

// Location building details.
func (o LocationAddressCivicPtrOutput) Building() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.Building
	}).(pulumi.StringPtrOutput)
}

// Location city details.
func (o LocationAddressCivicPtrOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.City
	}).(pulumi.StringPtrOutput)
}

// Location city division details.
func (o LocationAddressCivicPtrOutput) CityDivision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.CityDivision
	}).(pulumi.StringPtrOutput)
}

// The two-letter ISO 3166 country code in capital ASCII letters eg. US, CA, DK, DE.
func (o LocationAddressCivicPtrOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.Country
	}).(pulumi.StringPtrOutput)
}

// National subdivisions (state, canton, region, province, or prefecture).
func (o LocationAddressCivicPtrOutput) CountrySubdivision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.CountrySubdivision
	}).(pulumi.StringPtrOutput)
}

// County, parish, gun (JP), or district (IN).
func (o LocationAddressCivicPtrOutput) County() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.County
	}).(pulumi.StringPtrOutput)
}

// Leading street direction.
func (o LocationAddressCivicPtrOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.Direction
	}).(pulumi.StringPtrOutput)
}

// Floor.
func (o LocationAddressCivicPtrOutput) Floor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.Floor
	}).(pulumi.StringPtrOutput)
}

// Landmark or vanity address.
func (o LocationAddressCivicPtrOutput) Landmark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.Landmark
	}).(pulumi.StringPtrOutput)
}

// Language.
func (o LocationAddressCivicPtrOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.Language
	}).(pulumi.StringPtrOutput)
}

// Name (residence and office occupant).
func (o LocationAddressCivicPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// House number.
func (o LocationAddressCivicPtrOutput) Number() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.StringPtrOutput)
}

// House number suffix.
func (o LocationAddressCivicPtrOutput) NumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.NumberSuffix
	}).(pulumi.StringPtrOutput)
}

// Parent key name.
func (o LocationAddressCivicPtrOutput) ParentKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.ParentKey
	}).(pulumi.StringPtrOutput)
}

// Placetype.
func (o LocationAddressCivicPtrOutput) PlaceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.PlaceType
	}).(pulumi.StringPtrOutput)
}

// Post office box (P.O. box).
func (o LocationAddressCivicPtrOutput) PostOfficeBox() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.PostOfficeBox
	}).(pulumi.StringPtrOutput)
}

// Postal community name.
func (o LocationAddressCivicPtrOutput) PostalCommunity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.PostalCommunity
	}).(pulumi.StringPtrOutput)
}

// Primary road name.
func (o LocationAddressCivicPtrOutput) PrimaryRoad() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryRoad
	}).(pulumi.StringPtrOutput)
}

// Road section.
func (o LocationAddressCivicPtrOutput) RoadSection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.RoadSection
	}).(pulumi.StringPtrOutput)
}

// Room number.
func (o LocationAddressCivicPtrOutput) Room() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.Room
	}).(pulumi.StringPtrOutput)
}

// Script used to present the address information.
func (o LocationAddressCivicPtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.Script
	}).(pulumi.StringPtrOutput)
}

// Seat number.
func (o LocationAddressCivicPtrOutput) Seat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.Seat
	}).(pulumi.StringPtrOutput)
}

// Street.
func (o LocationAddressCivicPtrOutput) Street() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.Street
	}).(pulumi.StringPtrOutput)
}

// Street name post modifier.
func (o LocationAddressCivicPtrOutput) StreetNamePostMod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.StreetNamePostMod
	}).(pulumi.StringPtrOutput)
}

// Street name pre modifier.
func (o LocationAddressCivicPtrOutput) StreetNamePreMod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.StreetNamePreMod
	}).(pulumi.StringPtrOutput)
}

// Street suffix.
func (o LocationAddressCivicPtrOutput) StreetSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.StreetSuffix
	}).(pulumi.StringPtrOutput)
}

// Sub branch road name.
func (o LocationAddressCivicPtrOutput) SubBranchRoad() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.SubBranchRoad
	}).(pulumi.StringPtrOutput)
}

// Trailing street suffix.
func (o LocationAddressCivicPtrOutput) TrailingStrSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.TrailingStrSuffix
	}).(pulumi.StringPtrOutput)
}

// Unit (apartment, suite).
func (o LocationAddressCivicPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// Postal/zip code.
func (o LocationAddressCivicPtrOutput) Zip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAddressCivic) *string {
		if v == nil {
			return nil
		}
		return v.Zip
	}).(pulumi.StringPtrOutput)
}

type LocationCoordinates struct {
	// +/- Floating point no. eg. 117.47.
	Altitude *string `pulumi:"altitude"`
	// m ( meters), f ( floors). Valid values: `m`, `f`.
	AltitudeUnit *string `pulumi:"altitudeUnit"`
	// WGS84, NAD83, NAD83/MLLW. Valid values: `WGS84`, `NAD83`, `NAD83/MLLW`.
	Datum *string `pulumi:"datum"`
	// Floating point start with ( +/- )  or end with ( N or S ) eg. +/-16.67 or 16.67N.
	Latitude *string `pulumi:"latitude"`
	// Floating point start with ( +/- )  or end with ( E or W ) eg. +/-26.789 or 26.789E.
	Longitude *string `pulumi:"longitude"`
	// Parent key name.
	ParentKey *string `pulumi:"parentKey"`
}

// LocationCoordinatesInput is an input type that accepts LocationCoordinatesArgs and LocationCoordinatesOutput values.
// You can construct a concrete instance of `LocationCoordinatesInput` via:
//
//	LocationCoordinatesArgs{...}
type LocationCoordinatesInput interface {
	pulumi.Input

	ToLocationCoordinatesOutput() LocationCoordinatesOutput
	ToLocationCoordinatesOutputWithContext(context.Context) LocationCoordinatesOutput
}

type LocationCoordinatesArgs struct {
	// +/- Floating point no. eg. 117.47.
	Altitude pulumi.StringPtrInput `pulumi:"altitude"`
	// m ( meters), f ( floors). Valid values: `m`, `f`.
	AltitudeUnit pulumi.StringPtrInput `pulumi:"altitudeUnit"`
	// WGS84, NAD83, NAD83/MLLW. Valid values: `WGS84`, `NAD83`, `NAD83/MLLW`.
	Datum pulumi.StringPtrInput `pulumi:"datum"`
	// Floating point start with ( +/- )  or end with ( N or S ) eg. +/-16.67 or 16.67N.
	Latitude pulumi.StringPtrInput `pulumi:"latitude"`
	// Floating point start with ( +/- )  or end with ( E or W ) eg. +/-26.789 or 26.789E.
	Longitude pulumi.StringPtrInput `pulumi:"longitude"`
	// Parent key name.
	ParentKey pulumi.StringPtrInput `pulumi:"parentKey"`
}

func (LocationCoordinatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationCoordinates)(nil)).Elem()
}

func (i LocationCoordinatesArgs) ToLocationCoordinatesOutput() LocationCoordinatesOutput {
	return i.ToLocationCoordinatesOutputWithContext(context.Background())
}

func (i LocationCoordinatesArgs) ToLocationCoordinatesOutputWithContext(ctx context.Context) LocationCoordinatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationCoordinatesOutput)
}

func (i LocationCoordinatesArgs) ToLocationCoordinatesPtrOutput() LocationCoordinatesPtrOutput {
	return i.ToLocationCoordinatesPtrOutputWithContext(context.Background())
}

func (i LocationCoordinatesArgs) ToLocationCoordinatesPtrOutputWithContext(ctx context.Context) LocationCoordinatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationCoordinatesOutput).ToLocationCoordinatesPtrOutputWithContext(ctx)
}

// LocationCoordinatesPtrInput is an input type that accepts LocationCoordinatesArgs, LocationCoordinatesPtr and LocationCoordinatesPtrOutput values.
// You can construct a concrete instance of `LocationCoordinatesPtrInput` via:
//
//	        LocationCoordinatesArgs{...}
//
//	or:
//
//	        nil
type LocationCoordinatesPtrInput interface {
	pulumi.Input

	ToLocationCoordinatesPtrOutput() LocationCoordinatesPtrOutput
	ToLocationCoordinatesPtrOutputWithContext(context.Context) LocationCoordinatesPtrOutput
}

type locationCoordinatesPtrType LocationCoordinatesArgs

func LocationCoordinatesPtr(v *LocationCoordinatesArgs) LocationCoordinatesPtrInput {
	return (*locationCoordinatesPtrType)(v)
}

func (*locationCoordinatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationCoordinates)(nil)).Elem()
}

func (i *locationCoordinatesPtrType) ToLocationCoordinatesPtrOutput() LocationCoordinatesPtrOutput {
	return i.ToLocationCoordinatesPtrOutputWithContext(context.Background())
}

func (i *locationCoordinatesPtrType) ToLocationCoordinatesPtrOutputWithContext(ctx context.Context) LocationCoordinatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationCoordinatesPtrOutput)
}

type LocationCoordinatesOutput struct{ *pulumi.OutputState }

func (LocationCoordinatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationCoordinates)(nil)).Elem()
}

func (o LocationCoordinatesOutput) ToLocationCoordinatesOutput() LocationCoordinatesOutput {
	return o
}

func (o LocationCoordinatesOutput) ToLocationCoordinatesOutputWithContext(ctx context.Context) LocationCoordinatesOutput {
	return o
}

func (o LocationCoordinatesOutput) ToLocationCoordinatesPtrOutput() LocationCoordinatesPtrOutput {
	return o.ToLocationCoordinatesPtrOutputWithContext(context.Background())
}

func (o LocationCoordinatesOutput) ToLocationCoordinatesPtrOutputWithContext(ctx context.Context) LocationCoordinatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationCoordinates) *LocationCoordinates {
		return &v
	}).(LocationCoordinatesPtrOutput)
}

// +/- Floating point no. eg. 117.47.
func (o LocationCoordinatesOutput) Altitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationCoordinates) *string { return v.Altitude }).(pulumi.StringPtrOutput)
}

// m ( meters), f ( floors). Valid values: `m`, `f`.
func (o LocationCoordinatesOutput) AltitudeUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationCoordinates) *string { return v.AltitudeUnit }).(pulumi.StringPtrOutput)
}

// WGS84, NAD83, NAD83/MLLW. Valid values: `WGS84`, `NAD83`, `NAD83/MLLW`.
func (o LocationCoordinatesOutput) Datum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationCoordinates) *string { return v.Datum }).(pulumi.StringPtrOutput)
}

// Floating point start with ( +/- )  or end with ( N or S ) eg. +/-16.67 or 16.67N.
func (o LocationCoordinatesOutput) Latitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationCoordinates) *string { return v.Latitude }).(pulumi.StringPtrOutput)
}

// Floating point start with ( +/- )  or end with ( E or W ) eg. +/-26.789 or 26.789E.
func (o LocationCoordinatesOutput) Longitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationCoordinates) *string { return v.Longitude }).(pulumi.StringPtrOutput)
}

// Parent key name.
func (o LocationCoordinatesOutput) ParentKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationCoordinates) *string { return v.ParentKey }).(pulumi.StringPtrOutput)
}

type LocationCoordinatesPtrOutput struct{ *pulumi.OutputState }

func (LocationCoordinatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationCoordinates)(nil)).Elem()
}

func (o LocationCoordinatesPtrOutput) ToLocationCoordinatesPtrOutput() LocationCoordinatesPtrOutput {
	return o
}

func (o LocationCoordinatesPtrOutput) ToLocationCoordinatesPtrOutputWithContext(ctx context.Context) LocationCoordinatesPtrOutput {
	return o
}

func (o LocationCoordinatesPtrOutput) Elem() LocationCoordinatesOutput {
	return o.ApplyT(func(v *LocationCoordinates) LocationCoordinates {
		if v != nil {
			return *v
		}
		var ret LocationCoordinates
		return ret
	}).(LocationCoordinatesOutput)
}

// +/- Floating point no. eg. 117.47.
func (o LocationCoordinatesPtrOutput) Altitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationCoordinates) *string {
		if v == nil {
			return nil
		}
		return v.Altitude
	}).(pulumi.StringPtrOutput)
}

// m ( meters), f ( floors). Valid values: `m`, `f`.
func (o LocationCoordinatesPtrOutput) AltitudeUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationCoordinates) *string {
		if v == nil {
			return nil
		}
		return v.AltitudeUnit
	}).(pulumi.StringPtrOutput)
}

// WGS84, NAD83, NAD83/MLLW. Valid values: `WGS84`, `NAD83`, `NAD83/MLLW`.
func (o LocationCoordinatesPtrOutput) Datum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationCoordinates) *string {
		if v == nil {
			return nil
		}
		return v.Datum
	}).(pulumi.StringPtrOutput)
}

// Floating point start with ( +/- )  or end with ( N or S ) eg. +/-16.67 or 16.67N.
func (o LocationCoordinatesPtrOutput) Latitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationCoordinates) *string {
		if v == nil {
			return nil
		}
		return v.Latitude
	}).(pulumi.StringPtrOutput)
}

// Floating point start with ( +/- )  or end with ( E or W ) eg. +/-26.789 or 26.789E.
func (o LocationCoordinatesPtrOutput) Longitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationCoordinates) *string {
		if v == nil {
			return nil
		}
		return v.Longitude
	}).(pulumi.StringPtrOutput)
}

// Parent key name.
func (o LocationCoordinatesPtrOutput) ParentKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationCoordinates) *string {
		if v == nil {
			return nil
		}
		return v.ParentKey
	}).(pulumi.StringPtrOutput)
}

type LocationElinNumber struct {
	// Configure ELIN callback number.
	ElinNum *string `pulumi:"elinNum"`
	// Parent key name.
	ParentKey *string `pulumi:"parentKey"`
}

// LocationElinNumberInput is an input type that accepts LocationElinNumberArgs and LocationElinNumberOutput values.
// You can construct a concrete instance of `LocationElinNumberInput` via:
//
//	LocationElinNumberArgs{...}
type LocationElinNumberInput interface {
	pulumi.Input

	ToLocationElinNumberOutput() LocationElinNumberOutput
	ToLocationElinNumberOutputWithContext(context.Context) LocationElinNumberOutput
}

type LocationElinNumberArgs struct {
	// Configure ELIN callback number.
	ElinNum pulumi.StringPtrInput `pulumi:"elinNum"`
	// Parent key name.
	ParentKey pulumi.StringPtrInput `pulumi:"parentKey"`
}

func (LocationElinNumberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationElinNumber)(nil)).Elem()
}

func (i LocationElinNumberArgs) ToLocationElinNumberOutput() LocationElinNumberOutput {
	return i.ToLocationElinNumberOutputWithContext(context.Background())
}

func (i LocationElinNumberArgs) ToLocationElinNumberOutputWithContext(ctx context.Context) LocationElinNumberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationElinNumberOutput)
}

func (i LocationElinNumberArgs) ToLocationElinNumberPtrOutput() LocationElinNumberPtrOutput {
	return i.ToLocationElinNumberPtrOutputWithContext(context.Background())
}

func (i LocationElinNumberArgs) ToLocationElinNumberPtrOutputWithContext(ctx context.Context) LocationElinNumberPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationElinNumberOutput).ToLocationElinNumberPtrOutputWithContext(ctx)
}

// LocationElinNumberPtrInput is an input type that accepts LocationElinNumberArgs, LocationElinNumberPtr and LocationElinNumberPtrOutput values.
// You can construct a concrete instance of `LocationElinNumberPtrInput` via:
//
//	        LocationElinNumberArgs{...}
//
//	or:
//
//	        nil
type LocationElinNumberPtrInput interface {
	pulumi.Input

	ToLocationElinNumberPtrOutput() LocationElinNumberPtrOutput
	ToLocationElinNumberPtrOutputWithContext(context.Context) LocationElinNumberPtrOutput
}

type locationElinNumberPtrType LocationElinNumberArgs

func LocationElinNumberPtr(v *LocationElinNumberArgs) LocationElinNumberPtrInput {
	return (*locationElinNumberPtrType)(v)
}

func (*locationElinNumberPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationElinNumber)(nil)).Elem()
}

func (i *locationElinNumberPtrType) ToLocationElinNumberPtrOutput() LocationElinNumberPtrOutput {
	return i.ToLocationElinNumberPtrOutputWithContext(context.Background())
}

func (i *locationElinNumberPtrType) ToLocationElinNumberPtrOutputWithContext(ctx context.Context) LocationElinNumberPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationElinNumberPtrOutput)
}

type LocationElinNumberOutput struct{ *pulumi.OutputState }

func (LocationElinNumberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationElinNumber)(nil)).Elem()
}

func (o LocationElinNumberOutput) ToLocationElinNumberOutput() LocationElinNumberOutput {
	return o
}

func (o LocationElinNumberOutput) ToLocationElinNumberOutputWithContext(ctx context.Context) LocationElinNumberOutput {
	return o
}

func (o LocationElinNumberOutput) ToLocationElinNumberPtrOutput() LocationElinNumberPtrOutput {
	return o.ToLocationElinNumberPtrOutputWithContext(context.Background())
}

func (o LocationElinNumberOutput) ToLocationElinNumberPtrOutputWithContext(ctx context.Context) LocationElinNumberPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationElinNumber) *LocationElinNumber {
		return &v
	}).(LocationElinNumberPtrOutput)
}

// Configure ELIN callback number.
func (o LocationElinNumberOutput) ElinNum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationElinNumber) *string { return v.ElinNum }).(pulumi.StringPtrOutput)
}

// Parent key name.
func (o LocationElinNumberOutput) ParentKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationElinNumber) *string { return v.ParentKey }).(pulumi.StringPtrOutput)
}

type LocationElinNumberPtrOutput struct{ *pulumi.OutputState }

func (LocationElinNumberPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationElinNumber)(nil)).Elem()
}

func (o LocationElinNumberPtrOutput) ToLocationElinNumberPtrOutput() LocationElinNumberPtrOutput {
	return o
}

func (o LocationElinNumberPtrOutput) ToLocationElinNumberPtrOutputWithContext(ctx context.Context) LocationElinNumberPtrOutput {
	return o
}

func (o LocationElinNumberPtrOutput) Elem() LocationElinNumberOutput {
	return o.ApplyT(func(v *LocationElinNumber) LocationElinNumber {
		if v != nil {
			return *v
		}
		var ret LocationElinNumber
		return ret
	}).(LocationElinNumberOutput)
}

// Configure ELIN callback number.
func (o LocationElinNumberPtrOutput) ElinNum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationElinNumber) *string {
		if v == nil {
			return nil
		}
		return v.ElinNum
	}).(pulumi.StringPtrOutput)
}

// Parent key name.
func (o LocationElinNumberPtrOutput) ParentKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationElinNumber) *string {
		if v == nil {
			return nil
		}
		return v.ParentKey
	}).(pulumi.StringPtrOutput)
}

type ManagedswitchCustomCommand struct {
	// List of FortiSwitch commands.
	CommandEntry *string `pulumi:"commandEntry"`
	// Names of commands to be pushed to this FortiSwitch device, as configured under config switch-controller custom-command.
	CommandName *string `pulumi:"commandName"`
}

// ManagedswitchCustomCommandInput is an input type that accepts ManagedswitchCustomCommandArgs and ManagedswitchCustomCommandOutput values.
// You can construct a concrete instance of `ManagedswitchCustomCommandInput` via:
//
//	ManagedswitchCustomCommandArgs{...}
type ManagedswitchCustomCommandInput interface {
	pulumi.Input

	ToManagedswitchCustomCommandOutput() ManagedswitchCustomCommandOutput
	ToManagedswitchCustomCommandOutputWithContext(context.Context) ManagedswitchCustomCommandOutput
}

type ManagedswitchCustomCommandArgs struct {
	// List of FortiSwitch commands.
	CommandEntry pulumi.StringPtrInput `pulumi:"commandEntry"`
	// Names of commands to be pushed to this FortiSwitch device, as configured under config switch-controller custom-command.
	CommandName pulumi.StringPtrInput `pulumi:"commandName"`
}

func (ManagedswitchCustomCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchCustomCommand)(nil)).Elem()
}

func (i ManagedswitchCustomCommandArgs) ToManagedswitchCustomCommandOutput() ManagedswitchCustomCommandOutput {
	return i.ToManagedswitchCustomCommandOutputWithContext(context.Background())
}

func (i ManagedswitchCustomCommandArgs) ToManagedswitchCustomCommandOutputWithContext(ctx context.Context) ManagedswitchCustomCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchCustomCommandOutput)
}

// ManagedswitchCustomCommandArrayInput is an input type that accepts ManagedswitchCustomCommandArray and ManagedswitchCustomCommandArrayOutput values.
// You can construct a concrete instance of `ManagedswitchCustomCommandArrayInput` via:
//
//	ManagedswitchCustomCommandArray{ ManagedswitchCustomCommandArgs{...} }
type ManagedswitchCustomCommandArrayInput interface {
	pulumi.Input

	ToManagedswitchCustomCommandArrayOutput() ManagedswitchCustomCommandArrayOutput
	ToManagedswitchCustomCommandArrayOutputWithContext(context.Context) ManagedswitchCustomCommandArrayOutput
}

type ManagedswitchCustomCommandArray []ManagedswitchCustomCommandInput

func (ManagedswitchCustomCommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchCustomCommand)(nil)).Elem()
}

func (i ManagedswitchCustomCommandArray) ToManagedswitchCustomCommandArrayOutput() ManagedswitchCustomCommandArrayOutput {
	return i.ToManagedswitchCustomCommandArrayOutputWithContext(context.Background())
}

func (i ManagedswitchCustomCommandArray) ToManagedswitchCustomCommandArrayOutputWithContext(ctx context.Context) ManagedswitchCustomCommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchCustomCommandArrayOutput)
}

type ManagedswitchCustomCommandOutput struct{ *pulumi.OutputState }

func (ManagedswitchCustomCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchCustomCommand)(nil)).Elem()
}

func (o ManagedswitchCustomCommandOutput) ToManagedswitchCustomCommandOutput() ManagedswitchCustomCommandOutput {
	return o
}

func (o ManagedswitchCustomCommandOutput) ToManagedswitchCustomCommandOutputWithContext(ctx context.Context) ManagedswitchCustomCommandOutput {
	return o
}

// List of FortiSwitch commands.
func (o ManagedswitchCustomCommandOutput) CommandEntry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchCustomCommand) *string { return v.CommandEntry }).(pulumi.StringPtrOutput)
}

// Names of commands to be pushed to this FortiSwitch device, as configured under config switch-controller custom-command.
func (o ManagedswitchCustomCommandOutput) CommandName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchCustomCommand) *string { return v.CommandName }).(pulumi.StringPtrOutput)
}

type ManagedswitchCustomCommandArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchCustomCommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchCustomCommand)(nil)).Elem()
}

func (o ManagedswitchCustomCommandArrayOutput) ToManagedswitchCustomCommandArrayOutput() ManagedswitchCustomCommandArrayOutput {
	return o
}

func (o ManagedswitchCustomCommandArrayOutput) ToManagedswitchCustomCommandArrayOutputWithContext(ctx context.Context) ManagedswitchCustomCommandArrayOutput {
	return o
}

func (o ManagedswitchCustomCommandArrayOutput) Index(i pulumi.IntInput) ManagedswitchCustomCommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchCustomCommand {
		return vs[0].([]ManagedswitchCustomCommand)[vs[1].(int)]
	}).(ManagedswitchCustomCommandOutput)
}

type ManagedswitchDhcpSnoopingStaticClient struct {
	// Client static IP address.
	Ip *string `pulumi:"ip"`
	// Client MAC address.
	Mac *string `pulumi:"mac"`
	// Client name.
	Name *string `pulumi:"name"`
	// Interface name.
	Port *string `pulumi:"port"`
	// VLAN name.
	Vlan *string `pulumi:"vlan"`
}

// ManagedswitchDhcpSnoopingStaticClientInput is an input type that accepts ManagedswitchDhcpSnoopingStaticClientArgs and ManagedswitchDhcpSnoopingStaticClientOutput values.
// You can construct a concrete instance of `ManagedswitchDhcpSnoopingStaticClientInput` via:
//
//	ManagedswitchDhcpSnoopingStaticClientArgs{...}
type ManagedswitchDhcpSnoopingStaticClientInput interface {
	pulumi.Input

	ToManagedswitchDhcpSnoopingStaticClientOutput() ManagedswitchDhcpSnoopingStaticClientOutput
	ToManagedswitchDhcpSnoopingStaticClientOutputWithContext(context.Context) ManagedswitchDhcpSnoopingStaticClientOutput
}

type ManagedswitchDhcpSnoopingStaticClientArgs struct {
	// Client static IP address.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Client MAC address.
	Mac pulumi.StringPtrInput `pulumi:"mac"`
	// Client name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Interface name.
	Port pulumi.StringPtrInput `pulumi:"port"`
	// VLAN name.
	Vlan pulumi.StringPtrInput `pulumi:"vlan"`
}

func (ManagedswitchDhcpSnoopingStaticClientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchDhcpSnoopingStaticClient)(nil)).Elem()
}

func (i ManagedswitchDhcpSnoopingStaticClientArgs) ToManagedswitchDhcpSnoopingStaticClientOutput() ManagedswitchDhcpSnoopingStaticClientOutput {
	return i.ToManagedswitchDhcpSnoopingStaticClientOutputWithContext(context.Background())
}

func (i ManagedswitchDhcpSnoopingStaticClientArgs) ToManagedswitchDhcpSnoopingStaticClientOutputWithContext(ctx context.Context) ManagedswitchDhcpSnoopingStaticClientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchDhcpSnoopingStaticClientOutput)
}

// ManagedswitchDhcpSnoopingStaticClientArrayInput is an input type that accepts ManagedswitchDhcpSnoopingStaticClientArray and ManagedswitchDhcpSnoopingStaticClientArrayOutput values.
// You can construct a concrete instance of `ManagedswitchDhcpSnoopingStaticClientArrayInput` via:
//
//	ManagedswitchDhcpSnoopingStaticClientArray{ ManagedswitchDhcpSnoopingStaticClientArgs{...} }
type ManagedswitchDhcpSnoopingStaticClientArrayInput interface {
	pulumi.Input

	ToManagedswitchDhcpSnoopingStaticClientArrayOutput() ManagedswitchDhcpSnoopingStaticClientArrayOutput
	ToManagedswitchDhcpSnoopingStaticClientArrayOutputWithContext(context.Context) ManagedswitchDhcpSnoopingStaticClientArrayOutput
}

type ManagedswitchDhcpSnoopingStaticClientArray []ManagedswitchDhcpSnoopingStaticClientInput

func (ManagedswitchDhcpSnoopingStaticClientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchDhcpSnoopingStaticClient)(nil)).Elem()
}

func (i ManagedswitchDhcpSnoopingStaticClientArray) ToManagedswitchDhcpSnoopingStaticClientArrayOutput() ManagedswitchDhcpSnoopingStaticClientArrayOutput {
	return i.ToManagedswitchDhcpSnoopingStaticClientArrayOutputWithContext(context.Background())
}

func (i ManagedswitchDhcpSnoopingStaticClientArray) ToManagedswitchDhcpSnoopingStaticClientArrayOutputWithContext(ctx context.Context) ManagedswitchDhcpSnoopingStaticClientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchDhcpSnoopingStaticClientArrayOutput)
}

type ManagedswitchDhcpSnoopingStaticClientOutput struct{ *pulumi.OutputState }

func (ManagedswitchDhcpSnoopingStaticClientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchDhcpSnoopingStaticClient)(nil)).Elem()
}

func (o ManagedswitchDhcpSnoopingStaticClientOutput) ToManagedswitchDhcpSnoopingStaticClientOutput() ManagedswitchDhcpSnoopingStaticClientOutput {
	return o
}

func (o ManagedswitchDhcpSnoopingStaticClientOutput) ToManagedswitchDhcpSnoopingStaticClientOutputWithContext(ctx context.Context) ManagedswitchDhcpSnoopingStaticClientOutput {
	return o
}

// Client static IP address.
func (o ManagedswitchDhcpSnoopingStaticClientOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchDhcpSnoopingStaticClient) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Client MAC address.
func (o ManagedswitchDhcpSnoopingStaticClientOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchDhcpSnoopingStaticClient) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

// Client name.
func (o ManagedswitchDhcpSnoopingStaticClientOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchDhcpSnoopingStaticClient) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Interface name.
func (o ManagedswitchDhcpSnoopingStaticClientOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchDhcpSnoopingStaticClient) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// VLAN name.
func (o ManagedswitchDhcpSnoopingStaticClientOutput) Vlan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchDhcpSnoopingStaticClient) *string { return v.Vlan }).(pulumi.StringPtrOutput)
}

type ManagedswitchDhcpSnoopingStaticClientArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchDhcpSnoopingStaticClientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchDhcpSnoopingStaticClient)(nil)).Elem()
}

func (o ManagedswitchDhcpSnoopingStaticClientArrayOutput) ToManagedswitchDhcpSnoopingStaticClientArrayOutput() ManagedswitchDhcpSnoopingStaticClientArrayOutput {
	return o
}

func (o ManagedswitchDhcpSnoopingStaticClientArrayOutput) ToManagedswitchDhcpSnoopingStaticClientArrayOutputWithContext(ctx context.Context) ManagedswitchDhcpSnoopingStaticClientArrayOutput {
	return o
}

func (o ManagedswitchDhcpSnoopingStaticClientArrayOutput) Index(i pulumi.IntInput) ManagedswitchDhcpSnoopingStaticClientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchDhcpSnoopingStaticClient {
		return vs[0].([]ManagedswitchDhcpSnoopingStaticClient)[vs[1].(int)]
	}).(ManagedswitchDhcpSnoopingStaticClientOutput)
}

type ManagedswitchIgmpSnooping struct {
	// Maximum time to retain a multicast snooping entry for which no packets have been seen (15 - 3600 sec, default = 300).
	AgingTime *int `pulumi:"agingTime"`
	// Enable/disable unknown multicast flooding. Valid values: `enable`, `disable`.
	FloodUnknownMulticast *string `pulumi:"floodUnknownMulticast"`
	// Enable/disable overriding the global IGMP snooping configuration. Valid values: `enable`, `disable`.
	LocalOverride *string `pulumi:"localOverride"`
	// Configure IGMP snooping VLAN. The structure of `vlans` block is documented below.
	Vlans []ManagedswitchIgmpSnoopingVlan `pulumi:"vlans"`
}

// ManagedswitchIgmpSnoopingInput is an input type that accepts ManagedswitchIgmpSnoopingArgs and ManagedswitchIgmpSnoopingOutput values.
// You can construct a concrete instance of `ManagedswitchIgmpSnoopingInput` via:
//
//	ManagedswitchIgmpSnoopingArgs{...}
type ManagedswitchIgmpSnoopingInput interface {
	pulumi.Input

	ToManagedswitchIgmpSnoopingOutput() ManagedswitchIgmpSnoopingOutput
	ToManagedswitchIgmpSnoopingOutputWithContext(context.Context) ManagedswitchIgmpSnoopingOutput
}

type ManagedswitchIgmpSnoopingArgs struct {
	// Maximum time to retain a multicast snooping entry for which no packets have been seen (15 - 3600 sec, default = 300).
	AgingTime pulumi.IntPtrInput `pulumi:"agingTime"`
	// Enable/disable unknown multicast flooding. Valid values: `enable`, `disable`.
	FloodUnknownMulticast pulumi.StringPtrInput `pulumi:"floodUnknownMulticast"`
	// Enable/disable overriding the global IGMP snooping configuration. Valid values: `enable`, `disable`.
	LocalOverride pulumi.StringPtrInput `pulumi:"localOverride"`
	// Configure IGMP snooping VLAN. The structure of `vlans` block is documented below.
	Vlans ManagedswitchIgmpSnoopingVlanArrayInput `pulumi:"vlans"`
}

func (ManagedswitchIgmpSnoopingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchIgmpSnooping)(nil)).Elem()
}

func (i ManagedswitchIgmpSnoopingArgs) ToManagedswitchIgmpSnoopingOutput() ManagedswitchIgmpSnoopingOutput {
	return i.ToManagedswitchIgmpSnoopingOutputWithContext(context.Background())
}

func (i ManagedswitchIgmpSnoopingArgs) ToManagedswitchIgmpSnoopingOutputWithContext(ctx context.Context) ManagedswitchIgmpSnoopingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchIgmpSnoopingOutput)
}

func (i ManagedswitchIgmpSnoopingArgs) ToManagedswitchIgmpSnoopingPtrOutput() ManagedswitchIgmpSnoopingPtrOutput {
	return i.ToManagedswitchIgmpSnoopingPtrOutputWithContext(context.Background())
}

func (i ManagedswitchIgmpSnoopingArgs) ToManagedswitchIgmpSnoopingPtrOutputWithContext(ctx context.Context) ManagedswitchIgmpSnoopingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchIgmpSnoopingOutput).ToManagedswitchIgmpSnoopingPtrOutputWithContext(ctx)
}

// ManagedswitchIgmpSnoopingPtrInput is an input type that accepts ManagedswitchIgmpSnoopingArgs, ManagedswitchIgmpSnoopingPtr and ManagedswitchIgmpSnoopingPtrOutput values.
// You can construct a concrete instance of `ManagedswitchIgmpSnoopingPtrInput` via:
//
//	        ManagedswitchIgmpSnoopingArgs{...}
//
//	or:
//
//	        nil
type ManagedswitchIgmpSnoopingPtrInput interface {
	pulumi.Input

	ToManagedswitchIgmpSnoopingPtrOutput() ManagedswitchIgmpSnoopingPtrOutput
	ToManagedswitchIgmpSnoopingPtrOutputWithContext(context.Context) ManagedswitchIgmpSnoopingPtrOutput
}

type managedswitchIgmpSnoopingPtrType ManagedswitchIgmpSnoopingArgs

func ManagedswitchIgmpSnoopingPtr(v *ManagedswitchIgmpSnoopingArgs) ManagedswitchIgmpSnoopingPtrInput {
	return (*managedswitchIgmpSnoopingPtrType)(v)
}

func (*managedswitchIgmpSnoopingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedswitchIgmpSnooping)(nil)).Elem()
}

func (i *managedswitchIgmpSnoopingPtrType) ToManagedswitchIgmpSnoopingPtrOutput() ManagedswitchIgmpSnoopingPtrOutput {
	return i.ToManagedswitchIgmpSnoopingPtrOutputWithContext(context.Background())
}

func (i *managedswitchIgmpSnoopingPtrType) ToManagedswitchIgmpSnoopingPtrOutputWithContext(ctx context.Context) ManagedswitchIgmpSnoopingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchIgmpSnoopingPtrOutput)
}

type ManagedswitchIgmpSnoopingOutput struct{ *pulumi.OutputState }

func (ManagedswitchIgmpSnoopingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchIgmpSnooping)(nil)).Elem()
}

func (o ManagedswitchIgmpSnoopingOutput) ToManagedswitchIgmpSnoopingOutput() ManagedswitchIgmpSnoopingOutput {
	return o
}

func (o ManagedswitchIgmpSnoopingOutput) ToManagedswitchIgmpSnoopingOutputWithContext(ctx context.Context) ManagedswitchIgmpSnoopingOutput {
	return o
}

func (o ManagedswitchIgmpSnoopingOutput) ToManagedswitchIgmpSnoopingPtrOutput() ManagedswitchIgmpSnoopingPtrOutput {
	return o.ToManagedswitchIgmpSnoopingPtrOutputWithContext(context.Background())
}

func (o ManagedswitchIgmpSnoopingOutput) ToManagedswitchIgmpSnoopingPtrOutputWithContext(ctx context.Context) ManagedswitchIgmpSnoopingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedswitchIgmpSnooping) *ManagedswitchIgmpSnooping {
		return &v
	}).(ManagedswitchIgmpSnoopingPtrOutput)
}

// Maximum time to retain a multicast snooping entry for which no packets have been seen (15 - 3600 sec, default = 300).
func (o ManagedswitchIgmpSnoopingOutput) AgingTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchIgmpSnooping) *int { return v.AgingTime }).(pulumi.IntPtrOutput)
}

// Enable/disable unknown multicast flooding. Valid values: `enable`, `disable`.
func (o ManagedswitchIgmpSnoopingOutput) FloodUnknownMulticast() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchIgmpSnooping) *string { return v.FloodUnknownMulticast }).(pulumi.StringPtrOutput)
}

// Enable/disable overriding the global IGMP snooping configuration. Valid values: `enable`, `disable`.
func (o ManagedswitchIgmpSnoopingOutput) LocalOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchIgmpSnooping) *string { return v.LocalOverride }).(pulumi.StringPtrOutput)
}

// Configure IGMP snooping VLAN. The structure of `vlans` block is documented below.
func (o ManagedswitchIgmpSnoopingOutput) Vlans() ManagedswitchIgmpSnoopingVlanArrayOutput {
	return o.ApplyT(func(v ManagedswitchIgmpSnooping) []ManagedswitchIgmpSnoopingVlan { return v.Vlans }).(ManagedswitchIgmpSnoopingVlanArrayOutput)
}

type ManagedswitchIgmpSnoopingPtrOutput struct{ *pulumi.OutputState }

func (ManagedswitchIgmpSnoopingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedswitchIgmpSnooping)(nil)).Elem()
}

func (o ManagedswitchIgmpSnoopingPtrOutput) ToManagedswitchIgmpSnoopingPtrOutput() ManagedswitchIgmpSnoopingPtrOutput {
	return o
}

func (o ManagedswitchIgmpSnoopingPtrOutput) ToManagedswitchIgmpSnoopingPtrOutputWithContext(ctx context.Context) ManagedswitchIgmpSnoopingPtrOutput {
	return o
}

func (o ManagedswitchIgmpSnoopingPtrOutput) Elem() ManagedswitchIgmpSnoopingOutput {
	return o.ApplyT(func(v *ManagedswitchIgmpSnooping) ManagedswitchIgmpSnooping {
		if v != nil {
			return *v
		}
		var ret ManagedswitchIgmpSnooping
		return ret
	}).(ManagedswitchIgmpSnoopingOutput)
}

// Maximum time to retain a multicast snooping entry for which no packets have been seen (15 - 3600 sec, default = 300).
func (o ManagedswitchIgmpSnoopingPtrOutput) AgingTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedswitchIgmpSnooping) *int {
		if v == nil {
			return nil
		}
		return v.AgingTime
	}).(pulumi.IntPtrOutput)
}

// Enable/disable unknown multicast flooding. Valid values: `enable`, `disable`.
func (o ManagedswitchIgmpSnoopingPtrOutput) FloodUnknownMulticast() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchIgmpSnooping) *string {
		if v == nil {
			return nil
		}
		return v.FloodUnknownMulticast
	}).(pulumi.StringPtrOutput)
}

// Enable/disable overriding the global IGMP snooping configuration. Valid values: `enable`, `disable`.
func (o ManagedswitchIgmpSnoopingPtrOutput) LocalOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchIgmpSnooping) *string {
		if v == nil {
			return nil
		}
		return v.LocalOverride
	}).(pulumi.StringPtrOutput)
}

// Configure IGMP snooping VLAN. The structure of `vlans` block is documented below.
func (o ManagedswitchIgmpSnoopingPtrOutput) Vlans() ManagedswitchIgmpSnoopingVlanArrayOutput {
	return o.ApplyT(func(v *ManagedswitchIgmpSnooping) []ManagedswitchIgmpSnoopingVlan {
		if v == nil {
			return nil
		}
		return v.Vlans
	}).(ManagedswitchIgmpSnoopingVlanArrayOutput)
}

type ManagedswitchIgmpSnoopingVlan struct {
	// IGMP snooping proxy for the VLAN interface. Valid values: `disable`, `enable`, `global`.
	Proxy *string `pulumi:"proxy"`
	// Enable/disable IGMP snooping querier for the VLAN interface. Valid values: `disable`, `enable`.
	Querier *string `pulumi:"querier"`
	// IGMP snooping querier address.
	QuerierAddr *string `pulumi:"querierAddr"`
	// IGMP snooping querier version.
	//
	// The `n8021xSettings` block supports:
	Version *int `pulumi:"version"`
	// List of FortiSwitch VLANs.
	VlanName *string `pulumi:"vlanName"`
}

// ManagedswitchIgmpSnoopingVlanInput is an input type that accepts ManagedswitchIgmpSnoopingVlanArgs and ManagedswitchIgmpSnoopingVlanOutput values.
// You can construct a concrete instance of `ManagedswitchIgmpSnoopingVlanInput` via:
//
//	ManagedswitchIgmpSnoopingVlanArgs{...}
type ManagedswitchIgmpSnoopingVlanInput interface {
	pulumi.Input

	ToManagedswitchIgmpSnoopingVlanOutput() ManagedswitchIgmpSnoopingVlanOutput
	ToManagedswitchIgmpSnoopingVlanOutputWithContext(context.Context) ManagedswitchIgmpSnoopingVlanOutput
}

type ManagedswitchIgmpSnoopingVlanArgs struct {
	// IGMP snooping proxy for the VLAN interface. Valid values: `disable`, `enable`, `global`.
	Proxy pulumi.StringPtrInput `pulumi:"proxy"`
	// Enable/disable IGMP snooping querier for the VLAN interface. Valid values: `disable`, `enable`.
	Querier pulumi.StringPtrInput `pulumi:"querier"`
	// IGMP snooping querier address.
	QuerierAddr pulumi.StringPtrInput `pulumi:"querierAddr"`
	// IGMP snooping querier version.
	//
	// The `n8021xSettings` block supports:
	Version pulumi.IntPtrInput `pulumi:"version"`
	// List of FortiSwitch VLANs.
	VlanName pulumi.StringPtrInput `pulumi:"vlanName"`
}

func (ManagedswitchIgmpSnoopingVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchIgmpSnoopingVlan)(nil)).Elem()
}

func (i ManagedswitchIgmpSnoopingVlanArgs) ToManagedswitchIgmpSnoopingVlanOutput() ManagedswitchIgmpSnoopingVlanOutput {
	return i.ToManagedswitchIgmpSnoopingVlanOutputWithContext(context.Background())
}

func (i ManagedswitchIgmpSnoopingVlanArgs) ToManagedswitchIgmpSnoopingVlanOutputWithContext(ctx context.Context) ManagedswitchIgmpSnoopingVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchIgmpSnoopingVlanOutput)
}

// ManagedswitchIgmpSnoopingVlanArrayInput is an input type that accepts ManagedswitchIgmpSnoopingVlanArray and ManagedswitchIgmpSnoopingVlanArrayOutput values.
// You can construct a concrete instance of `ManagedswitchIgmpSnoopingVlanArrayInput` via:
//
//	ManagedswitchIgmpSnoopingVlanArray{ ManagedswitchIgmpSnoopingVlanArgs{...} }
type ManagedswitchIgmpSnoopingVlanArrayInput interface {
	pulumi.Input

	ToManagedswitchIgmpSnoopingVlanArrayOutput() ManagedswitchIgmpSnoopingVlanArrayOutput
	ToManagedswitchIgmpSnoopingVlanArrayOutputWithContext(context.Context) ManagedswitchIgmpSnoopingVlanArrayOutput
}

type ManagedswitchIgmpSnoopingVlanArray []ManagedswitchIgmpSnoopingVlanInput

func (ManagedswitchIgmpSnoopingVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchIgmpSnoopingVlan)(nil)).Elem()
}

func (i ManagedswitchIgmpSnoopingVlanArray) ToManagedswitchIgmpSnoopingVlanArrayOutput() ManagedswitchIgmpSnoopingVlanArrayOutput {
	return i.ToManagedswitchIgmpSnoopingVlanArrayOutputWithContext(context.Background())
}

func (i ManagedswitchIgmpSnoopingVlanArray) ToManagedswitchIgmpSnoopingVlanArrayOutputWithContext(ctx context.Context) ManagedswitchIgmpSnoopingVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchIgmpSnoopingVlanArrayOutput)
}

type ManagedswitchIgmpSnoopingVlanOutput struct{ *pulumi.OutputState }

func (ManagedswitchIgmpSnoopingVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchIgmpSnoopingVlan)(nil)).Elem()
}

func (o ManagedswitchIgmpSnoopingVlanOutput) ToManagedswitchIgmpSnoopingVlanOutput() ManagedswitchIgmpSnoopingVlanOutput {
	return o
}

func (o ManagedswitchIgmpSnoopingVlanOutput) ToManagedswitchIgmpSnoopingVlanOutputWithContext(ctx context.Context) ManagedswitchIgmpSnoopingVlanOutput {
	return o
}

// IGMP snooping proxy for the VLAN interface. Valid values: `disable`, `enable`, `global`.
func (o ManagedswitchIgmpSnoopingVlanOutput) Proxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchIgmpSnoopingVlan) *string { return v.Proxy }).(pulumi.StringPtrOutput)
}

// Enable/disable IGMP snooping querier for the VLAN interface. Valid values: `disable`, `enable`.
func (o ManagedswitchIgmpSnoopingVlanOutput) Querier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchIgmpSnoopingVlan) *string { return v.Querier }).(pulumi.StringPtrOutput)
}

// IGMP snooping querier address.
func (o ManagedswitchIgmpSnoopingVlanOutput) QuerierAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchIgmpSnoopingVlan) *string { return v.QuerierAddr }).(pulumi.StringPtrOutput)
}

// IGMP snooping querier version.
//
// The `n8021xSettings` block supports:
func (o ManagedswitchIgmpSnoopingVlanOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchIgmpSnoopingVlan) *int { return v.Version }).(pulumi.IntPtrOutput)
}

// List of FortiSwitch VLANs.
func (o ManagedswitchIgmpSnoopingVlanOutput) VlanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchIgmpSnoopingVlan) *string { return v.VlanName }).(pulumi.StringPtrOutput)
}

type ManagedswitchIgmpSnoopingVlanArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchIgmpSnoopingVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchIgmpSnoopingVlan)(nil)).Elem()
}

func (o ManagedswitchIgmpSnoopingVlanArrayOutput) ToManagedswitchIgmpSnoopingVlanArrayOutput() ManagedswitchIgmpSnoopingVlanArrayOutput {
	return o
}

func (o ManagedswitchIgmpSnoopingVlanArrayOutput) ToManagedswitchIgmpSnoopingVlanArrayOutputWithContext(ctx context.Context) ManagedswitchIgmpSnoopingVlanArrayOutput {
	return o
}

func (o ManagedswitchIgmpSnoopingVlanArrayOutput) Index(i pulumi.IntInput) ManagedswitchIgmpSnoopingVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchIgmpSnoopingVlan {
		return vs[0].([]ManagedswitchIgmpSnoopingVlan)[vs[1].(int)]
	}).(ManagedswitchIgmpSnoopingVlanOutput)
}

type ManagedswitchIpSourceGuard struct {
	// IP and MAC address configuration. The structure of `bindingEntry` block is documented below.
	BindingEntries []ManagedswitchIpSourceGuardBindingEntry `pulumi:"bindingEntries"`
	// Description.
	Description *string `pulumi:"description"`
	// Ingress interface to which source guard is bound.
	Port *string `pulumi:"port"`
}

// ManagedswitchIpSourceGuardInput is an input type that accepts ManagedswitchIpSourceGuardArgs and ManagedswitchIpSourceGuardOutput values.
// You can construct a concrete instance of `ManagedswitchIpSourceGuardInput` via:
//
//	ManagedswitchIpSourceGuardArgs{...}
type ManagedswitchIpSourceGuardInput interface {
	pulumi.Input

	ToManagedswitchIpSourceGuardOutput() ManagedswitchIpSourceGuardOutput
	ToManagedswitchIpSourceGuardOutputWithContext(context.Context) ManagedswitchIpSourceGuardOutput
}

type ManagedswitchIpSourceGuardArgs struct {
	// IP and MAC address configuration. The structure of `bindingEntry` block is documented below.
	BindingEntries ManagedswitchIpSourceGuardBindingEntryArrayInput `pulumi:"bindingEntries"`
	// Description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Ingress interface to which source guard is bound.
	Port pulumi.StringPtrInput `pulumi:"port"`
}

func (ManagedswitchIpSourceGuardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchIpSourceGuard)(nil)).Elem()
}

func (i ManagedswitchIpSourceGuardArgs) ToManagedswitchIpSourceGuardOutput() ManagedswitchIpSourceGuardOutput {
	return i.ToManagedswitchIpSourceGuardOutputWithContext(context.Background())
}

func (i ManagedswitchIpSourceGuardArgs) ToManagedswitchIpSourceGuardOutputWithContext(ctx context.Context) ManagedswitchIpSourceGuardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchIpSourceGuardOutput)
}

// ManagedswitchIpSourceGuardArrayInput is an input type that accepts ManagedswitchIpSourceGuardArray and ManagedswitchIpSourceGuardArrayOutput values.
// You can construct a concrete instance of `ManagedswitchIpSourceGuardArrayInput` via:
//
//	ManagedswitchIpSourceGuardArray{ ManagedswitchIpSourceGuardArgs{...} }
type ManagedswitchIpSourceGuardArrayInput interface {
	pulumi.Input

	ToManagedswitchIpSourceGuardArrayOutput() ManagedswitchIpSourceGuardArrayOutput
	ToManagedswitchIpSourceGuardArrayOutputWithContext(context.Context) ManagedswitchIpSourceGuardArrayOutput
}

type ManagedswitchIpSourceGuardArray []ManagedswitchIpSourceGuardInput

func (ManagedswitchIpSourceGuardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchIpSourceGuard)(nil)).Elem()
}

func (i ManagedswitchIpSourceGuardArray) ToManagedswitchIpSourceGuardArrayOutput() ManagedswitchIpSourceGuardArrayOutput {
	return i.ToManagedswitchIpSourceGuardArrayOutputWithContext(context.Background())
}

func (i ManagedswitchIpSourceGuardArray) ToManagedswitchIpSourceGuardArrayOutputWithContext(ctx context.Context) ManagedswitchIpSourceGuardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchIpSourceGuardArrayOutput)
}

type ManagedswitchIpSourceGuardOutput struct{ *pulumi.OutputState }

func (ManagedswitchIpSourceGuardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchIpSourceGuard)(nil)).Elem()
}

func (o ManagedswitchIpSourceGuardOutput) ToManagedswitchIpSourceGuardOutput() ManagedswitchIpSourceGuardOutput {
	return o
}

func (o ManagedswitchIpSourceGuardOutput) ToManagedswitchIpSourceGuardOutputWithContext(ctx context.Context) ManagedswitchIpSourceGuardOutput {
	return o
}

// IP and MAC address configuration. The structure of `bindingEntry` block is documented below.
func (o ManagedswitchIpSourceGuardOutput) BindingEntries() ManagedswitchIpSourceGuardBindingEntryArrayOutput {
	return o.ApplyT(func(v ManagedswitchIpSourceGuard) []ManagedswitchIpSourceGuardBindingEntry { return v.BindingEntries }).(ManagedswitchIpSourceGuardBindingEntryArrayOutput)
}

// Description.
func (o ManagedswitchIpSourceGuardOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchIpSourceGuard) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Ingress interface to which source guard is bound.
func (o ManagedswitchIpSourceGuardOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchIpSourceGuard) *string { return v.Port }).(pulumi.StringPtrOutput)
}

type ManagedswitchIpSourceGuardArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchIpSourceGuardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchIpSourceGuard)(nil)).Elem()
}

func (o ManagedswitchIpSourceGuardArrayOutput) ToManagedswitchIpSourceGuardArrayOutput() ManagedswitchIpSourceGuardArrayOutput {
	return o
}

func (o ManagedswitchIpSourceGuardArrayOutput) ToManagedswitchIpSourceGuardArrayOutputWithContext(ctx context.Context) ManagedswitchIpSourceGuardArrayOutput {
	return o
}

func (o ManagedswitchIpSourceGuardArrayOutput) Index(i pulumi.IntInput) ManagedswitchIpSourceGuardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchIpSourceGuard {
		return vs[0].([]ManagedswitchIpSourceGuard)[vs[1].(int)]
	}).(ManagedswitchIpSourceGuardOutput)
}

type ManagedswitchIpSourceGuardBindingEntry struct {
	// Configure binding pair.
	EntryName *string `pulumi:"entryName"`
	// Source IP for this rule.
	Ip *string `pulumi:"ip"`
	// MAC address for this rule.
	Mac *string `pulumi:"mac"`
}

// ManagedswitchIpSourceGuardBindingEntryInput is an input type that accepts ManagedswitchIpSourceGuardBindingEntryArgs and ManagedswitchIpSourceGuardBindingEntryOutput values.
// You can construct a concrete instance of `ManagedswitchIpSourceGuardBindingEntryInput` via:
//
//	ManagedswitchIpSourceGuardBindingEntryArgs{...}
type ManagedswitchIpSourceGuardBindingEntryInput interface {
	pulumi.Input

	ToManagedswitchIpSourceGuardBindingEntryOutput() ManagedswitchIpSourceGuardBindingEntryOutput
	ToManagedswitchIpSourceGuardBindingEntryOutputWithContext(context.Context) ManagedswitchIpSourceGuardBindingEntryOutput
}

type ManagedswitchIpSourceGuardBindingEntryArgs struct {
	// Configure binding pair.
	EntryName pulumi.StringPtrInput `pulumi:"entryName"`
	// Source IP for this rule.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// MAC address for this rule.
	Mac pulumi.StringPtrInput `pulumi:"mac"`
}

func (ManagedswitchIpSourceGuardBindingEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchIpSourceGuardBindingEntry)(nil)).Elem()
}

func (i ManagedswitchIpSourceGuardBindingEntryArgs) ToManagedswitchIpSourceGuardBindingEntryOutput() ManagedswitchIpSourceGuardBindingEntryOutput {
	return i.ToManagedswitchIpSourceGuardBindingEntryOutputWithContext(context.Background())
}

func (i ManagedswitchIpSourceGuardBindingEntryArgs) ToManagedswitchIpSourceGuardBindingEntryOutputWithContext(ctx context.Context) ManagedswitchIpSourceGuardBindingEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchIpSourceGuardBindingEntryOutput)
}

// ManagedswitchIpSourceGuardBindingEntryArrayInput is an input type that accepts ManagedswitchIpSourceGuardBindingEntryArray and ManagedswitchIpSourceGuardBindingEntryArrayOutput values.
// You can construct a concrete instance of `ManagedswitchIpSourceGuardBindingEntryArrayInput` via:
//
//	ManagedswitchIpSourceGuardBindingEntryArray{ ManagedswitchIpSourceGuardBindingEntryArgs{...} }
type ManagedswitchIpSourceGuardBindingEntryArrayInput interface {
	pulumi.Input

	ToManagedswitchIpSourceGuardBindingEntryArrayOutput() ManagedswitchIpSourceGuardBindingEntryArrayOutput
	ToManagedswitchIpSourceGuardBindingEntryArrayOutputWithContext(context.Context) ManagedswitchIpSourceGuardBindingEntryArrayOutput
}

type ManagedswitchIpSourceGuardBindingEntryArray []ManagedswitchIpSourceGuardBindingEntryInput

func (ManagedswitchIpSourceGuardBindingEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchIpSourceGuardBindingEntry)(nil)).Elem()
}

func (i ManagedswitchIpSourceGuardBindingEntryArray) ToManagedswitchIpSourceGuardBindingEntryArrayOutput() ManagedswitchIpSourceGuardBindingEntryArrayOutput {
	return i.ToManagedswitchIpSourceGuardBindingEntryArrayOutputWithContext(context.Background())
}

func (i ManagedswitchIpSourceGuardBindingEntryArray) ToManagedswitchIpSourceGuardBindingEntryArrayOutputWithContext(ctx context.Context) ManagedswitchIpSourceGuardBindingEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchIpSourceGuardBindingEntryArrayOutput)
}

type ManagedswitchIpSourceGuardBindingEntryOutput struct{ *pulumi.OutputState }

func (ManagedswitchIpSourceGuardBindingEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchIpSourceGuardBindingEntry)(nil)).Elem()
}

func (o ManagedswitchIpSourceGuardBindingEntryOutput) ToManagedswitchIpSourceGuardBindingEntryOutput() ManagedswitchIpSourceGuardBindingEntryOutput {
	return o
}

func (o ManagedswitchIpSourceGuardBindingEntryOutput) ToManagedswitchIpSourceGuardBindingEntryOutputWithContext(ctx context.Context) ManagedswitchIpSourceGuardBindingEntryOutput {
	return o
}

// Configure binding pair.
func (o ManagedswitchIpSourceGuardBindingEntryOutput) EntryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchIpSourceGuardBindingEntry) *string { return v.EntryName }).(pulumi.StringPtrOutput)
}

// Source IP for this rule.
func (o ManagedswitchIpSourceGuardBindingEntryOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchIpSourceGuardBindingEntry) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// MAC address for this rule.
func (o ManagedswitchIpSourceGuardBindingEntryOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchIpSourceGuardBindingEntry) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

type ManagedswitchIpSourceGuardBindingEntryArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchIpSourceGuardBindingEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchIpSourceGuardBindingEntry)(nil)).Elem()
}

func (o ManagedswitchIpSourceGuardBindingEntryArrayOutput) ToManagedswitchIpSourceGuardBindingEntryArrayOutput() ManagedswitchIpSourceGuardBindingEntryArrayOutput {
	return o
}

func (o ManagedswitchIpSourceGuardBindingEntryArrayOutput) ToManagedswitchIpSourceGuardBindingEntryArrayOutputWithContext(ctx context.Context) ManagedswitchIpSourceGuardBindingEntryArrayOutput {
	return o
}

func (o ManagedswitchIpSourceGuardBindingEntryArrayOutput) Index(i pulumi.IntInput) ManagedswitchIpSourceGuardBindingEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchIpSourceGuardBindingEntry {
		return vs[0].([]ManagedswitchIpSourceGuardBindingEntry)[vs[1].(int)]
	}).(ManagedswitchIpSourceGuardBindingEntryOutput)
}

type ManagedswitchMirror struct {
	// Destination port.
	Dst *string `pulumi:"dst"`
	// Mirror name.
	Name *string `pulumi:"name"`
	// Source egress interfaces. The structure of `srcEgress` block is documented below.
	SrcEgresses []ManagedswitchMirrorSrcEgress `pulumi:"srcEgresses"`
	// Source ingress interfaces. The structure of `srcIngress` block is documented below.
	SrcIngresses []ManagedswitchMirrorSrcIngress `pulumi:"srcIngresses"`
	// Active/inactive mirror configuration. Valid values: `active`, `inactive`.
	Status *string `pulumi:"status"`
	// Enable/disable switching functionality when mirroring. Valid values: `enable`, `disable`.
	SwitchingPacket *string `pulumi:"switchingPacket"`
}

// ManagedswitchMirrorInput is an input type that accepts ManagedswitchMirrorArgs and ManagedswitchMirrorOutput values.
// You can construct a concrete instance of `ManagedswitchMirrorInput` via:
//
//	ManagedswitchMirrorArgs{...}
type ManagedswitchMirrorInput interface {
	pulumi.Input

	ToManagedswitchMirrorOutput() ManagedswitchMirrorOutput
	ToManagedswitchMirrorOutputWithContext(context.Context) ManagedswitchMirrorOutput
}

type ManagedswitchMirrorArgs struct {
	// Destination port.
	Dst pulumi.StringPtrInput `pulumi:"dst"`
	// Mirror name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Source egress interfaces. The structure of `srcEgress` block is documented below.
	SrcEgresses ManagedswitchMirrorSrcEgressArrayInput `pulumi:"srcEgresses"`
	// Source ingress interfaces. The structure of `srcIngress` block is documented below.
	SrcIngresses ManagedswitchMirrorSrcIngressArrayInput `pulumi:"srcIngresses"`
	// Active/inactive mirror configuration. Valid values: `active`, `inactive`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Enable/disable switching functionality when mirroring. Valid values: `enable`, `disable`.
	SwitchingPacket pulumi.StringPtrInput `pulumi:"switchingPacket"`
}

func (ManagedswitchMirrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchMirror)(nil)).Elem()
}

func (i ManagedswitchMirrorArgs) ToManagedswitchMirrorOutput() ManagedswitchMirrorOutput {
	return i.ToManagedswitchMirrorOutputWithContext(context.Background())
}

func (i ManagedswitchMirrorArgs) ToManagedswitchMirrorOutputWithContext(ctx context.Context) ManagedswitchMirrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchMirrorOutput)
}

// ManagedswitchMirrorArrayInput is an input type that accepts ManagedswitchMirrorArray and ManagedswitchMirrorArrayOutput values.
// You can construct a concrete instance of `ManagedswitchMirrorArrayInput` via:
//
//	ManagedswitchMirrorArray{ ManagedswitchMirrorArgs{...} }
type ManagedswitchMirrorArrayInput interface {
	pulumi.Input

	ToManagedswitchMirrorArrayOutput() ManagedswitchMirrorArrayOutput
	ToManagedswitchMirrorArrayOutputWithContext(context.Context) ManagedswitchMirrorArrayOutput
}

type ManagedswitchMirrorArray []ManagedswitchMirrorInput

func (ManagedswitchMirrorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchMirror)(nil)).Elem()
}

func (i ManagedswitchMirrorArray) ToManagedswitchMirrorArrayOutput() ManagedswitchMirrorArrayOutput {
	return i.ToManagedswitchMirrorArrayOutputWithContext(context.Background())
}

func (i ManagedswitchMirrorArray) ToManagedswitchMirrorArrayOutputWithContext(ctx context.Context) ManagedswitchMirrorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchMirrorArrayOutput)
}

type ManagedswitchMirrorOutput struct{ *pulumi.OutputState }

func (ManagedswitchMirrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchMirror)(nil)).Elem()
}

func (o ManagedswitchMirrorOutput) ToManagedswitchMirrorOutput() ManagedswitchMirrorOutput {
	return o
}

func (o ManagedswitchMirrorOutput) ToManagedswitchMirrorOutputWithContext(ctx context.Context) ManagedswitchMirrorOutput {
	return o
}

// Destination port.
func (o ManagedswitchMirrorOutput) Dst() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchMirror) *string { return v.Dst }).(pulumi.StringPtrOutput)
}

// Mirror name.
func (o ManagedswitchMirrorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchMirror) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Source egress interfaces. The structure of `srcEgress` block is documented below.
func (o ManagedswitchMirrorOutput) SrcEgresses() ManagedswitchMirrorSrcEgressArrayOutput {
	return o.ApplyT(func(v ManagedswitchMirror) []ManagedswitchMirrorSrcEgress { return v.SrcEgresses }).(ManagedswitchMirrorSrcEgressArrayOutput)
}

// Source ingress interfaces. The structure of `srcIngress` block is documented below.
func (o ManagedswitchMirrorOutput) SrcIngresses() ManagedswitchMirrorSrcIngressArrayOutput {
	return o.ApplyT(func(v ManagedswitchMirror) []ManagedswitchMirrorSrcIngress { return v.SrcIngresses }).(ManagedswitchMirrorSrcIngressArrayOutput)
}

// Active/inactive mirror configuration. Valid values: `active`, `inactive`.
func (o ManagedswitchMirrorOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchMirror) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Enable/disable switching functionality when mirroring. Valid values: `enable`, `disable`.
func (o ManagedswitchMirrorOutput) SwitchingPacket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchMirror) *string { return v.SwitchingPacket }).(pulumi.StringPtrOutput)
}

type ManagedswitchMirrorArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchMirrorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchMirror)(nil)).Elem()
}

func (o ManagedswitchMirrorArrayOutput) ToManagedswitchMirrorArrayOutput() ManagedswitchMirrorArrayOutput {
	return o
}

func (o ManagedswitchMirrorArrayOutput) ToManagedswitchMirrorArrayOutputWithContext(ctx context.Context) ManagedswitchMirrorArrayOutput {
	return o
}

func (o ManagedswitchMirrorArrayOutput) Index(i pulumi.IntInput) ManagedswitchMirrorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchMirror {
		return vs[0].([]ManagedswitchMirror)[vs[1].(int)]
	}).(ManagedswitchMirrorOutput)
}

type ManagedswitchMirrorSrcEgress struct {
	// Interface name.
	Name *string `pulumi:"name"`
}

// ManagedswitchMirrorSrcEgressInput is an input type that accepts ManagedswitchMirrorSrcEgressArgs and ManagedswitchMirrorSrcEgressOutput values.
// You can construct a concrete instance of `ManagedswitchMirrorSrcEgressInput` via:
//
//	ManagedswitchMirrorSrcEgressArgs{...}
type ManagedswitchMirrorSrcEgressInput interface {
	pulumi.Input

	ToManagedswitchMirrorSrcEgressOutput() ManagedswitchMirrorSrcEgressOutput
	ToManagedswitchMirrorSrcEgressOutputWithContext(context.Context) ManagedswitchMirrorSrcEgressOutput
}

type ManagedswitchMirrorSrcEgressArgs struct {
	// Interface name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ManagedswitchMirrorSrcEgressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchMirrorSrcEgress)(nil)).Elem()
}

func (i ManagedswitchMirrorSrcEgressArgs) ToManagedswitchMirrorSrcEgressOutput() ManagedswitchMirrorSrcEgressOutput {
	return i.ToManagedswitchMirrorSrcEgressOutputWithContext(context.Background())
}

func (i ManagedswitchMirrorSrcEgressArgs) ToManagedswitchMirrorSrcEgressOutputWithContext(ctx context.Context) ManagedswitchMirrorSrcEgressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchMirrorSrcEgressOutput)
}

// ManagedswitchMirrorSrcEgressArrayInput is an input type that accepts ManagedswitchMirrorSrcEgressArray and ManagedswitchMirrorSrcEgressArrayOutput values.
// You can construct a concrete instance of `ManagedswitchMirrorSrcEgressArrayInput` via:
//
//	ManagedswitchMirrorSrcEgressArray{ ManagedswitchMirrorSrcEgressArgs{...} }
type ManagedswitchMirrorSrcEgressArrayInput interface {
	pulumi.Input

	ToManagedswitchMirrorSrcEgressArrayOutput() ManagedswitchMirrorSrcEgressArrayOutput
	ToManagedswitchMirrorSrcEgressArrayOutputWithContext(context.Context) ManagedswitchMirrorSrcEgressArrayOutput
}

type ManagedswitchMirrorSrcEgressArray []ManagedswitchMirrorSrcEgressInput

func (ManagedswitchMirrorSrcEgressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchMirrorSrcEgress)(nil)).Elem()
}

func (i ManagedswitchMirrorSrcEgressArray) ToManagedswitchMirrorSrcEgressArrayOutput() ManagedswitchMirrorSrcEgressArrayOutput {
	return i.ToManagedswitchMirrorSrcEgressArrayOutputWithContext(context.Background())
}

func (i ManagedswitchMirrorSrcEgressArray) ToManagedswitchMirrorSrcEgressArrayOutputWithContext(ctx context.Context) ManagedswitchMirrorSrcEgressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchMirrorSrcEgressArrayOutput)
}

type ManagedswitchMirrorSrcEgressOutput struct{ *pulumi.OutputState }

func (ManagedswitchMirrorSrcEgressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchMirrorSrcEgress)(nil)).Elem()
}

func (o ManagedswitchMirrorSrcEgressOutput) ToManagedswitchMirrorSrcEgressOutput() ManagedswitchMirrorSrcEgressOutput {
	return o
}

func (o ManagedswitchMirrorSrcEgressOutput) ToManagedswitchMirrorSrcEgressOutputWithContext(ctx context.Context) ManagedswitchMirrorSrcEgressOutput {
	return o
}

// Interface name.
func (o ManagedswitchMirrorSrcEgressOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchMirrorSrcEgress) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ManagedswitchMirrorSrcEgressArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchMirrorSrcEgressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchMirrorSrcEgress)(nil)).Elem()
}

func (o ManagedswitchMirrorSrcEgressArrayOutput) ToManagedswitchMirrorSrcEgressArrayOutput() ManagedswitchMirrorSrcEgressArrayOutput {
	return o
}

func (o ManagedswitchMirrorSrcEgressArrayOutput) ToManagedswitchMirrorSrcEgressArrayOutputWithContext(ctx context.Context) ManagedswitchMirrorSrcEgressArrayOutput {
	return o
}

func (o ManagedswitchMirrorSrcEgressArrayOutput) Index(i pulumi.IntInput) ManagedswitchMirrorSrcEgressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchMirrorSrcEgress {
		return vs[0].([]ManagedswitchMirrorSrcEgress)[vs[1].(int)]
	}).(ManagedswitchMirrorSrcEgressOutput)
}

type ManagedswitchMirrorSrcIngress struct {
	// Interface name.
	Name *string `pulumi:"name"`
}

// ManagedswitchMirrorSrcIngressInput is an input type that accepts ManagedswitchMirrorSrcIngressArgs and ManagedswitchMirrorSrcIngressOutput values.
// You can construct a concrete instance of `ManagedswitchMirrorSrcIngressInput` via:
//
//	ManagedswitchMirrorSrcIngressArgs{...}
type ManagedswitchMirrorSrcIngressInput interface {
	pulumi.Input

	ToManagedswitchMirrorSrcIngressOutput() ManagedswitchMirrorSrcIngressOutput
	ToManagedswitchMirrorSrcIngressOutputWithContext(context.Context) ManagedswitchMirrorSrcIngressOutput
}

type ManagedswitchMirrorSrcIngressArgs struct {
	// Interface name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ManagedswitchMirrorSrcIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchMirrorSrcIngress)(nil)).Elem()
}

func (i ManagedswitchMirrorSrcIngressArgs) ToManagedswitchMirrorSrcIngressOutput() ManagedswitchMirrorSrcIngressOutput {
	return i.ToManagedswitchMirrorSrcIngressOutputWithContext(context.Background())
}

func (i ManagedswitchMirrorSrcIngressArgs) ToManagedswitchMirrorSrcIngressOutputWithContext(ctx context.Context) ManagedswitchMirrorSrcIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchMirrorSrcIngressOutput)
}

// ManagedswitchMirrorSrcIngressArrayInput is an input type that accepts ManagedswitchMirrorSrcIngressArray and ManagedswitchMirrorSrcIngressArrayOutput values.
// You can construct a concrete instance of `ManagedswitchMirrorSrcIngressArrayInput` via:
//
//	ManagedswitchMirrorSrcIngressArray{ ManagedswitchMirrorSrcIngressArgs{...} }
type ManagedswitchMirrorSrcIngressArrayInput interface {
	pulumi.Input

	ToManagedswitchMirrorSrcIngressArrayOutput() ManagedswitchMirrorSrcIngressArrayOutput
	ToManagedswitchMirrorSrcIngressArrayOutputWithContext(context.Context) ManagedswitchMirrorSrcIngressArrayOutput
}

type ManagedswitchMirrorSrcIngressArray []ManagedswitchMirrorSrcIngressInput

func (ManagedswitchMirrorSrcIngressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchMirrorSrcIngress)(nil)).Elem()
}

func (i ManagedswitchMirrorSrcIngressArray) ToManagedswitchMirrorSrcIngressArrayOutput() ManagedswitchMirrorSrcIngressArrayOutput {
	return i.ToManagedswitchMirrorSrcIngressArrayOutputWithContext(context.Background())
}

func (i ManagedswitchMirrorSrcIngressArray) ToManagedswitchMirrorSrcIngressArrayOutputWithContext(ctx context.Context) ManagedswitchMirrorSrcIngressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchMirrorSrcIngressArrayOutput)
}

type ManagedswitchMirrorSrcIngressOutput struct{ *pulumi.OutputState }

func (ManagedswitchMirrorSrcIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchMirrorSrcIngress)(nil)).Elem()
}

func (o ManagedswitchMirrorSrcIngressOutput) ToManagedswitchMirrorSrcIngressOutput() ManagedswitchMirrorSrcIngressOutput {
	return o
}

func (o ManagedswitchMirrorSrcIngressOutput) ToManagedswitchMirrorSrcIngressOutputWithContext(ctx context.Context) ManagedswitchMirrorSrcIngressOutput {
	return o
}

// Interface name.
func (o ManagedswitchMirrorSrcIngressOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchMirrorSrcIngress) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ManagedswitchMirrorSrcIngressArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchMirrorSrcIngressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchMirrorSrcIngress)(nil)).Elem()
}

func (o ManagedswitchMirrorSrcIngressArrayOutput) ToManagedswitchMirrorSrcIngressArrayOutput() ManagedswitchMirrorSrcIngressArrayOutput {
	return o
}

func (o ManagedswitchMirrorSrcIngressArrayOutput) ToManagedswitchMirrorSrcIngressArrayOutputWithContext(ctx context.Context) ManagedswitchMirrorSrcIngressArrayOutput {
	return o
}

func (o ManagedswitchMirrorSrcIngressArrayOutput) Index(i pulumi.IntInput) ManagedswitchMirrorSrcIngressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchMirrorSrcIngress {
		return vs[0].([]ManagedswitchMirrorSrcIngress)[vs[1].(int)]
	}).(ManagedswitchMirrorSrcIngressOutput)
}

type ManagedswitchN8021xSettings struct {
	// Authentication state to set if a link is down. Valid values: `set-unauth`, `no-action`.
	LinkDownAuth *string `pulumi:"linkDownAuth"`
	// Enable/disable overriding the global IGMP snooping configuration. Valid values: `enable`, `disable`.
	LocalOverride *string `pulumi:"localOverride"`
	// Enable or disable MAB reauthentication settings. Valid values: `disable`, `enable`.
	MabReauth *string `pulumi:"mabReauth"`
	// MAC called station delimiter (default = hyphen). Valid values: `colon`, `hyphen`, `none`, `single-hyphen`.
	MacCalledStationDelimiter *string `pulumi:"macCalledStationDelimiter"`
	// MAC calling station delimiter (default = hyphen). Valid values: `colon`, `hyphen`, `none`, `single-hyphen`.
	MacCallingStationDelimiter *string `pulumi:"macCallingStationDelimiter"`
	// MAC case (default = lowercase). Valid values: `lowercase`, `uppercase`.
	MacCase *string `pulumi:"macCase"`
	// MAC authentication password delimiter (default = hyphen). Valid values: `colon`, `hyphen`, `none`, `single-hyphen`.
	MacPasswordDelimiter *string `pulumi:"macPasswordDelimiter"`
	// MAC authentication username delimiter (default = hyphen). Valid values: `colon`, `hyphen`, `none`, `single-hyphen`.
	MacUsernameDelimiter *string `pulumi:"macUsernameDelimiter"`
	// Maximum number of authentication attempts (0 - 15, default = 3).
	MaxReauthAttempt *int `pulumi:"maxReauthAttempt"`
	// Reauthentication time interval (1 - 1440 min, default = 60, 0 = disable).
	ReauthPeriod *int `pulumi:"reauthPeriod"`
	// 802.1X Tx period (seconds, default=30).
	TxPeriod *int `pulumi:"txPeriod"`
}

// ManagedswitchN8021xSettingsInput is an input type that accepts ManagedswitchN8021xSettingsArgs and ManagedswitchN8021xSettingsOutput values.
// You can construct a concrete instance of `ManagedswitchN8021xSettingsInput` via:
//
//	ManagedswitchN8021xSettingsArgs{...}
type ManagedswitchN8021xSettingsInput interface {
	pulumi.Input

	ToManagedswitchN8021xSettingsOutput() ManagedswitchN8021xSettingsOutput
	ToManagedswitchN8021xSettingsOutputWithContext(context.Context) ManagedswitchN8021xSettingsOutput
}

type ManagedswitchN8021xSettingsArgs struct {
	// Authentication state to set if a link is down. Valid values: `set-unauth`, `no-action`.
	LinkDownAuth pulumi.StringPtrInput `pulumi:"linkDownAuth"`
	// Enable/disable overriding the global IGMP snooping configuration. Valid values: `enable`, `disable`.
	LocalOverride pulumi.StringPtrInput `pulumi:"localOverride"`
	// Enable or disable MAB reauthentication settings. Valid values: `disable`, `enable`.
	MabReauth pulumi.StringPtrInput `pulumi:"mabReauth"`
	// MAC called station delimiter (default = hyphen). Valid values: `colon`, `hyphen`, `none`, `single-hyphen`.
	MacCalledStationDelimiter pulumi.StringPtrInput `pulumi:"macCalledStationDelimiter"`
	// MAC calling station delimiter (default = hyphen). Valid values: `colon`, `hyphen`, `none`, `single-hyphen`.
	MacCallingStationDelimiter pulumi.StringPtrInput `pulumi:"macCallingStationDelimiter"`
	// MAC case (default = lowercase). Valid values: `lowercase`, `uppercase`.
	MacCase pulumi.StringPtrInput `pulumi:"macCase"`
	// MAC authentication password delimiter (default = hyphen). Valid values: `colon`, `hyphen`, `none`, `single-hyphen`.
	MacPasswordDelimiter pulumi.StringPtrInput `pulumi:"macPasswordDelimiter"`
	// MAC authentication username delimiter (default = hyphen). Valid values: `colon`, `hyphen`, `none`, `single-hyphen`.
	MacUsernameDelimiter pulumi.StringPtrInput `pulumi:"macUsernameDelimiter"`
	// Maximum number of authentication attempts (0 - 15, default = 3).
	MaxReauthAttempt pulumi.IntPtrInput `pulumi:"maxReauthAttempt"`
	// Reauthentication time interval (1 - 1440 min, default = 60, 0 = disable).
	ReauthPeriod pulumi.IntPtrInput `pulumi:"reauthPeriod"`
	// 802.1X Tx period (seconds, default=30).
	TxPeriod pulumi.IntPtrInput `pulumi:"txPeriod"`
}

func (ManagedswitchN8021xSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchN8021xSettings)(nil)).Elem()
}

func (i ManagedswitchN8021xSettingsArgs) ToManagedswitchN8021xSettingsOutput() ManagedswitchN8021xSettingsOutput {
	return i.ToManagedswitchN8021xSettingsOutputWithContext(context.Background())
}

func (i ManagedswitchN8021xSettingsArgs) ToManagedswitchN8021xSettingsOutputWithContext(ctx context.Context) ManagedswitchN8021xSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchN8021xSettingsOutput)
}

func (i ManagedswitchN8021xSettingsArgs) ToManagedswitchN8021xSettingsPtrOutput() ManagedswitchN8021xSettingsPtrOutput {
	return i.ToManagedswitchN8021xSettingsPtrOutputWithContext(context.Background())
}

func (i ManagedswitchN8021xSettingsArgs) ToManagedswitchN8021xSettingsPtrOutputWithContext(ctx context.Context) ManagedswitchN8021xSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchN8021xSettingsOutput).ToManagedswitchN8021xSettingsPtrOutputWithContext(ctx)
}

// ManagedswitchN8021xSettingsPtrInput is an input type that accepts ManagedswitchN8021xSettingsArgs, ManagedswitchN8021xSettingsPtr and ManagedswitchN8021xSettingsPtrOutput values.
// You can construct a concrete instance of `ManagedswitchN8021xSettingsPtrInput` via:
//
//	        ManagedswitchN8021xSettingsArgs{...}
//
//	or:
//
//	        nil
type ManagedswitchN8021xSettingsPtrInput interface {
	pulumi.Input

	ToManagedswitchN8021xSettingsPtrOutput() ManagedswitchN8021xSettingsPtrOutput
	ToManagedswitchN8021xSettingsPtrOutputWithContext(context.Context) ManagedswitchN8021xSettingsPtrOutput
}

type managedswitchN8021xSettingsPtrType ManagedswitchN8021xSettingsArgs

func ManagedswitchN8021xSettingsPtr(v *ManagedswitchN8021xSettingsArgs) ManagedswitchN8021xSettingsPtrInput {
	return (*managedswitchN8021xSettingsPtrType)(v)
}

func (*managedswitchN8021xSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedswitchN8021xSettings)(nil)).Elem()
}

func (i *managedswitchN8021xSettingsPtrType) ToManagedswitchN8021xSettingsPtrOutput() ManagedswitchN8021xSettingsPtrOutput {
	return i.ToManagedswitchN8021xSettingsPtrOutputWithContext(context.Background())
}

func (i *managedswitchN8021xSettingsPtrType) ToManagedswitchN8021xSettingsPtrOutputWithContext(ctx context.Context) ManagedswitchN8021xSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchN8021xSettingsPtrOutput)
}

type ManagedswitchN8021xSettingsOutput struct{ *pulumi.OutputState }

func (ManagedswitchN8021xSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchN8021xSettings)(nil)).Elem()
}

func (o ManagedswitchN8021xSettingsOutput) ToManagedswitchN8021xSettingsOutput() ManagedswitchN8021xSettingsOutput {
	return o
}

func (o ManagedswitchN8021xSettingsOutput) ToManagedswitchN8021xSettingsOutputWithContext(ctx context.Context) ManagedswitchN8021xSettingsOutput {
	return o
}

func (o ManagedswitchN8021xSettingsOutput) ToManagedswitchN8021xSettingsPtrOutput() ManagedswitchN8021xSettingsPtrOutput {
	return o.ToManagedswitchN8021xSettingsPtrOutputWithContext(context.Background())
}

func (o ManagedswitchN8021xSettingsOutput) ToManagedswitchN8021xSettingsPtrOutputWithContext(ctx context.Context) ManagedswitchN8021xSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedswitchN8021xSettings) *ManagedswitchN8021xSettings {
		return &v
	}).(ManagedswitchN8021xSettingsPtrOutput)
}

// Authentication state to set if a link is down. Valid values: `set-unauth`, `no-action`.
func (o ManagedswitchN8021xSettingsOutput) LinkDownAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchN8021xSettings) *string { return v.LinkDownAuth }).(pulumi.StringPtrOutput)
}

// Enable/disable overriding the global IGMP snooping configuration. Valid values: `enable`, `disable`.
func (o ManagedswitchN8021xSettingsOutput) LocalOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchN8021xSettings) *string { return v.LocalOverride }).(pulumi.StringPtrOutput)
}

// Enable or disable MAB reauthentication settings. Valid values: `disable`, `enable`.
func (o ManagedswitchN8021xSettingsOutput) MabReauth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchN8021xSettings) *string { return v.MabReauth }).(pulumi.StringPtrOutput)
}

// MAC called station delimiter (default = hyphen). Valid values: `colon`, `hyphen`, `none`, `single-hyphen`.
func (o ManagedswitchN8021xSettingsOutput) MacCalledStationDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchN8021xSettings) *string { return v.MacCalledStationDelimiter }).(pulumi.StringPtrOutput)
}

// MAC calling station delimiter (default = hyphen). Valid values: `colon`, `hyphen`, `none`, `single-hyphen`.
func (o ManagedswitchN8021xSettingsOutput) MacCallingStationDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchN8021xSettings) *string { return v.MacCallingStationDelimiter }).(pulumi.StringPtrOutput)
}

// MAC case (default = lowercase). Valid values: `lowercase`, `uppercase`.
func (o ManagedswitchN8021xSettingsOutput) MacCase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchN8021xSettings) *string { return v.MacCase }).(pulumi.StringPtrOutput)
}

// MAC authentication password delimiter (default = hyphen). Valid values: `colon`, `hyphen`, `none`, `single-hyphen`.
func (o ManagedswitchN8021xSettingsOutput) MacPasswordDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchN8021xSettings) *string { return v.MacPasswordDelimiter }).(pulumi.StringPtrOutput)
}

// MAC authentication username delimiter (default = hyphen). Valid values: `colon`, `hyphen`, `none`, `single-hyphen`.
func (o ManagedswitchN8021xSettingsOutput) MacUsernameDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchN8021xSettings) *string { return v.MacUsernameDelimiter }).(pulumi.StringPtrOutput)
}

// Maximum number of authentication attempts (0 - 15, default = 3).
func (o ManagedswitchN8021xSettingsOutput) MaxReauthAttempt() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchN8021xSettings) *int { return v.MaxReauthAttempt }).(pulumi.IntPtrOutput)
}

// Reauthentication time interval (1 - 1440 min, default = 60, 0 = disable).
func (o ManagedswitchN8021xSettingsOutput) ReauthPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchN8021xSettings) *int { return v.ReauthPeriod }).(pulumi.IntPtrOutput)
}

// 802.1X Tx period (seconds, default=30).
func (o ManagedswitchN8021xSettingsOutput) TxPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchN8021xSettings) *int { return v.TxPeriod }).(pulumi.IntPtrOutput)
}

type ManagedswitchN8021xSettingsPtrOutput struct{ *pulumi.OutputState }

func (ManagedswitchN8021xSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedswitchN8021xSettings)(nil)).Elem()
}

func (o ManagedswitchN8021xSettingsPtrOutput) ToManagedswitchN8021xSettingsPtrOutput() ManagedswitchN8021xSettingsPtrOutput {
	return o
}

func (o ManagedswitchN8021xSettingsPtrOutput) ToManagedswitchN8021xSettingsPtrOutputWithContext(ctx context.Context) ManagedswitchN8021xSettingsPtrOutput {
	return o
}

func (o ManagedswitchN8021xSettingsPtrOutput) Elem() ManagedswitchN8021xSettingsOutput {
	return o.ApplyT(func(v *ManagedswitchN8021xSettings) ManagedswitchN8021xSettings {
		if v != nil {
			return *v
		}
		var ret ManagedswitchN8021xSettings
		return ret
	}).(ManagedswitchN8021xSettingsOutput)
}

// Authentication state to set if a link is down. Valid values: `set-unauth`, `no-action`.
func (o ManagedswitchN8021xSettingsPtrOutput) LinkDownAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchN8021xSettings) *string {
		if v == nil {
			return nil
		}
		return v.LinkDownAuth
	}).(pulumi.StringPtrOutput)
}

// Enable/disable overriding the global IGMP snooping configuration. Valid values: `enable`, `disable`.
func (o ManagedswitchN8021xSettingsPtrOutput) LocalOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchN8021xSettings) *string {
		if v == nil {
			return nil
		}
		return v.LocalOverride
	}).(pulumi.StringPtrOutput)
}

// Enable or disable MAB reauthentication settings. Valid values: `disable`, `enable`.
func (o ManagedswitchN8021xSettingsPtrOutput) MabReauth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchN8021xSettings) *string {
		if v == nil {
			return nil
		}
		return v.MabReauth
	}).(pulumi.StringPtrOutput)
}

// MAC called station delimiter (default = hyphen). Valid values: `colon`, `hyphen`, `none`, `single-hyphen`.
func (o ManagedswitchN8021xSettingsPtrOutput) MacCalledStationDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchN8021xSettings) *string {
		if v == nil {
			return nil
		}
		return v.MacCalledStationDelimiter
	}).(pulumi.StringPtrOutput)
}

// MAC calling station delimiter (default = hyphen). Valid values: `colon`, `hyphen`, `none`, `single-hyphen`.
func (o ManagedswitchN8021xSettingsPtrOutput) MacCallingStationDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchN8021xSettings) *string {
		if v == nil {
			return nil
		}
		return v.MacCallingStationDelimiter
	}).(pulumi.StringPtrOutput)
}

// MAC case (default = lowercase). Valid values: `lowercase`, `uppercase`.
func (o ManagedswitchN8021xSettingsPtrOutput) MacCase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchN8021xSettings) *string {
		if v == nil {
			return nil
		}
		return v.MacCase
	}).(pulumi.StringPtrOutput)
}

// MAC authentication password delimiter (default = hyphen). Valid values: `colon`, `hyphen`, `none`, `single-hyphen`.
func (o ManagedswitchN8021xSettingsPtrOutput) MacPasswordDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchN8021xSettings) *string {
		if v == nil {
			return nil
		}
		return v.MacPasswordDelimiter
	}).(pulumi.StringPtrOutput)
}

// MAC authentication username delimiter (default = hyphen). Valid values: `colon`, `hyphen`, `none`, `single-hyphen`.
func (o ManagedswitchN8021xSettingsPtrOutput) MacUsernameDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchN8021xSettings) *string {
		if v == nil {
			return nil
		}
		return v.MacUsernameDelimiter
	}).(pulumi.StringPtrOutput)
}

// Maximum number of authentication attempts (0 - 15, default = 3).
func (o ManagedswitchN8021xSettingsPtrOutput) MaxReauthAttempt() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedswitchN8021xSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxReauthAttempt
	}).(pulumi.IntPtrOutput)
}

// Reauthentication time interval (1 - 1440 min, default = 60, 0 = disable).
func (o ManagedswitchN8021xSettingsPtrOutput) ReauthPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedswitchN8021xSettings) *int {
		if v == nil {
			return nil
		}
		return v.ReauthPeriod
	}).(pulumi.IntPtrOutput)
}

// 802.1X Tx period (seconds, default=30).
func (o ManagedswitchN8021xSettingsPtrOutput) TxPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedswitchN8021xSettings) *int {
		if v == nil {
			return nil
		}
		return v.TxPeriod
	}).(pulumi.IntPtrOutput)
}

type ManagedswitchPort struct {
	// Access mode of the port.
	AccessMode *string `pulumi:"accessMode"`
	// ACL groups on this port. The structure of `aclGroup` block is documented below.
	AclGroups []ManagedswitchPortAclGroup `pulumi:"aclGroups"`
	// LACP member select mode. Valid values: `bandwidth`, `count`.
	AggregatorMode *string `pulumi:"aggregatorMode"`
	// Configure switch port tagged vlans The structure of `allowedVlans` block is documented below.
	AllowedVlans []ManagedswitchPortAllowedVlan `pulumi:"allowedVlans"`
	// Enable/disable all defined vlans on this port. Valid values: `enable`, `disable`.
	AllowedVlansAll *string `pulumi:"allowedVlansAll"`
	// Trusted or untrusted dynamic ARP inspection. Valid values: `untrusted`, `trusted`.
	ArpInspectionTrust *string `pulumi:"arpInspectionTrust"`
	// Peer to Peer Authenticated port.
	AuthenticatedPort *int `pulumi:"authenticatedPort"`
	// Enable/disable Link Aggregation Group (LAG) bundling for non-FortiLink interfaces. Valid values: `enable`, `disable`.
	Bundle *string `pulumi:"bundle"`
	// Description for port.
	Description *string `pulumi:"description"`
	// Configure DHCP snooping option 82 override. The structure of `dhcpSnoopOption82Override` block is documented below.
	DhcpSnoopOption82Overrides []ManagedswitchPortDhcpSnoopOption82Override `pulumi:"dhcpSnoopOption82Overrides"`
	// Enable/disable allowance of DHCP with option-82 on untrusted interface. Valid values: `enable`, `disable`.
	DhcpSnoopOption82Trust *string `pulumi:"dhcpSnoopOption82Trust"`
	// Trusted or untrusted DHCP-snooping interface. Valid values: `untrusted`, `trusted`.
	DhcpSnooping *string `pulumi:"dhcpSnooping"`
	// Configure discard mode for port. Valid values: `none`, `all-untagged`, `all-tagged`.
	DiscardMode *string `pulumi:"discardMode"`
	// Enable/disable this interface as an edge port, bridging connections between workstations and/or computers. Valid values: `enable`, `disable`.
	EdgePort *string `pulumi:"edgePort"`
	// Peer to Peer Encrypted port.
	EncryptedPort *int `pulumi:"encryptedPort"`
	// Switch controller export tag name. The structure of `exportTags` block is documented below.
	ExportTags []ManagedswitchPortExportTag `pulumi:"exportTags"`
	// Export managed-switch port to a tenant VDOM.
	ExportTo *string `pulumi:"exportTo"`
	// Switch controller export port to pool-list.
	ExportToPool *string `pulumi:"exportToPool"`
	// Switch controller export port to pool-list.
	ExportToPoolFlag *int `pulumi:"exportToPoolFlag"`
	// FEC capable.
	FecCapable *int `pulumi:"fecCapable"`
	// State of forward error correction.
	FecState *string `pulumi:"fecState"`
	// FGT peer device name.
	FgtPeerDeviceName *string `pulumi:"fgtPeerDeviceName"`
	// FGT peer port name.
	FgtPeerPortName *string `pulumi:"fgtPeerPortName"`
	// Fiber-port.
	FiberPort *int `pulumi:"fiberPort"`
	// Port properties flags.
	Flags *int `pulumi:"flags"`
	// Period over which flap events are calculated (seconds).
	FlapDuration *int `pulumi:"flapDuration"`
	// Number of stage change events needed within flap-duration.
	FlapRate *int `pulumi:"flapRate"`
	// Flap guard disabling protection (min).
	FlapTimeout *int `pulumi:"flapTimeout"`
	// Enable/disable flap guard. Valid values: `enable`, `disable`.
	Flapguard *string `pulumi:"flapguard"`
	// Flow control direction. Valid values: `disable`, `tx`, `rx`, `both`.
	FlowControl *string `pulumi:"flowControl"`
	// FortiLink uplink port.
	FortilinkPort *int `pulumi:"fortilinkPort"`
	// ACLs on this port. The structure of `fortiswitchAcls` block is documented below.
	FortiswitchAcls []ManagedswitchPortFortiswitchAcl `pulumi:"fortiswitchAcls"`
	// Set IGMP snooping mode for the physical port interface. Valid values: `enable`, `disable`.
	IgmpSnooping *string `pulumi:"igmpSnooping"`
	// Enable/disable flooding of IGMP reports to this interface when igmp-snooping enabled. Valid values: `enable`, `disable`.
	IgmpSnoopingFloodReports *string `pulumi:"igmpSnoopingFloodReports"`
	// Enable/disable flooding of IGMP reports to this interface when igmp-snooping enabled. Valid values: `enable`, `disable`.
	IgmpsFloodReports *string `pulumi:"igmpsFloodReports"`
	// Enable/disable flooding of IGMP snooping traffic to this interface. Valid values: `enable`, `disable`.
	IgmpsFloodTraffic *string `pulumi:"igmpsFloodTraffic"`
	// Tag(s) associated with the interface for various features including virtual port pool, dynamic port policy. The structure of `interfaceTags` block is documented below.
	InterfaceTags []ManagedswitchPortInterfaceTag `pulumi:"interfaceTags"`
	// Enable/disable IP source guard. Valid values: `disable`, `enable`.
	IpSourceGuard *string `pulumi:"ipSourceGuard"`
	// ISL local trunk name.
	IslLocalTrunkName *string `pulumi:"islLocalTrunkName"`
	// ISL peer device name.
	IslPeerDeviceName *string `pulumi:"islPeerDeviceName"`
	// ISL peer device serial number.
	IslPeerDeviceSn *string `pulumi:"islPeerDeviceSn"`
	// ISL peer port name.
	IslPeerPortName *string `pulumi:"islPeerPortName"`
	// end Link Aggregation Control Protocol (LACP) messages every 30 seconds (slow) or every second (fast). Valid values: `slow`, `fast`.
	LacpSpeed *string `pulumi:"lacpSpeed"`
	// Limit the number of dynamic MAC addresses on this Port (1 - 128, 0 = no limit, default).
	LearningLimit *int `pulumi:"learningLimit"`
	// Port link status. Valid values: `up`, `down`.
	LinkStatus *string `pulumi:"linkStatus"`
	// LLDP port TLV profile.
	LldpProfile *string `pulumi:"lldpProfile"`
	// LLDP transmit and receive status. Valid values: `disable`, `rx-only`, `tx-only`, `tx-rx`.
	LldpStatus *string `pulumi:"lldpStatus"`
	// Enable/disable loop-guard on this interface, an STP optimization used to prevent network loops. Valid values: `enabled`, `disabled`.
	LoopGuard *string `pulumi:"loopGuard"`
	// Loop-guard timeout (0 - 120 min, default = 45).
	LoopGuardTimeout *int `pulumi:"loopGuardTimeout"`
	// Port/Trunk MAC.
	MacAddr *string `pulumi:"macAddr"`
	// Matched interface tags in the dynamic port policy.
	MatchedDppIntfTags *string `pulumi:"matchedDppIntfTags"`
	// Matched child policy in the dynamic port policy.
	MatchedDppPolicy *string `pulumi:"matchedDppPolicy"`
	// Maximum size of LAG bundle (1 - 24, default = 24)
	MaxBundle *int `pulumi:"maxBundle"`
	// Enable/disable flooding of IGMP snooping traffic to this interface. Valid values: `enable`, `disable`.
	McastSnoopingFloodTraffic *string `pulumi:"mcastSnoopingFloodTraffic"`
	// Enable/disable multi-chassis link aggregation (MCLAG). Valid values: `enable`, `disable`.
	Mclag *string `pulumi:"mclag"`
	// MCLAG-ICL port.
	MclagIclPort *int `pulumi:"mclagIclPort"`
	// Media type.
	MediaType *string `pulumi:"mediaType"`
	// Port behavior after it withdraws because of loss of control packets. Valid values: `forward`, `block`.
	MemberWithdrawalBehavior *string `pulumi:"memberWithdrawalBehavior"`
	// Aggregated LAG bundle interfaces. The structure of `members` block is documented below.
	Members []ManagedswitchPortMember `pulumi:"members"`
	// Minimum size of LAG bundle (1 - 24, default = 1)
	MinBundle *int `pulumi:"minBundle"`
	// LACP mode: ignore and do not send control messages, or negotiate 802.3ad aggregation passively or actively. Valid values: `static`, `lacp-passive`, `lacp-active`.
	Mode *string `pulumi:"mode"`
	// General peer to peer tunnel port.
	P2pPort *int `pulumi:"p2pPort"`
	// Packet sampling rate (0 - 99999 p/sec).
	PacketSampleRate *int `pulumi:"packetSampleRate"`
	// Enable/disable packet sampling on this interface. Valid values: `enabled`, `disabled`.
	PacketSampler *string `pulumi:"packetSampler"`
	// Configure ingress pause metering rate, in kbps (default = 0, disabled).
	PauseMeter *int `pulumi:"pauseMeter"`
	// Resume threshold for resuming traffic on ingress port. Valid values: `75%!`(MISSING), `50%!`(MISSING), `25%!`(MISSING).
	PauseMeterResume *string `pulumi:"pauseMeterResume"`
	// PoE capable.
	PoeCapable *int `pulumi:"poeCapable"`
	// PoE maximum power.
	PoeMaxPower *string `pulumi:"poeMaxPower"`
	// PoE mode IEEE 802.3BT capable.
	PoeModeBtCabable *int `pulumi:"poeModeBtCabable"`
	// Configure PoE port mode. Valid values: `ieee802-3af`, `ieee802-3at`, `ieee802-3bt`.
	PoePortMode *string `pulumi:"poePortMode"`
	// Configure PoE port power. Valid values: `normal`, `perpetual`, `perpetual-fast`.
	PoePortPower *string `pulumi:"poePortPower"`
	// Configure PoE port priority. Valid values: `critical-priority`, `high-priority`, `low-priority`, `medium-priority`.
	PoePortPriority *string `pulumi:"poePortPriority"`
	// Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
	PoePreStandardDetection *string `pulumi:"poePreStandardDetection"`
	// PoE standard supported.
	PoeStandard *string `pulumi:"poeStandard"`
	// Enable/disable PoE status. Valid values: `enable`, `disable`.
	PoeStatus *string `pulumi:"poeStatus"`
	// Switch port name.
	PortName *string `pulumi:"portName"`
	// Port number.
	PortNumber *int `pulumi:"portNumber"`
	// Switch port name.
	PortOwner *string `pulumi:"portOwner"`
	// Switch controller dynamic port policy from available options.
	PortPolicy *string `pulumi:"portPolicy"`
	// Port prefix type.
	PortPrefixType *int `pulumi:"portPrefixType"`
	// Switch controller authentication policy to apply to this managed switch from available options.
	PortSecurityPolicy *string `pulumi:"portSecurityPolicy"`
	// Algorithm for aggregate port selection. Valid values: `src-mac`, `dst-mac`, `src-dst-mac`, `src-ip`, `dst-ip`, `src-dst-ip`.
	PortSelectionCriteria *string `pulumi:"portSelectionCriteria"`
	// PTP policy configuration.
	PtpPolicy *string `pulumi:"ptpPolicy"`
	// Enable/disable PTP policy on this FortiSwitch port. Valid values: `disable`, `enable`.
	PtpStatus *string `pulumi:"ptpStatus"`
	// Switch controller QoS policy from available options.
	QosPolicy *string `pulumi:"qosPolicy"`
	// Peer to Peer Restricted Authenticated port.
	RestrictedAuthPort *int `pulumi:"restrictedAuthPort"`
	// Enable/disable inter-operability with rapid PVST on this interface. Valid values: `disabled`, `enabled`.
	RpvstPort *string `pulumi:"rpvstPort"`
	// sFlow sample direction. Valid values: `tx`, `rx`, `both`.
	SampleDirection *string `pulumi:"sampleDirection"`
	// sFlow sampler counter polling interval (1 - 255 sec).
	SflowCounterInterval *int `pulumi:"sflowCounterInterval"`
	// sFlow sampler sample rate (0 - 99999 p/sec).
	SflowSampleRate *int `pulumi:"sflowSampleRate"`
	// Enable/disable sFlow protocol on this interface. Valid values: `enabled`, `disabled`.
	SflowSampler *string `pulumi:"sflowSampler"`
	// Switch port speed; default and available settings depend on hardware.
	Speed *string `pulumi:"speed"`
	// Switch port speed mask.
	SpeedMask *int `pulumi:"speedMask"`
	// Stacking port.
	StackingPort *int `pulumi:"stackingPort"`
	// Switch port admin status: up or down. Valid values: `up`, `down`.
	Status *string `pulumi:"status"`
	// Enable or disable sticky-mac on the interface. Valid values: `enable`, `disable`.
	StickyMac *string `pulumi:"stickyMac"`
	// Switch controller storm control policy from available options.
	StormControlPolicy *string `pulumi:"stormControlPolicy"`
	// Enable/disable STP BPDU guard on this interface. Valid values: `enabled`, `disabled`.
	StpBpduGuard *string `pulumi:"stpBpduGuard"`
	// BPDU Guard disabling protection (0 - 120 min).
	StpBpduGuardTimeout *int `pulumi:"stpBpduGuardTimeout"`
	// Enable/disable STP root guard on this interface. Valid values: `enabled`, `disabled`.
	StpRootGuard *string `pulumi:"stpRootGuard"`
	// Enable/disable Spanning Tree Protocol (STP) on this interface. Valid values: `enabled`, `disabled`.
	StpState *string `pulumi:"stpState"`
	// Switch id.
	SwitchId *string `pulumi:"switchId"`
	// Interface type: physical or trunk port. Valid values: `physical`, `trunk`.
	Type *string `pulumi:"type"`
	// Configure switch port untagged vlans The structure of `untaggedVlans` block is documented below.
	UntaggedVlans []ManagedswitchPortUntaggedVlan `pulumi:"untaggedVlans"`
	// Virtualized switch port.
	VirtualPort *int `pulumi:"virtualPort"`
	// Assign switch ports to a VLAN.
	Vlan *string `pulumi:"vlan"`
}

// ManagedswitchPortInput is an input type that accepts ManagedswitchPortArgs and ManagedswitchPortOutput values.
// You can construct a concrete instance of `ManagedswitchPortInput` via:
//
//	ManagedswitchPortArgs{...}
type ManagedswitchPortInput interface {
	pulumi.Input

	ToManagedswitchPortOutput() ManagedswitchPortOutput
	ToManagedswitchPortOutputWithContext(context.Context) ManagedswitchPortOutput
}

type ManagedswitchPortArgs struct {
	// Access mode of the port.
	AccessMode pulumi.StringPtrInput `pulumi:"accessMode"`
	// ACL groups on this port. The structure of `aclGroup` block is documented below.
	AclGroups ManagedswitchPortAclGroupArrayInput `pulumi:"aclGroups"`
	// LACP member select mode. Valid values: `bandwidth`, `count`.
	AggregatorMode pulumi.StringPtrInput `pulumi:"aggregatorMode"`
	// Configure switch port tagged vlans The structure of `allowedVlans` block is documented below.
	AllowedVlans ManagedswitchPortAllowedVlanArrayInput `pulumi:"allowedVlans"`
	// Enable/disable all defined vlans on this port. Valid values: `enable`, `disable`.
	AllowedVlansAll pulumi.StringPtrInput `pulumi:"allowedVlansAll"`
	// Trusted or untrusted dynamic ARP inspection. Valid values: `untrusted`, `trusted`.
	ArpInspectionTrust pulumi.StringPtrInput `pulumi:"arpInspectionTrust"`
	// Peer to Peer Authenticated port.
	AuthenticatedPort pulumi.IntPtrInput `pulumi:"authenticatedPort"`
	// Enable/disable Link Aggregation Group (LAG) bundling for non-FortiLink interfaces. Valid values: `enable`, `disable`.
	Bundle pulumi.StringPtrInput `pulumi:"bundle"`
	// Description for port.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Configure DHCP snooping option 82 override. The structure of `dhcpSnoopOption82Override` block is documented below.
	DhcpSnoopOption82Overrides ManagedswitchPortDhcpSnoopOption82OverrideArrayInput `pulumi:"dhcpSnoopOption82Overrides"`
	// Enable/disable allowance of DHCP with option-82 on untrusted interface. Valid values: `enable`, `disable`.
	DhcpSnoopOption82Trust pulumi.StringPtrInput `pulumi:"dhcpSnoopOption82Trust"`
	// Trusted or untrusted DHCP-snooping interface. Valid values: `untrusted`, `trusted`.
	DhcpSnooping pulumi.StringPtrInput `pulumi:"dhcpSnooping"`
	// Configure discard mode for port. Valid values: `none`, `all-untagged`, `all-tagged`.
	DiscardMode pulumi.StringPtrInput `pulumi:"discardMode"`
	// Enable/disable this interface as an edge port, bridging connections between workstations and/or computers. Valid values: `enable`, `disable`.
	EdgePort pulumi.StringPtrInput `pulumi:"edgePort"`
	// Peer to Peer Encrypted port.
	EncryptedPort pulumi.IntPtrInput `pulumi:"encryptedPort"`
	// Switch controller export tag name. The structure of `exportTags` block is documented below.
	ExportTags ManagedswitchPortExportTagArrayInput `pulumi:"exportTags"`
	// Export managed-switch port to a tenant VDOM.
	ExportTo pulumi.StringPtrInput `pulumi:"exportTo"`
	// Switch controller export port to pool-list.
	ExportToPool pulumi.StringPtrInput `pulumi:"exportToPool"`
	// Switch controller export port to pool-list.
	ExportToPoolFlag pulumi.IntPtrInput `pulumi:"exportToPoolFlag"`
	// FEC capable.
	FecCapable pulumi.IntPtrInput `pulumi:"fecCapable"`
	// State of forward error correction.
	FecState pulumi.StringPtrInput `pulumi:"fecState"`
	// FGT peer device name.
	FgtPeerDeviceName pulumi.StringPtrInput `pulumi:"fgtPeerDeviceName"`
	// FGT peer port name.
	FgtPeerPortName pulumi.StringPtrInput `pulumi:"fgtPeerPortName"`
	// Fiber-port.
	FiberPort pulumi.IntPtrInput `pulumi:"fiberPort"`
	// Port properties flags.
	Flags pulumi.IntPtrInput `pulumi:"flags"`
	// Period over which flap events are calculated (seconds).
	FlapDuration pulumi.IntPtrInput `pulumi:"flapDuration"`
	// Number of stage change events needed within flap-duration.
	FlapRate pulumi.IntPtrInput `pulumi:"flapRate"`
	// Flap guard disabling protection (min).
	FlapTimeout pulumi.IntPtrInput `pulumi:"flapTimeout"`
	// Enable/disable flap guard. Valid values: `enable`, `disable`.
	Flapguard pulumi.StringPtrInput `pulumi:"flapguard"`
	// Flow control direction. Valid values: `disable`, `tx`, `rx`, `both`.
	FlowControl pulumi.StringPtrInput `pulumi:"flowControl"`
	// FortiLink uplink port.
	FortilinkPort pulumi.IntPtrInput `pulumi:"fortilinkPort"`
	// ACLs on this port. The structure of `fortiswitchAcls` block is documented below.
	FortiswitchAcls ManagedswitchPortFortiswitchAclArrayInput `pulumi:"fortiswitchAcls"`
	// Set IGMP snooping mode for the physical port interface. Valid values: `enable`, `disable`.
	IgmpSnooping pulumi.StringPtrInput `pulumi:"igmpSnooping"`
	// Enable/disable flooding of IGMP reports to this interface when igmp-snooping enabled. Valid values: `enable`, `disable`.
	IgmpSnoopingFloodReports pulumi.StringPtrInput `pulumi:"igmpSnoopingFloodReports"`
	// Enable/disable flooding of IGMP reports to this interface when igmp-snooping enabled. Valid values: `enable`, `disable`.
	IgmpsFloodReports pulumi.StringPtrInput `pulumi:"igmpsFloodReports"`
	// Enable/disable flooding of IGMP snooping traffic to this interface. Valid values: `enable`, `disable`.
	IgmpsFloodTraffic pulumi.StringPtrInput `pulumi:"igmpsFloodTraffic"`
	// Tag(s) associated with the interface for various features including virtual port pool, dynamic port policy. The structure of `interfaceTags` block is documented below.
	InterfaceTags ManagedswitchPortInterfaceTagArrayInput `pulumi:"interfaceTags"`
	// Enable/disable IP source guard. Valid values: `disable`, `enable`.
	IpSourceGuard pulumi.StringPtrInput `pulumi:"ipSourceGuard"`
	// ISL local trunk name.
	IslLocalTrunkName pulumi.StringPtrInput `pulumi:"islLocalTrunkName"`
	// ISL peer device name.
	IslPeerDeviceName pulumi.StringPtrInput `pulumi:"islPeerDeviceName"`
	// ISL peer device serial number.
	IslPeerDeviceSn pulumi.StringPtrInput `pulumi:"islPeerDeviceSn"`
	// ISL peer port name.
	IslPeerPortName pulumi.StringPtrInput `pulumi:"islPeerPortName"`
	// end Link Aggregation Control Protocol (LACP) messages every 30 seconds (slow) or every second (fast). Valid values: `slow`, `fast`.
	LacpSpeed pulumi.StringPtrInput `pulumi:"lacpSpeed"`
	// Limit the number of dynamic MAC addresses on this Port (1 - 128, 0 = no limit, default).
	LearningLimit pulumi.IntPtrInput `pulumi:"learningLimit"`
	// Port link status. Valid values: `up`, `down`.
	LinkStatus pulumi.StringPtrInput `pulumi:"linkStatus"`
	// LLDP port TLV profile.
	LldpProfile pulumi.StringPtrInput `pulumi:"lldpProfile"`
	// LLDP transmit and receive status. Valid values: `disable`, `rx-only`, `tx-only`, `tx-rx`.
	LldpStatus pulumi.StringPtrInput `pulumi:"lldpStatus"`
	// Enable/disable loop-guard on this interface, an STP optimization used to prevent network loops. Valid values: `enabled`, `disabled`.
	LoopGuard pulumi.StringPtrInput `pulumi:"loopGuard"`
	// Loop-guard timeout (0 - 120 min, default = 45).
	LoopGuardTimeout pulumi.IntPtrInput `pulumi:"loopGuardTimeout"`
	// Port/Trunk MAC.
	MacAddr pulumi.StringPtrInput `pulumi:"macAddr"`
	// Matched interface tags in the dynamic port policy.
	MatchedDppIntfTags pulumi.StringPtrInput `pulumi:"matchedDppIntfTags"`
	// Matched child policy in the dynamic port policy.
	MatchedDppPolicy pulumi.StringPtrInput `pulumi:"matchedDppPolicy"`
	// Maximum size of LAG bundle (1 - 24, default = 24)
	MaxBundle pulumi.IntPtrInput `pulumi:"maxBundle"`
	// Enable/disable flooding of IGMP snooping traffic to this interface. Valid values: `enable`, `disable`.
	McastSnoopingFloodTraffic pulumi.StringPtrInput `pulumi:"mcastSnoopingFloodTraffic"`
	// Enable/disable multi-chassis link aggregation (MCLAG). Valid values: `enable`, `disable`.
	Mclag pulumi.StringPtrInput `pulumi:"mclag"`
	// MCLAG-ICL port.
	MclagIclPort pulumi.IntPtrInput `pulumi:"mclagIclPort"`
	// Media type.
	MediaType pulumi.StringPtrInput `pulumi:"mediaType"`
	// Port behavior after it withdraws because of loss of control packets. Valid values: `forward`, `block`.
	MemberWithdrawalBehavior pulumi.StringPtrInput `pulumi:"memberWithdrawalBehavior"`
	// Aggregated LAG bundle interfaces. The structure of `members` block is documented below.
	Members ManagedswitchPortMemberArrayInput `pulumi:"members"`
	// Minimum size of LAG bundle (1 - 24, default = 1)
	MinBundle pulumi.IntPtrInput `pulumi:"minBundle"`
	// LACP mode: ignore and do not send control messages, or negotiate 802.3ad aggregation passively or actively. Valid values: `static`, `lacp-passive`, `lacp-active`.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// General peer to peer tunnel port.
	P2pPort pulumi.IntPtrInput `pulumi:"p2pPort"`
	// Packet sampling rate (0 - 99999 p/sec).
	PacketSampleRate pulumi.IntPtrInput `pulumi:"packetSampleRate"`
	// Enable/disable packet sampling on this interface. Valid values: `enabled`, `disabled`.
	PacketSampler pulumi.StringPtrInput `pulumi:"packetSampler"`
	// Configure ingress pause metering rate, in kbps (default = 0, disabled).
	PauseMeter pulumi.IntPtrInput `pulumi:"pauseMeter"`
	// Resume threshold for resuming traffic on ingress port. Valid values: `75%!`(MISSING), `50%!`(MISSING), `25%!`(MISSING).
	PauseMeterResume pulumi.StringPtrInput `pulumi:"pauseMeterResume"`
	// PoE capable.
	PoeCapable pulumi.IntPtrInput `pulumi:"poeCapable"`
	// PoE maximum power.
	PoeMaxPower pulumi.StringPtrInput `pulumi:"poeMaxPower"`
	// PoE mode IEEE 802.3BT capable.
	PoeModeBtCabable pulumi.IntPtrInput `pulumi:"poeModeBtCabable"`
	// Configure PoE port mode. Valid values: `ieee802-3af`, `ieee802-3at`, `ieee802-3bt`.
	PoePortMode pulumi.StringPtrInput `pulumi:"poePortMode"`
	// Configure PoE port power. Valid values: `normal`, `perpetual`, `perpetual-fast`.
	PoePortPower pulumi.StringPtrInput `pulumi:"poePortPower"`
	// Configure PoE port priority. Valid values: `critical-priority`, `high-priority`, `low-priority`, `medium-priority`.
	PoePortPriority pulumi.StringPtrInput `pulumi:"poePortPriority"`
	// Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
	PoePreStandardDetection pulumi.StringPtrInput `pulumi:"poePreStandardDetection"`
	// PoE standard supported.
	PoeStandard pulumi.StringPtrInput `pulumi:"poeStandard"`
	// Enable/disable PoE status. Valid values: `enable`, `disable`.
	PoeStatus pulumi.StringPtrInput `pulumi:"poeStatus"`
	// Switch port name.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Port number.
	PortNumber pulumi.IntPtrInput `pulumi:"portNumber"`
	// Switch port name.
	PortOwner pulumi.StringPtrInput `pulumi:"portOwner"`
	// Switch controller dynamic port policy from available options.
	PortPolicy pulumi.StringPtrInput `pulumi:"portPolicy"`
	// Port prefix type.
	PortPrefixType pulumi.IntPtrInput `pulumi:"portPrefixType"`
	// Switch controller authentication policy to apply to this managed switch from available options.
	PortSecurityPolicy pulumi.StringPtrInput `pulumi:"portSecurityPolicy"`
	// Algorithm for aggregate port selection. Valid values: `src-mac`, `dst-mac`, `src-dst-mac`, `src-ip`, `dst-ip`, `src-dst-ip`.
	PortSelectionCriteria pulumi.StringPtrInput `pulumi:"portSelectionCriteria"`
	// PTP policy configuration.
	PtpPolicy pulumi.StringPtrInput `pulumi:"ptpPolicy"`
	// Enable/disable PTP policy on this FortiSwitch port. Valid values: `disable`, `enable`.
	PtpStatus pulumi.StringPtrInput `pulumi:"ptpStatus"`
	// Switch controller QoS policy from available options.
	QosPolicy pulumi.StringPtrInput `pulumi:"qosPolicy"`
	// Peer to Peer Restricted Authenticated port.
	RestrictedAuthPort pulumi.IntPtrInput `pulumi:"restrictedAuthPort"`
	// Enable/disable inter-operability with rapid PVST on this interface. Valid values: `disabled`, `enabled`.
	RpvstPort pulumi.StringPtrInput `pulumi:"rpvstPort"`
	// sFlow sample direction. Valid values: `tx`, `rx`, `both`.
	SampleDirection pulumi.StringPtrInput `pulumi:"sampleDirection"`
	// sFlow sampler counter polling interval (1 - 255 sec).
	SflowCounterInterval pulumi.IntPtrInput `pulumi:"sflowCounterInterval"`
	// sFlow sampler sample rate (0 - 99999 p/sec).
	SflowSampleRate pulumi.IntPtrInput `pulumi:"sflowSampleRate"`
	// Enable/disable sFlow protocol on this interface. Valid values: `enabled`, `disabled`.
	SflowSampler pulumi.StringPtrInput `pulumi:"sflowSampler"`
	// Switch port speed; default and available settings depend on hardware.
	Speed pulumi.StringPtrInput `pulumi:"speed"`
	// Switch port speed mask.
	SpeedMask pulumi.IntPtrInput `pulumi:"speedMask"`
	// Stacking port.
	StackingPort pulumi.IntPtrInput `pulumi:"stackingPort"`
	// Switch port admin status: up or down. Valid values: `up`, `down`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Enable or disable sticky-mac on the interface. Valid values: `enable`, `disable`.
	StickyMac pulumi.StringPtrInput `pulumi:"stickyMac"`
	// Switch controller storm control policy from available options.
	StormControlPolicy pulumi.StringPtrInput `pulumi:"stormControlPolicy"`
	// Enable/disable STP BPDU guard on this interface. Valid values: `enabled`, `disabled`.
	StpBpduGuard pulumi.StringPtrInput `pulumi:"stpBpduGuard"`
	// BPDU Guard disabling protection (0 - 120 min).
	StpBpduGuardTimeout pulumi.IntPtrInput `pulumi:"stpBpduGuardTimeout"`
	// Enable/disable STP root guard on this interface. Valid values: `enabled`, `disabled`.
	StpRootGuard pulumi.StringPtrInput `pulumi:"stpRootGuard"`
	// Enable/disable Spanning Tree Protocol (STP) on this interface. Valid values: `enabled`, `disabled`.
	StpState pulumi.StringPtrInput `pulumi:"stpState"`
	// Switch id.
	SwitchId pulumi.StringPtrInput `pulumi:"switchId"`
	// Interface type: physical or trunk port. Valid values: `physical`, `trunk`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Configure switch port untagged vlans The structure of `untaggedVlans` block is documented below.
	UntaggedVlans ManagedswitchPortUntaggedVlanArrayInput `pulumi:"untaggedVlans"`
	// Virtualized switch port.
	VirtualPort pulumi.IntPtrInput `pulumi:"virtualPort"`
	// Assign switch ports to a VLAN.
	Vlan pulumi.StringPtrInput `pulumi:"vlan"`
}

func (ManagedswitchPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPort)(nil)).Elem()
}

func (i ManagedswitchPortArgs) ToManagedswitchPortOutput() ManagedswitchPortOutput {
	return i.ToManagedswitchPortOutputWithContext(context.Background())
}

func (i ManagedswitchPortArgs) ToManagedswitchPortOutputWithContext(ctx context.Context) ManagedswitchPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortOutput)
}

// ManagedswitchPortArrayInput is an input type that accepts ManagedswitchPortArray and ManagedswitchPortArrayOutput values.
// You can construct a concrete instance of `ManagedswitchPortArrayInput` via:
//
//	ManagedswitchPortArray{ ManagedswitchPortArgs{...} }
type ManagedswitchPortArrayInput interface {
	pulumi.Input

	ToManagedswitchPortArrayOutput() ManagedswitchPortArrayOutput
	ToManagedswitchPortArrayOutputWithContext(context.Context) ManagedswitchPortArrayOutput
}

type ManagedswitchPortArray []ManagedswitchPortInput

func (ManagedswitchPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPort)(nil)).Elem()
}

func (i ManagedswitchPortArray) ToManagedswitchPortArrayOutput() ManagedswitchPortArrayOutput {
	return i.ToManagedswitchPortArrayOutputWithContext(context.Background())
}

func (i ManagedswitchPortArray) ToManagedswitchPortArrayOutputWithContext(ctx context.Context) ManagedswitchPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortArrayOutput)
}

type ManagedswitchPortOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPort)(nil)).Elem()
}

func (o ManagedswitchPortOutput) ToManagedswitchPortOutput() ManagedswitchPortOutput {
	return o
}

func (o ManagedswitchPortOutput) ToManagedswitchPortOutputWithContext(ctx context.Context) ManagedswitchPortOutput {
	return o
}

// Access mode of the port.
func (o ManagedswitchPortOutput) AccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.AccessMode }).(pulumi.StringPtrOutput)
}

// ACL groups on this port. The structure of `aclGroup` block is documented below.
func (o ManagedswitchPortOutput) AclGroups() ManagedswitchPortAclGroupArrayOutput {
	return o.ApplyT(func(v ManagedswitchPort) []ManagedswitchPortAclGroup { return v.AclGroups }).(ManagedswitchPortAclGroupArrayOutput)
}

// LACP member select mode. Valid values: `bandwidth`, `count`.
func (o ManagedswitchPortOutput) AggregatorMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.AggregatorMode }).(pulumi.StringPtrOutput)
}

// Configure switch port tagged vlans The structure of `allowedVlans` block is documented below.
func (o ManagedswitchPortOutput) AllowedVlans() ManagedswitchPortAllowedVlanArrayOutput {
	return o.ApplyT(func(v ManagedswitchPort) []ManagedswitchPortAllowedVlan { return v.AllowedVlans }).(ManagedswitchPortAllowedVlanArrayOutput)
}

// Enable/disable all defined vlans on this port. Valid values: `enable`, `disable`.
func (o ManagedswitchPortOutput) AllowedVlansAll() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.AllowedVlansAll }).(pulumi.StringPtrOutput)
}

// Trusted or untrusted dynamic ARP inspection. Valid values: `untrusted`, `trusted`.
func (o ManagedswitchPortOutput) ArpInspectionTrust() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.ArpInspectionTrust }).(pulumi.StringPtrOutput)
}

// Peer to Peer Authenticated port.
func (o ManagedswitchPortOutput) AuthenticatedPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.AuthenticatedPort }).(pulumi.IntPtrOutput)
}

// Enable/disable Link Aggregation Group (LAG) bundling for non-FortiLink interfaces. Valid values: `enable`, `disable`.
func (o ManagedswitchPortOutput) Bundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.Bundle }).(pulumi.StringPtrOutput)
}

// Description for port.
func (o ManagedswitchPortOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Configure DHCP snooping option 82 override. The structure of `dhcpSnoopOption82Override` block is documented below.
func (o ManagedswitchPortOutput) DhcpSnoopOption82Overrides() ManagedswitchPortDhcpSnoopOption82OverrideArrayOutput {
	return o.ApplyT(func(v ManagedswitchPort) []ManagedswitchPortDhcpSnoopOption82Override {
		return v.DhcpSnoopOption82Overrides
	}).(ManagedswitchPortDhcpSnoopOption82OverrideArrayOutput)
}

// Enable/disable allowance of DHCP with option-82 on untrusted interface. Valid values: `enable`, `disable`.
func (o ManagedswitchPortOutput) DhcpSnoopOption82Trust() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.DhcpSnoopOption82Trust }).(pulumi.StringPtrOutput)
}

// Trusted or untrusted DHCP-snooping interface. Valid values: `untrusted`, `trusted`.
func (o ManagedswitchPortOutput) DhcpSnooping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.DhcpSnooping }).(pulumi.StringPtrOutput)
}

// Configure discard mode for port. Valid values: `none`, `all-untagged`, `all-tagged`.
func (o ManagedswitchPortOutput) DiscardMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.DiscardMode }).(pulumi.StringPtrOutput)
}

// Enable/disable this interface as an edge port, bridging connections between workstations and/or computers. Valid values: `enable`, `disable`.
func (o ManagedswitchPortOutput) EdgePort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.EdgePort }).(pulumi.StringPtrOutput)
}

// Peer to Peer Encrypted port.
func (o ManagedswitchPortOutput) EncryptedPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.EncryptedPort }).(pulumi.IntPtrOutput)
}

// Switch controller export tag name. The structure of `exportTags` block is documented below.
func (o ManagedswitchPortOutput) ExportTags() ManagedswitchPortExportTagArrayOutput {
	return o.ApplyT(func(v ManagedswitchPort) []ManagedswitchPortExportTag { return v.ExportTags }).(ManagedswitchPortExportTagArrayOutput)
}

// Export managed-switch port to a tenant VDOM.
func (o ManagedswitchPortOutput) ExportTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.ExportTo }).(pulumi.StringPtrOutput)
}

// Switch controller export port to pool-list.
func (o ManagedswitchPortOutput) ExportToPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.ExportToPool }).(pulumi.StringPtrOutput)
}

// Switch controller export port to pool-list.
func (o ManagedswitchPortOutput) ExportToPoolFlag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.ExportToPoolFlag }).(pulumi.IntPtrOutput)
}

// FEC capable.
func (o ManagedswitchPortOutput) FecCapable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.FecCapable }).(pulumi.IntPtrOutput)
}

// State of forward error correction.
func (o ManagedswitchPortOutput) FecState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.FecState }).(pulumi.StringPtrOutput)
}

// FGT peer device name.
func (o ManagedswitchPortOutput) FgtPeerDeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.FgtPeerDeviceName }).(pulumi.StringPtrOutput)
}

// FGT peer port name.
func (o ManagedswitchPortOutput) FgtPeerPortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.FgtPeerPortName }).(pulumi.StringPtrOutput)
}

// Fiber-port.
func (o ManagedswitchPortOutput) FiberPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.FiberPort }).(pulumi.IntPtrOutput)
}

// Port properties flags.
func (o ManagedswitchPortOutput) Flags() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.Flags }).(pulumi.IntPtrOutput)
}

// Period over which flap events are calculated (seconds).
func (o ManagedswitchPortOutput) FlapDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.FlapDuration }).(pulumi.IntPtrOutput)
}

// Number of stage change events needed within flap-duration.
func (o ManagedswitchPortOutput) FlapRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.FlapRate }).(pulumi.IntPtrOutput)
}

// Flap guard disabling protection (min).
func (o ManagedswitchPortOutput) FlapTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.FlapTimeout }).(pulumi.IntPtrOutput)
}

// Enable/disable flap guard. Valid values: `enable`, `disable`.
func (o ManagedswitchPortOutput) Flapguard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.Flapguard }).(pulumi.StringPtrOutput)
}

// Flow control direction. Valid values: `disable`, `tx`, `rx`, `both`.
func (o ManagedswitchPortOutput) FlowControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.FlowControl }).(pulumi.StringPtrOutput)
}

// FortiLink uplink port.
func (o ManagedswitchPortOutput) FortilinkPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.FortilinkPort }).(pulumi.IntPtrOutput)
}

// ACLs on this port. The structure of `fortiswitchAcls` block is documented below.
func (o ManagedswitchPortOutput) FortiswitchAcls() ManagedswitchPortFortiswitchAclArrayOutput {
	return o.ApplyT(func(v ManagedswitchPort) []ManagedswitchPortFortiswitchAcl { return v.FortiswitchAcls }).(ManagedswitchPortFortiswitchAclArrayOutput)
}

// Set IGMP snooping mode for the physical port interface. Valid values: `enable`, `disable`.
func (o ManagedswitchPortOutput) IgmpSnooping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.IgmpSnooping }).(pulumi.StringPtrOutput)
}

// Enable/disable flooding of IGMP reports to this interface when igmp-snooping enabled. Valid values: `enable`, `disable`.
func (o ManagedswitchPortOutput) IgmpSnoopingFloodReports() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.IgmpSnoopingFloodReports }).(pulumi.StringPtrOutput)
}

// Enable/disable flooding of IGMP reports to this interface when igmp-snooping enabled. Valid values: `enable`, `disable`.
func (o ManagedswitchPortOutput) IgmpsFloodReports() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.IgmpsFloodReports }).(pulumi.StringPtrOutput)
}

// Enable/disable flooding of IGMP snooping traffic to this interface. Valid values: `enable`, `disable`.
func (o ManagedswitchPortOutput) IgmpsFloodTraffic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.IgmpsFloodTraffic }).(pulumi.StringPtrOutput)
}

// Tag(s) associated with the interface for various features including virtual port pool, dynamic port policy. The structure of `interfaceTags` block is documented below.
func (o ManagedswitchPortOutput) InterfaceTags() ManagedswitchPortInterfaceTagArrayOutput {
	return o.ApplyT(func(v ManagedswitchPort) []ManagedswitchPortInterfaceTag { return v.InterfaceTags }).(ManagedswitchPortInterfaceTagArrayOutput)
}

// Enable/disable IP source guard. Valid values: `disable`, `enable`.
func (o ManagedswitchPortOutput) IpSourceGuard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.IpSourceGuard }).(pulumi.StringPtrOutput)
}

// ISL local trunk name.
func (o ManagedswitchPortOutput) IslLocalTrunkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.IslLocalTrunkName }).(pulumi.StringPtrOutput)
}

// ISL peer device name.
func (o ManagedswitchPortOutput) IslPeerDeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.IslPeerDeviceName }).(pulumi.StringPtrOutput)
}

// ISL peer device serial number.
func (o ManagedswitchPortOutput) IslPeerDeviceSn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.IslPeerDeviceSn }).(pulumi.StringPtrOutput)
}

// ISL peer port name.
func (o ManagedswitchPortOutput) IslPeerPortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.IslPeerPortName }).(pulumi.StringPtrOutput)
}

// end Link Aggregation Control Protocol (LACP) messages every 30 seconds (slow) or every second (fast). Valid values: `slow`, `fast`.
func (o ManagedswitchPortOutput) LacpSpeed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.LacpSpeed }).(pulumi.StringPtrOutput)
}

// Limit the number of dynamic MAC addresses on this Port (1 - 128, 0 = no limit, default).
func (o ManagedswitchPortOutput) LearningLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.LearningLimit }).(pulumi.IntPtrOutput)
}

// Port link status. Valid values: `up`, `down`.
func (o ManagedswitchPortOutput) LinkStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.LinkStatus }).(pulumi.StringPtrOutput)
}

// LLDP port TLV profile.
func (o ManagedswitchPortOutput) LldpProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.LldpProfile }).(pulumi.StringPtrOutput)
}

// LLDP transmit and receive status. Valid values: `disable`, `rx-only`, `tx-only`, `tx-rx`.
func (o ManagedswitchPortOutput) LldpStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.LldpStatus }).(pulumi.StringPtrOutput)
}

// Enable/disable loop-guard on this interface, an STP optimization used to prevent network loops. Valid values: `enabled`, `disabled`.
func (o ManagedswitchPortOutput) LoopGuard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.LoopGuard }).(pulumi.StringPtrOutput)
}

// Loop-guard timeout (0 - 120 min, default = 45).
func (o ManagedswitchPortOutput) LoopGuardTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.LoopGuardTimeout }).(pulumi.IntPtrOutput)
}

// Port/Trunk MAC.
func (o ManagedswitchPortOutput) MacAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.MacAddr }).(pulumi.StringPtrOutput)
}

// Matched interface tags in the dynamic port policy.
func (o ManagedswitchPortOutput) MatchedDppIntfTags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.MatchedDppIntfTags }).(pulumi.StringPtrOutput)
}

// Matched child policy in the dynamic port policy.
func (o ManagedswitchPortOutput) MatchedDppPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.MatchedDppPolicy }).(pulumi.StringPtrOutput)
}

// Maximum size of LAG bundle (1 - 24, default = 24)
func (o ManagedswitchPortOutput) MaxBundle() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.MaxBundle }).(pulumi.IntPtrOutput)
}

// Enable/disable flooding of IGMP snooping traffic to this interface. Valid values: `enable`, `disable`.
func (o ManagedswitchPortOutput) McastSnoopingFloodTraffic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.McastSnoopingFloodTraffic }).(pulumi.StringPtrOutput)
}

// Enable/disable multi-chassis link aggregation (MCLAG). Valid values: `enable`, `disable`.
func (o ManagedswitchPortOutput) Mclag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.Mclag }).(pulumi.StringPtrOutput)
}

// MCLAG-ICL port.
func (o ManagedswitchPortOutput) MclagIclPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.MclagIclPort }).(pulumi.IntPtrOutput)
}

// Media type.
func (o ManagedswitchPortOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.MediaType }).(pulumi.StringPtrOutput)
}

// Port behavior after it withdraws because of loss of control packets. Valid values: `forward`, `block`.
func (o ManagedswitchPortOutput) MemberWithdrawalBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.MemberWithdrawalBehavior }).(pulumi.StringPtrOutput)
}

// Aggregated LAG bundle interfaces. The structure of `members` block is documented below.
func (o ManagedswitchPortOutput) Members() ManagedswitchPortMemberArrayOutput {
	return o.ApplyT(func(v ManagedswitchPort) []ManagedswitchPortMember { return v.Members }).(ManagedswitchPortMemberArrayOutput)
}

// Minimum size of LAG bundle (1 - 24, default = 1)
func (o ManagedswitchPortOutput) MinBundle() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.MinBundle }).(pulumi.IntPtrOutput)
}

// LACP mode: ignore and do not send control messages, or negotiate 802.3ad aggregation passively or actively. Valid values: `static`, `lacp-passive`, `lacp-active`.
func (o ManagedswitchPortOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// General peer to peer tunnel port.
func (o ManagedswitchPortOutput) P2pPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.P2pPort }).(pulumi.IntPtrOutput)
}

// Packet sampling rate (0 - 99999 p/sec).
func (o ManagedswitchPortOutput) PacketSampleRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.PacketSampleRate }).(pulumi.IntPtrOutput)
}

// Enable/disable packet sampling on this interface. Valid values: `enabled`, `disabled`.
func (o ManagedswitchPortOutput) PacketSampler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.PacketSampler }).(pulumi.StringPtrOutput)
}

// Configure ingress pause metering rate, in kbps (default = 0, disabled).
func (o ManagedswitchPortOutput) PauseMeter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.PauseMeter }).(pulumi.IntPtrOutput)
}

// Resume threshold for resuming traffic on ingress port. Valid values: `75%!`(MISSING), `50%!`(MISSING), `25%!`(MISSING).
func (o ManagedswitchPortOutput) PauseMeterResume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.PauseMeterResume }).(pulumi.StringPtrOutput)
}

// PoE capable.
func (o ManagedswitchPortOutput) PoeCapable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.PoeCapable }).(pulumi.IntPtrOutput)
}

// PoE maximum power.
func (o ManagedswitchPortOutput) PoeMaxPower() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.PoeMaxPower }).(pulumi.StringPtrOutput)
}

// PoE mode IEEE 802.3BT capable.
func (o ManagedswitchPortOutput) PoeModeBtCabable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.PoeModeBtCabable }).(pulumi.IntPtrOutput)
}

// Configure PoE port mode. Valid values: `ieee802-3af`, `ieee802-3at`, `ieee802-3bt`.
func (o ManagedswitchPortOutput) PoePortMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.PoePortMode }).(pulumi.StringPtrOutput)
}

// Configure PoE port power. Valid values: `normal`, `perpetual`, `perpetual-fast`.
func (o ManagedswitchPortOutput) PoePortPower() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.PoePortPower }).(pulumi.StringPtrOutput)
}

// Configure PoE port priority. Valid values: `critical-priority`, `high-priority`, `low-priority`, `medium-priority`.
func (o ManagedswitchPortOutput) PoePortPriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.PoePortPriority }).(pulumi.StringPtrOutput)
}

// Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
func (o ManagedswitchPortOutput) PoePreStandardDetection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.PoePreStandardDetection }).(pulumi.StringPtrOutput)
}

// PoE standard supported.
func (o ManagedswitchPortOutput) PoeStandard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.PoeStandard }).(pulumi.StringPtrOutput)
}

// Enable/disable PoE status. Valid values: `enable`, `disable`.
func (o ManagedswitchPortOutput) PoeStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.PoeStatus }).(pulumi.StringPtrOutput)
}

// Switch port name.
func (o ManagedswitchPortOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Port number.
func (o ManagedswitchPortOutput) PortNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.PortNumber }).(pulumi.IntPtrOutput)
}

// Switch port name.
func (o ManagedswitchPortOutput) PortOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.PortOwner }).(pulumi.StringPtrOutput)
}

// Switch controller dynamic port policy from available options.
func (o ManagedswitchPortOutput) PortPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.PortPolicy }).(pulumi.StringPtrOutput)
}

// Port prefix type.
func (o ManagedswitchPortOutput) PortPrefixType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.PortPrefixType }).(pulumi.IntPtrOutput)
}

// Switch controller authentication policy to apply to this managed switch from available options.
func (o ManagedswitchPortOutput) PortSecurityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.PortSecurityPolicy }).(pulumi.StringPtrOutput)
}

// Algorithm for aggregate port selection. Valid values: `src-mac`, `dst-mac`, `src-dst-mac`, `src-ip`, `dst-ip`, `src-dst-ip`.
func (o ManagedswitchPortOutput) PortSelectionCriteria() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.PortSelectionCriteria }).(pulumi.StringPtrOutput)
}

// PTP policy configuration.
func (o ManagedswitchPortOutput) PtpPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.PtpPolicy }).(pulumi.StringPtrOutput)
}

// Enable/disable PTP policy on this FortiSwitch port. Valid values: `disable`, `enable`.
func (o ManagedswitchPortOutput) PtpStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.PtpStatus }).(pulumi.StringPtrOutput)
}

// Switch controller QoS policy from available options.
func (o ManagedswitchPortOutput) QosPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.QosPolicy }).(pulumi.StringPtrOutput)
}

// Peer to Peer Restricted Authenticated port.
func (o ManagedswitchPortOutput) RestrictedAuthPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.RestrictedAuthPort }).(pulumi.IntPtrOutput)
}

// Enable/disable inter-operability with rapid PVST on this interface. Valid values: `disabled`, `enabled`.
func (o ManagedswitchPortOutput) RpvstPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.RpvstPort }).(pulumi.StringPtrOutput)
}

// sFlow sample direction. Valid values: `tx`, `rx`, `both`.
func (o ManagedswitchPortOutput) SampleDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.SampleDirection }).(pulumi.StringPtrOutput)
}

// sFlow sampler counter polling interval (1 - 255 sec).
func (o ManagedswitchPortOutput) SflowCounterInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.SflowCounterInterval }).(pulumi.IntPtrOutput)
}

// sFlow sampler sample rate (0 - 99999 p/sec).
func (o ManagedswitchPortOutput) SflowSampleRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.SflowSampleRate }).(pulumi.IntPtrOutput)
}

// Enable/disable sFlow protocol on this interface. Valid values: `enabled`, `disabled`.
func (o ManagedswitchPortOutput) SflowSampler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.SflowSampler }).(pulumi.StringPtrOutput)
}

// Switch port speed; default and available settings depend on hardware.
func (o ManagedswitchPortOutput) Speed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.Speed }).(pulumi.StringPtrOutput)
}

// Switch port speed mask.
func (o ManagedswitchPortOutput) SpeedMask() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.SpeedMask }).(pulumi.IntPtrOutput)
}

// Stacking port.
func (o ManagedswitchPortOutput) StackingPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.StackingPort }).(pulumi.IntPtrOutput)
}

// Switch port admin status: up or down. Valid values: `up`, `down`.
func (o ManagedswitchPortOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Enable or disable sticky-mac on the interface. Valid values: `enable`, `disable`.
func (o ManagedswitchPortOutput) StickyMac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.StickyMac }).(pulumi.StringPtrOutput)
}

// Switch controller storm control policy from available options.
func (o ManagedswitchPortOutput) StormControlPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.StormControlPolicy }).(pulumi.StringPtrOutput)
}

// Enable/disable STP BPDU guard on this interface. Valid values: `enabled`, `disabled`.
func (o ManagedswitchPortOutput) StpBpduGuard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.StpBpduGuard }).(pulumi.StringPtrOutput)
}

// BPDU Guard disabling protection (0 - 120 min).
func (o ManagedswitchPortOutput) StpBpduGuardTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.StpBpduGuardTimeout }).(pulumi.IntPtrOutput)
}

// Enable/disable STP root guard on this interface. Valid values: `enabled`, `disabled`.
func (o ManagedswitchPortOutput) StpRootGuard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.StpRootGuard }).(pulumi.StringPtrOutput)
}

// Enable/disable Spanning Tree Protocol (STP) on this interface. Valid values: `enabled`, `disabled`.
func (o ManagedswitchPortOutput) StpState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.StpState }).(pulumi.StringPtrOutput)
}

// Switch id.
func (o ManagedswitchPortOutput) SwitchId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.SwitchId }).(pulumi.StringPtrOutput)
}

// Interface type: physical or trunk port. Valid values: `physical`, `trunk`.
func (o ManagedswitchPortOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Configure switch port untagged vlans The structure of `untaggedVlans` block is documented below.
func (o ManagedswitchPortOutput) UntaggedVlans() ManagedswitchPortUntaggedVlanArrayOutput {
	return o.ApplyT(func(v ManagedswitchPort) []ManagedswitchPortUntaggedVlan { return v.UntaggedVlans }).(ManagedswitchPortUntaggedVlanArrayOutput)
}

// Virtualized switch port.
func (o ManagedswitchPortOutput) VirtualPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *int { return v.VirtualPort }).(pulumi.IntPtrOutput)
}

// Assign switch ports to a VLAN.
func (o ManagedswitchPortOutput) Vlan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPort) *string { return v.Vlan }).(pulumi.StringPtrOutput)
}

type ManagedswitchPortArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPort)(nil)).Elem()
}

func (o ManagedswitchPortArrayOutput) ToManagedswitchPortArrayOutput() ManagedswitchPortArrayOutput {
	return o
}

func (o ManagedswitchPortArrayOutput) ToManagedswitchPortArrayOutputWithContext(ctx context.Context) ManagedswitchPortArrayOutput {
	return o
}

func (o ManagedswitchPortArrayOutput) Index(i pulumi.IntInput) ManagedswitchPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchPort {
		return vs[0].([]ManagedswitchPort)[vs[1].(int)]
	}).(ManagedswitchPortOutput)
}

type ManagedswitchPortAclGroup struct {
	// ACL group name.
	Name *string `pulumi:"name"`
}

// ManagedswitchPortAclGroupInput is an input type that accepts ManagedswitchPortAclGroupArgs and ManagedswitchPortAclGroupOutput values.
// You can construct a concrete instance of `ManagedswitchPortAclGroupInput` via:
//
//	ManagedswitchPortAclGroupArgs{...}
type ManagedswitchPortAclGroupInput interface {
	pulumi.Input

	ToManagedswitchPortAclGroupOutput() ManagedswitchPortAclGroupOutput
	ToManagedswitchPortAclGroupOutputWithContext(context.Context) ManagedswitchPortAclGroupOutput
}

type ManagedswitchPortAclGroupArgs struct {
	// ACL group name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ManagedswitchPortAclGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPortAclGroup)(nil)).Elem()
}

func (i ManagedswitchPortAclGroupArgs) ToManagedswitchPortAclGroupOutput() ManagedswitchPortAclGroupOutput {
	return i.ToManagedswitchPortAclGroupOutputWithContext(context.Background())
}

func (i ManagedswitchPortAclGroupArgs) ToManagedswitchPortAclGroupOutputWithContext(ctx context.Context) ManagedswitchPortAclGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortAclGroupOutput)
}

// ManagedswitchPortAclGroupArrayInput is an input type that accepts ManagedswitchPortAclGroupArray and ManagedswitchPortAclGroupArrayOutput values.
// You can construct a concrete instance of `ManagedswitchPortAclGroupArrayInput` via:
//
//	ManagedswitchPortAclGroupArray{ ManagedswitchPortAclGroupArgs{...} }
type ManagedswitchPortAclGroupArrayInput interface {
	pulumi.Input

	ToManagedswitchPortAclGroupArrayOutput() ManagedswitchPortAclGroupArrayOutput
	ToManagedswitchPortAclGroupArrayOutputWithContext(context.Context) ManagedswitchPortAclGroupArrayOutput
}

type ManagedswitchPortAclGroupArray []ManagedswitchPortAclGroupInput

func (ManagedswitchPortAclGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPortAclGroup)(nil)).Elem()
}

func (i ManagedswitchPortAclGroupArray) ToManagedswitchPortAclGroupArrayOutput() ManagedswitchPortAclGroupArrayOutput {
	return i.ToManagedswitchPortAclGroupArrayOutputWithContext(context.Background())
}

func (i ManagedswitchPortAclGroupArray) ToManagedswitchPortAclGroupArrayOutputWithContext(ctx context.Context) ManagedswitchPortAclGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortAclGroupArrayOutput)
}

type ManagedswitchPortAclGroupOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortAclGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPortAclGroup)(nil)).Elem()
}

func (o ManagedswitchPortAclGroupOutput) ToManagedswitchPortAclGroupOutput() ManagedswitchPortAclGroupOutput {
	return o
}

func (o ManagedswitchPortAclGroupOutput) ToManagedswitchPortAclGroupOutputWithContext(ctx context.Context) ManagedswitchPortAclGroupOutput {
	return o
}

// ACL group name.
func (o ManagedswitchPortAclGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPortAclGroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ManagedswitchPortAclGroupArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortAclGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPortAclGroup)(nil)).Elem()
}

func (o ManagedswitchPortAclGroupArrayOutput) ToManagedswitchPortAclGroupArrayOutput() ManagedswitchPortAclGroupArrayOutput {
	return o
}

func (o ManagedswitchPortAclGroupArrayOutput) ToManagedswitchPortAclGroupArrayOutputWithContext(ctx context.Context) ManagedswitchPortAclGroupArrayOutput {
	return o
}

func (o ManagedswitchPortAclGroupArrayOutput) Index(i pulumi.IntInput) ManagedswitchPortAclGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchPortAclGroup {
		return vs[0].([]ManagedswitchPortAclGroup)[vs[1].(int)]
	}).(ManagedswitchPortAclGroupOutput)
}

type ManagedswitchPortAllowedVlan struct {
	// VLAN name.
	VlanName *string `pulumi:"vlanName"`
}

// ManagedswitchPortAllowedVlanInput is an input type that accepts ManagedswitchPortAllowedVlanArgs and ManagedswitchPortAllowedVlanOutput values.
// You can construct a concrete instance of `ManagedswitchPortAllowedVlanInput` via:
//
//	ManagedswitchPortAllowedVlanArgs{...}
type ManagedswitchPortAllowedVlanInput interface {
	pulumi.Input

	ToManagedswitchPortAllowedVlanOutput() ManagedswitchPortAllowedVlanOutput
	ToManagedswitchPortAllowedVlanOutputWithContext(context.Context) ManagedswitchPortAllowedVlanOutput
}

type ManagedswitchPortAllowedVlanArgs struct {
	// VLAN name.
	VlanName pulumi.StringPtrInput `pulumi:"vlanName"`
}

func (ManagedswitchPortAllowedVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPortAllowedVlan)(nil)).Elem()
}

func (i ManagedswitchPortAllowedVlanArgs) ToManagedswitchPortAllowedVlanOutput() ManagedswitchPortAllowedVlanOutput {
	return i.ToManagedswitchPortAllowedVlanOutputWithContext(context.Background())
}

func (i ManagedswitchPortAllowedVlanArgs) ToManagedswitchPortAllowedVlanOutputWithContext(ctx context.Context) ManagedswitchPortAllowedVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortAllowedVlanOutput)
}

// ManagedswitchPortAllowedVlanArrayInput is an input type that accepts ManagedswitchPortAllowedVlanArray and ManagedswitchPortAllowedVlanArrayOutput values.
// You can construct a concrete instance of `ManagedswitchPortAllowedVlanArrayInput` via:
//
//	ManagedswitchPortAllowedVlanArray{ ManagedswitchPortAllowedVlanArgs{...} }
type ManagedswitchPortAllowedVlanArrayInput interface {
	pulumi.Input

	ToManagedswitchPortAllowedVlanArrayOutput() ManagedswitchPortAllowedVlanArrayOutput
	ToManagedswitchPortAllowedVlanArrayOutputWithContext(context.Context) ManagedswitchPortAllowedVlanArrayOutput
}

type ManagedswitchPortAllowedVlanArray []ManagedswitchPortAllowedVlanInput

func (ManagedswitchPortAllowedVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPortAllowedVlan)(nil)).Elem()
}

func (i ManagedswitchPortAllowedVlanArray) ToManagedswitchPortAllowedVlanArrayOutput() ManagedswitchPortAllowedVlanArrayOutput {
	return i.ToManagedswitchPortAllowedVlanArrayOutputWithContext(context.Background())
}

func (i ManagedswitchPortAllowedVlanArray) ToManagedswitchPortAllowedVlanArrayOutputWithContext(ctx context.Context) ManagedswitchPortAllowedVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortAllowedVlanArrayOutput)
}

type ManagedswitchPortAllowedVlanOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortAllowedVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPortAllowedVlan)(nil)).Elem()
}

func (o ManagedswitchPortAllowedVlanOutput) ToManagedswitchPortAllowedVlanOutput() ManagedswitchPortAllowedVlanOutput {
	return o
}

func (o ManagedswitchPortAllowedVlanOutput) ToManagedswitchPortAllowedVlanOutputWithContext(ctx context.Context) ManagedswitchPortAllowedVlanOutput {
	return o
}

// VLAN name.
func (o ManagedswitchPortAllowedVlanOutput) VlanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPortAllowedVlan) *string { return v.VlanName }).(pulumi.StringPtrOutput)
}

type ManagedswitchPortAllowedVlanArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortAllowedVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPortAllowedVlan)(nil)).Elem()
}

func (o ManagedswitchPortAllowedVlanArrayOutput) ToManagedswitchPortAllowedVlanArrayOutput() ManagedswitchPortAllowedVlanArrayOutput {
	return o
}

func (o ManagedswitchPortAllowedVlanArrayOutput) ToManagedswitchPortAllowedVlanArrayOutputWithContext(ctx context.Context) ManagedswitchPortAllowedVlanArrayOutput {
	return o
}

func (o ManagedswitchPortAllowedVlanArrayOutput) Index(i pulumi.IntInput) ManagedswitchPortAllowedVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchPortAllowedVlan {
		return vs[0].([]ManagedswitchPortAllowedVlan)[vs[1].(int)]
	}).(ManagedswitchPortAllowedVlanOutput)
}

type ManagedswitchPortDhcpSnoopOption82Override struct {
	// Circuit ID string.
	CircuitId *string `pulumi:"circuitId"`
	// Remote ID string.
	RemoteId *string `pulumi:"remoteId"`
	// VLAN name.
	VlanName *string `pulumi:"vlanName"`
}

// ManagedswitchPortDhcpSnoopOption82OverrideInput is an input type that accepts ManagedswitchPortDhcpSnoopOption82OverrideArgs and ManagedswitchPortDhcpSnoopOption82OverrideOutput values.
// You can construct a concrete instance of `ManagedswitchPortDhcpSnoopOption82OverrideInput` via:
//
//	ManagedswitchPortDhcpSnoopOption82OverrideArgs{...}
type ManagedswitchPortDhcpSnoopOption82OverrideInput interface {
	pulumi.Input

	ToManagedswitchPortDhcpSnoopOption82OverrideOutput() ManagedswitchPortDhcpSnoopOption82OverrideOutput
	ToManagedswitchPortDhcpSnoopOption82OverrideOutputWithContext(context.Context) ManagedswitchPortDhcpSnoopOption82OverrideOutput
}

type ManagedswitchPortDhcpSnoopOption82OverrideArgs struct {
	// Circuit ID string.
	CircuitId pulumi.StringPtrInput `pulumi:"circuitId"`
	// Remote ID string.
	RemoteId pulumi.StringPtrInput `pulumi:"remoteId"`
	// VLAN name.
	VlanName pulumi.StringPtrInput `pulumi:"vlanName"`
}

func (ManagedswitchPortDhcpSnoopOption82OverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPortDhcpSnoopOption82Override)(nil)).Elem()
}

func (i ManagedswitchPortDhcpSnoopOption82OverrideArgs) ToManagedswitchPortDhcpSnoopOption82OverrideOutput() ManagedswitchPortDhcpSnoopOption82OverrideOutput {
	return i.ToManagedswitchPortDhcpSnoopOption82OverrideOutputWithContext(context.Background())
}

func (i ManagedswitchPortDhcpSnoopOption82OverrideArgs) ToManagedswitchPortDhcpSnoopOption82OverrideOutputWithContext(ctx context.Context) ManagedswitchPortDhcpSnoopOption82OverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortDhcpSnoopOption82OverrideOutput)
}

// ManagedswitchPortDhcpSnoopOption82OverrideArrayInput is an input type that accepts ManagedswitchPortDhcpSnoopOption82OverrideArray and ManagedswitchPortDhcpSnoopOption82OverrideArrayOutput values.
// You can construct a concrete instance of `ManagedswitchPortDhcpSnoopOption82OverrideArrayInput` via:
//
//	ManagedswitchPortDhcpSnoopOption82OverrideArray{ ManagedswitchPortDhcpSnoopOption82OverrideArgs{...} }
type ManagedswitchPortDhcpSnoopOption82OverrideArrayInput interface {
	pulumi.Input

	ToManagedswitchPortDhcpSnoopOption82OverrideArrayOutput() ManagedswitchPortDhcpSnoopOption82OverrideArrayOutput
	ToManagedswitchPortDhcpSnoopOption82OverrideArrayOutputWithContext(context.Context) ManagedswitchPortDhcpSnoopOption82OverrideArrayOutput
}

type ManagedswitchPortDhcpSnoopOption82OverrideArray []ManagedswitchPortDhcpSnoopOption82OverrideInput

func (ManagedswitchPortDhcpSnoopOption82OverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPortDhcpSnoopOption82Override)(nil)).Elem()
}

func (i ManagedswitchPortDhcpSnoopOption82OverrideArray) ToManagedswitchPortDhcpSnoopOption82OverrideArrayOutput() ManagedswitchPortDhcpSnoopOption82OverrideArrayOutput {
	return i.ToManagedswitchPortDhcpSnoopOption82OverrideArrayOutputWithContext(context.Background())
}

func (i ManagedswitchPortDhcpSnoopOption82OverrideArray) ToManagedswitchPortDhcpSnoopOption82OverrideArrayOutputWithContext(ctx context.Context) ManagedswitchPortDhcpSnoopOption82OverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortDhcpSnoopOption82OverrideArrayOutput)
}

type ManagedswitchPortDhcpSnoopOption82OverrideOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortDhcpSnoopOption82OverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPortDhcpSnoopOption82Override)(nil)).Elem()
}

func (o ManagedswitchPortDhcpSnoopOption82OverrideOutput) ToManagedswitchPortDhcpSnoopOption82OverrideOutput() ManagedswitchPortDhcpSnoopOption82OverrideOutput {
	return o
}

func (o ManagedswitchPortDhcpSnoopOption82OverrideOutput) ToManagedswitchPortDhcpSnoopOption82OverrideOutputWithContext(ctx context.Context) ManagedswitchPortDhcpSnoopOption82OverrideOutput {
	return o
}

// Circuit ID string.
func (o ManagedswitchPortDhcpSnoopOption82OverrideOutput) CircuitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPortDhcpSnoopOption82Override) *string { return v.CircuitId }).(pulumi.StringPtrOutput)
}

// Remote ID string.
func (o ManagedswitchPortDhcpSnoopOption82OverrideOutput) RemoteId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPortDhcpSnoopOption82Override) *string { return v.RemoteId }).(pulumi.StringPtrOutput)
}

// VLAN name.
func (o ManagedswitchPortDhcpSnoopOption82OverrideOutput) VlanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPortDhcpSnoopOption82Override) *string { return v.VlanName }).(pulumi.StringPtrOutput)
}

type ManagedswitchPortDhcpSnoopOption82OverrideArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortDhcpSnoopOption82OverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPortDhcpSnoopOption82Override)(nil)).Elem()
}

func (o ManagedswitchPortDhcpSnoopOption82OverrideArrayOutput) ToManagedswitchPortDhcpSnoopOption82OverrideArrayOutput() ManagedswitchPortDhcpSnoopOption82OverrideArrayOutput {
	return o
}

func (o ManagedswitchPortDhcpSnoopOption82OverrideArrayOutput) ToManagedswitchPortDhcpSnoopOption82OverrideArrayOutputWithContext(ctx context.Context) ManagedswitchPortDhcpSnoopOption82OverrideArrayOutput {
	return o
}

func (o ManagedswitchPortDhcpSnoopOption82OverrideArrayOutput) Index(i pulumi.IntInput) ManagedswitchPortDhcpSnoopOption82OverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchPortDhcpSnoopOption82Override {
		return vs[0].([]ManagedswitchPortDhcpSnoopOption82Override)[vs[1].(int)]
	}).(ManagedswitchPortDhcpSnoopOption82OverrideOutput)
}

type ManagedswitchPortExportTag struct {
	// Switch tag name.
	TagName *string `pulumi:"tagName"`
}

// ManagedswitchPortExportTagInput is an input type that accepts ManagedswitchPortExportTagArgs and ManagedswitchPortExportTagOutput values.
// You can construct a concrete instance of `ManagedswitchPortExportTagInput` via:
//
//	ManagedswitchPortExportTagArgs{...}
type ManagedswitchPortExportTagInput interface {
	pulumi.Input

	ToManagedswitchPortExportTagOutput() ManagedswitchPortExportTagOutput
	ToManagedswitchPortExportTagOutputWithContext(context.Context) ManagedswitchPortExportTagOutput
}

type ManagedswitchPortExportTagArgs struct {
	// Switch tag name.
	TagName pulumi.StringPtrInput `pulumi:"tagName"`
}

func (ManagedswitchPortExportTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPortExportTag)(nil)).Elem()
}

func (i ManagedswitchPortExportTagArgs) ToManagedswitchPortExportTagOutput() ManagedswitchPortExportTagOutput {
	return i.ToManagedswitchPortExportTagOutputWithContext(context.Background())
}

func (i ManagedswitchPortExportTagArgs) ToManagedswitchPortExportTagOutputWithContext(ctx context.Context) ManagedswitchPortExportTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortExportTagOutput)
}

// ManagedswitchPortExportTagArrayInput is an input type that accepts ManagedswitchPortExportTagArray and ManagedswitchPortExportTagArrayOutput values.
// You can construct a concrete instance of `ManagedswitchPortExportTagArrayInput` via:
//
//	ManagedswitchPortExportTagArray{ ManagedswitchPortExportTagArgs{...} }
type ManagedswitchPortExportTagArrayInput interface {
	pulumi.Input

	ToManagedswitchPortExportTagArrayOutput() ManagedswitchPortExportTagArrayOutput
	ToManagedswitchPortExportTagArrayOutputWithContext(context.Context) ManagedswitchPortExportTagArrayOutput
}

type ManagedswitchPortExportTagArray []ManagedswitchPortExportTagInput

func (ManagedswitchPortExportTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPortExportTag)(nil)).Elem()
}

func (i ManagedswitchPortExportTagArray) ToManagedswitchPortExportTagArrayOutput() ManagedswitchPortExportTagArrayOutput {
	return i.ToManagedswitchPortExportTagArrayOutputWithContext(context.Background())
}

func (i ManagedswitchPortExportTagArray) ToManagedswitchPortExportTagArrayOutputWithContext(ctx context.Context) ManagedswitchPortExportTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortExportTagArrayOutput)
}

type ManagedswitchPortExportTagOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortExportTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPortExportTag)(nil)).Elem()
}

func (o ManagedswitchPortExportTagOutput) ToManagedswitchPortExportTagOutput() ManagedswitchPortExportTagOutput {
	return o
}

func (o ManagedswitchPortExportTagOutput) ToManagedswitchPortExportTagOutputWithContext(ctx context.Context) ManagedswitchPortExportTagOutput {
	return o
}

// Switch tag name.
func (o ManagedswitchPortExportTagOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPortExportTag) *string { return v.TagName }).(pulumi.StringPtrOutput)
}

type ManagedswitchPortExportTagArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortExportTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPortExportTag)(nil)).Elem()
}

func (o ManagedswitchPortExportTagArrayOutput) ToManagedswitchPortExportTagArrayOutput() ManagedswitchPortExportTagArrayOutput {
	return o
}

func (o ManagedswitchPortExportTagArrayOutput) ToManagedswitchPortExportTagArrayOutputWithContext(ctx context.Context) ManagedswitchPortExportTagArrayOutput {
	return o
}

func (o ManagedswitchPortExportTagArrayOutput) Index(i pulumi.IntInput) ManagedswitchPortExportTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchPortExportTag {
		return vs[0].([]ManagedswitchPortExportTag)[vs[1].(int)]
	}).(ManagedswitchPortExportTagOutput)
}

type ManagedswitchPortFortiswitchAcl struct {
	// ACL ID.
	//
	// The `dhcpSnoopOption82Override` block supports:
	Id *int `pulumi:"id"`
}

// ManagedswitchPortFortiswitchAclInput is an input type that accepts ManagedswitchPortFortiswitchAclArgs and ManagedswitchPortFortiswitchAclOutput values.
// You can construct a concrete instance of `ManagedswitchPortFortiswitchAclInput` via:
//
//	ManagedswitchPortFortiswitchAclArgs{...}
type ManagedswitchPortFortiswitchAclInput interface {
	pulumi.Input

	ToManagedswitchPortFortiswitchAclOutput() ManagedswitchPortFortiswitchAclOutput
	ToManagedswitchPortFortiswitchAclOutputWithContext(context.Context) ManagedswitchPortFortiswitchAclOutput
}

type ManagedswitchPortFortiswitchAclArgs struct {
	// ACL ID.
	//
	// The `dhcpSnoopOption82Override` block supports:
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (ManagedswitchPortFortiswitchAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPortFortiswitchAcl)(nil)).Elem()
}

func (i ManagedswitchPortFortiswitchAclArgs) ToManagedswitchPortFortiswitchAclOutput() ManagedswitchPortFortiswitchAclOutput {
	return i.ToManagedswitchPortFortiswitchAclOutputWithContext(context.Background())
}

func (i ManagedswitchPortFortiswitchAclArgs) ToManagedswitchPortFortiswitchAclOutputWithContext(ctx context.Context) ManagedswitchPortFortiswitchAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortFortiswitchAclOutput)
}

// ManagedswitchPortFortiswitchAclArrayInput is an input type that accepts ManagedswitchPortFortiswitchAclArray and ManagedswitchPortFortiswitchAclArrayOutput values.
// You can construct a concrete instance of `ManagedswitchPortFortiswitchAclArrayInput` via:
//
//	ManagedswitchPortFortiswitchAclArray{ ManagedswitchPortFortiswitchAclArgs{...} }
type ManagedswitchPortFortiswitchAclArrayInput interface {
	pulumi.Input

	ToManagedswitchPortFortiswitchAclArrayOutput() ManagedswitchPortFortiswitchAclArrayOutput
	ToManagedswitchPortFortiswitchAclArrayOutputWithContext(context.Context) ManagedswitchPortFortiswitchAclArrayOutput
}

type ManagedswitchPortFortiswitchAclArray []ManagedswitchPortFortiswitchAclInput

func (ManagedswitchPortFortiswitchAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPortFortiswitchAcl)(nil)).Elem()
}

func (i ManagedswitchPortFortiswitchAclArray) ToManagedswitchPortFortiswitchAclArrayOutput() ManagedswitchPortFortiswitchAclArrayOutput {
	return i.ToManagedswitchPortFortiswitchAclArrayOutputWithContext(context.Background())
}

func (i ManagedswitchPortFortiswitchAclArray) ToManagedswitchPortFortiswitchAclArrayOutputWithContext(ctx context.Context) ManagedswitchPortFortiswitchAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortFortiswitchAclArrayOutput)
}

type ManagedswitchPortFortiswitchAclOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortFortiswitchAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPortFortiswitchAcl)(nil)).Elem()
}

func (o ManagedswitchPortFortiswitchAclOutput) ToManagedswitchPortFortiswitchAclOutput() ManagedswitchPortFortiswitchAclOutput {
	return o
}

func (o ManagedswitchPortFortiswitchAclOutput) ToManagedswitchPortFortiswitchAclOutputWithContext(ctx context.Context) ManagedswitchPortFortiswitchAclOutput {
	return o
}

// ACL ID.
//
// The `dhcpSnoopOption82Override` block supports:
func (o ManagedswitchPortFortiswitchAclOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchPortFortiswitchAcl) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type ManagedswitchPortFortiswitchAclArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortFortiswitchAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPortFortiswitchAcl)(nil)).Elem()
}

func (o ManagedswitchPortFortiswitchAclArrayOutput) ToManagedswitchPortFortiswitchAclArrayOutput() ManagedswitchPortFortiswitchAclArrayOutput {
	return o
}

func (o ManagedswitchPortFortiswitchAclArrayOutput) ToManagedswitchPortFortiswitchAclArrayOutputWithContext(ctx context.Context) ManagedswitchPortFortiswitchAclArrayOutput {
	return o
}

func (o ManagedswitchPortFortiswitchAclArrayOutput) Index(i pulumi.IntInput) ManagedswitchPortFortiswitchAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchPortFortiswitchAcl {
		return vs[0].([]ManagedswitchPortFortiswitchAcl)[vs[1].(int)]
	}).(ManagedswitchPortFortiswitchAclOutput)
}

type ManagedswitchPortInterfaceTag struct {
	// FortiSwitch port tag name when exported to a virtual port pool or matched to dynamic port policy.
	TagName *string `pulumi:"tagName"`
}

// ManagedswitchPortInterfaceTagInput is an input type that accepts ManagedswitchPortInterfaceTagArgs and ManagedswitchPortInterfaceTagOutput values.
// You can construct a concrete instance of `ManagedswitchPortInterfaceTagInput` via:
//
//	ManagedswitchPortInterfaceTagArgs{...}
type ManagedswitchPortInterfaceTagInput interface {
	pulumi.Input

	ToManagedswitchPortInterfaceTagOutput() ManagedswitchPortInterfaceTagOutput
	ToManagedswitchPortInterfaceTagOutputWithContext(context.Context) ManagedswitchPortInterfaceTagOutput
}

type ManagedswitchPortInterfaceTagArgs struct {
	// FortiSwitch port tag name when exported to a virtual port pool or matched to dynamic port policy.
	TagName pulumi.StringPtrInput `pulumi:"tagName"`
}

func (ManagedswitchPortInterfaceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPortInterfaceTag)(nil)).Elem()
}

func (i ManagedswitchPortInterfaceTagArgs) ToManagedswitchPortInterfaceTagOutput() ManagedswitchPortInterfaceTagOutput {
	return i.ToManagedswitchPortInterfaceTagOutputWithContext(context.Background())
}

func (i ManagedswitchPortInterfaceTagArgs) ToManagedswitchPortInterfaceTagOutputWithContext(ctx context.Context) ManagedswitchPortInterfaceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortInterfaceTagOutput)
}

// ManagedswitchPortInterfaceTagArrayInput is an input type that accepts ManagedswitchPortInterfaceTagArray and ManagedswitchPortInterfaceTagArrayOutput values.
// You can construct a concrete instance of `ManagedswitchPortInterfaceTagArrayInput` via:
//
//	ManagedswitchPortInterfaceTagArray{ ManagedswitchPortInterfaceTagArgs{...} }
type ManagedswitchPortInterfaceTagArrayInput interface {
	pulumi.Input

	ToManagedswitchPortInterfaceTagArrayOutput() ManagedswitchPortInterfaceTagArrayOutput
	ToManagedswitchPortInterfaceTagArrayOutputWithContext(context.Context) ManagedswitchPortInterfaceTagArrayOutput
}

type ManagedswitchPortInterfaceTagArray []ManagedswitchPortInterfaceTagInput

func (ManagedswitchPortInterfaceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPortInterfaceTag)(nil)).Elem()
}

func (i ManagedswitchPortInterfaceTagArray) ToManagedswitchPortInterfaceTagArrayOutput() ManagedswitchPortInterfaceTagArrayOutput {
	return i.ToManagedswitchPortInterfaceTagArrayOutputWithContext(context.Background())
}

func (i ManagedswitchPortInterfaceTagArray) ToManagedswitchPortInterfaceTagArrayOutputWithContext(ctx context.Context) ManagedswitchPortInterfaceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortInterfaceTagArrayOutput)
}

type ManagedswitchPortInterfaceTagOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortInterfaceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPortInterfaceTag)(nil)).Elem()
}

func (o ManagedswitchPortInterfaceTagOutput) ToManagedswitchPortInterfaceTagOutput() ManagedswitchPortInterfaceTagOutput {
	return o
}

func (o ManagedswitchPortInterfaceTagOutput) ToManagedswitchPortInterfaceTagOutputWithContext(ctx context.Context) ManagedswitchPortInterfaceTagOutput {
	return o
}

// FortiSwitch port tag name when exported to a virtual port pool or matched to dynamic port policy.
func (o ManagedswitchPortInterfaceTagOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPortInterfaceTag) *string { return v.TagName }).(pulumi.StringPtrOutput)
}

type ManagedswitchPortInterfaceTagArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortInterfaceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPortInterfaceTag)(nil)).Elem()
}

func (o ManagedswitchPortInterfaceTagArrayOutput) ToManagedswitchPortInterfaceTagArrayOutput() ManagedswitchPortInterfaceTagArrayOutput {
	return o
}

func (o ManagedswitchPortInterfaceTagArrayOutput) ToManagedswitchPortInterfaceTagArrayOutputWithContext(ctx context.Context) ManagedswitchPortInterfaceTagArrayOutput {
	return o
}

func (o ManagedswitchPortInterfaceTagArrayOutput) Index(i pulumi.IntInput) ManagedswitchPortInterfaceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchPortInterfaceTag {
		return vs[0].([]ManagedswitchPortInterfaceTag)[vs[1].(int)]
	}).(ManagedswitchPortInterfaceTagOutput)
}

type ManagedswitchPortMember struct {
	// Interface name from available options.
	MemberName *string `pulumi:"memberName"`
}

// ManagedswitchPortMemberInput is an input type that accepts ManagedswitchPortMemberArgs and ManagedswitchPortMemberOutput values.
// You can construct a concrete instance of `ManagedswitchPortMemberInput` via:
//
//	ManagedswitchPortMemberArgs{...}
type ManagedswitchPortMemberInput interface {
	pulumi.Input

	ToManagedswitchPortMemberOutput() ManagedswitchPortMemberOutput
	ToManagedswitchPortMemberOutputWithContext(context.Context) ManagedswitchPortMemberOutput
}

type ManagedswitchPortMemberArgs struct {
	// Interface name from available options.
	MemberName pulumi.StringPtrInput `pulumi:"memberName"`
}

func (ManagedswitchPortMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPortMember)(nil)).Elem()
}

func (i ManagedswitchPortMemberArgs) ToManagedswitchPortMemberOutput() ManagedswitchPortMemberOutput {
	return i.ToManagedswitchPortMemberOutputWithContext(context.Background())
}

func (i ManagedswitchPortMemberArgs) ToManagedswitchPortMemberOutputWithContext(ctx context.Context) ManagedswitchPortMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortMemberOutput)
}

// ManagedswitchPortMemberArrayInput is an input type that accepts ManagedswitchPortMemberArray and ManagedswitchPortMemberArrayOutput values.
// You can construct a concrete instance of `ManagedswitchPortMemberArrayInput` via:
//
//	ManagedswitchPortMemberArray{ ManagedswitchPortMemberArgs{...} }
type ManagedswitchPortMemberArrayInput interface {
	pulumi.Input

	ToManagedswitchPortMemberArrayOutput() ManagedswitchPortMemberArrayOutput
	ToManagedswitchPortMemberArrayOutputWithContext(context.Context) ManagedswitchPortMemberArrayOutput
}

type ManagedswitchPortMemberArray []ManagedswitchPortMemberInput

func (ManagedswitchPortMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPortMember)(nil)).Elem()
}

func (i ManagedswitchPortMemberArray) ToManagedswitchPortMemberArrayOutput() ManagedswitchPortMemberArrayOutput {
	return i.ToManagedswitchPortMemberArrayOutputWithContext(context.Background())
}

func (i ManagedswitchPortMemberArray) ToManagedswitchPortMemberArrayOutputWithContext(ctx context.Context) ManagedswitchPortMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortMemberArrayOutput)
}

type ManagedswitchPortMemberOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPortMember)(nil)).Elem()
}

func (o ManagedswitchPortMemberOutput) ToManagedswitchPortMemberOutput() ManagedswitchPortMemberOutput {
	return o
}

func (o ManagedswitchPortMemberOutput) ToManagedswitchPortMemberOutputWithContext(ctx context.Context) ManagedswitchPortMemberOutput {
	return o
}

// Interface name from available options.
func (o ManagedswitchPortMemberOutput) MemberName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPortMember) *string { return v.MemberName }).(pulumi.StringPtrOutput)
}

type ManagedswitchPortMemberArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPortMember)(nil)).Elem()
}

func (o ManagedswitchPortMemberArrayOutput) ToManagedswitchPortMemberArrayOutput() ManagedswitchPortMemberArrayOutput {
	return o
}

func (o ManagedswitchPortMemberArrayOutput) ToManagedswitchPortMemberArrayOutputWithContext(ctx context.Context) ManagedswitchPortMemberArrayOutput {
	return o
}

func (o ManagedswitchPortMemberArrayOutput) Index(i pulumi.IntInput) ManagedswitchPortMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchPortMember {
		return vs[0].([]ManagedswitchPortMember)[vs[1].(int)]
	}).(ManagedswitchPortMemberOutput)
}

type ManagedswitchPortUntaggedVlan struct {
	// VLAN name.
	VlanName *string `pulumi:"vlanName"`
}

// ManagedswitchPortUntaggedVlanInput is an input type that accepts ManagedswitchPortUntaggedVlanArgs and ManagedswitchPortUntaggedVlanOutput values.
// You can construct a concrete instance of `ManagedswitchPortUntaggedVlanInput` via:
//
//	ManagedswitchPortUntaggedVlanArgs{...}
type ManagedswitchPortUntaggedVlanInput interface {
	pulumi.Input

	ToManagedswitchPortUntaggedVlanOutput() ManagedswitchPortUntaggedVlanOutput
	ToManagedswitchPortUntaggedVlanOutputWithContext(context.Context) ManagedswitchPortUntaggedVlanOutput
}

type ManagedswitchPortUntaggedVlanArgs struct {
	// VLAN name.
	VlanName pulumi.StringPtrInput `pulumi:"vlanName"`
}

func (ManagedswitchPortUntaggedVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPortUntaggedVlan)(nil)).Elem()
}

func (i ManagedswitchPortUntaggedVlanArgs) ToManagedswitchPortUntaggedVlanOutput() ManagedswitchPortUntaggedVlanOutput {
	return i.ToManagedswitchPortUntaggedVlanOutputWithContext(context.Background())
}

func (i ManagedswitchPortUntaggedVlanArgs) ToManagedswitchPortUntaggedVlanOutputWithContext(ctx context.Context) ManagedswitchPortUntaggedVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortUntaggedVlanOutput)
}

// ManagedswitchPortUntaggedVlanArrayInput is an input type that accepts ManagedswitchPortUntaggedVlanArray and ManagedswitchPortUntaggedVlanArrayOutput values.
// You can construct a concrete instance of `ManagedswitchPortUntaggedVlanArrayInput` via:
//
//	ManagedswitchPortUntaggedVlanArray{ ManagedswitchPortUntaggedVlanArgs{...} }
type ManagedswitchPortUntaggedVlanArrayInput interface {
	pulumi.Input

	ToManagedswitchPortUntaggedVlanArrayOutput() ManagedswitchPortUntaggedVlanArrayOutput
	ToManagedswitchPortUntaggedVlanArrayOutputWithContext(context.Context) ManagedswitchPortUntaggedVlanArrayOutput
}

type ManagedswitchPortUntaggedVlanArray []ManagedswitchPortUntaggedVlanInput

func (ManagedswitchPortUntaggedVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPortUntaggedVlan)(nil)).Elem()
}

func (i ManagedswitchPortUntaggedVlanArray) ToManagedswitchPortUntaggedVlanArrayOutput() ManagedswitchPortUntaggedVlanArrayOutput {
	return i.ToManagedswitchPortUntaggedVlanArrayOutputWithContext(context.Background())
}

func (i ManagedswitchPortUntaggedVlanArray) ToManagedswitchPortUntaggedVlanArrayOutputWithContext(ctx context.Context) ManagedswitchPortUntaggedVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchPortUntaggedVlanArrayOutput)
}

type ManagedswitchPortUntaggedVlanOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortUntaggedVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchPortUntaggedVlan)(nil)).Elem()
}

func (o ManagedswitchPortUntaggedVlanOutput) ToManagedswitchPortUntaggedVlanOutput() ManagedswitchPortUntaggedVlanOutput {
	return o
}

func (o ManagedswitchPortUntaggedVlanOutput) ToManagedswitchPortUntaggedVlanOutputWithContext(ctx context.Context) ManagedswitchPortUntaggedVlanOutput {
	return o
}

// VLAN name.
func (o ManagedswitchPortUntaggedVlanOutput) VlanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchPortUntaggedVlan) *string { return v.VlanName }).(pulumi.StringPtrOutput)
}

type ManagedswitchPortUntaggedVlanArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchPortUntaggedVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchPortUntaggedVlan)(nil)).Elem()
}

func (o ManagedswitchPortUntaggedVlanArrayOutput) ToManagedswitchPortUntaggedVlanArrayOutput() ManagedswitchPortUntaggedVlanArrayOutput {
	return o
}

func (o ManagedswitchPortUntaggedVlanArrayOutput) ToManagedswitchPortUntaggedVlanArrayOutputWithContext(ctx context.Context) ManagedswitchPortUntaggedVlanArrayOutput {
	return o
}

func (o ManagedswitchPortUntaggedVlanArrayOutput) Index(i pulumi.IntInput) ManagedswitchPortUntaggedVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchPortUntaggedVlan {
		return vs[0].([]ManagedswitchPortUntaggedVlan)[vs[1].(int)]
	}).(ManagedswitchPortUntaggedVlanOutput)
}

type ManagedswitchRemoteLog struct {
	// Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
	Csv *string `pulumi:"csv"`
	// Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
	Facility *string `pulumi:"facility"`
	// Remote log name.
	Name *string `pulumi:"name"`
	// Remote syslog server listening port.
	Port *int `pulumi:"port"`
	// IPv4 address of the remote syslog server.
	Server *string `pulumi:"server"`
	// Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity *string `pulumi:"severity"`
	// Enable/disable logging by FortiSwitch device to a remote syslog server. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
}

// ManagedswitchRemoteLogInput is an input type that accepts ManagedswitchRemoteLogArgs and ManagedswitchRemoteLogOutput values.
// You can construct a concrete instance of `ManagedswitchRemoteLogInput` via:
//
//	ManagedswitchRemoteLogArgs{...}
type ManagedswitchRemoteLogInput interface {
	pulumi.Input

	ToManagedswitchRemoteLogOutput() ManagedswitchRemoteLogOutput
	ToManagedswitchRemoteLogOutputWithContext(context.Context) ManagedswitchRemoteLogOutput
}

type ManagedswitchRemoteLogArgs struct {
	// Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
	Csv pulumi.StringPtrInput `pulumi:"csv"`
	// Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
	Facility pulumi.StringPtrInput `pulumi:"facility"`
	// Remote log name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Remote syslog server listening port.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// IPv4 address of the remote syslog server.
	Server pulumi.StringPtrInput `pulumi:"server"`
	// Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Enable/disable logging by FortiSwitch device to a remote syslog server. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ManagedswitchRemoteLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchRemoteLog)(nil)).Elem()
}

func (i ManagedswitchRemoteLogArgs) ToManagedswitchRemoteLogOutput() ManagedswitchRemoteLogOutput {
	return i.ToManagedswitchRemoteLogOutputWithContext(context.Background())
}

func (i ManagedswitchRemoteLogArgs) ToManagedswitchRemoteLogOutputWithContext(ctx context.Context) ManagedswitchRemoteLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchRemoteLogOutput)
}

// ManagedswitchRemoteLogArrayInput is an input type that accepts ManagedswitchRemoteLogArray and ManagedswitchRemoteLogArrayOutput values.
// You can construct a concrete instance of `ManagedswitchRemoteLogArrayInput` via:
//
//	ManagedswitchRemoteLogArray{ ManagedswitchRemoteLogArgs{...} }
type ManagedswitchRemoteLogArrayInput interface {
	pulumi.Input

	ToManagedswitchRemoteLogArrayOutput() ManagedswitchRemoteLogArrayOutput
	ToManagedswitchRemoteLogArrayOutputWithContext(context.Context) ManagedswitchRemoteLogArrayOutput
}

type ManagedswitchRemoteLogArray []ManagedswitchRemoteLogInput

func (ManagedswitchRemoteLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchRemoteLog)(nil)).Elem()
}

func (i ManagedswitchRemoteLogArray) ToManagedswitchRemoteLogArrayOutput() ManagedswitchRemoteLogArrayOutput {
	return i.ToManagedswitchRemoteLogArrayOutputWithContext(context.Background())
}

func (i ManagedswitchRemoteLogArray) ToManagedswitchRemoteLogArrayOutputWithContext(ctx context.Context) ManagedswitchRemoteLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchRemoteLogArrayOutput)
}

type ManagedswitchRemoteLogOutput struct{ *pulumi.OutputState }

func (ManagedswitchRemoteLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchRemoteLog)(nil)).Elem()
}

func (o ManagedswitchRemoteLogOutput) ToManagedswitchRemoteLogOutput() ManagedswitchRemoteLogOutput {
	return o
}

func (o ManagedswitchRemoteLogOutput) ToManagedswitchRemoteLogOutputWithContext(ctx context.Context) ManagedswitchRemoteLogOutput {
	return o
}

// Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
func (o ManagedswitchRemoteLogOutput) Csv() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchRemoteLog) *string { return v.Csv }).(pulumi.StringPtrOutput)
}

// Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
func (o ManagedswitchRemoteLogOutput) Facility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchRemoteLog) *string { return v.Facility }).(pulumi.StringPtrOutput)
}

// Remote log name.
func (o ManagedswitchRemoteLogOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchRemoteLog) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Remote syslog server listening port.
func (o ManagedswitchRemoteLogOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchRemoteLog) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// IPv4 address of the remote syslog server.
func (o ManagedswitchRemoteLogOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchRemoteLog) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o ManagedswitchRemoteLogOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchRemoteLog) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Enable/disable logging by FortiSwitch device to a remote syslog server. Valid values: `enable`, `disable`.
func (o ManagedswitchRemoteLogOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchRemoteLog) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ManagedswitchRemoteLogArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchRemoteLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchRemoteLog)(nil)).Elem()
}

func (o ManagedswitchRemoteLogArrayOutput) ToManagedswitchRemoteLogArrayOutput() ManagedswitchRemoteLogArrayOutput {
	return o
}

func (o ManagedswitchRemoteLogArrayOutput) ToManagedswitchRemoteLogArrayOutputWithContext(ctx context.Context) ManagedswitchRemoteLogArrayOutput {
	return o
}

func (o ManagedswitchRemoteLogArrayOutput) Index(i pulumi.IntInput) ManagedswitchRemoteLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchRemoteLog {
		return vs[0].([]ManagedswitchRemoteLog)[vs[1].(int)]
	}).(ManagedswitchRemoteLogOutput)
}

type ManagedswitchRouteOffloadRouter struct {
	// Router IP address.
	RouterIp *string `pulumi:"routerIp"`
	// VLAN name.
	VlanName *string `pulumi:"vlanName"`
}

// ManagedswitchRouteOffloadRouterInput is an input type that accepts ManagedswitchRouteOffloadRouterArgs and ManagedswitchRouteOffloadRouterOutput values.
// You can construct a concrete instance of `ManagedswitchRouteOffloadRouterInput` via:
//
//	ManagedswitchRouteOffloadRouterArgs{...}
type ManagedswitchRouteOffloadRouterInput interface {
	pulumi.Input

	ToManagedswitchRouteOffloadRouterOutput() ManagedswitchRouteOffloadRouterOutput
	ToManagedswitchRouteOffloadRouterOutputWithContext(context.Context) ManagedswitchRouteOffloadRouterOutput
}

type ManagedswitchRouteOffloadRouterArgs struct {
	// Router IP address.
	RouterIp pulumi.StringPtrInput `pulumi:"routerIp"`
	// VLAN name.
	VlanName pulumi.StringPtrInput `pulumi:"vlanName"`
}

func (ManagedswitchRouteOffloadRouterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchRouteOffloadRouter)(nil)).Elem()
}

func (i ManagedswitchRouteOffloadRouterArgs) ToManagedswitchRouteOffloadRouterOutput() ManagedswitchRouteOffloadRouterOutput {
	return i.ToManagedswitchRouteOffloadRouterOutputWithContext(context.Background())
}

func (i ManagedswitchRouteOffloadRouterArgs) ToManagedswitchRouteOffloadRouterOutputWithContext(ctx context.Context) ManagedswitchRouteOffloadRouterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchRouteOffloadRouterOutput)
}

// ManagedswitchRouteOffloadRouterArrayInput is an input type that accepts ManagedswitchRouteOffloadRouterArray and ManagedswitchRouteOffloadRouterArrayOutput values.
// You can construct a concrete instance of `ManagedswitchRouteOffloadRouterArrayInput` via:
//
//	ManagedswitchRouteOffloadRouterArray{ ManagedswitchRouteOffloadRouterArgs{...} }
type ManagedswitchRouteOffloadRouterArrayInput interface {
	pulumi.Input

	ToManagedswitchRouteOffloadRouterArrayOutput() ManagedswitchRouteOffloadRouterArrayOutput
	ToManagedswitchRouteOffloadRouterArrayOutputWithContext(context.Context) ManagedswitchRouteOffloadRouterArrayOutput
}

type ManagedswitchRouteOffloadRouterArray []ManagedswitchRouteOffloadRouterInput

func (ManagedswitchRouteOffloadRouterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchRouteOffloadRouter)(nil)).Elem()
}

func (i ManagedswitchRouteOffloadRouterArray) ToManagedswitchRouteOffloadRouterArrayOutput() ManagedswitchRouteOffloadRouterArrayOutput {
	return i.ToManagedswitchRouteOffloadRouterArrayOutputWithContext(context.Background())
}

func (i ManagedswitchRouteOffloadRouterArray) ToManagedswitchRouteOffloadRouterArrayOutputWithContext(ctx context.Context) ManagedswitchRouteOffloadRouterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchRouteOffloadRouterArrayOutput)
}

type ManagedswitchRouteOffloadRouterOutput struct{ *pulumi.OutputState }

func (ManagedswitchRouteOffloadRouterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchRouteOffloadRouter)(nil)).Elem()
}

func (o ManagedswitchRouteOffloadRouterOutput) ToManagedswitchRouteOffloadRouterOutput() ManagedswitchRouteOffloadRouterOutput {
	return o
}

func (o ManagedswitchRouteOffloadRouterOutput) ToManagedswitchRouteOffloadRouterOutputWithContext(ctx context.Context) ManagedswitchRouteOffloadRouterOutput {
	return o
}

// Router IP address.
func (o ManagedswitchRouteOffloadRouterOutput) RouterIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchRouteOffloadRouter) *string { return v.RouterIp }).(pulumi.StringPtrOutput)
}

// VLAN name.
func (o ManagedswitchRouteOffloadRouterOutput) VlanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchRouteOffloadRouter) *string { return v.VlanName }).(pulumi.StringPtrOutput)
}

type ManagedswitchRouteOffloadRouterArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchRouteOffloadRouterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchRouteOffloadRouter)(nil)).Elem()
}

func (o ManagedswitchRouteOffloadRouterArrayOutput) ToManagedswitchRouteOffloadRouterArrayOutput() ManagedswitchRouteOffloadRouterArrayOutput {
	return o
}

func (o ManagedswitchRouteOffloadRouterArrayOutput) ToManagedswitchRouteOffloadRouterArrayOutputWithContext(ctx context.Context) ManagedswitchRouteOffloadRouterArrayOutput {
	return o
}

func (o ManagedswitchRouteOffloadRouterArrayOutput) Index(i pulumi.IntInput) ManagedswitchRouteOffloadRouterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchRouteOffloadRouter {
		return vs[0].([]ManagedswitchRouteOffloadRouter)[vs[1].(int)]
	}).(ManagedswitchRouteOffloadRouterOutput)
}

type ManagedswitchSnmpCommunity struct {
	// SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
	Events *string `pulumi:"events"`
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts []ManagedswitchSnmpCommunityHost `pulumi:"hosts"`
	// SNMP community ID.
	Id *int `pulumi:"id"`
	// SNMP community name.
	Name *string `pulumi:"name"`
	// SNMP v1 query port (default = 161).
	QueryV1Port *int `pulumi:"queryV1Port"`
	// Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
	QueryV1Status *string `pulumi:"queryV1Status"`
	// SNMP v2c query port (default = 161).
	QueryV2cPort *int `pulumi:"queryV2cPort"`
	// Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
	QueryV2cStatus *string `pulumi:"queryV2cStatus"`
	// Enable/disable this SNMP community. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// SNMP v2c trap local port (default = 162).
	TrapV1Lport *int `pulumi:"trapV1Lport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV1Rport *int `pulumi:"trapV1Rport"`
	// Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
	TrapV1Status *string `pulumi:"trapV1Status"`
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport *int `pulumi:"trapV2cLport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport *int `pulumi:"trapV2cRport"`
	// Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
	TrapV2cStatus *string `pulumi:"trapV2cStatus"`
}

// ManagedswitchSnmpCommunityInput is an input type that accepts ManagedswitchSnmpCommunityArgs and ManagedswitchSnmpCommunityOutput values.
// You can construct a concrete instance of `ManagedswitchSnmpCommunityInput` via:
//
//	ManagedswitchSnmpCommunityArgs{...}
type ManagedswitchSnmpCommunityInput interface {
	pulumi.Input

	ToManagedswitchSnmpCommunityOutput() ManagedswitchSnmpCommunityOutput
	ToManagedswitchSnmpCommunityOutputWithContext(context.Context) ManagedswitchSnmpCommunityOutput
}

type ManagedswitchSnmpCommunityArgs struct {
	// SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
	Events pulumi.StringPtrInput `pulumi:"events"`
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts ManagedswitchSnmpCommunityHostArrayInput `pulumi:"hosts"`
	// SNMP community ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// SNMP community name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// SNMP v1 query port (default = 161).
	QueryV1Port pulumi.IntPtrInput `pulumi:"queryV1Port"`
	// Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
	QueryV1Status pulumi.StringPtrInput `pulumi:"queryV1Status"`
	// SNMP v2c query port (default = 161).
	QueryV2cPort pulumi.IntPtrInput `pulumi:"queryV2cPort"`
	// Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
	QueryV2cStatus pulumi.StringPtrInput `pulumi:"queryV2cStatus"`
	// Enable/disable this SNMP community. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// SNMP v2c trap local port (default = 162).
	TrapV1Lport pulumi.IntPtrInput `pulumi:"trapV1Lport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV1Rport pulumi.IntPtrInput `pulumi:"trapV1Rport"`
	// Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
	TrapV1Status pulumi.StringPtrInput `pulumi:"trapV1Status"`
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport pulumi.IntPtrInput `pulumi:"trapV2cLport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport pulumi.IntPtrInput `pulumi:"trapV2cRport"`
	// Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
	TrapV2cStatus pulumi.StringPtrInput `pulumi:"trapV2cStatus"`
}

func (ManagedswitchSnmpCommunityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchSnmpCommunity)(nil)).Elem()
}

func (i ManagedswitchSnmpCommunityArgs) ToManagedswitchSnmpCommunityOutput() ManagedswitchSnmpCommunityOutput {
	return i.ToManagedswitchSnmpCommunityOutputWithContext(context.Background())
}

func (i ManagedswitchSnmpCommunityArgs) ToManagedswitchSnmpCommunityOutputWithContext(ctx context.Context) ManagedswitchSnmpCommunityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSnmpCommunityOutput)
}

// ManagedswitchSnmpCommunityArrayInput is an input type that accepts ManagedswitchSnmpCommunityArray and ManagedswitchSnmpCommunityArrayOutput values.
// You can construct a concrete instance of `ManagedswitchSnmpCommunityArrayInput` via:
//
//	ManagedswitchSnmpCommunityArray{ ManagedswitchSnmpCommunityArgs{...} }
type ManagedswitchSnmpCommunityArrayInput interface {
	pulumi.Input

	ToManagedswitchSnmpCommunityArrayOutput() ManagedswitchSnmpCommunityArrayOutput
	ToManagedswitchSnmpCommunityArrayOutputWithContext(context.Context) ManagedswitchSnmpCommunityArrayOutput
}

type ManagedswitchSnmpCommunityArray []ManagedswitchSnmpCommunityInput

func (ManagedswitchSnmpCommunityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchSnmpCommunity)(nil)).Elem()
}

func (i ManagedswitchSnmpCommunityArray) ToManagedswitchSnmpCommunityArrayOutput() ManagedswitchSnmpCommunityArrayOutput {
	return i.ToManagedswitchSnmpCommunityArrayOutputWithContext(context.Background())
}

func (i ManagedswitchSnmpCommunityArray) ToManagedswitchSnmpCommunityArrayOutputWithContext(ctx context.Context) ManagedswitchSnmpCommunityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSnmpCommunityArrayOutput)
}

type ManagedswitchSnmpCommunityOutput struct{ *pulumi.OutputState }

func (ManagedswitchSnmpCommunityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchSnmpCommunity)(nil)).Elem()
}

func (o ManagedswitchSnmpCommunityOutput) ToManagedswitchSnmpCommunityOutput() ManagedswitchSnmpCommunityOutput {
	return o
}

func (o ManagedswitchSnmpCommunityOutput) ToManagedswitchSnmpCommunityOutputWithContext(ctx context.Context) ManagedswitchSnmpCommunityOutput {
	return o
}

// SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
func (o ManagedswitchSnmpCommunityOutput) Events() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpCommunity) *string { return v.Events }).(pulumi.StringPtrOutput)
}

// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
func (o ManagedswitchSnmpCommunityOutput) Hosts() ManagedswitchSnmpCommunityHostArrayOutput {
	return o.ApplyT(func(v ManagedswitchSnmpCommunity) []ManagedswitchSnmpCommunityHost { return v.Hosts }).(ManagedswitchSnmpCommunityHostArrayOutput)
}

// SNMP community ID.
func (o ManagedswitchSnmpCommunityOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpCommunity) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// SNMP community name.
func (o ManagedswitchSnmpCommunityOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpCommunity) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// SNMP v1 query port (default = 161).
func (o ManagedswitchSnmpCommunityOutput) QueryV1Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpCommunity) *int { return v.QueryV1Port }).(pulumi.IntPtrOutput)
}

// Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
func (o ManagedswitchSnmpCommunityOutput) QueryV1Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpCommunity) *string { return v.QueryV1Status }).(pulumi.StringPtrOutput)
}

// SNMP v2c query port (default = 161).
func (o ManagedswitchSnmpCommunityOutput) QueryV2cPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpCommunity) *int { return v.QueryV2cPort }).(pulumi.IntPtrOutput)
}

// Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
func (o ManagedswitchSnmpCommunityOutput) QueryV2cStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpCommunity) *string { return v.QueryV2cStatus }).(pulumi.StringPtrOutput)
}

// Enable/disable this SNMP community. Valid values: `disable`, `enable`.
func (o ManagedswitchSnmpCommunityOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpCommunity) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// SNMP v2c trap local port (default = 162).
func (o ManagedswitchSnmpCommunityOutput) TrapV1Lport() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpCommunity) *int { return v.TrapV1Lport }).(pulumi.IntPtrOutput)
}

// SNMP v2c trap remote port (default = 162).
func (o ManagedswitchSnmpCommunityOutput) TrapV1Rport() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpCommunity) *int { return v.TrapV1Rport }).(pulumi.IntPtrOutput)
}

// Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
func (o ManagedswitchSnmpCommunityOutput) TrapV1Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpCommunity) *string { return v.TrapV1Status }).(pulumi.StringPtrOutput)
}

// SNMP v2c trap local port (default = 162).
func (o ManagedswitchSnmpCommunityOutput) TrapV2cLport() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpCommunity) *int { return v.TrapV2cLport }).(pulumi.IntPtrOutput)
}

// SNMP v2c trap remote port (default = 162).
func (o ManagedswitchSnmpCommunityOutput) TrapV2cRport() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpCommunity) *int { return v.TrapV2cRport }).(pulumi.IntPtrOutput)
}

// Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
func (o ManagedswitchSnmpCommunityOutput) TrapV2cStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpCommunity) *string { return v.TrapV2cStatus }).(pulumi.StringPtrOutput)
}

type ManagedswitchSnmpCommunityArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchSnmpCommunityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchSnmpCommunity)(nil)).Elem()
}

func (o ManagedswitchSnmpCommunityArrayOutput) ToManagedswitchSnmpCommunityArrayOutput() ManagedswitchSnmpCommunityArrayOutput {
	return o
}

func (o ManagedswitchSnmpCommunityArrayOutput) ToManagedswitchSnmpCommunityArrayOutputWithContext(ctx context.Context) ManagedswitchSnmpCommunityArrayOutput {
	return o
}

func (o ManagedswitchSnmpCommunityArrayOutput) Index(i pulumi.IntInput) ManagedswitchSnmpCommunityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchSnmpCommunity {
		return vs[0].([]ManagedswitchSnmpCommunity)[vs[1].(int)]
	}).(ManagedswitchSnmpCommunityOutput)
}

type ManagedswitchSnmpCommunityHost struct {
	// Host entry ID.
	Id *int `pulumi:"id"`
	// IPv4 address of the SNMP manager (host).
	Ip *string `pulumi:"ip"`
}

// ManagedswitchSnmpCommunityHostInput is an input type that accepts ManagedswitchSnmpCommunityHostArgs and ManagedswitchSnmpCommunityHostOutput values.
// You can construct a concrete instance of `ManagedswitchSnmpCommunityHostInput` via:
//
//	ManagedswitchSnmpCommunityHostArgs{...}
type ManagedswitchSnmpCommunityHostInput interface {
	pulumi.Input

	ToManagedswitchSnmpCommunityHostOutput() ManagedswitchSnmpCommunityHostOutput
	ToManagedswitchSnmpCommunityHostOutputWithContext(context.Context) ManagedswitchSnmpCommunityHostOutput
}

type ManagedswitchSnmpCommunityHostArgs struct {
	// Host entry ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// IPv4 address of the SNMP manager (host).
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (ManagedswitchSnmpCommunityHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchSnmpCommunityHost)(nil)).Elem()
}

func (i ManagedswitchSnmpCommunityHostArgs) ToManagedswitchSnmpCommunityHostOutput() ManagedswitchSnmpCommunityHostOutput {
	return i.ToManagedswitchSnmpCommunityHostOutputWithContext(context.Background())
}

func (i ManagedswitchSnmpCommunityHostArgs) ToManagedswitchSnmpCommunityHostOutputWithContext(ctx context.Context) ManagedswitchSnmpCommunityHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSnmpCommunityHostOutput)
}

// ManagedswitchSnmpCommunityHostArrayInput is an input type that accepts ManagedswitchSnmpCommunityHostArray and ManagedswitchSnmpCommunityHostArrayOutput values.
// You can construct a concrete instance of `ManagedswitchSnmpCommunityHostArrayInput` via:
//
//	ManagedswitchSnmpCommunityHostArray{ ManagedswitchSnmpCommunityHostArgs{...} }
type ManagedswitchSnmpCommunityHostArrayInput interface {
	pulumi.Input

	ToManagedswitchSnmpCommunityHostArrayOutput() ManagedswitchSnmpCommunityHostArrayOutput
	ToManagedswitchSnmpCommunityHostArrayOutputWithContext(context.Context) ManagedswitchSnmpCommunityHostArrayOutput
}

type ManagedswitchSnmpCommunityHostArray []ManagedswitchSnmpCommunityHostInput

func (ManagedswitchSnmpCommunityHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchSnmpCommunityHost)(nil)).Elem()
}

func (i ManagedswitchSnmpCommunityHostArray) ToManagedswitchSnmpCommunityHostArrayOutput() ManagedswitchSnmpCommunityHostArrayOutput {
	return i.ToManagedswitchSnmpCommunityHostArrayOutputWithContext(context.Background())
}

func (i ManagedswitchSnmpCommunityHostArray) ToManagedswitchSnmpCommunityHostArrayOutputWithContext(ctx context.Context) ManagedswitchSnmpCommunityHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSnmpCommunityHostArrayOutput)
}

type ManagedswitchSnmpCommunityHostOutput struct{ *pulumi.OutputState }

func (ManagedswitchSnmpCommunityHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchSnmpCommunityHost)(nil)).Elem()
}

func (o ManagedswitchSnmpCommunityHostOutput) ToManagedswitchSnmpCommunityHostOutput() ManagedswitchSnmpCommunityHostOutput {
	return o
}

func (o ManagedswitchSnmpCommunityHostOutput) ToManagedswitchSnmpCommunityHostOutputWithContext(ctx context.Context) ManagedswitchSnmpCommunityHostOutput {
	return o
}

// Host entry ID.
func (o ManagedswitchSnmpCommunityHostOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpCommunityHost) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// IPv4 address of the SNMP manager (host).
func (o ManagedswitchSnmpCommunityHostOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpCommunityHost) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type ManagedswitchSnmpCommunityHostArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchSnmpCommunityHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchSnmpCommunityHost)(nil)).Elem()
}

func (o ManagedswitchSnmpCommunityHostArrayOutput) ToManagedswitchSnmpCommunityHostArrayOutput() ManagedswitchSnmpCommunityHostArrayOutput {
	return o
}

func (o ManagedswitchSnmpCommunityHostArrayOutput) ToManagedswitchSnmpCommunityHostArrayOutputWithContext(ctx context.Context) ManagedswitchSnmpCommunityHostArrayOutput {
	return o
}

func (o ManagedswitchSnmpCommunityHostArrayOutput) Index(i pulumi.IntInput) ManagedswitchSnmpCommunityHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchSnmpCommunityHost {
		return vs[0].([]ManagedswitchSnmpCommunityHost)[vs[1].(int)]
	}).(ManagedswitchSnmpCommunityHostOutput)
}

type ManagedswitchSnmpSysinfo struct {
	// Contact information.
	ContactInfo *string `pulumi:"contactInfo"`
	// System description.
	Description *string `pulumi:"description"`
	// Local SNMP engine ID string (max 24 char).
	EngineId *string `pulumi:"engineId"`
	// System location.
	Location *string `pulumi:"location"`
	// Enable/disable SNMP. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
}

// ManagedswitchSnmpSysinfoInput is an input type that accepts ManagedswitchSnmpSysinfoArgs and ManagedswitchSnmpSysinfoOutput values.
// You can construct a concrete instance of `ManagedswitchSnmpSysinfoInput` via:
//
//	ManagedswitchSnmpSysinfoArgs{...}
type ManagedswitchSnmpSysinfoInput interface {
	pulumi.Input

	ToManagedswitchSnmpSysinfoOutput() ManagedswitchSnmpSysinfoOutput
	ToManagedswitchSnmpSysinfoOutputWithContext(context.Context) ManagedswitchSnmpSysinfoOutput
}

type ManagedswitchSnmpSysinfoArgs struct {
	// Contact information.
	ContactInfo pulumi.StringPtrInput `pulumi:"contactInfo"`
	// System description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Local SNMP engine ID string (max 24 char).
	EngineId pulumi.StringPtrInput `pulumi:"engineId"`
	// System location.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Enable/disable SNMP. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ManagedswitchSnmpSysinfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchSnmpSysinfo)(nil)).Elem()
}

func (i ManagedswitchSnmpSysinfoArgs) ToManagedswitchSnmpSysinfoOutput() ManagedswitchSnmpSysinfoOutput {
	return i.ToManagedswitchSnmpSysinfoOutputWithContext(context.Background())
}

func (i ManagedswitchSnmpSysinfoArgs) ToManagedswitchSnmpSysinfoOutputWithContext(ctx context.Context) ManagedswitchSnmpSysinfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSnmpSysinfoOutput)
}

func (i ManagedswitchSnmpSysinfoArgs) ToManagedswitchSnmpSysinfoPtrOutput() ManagedswitchSnmpSysinfoPtrOutput {
	return i.ToManagedswitchSnmpSysinfoPtrOutputWithContext(context.Background())
}

func (i ManagedswitchSnmpSysinfoArgs) ToManagedswitchSnmpSysinfoPtrOutputWithContext(ctx context.Context) ManagedswitchSnmpSysinfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSnmpSysinfoOutput).ToManagedswitchSnmpSysinfoPtrOutputWithContext(ctx)
}

// ManagedswitchSnmpSysinfoPtrInput is an input type that accepts ManagedswitchSnmpSysinfoArgs, ManagedswitchSnmpSysinfoPtr and ManagedswitchSnmpSysinfoPtrOutput values.
// You can construct a concrete instance of `ManagedswitchSnmpSysinfoPtrInput` via:
//
//	        ManagedswitchSnmpSysinfoArgs{...}
//
//	or:
//
//	        nil
type ManagedswitchSnmpSysinfoPtrInput interface {
	pulumi.Input

	ToManagedswitchSnmpSysinfoPtrOutput() ManagedswitchSnmpSysinfoPtrOutput
	ToManagedswitchSnmpSysinfoPtrOutputWithContext(context.Context) ManagedswitchSnmpSysinfoPtrOutput
}

type managedswitchSnmpSysinfoPtrType ManagedswitchSnmpSysinfoArgs

func ManagedswitchSnmpSysinfoPtr(v *ManagedswitchSnmpSysinfoArgs) ManagedswitchSnmpSysinfoPtrInput {
	return (*managedswitchSnmpSysinfoPtrType)(v)
}

func (*managedswitchSnmpSysinfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedswitchSnmpSysinfo)(nil)).Elem()
}

func (i *managedswitchSnmpSysinfoPtrType) ToManagedswitchSnmpSysinfoPtrOutput() ManagedswitchSnmpSysinfoPtrOutput {
	return i.ToManagedswitchSnmpSysinfoPtrOutputWithContext(context.Background())
}

func (i *managedswitchSnmpSysinfoPtrType) ToManagedswitchSnmpSysinfoPtrOutputWithContext(ctx context.Context) ManagedswitchSnmpSysinfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSnmpSysinfoPtrOutput)
}

type ManagedswitchSnmpSysinfoOutput struct{ *pulumi.OutputState }

func (ManagedswitchSnmpSysinfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchSnmpSysinfo)(nil)).Elem()
}

func (o ManagedswitchSnmpSysinfoOutput) ToManagedswitchSnmpSysinfoOutput() ManagedswitchSnmpSysinfoOutput {
	return o
}

func (o ManagedswitchSnmpSysinfoOutput) ToManagedswitchSnmpSysinfoOutputWithContext(ctx context.Context) ManagedswitchSnmpSysinfoOutput {
	return o
}

func (o ManagedswitchSnmpSysinfoOutput) ToManagedswitchSnmpSysinfoPtrOutput() ManagedswitchSnmpSysinfoPtrOutput {
	return o.ToManagedswitchSnmpSysinfoPtrOutputWithContext(context.Background())
}

func (o ManagedswitchSnmpSysinfoOutput) ToManagedswitchSnmpSysinfoPtrOutputWithContext(ctx context.Context) ManagedswitchSnmpSysinfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedswitchSnmpSysinfo) *ManagedswitchSnmpSysinfo {
		return &v
	}).(ManagedswitchSnmpSysinfoPtrOutput)
}

// Contact information.
func (o ManagedswitchSnmpSysinfoOutput) ContactInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpSysinfo) *string { return v.ContactInfo }).(pulumi.StringPtrOutput)
}

// System description.
func (o ManagedswitchSnmpSysinfoOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpSysinfo) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Local SNMP engine ID string (max 24 char).
func (o ManagedswitchSnmpSysinfoOutput) EngineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpSysinfo) *string { return v.EngineId }).(pulumi.StringPtrOutput)
}

// System location.
func (o ManagedswitchSnmpSysinfoOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpSysinfo) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Enable/disable SNMP. Valid values: `disable`, `enable`.
func (o ManagedswitchSnmpSysinfoOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpSysinfo) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ManagedswitchSnmpSysinfoPtrOutput struct{ *pulumi.OutputState }

func (ManagedswitchSnmpSysinfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedswitchSnmpSysinfo)(nil)).Elem()
}

func (o ManagedswitchSnmpSysinfoPtrOutput) ToManagedswitchSnmpSysinfoPtrOutput() ManagedswitchSnmpSysinfoPtrOutput {
	return o
}

func (o ManagedswitchSnmpSysinfoPtrOutput) ToManagedswitchSnmpSysinfoPtrOutputWithContext(ctx context.Context) ManagedswitchSnmpSysinfoPtrOutput {
	return o
}

func (o ManagedswitchSnmpSysinfoPtrOutput) Elem() ManagedswitchSnmpSysinfoOutput {
	return o.ApplyT(func(v *ManagedswitchSnmpSysinfo) ManagedswitchSnmpSysinfo {
		if v != nil {
			return *v
		}
		var ret ManagedswitchSnmpSysinfo
		return ret
	}).(ManagedswitchSnmpSysinfoOutput)
}

// Contact information.
func (o ManagedswitchSnmpSysinfoPtrOutput) ContactInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchSnmpSysinfo) *string {
		if v == nil {
			return nil
		}
		return v.ContactInfo
	}).(pulumi.StringPtrOutput)
}

// System description.
func (o ManagedswitchSnmpSysinfoPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchSnmpSysinfo) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Local SNMP engine ID string (max 24 char).
func (o ManagedswitchSnmpSysinfoPtrOutput) EngineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchSnmpSysinfo) *string {
		if v == nil {
			return nil
		}
		return v.EngineId
	}).(pulumi.StringPtrOutput)
}

// System location.
func (o ManagedswitchSnmpSysinfoPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchSnmpSysinfo) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Enable/disable SNMP. Valid values: `disable`, `enable`.
func (o ManagedswitchSnmpSysinfoPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchSnmpSysinfo) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type ManagedswitchSnmpTrapThreshold struct {
	// CPU usage when trap is sent.
	TrapHighCpuThreshold *int `pulumi:"trapHighCpuThreshold"`
	// Log disk usage when trap is sent.
	TrapLogFullThreshold *int `pulumi:"trapLogFullThreshold"`
	// Memory usage when trap is sent.
	TrapLowMemoryThreshold *int `pulumi:"trapLowMemoryThreshold"`
}

// ManagedswitchSnmpTrapThresholdInput is an input type that accepts ManagedswitchSnmpTrapThresholdArgs and ManagedswitchSnmpTrapThresholdOutput values.
// You can construct a concrete instance of `ManagedswitchSnmpTrapThresholdInput` via:
//
//	ManagedswitchSnmpTrapThresholdArgs{...}
type ManagedswitchSnmpTrapThresholdInput interface {
	pulumi.Input

	ToManagedswitchSnmpTrapThresholdOutput() ManagedswitchSnmpTrapThresholdOutput
	ToManagedswitchSnmpTrapThresholdOutputWithContext(context.Context) ManagedswitchSnmpTrapThresholdOutput
}

type ManagedswitchSnmpTrapThresholdArgs struct {
	// CPU usage when trap is sent.
	TrapHighCpuThreshold pulumi.IntPtrInput `pulumi:"trapHighCpuThreshold"`
	// Log disk usage when trap is sent.
	TrapLogFullThreshold pulumi.IntPtrInput `pulumi:"trapLogFullThreshold"`
	// Memory usage when trap is sent.
	TrapLowMemoryThreshold pulumi.IntPtrInput `pulumi:"trapLowMemoryThreshold"`
}

func (ManagedswitchSnmpTrapThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchSnmpTrapThreshold)(nil)).Elem()
}

func (i ManagedswitchSnmpTrapThresholdArgs) ToManagedswitchSnmpTrapThresholdOutput() ManagedswitchSnmpTrapThresholdOutput {
	return i.ToManagedswitchSnmpTrapThresholdOutputWithContext(context.Background())
}

func (i ManagedswitchSnmpTrapThresholdArgs) ToManagedswitchSnmpTrapThresholdOutputWithContext(ctx context.Context) ManagedswitchSnmpTrapThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSnmpTrapThresholdOutput)
}

func (i ManagedswitchSnmpTrapThresholdArgs) ToManagedswitchSnmpTrapThresholdPtrOutput() ManagedswitchSnmpTrapThresholdPtrOutput {
	return i.ToManagedswitchSnmpTrapThresholdPtrOutputWithContext(context.Background())
}

func (i ManagedswitchSnmpTrapThresholdArgs) ToManagedswitchSnmpTrapThresholdPtrOutputWithContext(ctx context.Context) ManagedswitchSnmpTrapThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSnmpTrapThresholdOutput).ToManagedswitchSnmpTrapThresholdPtrOutputWithContext(ctx)
}

// ManagedswitchSnmpTrapThresholdPtrInput is an input type that accepts ManagedswitchSnmpTrapThresholdArgs, ManagedswitchSnmpTrapThresholdPtr and ManagedswitchSnmpTrapThresholdPtrOutput values.
// You can construct a concrete instance of `ManagedswitchSnmpTrapThresholdPtrInput` via:
//
//	        ManagedswitchSnmpTrapThresholdArgs{...}
//
//	or:
//
//	        nil
type ManagedswitchSnmpTrapThresholdPtrInput interface {
	pulumi.Input

	ToManagedswitchSnmpTrapThresholdPtrOutput() ManagedswitchSnmpTrapThresholdPtrOutput
	ToManagedswitchSnmpTrapThresholdPtrOutputWithContext(context.Context) ManagedswitchSnmpTrapThresholdPtrOutput
}

type managedswitchSnmpTrapThresholdPtrType ManagedswitchSnmpTrapThresholdArgs

func ManagedswitchSnmpTrapThresholdPtr(v *ManagedswitchSnmpTrapThresholdArgs) ManagedswitchSnmpTrapThresholdPtrInput {
	return (*managedswitchSnmpTrapThresholdPtrType)(v)
}

func (*managedswitchSnmpTrapThresholdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedswitchSnmpTrapThreshold)(nil)).Elem()
}

func (i *managedswitchSnmpTrapThresholdPtrType) ToManagedswitchSnmpTrapThresholdPtrOutput() ManagedswitchSnmpTrapThresholdPtrOutput {
	return i.ToManagedswitchSnmpTrapThresholdPtrOutputWithContext(context.Background())
}

func (i *managedswitchSnmpTrapThresholdPtrType) ToManagedswitchSnmpTrapThresholdPtrOutputWithContext(ctx context.Context) ManagedswitchSnmpTrapThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSnmpTrapThresholdPtrOutput)
}

type ManagedswitchSnmpTrapThresholdOutput struct{ *pulumi.OutputState }

func (ManagedswitchSnmpTrapThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchSnmpTrapThreshold)(nil)).Elem()
}

func (o ManagedswitchSnmpTrapThresholdOutput) ToManagedswitchSnmpTrapThresholdOutput() ManagedswitchSnmpTrapThresholdOutput {
	return o
}

func (o ManagedswitchSnmpTrapThresholdOutput) ToManagedswitchSnmpTrapThresholdOutputWithContext(ctx context.Context) ManagedswitchSnmpTrapThresholdOutput {
	return o
}

func (o ManagedswitchSnmpTrapThresholdOutput) ToManagedswitchSnmpTrapThresholdPtrOutput() ManagedswitchSnmpTrapThresholdPtrOutput {
	return o.ToManagedswitchSnmpTrapThresholdPtrOutputWithContext(context.Background())
}

func (o ManagedswitchSnmpTrapThresholdOutput) ToManagedswitchSnmpTrapThresholdPtrOutputWithContext(ctx context.Context) ManagedswitchSnmpTrapThresholdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedswitchSnmpTrapThreshold) *ManagedswitchSnmpTrapThreshold {
		return &v
	}).(ManagedswitchSnmpTrapThresholdPtrOutput)
}

// CPU usage when trap is sent.
func (o ManagedswitchSnmpTrapThresholdOutput) TrapHighCpuThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpTrapThreshold) *int { return v.TrapHighCpuThreshold }).(pulumi.IntPtrOutput)
}

// Log disk usage when trap is sent.
func (o ManagedswitchSnmpTrapThresholdOutput) TrapLogFullThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpTrapThreshold) *int { return v.TrapLogFullThreshold }).(pulumi.IntPtrOutput)
}

// Memory usage when trap is sent.
func (o ManagedswitchSnmpTrapThresholdOutput) TrapLowMemoryThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpTrapThreshold) *int { return v.TrapLowMemoryThreshold }).(pulumi.IntPtrOutput)
}

type ManagedswitchSnmpTrapThresholdPtrOutput struct{ *pulumi.OutputState }

func (ManagedswitchSnmpTrapThresholdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedswitchSnmpTrapThreshold)(nil)).Elem()
}

func (o ManagedswitchSnmpTrapThresholdPtrOutput) ToManagedswitchSnmpTrapThresholdPtrOutput() ManagedswitchSnmpTrapThresholdPtrOutput {
	return o
}

func (o ManagedswitchSnmpTrapThresholdPtrOutput) ToManagedswitchSnmpTrapThresholdPtrOutputWithContext(ctx context.Context) ManagedswitchSnmpTrapThresholdPtrOutput {
	return o
}

func (o ManagedswitchSnmpTrapThresholdPtrOutput) Elem() ManagedswitchSnmpTrapThresholdOutput {
	return o.ApplyT(func(v *ManagedswitchSnmpTrapThreshold) ManagedswitchSnmpTrapThreshold {
		if v != nil {
			return *v
		}
		var ret ManagedswitchSnmpTrapThreshold
		return ret
	}).(ManagedswitchSnmpTrapThresholdOutput)
}

// CPU usage when trap is sent.
func (o ManagedswitchSnmpTrapThresholdPtrOutput) TrapHighCpuThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedswitchSnmpTrapThreshold) *int {
		if v == nil {
			return nil
		}
		return v.TrapHighCpuThreshold
	}).(pulumi.IntPtrOutput)
}

// Log disk usage when trap is sent.
func (o ManagedswitchSnmpTrapThresholdPtrOutput) TrapLogFullThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedswitchSnmpTrapThreshold) *int {
		if v == nil {
			return nil
		}
		return v.TrapLogFullThreshold
	}).(pulumi.IntPtrOutput)
}

// Memory usage when trap is sent.
func (o ManagedswitchSnmpTrapThresholdPtrOutput) TrapLowMemoryThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedswitchSnmpTrapThreshold) *int {
		if v == nil {
			return nil
		}
		return v.TrapLowMemoryThreshold
	}).(pulumi.IntPtrOutput)
}

type ManagedswitchSnmpUser struct {
	// Authentication protocol.
	AuthProto *string `pulumi:"authProto"`
	// Password for authentication protocol.
	AuthPwd *string `pulumi:"authPwd"`
	// SNMP user name.
	Name *string `pulumi:"name"`
	// Privacy (encryption) protocol.
	PrivProto *string `pulumi:"privProto"`
	// Password for privacy (encryption) protocol.
	PrivPwd *string `pulumi:"privPwd"`
	// Enable/disable SNMP queries for this user. Valid values: `disable`, `enable`.
	Queries *string `pulumi:"queries"`
	// SNMPv3 query port (default = 161).
	QueryPort *int `pulumi:"queryPort"`
	// Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
	SecurityLevel *string `pulumi:"securityLevel"`
}

// ManagedswitchSnmpUserInput is an input type that accepts ManagedswitchSnmpUserArgs and ManagedswitchSnmpUserOutput values.
// You can construct a concrete instance of `ManagedswitchSnmpUserInput` via:
//
//	ManagedswitchSnmpUserArgs{...}
type ManagedswitchSnmpUserInput interface {
	pulumi.Input

	ToManagedswitchSnmpUserOutput() ManagedswitchSnmpUserOutput
	ToManagedswitchSnmpUserOutputWithContext(context.Context) ManagedswitchSnmpUserOutput
}

type ManagedswitchSnmpUserArgs struct {
	// Authentication protocol.
	AuthProto pulumi.StringPtrInput `pulumi:"authProto"`
	// Password for authentication protocol.
	AuthPwd pulumi.StringPtrInput `pulumi:"authPwd"`
	// SNMP user name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Privacy (encryption) protocol.
	PrivProto pulumi.StringPtrInput `pulumi:"privProto"`
	// Password for privacy (encryption) protocol.
	PrivPwd pulumi.StringPtrInput `pulumi:"privPwd"`
	// Enable/disable SNMP queries for this user. Valid values: `disable`, `enable`.
	Queries pulumi.StringPtrInput `pulumi:"queries"`
	// SNMPv3 query port (default = 161).
	QueryPort pulumi.IntPtrInput `pulumi:"queryPort"`
	// Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
	SecurityLevel pulumi.StringPtrInput `pulumi:"securityLevel"`
}

func (ManagedswitchSnmpUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchSnmpUser)(nil)).Elem()
}

func (i ManagedswitchSnmpUserArgs) ToManagedswitchSnmpUserOutput() ManagedswitchSnmpUserOutput {
	return i.ToManagedswitchSnmpUserOutputWithContext(context.Background())
}

func (i ManagedswitchSnmpUserArgs) ToManagedswitchSnmpUserOutputWithContext(ctx context.Context) ManagedswitchSnmpUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSnmpUserOutput)
}

// ManagedswitchSnmpUserArrayInput is an input type that accepts ManagedswitchSnmpUserArray and ManagedswitchSnmpUserArrayOutput values.
// You can construct a concrete instance of `ManagedswitchSnmpUserArrayInput` via:
//
//	ManagedswitchSnmpUserArray{ ManagedswitchSnmpUserArgs{...} }
type ManagedswitchSnmpUserArrayInput interface {
	pulumi.Input

	ToManagedswitchSnmpUserArrayOutput() ManagedswitchSnmpUserArrayOutput
	ToManagedswitchSnmpUserArrayOutputWithContext(context.Context) ManagedswitchSnmpUserArrayOutput
}

type ManagedswitchSnmpUserArray []ManagedswitchSnmpUserInput

func (ManagedswitchSnmpUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchSnmpUser)(nil)).Elem()
}

func (i ManagedswitchSnmpUserArray) ToManagedswitchSnmpUserArrayOutput() ManagedswitchSnmpUserArrayOutput {
	return i.ToManagedswitchSnmpUserArrayOutputWithContext(context.Background())
}

func (i ManagedswitchSnmpUserArray) ToManagedswitchSnmpUserArrayOutputWithContext(ctx context.Context) ManagedswitchSnmpUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSnmpUserArrayOutput)
}

type ManagedswitchSnmpUserOutput struct{ *pulumi.OutputState }

func (ManagedswitchSnmpUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchSnmpUser)(nil)).Elem()
}

func (o ManagedswitchSnmpUserOutput) ToManagedswitchSnmpUserOutput() ManagedswitchSnmpUserOutput {
	return o
}

func (o ManagedswitchSnmpUserOutput) ToManagedswitchSnmpUserOutputWithContext(ctx context.Context) ManagedswitchSnmpUserOutput {
	return o
}

// Authentication protocol.
func (o ManagedswitchSnmpUserOutput) AuthProto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpUser) *string { return v.AuthProto }).(pulumi.StringPtrOutput)
}

// Password for authentication protocol.
func (o ManagedswitchSnmpUserOutput) AuthPwd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpUser) *string { return v.AuthPwd }).(pulumi.StringPtrOutput)
}

// SNMP user name.
func (o ManagedswitchSnmpUserOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpUser) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Privacy (encryption) protocol.
func (o ManagedswitchSnmpUserOutput) PrivProto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpUser) *string { return v.PrivProto }).(pulumi.StringPtrOutput)
}

// Password for privacy (encryption) protocol.
func (o ManagedswitchSnmpUserOutput) PrivPwd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpUser) *string { return v.PrivPwd }).(pulumi.StringPtrOutput)
}

// Enable/disable SNMP queries for this user. Valid values: `disable`, `enable`.
func (o ManagedswitchSnmpUserOutput) Queries() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpUser) *string { return v.Queries }).(pulumi.StringPtrOutput)
}

// SNMPv3 query port (default = 161).
func (o ManagedswitchSnmpUserOutput) QueryPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpUser) *int { return v.QueryPort }).(pulumi.IntPtrOutput)
}

// Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
func (o ManagedswitchSnmpUserOutput) SecurityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSnmpUser) *string { return v.SecurityLevel }).(pulumi.StringPtrOutput)
}

type ManagedswitchSnmpUserArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchSnmpUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchSnmpUser)(nil)).Elem()
}

func (o ManagedswitchSnmpUserArrayOutput) ToManagedswitchSnmpUserArrayOutput() ManagedswitchSnmpUserArrayOutput {
	return o
}

func (o ManagedswitchSnmpUserArrayOutput) ToManagedswitchSnmpUserArrayOutputWithContext(ctx context.Context) ManagedswitchSnmpUserArrayOutput {
	return o
}

func (o ManagedswitchSnmpUserArrayOutput) Index(i pulumi.IntInput) ManagedswitchSnmpUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchSnmpUser {
		return vs[0].([]ManagedswitchSnmpUser)[vs[1].(int)]
	}).(ManagedswitchSnmpUserOutput)
}

type ManagedswitchStaticMac struct {
	// Description.
	Description *string `pulumi:"description"`
	// Id
	Id *int `pulumi:"id"`
	// Interface name.
	Interface *string `pulumi:"interface"`
	// MAC address.
	Mac *string `pulumi:"mac"`
	// Type. Valid values: `static`, `sticky`.
	Type *string `pulumi:"type"`
	// Vlan.
	Vlan *string `pulumi:"vlan"`
}

// ManagedswitchStaticMacInput is an input type that accepts ManagedswitchStaticMacArgs and ManagedswitchStaticMacOutput values.
// You can construct a concrete instance of `ManagedswitchStaticMacInput` via:
//
//	ManagedswitchStaticMacArgs{...}
type ManagedswitchStaticMacInput interface {
	pulumi.Input

	ToManagedswitchStaticMacOutput() ManagedswitchStaticMacOutput
	ToManagedswitchStaticMacOutputWithContext(context.Context) ManagedswitchStaticMacOutput
}

type ManagedswitchStaticMacArgs struct {
	// Description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Id
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Interface name.
	Interface pulumi.StringPtrInput `pulumi:"interface"`
	// MAC address.
	Mac pulumi.StringPtrInput `pulumi:"mac"`
	// Type. Valid values: `static`, `sticky`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Vlan.
	Vlan pulumi.StringPtrInput `pulumi:"vlan"`
}

func (ManagedswitchStaticMacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchStaticMac)(nil)).Elem()
}

func (i ManagedswitchStaticMacArgs) ToManagedswitchStaticMacOutput() ManagedswitchStaticMacOutput {
	return i.ToManagedswitchStaticMacOutputWithContext(context.Background())
}

func (i ManagedswitchStaticMacArgs) ToManagedswitchStaticMacOutputWithContext(ctx context.Context) ManagedswitchStaticMacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchStaticMacOutput)
}

// ManagedswitchStaticMacArrayInput is an input type that accepts ManagedswitchStaticMacArray and ManagedswitchStaticMacArrayOutput values.
// You can construct a concrete instance of `ManagedswitchStaticMacArrayInput` via:
//
//	ManagedswitchStaticMacArray{ ManagedswitchStaticMacArgs{...} }
type ManagedswitchStaticMacArrayInput interface {
	pulumi.Input

	ToManagedswitchStaticMacArrayOutput() ManagedswitchStaticMacArrayOutput
	ToManagedswitchStaticMacArrayOutputWithContext(context.Context) ManagedswitchStaticMacArrayOutput
}

type ManagedswitchStaticMacArray []ManagedswitchStaticMacInput

func (ManagedswitchStaticMacArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchStaticMac)(nil)).Elem()
}

func (i ManagedswitchStaticMacArray) ToManagedswitchStaticMacArrayOutput() ManagedswitchStaticMacArrayOutput {
	return i.ToManagedswitchStaticMacArrayOutputWithContext(context.Background())
}

func (i ManagedswitchStaticMacArray) ToManagedswitchStaticMacArrayOutputWithContext(ctx context.Context) ManagedswitchStaticMacArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchStaticMacArrayOutput)
}

type ManagedswitchStaticMacOutput struct{ *pulumi.OutputState }

func (ManagedswitchStaticMacOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchStaticMac)(nil)).Elem()
}

func (o ManagedswitchStaticMacOutput) ToManagedswitchStaticMacOutput() ManagedswitchStaticMacOutput {
	return o
}

func (o ManagedswitchStaticMacOutput) ToManagedswitchStaticMacOutputWithContext(ctx context.Context) ManagedswitchStaticMacOutput {
	return o
}

// Description.
func (o ManagedswitchStaticMacOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchStaticMac) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Id
func (o ManagedswitchStaticMacOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchStaticMac) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Interface name.
func (o ManagedswitchStaticMacOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchStaticMac) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

// MAC address.
func (o ManagedswitchStaticMacOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchStaticMac) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

// Type. Valid values: `static`, `sticky`.
func (o ManagedswitchStaticMacOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchStaticMac) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Vlan.
func (o ManagedswitchStaticMacOutput) Vlan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchStaticMac) *string { return v.Vlan }).(pulumi.StringPtrOutput)
}

type ManagedswitchStaticMacArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchStaticMacArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchStaticMac)(nil)).Elem()
}

func (o ManagedswitchStaticMacArrayOutput) ToManagedswitchStaticMacArrayOutput() ManagedswitchStaticMacArrayOutput {
	return o
}

func (o ManagedswitchStaticMacArrayOutput) ToManagedswitchStaticMacArrayOutputWithContext(ctx context.Context) ManagedswitchStaticMacArrayOutput {
	return o
}

func (o ManagedswitchStaticMacArrayOutput) Index(i pulumi.IntInput) ManagedswitchStaticMacOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchStaticMac {
		return vs[0].([]ManagedswitchStaticMac)[vs[1].(int)]
	}).(ManagedswitchStaticMacOutput)
}

type ManagedswitchStormControl struct {
	// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
	Broadcast *string `pulumi:"broadcast"`
	// Enable to override global FortiSwitch storm control settings for this FortiSwitch. Valid values: `enable`, `disable`.
	LocalOverride *string `pulumi:"localOverride"`
	// Rate in packets per second at which storm traffic is controlled (1 - 10000000, default = 500). Storm control drops excess traffic data rates beyond this threshold.
	Rate *int `pulumi:"rate"`
	// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
	UnknownMulticast *string `pulumi:"unknownMulticast"`
	// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
	UnknownUnicast *string `pulumi:"unknownUnicast"`
}

// ManagedswitchStormControlInput is an input type that accepts ManagedswitchStormControlArgs and ManagedswitchStormControlOutput values.
// You can construct a concrete instance of `ManagedswitchStormControlInput` via:
//
//	ManagedswitchStormControlArgs{...}
type ManagedswitchStormControlInput interface {
	pulumi.Input

	ToManagedswitchStormControlOutput() ManagedswitchStormControlOutput
	ToManagedswitchStormControlOutputWithContext(context.Context) ManagedswitchStormControlOutput
}

type ManagedswitchStormControlArgs struct {
	// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
	Broadcast pulumi.StringPtrInput `pulumi:"broadcast"`
	// Enable to override global FortiSwitch storm control settings for this FortiSwitch. Valid values: `enable`, `disable`.
	LocalOverride pulumi.StringPtrInput `pulumi:"localOverride"`
	// Rate in packets per second at which storm traffic is controlled (1 - 10000000, default = 500). Storm control drops excess traffic data rates beyond this threshold.
	Rate pulumi.IntPtrInput `pulumi:"rate"`
	// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
	UnknownMulticast pulumi.StringPtrInput `pulumi:"unknownMulticast"`
	// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
	UnknownUnicast pulumi.StringPtrInput `pulumi:"unknownUnicast"`
}

func (ManagedswitchStormControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchStormControl)(nil)).Elem()
}

func (i ManagedswitchStormControlArgs) ToManagedswitchStormControlOutput() ManagedswitchStormControlOutput {
	return i.ToManagedswitchStormControlOutputWithContext(context.Background())
}

func (i ManagedswitchStormControlArgs) ToManagedswitchStormControlOutputWithContext(ctx context.Context) ManagedswitchStormControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchStormControlOutput)
}

func (i ManagedswitchStormControlArgs) ToManagedswitchStormControlPtrOutput() ManagedswitchStormControlPtrOutput {
	return i.ToManagedswitchStormControlPtrOutputWithContext(context.Background())
}

func (i ManagedswitchStormControlArgs) ToManagedswitchStormControlPtrOutputWithContext(ctx context.Context) ManagedswitchStormControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchStormControlOutput).ToManagedswitchStormControlPtrOutputWithContext(ctx)
}

// ManagedswitchStormControlPtrInput is an input type that accepts ManagedswitchStormControlArgs, ManagedswitchStormControlPtr and ManagedswitchStormControlPtrOutput values.
// You can construct a concrete instance of `ManagedswitchStormControlPtrInput` via:
//
//	        ManagedswitchStormControlArgs{...}
//
//	or:
//
//	        nil
type ManagedswitchStormControlPtrInput interface {
	pulumi.Input

	ToManagedswitchStormControlPtrOutput() ManagedswitchStormControlPtrOutput
	ToManagedswitchStormControlPtrOutputWithContext(context.Context) ManagedswitchStormControlPtrOutput
}

type managedswitchStormControlPtrType ManagedswitchStormControlArgs

func ManagedswitchStormControlPtr(v *ManagedswitchStormControlArgs) ManagedswitchStormControlPtrInput {
	return (*managedswitchStormControlPtrType)(v)
}

func (*managedswitchStormControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedswitchStormControl)(nil)).Elem()
}

func (i *managedswitchStormControlPtrType) ToManagedswitchStormControlPtrOutput() ManagedswitchStormControlPtrOutput {
	return i.ToManagedswitchStormControlPtrOutputWithContext(context.Background())
}

func (i *managedswitchStormControlPtrType) ToManagedswitchStormControlPtrOutputWithContext(ctx context.Context) ManagedswitchStormControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchStormControlPtrOutput)
}

type ManagedswitchStormControlOutput struct{ *pulumi.OutputState }

func (ManagedswitchStormControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchStormControl)(nil)).Elem()
}

func (o ManagedswitchStormControlOutput) ToManagedswitchStormControlOutput() ManagedswitchStormControlOutput {
	return o
}

func (o ManagedswitchStormControlOutput) ToManagedswitchStormControlOutputWithContext(ctx context.Context) ManagedswitchStormControlOutput {
	return o
}

func (o ManagedswitchStormControlOutput) ToManagedswitchStormControlPtrOutput() ManagedswitchStormControlPtrOutput {
	return o.ToManagedswitchStormControlPtrOutputWithContext(context.Background())
}

func (o ManagedswitchStormControlOutput) ToManagedswitchStormControlPtrOutputWithContext(ctx context.Context) ManagedswitchStormControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedswitchStormControl) *ManagedswitchStormControl {
		return &v
	}).(ManagedswitchStormControlPtrOutput)
}

// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
func (o ManagedswitchStormControlOutput) Broadcast() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchStormControl) *string { return v.Broadcast }).(pulumi.StringPtrOutput)
}

// Enable to override global FortiSwitch storm control settings for this FortiSwitch. Valid values: `enable`, `disable`.
func (o ManagedswitchStormControlOutput) LocalOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchStormControl) *string { return v.LocalOverride }).(pulumi.StringPtrOutput)
}

// Rate in packets per second at which storm traffic is controlled (1 - 10000000, default = 500). Storm control drops excess traffic data rates beyond this threshold.
func (o ManagedswitchStormControlOutput) Rate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchStormControl) *int { return v.Rate }).(pulumi.IntPtrOutput)
}

// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
func (o ManagedswitchStormControlOutput) UnknownMulticast() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchStormControl) *string { return v.UnknownMulticast }).(pulumi.StringPtrOutput)
}

// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
func (o ManagedswitchStormControlOutput) UnknownUnicast() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchStormControl) *string { return v.UnknownUnicast }).(pulumi.StringPtrOutput)
}

type ManagedswitchStormControlPtrOutput struct{ *pulumi.OutputState }

func (ManagedswitchStormControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedswitchStormControl)(nil)).Elem()
}

func (o ManagedswitchStormControlPtrOutput) ToManagedswitchStormControlPtrOutput() ManagedswitchStormControlPtrOutput {
	return o
}

func (o ManagedswitchStormControlPtrOutput) ToManagedswitchStormControlPtrOutputWithContext(ctx context.Context) ManagedswitchStormControlPtrOutput {
	return o
}

func (o ManagedswitchStormControlPtrOutput) Elem() ManagedswitchStormControlOutput {
	return o.ApplyT(func(v *ManagedswitchStormControl) ManagedswitchStormControl {
		if v != nil {
			return *v
		}
		var ret ManagedswitchStormControl
		return ret
	}).(ManagedswitchStormControlOutput)
}

// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
func (o ManagedswitchStormControlPtrOutput) Broadcast() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchStormControl) *string {
		if v == nil {
			return nil
		}
		return v.Broadcast
	}).(pulumi.StringPtrOutput)
}

// Enable to override global FortiSwitch storm control settings for this FortiSwitch. Valid values: `enable`, `disable`.
func (o ManagedswitchStormControlPtrOutput) LocalOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchStormControl) *string {
		if v == nil {
			return nil
		}
		return v.LocalOverride
	}).(pulumi.StringPtrOutput)
}

// Rate in packets per second at which storm traffic is controlled (1 - 10000000, default = 500). Storm control drops excess traffic data rates beyond this threshold.
func (o ManagedswitchStormControlPtrOutput) Rate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedswitchStormControl) *int {
		if v == nil {
			return nil
		}
		return v.Rate
	}).(pulumi.IntPtrOutput)
}

// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
func (o ManagedswitchStormControlPtrOutput) UnknownMulticast() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchStormControl) *string {
		if v == nil {
			return nil
		}
		return v.UnknownMulticast
	}).(pulumi.StringPtrOutput)
}

// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
func (o ManagedswitchStormControlPtrOutput) UnknownUnicast() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchStormControl) *string {
		if v == nil {
			return nil
		}
		return v.UnknownUnicast
	}).(pulumi.StringPtrOutput)
}

type ManagedswitchStpInstance struct {
	// Instance ID.
	Id *string `pulumi:"id"`
	// Priority. Valid values: `0`, `4096`, `8192`, `12288`, `16384`, `20480`, `24576`, `28672`, `32768`, `36864`, `40960`, `45056`, `49152`, `53248`, `57344`, `61440`.
	Priority *string `pulumi:"priority"`
}

// ManagedswitchStpInstanceInput is an input type that accepts ManagedswitchStpInstanceArgs and ManagedswitchStpInstanceOutput values.
// You can construct a concrete instance of `ManagedswitchStpInstanceInput` via:
//
//	ManagedswitchStpInstanceArgs{...}
type ManagedswitchStpInstanceInput interface {
	pulumi.Input

	ToManagedswitchStpInstanceOutput() ManagedswitchStpInstanceOutput
	ToManagedswitchStpInstanceOutputWithContext(context.Context) ManagedswitchStpInstanceOutput
}

type ManagedswitchStpInstanceArgs struct {
	// Instance ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Priority. Valid values: `0`, `4096`, `8192`, `12288`, `16384`, `20480`, `24576`, `28672`, `32768`, `36864`, `40960`, `45056`, `49152`, `53248`, `57344`, `61440`.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
}

func (ManagedswitchStpInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchStpInstance)(nil)).Elem()
}

func (i ManagedswitchStpInstanceArgs) ToManagedswitchStpInstanceOutput() ManagedswitchStpInstanceOutput {
	return i.ToManagedswitchStpInstanceOutputWithContext(context.Background())
}

func (i ManagedswitchStpInstanceArgs) ToManagedswitchStpInstanceOutputWithContext(ctx context.Context) ManagedswitchStpInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchStpInstanceOutput)
}

// ManagedswitchStpInstanceArrayInput is an input type that accepts ManagedswitchStpInstanceArray and ManagedswitchStpInstanceArrayOutput values.
// You can construct a concrete instance of `ManagedswitchStpInstanceArrayInput` via:
//
//	ManagedswitchStpInstanceArray{ ManagedswitchStpInstanceArgs{...} }
type ManagedswitchStpInstanceArrayInput interface {
	pulumi.Input

	ToManagedswitchStpInstanceArrayOutput() ManagedswitchStpInstanceArrayOutput
	ToManagedswitchStpInstanceArrayOutputWithContext(context.Context) ManagedswitchStpInstanceArrayOutput
}

type ManagedswitchStpInstanceArray []ManagedswitchStpInstanceInput

func (ManagedswitchStpInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchStpInstance)(nil)).Elem()
}

func (i ManagedswitchStpInstanceArray) ToManagedswitchStpInstanceArrayOutput() ManagedswitchStpInstanceArrayOutput {
	return i.ToManagedswitchStpInstanceArrayOutputWithContext(context.Background())
}

func (i ManagedswitchStpInstanceArray) ToManagedswitchStpInstanceArrayOutputWithContext(ctx context.Context) ManagedswitchStpInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchStpInstanceArrayOutput)
}

type ManagedswitchStpInstanceOutput struct{ *pulumi.OutputState }

func (ManagedswitchStpInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchStpInstance)(nil)).Elem()
}

func (o ManagedswitchStpInstanceOutput) ToManagedswitchStpInstanceOutput() ManagedswitchStpInstanceOutput {
	return o
}

func (o ManagedswitchStpInstanceOutput) ToManagedswitchStpInstanceOutputWithContext(ctx context.Context) ManagedswitchStpInstanceOutput {
	return o
}

// Instance ID.
func (o ManagedswitchStpInstanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchStpInstance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Priority. Valid values: `0`, `4096`, `8192`, `12288`, `16384`, `20480`, `24576`, `28672`, `32768`, `36864`, `40960`, `45056`, `49152`, `53248`, `57344`, `61440`.
func (o ManagedswitchStpInstanceOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchStpInstance) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

type ManagedswitchStpInstanceArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchStpInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchStpInstance)(nil)).Elem()
}

func (o ManagedswitchStpInstanceArrayOutput) ToManagedswitchStpInstanceArrayOutput() ManagedswitchStpInstanceArrayOutput {
	return o
}

func (o ManagedswitchStpInstanceArrayOutput) ToManagedswitchStpInstanceArrayOutputWithContext(ctx context.Context) ManagedswitchStpInstanceArrayOutput {
	return o
}

func (o ManagedswitchStpInstanceArrayOutput) Index(i pulumi.IntInput) ManagedswitchStpInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchStpInstance {
		return vs[0].([]ManagedswitchStpInstance)[vs[1].(int)]
	}).(ManagedswitchStpInstanceOutput)
}

type ManagedswitchStpSettings struct {
	// Period of time a port is in listening and learning state (4 - 30 sec, default = 15).
	ForwardTime *int `pulumi:"forwardTime"`
	// Period of time between successive STP frame Bridge Protocol Data Units (BPDUs) sent on a port (1 - 10 sec, default = 2).
	HelloTime *int `pulumi:"helloTime"`
	// Enable to configure local STP settings that override global STP settings. Valid values: `enable`, `disable`.
	LocalOverride *string `pulumi:"localOverride"`
	// Maximum time before a bridge port saves its configuration BPDU information (6 - 40 sec, default = 20).
	MaxAge *int `pulumi:"maxAge"`
	// Maximum number of hops between the root bridge and the furthest bridge (1- 40, default = 20).
	MaxHops *int `pulumi:"maxHops"`
	// Name of local STP settings configuration.
	Name *string `pulumi:"name"`
	// Pending time (1 - 15 sec, default = 4).
	PendingTimer *int `pulumi:"pendingTimer"`
	// STP revision number (0 - 65535).
	Revision *int `pulumi:"revision"`
	// Enable/disable STP. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
}

// ManagedswitchStpSettingsInput is an input type that accepts ManagedswitchStpSettingsArgs and ManagedswitchStpSettingsOutput values.
// You can construct a concrete instance of `ManagedswitchStpSettingsInput` via:
//
//	ManagedswitchStpSettingsArgs{...}
type ManagedswitchStpSettingsInput interface {
	pulumi.Input

	ToManagedswitchStpSettingsOutput() ManagedswitchStpSettingsOutput
	ToManagedswitchStpSettingsOutputWithContext(context.Context) ManagedswitchStpSettingsOutput
}

type ManagedswitchStpSettingsArgs struct {
	// Period of time a port is in listening and learning state (4 - 30 sec, default = 15).
	ForwardTime pulumi.IntPtrInput `pulumi:"forwardTime"`
	// Period of time between successive STP frame Bridge Protocol Data Units (BPDUs) sent on a port (1 - 10 sec, default = 2).
	HelloTime pulumi.IntPtrInput `pulumi:"helloTime"`
	// Enable to configure local STP settings that override global STP settings. Valid values: `enable`, `disable`.
	LocalOverride pulumi.StringPtrInput `pulumi:"localOverride"`
	// Maximum time before a bridge port saves its configuration BPDU information (6 - 40 sec, default = 20).
	MaxAge pulumi.IntPtrInput `pulumi:"maxAge"`
	// Maximum number of hops between the root bridge and the furthest bridge (1- 40, default = 20).
	MaxHops pulumi.IntPtrInput `pulumi:"maxHops"`
	// Name of local STP settings configuration.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Pending time (1 - 15 sec, default = 4).
	PendingTimer pulumi.IntPtrInput `pulumi:"pendingTimer"`
	// STP revision number (0 - 65535).
	Revision pulumi.IntPtrInput `pulumi:"revision"`
	// Enable/disable STP. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ManagedswitchStpSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchStpSettings)(nil)).Elem()
}

func (i ManagedswitchStpSettingsArgs) ToManagedswitchStpSettingsOutput() ManagedswitchStpSettingsOutput {
	return i.ToManagedswitchStpSettingsOutputWithContext(context.Background())
}

func (i ManagedswitchStpSettingsArgs) ToManagedswitchStpSettingsOutputWithContext(ctx context.Context) ManagedswitchStpSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchStpSettingsOutput)
}

func (i ManagedswitchStpSettingsArgs) ToManagedswitchStpSettingsPtrOutput() ManagedswitchStpSettingsPtrOutput {
	return i.ToManagedswitchStpSettingsPtrOutputWithContext(context.Background())
}

func (i ManagedswitchStpSettingsArgs) ToManagedswitchStpSettingsPtrOutputWithContext(ctx context.Context) ManagedswitchStpSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchStpSettingsOutput).ToManagedswitchStpSettingsPtrOutputWithContext(ctx)
}

// ManagedswitchStpSettingsPtrInput is an input type that accepts ManagedswitchStpSettingsArgs, ManagedswitchStpSettingsPtr and ManagedswitchStpSettingsPtrOutput values.
// You can construct a concrete instance of `ManagedswitchStpSettingsPtrInput` via:
//
//	        ManagedswitchStpSettingsArgs{...}
//
//	or:
//
//	        nil
type ManagedswitchStpSettingsPtrInput interface {
	pulumi.Input

	ToManagedswitchStpSettingsPtrOutput() ManagedswitchStpSettingsPtrOutput
	ToManagedswitchStpSettingsPtrOutputWithContext(context.Context) ManagedswitchStpSettingsPtrOutput
}

type managedswitchStpSettingsPtrType ManagedswitchStpSettingsArgs

func ManagedswitchStpSettingsPtr(v *ManagedswitchStpSettingsArgs) ManagedswitchStpSettingsPtrInput {
	return (*managedswitchStpSettingsPtrType)(v)
}

func (*managedswitchStpSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedswitchStpSettings)(nil)).Elem()
}

func (i *managedswitchStpSettingsPtrType) ToManagedswitchStpSettingsPtrOutput() ManagedswitchStpSettingsPtrOutput {
	return i.ToManagedswitchStpSettingsPtrOutputWithContext(context.Background())
}

func (i *managedswitchStpSettingsPtrType) ToManagedswitchStpSettingsPtrOutputWithContext(ctx context.Context) ManagedswitchStpSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchStpSettingsPtrOutput)
}

type ManagedswitchStpSettingsOutput struct{ *pulumi.OutputState }

func (ManagedswitchStpSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchStpSettings)(nil)).Elem()
}

func (o ManagedswitchStpSettingsOutput) ToManagedswitchStpSettingsOutput() ManagedswitchStpSettingsOutput {
	return o
}

func (o ManagedswitchStpSettingsOutput) ToManagedswitchStpSettingsOutputWithContext(ctx context.Context) ManagedswitchStpSettingsOutput {
	return o
}

func (o ManagedswitchStpSettingsOutput) ToManagedswitchStpSettingsPtrOutput() ManagedswitchStpSettingsPtrOutput {
	return o.ToManagedswitchStpSettingsPtrOutputWithContext(context.Background())
}

func (o ManagedswitchStpSettingsOutput) ToManagedswitchStpSettingsPtrOutputWithContext(ctx context.Context) ManagedswitchStpSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedswitchStpSettings) *ManagedswitchStpSettings {
		return &v
	}).(ManagedswitchStpSettingsPtrOutput)
}

// Period of time a port is in listening and learning state (4 - 30 sec, default = 15).
func (o ManagedswitchStpSettingsOutput) ForwardTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchStpSettings) *int { return v.ForwardTime }).(pulumi.IntPtrOutput)
}

// Period of time between successive STP frame Bridge Protocol Data Units (BPDUs) sent on a port (1 - 10 sec, default = 2).
func (o ManagedswitchStpSettingsOutput) HelloTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchStpSettings) *int { return v.HelloTime }).(pulumi.IntPtrOutput)
}

// Enable to configure local STP settings that override global STP settings. Valid values: `enable`, `disable`.
func (o ManagedswitchStpSettingsOutput) LocalOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchStpSettings) *string { return v.LocalOverride }).(pulumi.StringPtrOutput)
}

// Maximum time before a bridge port saves its configuration BPDU information (6 - 40 sec, default = 20).
func (o ManagedswitchStpSettingsOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchStpSettings) *int { return v.MaxAge }).(pulumi.IntPtrOutput)
}

// Maximum number of hops between the root bridge and the furthest bridge (1- 40, default = 20).
func (o ManagedswitchStpSettingsOutput) MaxHops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchStpSettings) *int { return v.MaxHops }).(pulumi.IntPtrOutput)
}

// Name of local STP settings configuration.
func (o ManagedswitchStpSettingsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchStpSettings) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Pending time (1 - 15 sec, default = 4).
func (o ManagedswitchStpSettingsOutput) PendingTimer() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchStpSettings) *int { return v.PendingTimer }).(pulumi.IntPtrOutput)
}

// STP revision number (0 - 65535).
func (o ManagedswitchStpSettingsOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchStpSettings) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

// Enable/disable STP. Valid values: `enable`, `disable`.
func (o ManagedswitchStpSettingsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchStpSettings) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ManagedswitchStpSettingsPtrOutput struct{ *pulumi.OutputState }

func (ManagedswitchStpSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedswitchStpSettings)(nil)).Elem()
}

func (o ManagedswitchStpSettingsPtrOutput) ToManagedswitchStpSettingsPtrOutput() ManagedswitchStpSettingsPtrOutput {
	return o
}

func (o ManagedswitchStpSettingsPtrOutput) ToManagedswitchStpSettingsPtrOutputWithContext(ctx context.Context) ManagedswitchStpSettingsPtrOutput {
	return o
}

func (o ManagedswitchStpSettingsPtrOutput) Elem() ManagedswitchStpSettingsOutput {
	return o.ApplyT(func(v *ManagedswitchStpSettings) ManagedswitchStpSettings {
		if v != nil {
			return *v
		}
		var ret ManagedswitchStpSettings
		return ret
	}).(ManagedswitchStpSettingsOutput)
}

// Period of time a port is in listening and learning state (4 - 30 sec, default = 15).
func (o ManagedswitchStpSettingsPtrOutput) ForwardTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedswitchStpSettings) *int {
		if v == nil {
			return nil
		}
		return v.ForwardTime
	}).(pulumi.IntPtrOutput)
}

// Period of time between successive STP frame Bridge Protocol Data Units (BPDUs) sent on a port (1 - 10 sec, default = 2).
func (o ManagedswitchStpSettingsPtrOutput) HelloTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedswitchStpSettings) *int {
		if v == nil {
			return nil
		}
		return v.HelloTime
	}).(pulumi.IntPtrOutput)
}

// Enable to configure local STP settings that override global STP settings. Valid values: `enable`, `disable`.
func (o ManagedswitchStpSettingsPtrOutput) LocalOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchStpSettings) *string {
		if v == nil {
			return nil
		}
		return v.LocalOverride
	}).(pulumi.StringPtrOutput)
}

// Maximum time before a bridge port saves its configuration BPDU information (6 - 40 sec, default = 20).
func (o ManagedswitchStpSettingsPtrOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedswitchStpSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxAge
	}).(pulumi.IntPtrOutput)
}

// Maximum number of hops between the root bridge and the furthest bridge (1- 40, default = 20).
func (o ManagedswitchStpSettingsPtrOutput) MaxHops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedswitchStpSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxHops
	}).(pulumi.IntPtrOutput)
}

// Name of local STP settings configuration.
func (o ManagedswitchStpSettingsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchStpSettings) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Pending time (1 - 15 sec, default = 4).
func (o ManagedswitchStpSettingsPtrOutput) PendingTimer() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedswitchStpSettings) *int {
		if v == nil {
			return nil
		}
		return v.PendingTimer
	}).(pulumi.IntPtrOutput)
}

// STP revision number (0 - 65535).
func (o ManagedswitchStpSettingsPtrOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedswitchStpSettings) *int {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.IntPtrOutput)
}

// Enable/disable STP. Valid values: `enable`, `disable`.
func (o ManagedswitchStpSettingsPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchStpSettings) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type ManagedswitchSwitchLog struct {
	// Enable to configure local logging settings that override global logging settings. Valid values: `enable`, `disable`.
	LocalOverride *string `pulumi:"localOverride"`
	// Severity of FortiSwitch logs that are added to the FortiGate event log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity *string `pulumi:"severity"`
	// Enable/disable adding FortiSwitch logs to the FortiGate event log. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
}

// ManagedswitchSwitchLogInput is an input type that accepts ManagedswitchSwitchLogArgs and ManagedswitchSwitchLogOutput values.
// You can construct a concrete instance of `ManagedswitchSwitchLogInput` via:
//
//	ManagedswitchSwitchLogArgs{...}
type ManagedswitchSwitchLogInput interface {
	pulumi.Input

	ToManagedswitchSwitchLogOutput() ManagedswitchSwitchLogOutput
	ToManagedswitchSwitchLogOutputWithContext(context.Context) ManagedswitchSwitchLogOutput
}

type ManagedswitchSwitchLogArgs struct {
	// Enable to configure local logging settings that override global logging settings. Valid values: `enable`, `disable`.
	LocalOverride pulumi.StringPtrInput `pulumi:"localOverride"`
	// Severity of FortiSwitch logs that are added to the FortiGate event log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Enable/disable adding FortiSwitch logs to the FortiGate event log. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ManagedswitchSwitchLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchSwitchLog)(nil)).Elem()
}

func (i ManagedswitchSwitchLogArgs) ToManagedswitchSwitchLogOutput() ManagedswitchSwitchLogOutput {
	return i.ToManagedswitchSwitchLogOutputWithContext(context.Background())
}

func (i ManagedswitchSwitchLogArgs) ToManagedswitchSwitchLogOutputWithContext(ctx context.Context) ManagedswitchSwitchLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSwitchLogOutput)
}

func (i ManagedswitchSwitchLogArgs) ToManagedswitchSwitchLogPtrOutput() ManagedswitchSwitchLogPtrOutput {
	return i.ToManagedswitchSwitchLogPtrOutputWithContext(context.Background())
}

func (i ManagedswitchSwitchLogArgs) ToManagedswitchSwitchLogPtrOutputWithContext(ctx context.Context) ManagedswitchSwitchLogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSwitchLogOutput).ToManagedswitchSwitchLogPtrOutputWithContext(ctx)
}

// ManagedswitchSwitchLogPtrInput is an input type that accepts ManagedswitchSwitchLogArgs, ManagedswitchSwitchLogPtr and ManagedswitchSwitchLogPtrOutput values.
// You can construct a concrete instance of `ManagedswitchSwitchLogPtrInput` via:
//
//	        ManagedswitchSwitchLogArgs{...}
//
//	or:
//
//	        nil
type ManagedswitchSwitchLogPtrInput interface {
	pulumi.Input

	ToManagedswitchSwitchLogPtrOutput() ManagedswitchSwitchLogPtrOutput
	ToManagedswitchSwitchLogPtrOutputWithContext(context.Context) ManagedswitchSwitchLogPtrOutput
}

type managedswitchSwitchLogPtrType ManagedswitchSwitchLogArgs

func ManagedswitchSwitchLogPtr(v *ManagedswitchSwitchLogArgs) ManagedswitchSwitchLogPtrInput {
	return (*managedswitchSwitchLogPtrType)(v)
}

func (*managedswitchSwitchLogPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedswitchSwitchLog)(nil)).Elem()
}

func (i *managedswitchSwitchLogPtrType) ToManagedswitchSwitchLogPtrOutput() ManagedswitchSwitchLogPtrOutput {
	return i.ToManagedswitchSwitchLogPtrOutputWithContext(context.Background())
}

func (i *managedswitchSwitchLogPtrType) ToManagedswitchSwitchLogPtrOutputWithContext(ctx context.Context) ManagedswitchSwitchLogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSwitchLogPtrOutput)
}

type ManagedswitchSwitchLogOutput struct{ *pulumi.OutputState }

func (ManagedswitchSwitchLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchSwitchLog)(nil)).Elem()
}

func (o ManagedswitchSwitchLogOutput) ToManagedswitchSwitchLogOutput() ManagedswitchSwitchLogOutput {
	return o
}

func (o ManagedswitchSwitchLogOutput) ToManagedswitchSwitchLogOutputWithContext(ctx context.Context) ManagedswitchSwitchLogOutput {
	return o
}

func (o ManagedswitchSwitchLogOutput) ToManagedswitchSwitchLogPtrOutput() ManagedswitchSwitchLogPtrOutput {
	return o.ToManagedswitchSwitchLogPtrOutputWithContext(context.Background())
}

func (o ManagedswitchSwitchLogOutput) ToManagedswitchSwitchLogPtrOutputWithContext(ctx context.Context) ManagedswitchSwitchLogPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedswitchSwitchLog) *ManagedswitchSwitchLog {
		return &v
	}).(ManagedswitchSwitchLogPtrOutput)
}

// Enable to configure local logging settings that override global logging settings. Valid values: `enable`, `disable`.
func (o ManagedswitchSwitchLogOutput) LocalOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSwitchLog) *string { return v.LocalOverride }).(pulumi.StringPtrOutput)
}

// Severity of FortiSwitch logs that are added to the FortiGate event log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o ManagedswitchSwitchLogOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSwitchLog) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Enable/disable adding FortiSwitch logs to the FortiGate event log. Valid values: `enable`, `disable`.
func (o ManagedswitchSwitchLogOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSwitchLog) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ManagedswitchSwitchLogPtrOutput struct{ *pulumi.OutputState }

func (ManagedswitchSwitchLogPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedswitchSwitchLog)(nil)).Elem()
}

func (o ManagedswitchSwitchLogPtrOutput) ToManagedswitchSwitchLogPtrOutput() ManagedswitchSwitchLogPtrOutput {
	return o
}

func (o ManagedswitchSwitchLogPtrOutput) ToManagedswitchSwitchLogPtrOutputWithContext(ctx context.Context) ManagedswitchSwitchLogPtrOutput {
	return o
}

func (o ManagedswitchSwitchLogPtrOutput) Elem() ManagedswitchSwitchLogOutput {
	return o.ApplyT(func(v *ManagedswitchSwitchLog) ManagedswitchSwitchLog {
		if v != nil {
			return *v
		}
		var ret ManagedswitchSwitchLog
		return ret
	}).(ManagedswitchSwitchLogOutput)
}

// Enable to configure local logging settings that override global logging settings. Valid values: `enable`, `disable`.
func (o ManagedswitchSwitchLogPtrOutput) LocalOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchSwitchLog) *string {
		if v == nil {
			return nil
		}
		return v.LocalOverride
	}).(pulumi.StringPtrOutput)
}

// Severity of FortiSwitch logs that are added to the FortiGate event log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o ManagedswitchSwitchLogPtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchSwitchLog) *string {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(pulumi.StringPtrOutput)
}

// Enable/disable adding FortiSwitch logs to the FortiGate event log. Valid values: `enable`, `disable`.
func (o ManagedswitchSwitchLogPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchSwitchLog) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type ManagedswitchSwitchStpSettings struct {
	// Enable/disable STP. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
}

// ManagedswitchSwitchStpSettingsInput is an input type that accepts ManagedswitchSwitchStpSettingsArgs and ManagedswitchSwitchStpSettingsOutput values.
// You can construct a concrete instance of `ManagedswitchSwitchStpSettingsInput` via:
//
//	ManagedswitchSwitchStpSettingsArgs{...}
type ManagedswitchSwitchStpSettingsInput interface {
	pulumi.Input

	ToManagedswitchSwitchStpSettingsOutput() ManagedswitchSwitchStpSettingsOutput
	ToManagedswitchSwitchStpSettingsOutputWithContext(context.Context) ManagedswitchSwitchStpSettingsOutput
}

type ManagedswitchSwitchStpSettingsArgs struct {
	// Enable/disable STP. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ManagedswitchSwitchStpSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchSwitchStpSettings)(nil)).Elem()
}

func (i ManagedswitchSwitchStpSettingsArgs) ToManagedswitchSwitchStpSettingsOutput() ManagedswitchSwitchStpSettingsOutput {
	return i.ToManagedswitchSwitchStpSettingsOutputWithContext(context.Background())
}

func (i ManagedswitchSwitchStpSettingsArgs) ToManagedswitchSwitchStpSettingsOutputWithContext(ctx context.Context) ManagedswitchSwitchStpSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSwitchStpSettingsOutput)
}

func (i ManagedswitchSwitchStpSettingsArgs) ToManagedswitchSwitchStpSettingsPtrOutput() ManagedswitchSwitchStpSettingsPtrOutput {
	return i.ToManagedswitchSwitchStpSettingsPtrOutputWithContext(context.Background())
}

func (i ManagedswitchSwitchStpSettingsArgs) ToManagedswitchSwitchStpSettingsPtrOutputWithContext(ctx context.Context) ManagedswitchSwitchStpSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSwitchStpSettingsOutput).ToManagedswitchSwitchStpSettingsPtrOutputWithContext(ctx)
}

// ManagedswitchSwitchStpSettingsPtrInput is an input type that accepts ManagedswitchSwitchStpSettingsArgs, ManagedswitchSwitchStpSettingsPtr and ManagedswitchSwitchStpSettingsPtrOutput values.
// You can construct a concrete instance of `ManagedswitchSwitchStpSettingsPtrInput` via:
//
//	        ManagedswitchSwitchStpSettingsArgs{...}
//
//	or:
//
//	        nil
type ManagedswitchSwitchStpSettingsPtrInput interface {
	pulumi.Input

	ToManagedswitchSwitchStpSettingsPtrOutput() ManagedswitchSwitchStpSettingsPtrOutput
	ToManagedswitchSwitchStpSettingsPtrOutputWithContext(context.Context) ManagedswitchSwitchStpSettingsPtrOutput
}

type managedswitchSwitchStpSettingsPtrType ManagedswitchSwitchStpSettingsArgs

func ManagedswitchSwitchStpSettingsPtr(v *ManagedswitchSwitchStpSettingsArgs) ManagedswitchSwitchStpSettingsPtrInput {
	return (*managedswitchSwitchStpSettingsPtrType)(v)
}

func (*managedswitchSwitchStpSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedswitchSwitchStpSettings)(nil)).Elem()
}

func (i *managedswitchSwitchStpSettingsPtrType) ToManagedswitchSwitchStpSettingsPtrOutput() ManagedswitchSwitchStpSettingsPtrOutput {
	return i.ToManagedswitchSwitchStpSettingsPtrOutputWithContext(context.Background())
}

func (i *managedswitchSwitchStpSettingsPtrType) ToManagedswitchSwitchStpSettingsPtrOutputWithContext(ctx context.Context) ManagedswitchSwitchStpSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchSwitchStpSettingsPtrOutput)
}

type ManagedswitchSwitchStpSettingsOutput struct{ *pulumi.OutputState }

func (ManagedswitchSwitchStpSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchSwitchStpSettings)(nil)).Elem()
}

func (o ManagedswitchSwitchStpSettingsOutput) ToManagedswitchSwitchStpSettingsOutput() ManagedswitchSwitchStpSettingsOutput {
	return o
}

func (o ManagedswitchSwitchStpSettingsOutput) ToManagedswitchSwitchStpSettingsOutputWithContext(ctx context.Context) ManagedswitchSwitchStpSettingsOutput {
	return o
}

func (o ManagedswitchSwitchStpSettingsOutput) ToManagedswitchSwitchStpSettingsPtrOutput() ManagedswitchSwitchStpSettingsPtrOutput {
	return o.ToManagedswitchSwitchStpSettingsPtrOutputWithContext(context.Background())
}

func (o ManagedswitchSwitchStpSettingsOutput) ToManagedswitchSwitchStpSettingsPtrOutputWithContext(ctx context.Context) ManagedswitchSwitchStpSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedswitchSwitchStpSettings) *ManagedswitchSwitchStpSettings {
		return &v
	}).(ManagedswitchSwitchStpSettingsPtrOutput)
}

// Enable/disable STP. Valid values: `enable`, `disable`.
func (o ManagedswitchSwitchStpSettingsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchSwitchStpSettings) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ManagedswitchSwitchStpSettingsPtrOutput struct{ *pulumi.OutputState }

func (ManagedswitchSwitchStpSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedswitchSwitchStpSettings)(nil)).Elem()
}

func (o ManagedswitchSwitchStpSettingsPtrOutput) ToManagedswitchSwitchStpSettingsPtrOutput() ManagedswitchSwitchStpSettingsPtrOutput {
	return o
}

func (o ManagedswitchSwitchStpSettingsPtrOutput) ToManagedswitchSwitchStpSettingsPtrOutputWithContext(ctx context.Context) ManagedswitchSwitchStpSettingsPtrOutput {
	return o
}

func (o ManagedswitchSwitchStpSettingsPtrOutput) Elem() ManagedswitchSwitchStpSettingsOutput {
	return o.ApplyT(func(v *ManagedswitchSwitchStpSettings) ManagedswitchSwitchStpSettings {
		if v != nil {
			return *v
		}
		var ret ManagedswitchSwitchStpSettings
		return ret
	}).(ManagedswitchSwitchStpSettingsOutput)
}

// Enable/disable STP. Valid values: `enable`, `disable`.
func (o ManagedswitchSwitchStpSettingsPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedswitchSwitchStpSettings) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type ManagedswitchVlan struct {
	// 802.1x Radius (Tunnel-Private-Group-Id) VLANID assign-by-name priority. A smaller value has a higher priority.
	AssignmentPriority *int `pulumi:"assignmentPriority"`
	// VLAN name.
	VlanName *string `pulumi:"vlanName"`
}

// ManagedswitchVlanInput is an input type that accepts ManagedswitchVlanArgs and ManagedswitchVlanOutput values.
// You can construct a concrete instance of `ManagedswitchVlanInput` via:
//
//	ManagedswitchVlanArgs{...}
type ManagedswitchVlanInput interface {
	pulumi.Input

	ToManagedswitchVlanOutput() ManagedswitchVlanOutput
	ToManagedswitchVlanOutputWithContext(context.Context) ManagedswitchVlanOutput
}

type ManagedswitchVlanArgs struct {
	// 802.1x Radius (Tunnel-Private-Group-Id) VLANID assign-by-name priority. A smaller value has a higher priority.
	AssignmentPriority pulumi.IntPtrInput `pulumi:"assignmentPriority"`
	// VLAN name.
	VlanName pulumi.StringPtrInput `pulumi:"vlanName"`
}

func (ManagedswitchVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchVlan)(nil)).Elem()
}

func (i ManagedswitchVlanArgs) ToManagedswitchVlanOutput() ManagedswitchVlanOutput {
	return i.ToManagedswitchVlanOutputWithContext(context.Background())
}

func (i ManagedswitchVlanArgs) ToManagedswitchVlanOutputWithContext(ctx context.Context) ManagedswitchVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchVlanOutput)
}

// ManagedswitchVlanArrayInput is an input type that accepts ManagedswitchVlanArray and ManagedswitchVlanArrayOutput values.
// You can construct a concrete instance of `ManagedswitchVlanArrayInput` via:
//
//	ManagedswitchVlanArray{ ManagedswitchVlanArgs{...} }
type ManagedswitchVlanArrayInput interface {
	pulumi.Input

	ToManagedswitchVlanArrayOutput() ManagedswitchVlanArrayOutput
	ToManagedswitchVlanArrayOutputWithContext(context.Context) ManagedswitchVlanArrayOutput
}

type ManagedswitchVlanArray []ManagedswitchVlanInput

func (ManagedswitchVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchVlan)(nil)).Elem()
}

func (i ManagedswitchVlanArray) ToManagedswitchVlanArrayOutput() ManagedswitchVlanArrayOutput {
	return i.ToManagedswitchVlanArrayOutputWithContext(context.Background())
}

func (i ManagedswitchVlanArray) ToManagedswitchVlanArrayOutputWithContext(ctx context.Context) ManagedswitchVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchVlanArrayOutput)
}

type ManagedswitchVlanOutput struct{ *pulumi.OutputState }

func (ManagedswitchVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedswitchVlan)(nil)).Elem()
}

func (o ManagedswitchVlanOutput) ToManagedswitchVlanOutput() ManagedswitchVlanOutput {
	return o
}

func (o ManagedswitchVlanOutput) ToManagedswitchVlanOutputWithContext(ctx context.Context) ManagedswitchVlanOutput {
	return o
}

// 802.1x Radius (Tunnel-Private-Group-Id) VLANID assign-by-name priority. A smaller value has a higher priority.
func (o ManagedswitchVlanOutput) AssignmentPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedswitchVlan) *int { return v.AssignmentPriority }).(pulumi.IntPtrOutput)
}

// VLAN name.
func (o ManagedswitchVlanOutput) VlanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedswitchVlan) *string { return v.VlanName }).(pulumi.StringPtrOutput)
}

type ManagedswitchVlanArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedswitchVlan)(nil)).Elem()
}

func (o ManagedswitchVlanArrayOutput) ToManagedswitchVlanArrayOutput() ManagedswitchVlanArrayOutput {
	return o
}

func (o ManagedswitchVlanArrayOutput) ToManagedswitchVlanArrayOutputWithContext(ctx context.Context) ManagedswitchVlanArrayOutput {
	return o
}

func (o ManagedswitchVlanArrayOutput) Index(i pulumi.IntInput) ManagedswitchVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedswitchVlan {
		return vs[0].([]ManagedswitchVlan)[vs[1].(int)]
	}).(ManagedswitchVlanOutput)
}

type QuarantineTarget struct {
	// Description for the quarantine MAC.
	Description *string `pulumi:"description"`
	// FSW entry id for the quarantine MAC.
	EntryId *int `pulumi:"entryId"`
	// Quarantine MAC.
	Mac *string `pulumi:"mac"`
	// Tags for the quarantine MAC. The structure of `tag` block is documented below.
	Tags []QuarantineTargetTag `pulumi:"tags"`
}

// QuarantineTargetInput is an input type that accepts QuarantineTargetArgs and QuarantineTargetOutput values.
// You can construct a concrete instance of `QuarantineTargetInput` via:
//
//	QuarantineTargetArgs{...}
type QuarantineTargetInput interface {
	pulumi.Input

	ToQuarantineTargetOutput() QuarantineTargetOutput
	ToQuarantineTargetOutputWithContext(context.Context) QuarantineTargetOutput
}

type QuarantineTargetArgs struct {
	// Description for the quarantine MAC.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// FSW entry id for the quarantine MAC.
	EntryId pulumi.IntPtrInput `pulumi:"entryId"`
	// Quarantine MAC.
	Mac pulumi.StringPtrInput `pulumi:"mac"`
	// Tags for the quarantine MAC. The structure of `tag` block is documented below.
	Tags QuarantineTargetTagArrayInput `pulumi:"tags"`
}

func (QuarantineTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuarantineTarget)(nil)).Elem()
}

func (i QuarantineTargetArgs) ToQuarantineTargetOutput() QuarantineTargetOutput {
	return i.ToQuarantineTargetOutputWithContext(context.Background())
}

func (i QuarantineTargetArgs) ToQuarantineTargetOutputWithContext(ctx context.Context) QuarantineTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuarantineTargetOutput)
}

// QuarantineTargetArrayInput is an input type that accepts QuarantineTargetArray and QuarantineTargetArrayOutput values.
// You can construct a concrete instance of `QuarantineTargetArrayInput` via:
//
//	QuarantineTargetArray{ QuarantineTargetArgs{...} }
type QuarantineTargetArrayInput interface {
	pulumi.Input

	ToQuarantineTargetArrayOutput() QuarantineTargetArrayOutput
	ToQuarantineTargetArrayOutputWithContext(context.Context) QuarantineTargetArrayOutput
}

type QuarantineTargetArray []QuarantineTargetInput

func (QuarantineTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuarantineTarget)(nil)).Elem()
}

func (i QuarantineTargetArray) ToQuarantineTargetArrayOutput() QuarantineTargetArrayOutput {
	return i.ToQuarantineTargetArrayOutputWithContext(context.Background())
}

func (i QuarantineTargetArray) ToQuarantineTargetArrayOutputWithContext(ctx context.Context) QuarantineTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuarantineTargetArrayOutput)
}

type QuarantineTargetOutput struct{ *pulumi.OutputState }

func (QuarantineTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuarantineTarget)(nil)).Elem()
}

func (o QuarantineTargetOutput) ToQuarantineTargetOutput() QuarantineTargetOutput {
	return o
}

func (o QuarantineTargetOutput) ToQuarantineTargetOutputWithContext(ctx context.Context) QuarantineTargetOutput {
	return o
}

// Description for the quarantine MAC.
func (o QuarantineTargetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuarantineTarget) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// FSW entry id for the quarantine MAC.
func (o QuarantineTargetOutput) EntryId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QuarantineTarget) *int { return v.EntryId }).(pulumi.IntPtrOutput)
}

// Quarantine MAC.
func (o QuarantineTargetOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuarantineTarget) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

// Tags for the quarantine MAC. The structure of `tag` block is documented below.
func (o QuarantineTargetOutput) Tags() QuarantineTargetTagArrayOutput {
	return o.ApplyT(func(v QuarantineTarget) []QuarantineTargetTag { return v.Tags }).(QuarantineTargetTagArrayOutput)
}

type QuarantineTargetArrayOutput struct{ *pulumi.OutputState }

func (QuarantineTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuarantineTarget)(nil)).Elem()
}

func (o QuarantineTargetArrayOutput) ToQuarantineTargetArrayOutput() QuarantineTargetArrayOutput {
	return o
}

func (o QuarantineTargetArrayOutput) ToQuarantineTargetArrayOutputWithContext(ctx context.Context) QuarantineTargetArrayOutput {
	return o
}

func (o QuarantineTargetArrayOutput) Index(i pulumi.IntInput) QuarantineTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QuarantineTarget {
		return vs[0].([]QuarantineTarget)[vs[1].(int)]
	}).(QuarantineTargetOutput)
}

type QuarantineTargetTag struct {
	// Tag string(eg. string1 string2 string3).
	Tags *string `pulumi:"tags"`
}

// QuarantineTargetTagInput is an input type that accepts QuarantineTargetTagArgs and QuarantineTargetTagOutput values.
// You can construct a concrete instance of `QuarantineTargetTagInput` via:
//
//	QuarantineTargetTagArgs{...}
type QuarantineTargetTagInput interface {
	pulumi.Input

	ToQuarantineTargetTagOutput() QuarantineTargetTagOutput
	ToQuarantineTargetTagOutputWithContext(context.Context) QuarantineTargetTagOutput
}

type QuarantineTargetTagArgs struct {
	// Tag string(eg. string1 string2 string3).
	Tags pulumi.StringPtrInput `pulumi:"tags"`
}

func (QuarantineTargetTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuarantineTargetTag)(nil)).Elem()
}

func (i QuarantineTargetTagArgs) ToQuarantineTargetTagOutput() QuarantineTargetTagOutput {
	return i.ToQuarantineTargetTagOutputWithContext(context.Background())
}

func (i QuarantineTargetTagArgs) ToQuarantineTargetTagOutputWithContext(ctx context.Context) QuarantineTargetTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuarantineTargetTagOutput)
}

// QuarantineTargetTagArrayInput is an input type that accepts QuarantineTargetTagArray and QuarantineTargetTagArrayOutput values.
// You can construct a concrete instance of `QuarantineTargetTagArrayInput` via:
//
//	QuarantineTargetTagArray{ QuarantineTargetTagArgs{...} }
type QuarantineTargetTagArrayInput interface {
	pulumi.Input

	ToQuarantineTargetTagArrayOutput() QuarantineTargetTagArrayOutput
	ToQuarantineTargetTagArrayOutputWithContext(context.Context) QuarantineTargetTagArrayOutput
}

type QuarantineTargetTagArray []QuarantineTargetTagInput

func (QuarantineTargetTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuarantineTargetTag)(nil)).Elem()
}

func (i QuarantineTargetTagArray) ToQuarantineTargetTagArrayOutput() QuarantineTargetTagArrayOutput {
	return i.ToQuarantineTargetTagArrayOutputWithContext(context.Background())
}

func (i QuarantineTargetTagArray) ToQuarantineTargetTagArrayOutputWithContext(ctx context.Context) QuarantineTargetTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuarantineTargetTagArrayOutput)
}

type QuarantineTargetTagOutput struct{ *pulumi.OutputState }

func (QuarantineTargetTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuarantineTargetTag)(nil)).Elem()
}

func (o QuarantineTargetTagOutput) ToQuarantineTargetTagOutput() QuarantineTargetTagOutput {
	return o
}

func (o QuarantineTargetTagOutput) ToQuarantineTargetTagOutputWithContext(ctx context.Context) QuarantineTargetTagOutput {
	return o
}

// Tag string(eg. string1 string2 string3).
func (o QuarantineTargetTagOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuarantineTargetTag) *string { return v.Tags }).(pulumi.StringPtrOutput)
}

type QuarantineTargetTagArrayOutput struct{ *pulumi.OutputState }

func (QuarantineTargetTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuarantineTargetTag)(nil)).Elem()
}

func (o QuarantineTargetTagArrayOutput) ToQuarantineTargetTagArrayOutput() QuarantineTargetTagArrayOutput {
	return o
}

func (o QuarantineTargetTagArrayOutput) ToQuarantineTargetTagArrayOutputWithContext(ctx context.Context) QuarantineTargetTagArrayOutput {
	return o
}

func (o QuarantineTargetTagArrayOutput) Index(i pulumi.IntInput) QuarantineTargetTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QuarantineTargetTag {
		return vs[0].([]QuarantineTargetTag)[vs[1].(int)]
	}).(QuarantineTargetTagOutput)
}

type SnmpcommunityHost struct {
	// Host entry ID.
	Id *int `pulumi:"id"`
	// IPv4 address of the SNMP manager (host).
	Ip *string `pulumi:"ip"`
}

// SnmpcommunityHostInput is an input type that accepts SnmpcommunityHostArgs and SnmpcommunityHostOutput values.
// You can construct a concrete instance of `SnmpcommunityHostInput` via:
//
//	SnmpcommunityHostArgs{...}
type SnmpcommunityHostInput interface {
	pulumi.Input

	ToSnmpcommunityHostOutput() SnmpcommunityHostOutput
	ToSnmpcommunityHostOutputWithContext(context.Context) SnmpcommunityHostOutput
}

type SnmpcommunityHostArgs struct {
	// Host entry ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// IPv4 address of the SNMP manager (host).
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (SnmpcommunityHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpcommunityHost)(nil)).Elem()
}

func (i SnmpcommunityHostArgs) ToSnmpcommunityHostOutput() SnmpcommunityHostOutput {
	return i.ToSnmpcommunityHostOutputWithContext(context.Background())
}

func (i SnmpcommunityHostArgs) ToSnmpcommunityHostOutputWithContext(ctx context.Context) SnmpcommunityHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpcommunityHostOutput)
}

// SnmpcommunityHostArrayInput is an input type that accepts SnmpcommunityHostArray and SnmpcommunityHostArrayOutput values.
// You can construct a concrete instance of `SnmpcommunityHostArrayInput` via:
//
//	SnmpcommunityHostArray{ SnmpcommunityHostArgs{...} }
type SnmpcommunityHostArrayInput interface {
	pulumi.Input

	ToSnmpcommunityHostArrayOutput() SnmpcommunityHostArrayOutput
	ToSnmpcommunityHostArrayOutputWithContext(context.Context) SnmpcommunityHostArrayOutput
}

type SnmpcommunityHostArray []SnmpcommunityHostInput

func (SnmpcommunityHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpcommunityHost)(nil)).Elem()
}

func (i SnmpcommunityHostArray) ToSnmpcommunityHostArrayOutput() SnmpcommunityHostArrayOutput {
	return i.ToSnmpcommunityHostArrayOutputWithContext(context.Background())
}

func (i SnmpcommunityHostArray) ToSnmpcommunityHostArrayOutputWithContext(ctx context.Context) SnmpcommunityHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpcommunityHostArrayOutput)
}

type SnmpcommunityHostOutput struct{ *pulumi.OutputState }

func (SnmpcommunityHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpcommunityHost)(nil)).Elem()
}

func (o SnmpcommunityHostOutput) ToSnmpcommunityHostOutput() SnmpcommunityHostOutput {
	return o
}

func (o SnmpcommunityHostOutput) ToSnmpcommunityHostOutputWithContext(ctx context.Context) SnmpcommunityHostOutput {
	return o
}

// Host entry ID.
func (o SnmpcommunityHostOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SnmpcommunityHost) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// IPv4 address of the SNMP manager (host).
func (o SnmpcommunityHostOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpcommunityHost) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type SnmpcommunityHostArrayOutput struct{ *pulumi.OutputState }

func (SnmpcommunityHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpcommunityHost)(nil)).Elem()
}

func (o SnmpcommunityHostArrayOutput) ToSnmpcommunityHostArrayOutput() SnmpcommunityHostArrayOutput {
	return o
}

func (o SnmpcommunityHostArrayOutput) ToSnmpcommunityHostArrayOutputWithContext(ctx context.Context) SnmpcommunityHostArrayOutput {
	return o
}

func (o SnmpcommunityHostArrayOutput) Index(i pulumi.IntInput) SnmpcommunityHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SnmpcommunityHost {
		return vs[0].([]SnmpcommunityHost)[vs[1].(int)]
	}).(SnmpcommunityHostOutput)
}

type StpinstanceVlanRange struct {
	// VLAN name.
	VlanName *string `pulumi:"vlanName"`
}

// StpinstanceVlanRangeInput is an input type that accepts StpinstanceVlanRangeArgs and StpinstanceVlanRangeOutput values.
// You can construct a concrete instance of `StpinstanceVlanRangeInput` via:
//
//	StpinstanceVlanRangeArgs{...}
type StpinstanceVlanRangeInput interface {
	pulumi.Input

	ToStpinstanceVlanRangeOutput() StpinstanceVlanRangeOutput
	ToStpinstanceVlanRangeOutputWithContext(context.Context) StpinstanceVlanRangeOutput
}

type StpinstanceVlanRangeArgs struct {
	// VLAN name.
	VlanName pulumi.StringPtrInput `pulumi:"vlanName"`
}

func (StpinstanceVlanRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StpinstanceVlanRange)(nil)).Elem()
}

func (i StpinstanceVlanRangeArgs) ToStpinstanceVlanRangeOutput() StpinstanceVlanRangeOutput {
	return i.ToStpinstanceVlanRangeOutputWithContext(context.Background())
}

func (i StpinstanceVlanRangeArgs) ToStpinstanceVlanRangeOutputWithContext(ctx context.Context) StpinstanceVlanRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StpinstanceVlanRangeOutput)
}

// StpinstanceVlanRangeArrayInput is an input type that accepts StpinstanceVlanRangeArray and StpinstanceVlanRangeArrayOutput values.
// You can construct a concrete instance of `StpinstanceVlanRangeArrayInput` via:
//
//	StpinstanceVlanRangeArray{ StpinstanceVlanRangeArgs{...} }
type StpinstanceVlanRangeArrayInput interface {
	pulumi.Input

	ToStpinstanceVlanRangeArrayOutput() StpinstanceVlanRangeArrayOutput
	ToStpinstanceVlanRangeArrayOutputWithContext(context.Context) StpinstanceVlanRangeArrayOutput
}

type StpinstanceVlanRangeArray []StpinstanceVlanRangeInput

func (StpinstanceVlanRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StpinstanceVlanRange)(nil)).Elem()
}

func (i StpinstanceVlanRangeArray) ToStpinstanceVlanRangeArrayOutput() StpinstanceVlanRangeArrayOutput {
	return i.ToStpinstanceVlanRangeArrayOutputWithContext(context.Background())
}

func (i StpinstanceVlanRangeArray) ToStpinstanceVlanRangeArrayOutputWithContext(ctx context.Context) StpinstanceVlanRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StpinstanceVlanRangeArrayOutput)
}

type StpinstanceVlanRangeOutput struct{ *pulumi.OutputState }

func (StpinstanceVlanRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StpinstanceVlanRange)(nil)).Elem()
}

func (o StpinstanceVlanRangeOutput) ToStpinstanceVlanRangeOutput() StpinstanceVlanRangeOutput {
	return o
}

func (o StpinstanceVlanRangeOutput) ToStpinstanceVlanRangeOutputWithContext(ctx context.Context) StpinstanceVlanRangeOutput {
	return o
}

// VLAN name.
func (o StpinstanceVlanRangeOutput) VlanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StpinstanceVlanRange) *string { return v.VlanName }).(pulumi.StringPtrOutput)
}

type StpinstanceVlanRangeArrayOutput struct{ *pulumi.OutputState }

func (StpinstanceVlanRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StpinstanceVlanRange)(nil)).Elem()
}

func (o StpinstanceVlanRangeArrayOutput) ToStpinstanceVlanRangeArrayOutput() StpinstanceVlanRangeArrayOutput {
	return o
}

func (o StpinstanceVlanRangeArrayOutput) ToStpinstanceVlanRangeArrayOutputWithContext(ctx context.Context) StpinstanceVlanRangeArrayOutput {
	return o
}

func (o StpinstanceVlanRangeArrayOutput) Index(i pulumi.IntInput) StpinstanceVlanRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StpinstanceVlanRange {
		return vs[0].([]StpinstanceVlanRange)[vs[1].(int)]
	}).(StpinstanceVlanRangeOutput)
}

type SwitchgroupMember struct {
	// Managed device ID.
	Name *string `pulumi:"name"`
	// Managed device ID.
	SwitchId *string `pulumi:"switchId"`
}

// SwitchgroupMemberInput is an input type that accepts SwitchgroupMemberArgs and SwitchgroupMemberOutput values.
// You can construct a concrete instance of `SwitchgroupMemberInput` via:
//
//	SwitchgroupMemberArgs{...}
type SwitchgroupMemberInput interface {
	pulumi.Input

	ToSwitchgroupMemberOutput() SwitchgroupMemberOutput
	ToSwitchgroupMemberOutputWithContext(context.Context) SwitchgroupMemberOutput
}

type SwitchgroupMemberArgs struct {
	// Managed device ID.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Managed device ID.
	SwitchId pulumi.StringPtrInput `pulumi:"switchId"`
}

func (SwitchgroupMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SwitchgroupMember)(nil)).Elem()
}

func (i SwitchgroupMemberArgs) ToSwitchgroupMemberOutput() SwitchgroupMemberOutput {
	return i.ToSwitchgroupMemberOutputWithContext(context.Background())
}

func (i SwitchgroupMemberArgs) ToSwitchgroupMemberOutputWithContext(ctx context.Context) SwitchgroupMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchgroupMemberOutput)
}

// SwitchgroupMemberArrayInput is an input type that accepts SwitchgroupMemberArray and SwitchgroupMemberArrayOutput values.
// You can construct a concrete instance of `SwitchgroupMemberArrayInput` via:
//
//	SwitchgroupMemberArray{ SwitchgroupMemberArgs{...} }
type SwitchgroupMemberArrayInput interface {
	pulumi.Input

	ToSwitchgroupMemberArrayOutput() SwitchgroupMemberArrayOutput
	ToSwitchgroupMemberArrayOutputWithContext(context.Context) SwitchgroupMemberArrayOutput
}

type SwitchgroupMemberArray []SwitchgroupMemberInput

func (SwitchgroupMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SwitchgroupMember)(nil)).Elem()
}

func (i SwitchgroupMemberArray) ToSwitchgroupMemberArrayOutput() SwitchgroupMemberArrayOutput {
	return i.ToSwitchgroupMemberArrayOutputWithContext(context.Background())
}

func (i SwitchgroupMemberArray) ToSwitchgroupMemberArrayOutputWithContext(ctx context.Context) SwitchgroupMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchgroupMemberArrayOutput)
}

type SwitchgroupMemberOutput struct{ *pulumi.OutputState }

func (SwitchgroupMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SwitchgroupMember)(nil)).Elem()
}

func (o SwitchgroupMemberOutput) ToSwitchgroupMemberOutput() SwitchgroupMemberOutput {
	return o
}

func (o SwitchgroupMemberOutput) ToSwitchgroupMemberOutputWithContext(ctx context.Context) SwitchgroupMemberOutput {
	return o
}

// Managed device ID.
func (o SwitchgroupMemberOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SwitchgroupMember) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Managed device ID.
func (o SwitchgroupMemberOutput) SwitchId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SwitchgroupMember) *string { return v.SwitchId }).(pulumi.StringPtrOutput)
}

type SwitchgroupMemberArrayOutput struct{ *pulumi.OutputState }

func (SwitchgroupMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SwitchgroupMember)(nil)).Elem()
}

func (o SwitchgroupMemberArrayOutput) ToSwitchgroupMemberArrayOutput() SwitchgroupMemberArrayOutput {
	return o
}

func (o SwitchgroupMemberArrayOutput) ToSwitchgroupMemberArrayOutputWithContext(ctx context.Context) SwitchgroupMemberArrayOutput {
	return o
}

func (o SwitchgroupMemberArrayOutput) Index(i pulumi.IntInput) SwitchgroupMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SwitchgroupMember {
		return vs[0].([]SwitchgroupMember)[vs[1].(int)]
	}).(SwitchgroupMemberOutput)
}

type TrafficsnifferTargetIp struct {
	// Description for the sniffer IP.
	Description *string `pulumi:"description"`
	// Sniffer IP.
	Ip *string `pulumi:"ip"`
}

// TrafficsnifferTargetIpInput is an input type that accepts TrafficsnifferTargetIpArgs and TrafficsnifferTargetIpOutput values.
// You can construct a concrete instance of `TrafficsnifferTargetIpInput` via:
//
//	TrafficsnifferTargetIpArgs{...}
type TrafficsnifferTargetIpInput interface {
	pulumi.Input

	ToTrafficsnifferTargetIpOutput() TrafficsnifferTargetIpOutput
	ToTrafficsnifferTargetIpOutputWithContext(context.Context) TrafficsnifferTargetIpOutput
}

type TrafficsnifferTargetIpArgs struct {
	// Description for the sniffer IP.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Sniffer IP.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (TrafficsnifferTargetIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficsnifferTargetIp)(nil)).Elem()
}

func (i TrafficsnifferTargetIpArgs) ToTrafficsnifferTargetIpOutput() TrafficsnifferTargetIpOutput {
	return i.ToTrafficsnifferTargetIpOutputWithContext(context.Background())
}

func (i TrafficsnifferTargetIpArgs) ToTrafficsnifferTargetIpOutputWithContext(ctx context.Context) TrafficsnifferTargetIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficsnifferTargetIpOutput)
}

// TrafficsnifferTargetIpArrayInput is an input type that accepts TrafficsnifferTargetIpArray and TrafficsnifferTargetIpArrayOutput values.
// You can construct a concrete instance of `TrafficsnifferTargetIpArrayInput` via:
//
//	TrafficsnifferTargetIpArray{ TrafficsnifferTargetIpArgs{...} }
type TrafficsnifferTargetIpArrayInput interface {
	pulumi.Input

	ToTrafficsnifferTargetIpArrayOutput() TrafficsnifferTargetIpArrayOutput
	ToTrafficsnifferTargetIpArrayOutputWithContext(context.Context) TrafficsnifferTargetIpArrayOutput
}

type TrafficsnifferTargetIpArray []TrafficsnifferTargetIpInput

func (TrafficsnifferTargetIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrafficsnifferTargetIp)(nil)).Elem()
}

func (i TrafficsnifferTargetIpArray) ToTrafficsnifferTargetIpArrayOutput() TrafficsnifferTargetIpArrayOutput {
	return i.ToTrafficsnifferTargetIpArrayOutputWithContext(context.Background())
}

func (i TrafficsnifferTargetIpArray) ToTrafficsnifferTargetIpArrayOutputWithContext(ctx context.Context) TrafficsnifferTargetIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficsnifferTargetIpArrayOutput)
}

type TrafficsnifferTargetIpOutput struct{ *pulumi.OutputState }

func (TrafficsnifferTargetIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficsnifferTargetIp)(nil)).Elem()
}

func (o TrafficsnifferTargetIpOutput) ToTrafficsnifferTargetIpOutput() TrafficsnifferTargetIpOutput {
	return o
}

func (o TrafficsnifferTargetIpOutput) ToTrafficsnifferTargetIpOutputWithContext(ctx context.Context) TrafficsnifferTargetIpOutput {
	return o
}

// Description for the sniffer IP.
func (o TrafficsnifferTargetIpOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrafficsnifferTargetIp) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Sniffer IP.
func (o TrafficsnifferTargetIpOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrafficsnifferTargetIp) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type TrafficsnifferTargetIpArrayOutput struct{ *pulumi.OutputState }

func (TrafficsnifferTargetIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrafficsnifferTargetIp)(nil)).Elem()
}

func (o TrafficsnifferTargetIpArrayOutput) ToTrafficsnifferTargetIpArrayOutput() TrafficsnifferTargetIpArrayOutput {
	return o
}

func (o TrafficsnifferTargetIpArrayOutput) ToTrafficsnifferTargetIpArrayOutputWithContext(ctx context.Context) TrafficsnifferTargetIpArrayOutput {
	return o
}

func (o TrafficsnifferTargetIpArrayOutput) Index(i pulumi.IntInput) TrafficsnifferTargetIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrafficsnifferTargetIp {
		return vs[0].([]TrafficsnifferTargetIp)[vs[1].(int)]
	}).(TrafficsnifferTargetIpOutput)
}

type TrafficsnifferTargetMac struct {
	// Description for the sniffer MAC.
	Description *string `pulumi:"description"`
	// Sniffer MAC.
	Mac *string `pulumi:"mac"`
}

// TrafficsnifferTargetMacInput is an input type that accepts TrafficsnifferTargetMacArgs and TrafficsnifferTargetMacOutput values.
// You can construct a concrete instance of `TrafficsnifferTargetMacInput` via:
//
//	TrafficsnifferTargetMacArgs{...}
type TrafficsnifferTargetMacInput interface {
	pulumi.Input

	ToTrafficsnifferTargetMacOutput() TrafficsnifferTargetMacOutput
	ToTrafficsnifferTargetMacOutputWithContext(context.Context) TrafficsnifferTargetMacOutput
}

type TrafficsnifferTargetMacArgs struct {
	// Description for the sniffer MAC.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Sniffer MAC.
	Mac pulumi.StringPtrInput `pulumi:"mac"`
}

func (TrafficsnifferTargetMacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficsnifferTargetMac)(nil)).Elem()
}

func (i TrafficsnifferTargetMacArgs) ToTrafficsnifferTargetMacOutput() TrafficsnifferTargetMacOutput {
	return i.ToTrafficsnifferTargetMacOutputWithContext(context.Background())
}

func (i TrafficsnifferTargetMacArgs) ToTrafficsnifferTargetMacOutputWithContext(ctx context.Context) TrafficsnifferTargetMacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficsnifferTargetMacOutput)
}

// TrafficsnifferTargetMacArrayInput is an input type that accepts TrafficsnifferTargetMacArray and TrafficsnifferTargetMacArrayOutput values.
// You can construct a concrete instance of `TrafficsnifferTargetMacArrayInput` via:
//
//	TrafficsnifferTargetMacArray{ TrafficsnifferTargetMacArgs{...} }
type TrafficsnifferTargetMacArrayInput interface {
	pulumi.Input

	ToTrafficsnifferTargetMacArrayOutput() TrafficsnifferTargetMacArrayOutput
	ToTrafficsnifferTargetMacArrayOutputWithContext(context.Context) TrafficsnifferTargetMacArrayOutput
}

type TrafficsnifferTargetMacArray []TrafficsnifferTargetMacInput

func (TrafficsnifferTargetMacArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrafficsnifferTargetMac)(nil)).Elem()
}

func (i TrafficsnifferTargetMacArray) ToTrafficsnifferTargetMacArrayOutput() TrafficsnifferTargetMacArrayOutput {
	return i.ToTrafficsnifferTargetMacArrayOutputWithContext(context.Background())
}

func (i TrafficsnifferTargetMacArray) ToTrafficsnifferTargetMacArrayOutputWithContext(ctx context.Context) TrafficsnifferTargetMacArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficsnifferTargetMacArrayOutput)
}

type TrafficsnifferTargetMacOutput struct{ *pulumi.OutputState }

func (TrafficsnifferTargetMacOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficsnifferTargetMac)(nil)).Elem()
}

func (o TrafficsnifferTargetMacOutput) ToTrafficsnifferTargetMacOutput() TrafficsnifferTargetMacOutput {
	return o
}

func (o TrafficsnifferTargetMacOutput) ToTrafficsnifferTargetMacOutputWithContext(ctx context.Context) TrafficsnifferTargetMacOutput {
	return o
}

// Description for the sniffer MAC.
func (o TrafficsnifferTargetMacOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrafficsnifferTargetMac) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Sniffer MAC.
func (o TrafficsnifferTargetMacOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrafficsnifferTargetMac) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

type TrafficsnifferTargetMacArrayOutput struct{ *pulumi.OutputState }

func (TrafficsnifferTargetMacArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrafficsnifferTargetMac)(nil)).Elem()
}

func (o TrafficsnifferTargetMacArrayOutput) ToTrafficsnifferTargetMacArrayOutput() TrafficsnifferTargetMacArrayOutput {
	return o
}

func (o TrafficsnifferTargetMacArrayOutput) ToTrafficsnifferTargetMacArrayOutputWithContext(ctx context.Context) TrafficsnifferTargetMacArrayOutput {
	return o
}

func (o TrafficsnifferTargetMacArrayOutput) Index(i pulumi.IntInput) TrafficsnifferTargetMacOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrafficsnifferTargetMac {
		return vs[0].([]TrafficsnifferTargetMac)[vs[1].(int)]
	}).(TrafficsnifferTargetMacOutput)
}

type TrafficsnifferTargetPort struct {
	// Description for the sniffer port entry.
	Description *string `pulumi:"description"`
	// Configure source ingress port interfaces. The structure of `inPorts` block is documented below.
	InPorts []TrafficsnifferTargetPortInPort `pulumi:"inPorts"`
	// Configure source egress port interfaces. The structure of `outPorts` block is documented below.
	OutPorts []TrafficsnifferTargetPortOutPort `pulumi:"outPorts"`
	// Managed-switch ID.
	SwitchId *string `pulumi:"switchId"`
}

// TrafficsnifferTargetPortInput is an input type that accepts TrafficsnifferTargetPortArgs and TrafficsnifferTargetPortOutput values.
// You can construct a concrete instance of `TrafficsnifferTargetPortInput` via:
//
//	TrafficsnifferTargetPortArgs{...}
type TrafficsnifferTargetPortInput interface {
	pulumi.Input

	ToTrafficsnifferTargetPortOutput() TrafficsnifferTargetPortOutput
	ToTrafficsnifferTargetPortOutputWithContext(context.Context) TrafficsnifferTargetPortOutput
}

type TrafficsnifferTargetPortArgs struct {
	// Description for the sniffer port entry.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Configure source ingress port interfaces. The structure of `inPorts` block is documented below.
	InPorts TrafficsnifferTargetPortInPortArrayInput `pulumi:"inPorts"`
	// Configure source egress port interfaces. The structure of `outPorts` block is documented below.
	OutPorts TrafficsnifferTargetPortOutPortArrayInput `pulumi:"outPorts"`
	// Managed-switch ID.
	SwitchId pulumi.StringPtrInput `pulumi:"switchId"`
}

func (TrafficsnifferTargetPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficsnifferTargetPort)(nil)).Elem()
}

func (i TrafficsnifferTargetPortArgs) ToTrafficsnifferTargetPortOutput() TrafficsnifferTargetPortOutput {
	return i.ToTrafficsnifferTargetPortOutputWithContext(context.Background())
}

func (i TrafficsnifferTargetPortArgs) ToTrafficsnifferTargetPortOutputWithContext(ctx context.Context) TrafficsnifferTargetPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficsnifferTargetPortOutput)
}

// TrafficsnifferTargetPortArrayInput is an input type that accepts TrafficsnifferTargetPortArray and TrafficsnifferTargetPortArrayOutput values.
// You can construct a concrete instance of `TrafficsnifferTargetPortArrayInput` via:
//
//	TrafficsnifferTargetPortArray{ TrafficsnifferTargetPortArgs{...} }
type TrafficsnifferTargetPortArrayInput interface {
	pulumi.Input

	ToTrafficsnifferTargetPortArrayOutput() TrafficsnifferTargetPortArrayOutput
	ToTrafficsnifferTargetPortArrayOutputWithContext(context.Context) TrafficsnifferTargetPortArrayOutput
}

type TrafficsnifferTargetPortArray []TrafficsnifferTargetPortInput

func (TrafficsnifferTargetPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrafficsnifferTargetPort)(nil)).Elem()
}

func (i TrafficsnifferTargetPortArray) ToTrafficsnifferTargetPortArrayOutput() TrafficsnifferTargetPortArrayOutput {
	return i.ToTrafficsnifferTargetPortArrayOutputWithContext(context.Background())
}

func (i TrafficsnifferTargetPortArray) ToTrafficsnifferTargetPortArrayOutputWithContext(ctx context.Context) TrafficsnifferTargetPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficsnifferTargetPortArrayOutput)
}

type TrafficsnifferTargetPortOutput struct{ *pulumi.OutputState }

func (TrafficsnifferTargetPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficsnifferTargetPort)(nil)).Elem()
}

func (o TrafficsnifferTargetPortOutput) ToTrafficsnifferTargetPortOutput() TrafficsnifferTargetPortOutput {
	return o
}

func (o TrafficsnifferTargetPortOutput) ToTrafficsnifferTargetPortOutputWithContext(ctx context.Context) TrafficsnifferTargetPortOutput {
	return o
}

// Description for the sniffer port entry.
func (o TrafficsnifferTargetPortOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrafficsnifferTargetPort) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Configure source ingress port interfaces. The structure of `inPorts` block is documented below.
func (o TrafficsnifferTargetPortOutput) InPorts() TrafficsnifferTargetPortInPortArrayOutput {
	return o.ApplyT(func(v TrafficsnifferTargetPort) []TrafficsnifferTargetPortInPort { return v.InPorts }).(TrafficsnifferTargetPortInPortArrayOutput)
}

// Configure source egress port interfaces. The structure of `outPorts` block is documented below.
func (o TrafficsnifferTargetPortOutput) OutPorts() TrafficsnifferTargetPortOutPortArrayOutput {
	return o.ApplyT(func(v TrafficsnifferTargetPort) []TrafficsnifferTargetPortOutPort { return v.OutPorts }).(TrafficsnifferTargetPortOutPortArrayOutput)
}

// Managed-switch ID.
func (o TrafficsnifferTargetPortOutput) SwitchId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrafficsnifferTargetPort) *string { return v.SwitchId }).(pulumi.StringPtrOutput)
}

type TrafficsnifferTargetPortArrayOutput struct{ *pulumi.OutputState }

func (TrafficsnifferTargetPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrafficsnifferTargetPort)(nil)).Elem()
}

func (o TrafficsnifferTargetPortArrayOutput) ToTrafficsnifferTargetPortArrayOutput() TrafficsnifferTargetPortArrayOutput {
	return o
}

func (o TrafficsnifferTargetPortArrayOutput) ToTrafficsnifferTargetPortArrayOutputWithContext(ctx context.Context) TrafficsnifferTargetPortArrayOutput {
	return o
}

func (o TrafficsnifferTargetPortArrayOutput) Index(i pulumi.IntInput) TrafficsnifferTargetPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrafficsnifferTargetPort {
		return vs[0].([]TrafficsnifferTargetPort)[vs[1].(int)]
	}).(TrafficsnifferTargetPortOutput)
}

type TrafficsnifferTargetPortInPort struct {
	// Interface name.
	Name *string `pulumi:"name"`
}

// TrafficsnifferTargetPortInPortInput is an input type that accepts TrafficsnifferTargetPortInPortArgs and TrafficsnifferTargetPortInPortOutput values.
// You can construct a concrete instance of `TrafficsnifferTargetPortInPortInput` via:
//
//	TrafficsnifferTargetPortInPortArgs{...}
type TrafficsnifferTargetPortInPortInput interface {
	pulumi.Input

	ToTrafficsnifferTargetPortInPortOutput() TrafficsnifferTargetPortInPortOutput
	ToTrafficsnifferTargetPortInPortOutputWithContext(context.Context) TrafficsnifferTargetPortInPortOutput
}

type TrafficsnifferTargetPortInPortArgs struct {
	// Interface name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TrafficsnifferTargetPortInPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficsnifferTargetPortInPort)(nil)).Elem()
}

func (i TrafficsnifferTargetPortInPortArgs) ToTrafficsnifferTargetPortInPortOutput() TrafficsnifferTargetPortInPortOutput {
	return i.ToTrafficsnifferTargetPortInPortOutputWithContext(context.Background())
}

func (i TrafficsnifferTargetPortInPortArgs) ToTrafficsnifferTargetPortInPortOutputWithContext(ctx context.Context) TrafficsnifferTargetPortInPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficsnifferTargetPortInPortOutput)
}

// TrafficsnifferTargetPortInPortArrayInput is an input type that accepts TrafficsnifferTargetPortInPortArray and TrafficsnifferTargetPortInPortArrayOutput values.
// You can construct a concrete instance of `TrafficsnifferTargetPortInPortArrayInput` via:
//
//	TrafficsnifferTargetPortInPortArray{ TrafficsnifferTargetPortInPortArgs{...} }
type TrafficsnifferTargetPortInPortArrayInput interface {
	pulumi.Input

	ToTrafficsnifferTargetPortInPortArrayOutput() TrafficsnifferTargetPortInPortArrayOutput
	ToTrafficsnifferTargetPortInPortArrayOutputWithContext(context.Context) TrafficsnifferTargetPortInPortArrayOutput
}

type TrafficsnifferTargetPortInPortArray []TrafficsnifferTargetPortInPortInput

func (TrafficsnifferTargetPortInPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrafficsnifferTargetPortInPort)(nil)).Elem()
}

func (i TrafficsnifferTargetPortInPortArray) ToTrafficsnifferTargetPortInPortArrayOutput() TrafficsnifferTargetPortInPortArrayOutput {
	return i.ToTrafficsnifferTargetPortInPortArrayOutputWithContext(context.Background())
}

func (i TrafficsnifferTargetPortInPortArray) ToTrafficsnifferTargetPortInPortArrayOutputWithContext(ctx context.Context) TrafficsnifferTargetPortInPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficsnifferTargetPortInPortArrayOutput)
}

type TrafficsnifferTargetPortInPortOutput struct{ *pulumi.OutputState }

func (TrafficsnifferTargetPortInPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficsnifferTargetPortInPort)(nil)).Elem()
}

func (o TrafficsnifferTargetPortInPortOutput) ToTrafficsnifferTargetPortInPortOutput() TrafficsnifferTargetPortInPortOutput {
	return o
}

func (o TrafficsnifferTargetPortInPortOutput) ToTrafficsnifferTargetPortInPortOutputWithContext(ctx context.Context) TrafficsnifferTargetPortInPortOutput {
	return o
}

// Interface name.
func (o TrafficsnifferTargetPortInPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrafficsnifferTargetPortInPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TrafficsnifferTargetPortInPortArrayOutput struct{ *pulumi.OutputState }

func (TrafficsnifferTargetPortInPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrafficsnifferTargetPortInPort)(nil)).Elem()
}

func (o TrafficsnifferTargetPortInPortArrayOutput) ToTrafficsnifferTargetPortInPortArrayOutput() TrafficsnifferTargetPortInPortArrayOutput {
	return o
}

func (o TrafficsnifferTargetPortInPortArrayOutput) ToTrafficsnifferTargetPortInPortArrayOutputWithContext(ctx context.Context) TrafficsnifferTargetPortInPortArrayOutput {
	return o
}

func (o TrafficsnifferTargetPortInPortArrayOutput) Index(i pulumi.IntInput) TrafficsnifferTargetPortInPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrafficsnifferTargetPortInPort {
		return vs[0].([]TrafficsnifferTargetPortInPort)[vs[1].(int)]
	}).(TrafficsnifferTargetPortInPortOutput)
}

type TrafficsnifferTargetPortOutPort struct {
	// Interface name.
	Name *string `pulumi:"name"`
}

// TrafficsnifferTargetPortOutPortInput is an input type that accepts TrafficsnifferTargetPortOutPortArgs and TrafficsnifferTargetPortOutPortOutput values.
// You can construct a concrete instance of `TrafficsnifferTargetPortOutPortInput` via:
//
//	TrafficsnifferTargetPortOutPortArgs{...}
type TrafficsnifferTargetPortOutPortInput interface {
	pulumi.Input

	ToTrafficsnifferTargetPortOutPortOutput() TrafficsnifferTargetPortOutPortOutput
	ToTrafficsnifferTargetPortOutPortOutputWithContext(context.Context) TrafficsnifferTargetPortOutPortOutput
}

type TrafficsnifferTargetPortOutPortArgs struct {
	// Interface name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TrafficsnifferTargetPortOutPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficsnifferTargetPortOutPort)(nil)).Elem()
}

func (i TrafficsnifferTargetPortOutPortArgs) ToTrafficsnifferTargetPortOutPortOutput() TrafficsnifferTargetPortOutPortOutput {
	return i.ToTrafficsnifferTargetPortOutPortOutputWithContext(context.Background())
}

func (i TrafficsnifferTargetPortOutPortArgs) ToTrafficsnifferTargetPortOutPortOutputWithContext(ctx context.Context) TrafficsnifferTargetPortOutPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficsnifferTargetPortOutPortOutput)
}

// TrafficsnifferTargetPortOutPortArrayInput is an input type that accepts TrafficsnifferTargetPortOutPortArray and TrafficsnifferTargetPortOutPortArrayOutput values.
// You can construct a concrete instance of `TrafficsnifferTargetPortOutPortArrayInput` via:
//
//	TrafficsnifferTargetPortOutPortArray{ TrafficsnifferTargetPortOutPortArgs{...} }
type TrafficsnifferTargetPortOutPortArrayInput interface {
	pulumi.Input

	ToTrafficsnifferTargetPortOutPortArrayOutput() TrafficsnifferTargetPortOutPortArrayOutput
	ToTrafficsnifferTargetPortOutPortArrayOutputWithContext(context.Context) TrafficsnifferTargetPortOutPortArrayOutput
}

type TrafficsnifferTargetPortOutPortArray []TrafficsnifferTargetPortOutPortInput

func (TrafficsnifferTargetPortOutPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrafficsnifferTargetPortOutPort)(nil)).Elem()
}

func (i TrafficsnifferTargetPortOutPortArray) ToTrafficsnifferTargetPortOutPortArrayOutput() TrafficsnifferTargetPortOutPortArrayOutput {
	return i.ToTrafficsnifferTargetPortOutPortArrayOutputWithContext(context.Background())
}

func (i TrafficsnifferTargetPortOutPortArray) ToTrafficsnifferTargetPortOutPortArrayOutputWithContext(ctx context.Context) TrafficsnifferTargetPortOutPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficsnifferTargetPortOutPortArrayOutput)
}

type TrafficsnifferTargetPortOutPortOutput struct{ *pulumi.OutputState }

func (TrafficsnifferTargetPortOutPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficsnifferTargetPortOutPort)(nil)).Elem()
}

func (o TrafficsnifferTargetPortOutPortOutput) ToTrafficsnifferTargetPortOutPortOutput() TrafficsnifferTargetPortOutPortOutput {
	return o
}

func (o TrafficsnifferTargetPortOutPortOutput) ToTrafficsnifferTargetPortOutPortOutputWithContext(ctx context.Context) TrafficsnifferTargetPortOutPortOutput {
	return o
}

// Interface name.
func (o TrafficsnifferTargetPortOutPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrafficsnifferTargetPortOutPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TrafficsnifferTargetPortOutPortArrayOutput struct{ *pulumi.OutputState }

func (TrafficsnifferTargetPortOutPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrafficsnifferTargetPortOutPort)(nil)).Elem()
}

func (o TrafficsnifferTargetPortOutPortArrayOutput) ToTrafficsnifferTargetPortOutPortArrayOutput() TrafficsnifferTargetPortOutPortArrayOutput {
	return o
}

func (o TrafficsnifferTargetPortOutPortArrayOutput) ToTrafficsnifferTargetPortOutPortArrayOutputWithContext(ctx context.Context) TrafficsnifferTargetPortOutPortArrayOutput {
	return o
}

func (o TrafficsnifferTargetPortOutPortArrayOutput) Index(i pulumi.IntInput) TrafficsnifferTargetPortOutPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrafficsnifferTargetPortOutPort {
		return vs[0].([]TrafficsnifferTargetPortOutPort)[vs[1].(int)]
	}).(TrafficsnifferTargetPortOutPortOutput)
}

type VlanPortalMessageOverrides struct {
	// Override auth-disclaimer-page message with message from portal-message-overrides group.
	AuthDisclaimerPage *string `pulumi:"authDisclaimerPage"`
	// Override auth-login-failed-page message with message from portal-message-overrides group.
	AuthLoginFailedPage *string `pulumi:"authLoginFailedPage"`
	// Override auth-login-page message with message from portal-message-overrides group.
	AuthLoginPage *string `pulumi:"authLoginPage"`
	// Override auth-reject-page message with message from portal-message-overrides group.
	AuthRejectPage *string `pulumi:"authRejectPage"`
}

// VlanPortalMessageOverridesInput is an input type that accepts VlanPortalMessageOverridesArgs and VlanPortalMessageOverridesOutput values.
// You can construct a concrete instance of `VlanPortalMessageOverridesInput` via:
//
//	VlanPortalMessageOverridesArgs{...}
type VlanPortalMessageOverridesInput interface {
	pulumi.Input

	ToVlanPortalMessageOverridesOutput() VlanPortalMessageOverridesOutput
	ToVlanPortalMessageOverridesOutputWithContext(context.Context) VlanPortalMessageOverridesOutput
}

type VlanPortalMessageOverridesArgs struct {
	// Override auth-disclaimer-page message with message from portal-message-overrides group.
	AuthDisclaimerPage pulumi.StringPtrInput `pulumi:"authDisclaimerPage"`
	// Override auth-login-failed-page message with message from portal-message-overrides group.
	AuthLoginFailedPage pulumi.StringPtrInput `pulumi:"authLoginFailedPage"`
	// Override auth-login-page message with message from portal-message-overrides group.
	AuthLoginPage pulumi.StringPtrInput `pulumi:"authLoginPage"`
	// Override auth-reject-page message with message from portal-message-overrides group.
	AuthRejectPage pulumi.StringPtrInput `pulumi:"authRejectPage"`
}

func (VlanPortalMessageOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VlanPortalMessageOverrides)(nil)).Elem()
}

func (i VlanPortalMessageOverridesArgs) ToVlanPortalMessageOverridesOutput() VlanPortalMessageOverridesOutput {
	return i.ToVlanPortalMessageOverridesOutputWithContext(context.Background())
}

func (i VlanPortalMessageOverridesArgs) ToVlanPortalMessageOverridesOutputWithContext(ctx context.Context) VlanPortalMessageOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanPortalMessageOverridesOutput)
}

func (i VlanPortalMessageOverridesArgs) ToVlanPortalMessageOverridesPtrOutput() VlanPortalMessageOverridesPtrOutput {
	return i.ToVlanPortalMessageOverridesPtrOutputWithContext(context.Background())
}

func (i VlanPortalMessageOverridesArgs) ToVlanPortalMessageOverridesPtrOutputWithContext(ctx context.Context) VlanPortalMessageOverridesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanPortalMessageOverridesOutput).ToVlanPortalMessageOverridesPtrOutputWithContext(ctx)
}

// VlanPortalMessageOverridesPtrInput is an input type that accepts VlanPortalMessageOverridesArgs, VlanPortalMessageOverridesPtr and VlanPortalMessageOverridesPtrOutput values.
// You can construct a concrete instance of `VlanPortalMessageOverridesPtrInput` via:
//
//	        VlanPortalMessageOverridesArgs{...}
//
//	or:
//
//	        nil
type VlanPortalMessageOverridesPtrInput interface {
	pulumi.Input

	ToVlanPortalMessageOverridesPtrOutput() VlanPortalMessageOverridesPtrOutput
	ToVlanPortalMessageOverridesPtrOutputWithContext(context.Context) VlanPortalMessageOverridesPtrOutput
}

type vlanPortalMessageOverridesPtrType VlanPortalMessageOverridesArgs

func VlanPortalMessageOverridesPtr(v *VlanPortalMessageOverridesArgs) VlanPortalMessageOverridesPtrInput {
	return (*vlanPortalMessageOverridesPtrType)(v)
}

func (*vlanPortalMessageOverridesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VlanPortalMessageOverrides)(nil)).Elem()
}

func (i *vlanPortalMessageOverridesPtrType) ToVlanPortalMessageOverridesPtrOutput() VlanPortalMessageOverridesPtrOutput {
	return i.ToVlanPortalMessageOverridesPtrOutputWithContext(context.Background())
}

func (i *vlanPortalMessageOverridesPtrType) ToVlanPortalMessageOverridesPtrOutputWithContext(ctx context.Context) VlanPortalMessageOverridesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanPortalMessageOverridesPtrOutput)
}

type VlanPortalMessageOverridesOutput struct{ *pulumi.OutputState }

func (VlanPortalMessageOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VlanPortalMessageOverrides)(nil)).Elem()
}

func (o VlanPortalMessageOverridesOutput) ToVlanPortalMessageOverridesOutput() VlanPortalMessageOverridesOutput {
	return o
}

func (o VlanPortalMessageOverridesOutput) ToVlanPortalMessageOverridesOutputWithContext(ctx context.Context) VlanPortalMessageOverridesOutput {
	return o
}

func (o VlanPortalMessageOverridesOutput) ToVlanPortalMessageOverridesPtrOutput() VlanPortalMessageOverridesPtrOutput {
	return o.ToVlanPortalMessageOverridesPtrOutputWithContext(context.Background())
}

func (o VlanPortalMessageOverridesOutput) ToVlanPortalMessageOverridesPtrOutputWithContext(ctx context.Context) VlanPortalMessageOverridesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VlanPortalMessageOverrides) *VlanPortalMessageOverrides {
		return &v
	}).(VlanPortalMessageOverridesPtrOutput)
}

// Override auth-disclaimer-page message with message from portal-message-overrides group.
func (o VlanPortalMessageOverridesOutput) AuthDisclaimerPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VlanPortalMessageOverrides) *string { return v.AuthDisclaimerPage }).(pulumi.StringPtrOutput)
}

// Override auth-login-failed-page message with message from portal-message-overrides group.
func (o VlanPortalMessageOverridesOutput) AuthLoginFailedPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VlanPortalMessageOverrides) *string { return v.AuthLoginFailedPage }).(pulumi.StringPtrOutput)
}

// Override auth-login-page message with message from portal-message-overrides group.
func (o VlanPortalMessageOverridesOutput) AuthLoginPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VlanPortalMessageOverrides) *string { return v.AuthLoginPage }).(pulumi.StringPtrOutput)
}

// Override auth-reject-page message with message from portal-message-overrides group.
func (o VlanPortalMessageOverridesOutput) AuthRejectPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VlanPortalMessageOverrides) *string { return v.AuthRejectPage }).(pulumi.StringPtrOutput)
}

type VlanPortalMessageOverridesPtrOutput struct{ *pulumi.OutputState }

func (VlanPortalMessageOverridesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VlanPortalMessageOverrides)(nil)).Elem()
}

func (o VlanPortalMessageOverridesPtrOutput) ToVlanPortalMessageOverridesPtrOutput() VlanPortalMessageOverridesPtrOutput {
	return o
}

func (o VlanPortalMessageOverridesPtrOutput) ToVlanPortalMessageOverridesPtrOutputWithContext(ctx context.Context) VlanPortalMessageOverridesPtrOutput {
	return o
}

func (o VlanPortalMessageOverridesPtrOutput) Elem() VlanPortalMessageOverridesOutput {
	return o.ApplyT(func(v *VlanPortalMessageOverrides) VlanPortalMessageOverrides {
		if v != nil {
			return *v
		}
		var ret VlanPortalMessageOverrides
		return ret
	}).(VlanPortalMessageOverridesOutput)
}

// Override auth-disclaimer-page message with message from portal-message-overrides group.
func (o VlanPortalMessageOverridesPtrOutput) AuthDisclaimerPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VlanPortalMessageOverrides) *string {
		if v == nil {
			return nil
		}
		return v.AuthDisclaimerPage
	}).(pulumi.StringPtrOutput)
}

// Override auth-login-failed-page message with message from portal-message-overrides group.
func (o VlanPortalMessageOverridesPtrOutput) AuthLoginFailedPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VlanPortalMessageOverrides) *string {
		if v == nil {
			return nil
		}
		return v.AuthLoginFailedPage
	}).(pulumi.StringPtrOutput)
}

// Override auth-login-page message with message from portal-message-overrides group.
func (o VlanPortalMessageOverridesPtrOutput) AuthLoginPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VlanPortalMessageOverrides) *string {
		if v == nil {
			return nil
		}
		return v.AuthLoginPage
	}).(pulumi.StringPtrOutput)
}

// Override auth-reject-page message with message from portal-message-overrides group.
func (o VlanPortalMessageOverridesPtrOutput) AuthRejectPage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VlanPortalMessageOverrides) *string {
		if v == nil {
			return nil
		}
		return v.AuthRejectPage
	}).(pulumi.StringPtrOutput)
}

type VlanSelectedUsergroup struct {
	// User group name.
	Name *string `pulumi:"name"`
}

// VlanSelectedUsergroupInput is an input type that accepts VlanSelectedUsergroupArgs and VlanSelectedUsergroupOutput values.
// You can construct a concrete instance of `VlanSelectedUsergroupInput` via:
//
//	VlanSelectedUsergroupArgs{...}
type VlanSelectedUsergroupInput interface {
	pulumi.Input

	ToVlanSelectedUsergroupOutput() VlanSelectedUsergroupOutput
	ToVlanSelectedUsergroupOutputWithContext(context.Context) VlanSelectedUsergroupOutput
}

type VlanSelectedUsergroupArgs struct {
	// User group name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (VlanSelectedUsergroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VlanSelectedUsergroup)(nil)).Elem()
}

func (i VlanSelectedUsergroupArgs) ToVlanSelectedUsergroupOutput() VlanSelectedUsergroupOutput {
	return i.ToVlanSelectedUsergroupOutputWithContext(context.Background())
}

func (i VlanSelectedUsergroupArgs) ToVlanSelectedUsergroupOutputWithContext(ctx context.Context) VlanSelectedUsergroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanSelectedUsergroupOutput)
}

// VlanSelectedUsergroupArrayInput is an input type that accepts VlanSelectedUsergroupArray and VlanSelectedUsergroupArrayOutput values.
// You can construct a concrete instance of `VlanSelectedUsergroupArrayInput` via:
//
//	VlanSelectedUsergroupArray{ VlanSelectedUsergroupArgs{...} }
type VlanSelectedUsergroupArrayInput interface {
	pulumi.Input

	ToVlanSelectedUsergroupArrayOutput() VlanSelectedUsergroupArrayOutput
	ToVlanSelectedUsergroupArrayOutputWithContext(context.Context) VlanSelectedUsergroupArrayOutput
}

type VlanSelectedUsergroupArray []VlanSelectedUsergroupInput

func (VlanSelectedUsergroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VlanSelectedUsergroup)(nil)).Elem()
}

func (i VlanSelectedUsergroupArray) ToVlanSelectedUsergroupArrayOutput() VlanSelectedUsergroupArrayOutput {
	return i.ToVlanSelectedUsergroupArrayOutputWithContext(context.Background())
}

func (i VlanSelectedUsergroupArray) ToVlanSelectedUsergroupArrayOutputWithContext(ctx context.Context) VlanSelectedUsergroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanSelectedUsergroupArrayOutput)
}

type VlanSelectedUsergroupOutput struct{ *pulumi.OutputState }

func (VlanSelectedUsergroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VlanSelectedUsergroup)(nil)).Elem()
}

func (o VlanSelectedUsergroupOutput) ToVlanSelectedUsergroupOutput() VlanSelectedUsergroupOutput {
	return o
}

func (o VlanSelectedUsergroupOutput) ToVlanSelectedUsergroupOutputWithContext(ctx context.Context) VlanSelectedUsergroupOutput {
	return o
}

// User group name.
func (o VlanSelectedUsergroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VlanSelectedUsergroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type VlanSelectedUsergroupArrayOutput struct{ *pulumi.OutputState }

func (VlanSelectedUsergroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VlanSelectedUsergroup)(nil)).Elem()
}

func (o VlanSelectedUsergroupArrayOutput) ToVlanSelectedUsergroupArrayOutput() VlanSelectedUsergroupArrayOutput {
	return o
}

func (o VlanSelectedUsergroupArrayOutput) ToVlanSelectedUsergroupArrayOutputWithContext(ctx context.Context) VlanSelectedUsergroupArrayOutput {
	return o
}

func (o VlanSelectedUsergroupArrayOutput) Index(i pulumi.IntInput) VlanSelectedUsergroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VlanSelectedUsergroup {
		return vs[0].([]VlanSelectedUsergroup)[vs[1].(int)]
	}).(VlanSelectedUsergroupOutput)
}

type VlanpolicyAllowedVlan struct {
	// VLAN name.
	VlanName *string `pulumi:"vlanName"`
}

// VlanpolicyAllowedVlanInput is an input type that accepts VlanpolicyAllowedVlanArgs and VlanpolicyAllowedVlanOutput values.
// You can construct a concrete instance of `VlanpolicyAllowedVlanInput` via:
//
//	VlanpolicyAllowedVlanArgs{...}
type VlanpolicyAllowedVlanInput interface {
	pulumi.Input

	ToVlanpolicyAllowedVlanOutput() VlanpolicyAllowedVlanOutput
	ToVlanpolicyAllowedVlanOutputWithContext(context.Context) VlanpolicyAllowedVlanOutput
}

type VlanpolicyAllowedVlanArgs struct {
	// VLAN name.
	VlanName pulumi.StringPtrInput `pulumi:"vlanName"`
}

func (VlanpolicyAllowedVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VlanpolicyAllowedVlan)(nil)).Elem()
}

func (i VlanpolicyAllowedVlanArgs) ToVlanpolicyAllowedVlanOutput() VlanpolicyAllowedVlanOutput {
	return i.ToVlanpolicyAllowedVlanOutputWithContext(context.Background())
}

func (i VlanpolicyAllowedVlanArgs) ToVlanpolicyAllowedVlanOutputWithContext(ctx context.Context) VlanpolicyAllowedVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanpolicyAllowedVlanOutput)
}

// VlanpolicyAllowedVlanArrayInput is an input type that accepts VlanpolicyAllowedVlanArray and VlanpolicyAllowedVlanArrayOutput values.
// You can construct a concrete instance of `VlanpolicyAllowedVlanArrayInput` via:
//
//	VlanpolicyAllowedVlanArray{ VlanpolicyAllowedVlanArgs{...} }
type VlanpolicyAllowedVlanArrayInput interface {
	pulumi.Input

	ToVlanpolicyAllowedVlanArrayOutput() VlanpolicyAllowedVlanArrayOutput
	ToVlanpolicyAllowedVlanArrayOutputWithContext(context.Context) VlanpolicyAllowedVlanArrayOutput
}

type VlanpolicyAllowedVlanArray []VlanpolicyAllowedVlanInput

func (VlanpolicyAllowedVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VlanpolicyAllowedVlan)(nil)).Elem()
}

func (i VlanpolicyAllowedVlanArray) ToVlanpolicyAllowedVlanArrayOutput() VlanpolicyAllowedVlanArrayOutput {
	return i.ToVlanpolicyAllowedVlanArrayOutputWithContext(context.Background())
}

func (i VlanpolicyAllowedVlanArray) ToVlanpolicyAllowedVlanArrayOutputWithContext(ctx context.Context) VlanpolicyAllowedVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanpolicyAllowedVlanArrayOutput)
}

type VlanpolicyAllowedVlanOutput struct{ *pulumi.OutputState }

func (VlanpolicyAllowedVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VlanpolicyAllowedVlan)(nil)).Elem()
}

func (o VlanpolicyAllowedVlanOutput) ToVlanpolicyAllowedVlanOutput() VlanpolicyAllowedVlanOutput {
	return o
}

func (o VlanpolicyAllowedVlanOutput) ToVlanpolicyAllowedVlanOutputWithContext(ctx context.Context) VlanpolicyAllowedVlanOutput {
	return o
}

// VLAN name.
func (o VlanpolicyAllowedVlanOutput) VlanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VlanpolicyAllowedVlan) *string { return v.VlanName }).(pulumi.StringPtrOutput)
}

type VlanpolicyAllowedVlanArrayOutput struct{ *pulumi.OutputState }

func (VlanpolicyAllowedVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VlanpolicyAllowedVlan)(nil)).Elem()
}

func (o VlanpolicyAllowedVlanArrayOutput) ToVlanpolicyAllowedVlanArrayOutput() VlanpolicyAllowedVlanArrayOutput {
	return o
}

func (o VlanpolicyAllowedVlanArrayOutput) ToVlanpolicyAllowedVlanArrayOutputWithContext(ctx context.Context) VlanpolicyAllowedVlanArrayOutput {
	return o
}

func (o VlanpolicyAllowedVlanArrayOutput) Index(i pulumi.IntInput) VlanpolicyAllowedVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VlanpolicyAllowedVlan {
		return vs[0].([]VlanpolicyAllowedVlan)[vs[1].(int)]
	}).(VlanpolicyAllowedVlanOutput)
}

type VlanpolicyUntaggedVlan struct {
	// VLAN name.
	VlanName *string `pulumi:"vlanName"`
}

// VlanpolicyUntaggedVlanInput is an input type that accepts VlanpolicyUntaggedVlanArgs and VlanpolicyUntaggedVlanOutput values.
// You can construct a concrete instance of `VlanpolicyUntaggedVlanInput` via:
//
//	VlanpolicyUntaggedVlanArgs{...}
type VlanpolicyUntaggedVlanInput interface {
	pulumi.Input

	ToVlanpolicyUntaggedVlanOutput() VlanpolicyUntaggedVlanOutput
	ToVlanpolicyUntaggedVlanOutputWithContext(context.Context) VlanpolicyUntaggedVlanOutput
}

type VlanpolicyUntaggedVlanArgs struct {
	// VLAN name.
	VlanName pulumi.StringPtrInput `pulumi:"vlanName"`
}

func (VlanpolicyUntaggedVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VlanpolicyUntaggedVlan)(nil)).Elem()
}

func (i VlanpolicyUntaggedVlanArgs) ToVlanpolicyUntaggedVlanOutput() VlanpolicyUntaggedVlanOutput {
	return i.ToVlanpolicyUntaggedVlanOutputWithContext(context.Background())
}

func (i VlanpolicyUntaggedVlanArgs) ToVlanpolicyUntaggedVlanOutputWithContext(ctx context.Context) VlanpolicyUntaggedVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanpolicyUntaggedVlanOutput)
}

// VlanpolicyUntaggedVlanArrayInput is an input type that accepts VlanpolicyUntaggedVlanArray and VlanpolicyUntaggedVlanArrayOutput values.
// You can construct a concrete instance of `VlanpolicyUntaggedVlanArrayInput` via:
//
//	VlanpolicyUntaggedVlanArray{ VlanpolicyUntaggedVlanArgs{...} }
type VlanpolicyUntaggedVlanArrayInput interface {
	pulumi.Input

	ToVlanpolicyUntaggedVlanArrayOutput() VlanpolicyUntaggedVlanArrayOutput
	ToVlanpolicyUntaggedVlanArrayOutputWithContext(context.Context) VlanpolicyUntaggedVlanArrayOutput
}

type VlanpolicyUntaggedVlanArray []VlanpolicyUntaggedVlanInput

func (VlanpolicyUntaggedVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VlanpolicyUntaggedVlan)(nil)).Elem()
}

func (i VlanpolicyUntaggedVlanArray) ToVlanpolicyUntaggedVlanArrayOutput() VlanpolicyUntaggedVlanArrayOutput {
	return i.ToVlanpolicyUntaggedVlanArrayOutputWithContext(context.Background())
}

func (i VlanpolicyUntaggedVlanArray) ToVlanpolicyUntaggedVlanArrayOutputWithContext(ctx context.Context) VlanpolicyUntaggedVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanpolicyUntaggedVlanArrayOutput)
}

type VlanpolicyUntaggedVlanOutput struct{ *pulumi.OutputState }

func (VlanpolicyUntaggedVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VlanpolicyUntaggedVlan)(nil)).Elem()
}

func (o VlanpolicyUntaggedVlanOutput) ToVlanpolicyUntaggedVlanOutput() VlanpolicyUntaggedVlanOutput {
	return o
}

func (o VlanpolicyUntaggedVlanOutput) ToVlanpolicyUntaggedVlanOutputWithContext(ctx context.Context) VlanpolicyUntaggedVlanOutput {
	return o
}

// VLAN name.
func (o VlanpolicyUntaggedVlanOutput) VlanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VlanpolicyUntaggedVlan) *string { return v.VlanName }).(pulumi.StringPtrOutput)
}

type VlanpolicyUntaggedVlanArrayOutput struct{ *pulumi.OutputState }

func (VlanpolicyUntaggedVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VlanpolicyUntaggedVlan)(nil)).Elem()
}

func (o VlanpolicyUntaggedVlanArrayOutput) ToVlanpolicyUntaggedVlanArrayOutput() VlanpolicyUntaggedVlanArrayOutput {
	return o
}

func (o VlanpolicyUntaggedVlanArrayOutput) ToVlanpolicyUntaggedVlanArrayOutputWithContext(ctx context.Context) VlanpolicyUntaggedVlanArrayOutput {
	return o
}

func (o VlanpolicyUntaggedVlanArrayOutput) Index(i pulumi.IntInput) VlanpolicyUntaggedVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VlanpolicyUntaggedVlan {
		return vs[0].([]VlanpolicyUntaggedVlan)[vs[1].(int)]
	}).(VlanpolicyUntaggedVlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicportpolicyPolicyInput)(nil)).Elem(), DynamicportpolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicportpolicyPolicyArrayInput)(nil)).Elem(), DynamicportpolicyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicportpolicyPolicyInterfaceTagInput)(nil)).Elem(), DynamicportpolicyPolicyInterfaceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicportpolicyPolicyInterfaceTagArrayInput)(nil)).Elem(), DynamicportpolicyPolicyInterfaceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowtrackingAggregateInput)(nil)).Elem(), FlowtrackingAggregateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowtrackingAggregateArrayInput)(nil)).Elem(), FlowtrackingAggregateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowtrackingCollectorInput)(nil)).Elem(), FlowtrackingCollectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowtrackingCollectorArrayInput)(nil)).Elem(), FlowtrackingCollectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FortilinksettingsNacPortsInput)(nil)).Elem(), FortilinksettingsNacPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FortilinksettingsNacPortsPtrInput)(nil)).Elem(), FortilinksettingsNacPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FortilinksettingsNacPortsNacSegmentVlanInput)(nil)).Elem(), FortilinksettingsNacPortsNacSegmentVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FortilinksettingsNacPortsNacSegmentVlanArrayInput)(nil)).Elem(), FortilinksettingsNacPortsNacSegmentVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalCustomCommandInput)(nil)).Elem(), GlobalCustomCommandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalCustomCommandArrayInput)(nil)).Elem(), GlobalCustomCommandArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalDisableDiscoveryInput)(nil)).Elem(), GlobalDisableDiscoveryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalDisableDiscoveryArrayInput)(nil)).Elem(), GlobalDisableDiscoveryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LldpprofileCustomTlvInput)(nil)).Elem(), LldpprofileCustomTlvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LldpprofileCustomTlvArrayInput)(nil)).Elem(), LldpprofileCustomTlvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LldpprofileMedLocationServiceInput)(nil)).Elem(), LldpprofileMedLocationServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LldpprofileMedLocationServiceArrayInput)(nil)).Elem(), LldpprofileMedLocationServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LldpprofileMedNetworkPolicyInput)(nil)).Elem(), LldpprofileMedNetworkPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LldpprofileMedNetworkPolicyArrayInput)(nil)).Elem(), LldpprofileMedNetworkPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationAddressCivicInput)(nil)).Elem(), LocationAddressCivicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationAddressCivicPtrInput)(nil)).Elem(), LocationAddressCivicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationCoordinatesInput)(nil)).Elem(), LocationCoordinatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationCoordinatesPtrInput)(nil)).Elem(), LocationCoordinatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationElinNumberInput)(nil)).Elem(), LocationElinNumberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationElinNumberPtrInput)(nil)).Elem(), LocationElinNumberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchCustomCommandInput)(nil)).Elem(), ManagedswitchCustomCommandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchCustomCommandArrayInput)(nil)).Elem(), ManagedswitchCustomCommandArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchDhcpSnoopingStaticClientInput)(nil)).Elem(), ManagedswitchDhcpSnoopingStaticClientArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchDhcpSnoopingStaticClientArrayInput)(nil)).Elem(), ManagedswitchDhcpSnoopingStaticClientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchIgmpSnoopingInput)(nil)).Elem(), ManagedswitchIgmpSnoopingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchIgmpSnoopingPtrInput)(nil)).Elem(), ManagedswitchIgmpSnoopingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchIgmpSnoopingVlanInput)(nil)).Elem(), ManagedswitchIgmpSnoopingVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchIgmpSnoopingVlanArrayInput)(nil)).Elem(), ManagedswitchIgmpSnoopingVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchIpSourceGuardInput)(nil)).Elem(), ManagedswitchIpSourceGuardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchIpSourceGuardArrayInput)(nil)).Elem(), ManagedswitchIpSourceGuardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchIpSourceGuardBindingEntryInput)(nil)).Elem(), ManagedswitchIpSourceGuardBindingEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchIpSourceGuardBindingEntryArrayInput)(nil)).Elem(), ManagedswitchIpSourceGuardBindingEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchMirrorInput)(nil)).Elem(), ManagedswitchMirrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchMirrorArrayInput)(nil)).Elem(), ManagedswitchMirrorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchMirrorSrcEgressInput)(nil)).Elem(), ManagedswitchMirrorSrcEgressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchMirrorSrcEgressArrayInput)(nil)).Elem(), ManagedswitchMirrorSrcEgressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchMirrorSrcIngressInput)(nil)).Elem(), ManagedswitchMirrorSrcIngressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchMirrorSrcIngressArrayInput)(nil)).Elem(), ManagedswitchMirrorSrcIngressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchN8021xSettingsInput)(nil)).Elem(), ManagedswitchN8021xSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchN8021xSettingsPtrInput)(nil)).Elem(), ManagedswitchN8021xSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortInput)(nil)).Elem(), ManagedswitchPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortArrayInput)(nil)).Elem(), ManagedswitchPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortAclGroupInput)(nil)).Elem(), ManagedswitchPortAclGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortAclGroupArrayInput)(nil)).Elem(), ManagedswitchPortAclGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortAllowedVlanInput)(nil)).Elem(), ManagedswitchPortAllowedVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortAllowedVlanArrayInput)(nil)).Elem(), ManagedswitchPortAllowedVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortDhcpSnoopOption82OverrideInput)(nil)).Elem(), ManagedswitchPortDhcpSnoopOption82OverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortDhcpSnoopOption82OverrideArrayInput)(nil)).Elem(), ManagedswitchPortDhcpSnoopOption82OverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortExportTagInput)(nil)).Elem(), ManagedswitchPortExportTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortExportTagArrayInput)(nil)).Elem(), ManagedswitchPortExportTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortFortiswitchAclInput)(nil)).Elem(), ManagedswitchPortFortiswitchAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortFortiswitchAclArrayInput)(nil)).Elem(), ManagedswitchPortFortiswitchAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortInterfaceTagInput)(nil)).Elem(), ManagedswitchPortInterfaceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortInterfaceTagArrayInput)(nil)).Elem(), ManagedswitchPortInterfaceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortMemberInput)(nil)).Elem(), ManagedswitchPortMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortMemberArrayInput)(nil)).Elem(), ManagedswitchPortMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortUntaggedVlanInput)(nil)).Elem(), ManagedswitchPortUntaggedVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchPortUntaggedVlanArrayInput)(nil)).Elem(), ManagedswitchPortUntaggedVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchRemoteLogInput)(nil)).Elem(), ManagedswitchRemoteLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchRemoteLogArrayInput)(nil)).Elem(), ManagedswitchRemoteLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchRouteOffloadRouterInput)(nil)).Elem(), ManagedswitchRouteOffloadRouterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchRouteOffloadRouterArrayInput)(nil)).Elem(), ManagedswitchRouteOffloadRouterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchSnmpCommunityInput)(nil)).Elem(), ManagedswitchSnmpCommunityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchSnmpCommunityArrayInput)(nil)).Elem(), ManagedswitchSnmpCommunityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchSnmpCommunityHostInput)(nil)).Elem(), ManagedswitchSnmpCommunityHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchSnmpCommunityHostArrayInput)(nil)).Elem(), ManagedswitchSnmpCommunityHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchSnmpSysinfoInput)(nil)).Elem(), ManagedswitchSnmpSysinfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchSnmpSysinfoPtrInput)(nil)).Elem(), ManagedswitchSnmpSysinfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchSnmpTrapThresholdInput)(nil)).Elem(), ManagedswitchSnmpTrapThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchSnmpTrapThresholdPtrInput)(nil)).Elem(), ManagedswitchSnmpTrapThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchSnmpUserInput)(nil)).Elem(), ManagedswitchSnmpUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchSnmpUserArrayInput)(nil)).Elem(), ManagedswitchSnmpUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchStaticMacInput)(nil)).Elem(), ManagedswitchStaticMacArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchStaticMacArrayInput)(nil)).Elem(), ManagedswitchStaticMacArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchStormControlInput)(nil)).Elem(), ManagedswitchStormControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchStormControlPtrInput)(nil)).Elem(), ManagedswitchStormControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchStpInstanceInput)(nil)).Elem(), ManagedswitchStpInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchStpInstanceArrayInput)(nil)).Elem(), ManagedswitchStpInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchStpSettingsInput)(nil)).Elem(), ManagedswitchStpSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchStpSettingsPtrInput)(nil)).Elem(), ManagedswitchStpSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchSwitchLogInput)(nil)).Elem(), ManagedswitchSwitchLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchSwitchLogPtrInput)(nil)).Elem(), ManagedswitchSwitchLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchSwitchStpSettingsInput)(nil)).Elem(), ManagedswitchSwitchStpSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchSwitchStpSettingsPtrInput)(nil)).Elem(), ManagedswitchSwitchStpSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchVlanInput)(nil)).Elem(), ManagedswitchVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchVlanArrayInput)(nil)).Elem(), ManagedswitchVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuarantineTargetInput)(nil)).Elem(), QuarantineTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuarantineTargetArrayInput)(nil)).Elem(), QuarantineTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuarantineTargetTagInput)(nil)).Elem(), QuarantineTargetTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuarantineTargetTagArrayInput)(nil)).Elem(), QuarantineTargetTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpcommunityHostInput)(nil)).Elem(), SnmpcommunityHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpcommunityHostArrayInput)(nil)).Elem(), SnmpcommunityHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StpinstanceVlanRangeInput)(nil)).Elem(), StpinstanceVlanRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StpinstanceVlanRangeArrayInput)(nil)).Elem(), StpinstanceVlanRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchgroupMemberInput)(nil)).Elem(), SwitchgroupMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchgroupMemberArrayInput)(nil)).Elem(), SwitchgroupMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficsnifferTargetIpInput)(nil)).Elem(), TrafficsnifferTargetIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficsnifferTargetIpArrayInput)(nil)).Elem(), TrafficsnifferTargetIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficsnifferTargetMacInput)(nil)).Elem(), TrafficsnifferTargetMacArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficsnifferTargetMacArrayInput)(nil)).Elem(), TrafficsnifferTargetMacArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficsnifferTargetPortInput)(nil)).Elem(), TrafficsnifferTargetPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficsnifferTargetPortArrayInput)(nil)).Elem(), TrafficsnifferTargetPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficsnifferTargetPortInPortInput)(nil)).Elem(), TrafficsnifferTargetPortInPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficsnifferTargetPortInPortArrayInput)(nil)).Elem(), TrafficsnifferTargetPortInPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficsnifferTargetPortOutPortInput)(nil)).Elem(), TrafficsnifferTargetPortOutPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficsnifferTargetPortOutPortArrayInput)(nil)).Elem(), TrafficsnifferTargetPortOutPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanPortalMessageOverridesInput)(nil)).Elem(), VlanPortalMessageOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanPortalMessageOverridesPtrInput)(nil)).Elem(), VlanPortalMessageOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanSelectedUsergroupInput)(nil)).Elem(), VlanSelectedUsergroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanSelectedUsergroupArrayInput)(nil)).Elem(), VlanSelectedUsergroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanpolicyAllowedVlanInput)(nil)).Elem(), VlanpolicyAllowedVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanpolicyAllowedVlanArrayInput)(nil)).Elem(), VlanpolicyAllowedVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanpolicyUntaggedVlanInput)(nil)).Elem(), VlanpolicyUntaggedVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanpolicyUntaggedVlanArrayInput)(nil)).Elem(), VlanpolicyUntaggedVlanArray{})
	pulumi.RegisterOutputType(DynamicportpolicyPolicyOutput{})
	pulumi.RegisterOutputType(DynamicportpolicyPolicyArrayOutput{})
	pulumi.RegisterOutputType(DynamicportpolicyPolicyInterfaceTagOutput{})
	pulumi.RegisterOutputType(DynamicportpolicyPolicyInterfaceTagArrayOutput{})
	pulumi.RegisterOutputType(FlowtrackingAggregateOutput{})
	pulumi.RegisterOutputType(FlowtrackingAggregateArrayOutput{})
	pulumi.RegisterOutputType(FlowtrackingCollectorOutput{})
	pulumi.RegisterOutputType(FlowtrackingCollectorArrayOutput{})
	pulumi.RegisterOutputType(FortilinksettingsNacPortsOutput{})
	pulumi.RegisterOutputType(FortilinksettingsNacPortsPtrOutput{})
	pulumi.RegisterOutputType(FortilinksettingsNacPortsNacSegmentVlanOutput{})
	pulumi.RegisterOutputType(FortilinksettingsNacPortsNacSegmentVlanArrayOutput{})
	pulumi.RegisterOutputType(GlobalCustomCommandOutput{})
	pulumi.RegisterOutputType(GlobalCustomCommandArrayOutput{})
	pulumi.RegisterOutputType(GlobalDisableDiscoveryOutput{})
	pulumi.RegisterOutputType(GlobalDisableDiscoveryArrayOutput{})
	pulumi.RegisterOutputType(LldpprofileCustomTlvOutput{})
	pulumi.RegisterOutputType(LldpprofileCustomTlvArrayOutput{})
	pulumi.RegisterOutputType(LldpprofileMedLocationServiceOutput{})
	pulumi.RegisterOutputType(LldpprofileMedLocationServiceArrayOutput{})
	pulumi.RegisterOutputType(LldpprofileMedNetworkPolicyOutput{})
	pulumi.RegisterOutputType(LldpprofileMedNetworkPolicyArrayOutput{})
	pulumi.RegisterOutputType(LocationAddressCivicOutput{})
	pulumi.RegisterOutputType(LocationAddressCivicPtrOutput{})
	pulumi.RegisterOutputType(LocationCoordinatesOutput{})
	pulumi.RegisterOutputType(LocationCoordinatesPtrOutput{})
	pulumi.RegisterOutputType(LocationElinNumberOutput{})
	pulumi.RegisterOutputType(LocationElinNumberPtrOutput{})
	pulumi.RegisterOutputType(ManagedswitchCustomCommandOutput{})
	pulumi.RegisterOutputType(ManagedswitchCustomCommandArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchDhcpSnoopingStaticClientOutput{})
	pulumi.RegisterOutputType(ManagedswitchDhcpSnoopingStaticClientArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchIgmpSnoopingOutput{})
	pulumi.RegisterOutputType(ManagedswitchIgmpSnoopingPtrOutput{})
	pulumi.RegisterOutputType(ManagedswitchIgmpSnoopingVlanOutput{})
	pulumi.RegisterOutputType(ManagedswitchIgmpSnoopingVlanArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchIpSourceGuardOutput{})
	pulumi.RegisterOutputType(ManagedswitchIpSourceGuardArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchIpSourceGuardBindingEntryOutput{})
	pulumi.RegisterOutputType(ManagedswitchIpSourceGuardBindingEntryArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchMirrorOutput{})
	pulumi.RegisterOutputType(ManagedswitchMirrorArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchMirrorSrcEgressOutput{})
	pulumi.RegisterOutputType(ManagedswitchMirrorSrcEgressArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchMirrorSrcIngressOutput{})
	pulumi.RegisterOutputType(ManagedswitchMirrorSrcIngressArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchN8021xSettingsOutput{})
	pulumi.RegisterOutputType(ManagedswitchN8021xSettingsPtrOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortAclGroupOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortAclGroupArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortAllowedVlanOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortAllowedVlanArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortDhcpSnoopOption82OverrideOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortDhcpSnoopOption82OverrideArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortExportTagOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortExportTagArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortFortiswitchAclOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortFortiswitchAclArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortInterfaceTagOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortInterfaceTagArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortMemberOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortMemberArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortUntaggedVlanOutput{})
	pulumi.RegisterOutputType(ManagedswitchPortUntaggedVlanArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchRemoteLogOutput{})
	pulumi.RegisterOutputType(ManagedswitchRemoteLogArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchRouteOffloadRouterOutput{})
	pulumi.RegisterOutputType(ManagedswitchRouteOffloadRouterArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchSnmpCommunityOutput{})
	pulumi.RegisterOutputType(ManagedswitchSnmpCommunityArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchSnmpCommunityHostOutput{})
	pulumi.RegisterOutputType(ManagedswitchSnmpCommunityHostArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchSnmpSysinfoOutput{})
	pulumi.RegisterOutputType(ManagedswitchSnmpSysinfoPtrOutput{})
	pulumi.RegisterOutputType(ManagedswitchSnmpTrapThresholdOutput{})
	pulumi.RegisterOutputType(ManagedswitchSnmpTrapThresholdPtrOutput{})
	pulumi.RegisterOutputType(ManagedswitchSnmpUserOutput{})
	pulumi.RegisterOutputType(ManagedswitchSnmpUserArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchStaticMacOutput{})
	pulumi.RegisterOutputType(ManagedswitchStaticMacArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchStormControlOutput{})
	pulumi.RegisterOutputType(ManagedswitchStormControlPtrOutput{})
	pulumi.RegisterOutputType(ManagedswitchStpInstanceOutput{})
	pulumi.RegisterOutputType(ManagedswitchStpInstanceArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchStpSettingsOutput{})
	pulumi.RegisterOutputType(ManagedswitchStpSettingsPtrOutput{})
	pulumi.RegisterOutputType(ManagedswitchSwitchLogOutput{})
	pulumi.RegisterOutputType(ManagedswitchSwitchLogPtrOutput{})
	pulumi.RegisterOutputType(ManagedswitchSwitchStpSettingsOutput{})
	pulumi.RegisterOutputType(ManagedswitchSwitchStpSettingsPtrOutput{})
	pulumi.RegisterOutputType(ManagedswitchVlanOutput{})
	pulumi.RegisterOutputType(ManagedswitchVlanArrayOutput{})
	pulumi.RegisterOutputType(QuarantineTargetOutput{})
	pulumi.RegisterOutputType(QuarantineTargetArrayOutput{})
	pulumi.RegisterOutputType(QuarantineTargetTagOutput{})
	pulumi.RegisterOutputType(QuarantineTargetTagArrayOutput{})
	pulumi.RegisterOutputType(SnmpcommunityHostOutput{})
	pulumi.RegisterOutputType(SnmpcommunityHostArrayOutput{})
	pulumi.RegisterOutputType(StpinstanceVlanRangeOutput{})
	pulumi.RegisterOutputType(StpinstanceVlanRangeArrayOutput{})
	pulumi.RegisterOutputType(SwitchgroupMemberOutput{})
	pulumi.RegisterOutputType(SwitchgroupMemberArrayOutput{})
	pulumi.RegisterOutputType(TrafficsnifferTargetIpOutput{})
	pulumi.RegisterOutputType(TrafficsnifferTargetIpArrayOutput{})
	pulumi.RegisterOutputType(TrafficsnifferTargetMacOutput{})
	pulumi.RegisterOutputType(TrafficsnifferTargetMacArrayOutput{})
	pulumi.RegisterOutputType(TrafficsnifferTargetPortOutput{})
	pulumi.RegisterOutputType(TrafficsnifferTargetPortArrayOutput{})
	pulumi.RegisterOutputType(TrafficsnifferTargetPortInPortOutput{})
	pulumi.RegisterOutputType(TrafficsnifferTargetPortInPortArrayOutput{})
	pulumi.RegisterOutputType(TrafficsnifferTargetPortOutPortOutput{})
	pulumi.RegisterOutputType(TrafficsnifferTargetPortOutPortArrayOutput{})
	pulumi.RegisterOutputType(VlanPortalMessageOverridesOutput{})
	pulumi.RegisterOutputType(VlanPortalMessageOverridesPtrOutput{})
	pulumi.RegisterOutputType(VlanSelectedUsergroupOutput{})
	pulumi.RegisterOutputType(VlanSelectedUsergroupArrayOutput{})
	pulumi.RegisterOutputType(VlanpolicyAllowedVlanOutput{})
	pulumi.RegisterOutputType(VlanpolicyAllowedVlanArrayOutput{})
	pulumi.RegisterOutputType(VlanpolicyUntaggedVlanOutput{})
	pulumi.RegisterOutputType(VlanpolicyUntaggedVlanArrayOutput{})
}
