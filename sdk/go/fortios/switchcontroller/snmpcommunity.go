// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package switchcontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure FortiSwitch SNMP v1/v2c communities globally. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// SwitchController SnmpCommunity can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:switchcontroller/snmpcommunity:Snmpcommunity labelname {{fosid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:switchcontroller/snmpcommunity:Snmpcommunity labelname {{fosid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Snmpcommunity struct {
	pulumi.CustomResourceState

	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
	Events pulumi.StringOutput `pulumi:"events"`
	// SNMP community ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts SnmpcommunityHostArrayOutput `pulumi:"hosts"`
	// SNMP community name.
	Name pulumi.StringOutput `pulumi:"name"`
	// SNMP v1 query port (default = 161).
	QueryV1Port pulumi.IntOutput `pulumi:"queryV1Port"`
	// Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
	QueryV1Status pulumi.StringOutput `pulumi:"queryV1Status"`
	// SNMP v2c query port (default = 161).
	QueryV2cPort pulumi.IntOutput `pulumi:"queryV2cPort"`
	// Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
	QueryV2cStatus pulumi.StringOutput `pulumi:"queryV2cStatus"`
	// Enable/disable this SNMP community. Valid values: `disable`, `enable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// SNMP v2c trap local port (default = 162).
	TrapV1Lport pulumi.IntOutput `pulumi:"trapV1Lport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV1Rport pulumi.IntOutput `pulumi:"trapV1Rport"`
	// Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
	TrapV1Status pulumi.StringOutput `pulumi:"trapV1Status"`
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport pulumi.IntOutput `pulumi:"trapV2cLport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport pulumi.IntOutput `pulumi:"trapV2cRport"`
	// Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
	TrapV2cStatus pulumi.StringOutput `pulumi:"trapV2cStatus"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSnmpcommunity registers a new resource with the given unique name, arguments, and options.
func NewSnmpcommunity(ctx *pulumi.Context,
	name string, args *SnmpcommunityArgs, opts ...pulumi.ResourceOption) (*Snmpcommunity, error) {
	if args == nil {
		args = &SnmpcommunityArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Snmpcommunity
	err := ctx.RegisterResource("fortios:switchcontroller/snmpcommunity:Snmpcommunity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnmpcommunity gets an existing Snmpcommunity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnmpcommunity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnmpcommunityState, opts ...pulumi.ResourceOption) (*Snmpcommunity, error) {
	var resource Snmpcommunity
	err := ctx.ReadResource("fortios:switchcontroller/snmpcommunity:Snmpcommunity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snmpcommunity resources.
type snmpcommunityState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
	Events *string `pulumi:"events"`
	// SNMP community ID.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts []SnmpcommunityHost `pulumi:"hosts"`
	// SNMP community name.
	Name *string `pulumi:"name"`
	// SNMP v1 query port (default = 161).
	QueryV1Port *int `pulumi:"queryV1Port"`
	// Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
	QueryV1Status *string `pulumi:"queryV1Status"`
	// SNMP v2c query port (default = 161).
	QueryV2cPort *int `pulumi:"queryV2cPort"`
	// Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
	QueryV2cStatus *string `pulumi:"queryV2cStatus"`
	// Enable/disable this SNMP community. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// SNMP v2c trap local port (default = 162).
	TrapV1Lport *int `pulumi:"trapV1Lport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV1Rport *int `pulumi:"trapV1Rport"`
	// Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
	TrapV1Status *string `pulumi:"trapV1Status"`
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport *int `pulumi:"trapV2cLport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport *int `pulumi:"trapV2cRport"`
	// Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
	TrapV2cStatus *string `pulumi:"trapV2cStatus"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SnmpcommunityState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
	Events pulumi.StringPtrInput
	// SNMP community ID.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts SnmpcommunityHostArrayInput
	// SNMP community name.
	Name pulumi.StringPtrInput
	// SNMP v1 query port (default = 161).
	QueryV1Port pulumi.IntPtrInput
	// Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
	QueryV1Status pulumi.StringPtrInput
	// SNMP v2c query port (default = 161).
	QueryV2cPort pulumi.IntPtrInput
	// Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
	QueryV2cStatus pulumi.StringPtrInput
	// Enable/disable this SNMP community. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput
	// SNMP v2c trap local port (default = 162).
	TrapV1Lport pulumi.IntPtrInput
	// SNMP v2c trap remote port (default = 162).
	TrapV1Rport pulumi.IntPtrInput
	// Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
	TrapV1Status pulumi.StringPtrInput
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport pulumi.IntPtrInput
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport pulumi.IntPtrInput
	// Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
	TrapV2cStatus pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SnmpcommunityState) ElementType() reflect.Type {
	return reflect.TypeOf((*snmpcommunityState)(nil)).Elem()
}

type snmpcommunityArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
	Events *string `pulumi:"events"`
	// SNMP community ID.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts []SnmpcommunityHost `pulumi:"hosts"`
	// SNMP community name.
	Name *string `pulumi:"name"`
	// SNMP v1 query port (default = 161).
	QueryV1Port *int `pulumi:"queryV1Port"`
	// Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
	QueryV1Status *string `pulumi:"queryV1Status"`
	// SNMP v2c query port (default = 161).
	QueryV2cPort *int `pulumi:"queryV2cPort"`
	// Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
	QueryV2cStatus *string `pulumi:"queryV2cStatus"`
	// Enable/disable this SNMP community. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// SNMP v2c trap local port (default = 162).
	TrapV1Lport *int `pulumi:"trapV1Lport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV1Rport *int `pulumi:"trapV1Rport"`
	// Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
	TrapV1Status *string `pulumi:"trapV1Status"`
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport *int `pulumi:"trapV2cLport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport *int `pulumi:"trapV2cRport"`
	// Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
	TrapV2cStatus *string `pulumi:"trapV2cStatus"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Snmpcommunity resource.
type SnmpcommunityArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
	Events pulumi.StringPtrInput
	// SNMP community ID.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts SnmpcommunityHostArrayInput
	// SNMP community name.
	Name pulumi.StringPtrInput
	// SNMP v1 query port (default = 161).
	QueryV1Port pulumi.IntPtrInput
	// Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
	QueryV1Status pulumi.StringPtrInput
	// SNMP v2c query port (default = 161).
	QueryV2cPort pulumi.IntPtrInput
	// Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
	QueryV2cStatus pulumi.StringPtrInput
	// Enable/disable this SNMP community. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput
	// SNMP v2c trap local port (default = 162).
	TrapV1Lport pulumi.IntPtrInput
	// SNMP v2c trap remote port (default = 162).
	TrapV1Rport pulumi.IntPtrInput
	// Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
	TrapV1Status pulumi.StringPtrInput
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport pulumi.IntPtrInput
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport pulumi.IntPtrInput
	// Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
	TrapV2cStatus pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SnmpcommunityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snmpcommunityArgs)(nil)).Elem()
}

type SnmpcommunityInput interface {
	pulumi.Input

	ToSnmpcommunityOutput() SnmpcommunityOutput
	ToSnmpcommunityOutputWithContext(ctx context.Context) SnmpcommunityOutput
}

func (*Snmpcommunity) ElementType() reflect.Type {
	return reflect.TypeOf((**Snmpcommunity)(nil)).Elem()
}

func (i *Snmpcommunity) ToSnmpcommunityOutput() SnmpcommunityOutput {
	return i.ToSnmpcommunityOutputWithContext(context.Background())
}

func (i *Snmpcommunity) ToSnmpcommunityOutputWithContext(ctx context.Context) SnmpcommunityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpcommunityOutput)
}

// SnmpcommunityArrayInput is an input type that accepts SnmpcommunityArray and SnmpcommunityArrayOutput values.
// You can construct a concrete instance of `SnmpcommunityArrayInput` via:
//
//	SnmpcommunityArray{ SnmpcommunityArgs{...} }
type SnmpcommunityArrayInput interface {
	pulumi.Input

	ToSnmpcommunityArrayOutput() SnmpcommunityArrayOutput
	ToSnmpcommunityArrayOutputWithContext(context.Context) SnmpcommunityArrayOutput
}

type SnmpcommunityArray []SnmpcommunityInput

func (SnmpcommunityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snmpcommunity)(nil)).Elem()
}

func (i SnmpcommunityArray) ToSnmpcommunityArrayOutput() SnmpcommunityArrayOutput {
	return i.ToSnmpcommunityArrayOutputWithContext(context.Background())
}

func (i SnmpcommunityArray) ToSnmpcommunityArrayOutputWithContext(ctx context.Context) SnmpcommunityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpcommunityArrayOutput)
}

// SnmpcommunityMapInput is an input type that accepts SnmpcommunityMap and SnmpcommunityMapOutput values.
// You can construct a concrete instance of `SnmpcommunityMapInput` via:
//
//	SnmpcommunityMap{ "key": SnmpcommunityArgs{...} }
type SnmpcommunityMapInput interface {
	pulumi.Input

	ToSnmpcommunityMapOutput() SnmpcommunityMapOutput
	ToSnmpcommunityMapOutputWithContext(context.Context) SnmpcommunityMapOutput
}

type SnmpcommunityMap map[string]SnmpcommunityInput

func (SnmpcommunityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snmpcommunity)(nil)).Elem()
}

func (i SnmpcommunityMap) ToSnmpcommunityMapOutput() SnmpcommunityMapOutput {
	return i.ToSnmpcommunityMapOutputWithContext(context.Background())
}

func (i SnmpcommunityMap) ToSnmpcommunityMapOutputWithContext(ctx context.Context) SnmpcommunityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpcommunityMapOutput)
}

type SnmpcommunityOutput struct{ *pulumi.OutputState }

func (SnmpcommunityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snmpcommunity)(nil)).Elem()
}

func (o SnmpcommunityOutput) ToSnmpcommunityOutput() SnmpcommunityOutput {
	return o
}

func (o SnmpcommunityOutput) ToSnmpcommunityOutputWithContext(ctx context.Context) SnmpcommunityOutput {
	return o
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SnmpcommunityOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snmpcommunity) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
func (o SnmpcommunityOutput) Events() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmpcommunity) pulumi.StringOutput { return v.Events }).(pulumi.StringOutput)
}

// SNMP community ID.
func (o SnmpcommunityOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *Snmpcommunity) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o SnmpcommunityOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snmpcommunity) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
func (o SnmpcommunityOutput) Hosts() SnmpcommunityHostArrayOutput {
	return o.ApplyT(func(v *Snmpcommunity) SnmpcommunityHostArrayOutput { return v.Hosts }).(SnmpcommunityHostArrayOutput)
}

// SNMP community name.
func (o SnmpcommunityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmpcommunity) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// SNMP v1 query port (default = 161).
func (o SnmpcommunityOutput) QueryV1Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Snmpcommunity) pulumi.IntOutput { return v.QueryV1Port }).(pulumi.IntOutput)
}

// Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
func (o SnmpcommunityOutput) QueryV1Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmpcommunity) pulumi.StringOutput { return v.QueryV1Status }).(pulumi.StringOutput)
}

// SNMP v2c query port (default = 161).
func (o SnmpcommunityOutput) QueryV2cPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Snmpcommunity) pulumi.IntOutput { return v.QueryV2cPort }).(pulumi.IntOutput)
}

// Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
func (o SnmpcommunityOutput) QueryV2cStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmpcommunity) pulumi.StringOutput { return v.QueryV2cStatus }).(pulumi.StringOutput)
}

// Enable/disable this SNMP community. Valid values: `disable`, `enable`.
func (o SnmpcommunityOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmpcommunity) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// SNMP v2c trap local port (default = 162).
func (o SnmpcommunityOutput) TrapV1Lport() pulumi.IntOutput {
	return o.ApplyT(func(v *Snmpcommunity) pulumi.IntOutput { return v.TrapV1Lport }).(pulumi.IntOutput)
}

// SNMP v2c trap remote port (default = 162).
func (o SnmpcommunityOutput) TrapV1Rport() pulumi.IntOutput {
	return o.ApplyT(func(v *Snmpcommunity) pulumi.IntOutput { return v.TrapV1Rport }).(pulumi.IntOutput)
}

// Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
func (o SnmpcommunityOutput) TrapV1Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmpcommunity) pulumi.StringOutput { return v.TrapV1Status }).(pulumi.StringOutput)
}

// SNMP v2c trap local port (default = 162).
func (o SnmpcommunityOutput) TrapV2cLport() pulumi.IntOutput {
	return o.ApplyT(func(v *Snmpcommunity) pulumi.IntOutput { return v.TrapV2cLport }).(pulumi.IntOutput)
}

// SNMP v2c trap remote port (default = 162).
func (o SnmpcommunityOutput) TrapV2cRport() pulumi.IntOutput {
	return o.ApplyT(func(v *Snmpcommunity) pulumi.IntOutput { return v.TrapV2cRport }).(pulumi.IntOutput)
}

// Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
func (o SnmpcommunityOutput) TrapV2cStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmpcommunity) pulumi.StringOutput { return v.TrapV2cStatus }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SnmpcommunityOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snmpcommunity) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SnmpcommunityArrayOutput struct{ *pulumi.OutputState }

func (SnmpcommunityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snmpcommunity)(nil)).Elem()
}

func (o SnmpcommunityArrayOutput) ToSnmpcommunityArrayOutput() SnmpcommunityArrayOutput {
	return o
}

func (o SnmpcommunityArrayOutput) ToSnmpcommunityArrayOutputWithContext(ctx context.Context) SnmpcommunityArrayOutput {
	return o
}

func (o SnmpcommunityArrayOutput) Index(i pulumi.IntInput) SnmpcommunityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Snmpcommunity {
		return vs[0].([]*Snmpcommunity)[vs[1].(int)]
	}).(SnmpcommunityOutput)
}

type SnmpcommunityMapOutput struct{ *pulumi.OutputState }

func (SnmpcommunityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snmpcommunity)(nil)).Elem()
}

func (o SnmpcommunityMapOutput) ToSnmpcommunityMapOutput() SnmpcommunityMapOutput {
	return o
}

func (o SnmpcommunityMapOutput) ToSnmpcommunityMapOutputWithContext(ctx context.Context) SnmpcommunityMapOutput {
	return o
}

func (o SnmpcommunityMapOutput) MapIndex(k pulumi.StringInput) SnmpcommunityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Snmpcommunity {
		return vs[0].(map[string]*Snmpcommunity)[vs[1].(string)]
	}).(SnmpcommunityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpcommunityInput)(nil)).Elem(), &Snmpcommunity{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpcommunityArrayInput)(nil)).Elem(), SnmpcommunityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpcommunityMapInput)(nil)).Elem(), SnmpcommunityMap{})
	pulumi.RegisterOutputType(SnmpcommunityOutput{})
	pulumi.RegisterOutputType(SnmpcommunityArrayOutput{})
	pulumi.RegisterOutputType(SnmpcommunityMapOutput{})
}
