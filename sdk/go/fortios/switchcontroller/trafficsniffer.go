// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package switchcontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure FortiSwitch RSPAN/ERSPAN traffic sniffing parameters. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// SwitchController TrafficSniffer can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:switchcontroller/trafficsniffer:Trafficsniffer labelname SwitchControllerTrafficSniffer
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:switchcontroller/trafficsniffer:Trafficsniffer labelname SwitchControllerTrafficSniffer
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Trafficsniffer struct {
	pulumi.CustomResourceState

	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Configure ERSPAN collector IP address.
	ErspanIp pulumi.StringOutput `pulumi:"erspanIp"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Configure traffic sniffer mode. Valid values: `erspan-auto`, `rspan`, `none`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Sniffer IPs to filter. The structure of `targetIp` block is documented below.
	TargetIps TrafficsnifferTargetIpArrayOutput `pulumi:"targetIps"`
	// Sniffer MACs to filter. The structure of `targetMac` block is documented below.
	TargetMacs TrafficsnifferTargetMacArrayOutput `pulumi:"targetMacs"`
	// Sniffer ports to filter. The structure of `targetPort` block is documented below.
	TargetPorts TrafficsnifferTargetPortArrayOutput `pulumi:"targetPorts"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewTrafficsniffer registers a new resource with the given unique name, arguments, and options.
func NewTrafficsniffer(ctx *pulumi.Context,
	name string, args *TrafficsnifferArgs, opts ...pulumi.ResourceOption) (*Trafficsniffer, error) {
	if args == nil {
		args = &TrafficsnifferArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Trafficsniffer
	err := ctx.RegisterResource("fortios:switchcontroller/trafficsniffer:Trafficsniffer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficsniffer gets an existing Trafficsniffer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficsniffer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficsnifferState, opts ...pulumi.ResourceOption) (*Trafficsniffer, error) {
	var resource Trafficsniffer
	err := ctx.ReadResource("fortios:switchcontroller/trafficsniffer:Trafficsniffer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Trafficsniffer resources.
type trafficsnifferState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Configure ERSPAN collector IP address.
	ErspanIp *string `pulumi:"erspanIp"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Configure traffic sniffer mode. Valid values: `erspan-auto`, `rspan`, `none`.
	Mode *string `pulumi:"mode"`
	// Sniffer IPs to filter. The structure of `targetIp` block is documented below.
	TargetIps []TrafficsnifferTargetIp `pulumi:"targetIps"`
	// Sniffer MACs to filter. The structure of `targetMac` block is documented below.
	TargetMacs []TrafficsnifferTargetMac `pulumi:"targetMacs"`
	// Sniffer ports to filter. The structure of `targetPort` block is documented below.
	TargetPorts []TrafficsnifferTargetPort `pulumi:"targetPorts"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type TrafficsnifferState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Configure ERSPAN collector IP address.
	ErspanIp pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Configure traffic sniffer mode. Valid values: `erspan-auto`, `rspan`, `none`.
	Mode pulumi.StringPtrInput
	// Sniffer IPs to filter. The structure of `targetIp` block is documented below.
	TargetIps TrafficsnifferTargetIpArrayInput
	// Sniffer MACs to filter. The structure of `targetMac` block is documented below.
	TargetMacs TrafficsnifferTargetMacArrayInput
	// Sniffer ports to filter. The structure of `targetPort` block is documented below.
	TargetPorts TrafficsnifferTargetPortArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (TrafficsnifferState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficsnifferState)(nil)).Elem()
}

type trafficsnifferArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Configure ERSPAN collector IP address.
	ErspanIp *string `pulumi:"erspanIp"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Configure traffic sniffer mode. Valid values: `erspan-auto`, `rspan`, `none`.
	Mode *string `pulumi:"mode"`
	// Sniffer IPs to filter. The structure of `targetIp` block is documented below.
	TargetIps []TrafficsnifferTargetIp `pulumi:"targetIps"`
	// Sniffer MACs to filter. The structure of `targetMac` block is documented below.
	TargetMacs []TrafficsnifferTargetMac `pulumi:"targetMacs"`
	// Sniffer ports to filter. The structure of `targetPort` block is documented below.
	TargetPorts []TrafficsnifferTargetPort `pulumi:"targetPorts"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Trafficsniffer resource.
type TrafficsnifferArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Configure ERSPAN collector IP address.
	ErspanIp pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Configure traffic sniffer mode. Valid values: `erspan-auto`, `rspan`, `none`.
	Mode pulumi.StringPtrInput
	// Sniffer IPs to filter. The structure of `targetIp` block is documented below.
	TargetIps TrafficsnifferTargetIpArrayInput
	// Sniffer MACs to filter. The structure of `targetMac` block is documented below.
	TargetMacs TrafficsnifferTargetMacArrayInput
	// Sniffer ports to filter. The structure of `targetPort` block is documented below.
	TargetPorts TrafficsnifferTargetPortArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (TrafficsnifferArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficsnifferArgs)(nil)).Elem()
}

type TrafficsnifferInput interface {
	pulumi.Input

	ToTrafficsnifferOutput() TrafficsnifferOutput
	ToTrafficsnifferOutputWithContext(ctx context.Context) TrafficsnifferOutput
}

func (*Trafficsniffer) ElementType() reflect.Type {
	return reflect.TypeOf((**Trafficsniffer)(nil)).Elem()
}

func (i *Trafficsniffer) ToTrafficsnifferOutput() TrafficsnifferOutput {
	return i.ToTrafficsnifferOutputWithContext(context.Background())
}

func (i *Trafficsniffer) ToTrafficsnifferOutputWithContext(ctx context.Context) TrafficsnifferOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficsnifferOutput)
}

// TrafficsnifferArrayInput is an input type that accepts TrafficsnifferArray and TrafficsnifferArrayOutput values.
// You can construct a concrete instance of `TrafficsnifferArrayInput` via:
//
//	TrafficsnifferArray{ TrafficsnifferArgs{...} }
type TrafficsnifferArrayInput interface {
	pulumi.Input

	ToTrafficsnifferArrayOutput() TrafficsnifferArrayOutput
	ToTrafficsnifferArrayOutputWithContext(context.Context) TrafficsnifferArrayOutput
}

type TrafficsnifferArray []TrafficsnifferInput

func (TrafficsnifferArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Trafficsniffer)(nil)).Elem()
}

func (i TrafficsnifferArray) ToTrafficsnifferArrayOutput() TrafficsnifferArrayOutput {
	return i.ToTrafficsnifferArrayOutputWithContext(context.Background())
}

func (i TrafficsnifferArray) ToTrafficsnifferArrayOutputWithContext(ctx context.Context) TrafficsnifferArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficsnifferArrayOutput)
}

// TrafficsnifferMapInput is an input type that accepts TrafficsnifferMap and TrafficsnifferMapOutput values.
// You can construct a concrete instance of `TrafficsnifferMapInput` via:
//
//	TrafficsnifferMap{ "key": TrafficsnifferArgs{...} }
type TrafficsnifferMapInput interface {
	pulumi.Input

	ToTrafficsnifferMapOutput() TrafficsnifferMapOutput
	ToTrafficsnifferMapOutputWithContext(context.Context) TrafficsnifferMapOutput
}

type TrafficsnifferMap map[string]TrafficsnifferInput

func (TrafficsnifferMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Trafficsniffer)(nil)).Elem()
}

func (i TrafficsnifferMap) ToTrafficsnifferMapOutput() TrafficsnifferMapOutput {
	return i.ToTrafficsnifferMapOutputWithContext(context.Background())
}

func (i TrafficsnifferMap) ToTrafficsnifferMapOutputWithContext(ctx context.Context) TrafficsnifferMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficsnifferMapOutput)
}

type TrafficsnifferOutput struct{ *pulumi.OutputState }

func (TrafficsnifferOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Trafficsniffer)(nil)).Elem()
}

func (o TrafficsnifferOutput) ToTrafficsnifferOutput() TrafficsnifferOutput {
	return o
}

func (o TrafficsnifferOutput) ToTrafficsnifferOutputWithContext(ctx context.Context) TrafficsnifferOutput {
	return o
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o TrafficsnifferOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trafficsniffer) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Configure ERSPAN collector IP address.
func (o TrafficsnifferOutput) ErspanIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficsniffer) pulumi.StringOutput { return v.ErspanIp }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o TrafficsnifferOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trafficsniffer) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Configure traffic sniffer mode. Valid values: `erspan-auto`, `rspan`, `none`.
func (o TrafficsnifferOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *Trafficsniffer) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Sniffer IPs to filter. The structure of `targetIp` block is documented below.
func (o TrafficsnifferOutput) TargetIps() TrafficsnifferTargetIpArrayOutput {
	return o.ApplyT(func(v *Trafficsniffer) TrafficsnifferTargetIpArrayOutput { return v.TargetIps }).(TrafficsnifferTargetIpArrayOutput)
}

// Sniffer MACs to filter. The structure of `targetMac` block is documented below.
func (o TrafficsnifferOutput) TargetMacs() TrafficsnifferTargetMacArrayOutput {
	return o.ApplyT(func(v *Trafficsniffer) TrafficsnifferTargetMacArrayOutput { return v.TargetMacs }).(TrafficsnifferTargetMacArrayOutput)
}

// Sniffer ports to filter. The structure of `targetPort` block is documented below.
func (o TrafficsnifferOutput) TargetPorts() TrafficsnifferTargetPortArrayOutput {
	return o.ApplyT(func(v *Trafficsniffer) TrafficsnifferTargetPortArrayOutput { return v.TargetPorts }).(TrafficsnifferTargetPortArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o TrafficsnifferOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trafficsniffer) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type TrafficsnifferArrayOutput struct{ *pulumi.OutputState }

func (TrafficsnifferArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Trafficsniffer)(nil)).Elem()
}

func (o TrafficsnifferArrayOutput) ToTrafficsnifferArrayOutput() TrafficsnifferArrayOutput {
	return o
}

func (o TrafficsnifferArrayOutput) ToTrafficsnifferArrayOutputWithContext(ctx context.Context) TrafficsnifferArrayOutput {
	return o
}

func (o TrafficsnifferArrayOutput) Index(i pulumi.IntInput) TrafficsnifferOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Trafficsniffer {
		return vs[0].([]*Trafficsniffer)[vs[1].(int)]
	}).(TrafficsnifferOutput)
}

type TrafficsnifferMapOutput struct{ *pulumi.OutputState }

func (TrafficsnifferMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Trafficsniffer)(nil)).Elem()
}

func (o TrafficsnifferMapOutput) ToTrafficsnifferMapOutput() TrafficsnifferMapOutput {
	return o
}

func (o TrafficsnifferMapOutput) ToTrafficsnifferMapOutputWithContext(ctx context.Context) TrafficsnifferMapOutput {
	return o
}

func (o TrafficsnifferMapOutput) MapIndex(k pulumi.StringInput) TrafficsnifferOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Trafficsniffer {
		return vs[0].(map[string]*Trafficsniffer)[vs[1].(string)]
	}).(TrafficsnifferOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficsnifferInput)(nil)).Elem(), &Trafficsniffer{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficsnifferArrayInput)(nil)).Elem(), TrafficsnifferArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficsnifferMapInput)(nil)).Elem(), TrafficsnifferMap{})
	pulumi.RegisterOutputType(TrafficsnifferOutput{})
	pulumi.RegisterOutputType(TrafficsnifferArrayOutput{})
	pulumi.RegisterOutputType(TrafficsnifferMapOutput{})
}
