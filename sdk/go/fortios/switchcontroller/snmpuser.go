// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package switchcontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure FortiSwitch SNMP v3 users globally. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// SwitchController SnmpUser can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:switchcontroller/snmpuser:Snmpuser labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:switchcontroller/snmpuser:Snmpuser labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Snmpuser struct {
	pulumi.CustomResourceState

	// Authentication protocol.
	AuthProto pulumi.StringOutput `pulumi:"authProto"`
	// Password for authentication protocol.
	AuthPwd pulumi.StringPtrOutput `pulumi:"authPwd"`
	// SNMP user name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Privacy (encryption) protocol.
	PrivProto pulumi.StringOutput `pulumi:"privProto"`
	// Password for privacy (encryption) protocol.
	PrivPwd pulumi.StringPtrOutput `pulumi:"privPwd"`
	// Enable/disable SNMP queries for this user. Valid values: `disable`, `enable`.
	Queries pulumi.StringOutput `pulumi:"queries"`
	// SNMPv3 query port (default = 161).
	QueryPort pulumi.IntOutput `pulumi:"queryPort"`
	// Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
	SecurityLevel pulumi.StringOutput `pulumi:"securityLevel"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewSnmpuser registers a new resource with the given unique name, arguments, and options.
func NewSnmpuser(ctx *pulumi.Context,
	name string, args *SnmpuserArgs, opts ...pulumi.ResourceOption) (*Snmpuser, error) {
	if args == nil {
		args = &SnmpuserArgs{}
	}

	if args.AuthPwd != nil {
		args.AuthPwd = pulumi.ToSecret(args.AuthPwd).(pulumi.StringPtrInput)
	}
	if args.PrivPwd != nil {
		args.PrivPwd = pulumi.ToSecret(args.PrivPwd).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"authPwd",
		"privPwd",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Snmpuser
	err := ctx.RegisterResource("fortios:switchcontroller/snmpuser:Snmpuser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnmpuser gets an existing Snmpuser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnmpuser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnmpuserState, opts ...pulumi.ResourceOption) (*Snmpuser, error) {
	var resource Snmpuser
	err := ctx.ReadResource("fortios:switchcontroller/snmpuser:Snmpuser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snmpuser resources.
type snmpuserState struct {
	// Authentication protocol.
	AuthProto *string `pulumi:"authProto"`
	// Password for authentication protocol.
	AuthPwd *string `pulumi:"authPwd"`
	// SNMP user name.
	Name *string `pulumi:"name"`
	// Privacy (encryption) protocol.
	PrivProto *string `pulumi:"privProto"`
	// Password for privacy (encryption) protocol.
	PrivPwd *string `pulumi:"privPwd"`
	// Enable/disable SNMP queries for this user. Valid values: `disable`, `enable`.
	Queries *string `pulumi:"queries"`
	// SNMPv3 query port (default = 161).
	QueryPort *int `pulumi:"queryPort"`
	// Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
	SecurityLevel *string `pulumi:"securityLevel"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SnmpuserState struct {
	// Authentication protocol.
	AuthProto pulumi.StringPtrInput
	// Password for authentication protocol.
	AuthPwd pulumi.StringPtrInput
	// SNMP user name.
	Name pulumi.StringPtrInput
	// Privacy (encryption) protocol.
	PrivProto pulumi.StringPtrInput
	// Password for privacy (encryption) protocol.
	PrivPwd pulumi.StringPtrInput
	// Enable/disable SNMP queries for this user. Valid values: `disable`, `enable`.
	Queries pulumi.StringPtrInput
	// SNMPv3 query port (default = 161).
	QueryPort pulumi.IntPtrInput
	// Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
	SecurityLevel pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SnmpuserState) ElementType() reflect.Type {
	return reflect.TypeOf((*snmpuserState)(nil)).Elem()
}

type snmpuserArgs struct {
	// Authentication protocol.
	AuthProto *string `pulumi:"authProto"`
	// Password for authentication protocol.
	AuthPwd *string `pulumi:"authPwd"`
	// SNMP user name.
	Name *string `pulumi:"name"`
	// Privacy (encryption) protocol.
	PrivProto *string `pulumi:"privProto"`
	// Password for privacy (encryption) protocol.
	PrivPwd *string `pulumi:"privPwd"`
	// Enable/disable SNMP queries for this user. Valid values: `disable`, `enable`.
	Queries *string `pulumi:"queries"`
	// SNMPv3 query port (default = 161).
	QueryPort *int `pulumi:"queryPort"`
	// Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
	SecurityLevel *string `pulumi:"securityLevel"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Snmpuser resource.
type SnmpuserArgs struct {
	// Authentication protocol.
	AuthProto pulumi.StringPtrInput
	// Password for authentication protocol.
	AuthPwd pulumi.StringPtrInput
	// SNMP user name.
	Name pulumi.StringPtrInput
	// Privacy (encryption) protocol.
	PrivProto pulumi.StringPtrInput
	// Password for privacy (encryption) protocol.
	PrivPwd pulumi.StringPtrInput
	// Enable/disable SNMP queries for this user. Valid values: `disable`, `enable`.
	Queries pulumi.StringPtrInput
	// SNMPv3 query port (default = 161).
	QueryPort pulumi.IntPtrInput
	// Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
	SecurityLevel pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SnmpuserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snmpuserArgs)(nil)).Elem()
}

type SnmpuserInput interface {
	pulumi.Input

	ToSnmpuserOutput() SnmpuserOutput
	ToSnmpuserOutputWithContext(ctx context.Context) SnmpuserOutput
}

func (*Snmpuser) ElementType() reflect.Type {
	return reflect.TypeOf((**Snmpuser)(nil)).Elem()
}

func (i *Snmpuser) ToSnmpuserOutput() SnmpuserOutput {
	return i.ToSnmpuserOutputWithContext(context.Background())
}

func (i *Snmpuser) ToSnmpuserOutputWithContext(ctx context.Context) SnmpuserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpuserOutput)
}

// SnmpuserArrayInput is an input type that accepts SnmpuserArray and SnmpuserArrayOutput values.
// You can construct a concrete instance of `SnmpuserArrayInput` via:
//
//	SnmpuserArray{ SnmpuserArgs{...} }
type SnmpuserArrayInput interface {
	pulumi.Input

	ToSnmpuserArrayOutput() SnmpuserArrayOutput
	ToSnmpuserArrayOutputWithContext(context.Context) SnmpuserArrayOutput
}

type SnmpuserArray []SnmpuserInput

func (SnmpuserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snmpuser)(nil)).Elem()
}

func (i SnmpuserArray) ToSnmpuserArrayOutput() SnmpuserArrayOutput {
	return i.ToSnmpuserArrayOutputWithContext(context.Background())
}

func (i SnmpuserArray) ToSnmpuserArrayOutputWithContext(ctx context.Context) SnmpuserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpuserArrayOutput)
}

// SnmpuserMapInput is an input type that accepts SnmpuserMap and SnmpuserMapOutput values.
// You can construct a concrete instance of `SnmpuserMapInput` via:
//
//	SnmpuserMap{ "key": SnmpuserArgs{...} }
type SnmpuserMapInput interface {
	pulumi.Input

	ToSnmpuserMapOutput() SnmpuserMapOutput
	ToSnmpuserMapOutputWithContext(context.Context) SnmpuserMapOutput
}

type SnmpuserMap map[string]SnmpuserInput

func (SnmpuserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snmpuser)(nil)).Elem()
}

func (i SnmpuserMap) ToSnmpuserMapOutput() SnmpuserMapOutput {
	return i.ToSnmpuserMapOutputWithContext(context.Background())
}

func (i SnmpuserMap) ToSnmpuserMapOutputWithContext(ctx context.Context) SnmpuserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpuserMapOutput)
}

type SnmpuserOutput struct{ *pulumi.OutputState }

func (SnmpuserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snmpuser)(nil)).Elem()
}

func (o SnmpuserOutput) ToSnmpuserOutput() SnmpuserOutput {
	return o
}

func (o SnmpuserOutput) ToSnmpuserOutputWithContext(ctx context.Context) SnmpuserOutput {
	return o
}

// Authentication protocol.
func (o SnmpuserOutput) AuthProto() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmpuser) pulumi.StringOutput { return v.AuthProto }).(pulumi.StringOutput)
}

// Password for authentication protocol.
func (o SnmpuserOutput) AuthPwd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snmpuser) pulumi.StringPtrOutput { return v.AuthPwd }).(pulumi.StringPtrOutput)
}

// SNMP user name.
func (o SnmpuserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmpuser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Privacy (encryption) protocol.
func (o SnmpuserOutput) PrivProto() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmpuser) pulumi.StringOutput { return v.PrivProto }).(pulumi.StringOutput)
}

// Password for privacy (encryption) protocol.
func (o SnmpuserOutput) PrivPwd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snmpuser) pulumi.StringPtrOutput { return v.PrivPwd }).(pulumi.StringPtrOutput)
}

// Enable/disable SNMP queries for this user. Valid values: `disable`, `enable`.
func (o SnmpuserOutput) Queries() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmpuser) pulumi.StringOutput { return v.Queries }).(pulumi.StringOutput)
}

// SNMPv3 query port (default = 161).
func (o SnmpuserOutput) QueryPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Snmpuser) pulumi.IntOutput { return v.QueryPort }).(pulumi.IntOutput)
}

// Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
func (o SnmpuserOutput) SecurityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmpuser) pulumi.StringOutput { return v.SecurityLevel }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SnmpuserOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmpuser) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type SnmpuserArrayOutput struct{ *pulumi.OutputState }

func (SnmpuserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snmpuser)(nil)).Elem()
}

func (o SnmpuserArrayOutput) ToSnmpuserArrayOutput() SnmpuserArrayOutput {
	return o
}

func (o SnmpuserArrayOutput) ToSnmpuserArrayOutputWithContext(ctx context.Context) SnmpuserArrayOutput {
	return o
}

func (o SnmpuserArrayOutput) Index(i pulumi.IntInput) SnmpuserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Snmpuser {
		return vs[0].([]*Snmpuser)[vs[1].(int)]
	}).(SnmpuserOutput)
}

type SnmpuserMapOutput struct{ *pulumi.OutputState }

func (SnmpuserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snmpuser)(nil)).Elem()
}

func (o SnmpuserMapOutput) ToSnmpuserMapOutput() SnmpuserMapOutput {
	return o
}

func (o SnmpuserMapOutput) ToSnmpuserMapOutputWithContext(ctx context.Context) SnmpuserMapOutput {
	return o
}

func (o SnmpuserMapOutput) MapIndex(k pulumi.StringInput) SnmpuserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Snmpuser {
		return vs[0].(map[string]*Snmpuser)[vs[1].(string)]
	}).(SnmpuserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpuserInput)(nil)).Elem(), &Snmpuser{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpuserArrayInput)(nil)).Elem(), SnmpuserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpuserMapInput)(nil)).Elem(), SnmpuserMap{})
	pulumi.RegisterOutputType(SnmpuserOutput{})
	pulumi.RegisterOutputType(SnmpuserArrayOutput{})
	pulumi.RegisterOutputType(SnmpuserMapOutput{})
}
