// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package acl

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure ingress ACL policies to be applied on managed FortiSwitch ports. Applies to FortiOS Version `>= 7.4.0`.
//
// ## Import
//
// SwitchControllerAcl Ingress can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:switchcontroller/acl/ingress:Ingress labelname {{fosid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:switchcontroller/acl/ingress:Ingress labelname {{fosid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Ingress struct {
	pulumi.CustomResourceState

	// ACL actions. The structure of `action` block is documented below.
	Action IngressActionOutput `pulumi:"action"`
	// ACL classifiers. The structure of `classifier` block is documented below.
	Classifier IngressClassifierOutput `pulumi:"classifier"`
	// Description for the ACL policy.
	Description pulumi.StringOutput `pulumi:"description"`
	// ACL ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewIngress registers a new resource with the given unique name, arguments, and options.
func NewIngress(ctx *pulumi.Context,
	name string, args *IngressArgs, opts ...pulumi.ResourceOption) (*Ingress, error) {
	if args == nil {
		args = &IngressArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ingress
	err := ctx.RegisterResource("fortios:switchcontroller/acl/ingress:Ingress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIngress gets an existing Ingress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIngress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IngressState, opts ...pulumi.ResourceOption) (*Ingress, error) {
	var resource Ingress
	err := ctx.ReadResource("fortios:switchcontroller/acl/ingress:Ingress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ingress resources.
type ingressState struct {
	// ACL actions. The structure of `action` block is documented below.
	Action *IngressAction `pulumi:"action"`
	// ACL classifiers. The structure of `classifier` block is documented below.
	Classifier *IngressClassifier `pulumi:"classifier"`
	// Description for the ACL policy.
	Description *string `pulumi:"description"`
	// ACL ID.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type IngressState struct {
	// ACL actions. The structure of `action` block is documented below.
	Action IngressActionPtrInput
	// ACL classifiers. The structure of `classifier` block is documented below.
	Classifier IngressClassifierPtrInput
	// Description for the ACL policy.
	Description pulumi.StringPtrInput
	// ACL ID.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IngressState) ElementType() reflect.Type {
	return reflect.TypeOf((*ingressState)(nil)).Elem()
}

type ingressArgs struct {
	// ACL actions. The structure of `action` block is documented below.
	Action *IngressAction `pulumi:"action"`
	// ACL classifiers. The structure of `classifier` block is documented below.
	Classifier *IngressClassifier `pulumi:"classifier"`
	// Description for the ACL policy.
	Description *string `pulumi:"description"`
	// ACL ID.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Ingress resource.
type IngressArgs struct {
	// ACL actions. The structure of `action` block is documented below.
	Action IngressActionPtrInput
	// ACL classifiers. The structure of `classifier` block is documented below.
	Classifier IngressClassifierPtrInput
	// Description for the ACL policy.
	Description pulumi.StringPtrInput
	// ACL ID.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ingressArgs)(nil)).Elem()
}

type IngressInput interface {
	pulumi.Input

	ToIngressOutput() IngressOutput
	ToIngressOutputWithContext(ctx context.Context) IngressOutput
}

func (*Ingress) ElementType() reflect.Type {
	return reflect.TypeOf((**Ingress)(nil)).Elem()
}

func (i *Ingress) ToIngressOutput() IngressOutput {
	return i.ToIngressOutputWithContext(context.Background())
}

func (i *Ingress) ToIngressOutputWithContext(ctx context.Context) IngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressOutput)
}

// IngressArrayInput is an input type that accepts IngressArray and IngressArrayOutput values.
// You can construct a concrete instance of `IngressArrayInput` via:
//
//	IngressArray{ IngressArgs{...} }
type IngressArrayInput interface {
	pulumi.Input

	ToIngressArrayOutput() IngressArrayOutput
	ToIngressArrayOutputWithContext(context.Context) IngressArrayOutput
}

type IngressArray []IngressInput

func (IngressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ingress)(nil)).Elem()
}

func (i IngressArray) ToIngressArrayOutput() IngressArrayOutput {
	return i.ToIngressArrayOutputWithContext(context.Background())
}

func (i IngressArray) ToIngressArrayOutputWithContext(ctx context.Context) IngressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressArrayOutput)
}

// IngressMapInput is an input type that accepts IngressMap and IngressMapOutput values.
// You can construct a concrete instance of `IngressMapInput` via:
//
//	IngressMap{ "key": IngressArgs{...} }
type IngressMapInput interface {
	pulumi.Input

	ToIngressMapOutput() IngressMapOutput
	ToIngressMapOutputWithContext(context.Context) IngressMapOutput
}

type IngressMap map[string]IngressInput

func (IngressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ingress)(nil)).Elem()
}

func (i IngressMap) ToIngressMapOutput() IngressMapOutput {
	return i.ToIngressMapOutputWithContext(context.Background())
}

func (i IngressMap) ToIngressMapOutputWithContext(ctx context.Context) IngressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressMapOutput)
}

type IngressOutput struct{ *pulumi.OutputState }

func (IngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ingress)(nil)).Elem()
}

func (o IngressOutput) ToIngressOutput() IngressOutput {
	return o
}

func (o IngressOutput) ToIngressOutputWithContext(ctx context.Context) IngressOutput {
	return o
}

// ACL actions. The structure of `action` block is documented below.
func (o IngressOutput) Action() IngressActionOutput {
	return o.ApplyT(func(v *Ingress) IngressActionOutput { return v.Action }).(IngressActionOutput)
}

// ACL classifiers. The structure of `classifier` block is documented below.
func (o IngressOutput) Classifier() IngressClassifierOutput {
	return o.ApplyT(func(v *Ingress) IngressClassifierOutput { return v.Classifier }).(IngressClassifierOutput)
}

// Description for the ACL policy.
func (o IngressOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Ingress) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// ACL ID.
func (o IngressOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *Ingress) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o IngressOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ingress) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o IngressOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ingress) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type IngressArrayOutput struct{ *pulumi.OutputState }

func (IngressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ingress)(nil)).Elem()
}

func (o IngressArrayOutput) ToIngressArrayOutput() IngressArrayOutput {
	return o
}

func (o IngressArrayOutput) ToIngressArrayOutputWithContext(ctx context.Context) IngressArrayOutput {
	return o
}

func (o IngressArrayOutput) Index(i pulumi.IntInput) IngressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ingress {
		return vs[0].([]*Ingress)[vs[1].(int)]
	}).(IngressOutput)
}

type IngressMapOutput struct{ *pulumi.OutputState }

func (IngressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ingress)(nil)).Elem()
}

func (o IngressMapOutput) ToIngressMapOutput() IngressMapOutput {
	return o
}

func (o IngressMapOutput) ToIngressMapOutputWithContext(ctx context.Context) IngressMapOutput {
	return o
}

func (o IngressMapOutput) MapIndex(k pulumi.StringInput) IngressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ingress {
		return vs[0].(map[string]*Ingress)[vs[1].(string)]
	}).(IngressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IngressInput)(nil)).Elem(), &Ingress{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressArrayInput)(nil)).Elem(), IngressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressMapInput)(nil)).Elem(), IngressMap{})
	pulumi.RegisterOutputType(IngressOutput{})
	pulumi.RegisterOutputType(IngressArrayOutput{})
	pulumi.RegisterOutputType(IngressMapOutput{})
}
