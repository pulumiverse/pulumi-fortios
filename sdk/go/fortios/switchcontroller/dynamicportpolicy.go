// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package switchcontroller

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure Dynamic port policy to be applied on the managed FortiSwitch ports through DPP device. Applies to FortiOS Version `>= 7.0.1`.
//
// ## Import
//
// SwitchController DynamicPortPolicy can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:switchcontroller/dynamicportpolicy:Dynamicportpolicy labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:switchcontroller/dynamicportpolicy:Dynamicportpolicy labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Dynamicportpolicy struct {
	pulumi.CustomResourceState

	// Description for the Dynamic port policy.
	Description pulumi.StringOutput `pulumi:"description"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// FortiLink interface for which this Dynamic port policy belongs to.
	Fortilink pulumi.StringOutput `pulumi:"fortilink"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Dynamic port policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Port policies with matching criteria and actions. The structure of `policy` block is documented below.
	Policies DynamicportpolicyPolicyArrayOutput `pulumi:"policies"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewDynamicportpolicy registers a new resource with the given unique name, arguments, and options.
func NewDynamicportpolicy(ctx *pulumi.Context,
	name string, args *DynamicportpolicyArgs, opts ...pulumi.ResourceOption) (*Dynamicportpolicy, error) {
	if args == nil {
		args = &DynamicportpolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dynamicportpolicy
	err := ctx.RegisterResource("fortios:switchcontroller/dynamicportpolicy:Dynamicportpolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDynamicportpolicy gets an existing Dynamicportpolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDynamicportpolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DynamicportpolicyState, opts ...pulumi.ResourceOption) (*Dynamicportpolicy, error) {
	var resource Dynamicportpolicy
	err := ctx.ReadResource("fortios:switchcontroller/dynamicportpolicy:Dynamicportpolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dynamicportpolicy resources.
type dynamicportpolicyState struct {
	// Description for the Dynamic port policy.
	Description *string `pulumi:"description"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// FortiLink interface for which this Dynamic port policy belongs to.
	Fortilink *string `pulumi:"fortilink"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Dynamic port policy name.
	Name *string `pulumi:"name"`
	// Port policies with matching criteria and actions. The structure of `policy` block is documented below.
	Policies []DynamicportpolicyPolicy `pulumi:"policies"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type DynamicportpolicyState struct {
	// Description for the Dynamic port policy.
	Description pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// FortiLink interface for which this Dynamic port policy belongs to.
	Fortilink pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Dynamic port policy name.
	Name pulumi.StringPtrInput
	// Port policies with matching criteria and actions. The structure of `policy` block is documented below.
	Policies DynamicportpolicyPolicyArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (DynamicportpolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamicportpolicyState)(nil)).Elem()
}

type dynamicportpolicyArgs struct {
	// Description for the Dynamic port policy.
	Description *string `pulumi:"description"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// FortiLink interface for which this Dynamic port policy belongs to.
	Fortilink *string `pulumi:"fortilink"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Dynamic port policy name.
	Name *string `pulumi:"name"`
	// Port policies with matching criteria and actions. The structure of `policy` block is documented below.
	Policies []DynamicportpolicyPolicy `pulumi:"policies"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Dynamicportpolicy resource.
type DynamicportpolicyArgs struct {
	// Description for the Dynamic port policy.
	Description pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// FortiLink interface for which this Dynamic port policy belongs to.
	Fortilink pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Dynamic port policy name.
	Name pulumi.StringPtrInput
	// Port policies with matching criteria and actions. The structure of `policy` block is documented below.
	Policies DynamicportpolicyPolicyArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (DynamicportpolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamicportpolicyArgs)(nil)).Elem()
}

type DynamicportpolicyInput interface {
	pulumi.Input

	ToDynamicportpolicyOutput() DynamicportpolicyOutput
	ToDynamicportpolicyOutputWithContext(ctx context.Context) DynamicportpolicyOutput
}

func (*Dynamicportpolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**Dynamicportpolicy)(nil)).Elem()
}

func (i *Dynamicportpolicy) ToDynamicportpolicyOutput() DynamicportpolicyOutput {
	return i.ToDynamicportpolicyOutputWithContext(context.Background())
}

func (i *Dynamicportpolicy) ToDynamicportpolicyOutputWithContext(ctx context.Context) DynamicportpolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicportpolicyOutput)
}

// DynamicportpolicyArrayInput is an input type that accepts DynamicportpolicyArray and DynamicportpolicyArrayOutput values.
// You can construct a concrete instance of `DynamicportpolicyArrayInput` via:
//
//	DynamicportpolicyArray{ DynamicportpolicyArgs{...} }
type DynamicportpolicyArrayInput interface {
	pulumi.Input

	ToDynamicportpolicyArrayOutput() DynamicportpolicyArrayOutput
	ToDynamicportpolicyArrayOutputWithContext(context.Context) DynamicportpolicyArrayOutput
}

type DynamicportpolicyArray []DynamicportpolicyInput

func (DynamicportpolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dynamicportpolicy)(nil)).Elem()
}

func (i DynamicportpolicyArray) ToDynamicportpolicyArrayOutput() DynamicportpolicyArrayOutput {
	return i.ToDynamicportpolicyArrayOutputWithContext(context.Background())
}

func (i DynamicportpolicyArray) ToDynamicportpolicyArrayOutputWithContext(ctx context.Context) DynamicportpolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicportpolicyArrayOutput)
}

// DynamicportpolicyMapInput is an input type that accepts DynamicportpolicyMap and DynamicportpolicyMapOutput values.
// You can construct a concrete instance of `DynamicportpolicyMapInput` via:
//
//	DynamicportpolicyMap{ "key": DynamicportpolicyArgs{...} }
type DynamicportpolicyMapInput interface {
	pulumi.Input

	ToDynamicportpolicyMapOutput() DynamicportpolicyMapOutput
	ToDynamicportpolicyMapOutputWithContext(context.Context) DynamicportpolicyMapOutput
}

type DynamicportpolicyMap map[string]DynamicportpolicyInput

func (DynamicportpolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dynamicportpolicy)(nil)).Elem()
}

func (i DynamicportpolicyMap) ToDynamicportpolicyMapOutput() DynamicportpolicyMapOutput {
	return i.ToDynamicportpolicyMapOutputWithContext(context.Background())
}

func (i DynamicportpolicyMap) ToDynamicportpolicyMapOutputWithContext(ctx context.Context) DynamicportpolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicportpolicyMapOutput)
}

type DynamicportpolicyOutput struct{ *pulumi.OutputState }

func (DynamicportpolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dynamicportpolicy)(nil)).Elem()
}

func (o DynamicportpolicyOutput) ToDynamicportpolicyOutput() DynamicportpolicyOutput {
	return o
}

func (o DynamicportpolicyOutput) ToDynamicportpolicyOutputWithContext(ctx context.Context) DynamicportpolicyOutput {
	return o
}

// Description for the Dynamic port policy.
func (o DynamicportpolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Dynamicportpolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o DynamicportpolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dynamicportpolicy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// FortiLink interface for which this Dynamic port policy belongs to.
func (o DynamicportpolicyOutput) Fortilink() pulumi.StringOutput {
	return o.ApplyT(func(v *Dynamicportpolicy) pulumi.StringOutput { return v.Fortilink }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o DynamicportpolicyOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dynamicportpolicy) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Dynamic port policy name.
func (o DynamicportpolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dynamicportpolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Port policies with matching criteria and actions. The structure of `policy` block is documented below.
func (o DynamicportpolicyOutput) Policies() DynamicportpolicyPolicyArrayOutput {
	return o.ApplyT(func(v *Dynamicportpolicy) DynamicportpolicyPolicyArrayOutput { return v.Policies }).(DynamicportpolicyPolicyArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o DynamicportpolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dynamicportpolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type DynamicportpolicyArrayOutput struct{ *pulumi.OutputState }

func (DynamicportpolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dynamicportpolicy)(nil)).Elem()
}

func (o DynamicportpolicyArrayOutput) ToDynamicportpolicyArrayOutput() DynamicportpolicyArrayOutput {
	return o
}

func (o DynamicportpolicyArrayOutput) ToDynamicportpolicyArrayOutputWithContext(ctx context.Context) DynamicportpolicyArrayOutput {
	return o
}

func (o DynamicportpolicyArrayOutput) Index(i pulumi.IntInput) DynamicportpolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dynamicportpolicy {
		return vs[0].([]*Dynamicportpolicy)[vs[1].(int)]
	}).(DynamicportpolicyOutput)
}

type DynamicportpolicyMapOutput struct{ *pulumi.OutputState }

func (DynamicportpolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dynamicportpolicy)(nil)).Elem()
}

func (o DynamicportpolicyMapOutput) ToDynamicportpolicyMapOutput() DynamicportpolicyMapOutput {
	return o
}

func (o DynamicportpolicyMapOutput) ToDynamicportpolicyMapOutputWithContext(ctx context.Context) DynamicportpolicyMapOutput {
	return o
}

func (o DynamicportpolicyMapOutput) MapIndex(k pulumi.StringInput) DynamicportpolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dynamicportpolicy {
		return vs[0].(map[string]*Dynamicportpolicy)[vs[1].(string)]
	}).(DynamicportpolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicportpolicyInput)(nil)).Elem(), &Dynamicportpolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicportpolicyArrayInput)(nil)).Elem(), DynamicportpolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicportpolicyMapInput)(nil)).Elem(), DynamicportpolicyMap{})
	pulumi.RegisterOutputType(DynamicportpolicyOutput{})
	pulumi.RegisterOutputType(DynamicportpolicyArrayOutput{})
	pulumi.RegisterOutputType(DynamicportpolicyMapOutput{})
}
