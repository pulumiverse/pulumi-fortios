// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package switchcontroller

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure FortiSwitch devices that are managed by this FortiGate.
//
// ## Import
//
// SwitchController ManagedSwitch can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:switchcontroller/managedswitch:Managedswitch labelname {{switch_id}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:switchcontroller/managedswitch:Managedswitch labelname {{switch_id}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Managedswitch struct {
	pulumi.CustomResourceState

	// FortiSwitch access profile.
	AccessProfile pulumi.StringOutput `pulumi:"accessProfile"`
	// Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `customCommand` block is documented below.
	CustomCommands ManagedswitchCustomCommandArrayOutput `pulumi:"customCommands"`
	// Delayed restart triggered for this FortiSwitch.
	DelayedRestartTrigger pulumi.IntOutput `pulumi:"delayedRestartTrigger"`
	// Description.
	Description pulumi.StringOutput `pulumi:"description"`
	// DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
	DhcpServerAccessList pulumi.StringOutput `pulumi:"dhcpServerAccessList"`
	// Configure FortiSwitch DHCP snooping static clients. The structure of `dhcpSnoopingStaticClient` block is documented below.
	DhcpSnoopingStaticClients ManagedswitchDhcpSnoopingStaticClientArrayOutput `pulumi:"dhcpSnoopingStaticClients"`
	// Directly connected FortiSwitch.
	DirectlyConnected pulumi.IntOutput `pulumi:"directlyConnected"`
	// List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
	DynamicCapability pulumi.IntOutput `pulumi:"dynamicCapability"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Dynamically discovered FortiSwitch.
	DynamicallyDiscovered pulumi.IntOutput `pulumi:"dynamicallyDiscovered"`
	// Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
	FirmwareProvision pulumi.StringOutput `pulumi:"firmwareProvision"`
	// Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
	FirmwareProvisionLatest pulumi.StringOutput `pulumi:"firmwareProvisionLatest"`
	// Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
	FirmwareProvisionVersion pulumi.StringOutput `pulumi:"firmwareProvisionVersion"`
	// Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
	FlowIdentity pulumi.StringOutput `pulumi:"flowIdentity"`
	// FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan1Admin pulumi.StringOutput `pulumi:"fswWan1Admin"`
	// Fortiswitch WAN1 peer port.
	FswWan1Peer pulumi.StringOutput `pulumi:"fswWan1Peer"`
	// FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan2Admin pulumi.StringOutput `pulumi:"fswWan2Admin"`
	// FortiSwitch WAN2 peer port.
	FswWan2Peer pulumi.StringOutput `pulumi:"fswWan2Peer"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Configure FortiSwitch IGMP snooping global settings. The structure of `igmpSnooping` block is documented below.
	IgmpSnooping ManagedswitchIgmpSnoopingOutput `pulumi:"igmpSnooping"`
	// IP source guard. The structure of `ipSourceGuard` block is documented below.
	IpSourceGuards ManagedswitchIpSourceGuardArrayOutput `pulumi:"ipSourceGuards"`
	// Layer 3 management discovered.
	L3Discovered pulumi.IntOutput `pulumi:"l3Discovered"`
	// FortiSwitch maximum allowed trunk members.
	MaxAllowedTrunkMembers pulumi.IntOutput `pulumi:"maxAllowedTrunkMembers"`
	// Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
	MclagIgmpSnoopingAware pulumi.StringOutput `pulumi:"mclagIgmpSnoopingAware"`
	// FortiLink management mode.
	MgmtMode pulumi.IntOutput `pulumi:"mgmtMode"`
	// Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
	Mirrors ManagedswitchMirrorArrayOutput `pulumi:"mirrors"`
	// Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n8021xSettings` block is documented below.
	N8021xSettings ManagedswitchN8021xSettingsOutput `pulumi:"n8021xSettings"`
	// Managed-switch name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
	OverrideSnmpCommunity pulumi.StringOutput `pulumi:"overrideSnmpCommunity"`
	// Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
	OverrideSnmpSysinfo pulumi.StringOutput `pulumi:"overrideSnmpSysinfo"`
	// Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
	OverrideSnmpTrapThreshold pulumi.StringOutput `pulumi:"overrideSnmpTrapThreshold"`
	// Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
	OverrideSnmpUser pulumi.StringOutput `pulumi:"overrideSnmpUser"`
	// VDOM which owner of port belongs to.
	OwnerVdom pulumi.StringOutput `pulumi:"ownerVdom"`
	// PoE detection type for FortiSwitch.
	PoeDetectionType pulumi.IntOutput `pulumi:"poeDetectionType"`
	// Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
	PoeLldpDetection pulumi.StringOutput `pulumi:"poeLldpDetection"`
	// Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
	PoePreStandardDetection pulumi.StringOutput `pulumi:"poePreStandardDetection"`
	// Managed-switch port list. The structure of `ports` block is documented below.
	Ports ManagedswitchPortArrayOutput `pulumi:"ports"`
	// Pre-provisioned managed switch.
	PreProvisioned pulumi.IntOutput `pulumi:"preProvisioned"`
	// PTP profile configuration.
	PtpProfile pulumi.StringOutput `pulumi:"ptpProfile"`
	// Enable/disable PTP profile on this FortiSwitch. Valid values: `disable`, `enable`.
	PtpStatus pulumi.StringOutput `pulumi:"ptpStatus"`
	// Purdue Level of this FortiSwitch. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
	PurdueLevel pulumi.StringOutput `pulumi:"purdueLevel"`
	// Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
	QosDropPolicy pulumi.StringOutput `pulumi:"qosDropPolicy"`
	// Set QoS RED/WRED drop probability.
	QosRedProbability pulumi.IntOutput `pulumi:"qosRedProbability"`
	// NAS-IP address.
	RadiusNasIp pulumi.StringOutput `pulumi:"radiusNasIp"`
	// Use locally defined NAS-IP. Valid values: `disable`, `enable`.
	RadiusNasIpOverride pulumi.StringOutput `pulumi:"radiusNasIpOverride"`
	// Configure logging by FortiSwitch device to a remote syslog server. The structure of `remoteLog` block is documented below.
	RemoteLogs ManagedswitchRemoteLogArrayOutput `pulumi:"remoteLogs"`
	// Enable/disable route offload on this FortiSwitch. Valid values: `disable`, `enable`.
	RouteOffload pulumi.StringOutput `pulumi:"routeOffload"`
	// Enable/disable route offload MCLAG on this FortiSwitch. Valid values: `disable`, `enable`.
	RouteOffloadMclag pulumi.StringOutput `pulumi:"routeOffloadMclag"`
	// Configure route offload MCLAG IP address. The structure of `routeOffloadRouter` block is documented below.
	RouteOffloadRouters ManagedswitchRouteOffloadRouterArrayOutput `pulumi:"routeOffloadRouters"`
	// Managed-switch serial number.
	Sn pulumi.StringOutput `pulumi:"sn"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmpCommunity` block is documented below.
	SnmpCommunities ManagedswitchSnmpCommunityArrayOutput `pulumi:"snmpCommunities"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmpSysinfo` block is documented below.
	SnmpSysinfo ManagedswitchSnmpSysinfoOutput `pulumi:"snmpSysinfo"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmpTrapThreshold` block is documented below.
	SnmpTrapThreshold ManagedswitchSnmpTrapThresholdOutput `pulumi:"snmpTrapThreshold"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmpUser` block is documented below.
	SnmpUsers ManagedswitchSnmpUserArrayOutput `pulumi:"snmpUsers"`
	// Staged image version for FortiSwitch.
	StagedImageVersion pulumi.StringOutput `pulumi:"stagedImageVersion"`
	// Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `staticMac` block is documented below.
	StaticMacs ManagedswitchStaticMacArrayOutput `pulumi:"staticMacs"`
	// Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `stormControl` block is documented below.
	StormControl ManagedswitchStormControlOutput `pulumi:"stormControl"`
	// Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stpInstance` block is documented below.
	StpInstances ManagedswitchStpInstanceArrayOutput `pulumi:"stpInstances"`
	// Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stpSettings` block is documented below.
	StpSettings ManagedswitchStpSettingsOutput `pulumi:"stpSettings"`
	// User definable label/tag.
	SwitchDeviceTag pulumi.StringOutput `pulumi:"switchDeviceTag"`
	// DHCP option43 key.
	SwitchDhcpOpt43Key pulumi.StringOutput `pulumi:"switchDhcpOpt43Key"`
	// Managed-switch id.
	SwitchId pulumi.StringOutput `pulumi:"switchId"`
	// Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switchLog` block is documented below.
	SwitchLog ManagedswitchSwitchLogOutput `pulumi:"switchLog"`
	// FortiSwitch profile.
	SwitchProfile pulumi.StringOutput `pulumi:"switchProfile"`
	// Configure spanning tree protocol (STP). The structure of `switchStpSettings` block is documented below.
	SwitchStpSettings ManagedswitchSwitchStpSettingsOutput `pulumi:"switchStpSettings"`
	// TDR supported.
	TdrSupported pulumi.StringOutput `pulumi:"tdrSupported"`
	// SOCKS tunnel management discovered.
	TunnelDiscovered pulumi.IntOutput `pulumi:"tunnelDiscovered"`
	// Indication of switch type, physical or virtual. Valid values: `virtual`, `physical`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// FortiSwitch version.
	Version pulumi.IntOutput `pulumi:"version"`
	// Configure VLAN assignment priority. The structure of `vlan` block is documented below.
	Vlans ManagedswitchVlanArrayOutput `pulumi:"vlans"`
}

// NewManagedswitch registers a new resource with the given unique name, arguments, and options.
func NewManagedswitch(ctx *pulumi.Context,
	name string, args *ManagedswitchArgs, opts ...pulumi.ResourceOption) (*Managedswitch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FswWan1Peer == nil {
		return nil, errors.New("invalid value for required argument 'FswWan1Peer'")
	}
	if args.SwitchId == nil {
		return nil, errors.New("invalid value for required argument 'SwitchId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Managedswitch
	err := ctx.RegisterResource("fortios:switchcontroller/managedswitch:Managedswitch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedswitch gets an existing Managedswitch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedswitch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedswitchState, opts ...pulumi.ResourceOption) (*Managedswitch, error) {
	var resource Managedswitch
	err := ctx.ReadResource("fortios:switchcontroller/managedswitch:Managedswitch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Managedswitch resources.
type managedswitchState struct {
	// FortiSwitch access profile.
	AccessProfile *string `pulumi:"accessProfile"`
	// Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `customCommand` block is documented below.
	CustomCommands []ManagedswitchCustomCommand `pulumi:"customCommands"`
	// Delayed restart triggered for this FortiSwitch.
	DelayedRestartTrigger *int `pulumi:"delayedRestartTrigger"`
	// Description.
	Description *string `pulumi:"description"`
	// DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
	DhcpServerAccessList *string `pulumi:"dhcpServerAccessList"`
	// Configure FortiSwitch DHCP snooping static clients. The structure of `dhcpSnoopingStaticClient` block is documented below.
	DhcpSnoopingStaticClients []ManagedswitchDhcpSnoopingStaticClient `pulumi:"dhcpSnoopingStaticClients"`
	// Directly connected FortiSwitch.
	DirectlyConnected *int `pulumi:"directlyConnected"`
	// List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
	DynamicCapability *int `pulumi:"dynamicCapability"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Dynamically discovered FortiSwitch.
	DynamicallyDiscovered *int `pulumi:"dynamicallyDiscovered"`
	// Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
	FirmwareProvision *string `pulumi:"firmwareProvision"`
	// Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
	FirmwareProvisionLatest *string `pulumi:"firmwareProvisionLatest"`
	// Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
	FirmwareProvisionVersion *string `pulumi:"firmwareProvisionVersion"`
	// Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
	FlowIdentity *string `pulumi:"flowIdentity"`
	// FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan1Admin *string `pulumi:"fswWan1Admin"`
	// Fortiswitch WAN1 peer port.
	FswWan1Peer *string `pulumi:"fswWan1Peer"`
	// FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan2Admin *string `pulumi:"fswWan2Admin"`
	// FortiSwitch WAN2 peer port.
	FswWan2Peer *string `pulumi:"fswWan2Peer"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Configure FortiSwitch IGMP snooping global settings. The structure of `igmpSnooping` block is documented below.
	IgmpSnooping *ManagedswitchIgmpSnooping `pulumi:"igmpSnooping"`
	// IP source guard. The structure of `ipSourceGuard` block is documented below.
	IpSourceGuards []ManagedswitchIpSourceGuard `pulumi:"ipSourceGuards"`
	// Layer 3 management discovered.
	L3Discovered *int `pulumi:"l3Discovered"`
	// FortiSwitch maximum allowed trunk members.
	MaxAllowedTrunkMembers *int `pulumi:"maxAllowedTrunkMembers"`
	// Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
	MclagIgmpSnoopingAware *string `pulumi:"mclagIgmpSnoopingAware"`
	// FortiLink management mode.
	MgmtMode *int `pulumi:"mgmtMode"`
	// Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
	Mirrors []ManagedswitchMirror `pulumi:"mirrors"`
	// Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n8021xSettings` block is documented below.
	N8021xSettings *ManagedswitchN8021xSettings `pulumi:"n8021xSettings"`
	// Managed-switch name.
	Name *string `pulumi:"name"`
	// Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
	OverrideSnmpCommunity *string `pulumi:"overrideSnmpCommunity"`
	// Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
	OverrideSnmpSysinfo *string `pulumi:"overrideSnmpSysinfo"`
	// Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
	OverrideSnmpTrapThreshold *string `pulumi:"overrideSnmpTrapThreshold"`
	// Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
	OverrideSnmpUser *string `pulumi:"overrideSnmpUser"`
	// VDOM which owner of port belongs to.
	OwnerVdom *string `pulumi:"ownerVdom"`
	// PoE detection type for FortiSwitch.
	PoeDetectionType *int `pulumi:"poeDetectionType"`
	// Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
	PoeLldpDetection *string `pulumi:"poeLldpDetection"`
	// Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
	PoePreStandardDetection *string `pulumi:"poePreStandardDetection"`
	// Managed-switch port list. The structure of `ports` block is documented below.
	Ports []ManagedswitchPort `pulumi:"ports"`
	// Pre-provisioned managed switch.
	PreProvisioned *int `pulumi:"preProvisioned"`
	// PTP profile configuration.
	PtpProfile *string `pulumi:"ptpProfile"`
	// Enable/disable PTP profile on this FortiSwitch. Valid values: `disable`, `enable`.
	PtpStatus *string `pulumi:"ptpStatus"`
	// Purdue Level of this FortiSwitch. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
	PurdueLevel *string `pulumi:"purdueLevel"`
	// Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
	QosDropPolicy *string `pulumi:"qosDropPolicy"`
	// Set QoS RED/WRED drop probability.
	QosRedProbability *int `pulumi:"qosRedProbability"`
	// NAS-IP address.
	RadiusNasIp *string `pulumi:"radiusNasIp"`
	// Use locally defined NAS-IP. Valid values: `disable`, `enable`.
	RadiusNasIpOverride *string `pulumi:"radiusNasIpOverride"`
	// Configure logging by FortiSwitch device to a remote syslog server. The structure of `remoteLog` block is documented below.
	RemoteLogs []ManagedswitchRemoteLog `pulumi:"remoteLogs"`
	// Enable/disable route offload on this FortiSwitch. Valid values: `disable`, `enable`.
	RouteOffload *string `pulumi:"routeOffload"`
	// Enable/disable route offload MCLAG on this FortiSwitch. Valid values: `disable`, `enable`.
	RouteOffloadMclag *string `pulumi:"routeOffloadMclag"`
	// Configure route offload MCLAG IP address. The structure of `routeOffloadRouter` block is documented below.
	RouteOffloadRouters []ManagedswitchRouteOffloadRouter `pulumi:"routeOffloadRouters"`
	// Managed-switch serial number.
	Sn *string `pulumi:"sn"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmpCommunity` block is documented below.
	SnmpCommunities []ManagedswitchSnmpCommunity `pulumi:"snmpCommunities"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmpSysinfo` block is documented below.
	SnmpSysinfo *ManagedswitchSnmpSysinfo `pulumi:"snmpSysinfo"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmpTrapThreshold` block is documented below.
	SnmpTrapThreshold *ManagedswitchSnmpTrapThreshold `pulumi:"snmpTrapThreshold"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmpUser` block is documented below.
	SnmpUsers []ManagedswitchSnmpUser `pulumi:"snmpUsers"`
	// Staged image version for FortiSwitch.
	StagedImageVersion *string `pulumi:"stagedImageVersion"`
	// Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `staticMac` block is documented below.
	StaticMacs []ManagedswitchStaticMac `pulumi:"staticMacs"`
	// Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `stormControl` block is documented below.
	StormControl *ManagedswitchStormControl `pulumi:"stormControl"`
	// Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stpInstance` block is documented below.
	StpInstances []ManagedswitchStpInstance `pulumi:"stpInstances"`
	// Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stpSettings` block is documented below.
	StpSettings *ManagedswitchStpSettings `pulumi:"stpSettings"`
	// User definable label/tag.
	SwitchDeviceTag *string `pulumi:"switchDeviceTag"`
	// DHCP option43 key.
	SwitchDhcpOpt43Key *string `pulumi:"switchDhcpOpt43Key"`
	// Managed-switch id.
	SwitchId *string `pulumi:"switchId"`
	// Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switchLog` block is documented below.
	SwitchLog *ManagedswitchSwitchLog `pulumi:"switchLog"`
	// FortiSwitch profile.
	SwitchProfile *string `pulumi:"switchProfile"`
	// Configure spanning tree protocol (STP). The structure of `switchStpSettings` block is documented below.
	SwitchStpSettings *ManagedswitchSwitchStpSettings `pulumi:"switchStpSettings"`
	// TDR supported.
	TdrSupported *string `pulumi:"tdrSupported"`
	// SOCKS tunnel management discovered.
	TunnelDiscovered *int `pulumi:"tunnelDiscovered"`
	// Indication of switch type, physical or virtual. Valid values: `virtual`, `physical`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// FortiSwitch version.
	Version *int `pulumi:"version"`
	// Configure VLAN assignment priority. The structure of `vlan` block is documented below.
	Vlans []ManagedswitchVlan `pulumi:"vlans"`
}

type ManagedswitchState struct {
	// FortiSwitch access profile.
	AccessProfile pulumi.StringPtrInput
	// Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `customCommand` block is documented below.
	CustomCommands ManagedswitchCustomCommandArrayInput
	// Delayed restart triggered for this FortiSwitch.
	DelayedRestartTrigger pulumi.IntPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
	DhcpServerAccessList pulumi.StringPtrInput
	// Configure FortiSwitch DHCP snooping static clients. The structure of `dhcpSnoopingStaticClient` block is documented below.
	DhcpSnoopingStaticClients ManagedswitchDhcpSnoopingStaticClientArrayInput
	// Directly connected FortiSwitch.
	DirectlyConnected pulumi.IntPtrInput
	// List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
	DynamicCapability pulumi.IntPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Dynamically discovered FortiSwitch.
	DynamicallyDiscovered pulumi.IntPtrInput
	// Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
	FirmwareProvision pulumi.StringPtrInput
	// Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
	FirmwareProvisionLatest pulumi.StringPtrInput
	// Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
	FirmwareProvisionVersion pulumi.StringPtrInput
	// Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
	FlowIdentity pulumi.StringPtrInput
	// FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan1Admin pulumi.StringPtrInput
	// Fortiswitch WAN1 peer port.
	FswWan1Peer pulumi.StringPtrInput
	// FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan2Admin pulumi.StringPtrInput
	// FortiSwitch WAN2 peer port.
	FswWan2Peer pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Configure FortiSwitch IGMP snooping global settings. The structure of `igmpSnooping` block is documented below.
	IgmpSnooping ManagedswitchIgmpSnoopingPtrInput
	// IP source guard. The structure of `ipSourceGuard` block is documented below.
	IpSourceGuards ManagedswitchIpSourceGuardArrayInput
	// Layer 3 management discovered.
	L3Discovered pulumi.IntPtrInput
	// FortiSwitch maximum allowed trunk members.
	MaxAllowedTrunkMembers pulumi.IntPtrInput
	// Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
	MclagIgmpSnoopingAware pulumi.StringPtrInput
	// FortiLink management mode.
	MgmtMode pulumi.IntPtrInput
	// Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
	Mirrors ManagedswitchMirrorArrayInput
	// Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n8021xSettings` block is documented below.
	N8021xSettings ManagedswitchN8021xSettingsPtrInput
	// Managed-switch name.
	Name pulumi.StringPtrInput
	// Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
	OverrideSnmpCommunity pulumi.StringPtrInput
	// Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
	OverrideSnmpSysinfo pulumi.StringPtrInput
	// Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
	OverrideSnmpTrapThreshold pulumi.StringPtrInput
	// Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
	OverrideSnmpUser pulumi.StringPtrInput
	// VDOM which owner of port belongs to.
	OwnerVdom pulumi.StringPtrInput
	// PoE detection type for FortiSwitch.
	PoeDetectionType pulumi.IntPtrInput
	// Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
	PoeLldpDetection pulumi.StringPtrInput
	// Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
	PoePreStandardDetection pulumi.StringPtrInput
	// Managed-switch port list. The structure of `ports` block is documented below.
	Ports ManagedswitchPortArrayInput
	// Pre-provisioned managed switch.
	PreProvisioned pulumi.IntPtrInput
	// PTP profile configuration.
	PtpProfile pulumi.StringPtrInput
	// Enable/disable PTP profile on this FortiSwitch. Valid values: `disable`, `enable`.
	PtpStatus pulumi.StringPtrInput
	// Purdue Level of this FortiSwitch. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
	PurdueLevel pulumi.StringPtrInput
	// Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
	QosDropPolicy pulumi.StringPtrInput
	// Set QoS RED/WRED drop probability.
	QosRedProbability pulumi.IntPtrInput
	// NAS-IP address.
	RadiusNasIp pulumi.StringPtrInput
	// Use locally defined NAS-IP. Valid values: `disable`, `enable`.
	RadiusNasIpOverride pulumi.StringPtrInput
	// Configure logging by FortiSwitch device to a remote syslog server. The structure of `remoteLog` block is documented below.
	RemoteLogs ManagedswitchRemoteLogArrayInput
	// Enable/disable route offload on this FortiSwitch. Valid values: `disable`, `enable`.
	RouteOffload pulumi.StringPtrInput
	// Enable/disable route offload MCLAG on this FortiSwitch. Valid values: `disable`, `enable`.
	RouteOffloadMclag pulumi.StringPtrInput
	// Configure route offload MCLAG IP address. The structure of `routeOffloadRouter` block is documented below.
	RouteOffloadRouters ManagedswitchRouteOffloadRouterArrayInput
	// Managed-switch serial number.
	Sn pulumi.StringPtrInput
	// Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmpCommunity` block is documented below.
	SnmpCommunities ManagedswitchSnmpCommunityArrayInput
	// Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmpSysinfo` block is documented below.
	SnmpSysinfo ManagedswitchSnmpSysinfoPtrInput
	// Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmpTrapThreshold` block is documented below.
	SnmpTrapThreshold ManagedswitchSnmpTrapThresholdPtrInput
	// Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmpUser` block is documented below.
	SnmpUsers ManagedswitchSnmpUserArrayInput
	// Staged image version for FortiSwitch.
	StagedImageVersion pulumi.StringPtrInput
	// Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `staticMac` block is documented below.
	StaticMacs ManagedswitchStaticMacArrayInput
	// Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `stormControl` block is documented below.
	StormControl ManagedswitchStormControlPtrInput
	// Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stpInstance` block is documented below.
	StpInstances ManagedswitchStpInstanceArrayInput
	// Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stpSettings` block is documented below.
	StpSettings ManagedswitchStpSettingsPtrInput
	// User definable label/tag.
	SwitchDeviceTag pulumi.StringPtrInput
	// DHCP option43 key.
	SwitchDhcpOpt43Key pulumi.StringPtrInput
	// Managed-switch id.
	SwitchId pulumi.StringPtrInput
	// Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switchLog` block is documented below.
	SwitchLog ManagedswitchSwitchLogPtrInput
	// FortiSwitch profile.
	SwitchProfile pulumi.StringPtrInput
	// Configure spanning tree protocol (STP). The structure of `switchStpSettings` block is documented below.
	SwitchStpSettings ManagedswitchSwitchStpSettingsPtrInput
	// TDR supported.
	TdrSupported pulumi.StringPtrInput
	// SOCKS tunnel management discovered.
	TunnelDiscovered pulumi.IntPtrInput
	// Indication of switch type, physical or virtual. Valid values: `virtual`, `physical`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// FortiSwitch version.
	Version pulumi.IntPtrInput
	// Configure VLAN assignment priority. The structure of `vlan` block is documented below.
	Vlans ManagedswitchVlanArrayInput
}

func (ManagedswitchState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedswitchState)(nil)).Elem()
}

type managedswitchArgs struct {
	// FortiSwitch access profile.
	AccessProfile *string `pulumi:"accessProfile"`
	// Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `customCommand` block is documented below.
	CustomCommands []ManagedswitchCustomCommand `pulumi:"customCommands"`
	// Delayed restart triggered for this FortiSwitch.
	DelayedRestartTrigger *int `pulumi:"delayedRestartTrigger"`
	// Description.
	Description *string `pulumi:"description"`
	// DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
	DhcpServerAccessList *string `pulumi:"dhcpServerAccessList"`
	// Configure FortiSwitch DHCP snooping static clients. The structure of `dhcpSnoopingStaticClient` block is documented below.
	DhcpSnoopingStaticClients []ManagedswitchDhcpSnoopingStaticClient `pulumi:"dhcpSnoopingStaticClients"`
	// Directly connected FortiSwitch.
	DirectlyConnected *int `pulumi:"directlyConnected"`
	// List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
	DynamicCapability *int `pulumi:"dynamicCapability"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Dynamically discovered FortiSwitch.
	DynamicallyDiscovered *int `pulumi:"dynamicallyDiscovered"`
	// Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
	FirmwareProvision *string `pulumi:"firmwareProvision"`
	// Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
	FirmwareProvisionLatest *string `pulumi:"firmwareProvisionLatest"`
	// Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
	FirmwareProvisionVersion *string `pulumi:"firmwareProvisionVersion"`
	// Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
	FlowIdentity *string `pulumi:"flowIdentity"`
	// FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan1Admin *string `pulumi:"fswWan1Admin"`
	// Fortiswitch WAN1 peer port.
	FswWan1Peer string `pulumi:"fswWan1Peer"`
	// FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan2Admin *string `pulumi:"fswWan2Admin"`
	// FortiSwitch WAN2 peer port.
	FswWan2Peer *string `pulumi:"fswWan2Peer"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Configure FortiSwitch IGMP snooping global settings. The structure of `igmpSnooping` block is documented below.
	IgmpSnooping *ManagedswitchIgmpSnooping `pulumi:"igmpSnooping"`
	// IP source guard. The structure of `ipSourceGuard` block is documented below.
	IpSourceGuards []ManagedswitchIpSourceGuard `pulumi:"ipSourceGuards"`
	// Layer 3 management discovered.
	L3Discovered *int `pulumi:"l3Discovered"`
	// FortiSwitch maximum allowed trunk members.
	MaxAllowedTrunkMembers *int `pulumi:"maxAllowedTrunkMembers"`
	// Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
	MclagIgmpSnoopingAware *string `pulumi:"mclagIgmpSnoopingAware"`
	// FortiLink management mode.
	MgmtMode *int `pulumi:"mgmtMode"`
	// Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
	Mirrors []ManagedswitchMirror `pulumi:"mirrors"`
	// Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n8021xSettings` block is documented below.
	N8021xSettings *ManagedswitchN8021xSettings `pulumi:"n8021xSettings"`
	// Managed-switch name.
	Name *string `pulumi:"name"`
	// Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
	OverrideSnmpCommunity *string `pulumi:"overrideSnmpCommunity"`
	// Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
	OverrideSnmpSysinfo *string `pulumi:"overrideSnmpSysinfo"`
	// Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
	OverrideSnmpTrapThreshold *string `pulumi:"overrideSnmpTrapThreshold"`
	// Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
	OverrideSnmpUser *string `pulumi:"overrideSnmpUser"`
	// VDOM which owner of port belongs to.
	OwnerVdom *string `pulumi:"ownerVdom"`
	// PoE detection type for FortiSwitch.
	PoeDetectionType *int `pulumi:"poeDetectionType"`
	// Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
	PoeLldpDetection *string `pulumi:"poeLldpDetection"`
	// Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
	PoePreStandardDetection *string `pulumi:"poePreStandardDetection"`
	// Managed-switch port list. The structure of `ports` block is documented below.
	Ports []ManagedswitchPort `pulumi:"ports"`
	// Pre-provisioned managed switch.
	PreProvisioned *int `pulumi:"preProvisioned"`
	// PTP profile configuration.
	PtpProfile *string `pulumi:"ptpProfile"`
	// Enable/disable PTP profile on this FortiSwitch. Valid values: `disable`, `enable`.
	PtpStatus *string `pulumi:"ptpStatus"`
	// Purdue Level of this FortiSwitch. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
	PurdueLevel *string `pulumi:"purdueLevel"`
	// Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
	QosDropPolicy *string `pulumi:"qosDropPolicy"`
	// Set QoS RED/WRED drop probability.
	QosRedProbability *int `pulumi:"qosRedProbability"`
	// NAS-IP address.
	RadiusNasIp *string `pulumi:"radiusNasIp"`
	// Use locally defined NAS-IP. Valid values: `disable`, `enable`.
	RadiusNasIpOverride *string `pulumi:"radiusNasIpOverride"`
	// Configure logging by FortiSwitch device to a remote syslog server. The structure of `remoteLog` block is documented below.
	RemoteLogs []ManagedswitchRemoteLog `pulumi:"remoteLogs"`
	// Enable/disable route offload on this FortiSwitch. Valid values: `disable`, `enable`.
	RouteOffload *string `pulumi:"routeOffload"`
	// Enable/disable route offload MCLAG on this FortiSwitch. Valid values: `disable`, `enable`.
	RouteOffloadMclag *string `pulumi:"routeOffloadMclag"`
	// Configure route offload MCLAG IP address. The structure of `routeOffloadRouter` block is documented below.
	RouteOffloadRouters []ManagedswitchRouteOffloadRouter `pulumi:"routeOffloadRouters"`
	// Managed-switch serial number.
	Sn *string `pulumi:"sn"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmpCommunity` block is documented below.
	SnmpCommunities []ManagedswitchSnmpCommunity `pulumi:"snmpCommunities"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmpSysinfo` block is documented below.
	SnmpSysinfo *ManagedswitchSnmpSysinfo `pulumi:"snmpSysinfo"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmpTrapThreshold` block is documented below.
	SnmpTrapThreshold *ManagedswitchSnmpTrapThreshold `pulumi:"snmpTrapThreshold"`
	// Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmpUser` block is documented below.
	SnmpUsers []ManagedswitchSnmpUser `pulumi:"snmpUsers"`
	// Staged image version for FortiSwitch.
	StagedImageVersion *string `pulumi:"stagedImageVersion"`
	// Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `staticMac` block is documented below.
	StaticMacs []ManagedswitchStaticMac `pulumi:"staticMacs"`
	// Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `stormControl` block is documented below.
	StormControl *ManagedswitchStormControl `pulumi:"stormControl"`
	// Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stpInstance` block is documented below.
	StpInstances []ManagedswitchStpInstance `pulumi:"stpInstances"`
	// Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stpSettings` block is documented below.
	StpSettings *ManagedswitchStpSettings `pulumi:"stpSettings"`
	// User definable label/tag.
	SwitchDeviceTag *string `pulumi:"switchDeviceTag"`
	// DHCP option43 key.
	SwitchDhcpOpt43Key *string `pulumi:"switchDhcpOpt43Key"`
	// Managed-switch id.
	SwitchId string `pulumi:"switchId"`
	// Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switchLog` block is documented below.
	SwitchLog *ManagedswitchSwitchLog `pulumi:"switchLog"`
	// FortiSwitch profile.
	SwitchProfile *string `pulumi:"switchProfile"`
	// Configure spanning tree protocol (STP). The structure of `switchStpSettings` block is documented below.
	SwitchStpSettings *ManagedswitchSwitchStpSettings `pulumi:"switchStpSettings"`
	// TDR supported.
	TdrSupported *string `pulumi:"tdrSupported"`
	// SOCKS tunnel management discovered.
	TunnelDiscovered *int `pulumi:"tunnelDiscovered"`
	// Indication of switch type, physical or virtual. Valid values: `virtual`, `physical`.
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// FortiSwitch version.
	Version *int `pulumi:"version"`
	// Configure VLAN assignment priority. The structure of `vlan` block is documented below.
	Vlans []ManagedswitchVlan `pulumi:"vlans"`
}

// The set of arguments for constructing a Managedswitch resource.
type ManagedswitchArgs struct {
	// FortiSwitch access profile.
	AccessProfile pulumi.StringPtrInput
	// Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `customCommand` block is documented below.
	CustomCommands ManagedswitchCustomCommandArrayInput
	// Delayed restart triggered for this FortiSwitch.
	DelayedRestartTrigger pulumi.IntPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
	DhcpServerAccessList pulumi.StringPtrInput
	// Configure FortiSwitch DHCP snooping static clients. The structure of `dhcpSnoopingStaticClient` block is documented below.
	DhcpSnoopingStaticClients ManagedswitchDhcpSnoopingStaticClientArrayInput
	// Directly connected FortiSwitch.
	DirectlyConnected pulumi.IntPtrInput
	// List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
	DynamicCapability pulumi.IntPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Dynamically discovered FortiSwitch.
	DynamicallyDiscovered pulumi.IntPtrInput
	// Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
	FirmwareProvision pulumi.StringPtrInput
	// Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
	FirmwareProvisionLatest pulumi.StringPtrInput
	// Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
	FirmwareProvisionVersion pulumi.StringPtrInput
	// Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
	FlowIdentity pulumi.StringPtrInput
	// FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan1Admin pulumi.StringPtrInput
	// Fortiswitch WAN1 peer port.
	FswWan1Peer pulumi.StringInput
	// FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
	FswWan2Admin pulumi.StringPtrInput
	// FortiSwitch WAN2 peer port.
	FswWan2Peer pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Configure FortiSwitch IGMP snooping global settings. The structure of `igmpSnooping` block is documented below.
	IgmpSnooping ManagedswitchIgmpSnoopingPtrInput
	// IP source guard. The structure of `ipSourceGuard` block is documented below.
	IpSourceGuards ManagedswitchIpSourceGuardArrayInput
	// Layer 3 management discovered.
	L3Discovered pulumi.IntPtrInput
	// FortiSwitch maximum allowed trunk members.
	MaxAllowedTrunkMembers pulumi.IntPtrInput
	// Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
	MclagIgmpSnoopingAware pulumi.StringPtrInput
	// FortiLink management mode.
	MgmtMode pulumi.IntPtrInput
	// Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
	Mirrors ManagedswitchMirrorArrayInput
	// Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n8021xSettings` block is documented below.
	N8021xSettings ManagedswitchN8021xSettingsPtrInput
	// Managed-switch name.
	Name pulumi.StringPtrInput
	// Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
	OverrideSnmpCommunity pulumi.StringPtrInput
	// Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
	OverrideSnmpSysinfo pulumi.StringPtrInput
	// Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
	OverrideSnmpTrapThreshold pulumi.StringPtrInput
	// Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
	OverrideSnmpUser pulumi.StringPtrInput
	// VDOM which owner of port belongs to.
	OwnerVdom pulumi.StringPtrInput
	// PoE detection type for FortiSwitch.
	PoeDetectionType pulumi.IntPtrInput
	// Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
	PoeLldpDetection pulumi.StringPtrInput
	// Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
	PoePreStandardDetection pulumi.StringPtrInput
	// Managed-switch port list. The structure of `ports` block is documented below.
	Ports ManagedswitchPortArrayInput
	// Pre-provisioned managed switch.
	PreProvisioned pulumi.IntPtrInput
	// PTP profile configuration.
	PtpProfile pulumi.StringPtrInput
	// Enable/disable PTP profile on this FortiSwitch. Valid values: `disable`, `enable`.
	PtpStatus pulumi.StringPtrInput
	// Purdue Level of this FortiSwitch. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
	PurdueLevel pulumi.StringPtrInput
	// Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
	QosDropPolicy pulumi.StringPtrInput
	// Set QoS RED/WRED drop probability.
	QosRedProbability pulumi.IntPtrInput
	// NAS-IP address.
	RadiusNasIp pulumi.StringPtrInput
	// Use locally defined NAS-IP. Valid values: `disable`, `enable`.
	RadiusNasIpOverride pulumi.StringPtrInput
	// Configure logging by FortiSwitch device to a remote syslog server. The structure of `remoteLog` block is documented below.
	RemoteLogs ManagedswitchRemoteLogArrayInput
	// Enable/disable route offload on this FortiSwitch. Valid values: `disable`, `enable`.
	RouteOffload pulumi.StringPtrInput
	// Enable/disable route offload MCLAG on this FortiSwitch. Valid values: `disable`, `enable`.
	RouteOffloadMclag pulumi.StringPtrInput
	// Configure route offload MCLAG IP address. The structure of `routeOffloadRouter` block is documented below.
	RouteOffloadRouters ManagedswitchRouteOffloadRouterArrayInput
	// Managed-switch serial number.
	Sn pulumi.StringPtrInput
	// Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmpCommunity` block is documented below.
	SnmpCommunities ManagedswitchSnmpCommunityArrayInput
	// Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmpSysinfo` block is documented below.
	SnmpSysinfo ManagedswitchSnmpSysinfoPtrInput
	// Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmpTrapThreshold` block is documented below.
	SnmpTrapThreshold ManagedswitchSnmpTrapThresholdPtrInput
	// Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmpUser` block is documented below.
	SnmpUsers ManagedswitchSnmpUserArrayInput
	// Staged image version for FortiSwitch.
	StagedImageVersion pulumi.StringPtrInput
	// Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `staticMac` block is documented below.
	StaticMacs ManagedswitchStaticMacArrayInput
	// Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `stormControl` block is documented below.
	StormControl ManagedswitchStormControlPtrInput
	// Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stpInstance` block is documented below.
	StpInstances ManagedswitchStpInstanceArrayInput
	// Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stpSettings` block is documented below.
	StpSettings ManagedswitchStpSettingsPtrInput
	// User definable label/tag.
	SwitchDeviceTag pulumi.StringPtrInput
	// DHCP option43 key.
	SwitchDhcpOpt43Key pulumi.StringPtrInput
	// Managed-switch id.
	SwitchId pulumi.StringInput
	// Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switchLog` block is documented below.
	SwitchLog ManagedswitchSwitchLogPtrInput
	// FortiSwitch profile.
	SwitchProfile pulumi.StringPtrInput
	// Configure spanning tree protocol (STP). The structure of `switchStpSettings` block is documented below.
	SwitchStpSettings ManagedswitchSwitchStpSettingsPtrInput
	// TDR supported.
	TdrSupported pulumi.StringPtrInput
	// SOCKS tunnel management discovered.
	TunnelDiscovered pulumi.IntPtrInput
	// Indication of switch type, physical or virtual. Valid values: `virtual`, `physical`.
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// FortiSwitch version.
	Version pulumi.IntPtrInput
	// Configure VLAN assignment priority. The structure of `vlan` block is documented below.
	Vlans ManagedswitchVlanArrayInput
}

func (ManagedswitchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedswitchArgs)(nil)).Elem()
}

type ManagedswitchInput interface {
	pulumi.Input

	ToManagedswitchOutput() ManagedswitchOutput
	ToManagedswitchOutputWithContext(ctx context.Context) ManagedswitchOutput
}

func (*Managedswitch) ElementType() reflect.Type {
	return reflect.TypeOf((**Managedswitch)(nil)).Elem()
}

func (i *Managedswitch) ToManagedswitchOutput() ManagedswitchOutput {
	return i.ToManagedswitchOutputWithContext(context.Background())
}

func (i *Managedswitch) ToManagedswitchOutputWithContext(ctx context.Context) ManagedswitchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchOutput)
}

// ManagedswitchArrayInput is an input type that accepts ManagedswitchArray and ManagedswitchArrayOutput values.
// You can construct a concrete instance of `ManagedswitchArrayInput` via:
//
//	ManagedswitchArray{ ManagedswitchArgs{...} }
type ManagedswitchArrayInput interface {
	pulumi.Input

	ToManagedswitchArrayOutput() ManagedswitchArrayOutput
	ToManagedswitchArrayOutputWithContext(context.Context) ManagedswitchArrayOutput
}

type ManagedswitchArray []ManagedswitchInput

func (ManagedswitchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Managedswitch)(nil)).Elem()
}

func (i ManagedswitchArray) ToManagedswitchArrayOutput() ManagedswitchArrayOutput {
	return i.ToManagedswitchArrayOutputWithContext(context.Background())
}

func (i ManagedswitchArray) ToManagedswitchArrayOutputWithContext(ctx context.Context) ManagedswitchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchArrayOutput)
}

// ManagedswitchMapInput is an input type that accepts ManagedswitchMap and ManagedswitchMapOutput values.
// You can construct a concrete instance of `ManagedswitchMapInput` via:
//
//	ManagedswitchMap{ "key": ManagedswitchArgs{...} }
type ManagedswitchMapInput interface {
	pulumi.Input

	ToManagedswitchMapOutput() ManagedswitchMapOutput
	ToManagedswitchMapOutputWithContext(context.Context) ManagedswitchMapOutput
}

type ManagedswitchMap map[string]ManagedswitchInput

func (ManagedswitchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Managedswitch)(nil)).Elem()
}

func (i ManagedswitchMap) ToManagedswitchMapOutput() ManagedswitchMapOutput {
	return i.ToManagedswitchMapOutputWithContext(context.Background())
}

func (i ManagedswitchMap) ToManagedswitchMapOutputWithContext(ctx context.Context) ManagedswitchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedswitchMapOutput)
}

type ManagedswitchOutput struct{ *pulumi.OutputState }

func (ManagedswitchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Managedswitch)(nil)).Elem()
}

func (o ManagedswitchOutput) ToManagedswitchOutput() ManagedswitchOutput {
	return o
}

func (o ManagedswitchOutput) ToManagedswitchOutputWithContext(ctx context.Context) ManagedswitchOutput {
	return o
}

// FortiSwitch access profile.
func (o ManagedswitchOutput) AccessProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.AccessProfile }).(pulumi.StringOutput)
}

// Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `customCommand` block is documented below.
func (o ManagedswitchOutput) CustomCommands() ManagedswitchCustomCommandArrayOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchCustomCommandArrayOutput { return v.CustomCommands }).(ManagedswitchCustomCommandArrayOutput)
}

// Delayed restart triggered for this FortiSwitch.
func (o ManagedswitchOutput) DelayedRestartTrigger() pulumi.IntOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.IntOutput { return v.DelayedRestartTrigger }).(pulumi.IntOutput)
}

// Description.
func (o ManagedswitchOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
func (o ManagedswitchOutput) DhcpServerAccessList() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.DhcpServerAccessList }).(pulumi.StringOutput)
}

// Configure FortiSwitch DHCP snooping static clients. The structure of `dhcpSnoopingStaticClient` block is documented below.
func (o ManagedswitchOutput) DhcpSnoopingStaticClients() ManagedswitchDhcpSnoopingStaticClientArrayOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchDhcpSnoopingStaticClientArrayOutput {
		return v.DhcpSnoopingStaticClients
	}).(ManagedswitchDhcpSnoopingStaticClientArrayOutput)
}

// Directly connected FortiSwitch.
func (o ManagedswitchOutput) DirectlyConnected() pulumi.IntOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.IntOutput { return v.DirectlyConnected }).(pulumi.IntOutput)
}

// List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
func (o ManagedswitchOutput) DynamicCapability() pulumi.IntOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.IntOutput { return v.DynamicCapability }).(pulumi.IntOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o ManagedswitchOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Dynamically discovered FortiSwitch.
func (o ManagedswitchOutput) DynamicallyDiscovered() pulumi.IntOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.IntOutput { return v.DynamicallyDiscovered }).(pulumi.IntOutput)
}

// Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
func (o ManagedswitchOutput) FirmwareProvision() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.FirmwareProvision }).(pulumi.StringOutput)
}

// Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
func (o ManagedswitchOutput) FirmwareProvisionLatest() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.FirmwareProvisionLatest }).(pulumi.StringOutput)
}

// Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
func (o ManagedswitchOutput) FirmwareProvisionVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.FirmwareProvisionVersion }).(pulumi.StringOutput)
}

// Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
func (o ManagedswitchOutput) FlowIdentity() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.FlowIdentity }).(pulumi.StringOutput)
}

// FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
func (o ManagedswitchOutput) FswWan1Admin() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.FswWan1Admin }).(pulumi.StringOutput)
}

// Fortiswitch WAN1 peer port.
func (o ManagedswitchOutput) FswWan1Peer() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.FswWan1Peer }).(pulumi.StringOutput)
}

// FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
func (o ManagedswitchOutput) FswWan2Admin() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.FswWan2Admin }).(pulumi.StringOutput)
}

// FortiSwitch WAN2 peer port.
func (o ManagedswitchOutput) FswWan2Peer() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.FswWan2Peer }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o ManagedswitchOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Configure FortiSwitch IGMP snooping global settings. The structure of `igmpSnooping` block is documented below.
func (o ManagedswitchOutput) IgmpSnooping() ManagedswitchIgmpSnoopingOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchIgmpSnoopingOutput { return v.IgmpSnooping }).(ManagedswitchIgmpSnoopingOutput)
}

// IP source guard. The structure of `ipSourceGuard` block is documented below.
func (o ManagedswitchOutput) IpSourceGuards() ManagedswitchIpSourceGuardArrayOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchIpSourceGuardArrayOutput { return v.IpSourceGuards }).(ManagedswitchIpSourceGuardArrayOutput)
}

// Layer 3 management discovered.
func (o ManagedswitchOutput) L3Discovered() pulumi.IntOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.IntOutput { return v.L3Discovered }).(pulumi.IntOutput)
}

// FortiSwitch maximum allowed trunk members.
func (o ManagedswitchOutput) MaxAllowedTrunkMembers() pulumi.IntOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.IntOutput { return v.MaxAllowedTrunkMembers }).(pulumi.IntOutput)
}

// Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
func (o ManagedswitchOutput) MclagIgmpSnoopingAware() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.MclagIgmpSnoopingAware }).(pulumi.StringOutput)
}

// FortiLink management mode.
func (o ManagedswitchOutput) MgmtMode() pulumi.IntOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.IntOutput { return v.MgmtMode }).(pulumi.IntOutput)
}

// Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
func (o ManagedswitchOutput) Mirrors() ManagedswitchMirrorArrayOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchMirrorArrayOutput { return v.Mirrors }).(ManagedswitchMirrorArrayOutput)
}

// Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n8021xSettings` block is documented below.
func (o ManagedswitchOutput) N8021xSettings() ManagedswitchN8021xSettingsOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchN8021xSettingsOutput { return v.N8021xSettings }).(ManagedswitchN8021xSettingsOutput)
}

// Managed-switch name.
func (o ManagedswitchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
func (o ManagedswitchOutput) OverrideSnmpCommunity() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.OverrideSnmpCommunity }).(pulumi.StringOutput)
}

// Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
func (o ManagedswitchOutput) OverrideSnmpSysinfo() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.OverrideSnmpSysinfo }).(pulumi.StringOutput)
}

// Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
func (o ManagedswitchOutput) OverrideSnmpTrapThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.OverrideSnmpTrapThreshold }).(pulumi.StringOutput)
}

// Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
func (o ManagedswitchOutput) OverrideSnmpUser() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.OverrideSnmpUser }).(pulumi.StringOutput)
}

// VDOM which owner of port belongs to.
func (o ManagedswitchOutput) OwnerVdom() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.OwnerVdom }).(pulumi.StringOutput)
}

// PoE detection type for FortiSwitch.
func (o ManagedswitchOutput) PoeDetectionType() pulumi.IntOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.IntOutput { return v.PoeDetectionType }).(pulumi.IntOutput)
}

// Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
func (o ManagedswitchOutput) PoeLldpDetection() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.PoeLldpDetection }).(pulumi.StringOutput)
}

// Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
func (o ManagedswitchOutput) PoePreStandardDetection() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.PoePreStandardDetection }).(pulumi.StringOutput)
}

// Managed-switch port list. The structure of `ports` block is documented below.
func (o ManagedswitchOutput) Ports() ManagedswitchPortArrayOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchPortArrayOutput { return v.Ports }).(ManagedswitchPortArrayOutput)
}

// Pre-provisioned managed switch.
func (o ManagedswitchOutput) PreProvisioned() pulumi.IntOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.IntOutput { return v.PreProvisioned }).(pulumi.IntOutput)
}

// PTP profile configuration.
func (o ManagedswitchOutput) PtpProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.PtpProfile }).(pulumi.StringOutput)
}

// Enable/disable PTP profile on this FortiSwitch. Valid values: `disable`, `enable`.
func (o ManagedswitchOutput) PtpStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.PtpStatus }).(pulumi.StringOutput)
}

// Purdue Level of this FortiSwitch. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
func (o ManagedswitchOutput) PurdueLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.PurdueLevel }).(pulumi.StringOutput)
}

// Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
func (o ManagedswitchOutput) QosDropPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.QosDropPolicy }).(pulumi.StringOutput)
}

// Set QoS RED/WRED drop probability.
func (o ManagedswitchOutput) QosRedProbability() pulumi.IntOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.IntOutput { return v.QosRedProbability }).(pulumi.IntOutput)
}

// NAS-IP address.
func (o ManagedswitchOutput) RadiusNasIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.RadiusNasIp }).(pulumi.StringOutput)
}

// Use locally defined NAS-IP. Valid values: `disable`, `enable`.
func (o ManagedswitchOutput) RadiusNasIpOverride() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.RadiusNasIpOverride }).(pulumi.StringOutput)
}

// Configure logging by FortiSwitch device to a remote syslog server. The structure of `remoteLog` block is documented below.
func (o ManagedswitchOutput) RemoteLogs() ManagedswitchRemoteLogArrayOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchRemoteLogArrayOutput { return v.RemoteLogs }).(ManagedswitchRemoteLogArrayOutput)
}

// Enable/disable route offload on this FortiSwitch. Valid values: `disable`, `enable`.
func (o ManagedswitchOutput) RouteOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.RouteOffload }).(pulumi.StringOutput)
}

// Enable/disable route offload MCLAG on this FortiSwitch. Valid values: `disable`, `enable`.
func (o ManagedswitchOutput) RouteOffloadMclag() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.RouteOffloadMclag }).(pulumi.StringOutput)
}

// Configure route offload MCLAG IP address. The structure of `routeOffloadRouter` block is documented below.
func (o ManagedswitchOutput) RouteOffloadRouters() ManagedswitchRouteOffloadRouterArrayOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchRouteOffloadRouterArrayOutput { return v.RouteOffloadRouters }).(ManagedswitchRouteOffloadRouterArrayOutput)
}

// Managed-switch serial number.
func (o ManagedswitchOutput) Sn() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.Sn }).(pulumi.StringOutput)
}

// Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmpCommunity` block is documented below.
func (o ManagedswitchOutput) SnmpCommunities() ManagedswitchSnmpCommunityArrayOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchSnmpCommunityArrayOutput { return v.SnmpCommunities }).(ManagedswitchSnmpCommunityArrayOutput)
}

// Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmpSysinfo` block is documented below.
func (o ManagedswitchOutput) SnmpSysinfo() ManagedswitchSnmpSysinfoOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchSnmpSysinfoOutput { return v.SnmpSysinfo }).(ManagedswitchSnmpSysinfoOutput)
}

// Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmpTrapThreshold` block is documented below.
func (o ManagedswitchOutput) SnmpTrapThreshold() ManagedswitchSnmpTrapThresholdOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchSnmpTrapThresholdOutput { return v.SnmpTrapThreshold }).(ManagedswitchSnmpTrapThresholdOutput)
}

// Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmpUser` block is documented below.
func (o ManagedswitchOutput) SnmpUsers() ManagedswitchSnmpUserArrayOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchSnmpUserArrayOutput { return v.SnmpUsers }).(ManagedswitchSnmpUserArrayOutput)
}

// Staged image version for FortiSwitch.
func (o ManagedswitchOutput) StagedImageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.StagedImageVersion }).(pulumi.StringOutput)
}

// Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `staticMac` block is documented below.
func (o ManagedswitchOutput) StaticMacs() ManagedswitchStaticMacArrayOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchStaticMacArrayOutput { return v.StaticMacs }).(ManagedswitchStaticMacArrayOutput)
}

// Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `stormControl` block is documented below.
func (o ManagedswitchOutput) StormControl() ManagedswitchStormControlOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchStormControlOutput { return v.StormControl }).(ManagedswitchStormControlOutput)
}

// Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stpInstance` block is documented below.
func (o ManagedswitchOutput) StpInstances() ManagedswitchStpInstanceArrayOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchStpInstanceArrayOutput { return v.StpInstances }).(ManagedswitchStpInstanceArrayOutput)
}

// Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stpSettings` block is documented below.
func (o ManagedswitchOutput) StpSettings() ManagedswitchStpSettingsOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchStpSettingsOutput { return v.StpSettings }).(ManagedswitchStpSettingsOutput)
}

// User definable label/tag.
func (o ManagedswitchOutput) SwitchDeviceTag() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.SwitchDeviceTag }).(pulumi.StringOutput)
}

// DHCP option43 key.
func (o ManagedswitchOutput) SwitchDhcpOpt43Key() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.SwitchDhcpOpt43Key }).(pulumi.StringOutput)
}

// Managed-switch id.
func (o ManagedswitchOutput) SwitchId() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.SwitchId }).(pulumi.StringOutput)
}

// Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switchLog` block is documented below.
func (o ManagedswitchOutput) SwitchLog() ManagedswitchSwitchLogOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchSwitchLogOutput { return v.SwitchLog }).(ManagedswitchSwitchLogOutput)
}

// FortiSwitch profile.
func (o ManagedswitchOutput) SwitchProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.SwitchProfile }).(pulumi.StringOutput)
}

// Configure spanning tree protocol (STP). The structure of `switchStpSettings` block is documented below.
func (o ManagedswitchOutput) SwitchStpSettings() ManagedswitchSwitchStpSettingsOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchSwitchStpSettingsOutput { return v.SwitchStpSettings }).(ManagedswitchSwitchStpSettingsOutput)
}

// TDR supported.
func (o ManagedswitchOutput) TdrSupported() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.TdrSupported }).(pulumi.StringOutput)
}

// SOCKS tunnel management discovered.
func (o ManagedswitchOutput) TunnelDiscovered() pulumi.IntOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.IntOutput { return v.TunnelDiscovered }).(pulumi.IntOutput)
}

// Indication of switch type, physical or virtual. Valid values: `virtual`, `physical`.
func (o ManagedswitchOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ManagedswitchOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// FortiSwitch version.
func (o ManagedswitchOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *Managedswitch) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

// Configure VLAN assignment priority. The structure of `vlan` block is documented below.
func (o ManagedswitchOutput) Vlans() ManagedswitchVlanArrayOutput {
	return o.ApplyT(func(v *Managedswitch) ManagedswitchVlanArrayOutput { return v.Vlans }).(ManagedswitchVlanArrayOutput)
}

type ManagedswitchArrayOutput struct{ *pulumi.OutputState }

func (ManagedswitchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Managedswitch)(nil)).Elem()
}

func (o ManagedswitchArrayOutput) ToManagedswitchArrayOutput() ManagedswitchArrayOutput {
	return o
}

func (o ManagedswitchArrayOutput) ToManagedswitchArrayOutputWithContext(ctx context.Context) ManagedswitchArrayOutput {
	return o
}

func (o ManagedswitchArrayOutput) Index(i pulumi.IntInput) ManagedswitchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Managedswitch {
		return vs[0].([]*Managedswitch)[vs[1].(int)]
	}).(ManagedswitchOutput)
}

type ManagedswitchMapOutput struct{ *pulumi.OutputState }

func (ManagedswitchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Managedswitch)(nil)).Elem()
}

func (o ManagedswitchMapOutput) ToManagedswitchMapOutput() ManagedswitchMapOutput {
	return o
}

func (o ManagedswitchMapOutput) ToManagedswitchMapOutputWithContext(ctx context.Context) ManagedswitchMapOutput {
	return o
}

func (o ManagedswitchMapOutput) MapIndex(k pulumi.StringInput) ManagedswitchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Managedswitch {
		return vs[0].(map[string]*Managedswitch)[vs[1].(string)]
	}).(ManagedswitchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchInput)(nil)).Elem(), &Managedswitch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchArrayInput)(nil)).Elem(), ManagedswitchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedswitchMapInput)(nil)).Elem(), ManagedswitchMap{})
	pulumi.RegisterOutputType(ManagedswitchOutput{})
	pulumi.RegisterOutputType(ManagedswitchArrayOutput{})
	pulumi.RegisterOutputType(ManagedswitchMapOutput{})
}
