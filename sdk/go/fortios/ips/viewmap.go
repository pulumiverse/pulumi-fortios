// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ips

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// configure ips view-map Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// Ips ViewMap can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:ips/viewmap:Viewmap labelname {{fosid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:ips/viewmap:Viewmap labelname {{fosid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Viewmap struct {
	pulumi.CustomResourceState

	// View ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// ID-based policy ID.
	IdPolicyId pulumi.IntOutput `pulumi:"idPolicyId"`
	// Policy ID.
	PolicyId pulumi.IntOutput `pulumi:"policyId"`
	// VDOM ID.
	VdomId pulumi.IntOutput `pulumi:"vdomId"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
	// Policy.
	Which pulumi.StringOutput `pulumi:"which"`
}

// NewViewmap registers a new resource with the given unique name, arguments, and options.
func NewViewmap(ctx *pulumi.Context,
	name string, args *ViewmapArgs, opts ...pulumi.ResourceOption) (*Viewmap, error) {
	if args == nil {
		args = &ViewmapArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Viewmap
	err := ctx.RegisterResource("fortios:ips/viewmap:Viewmap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetViewmap gets an existing Viewmap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetViewmap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ViewmapState, opts ...pulumi.ResourceOption) (*Viewmap, error) {
	var resource Viewmap
	err := ctx.ReadResource("fortios:ips/viewmap:Viewmap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Viewmap resources.
type viewmapState struct {
	// View ID.
	Fosid *int `pulumi:"fosid"`
	// ID-based policy ID.
	IdPolicyId *int `pulumi:"idPolicyId"`
	// Policy ID.
	PolicyId *int `pulumi:"policyId"`
	// VDOM ID.
	VdomId *int `pulumi:"vdomId"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Policy.
	Which *string `pulumi:"which"`
}

type ViewmapState struct {
	// View ID.
	Fosid pulumi.IntPtrInput
	// ID-based policy ID.
	IdPolicyId pulumi.IntPtrInput
	// Policy ID.
	PolicyId pulumi.IntPtrInput
	// VDOM ID.
	VdomId pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Policy.
	Which pulumi.StringPtrInput
}

func (ViewmapState) ElementType() reflect.Type {
	return reflect.TypeOf((*viewmapState)(nil)).Elem()
}

type viewmapArgs struct {
	// View ID.
	Fosid *int `pulumi:"fosid"`
	// ID-based policy ID.
	IdPolicyId *int `pulumi:"idPolicyId"`
	// Policy ID.
	PolicyId *int `pulumi:"policyId"`
	// VDOM ID.
	VdomId *int `pulumi:"vdomId"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Policy.
	Which *string `pulumi:"which"`
}

// The set of arguments for constructing a Viewmap resource.
type ViewmapArgs struct {
	// View ID.
	Fosid pulumi.IntPtrInput
	// ID-based policy ID.
	IdPolicyId pulumi.IntPtrInput
	// Policy ID.
	PolicyId pulumi.IntPtrInput
	// VDOM ID.
	VdomId pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Policy.
	Which pulumi.StringPtrInput
}

func (ViewmapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*viewmapArgs)(nil)).Elem()
}

type ViewmapInput interface {
	pulumi.Input

	ToViewmapOutput() ViewmapOutput
	ToViewmapOutputWithContext(ctx context.Context) ViewmapOutput
}

func (*Viewmap) ElementType() reflect.Type {
	return reflect.TypeOf((**Viewmap)(nil)).Elem()
}

func (i *Viewmap) ToViewmapOutput() ViewmapOutput {
	return i.ToViewmapOutputWithContext(context.Background())
}

func (i *Viewmap) ToViewmapOutputWithContext(ctx context.Context) ViewmapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewmapOutput)
}

// ViewmapArrayInput is an input type that accepts ViewmapArray and ViewmapArrayOutput values.
// You can construct a concrete instance of `ViewmapArrayInput` via:
//
//	ViewmapArray{ ViewmapArgs{...} }
type ViewmapArrayInput interface {
	pulumi.Input

	ToViewmapArrayOutput() ViewmapArrayOutput
	ToViewmapArrayOutputWithContext(context.Context) ViewmapArrayOutput
}

type ViewmapArray []ViewmapInput

func (ViewmapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Viewmap)(nil)).Elem()
}

func (i ViewmapArray) ToViewmapArrayOutput() ViewmapArrayOutput {
	return i.ToViewmapArrayOutputWithContext(context.Background())
}

func (i ViewmapArray) ToViewmapArrayOutputWithContext(ctx context.Context) ViewmapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewmapArrayOutput)
}

// ViewmapMapInput is an input type that accepts ViewmapMap and ViewmapMapOutput values.
// You can construct a concrete instance of `ViewmapMapInput` via:
//
//	ViewmapMap{ "key": ViewmapArgs{...} }
type ViewmapMapInput interface {
	pulumi.Input

	ToViewmapMapOutput() ViewmapMapOutput
	ToViewmapMapOutputWithContext(context.Context) ViewmapMapOutput
}

type ViewmapMap map[string]ViewmapInput

func (ViewmapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Viewmap)(nil)).Elem()
}

func (i ViewmapMap) ToViewmapMapOutput() ViewmapMapOutput {
	return i.ToViewmapMapOutputWithContext(context.Background())
}

func (i ViewmapMap) ToViewmapMapOutputWithContext(ctx context.Context) ViewmapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewmapMapOutput)
}

type ViewmapOutput struct{ *pulumi.OutputState }

func (ViewmapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Viewmap)(nil)).Elem()
}

func (o ViewmapOutput) ToViewmapOutput() ViewmapOutput {
	return o
}

func (o ViewmapOutput) ToViewmapOutputWithContext(ctx context.Context) ViewmapOutput {
	return o
}

// View ID.
func (o ViewmapOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *Viewmap) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// ID-based policy ID.
func (o ViewmapOutput) IdPolicyId() pulumi.IntOutput {
	return o.ApplyT(func(v *Viewmap) pulumi.IntOutput { return v.IdPolicyId }).(pulumi.IntOutput)
}

// Policy ID.
func (o ViewmapOutput) PolicyId() pulumi.IntOutput {
	return o.ApplyT(func(v *Viewmap) pulumi.IntOutput { return v.PolicyId }).(pulumi.IntOutput)
}

// VDOM ID.
func (o ViewmapOutput) VdomId() pulumi.IntOutput {
	return o.ApplyT(func(v *Viewmap) pulumi.IntOutput { return v.VdomId }).(pulumi.IntOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ViewmapOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Viewmap) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

// Policy.
func (o ViewmapOutput) Which() pulumi.StringOutput {
	return o.ApplyT(func(v *Viewmap) pulumi.StringOutput { return v.Which }).(pulumi.StringOutput)
}

type ViewmapArrayOutput struct{ *pulumi.OutputState }

func (ViewmapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Viewmap)(nil)).Elem()
}

func (o ViewmapArrayOutput) ToViewmapArrayOutput() ViewmapArrayOutput {
	return o
}

func (o ViewmapArrayOutput) ToViewmapArrayOutputWithContext(ctx context.Context) ViewmapArrayOutput {
	return o
}

func (o ViewmapArrayOutput) Index(i pulumi.IntInput) ViewmapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Viewmap {
		return vs[0].([]*Viewmap)[vs[1].(int)]
	}).(ViewmapOutput)
}

type ViewmapMapOutput struct{ *pulumi.OutputState }

func (ViewmapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Viewmap)(nil)).Elem()
}

func (o ViewmapMapOutput) ToViewmapMapOutput() ViewmapMapOutput {
	return o
}

func (o ViewmapMapOutput) ToViewmapMapOutputWithContext(ctx context.Context) ViewmapMapOutput {
	return o
}

func (o ViewmapMapOutput) MapIndex(k pulumi.StringInput) ViewmapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Viewmap {
		return vs[0].(map[string]*Viewmap)[vs[1].(string)]
	}).(ViewmapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ViewmapInput)(nil)).Elem(), &Viewmap{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewmapArrayInput)(nil)).Elem(), ViewmapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewmapMapInput)(nil)).Elem(), ViewmapMap{})
	pulumi.RegisterOutputType(ViewmapOutput{})
	pulumi.RegisterOutputType(ViewmapArrayOutput{})
	pulumi.RegisterOutputType(ViewmapMapOutput{})
}
