// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ips

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure IPS sensor.
//
// ## Import
//
// Ips Sensor can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:ips/sensor:Sensor labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:ips/sensor:Sensor labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Sensor struct {
	pulumi.CustomResourceState

	// Enable/disable malicious URL blocking. Valid values: `disable`, `enable`.
	BlockMaliciousUrl pulumi.StringOutput `pulumi:"blockMaliciousUrl"`
	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// IPS sensor filter. The structure of `entries` block is documented below.
	Entries SensorEntryArrayOutput `pulumi:"entries"`
	// Enable/disable extended logging. Valid values: `enable`, `disable`.
	ExtendedLog pulumi.StringOutput `pulumi:"extendedLog"`
	// IPS sensor filter. The structure of `filter` block is documented below.
	Filters SensorFilterArrayOutput `pulumi:"filters"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Sensor name.
	Name pulumi.StringOutput `pulumi:"name"`
	// IPS override rule. The structure of `override` block is documented below.
	Overrides SensorOverrideArrayOutput `pulumi:"overrides"`
	// Replacement message group.
	ReplacemsgGroup pulumi.StringOutput `pulumi:"replacemsgGroup"`
	// Block or monitor connections to Botnet servers, or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringOutput `pulumi:"scanBotnetConnections"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSensor registers a new resource with the given unique name, arguments, and options.
func NewSensor(ctx *pulumi.Context,
	name string, args *SensorArgs, opts ...pulumi.ResourceOption) (*Sensor, error) {
	if args == nil {
		args = &SensorArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Sensor
	err := ctx.RegisterResource("fortios:ips/sensor:Sensor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSensor gets an existing Sensor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSensor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SensorState, opts ...pulumi.ResourceOption) (*Sensor, error) {
	var resource Sensor
	err := ctx.ReadResource("fortios:ips/sensor:Sensor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sensor resources.
type sensorState struct {
	// Enable/disable malicious URL blocking. Valid values: `disable`, `enable`.
	BlockMaliciousUrl *string `pulumi:"blockMaliciousUrl"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// IPS sensor filter. The structure of `entries` block is documented below.
	Entries []SensorEntry `pulumi:"entries"`
	// Enable/disable extended logging. Valid values: `enable`, `disable`.
	ExtendedLog *string `pulumi:"extendedLog"`
	// IPS sensor filter. The structure of `filter` block is documented below.
	Filters []SensorFilter `pulumi:"filters"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Sensor name.
	Name *string `pulumi:"name"`
	// IPS override rule. The structure of `override` block is documented below.
	Overrides []SensorOverride `pulumi:"overrides"`
	// Replacement message group.
	ReplacemsgGroup *string `pulumi:"replacemsgGroup"`
	// Block or monitor connections to Botnet servers, or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SensorState struct {
	// Enable/disable malicious URL blocking. Valid values: `disable`, `enable`.
	BlockMaliciousUrl pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// IPS sensor filter. The structure of `entries` block is documented below.
	Entries SensorEntryArrayInput
	// Enable/disable extended logging. Valid values: `enable`, `disable`.
	ExtendedLog pulumi.StringPtrInput
	// IPS sensor filter. The structure of `filter` block is documented below.
	Filters SensorFilterArrayInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Sensor name.
	Name pulumi.StringPtrInput
	// IPS override rule. The structure of `override` block is documented below.
	Overrides SensorOverrideArrayInput
	// Replacement message group.
	ReplacemsgGroup pulumi.StringPtrInput
	// Block or monitor connections to Botnet servers, or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SensorState) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorState)(nil)).Elem()
}

type sensorArgs struct {
	// Enable/disable malicious URL blocking. Valid values: `disable`, `enable`.
	BlockMaliciousUrl *string `pulumi:"blockMaliciousUrl"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// IPS sensor filter. The structure of `entries` block is documented below.
	Entries []SensorEntry `pulumi:"entries"`
	// Enable/disable extended logging. Valid values: `enable`, `disable`.
	ExtendedLog *string `pulumi:"extendedLog"`
	// IPS sensor filter. The structure of `filter` block is documented below.
	Filters []SensorFilter `pulumi:"filters"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Sensor name.
	Name *string `pulumi:"name"`
	// IPS override rule. The structure of `override` block is documented below.
	Overrides []SensorOverride `pulumi:"overrides"`
	// Replacement message group.
	ReplacemsgGroup *string `pulumi:"replacemsgGroup"`
	// Block or monitor connections to Botnet servers, or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Sensor resource.
type SensorArgs struct {
	// Enable/disable malicious URL blocking. Valid values: `disable`, `enable`.
	BlockMaliciousUrl pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// IPS sensor filter. The structure of `entries` block is documented below.
	Entries SensorEntryArrayInput
	// Enable/disable extended logging. Valid values: `enable`, `disable`.
	ExtendedLog pulumi.StringPtrInput
	// IPS sensor filter. The structure of `filter` block is documented below.
	Filters SensorFilterArrayInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Sensor name.
	Name pulumi.StringPtrInput
	// IPS override rule. The structure of `override` block is documented below.
	Overrides SensorOverrideArrayInput
	// Replacement message group.
	ReplacemsgGroup pulumi.StringPtrInput
	// Block or monitor connections to Botnet servers, or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SensorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorArgs)(nil)).Elem()
}

type SensorInput interface {
	pulumi.Input

	ToSensorOutput() SensorOutput
	ToSensorOutputWithContext(ctx context.Context) SensorOutput
}

func (*Sensor) ElementType() reflect.Type {
	return reflect.TypeOf((**Sensor)(nil)).Elem()
}

func (i *Sensor) ToSensorOutput() SensorOutput {
	return i.ToSensorOutputWithContext(context.Background())
}

func (i *Sensor) ToSensorOutputWithContext(ctx context.Context) SensorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorOutput)
}

// SensorArrayInput is an input type that accepts SensorArray and SensorArrayOutput values.
// You can construct a concrete instance of `SensorArrayInput` via:
//
//	SensorArray{ SensorArgs{...} }
type SensorArrayInput interface {
	pulumi.Input

	ToSensorArrayOutput() SensorArrayOutput
	ToSensorArrayOutputWithContext(context.Context) SensorArrayOutput
}

type SensorArray []SensorInput

func (SensorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sensor)(nil)).Elem()
}

func (i SensorArray) ToSensorArrayOutput() SensorArrayOutput {
	return i.ToSensorArrayOutputWithContext(context.Background())
}

func (i SensorArray) ToSensorArrayOutputWithContext(ctx context.Context) SensorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorArrayOutput)
}

// SensorMapInput is an input type that accepts SensorMap and SensorMapOutput values.
// You can construct a concrete instance of `SensorMapInput` via:
//
//	SensorMap{ "key": SensorArgs{...} }
type SensorMapInput interface {
	pulumi.Input

	ToSensorMapOutput() SensorMapOutput
	ToSensorMapOutputWithContext(context.Context) SensorMapOutput
}

type SensorMap map[string]SensorInput

func (SensorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sensor)(nil)).Elem()
}

func (i SensorMap) ToSensorMapOutput() SensorMapOutput {
	return i.ToSensorMapOutputWithContext(context.Background())
}

func (i SensorMap) ToSensorMapOutputWithContext(ctx context.Context) SensorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorMapOutput)
}

type SensorOutput struct{ *pulumi.OutputState }

func (SensorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sensor)(nil)).Elem()
}

func (o SensorOutput) ToSensorOutput() SensorOutput {
	return o
}

func (o SensorOutput) ToSensorOutputWithContext(ctx context.Context) SensorOutput {
	return o
}

// Enable/disable malicious URL blocking. Valid values: `disable`, `enable`.
func (o SensorOutput) BlockMaliciousUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.BlockMaliciousUrl }).(pulumi.StringOutput)
}

// Comment.
func (o SensorOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SensorOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// IPS sensor filter. The structure of `entries` block is documented below.
func (o SensorOutput) Entries() SensorEntryArrayOutput {
	return o.ApplyT(func(v *Sensor) SensorEntryArrayOutput { return v.Entries }).(SensorEntryArrayOutput)
}

// Enable/disable extended logging. Valid values: `enable`, `disable`.
func (o SensorOutput) ExtendedLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.ExtendedLog }).(pulumi.StringOutput)
}

// IPS sensor filter. The structure of `filter` block is documented below.
func (o SensorOutput) Filters() SensorFilterArrayOutput {
	return o.ApplyT(func(v *Sensor) SensorFilterArrayOutput { return v.Filters }).(SensorFilterArrayOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o SensorOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Sensor name.
func (o SensorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// IPS override rule. The structure of `override` block is documented below.
func (o SensorOutput) Overrides() SensorOverrideArrayOutput {
	return o.ApplyT(func(v *Sensor) SensorOverrideArrayOutput { return v.Overrides }).(SensorOverrideArrayOutput)
}

// Replacement message group.
func (o SensorOutput) ReplacemsgGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.ReplacemsgGroup }).(pulumi.StringOutput)
}

// Block or monitor connections to Botnet servers, or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
func (o SensorOutput) ScanBotnetConnections() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.ScanBotnetConnections }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SensorOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SensorArrayOutput struct{ *pulumi.OutputState }

func (SensorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sensor)(nil)).Elem()
}

func (o SensorArrayOutput) ToSensorArrayOutput() SensorArrayOutput {
	return o
}

func (o SensorArrayOutput) ToSensorArrayOutputWithContext(ctx context.Context) SensorArrayOutput {
	return o
}

func (o SensorArrayOutput) Index(i pulumi.IntInput) SensorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Sensor {
		return vs[0].([]*Sensor)[vs[1].(int)]
	}).(SensorOutput)
}

type SensorMapOutput struct{ *pulumi.OutputState }

func (SensorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sensor)(nil)).Elem()
}

func (o SensorMapOutput) ToSensorMapOutput() SensorMapOutput {
	return o
}

func (o SensorMapOutput) ToSensorMapOutputWithContext(ctx context.Context) SensorMapOutput {
	return o
}

func (o SensorMapOutput) MapIndex(k pulumi.StringInput) SensorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Sensor {
		return vs[0].(map[string]*Sensor)[vs[1].(string)]
	}).(SensorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SensorInput)(nil)).Elem(), &Sensor{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorArrayInput)(nil)).Elem(), SensorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorMapInput)(nil)).Elem(), SensorMap{})
	pulumi.RegisterOutputType(SensorOutput{})
	pulumi.RegisterOutputType(SensorArrayOutput{})
	pulumi.RegisterOutputType(SensorMapOutput{})
}
