// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dlp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

var _ = internal.GetEnvOrDefault

type DictionaryEntry struct {
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// ID.
	Id *int `pulumi:"id"`
	// Enable/disable ignore case. Valid values: `enable`, `disable`.
	IgnoreCase *string `pulumi:"ignoreCase"`
	// Pattern to match.
	Pattern *string `pulumi:"pattern"`
	// Enable/disable repeat match. Valid values: `enable`, `disable`.
	Repeat *string `pulumi:"repeat"`
	// Enable/disable this pattern. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Pattern type to match.
	Type *string `pulumi:"type"`
}

// DictionaryEntryInput is an input type that accepts DictionaryEntryArgs and DictionaryEntryOutput values.
// You can construct a concrete instance of `DictionaryEntryInput` via:
//
//	DictionaryEntryArgs{...}
type DictionaryEntryInput interface {
	pulumi.Input

	ToDictionaryEntryOutput() DictionaryEntryOutput
	ToDictionaryEntryOutputWithContext(context.Context) DictionaryEntryOutput
}

type DictionaryEntryArgs struct {
	// Optional comments.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Enable/disable ignore case. Valid values: `enable`, `disable`.
	IgnoreCase pulumi.StringPtrInput `pulumi:"ignoreCase"`
	// Pattern to match.
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
	// Enable/disable repeat match. Valid values: `enable`, `disable`.
	Repeat pulumi.StringPtrInput `pulumi:"repeat"`
	// Enable/disable this pattern. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Pattern type to match.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DictionaryEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DictionaryEntry)(nil)).Elem()
}

func (i DictionaryEntryArgs) ToDictionaryEntryOutput() DictionaryEntryOutput {
	return i.ToDictionaryEntryOutputWithContext(context.Background())
}

func (i DictionaryEntryArgs) ToDictionaryEntryOutputWithContext(ctx context.Context) DictionaryEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DictionaryEntryOutput)
}

// DictionaryEntryArrayInput is an input type that accepts DictionaryEntryArray and DictionaryEntryArrayOutput values.
// You can construct a concrete instance of `DictionaryEntryArrayInput` via:
//
//	DictionaryEntryArray{ DictionaryEntryArgs{...} }
type DictionaryEntryArrayInput interface {
	pulumi.Input

	ToDictionaryEntryArrayOutput() DictionaryEntryArrayOutput
	ToDictionaryEntryArrayOutputWithContext(context.Context) DictionaryEntryArrayOutput
}

type DictionaryEntryArray []DictionaryEntryInput

func (DictionaryEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DictionaryEntry)(nil)).Elem()
}

func (i DictionaryEntryArray) ToDictionaryEntryArrayOutput() DictionaryEntryArrayOutput {
	return i.ToDictionaryEntryArrayOutputWithContext(context.Background())
}

func (i DictionaryEntryArray) ToDictionaryEntryArrayOutputWithContext(ctx context.Context) DictionaryEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DictionaryEntryArrayOutput)
}

type DictionaryEntryOutput struct{ *pulumi.OutputState }

func (DictionaryEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DictionaryEntry)(nil)).Elem()
}

func (o DictionaryEntryOutput) ToDictionaryEntryOutput() DictionaryEntryOutput {
	return o
}

func (o DictionaryEntryOutput) ToDictionaryEntryOutputWithContext(ctx context.Context) DictionaryEntryOutput {
	return o
}

// Optional comments.
func (o DictionaryEntryOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DictionaryEntry) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// ID.
func (o DictionaryEntryOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DictionaryEntry) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Enable/disable ignore case. Valid values: `enable`, `disable`.
func (o DictionaryEntryOutput) IgnoreCase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DictionaryEntry) *string { return v.IgnoreCase }).(pulumi.StringPtrOutput)
}

// Pattern to match.
func (o DictionaryEntryOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DictionaryEntry) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

// Enable/disable repeat match. Valid values: `enable`, `disable`.
func (o DictionaryEntryOutput) Repeat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DictionaryEntry) *string { return v.Repeat }).(pulumi.StringPtrOutput)
}

// Enable/disable this pattern. Valid values: `enable`, `disable`.
func (o DictionaryEntryOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DictionaryEntry) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Pattern type to match.
func (o DictionaryEntryOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DictionaryEntry) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DictionaryEntryArrayOutput struct{ *pulumi.OutputState }

func (DictionaryEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DictionaryEntry)(nil)).Elem()
}

func (o DictionaryEntryArrayOutput) ToDictionaryEntryArrayOutput() DictionaryEntryArrayOutput {
	return o
}

func (o DictionaryEntryArrayOutput) ToDictionaryEntryArrayOutputWithContext(ctx context.Context) DictionaryEntryArrayOutput {
	return o
}

func (o DictionaryEntryArrayOutput) Index(i pulumi.IntInput) DictionaryEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DictionaryEntry {
		return vs[0].([]DictionaryEntry)[vs[1].(int)]
	}).(DictionaryEntryOutput)
}

type ExactdatamatchColumn struct {
	// Column index.
	Index *int `pulumi:"index"`
	// Enable/disable optional match. Valid values: `enable`, `disable`.
	Optional *string `pulumi:"optional"`
	// Data-type for this column.
	Type *string `pulumi:"type"`
}

// ExactdatamatchColumnInput is an input type that accepts ExactdatamatchColumnArgs and ExactdatamatchColumnOutput values.
// You can construct a concrete instance of `ExactdatamatchColumnInput` via:
//
//	ExactdatamatchColumnArgs{...}
type ExactdatamatchColumnInput interface {
	pulumi.Input

	ToExactdatamatchColumnOutput() ExactdatamatchColumnOutput
	ToExactdatamatchColumnOutputWithContext(context.Context) ExactdatamatchColumnOutput
}

type ExactdatamatchColumnArgs struct {
	// Column index.
	Index pulumi.IntPtrInput `pulumi:"index"`
	// Enable/disable optional match. Valid values: `enable`, `disable`.
	Optional pulumi.StringPtrInput `pulumi:"optional"`
	// Data-type for this column.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ExactdatamatchColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExactdatamatchColumn)(nil)).Elem()
}

func (i ExactdatamatchColumnArgs) ToExactdatamatchColumnOutput() ExactdatamatchColumnOutput {
	return i.ToExactdatamatchColumnOutputWithContext(context.Background())
}

func (i ExactdatamatchColumnArgs) ToExactdatamatchColumnOutputWithContext(ctx context.Context) ExactdatamatchColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExactdatamatchColumnOutput)
}

// ExactdatamatchColumnArrayInput is an input type that accepts ExactdatamatchColumnArray and ExactdatamatchColumnArrayOutput values.
// You can construct a concrete instance of `ExactdatamatchColumnArrayInput` via:
//
//	ExactdatamatchColumnArray{ ExactdatamatchColumnArgs{...} }
type ExactdatamatchColumnArrayInput interface {
	pulumi.Input

	ToExactdatamatchColumnArrayOutput() ExactdatamatchColumnArrayOutput
	ToExactdatamatchColumnArrayOutputWithContext(context.Context) ExactdatamatchColumnArrayOutput
}

type ExactdatamatchColumnArray []ExactdatamatchColumnInput

func (ExactdatamatchColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExactdatamatchColumn)(nil)).Elem()
}

func (i ExactdatamatchColumnArray) ToExactdatamatchColumnArrayOutput() ExactdatamatchColumnArrayOutput {
	return i.ToExactdatamatchColumnArrayOutputWithContext(context.Background())
}

func (i ExactdatamatchColumnArray) ToExactdatamatchColumnArrayOutputWithContext(ctx context.Context) ExactdatamatchColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExactdatamatchColumnArrayOutput)
}

type ExactdatamatchColumnOutput struct{ *pulumi.OutputState }

func (ExactdatamatchColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExactdatamatchColumn)(nil)).Elem()
}

func (o ExactdatamatchColumnOutput) ToExactdatamatchColumnOutput() ExactdatamatchColumnOutput {
	return o
}

func (o ExactdatamatchColumnOutput) ToExactdatamatchColumnOutputWithContext(ctx context.Context) ExactdatamatchColumnOutput {
	return o
}

// Column index.
func (o ExactdatamatchColumnOutput) Index() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExactdatamatchColumn) *int { return v.Index }).(pulumi.IntPtrOutput)
}

// Enable/disable optional match. Valid values: `enable`, `disable`.
func (o ExactdatamatchColumnOutput) Optional() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExactdatamatchColumn) *string { return v.Optional }).(pulumi.StringPtrOutput)
}

// Data-type for this column.
func (o ExactdatamatchColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExactdatamatchColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExactdatamatchColumnArrayOutput struct{ *pulumi.OutputState }

func (ExactdatamatchColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExactdatamatchColumn)(nil)).Elem()
}

func (o ExactdatamatchColumnArrayOutput) ToExactdatamatchColumnArrayOutput() ExactdatamatchColumnArrayOutput {
	return o
}

func (o ExactdatamatchColumnArrayOutput) ToExactdatamatchColumnArrayOutputWithContext(ctx context.Context) ExactdatamatchColumnArrayOutput {
	return o
}

func (o ExactdatamatchColumnArrayOutput) Index(i pulumi.IntInput) ExactdatamatchColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExactdatamatchColumn {
		return vs[0].([]ExactdatamatchColumn)[vs[1].(int)]
	}).(ExactdatamatchColumnOutput)
}

type FilepatternEntry struct {
	// Select a file type.
	FileType *string `pulumi:"fileType"`
	// Filter by file name pattern or by file type. Valid values: `pattern`, `type`.
	FilterType *string `pulumi:"filterType"`
	// Add a file name pattern.
	Pattern *string `pulumi:"pattern"`
}

// FilepatternEntryInput is an input type that accepts FilepatternEntryArgs and FilepatternEntryOutput values.
// You can construct a concrete instance of `FilepatternEntryInput` via:
//
//	FilepatternEntryArgs{...}
type FilepatternEntryInput interface {
	pulumi.Input

	ToFilepatternEntryOutput() FilepatternEntryOutput
	ToFilepatternEntryOutputWithContext(context.Context) FilepatternEntryOutput
}

type FilepatternEntryArgs struct {
	// Select a file type.
	FileType pulumi.StringPtrInput `pulumi:"fileType"`
	// Filter by file name pattern or by file type. Valid values: `pattern`, `type`.
	FilterType pulumi.StringPtrInput `pulumi:"filterType"`
	// Add a file name pattern.
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
}

func (FilepatternEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilepatternEntry)(nil)).Elem()
}

func (i FilepatternEntryArgs) ToFilepatternEntryOutput() FilepatternEntryOutput {
	return i.ToFilepatternEntryOutputWithContext(context.Background())
}

func (i FilepatternEntryArgs) ToFilepatternEntryOutputWithContext(ctx context.Context) FilepatternEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilepatternEntryOutput)
}

// FilepatternEntryArrayInput is an input type that accepts FilepatternEntryArray and FilepatternEntryArrayOutput values.
// You can construct a concrete instance of `FilepatternEntryArrayInput` via:
//
//	FilepatternEntryArray{ FilepatternEntryArgs{...} }
type FilepatternEntryArrayInput interface {
	pulumi.Input

	ToFilepatternEntryArrayOutput() FilepatternEntryArrayOutput
	ToFilepatternEntryArrayOutputWithContext(context.Context) FilepatternEntryArrayOutput
}

type FilepatternEntryArray []FilepatternEntryInput

func (FilepatternEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilepatternEntry)(nil)).Elem()
}

func (i FilepatternEntryArray) ToFilepatternEntryArrayOutput() FilepatternEntryArrayOutput {
	return i.ToFilepatternEntryArrayOutputWithContext(context.Background())
}

func (i FilepatternEntryArray) ToFilepatternEntryArrayOutputWithContext(ctx context.Context) FilepatternEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilepatternEntryArrayOutput)
}

type FilepatternEntryOutput struct{ *pulumi.OutputState }

func (FilepatternEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilepatternEntry)(nil)).Elem()
}

func (o FilepatternEntryOutput) ToFilepatternEntryOutput() FilepatternEntryOutput {
	return o
}

func (o FilepatternEntryOutput) ToFilepatternEntryOutputWithContext(ctx context.Context) FilepatternEntryOutput {
	return o
}

// Select a file type.
func (o FilepatternEntryOutput) FileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilepatternEntry) *string { return v.FileType }).(pulumi.StringPtrOutput)
}

// Filter by file name pattern or by file type. Valid values: `pattern`, `type`.
func (o FilepatternEntryOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilepatternEntry) *string { return v.FilterType }).(pulumi.StringPtrOutput)
}

// Add a file name pattern.
func (o FilepatternEntryOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilepatternEntry) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

type FilepatternEntryArrayOutput struct{ *pulumi.OutputState }

func (FilepatternEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilepatternEntry)(nil)).Elem()
}

func (o FilepatternEntryArrayOutput) ToFilepatternEntryArrayOutput() FilepatternEntryArrayOutput {
	return o
}

func (o FilepatternEntryArrayOutput) ToFilepatternEntryArrayOutputWithContext(ctx context.Context) FilepatternEntryArrayOutput {
	return o
}

func (o FilepatternEntryArrayOutput) Index(i pulumi.IntInput) FilepatternEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FilepatternEntry {
		return vs[0].([]FilepatternEntry)[vs[1].(int)]
	}).(FilepatternEntryOutput)
}

type ProfileRule struct {
	// Action to take with content that this DLP profile matches. Valid values: `allow`, `log-only`, `block`, `quarantine-ip`.
	Action *string `pulumi:"action"`
	// Enable/disable DLP archiving. Valid values: `disable`, `enable`.
	Archive *string `pulumi:"archive"`
	// Quarantine duration in days, hours, minutes (format = dddhhmm).
	Expiry *string `pulumi:"expiry"`
	// Match files greater than or equal to this size (KB).
	FileSize *int `pulumi:"fileSize"`
	// Select the number of a DLP file pattern table to match.
	FileType *int `pulumi:"fileType"`
	// Select the type of content to match. Valid values: `sensor`, `mip`, `fingerprint`, `encrypted`, `none`.
	FilterBy *string `pulumi:"filterBy"`
	// ID.
	Id *int `pulumi:"id"`
	// MIP label dictionary.
	Label *string `pulumi:"label"`
	// Percentage of fingerprints in the fingerprint databases designated with the selected sensitivity to match.
	MatchPercentage *int `pulumi:"matchPercentage"`
	// Filter name.
	Name *string `pulumi:"name"`
	// Check messages or files over one or more of these protocols. Valid values: `smtp`, `pop3`, `imap`, `http-get`, `http-post`, `ftp`, `nntp`, `mapi`, `ssh`, `cifs`.
	Proto *string `pulumi:"proto"`
	// Select a DLP file pattern sensitivity to match. The structure of `sensitivity` block is documented below.
	Sensitivities []ProfileRuleSensitivity `pulumi:"sensitivities"`
	// Select DLP sensors. The structure of `sensor` block is documented below.
	Sensors []ProfileRuleSensor `pulumi:"sensors"`
	// Select the severity or threat level that matches this filter. Valid values: `info`, `low`, `medium`, `high`, `critical`.
	Severity *string `pulumi:"severity"`
	// Select whether to check the content of messages (an email message) or files (downloaded files or email attachments). Valid values: `file`, `message`.
	Type *string `pulumi:"type"`
}

// ProfileRuleInput is an input type that accepts ProfileRuleArgs and ProfileRuleOutput values.
// You can construct a concrete instance of `ProfileRuleInput` via:
//
//	ProfileRuleArgs{...}
type ProfileRuleInput interface {
	pulumi.Input

	ToProfileRuleOutput() ProfileRuleOutput
	ToProfileRuleOutputWithContext(context.Context) ProfileRuleOutput
}

type ProfileRuleArgs struct {
	// Action to take with content that this DLP profile matches. Valid values: `allow`, `log-only`, `block`, `quarantine-ip`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Enable/disable DLP archiving. Valid values: `disable`, `enable`.
	Archive pulumi.StringPtrInput `pulumi:"archive"`
	// Quarantine duration in days, hours, minutes (format = dddhhmm).
	Expiry pulumi.StringPtrInput `pulumi:"expiry"`
	// Match files greater than or equal to this size (KB).
	FileSize pulumi.IntPtrInput `pulumi:"fileSize"`
	// Select the number of a DLP file pattern table to match.
	FileType pulumi.IntPtrInput `pulumi:"fileType"`
	// Select the type of content to match. Valid values: `sensor`, `mip`, `fingerprint`, `encrypted`, `none`.
	FilterBy pulumi.StringPtrInput `pulumi:"filterBy"`
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// MIP label dictionary.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Percentage of fingerprints in the fingerprint databases designated with the selected sensitivity to match.
	MatchPercentage pulumi.IntPtrInput `pulumi:"matchPercentage"`
	// Filter name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Check messages or files over one or more of these protocols. Valid values: `smtp`, `pop3`, `imap`, `http-get`, `http-post`, `ftp`, `nntp`, `mapi`, `ssh`, `cifs`.
	Proto pulumi.StringPtrInput `pulumi:"proto"`
	// Select a DLP file pattern sensitivity to match. The structure of `sensitivity` block is documented below.
	Sensitivities ProfileRuleSensitivityArrayInput `pulumi:"sensitivities"`
	// Select DLP sensors. The structure of `sensor` block is documented below.
	Sensors ProfileRuleSensorArrayInput `pulumi:"sensors"`
	// Select the severity or threat level that matches this filter. Valid values: `info`, `low`, `medium`, `high`, `critical`.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Select whether to check the content of messages (an email message) or files (downloaded files or email attachments). Valid values: `file`, `message`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ProfileRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileRule)(nil)).Elem()
}

func (i ProfileRuleArgs) ToProfileRuleOutput() ProfileRuleOutput {
	return i.ToProfileRuleOutputWithContext(context.Background())
}

func (i ProfileRuleArgs) ToProfileRuleOutputWithContext(ctx context.Context) ProfileRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileRuleOutput)
}

// ProfileRuleArrayInput is an input type that accepts ProfileRuleArray and ProfileRuleArrayOutput values.
// You can construct a concrete instance of `ProfileRuleArrayInput` via:
//
//	ProfileRuleArray{ ProfileRuleArgs{...} }
type ProfileRuleArrayInput interface {
	pulumi.Input

	ToProfileRuleArrayOutput() ProfileRuleArrayOutput
	ToProfileRuleArrayOutputWithContext(context.Context) ProfileRuleArrayOutput
}

type ProfileRuleArray []ProfileRuleInput

func (ProfileRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileRule)(nil)).Elem()
}

func (i ProfileRuleArray) ToProfileRuleArrayOutput() ProfileRuleArrayOutput {
	return i.ToProfileRuleArrayOutputWithContext(context.Background())
}

func (i ProfileRuleArray) ToProfileRuleArrayOutputWithContext(ctx context.Context) ProfileRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileRuleArrayOutput)
}

type ProfileRuleOutput struct{ *pulumi.OutputState }

func (ProfileRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileRule)(nil)).Elem()
}

func (o ProfileRuleOutput) ToProfileRuleOutput() ProfileRuleOutput {
	return o
}

func (o ProfileRuleOutput) ToProfileRuleOutputWithContext(ctx context.Context) ProfileRuleOutput {
	return o
}

// Action to take with content that this DLP profile matches. Valid values: `allow`, `log-only`, `block`, `quarantine-ip`.
func (o ProfileRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Enable/disable DLP archiving. Valid values: `disable`, `enable`.
func (o ProfileRuleOutput) Archive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileRule) *string { return v.Archive }).(pulumi.StringPtrOutput)
}

// Quarantine duration in days, hours, minutes (format = dddhhmm).
func (o ProfileRuleOutput) Expiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileRule) *string { return v.Expiry }).(pulumi.StringPtrOutput)
}

// Match files greater than or equal to this size (KB).
func (o ProfileRuleOutput) FileSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileRule) *int { return v.FileSize }).(pulumi.IntPtrOutput)
}

// Select the number of a DLP file pattern table to match.
func (o ProfileRuleOutput) FileType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileRule) *int { return v.FileType }).(pulumi.IntPtrOutput)
}

// Select the type of content to match. Valid values: `sensor`, `mip`, `fingerprint`, `encrypted`, `none`.
func (o ProfileRuleOutput) FilterBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileRule) *string { return v.FilterBy }).(pulumi.StringPtrOutput)
}

// ID.
func (o ProfileRuleOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileRule) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// MIP label dictionary.
func (o ProfileRuleOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileRule) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Percentage of fingerprints in the fingerprint databases designated with the selected sensitivity to match.
func (o ProfileRuleOutput) MatchPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileRule) *int { return v.MatchPercentage }).(pulumi.IntPtrOutput)
}

// Filter name.
func (o ProfileRuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileRule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Check messages or files over one or more of these protocols. Valid values: `smtp`, `pop3`, `imap`, `http-get`, `http-post`, `ftp`, `nntp`, `mapi`, `ssh`, `cifs`.
func (o ProfileRuleOutput) Proto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileRule) *string { return v.Proto }).(pulumi.StringPtrOutput)
}

// Select a DLP file pattern sensitivity to match. The structure of `sensitivity` block is documented below.
func (o ProfileRuleOutput) Sensitivities() ProfileRuleSensitivityArrayOutput {
	return o.ApplyT(func(v ProfileRule) []ProfileRuleSensitivity { return v.Sensitivities }).(ProfileRuleSensitivityArrayOutput)
}

// Select DLP sensors. The structure of `sensor` block is documented below.
func (o ProfileRuleOutput) Sensors() ProfileRuleSensorArrayOutput {
	return o.ApplyT(func(v ProfileRule) []ProfileRuleSensor { return v.Sensors }).(ProfileRuleSensorArrayOutput)
}

// Select the severity or threat level that matches this filter. Valid values: `info`, `low`, `medium`, `high`, `critical`.
func (o ProfileRuleOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileRule) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Select whether to check the content of messages (an email message) or files (downloaded files or email attachments). Valid values: `file`, `message`.
func (o ProfileRuleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileRule) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ProfileRuleArrayOutput struct{ *pulumi.OutputState }

func (ProfileRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileRule)(nil)).Elem()
}

func (o ProfileRuleArrayOutput) ToProfileRuleArrayOutput() ProfileRuleArrayOutput {
	return o
}

func (o ProfileRuleArrayOutput) ToProfileRuleArrayOutputWithContext(ctx context.Context) ProfileRuleArrayOutput {
	return o
}

func (o ProfileRuleArrayOutput) Index(i pulumi.IntInput) ProfileRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileRule {
		return vs[0].([]ProfileRule)[vs[1].(int)]
	}).(ProfileRuleOutput)
}

type ProfileRuleSensitivity struct {
	// Select a DLP sensitivity.
	Name *string `pulumi:"name"`
}

// ProfileRuleSensitivityInput is an input type that accepts ProfileRuleSensitivityArgs and ProfileRuleSensitivityOutput values.
// You can construct a concrete instance of `ProfileRuleSensitivityInput` via:
//
//	ProfileRuleSensitivityArgs{...}
type ProfileRuleSensitivityInput interface {
	pulumi.Input

	ToProfileRuleSensitivityOutput() ProfileRuleSensitivityOutput
	ToProfileRuleSensitivityOutputWithContext(context.Context) ProfileRuleSensitivityOutput
}

type ProfileRuleSensitivityArgs struct {
	// Select a DLP sensitivity.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ProfileRuleSensitivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileRuleSensitivity)(nil)).Elem()
}

func (i ProfileRuleSensitivityArgs) ToProfileRuleSensitivityOutput() ProfileRuleSensitivityOutput {
	return i.ToProfileRuleSensitivityOutputWithContext(context.Background())
}

func (i ProfileRuleSensitivityArgs) ToProfileRuleSensitivityOutputWithContext(ctx context.Context) ProfileRuleSensitivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileRuleSensitivityOutput)
}

// ProfileRuleSensitivityArrayInput is an input type that accepts ProfileRuleSensitivityArray and ProfileRuleSensitivityArrayOutput values.
// You can construct a concrete instance of `ProfileRuleSensitivityArrayInput` via:
//
//	ProfileRuleSensitivityArray{ ProfileRuleSensitivityArgs{...} }
type ProfileRuleSensitivityArrayInput interface {
	pulumi.Input

	ToProfileRuleSensitivityArrayOutput() ProfileRuleSensitivityArrayOutput
	ToProfileRuleSensitivityArrayOutputWithContext(context.Context) ProfileRuleSensitivityArrayOutput
}

type ProfileRuleSensitivityArray []ProfileRuleSensitivityInput

func (ProfileRuleSensitivityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileRuleSensitivity)(nil)).Elem()
}

func (i ProfileRuleSensitivityArray) ToProfileRuleSensitivityArrayOutput() ProfileRuleSensitivityArrayOutput {
	return i.ToProfileRuleSensitivityArrayOutputWithContext(context.Background())
}

func (i ProfileRuleSensitivityArray) ToProfileRuleSensitivityArrayOutputWithContext(ctx context.Context) ProfileRuleSensitivityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileRuleSensitivityArrayOutput)
}

type ProfileRuleSensitivityOutput struct{ *pulumi.OutputState }

func (ProfileRuleSensitivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileRuleSensitivity)(nil)).Elem()
}

func (o ProfileRuleSensitivityOutput) ToProfileRuleSensitivityOutput() ProfileRuleSensitivityOutput {
	return o
}

func (o ProfileRuleSensitivityOutput) ToProfileRuleSensitivityOutputWithContext(ctx context.Context) ProfileRuleSensitivityOutput {
	return o
}

// Select a DLP sensitivity.
func (o ProfileRuleSensitivityOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileRuleSensitivity) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ProfileRuleSensitivityArrayOutput struct{ *pulumi.OutputState }

func (ProfileRuleSensitivityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileRuleSensitivity)(nil)).Elem()
}

func (o ProfileRuleSensitivityArrayOutput) ToProfileRuleSensitivityArrayOutput() ProfileRuleSensitivityArrayOutput {
	return o
}

func (o ProfileRuleSensitivityArrayOutput) ToProfileRuleSensitivityArrayOutputWithContext(ctx context.Context) ProfileRuleSensitivityArrayOutput {
	return o
}

func (o ProfileRuleSensitivityArrayOutput) Index(i pulumi.IntInput) ProfileRuleSensitivityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileRuleSensitivity {
		return vs[0].([]ProfileRuleSensitivity)[vs[1].(int)]
	}).(ProfileRuleSensitivityOutput)
}

type ProfileRuleSensor struct {
	// Address name.
	Name *string `pulumi:"name"`
}

// ProfileRuleSensorInput is an input type that accepts ProfileRuleSensorArgs and ProfileRuleSensorOutput values.
// You can construct a concrete instance of `ProfileRuleSensorInput` via:
//
//	ProfileRuleSensorArgs{...}
type ProfileRuleSensorInput interface {
	pulumi.Input

	ToProfileRuleSensorOutput() ProfileRuleSensorOutput
	ToProfileRuleSensorOutputWithContext(context.Context) ProfileRuleSensorOutput
}

type ProfileRuleSensorArgs struct {
	// Address name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ProfileRuleSensorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileRuleSensor)(nil)).Elem()
}

func (i ProfileRuleSensorArgs) ToProfileRuleSensorOutput() ProfileRuleSensorOutput {
	return i.ToProfileRuleSensorOutputWithContext(context.Background())
}

func (i ProfileRuleSensorArgs) ToProfileRuleSensorOutputWithContext(ctx context.Context) ProfileRuleSensorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileRuleSensorOutput)
}

// ProfileRuleSensorArrayInput is an input type that accepts ProfileRuleSensorArray and ProfileRuleSensorArrayOutput values.
// You can construct a concrete instance of `ProfileRuleSensorArrayInput` via:
//
//	ProfileRuleSensorArray{ ProfileRuleSensorArgs{...} }
type ProfileRuleSensorArrayInput interface {
	pulumi.Input

	ToProfileRuleSensorArrayOutput() ProfileRuleSensorArrayOutput
	ToProfileRuleSensorArrayOutputWithContext(context.Context) ProfileRuleSensorArrayOutput
}

type ProfileRuleSensorArray []ProfileRuleSensorInput

func (ProfileRuleSensorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileRuleSensor)(nil)).Elem()
}

func (i ProfileRuleSensorArray) ToProfileRuleSensorArrayOutput() ProfileRuleSensorArrayOutput {
	return i.ToProfileRuleSensorArrayOutputWithContext(context.Background())
}

func (i ProfileRuleSensorArray) ToProfileRuleSensorArrayOutputWithContext(ctx context.Context) ProfileRuleSensorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileRuleSensorArrayOutput)
}

type ProfileRuleSensorOutput struct{ *pulumi.OutputState }

func (ProfileRuleSensorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileRuleSensor)(nil)).Elem()
}

func (o ProfileRuleSensorOutput) ToProfileRuleSensorOutput() ProfileRuleSensorOutput {
	return o
}

func (o ProfileRuleSensorOutput) ToProfileRuleSensorOutputWithContext(ctx context.Context) ProfileRuleSensorOutput {
	return o
}

// Address name.
func (o ProfileRuleSensorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileRuleSensor) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ProfileRuleSensorArrayOutput struct{ *pulumi.OutputState }

func (ProfileRuleSensorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileRuleSensor)(nil)).Elem()
}

func (o ProfileRuleSensorArrayOutput) ToProfileRuleSensorArrayOutput() ProfileRuleSensorArrayOutput {
	return o
}

func (o ProfileRuleSensorArrayOutput) ToProfileRuleSensorArrayOutputWithContext(ctx context.Context) ProfileRuleSensorArrayOutput {
	return o
}

func (o ProfileRuleSensorArrayOutput) Index(i pulumi.IntInput) ProfileRuleSensorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileRuleSensor {
		return vs[0].([]ProfileRuleSensor)[vs[1].(int)]
	}).(ProfileRuleSensorOutput)
}

type SensorEntry struct {
	// Count of dictionary matches to trigger sensor entry match (Dictionary might not be able to trigger more than once based on its 'repeat' option, 1 - 255, default = 1).
	Count *int `pulumi:"count"`
	// Select a DLP dictionary.
	Dictionary *string `pulumi:"dictionary"`
	// ID.
	Id *int `pulumi:"id"`
	// Enable/disable this entry. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
}

// SensorEntryInput is an input type that accepts SensorEntryArgs and SensorEntryOutput values.
// You can construct a concrete instance of `SensorEntryInput` via:
//
//	SensorEntryArgs{...}
type SensorEntryInput interface {
	pulumi.Input

	ToSensorEntryOutput() SensorEntryOutput
	ToSensorEntryOutputWithContext(context.Context) SensorEntryOutput
}

type SensorEntryArgs struct {
	// Count of dictionary matches to trigger sensor entry match (Dictionary might not be able to trigger more than once based on its 'repeat' option, 1 - 255, default = 1).
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Select a DLP dictionary.
	Dictionary pulumi.StringPtrInput `pulumi:"dictionary"`
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Enable/disable this entry. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (SensorEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorEntry)(nil)).Elem()
}

func (i SensorEntryArgs) ToSensorEntryOutput() SensorEntryOutput {
	return i.ToSensorEntryOutputWithContext(context.Background())
}

func (i SensorEntryArgs) ToSensorEntryOutputWithContext(ctx context.Context) SensorEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorEntryOutput)
}

// SensorEntryArrayInput is an input type that accepts SensorEntryArray and SensorEntryArrayOutput values.
// You can construct a concrete instance of `SensorEntryArrayInput` via:
//
//	SensorEntryArray{ SensorEntryArgs{...} }
type SensorEntryArrayInput interface {
	pulumi.Input

	ToSensorEntryArrayOutput() SensorEntryArrayOutput
	ToSensorEntryArrayOutputWithContext(context.Context) SensorEntryArrayOutput
}

type SensorEntryArray []SensorEntryInput

func (SensorEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorEntry)(nil)).Elem()
}

func (i SensorEntryArray) ToSensorEntryArrayOutput() SensorEntryArrayOutput {
	return i.ToSensorEntryArrayOutputWithContext(context.Background())
}

func (i SensorEntryArray) ToSensorEntryArrayOutputWithContext(ctx context.Context) SensorEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorEntryArrayOutput)
}

type SensorEntryOutput struct{ *pulumi.OutputState }

func (SensorEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorEntry)(nil)).Elem()
}

func (o SensorEntryOutput) ToSensorEntryOutput() SensorEntryOutput {
	return o
}

func (o SensorEntryOutput) ToSensorEntryOutputWithContext(ctx context.Context) SensorEntryOutput {
	return o
}

// Count of dictionary matches to trigger sensor entry match (Dictionary might not be able to trigger more than once based on its 'repeat' option, 1 - 255, default = 1).
func (o SensorEntryOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SensorEntry) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Select a DLP dictionary.
func (o SensorEntryOutput) Dictionary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.Dictionary }).(pulumi.StringPtrOutput)
}

// ID.
func (o SensorEntryOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SensorEntry) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Enable/disable this entry. Valid values: `enable`, `disable`.
func (o SensorEntryOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorEntry) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SensorEntryArrayOutput struct{ *pulumi.OutputState }

func (SensorEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorEntry)(nil)).Elem()
}

func (o SensorEntryArrayOutput) ToSensorEntryArrayOutput() SensorEntryArrayOutput {
	return o
}

func (o SensorEntryArrayOutput) ToSensorEntryArrayOutputWithContext(ctx context.Context) SensorEntryArrayOutput {
	return o
}

func (o SensorEntryArrayOutput) Index(i pulumi.IntInput) SensorEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SensorEntry {
		return vs[0].([]SensorEntry)[vs[1].(int)]
	}).(SensorEntryOutput)
}

type SensorFilter struct {
	// Action to take with content that this DLP sensor matches. Valid values: `allow`, `log-only`, `block`, `quarantine-ip`.
	Action *string `pulumi:"action"`
	// Enable/disable DLP archiving. Valid values: `disable`, `enable`.
	Archive *string `pulumi:"archive"`
	// Enter a company identifier watermark to match. Only watermarks that your company has placed on the files are matched.
	CompanyIdentifier *string `pulumi:"companyIdentifier"`
	// Quarantine duration in days, hours, minutes (format = dddhhmm).
	Expiry *string `pulumi:"expiry"`
	// Match files this size or larger (0 - 4294967295 kbytes).
	FileSize *int `pulumi:"fileSize"`
	// Select the number of a DLP file pattern table to match.
	FileType *int `pulumi:"fileType"`
	// Select the type of content to match.
	FilterBy *string `pulumi:"filterBy"`
	// Select a DLP file pattern sensitivity to match. The structure of `fpSensitivity` block is documented below.
	FpSensitivities []SensorFilterFpSensitivity `pulumi:"fpSensitivities"`
	// ID.
	Id *int `pulumi:"id"`
	// Percentage of fingerprints in the fingerprint databases designated with the selected fp-sensitivity to match.
	MatchPercentage *int `pulumi:"matchPercentage"`
	// Filter name.
	Name *string `pulumi:"name"`
	// Check messages or files over one or more of these protocols.
	Proto *string `pulumi:"proto"`
	// Enter a regular expression to match (max. 255 characters).
	Regexp *string `pulumi:"regexp"`
	// Select a DLP file pattern sensitivity to match. The structure of `sensitivity` block is documented below.
	Sensitivities []SensorFilterSensitivity `pulumi:"sensitivities"`
	// Select the severity or threat level that matches this filter. Valid values: `info`, `low`, `medium`, `high`, `critical`.
	Severity *string `pulumi:"severity"`
	// Select whether to check the content of messages (an email message) or files (downloaded files or email attachments).  Valid values: `file`, `message`.
	Type *string `pulumi:"type"`
}

// SensorFilterInput is an input type that accepts SensorFilterArgs and SensorFilterOutput values.
// You can construct a concrete instance of `SensorFilterInput` via:
//
//	SensorFilterArgs{...}
type SensorFilterInput interface {
	pulumi.Input

	ToSensorFilterOutput() SensorFilterOutput
	ToSensorFilterOutputWithContext(context.Context) SensorFilterOutput
}

type SensorFilterArgs struct {
	// Action to take with content that this DLP sensor matches. Valid values: `allow`, `log-only`, `block`, `quarantine-ip`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Enable/disable DLP archiving. Valid values: `disable`, `enable`.
	Archive pulumi.StringPtrInput `pulumi:"archive"`
	// Enter a company identifier watermark to match. Only watermarks that your company has placed on the files are matched.
	CompanyIdentifier pulumi.StringPtrInput `pulumi:"companyIdentifier"`
	// Quarantine duration in days, hours, minutes (format = dddhhmm).
	Expiry pulumi.StringPtrInput `pulumi:"expiry"`
	// Match files this size or larger (0 - 4294967295 kbytes).
	FileSize pulumi.IntPtrInput `pulumi:"fileSize"`
	// Select the number of a DLP file pattern table to match.
	FileType pulumi.IntPtrInput `pulumi:"fileType"`
	// Select the type of content to match.
	FilterBy pulumi.StringPtrInput `pulumi:"filterBy"`
	// Select a DLP file pattern sensitivity to match. The structure of `fpSensitivity` block is documented below.
	FpSensitivities SensorFilterFpSensitivityArrayInput `pulumi:"fpSensitivities"`
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Percentage of fingerprints in the fingerprint databases designated with the selected fp-sensitivity to match.
	MatchPercentage pulumi.IntPtrInput `pulumi:"matchPercentage"`
	// Filter name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Check messages or files over one or more of these protocols.
	Proto pulumi.StringPtrInput `pulumi:"proto"`
	// Enter a regular expression to match (max. 255 characters).
	Regexp pulumi.StringPtrInput `pulumi:"regexp"`
	// Select a DLP file pattern sensitivity to match. The structure of `sensitivity` block is documented below.
	Sensitivities SensorFilterSensitivityArrayInput `pulumi:"sensitivities"`
	// Select the severity or threat level that matches this filter. Valid values: `info`, `low`, `medium`, `high`, `critical`.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Select whether to check the content of messages (an email message) or files (downloaded files or email attachments).  Valid values: `file`, `message`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SensorFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorFilter)(nil)).Elem()
}

func (i SensorFilterArgs) ToSensorFilterOutput() SensorFilterOutput {
	return i.ToSensorFilterOutputWithContext(context.Background())
}

func (i SensorFilterArgs) ToSensorFilterOutputWithContext(ctx context.Context) SensorFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorFilterOutput)
}

// SensorFilterArrayInput is an input type that accepts SensorFilterArray and SensorFilterArrayOutput values.
// You can construct a concrete instance of `SensorFilterArrayInput` via:
//
//	SensorFilterArray{ SensorFilterArgs{...} }
type SensorFilterArrayInput interface {
	pulumi.Input

	ToSensorFilterArrayOutput() SensorFilterArrayOutput
	ToSensorFilterArrayOutputWithContext(context.Context) SensorFilterArrayOutput
}

type SensorFilterArray []SensorFilterInput

func (SensorFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorFilter)(nil)).Elem()
}

func (i SensorFilterArray) ToSensorFilterArrayOutput() SensorFilterArrayOutput {
	return i.ToSensorFilterArrayOutputWithContext(context.Background())
}

func (i SensorFilterArray) ToSensorFilterArrayOutputWithContext(ctx context.Context) SensorFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorFilterArrayOutput)
}

type SensorFilterOutput struct{ *pulumi.OutputState }

func (SensorFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorFilter)(nil)).Elem()
}

func (o SensorFilterOutput) ToSensorFilterOutput() SensorFilterOutput {
	return o
}

func (o SensorFilterOutput) ToSensorFilterOutputWithContext(ctx context.Context) SensorFilterOutput {
	return o
}

// Action to take with content that this DLP sensor matches. Valid values: `allow`, `log-only`, `block`, `quarantine-ip`.
func (o SensorFilterOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Enable/disable DLP archiving. Valid values: `disable`, `enable`.
func (o SensorFilterOutput) Archive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Archive }).(pulumi.StringPtrOutput)
}

// Enter a company identifier watermark to match. Only watermarks that your company has placed on the files are matched.
func (o SensorFilterOutput) CompanyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.CompanyIdentifier }).(pulumi.StringPtrOutput)
}

// Quarantine duration in days, hours, minutes (format = dddhhmm).
func (o SensorFilterOutput) Expiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Expiry }).(pulumi.StringPtrOutput)
}

// Match files this size or larger (0 - 4294967295 kbytes).
func (o SensorFilterOutput) FileSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SensorFilter) *int { return v.FileSize }).(pulumi.IntPtrOutput)
}

// Select the number of a DLP file pattern table to match.
func (o SensorFilterOutput) FileType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SensorFilter) *int { return v.FileType }).(pulumi.IntPtrOutput)
}

// Select the type of content to match.
func (o SensorFilterOutput) FilterBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.FilterBy }).(pulumi.StringPtrOutput)
}

// Select a DLP file pattern sensitivity to match. The structure of `fpSensitivity` block is documented below.
func (o SensorFilterOutput) FpSensitivities() SensorFilterFpSensitivityArrayOutput {
	return o.ApplyT(func(v SensorFilter) []SensorFilterFpSensitivity { return v.FpSensitivities }).(SensorFilterFpSensitivityArrayOutput)
}

// ID.
func (o SensorFilterOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SensorFilter) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Percentage of fingerprints in the fingerprint databases designated with the selected fp-sensitivity to match.
func (o SensorFilterOutput) MatchPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SensorFilter) *int { return v.MatchPercentage }).(pulumi.IntPtrOutput)
}

// Filter name.
func (o SensorFilterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Check messages or files over one or more of these protocols.
func (o SensorFilterOutput) Proto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Proto }).(pulumi.StringPtrOutput)
}

// Enter a regular expression to match (max. 255 characters).
func (o SensorFilterOutput) Regexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Regexp }).(pulumi.StringPtrOutput)
}

// Select a DLP file pattern sensitivity to match. The structure of `sensitivity` block is documented below.
func (o SensorFilterOutput) Sensitivities() SensorFilterSensitivityArrayOutput {
	return o.ApplyT(func(v SensorFilter) []SensorFilterSensitivity { return v.Sensitivities }).(SensorFilterSensitivityArrayOutput)
}

// Select the severity or threat level that matches this filter. Valid values: `info`, `low`, `medium`, `high`, `critical`.
func (o SensorFilterOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Select whether to check the content of messages (an email message) or files (downloaded files or email attachments).  Valid values: `file`, `message`.
func (o SensorFilterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SensorFilterArrayOutput struct{ *pulumi.OutputState }

func (SensorFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorFilter)(nil)).Elem()
}

func (o SensorFilterArrayOutput) ToSensorFilterArrayOutput() SensorFilterArrayOutput {
	return o
}

func (o SensorFilterArrayOutput) ToSensorFilterArrayOutputWithContext(ctx context.Context) SensorFilterArrayOutput {
	return o
}

func (o SensorFilterArrayOutput) Index(i pulumi.IntInput) SensorFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SensorFilter {
		return vs[0].([]SensorFilter)[vs[1].(int)]
	}).(SensorFilterOutput)
}

type SensorFilterFpSensitivity struct {
	// Select a DLP sensitivity.
	Name *string `pulumi:"name"`
}

// SensorFilterFpSensitivityInput is an input type that accepts SensorFilterFpSensitivityArgs and SensorFilterFpSensitivityOutput values.
// You can construct a concrete instance of `SensorFilterFpSensitivityInput` via:
//
//	SensorFilterFpSensitivityArgs{...}
type SensorFilterFpSensitivityInput interface {
	pulumi.Input

	ToSensorFilterFpSensitivityOutput() SensorFilterFpSensitivityOutput
	ToSensorFilterFpSensitivityOutputWithContext(context.Context) SensorFilterFpSensitivityOutput
}

type SensorFilterFpSensitivityArgs struct {
	// Select a DLP sensitivity.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SensorFilterFpSensitivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorFilterFpSensitivity)(nil)).Elem()
}

func (i SensorFilterFpSensitivityArgs) ToSensorFilterFpSensitivityOutput() SensorFilterFpSensitivityOutput {
	return i.ToSensorFilterFpSensitivityOutputWithContext(context.Background())
}

func (i SensorFilterFpSensitivityArgs) ToSensorFilterFpSensitivityOutputWithContext(ctx context.Context) SensorFilterFpSensitivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorFilterFpSensitivityOutput)
}

// SensorFilterFpSensitivityArrayInput is an input type that accepts SensorFilterFpSensitivityArray and SensorFilterFpSensitivityArrayOutput values.
// You can construct a concrete instance of `SensorFilterFpSensitivityArrayInput` via:
//
//	SensorFilterFpSensitivityArray{ SensorFilterFpSensitivityArgs{...} }
type SensorFilterFpSensitivityArrayInput interface {
	pulumi.Input

	ToSensorFilterFpSensitivityArrayOutput() SensorFilterFpSensitivityArrayOutput
	ToSensorFilterFpSensitivityArrayOutputWithContext(context.Context) SensorFilterFpSensitivityArrayOutput
}

type SensorFilterFpSensitivityArray []SensorFilterFpSensitivityInput

func (SensorFilterFpSensitivityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorFilterFpSensitivity)(nil)).Elem()
}

func (i SensorFilterFpSensitivityArray) ToSensorFilterFpSensitivityArrayOutput() SensorFilterFpSensitivityArrayOutput {
	return i.ToSensorFilterFpSensitivityArrayOutputWithContext(context.Background())
}

func (i SensorFilterFpSensitivityArray) ToSensorFilterFpSensitivityArrayOutputWithContext(ctx context.Context) SensorFilterFpSensitivityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorFilterFpSensitivityArrayOutput)
}

type SensorFilterFpSensitivityOutput struct{ *pulumi.OutputState }

func (SensorFilterFpSensitivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorFilterFpSensitivity)(nil)).Elem()
}

func (o SensorFilterFpSensitivityOutput) ToSensorFilterFpSensitivityOutput() SensorFilterFpSensitivityOutput {
	return o
}

func (o SensorFilterFpSensitivityOutput) ToSensorFilterFpSensitivityOutputWithContext(ctx context.Context) SensorFilterFpSensitivityOutput {
	return o
}

// Select a DLP sensitivity.
func (o SensorFilterFpSensitivityOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilterFpSensitivity) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SensorFilterFpSensitivityArrayOutput struct{ *pulumi.OutputState }

func (SensorFilterFpSensitivityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorFilterFpSensitivity)(nil)).Elem()
}

func (o SensorFilterFpSensitivityArrayOutput) ToSensorFilterFpSensitivityArrayOutput() SensorFilterFpSensitivityArrayOutput {
	return o
}

func (o SensorFilterFpSensitivityArrayOutput) ToSensorFilterFpSensitivityArrayOutputWithContext(ctx context.Context) SensorFilterFpSensitivityArrayOutput {
	return o
}

func (o SensorFilterFpSensitivityArrayOutput) Index(i pulumi.IntInput) SensorFilterFpSensitivityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SensorFilterFpSensitivity {
		return vs[0].([]SensorFilterFpSensitivity)[vs[1].(int)]
	}).(SensorFilterFpSensitivityOutput)
}

type SensorFilterSensitivity struct {
	// Select a DLP sensitivity.
	Name *string `pulumi:"name"`
}

// SensorFilterSensitivityInput is an input type that accepts SensorFilterSensitivityArgs and SensorFilterSensitivityOutput values.
// You can construct a concrete instance of `SensorFilterSensitivityInput` via:
//
//	SensorFilterSensitivityArgs{...}
type SensorFilterSensitivityInput interface {
	pulumi.Input

	ToSensorFilterSensitivityOutput() SensorFilterSensitivityOutput
	ToSensorFilterSensitivityOutputWithContext(context.Context) SensorFilterSensitivityOutput
}

type SensorFilterSensitivityArgs struct {
	// Select a DLP sensitivity.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SensorFilterSensitivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorFilterSensitivity)(nil)).Elem()
}

func (i SensorFilterSensitivityArgs) ToSensorFilterSensitivityOutput() SensorFilterSensitivityOutput {
	return i.ToSensorFilterSensitivityOutputWithContext(context.Background())
}

func (i SensorFilterSensitivityArgs) ToSensorFilterSensitivityOutputWithContext(ctx context.Context) SensorFilterSensitivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorFilterSensitivityOutput)
}

// SensorFilterSensitivityArrayInput is an input type that accepts SensorFilterSensitivityArray and SensorFilterSensitivityArrayOutput values.
// You can construct a concrete instance of `SensorFilterSensitivityArrayInput` via:
//
//	SensorFilterSensitivityArray{ SensorFilterSensitivityArgs{...} }
type SensorFilterSensitivityArrayInput interface {
	pulumi.Input

	ToSensorFilterSensitivityArrayOutput() SensorFilterSensitivityArrayOutput
	ToSensorFilterSensitivityArrayOutputWithContext(context.Context) SensorFilterSensitivityArrayOutput
}

type SensorFilterSensitivityArray []SensorFilterSensitivityInput

func (SensorFilterSensitivityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorFilterSensitivity)(nil)).Elem()
}

func (i SensorFilterSensitivityArray) ToSensorFilterSensitivityArrayOutput() SensorFilterSensitivityArrayOutput {
	return i.ToSensorFilterSensitivityArrayOutputWithContext(context.Background())
}

func (i SensorFilterSensitivityArray) ToSensorFilterSensitivityArrayOutputWithContext(ctx context.Context) SensorFilterSensitivityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorFilterSensitivityArrayOutput)
}

type SensorFilterSensitivityOutput struct{ *pulumi.OutputState }

func (SensorFilterSensitivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorFilterSensitivity)(nil)).Elem()
}

func (o SensorFilterSensitivityOutput) ToSensorFilterSensitivityOutput() SensorFilterSensitivityOutput {
	return o
}

func (o SensorFilterSensitivityOutput) ToSensorFilterSensitivityOutputWithContext(ctx context.Context) SensorFilterSensitivityOutput {
	return o
}

// Select a DLP sensitivity.
func (o SensorFilterSensitivityOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorFilterSensitivity) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SensorFilterSensitivityArrayOutput struct{ *pulumi.OutputState }

func (SensorFilterSensitivityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorFilterSensitivity)(nil)).Elem()
}

func (o SensorFilterSensitivityArrayOutput) ToSensorFilterSensitivityArrayOutput() SensorFilterSensitivityArrayOutput {
	return o
}

func (o SensorFilterSensitivityArrayOutput) ToSensorFilterSensitivityArrayOutputWithContext(ctx context.Context) SensorFilterSensitivityArrayOutput {
	return o
}

func (o SensorFilterSensitivityArrayOutput) Index(i pulumi.IntInput) SensorFilterSensitivityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SensorFilterSensitivity {
		return vs[0].([]SensorFilterSensitivity)[vs[1].(int)]
	}).(SensorFilterSensitivityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DictionaryEntryInput)(nil)).Elem(), DictionaryEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DictionaryEntryArrayInput)(nil)).Elem(), DictionaryEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExactdatamatchColumnInput)(nil)).Elem(), ExactdatamatchColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExactdatamatchColumnArrayInput)(nil)).Elem(), ExactdatamatchColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FilepatternEntryInput)(nil)).Elem(), FilepatternEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FilepatternEntryArrayInput)(nil)).Elem(), FilepatternEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileRuleInput)(nil)).Elem(), ProfileRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileRuleArrayInput)(nil)).Elem(), ProfileRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileRuleSensitivityInput)(nil)).Elem(), ProfileRuleSensitivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileRuleSensitivityArrayInput)(nil)).Elem(), ProfileRuleSensitivityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileRuleSensorInput)(nil)).Elem(), ProfileRuleSensorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileRuleSensorArrayInput)(nil)).Elem(), ProfileRuleSensorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorEntryInput)(nil)).Elem(), SensorEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorEntryArrayInput)(nil)).Elem(), SensorEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorFilterInput)(nil)).Elem(), SensorFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorFilterArrayInput)(nil)).Elem(), SensorFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorFilterFpSensitivityInput)(nil)).Elem(), SensorFilterFpSensitivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorFilterFpSensitivityArrayInput)(nil)).Elem(), SensorFilterFpSensitivityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorFilterSensitivityInput)(nil)).Elem(), SensorFilterSensitivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorFilterSensitivityArrayInput)(nil)).Elem(), SensorFilterSensitivityArray{})
	pulumi.RegisterOutputType(DictionaryEntryOutput{})
	pulumi.RegisterOutputType(DictionaryEntryArrayOutput{})
	pulumi.RegisterOutputType(ExactdatamatchColumnOutput{})
	pulumi.RegisterOutputType(ExactdatamatchColumnArrayOutput{})
	pulumi.RegisterOutputType(FilepatternEntryOutput{})
	pulumi.RegisterOutputType(FilepatternEntryArrayOutput{})
	pulumi.RegisterOutputType(ProfileRuleOutput{})
	pulumi.RegisterOutputType(ProfileRuleArrayOutput{})
	pulumi.RegisterOutputType(ProfileRuleSensitivityOutput{})
	pulumi.RegisterOutputType(ProfileRuleSensitivityArrayOutput{})
	pulumi.RegisterOutputType(ProfileRuleSensorOutput{})
	pulumi.RegisterOutputType(ProfileRuleSensorArrayOutput{})
	pulumi.RegisterOutputType(SensorEntryOutput{})
	pulumi.RegisterOutputType(SensorEntryArrayOutput{})
	pulumi.RegisterOutputType(SensorFilterOutput{})
	pulumi.RegisterOutputType(SensorFilterArrayOutput{})
	pulumi.RegisterOutputType(SensorFilterFpSensitivityOutput{})
	pulumi.RegisterOutputType(SensorFilterFpSensitivityArrayOutput{})
	pulumi.RegisterOutputType(SensorFilterSensitivityOutput{})
	pulumi.RegisterOutputType(SensorFilterSensitivityArrayOutput{})
}
