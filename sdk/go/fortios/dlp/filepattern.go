// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dlp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure file patterns used by DLP blocking.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/dlp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dlp.NewFilepattern(ctx, "trname", &dlp.FilepatternArgs{
//				Fosid: pulumi.Int(9),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Dlp Filepattern can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:dlp/filepattern:Filepattern labelname {{fosid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:dlp/filepattern:Filepattern labelname {{fosid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Filepattern struct {
	pulumi.CustomResourceState

	// Optional comments.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Configure file patterns used by DLP blocking. The structure of `entries` block is documented below.
	Entries FilepatternEntryArrayOutput `pulumi:"entries"`
	// ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Name of table containing the file pattern list.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFilepattern registers a new resource with the given unique name, arguments, and options.
func NewFilepattern(ctx *pulumi.Context,
	name string, args *FilepatternArgs, opts ...pulumi.ResourceOption) (*Filepattern, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Filepattern
	err := ctx.RegisterResource("fortios:dlp/filepattern:Filepattern", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFilepattern gets an existing Filepattern resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFilepattern(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FilepatternState, opts ...pulumi.ResourceOption) (*Filepattern, error) {
	var resource Filepattern
	err := ctx.ReadResource("fortios:dlp/filepattern:Filepattern", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Filepattern resources.
type filepatternState struct {
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Configure file patterns used by DLP blocking. The structure of `entries` block is documented below.
	Entries []FilepatternEntry `pulumi:"entries"`
	// ID.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Name of table containing the file pattern list.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FilepatternState struct {
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Configure file patterns used by DLP blocking. The structure of `entries` block is documented below.
	Entries FilepatternEntryArrayInput
	// ID.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Name of table containing the file pattern list.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FilepatternState) ElementType() reflect.Type {
	return reflect.TypeOf((*filepatternState)(nil)).Elem()
}

type filepatternArgs struct {
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Configure file patterns used by DLP blocking. The structure of `entries` block is documented below.
	Entries []FilepatternEntry `pulumi:"entries"`
	// ID.
	Fosid int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Name of table containing the file pattern list.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Filepattern resource.
type FilepatternArgs struct {
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Configure file patterns used by DLP blocking. The structure of `entries` block is documented below.
	Entries FilepatternEntryArrayInput
	// ID.
	Fosid pulumi.IntInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Name of table containing the file pattern list.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FilepatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*filepatternArgs)(nil)).Elem()
}

type FilepatternInput interface {
	pulumi.Input

	ToFilepatternOutput() FilepatternOutput
	ToFilepatternOutputWithContext(ctx context.Context) FilepatternOutput
}

func (*Filepattern) ElementType() reflect.Type {
	return reflect.TypeOf((**Filepattern)(nil)).Elem()
}

func (i *Filepattern) ToFilepatternOutput() FilepatternOutput {
	return i.ToFilepatternOutputWithContext(context.Background())
}

func (i *Filepattern) ToFilepatternOutputWithContext(ctx context.Context) FilepatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilepatternOutput)
}

// FilepatternArrayInput is an input type that accepts FilepatternArray and FilepatternArrayOutput values.
// You can construct a concrete instance of `FilepatternArrayInput` via:
//
//	FilepatternArray{ FilepatternArgs{...} }
type FilepatternArrayInput interface {
	pulumi.Input

	ToFilepatternArrayOutput() FilepatternArrayOutput
	ToFilepatternArrayOutputWithContext(context.Context) FilepatternArrayOutput
}

type FilepatternArray []FilepatternInput

func (FilepatternArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Filepattern)(nil)).Elem()
}

func (i FilepatternArray) ToFilepatternArrayOutput() FilepatternArrayOutput {
	return i.ToFilepatternArrayOutputWithContext(context.Background())
}

func (i FilepatternArray) ToFilepatternArrayOutputWithContext(ctx context.Context) FilepatternArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilepatternArrayOutput)
}

// FilepatternMapInput is an input type that accepts FilepatternMap and FilepatternMapOutput values.
// You can construct a concrete instance of `FilepatternMapInput` via:
//
//	FilepatternMap{ "key": FilepatternArgs{...} }
type FilepatternMapInput interface {
	pulumi.Input

	ToFilepatternMapOutput() FilepatternMapOutput
	ToFilepatternMapOutputWithContext(context.Context) FilepatternMapOutput
}

type FilepatternMap map[string]FilepatternInput

func (FilepatternMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Filepattern)(nil)).Elem()
}

func (i FilepatternMap) ToFilepatternMapOutput() FilepatternMapOutput {
	return i.ToFilepatternMapOutputWithContext(context.Background())
}

func (i FilepatternMap) ToFilepatternMapOutputWithContext(ctx context.Context) FilepatternMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilepatternMapOutput)
}

type FilepatternOutput struct{ *pulumi.OutputState }

func (FilepatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Filepattern)(nil)).Elem()
}

func (o FilepatternOutput) ToFilepatternOutput() FilepatternOutput {
	return o
}

func (o FilepatternOutput) ToFilepatternOutputWithContext(ctx context.Context) FilepatternOutput {
	return o
}

// Optional comments.
func (o FilepatternOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Filepattern) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o FilepatternOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Filepattern) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Configure file patterns used by DLP blocking. The structure of `entries` block is documented below.
func (o FilepatternOutput) Entries() FilepatternEntryArrayOutput {
	return o.ApplyT(func(v *Filepattern) FilepatternEntryArrayOutput { return v.Entries }).(FilepatternEntryArrayOutput)
}

// ID.
func (o FilepatternOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *Filepattern) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o FilepatternOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Filepattern) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Name of table containing the file pattern list.
func (o FilepatternOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Filepattern) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o FilepatternOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Filepattern) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FilepatternArrayOutput struct{ *pulumi.OutputState }

func (FilepatternArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Filepattern)(nil)).Elem()
}

func (o FilepatternArrayOutput) ToFilepatternArrayOutput() FilepatternArrayOutput {
	return o
}

func (o FilepatternArrayOutput) ToFilepatternArrayOutputWithContext(ctx context.Context) FilepatternArrayOutput {
	return o
}

func (o FilepatternArrayOutput) Index(i pulumi.IntInput) FilepatternOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Filepattern {
		return vs[0].([]*Filepattern)[vs[1].(int)]
	}).(FilepatternOutput)
}

type FilepatternMapOutput struct{ *pulumi.OutputState }

func (FilepatternMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Filepattern)(nil)).Elem()
}

func (o FilepatternMapOutput) ToFilepatternMapOutput() FilepatternMapOutput {
	return o
}

func (o FilepatternMapOutput) ToFilepatternMapOutputWithContext(ctx context.Context) FilepatternMapOutput {
	return o
}

func (o FilepatternMapOutput) MapIndex(k pulumi.StringInput) FilepatternOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Filepattern {
		return vs[0].(map[string]*Filepattern)[vs[1].(string)]
	}).(FilepatternOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FilepatternInput)(nil)).Elem(), &Filepattern{})
	pulumi.RegisterInputType(reflect.TypeOf((*FilepatternArrayInput)(nil)).Elem(), FilepatternArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FilepatternMapInput)(nil)).Elem(), FilepatternMap{})
	pulumi.RegisterOutputType(FilepatternOutput{})
	pulumi.RegisterOutputType(FilepatternArrayOutput{})
	pulumi.RegisterOutputType(FilepatternMapOutput{})
}
