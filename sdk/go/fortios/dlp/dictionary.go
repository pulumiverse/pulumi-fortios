// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dlp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure dictionaries used by DLP blocking. Applies to FortiOS Version `>= 7.2.0`.
//
// ## Import
//
// Dlp Dictionary can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:dlp/dictionary:Dictionary labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:dlp/dictionary:Dictionary labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Dictionary struct {
	pulumi.CustomResourceState

	// Optional comments.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// DLP dictionary entries. The structure of `entries` block is documented below.
	Entries DictionaryEntryArrayOutput `pulumi:"entries"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Enable/disable match-around support. Valid values: `enable`, `disable`.
	MatchAround pulumi.StringOutput `pulumi:"matchAround"`
	// Logical relation between entries (default = match-any). Valid values: `match-all`, `match-any`.
	MatchType pulumi.StringOutput `pulumi:"matchType"`
	// Name of table containing the dictionary.
	Name pulumi.StringOutput `pulumi:"name"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewDictionary registers a new resource with the given unique name, arguments, and options.
func NewDictionary(ctx *pulumi.Context,
	name string, args *DictionaryArgs, opts ...pulumi.ResourceOption) (*Dictionary, error) {
	if args == nil {
		args = &DictionaryArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dictionary
	err := ctx.RegisterResource("fortios:dlp/dictionary:Dictionary", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDictionary gets an existing Dictionary resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDictionary(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DictionaryState, opts ...pulumi.ResourceOption) (*Dictionary, error) {
	var resource Dictionary
	err := ctx.ReadResource("fortios:dlp/dictionary:Dictionary", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dictionary resources.
type dictionaryState struct {
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// DLP dictionary entries. The structure of `entries` block is documented below.
	Entries []DictionaryEntry `pulumi:"entries"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable match-around support. Valid values: `enable`, `disable`.
	MatchAround *string `pulumi:"matchAround"`
	// Logical relation between entries (default = match-any). Valid values: `match-all`, `match-any`.
	MatchType *string `pulumi:"matchType"`
	// Name of table containing the dictionary.
	Name *string `pulumi:"name"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type DictionaryState struct {
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// DLP dictionary entries. The structure of `entries` block is documented below.
	Entries DictionaryEntryArrayInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable match-around support. Valid values: `enable`, `disable`.
	MatchAround pulumi.StringPtrInput
	// Logical relation between entries (default = match-any). Valid values: `match-all`, `match-any`.
	MatchType pulumi.StringPtrInput
	// Name of table containing the dictionary.
	Name pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (DictionaryState) ElementType() reflect.Type {
	return reflect.TypeOf((*dictionaryState)(nil)).Elem()
}

type dictionaryArgs struct {
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// DLP dictionary entries. The structure of `entries` block is documented below.
	Entries []DictionaryEntry `pulumi:"entries"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable match-around support. Valid values: `enable`, `disable`.
	MatchAround *string `pulumi:"matchAround"`
	// Logical relation between entries (default = match-any). Valid values: `match-all`, `match-any`.
	MatchType *string `pulumi:"matchType"`
	// Name of table containing the dictionary.
	Name *string `pulumi:"name"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Dictionary resource.
type DictionaryArgs struct {
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// DLP dictionary entries. The structure of `entries` block is documented below.
	Entries DictionaryEntryArrayInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable match-around support. Valid values: `enable`, `disable`.
	MatchAround pulumi.StringPtrInput
	// Logical relation between entries (default = match-any). Valid values: `match-all`, `match-any`.
	MatchType pulumi.StringPtrInput
	// Name of table containing the dictionary.
	Name pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (DictionaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dictionaryArgs)(nil)).Elem()
}

type DictionaryInput interface {
	pulumi.Input

	ToDictionaryOutput() DictionaryOutput
	ToDictionaryOutputWithContext(ctx context.Context) DictionaryOutput
}

func (*Dictionary) ElementType() reflect.Type {
	return reflect.TypeOf((**Dictionary)(nil)).Elem()
}

func (i *Dictionary) ToDictionaryOutput() DictionaryOutput {
	return i.ToDictionaryOutputWithContext(context.Background())
}

func (i *Dictionary) ToDictionaryOutputWithContext(ctx context.Context) DictionaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DictionaryOutput)
}

// DictionaryArrayInput is an input type that accepts DictionaryArray and DictionaryArrayOutput values.
// You can construct a concrete instance of `DictionaryArrayInput` via:
//
//	DictionaryArray{ DictionaryArgs{...} }
type DictionaryArrayInput interface {
	pulumi.Input

	ToDictionaryArrayOutput() DictionaryArrayOutput
	ToDictionaryArrayOutputWithContext(context.Context) DictionaryArrayOutput
}

type DictionaryArray []DictionaryInput

func (DictionaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dictionary)(nil)).Elem()
}

func (i DictionaryArray) ToDictionaryArrayOutput() DictionaryArrayOutput {
	return i.ToDictionaryArrayOutputWithContext(context.Background())
}

func (i DictionaryArray) ToDictionaryArrayOutputWithContext(ctx context.Context) DictionaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DictionaryArrayOutput)
}

// DictionaryMapInput is an input type that accepts DictionaryMap and DictionaryMapOutput values.
// You can construct a concrete instance of `DictionaryMapInput` via:
//
//	DictionaryMap{ "key": DictionaryArgs{...} }
type DictionaryMapInput interface {
	pulumi.Input

	ToDictionaryMapOutput() DictionaryMapOutput
	ToDictionaryMapOutputWithContext(context.Context) DictionaryMapOutput
}

type DictionaryMap map[string]DictionaryInput

func (DictionaryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dictionary)(nil)).Elem()
}

func (i DictionaryMap) ToDictionaryMapOutput() DictionaryMapOutput {
	return i.ToDictionaryMapOutputWithContext(context.Background())
}

func (i DictionaryMap) ToDictionaryMapOutputWithContext(ctx context.Context) DictionaryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DictionaryMapOutput)
}

type DictionaryOutput struct{ *pulumi.OutputState }

func (DictionaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dictionary)(nil)).Elem()
}

func (o DictionaryOutput) ToDictionaryOutput() DictionaryOutput {
	return o
}

func (o DictionaryOutput) ToDictionaryOutputWithContext(ctx context.Context) DictionaryOutput {
	return o
}

// Optional comments.
func (o DictionaryOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dictionary) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o DictionaryOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dictionary) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// DLP dictionary entries. The structure of `entries` block is documented below.
func (o DictionaryOutput) Entries() DictionaryEntryArrayOutput {
	return o.ApplyT(func(v *Dictionary) DictionaryEntryArrayOutput { return v.Entries }).(DictionaryEntryArrayOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o DictionaryOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dictionary) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Enable/disable match-around support. Valid values: `enable`, `disable`.
func (o DictionaryOutput) MatchAround() pulumi.StringOutput {
	return o.ApplyT(func(v *Dictionary) pulumi.StringOutput { return v.MatchAround }).(pulumi.StringOutput)
}

// Logical relation between entries (default = match-any). Valid values: `match-all`, `match-any`.
func (o DictionaryOutput) MatchType() pulumi.StringOutput {
	return o.ApplyT(func(v *Dictionary) pulumi.StringOutput { return v.MatchType }).(pulumi.StringOutput)
}

// Name of table containing the dictionary.
func (o DictionaryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dictionary) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o DictionaryOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Dictionary) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o DictionaryOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dictionary) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type DictionaryArrayOutput struct{ *pulumi.OutputState }

func (DictionaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dictionary)(nil)).Elem()
}

func (o DictionaryArrayOutput) ToDictionaryArrayOutput() DictionaryArrayOutput {
	return o
}

func (o DictionaryArrayOutput) ToDictionaryArrayOutputWithContext(ctx context.Context) DictionaryArrayOutput {
	return o
}

func (o DictionaryArrayOutput) Index(i pulumi.IntInput) DictionaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dictionary {
		return vs[0].([]*Dictionary)[vs[1].(int)]
	}).(DictionaryOutput)
}

type DictionaryMapOutput struct{ *pulumi.OutputState }

func (DictionaryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dictionary)(nil)).Elem()
}

func (o DictionaryMapOutput) ToDictionaryMapOutput() DictionaryMapOutput {
	return o
}

func (o DictionaryMapOutput) ToDictionaryMapOutputWithContext(ctx context.Context) DictionaryMapOutput {
	return o
}

func (o DictionaryMapOutput) MapIndex(k pulumi.StringInput) DictionaryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dictionary {
		return vs[0].(map[string]*Dictionary)[vs[1].(string)]
	}).(DictionaryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DictionaryInput)(nil)).Elem(), &Dictionary{})
	pulumi.RegisterInputType(reflect.TypeOf((*DictionaryArrayInput)(nil)).Elem(), DictionaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DictionaryMapInput)(nil)).Elem(), DictionaryMap{})
	pulumi.RegisterOutputType(DictionaryOutput{})
	pulumi.RegisterOutputType(DictionaryArrayOutput{})
	pulumi.RegisterOutputType(DictionaryMapOutput{})
}
