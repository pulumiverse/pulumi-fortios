// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dlp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure DLP sensors.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/dlp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dlp.NewSensor(ctx, "trname", &dlp.SensorArgs{
//				DlpLog:       pulumi.String("enable"),
//				ExtendedLog:  pulumi.String("disable"),
//				FlowBased:    pulumi.String("enable"),
//				NacQuarLog:   pulumi.String("disable"),
//				SummaryProto: pulumi.String("smtp pop3"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Dlp Sensor can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:dlp/sensor:Sensor labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:dlp/sensor:Sensor labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Sensor struct {
	pulumi.CustomResourceState

	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Enable/disable DLP logging. Valid values: `enable`, `disable`.
	DlpLog pulumi.StringOutput `pulumi:"dlpLog"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// DLP sensor entries. The structure of `entries` block is documented below.
	Entries SensorEntryArrayOutput `pulumi:"entries"`
	// Expression to evaluate.
	Eval pulumi.StringOutput `pulumi:"eval"`
	// Enable/disable extended logging for data leak prevention. Valid values: `enable`, `disable`.
	ExtendedLog pulumi.StringOutput `pulumi:"extendedLog"`
	// Flow/proxy feature set. Valid values: `flow`, `proxy`.
	FeatureSet pulumi.StringOutput `pulumi:"featureSet"`
	// Set up DLP filters for this sensor. The structure of `filter` block is documented below.
	Filters SensorFilterArrayOutput `pulumi:"filters"`
	// Enable/disable flow-based DLP. Valid values: `enable`, `disable`.
	FlowBased pulumi.StringOutput `pulumi:"flowBased"`
	// Protocols to always content archive.
	FullArchiveProto pulumi.StringOutput `pulumi:"fullArchiveProto"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Logical relation between entries (default = match-any). Valid values: `match-all`, `match-any`, `match-eval`.
	MatchType pulumi.StringOutput `pulumi:"matchType"`
	// Enable/disable NAC quarantine logging. Valid values: `enable`, `disable`.
	NacQuarLog pulumi.StringOutput `pulumi:"nacQuarLog"`
	// Name of the DLP sensor.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configure DLP options.
	Options pulumi.StringOutput `pulumi:"options"`
	// Replacement message group used by this DLP sensor.
	ReplacemsgGroup pulumi.StringOutput `pulumi:"replacemsgGroup"`
	// Protocols to always log summary.
	SummaryProto pulumi.StringOutput `pulumi:"summaryProto"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSensor registers a new resource with the given unique name, arguments, and options.
func NewSensor(ctx *pulumi.Context,
	name string, args *SensorArgs, opts ...pulumi.ResourceOption) (*Sensor, error) {
	if args == nil {
		args = &SensorArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Sensor
	err := ctx.RegisterResource("fortios:dlp/sensor:Sensor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSensor gets an existing Sensor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSensor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SensorState, opts ...pulumi.ResourceOption) (*Sensor, error) {
	var resource Sensor
	err := ctx.ReadResource("fortios:dlp/sensor:Sensor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sensor resources.
type sensorState struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Enable/disable DLP logging. Valid values: `enable`, `disable`.
	DlpLog *string `pulumi:"dlpLog"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// DLP sensor entries. The structure of `entries` block is documented below.
	Entries []SensorEntry `pulumi:"entries"`
	// Expression to evaluate.
	Eval *string `pulumi:"eval"`
	// Enable/disable extended logging for data leak prevention. Valid values: `enable`, `disable`.
	ExtendedLog *string `pulumi:"extendedLog"`
	// Flow/proxy feature set. Valid values: `flow`, `proxy`.
	FeatureSet *string `pulumi:"featureSet"`
	// Set up DLP filters for this sensor. The structure of `filter` block is documented below.
	Filters []SensorFilter `pulumi:"filters"`
	// Enable/disable flow-based DLP. Valid values: `enable`, `disable`.
	FlowBased *string `pulumi:"flowBased"`
	// Protocols to always content archive.
	FullArchiveProto *string `pulumi:"fullArchiveProto"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Logical relation between entries (default = match-any). Valid values: `match-all`, `match-any`, `match-eval`.
	MatchType *string `pulumi:"matchType"`
	// Enable/disable NAC quarantine logging. Valid values: `enable`, `disable`.
	NacQuarLog *string `pulumi:"nacQuarLog"`
	// Name of the DLP sensor.
	Name *string `pulumi:"name"`
	// Configure DLP options.
	Options *string `pulumi:"options"`
	// Replacement message group used by this DLP sensor.
	ReplacemsgGroup *string `pulumi:"replacemsgGroup"`
	// Protocols to always log summary.
	SummaryProto *string `pulumi:"summaryProto"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SensorState struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Enable/disable DLP logging. Valid values: `enable`, `disable`.
	DlpLog pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// DLP sensor entries. The structure of `entries` block is documented below.
	Entries SensorEntryArrayInput
	// Expression to evaluate.
	Eval pulumi.StringPtrInput
	// Enable/disable extended logging for data leak prevention. Valid values: `enable`, `disable`.
	ExtendedLog pulumi.StringPtrInput
	// Flow/proxy feature set. Valid values: `flow`, `proxy`.
	FeatureSet pulumi.StringPtrInput
	// Set up DLP filters for this sensor. The structure of `filter` block is documented below.
	Filters SensorFilterArrayInput
	// Enable/disable flow-based DLP. Valid values: `enable`, `disable`.
	FlowBased pulumi.StringPtrInput
	// Protocols to always content archive.
	FullArchiveProto pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Logical relation between entries (default = match-any). Valid values: `match-all`, `match-any`, `match-eval`.
	MatchType pulumi.StringPtrInput
	// Enable/disable NAC quarantine logging. Valid values: `enable`, `disable`.
	NacQuarLog pulumi.StringPtrInput
	// Name of the DLP sensor.
	Name pulumi.StringPtrInput
	// Configure DLP options.
	Options pulumi.StringPtrInput
	// Replacement message group used by this DLP sensor.
	ReplacemsgGroup pulumi.StringPtrInput
	// Protocols to always log summary.
	SummaryProto pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SensorState) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorState)(nil)).Elem()
}

type sensorArgs struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Enable/disable DLP logging. Valid values: `enable`, `disable`.
	DlpLog *string `pulumi:"dlpLog"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// DLP sensor entries. The structure of `entries` block is documented below.
	Entries []SensorEntry `pulumi:"entries"`
	// Expression to evaluate.
	Eval *string `pulumi:"eval"`
	// Enable/disable extended logging for data leak prevention. Valid values: `enable`, `disable`.
	ExtendedLog *string `pulumi:"extendedLog"`
	// Flow/proxy feature set. Valid values: `flow`, `proxy`.
	FeatureSet *string `pulumi:"featureSet"`
	// Set up DLP filters for this sensor. The structure of `filter` block is documented below.
	Filters []SensorFilter `pulumi:"filters"`
	// Enable/disable flow-based DLP. Valid values: `enable`, `disable`.
	FlowBased *string `pulumi:"flowBased"`
	// Protocols to always content archive.
	FullArchiveProto *string `pulumi:"fullArchiveProto"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Logical relation between entries (default = match-any). Valid values: `match-all`, `match-any`, `match-eval`.
	MatchType *string `pulumi:"matchType"`
	// Enable/disable NAC quarantine logging. Valid values: `enable`, `disable`.
	NacQuarLog *string `pulumi:"nacQuarLog"`
	// Name of the DLP sensor.
	Name *string `pulumi:"name"`
	// Configure DLP options.
	Options *string `pulumi:"options"`
	// Replacement message group used by this DLP sensor.
	ReplacemsgGroup *string `pulumi:"replacemsgGroup"`
	// Protocols to always log summary.
	SummaryProto *string `pulumi:"summaryProto"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Sensor resource.
type SensorArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Enable/disable DLP logging. Valid values: `enable`, `disable`.
	DlpLog pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// DLP sensor entries. The structure of `entries` block is documented below.
	Entries SensorEntryArrayInput
	// Expression to evaluate.
	Eval pulumi.StringPtrInput
	// Enable/disable extended logging for data leak prevention. Valid values: `enable`, `disable`.
	ExtendedLog pulumi.StringPtrInput
	// Flow/proxy feature set. Valid values: `flow`, `proxy`.
	FeatureSet pulumi.StringPtrInput
	// Set up DLP filters for this sensor. The structure of `filter` block is documented below.
	Filters SensorFilterArrayInput
	// Enable/disable flow-based DLP. Valid values: `enable`, `disable`.
	FlowBased pulumi.StringPtrInput
	// Protocols to always content archive.
	FullArchiveProto pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Logical relation between entries (default = match-any). Valid values: `match-all`, `match-any`, `match-eval`.
	MatchType pulumi.StringPtrInput
	// Enable/disable NAC quarantine logging. Valid values: `enable`, `disable`.
	NacQuarLog pulumi.StringPtrInput
	// Name of the DLP sensor.
	Name pulumi.StringPtrInput
	// Configure DLP options.
	Options pulumi.StringPtrInput
	// Replacement message group used by this DLP sensor.
	ReplacemsgGroup pulumi.StringPtrInput
	// Protocols to always log summary.
	SummaryProto pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SensorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorArgs)(nil)).Elem()
}

type SensorInput interface {
	pulumi.Input

	ToSensorOutput() SensorOutput
	ToSensorOutputWithContext(ctx context.Context) SensorOutput
}

func (*Sensor) ElementType() reflect.Type {
	return reflect.TypeOf((**Sensor)(nil)).Elem()
}

func (i *Sensor) ToSensorOutput() SensorOutput {
	return i.ToSensorOutputWithContext(context.Background())
}

func (i *Sensor) ToSensorOutputWithContext(ctx context.Context) SensorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorOutput)
}

// SensorArrayInput is an input type that accepts SensorArray and SensorArrayOutput values.
// You can construct a concrete instance of `SensorArrayInput` via:
//
//	SensorArray{ SensorArgs{...} }
type SensorArrayInput interface {
	pulumi.Input

	ToSensorArrayOutput() SensorArrayOutput
	ToSensorArrayOutputWithContext(context.Context) SensorArrayOutput
}

type SensorArray []SensorInput

func (SensorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sensor)(nil)).Elem()
}

func (i SensorArray) ToSensorArrayOutput() SensorArrayOutput {
	return i.ToSensorArrayOutputWithContext(context.Background())
}

func (i SensorArray) ToSensorArrayOutputWithContext(ctx context.Context) SensorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorArrayOutput)
}

// SensorMapInput is an input type that accepts SensorMap and SensorMapOutput values.
// You can construct a concrete instance of `SensorMapInput` via:
//
//	SensorMap{ "key": SensorArgs{...} }
type SensorMapInput interface {
	pulumi.Input

	ToSensorMapOutput() SensorMapOutput
	ToSensorMapOutputWithContext(context.Context) SensorMapOutput
}

type SensorMap map[string]SensorInput

func (SensorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sensor)(nil)).Elem()
}

func (i SensorMap) ToSensorMapOutput() SensorMapOutput {
	return i.ToSensorMapOutputWithContext(context.Background())
}

func (i SensorMap) ToSensorMapOutputWithContext(ctx context.Context) SensorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorMapOutput)
}

type SensorOutput struct{ *pulumi.OutputState }

func (SensorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sensor)(nil)).Elem()
}

func (o SensorOutput) ToSensorOutput() SensorOutput {
	return o
}

func (o SensorOutput) ToSensorOutputWithContext(ctx context.Context) SensorOutput {
	return o
}

// Comment.
func (o SensorOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Enable/disable DLP logging. Valid values: `enable`, `disable`.
func (o SensorOutput) DlpLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.DlpLog }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SensorOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// DLP sensor entries. The structure of `entries` block is documented below.
func (o SensorOutput) Entries() SensorEntryArrayOutput {
	return o.ApplyT(func(v *Sensor) SensorEntryArrayOutput { return v.Entries }).(SensorEntryArrayOutput)
}

// Expression to evaluate.
func (o SensorOutput) Eval() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.Eval }).(pulumi.StringOutput)
}

// Enable/disable extended logging for data leak prevention. Valid values: `enable`, `disable`.
func (o SensorOutput) ExtendedLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.ExtendedLog }).(pulumi.StringOutput)
}

// Flow/proxy feature set. Valid values: `flow`, `proxy`.
func (o SensorOutput) FeatureSet() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.FeatureSet }).(pulumi.StringOutput)
}

// Set up DLP filters for this sensor. The structure of `filter` block is documented below.
func (o SensorOutput) Filters() SensorFilterArrayOutput {
	return o.ApplyT(func(v *Sensor) SensorFilterArrayOutput { return v.Filters }).(SensorFilterArrayOutput)
}

// Enable/disable flow-based DLP. Valid values: `enable`, `disable`.
func (o SensorOutput) FlowBased() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.FlowBased }).(pulumi.StringOutput)
}

// Protocols to always content archive.
func (o SensorOutput) FullArchiveProto() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.FullArchiveProto }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o SensorOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Logical relation between entries (default = match-any). Valid values: `match-all`, `match-any`, `match-eval`.
func (o SensorOutput) MatchType() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.MatchType }).(pulumi.StringOutput)
}

// Enable/disable NAC quarantine logging. Valid values: `enable`, `disable`.
func (o SensorOutput) NacQuarLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.NacQuarLog }).(pulumi.StringOutput)
}

// Name of the DLP sensor.
func (o SensorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configure DLP options.
func (o SensorOutput) Options() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.Options }).(pulumi.StringOutput)
}

// Replacement message group used by this DLP sensor.
func (o SensorOutput) ReplacemsgGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.ReplacemsgGroup }).(pulumi.StringOutput)
}

// Protocols to always log summary.
func (o SensorOutput) SummaryProto() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.SummaryProto }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SensorOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SensorArrayOutput struct{ *pulumi.OutputState }

func (SensorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sensor)(nil)).Elem()
}

func (o SensorArrayOutput) ToSensorArrayOutput() SensorArrayOutput {
	return o
}

func (o SensorArrayOutput) ToSensorArrayOutputWithContext(ctx context.Context) SensorArrayOutput {
	return o
}

func (o SensorArrayOutput) Index(i pulumi.IntInput) SensorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Sensor {
		return vs[0].([]*Sensor)[vs[1].(int)]
	}).(SensorOutput)
}

type SensorMapOutput struct{ *pulumi.OutputState }

func (SensorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sensor)(nil)).Elem()
}

func (o SensorMapOutput) ToSensorMapOutput() SensorMapOutput {
	return o
}

func (o SensorMapOutput) ToSensorMapOutputWithContext(ctx context.Context) SensorMapOutput {
	return o
}

func (o SensorMapOutput) MapIndex(k pulumi.StringInput) SensorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Sensor {
		return vs[0].(map[string]*Sensor)[vs[1].(string)]
	}).(SensorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SensorInput)(nil)).Elem(), &Sensor{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorArrayInput)(nil)).Elem(), SensorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorMapInput)(nil)).Elem(), SensorMap{})
	pulumi.RegisterOutputType(SensorOutput{})
	pulumi.RegisterOutputType(SensorArrayOutput{})
	pulumi.RegisterOutputType(SensorMapOutput{})
}
