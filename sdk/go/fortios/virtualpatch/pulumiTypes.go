// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package virtualpatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

var _ = internal.GetEnvOrDefault

type ProfileExemption struct {
	// Device MAC addresses. The structure of `device` block is documented below.
	Devices []ProfileExemptionDevice `pulumi:"devices"`
	// IDs.
	Id *int `pulumi:"id"`
	// Patch signature rule IDs. The structure of `rule` block is documented below.
	Rules []ProfileExemptionRule `pulumi:"rules"`
	// Enable/disable exemption. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
}

// ProfileExemptionInput is an input type that accepts ProfileExemptionArgs and ProfileExemptionOutput values.
// You can construct a concrete instance of `ProfileExemptionInput` via:
//
//	ProfileExemptionArgs{...}
type ProfileExemptionInput interface {
	pulumi.Input

	ToProfileExemptionOutput() ProfileExemptionOutput
	ToProfileExemptionOutputWithContext(context.Context) ProfileExemptionOutput
}

type ProfileExemptionArgs struct {
	// Device MAC addresses. The structure of `device` block is documented below.
	Devices ProfileExemptionDeviceArrayInput `pulumi:"devices"`
	// IDs.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Patch signature rule IDs. The structure of `rule` block is documented below.
	Rules ProfileExemptionRuleArrayInput `pulumi:"rules"`
	// Enable/disable exemption. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ProfileExemptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileExemption)(nil)).Elem()
}

func (i ProfileExemptionArgs) ToProfileExemptionOutput() ProfileExemptionOutput {
	return i.ToProfileExemptionOutputWithContext(context.Background())
}

func (i ProfileExemptionArgs) ToProfileExemptionOutputWithContext(ctx context.Context) ProfileExemptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileExemptionOutput)
}

// ProfileExemptionArrayInput is an input type that accepts ProfileExemptionArray and ProfileExemptionArrayOutput values.
// You can construct a concrete instance of `ProfileExemptionArrayInput` via:
//
//	ProfileExemptionArray{ ProfileExemptionArgs{...} }
type ProfileExemptionArrayInput interface {
	pulumi.Input

	ToProfileExemptionArrayOutput() ProfileExemptionArrayOutput
	ToProfileExemptionArrayOutputWithContext(context.Context) ProfileExemptionArrayOutput
}

type ProfileExemptionArray []ProfileExemptionInput

func (ProfileExemptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileExemption)(nil)).Elem()
}

func (i ProfileExemptionArray) ToProfileExemptionArrayOutput() ProfileExemptionArrayOutput {
	return i.ToProfileExemptionArrayOutputWithContext(context.Background())
}

func (i ProfileExemptionArray) ToProfileExemptionArrayOutputWithContext(ctx context.Context) ProfileExemptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileExemptionArrayOutput)
}

type ProfileExemptionOutput struct{ *pulumi.OutputState }

func (ProfileExemptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileExemption)(nil)).Elem()
}

func (o ProfileExemptionOutput) ToProfileExemptionOutput() ProfileExemptionOutput {
	return o
}

func (o ProfileExemptionOutput) ToProfileExemptionOutputWithContext(ctx context.Context) ProfileExemptionOutput {
	return o
}

// Device MAC addresses. The structure of `device` block is documented below.
func (o ProfileExemptionOutput) Devices() ProfileExemptionDeviceArrayOutput {
	return o.ApplyT(func(v ProfileExemption) []ProfileExemptionDevice { return v.Devices }).(ProfileExemptionDeviceArrayOutput)
}

// IDs.
func (o ProfileExemptionOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileExemption) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Patch signature rule IDs. The structure of `rule` block is documented below.
func (o ProfileExemptionOutput) Rules() ProfileExemptionRuleArrayOutput {
	return o.ApplyT(func(v ProfileExemption) []ProfileExemptionRule { return v.Rules }).(ProfileExemptionRuleArrayOutput)
}

// Enable/disable exemption. Valid values: `enable`, `disable`.
func (o ProfileExemptionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileExemption) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ProfileExemptionArrayOutput struct{ *pulumi.OutputState }

func (ProfileExemptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileExemption)(nil)).Elem()
}

func (o ProfileExemptionArrayOutput) ToProfileExemptionArrayOutput() ProfileExemptionArrayOutput {
	return o
}

func (o ProfileExemptionArrayOutput) ToProfileExemptionArrayOutputWithContext(ctx context.Context) ProfileExemptionArrayOutput {
	return o
}

func (o ProfileExemptionArrayOutput) Index(i pulumi.IntInput) ProfileExemptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileExemption {
		return vs[0].([]ProfileExemption)[vs[1].(int)]
	}).(ProfileExemptionOutput)
}

type ProfileExemptionDevice struct {
	// Device MAC address.
	Mac *string `pulumi:"mac"`
}

// ProfileExemptionDeviceInput is an input type that accepts ProfileExemptionDeviceArgs and ProfileExemptionDeviceOutput values.
// You can construct a concrete instance of `ProfileExemptionDeviceInput` via:
//
//	ProfileExemptionDeviceArgs{...}
type ProfileExemptionDeviceInput interface {
	pulumi.Input

	ToProfileExemptionDeviceOutput() ProfileExemptionDeviceOutput
	ToProfileExemptionDeviceOutputWithContext(context.Context) ProfileExemptionDeviceOutput
}

type ProfileExemptionDeviceArgs struct {
	// Device MAC address.
	Mac pulumi.StringPtrInput `pulumi:"mac"`
}

func (ProfileExemptionDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileExemptionDevice)(nil)).Elem()
}

func (i ProfileExemptionDeviceArgs) ToProfileExemptionDeviceOutput() ProfileExemptionDeviceOutput {
	return i.ToProfileExemptionDeviceOutputWithContext(context.Background())
}

func (i ProfileExemptionDeviceArgs) ToProfileExemptionDeviceOutputWithContext(ctx context.Context) ProfileExemptionDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileExemptionDeviceOutput)
}

// ProfileExemptionDeviceArrayInput is an input type that accepts ProfileExemptionDeviceArray and ProfileExemptionDeviceArrayOutput values.
// You can construct a concrete instance of `ProfileExemptionDeviceArrayInput` via:
//
//	ProfileExemptionDeviceArray{ ProfileExemptionDeviceArgs{...} }
type ProfileExemptionDeviceArrayInput interface {
	pulumi.Input

	ToProfileExemptionDeviceArrayOutput() ProfileExemptionDeviceArrayOutput
	ToProfileExemptionDeviceArrayOutputWithContext(context.Context) ProfileExemptionDeviceArrayOutput
}

type ProfileExemptionDeviceArray []ProfileExemptionDeviceInput

func (ProfileExemptionDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileExemptionDevice)(nil)).Elem()
}

func (i ProfileExemptionDeviceArray) ToProfileExemptionDeviceArrayOutput() ProfileExemptionDeviceArrayOutput {
	return i.ToProfileExemptionDeviceArrayOutputWithContext(context.Background())
}

func (i ProfileExemptionDeviceArray) ToProfileExemptionDeviceArrayOutputWithContext(ctx context.Context) ProfileExemptionDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileExemptionDeviceArrayOutput)
}

type ProfileExemptionDeviceOutput struct{ *pulumi.OutputState }

func (ProfileExemptionDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileExemptionDevice)(nil)).Elem()
}

func (o ProfileExemptionDeviceOutput) ToProfileExemptionDeviceOutput() ProfileExemptionDeviceOutput {
	return o
}

func (o ProfileExemptionDeviceOutput) ToProfileExemptionDeviceOutputWithContext(ctx context.Context) ProfileExemptionDeviceOutput {
	return o
}

// Device MAC address.
func (o ProfileExemptionDeviceOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileExemptionDevice) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

type ProfileExemptionDeviceArrayOutput struct{ *pulumi.OutputState }

func (ProfileExemptionDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileExemptionDevice)(nil)).Elem()
}

func (o ProfileExemptionDeviceArrayOutput) ToProfileExemptionDeviceArrayOutput() ProfileExemptionDeviceArrayOutput {
	return o
}

func (o ProfileExemptionDeviceArrayOutput) ToProfileExemptionDeviceArrayOutputWithContext(ctx context.Context) ProfileExemptionDeviceArrayOutput {
	return o
}

func (o ProfileExemptionDeviceArrayOutput) Index(i pulumi.IntInput) ProfileExemptionDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileExemptionDevice {
		return vs[0].([]ProfileExemptionDevice)[vs[1].(int)]
	}).(ProfileExemptionDeviceOutput)
}

type ProfileExemptionRule struct {
	// Rule IDs.
	Id *int `pulumi:"id"`
}

// ProfileExemptionRuleInput is an input type that accepts ProfileExemptionRuleArgs and ProfileExemptionRuleOutput values.
// You can construct a concrete instance of `ProfileExemptionRuleInput` via:
//
//	ProfileExemptionRuleArgs{...}
type ProfileExemptionRuleInput interface {
	pulumi.Input

	ToProfileExemptionRuleOutput() ProfileExemptionRuleOutput
	ToProfileExemptionRuleOutputWithContext(context.Context) ProfileExemptionRuleOutput
}

type ProfileExemptionRuleArgs struct {
	// Rule IDs.
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (ProfileExemptionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileExemptionRule)(nil)).Elem()
}

func (i ProfileExemptionRuleArgs) ToProfileExemptionRuleOutput() ProfileExemptionRuleOutput {
	return i.ToProfileExemptionRuleOutputWithContext(context.Background())
}

func (i ProfileExemptionRuleArgs) ToProfileExemptionRuleOutputWithContext(ctx context.Context) ProfileExemptionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileExemptionRuleOutput)
}

// ProfileExemptionRuleArrayInput is an input type that accepts ProfileExemptionRuleArray and ProfileExemptionRuleArrayOutput values.
// You can construct a concrete instance of `ProfileExemptionRuleArrayInput` via:
//
//	ProfileExemptionRuleArray{ ProfileExemptionRuleArgs{...} }
type ProfileExemptionRuleArrayInput interface {
	pulumi.Input

	ToProfileExemptionRuleArrayOutput() ProfileExemptionRuleArrayOutput
	ToProfileExemptionRuleArrayOutputWithContext(context.Context) ProfileExemptionRuleArrayOutput
}

type ProfileExemptionRuleArray []ProfileExemptionRuleInput

func (ProfileExemptionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileExemptionRule)(nil)).Elem()
}

func (i ProfileExemptionRuleArray) ToProfileExemptionRuleArrayOutput() ProfileExemptionRuleArrayOutput {
	return i.ToProfileExemptionRuleArrayOutputWithContext(context.Background())
}

func (i ProfileExemptionRuleArray) ToProfileExemptionRuleArrayOutputWithContext(ctx context.Context) ProfileExemptionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileExemptionRuleArrayOutput)
}

type ProfileExemptionRuleOutput struct{ *pulumi.OutputState }

func (ProfileExemptionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileExemptionRule)(nil)).Elem()
}

func (o ProfileExemptionRuleOutput) ToProfileExemptionRuleOutput() ProfileExemptionRuleOutput {
	return o
}

func (o ProfileExemptionRuleOutput) ToProfileExemptionRuleOutputWithContext(ctx context.Context) ProfileExemptionRuleOutput {
	return o
}

// Rule IDs.
func (o ProfileExemptionRuleOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileExemptionRule) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type ProfileExemptionRuleArrayOutput struct{ *pulumi.OutputState }

func (ProfileExemptionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileExemptionRule)(nil)).Elem()
}

func (o ProfileExemptionRuleArrayOutput) ToProfileExemptionRuleArrayOutput() ProfileExemptionRuleArrayOutput {
	return o
}

func (o ProfileExemptionRuleArrayOutput) ToProfileExemptionRuleArrayOutputWithContext(ctx context.Context) ProfileExemptionRuleArrayOutput {
	return o
}

func (o ProfileExemptionRuleArrayOutput) Index(i pulumi.IntInput) ProfileExemptionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileExemptionRule {
		return vs[0].([]ProfileExemptionRule)[vs[1].(int)]
	}).(ProfileExemptionRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileExemptionInput)(nil)).Elem(), ProfileExemptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileExemptionArrayInput)(nil)).Elem(), ProfileExemptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileExemptionDeviceInput)(nil)).Elem(), ProfileExemptionDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileExemptionDeviceArrayInput)(nil)).Elem(), ProfileExemptionDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileExemptionRuleInput)(nil)).Elem(), ProfileExemptionRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileExemptionRuleArrayInput)(nil)).Elem(), ProfileExemptionRuleArray{})
	pulumi.RegisterOutputType(ProfileExemptionOutput{})
	pulumi.RegisterOutputType(ProfileExemptionArrayOutput{})
	pulumi.RegisterOutputType(ProfileExemptionDeviceOutput{})
	pulumi.RegisterOutputType(ProfileExemptionDeviceArrayOutput{})
	pulumi.RegisterOutputType(ProfileExemptionRuleOutput{})
	pulumi.RegisterOutputType(ProfileExemptionRuleArrayOutput{})
}
