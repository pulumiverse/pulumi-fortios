// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package report

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Report layout configuration.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/report"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := report.NewLayout(ctx, "trname", &report.LayoutArgs{
//				CutoffOption: pulumi.String("run-time"),
//				CutoffTime:   pulumi.String("00:00"),
//				Day:          pulumi.String("sunday"),
//				EmailSend:    pulumi.String("disable"),
//				Format:       pulumi.String("pdf"),
//				MaxPdfReport: pulumi.Int(31),
//				Options:      pulumi.String("include-table-of-content view-chart-as-heading"),
//				ScheduleType: pulumi.String("daily"),
//				StyleTheme:   pulumi.String("default-report"),
//				Time:         pulumi.String("00:00"),
//				Title:        pulumi.String("FortiGate System Analysis Report"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Report Layout can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:report/layout:Layout labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:report/layout:Layout labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Layout struct {
	pulumi.CustomResourceState

	// Configure report body item. The structure of `bodyItem` block is documented below.
	BodyItems LayoutBodyItemArrayOutput `pulumi:"bodyItems"`
	// Cutoff-option is either run-time or custom. Valid values: `run-time`, `custom`.
	CutoffOption pulumi.StringOutput `pulumi:"cutoffOption"`
	// Custom cutoff time to generate report (format = hh:mm).
	CutoffTime pulumi.StringOutput `pulumi:"cutoffTime"`
	// Schedule days of week to generate report. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	Day pulumi.StringOutput `pulumi:"day"`
	// Description.
	Description pulumi.StringOutput `pulumi:"description"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Email recipients for generated reports.
	EmailRecipients pulumi.StringOutput `pulumi:"emailRecipients"`
	// Enable/disable sending emails after reports are generated. Valid values: `enable`, `disable`.
	EmailSend pulumi.StringOutput `pulumi:"emailSend"`
	// Report format. Valid values: `pdf`.
	Format pulumi.StringOutput `pulumi:"format"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Maximum number of PDF reports to keep at one time (oldest report is overwritten).
	MaxPdfReport pulumi.IntOutput `pulumi:"maxPdfReport"`
	// Report layout name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Report layout options. Valid values: `include-table-of-content`, `auto-numbering-heading`, `view-chart-as-heading`, `show-html-navbar-before-heading`, `dummy-option`.
	Options pulumi.StringOutput `pulumi:"options"`
	// Configure report page. The structure of `page` block is documented below.
	Page LayoutPageOutput `pulumi:"page"`
	// Report schedule type. Valid values: `demand`, `daily`, `weekly`.
	ScheduleType pulumi.StringOutput `pulumi:"scheduleType"`
	// Report style theme.
	StyleTheme pulumi.StringOutput `pulumi:"styleTheme"`
	// Report subtitle.
	Subtitle pulumi.StringOutput `pulumi:"subtitle"`
	// Schedule time to generate report (format = hh:mm).
	Time pulumi.StringOutput `pulumi:"time"`
	// Report title.
	Title pulumi.StringOutput `pulumi:"title"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewLayout registers a new resource with the given unique name, arguments, and options.
func NewLayout(ctx *pulumi.Context,
	name string, args *LayoutArgs, opts ...pulumi.ResourceOption) (*Layout, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StyleTheme == nil {
		return nil, errors.New("invalid value for required argument 'StyleTheme'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Layout
	err := ctx.RegisterResource("fortios:report/layout:Layout", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLayout gets an existing Layout resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLayout(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LayoutState, opts ...pulumi.ResourceOption) (*Layout, error) {
	var resource Layout
	err := ctx.ReadResource("fortios:report/layout:Layout", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Layout resources.
type layoutState struct {
	// Configure report body item. The structure of `bodyItem` block is documented below.
	BodyItems []LayoutBodyItem `pulumi:"bodyItems"`
	// Cutoff-option is either run-time or custom. Valid values: `run-time`, `custom`.
	CutoffOption *string `pulumi:"cutoffOption"`
	// Custom cutoff time to generate report (format = hh:mm).
	CutoffTime *string `pulumi:"cutoffTime"`
	// Schedule days of week to generate report. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	Day *string `pulumi:"day"`
	// Description.
	Description *string `pulumi:"description"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Email recipients for generated reports.
	EmailRecipients *string `pulumi:"emailRecipients"`
	// Enable/disable sending emails after reports are generated. Valid values: `enable`, `disable`.
	EmailSend *string `pulumi:"emailSend"`
	// Report format. Valid values: `pdf`.
	Format *string `pulumi:"format"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Maximum number of PDF reports to keep at one time (oldest report is overwritten).
	MaxPdfReport *int `pulumi:"maxPdfReport"`
	// Report layout name.
	Name *string `pulumi:"name"`
	// Report layout options. Valid values: `include-table-of-content`, `auto-numbering-heading`, `view-chart-as-heading`, `show-html-navbar-before-heading`, `dummy-option`.
	Options *string `pulumi:"options"`
	// Configure report page. The structure of `page` block is documented below.
	Page *LayoutPage `pulumi:"page"`
	// Report schedule type. Valid values: `demand`, `daily`, `weekly`.
	ScheduleType *string `pulumi:"scheduleType"`
	// Report style theme.
	StyleTheme *string `pulumi:"styleTheme"`
	// Report subtitle.
	Subtitle *string `pulumi:"subtitle"`
	// Schedule time to generate report (format = hh:mm).
	Time *string `pulumi:"time"`
	// Report title.
	Title *string `pulumi:"title"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type LayoutState struct {
	// Configure report body item. The structure of `bodyItem` block is documented below.
	BodyItems LayoutBodyItemArrayInput
	// Cutoff-option is either run-time or custom. Valid values: `run-time`, `custom`.
	CutoffOption pulumi.StringPtrInput
	// Custom cutoff time to generate report (format = hh:mm).
	CutoffTime pulumi.StringPtrInput
	// Schedule days of week to generate report. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	Day pulumi.StringPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Email recipients for generated reports.
	EmailRecipients pulumi.StringPtrInput
	// Enable/disable sending emails after reports are generated. Valid values: `enable`, `disable`.
	EmailSend pulumi.StringPtrInput
	// Report format. Valid values: `pdf`.
	Format pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Maximum number of PDF reports to keep at one time (oldest report is overwritten).
	MaxPdfReport pulumi.IntPtrInput
	// Report layout name.
	Name pulumi.StringPtrInput
	// Report layout options. Valid values: `include-table-of-content`, `auto-numbering-heading`, `view-chart-as-heading`, `show-html-navbar-before-heading`, `dummy-option`.
	Options pulumi.StringPtrInput
	// Configure report page. The structure of `page` block is documented below.
	Page LayoutPagePtrInput
	// Report schedule type. Valid values: `demand`, `daily`, `weekly`.
	ScheduleType pulumi.StringPtrInput
	// Report style theme.
	StyleTheme pulumi.StringPtrInput
	// Report subtitle.
	Subtitle pulumi.StringPtrInput
	// Schedule time to generate report (format = hh:mm).
	Time pulumi.StringPtrInput
	// Report title.
	Title pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (LayoutState) ElementType() reflect.Type {
	return reflect.TypeOf((*layoutState)(nil)).Elem()
}

type layoutArgs struct {
	// Configure report body item. The structure of `bodyItem` block is documented below.
	BodyItems []LayoutBodyItem `pulumi:"bodyItems"`
	// Cutoff-option is either run-time or custom. Valid values: `run-time`, `custom`.
	CutoffOption *string `pulumi:"cutoffOption"`
	// Custom cutoff time to generate report (format = hh:mm).
	CutoffTime *string `pulumi:"cutoffTime"`
	// Schedule days of week to generate report. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	Day *string `pulumi:"day"`
	// Description.
	Description *string `pulumi:"description"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Email recipients for generated reports.
	EmailRecipients *string `pulumi:"emailRecipients"`
	// Enable/disable sending emails after reports are generated. Valid values: `enable`, `disable`.
	EmailSend *string `pulumi:"emailSend"`
	// Report format. Valid values: `pdf`.
	Format *string `pulumi:"format"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Maximum number of PDF reports to keep at one time (oldest report is overwritten).
	MaxPdfReport *int `pulumi:"maxPdfReport"`
	// Report layout name.
	Name *string `pulumi:"name"`
	// Report layout options. Valid values: `include-table-of-content`, `auto-numbering-heading`, `view-chart-as-heading`, `show-html-navbar-before-heading`, `dummy-option`.
	Options *string `pulumi:"options"`
	// Configure report page. The structure of `page` block is documented below.
	Page *LayoutPage `pulumi:"page"`
	// Report schedule type. Valid values: `demand`, `daily`, `weekly`.
	ScheduleType *string `pulumi:"scheduleType"`
	// Report style theme.
	StyleTheme string `pulumi:"styleTheme"`
	// Report subtitle.
	Subtitle *string `pulumi:"subtitle"`
	// Schedule time to generate report (format = hh:mm).
	Time *string `pulumi:"time"`
	// Report title.
	Title *string `pulumi:"title"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Layout resource.
type LayoutArgs struct {
	// Configure report body item. The structure of `bodyItem` block is documented below.
	BodyItems LayoutBodyItemArrayInput
	// Cutoff-option is either run-time or custom. Valid values: `run-time`, `custom`.
	CutoffOption pulumi.StringPtrInput
	// Custom cutoff time to generate report (format = hh:mm).
	CutoffTime pulumi.StringPtrInput
	// Schedule days of week to generate report. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	Day pulumi.StringPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Email recipients for generated reports.
	EmailRecipients pulumi.StringPtrInput
	// Enable/disable sending emails after reports are generated. Valid values: `enable`, `disable`.
	EmailSend pulumi.StringPtrInput
	// Report format. Valid values: `pdf`.
	Format pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Maximum number of PDF reports to keep at one time (oldest report is overwritten).
	MaxPdfReport pulumi.IntPtrInput
	// Report layout name.
	Name pulumi.StringPtrInput
	// Report layout options. Valid values: `include-table-of-content`, `auto-numbering-heading`, `view-chart-as-heading`, `show-html-navbar-before-heading`, `dummy-option`.
	Options pulumi.StringPtrInput
	// Configure report page. The structure of `page` block is documented below.
	Page LayoutPagePtrInput
	// Report schedule type. Valid values: `demand`, `daily`, `weekly`.
	ScheduleType pulumi.StringPtrInput
	// Report style theme.
	StyleTheme pulumi.StringInput
	// Report subtitle.
	Subtitle pulumi.StringPtrInput
	// Schedule time to generate report (format = hh:mm).
	Time pulumi.StringPtrInput
	// Report title.
	Title pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (LayoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*layoutArgs)(nil)).Elem()
}

type LayoutInput interface {
	pulumi.Input

	ToLayoutOutput() LayoutOutput
	ToLayoutOutputWithContext(ctx context.Context) LayoutOutput
}

func (*Layout) ElementType() reflect.Type {
	return reflect.TypeOf((**Layout)(nil)).Elem()
}

func (i *Layout) ToLayoutOutput() LayoutOutput {
	return i.ToLayoutOutputWithContext(context.Background())
}

func (i *Layout) ToLayoutOutputWithContext(ctx context.Context) LayoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutOutput)
}

// LayoutArrayInput is an input type that accepts LayoutArray and LayoutArrayOutput values.
// You can construct a concrete instance of `LayoutArrayInput` via:
//
//	LayoutArray{ LayoutArgs{...} }
type LayoutArrayInput interface {
	pulumi.Input

	ToLayoutArrayOutput() LayoutArrayOutput
	ToLayoutArrayOutputWithContext(context.Context) LayoutArrayOutput
}

type LayoutArray []LayoutInput

func (LayoutArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Layout)(nil)).Elem()
}

func (i LayoutArray) ToLayoutArrayOutput() LayoutArrayOutput {
	return i.ToLayoutArrayOutputWithContext(context.Background())
}

func (i LayoutArray) ToLayoutArrayOutputWithContext(ctx context.Context) LayoutArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutArrayOutput)
}

// LayoutMapInput is an input type that accepts LayoutMap and LayoutMapOutput values.
// You can construct a concrete instance of `LayoutMapInput` via:
//
//	LayoutMap{ "key": LayoutArgs{...} }
type LayoutMapInput interface {
	pulumi.Input

	ToLayoutMapOutput() LayoutMapOutput
	ToLayoutMapOutputWithContext(context.Context) LayoutMapOutput
}

type LayoutMap map[string]LayoutInput

func (LayoutMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Layout)(nil)).Elem()
}

func (i LayoutMap) ToLayoutMapOutput() LayoutMapOutput {
	return i.ToLayoutMapOutputWithContext(context.Background())
}

func (i LayoutMap) ToLayoutMapOutputWithContext(ctx context.Context) LayoutMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayoutMapOutput)
}

type LayoutOutput struct{ *pulumi.OutputState }

func (LayoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Layout)(nil)).Elem()
}

func (o LayoutOutput) ToLayoutOutput() LayoutOutput {
	return o
}

func (o LayoutOutput) ToLayoutOutputWithContext(ctx context.Context) LayoutOutput {
	return o
}

// Configure report body item. The structure of `bodyItem` block is documented below.
func (o LayoutOutput) BodyItems() LayoutBodyItemArrayOutput {
	return o.ApplyT(func(v *Layout) LayoutBodyItemArrayOutput { return v.BodyItems }).(LayoutBodyItemArrayOutput)
}

// Cutoff-option is either run-time or custom. Valid values: `run-time`, `custom`.
func (o LayoutOutput) CutoffOption() pulumi.StringOutput {
	return o.ApplyT(func(v *Layout) pulumi.StringOutput { return v.CutoffOption }).(pulumi.StringOutput)
}

// Custom cutoff time to generate report (format = hh:mm).
func (o LayoutOutput) CutoffTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Layout) pulumi.StringOutput { return v.CutoffTime }).(pulumi.StringOutput)
}

// Schedule days of week to generate report. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
func (o LayoutOutput) Day() pulumi.StringOutput {
	return o.ApplyT(func(v *Layout) pulumi.StringOutput { return v.Day }).(pulumi.StringOutput)
}

// Description.
func (o LayoutOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Layout) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o LayoutOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Layout) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Email recipients for generated reports.
func (o LayoutOutput) EmailRecipients() pulumi.StringOutput {
	return o.ApplyT(func(v *Layout) pulumi.StringOutput { return v.EmailRecipients }).(pulumi.StringOutput)
}

// Enable/disable sending emails after reports are generated. Valid values: `enable`, `disable`.
func (o LayoutOutput) EmailSend() pulumi.StringOutput {
	return o.ApplyT(func(v *Layout) pulumi.StringOutput { return v.EmailSend }).(pulumi.StringOutput)
}

// Report format. Valid values: `pdf`.
func (o LayoutOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *Layout) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o LayoutOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Layout) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Maximum number of PDF reports to keep at one time (oldest report is overwritten).
func (o LayoutOutput) MaxPdfReport() pulumi.IntOutput {
	return o.ApplyT(func(v *Layout) pulumi.IntOutput { return v.MaxPdfReport }).(pulumi.IntOutput)
}

// Report layout name.
func (o LayoutOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Layout) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Report layout options. Valid values: `include-table-of-content`, `auto-numbering-heading`, `view-chart-as-heading`, `show-html-navbar-before-heading`, `dummy-option`.
func (o LayoutOutput) Options() pulumi.StringOutput {
	return o.ApplyT(func(v *Layout) pulumi.StringOutput { return v.Options }).(pulumi.StringOutput)
}

// Configure report page. The structure of `page` block is documented below.
func (o LayoutOutput) Page() LayoutPageOutput {
	return o.ApplyT(func(v *Layout) LayoutPageOutput { return v.Page }).(LayoutPageOutput)
}

// Report schedule type. Valid values: `demand`, `daily`, `weekly`.
func (o LayoutOutput) ScheduleType() pulumi.StringOutput {
	return o.ApplyT(func(v *Layout) pulumi.StringOutput { return v.ScheduleType }).(pulumi.StringOutput)
}

// Report style theme.
func (o LayoutOutput) StyleTheme() pulumi.StringOutput {
	return o.ApplyT(func(v *Layout) pulumi.StringOutput { return v.StyleTheme }).(pulumi.StringOutput)
}

// Report subtitle.
func (o LayoutOutput) Subtitle() pulumi.StringOutput {
	return o.ApplyT(func(v *Layout) pulumi.StringOutput { return v.Subtitle }).(pulumi.StringOutput)
}

// Schedule time to generate report (format = hh:mm).
func (o LayoutOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v *Layout) pulumi.StringOutput { return v.Time }).(pulumi.StringOutput)
}

// Report title.
func (o LayoutOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Layout) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o LayoutOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Layout) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type LayoutArrayOutput struct{ *pulumi.OutputState }

func (LayoutArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Layout)(nil)).Elem()
}

func (o LayoutArrayOutput) ToLayoutArrayOutput() LayoutArrayOutput {
	return o
}

func (o LayoutArrayOutput) ToLayoutArrayOutputWithContext(ctx context.Context) LayoutArrayOutput {
	return o
}

func (o LayoutArrayOutput) Index(i pulumi.IntInput) LayoutOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Layout {
		return vs[0].([]*Layout)[vs[1].(int)]
	}).(LayoutOutput)
}

type LayoutMapOutput struct{ *pulumi.OutputState }

func (LayoutMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Layout)(nil)).Elem()
}

func (o LayoutMapOutput) ToLayoutMapOutput() LayoutMapOutput {
	return o
}

func (o LayoutMapOutput) ToLayoutMapOutputWithContext(ctx context.Context) LayoutMapOutput {
	return o
}

func (o LayoutMapOutput) MapIndex(k pulumi.StringInput) LayoutOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Layout {
		return vs[0].(map[string]*Layout)[vs[1].(string)]
	}).(LayoutOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutInput)(nil)).Elem(), &Layout{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutArrayInput)(nil)).Elem(), LayoutArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayoutMapInput)(nil)).Elem(), LayoutMap{})
	pulumi.RegisterOutputType(LayoutOutput{})
	pulumi.RegisterOutputType(LayoutArrayOutput{})
	pulumi.RegisterOutputType(LayoutMapOutput{})
}
