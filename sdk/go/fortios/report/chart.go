// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package report

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Report chart widget configuration. Applies to FortiOS Version `<= 7.0.0`.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/report"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := report.NewChart(ctx, "trname", &report.ChartArgs{
//				Category:       pulumi.String("misc"),
//				Comments:       pulumi.String("test report chart"),
//				Dataset:        pulumi.String("s1"),
//				Dimension:      pulumi.String("3D"),
//				Favorite:       pulumi.String("no"),
//				GraphType:      pulumi.String("none"),
//				Legend:         pulumi.String("enable"),
//				LegendFontSize: pulumi.Int(0),
//				Period:         pulumi.String("last24h"),
//				Policy:         pulumi.Int(0),
//				Style:          pulumi.String("auto"),
//				TitleFontSize:  pulumi.Int(0),
//				Type:           pulumi.String("graph"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Report Chart can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:report/chart:Chart labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:report/chart:Chart labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Chart struct {
	pulumi.CustomResourceState

	// Chart background.
	Background pulumi.StringOutput `pulumi:"background"`
	// Category. Valid values: `misc`, `traffic`, `event`, `virus`, `webfilter`, `attack`, `spam`, `dlp`, `app-ctrl`, `vulnerability`.
	Category pulumi.StringOutput `pulumi:"category"`
	// Category series of pie chart. The structure of `categorySeries` block is documented below.
	CategorySeries ChartCategorySeriesOutput `pulumi:"categorySeries"`
	// Color palette (system will pick color automatically by default).
	ColorPalette pulumi.StringOutput `pulumi:"colorPalette"`
	// Table column definition. The structure of `column` block is documented below.
	Columns ChartColumnArrayOutput `pulumi:"columns"`
	// Comment.
	Comments pulumi.StringOutput `pulumi:"comments"`
	// Bind dataset to chart.
	Dataset pulumi.StringOutput `pulumi:"dataset"`
	// Dimension. Valid values: `2D`, `3D`.
	Dimension pulumi.StringOutput `pulumi:"dimension"`
	// Drill down charts. The structure of `drillDownCharts` block is documented below.
	DrillDownCharts ChartDrillDownChartArrayOutput `pulumi:"drillDownCharts"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Favorite. Valid values: `no`, `yes`.
	Favorite pulumi.StringOutput `pulumi:"favorite"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Graph type. Valid values: `none`, `bar`, `pie`, `line`, `flow`.
	GraphType pulumi.StringOutput `pulumi:"graphType"`
	// Enable/Disable Legend area. Valid values: `enable`, `disable`.
	Legend pulumi.StringOutput `pulumi:"legend"`
	// Font size of legend area.
	LegendFontSize pulumi.IntOutput `pulumi:"legendFontSize"`
	// Chart Widget Name
	Name pulumi.StringOutput `pulumi:"name"`
	// Time period. Valid values: `last24h`, `last7d`.
	Period pulumi.StringOutput `pulumi:"period"`
	// Used by monitor policy.
	Policy pulumi.IntOutput `pulumi:"policy"`
	// Style. Valid values: `auto`, `manual`.
	Style pulumi.StringOutput `pulumi:"style"`
	// Chart title.
	Title pulumi.StringOutput `pulumi:"title"`
	// Font size of chart title.
	TitleFontSize pulumi.IntOutput `pulumi:"titleFontSize"`
	// Chart type. Valid values: `graph`, `table`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Value series of pie chart. The structure of `valueSeries` block is documented below.
	ValueSeries ChartValueSeriesOutput `pulumi:"valueSeries"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// X-series of chart. The structure of `xSeries` block is documented below.
	XSeries ChartXSeriesOutput `pulumi:"xSeries"`
	// Y-series of chart. The structure of `ySeries` block is documented below.
	YSeries ChartYSeriesOutput `pulumi:"ySeries"`
}

// NewChart registers a new resource with the given unique name, arguments, and options.
func NewChart(ctx *pulumi.Context,
	name string, args *ChartArgs, opts ...pulumi.ResourceOption) (*Chart, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Comments == nil {
		return nil, errors.New("invalid value for required argument 'Comments'")
	}
	if args.Dataset == nil {
		return nil, errors.New("invalid value for required argument 'Dataset'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Chart
	err := ctx.RegisterResource("fortios:report/chart:Chart", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChart gets an existing Chart resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChart(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChartState, opts ...pulumi.ResourceOption) (*Chart, error) {
	var resource Chart
	err := ctx.ReadResource("fortios:report/chart:Chart", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Chart resources.
type chartState struct {
	// Chart background.
	Background *string `pulumi:"background"`
	// Category. Valid values: `misc`, `traffic`, `event`, `virus`, `webfilter`, `attack`, `spam`, `dlp`, `app-ctrl`, `vulnerability`.
	Category *string `pulumi:"category"`
	// Category series of pie chart. The structure of `categorySeries` block is documented below.
	CategorySeries *ChartCategorySeries `pulumi:"categorySeries"`
	// Color palette (system will pick color automatically by default).
	ColorPalette *string `pulumi:"colorPalette"`
	// Table column definition. The structure of `column` block is documented below.
	Columns []ChartColumn `pulumi:"columns"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Bind dataset to chart.
	Dataset *string `pulumi:"dataset"`
	// Dimension. Valid values: `2D`, `3D`.
	Dimension *string `pulumi:"dimension"`
	// Drill down charts. The structure of `drillDownCharts` block is documented below.
	DrillDownCharts []ChartDrillDownChart `pulumi:"drillDownCharts"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Favorite. Valid values: `no`, `yes`.
	Favorite *string `pulumi:"favorite"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Graph type. Valid values: `none`, `bar`, `pie`, `line`, `flow`.
	GraphType *string `pulumi:"graphType"`
	// Enable/Disable Legend area. Valid values: `enable`, `disable`.
	Legend *string `pulumi:"legend"`
	// Font size of legend area.
	LegendFontSize *int `pulumi:"legendFontSize"`
	// Chart Widget Name
	Name *string `pulumi:"name"`
	// Time period. Valid values: `last24h`, `last7d`.
	Period *string `pulumi:"period"`
	// Used by monitor policy.
	Policy *int `pulumi:"policy"`
	// Style. Valid values: `auto`, `manual`.
	Style *string `pulumi:"style"`
	// Chart title.
	Title *string `pulumi:"title"`
	// Font size of chart title.
	TitleFontSize *int `pulumi:"titleFontSize"`
	// Chart type. Valid values: `graph`, `table`.
	Type *string `pulumi:"type"`
	// Value series of pie chart. The structure of `valueSeries` block is documented below.
	ValueSeries *ChartValueSeries `pulumi:"valueSeries"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// X-series of chart. The structure of `xSeries` block is documented below.
	XSeries *ChartXSeries `pulumi:"xSeries"`
	// Y-series of chart. The structure of `ySeries` block is documented below.
	YSeries *ChartYSeries `pulumi:"ySeries"`
}

type ChartState struct {
	// Chart background.
	Background pulumi.StringPtrInput
	// Category. Valid values: `misc`, `traffic`, `event`, `virus`, `webfilter`, `attack`, `spam`, `dlp`, `app-ctrl`, `vulnerability`.
	Category pulumi.StringPtrInput
	// Category series of pie chart. The structure of `categorySeries` block is documented below.
	CategorySeries ChartCategorySeriesPtrInput
	// Color palette (system will pick color automatically by default).
	ColorPalette pulumi.StringPtrInput
	// Table column definition. The structure of `column` block is documented below.
	Columns ChartColumnArrayInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Bind dataset to chart.
	Dataset pulumi.StringPtrInput
	// Dimension. Valid values: `2D`, `3D`.
	Dimension pulumi.StringPtrInput
	// Drill down charts. The structure of `drillDownCharts` block is documented below.
	DrillDownCharts ChartDrillDownChartArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Favorite. Valid values: `no`, `yes`.
	Favorite pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Graph type. Valid values: `none`, `bar`, `pie`, `line`, `flow`.
	GraphType pulumi.StringPtrInput
	// Enable/Disable Legend area. Valid values: `enable`, `disable`.
	Legend pulumi.StringPtrInput
	// Font size of legend area.
	LegendFontSize pulumi.IntPtrInput
	// Chart Widget Name
	Name pulumi.StringPtrInput
	// Time period. Valid values: `last24h`, `last7d`.
	Period pulumi.StringPtrInput
	// Used by monitor policy.
	Policy pulumi.IntPtrInput
	// Style. Valid values: `auto`, `manual`.
	Style pulumi.StringPtrInput
	// Chart title.
	Title pulumi.StringPtrInput
	// Font size of chart title.
	TitleFontSize pulumi.IntPtrInput
	// Chart type. Valid values: `graph`, `table`.
	Type pulumi.StringPtrInput
	// Value series of pie chart. The structure of `valueSeries` block is documented below.
	ValueSeries ChartValueSeriesPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// X-series of chart. The structure of `xSeries` block is documented below.
	XSeries ChartXSeriesPtrInput
	// Y-series of chart. The structure of `ySeries` block is documented below.
	YSeries ChartYSeriesPtrInput
}

func (ChartState) ElementType() reflect.Type {
	return reflect.TypeOf((*chartState)(nil)).Elem()
}

type chartArgs struct {
	// Chart background.
	Background *string `pulumi:"background"`
	// Category. Valid values: `misc`, `traffic`, `event`, `virus`, `webfilter`, `attack`, `spam`, `dlp`, `app-ctrl`, `vulnerability`.
	Category *string `pulumi:"category"`
	// Category series of pie chart. The structure of `categorySeries` block is documented below.
	CategorySeries *ChartCategorySeries `pulumi:"categorySeries"`
	// Color palette (system will pick color automatically by default).
	ColorPalette *string `pulumi:"colorPalette"`
	// Table column definition. The structure of `column` block is documented below.
	Columns []ChartColumn `pulumi:"columns"`
	// Comment.
	Comments string `pulumi:"comments"`
	// Bind dataset to chart.
	Dataset string `pulumi:"dataset"`
	// Dimension. Valid values: `2D`, `3D`.
	Dimension *string `pulumi:"dimension"`
	// Drill down charts. The structure of `drillDownCharts` block is documented below.
	DrillDownCharts []ChartDrillDownChart `pulumi:"drillDownCharts"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Favorite. Valid values: `no`, `yes`.
	Favorite *string `pulumi:"favorite"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Graph type. Valid values: `none`, `bar`, `pie`, `line`, `flow`.
	GraphType *string `pulumi:"graphType"`
	// Enable/Disable Legend area. Valid values: `enable`, `disable`.
	Legend *string `pulumi:"legend"`
	// Font size of legend area.
	LegendFontSize *int `pulumi:"legendFontSize"`
	// Chart Widget Name
	Name *string `pulumi:"name"`
	// Time period. Valid values: `last24h`, `last7d`.
	Period *string `pulumi:"period"`
	// Used by monitor policy.
	Policy *int `pulumi:"policy"`
	// Style. Valid values: `auto`, `manual`.
	Style *string `pulumi:"style"`
	// Chart title.
	Title *string `pulumi:"title"`
	// Font size of chart title.
	TitleFontSize *int `pulumi:"titleFontSize"`
	// Chart type. Valid values: `graph`, `table`.
	Type *string `pulumi:"type"`
	// Value series of pie chart. The structure of `valueSeries` block is documented below.
	ValueSeries *ChartValueSeries `pulumi:"valueSeries"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// X-series of chart. The structure of `xSeries` block is documented below.
	XSeries *ChartXSeries `pulumi:"xSeries"`
	// Y-series of chart. The structure of `ySeries` block is documented below.
	YSeries *ChartYSeries `pulumi:"ySeries"`
}

// The set of arguments for constructing a Chart resource.
type ChartArgs struct {
	// Chart background.
	Background pulumi.StringPtrInput
	// Category. Valid values: `misc`, `traffic`, `event`, `virus`, `webfilter`, `attack`, `spam`, `dlp`, `app-ctrl`, `vulnerability`.
	Category pulumi.StringPtrInput
	// Category series of pie chart. The structure of `categorySeries` block is documented below.
	CategorySeries ChartCategorySeriesPtrInput
	// Color palette (system will pick color automatically by default).
	ColorPalette pulumi.StringPtrInput
	// Table column definition. The structure of `column` block is documented below.
	Columns ChartColumnArrayInput
	// Comment.
	Comments pulumi.StringInput
	// Bind dataset to chart.
	Dataset pulumi.StringInput
	// Dimension. Valid values: `2D`, `3D`.
	Dimension pulumi.StringPtrInput
	// Drill down charts. The structure of `drillDownCharts` block is documented below.
	DrillDownCharts ChartDrillDownChartArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Favorite. Valid values: `no`, `yes`.
	Favorite pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Graph type. Valid values: `none`, `bar`, `pie`, `line`, `flow`.
	GraphType pulumi.StringPtrInput
	// Enable/Disable Legend area. Valid values: `enable`, `disable`.
	Legend pulumi.StringPtrInput
	// Font size of legend area.
	LegendFontSize pulumi.IntPtrInput
	// Chart Widget Name
	Name pulumi.StringPtrInput
	// Time period. Valid values: `last24h`, `last7d`.
	Period pulumi.StringPtrInput
	// Used by monitor policy.
	Policy pulumi.IntPtrInput
	// Style. Valid values: `auto`, `manual`.
	Style pulumi.StringPtrInput
	// Chart title.
	Title pulumi.StringPtrInput
	// Font size of chart title.
	TitleFontSize pulumi.IntPtrInput
	// Chart type. Valid values: `graph`, `table`.
	Type pulumi.StringPtrInput
	// Value series of pie chart. The structure of `valueSeries` block is documented below.
	ValueSeries ChartValueSeriesPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// X-series of chart. The structure of `xSeries` block is documented below.
	XSeries ChartXSeriesPtrInput
	// Y-series of chart. The structure of `ySeries` block is documented below.
	YSeries ChartYSeriesPtrInput
}

func (ChartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*chartArgs)(nil)).Elem()
}

type ChartInput interface {
	pulumi.Input

	ToChartOutput() ChartOutput
	ToChartOutputWithContext(ctx context.Context) ChartOutput
}

func (*Chart) ElementType() reflect.Type {
	return reflect.TypeOf((**Chart)(nil)).Elem()
}

func (i *Chart) ToChartOutput() ChartOutput {
	return i.ToChartOutputWithContext(context.Background())
}

func (i *Chart) ToChartOutputWithContext(ctx context.Context) ChartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartOutput)
}

// ChartArrayInput is an input type that accepts ChartArray and ChartArrayOutput values.
// You can construct a concrete instance of `ChartArrayInput` via:
//
//	ChartArray{ ChartArgs{...} }
type ChartArrayInput interface {
	pulumi.Input

	ToChartArrayOutput() ChartArrayOutput
	ToChartArrayOutputWithContext(context.Context) ChartArrayOutput
}

type ChartArray []ChartInput

func (ChartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Chart)(nil)).Elem()
}

func (i ChartArray) ToChartArrayOutput() ChartArrayOutput {
	return i.ToChartArrayOutputWithContext(context.Background())
}

func (i ChartArray) ToChartArrayOutputWithContext(ctx context.Context) ChartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartArrayOutput)
}

// ChartMapInput is an input type that accepts ChartMap and ChartMapOutput values.
// You can construct a concrete instance of `ChartMapInput` via:
//
//	ChartMap{ "key": ChartArgs{...} }
type ChartMapInput interface {
	pulumi.Input

	ToChartMapOutput() ChartMapOutput
	ToChartMapOutputWithContext(context.Context) ChartMapOutput
}

type ChartMap map[string]ChartInput

func (ChartMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Chart)(nil)).Elem()
}

func (i ChartMap) ToChartMapOutput() ChartMapOutput {
	return i.ToChartMapOutputWithContext(context.Background())
}

func (i ChartMap) ToChartMapOutputWithContext(ctx context.Context) ChartMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChartMapOutput)
}

type ChartOutput struct{ *pulumi.OutputState }

func (ChartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Chart)(nil)).Elem()
}

func (o ChartOutput) ToChartOutput() ChartOutput {
	return o
}

func (o ChartOutput) ToChartOutputWithContext(ctx context.Context) ChartOutput {
	return o
}

// Chart background.
func (o ChartOutput) Background() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Background }).(pulumi.StringOutput)
}

// Category. Valid values: `misc`, `traffic`, `event`, `virus`, `webfilter`, `attack`, `spam`, `dlp`, `app-ctrl`, `vulnerability`.
func (o ChartOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// Category series of pie chart. The structure of `categorySeries` block is documented below.
func (o ChartOutput) CategorySeries() ChartCategorySeriesOutput {
	return o.ApplyT(func(v *Chart) ChartCategorySeriesOutput { return v.CategorySeries }).(ChartCategorySeriesOutput)
}

// Color palette (system will pick color automatically by default).
func (o ChartOutput) ColorPalette() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.ColorPalette }).(pulumi.StringOutput)
}

// Table column definition. The structure of `column` block is documented below.
func (o ChartOutput) Columns() ChartColumnArrayOutput {
	return o.ApplyT(func(v *Chart) ChartColumnArrayOutput { return v.Columns }).(ChartColumnArrayOutput)
}

// Comment.
func (o ChartOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Comments }).(pulumi.StringOutput)
}

// Bind dataset to chart.
func (o ChartOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Dataset }).(pulumi.StringOutput)
}

// Dimension. Valid values: `2D`, `3D`.
func (o ChartOutput) Dimension() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Dimension }).(pulumi.StringOutput)
}

// Drill down charts. The structure of `drillDownCharts` block is documented below.
func (o ChartOutput) DrillDownCharts() ChartDrillDownChartArrayOutput {
	return o.ApplyT(func(v *Chart) ChartDrillDownChartArrayOutput { return v.DrillDownCharts }).(ChartDrillDownChartArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o ChartOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Favorite. Valid values: `no`, `yes`.
func (o ChartOutput) Favorite() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Favorite }).(pulumi.StringOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o ChartOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Graph type. Valid values: `none`, `bar`, `pie`, `line`, `flow`.
func (o ChartOutput) GraphType() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.GraphType }).(pulumi.StringOutput)
}

// Enable/Disable Legend area. Valid values: `enable`, `disable`.
func (o ChartOutput) Legend() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Legend }).(pulumi.StringOutput)
}

// Font size of legend area.
func (o ChartOutput) LegendFontSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Chart) pulumi.IntOutput { return v.LegendFontSize }).(pulumi.IntOutput)
}

// Chart Widget Name
func (o ChartOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Time period. Valid values: `last24h`, `last7d`.
func (o ChartOutput) Period() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Period }).(pulumi.StringOutput)
}

// Used by monitor policy.
func (o ChartOutput) Policy() pulumi.IntOutput {
	return o.ApplyT(func(v *Chart) pulumi.IntOutput { return v.Policy }).(pulumi.IntOutput)
}

// Style. Valid values: `auto`, `manual`.
func (o ChartOutput) Style() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Style }).(pulumi.StringOutput)
}

// Chart title.
func (o ChartOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Font size of chart title.
func (o ChartOutput) TitleFontSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Chart) pulumi.IntOutput { return v.TitleFontSize }).(pulumi.IntOutput)
}

// Chart type. Valid values: `graph`, `table`.
func (o ChartOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Value series of pie chart. The structure of `valueSeries` block is documented below.
func (o ChartOutput) ValueSeries() ChartValueSeriesOutput {
	return o.ApplyT(func(v *Chart) ChartValueSeriesOutput { return v.ValueSeries }).(ChartValueSeriesOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ChartOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Chart) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// X-series of chart. The structure of `xSeries` block is documented below.
func (o ChartOutput) XSeries() ChartXSeriesOutput {
	return o.ApplyT(func(v *Chart) ChartXSeriesOutput { return v.XSeries }).(ChartXSeriesOutput)
}

// Y-series of chart. The structure of `ySeries` block is documented below.
func (o ChartOutput) YSeries() ChartYSeriesOutput {
	return o.ApplyT(func(v *Chart) ChartYSeriesOutput { return v.YSeries }).(ChartYSeriesOutput)
}

type ChartArrayOutput struct{ *pulumi.OutputState }

func (ChartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Chart)(nil)).Elem()
}

func (o ChartArrayOutput) ToChartArrayOutput() ChartArrayOutput {
	return o
}

func (o ChartArrayOutput) ToChartArrayOutputWithContext(ctx context.Context) ChartArrayOutput {
	return o
}

func (o ChartArrayOutput) Index(i pulumi.IntInput) ChartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Chart {
		return vs[0].([]*Chart)[vs[1].(int)]
	}).(ChartOutput)
}

type ChartMapOutput struct{ *pulumi.OutputState }

func (ChartMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Chart)(nil)).Elem()
}

func (o ChartMapOutput) ToChartMapOutput() ChartMapOutput {
	return o
}

func (o ChartMapOutput) ToChartMapOutputWithContext(ctx context.Context) ChartMapOutput {
	return o
}

func (o ChartMapOutput) MapIndex(k pulumi.StringInput) ChartOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Chart {
		return vs[0].(map[string]*Chart)[vs[1].(string)]
	}).(ChartOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChartInput)(nil)).Elem(), &Chart{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChartArrayInput)(nil)).Elem(), ChartArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChartMapInput)(nil)).Elem(), ChartMap{})
	pulumi.RegisterOutputType(ChartOutput{})
	pulumi.RegisterOutputType(ChartArrayOutput{})
	pulumi.RegisterOutputType(ChartMapOutput{})
}
