// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

var _ = internal.GetEnvOrDefault

type BwlEntry struct {
	// Reject, mark as spam or good email. Valid values: `reject`, `spam`, `clear`.
	Action *string `pulumi:"action"`
	// IP address type. Valid values: `ipv4`, `ipv6`.
	AddrType *string `pulumi:"addrType"`
	// Email address pattern.
	EmailPattern *string `pulumi:"emailPattern"`
	// Entry ID.
	Id *int `pulumi:"id"`
	// IPv4 network address/subnet mask bits.
	Ip4Subnet *string `pulumi:"ip4Subnet"`
	// IPv6 network address/subnet mask bits.
	Ip6Subnet *string `pulumi:"ip6Subnet"`
	// Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
	PatternType *string `pulumi:"patternType"`
	// Enable/disable status. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Entry type. Valid values: `ip`, `email`.
	Type *string `pulumi:"type"`
}

// BwlEntryInput is an input type that accepts BwlEntryArgs and BwlEntryOutput values.
// You can construct a concrete instance of `BwlEntryInput` via:
//
//	BwlEntryArgs{...}
type BwlEntryInput interface {
	pulumi.Input

	ToBwlEntryOutput() BwlEntryOutput
	ToBwlEntryOutputWithContext(context.Context) BwlEntryOutput
}

type BwlEntryArgs struct {
	// Reject, mark as spam or good email. Valid values: `reject`, `spam`, `clear`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// IP address type. Valid values: `ipv4`, `ipv6`.
	AddrType pulumi.StringPtrInput `pulumi:"addrType"`
	// Email address pattern.
	EmailPattern pulumi.StringPtrInput `pulumi:"emailPattern"`
	// Entry ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// IPv4 network address/subnet mask bits.
	Ip4Subnet pulumi.StringPtrInput `pulumi:"ip4Subnet"`
	// IPv6 network address/subnet mask bits.
	Ip6Subnet pulumi.StringPtrInput `pulumi:"ip6Subnet"`
	// Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
	PatternType pulumi.StringPtrInput `pulumi:"patternType"`
	// Enable/disable status. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Entry type. Valid values: `ip`, `email`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (BwlEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BwlEntry)(nil)).Elem()
}

func (i BwlEntryArgs) ToBwlEntryOutput() BwlEntryOutput {
	return i.ToBwlEntryOutputWithContext(context.Background())
}

func (i BwlEntryArgs) ToBwlEntryOutputWithContext(ctx context.Context) BwlEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BwlEntryOutput)
}

// BwlEntryArrayInput is an input type that accepts BwlEntryArray and BwlEntryArrayOutput values.
// You can construct a concrete instance of `BwlEntryArrayInput` via:
//
//	BwlEntryArray{ BwlEntryArgs{...} }
type BwlEntryArrayInput interface {
	pulumi.Input

	ToBwlEntryArrayOutput() BwlEntryArrayOutput
	ToBwlEntryArrayOutputWithContext(context.Context) BwlEntryArrayOutput
}

type BwlEntryArray []BwlEntryInput

func (BwlEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BwlEntry)(nil)).Elem()
}

func (i BwlEntryArray) ToBwlEntryArrayOutput() BwlEntryArrayOutput {
	return i.ToBwlEntryArrayOutputWithContext(context.Background())
}

func (i BwlEntryArray) ToBwlEntryArrayOutputWithContext(ctx context.Context) BwlEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BwlEntryArrayOutput)
}

type BwlEntryOutput struct{ *pulumi.OutputState }

func (BwlEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BwlEntry)(nil)).Elem()
}

func (o BwlEntryOutput) ToBwlEntryOutput() BwlEntryOutput {
	return o
}

func (o BwlEntryOutput) ToBwlEntryOutputWithContext(ctx context.Context) BwlEntryOutput {
	return o
}

// Reject, mark as spam or good email. Valid values: `reject`, `spam`, `clear`.
func (o BwlEntryOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BwlEntry) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// IP address type. Valid values: `ipv4`, `ipv6`.
func (o BwlEntryOutput) AddrType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BwlEntry) *string { return v.AddrType }).(pulumi.StringPtrOutput)
}

// Email address pattern.
func (o BwlEntryOutput) EmailPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BwlEntry) *string { return v.EmailPattern }).(pulumi.StringPtrOutput)
}

// Entry ID.
func (o BwlEntryOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BwlEntry) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// IPv4 network address/subnet mask bits.
func (o BwlEntryOutput) Ip4Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BwlEntry) *string { return v.Ip4Subnet }).(pulumi.StringPtrOutput)
}

// IPv6 network address/subnet mask bits.
func (o BwlEntryOutput) Ip6Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BwlEntry) *string { return v.Ip6Subnet }).(pulumi.StringPtrOutput)
}

// Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
func (o BwlEntryOutput) PatternType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BwlEntry) *string { return v.PatternType }).(pulumi.StringPtrOutput)
}

// Enable/disable status. Valid values: `enable`, `disable`.
func (o BwlEntryOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BwlEntry) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Entry type. Valid values: `ip`, `email`.
func (o BwlEntryOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BwlEntry) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BwlEntryArrayOutput struct{ *pulumi.OutputState }

func (BwlEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BwlEntry)(nil)).Elem()
}

func (o BwlEntryArrayOutput) ToBwlEntryArrayOutput() BwlEntryArrayOutput {
	return o
}

func (o BwlEntryArrayOutput) ToBwlEntryArrayOutputWithContext(ctx context.Context) BwlEntryArrayOutput {
	return o
}

func (o BwlEntryArrayOutput) Index(i pulumi.IntInput) BwlEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BwlEntry {
		return vs[0].([]BwlEntry)[vs[1].(int)]
	}).(BwlEntryOutput)
}

type BwordEntry struct {
	// Mark spam or good. Valid values: `spam`, `clear`.
	Action *string `pulumi:"action"`
	// Banned word entry ID.
	Id *int `pulumi:"id"`
	// Language for the banned word. Valid values: `western`, `simch`, `trach`, `japanese`, `korean`, `french`, `thai`, `spanish`.
	Language *string `pulumi:"language"`
	// Pattern for the banned word.
	Pattern *string `pulumi:"pattern"`
	// Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
	PatternType *string `pulumi:"patternType"`
	// Score value.
	Score *int `pulumi:"score"`
	// Enable/disable status. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Component of the email to be scanned. Valid values: `subject`, `body`, `all`.
	Where *string `pulumi:"where"`
}

// BwordEntryInput is an input type that accepts BwordEntryArgs and BwordEntryOutput values.
// You can construct a concrete instance of `BwordEntryInput` via:
//
//	BwordEntryArgs{...}
type BwordEntryInput interface {
	pulumi.Input

	ToBwordEntryOutput() BwordEntryOutput
	ToBwordEntryOutputWithContext(context.Context) BwordEntryOutput
}

type BwordEntryArgs struct {
	// Mark spam or good. Valid values: `spam`, `clear`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Banned word entry ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Language for the banned word. Valid values: `western`, `simch`, `trach`, `japanese`, `korean`, `french`, `thai`, `spanish`.
	Language pulumi.StringPtrInput `pulumi:"language"`
	// Pattern for the banned word.
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
	// Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
	PatternType pulumi.StringPtrInput `pulumi:"patternType"`
	// Score value.
	Score pulumi.IntPtrInput `pulumi:"score"`
	// Enable/disable status. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Component of the email to be scanned. Valid values: `subject`, `body`, `all`.
	Where pulumi.StringPtrInput `pulumi:"where"`
}

func (BwordEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BwordEntry)(nil)).Elem()
}

func (i BwordEntryArgs) ToBwordEntryOutput() BwordEntryOutput {
	return i.ToBwordEntryOutputWithContext(context.Background())
}

func (i BwordEntryArgs) ToBwordEntryOutputWithContext(ctx context.Context) BwordEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BwordEntryOutput)
}

// BwordEntryArrayInput is an input type that accepts BwordEntryArray and BwordEntryArrayOutput values.
// You can construct a concrete instance of `BwordEntryArrayInput` via:
//
//	BwordEntryArray{ BwordEntryArgs{...} }
type BwordEntryArrayInput interface {
	pulumi.Input

	ToBwordEntryArrayOutput() BwordEntryArrayOutput
	ToBwordEntryArrayOutputWithContext(context.Context) BwordEntryArrayOutput
}

type BwordEntryArray []BwordEntryInput

func (BwordEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BwordEntry)(nil)).Elem()
}

func (i BwordEntryArray) ToBwordEntryArrayOutput() BwordEntryArrayOutput {
	return i.ToBwordEntryArrayOutputWithContext(context.Background())
}

func (i BwordEntryArray) ToBwordEntryArrayOutputWithContext(ctx context.Context) BwordEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BwordEntryArrayOutput)
}

type BwordEntryOutput struct{ *pulumi.OutputState }

func (BwordEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BwordEntry)(nil)).Elem()
}

func (o BwordEntryOutput) ToBwordEntryOutput() BwordEntryOutput {
	return o
}

func (o BwordEntryOutput) ToBwordEntryOutputWithContext(ctx context.Context) BwordEntryOutput {
	return o
}

// Mark spam or good. Valid values: `spam`, `clear`.
func (o BwordEntryOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BwordEntry) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Banned word entry ID.
func (o BwordEntryOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BwordEntry) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Language for the banned word. Valid values: `western`, `simch`, `trach`, `japanese`, `korean`, `french`, `thai`, `spanish`.
func (o BwordEntryOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BwordEntry) *string { return v.Language }).(pulumi.StringPtrOutput)
}

// Pattern for the banned word.
func (o BwordEntryOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BwordEntry) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

// Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
func (o BwordEntryOutput) PatternType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BwordEntry) *string { return v.PatternType }).(pulumi.StringPtrOutput)
}

// Score value.
func (o BwordEntryOutput) Score() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BwordEntry) *int { return v.Score }).(pulumi.IntPtrOutput)
}

// Enable/disable status. Valid values: `enable`, `disable`.
func (o BwordEntryOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BwordEntry) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Component of the email to be scanned. Valid values: `subject`, `body`, `all`.
func (o BwordEntryOutput) Where() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BwordEntry) *string { return v.Where }).(pulumi.StringPtrOutput)
}

type BwordEntryArrayOutput struct{ *pulumi.OutputState }

func (BwordEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BwordEntry)(nil)).Elem()
}

func (o BwordEntryArrayOutput) ToBwordEntryArrayOutput() BwordEntryArrayOutput {
	return o
}

func (o BwordEntryArrayOutput) ToBwordEntryArrayOutputWithContext(ctx context.Context) BwordEntryArrayOutput {
	return o
}

func (o BwordEntryArrayOutput) Index(i pulumi.IntInput) BwordEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BwordEntry {
		return vs[0].([]BwordEntry)[vs[1].(int)]
	}).(BwordEntryOutput)
}

type DnsblEntry struct {
	// Reject connection or mark as spam email. Valid values: `reject`, `spam`.
	Action *string `pulumi:"action"`
	// DNSBL/ORBL entry ID.
	Id *int `pulumi:"id"`
	// DNSBL or ORBL server name.
	Server *string `pulumi:"server"`
	// Enable/disable status. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
}

// DnsblEntryInput is an input type that accepts DnsblEntryArgs and DnsblEntryOutput values.
// You can construct a concrete instance of `DnsblEntryInput` via:
//
//	DnsblEntryArgs{...}
type DnsblEntryInput interface {
	pulumi.Input

	ToDnsblEntryOutput() DnsblEntryOutput
	ToDnsblEntryOutputWithContext(context.Context) DnsblEntryOutput
}

type DnsblEntryArgs struct {
	// Reject connection or mark as spam email. Valid values: `reject`, `spam`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// DNSBL/ORBL entry ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// DNSBL or ORBL server name.
	Server pulumi.StringPtrInput `pulumi:"server"`
	// Enable/disable status. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (DnsblEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsblEntry)(nil)).Elem()
}

func (i DnsblEntryArgs) ToDnsblEntryOutput() DnsblEntryOutput {
	return i.ToDnsblEntryOutputWithContext(context.Background())
}

func (i DnsblEntryArgs) ToDnsblEntryOutputWithContext(ctx context.Context) DnsblEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsblEntryOutput)
}

// DnsblEntryArrayInput is an input type that accepts DnsblEntryArray and DnsblEntryArrayOutput values.
// You can construct a concrete instance of `DnsblEntryArrayInput` via:
//
//	DnsblEntryArray{ DnsblEntryArgs{...} }
type DnsblEntryArrayInput interface {
	pulumi.Input

	ToDnsblEntryArrayOutput() DnsblEntryArrayOutput
	ToDnsblEntryArrayOutputWithContext(context.Context) DnsblEntryArrayOutput
}

type DnsblEntryArray []DnsblEntryInput

func (DnsblEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsblEntry)(nil)).Elem()
}

func (i DnsblEntryArray) ToDnsblEntryArrayOutput() DnsblEntryArrayOutput {
	return i.ToDnsblEntryArrayOutputWithContext(context.Background())
}

func (i DnsblEntryArray) ToDnsblEntryArrayOutputWithContext(ctx context.Context) DnsblEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsblEntryArrayOutput)
}

type DnsblEntryOutput struct{ *pulumi.OutputState }

func (DnsblEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsblEntry)(nil)).Elem()
}

func (o DnsblEntryOutput) ToDnsblEntryOutput() DnsblEntryOutput {
	return o
}

func (o DnsblEntryOutput) ToDnsblEntryOutputWithContext(ctx context.Context) DnsblEntryOutput {
	return o
}

// Reject connection or mark as spam email. Valid values: `reject`, `spam`.
func (o DnsblEntryOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsblEntry) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// DNSBL/ORBL entry ID.
func (o DnsblEntryOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DnsblEntry) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// DNSBL or ORBL server name.
func (o DnsblEntryOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsblEntry) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// Enable/disable status. Valid values: `enable`, `disable`.
func (o DnsblEntryOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsblEntry) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type DnsblEntryArrayOutput struct{ *pulumi.OutputState }

func (DnsblEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsblEntry)(nil)).Elem()
}

func (o DnsblEntryArrayOutput) ToDnsblEntryArrayOutput() DnsblEntryArrayOutput {
	return o
}

func (o DnsblEntryArrayOutput) ToDnsblEntryArrayOutputWithContext(ctx context.Context) DnsblEntryArrayOutput {
	return o
}

func (o DnsblEntryArrayOutput) Index(i pulumi.IntInput) DnsblEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsblEntry {
		return vs[0].([]DnsblEntry)[vs[1].(int)]
	}).(DnsblEntryOutput)
}

type IptrustEntry struct {
	// Type of address. Valid values: `ipv4`, `ipv6`.
	AddrType *string `pulumi:"addrType"`
	// Trusted IP entry ID.
	Id *int `pulumi:"id"`
	// IPv4 network address or network address/subnet mask bits.
	Ip4Subnet *string `pulumi:"ip4Subnet"`
	// IPv6 network address/subnet mask bits.
	Ip6Subnet *string `pulumi:"ip6Subnet"`
	// Enable/disable status. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
}

// IptrustEntryInput is an input type that accepts IptrustEntryArgs and IptrustEntryOutput values.
// You can construct a concrete instance of `IptrustEntryInput` via:
//
//	IptrustEntryArgs{...}
type IptrustEntryInput interface {
	pulumi.Input

	ToIptrustEntryOutput() IptrustEntryOutput
	ToIptrustEntryOutputWithContext(context.Context) IptrustEntryOutput
}

type IptrustEntryArgs struct {
	// Type of address. Valid values: `ipv4`, `ipv6`.
	AddrType pulumi.StringPtrInput `pulumi:"addrType"`
	// Trusted IP entry ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// IPv4 network address or network address/subnet mask bits.
	Ip4Subnet pulumi.StringPtrInput `pulumi:"ip4Subnet"`
	// IPv6 network address/subnet mask bits.
	Ip6Subnet pulumi.StringPtrInput `pulumi:"ip6Subnet"`
	// Enable/disable status. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (IptrustEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IptrustEntry)(nil)).Elem()
}

func (i IptrustEntryArgs) ToIptrustEntryOutput() IptrustEntryOutput {
	return i.ToIptrustEntryOutputWithContext(context.Background())
}

func (i IptrustEntryArgs) ToIptrustEntryOutputWithContext(ctx context.Context) IptrustEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IptrustEntryOutput)
}

// IptrustEntryArrayInput is an input type that accepts IptrustEntryArray and IptrustEntryArrayOutput values.
// You can construct a concrete instance of `IptrustEntryArrayInput` via:
//
//	IptrustEntryArray{ IptrustEntryArgs{...} }
type IptrustEntryArrayInput interface {
	pulumi.Input

	ToIptrustEntryArrayOutput() IptrustEntryArrayOutput
	ToIptrustEntryArrayOutputWithContext(context.Context) IptrustEntryArrayOutput
}

type IptrustEntryArray []IptrustEntryInput

func (IptrustEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IptrustEntry)(nil)).Elem()
}

func (i IptrustEntryArray) ToIptrustEntryArrayOutput() IptrustEntryArrayOutput {
	return i.ToIptrustEntryArrayOutputWithContext(context.Background())
}

func (i IptrustEntryArray) ToIptrustEntryArrayOutputWithContext(ctx context.Context) IptrustEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IptrustEntryArrayOutput)
}

type IptrustEntryOutput struct{ *pulumi.OutputState }

func (IptrustEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IptrustEntry)(nil)).Elem()
}

func (o IptrustEntryOutput) ToIptrustEntryOutput() IptrustEntryOutput {
	return o
}

func (o IptrustEntryOutput) ToIptrustEntryOutputWithContext(ctx context.Context) IptrustEntryOutput {
	return o
}

// Type of address. Valid values: `ipv4`, `ipv6`.
func (o IptrustEntryOutput) AddrType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IptrustEntry) *string { return v.AddrType }).(pulumi.StringPtrOutput)
}

// Trusted IP entry ID.
func (o IptrustEntryOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IptrustEntry) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// IPv4 network address or network address/subnet mask bits.
func (o IptrustEntryOutput) Ip4Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IptrustEntry) *string { return v.Ip4Subnet }).(pulumi.StringPtrOutput)
}

// IPv6 network address/subnet mask bits.
func (o IptrustEntryOutput) Ip6Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IptrustEntry) *string { return v.Ip6Subnet }).(pulumi.StringPtrOutput)
}

// Enable/disable status. Valid values: `enable`, `disable`.
func (o IptrustEntryOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IptrustEntry) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type IptrustEntryArrayOutput struct{ *pulumi.OutputState }

func (IptrustEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IptrustEntry)(nil)).Elem()
}

func (o IptrustEntryArrayOutput) ToIptrustEntryArrayOutput() IptrustEntryArrayOutput {
	return o
}

func (o IptrustEntryArrayOutput) ToIptrustEntryArrayOutputWithContext(ctx context.Context) IptrustEntryArrayOutput {
	return o
}

func (o IptrustEntryArrayOutput) Index(i pulumi.IntInput) IptrustEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IptrustEntry {
		return vs[0].([]IptrustEntry)[vs[1].(int)]
	}).(IptrustEntryOutput)
}

type MheaderEntry struct {
	// Mark spam or good. Valid values: `spam`, `clear`.
	Action *string `pulumi:"action"`
	// Pattern for the header field body.
	Fieldbody *string `pulumi:"fieldbody"`
	// Pattern for header field name.
	Fieldname *string `pulumi:"fieldname"`
	// Mime header entry ID.
	Id *int `pulumi:"id"`
	// Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
	PatternType *string `pulumi:"patternType"`
	// Enable/disable status. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
}

// MheaderEntryInput is an input type that accepts MheaderEntryArgs and MheaderEntryOutput values.
// You can construct a concrete instance of `MheaderEntryInput` via:
//
//	MheaderEntryArgs{...}
type MheaderEntryInput interface {
	pulumi.Input

	ToMheaderEntryOutput() MheaderEntryOutput
	ToMheaderEntryOutputWithContext(context.Context) MheaderEntryOutput
}

type MheaderEntryArgs struct {
	// Mark spam or good. Valid values: `spam`, `clear`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Pattern for the header field body.
	Fieldbody pulumi.StringPtrInput `pulumi:"fieldbody"`
	// Pattern for header field name.
	Fieldname pulumi.StringPtrInput `pulumi:"fieldname"`
	// Mime header entry ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
	PatternType pulumi.StringPtrInput `pulumi:"patternType"`
	// Enable/disable status. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (MheaderEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MheaderEntry)(nil)).Elem()
}

func (i MheaderEntryArgs) ToMheaderEntryOutput() MheaderEntryOutput {
	return i.ToMheaderEntryOutputWithContext(context.Background())
}

func (i MheaderEntryArgs) ToMheaderEntryOutputWithContext(ctx context.Context) MheaderEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MheaderEntryOutput)
}

// MheaderEntryArrayInput is an input type that accepts MheaderEntryArray and MheaderEntryArrayOutput values.
// You can construct a concrete instance of `MheaderEntryArrayInput` via:
//
//	MheaderEntryArray{ MheaderEntryArgs{...} }
type MheaderEntryArrayInput interface {
	pulumi.Input

	ToMheaderEntryArrayOutput() MheaderEntryArrayOutput
	ToMheaderEntryArrayOutputWithContext(context.Context) MheaderEntryArrayOutput
}

type MheaderEntryArray []MheaderEntryInput

func (MheaderEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MheaderEntry)(nil)).Elem()
}

func (i MheaderEntryArray) ToMheaderEntryArrayOutput() MheaderEntryArrayOutput {
	return i.ToMheaderEntryArrayOutputWithContext(context.Background())
}

func (i MheaderEntryArray) ToMheaderEntryArrayOutputWithContext(ctx context.Context) MheaderEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MheaderEntryArrayOutput)
}

type MheaderEntryOutput struct{ *pulumi.OutputState }

func (MheaderEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MheaderEntry)(nil)).Elem()
}

func (o MheaderEntryOutput) ToMheaderEntryOutput() MheaderEntryOutput {
	return o
}

func (o MheaderEntryOutput) ToMheaderEntryOutputWithContext(ctx context.Context) MheaderEntryOutput {
	return o
}

// Mark spam or good. Valid values: `spam`, `clear`.
func (o MheaderEntryOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MheaderEntry) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Pattern for the header field body.
func (o MheaderEntryOutput) Fieldbody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MheaderEntry) *string { return v.Fieldbody }).(pulumi.StringPtrOutput)
}

// Pattern for header field name.
func (o MheaderEntryOutput) Fieldname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MheaderEntry) *string { return v.Fieldname }).(pulumi.StringPtrOutput)
}

// Mime header entry ID.
func (o MheaderEntryOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MheaderEntry) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
func (o MheaderEntryOutput) PatternType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MheaderEntry) *string { return v.PatternType }).(pulumi.StringPtrOutput)
}

// Enable/disable status. Valid values: `enable`, `disable`.
func (o MheaderEntryOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MheaderEntry) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type MheaderEntryArrayOutput struct{ *pulumi.OutputState }

func (MheaderEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MheaderEntry)(nil)).Elem()
}

func (o MheaderEntryArrayOutput) ToMheaderEntryArrayOutput() MheaderEntryArrayOutput {
	return o
}

func (o MheaderEntryArrayOutput) ToMheaderEntryArrayOutputWithContext(ctx context.Context) MheaderEntryArrayOutput {
	return o
}

func (o MheaderEntryArrayOutput) Index(i pulumi.IntInput) MheaderEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MheaderEntry {
		return vs[0].([]MheaderEntry)[vs[1].(int)]
	}).(MheaderEntryOutput)
}

type ProfileGmail struct {
	// Enable/disable logging. Valid values: `enable`, `disable`.
	Log *string `pulumi:"log"`
}

// ProfileGmailInput is an input type that accepts ProfileGmailArgs and ProfileGmailOutput values.
// You can construct a concrete instance of `ProfileGmailInput` via:
//
//	ProfileGmailArgs{...}
type ProfileGmailInput interface {
	pulumi.Input

	ToProfileGmailOutput() ProfileGmailOutput
	ToProfileGmailOutputWithContext(context.Context) ProfileGmailOutput
}

type ProfileGmailArgs struct {
	// Enable/disable logging. Valid values: `enable`, `disable`.
	Log pulumi.StringPtrInput `pulumi:"log"`
}

func (ProfileGmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileGmail)(nil)).Elem()
}

func (i ProfileGmailArgs) ToProfileGmailOutput() ProfileGmailOutput {
	return i.ToProfileGmailOutputWithContext(context.Background())
}

func (i ProfileGmailArgs) ToProfileGmailOutputWithContext(ctx context.Context) ProfileGmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileGmailOutput)
}

func (i ProfileGmailArgs) ToProfileGmailPtrOutput() ProfileGmailPtrOutput {
	return i.ToProfileGmailPtrOutputWithContext(context.Background())
}

func (i ProfileGmailArgs) ToProfileGmailPtrOutputWithContext(ctx context.Context) ProfileGmailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileGmailOutput).ToProfileGmailPtrOutputWithContext(ctx)
}

// ProfileGmailPtrInput is an input type that accepts ProfileGmailArgs, ProfileGmailPtr and ProfileGmailPtrOutput values.
// You can construct a concrete instance of `ProfileGmailPtrInput` via:
//
//	        ProfileGmailArgs{...}
//
//	or:
//
//	        nil
type ProfileGmailPtrInput interface {
	pulumi.Input

	ToProfileGmailPtrOutput() ProfileGmailPtrOutput
	ToProfileGmailPtrOutputWithContext(context.Context) ProfileGmailPtrOutput
}

type profileGmailPtrType ProfileGmailArgs

func ProfileGmailPtr(v *ProfileGmailArgs) ProfileGmailPtrInput {
	return (*profileGmailPtrType)(v)
}

func (*profileGmailPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileGmail)(nil)).Elem()
}

func (i *profileGmailPtrType) ToProfileGmailPtrOutput() ProfileGmailPtrOutput {
	return i.ToProfileGmailPtrOutputWithContext(context.Background())
}

func (i *profileGmailPtrType) ToProfileGmailPtrOutputWithContext(ctx context.Context) ProfileGmailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileGmailPtrOutput)
}

type ProfileGmailOutput struct{ *pulumi.OutputState }

func (ProfileGmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileGmail)(nil)).Elem()
}

func (o ProfileGmailOutput) ToProfileGmailOutput() ProfileGmailOutput {
	return o
}

func (o ProfileGmailOutput) ToProfileGmailOutputWithContext(ctx context.Context) ProfileGmailOutput {
	return o
}

func (o ProfileGmailOutput) ToProfileGmailPtrOutput() ProfileGmailPtrOutput {
	return o.ToProfileGmailPtrOutputWithContext(context.Background())
}

func (o ProfileGmailOutput) ToProfileGmailPtrOutputWithContext(ctx context.Context) ProfileGmailPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileGmail) *ProfileGmail {
		return &v
	}).(ProfileGmailPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileGmailOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileGmail) *string { return v.Log }).(pulumi.StringPtrOutput)
}

type ProfileGmailPtrOutput struct{ *pulumi.OutputState }

func (ProfileGmailPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileGmail)(nil)).Elem()
}

func (o ProfileGmailPtrOutput) ToProfileGmailPtrOutput() ProfileGmailPtrOutput {
	return o
}

func (o ProfileGmailPtrOutput) ToProfileGmailPtrOutputWithContext(ctx context.Context) ProfileGmailPtrOutput {
	return o
}

func (o ProfileGmailPtrOutput) Elem() ProfileGmailOutput {
	return o.ApplyT(func(v *ProfileGmail) ProfileGmail {
		if v != nil {
			return *v
		}
		var ret ProfileGmail
		return ret
	}).(ProfileGmailOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileGmailPtrOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileGmail) *string {
		if v == nil {
			return nil
		}
		return v.Log
	}).(pulumi.StringPtrOutput)
}

type ProfileImap struct {
	// Action for spam email. Valid values: `pass`, `tag`.
	Action *string `pulumi:"action"`
	// Enable/disable logging. Valid values: `enable`, `disable`.
	Log *string `pulumi:"log"`
	// Subject text or header added to spam email.
	TagMsg *string `pulumi:"tagMsg"`
	// Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
	TagType *string `pulumi:"tagType"`
}

// ProfileImapInput is an input type that accepts ProfileImapArgs and ProfileImapOutput values.
// You can construct a concrete instance of `ProfileImapInput` via:
//
//	ProfileImapArgs{...}
type ProfileImapInput interface {
	pulumi.Input

	ToProfileImapOutput() ProfileImapOutput
	ToProfileImapOutputWithContext(context.Context) ProfileImapOutput
}

type ProfileImapArgs struct {
	// Action for spam email. Valid values: `pass`, `tag`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Enable/disable logging. Valid values: `enable`, `disable`.
	Log pulumi.StringPtrInput `pulumi:"log"`
	// Subject text or header added to spam email.
	TagMsg pulumi.StringPtrInput `pulumi:"tagMsg"`
	// Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
	TagType pulumi.StringPtrInput `pulumi:"tagType"`
}

func (ProfileImapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileImap)(nil)).Elem()
}

func (i ProfileImapArgs) ToProfileImapOutput() ProfileImapOutput {
	return i.ToProfileImapOutputWithContext(context.Background())
}

func (i ProfileImapArgs) ToProfileImapOutputWithContext(ctx context.Context) ProfileImapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileImapOutput)
}

func (i ProfileImapArgs) ToProfileImapPtrOutput() ProfileImapPtrOutput {
	return i.ToProfileImapPtrOutputWithContext(context.Background())
}

func (i ProfileImapArgs) ToProfileImapPtrOutputWithContext(ctx context.Context) ProfileImapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileImapOutput).ToProfileImapPtrOutputWithContext(ctx)
}

// ProfileImapPtrInput is an input type that accepts ProfileImapArgs, ProfileImapPtr and ProfileImapPtrOutput values.
// You can construct a concrete instance of `ProfileImapPtrInput` via:
//
//	        ProfileImapArgs{...}
//
//	or:
//
//	        nil
type ProfileImapPtrInput interface {
	pulumi.Input

	ToProfileImapPtrOutput() ProfileImapPtrOutput
	ToProfileImapPtrOutputWithContext(context.Context) ProfileImapPtrOutput
}

type profileImapPtrType ProfileImapArgs

func ProfileImapPtr(v *ProfileImapArgs) ProfileImapPtrInput {
	return (*profileImapPtrType)(v)
}

func (*profileImapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileImap)(nil)).Elem()
}

func (i *profileImapPtrType) ToProfileImapPtrOutput() ProfileImapPtrOutput {
	return i.ToProfileImapPtrOutputWithContext(context.Background())
}

func (i *profileImapPtrType) ToProfileImapPtrOutputWithContext(ctx context.Context) ProfileImapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileImapPtrOutput)
}

type ProfileImapOutput struct{ *pulumi.OutputState }

func (ProfileImapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileImap)(nil)).Elem()
}

func (o ProfileImapOutput) ToProfileImapOutput() ProfileImapOutput {
	return o
}

func (o ProfileImapOutput) ToProfileImapOutputWithContext(ctx context.Context) ProfileImapOutput {
	return o
}

func (o ProfileImapOutput) ToProfileImapPtrOutput() ProfileImapPtrOutput {
	return o.ToProfileImapPtrOutputWithContext(context.Background())
}

func (o ProfileImapOutput) ToProfileImapPtrOutputWithContext(ctx context.Context) ProfileImapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileImap) *ProfileImap {
		return &v
	}).(ProfileImapPtrOutput)
}

// Action for spam email. Valid values: `pass`, `tag`.
func (o ProfileImapOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileImap) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileImapOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileImap) *string { return v.Log }).(pulumi.StringPtrOutput)
}

// Subject text or header added to spam email.
func (o ProfileImapOutput) TagMsg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileImap) *string { return v.TagMsg }).(pulumi.StringPtrOutput)
}

// Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
func (o ProfileImapOutput) TagType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileImap) *string { return v.TagType }).(pulumi.StringPtrOutput)
}

type ProfileImapPtrOutput struct{ *pulumi.OutputState }

func (ProfileImapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileImap)(nil)).Elem()
}

func (o ProfileImapPtrOutput) ToProfileImapPtrOutput() ProfileImapPtrOutput {
	return o
}

func (o ProfileImapPtrOutput) ToProfileImapPtrOutputWithContext(ctx context.Context) ProfileImapPtrOutput {
	return o
}

func (o ProfileImapPtrOutput) Elem() ProfileImapOutput {
	return o.ApplyT(func(v *ProfileImap) ProfileImap {
		if v != nil {
			return *v
		}
		var ret ProfileImap
		return ret
	}).(ProfileImapOutput)
}

// Action for spam email. Valid values: `pass`, `tag`.
func (o ProfileImapPtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileImap) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileImapPtrOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileImap) *string {
		if v == nil {
			return nil
		}
		return v.Log
	}).(pulumi.StringPtrOutput)
}

// Subject text or header added to spam email.
func (o ProfileImapPtrOutput) TagMsg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileImap) *string {
		if v == nil {
			return nil
		}
		return v.TagMsg
	}).(pulumi.StringPtrOutput)
}

// Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
func (o ProfileImapPtrOutput) TagType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileImap) *string {
		if v == nil {
			return nil
		}
		return v.TagType
	}).(pulumi.StringPtrOutput)
}

type ProfileMapi struct {
	// Action for spam email. Valid values: `pass`, `discard`.
	Action *string `pulumi:"action"`
	// Enable/disable logging. Valid values: `enable`, `disable`.
	Log *string `pulumi:"log"`
}

// ProfileMapiInput is an input type that accepts ProfileMapiArgs and ProfileMapiOutput values.
// You can construct a concrete instance of `ProfileMapiInput` via:
//
//	ProfileMapiArgs{...}
type ProfileMapiInput interface {
	pulumi.Input

	ToProfileMapiOutput() ProfileMapiOutput
	ToProfileMapiOutputWithContext(context.Context) ProfileMapiOutput
}

type ProfileMapiArgs struct {
	// Action for spam email. Valid values: `pass`, `discard`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Enable/disable logging. Valid values: `enable`, `disable`.
	Log pulumi.StringPtrInput `pulumi:"log"`
}

func (ProfileMapiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileMapi)(nil)).Elem()
}

func (i ProfileMapiArgs) ToProfileMapiOutput() ProfileMapiOutput {
	return i.ToProfileMapiOutputWithContext(context.Background())
}

func (i ProfileMapiArgs) ToProfileMapiOutputWithContext(ctx context.Context) ProfileMapiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMapiOutput)
}

func (i ProfileMapiArgs) ToProfileMapiPtrOutput() ProfileMapiPtrOutput {
	return i.ToProfileMapiPtrOutputWithContext(context.Background())
}

func (i ProfileMapiArgs) ToProfileMapiPtrOutputWithContext(ctx context.Context) ProfileMapiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMapiOutput).ToProfileMapiPtrOutputWithContext(ctx)
}

// ProfileMapiPtrInput is an input type that accepts ProfileMapiArgs, ProfileMapiPtr and ProfileMapiPtrOutput values.
// You can construct a concrete instance of `ProfileMapiPtrInput` via:
//
//	        ProfileMapiArgs{...}
//
//	or:
//
//	        nil
type ProfileMapiPtrInput interface {
	pulumi.Input

	ToProfileMapiPtrOutput() ProfileMapiPtrOutput
	ToProfileMapiPtrOutputWithContext(context.Context) ProfileMapiPtrOutput
}

type profileMapiPtrType ProfileMapiArgs

func ProfileMapiPtr(v *ProfileMapiArgs) ProfileMapiPtrInput {
	return (*profileMapiPtrType)(v)
}

func (*profileMapiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileMapi)(nil)).Elem()
}

func (i *profileMapiPtrType) ToProfileMapiPtrOutput() ProfileMapiPtrOutput {
	return i.ToProfileMapiPtrOutputWithContext(context.Background())
}

func (i *profileMapiPtrType) ToProfileMapiPtrOutputWithContext(ctx context.Context) ProfileMapiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMapiPtrOutput)
}

type ProfileMapiOutput struct{ *pulumi.OutputState }

func (ProfileMapiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileMapi)(nil)).Elem()
}

func (o ProfileMapiOutput) ToProfileMapiOutput() ProfileMapiOutput {
	return o
}

func (o ProfileMapiOutput) ToProfileMapiOutputWithContext(ctx context.Context) ProfileMapiOutput {
	return o
}

func (o ProfileMapiOutput) ToProfileMapiPtrOutput() ProfileMapiPtrOutput {
	return o.ToProfileMapiPtrOutputWithContext(context.Background())
}

func (o ProfileMapiOutput) ToProfileMapiPtrOutputWithContext(ctx context.Context) ProfileMapiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileMapi) *ProfileMapi {
		return &v
	}).(ProfileMapiPtrOutput)
}

// Action for spam email. Valid values: `pass`, `discard`.
func (o ProfileMapiOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileMapi) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileMapiOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileMapi) *string { return v.Log }).(pulumi.StringPtrOutput)
}

type ProfileMapiPtrOutput struct{ *pulumi.OutputState }

func (ProfileMapiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileMapi)(nil)).Elem()
}

func (o ProfileMapiPtrOutput) ToProfileMapiPtrOutput() ProfileMapiPtrOutput {
	return o
}

func (o ProfileMapiPtrOutput) ToProfileMapiPtrOutputWithContext(ctx context.Context) ProfileMapiPtrOutput {
	return o
}

func (o ProfileMapiPtrOutput) Elem() ProfileMapiOutput {
	return o.ApplyT(func(v *ProfileMapi) ProfileMapi {
		if v != nil {
			return *v
		}
		var ret ProfileMapi
		return ret
	}).(ProfileMapiOutput)
}

// Action for spam email. Valid values: `pass`, `discard`.
func (o ProfileMapiPtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileMapi) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileMapiPtrOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileMapi) *string {
		if v == nil {
			return nil
		}
		return v.Log
	}).(pulumi.StringPtrOutput)
}

type ProfileMsnHotmail struct {
	// Enable/disable logging. Valid values: `enable`, `disable`.
	Log *string `pulumi:"log"`
}

// ProfileMsnHotmailInput is an input type that accepts ProfileMsnHotmailArgs and ProfileMsnHotmailOutput values.
// You can construct a concrete instance of `ProfileMsnHotmailInput` via:
//
//	ProfileMsnHotmailArgs{...}
type ProfileMsnHotmailInput interface {
	pulumi.Input

	ToProfileMsnHotmailOutput() ProfileMsnHotmailOutput
	ToProfileMsnHotmailOutputWithContext(context.Context) ProfileMsnHotmailOutput
}

type ProfileMsnHotmailArgs struct {
	// Enable/disable logging. Valid values: `enable`, `disable`.
	Log pulumi.StringPtrInput `pulumi:"log"`
}

func (ProfileMsnHotmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileMsnHotmail)(nil)).Elem()
}

func (i ProfileMsnHotmailArgs) ToProfileMsnHotmailOutput() ProfileMsnHotmailOutput {
	return i.ToProfileMsnHotmailOutputWithContext(context.Background())
}

func (i ProfileMsnHotmailArgs) ToProfileMsnHotmailOutputWithContext(ctx context.Context) ProfileMsnHotmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMsnHotmailOutput)
}

func (i ProfileMsnHotmailArgs) ToProfileMsnHotmailPtrOutput() ProfileMsnHotmailPtrOutput {
	return i.ToProfileMsnHotmailPtrOutputWithContext(context.Background())
}

func (i ProfileMsnHotmailArgs) ToProfileMsnHotmailPtrOutputWithContext(ctx context.Context) ProfileMsnHotmailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMsnHotmailOutput).ToProfileMsnHotmailPtrOutputWithContext(ctx)
}

// ProfileMsnHotmailPtrInput is an input type that accepts ProfileMsnHotmailArgs, ProfileMsnHotmailPtr and ProfileMsnHotmailPtrOutput values.
// You can construct a concrete instance of `ProfileMsnHotmailPtrInput` via:
//
//	        ProfileMsnHotmailArgs{...}
//
//	or:
//
//	        nil
type ProfileMsnHotmailPtrInput interface {
	pulumi.Input

	ToProfileMsnHotmailPtrOutput() ProfileMsnHotmailPtrOutput
	ToProfileMsnHotmailPtrOutputWithContext(context.Context) ProfileMsnHotmailPtrOutput
}

type profileMsnHotmailPtrType ProfileMsnHotmailArgs

func ProfileMsnHotmailPtr(v *ProfileMsnHotmailArgs) ProfileMsnHotmailPtrInput {
	return (*profileMsnHotmailPtrType)(v)
}

func (*profileMsnHotmailPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileMsnHotmail)(nil)).Elem()
}

func (i *profileMsnHotmailPtrType) ToProfileMsnHotmailPtrOutput() ProfileMsnHotmailPtrOutput {
	return i.ToProfileMsnHotmailPtrOutputWithContext(context.Background())
}

func (i *profileMsnHotmailPtrType) ToProfileMsnHotmailPtrOutputWithContext(ctx context.Context) ProfileMsnHotmailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMsnHotmailPtrOutput)
}

type ProfileMsnHotmailOutput struct{ *pulumi.OutputState }

func (ProfileMsnHotmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileMsnHotmail)(nil)).Elem()
}

func (o ProfileMsnHotmailOutput) ToProfileMsnHotmailOutput() ProfileMsnHotmailOutput {
	return o
}

func (o ProfileMsnHotmailOutput) ToProfileMsnHotmailOutputWithContext(ctx context.Context) ProfileMsnHotmailOutput {
	return o
}

func (o ProfileMsnHotmailOutput) ToProfileMsnHotmailPtrOutput() ProfileMsnHotmailPtrOutput {
	return o.ToProfileMsnHotmailPtrOutputWithContext(context.Background())
}

func (o ProfileMsnHotmailOutput) ToProfileMsnHotmailPtrOutputWithContext(ctx context.Context) ProfileMsnHotmailPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileMsnHotmail) *ProfileMsnHotmail {
		return &v
	}).(ProfileMsnHotmailPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileMsnHotmailOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileMsnHotmail) *string { return v.Log }).(pulumi.StringPtrOutput)
}

type ProfileMsnHotmailPtrOutput struct{ *pulumi.OutputState }

func (ProfileMsnHotmailPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileMsnHotmail)(nil)).Elem()
}

func (o ProfileMsnHotmailPtrOutput) ToProfileMsnHotmailPtrOutput() ProfileMsnHotmailPtrOutput {
	return o
}

func (o ProfileMsnHotmailPtrOutput) ToProfileMsnHotmailPtrOutputWithContext(ctx context.Context) ProfileMsnHotmailPtrOutput {
	return o
}

func (o ProfileMsnHotmailPtrOutput) Elem() ProfileMsnHotmailOutput {
	return o.ApplyT(func(v *ProfileMsnHotmail) ProfileMsnHotmail {
		if v != nil {
			return *v
		}
		var ret ProfileMsnHotmail
		return ret
	}).(ProfileMsnHotmailOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileMsnHotmailPtrOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileMsnHotmail) *string {
		if v == nil {
			return nil
		}
		return v.Log
	}).(pulumi.StringPtrOutput)
}

type ProfilePop3 struct {
	Action  *string `pulumi:"action"`
	Log     *string `pulumi:"log"`
	TagMsg  *string `pulumi:"tagMsg"`
	TagType *string `pulumi:"tagType"`
}

// ProfilePop3Input is an input type that accepts ProfilePop3Args and ProfilePop3Output values.
// You can construct a concrete instance of `ProfilePop3Input` via:
//
//	ProfilePop3Args{...}
type ProfilePop3Input interface {
	pulumi.Input

	ToProfilePop3Output() ProfilePop3Output
	ToProfilePop3OutputWithContext(context.Context) ProfilePop3Output
}

type ProfilePop3Args struct {
	Action  pulumi.StringPtrInput `pulumi:"action"`
	Log     pulumi.StringPtrInput `pulumi:"log"`
	TagMsg  pulumi.StringPtrInput `pulumi:"tagMsg"`
	TagType pulumi.StringPtrInput `pulumi:"tagType"`
}

func (ProfilePop3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfilePop3)(nil)).Elem()
}

func (i ProfilePop3Args) ToProfilePop3Output() ProfilePop3Output {
	return i.ToProfilePop3OutputWithContext(context.Background())
}

func (i ProfilePop3Args) ToProfilePop3OutputWithContext(ctx context.Context) ProfilePop3Output {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilePop3Output)
}

func (i ProfilePop3Args) ToProfilePop3PtrOutput() ProfilePop3PtrOutput {
	return i.ToProfilePop3PtrOutputWithContext(context.Background())
}

func (i ProfilePop3Args) ToProfilePop3PtrOutputWithContext(ctx context.Context) ProfilePop3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilePop3Output).ToProfilePop3PtrOutputWithContext(ctx)
}

// ProfilePop3PtrInput is an input type that accepts ProfilePop3Args, ProfilePop3Ptr and ProfilePop3PtrOutput values.
// You can construct a concrete instance of `ProfilePop3PtrInput` via:
//
//	        ProfilePop3Args{...}
//
//	or:
//
//	        nil
type ProfilePop3PtrInput interface {
	pulumi.Input

	ToProfilePop3PtrOutput() ProfilePop3PtrOutput
	ToProfilePop3PtrOutputWithContext(context.Context) ProfilePop3PtrOutput
}

type profilePop3PtrType ProfilePop3Args

func ProfilePop3Ptr(v *ProfilePop3Args) ProfilePop3PtrInput {
	return (*profilePop3PtrType)(v)
}

func (*profilePop3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfilePop3)(nil)).Elem()
}

func (i *profilePop3PtrType) ToProfilePop3PtrOutput() ProfilePop3PtrOutput {
	return i.ToProfilePop3PtrOutputWithContext(context.Background())
}

func (i *profilePop3PtrType) ToProfilePop3PtrOutputWithContext(ctx context.Context) ProfilePop3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilePop3PtrOutput)
}

type ProfilePop3Output struct{ *pulumi.OutputState }

func (ProfilePop3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfilePop3)(nil)).Elem()
}

func (o ProfilePop3Output) ToProfilePop3Output() ProfilePop3Output {
	return o
}

func (o ProfilePop3Output) ToProfilePop3OutputWithContext(ctx context.Context) ProfilePop3Output {
	return o
}

func (o ProfilePop3Output) ToProfilePop3PtrOutput() ProfilePop3PtrOutput {
	return o.ToProfilePop3PtrOutputWithContext(context.Background())
}

func (o ProfilePop3Output) ToProfilePop3PtrOutputWithContext(ctx context.Context) ProfilePop3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfilePop3) *ProfilePop3 {
		return &v
	}).(ProfilePop3PtrOutput)
}

func (o ProfilePop3Output) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilePop3) *string { return v.Action }).(pulumi.StringPtrOutput)
}

func (o ProfilePop3Output) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilePop3) *string { return v.Log }).(pulumi.StringPtrOutput)
}

func (o ProfilePop3Output) TagMsg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilePop3) *string { return v.TagMsg }).(pulumi.StringPtrOutput)
}

func (o ProfilePop3Output) TagType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilePop3) *string { return v.TagType }).(pulumi.StringPtrOutput)
}

type ProfilePop3PtrOutput struct{ *pulumi.OutputState }

func (ProfilePop3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfilePop3)(nil)).Elem()
}

func (o ProfilePop3PtrOutput) ToProfilePop3PtrOutput() ProfilePop3PtrOutput {
	return o
}

func (o ProfilePop3PtrOutput) ToProfilePop3PtrOutputWithContext(ctx context.Context) ProfilePop3PtrOutput {
	return o
}

func (o ProfilePop3PtrOutput) Elem() ProfilePop3Output {
	return o.ApplyT(func(v *ProfilePop3) ProfilePop3 {
		if v != nil {
			return *v
		}
		var ret ProfilePop3
		return ret
	}).(ProfilePop3Output)
}

func (o ProfilePop3PtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilePop3) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

func (o ProfilePop3PtrOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilePop3) *string {
		if v == nil {
			return nil
		}
		return v.Log
	}).(pulumi.StringPtrOutput)
}

func (o ProfilePop3PtrOutput) TagMsg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilePop3) *string {
		if v == nil {
			return nil
		}
		return v.TagMsg
	}).(pulumi.StringPtrOutput)
}

func (o ProfilePop3PtrOutput) TagType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilePop3) *string {
		if v == nil {
			return nil
		}
		return v.TagType
	}).(pulumi.StringPtrOutput)
}

type ProfileSmtp struct {
	// Action for spam email. Valid values: `pass`, `tag`, `discard`.
	Action *string `pulumi:"action"`
	// Enable/disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters. Valid values: `disable`, `enable`.
	Hdrip *string `pulumi:"hdrip"`
	// Enable/disable local filter to override SMTP remote check result. Valid values: `disable`, `enable`.
	LocalOverride *string `pulumi:"localOverride"`
	// Enable/disable logging. Valid values: `enable`, `disable`.
	Log *string `pulumi:"log"`
	// Subject text or header added to spam email.
	TagMsg *string `pulumi:"tagMsg"`
	// Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
	TagType *string `pulumi:"tagType"`
}

// ProfileSmtpInput is an input type that accepts ProfileSmtpArgs and ProfileSmtpOutput values.
// You can construct a concrete instance of `ProfileSmtpInput` via:
//
//	ProfileSmtpArgs{...}
type ProfileSmtpInput interface {
	pulumi.Input

	ToProfileSmtpOutput() ProfileSmtpOutput
	ToProfileSmtpOutputWithContext(context.Context) ProfileSmtpOutput
}

type ProfileSmtpArgs struct {
	// Action for spam email. Valid values: `pass`, `tag`, `discard`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Enable/disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters. Valid values: `disable`, `enable`.
	Hdrip pulumi.StringPtrInput `pulumi:"hdrip"`
	// Enable/disable local filter to override SMTP remote check result. Valid values: `disable`, `enable`.
	LocalOverride pulumi.StringPtrInput `pulumi:"localOverride"`
	// Enable/disable logging. Valid values: `enable`, `disable`.
	Log pulumi.StringPtrInput `pulumi:"log"`
	// Subject text or header added to spam email.
	TagMsg pulumi.StringPtrInput `pulumi:"tagMsg"`
	// Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
	TagType pulumi.StringPtrInput `pulumi:"tagType"`
}

func (ProfileSmtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileSmtp)(nil)).Elem()
}

func (i ProfileSmtpArgs) ToProfileSmtpOutput() ProfileSmtpOutput {
	return i.ToProfileSmtpOutputWithContext(context.Background())
}

func (i ProfileSmtpArgs) ToProfileSmtpOutputWithContext(ctx context.Context) ProfileSmtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileSmtpOutput)
}

func (i ProfileSmtpArgs) ToProfileSmtpPtrOutput() ProfileSmtpPtrOutput {
	return i.ToProfileSmtpPtrOutputWithContext(context.Background())
}

func (i ProfileSmtpArgs) ToProfileSmtpPtrOutputWithContext(ctx context.Context) ProfileSmtpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileSmtpOutput).ToProfileSmtpPtrOutputWithContext(ctx)
}

// ProfileSmtpPtrInput is an input type that accepts ProfileSmtpArgs, ProfileSmtpPtr and ProfileSmtpPtrOutput values.
// You can construct a concrete instance of `ProfileSmtpPtrInput` via:
//
//	        ProfileSmtpArgs{...}
//
//	or:
//
//	        nil
type ProfileSmtpPtrInput interface {
	pulumi.Input

	ToProfileSmtpPtrOutput() ProfileSmtpPtrOutput
	ToProfileSmtpPtrOutputWithContext(context.Context) ProfileSmtpPtrOutput
}

type profileSmtpPtrType ProfileSmtpArgs

func ProfileSmtpPtr(v *ProfileSmtpArgs) ProfileSmtpPtrInput {
	return (*profileSmtpPtrType)(v)
}

func (*profileSmtpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileSmtp)(nil)).Elem()
}

func (i *profileSmtpPtrType) ToProfileSmtpPtrOutput() ProfileSmtpPtrOutput {
	return i.ToProfileSmtpPtrOutputWithContext(context.Background())
}

func (i *profileSmtpPtrType) ToProfileSmtpPtrOutputWithContext(ctx context.Context) ProfileSmtpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileSmtpPtrOutput)
}

type ProfileSmtpOutput struct{ *pulumi.OutputState }

func (ProfileSmtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileSmtp)(nil)).Elem()
}

func (o ProfileSmtpOutput) ToProfileSmtpOutput() ProfileSmtpOutput {
	return o
}

func (o ProfileSmtpOutput) ToProfileSmtpOutputWithContext(ctx context.Context) ProfileSmtpOutput {
	return o
}

func (o ProfileSmtpOutput) ToProfileSmtpPtrOutput() ProfileSmtpPtrOutput {
	return o.ToProfileSmtpPtrOutputWithContext(context.Background())
}

func (o ProfileSmtpOutput) ToProfileSmtpPtrOutputWithContext(ctx context.Context) ProfileSmtpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileSmtp) *ProfileSmtp {
		return &v
	}).(ProfileSmtpPtrOutput)
}

// Action for spam email. Valid values: `pass`, `tag`, `discard`.
func (o ProfileSmtpOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSmtp) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Enable/disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters. Valid values: `disable`, `enable`.
func (o ProfileSmtpOutput) Hdrip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSmtp) *string { return v.Hdrip }).(pulumi.StringPtrOutput)
}

// Enable/disable local filter to override SMTP remote check result. Valid values: `disable`, `enable`.
func (o ProfileSmtpOutput) LocalOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSmtp) *string { return v.LocalOverride }).(pulumi.StringPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileSmtpOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSmtp) *string { return v.Log }).(pulumi.StringPtrOutput)
}

// Subject text or header added to spam email.
func (o ProfileSmtpOutput) TagMsg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSmtp) *string { return v.TagMsg }).(pulumi.StringPtrOutput)
}

// Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
func (o ProfileSmtpOutput) TagType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSmtp) *string { return v.TagType }).(pulumi.StringPtrOutput)
}

type ProfileSmtpPtrOutput struct{ *pulumi.OutputState }

func (ProfileSmtpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileSmtp)(nil)).Elem()
}

func (o ProfileSmtpPtrOutput) ToProfileSmtpPtrOutput() ProfileSmtpPtrOutput {
	return o
}

func (o ProfileSmtpPtrOutput) ToProfileSmtpPtrOutputWithContext(ctx context.Context) ProfileSmtpPtrOutput {
	return o
}

func (o ProfileSmtpPtrOutput) Elem() ProfileSmtpOutput {
	return o.ApplyT(func(v *ProfileSmtp) ProfileSmtp {
		if v != nil {
			return *v
		}
		var ret ProfileSmtp
		return ret
	}).(ProfileSmtpOutput)
}

// Action for spam email. Valid values: `pass`, `tag`, `discard`.
func (o ProfileSmtpPtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSmtp) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

// Enable/disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters. Valid values: `disable`, `enable`.
func (o ProfileSmtpPtrOutput) Hdrip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSmtp) *string {
		if v == nil {
			return nil
		}
		return v.Hdrip
	}).(pulumi.StringPtrOutput)
}

// Enable/disable local filter to override SMTP remote check result. Valid values: `disable`, `enable`.
func (o ProfileSmtpPtrOutput) LocalOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSmtp) *string {
		if v == nil {
			return nil
		}
		return v.LocalOverride
	}).(pulumi.StringPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileSmtpPtrOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSmtp) *string {
		if v == nil {
			return nil
		}
		return v.Log
	}).(pulumi.StringPtrOutput)
}

// Subject text or header added to spam email.
func (o ProfileSmtpPtrOutput) TagMsg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSmtp) *string {
		if v == nil {
			return nil
		}
		return v.TagMsg
	}).(pulumi.StringPtrOutput)
}

// Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
func (o ProfileSmtpPtrOutput) TagType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSmtp) *string {
		if v == nil {
			return nil
		}
		return v.TagType
	}).(pulumi.StringPtrOutput)
}

type ProfileYahooMail struct {
	// Enable/disable logging. Valid values: `enable`, `disable`.
	Log *string `pulumi:"log"`
}

// ProfileYahooMailInput is an input type that accepts ProfileYahooMailArgs and ProfileYahooMailOutput values.
// You can construct a concrete instance of `ProfileYahooMailInput` via:
//
//	ProfileYahooMailArgs{...}
type ProfileYahooMailInput interface {
	pulumi.Input

	ToProfileYahooMailOutput() ProfileYahooMailOutput
	ToProfileYahooMailOutputWithContext(context.Context) ProfileYahooMailOutput
}

type ProfileYahooMailArgs struct {
	// Enable/disable logging. Valid values: `enable`, `disable`.
	Log pulumi.StringPtrInput `pulumi:"log"`
}

func (ProfileYahooMailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileYahooMail)(nil)).Elem()
}

func (i ProfileYahooMailArgs) ToProfileYahooMailOutput() ProfileYahooMailOutput {
	return i.ToProfileYahooMailOutputWithContext(context.Background())
}

func (i ProfileYahooMailArgs) ToProfileYahooMailOutputWithContext(ctx context.Context) ProfileYahooMailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileYahooMailOutput)
}

func (i ProfileYahooMailArgs) ToProfileYahooMailPtrOutput() ProfileYahooMailPtrOutput {
	return i.ToProfileYahooMailPtrOutputWithContext(context.Background())
}

func (i ProfileYahooMailArgs) ToProfileYahooMailPtrOutputWithContext(ctx context.Context) ProfileYahooMailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileYahooMailOutput).ToProfileYahooMailPtrOutputWithContext(ctx)
}

// ProfileYahooMailPtrInput is an input type that accepts ProfileYahooMailArgs, ProfileYahooMailPtr and ProfileYahooMailPtrOutput values.
// You can construct a concrete instance of `ProfileYahooMailPtrInput` via:
//
//	        ProfileYahooMailArgs{...}
//
//	or:
//
//	        nil
type ProfileYahooMailPtrInput interface {
	pulumi.Input

	ToProfileYahooMailPtrOutput() ProfileYahooMailPtrOutput
	ToProfileYahooMailPtrOutputWithContext(context.Context) ProfileYahooMailPtrOutput
}

type profileYahooMailPtrType ProfileYahooMailArgs

func ProfileYahooMailPtr(v *ProfileYahooMailArgs) ProfileYahooMailPtrInput {
	return (*profileYahooMailPtrType)(v)
}

func (*profileYahooMailPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileYahooMail)(nil)).Elem()
}

func (i *profileYahooMailPtrType) ToProfileYahooMailPtrOutput() ProfileYahooMailPtrOutput {
	return i.ToProfileYahooMailPtrOutputWithContext(context.Background())
}

func (i *profileYahooMailPtrType) ToProfileYahooMailPtrOutputWithContext(ctx context.Context) ProfileYahooMailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileYahooMailPtrOutput)
}

type ProfileYahooMailOutput struct{ *pulumi.OutputState }

func (ProfileYahooMailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileYahooMail)(nil)).Elem()
}

func (o ProfileYahooMailOutput) ToProfileYahooMailOutput() ProfileYahooMailOutput {
	return o
}

func (o ProfileYahooMailOutput) ToProfileYahooMailOutputWithContext(ctx context.Context) ProfileYahooMailOutput {
	return o
}

func (o ProfileYahooMailOutput) ToProfileYahooMailPtrOutput() ProfileYahooMailPtrOutput {
	return o.ToProfileYahooMailPtrOutputWithContext(context.Background())
}

func (o ProfileYahooMailOutput) ToProfileYahooMailPtrOutputWithContext(ctx context.Context) ProfileYahooMailPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileYahooMail) *ProfileYahooMail {
		return &v
	}).(ProfileYahooMailPtrOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileYahooMailOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileYahooMail) *string { return v.Log }).(pulumi.StringPtrOutput)
}

type ProfileYahooMailPtrOutput struct{ *pulumi.OutputState }

func (ProfileYahooMailPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileYahooMail)(nil)).Elem()
}

func (o ProfileYahooMailPtrOutput) ToProfileYahooMailPtrOutput() ProfileYahooMailPtrOutput {
	return o
}

func (o ProfileYahooMailPtrOutput) ToProfileYahooMailPtrOutputWithContext(ctx context.Context) ProfileYahooMailPtrOutput {
	return o
}

func (o ProfileYahooMailPtrOutput) Elem() ProfileYahooMailOutput {
	return o.ApplyT(func(v *ProfileYahooMail) ProfileYahooMail {
		if v != nil {
			return *v
		}
		var ret ProfileYahooMail
		return ret
	}).(ProfileYahooMailOutput)
}

// Enable/disable logging. Valid values: `enable`, `disable`.
func (o ProfileYahooMailPtrOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileYahooMail) *string {
		if v == nil {
			return nil
		}
		return v.Log
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BwlEntryInput)(nil)).Elem(), BwlEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BwlEntryArrayInput)(nil)).Elem(), BwlEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BwordEntryInput)(nil)).Elem(), BwordEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BwordEntryArrayInput)(nil)).Elem(), BwordEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsblEntryInput)(nil)).Elem(), DnsblEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsblEntryArrayInput)(nil)).Elem(), DnsblEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IptrustEntryInput)(nil)).Elem(), IptrustEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IptrustEntryArrayInput)(nil)).Elem(), IptrustEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MheaderEntryInput)(nil)).Elem(), MheaderEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MheaderEntryArrayInput)(nil)).Elem(), MheaderEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileGmailInput)(nil)).Elem(), ProfileGmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileGmailPtrInput)(nil)).Elem(), ProfileGmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileImapInput)(nil)).Elem(), ProfileImapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileImapPtrInput)(nil)).Elem(), ProfileImapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileMapiInput)(nil)).Elem(), ProfileMapiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileMapiPtrInput)(nil)).Elem(), ProfileMapiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileMsnHotmailInput)(nil)).Elem(), ProfileMsnHotmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileMsnHotmailPtrInput)(nil)).Elem(), ProfileMsnHotmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfilePop3Input)(nil)).Elem(), ProfilePop3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfilePop3PtrInput)(nil)).Elem(), ProfilePop3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileSmtpInput)(nil)).Elem(), ProfileSmtpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileSmtpPtrInput)(nil)).Elem(), ProfileSmtpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileYahooMailInput)(nil)).Elem(), ProfileYahooMailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileYahooMailPtrInput)(nil)).Elem(), ProfileYahooMailArgs{})
	pulumi.RegisterOutputType(BwlEntryOutput{})
	pulumi.RegisterOutputType(BwlEntryArrayOutput{})
	pulumi.RegisterOutputType(BwordEntryOutput{})
	pulumi.RegisterOutputType(BwordEntryArrayOutput{})
	pulumi.RegisterOutputType(DnsblEntryOutput{})
	pulumi.RegisterOutputType(DnsblEntryArrayOutput{})
	pulumi.RegisterOutputType(IptrustEntryOutput{})
	pulumi.RegisterOutputType(IptrustEntryArrayOutput{})
	pulumi.RegisterOutputType(MheaderEntryOutput{})
	pulumi.RegisterOutputType(MheaderEntryArrayOutput{})
	pulumi.RegisterOutputType(ProfileGmailOutput{})
	pulumi.RegisterOutputType(ProfileGmailPtrOutput{})
	pulumi.RegisterOutputType(ProfileImapOutput{})
	pulumi.RegisterOutputType(ProfileImapPtrOutput{})
	pulumi.RegisterOutputType(ProfileMapiOutput{})
	pulumi.RegisterOutputType(ProfileMapiPtrOutput{})
	pulumi.RegisterOutputType(ProfileMsnHotmailOutput{})
	pulumi.RegisterOutputType(ProfileMsnHotmailPtrOutput{})
	pulumi.RegisterOutputType(ProfilePop3Output{})
	pulumi.RegisterOutputType(ProfilePop3PtrOutput{})
	pulumi.RegisterOutputType(ProfileSmtpOutput{})
	pulumi.RegisterOutputType(ProfileSmtpPtrOutput{})
	pulumi.RegisterOutputType(ProfileYahooMailOutput{})
	pulumi.RegisterOutputType(ProfileYahooMailPtrOutput{})
}
