// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure DNS domain filter profiles.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/filter"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := filter.NewProfile(ctx, "trname", &filter.ProfileArgs{
//				BlockAction: pulumi.String("redirect"),
//				BlockBotnet: pulumi.String("disable"),
//				DomainFilter: &dns.ProfileDomainFilterArgs{
//					DomainFilterTable: pulumi.Int(0),
//				},
//				FtgdDns: &dns.ProfileFtgdDnsArgs{
//					Filters: dns.ProfileFtgdDnsFilterArray{
//						&dns.ProfileFtgdDnsFilterArgs{
//							Action:   pulumi.String("block"),
//							Category: pulumi.Int(26),
//							Id:       pulumi.Int(1),
//							Log:      pulumi.String("enable"),
//						},
//						&dns.ProfileFtgdDnsFilterArgs{
//							Action:   pulumi.String("block"),
//							Category: pulumi.Int(61),
//							Id:       pulumi.Int(2),
//							Log:      pulumi.String("enable"),
//						},
//						&dns.ProfileFtgdDnsFilterArgs{
//							Action:   pulumi.String("block"),
//							Category: pulumi.Int(86),
//							Id:       pulumi.Int(3),
//							Log:      pulumi.String("enable"),
//						},
//						&dns.ProfileFtgdDnsFilterArgs{
//							Action:   pulumi.String("block"),
//							Category: pulumi.Int(88),
//							Id:       pulumi.Int(4),
//							Log:      pulumi.String("enable"),
//						},
//					},
//				},
//				LogAllDomain:    pulumi.String("disable"),
//				RedirectPortal:  pulumi.String("0.0.0.0"),
//				SafeSearch:      pulumi.String("disable"),
//				SdnsDomainLog:   pulumi.String("enable"),
//				SdnsFtgdErrLog:  pulumi.String("enable"),
//				YoutubeRestrict: pulumi.String("strict"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Dnsfilter Profile can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:filter/dns/profile:Profile labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:filter/dns/profile:Profile labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Profile struct {
	pulumi.CustomResourceState

	// Action to take for blocked domains.
	BlockAction pulumi.StringOutput `pulumi:"blockAction"`
	// Enable/disable blocking botnet C&C DNS lookups. Valid values: `disable`, `enable`.
	BlockBotnet pulumi.StringOutput `pulumi:"blockBotnet"`
	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// DNS translation settings. The structure of `dnsTranslation` block is documented below.
	DnsTranslations ProfileDnsTranslationArrayOutput `pulumi:"dnsTranslations"`
	// Domain filter settings. The structure of `domainFilter` block is documented below.
	DomainFilter ProfileDomainFilterOutput `pulumi:"domainFilter"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// One or more external IP block lists. The structure of `externalIpBlocklist` block is documented below.
	ExternalIpBlocklists ProfileExternalIpBlocklistArrayOutput `pulumi:"externalIpBlocklists"`
	// FortiGuard DNS Filter settings. The structure of `ftgdDns` block is documented below.
	FtgdDns ProfileFtgdDnsOutput `pulumi:"ftgdDns"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Enable/disable logging of all domains visited (detailed DNS logging). Valid values: `enable`, `disable`.
	LogAllDomain pulumi.StringOutput `pulumi:"logAllDomain"`
	// Profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// IP address of the SDNS redirect portal.
	RedirectPortal pulumi.StringOutput `pulumi:"redirectPortal"`
	// IPv6 address of the SDNS redirect portal.
	RedirectPortal6 pulumi.StringOutput `pulumi:"redirectPortal6"`
	// Enable/disable Google, Bing, and YouTube safe search. Valid values: `disable`, `enable`.
	SafeSearch pulumi.StringOutput `pulumi:"safeSearch"`
	// Enable/disable domain filtering and botnet domain logging. Valid values: `enable`, `disable`.
	SdnsDomainLog pulumi.StringOutput `pulumi:"sdnsDomainLog"`
	// Enable/disable FortiGuard SDNS rating error logging. Valid values: `enable`, `disable`.
	SdnsFtgdErrLog pulumi.StringOutput `pulumi:"sdnsFtgdErrLog"`
	// Transparent DNS database zones. The structure of `transparentDnsDatabase` block is documented below.
	TransparentDnsDatabases ProfileTransparentDnsDatabaseArrayOutput `pulumi:"transparentDnsDatabases"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Set safe search for YouTube restriction level. Valid values: `strict`, `moderate`.
	YoutubeRestrict pulumi.StringOutput `pulumi:"youtubeRestrict"`
}

// NewProfile registers a new resource with the given unique name, arguments, and options.
func NewProfile(ctx *pulumi.Context,
	name string, args *ProfileArgs, opts ...pulumi.ResourceOption) (*Profile, error) {
	if args == nil {
		args = &ProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Profile
	err := ctx.RegisterResource("fortios:filter/dns/profile:Profile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfile gets an existing Profile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileState, opts ...pulumi.ResourceOption) (*Profile, error) {
	var resource Profile
	err := ctx.ReadResource("fortios:filter/dns/profile:Profile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Profile resources.
type profileState struct {
	// Action to take for blocked domains.
	BlockAction *string `pulumi:"blockAction"`
	// Enable/disable blocking botnet C&C DNS lookups. Valid values: `disable`, `enable`.
	BlockBotnet *string `pulumi:"blockBotnet"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// DNS translation settings. The structure of `dnsTranslation` block is documented below.
	DnsTranslations []ProfileDnsTranslation `pulumi:"dnsTranslations"`
	// Domain filter settings. The structure of `domainFilter` block is documented below.
	DomainFilter *ProfileDomainFilter `pulumi:"domainFilter"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// One or more external IP block lists. The structure of `externalIpBlocklist` block is documented below.
	ExternalIpBlocklists []ProfileExternalIpBlocklist `pulumi:"externalIpBlocklists"`
	// FortiGuard DNS Filter settings. The structure of `ftgdDns` block is documented below.
	FtgdDns *ProfileFtgdDns `pulumi:"ftgdDns"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable logging of all domains visited (detailed DNS logging). Valid values: `enable`, `disable`.
	LogAllDomain *string `pulumi:"logAllDomain"`
	// Profile name.
	Name *string `pulumi:"name"`
	// IP address of the SDNS redirect portal.
	RedirectPortal *string `pulumi:"redirectPortal"`
	// IPv6 address of the SDNS redirect portal.
	RedirectPortal6 *string `pulumi:"redirectPortal6"`
	// Enable/disable Google, Bing, and YouTube safe search. Valid values: `disable`, `enable`.
	SafeSearch *string `pulumi:"safeSearch"`
	// Enable/disable domain filtering and botnet domain logging. Valid values: `enable`, `disable`.
	SdnsDomainLog *string `pulumi:"sdnsDomainLog"`
	// Enable/disable FortiGuard SDNS rating error logging. Valid values: `enable`, `disable`.
	SdnsFtgdErrLog *string `pulumi:"sdnsFtgdErrLog"`
	// Transparent DNS database zones. The structure of `transparentDnsDatabase` block is documented below.
	TransparentDnsDatabases []ProfileTransparentDnsDatabase `pulumi:"transparentDnsDatabases"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Set safe search for YouTube restriction level. Valid values: `strict`, `moderate`.
	YoutubeRestrict *string `pulumi:"youtubeRestrict"`
}

type ProfileState struct {
	// Action to take for blocked domains.
	BlockAction pulumi.StringPtrInput
	// Enable/disable blocking botnet C&C DNS lookups. Valid values: `disable`, `enable`.
	BlockBotnet pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// DNS translation settings. The structure of `dnsTranslation` block is documented below.
	DnsTranslations ProfileDnsTranslationArrayInput
	// Domain filter settings. The structure of `domainFilter` block is documented below.
	DomainFilter ProfileDomainFilterPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// One or more external IP block lists. The structure of `externalIpBlocklist` block is documented below.
	ExternalIpBlocklists ProfileExternalIpBlocklistArrayInput
	// FortiGuard DNS Filter settings. The structure of `ftgdDns` block is documented below.
	FtgdDns ProfileFtgdDnsPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable logging of all domains visited (detailed DNS logging). Valid values: `enable`, `disable`.
	LogAllDomain pulumi.StringPtrInput
	// Profile name.
	Name pulumi.StringPtrInput
	// IP address of the SDNS redirect portal.
	RedirectPortal pulumi.StringPtrInput
	// IPv6 address of the SDNS redirect portal.
	RedirectPortal6 pulumi.StringPtrInput
	// Enable/disable Google, Bing, and YouTube safe search. Valid values: `disable`, `enable`.
	SafeSearch pulumi.StringPtrInput
	// Enable/disable domain filtering and botnet domain logging. Valid values: `enable`, `disable`.
	SdnsDomainLog pulumi.StringPtrInput
	// Enable/disable FortiGuard SDNS rating error logging. Valid values: `enable`, `disable`.
	SdnsFtgdErrLog pulumi.StringPtrInput
	// Transparent DNS database zones. The structure of `transparentDnsDatabase` block is documented below.
	TransparentDnsDatabases ProfileTransparentDnsDatabaseArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Set safe search for YouTube restriction level. Valid values: `strict`, `moderate`.
	YoutubeRestrict pulumi.StringPtrInput
}

func (ProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileState)(nil)).Elem()
}

type profileArgs struct {
	// Action to take for blocked domains.
	BlockAction *string `pulumi:"blockAction"`
	// Enable/disable blocking botnet C&C DNS lookups. Valid values: `disable`, `enable`.
	BlockBotnet *string `pulumi:"blockBotnet"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// DNS translation settings. The structure of `dnsTranslation` block is documented below.
	DnsTranslations []ProfileDnsTranslation `pulumi:"dnsTranslations"`
	// Domain filter settings. The structure of `domainFilter` block is documented below.
	DomainFilter *ProfileDomainFilter `pulumi:"domainFilter"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// One or more external IP block lists. The structure of `externalIpBlocklist` block is documented below.
	ExternalIpBlocklists []ProfileExternalIpBlocklist `pulumi:"externalIpBlocklists"`
	// FortiGuard DNS Filter settings. The structure of `ftgdDns` block is documented below.
	FtgdDns *ProfileFtgdDns `pulumi:"ftgdDns"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable logging of all domains visited (detailed DNS logging). Valid values: `enable`, `disable`.
	LogAllDomain *string `pulumi:"logAllDomain"`
	// Profile name.
	Name *string `pulumi:"name"`
	// IP address of the SDNS redirect portal.
	RedirectPortal *string `pulumi:"redirectPortal"`
	// IPv6 address of the SDNS redirect portal.
	RedirectPortal6 *string `pulumi:"redirectPortal6"`
	// Enable/disable Google, Bing, and YouTube safe search. Valid values: `disable`, `enable`.
	SafeSearch *string `pulumi:"safeSearch"`
	// Enable/disable domain filtering and botnet domain logging. Valid values: `enable`, `disable`.
	SdnsDomainLog *string `pulumi:"sdnsDomainLog"`
	// Enable/disable FortiGuard SDNS rating error logging. Valid values: `enable`, `disable`.
	SdnsFtgdErrLog *string `pulumi:"sdnsFtgdErrLog"`
	// Transparent DNS database zones. The structure of `transparentDnsDatabase` block is documented below.
	TransparentDnsDatabases []ProfileTransparentDnsDatabase `pulumi:"transparentDnsDatabases"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Set safe search for YouTube restriction level. Valid values: `strict`, `moderate`.
	YoutubeRestrict *string `pulumi:"youtubeRestrict"`
}

// The set of arguments for constructing a Profile resource.
type ProfileArgs struct {
	// Action to take for blocked domains.
	BlockAction pulumi.StringPtrInput
	// Enable/disable blocking botnet C&C DNS lookups. Valid values: `disable`, `enable`.
	BlockBotnet pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// DNS translation settings. The structure of `dnsTranslation` block is documented below.
	DnsTranslations ProfileDnsTranslationArrayInput
	// Domain filter settings. The structure of `domainFilter` block is documented below.
	DomainFilter ProfileDomainFilterPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// One or more external IP block lists. The structure of `externalIpBlocklist` block is documented below.
	ExternalIpBlocklists ProfileExternalIpBlocklistArrayInput
	// FortiGuard DNS Filter settings. The structure of `ftgdDns` block is documented below.
	FtgdDns ProfileFtgdDnsPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable logging of all domains visited (detailed DNS logging). Valid values: `enable`, `disable`.
	LogAllDomain pulumi.StringPtrInput
	// Profile name.
	Name pulumi.StringPtrInput
	// IP address of the SDNS redirect portal.
	RedirectPortal pulumi.StringPtrInput
	// IPv6 address of the SDNS redirect portal.
	RedirectPortal6 pulumi.StringPtrInput
	// Enable/disable Google, Bing, and YouTube safe search. Valid values: `disable`, `enable`.
	SafeSearch pulumi.StringPtrInput
	// Enable/disable domain filtering and botnet domain logging. Valid values: `enable`, `disable`.
	SdnsDomainLog pulumi.StringPtrInput
	// Enable/disable FortiGuard SDNS rating error logging. Valid values: `enable`, `disable`.
	SdnsFtgdErrLog pulumi.StringPtrInput
	// Transparent DNS database zones. The structure of `transparentDnsDatabase` block is documented below.
	TransparentDnsDatabases ProfileTransparentDnsDatabaseArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Set safe search for YouTube restriction level. Valid values: `strict`, `moderate`.
	YoutubeRestrict pulumi.StringPtrInput
}

func (ProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileArgs)(nil)).Elem()
}

type ProfileInput interface {
	pulumi.Input

	ToProfileOutput() ProfileOutput
	ToProfileOutputWithContext(ctx context.Context) ProfileOutput
}

func (*Profile) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (i *Profile) ToProfileOutput() ProfileOutput {
	return i.ToProfileOutputWithContext(context.Background())
}

func (i *Profile) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileOutput)
}

// ProfileArrayInput is an input type that accepts ProfileArray and ProfileArrayOutput values.
// You can construct a concrete instance of `ProfileArrayInput` via:
//
//	ProfileArray{ ProfileArgs{...} }
type ProfileArrayInput interface {
	pulumi.Input

	ToProfileArrayOutput() ProfileArrayOutput
	ToProfileArrayOutputWithContext(context.Context) ProfileArrayOutput
}

type ProfileArray []ProfileInput

func (ProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Profile)(nil)).Elem()
}

func (i ProfileArray) ToProfileArrayOutput() ProfileArrayOutput {
	return i.ToProfileArrayOutputWithContext(context.Background())
}

func (i ProfileArray) ToProfileArrayOutputWithContext(ctx context.Context) ProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileArrayOutput)
}

// ProfileMapInput is an input type that accepts ProfileMap and ProfileMapOutput values.
// You can construct a concrete instance of `ProfileMapInput` via:
//
//	ProfileMap{ "key": ProfileArgs{...} }
type ProfileMapInput interface {
	pulumi.Input

	ToProfileMapOutput() ProfileMapOutput
	ToProfileMapOutputWithContext(context.Context) ProfileMapOutput
}

type ProfileMap map[string]ProfileInput

func (ProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Profile)(nil)).Elem()
}

func (i ProfileMap) ToProfileMapOutput() ProfileMapOutput {
	return i.ToProfileMapOutputWithContext(context.Background())
}

func (i ProfileMap) ToProfileMapOutputWithContext(ctx context.Context) ProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMapOutput)
}

type ProfileOutput struct{ *pulumi.OutputState }

func (ProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (o ProfileOutput) ToProfileOutput() ProfileOutput {
	return o
}

func (o ProfileOutput) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return o
}

// Action to take for blocked domains.
func (o ProfileOutput) BlockAction() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.BlockAction }).(pulumi.StringOutput)
}

// Enable/disable blocking botnet C&C DNS lookups. Valid values: `disable`, `enable`.
func (o ProfileOutput) BlockBotnet() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.BlockBotnet }).(pulumi.StringOutput)
}

// Comment.
func (o ProfileOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// DNS translation settings. The structure of `dnsTranslation` block is documented below.
func (o ProfileOutput) DnsTranslations() ProfileDnsTranslationArrayOutput {
	return o.ApplyT(func(v *Profile) ProfileDnsTranslationArrayOutput { return v.DnsTranslations }).(ProfileDnsTranslationArrayOutput)
}

// Domain filter settings. The structure of `domainFilter` block is documented below.
func (o ProfileOutput) DomainFilter() ProfileDomainFilterOutput {
	return o.ApplyT(func(v *Profile) ProfileDomainFilterOutput { return v.DomainFilter }).(ProfileDomainFilterOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o ProfileOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// One or more external IP block lists. The structure of `externalIpBlocklist` block is documented below.
func (o ProfileOutput) ExternalIpBlocklists() ProfileExternalIpBlocklistArrayOutput {
	return o.ApplyT(func(v *Profile) ProfileExternalIpBlocklistArrayOutput { return v.ExternalIpBlocklists }).(ProfileExternalIpBlocklistArrayOutput)
}

// FortiGuard DNS Filter settings. The structure of `ftgdDns` block is documented below.
func (o ProfileOutput) FtgdDns() ProfileFtgdDnsOutput {
	return o.ApplyT(func(v *Profile) ProfileFtgdDnsOutput { return v.FtgdDns }).(ProfileFtgdDnsOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o ProfileOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Enable/disable logging of all domains visited (detailed DNS logging). Valid values: `enable`, `disable`.
func (o ProfileOutput) LogAllDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.LogAllDomain }).(pulumi.StringOutput)
}

// Profile name.
func (o ProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// IP address of the SDNS redirect portal.
func (o ProfileOutput) RedirectPortal() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.RedirectPortal }).(pulumi.StringOutput)
}

// IPv6 address of the SDNS redirect portal.
func (o ProfileOutput) RedirectPortal6() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.RedirectPortal6 }).(pulumi.StringOutput)
}

// Enable/disable Google, Bing, and YouTube safe search. Valid values: `disable`, `enable`.
func (o ProfileOutput) SafeSearch() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.SafeSearch }).(pulumi.StringOutput)
}

// Enable/disable domain filtering and botnet domain logging. Valid values: `enable`, `disable`.
func (o ProfileOutput) SdnsDomainLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.SdnsDomainLog }).(pulumi.StringOutput)
}

// Enable/disable FortiGuard SDNS rating error logging. Valid values: `enable`, `disable`.
func (o ProfileOutput) SdnsFtgdErrLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.SdnsFtgdErrLog }).(pulumi.StringOutput)
}

// Transparent DNS database zones. The structure of `transparentDnsDatabase` block is documented below.
func (o ProfileOutput) TransparentDnsDatabases() ProfileTransparentDnsDatabaseArrayOutput {
	return o.ApplyT(func(v *Profile) ProfileTransparentDnsDatabaseArrayOutput { return v.TransparentDnsDatabases }).(ProfileTransparentDnsDatabaseArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ProfileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Set safe search for YouTube restriction level. Valid values: `strict`, `moderate`.
func (o ProfileOutput) YoutubeRestrict() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.YoutubeRestrict }).(pulumi.StringOutput)
}

type ProfileArrayOutput struct{ *pulumi.OutputState }

func (ProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Profile)(nil)).Elem()
}

func (o ProfileArrayOutput) ToProfileArrayOutput() ProfileArrayOutput {
	return o
}

func (o ProfileArrayOutput) ToProfileArrayOutputWithContext(ctx context.Context) ProfileArrayOutput {
	return o
}

func (o ProfileArrayOutput) Index(i pulumi.IntInput) ProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Profile {
		return vs[0].([]*Profile)[vs[1].(int)]
	}).(ProfileOutput)
}

type ProfileMapOutput struct{ *pulumi.OutputState }

func (ProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Profile)(nil)).Elem()
}

func (o ProfileMapOutput) ToProfileMapOutput() ProfileMapOutput {
	return o
}

func (o ProfileMapOutput) ToProfileMapOutputWithContext(ctx context.Context) ProfileMapOutput {
	return o
}

func (o ProfileMapOutput) MapIndex(k pulumi.StringInput) ProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Profile {
		return vs[0].(map[string]*Profile)[vs[1].(string)]
	}).(ProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileInput)(nil)).Elem(), &Profile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileArrayInput)(nil)).Elem(), ProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileMapInput)(nil)).Elem(), ProfileMap{})
	pulumi.RegisterOutputType(ProfileOutput{})
	pulumi.RegisterOutputType(ProfileArrayOutput{})
	pulumi.RegisterOutputType(ProfileMapOutput{})
}
