// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure DNS domain filters.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/filter"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := filter.NewDomainfilter(ctx, "trname", &filter.DomainfilterArgs{
//				Entries: dns.DomainfilterEntryArray{
//					&dns.DomainfilterEntryArgs{
//						Action: pulumi.String("block"),
//						Domain: pulumi.String("bac.com"),
//						Id:     pulumi.Int(1),
//						Status: pulumi.String("enable"),
//						Type:   pulumi.String("simple"),
//					},
//				},
//				Fosid: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Dnsfilter DomainFilter can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:filter/dns/domainfilter:Domainfilter labelname {{fosid}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:filter/dns/domainfilter:Domainfilter labelname {{fosid}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Domainfilter struct {
	pulumi.CustomResourceState

	// Optional comments.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// DNS domain filter entries. The structure of `entries` block is documented below.
	Entries DomainfilterEntryArrayOutput `pulumi:"entries"`
	// ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Name of table.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewDomainfilter registers a new resource with the given unique name, arguments, and options.
func NewDomainfilter(ctx *pulumi.Context,
	name string, args *DomainfilterArgs, opts ...pulumi.ResourceOption) (*Domainfilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Domainfilter
	err := ctx.RegisterResource("fortios:filter/dns/domainfilter:Domainfilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainfilter gets an existing Domainfilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainfilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainfilterState, opts ...pulumi.ResourceOption) (*Domainfilter, error) {
	var resource Domainfilter
	err := ctx.ReadResource("fortios:filter/dns/domainfilter:Domainfilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Domainfilter resources.
type domainfilterState struct {
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// DNS domain filter entries. The structure of `entries` block is documented below.
	Entries []DomainfilterEntry `pulumi:"entries"`
	// ID.
	Fosid *int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Name of table.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type DomainfilterState struct {
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// DNS domain filter entries. The structure of `entries` block is documented below.
	Entries DomainfilterEntryArrayInput
	// ID.
	Fosid pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Name of table.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (DomainfilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainfilterState)(nil)).Elem()
}

type domainfilterArgs struct {
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// DNS domain filter entries. The structure of `entries` block is documented below.
	Entries []DomainfilterEntry `pulumi:"entries"`
	// ID.
	Fosid int `pulumi:"fosid"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Name of table.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Domainfilter resource.
type DomainfilterArgs struct {
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// DNS domain filter entries. The structure of `entries` block is documented below.
	Entries DomainfilterEntryArrayInput
	// ID.
	Fosid pulumi.IntInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Name of table.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (DomainfilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainfilterArgs)(nil)).Elem()
}

type DomainfilterInput interface {
	pulumi.Input

	ToDomainfilterOutput() DomainfilterOutput
	ToDomainfilterOutputWithContext(ctx context.Context) DomainfilterOutput
}

func (*Domainfilter) ElementType() reflect.Type {
	return reflect.TypeOf((**Domainfilter)(nil)).Elem()
}

func (i *Domainfilter) ToDomainfilterOutput() DomainfilterOutput {
	return i.ToDomainfilterOutputWithContext(context.Background())
}

func (i *Domainfilter) ToDomainfilterOutputWithContext(ctx context.Context) DomainfilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainfilterOutput)
}

// DomainfilterArrayInput is an input type that accepts DomainfilterArray and DomainfilterArrayOutput values.
// You can construct a concrete instance of `DomainfilterArrayInput` via:
//
//	DomainfilterArray{ DomainfilterArgs{...} }
type DomainfilterArrayInput interface {
	pulumi.Input

	ToDomainfilterArrayOutput() DomainfilterArrayOutput
	ToDomainfilterArrayOutputWithContext(context.Context) DomainfilterArrayOutput
}

type DomainfilterArray []DomainfilterInput

func (DomainfilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domainfilter)(nil)).Elem()
}

func (i DomainfilterArray) ToDomainfilterArrayOutput() DomainfilterArrayOutput {
	return i.ToDomainfilterArrayOutputWithContext(context.Background())
}

func (i DomainfilterArray) ToDomainfilterArrayOutputWithContext(ctx context.Context) DomainfilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainfilterArrayOutput)
}

// DomainfilterMapInput is an input type that accepts DomainfilterMap and DomainfilterMapOutput values.
// You can construct a concrete instance of `DomainfilterMapInput` via:
//
//	DomainfilterMap{ "key": DomainfilterArgs{...} }
type DomainfilterMapInput interface {
	pulumi.Input

	ToDomainfilterMapOutput() DomainfilterMapOutput
	ToDomainfilterMapOutputWithContext(context.Context) DomainfilterMapOutput
}

type DomainfilterMap map[string]DomainfilterInput

func (DomainfilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domainfilter)(nil)).Elem()
}

func (i DomainfilterMap) ToDomainfilterMapOutput() DomainfilterMapOutput {
	return i.ToDomainfilterMapOutputWithContext(context.Background())
}

func (i DomainfilterMap) ToDomainfilterMapOutputWithContext(ctx context.Context) DomainfilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainfilterMapOutput)
}

type DomainfilterOutput struct{ *pulumi.OutputState }

func (DomainfilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Domainfilter)(nil)).Elem()
}

func (o DomainfilterOutput) ToDomainfilterOutput() DomainfilterOutput {
	return o
}

func (o DomainfilterOutput) ToDomainfilterOutputWithContext(ctx context.Context) DomainfilterOutput {
	return o
}

// Optional comments.
func (o DomainfilterOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domainfilter) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o DomainfilterOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domainfilter) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// DNS domain filter entries. The structure of `entries` block is documented below.
func (o DomainfilterOutput) Entries() DomainfilterEntryArrayOutput {
	return o.ApplyT(func(v *Domainfilter) DomainfilterEntryArrayOutput { return v.Entries }).(DomainfilterEntryArrayOutput)
}

// ID.
func (o DomainfilterOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *Domainfilter) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o DomainfilterOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domainfilter) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Name of table.
func (o DomainfilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Domainfilter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o DomainfilterOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domainfilter) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type DomainfilterArrayOutput struct{ *pulumi.OutputState }

func (DomainfilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domainfilter)(nil)).Elem()
}

func (o DomainfilterArrayOutput) ToDomainfilterArrayOutput() DomainfilterArrayOutput {
	return o
}

func (o DomainfilterArrayOutput) ToDomainfilterArrayOutputWithContext(ctx context.Context) DomainfilterArrayOutput {
	return o
}

func (o DomainfilterArrayOutput) Index(i pulumi.IntInput) DomainfilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Domainfilter {
		return vs[0].([]*Domainfilter)[vs[1].(int)]
	}).(DomainfilterOutput)
}

type DomainfilterMapOutput struct{ *pulumi.OutputState }

func (DomainfilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domainfilter)(nil)).Elem()
}

func (o DomainfilterMapOutput) ToDomainfilterMapOutput() DomainfilterMapOutput {
	return o
}

func (o DomainfilterMapOutput) ToDomainfilterMapOutputWithContext(ctx context.Context) DomainfilterMapOutput {
	return o
}

func (o DomainfilterMapOutput) MapIndex(k pulumi.StringInput) DomainfilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Domainfilter {
		return vs[0].(map[string]*Domainfilter)[vs[1].(string)]
	}).(DomainfilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainfilterInput)(nil)).Elem(), &Domainfilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainfilterArrayInput)(nil)).Elem(), DomainfilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainfilterMapInput)(nil)).Elem(), DomainfilterMap{})
	pulumi.RegisterOutputType(DomainfilterOutput{})
	pulumi.RegisterOutputType(DomainfilterArrayOutput{})
	pulumi.RegisterOutputType(DomainfilterMapOutput{})
}
