// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package web

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure IPS URL filter cache settings.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/filter"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := filter.NewIpsurlfiltercachesetting(ctx, "trname", &filter.IpsurlfiltercachesettingArgs{
//				DnsRetryInterval: pulumi.Int(0),
//				ExtendedTtl:      pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Webfilter IpsUrlfilterCacheSetting can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:filter/web/ipsurlfiltercachesetting:Ipsurlfiltercachesetting labelname WebfilterIpsUrlfilterCacheSetting
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:filter/web/ipsurlfiltercachesetting:Ipsurlfiltercachesetting labelname WebfilterIpsUrlfilterCacheSetting
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Ipsurlfiltercachesetting struct {
	pulumi.CustomResourceState

	// Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
	DnsRetryInterval pulumi.IntOutput `pulumi:"dnsRetryInterval"`
	// Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
	ExtendedTtl pulumi.IntOutput `pulumi:"extendedTtl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewIpsurlfiltercachesetting registers a new resource with the given unique name, arguments, and options.
func NewIpsurlfiltercachesetting(ctx *pulumi.Context,
	name string, args *IpsurlfiltercachesettingArgs, opts ...pulumi.ResourceOption) (*Ipsurlfiltercachesetting, error) {
	if args == nil {
		args = &IpsurlfiltercachesettingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ipsurlfiltercachesetting
	err := ctx.RegisterResource("fortios:filter/web/ipsurlfiltercachesetting:Ipsurlfiltercachesetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpsurlfiltercachesetting gets an existing Ipsurlfiltercachesetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpsurlfiltercachesetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpsurlfiltercachesettingState, opts ...pulumi.ResourceOption) (*Ipsurlfiltercachesetting, error) {
	var resource Ipsurlfiltercachesetting
	err := ctx.ReadResource("fortios:filter/web/ipsurlfiltercachesetting:Ipsurlfiltercachesetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipsurlfiltercachesetting resources.
type ipsurlfiltercachesettingState struct {
	// Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
	DnsRetryInterval *int `pulumi:"dnsRetryInterval"`
	// Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
	ExtendedTtl *int `pulumi:"extendedTtl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type IpsurlfiltercachesettingState struct {
	// Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
	DnsRetryInterval pulumi.IntPtrInput
	// Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
	ExtendedTtl pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IpsurlfiltercachesettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsurlfiltercachesettingState)(nil)).Elem()
}

type ipsurlfiltercachesettingArgs struct {
	// Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
	DnsRetryInterval *int `pulumi:"dnsRetryInterval"`
	// Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
	ExtendedTtl *int `pulumi:"extendedTtl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Ipsurlfiltercachesetting resource.
type IpsurlfiltercachesettingArgs struct {
	// Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
	DnsRetryInterval pulumi.IntPtrInput
	// Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
	ExtendedTtl pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (IpsurlfiltercachesettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsurlfiltercachesettingArgs)(nil)).Elem()
}

type IpsurlfiltercachesettingInput interface {
	pulumi.Input

	ToIpsurlfiltercachesettingOutput() IpsurlfiltercachesettingOutput
	ToIpsurlfiltercachesettingOutputWithContext(ctx context.Context) IpsurlfiltercachesettingOutput
}

func (*Ipsurlfiltercachesetting) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipsurlfiltercachesetting)(nil)).Elem()
}

func (i *Ipsurlfiltercachesetting) ToIpsurlfiltercachesettingOutput() IpsurlfiltercachesettingOutput {
	return i.ToIpsurlfiltercachesettingOutputWithContext(context.Background())
}

func (i *Ipsurlfiltercachesetting) ToIpsurlfiltercachesettingOutputWithContext(ctx context.Context) IpsurlfiltercachesettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsurlfiltercachesettingOutput)
}

// IpsurlfiltercachesettingArrayInput is an input type that accepts IpsurlfiltercachesettingArray and IpsurlfiltercachesettingArrayOutput values.
// You can construct a concrete instance of `IpsurlfiltercachesettingArrayInput` via:
//
//	IpsurlfiltercachesettingArray{ IpsurlfiltercachesettingArgs{...} }
type IpsurlfiltercachesettingArrayInput interface {
	pulumi.Input

	ToIpsurlfiltercachesettingArrayOutput() IpsurlfiltercachesettingArrayOutput
	ToIpsurlfiltercachesettingArrayOutputWithContext(context.Context) IpsurlfiltercachesettingArrayOutput
}

type IpsurlfiltercachesettingArray []IpsurlfiltercachesettingInput

func (IpsurlfiltercachesettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipsurlfiltercachesetting)(nil)).Elem()
}

func (i IpsurlfiltercachesettingArray) ToIpsurlfiltercachesettingArrayOutput() IpsurlfiltercachesettingArrayOutput {
	return i.ToIpsurlfiltercachesettingArrayOutputWithContext(context.Background())
}

func (i IpsurlfiltercachesettingArray) ToIpsurlfiltercachesettingArrayOutputWithContext(ctx context.Context) IpsurlfiltercachesettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsurlfiltercachesettingArrayOutput)
}

// IpsurlfiltercachesettingMapInput is an input type that accepts IpsurlfiltercachesettingMap and IpsurlfiltercachesettingMapOutput values.
// You can construct a concrete instance of `IpsurlfiltercachesettingMapInput` via:
//
//	IpsurlfiltercachesettingMap{ "key": IpsurlfiltercachesettingArgs{...} }
type IpsurlfiltercachesettingMapInput interface {
	pulumi.Input

	ToIpsurlfiltercachesettingMapOutput() IpsurlfiltercachesettingMapOutput
	ToIpsurlfiltercachesettingMapOutputWithContext(context.Context) IpsurlfiltercachesettingMapOutput
}

type IpsurlfiltercachesettingMap map[string]IpsurlfiltercachesettingInput

func (IpsurlfiltercachesettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipsurlfiltercachesetting)(nil)).Elem()
}

func (i IpsurlfiltercachesettingMap) ToIpsurlfiltercachesettingMapOutput() IpsurlfiltercachesettingMapOutput {
	return i.ToIpsurlfiltercachesettingMapOutputWithContext(context.Background())
}

func (i IpsurlfiltercachesettingMap) ToIpsurlfiltercachesettingMapOutputWithContext(ctx context.Context) IpsurlfiltercachesettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsurlfiltercachesettingMapOutput)
}

type IpsurlfiltercachesettingOutput struct{ *pulumi.OutputState }

func (IpsurlfiltercachesettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipsurlfiltercachesetting)(nil)).Elem()
}

func (o IpsurlfiltercachesettingOutput) ToIpsurlfiltercachesettingOutput() IpsurlfiltercachesettingOutput {
	return o
}

func (o IpsurlfiltercachesettingOutput) ToIpsurlfiltercachesettingOutputWithContext(ctx context.Context) IpsurlfiltercachesettingOutput {
	return o
}

// Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
func (o IpsurlfiltercachesettingOutput) DnsRetryInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Ipsurlfiltercachesetting) pulumi.IntOutput { return v.DnsRetryInterval }).(pulumi.IntOutput)
}

// Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
func (o IpsurlfiltercachesettingOutput) ExtendedTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *Ipsurlfiltercachesetting) pulumi.IntOutput { return v.ExtendedTtl }).(pulumi.IntOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o IpsurlfiltercachesettingOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipsurlfiltercachesetting) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type IpsurlfiltercachesettingArrayOutput struct{ *pulumi.OutputState }

func (IpsurlfiltercachesettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipsurlfiltercachesetting)(nil)).Elem()
}

func (o IpsurlfiltercachesettingArrayOutput) ToIpsurlfiltercachesettingArrayOutput() IpsurlfiltercachesettingArrayOutput {
	return o
}

func (o IpsurlfiltercachesettingArrayOutput) ToIpsurlfiltercachesettingArrayOutputWithContext(ctx context.Context) IpsurlfiltercachesettingArrayOutput {
	return o
}

func (o IpsurlfiltercachesettingArrayOutput) Index(i pulumi.IntInput) IpsurlfiltercachesettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipsurlfiltercachesetting {
		return vs[0].([]*Ipsurlfiltercachesetting)[vs[1].(int)]
	}).(IpsurlfiltercachesettingOutput)
}

type IpsurlfiltercachesettingMapOutput struct{ *pulumi.OutputState }

func (IpsurlfiltercachesettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipsurlfiltercachesetting)(nil)).Elem()
}

func (o IpsurlfiltercachesettingMapOutput) ToIpsurlfiltercachesettingMapOutput() IpsurlfiltercachesettingMapOutput {
	return o
}

func (o IpsurlfiltercachesettingMapOutput) ToIpsurlfiltercachesettingMapOutputWithContext(ctx context.Context) IpsurlfiltercachesettingMapOutput {
	return o
}

func (o IpsurlfiltercachesettingMapOutput) MapIndex(k pulumi.StringInput) IpsurlfiltercachesettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipsurlfiltercachesetting {
		return vs[0].(map[string]*Ipsurlfiltercachesetting)[vs[1].(string)]
	}).(IpsurlfiltercachesettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpsurlfiltercachesettingInput)(nil)).Elem(), &Ipsurlfiltercachesetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsurlfiltercachesettingArrayInput)(nil)).Elem(), IpsurlfiltercachesettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsurlfiltercachesettingMapInput)(nil)).Elem(), IpsurlfiltercachesettingMap{})
	pulumi.RegisterOutputType(IpsurlfiltercachesettingOutput{})
	pulumi.RegisterOutputType(IpsurlfiltercachesettingArrayOutput{})
	pulumi.RegisterOutputType(IpsurlfiltercachesettingMapOutput{})
}
