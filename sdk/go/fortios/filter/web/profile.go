// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package web

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure Web filter profiles.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/filter"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := filter.NewProfile(ctx, "trname", &filter.ProfileArgs{
//				ExtendedLog: pulumi.String("disable"),
//				FtgdWf: &web.ProfileFtgdWfArgs{
//					ExemptQuota: pulumi.String("17"),
//					Filters: web.ProfileFtgdWfFilterArray{
//						&web.ProfileFtgdWfFilterArgs{
//							Action:              pulumi.String("warning"),
//							Category:            pulumi.Int(2),
//							Id:                  pulumi.Int(1),
//							Log:                 pulumi.String("enable"),
//							WarnDuration:        pulumi.String("5m"),
//							WarningDurationType: pulumi.String("timeout"),
//							WarningPrompt:       pulumi.String("per-category"),
//						},
//						&web.ProfileFtgdWfFilterArgs{
//							Action:              pulumi.String("warning"),
//							Category:            pulumi.Int(7),
//							Id:                  pulumi.Int(2),
//							Log:                 pulumi.String("enable"),
//							WarnDuration:        pulumi.String("5m"),
//							WarningDurationType: pulumi.String("timeout"),
//							WarningPrompt:       pulumi.String("per-category"),
//						},
//					},
//					MaxQuotaTimeout:    pulumi.Int(300),
//					RateCrlUrls:        pulumi.String("enable"),
//					RateCssUrls:        pulumi.String("enable"),
//					RateImageUrls:      pulumi.String("enable"),
//					RateJavascriptUrls: pulumi.String("enable"),
//				},
//				HttpsReplacemsg: pulumi.String("enable"),
//				InspectionMode:  pulumi.String("flow-based"),
//				LogAllUrl:       pulumi.String("disable"),
//				Override: &web.ProfileOverrideArgs{
//					OvrdCookie:       pulumi.String("deny"),
//					OvrdDur:          pulumi.String("15m"),
//					OvrdDurMode:      pulumi.String("constant"),
//					OvrdScope:        pulumi.String("user"),
//					ProfileAttribute: pulumi.String("Login-LAT-Service"),
//					ProfileType:      pulumi.String("list"),
//				},
//				PostAction: pulumi.String("normal"),
//				Web: &web.ProfileWebArgs{
//					Blacklist:         pulumi.String("disable"),
//					BwordTable:        pulumi.Int(0),
//					BwordThreshold:    pulumi.Int(10),
//					ContentHeaderList: pulumi.Int(0),
//					LogSearch:         pulumi.String("disable"),
//					UrlfilterTable:    pulumi.Int(0),
//					YoutubeRestrict:   pulumi.String("none"),
//				},
//				WebContentLog:             pulumi.String("enable"),
//				WebExtendedAllActionLog:   pulumi.String("disable"),
//				WebFilterActivexLog:       pulumi.String("enable"),
//				WebFilterAppletLog:        pulumi.String("enable"),
//				WebFilterCommandBlockLog:  pulumi.String("enable"),
//				WebFilterCookieLog:        pulumi.String("enable"),
//				WebFilterCookieRemovalLog: pulumi.String("enable"),
//				WebFilterJsLog:            pulumi.String("enable"),
//				WebFilterJscriptLog:       pulumi.String("enable"),
//				WebFilterRefererLog:       pulumi.String("enable"),
//				WebFilterUnknownLog:       pulumi.String("enable"),
//				WebFilterVbsLog:           pulumi.String("enable"),
//				WebFtgdErrLog:             pulumi.String("enable"),
//				WebFtgdQuotaUsage:         pulumi.String("enable"),
//				WebInvalidDomainLog:       pulumi.String("enable"),
//				WebUrlLog:                 pulumi.String("enable"),
//				Wisp:                      pulumi.String("disable"),
//				WispAlgorithm:             pulumi.String("auto-learning"),
//				YoutubeChannelStatus:      pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Webfilter Profile can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:filter/web/profile:Profile labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:filter/web/profile:Profile labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Profile struct {
	pulumi.CustomResourceState

	// AntiPhishing profile. The structure of `antiphish` block is documented below.
	Antiphish ProfileAntiphishOutput `pulumi:"antiphish"`
	// Optional comments.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Enable/disable extended logging for web filtering. Valid values: `enable`, `disable`.
	ExtendedLog pulumi.StringOutput `pulumi:"extendedLog"`
	// Flow/proxy feature set. Valid values: `flow`, `proxy`.
	FeatureSet pulumi.StringOutput `pulumi:"featureSet"`
	// File filter. The structure of `fileFilter` block is documented below.
	FileFilter ProfileFileFilterOutput `pulumi:"fileFilter"`
	// FortiGuard Web Filter settings. The structure of `ftgdWf` block is documented below.
	FtgdWf ProfileFtgdWfOutput `pulumi:"ftgdWf"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Enable replacement messages for HTTPS. Valid values: `enable`, `disable`.
	HttpsReplacemsg pulumi.StringOutput `pulumi:"httpsReplacemsg"`
	// Web filtering inspection mode. Valid values: `proxy`, `flow-based`.
	InspectionMode pulumi.StringOutput `pulumi:"inspectionMode"`
	// Enable/disable logging all URLs visited. Valid values: `enable`, `disable`.
	LogAllUrl pulumi.StringOutput `pulumi:"logAllUrl"`
	// Profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Options.
	Options pulumi.StringOutput `pulumi:"options"`
	// Web Filter override settings. The structure of `override` block is documented below.
	Override ProfileOverrideOutput `pulumi:"override"`
	// Permitted override types. Valid values: `bannedword-override`, `urlfilter-override`, `fortiguard-wf-override`, `contenttype-check-override`.
	OvrdPerm pulumi.StringOutput `pulumi:"ovrdPerm"`
	// Action taken for HTTP POST traffic. Valid values: `normal`, `block`.
	PostAction pulumi.StringOutput `pulumi:"postAction"`
	// Replacement message group.
	ReplacemsgGroup pulumi.StringOutput `pulumi:"replacemsgGroup"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Web content filtering settings. The structure of `web` block is documented below.
	Web ProfileWebOutput `pulumi:"web"`
	// Enable/disable logging of AntiPhishing checks. Valid values: `enable`, `disable`.
	WebAntiphishingLog pulumi.StringOutput `pulumi:"webAntiphishingLog"`
	// Enable/disable logging logging blocked web content. Valid values: `enable`, `disable`.
	WebContentLog pulumi.StringOutput `pulumi:"webContentLog"`
	// Enable/disable extended any filter action logging for web filtering. Valid values: `enable`, `disable`.
	WebExtendedAllActionLog pulumi.StringOutput `pulumi:"webExtendedAllActionLog"`
	// Enable/disable logging ActiveX. Valid values: `enable`, `disable`.
	WebFilterActivexLog pulumi.StringOutput `pulumi:"webFilterActivexLog"`
	// Enable/disable logging Java applets. Valid values: `enable`, `disable`.
	WebFilterAppletLog pulumi.StringOutput `pulumi:"webFilterAppletLog"`
	// Enable/disable logging blocked commands. Valid values: `enable`, `disable`.
	WebFilterCommandBlockLog pulumi.StringOutput `pulumi:"webFilterCommandBlockLog"`
	// Enable/disable logging cookie filtering. Valid values: `enable`, `disable`.
	WebFilterCookieLog pulumi.StringOutput `pulumi:"webFilterCookieLog"`
	// Enable/disable logging blocked cookies. Valid values: `enable`, `disable`.
	WebFilterCookieRemovalLog pulumi.StringOutput `pulumi:"webFilterCookieRemovalLog"`
	// Enable/disable logging Java scripts. Valid values: `enable`, `disable`.
	WebFilterJsLog pulumi.StringOutput `pulumi:"webFilterJsLog"`
	// Enable/disable logging JScripts. Valid values: `enable`, `disable`.
	WebFilterJscriptLog pulumi.StringOutput `pulumi:"webFilterJscriptLog"`
	// Enable/disable logging referrers. Valid values: `enable`, `disable`.
	WebFilterRefererLog pulumi.StringOutput `pulumi:"webFilterRefererLog"`
	// Enable/disable logging unknown scripts. Valid values: `enable`, `disable`.
	WebFilterUnknownLog pulumi.StringOutput `pulumi:"webFilterUnknownLog"`
	// Enable/disable logging VBS scripts. Valid values: `enable`, `disable`.
	WebFilterVbsLog pulumi.StringOutput `pulumi:"webFilterVbsLog"`
	// Log encoding in flow mode. Valid values: `utf-8`, `punycode`.
	WebFlowLogEncoding pulumi.StringOutput `pulumi:"webFlowLogEncoding"`
	// Enable/disable logging rating errors. Valid values: `enable`, `disable`.
	WebFtgdErrLog pulumi.StringOutput `pulumi:"webFtgdErrLog"`
	// Enable/disable logging daily quota usage. Valid values: `enable`, `disable`.
	WebFtgdQuotaUsage pulumi.StringOutput `pulumi:"webFtgdQuotaUsage"`
	// Enable/disable logging invalid domain names. Valid values: `enable`, `disable`.
	WebInvalidDomainLog pulumi.StringOutput `pulumi:"webInvalidDomainLog"`
	// Enable/disable logging URL filtering. Valid values: `enable`, `disable`.
	WebUrlLog pulumi.StringOutput `pulumi:"webUrlLog"`
	// Enable/disable web proxy WISP. Valid values: `enable`, `disable`.
	Wisp pulumi.StringOutput `pulumi:"wisp"`
	// WISP server selection algorithm. Valid values: `primary-secondary`, `round-robin`, `auto-learning`.
	WispAlgorithm pulumi.StringOutput `pulumi:"wispAlgorithm"`
	// WISP servers. The structure of `wispServers` block is documented below.
	WispServers ProfileWispServerArrayOutput `pulumi:"wispServers"`
	// YouTube channel filter. The structure of `youtubeChannelFilter` block is documented below.
	YoutubeChannelFilters ProfileYoutubeChannelFilterArrayOutput `pulumi:"youtubeChannelFilters"`
	// YouTube channel filter status.
	YoutubeChannelStatus pulumi.StringOutput `pulumi:"youtubeChannelStatus"`
}

// NewProfile registers a new resource with the given unique name, arguments, and options.
func NewProfile(ctx *pulumi.Context,
	name string, args *ProfileArgs, opts ...pulumi.ResourceOption) (*Profile, error) {
	if args == nil {
		args = &ProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Profile
	err := ctx.RegisterResource("fortios:filter/web/profile:Profile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfile gets an existing Profile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileState, opts ...pulumi.ResourceOption) (*Profile, error) {
	var resource Profile
	err := ctx.ReadResource("fortios:filter/web/profile:Profile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Profile resources.
type profileState struct {
	// AntiPhishing profile. The structure of `antiphish` block is documented below.
	Antiphish *ProfileAntiphish `pulumi:"antiphish"`
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable extended logging for web filtering. Valid values: `enable`, `disable`.
	ExtendedLog *string `pulumi:"extendedLog"`
	// Flow/proxy feature set. Valid values: `flow`, `proxy`.
	FeatureSet *string `pulumi:"featureSet"`
	// File filter. The structure of `fileFilter` block is documented below.
	FileFilter *ProfileFileFilter `pulumi:"fileFilter"`
	// FortiGuard Web Filter settings. The structure of `ftgdWf` block is documented below.
	FtgdWf *ProfileFtgdWf `pulumi:"ftgdWf"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable replacement messages for HTTPS. Valid values: `enable`, `disable`.
	HttpsReplacemsg *string `pulumi:"httpsReplacemsg"`
	// Web filtering inspection mode. Valid values: `proxy`, `flow-based`.
	InspectionMode *string `pulumi:"inspectionMode"`
	// Enable/disable logging all URLs visited. Valid values: `enable`, `disable`.
	LogAllUrl *string `pulumi:"logAllUrl"`
	// Profile name.
	Name *string `pulumi:"name"`
	// Options.
	Options *string `pulumi:"options"`
	// Web Filter override settings. The structure of `override` block is documented below.
	Override *ProfileOverride `pulumi:"override"`
	// Permitted override types. Valid values: `bannedword-override`, `urlfilter-override`, `fortiguard-wf-override`, `contenttype-check-override`.
	OvrdPerm *string `pulumi:"ovrdPerm"`
	// Action taken for HTTP POST traffic. Valid values: `normal`, `block`.
	PostAction *string `pulumi:"postAction"`
	// Replacement message group.
	ReplacemsgGroup *string `pulumi:"replacemsgGroup"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Web content filtering settings. The structure of `web` block is documented below.
	Web *ProfileWeb `pulumi:"web"`
	// Enable/disable logging of AntiPhishing checks. Valid values: `enable`, `disable`.
	WebAntiphishingLog *string `pulumi:"webAntiphishingLog"`
	// Enable/disable logging logging blocked web content. Valid values: `enable`, `disable`.
	WebContentLog *string `pulumi:"webContentLog"`
	// Enable/disable extended any filter action logging for web filtering. Valid values: `enable`, `disable`.
	WebExtendedAllActionLog *string `pulumi:"webExtendedAllActionLog"`
	// Enable/disable logging ActiveX. Valid values: `enable`, `disable`.
	WebFilterActivexLog *string `pulumi:"webFilterActivexLog"`
	// Enable/disable logging Java applets. Valid values: `enable`, `disable`.
	WebFilterAppletLog *string `pulumi:"webFilterAppletLog"`
	// Enable/disable logging blocked commands. Valid values: `enable`, `disable`.
	WebFilterCommandBlockLog *string `pulumi:"webFilterCommandBlockLog"`
	// Enable/disable logging cookie filtering. Valid values: `enable`, `disable`.
	WebFilterCookieLog *string `pulumi:"webFilterCookieLog"`
	// Enable/disable logging blocked cookies. Valid values: `enable`, `disable`.
	WebFilterCookieRemovalLog *string `pulumi:"webFilterCookieRemovalLog"`
	// Enable/disable logging Java scripts. Valid values: `enable`, `disable`.
	WebFilterJsLog *string `pulumi:"webFilterJsLog"`
	// Enable/disable logging JScripts. Valid values: `enable`, `disable`.
	WebFilterJscriptLog *string `pulumi:"webFilterJscriptLog"`
	// Enable/disable logging referrers. Valid values: `enable`, `disable`.
	WebFilterRefererLog *string `pulumi:"webFilterRefererLog"`
	// Enable/disable logging unknown scripts. Valid values: `enable`, `disable`.
	WebFilterUnknownLog *string `pulumi:"webFilterUnknownLog"`
	// Enable/disable logging VBS scripts. Valid values: `enable`, `disable`.
	WebFilterVbsLog *string `pulumi:"webFilterVbsLog"`
	// Log encoding in flow mode. Valid values: `utf-8`, `punycode`.
	WebFlowLogEncoding *string `pulumi:"webFlowLogEncoding"`
	// Enable/disable logging rating errors. Valid values: `enable`, `disable`.
	WebFtgdErrLog *string `pulumi:"webFtgdErrLog"`
	// Enable/disable logging daily quota usage. Valid values: `enable`, `disable`.
	WebFtgdQuotaUsage *string `pulumi:"webFtgdQuotaUsage"`
	// Enable/disable logging invalid domain names. Valid values: `enable`, `disable`.
	WebInvalidDomainLog *string `pulumi:"webInvalidDomainLog"`
	// Enable/disable logging URL filtering. Valid values: `enable`, `disable`.
	WebUrlLog *string `pulumi:"webUrlLog"`
	// Enable/disable web proxy WISP. Valid values: `enable`, `disable`.
	Wisp *string `pulumi:"wisp"`
	// WISP server selection algorithm. Valid values: `primary-secondary`, `round-robin`, `auto-learning`.
	WispAlgorithm *string `pulumi:"wispAlgorithm"`
	// WISP servers. The structure of `wispServers` block is documented below.
	WispServers []ProfileWispServer `pulumi:"wispServers"`
	// YouTube channel filter. The structure of `youtubeChannelFilter` block is documented below.
	YoutubeChannelFilters []ProfileYoutubeChannelFilter `pulumi:"youtubeChannelFilters"`
	// YouTube channel filter status.
	YoutubeChannelStatus *string `pulumi:"youtubeChannelStatus"`
}

type ProfileState struct {
	// AntiPhishing profile. The structure of `antiphish` block is documented below.
	Antiphish ProfileAntiphishPtrInput
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable extended logging for web filtering. Valid values: `enable`, `disable`.
	ExtendedLog pulumi.StringPtrInput
	// Flow/proxy feature set. Valid values: `flow`, `proxy`.
	FeatureSet pulumi.StringPtrInput
	// File filter. The structure of `fileFilter` block is documented below.
	FileFilter ProfileFileFilterPtrInput
	// FortiGuard Web Filter settings. The structure of `ftgdWf` block is documented below.
	FtgdWf ProfileFtgdWfPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable replacement messages for HTTPS. Valid values: `enable`, `disable`.
	HttpsReplacemsg pulumi.StringPtrInput
	// Web filtering inspection mode. Valid values: `proxy`, `flow-based`.
	InspectionMode pulumi.StringPtrInput
	// Enable/disable logging all URLs visited. Valid values: `enable`, `disable`.
	LogAllUrl pulumi.StringPtrInput
	// Profile name.
	Name pulumi.StringPtrInput
	// Options.
	Options pulumi.StringPtrInput
	// Web Filter override settings. The structure of `override` block is documented below.
	Override ProfileOverridePtrInput
	// Permitted override types. Valid values: `bannedword-override`, `urlfilter-override`, `fortiguard-wf-override`, `contenttype-check-override`.
	OvrdPerm pulumi.StringPtrInput
	// Action taken for HTTP POST traffic. Valid values: `normal`, `block`.
	PostAction pulumi.StringPtrInput
	// Replacement message group.
	ReplacemsgGroup pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Web content filtering settings. The structure of `web` block is documented below.
	Web ProfileWebPtrInput
	// Enable/disable logging of AntiPhishing checks. Valid values: `enable`, `disable`.
	WebAntiphishingLog pulumi.StringPtrInput
	// Enable/disable logging logging blocked web content. Valid values: `enable`, `disable`.
	WebContentLog pulumi.StringPtrInput
	// Enable/disable extended any filter action logging for web filtering. Valid values: `enable`, `disable`.
	WebExtendedAllActionLog pulumi.StringPtrInput
	// Enable/disable logging ActiveX. Valid values: `enable`, `disable`.
	WebFilterActivexLog pulumi.StringPtrInput
	// Enable/disable logging Java applets. Valid values: `enable`, `disable`.
	WebFilterAppletLog pulumi.StringPtrInput
	// Enable/disable logging blocked commands. Valid values: `enable`, `disable`.
	WebFilterCommandBlockLog pulumi.StringPtrInput
	// Enable/disable logging cookie filtering. Valid values: `enable`, `disable`.
	WebFilterCookieLog pulumi.StringPtrInput
	// Enable/disable logging blocked cookies. Valid values: `enable`, `disable`.
	WebFilterCookieRemovalLog pulumi.StringPtrInput
	// Enable/disable logging Java scripts. Valid values: `enable`, `disable`.
	WebFilterJsLog pulumi.StringPtrInput
	// Enable/disable logging JScripts. Valid values: `enable`, `disable`.
	WebFilterJscriptLog pulumi.StringPtrInput
	// Enable/disable logging referrers. Valid values: `enable`, `disable`.
	WebFilterRefererLog pulumi.StringPtrInput
	// Enable/disable logging unknown scripts. Valid values: `enable`, `disable`.
	WebFilterUnknownLog pulumi.StringPtrInput
	// Enable/disable logging VBS scripts. Valid values: `enable`, `disable`.
	WebFilterVbsLog pulumi.StringPtrInput
	// Log encoding in flow mode. Valid values: `utf-8`, `punycode`.
	WebFlowLogEncoding pulumi.StringPtrInput
	// Enable/disable logging rating errors. Valid values: `enable`, `disable`.
	WebFtgdErrLog pulumi.StringPtrInput
	// Enable/disable logging daily quota usage. Valid values: `enable`, `disable`.
	WebFtgdQuotaUsage pulumi.StringPtrInput
	// Enable/disable logging invalid domain names. Valid values: `enable`, `disable`.
	WebInvalidDomainLog pulumi.StringPtrInput
	// Enable/disable logging URL filtering. Valid values: `enable`, `disable`.
	WebUrlLog pulumi.StringPtrInput
	// Enable/disable web proxy WISP. Valid values: `enable`, `disable`.
	Wisp pulumi.StringPtrInput
	// WISP server selection algorithm. Valid values: `primary-secondary`, `round-robin`, `auto-learning`.
	WispAlgorithm pulumi.StringPtrInput
	// WISP servers. The structure of `wispServers` block is documented below.
	WispServers ProfileWispServerArrayInput
	// YouTube channel filter. The structure of `youtubeChannelFilter` block is documented below.
	YoutubeChannelFilters ProfileYoutubeChannelFilterArrayInput
	// YouTube channel filter status.
	YoutubeChannelStatus pulumi.StringPtrInput
}

func (ProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileState)(nil)).Elem()
}

type profileArgs struct {
	// AntiPhishing profile. The structure of `antiphish` block is documented below.
	Antiphish *ProfileAntiphish `pulumi:"antiphish"`
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable extended logging for web filtering. Valid values: `enable`, `disable`.
	ExtendedLog *string `pulumi:"extendedLog"`
	// Flow/proxy feature set. Valid values: `flow`, `proxy`.
	FeatureSet *string `pulumi:"featureSet"`
	// File filter. The structure of `fileFilter` block is documented below.
	FileFilter *ProfileFileFilter `pulumi:"fileFilter"`
	// FortiGuard Web Filter settings. The structure of `ftgdWf` block is documented below.
	FtgdWf *ProfileFtgdWf `pulumi:"ftgdWf"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable replacement messages for HTTPS. Valid values: `enable`, `disable`.
	HttpsReplacemsg *string `pulumi:"httpsReplacemsg"`
	// Web filtering inspection mode. Valid values: `proxy`, `flow-based`.
	InspectionMode *string `pulumi:"inspectionMode"`
	// Enable/disable logging all URLs visited. Valid values: `enable`, `disable`.
	LogAllUrl *string `pulumi:"logAllUrl"`
	// Profile name.
	Name *string `pulumi:"name"`
	// Options.
	Options *string `pulumi:"options"`
	// Web Filter override settings. The structure of `override` block is documented below.
	Override *ProfileOverride `pulumi:"override"`
	// Permitted override types. Valid values: `bannedword-override`, `urlfilter-override`, `fortiguard-wf-override`, `contenttype-check-override`.
	OvrdPerm *string `pulumi:"ovrdPerm"`
	// Action taken for HTTP POST traffic. Valid values: `normal`, `block`.
	PostAction *string `pulumi:"postAction"`
	// Replacement message group.
	ReplacemsgGroup *string `pulumi:"replacemsgGroup"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Web content filtering settings. The structure of `web` block is documented below.
	Web *ProfileWeb `pulumi:"web"`
	// Enable/disable logging of AntiPhishing checks. Valid values: `enable`, `disable`.
	WebAntiphishingLog *string `pulumi:"webAntiphishingLog"`
	// Enable/disable logging logging blocked web content. Valid values: `enable`, `disable`.
	WebContentLog *string `pulumi:"webContentLog"`
	// Enable/disable extended any filter action logging for web filtering. Valid values: `enable`, `disable`.
	WebExtendedAllActionLog *string `pulumi:"webExtendedAllActionLog"`
	// Enable/disable logging ActiveX. Valid values: `enable`, `disable`.
	WebFilterActivexLog *string `pulumi:"webFilterActivexLog"`
	// Enable/disable logging Java applets. Valid values: `enable`, `disable`.
	WebFilterAppletLog *string `pulumi:"webFilterAppletLog"`
	// Enable/disable logging blocked commands. Valid values: `enable`, `disable`.
	WebFilterCommandBlockLog *string `pulumi:"webFilterCommandBlockLog"`
	// Enable/disable logging cookie filtering. Valid values: `enable`, `disable`.
	WebFilterCookieLog *string `pulumi:"webFilterCookieLog"`
	// Enable/disable logging blocked cookies. Valid values: `enable`, `disable`.
	WebFilterCookieRemovalLog *string `pulumi:"webFilterCookieRemovalLog"`
	// Enable/disable logging Java scripts. Valid values: `enable`, `disable`.
	WebFilterJsLog *string `pulumi:"webFilterJsLog"`
	// Enable/disable logging JScripts. Valid values: `enable`, `disable`.
	WebFilterJscriptLog *string `pulumi:"webFilterJscriptLog"`
	// Enable/disable logging referrers. Valid values: `enable`, `disable`.
	WebFilterRefererLog *string `pulumi:"webFilterRefererLog"`
	// Enable/disable logging unknown scripts. Valid values: `enable`, `disable`.
	WebFilterUnknownLog *string `pulumi:"webFilterUnknownLog"`
	// Enable/disable logging VBS scripts. Valid values: `enable`, `disable`.
	WebFilterVbsLog *string `pulumi:"webFilterVbsLog"`
	// Log encoding in flow mode. Valid values: `utf-8`, `punycode`.
	WebFlowLogEncoding *string `pulumi:"webFlowLogEncoding"`
	// Enable/disable logging rating errors. Valid values: `enable`, `disable`.
	WebFtgdErrLog *string `pulumi:"webFtgdErrLog"`
	// Enable/disable logging daily quota usage. Valid values: `enable`, `disable`.
	WebFtgdQuotaUsage *string `pulumi:"webFtgdQuotaUsage"`
	// Enable/disable logging invalid domain names. Valid values: `enable`, `disable`.
	WebInvalidDomainLog *string `pulumi:"webInvalidDomainLog"`
	// Enable/disable logging URL filtering. Valid values: `enable`, `disable`.
	WebUrlLog *string `pulumi:"webUrlLog"`
	// Enable/disable web proxy WISP. Valid values: `enable`, `disable`.
	Wisp *string `pulumi:"wisp"`
	// WISP server selection algorithm. Valid values: `primary-secondary`, `round-robin`, `auto-learning`.
	WispAlgorithm *string `pulumi:"wispAlgorithm"`
	// WISP servers. The structure of `wispServers` block is documented below.
	WispServers []ProfileWispServer `pulumi:"wispServers"`
	// YouTube channel filter. The structure of `youtubeChannelFilter` block is documented below.
	YoutubeChannelFilters []ProfileYoutubeChannelFilter `pulumi:"youtubeChannelFilters"`
	// YouTube channel filter status.
	YoutubeChannelStatus *string `pulumi:"youtubeChannelStatus"`
}

// The set of arguments for constructing a Profile resource.
type ProfileArgs struct {
	// AntiPhishing profile. The structure of `antiphish` block is documented below.
	Antiphish ProfileAntiphishPtrInput
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable extended logging for web filtering. Valid values: `enable`, `disable`.
	ExtendedLog pulumi.StringPtrInput
	// Flow/proxy feature set. Valid values: `flow`, `proxy`.
	FeatureSet pulumi.StringPtrInput
	// File filter. The structure of `fileFilter` block is documented below.
	FileFilter ProfileFileFilterPtrInput
	// FortiGuard Web Filter settings. The structure of `ftgdWf` block is documented below.
	FtgdWf ProfileFtgdWfPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable replacement messages for HTTPS. Valid values: `enable`, `disable`.
	HttpsReplacemsg pulumi.StringPtrInput
	// Web filtering inspection mode. Valid values: `proxy`, `flow-based`.
	InspectionMode pulumi.StringPtrInput
	// Enable/disable logging all URLs visited. Valid values: `enable`, `disable`.
	LogAllUrl pulumi.StringPtrInput
	// Profile name.
	Name pulumi.StringPtrInput
	// Options.
	Options pulumi.StringPtrInput
	// Web Filter override settings. The structure of `override` block is documented below.
	Override ProfileOverridePtrInput
	// Permitted override types. Valid values: `bannedword-override`, `urlfilter-override`, `fortiguard-wf-override`, `contenttype-check-override`.
	OvrdPerm pulumi.StringPtrInput
	// Action taken for HTTP POST traffic. Valid values: `normal`, `block`.
	PostAction pulumi.StringPtrInput
	// Replacement message group.
	ReplacemsgGroup pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Web content filtering settings. The structure of `web` block is documented below.
	Web ProfileWebPtrInput
	// Enable/disable logging of AntiPhishing checks. Valid values: `enable`, `disable`.
	WebAntiphishingLog pulumi.StringPtrInput
	// Enable/disable logging logging blocked web content. Valid values: `enable`, `disable`.
	WebContentLog pulumi.StringPtrInput
	// Enable/disable extended any filter action logging for web filtering. Valid values: `enable`, `disable`.
	WebExtendedAllActionLog pulumi.StringPtrInput
	// Enable/disable logging ActiveX. Valid values: `enable`, `disable`.
	WebFilterActivexLog pulumi.StringPtrInput
	// Enable/disable logging Java applets. Valid values: `enable`, `disable`.
	WebFilterAppletLog pulumi.StringPtrInput
	// Enable/disable logging blocked commands. Valid values: `enable`, `disable`.
	WebFilterCommandBlockLog pulumi.StringPtrInput
	// Enable/disable logging cookie filtering. Valid values: `enable`, `disable`.
	WebFilterCookieLog pulumi.StringPtrInput
	// Enable/disable logging blocked cookies. Valid values: `enable`, `disable`.
	WebFilterCookieRemovalLog pulumi.StringPtrInput
	// Enable/disable logging Java scripts. Valid values: `enable`, `disable`.
	WebFilterJsLog pulumi.StringPtrInput
	// Enable/disable logging JScripts. Valid values: `enable`, `disable`.
	WebFilterJscriptLog pulumi.StringPtrInput
	// Enable/disable logging referrers. Valid values: `enable`, `disable`.
	WebFilterRefererLog pulumi.StringPtrInput
	// Enable/disable logging unknown scripts. Valid values: `enable`, `disable`.
	WebFilterUnknownLog pulumi.StringPtrInput
	// Enable/disable logging VBS scripts. Valid values: `enable`, `disable`.
	WebFilterVbsLog pulumi.StringPtrInput
	// Log encoding in flow mode. Valid values: `utf-8`, `punycode`.
	WebFlowLogEncoding pulumi.StringPtrInput
	// Enable/disable logging rating errors. Valid values: `enable`, `disable`.
	WebFtgdErrLog pulumi.StringPtrInput
	// Enable/disable logging daily quota usage. Valid values: `enable`, `disable`.
	WebFtgdQuotaUsage pulumi.StringPtrInput
	// Enable/disable logging invalid domain names. Valid values: `enable`, `disable`.
	WebInvalidDomainLog pulumi.StringPtrInput
	// Enable/disable logging URL filtering. Valid values: `enable`, `disable`.
	WebUrlLog pulumi.StringPtrInput
	// Enable/disable web proxy WISP. Valid values: `enable`, `disable`.
	Wisp pulumi.StringPtrInput
	// WISP server selection algorithm. Valid values: `primary-secondary`, `round-robin`, `auto-learning`.
	WispAlgorithm pulumi.StringPtrInput
	// WISP servers. The structure of `wispServers` block is documented below.
	WispServers ProfileWispServerArrayInput
	// YouTube channel filter. The structure of `youtubeChannelFilter` block is documented below.
	YoutubeChannelFilters ProfileYoutubeChannelFilterArrayInput
	// YouTube channel filter status.
	YoutubeChannelStatus pulumi.StringPtrInput
}

func (ProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileArgs)(nil)).Elem()
}

type ProfileInput interface {
	pulumi.Input

	ToProfileOutput() ProfileOutput
	ToProfileOutputWithContext(ctx context.Context) ProfileOutput
}

func (*Profile) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (i *Profile) ToProfileOutput() ProfileOutput {
	return i.ToProfileOutputWithContext(context.Background())
}

func (i *Profile) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileOutput)
}

// ProfileArrayInput is an input type that accepts ProfileArray and ProfileArrayOutput values.
// You can construct a concrete instance of `ProfileArrayInput` via:
//
//	ProfileArray{ ProfileArgs{...} }
type ProfileArrayInput interface {
	pulumi.Input

	ToProfileArrayOutput() ProfileArrayOutput
	ToProfileArrayOutputWithContext(context.Context) ProfileArrayOutput
}

type ProfileArray []ProfileInput

func (ProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Profile)(nil)).Elem()
}

func (i ProfileArray) ToProfileArrayOutput() ProfileArrayOutput {
	return i.ToProfileArrayOutputWithContext(context.Background())
}

func (i ProfileArray) ToProfileArrayOutputWithContext(ctx context.Context) ProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileArrayOutput)
}

// ProfileMapInput is an input type that accepts ProfileMap and ProfileMapOutput values.
// You can construct a concrete instance of `ProfileMapInput` via:
//
//	ProfileMap{ "key": ProfileArgs{...} }
type ProfileMapInput interface {
	pulumi.Input

	ToProfileMapOutput() ProfileMapOutput
	ToProfileMapOutputWithContext(context.Context) ProfileMapOutput
}

type ProfileMap map[string]ProfileInput

func (ProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Profile)(nil)).Elem()
}

func (i ProfileMap) ToProfileMapOutput() ProfileMapOutput {
	return i.ToProfileMapOutputWithContext(context.Background())
}

func (i ProfileMap) ToProfileMapOutputWithContext(ctx context.Context) ProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMapOutput)
}

type ProfileOutput struct{ *pulumi.OutputState }

func (ProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (o ProfileOutput) ToProfileOutput() ProfileOutput {
	return o
}

func (o ProfileOutput) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return o
}

// AntiPhishing profile. The structure of `antiphish` block is documented below.
func (o ProfileOutput) Antiphish() ProfileAntiphishOutput {
	return o.ApplyT(func(v *Profile) ProfileAntiphishOutput { return v.Antiphish }).(ProfileAntiphishOutput)
}

// Optional comments.
func (o ProfileOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o ProfileOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Enable/disable extended logging for web filtering. Valid values: `enable`, `disable`.
func (o ProfileOutput) ExtendedLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.ExtendedLog }).(pulumi.StringOutput)
}

// Flow/proxy feature set. Valid values: `flow`, `proxy`.
func (o ProfileOutput) FeatureSet() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.FeatureSet }).(pulumi.StringOutput)
}

// File filter. The structure of `fileFilter` block is documented below.
func (o ProfileOutput) FileFilter() ProfileFileFilterOutput {
	return o.ApplyT(func(v *Profile) ProfileFileFilterOutput { return v.FileFilter }).(ProfileFileFilterOutput)
}

// FortiGuard Web Filter settings. The structure of `ftgdWf` block is documented below.
func (o ProfileOutput) FtgdWf() ProfileFtgdWfOutput {
	return o.ApplyT(func(v *Profile) ProfileFtgdWfOutput { return v.FtgdWf }).(ProfileFtgdWfOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o ProfileOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Enable replacement messages for HTTPS. Valid values: `enable`, `disable`.
func (o ProfileOutput) HttpsReplacemsg() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.HttpsReplacemsg }).(pulumi.StringOutput)
}

// Web filtering inspection mode. Valid values: `proxy`, `flow-based`.
func (o ProfileOutput) InspectionMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.InspectionMode }).(pulumi.StringOutput)
}

// Enable/disable logging all URLs visited. Valid values: `enable`, `disable`.
func (o ProfileOutput) LogAllUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.LogAllUrl }).(pulumi.StringOutput)
}

// Profile name.
func (o ProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Options.
func (o ProfileOutput) Options() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.Options }).(pulumi.StringOutput)
}

// Web Filter override settings. The structure of `override` block is documented below.
func (o ProfileOutput) Override() ProfileOverrideOutput {
	return o.ApplyT(func(v *Profile) ProfileOverrideOutput { return v.Override }).(ProfileOverrideOutput)
}

// Permitted override types. Valid values: `bannedword-override`, `urlfilter-override`, `fortiguard-wf-override`, `contenttype-check-override`.
func (o ProfileOutput) OvrdPerm() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.OvrdPerm }).(pulumi.StringOutput)
}

// Action taken for HTTP POST traffic. Valid values: `normal`, `block`.
func (o ProfileOutput) PostAction() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.PostAction }).(pulumi.StringOutput)
}

// Replacement message group.
func (o ProfileOutput) ReplacemsgGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.ReplacemsgGroup }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ProfileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Web content filtering settings. The structure of `web` block is documented below.
func (o ProfileOutput) Web() ProfileWebOutput {
	return o.ApplyT(func(v *Profile) ProfileWebOutput { return v.Web }).(ProfileWebOutput)
}

// Enable/disable logging of AntiPhishing checks. Valid values: `enable`, `disable`.
func (o ProfileOutput) WebAntiphishingLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebAntiphishingLog }).(pulumi.StringOutput)
}

// Enable/disable logging logging blocked web content. Valid values: `enable`, `disable`.
func (o ProfileOutput) WebContentLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebContentLog }).(pulumi.StringOutput)
}

// Enable/disable extended any filter action logging for web filtering. Valid values: `enable`, `disable`.
func (o ProfileOutput) WebExtendedAllActionLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebExtendedAllActionLog }).(pulumi.StringOutput)
}

// Enable/disable logging ActiveX. Valid values: `enable`, `disable`.
func (o ProfileOutput) WebFilterActivexLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebFilterActivexLog }).(pulumi.StringOutput)
}

// Enable/disable logging Java applets. Valid values: `enable`, `disable`.
func (o ProfileOutput) WebFilterAppletLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebFilterAppletLog }).(pulumi.StringOutput)
}

// Enable/disable logging blocked commands. Valid values: `enable`, `disable`.
func (o ProfileOutput) WebFilterCommandBlockLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebFilterCommandBlockLog }).(pulumi.StringOutput)
}

// Enable/disable logging cookie filtering. Valid values: `enable`, `disable`.
func (o ProfileOutput) WebFilterCookieLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebFilterCookieLog }).(pulumi.StringOutput)
}

// Enable/disable logging blocked cookies. Valid values: `enable`, `disable`.
func (o ProfileOutput) WebFilterCookieRemovalLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebFilterCookieRemovalLog }).(pulumi.StringOutput)
}

// Enable/disable logging Java scripts. Valid values: `enable`, `disable`.
func (o ProfileOutput) WebFilterJsLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebFilterJsLog }).(pulumi.StringOutput)
}

// Enable/disable logging JScripts. Valid values: `enable`, `disable`.
func (o ProfileOutput) WebFilterJscriptLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebFilterJscriptLog }).(pulumi.StringOutput)
}

// Enable/disable logging referrers. Valid values: `enable`, `disable`.
func (o ProfileOutput) WebFilterRefererLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebFilterRefererLog }).(pulumi.StringOutput)
}

// Enable/disable logging unknown scripts. Valid values: `enable`, `disable`.
func (o ProfileOutput) WebFilterUnknownLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebFilterUnknownLog }).(pulumi.StringOutput)
}

// Enable/disable logging VBS scripts. Valid values: `enable`, `disable`.
func (o ProfileOutput) WebFilterVbsLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebFilterVbsLog }).(pulumi.StringOutput)
}

// Log encoding in flow mode. Valid values: `utf-8`, `punycode`.
func (o ProfileOutput) WebFlowLogEncoding() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebFlowLogEncoding }).(pulumi.StringOutput)
}

// Enable/disable logging rating errors. Valid values: `enable`, `disable`.
func (o ProfileOutput) WebFtgdErrLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebFtgdErrLog }).(pulumi.StringOutput)
}

// Enable/disable logging daily quota usage. Valid values: `enable`, `disable`.
func (o ProfileOutput) WebFtgdQuotaUsage() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebFtgdQuotaUsage }).(pulumi.StringOutput)
}

// Enable/disable logging invalid domain names. Valid values: `enable`, `disable`.
func (o ProfileOutput) WebInvalidDomainLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebInvalidDomainLog }).(pulumi.StringOutput)
}

// Enable/disable logging URL filtering. Valid values: `enable`, `disable`.
func (o ProfileOutput) WebUrlLog() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WebUrlLog }).(pulumi.StringOutput)
}

// Enable/disable web proxy WISP. Valid values: `enable`, `disable`.
func (o ProfileOutput) Wisp() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.Wisp }).(pulumi.StringOutput)
}

// WISP server selection algorithm. Valid values: `primary-secondary`, `round-robin`, `auto-learning`.
func (o ProfileOutput) WispAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.WispAlgorithm }).(pulumi.StringOutput)
}

// WISP servers. The structure of `wispServers` block is documented below.
func (o ProfileOutput) WispServers() ProfileWispServerArrayOutput {
	return o.ApplyT(func(v *Profile) ProfileWispServerArrayOutput { return v.WispServers }).(ProfileWispServerArrayOutput)
}

// YouTube channel filter. The structure of `youtubeChannelFilter` block is documented below.
func (o ProfileOutput) YoutubeChannelFilters() ProfileYoutubeChannelFilterArrayOutput {
	return o.ApplyT(func(v *Profile) ProfileYoutubeChannelFilterArrayOutput { return v.YoutubeChannelFilters }).(ProfileYoutubeChannelFilterArrayOutput)
}

// YouTube channel filter status.
func (o ProfileOutput) YoutubeChannelStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.YoutubeChannelStatus }).(pulumi.StringOutput)
}

type ProfileArrayOutput struct{ *pulumi.OutputState }

func (ProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Profile)(nil)).Elem()
}

func (o ProfileArrayOutput) ToProfileArrayOutput() ProfileArrayOutput {
	return o
}

func (o ProfileArrayOutput) ToProfileArrayOutputWithContext(ctx context.Context) ProfileArrayOutput {
	return o
}

func (o ProfileArrayOutput) Index(i pulumi.IntInput) ProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Profile {
		return vs[0].([]*Profile)[vs[1].(int)]
	}).(ProfileOutput)
}

type ProfileMapOutput struct{ *pulumi.OutputState }

func (ProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Profile)(nil)).Elem()
}

func (o ProfileMapOutput) ToProfileMapOutput() ProfileMapOutput {
	return o
}

func (o ProfileMapOutput) ToProfileMapOutputWithContext(ctx context.Context) ProfileMapOutput {
	return o
}

func (o ProfileMapOutput) MapIndex(k pulumi.StringInput) ProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Profile {
		return vs[0].(map[string]*Profile)[vs[1].(string)]
	}).(ProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileInput)(nil)).Elem(), &Profile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileArrayInput)(nil)).Elem(), ProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileMapInput)(nil)).Elem(), ProfileMap{})
	pulumi.RegisterOutputType(ProfileOutput{})
	pulumi.RegisterOutputType(ProfileArrayOutput{})
	pulumi.RegisterOutputType(ProfileMapOutput{})
}
