// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

var _ = internal.GetEnvOrDefault

// CA Bundle file content
func GetCabundlecontent(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "fortios:cabundlecontent")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "FORTIOS_CA_CABUNDLECONTENT"); d != nil {
		value = d.(string)
	}
	return value
}

// CA Bundle file
func GetCabundlefile(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "fortios:cabundlefile")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "FORTIOS_CA_CABUNDLE"); d != nil {
		value = d.(string)
	}
	return value
}

// CA certtificate(Optional)
func GetCacert(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "fortios:cacert")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "FORTIOS_CA_CACERT"); d != nil {
		value = d.(string)
	}
	return value
}

// User certificate
func GetClientcert(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "fortios:clientcert")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "FORTIOS_CA_CLIENTCERT"); d != nil {
		value = d.(string)
	}
	return value
}

// User private key
func GetClientkey(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "fortios:clientkey")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "FORTIOS_CA_CLIENTKEY"); d != nil {
		value = d.(string)
	}
	return value
}

// CA Bundle file
func GetFmgCabundlefile(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "fortios:fmgCabundlefile")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "FORTIOS_FMG_CABUNDLE"); d != nil {
		value = d.(string)
	}
	return value
}

// Hostname/IP address of the FortiManager to connect to
func GetFmgHostname(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "fortios:fmgHostname")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "FORTIOS_FMG_HOSTNAME"); d != nil {
		value = d.(string)
	}
	return value
}
func GetFmgInsecure(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "fortios:fmgInsecure")
	if err == nil {
		return v
	}
	var value bool
	if d := internal.GetEnvOrDefault(nil, internal.ParseEnvBool, "FORTIOS_FMG_INSECURE"); d != nil {
		value = d.(bool)
	}
	return value
}
func GetFmgPasswd(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "fortios:fmgPasswd")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "FORTIOS_FMG_PASSWORD"); d != nil {
		value = d.(string)
	}
	return value
}
func GetFmgUsername(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "fortios:fmgUsername")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "FORTIOS_FMG_USERNAME"); d != nil {
		value = d.(string)
	}
	return value
}

// The hostname/IP address of the FortiOS to be connected
func GetHostname(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "fortios:hostname")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "FORTIOS_ACCESS_HOSTNAME"); d != nil {
		value = d.(string)
	}
	return value
}

// HTTP proxy address
func GetHttpProxy(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "fortios:httpProxy")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "FORTIOS_HTTP_PROXY"); d != nil {
		value = d.(string)
	}
	return value
}
func GetInsecure(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "fortios:insecure")
	if err == nil {
		return v
	}
	var value bool
	if d := internal.GetEnvOrDefault(nil, internal.ParseEnvBool, "FORTIOS_INSECURE"); d != nil {
		value = d.(bool)
	}
	return value
}

// The password of the user.
func GetPassword(ctx *pulumi.Context) string {
	return config.Get(ctx, "fortios:password")
}

// Enable/disable peer authentication, can be 'enable' or 'disable'
func GetPeerauth(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "fortios:peerauth")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "FORTIOS_CA_PEERAUTH"); d != nil {
		value = d.(string)
	}
	return value
}
func GetToken(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "fortios:token")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "FORTIOS_ACCESS_TOKEN"); d != nil {
		value = d.(string)
	}
	return value
}

// The username of the user.
func GetUsername(ctx *pulumi.Context) string {
	return config.Get(ctx, "fortios:username")
}
func GetVdom(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "fortios:vdom")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "FORTIOS_VDOM"); d != nil {
		value = d.(string)
	}
	return value
}
