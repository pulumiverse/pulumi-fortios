// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package switchcontrolleracl

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

var _ = internal.GetEnvOrDefault

type GroupIngress struct {
	// ACL ID.
	Id *int `pulumi:"id"`
}

// GroupIngressInput is an input type that accepts GroupIngressArgs and GroupIngressOutput values.
// You can construct a concrete instance of `GroupIngressInput` via:
//
//	GroupIngressArgs{...}
type GroupIngressInput interface {
	pulumi.Input

	ToGroupIngressOutput() GroupIngressOutput
	ToGroupIngressOutputWithContext(context.Context) GroupIngressOutput
}

type GroupIngressArgs struct {
	// ACL ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (GroupIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupIngress)(nil)).Elem()
}

func (i GroupIngressArgs) ToGroupIngressOutput() GroupIngressOutput {
	return i.ToGroupIngressOutputWithContext(context.Background())
}

func (i GroupIngressArgs) ToGroupIngressOutputWithContext(ctx context.Context) GroupIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupIngressOutput)
}

// GroupIngressArrayInput is an input type that accepts GroupIngressArray and GroupIngressArrayOutput values.
// You can construct a concrete instance of `GroupIngressArrayInput` via:
//
//	GroupIngressArray{ GroupIngressArgs{...} }
type GroupIngressArrayInput interface {
	pulumi.Input

	ToGroupIngressArrayOutput() GroupIngressArrayOutput
	ToGroupIngressArrayOutputWithContext(context.Context) GroupIngressArrayOutput
}

type GroupIngressArray []GroupIngressInput

func (GroupIngressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupIngress)(nil)).Elem()
}

func (i GroupIngressArray) ToGroupIngressArrayOutput() GroupIngressArrayOutput {
	return i.ToGroupIngressArrayOutputWithContext(context.Background())
}

func (i GroupIngressArray) ToGroupIngressArrayOutputWithContext(ctx context.Context) GroupIngressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupIngressArrayOutput)
}

type GroupIngressOutput struct{ *pulumi.OutputState }

func (GroupIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupIngress)(nil)).Elem()
}

func (o GroupIngressOutput) ToGroupIngressOutput() GroupIngressOutput {
	return o
}

func (o GroupIngressOutput) ToGroupIngressOutputWithContext(ctx context.Context) GroupIngressOutput {
	return o
}

// ACL ID.
func (o GroupIngressOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupIngress) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type GroupIngressArrayOutput struct{ *pulumi.OutputState }

func (GroupIngressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupIngress)(nil)).Elem()
}

func (o GroupIngressArrayOutput) ToGroupIngressArrayOutput() GroupIngressArrayOutput {
	return o
}

func (o GroupIngressArrayOutput) ToGroupIngressArrayOutputWithContext(ctx context.Context) GroupIngressArrayOutput {
	return o
}

func (o GroupIngressArrayOutput) Index(i pulumi.IntInput) GroupIngressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupIngress {
		return vs[0].([]GroupIngress)[vs[1].(int)]
	}).(GroupIngressOutput)
}

type IngressAction struct {
	// Enable/disable count. Valid values: `enable`, `disable`.
	Count *string `pulumi:"count"`
	// Enable/disable drop. Valid values: `enable`, `disable`.
	Drop *string `pulumi:"drop"`
}

// IngressActionInput is an input type that accepts IngressActionArgs and IngressActionOutput values.
// You can construct a concrete instance of `IngressActionInput` via:
//
//	IngressActionArgs{...}
type IngressActionInput interface {
	pulumi.Input

	ToIngressActionOutput() IngressActionOutput
	ToIngressActionOutputWithContext(context.Context) IngressActionOutput
}

type IngressActionArgs struct {
	// Enable/disable count. Valid values: `enable`, `disable`.
	Count pulumi.StringPtrInput `pulumi:"count"`
	// Enable/disable drop. Valid values: `enable`, `disable`.
	Drop pulumi.StringPtrInput `pulumi:"drop"`
}

func (IngressActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressAction)(nil)).Elem()
}

func (i IngressActionArgs) ToIngressActionOutput() IngressActionOutput {
	return i.ToIngressActionOutputWithContext(context.Background())
}

func (i IngressActionArgs) ToIngressActionOutputWithContext(ctx context.Context) IngressActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressActionOutput)
}

func (i IngressActionArgs) ToIngressActionPtrOutput() IngressActionPtrOutput {
	return i.ToIngressActionPtrOutputWithContext(context.Background())
}

func (i IngressActionArgs) ToIngressActionPtrOutputWithContext(ctx context.Context) IngressActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressActionOutput).ToIngressActionPtrOutputWithContext(ctx)
}

// IngressActionPtrInput is an input type that accepts IngressActionArgs, IngressActionPtr and IngressActionPtrOutput values.
// You can construct a concrete instance of `IngressActionPtrInput` via:
//
//	        IngressActionArgs{...}
//
//	or:
//
//	        nil
type IngressActionPtrInput interface {
	pulumi.Input

	ToIngressActionPtrOutput() IngressActionPtrOutput
	ToIngressActionPtrOutputWithContext(context.Context) IngressActionPtrOutput
}

type ingressActionPtrType IngressActionArgs

func IngressActionPtr(v *IngressActionArgs) IngressActionPtrInput {
	return (*ingressActionPtrType)(v)
}

func (*ingressActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressAction)(nil)).Elem()
}

func (i *ingressActionPtrType) ToIngressActionPtrOutput() IngressActionPtrOutput {
	return i.ToIngressActionPtrOutputWithContext(context.Background())
}

func (i *ingressActionPtrType) ToIngressActionPtrOutputWithContext(ctx context.Context) IngressActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressActionPtrOutput)
}

type IngressActionOutput struct{ *pulumi.OutputState }

func (IngressActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressAction)(nil)).Elem()
}

func (o IngressActionOutput) ToIngressActionOutput() IngressActionOutput {
	return o
}

func (o IngressActionOutput) ToIngressActionOutputWithContext(ctx context.Context) IngressActionOutput {
	return o
}

func (o IngressActionOutput) ToIngressActionPtrOutput() IngressActionPtrOutput {
	return o.ToIngressActionPtrOutputWithContext(context.Background())
}

func (o IngressActionOutput) ToIngressActionPtrOutputWithContext(ctx context.Context) IngressActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IngressAction) *IngressAction {
		return &v
	}).(IngressActionPtrOutput)
}

// Enable/disable count. Valid values: `enable`, `disable`.
func (o IngressActionOutput) Count() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressAction) *string { return v.Count }).(pulumi.StringPtrOutput)
}

// Enable/disable drop. Valid values: `enable`, `disable`.
func (o IngressActionOutput) Drop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressAction) *string { return v.Drop }).(pulumi.StringPtrOutput)
}

type IngressActionPtrOutput struct{ *pulumi.OutputState }

func (IngressActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressAction)(nil)).Elem()
}

func (o IngressActionPtrOutput) ToIngressActionPtrOutput() IngressActionPtrOutput {
	return o
}

func (o IngressActionPtrOutput) ToIngressActionPtrOutputWithContext(ctx context.Context) IngressActionPtrOutput {
	return o
}

func (o IngressActionPtrOutput) Elem() IngressActionOutput {
	return o.ApplyT(func(v *IngressAction) IngressAction {
		if v != nil {
			return *v
		}
		var ret IngressAction
		return ret
	}).(IngressActionOutput)
}

// Enable/disable count. Valid values: `enable`, `disable`.
func (o IngressActionPtrOutput) Count() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressAction) *string {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.StringPtrOutput)
}

// Enable/disable drop. Valid values: `enable`, `disable`.
func (o IngressActionPtrOutput) Drop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressAction) *string {
		if v == nil {
			return nil
		}
		return v.Drop
	}).(pulumi.StringPtrOutput)
}

type IngressClassifier struct {
	// Destination IP address to be matched.
	DstIpPrefix *string `pulumi:"dstIpPrefix"`
	// Destination MAC address to be matched.
	DstMac *string `pulumi:"dstMac"`
	// Source IP address to be matched.
	SrcIpPrefix *string `pulumi:"srcIpPrefix"`
	// Source MAC address to be matched.
	SrcMac *string `pulumi:"srcMac"`
	// VLAN ID to be matched.
	Vlan *int `pulumi:"vlan"`
}

// IngressClassifierInput is an input type that accepts IngressClassifierArgs and IngressClassifierOutput values.
// You can construct a concrete instance of `IngressClassifierInput` via:
//
//	IngressClassifierArgs{...}
type IngressClassifierInput interface {
	pulumi.Input

	ToIngressClassifierOutput() IngressClassifierOutput
	ToIngressClassifierOutputWithContext(context.Context) IngressClassifierOutput
}

type IngressClassifierArgs struct {
	// Destination IP address to be matched.
	DstIpPrefix pulumi.StringPtrInput `pulumi:"dstIpPrefix"`
	// Destination MAC address to be matched.
	DstMac pulumi.StringPtrInput `pulumi:"dstMac"`
	// Source IP address to be matched.
	SrcIpPrefix pulumi.StringPtrInput `pulumi:"srcIpPrefix"`
	// Source MAC address to be matched.
	SrcMac pulumi.StringPtrInput `pulumi:"srcMac"`
	// VLAN ID to be matched.
	Vlan pulumi.IntPtrInput `pulumi:"vlan"`
}

func (IngressClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressClassifier)(nil)).Elem()
}

func (i IngressClassifierArgs) ToIngressClassifierOutput() IngressClassifierOutput {
	return i.ToIngressClassifierOutputWithContext(context.Background())
}

func (i IngressClassifierArgs) ToIngressClassifierOutputWithContext(ctx context.Context) IngressClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressClassifierOutput)
}

func (i IngressClassifierArgs) ToIngressClassifierPtrOutput() IngressClassifierPtrOutput {
	return i.ToIngressClassifierPtrOutputWithContext(context.Background())
}

func (i IngressClassifierArgs) ToIngressClassifierPtrOutputWithContext(ctx context.Context) IngressClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressClassifierOutput).ToIngressClassifierPtrOutputWithContext(ctx)
}

// IngressClassifierPtrInput is an input type that accepts IngressClassifierArgs, IngressClassifierPtr and IngressClassifierPtrOutput values.
// You can construct a concrete instance of `IngressClassifierPtrInput` via:
//
//	        IngressClassifierArgs{...}
//
//	or:
//
//	        nil
type IngressClassifierPtrInput interface {
	pulumi.Input

	ToIngressClassifierPtrOutput() IngressClassifierPtrOutput
	ToIngressClassifierPtrOutputWithContext(context.Context) IngressClassifierPtrOutput
}

type ingressClassifierPtrType IngressClassifierArgs

func IngressClassifierPtr(v *IngressClassifierArgs) IngressClassifierPtrInput {
	return (*ingressClassifierPtrType)(v)
}

func (*ingressClassifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressClassifier)(nil)).Elem()
}

func (i *ingressClassifierPtrType) ToIngressClassifierPtrOutput() IngressClassifierPtrOutput {
	return i.ToIngressClassifierPtrOutputWithContext(context.Background())
}

func (i *ingressClassifierPtrType) ToIngressClassifierPtrOutputWithContext(ctx context.Context) IngressClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressClassifierPtrOutput)
}

type IngressClassifierOutput struct{ *pulumi.OutputState }

func (IngressClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressClassifier)(nil)).Elem()
}

func (o IngressClassifierOutput) ToIngressClassifierOutput() IngressClassifierOutput {
	return o
}

func (o IngressClassifierOutput) ToIngressClassifierOutputWithContext(ctx context.Context) IngressClassifierOutput {
	return o
}

func (o IngressClassifierOutput) ToIngressClassifierPtrOutput() IngressClassifierPtrOutput {
	return o.ToIngressClassifierPtrOutputWithContext(context.Background())
}

func (o IngressClassifierOutput) ToIngressClassifierPtrOutputWithContext(ctx context.Context) IngressClassifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IngressClassifier) *IngressClassifier {
		return &v
	}).(IngressClassifierPtrOutput)
}

// Destination IP address to be matched.
func (o IngressClassifierOutput) DstIpPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressClassifier) *string { return v.DstIpPrefix }).(pulumi.StringPtrOutput)
}

// Destination MAC address to be matched.
func (o IngressClassifierOutput) DstMac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressClassifier) *string { return v.DstMac }).(pulumi.StringPtrOutput)
}

// Source IP address to be matched.
func (o IngressClassifierOutput) SrcIpPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressClassifier) *string { return v.SrcIpPrefix }).(pulumi.StringPtrOutput)
}

// Source MAC address to be matched.
func (o IngressClassifierOutput) SrcMac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressClassifier) *string { return v.SrcMac }).(pulumi.StringPtrOutput)
}

// VLAN ID to be matched.
func (o IngressClassifierOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IngressClassifier) *int { return v.Vlan }).(pulumi.IntPtrOutput)
}

type IngressClassifierPtrOutput struct{ *pulumi.OutputState }

func (IngressClassifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressClassifier)(nil)).Elem()
}

func (o IngressClassifierPtrOutput) ToIngressClassifierPtrOutput() IngressClassifierPtrOutput {
	return o
}

func (o IngressClassifierPtrOutput) ToIngressClassifierPtrOutputWithContext(ctx context.Context) IngressClassifierPtrOutput {
	return o
}

func (o IngressClassifierPtrOutput) Elem() IngressClassifierOutput {
	return o.ApplyT(func(v *IngressClassifier) IngressClassifier {
		if v != nil {
			return *v
		}
		var ret IngressClassifier
		return ret
	}).(IngressClassifierOutput)
}

// Destination IP address to be matched.
func (o IngressClassifierPtrOutput) DstIpPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressClassifier) *string {
		if v == nil {
			return nil
		}
		return v.DstIpPrefix
	}).(pulumi.StringPtrOutput)
}

// Destination MAC address to be matched.
func (o IngressClassifierPtrOutput) DstMac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressClassifier) *string {
		if v == nil {
			return nil
		}
		return v.DstMac
	}).(pulumi.StringPtrOutput)
}

// Source IP address to be matched.
func (o IngressClassifierPtrOutput) SrcIpPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressClassifier) *string {
		if v == nil {
			return nil
		}
		return v.SrcIpPrefix
	}).(pulumi.StringPtrOutput)
}

// Source MAC address to be matched.
func (o IngressClassifierPtrOutput) SrcMac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressClassifier) *string {
		if v == nil {
			return nil
		}
		return v.SrcMac
	}).(pulumi.StringPtrOutput)
}

// VLAN ID to be matched.
func (o IngressClassifierPtrOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IngressClassifier) *int {
		if v == nil {
			return nil
		}
		return v.Vlan
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupIngressInput)(nil)).Elem(), GroupIngressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupIngressArrayInput)(nil)).Elem(), GroupIngressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressActionInput)(nil)).Elem(), IngressActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressActionPtrInput)(nil)).Elem(), IngressActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressClassifierInput)(nil)).Elem(), IngressClassifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressClassifierPtrInput)(nil)).Elem(), IngressClassifierArgs{})
	pulumi.RegisterOutputType(GroupIngressOutput{})
	pulumi.RegisterOutputType(GroupIngressArrayOutput{})
	pulumi.RegisterOutputType(IngressActionOutput{})
	pulumi.RegisterOutputType(IngressActionPtrOutput{})
	pulumi.RegisterOutputType(IngressClassifierOutput{})
	pulumi.RegisterOutputType(IngressClassifierPtrOutput{})
}
