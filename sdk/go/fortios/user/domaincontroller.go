// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure domain controller entries.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/user"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			trname1, err := user.NewLdap(ctx, "trname1", &user.LdapArgs{
//				AccountKeyFilter:      pulumi.String("(&(userPrincipalName=%s)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))"),
//				AccountKeyProcessing:  pulumi.String("same"),
//				Cnid:                  pulumi.String("cn"),
//				Dn:                    pulumi.String("EIWNCIEW"),
//				GroupMemberCheck:      pulumi.String("user-attr"),
//				GroupObjectFilter:     pulumi.String("(&(objectcategory=group)(member=*))"),
//				MemberAttr:            pulumi.String("memberOf"),
//				PasswordExpiryWarning: pulumi.String("disable"),
//				PasswordRenewal:       pulumi.String("disable"),
//				Port:                  pulumi.Int(389),
//				Secure:                pulumi.String("disable"),
//				Server:                pulumi.String("1.1.1.1"),
//				ServerIdentityCheck:   pulumi.String("disable"),
//				SourceIp:              pulumi.String("0.0.0.0"),
//				SslMinProtoVersion:    pulumi.String("default"),
//				Type:                  pulumi.String("simple"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = user.NewDomaincontroller(ctx, "trname", &user.DomaincontrollerArgs{
//				DomainName: pulumi.String("s.com"),
//				IpAddress:  pulumi.String("1.1.1.1"),
//				LdapServer: trname1.Name,
//				Port:       pulumi.Int(445),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// User DomainController can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:user/domaincontroller:Domaincontroller labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:user/domaincontroller:Domaincontroller labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Domaincontroller struct {
	pulumi.CustomResourceState

	// Set Active Directory mode. Valid values: `none`, `ds`, `lds`.
	AdMode pulumi.StringOutput `pulumi:"adMode"`
	// AD LDS distinguished name.
	AdldsDn pulumi.StringOutput `pulumi:"adldsDn"`
	// AD LDS IPv6 address.
	AdldsIp6 pulumi.StringOutput `pulumi:"adldsIp6"`
	// AD LDS IPv4 address.
	AdldsIpAddress pulumi.StringOutput `pulumi:"adldsIpAddress"`
	// Port number of AD LDS service (default = 389).
	AdldsPort pulumi.IntOutput `pulumi:"adldsPort"`
	// Enable/disable detection of a configuration change in the Active Directory server. Valid values: `enable`, `disable`.
	ChangeDetection pulumi.StringOutput `pulumi:"changeDetection"`
	// Minutes to detect a configuration change in the Active Directory server (5 - 10080 minutes (7 days), default = 60).
	ChangeDetectionPeriod pulumi.IntOutput `pulumi:"changeDetectionPeriod"`
	// Enable/disable DNS service lookup. Valid values: `enable`, `disable`.
	DnsSrvLookup pulumi.StringOutput `pulumi:"dnsSrvLookup"`
	// Domain DNS name.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// extra servers. The structure of `extraServer` block is documented below.
	ExtraServers DomaincontrollerExtraServerArrayOutput `pulumi:"extraServers"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Hostname of the server to connect to.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// Specify outgoing interface to reach server.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringOutput `pulumi:"interfaceSelectMethod"`
	// Domain controller IPv6 address.
	Ip6 pulumi.StringOutput `pulumi:"ip6"`
	// Domain controller IP address.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// LDAP server name.
	LdapServer pulumi.StringOutput `pulumi:"ldapServer"`
	// Domain controller entry name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Password for specified username.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Port to be used for communication with the domain controller (default = 445).
	Port pulumi.IntOutput `pulumi:"port"`
	// Port to be used for communication with the domain controller for replication service. Port number 0 indicates automatic discovery.
	ReplicationPort pulumi.IntOutput `pulumi:"replicationPort"`
	// FortiGate IPv6 address to be used for communication with the domain controller.
	SourceIp6 pulumi.StringOutput `pulumi:"sourceIp6"`
	// FortiGate IPv4 address to be used for communication with the domain controller.
	SourceIpAddress pulumi.StringOutput `pulumi:"sourceIpAddress"`
	// Source port to be used for communication with the domain controller.
	SourcePort pulumi.IntOutput `pulumi:"sourcePort"`
	// User name to sign in with. Must have proper permissions for service.
	Username pulumi.StringOutput `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewDomaincontroller registers a new resource with the given unique name, arguments, and options.
func NewDomaincontroller(ctx *pulumi.Context,
	name string, args *DomaincontrollerArgs, opts ...pulumi.ResourceOption) (*Domaincontroller, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpAddress == nil {
		return nil, errors.New("invalid value for required argument 'IpAddress'")
	}
	if args.LdapServer == nil {
		return nil, errors.New("invalid value for required argument 'LdapServer'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Domaincontroller
	err := ctx.RegisterResource("fortios:user/domaincontroller:Domaincontroller", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomaincontroller gets an existing Domaincontroller resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomaincontroller(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomaincontrollerState, opts ...pulumi.ResourceOption) (*Domaincontroller, error) {
	var resource Domaincontroller
	err := ctx.ReadResource("fortios:user/domaincontroller:Domaincontroller", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Domaincontroller resources.
type domaincontrollerState struct {
	// Set Active Directory mode. Valid values: `none`, `ds`, `lds`.
	AdMode *string `pulumi:"adMode"`
	// AD LDS distinguished name.
	AdldsDn *string `pulumi:"adldsDn"`
	// AD LDS IPv6 address.
	AdldsIp6 *string `pulumi:"adldsIp6"`
	// AD LDS IPv4 address.
	AdldsIpAddress *string `pulumi:"adldsIpAddress"`
	// Port number of AD LDS service (default = 389).
	AdldsPort *int `pulumi:"adldsPort"`
	// Enable/disable detection of a configuration change in the Active Directory server. Valid values: `enable`, `disable`.
	ChangeDetection *string `pulumi:"changeDetection"`
	// Minutes to detect a configuration change in the Active Directory server (5 - 10080 minutes (7 days), default = 60).
	ChangeDetectionPeriod *int `pulumi:"changeDetectionPeriod"`
	// Enable/disable DNS service lookup. Valid values: `enable`, `disable`.
	DnsSrvLookup *string `pulumi:"dnsSrvLookup"`
	// Domain DNS name.
	DomainName *string `pulumi:"domainName"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// extra servers. The structure of `extraServer` block is documented below.
	ExtraServers []DomaincontrollerExtraServer `pulumi:"extraServers"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Hostname of the server to connect to.
	Hostname *string `pulumi:"hostname"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Domain controller IPv6 address.
	Ip6 *string `pulumi:"ip6"`
	// Domain controller IP address.
	IpAddress *string `pulumi:"ipAddress"`
	// LDAP server name.
	LdapServer *string `pulumi:"ldapServer"`
	// Domain controller entry name.
	Name *string `pulumi:"name"`
	// Password for specified username.
	Password *string `pulumi:"password"`
	// Port to be used for communication with the domain controller (default = 445).
	Port *int `pulumi:"port"`
	// Port to be used for communication with the domain controller for replication service. Port number 0 indicates automatic discovery.
	ReplicationPort *int `pulumi:"replicationPort"`
	// FortiGate IPv6 address to be used for communication with the domain controller.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// FortiGate IPv4 address to be used for communication with the domain controller.
	SourceIpAddress *string `pulumi:"sourceIpAddress"`
	// Source port to be used for communication with the domain controller.
	SourcePort *int `pulumi:"sourcePort"`
	// User name to sign in with. Must have proper permissions for service.
	Username *string `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type DomaincontrollerState struct {
	// Set Active Directory mode. Valid values: `none`, `ds`, `lds`.
	AdMode pulumi.StringPtrInput
	// AD LDS distinguished name.
	AdldsDn pulumi.StringPtrInput
	// AD LDS IPv6 address.
	AdldsIp6 pulumi.StringPtrInput
	// AD LDS IPv4 address.
	AdldsIpAddress pulumi.StringPtrInput
	// Port number of AD LDS service (default = 389).
	AdldsPort pulumi.IntPtrInput
	// Enable/disable detection of a configuration change in the Active Directory server. Valid values: `enable`, `disable`.
	ChangeDetection pulumi.StringPtrInput
	// Minutes to detect a configuration change in the Active Directory server (5 - 10080 minutes (7 days), default = 60).
	ChangeDetectionPeriod pulumi.IntPtrInput
	// Enable/disable DNS service lookup. Valid values: `enable`, `disable`.
	DnsSrvLookup pulumi.StringPtrInput
	// Domain DNS name.
	DomainName pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// extra servers. The structure of `extraServer` block is documented below.
	ExtraServers DomaincontrollerExtraServerArrayInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Hostname of the server to connect to.
	Hostname pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Domain controller IPv6 address.
	Ip6 pulumi.StringPtrInput
	// Domain controller IP address.
	IpAddress pulumi.StringPtrInput
	// LDAP server name.
	LdapServer pulumi.StringPtrInput
	// Domain controller entry name.
	Name pulumi.StringPtrInput
	// Password for specified username.
	Password pulumi.StringPtrInput
	// Port to be used for communication with the domain controller (default = 445).
	Port pulumi.IntPtrInput
	// Port to be used for communication with the domain controller for replication service. Port number 0 indicates automatic discovery.
	ReplicationPort pulumi.IntPtrInput
	// FortiGate IPv6 address to be used for communication with the domain controller.
	SourceIp6 pulumi.StringPtrInput
	// FortiGate IPv4 address to be used for communication with the domain controller.
	SourceIpAddress pulumi.StringPtrInput
	// Source port to be used for communication with the domain controller.
	SourcePort pulumi.IntPtrInput
	// User name to sign in with. Must have proper permissions for service.
	Username pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (DomaincontrollerState) ElementType() reflect.Type {
	return reflect.TypeOf((*domaincontrollerState)(nil)).Elem()
}

type domaincontrollerArgs struct {
	// Set Active Directory mode. Valid values: `none`, `ds`, `lds`.
	AdMode *string `pulumi:"adMode"`
	// AD LDS distinguished name.
	AdldsDn *string `pulumi:"adldsDn"`
	// AD LDS IPv6 address.
	AdldsIp6 *string `pulumi:"adldsIp6"`
	// AD LDS IPv4 address.
	AdldsIpAddress *string `pulumi:"adldsIpAddress"`
	// Port number of AD LDS service (default = 389).
	AdldsPort *int `pulumi:"adldsPort"`
	// Enable/disable detection of a configuration change in the Active Directory server. Valid values: `enable`, `disable`.
	ChangeDetection *string `pulumi:"changeDetection"`
	// Minutes to detect a configuration change in the Active Directory server (5 - 10080 minutes (7 days), default = 60).
	ChangeDetectionPeriod *int `pulumi:"changeDetectionPeriod"`
	// Enable/disable DNS service lookup. Valid values: `enable`, `disable`.
	DnsSrvLookup *string `pulumi:"dnsSrvLookup"`
	// Domain DNS name.
	DomainName *string `pulumi:"domainName"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// extra servers. The structure of `extraServer` block is documented below.
	ExtraServers []DomaincontrollerExtraServer `pulumi:"extraServers"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Hostname of the server to connect to.
	Hostname *string `pulumi:"hostname"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Domain controller IPv6 address.
	Ip6 *string `pulumi:"ip6"`
	// Domain controller IP address.
	IpAddress string `pulumi:"ipAddress"`
	// LDAP server name.
	LdapServer string `pulumi:"ldapServer"`
	// Domain controller entry name.
	Name *string `pulumi:"name"`
	// Password for specified username.
	Password *string `pulumi:"password"`
	// Port to be used for communication with the domain controller (default = 445).
	Port *int `pulumi:"port"`
	// Port to be used for communication with the domain controller for replication service. Port number 0 indicates automatic discovery.
	ReplicationPort *int `pulumi:"replicationPort"`
	// FortiGate IPv6 address to be used for communication with the domain controller.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// FortiGate IPv4 address to be used for communication with the domain controller.
	SourceIpAddress *string `pulumi:"sourceIpAddress"`
	// Source port to be used for communication with the domain controller.
	SourcePort *int `pulumi:"sourcePort"`
	// User name to sign in with. Must have proper permissions for service.
	Username *string `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Domaincontroller resource.
type DomaincontrollerArgs struct {
	// Set Active Directory mode. Valid values: `none`, `ds`, `lds`.
	AdMode pulumi.StringPtrInput
	// AD LDS distinguished name.
	AdldsDn pulumi.StringPtrInput
	// AD LDS IPv6 address.
	AdldsIp6 pulumi.StringPtrInput
	// AD LDS IPv4 address.
	AdldsIpAddress pulumi.StringPtrInput
	// Port number of AD LDS service (default = 389).
	AdldsPort pulumi.IntPtrInput
	// Enable/disable detection of a configuration change in the Active Directory server. Valid values: `enable`, `disable`.
	ChangeDetection pulumi.StringPtrInput
	// Minutes to detect a configuration change in the Active Directory server (5 - 10080 minutes (7 days), default = 60).
	ChangeDetectionPeriod pulumi.IntPtrInput
	// Enable/disable DNS service lookup. Valid values: `enable`, `disable`.
	DnsSrvLookup pulumi.StringPtrInput
	// Domain DNS name.
	DomainName pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// extra servers. The structure of `extraServer` block is documented below.
	ExtraServers DomaincontrollerExtraServerArrayInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Hostname of the server to connect to.
	Hostname pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Domain controller IPv6 address.
	Ip6 pulumi.StringPtrInput
	// Domain controller IP address.
	IpAddress pulumi.StringInput
	// LDAP server name.
	LdapServer pulumi.StringInput
	// Domain controller entry name.
	Name pulumi.StringPtrInput
	// Password for specified username.
	Password pulumi.StringPtrInput
	// Port to be used for communication with the domain controller (default = 445).
	Port pulumi.IntPtrInput
	// Port to be used for communication with the domain controller for replication service. Port number 0 indicates automatic discovery.
	ReplicationPort pulumi.IntPtrInput
	// FortiGate IPv6 address to be used for communication with the domain controller.
	SourceIp6 pulumi.StringPtrInput
	// FortiGate IPv4 address to be used for communication with the domain controller.
	SourceIpAddress pulumi.StringPtrInput
	// Source port to be used for communication with the domain controller.
	SourcePort pulumi.IntPtrInput
	// User name to sign in with. Must have proper permissions for service.
	Username pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (DomaincontrollerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domaincontrollerArgs)(nil)).Elem()
}

type DomaincontrollerInput interface {
	pulumi.Input

	ToDomaincontrollerOutput() DomaincontrollerOutput
	ToDomaincontrollerOutputWithContext(ctx context.Context) DomaincontrollerOutput
}

func (*Domaincontroller) ElementType() reflect.Type {
	return reflect.TypeOf((**Domaincontroller)(nil)).Elem()
}

func (i *Domaincontroller) ToDomaincontrollerOutput() DomaincontrollerOutput {
	return i.ToDomaincontrollerOutputWithContext(context.Background())
}

func (i *Domaincontroller) ToDomaincontrollerOutputWithContext(ctx context.Context) DomaincontrollerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomaincontrollerOutput)
}

// DomaincontrollerArrayInput is an input type that accepts DomaincontrollerArray and DomaincontrollerArrayOutput values.
// You can construct a concrete instance of `DomaincontrollerArrayInput` via:
//
//	DomaincontrollerArray{ DomaincontrollerArgs{...} }
type DomaincontrollerArrayInput interface {
	pulumi.Input

	ToDomaincontrollerArrayOutput() DomaincontrollerArrayOutput
	ToDomaincontrollerArrayOutputWithContext(context.Context) DomaincontrollerArrayOutput
}

type DomaincontrollerArray []DomaincontrollerInput

func (DomaincontrollerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domaincontroller)(nil)).Elem()
}

func (i DomaincontrollerArray) ToDomaincontrollerArrayOutput() DomaincontrollerArrayOutput {
	return i.ToDomaincontrollerArrayOutputWithContext(context.Background())
}

func (i DomaincontrollerArray) ToDomaincontrollerArrayOutputWithContext(ctx context.Context) DomaincontrollerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomaincontrollerArrayOutput)
}

// DomaincontrollerMapInput is an input type that accepts DomaincontrollerMap and DomaincontrollerMapOutput values.
// You can construct a concrete instance of `DomaincontrollerMapInput` via:
//
//	DomaincontrollerMap{ "key": DomaincontrollerArgs{...} }
type DomaincontrollerMapInput interface {
	pulumi.Input

	ToDomaincontrollerMapOutput() DomaincontrollerMapOutput
	ToDomaincontrollerMapOutputWithContext(context.Context) DomaincontrollerMapOutput
}

type DomaincontrollerMap map[string]DomaincontrollerInput

func (DomaincontrollerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domaincontroller)(nil)).Elem()
}

func (i DomaincontrollerMap) ToDomaincontrollerMapOutput() DomaincontrollerMapOutput {
	return i.ToDomaincontrollerMapOutputWithContext(context.Background())
}

func (i DomaincontrollerMap) ToDomaincontrollerMapOutputWithContext(ctx context.Context) DomaincontrollerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomaincontrollerMapOutput)
}

type DomaincontrollerOutput struct{ *pulumi.OutputState }

func (DomaincontrollerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Domaincontroller)(nil)).Elem()
}

func (o DomaincontrollerOutput) ToDomaincontrollerOutput() DomaincontrollerOutput {
	return o
}

func (o DomaincontrollerOutput) ToDomaincontrollerOutputWithContext(ctx context.Context) DomaincontrollerOutput {
	return o
}

// Set Active Directory mode. Valid values: `none`, `ds`, `lds`.
func (o DomaincontrollerOutput) AdMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringOutput { return v.AdMode }).(pulumi.StringOutput)
}

// AD LDS distinguished name.
func (o DomaincontrollerOutput) AdldsDn() pulumi.StringOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringOutput { return v.AdldsDn }).(pulumi.StringOutput)
}

// AD LDS IPv6 address.
func (o DomaincontrollerOutput) AdldsIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringOutput { return v.AdldsIp6 }).(pulumi.StringOutput)
}

// AD LDS IPv4 address.
func (o DomaincontrollerOutput) AdldsIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringOutput { return v.AdldsIpAddress }).(pulumi.StringOutput)
}

// Port number of AD LDS service (default = 389).
func (o DomaincontrollerOutput) AdldsPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.IntOutput { return v.AdldsPort }).(pulumi.IntOutput)
}

// Enable/disable detection of a configuration change in the Active Directory server. Valid values: `enable`, `disable`.
func (o DomaincontrollerOutput) ChangeDetection() pulumi.StringOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringOutput { return v.ChangeDetection }).(pulumi.StringOutput)
}

// Minutes to detect a configuration change in the Active Directory server (5 - 10080 minutes (7 days), default = 60).
func (o DomaincontrollerOutput) ChangeDetectionPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.IntOutput { return v.ChangeDetectionPeriod }).(pulumi.IntOutput)
}

// Enable/disable DNS service lookup. Valid values: `enable`, `disable`.
func (o DomaincontrollerOutput) DnsSrvLookup() pulumi.StringOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringOutput { return v.DnsSrvLookup }).(pulumi.StringOutput)
}

// Domain DNS name.
func (o DomaincontrollerOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o DomaincontrollerOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// extra servers. The structure of `extraServer` block is documented below.
func (o DomaincontrollerOutput) ExtraServers() DomaincontrollerExtraServerArrayOutput {
	return o.ApplyT(func(v *Domaincontroller) DomaincontrollerExtraServerArrayOutput { return v.ExtraServers }).(DomaincontrollerExtraServerArrayOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o DomaincontrollerOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Hostname of the server to connect to.
func (o DomaincontrollerOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// Specify outgoing interface to reach server.
func (o DomaincontrollerOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
func (o DomaincontrollerOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

// Domain controller IPv6 address.
func (o DomaincontrollerOutput) Ip6() pulumi.StringOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringOutput { return v.Ip6 }).(pulumi.StringOutput)
}

// Domain controller IP address.
func (o DomaincontrollerOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// LDAP server name.
func (o DomaincontrollerOutput) LdapServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringOutput { return v.LdapServer }).(pulumi.StringOutput)
}

// Domain controller entry name.
func (o DomaincontrollerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Password for specified username.
func (o DomaincontrollerOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Port to be used for communication with the domain controller (default = 445).
func (o DomaincontrollerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Port to be used for communication with the domain controller for replication service. Port number 0 indicates automatic discovery.
func (o DomaincontrollerOutput) ReplicationPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.IntOutput { return v.ReplicationPort }).(pulumi.IntOutput)
}

// FortiGate IPv6 address to be used for communication with the domain controller.
func (o DomaincontrollerOutput) SourceIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringOutput { return v.SourceIp6 }).(pulumi.StringOutput)
}

// FortiGate IPv4 address to be used for communication with the domain controller.
func (o DomaincontrollerOutput) SourceIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringOutput { return v.SourceIpAddress }).(pulumi.StringOutput)
}

// Source port to be used for communication with the domain controller.
func (o DomaincontrollerOutput) SourcePort() pulumi.IntOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.IntOutput { return v.SourcePort }).(pulumi.IntOutput)
}

// User name to sign in with. Must have proper permissions for service.
func (o DomaincontrollerOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o DomaincontrollerOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domaincontroller) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type DomaincontrollerArrayOutput struct{ *pulumi.OutputState }

func (DomaincontrollerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domaincontroller)(nil)).Elem()
}

func (o DomaincontrollerArrayOutput) ToDomaincontrollerArrayOutput() DomaincontrollerArrayOutput {
	return o
}

func (o DomaincontrollerArrayOutput) ToDomaincontrollerArrayOutputWithContext(ctx context.Context) DomaincontrollerArrayOutput {
	return o
}

func (o DomaincontrollerArrayOutput) Index(i pulumi.IntInput) DomaincontrollerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Domaincontroller {
		return vs[0].([]*Domaincontroller)[vs[1].(int)]
	}).(DomaincontrollerOutput)
}

type DomaincontrollerMapOutput struct{ *pulumi.OutputState }

func (DomaincontrollerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domaincontroller)(nil)).Elem()
}

func (o DomaincontrollerMapOutput) ToDomaincontrollerMapOutput() DomaincontrollerMapOutput {
	return o
}

func (o DomaincontrollerMapOutput) ToDomaincontrollerMapOutputWithContext(ctx context.Context) DomaincontrollerMapOutput {
	return o
}

func (o DomaincontrollerMapOutput) MapIndex(k pulumi.StringInput) DomaincontrollerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Domaincontroller {
		return vs[0].(map[string]*Domaincontroller)[vs[1].(string)]
	}).(DomaincontrollerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomaincontrollerInput)(nil)).Elem(), &Domaincontroller{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomaincontrollerArrayInput)(nil)).Elem(), DomaincontrollerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomaincontrollerMapInput)(nil)).Elem(), DomaincontrollerMap{})
	pulumi.RegisterOutputType(DomaincontrollerOutput{})
	pulumi.RegisterOutputType(DomaincontrollerArrayOutput{})
	pulumi.RegisterOutputType(DomaincontrollerMapOutput{})
}
