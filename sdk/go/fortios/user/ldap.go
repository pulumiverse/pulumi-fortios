// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure LDAP server entries.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/user"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := user.NewLdap(ctx, "trname", &user.LdapArgs{
//				AccountKeyFilter:      pulumi.String("(&(userPrincipalName=%s)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))"),
//				AccountKeyProcessing:  pulumi.String("same"),
//				Cnid:                  pulumi.String("cn"),
//				Dn:                    pulumi.String("EIWNCIEW"),
//				GroupMemberCheck:      pulumi.String("user-attr"),
//				GroupObjectFilter:     pulumi.String("(&(objectcategory=group)(member=*))"),
//				MemberAttr:            pulumi.String("memberOf"),
//				PasswordExpiryWarning: pulumi.String("disable"),
//				PasswordRenewal:       pulumi.String("disable"),
//				Port:                  pulumi.Int(389),
//				Secure:                pulumi.String("disable"),
//				Server:                pulumi.String("1.1.1.1"),
//				ServerIdentityCheck:   pulumi.String("disable"),
//				SourceIp:              pulumi.String("0.0.0.0"),
//				SslMinProtoVersion:    pulumi.String("default"),
//				Type:                  pulumi.String("simple"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// User Ldap can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:user/ldap:Ldap labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:user/ldap:Ldap labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Ldap struct {
	pulumi.CustomResourceState

	// Define subject identity field in certificate for user access right checking. Valid values: `othername`, `rfc822name`, `dnsname`.
	AccountKeyCertField pulumi.StringOutput `pulumi:"accountKeyCertField"`
	// Account key filter, using the UPN as the search filter.
	AccountKeyFilter pulumi.StringOutput `pulumi:"accountKeyFilter"`
	// Account key processing operation, either keep or strip domain string of UPN in the token. Valid values: `same`, `strip`.
	AccountKeyProcessing pulumi.StringOutput `pulumi:"accountKeyProcessing"`
	// Define SAN in certificate for user principle name matching. Valid values: `othername`, `rfc822name`, `dnsname`.
	AccountKeyUpnSan pulumi.StringOutput `pulumi:"accountKeyUpnSan"`
	// Enable/disable AntiPhishing credential backend. Valid values: `enable`, `disable`.
	Antiphish pulumi.StringOutput `pulumi:"antiphish"`
	// CA certificate name.
	CaCert pulumi.StringOutput `pulumi:"caCert"`
	// Client certificate name.
	ClientCert pulumi.StringOutput `pulumi:"clientCert"`
	// Enable/disable using client certificate for TLS authentication. Valid values: `enable`, `disable`.
	ClientCertAuth pulumi.StringOutput `pulumi:"clientCertAuth"`
	// Common name identifier for the LDAP server. The common name identifier for most LDAP servers is "cn".
	Cnid pulumi.StringOutput `pulumi:"cnid"`
	// Distinguished name used to look up entries on the LDAP server.
	Dn pulumi.StringOutput `pulumi:"dn"`
	// Filter used for group matching.
	GroupFilter pulumi.StringOutput `pulumi:"groupFilter"`
	// Group member checking methods. Valid values: `user-attr`, `group-object`, `posix-group-object`.
	GroupMemberCheck pulumi.StringOutput `pulumi:"groupMemberCheck"`
	// Filter used for group searching.
	GroupObjectFilter pulumi.StringOutput `pulumi:"groupObjectFilter"`
	// Search base used for group searching.
	GroupSearchBase pulumi.StringOutput `pulumi:"groupSearchBase"`
	// Specify outgoing interface to reach server.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringOutput `pulumi:"interfaceSelectMethod"`
	// Name of attribute from which to get group membership.
	MemberAttr pulumi.StringOutput `pulumi:"memberAttr"`
	// LDAP server entry name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable obtaining of user information. Valid values: `enable`, `disable`.
	ObtainUserInfo pulumi.StringOutput `pulumi:"obtainUserInfo"`
	// Password for initial binding.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Name of attribute to get password hash.
	PasswordAttr pulumi.StringOutput `pulumi:"passwordAttr"`
	// Enable/disable password expiry warnings. Valid values: `enable`, `disable`.
	PasswordExpiryWarning pulumi.StringOutput `pulumi:"passwordExpiryWarning"`
	// Enable/disable online password renewal. Valid values: `enable`, `disable`.
	PasswordRenewal pulumi.StringOutput `pulumi:"passwordRenewal"`
	// Port to be used for communication with the LDAP server (default = 389).
	Port pulumi.IntOutput `pulumi:"port"`
	// Search type. Valid values: `recursive`.
	SearchType pulumi.StringOutput `pulumi:"searchType"`
	// Secondary LDAP server CN domain name or IP.
	SecondaryServer pulumi.StringOutput `pulumi:"secondaryServer"`
	// Port to be used for authentication. Valid values: `disable`, `starttls`, `ldaps`.
	Secure pulumi.StringOutput `pulumi:"secure"`
	// LDAP server CN domain name or IP.
	Server pulumi.StringOutput `pulumi:"server"`
	// Enable/disable LDAP server identity check (verify server domain name/IP address against the server certificate). Valid values: `enable`, `disable`.
	ServerIdentityCheck pulumi.StringOutput `pulumi:"serverIdentityCheck"`
	// Source IP for communications to LDAP server.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Source port to be used for communication with the LDAP server.
	SourcePort pulumi.IntOutput `pulumi:"sourcePort"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion pulumi.StringOutput `pulumi:"sslMinProtoVersion"`
	// Tertiary LDAP server CN domain name or IP.
	TertiaryServer pulumi.StringOutput `pulumi:"tertiaryServer"`
	// Enable/disable two-factor authentication. Valid values: `disable`, `fortitoken-cloud`.
	TwoFactor pulumi.StringOutput `pulumi:"twoFactor"`
	// Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
	TwoFactorAuthentication pulumi.StringOutput `pulumi:"twoFactorAuthentication"`
	// Filter used to synchronize users to FortiToken Cloud.
	TwoFactorFilter pulumi.StringOutput `pulumi:"twoFactorFilter"`
	// Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
	TwoFactorNotification pulumi.StringOutput `pulumi:"twoFactorNotification"`
	// Authentication type for LDAP searches. Valid values: `simple`, `anonymous`, `regular`.
	Type pulumi.StringOutput `pulumi:"type"`
	// MS Exchange server from which to fetch user information.
	UserInfoExchangeServer pulumi.StringOutput `pulumi:"userInfoExchangeServer"`
	// Username (full DN) for initial binding.
	Username pulumi.StringOutput `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewLdap registers a new resource with the given unique name, arguments, and options.
func NewLdap(ctx *pulumi.Context,
	name string, args *LdapArgs, opts ...pulumi.ResourceOption) (*Ldap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dn == nil {
		return nil, errors.New("invalid value for required argument 'Dn'")
	}
	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ldap
	err := ctx.RegisterResource("fortios:user/ldap:Ldap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLdap gets an existing Ldap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLdap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LdapState, opts ...pulumi.ResourceOption) (*Ldap, error) {
	var resource Ldap
	err := ctx.ReadResource("fortios:user/ldap:Ldap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ldap resources.
type ldapState struct {
	// Define subject identity field in certificate for user access right checking. Valid values: `othername`, `rfc822name`, `dnsname`.
	AccountKeyCertField *string `pulumi:"accountKeyCertField"`
	// Account key filter, using the UPN as the search filter.
	AccountKeyFilter *string `pulumi:"accountKeyFilter"`
	// Account key processing operation, either keep or strip domain string of UPN in the token. Valid values: `same`, `strip`.
	AccountKeyProcessing *string `pulumi:"accountKeyProcessing"`
	// Define SAN in certificate for user principle name matching. Valid values: `othername`, `rfc822name`, `dnsname`.
	AccountKeyUpnSan *string `pulumi:"accountKeyUpnSan"`
	// Enable/disable AntiPhishing credential backend. Valid values: `enable`, `disable`.
	Antiphish *string `pulumi:"antiphish"`
	// CA certificate name.
	CaCert *string `pulumi:"caCert"`
	// Client certificate name.
	ClientCert *string `pulumi:"clientCert"`
	// Enable/disable using client certificate for TLS authentication. Valid values: `enable`, `disable`.
	ClientCertAuth *string `pulumi:"clientCertAuth"`
	// Common name identifier for the LDAP server. The common name identifier for most LDAP servers is "cn".
	Cnid *string `pulumi:"cnid"`
	// Distinguished name used to look up entries on the LDAP server.
	Dn *string `pulumi:"dn"`
	// Filter used for group matching.
	GroupFilter *string `pulumi:"groupFilter"`
	// Group member checking methods. Valid values: `user-attr`, `group-object`, `posix-group-object`.
	GroupMemberCheck *string `pulumi:"groupMemberCheck"`
	// Filter used for group searching.
	GroupObjectFilter *string `pulumi:"groupObjectFilter"`
	// Search base used for group searching.
	GroupSearchBase *string `pulumi:"groupSearchBase"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Name of attribute from which to get group membership.
	MemberAttr *string `pulumi:"memberAttr"`
	// LDAP server entry name.
	Name *string `pulumi:"name"`
	// Enable/disable obtaining of user information. Valid values: `enable`, `disable`.
	ObtainUserInfo *string `pulumi:"obtainUserInfo"`
	// Password for initial binding.
	Password *string `pulumi:"password"`
	// Name of attribute to get password hash.
	PasswordAttr *string `pulumi:"passwordAttr"`
	// Enable/disable password expiry warnings. Valid values: `enable`, `disable`.
	PasswordExpiryWarning *string `pulumi:"passwordExpiryWarning"`
	// Enable/disable online password renewal. Valid values: `enable`, `disable`.
	PasswordRenewal *string `pulumi:"passwordRenewal"`
	// Port to be used for communication with the LDAP server (default = 389).
	Port *int `pulumi:"port"`
	// Search type. Valid values: `recursive`.
	SearchType *string `pulumi:"searchType"`
	// Secondary LDAP server CN domain name or IP.
	SecondaryServer *string `pulumi:"secondaryServer"`
	// Port to be used for authentication. Valid values: `disable`, `starttls`, `ldaps`.
	Secure *string `pulumi:"secure"`
	// LDAP server CN domain name or IP.
	Server *string `pulumi:"server"`
	// Enable/disable LDAP server identity check (verify server domain name/IP address against the server certificate). Valid values: `enable`, `disable`.
	ServerIdentityCheck *string `pulumi:"serverIdentityCheck"`
	// Source IP for communications to LDAP server.
	SourceIp *string `pulumi:"sourceIp"`
	// Source port to be used for communication with the LDAP server.
	SourcePort *int `pulumi:"sourcePort"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion *string `pulumi:"sslMinProtoVersion"`
	// Tertiary LDAP server CN domain name or IP.
	TertiaryServer *string `pulumi:"tertiaryServer"`
	// Enable/disable two-factor authentication. Valid values: `disable`, `fortitoken-cloud`.
	TwoFactor *string `pulumi:"twoFactor"`
	// Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
	TwoFactorAuthentication *string `pulumi:"twoFactorAuthentication"`
	// Filter used to synchronize users to FortiToken Cloud.
	TwoFactorFilter *string `pulumi:"twoFactorFilter"`
	// Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
	TwoFactorNotification *string `pulumi:"twoFactorNotification"`
	// Authentication type for LDAP searches. Valid values: `simple`, `anonymous`, `regular`.
	Type *string `pulumi:"type"`
	// MS Exchange server from which to fetch user information.
	UserInfoExchangeServer *string `pulumi:"userInfoExchangeServer"`
	// Username (full DN) for initial binding.
	Username *string `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type LdapState struct {
	// Define subject identity field in certificate for user access right checking. Valid values: `othername`, `rfc822name`, `dnsname`.
	AccountKeyCertField pulumi.StringPtrInput
	// Account key filter, using the UPN as the search filter.
	AccountKeyFilter pulumi.StringPtrInput
	// Account key processing operation, either keep or strip domain string of UPN in the token. Valid values: `same`, `strip`.
	AccountKeyProcessing pulumi.StringPtrInput
	// Define SAN in certificate for user principle name matching. Valid values: `othername`, `rfc822name`, `dnsname`.
	AccountKeyUpnSan pulumi.StringPtrInput
	// Enable/disable AntiPhishing credential backend. Valid values: `enable`, `disable`.
	Antiphish pulumi.StringPtrInput
	// CA certificate name.
	CaCert pulumi.StringPtrInput
	// Client certificate name.
	ClientCert pulumi.StringPtrInput
	// Enable/disable using client certificate for TLS authentication. Valid values: `enable`, `disable`.
	ClientCertAuth pulumi.StringPtrInput
	// Common name identifier for the LDAP server. The common name identifier for most LDAP servers is "cn".
	Cnid pulumi.StringPtrInput
	// Distinguished name used to look up entries on the LDAP server.
	Dn pulumi.StringPtrInput
	// Filter used for group matching.
	GroupFilter pulumi.StringPtrInput
	// Group member checking methods. Valid values: `user-attr`, `group-object`, `posix-group-object`.
	GroupMemberCheck pulumi.StringPtrInput
	// Filter used for group searching.
	GroupObjectFilter pulumi.StringPtrInput
	// Search base used for group searching.
	GroupSearchBase pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Name of attribute from which to get group membership.
	MemberAttr pulumi.StringPtrInput
	// LDAP server entry name.
	Name pulumi.StringPtrInput
	// Enable/disable obtaining of user information. Valid values: `enable`, `disable`.
	ObtainUserInfo pulumi.StringPtrInput
	// Password for initial binding.
	Password pulumi.StringPtrInput
	// Name of attribute to get password hash.
	PasswordAttr pulumi.StringPtrInput
	// Enable/disable password expiry warnings. Valid values: `enable`, `disable`.
	PasswordExpiryWarning pulumi.StringPtrInput
	// Enable/disable online password renewal. Valid values: `enable`, `disable`.
	PasswordRenewal pulumi.StringPtrInput
	// Port to be used for communication with the LDAP server (default = 389).
	Port pulumi.IntPtrInput
	// Search type. Valid values: `recursive`.
	SearchType pulumi.StringPtrInput
	// Secondary LDAP server CN domain name or IP.
	SecondaryServer pulumi.StringPtrInput
	// Port to be used for authentication. Valid values: `disable`, `starttls`, `ldaps`.
	Secure pulumi.StringPtrInput
	// LDAP server CN domain name or IP.
	Server pulumi.StringPtrInput
	// Enable/disable LDAP server identity check (verify server domain name/IP address against the server certificate). Valid values: `enable`, `disable`.
	ServerIdentityCheck pulumi.StringPtrInput
	// Source IP for communications to LDAP server.
	SourceIp pulumi.StringPtrInput
	// Source port to be used for communication with the LDAP server.
	SourcePort pulumi.IntPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion pulumi.StringPtrInput
	// Tertiary LDAP server CN domain name or IP.
	TertiaryServer pulumi.StringPtrInput
	// Enable/disable two-factor authentication. Valid values: `disable`, `fortitoken-cloud`.
	TwoFactor pulumi.StringPtrInput
	// Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
	TwoFactorAuthentication pulumi.StringPtrInput
	// Filter used to synchronize users to FortiToken Cloud.
	TwoFactorFilter pulumi.StringPtrInput
	// Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
	TwoFactorNotification pulumi.StringPtrInput
	// Authentication type for LDAP searches. Valid values: `simple`, `anonymous`, `regular`.
	Type pulumi.StringPtrInput
	// MS Exchange server from which to fetch user information.
	UserInfoExchangeServer pulumi.StringPtrInput
	// Username (full DN) for initial binding.
	Username pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (LdapState) ElementType() reflect.Type {
	return reflect.TypeOf((*ldapState)(nil)).Elem()
}

type ldapArgs struct {
	// Define subject identity field in certificate for user access right checking. Valid values: `othername`, `rfc822name`, `dnsname`.
	AccountKeyCertField *string `pulumi:"accountKeyCertField"`
	// Account key filter, using the UPN as the search filter.
	AccountKeyFilter *string `pulumi:"accountKeyFilter"`
	// Account key processing operation, either keep or strip domain string of UPN in the token. Valid values: `same`, `strip`.
	AccountKeyProcessing *string `pulumi:"accountKeyProcessing"`
	// Define SAN in certificate for user principle name matching. Valid values: `othername`, `rfc822name`, `dnsname`.
	AccountKeyUpnSan *string `pulumi:"accountKeyUpnSan"`
	// Enable/disable AntiPhishing credential backend. Valid values: `enable`, `disable`.
	Antiphish *string `pulumi:"antiphish"`
	// CA certificate name.
	CaCert *string `pulumi:"caCert"`
	// Client certificate name.
	ClientCert *string `pulumi:"clientCert"`
	// Enable/disable using client certificate for TLS authentication. Valid values: `enable`, `disable`.
	ClientCertAuth *string `pulumi:"clientCertAuth"`
	// Common name identifier for the LDAP server. The common name identifier for most LDAP servers is "cn".
	Cnid *string `pulumi:"cnid"`
	// Distinguished name used to look up entries on the LDAP server.
	Dn string `pulumi:"dn"`
	// Filter used for group matching.
	GroupFilter *string `pulumi:"groupFilter"`
	// Group member checking methods. Valid values: `user-attr`, `group-object`, `posix-group-object`.
	GroupMemberCheck *string `pulumi:"groupMemberCheck"`
	// Filter used for group searching.
	GroupObjectFilter *string `pulumi:"groupObjectFilter"`
	// Search base used for group searching.
	GroupSearchBase *string `pulumi:"groupSearchBase"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Name of attribute from which to get group membership.
	MemberAttr *string `pulumi:"memberAttr"`
	// LDAP server entry name.
	Name *string `pulumi:"name"`
	// Enable/disable obtaining of user information. Valid values: `enable`, `disable`.
	ObtainUserInfo *string `pulumi:"obtainUserInfo"`
	// Password for initial binding.
	Password *string `pulumi:"password"`
	// Name of attribute to get password hash.
	PasswordAttr *string `pulumi:"passwordAttr"`
	// Enable/disable password expiry warnings. Valid values: `enable`, `disable`.
	PasswordExpiryWarning *string `pulumi:"passwordExpiryWarning"`
	// Enable/disable online password renewal. Valid values: `enable`, `disable`.
	PasswordRenewal *string `pulumi:"passwordRenewal"`
	// Port to be used for communication with the LDAP server (default = 389).
	Port *int `pulumi:"port"`
	// Search type. Valid values: `recursive`.
	SearchType *string `pulumi:"searchType"`
	// Secondary LDAP server CN domain name or IP.
	SecondaryServer *string `pulumi:"secondaryServer"`
	// Port to be used for authentication. Valid values: `disable`, `starttls`, `ldaps`.
	Secure *string `pulumi:"secure"`
	// LDAP server CN domain name or IP.
	Server string `pulumi:"server"`
	// Enable/disable LDAP server identity check (verify server domain name/IP address against the server certificate). Valid values: `enable`, `disable`.
	ServerIdentityCheck *string `pulumi:"serverIdentityCheck"`
	// Source IP for communications to LDAP server.
	SourceIp *string `pulumi:"sourceIp"`
	// Source port to be used for communication with the LDAP server.
	SourcePort *int `pulumi:"sourcePort"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion *string `pulumi:"sslMinProtoVersion"`
	// Tertiary LDAP server CN domain name or IP.
	TertiaryServer *string `pulumi:"tertiaryServer"`
	// Enable/disable two-factor authentication. Valid values: `disable`, `fortitoken-cloud`.
	TwoFactor *string `pulumi:"twoFactor"`
	// Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
	TwoFactorAuthentication *string `pulumi:"twoFactorAuthentication"`
	// Filter used to synchronize users to FortiToken Cloud.
	TwoFactorFilter *string `pulumi:"twoFactorFilter"`
	// Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
	TwoFactorNotification *string `pulumi:"twoFactorNotification"`
	// Authentication type for LDAP searches. Valid values: `simple`, `anonymous`, `regular`.
	Type *string `pulumi:"type"`
	// MS Exchange server from which to fetch user information.
	UserInfoExchangeServer *string `pulumi:"userInfoExchangeServer"`
	// Username (full DN) for initial binding.
	Username *string `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Ldap resource.
type LdapArgs struct {
	// Define subject identity field in certificate for user access right checking. Valid values: `othername`, `rfc822name`, `dnsname`.
	AccountKeyCertField pulumi.StringPtrInput
	// Account key filter, using the UPN as the search filter.
	AccountKeyFilter pulumi.StringPtrInput
	// Account key processing operation, either keep or strip domain string of UPN in the token. Valid values: `same`, `strip`.
	AccountKeyProcessing pulumi.StringPtrInput
	// Define SAN in certificate for user principle name matching. Valid values: `othername`, `rfc822name`, `dnsname`.
	AccountKeyUpnSan pulumi.StringPtrInput
	// Enable/disable AntiPhishing credential backend. Valid values: `enable`, `disable`.
	Antiphish pulumi.StringPtrInput
	// CA certificate name.
	CaCert pulumi.StringPtrInput
	// Client certificate name.
	ClientCert pulumi.StringPtrInput
	// Enable/disable using client certificate for TLS authentication. Valid values: `enable`, `disable`.
	ClientCertAuth pulumi.StringPtrInput
	// Common name identifier for the LDAP server. The common name identifier for most LDAP servers is "cn".
	Cnid pulumi.StringPtrInput
	// Distinguished name used to look up entries on the LDAP server.
	Dn pulumi.StringInput
	// Filter used for group matching.
	GroupFilter pulumi.StringPtrInput
	// Group member checking methods. Valid values: `user-attr`, `group-object`, `posix-group-object`.
	GroupMemberCheck pulumi.StringPtrInput
	// Filter used for group searching.
	GroupObjectFilter pulumi.StringPtrInput
	// Search base used for group searching.
	GroupSearchBase pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Name of attribute from which to get group membership.
	MemberAttr pulumi.StringPtrInput
	// LDAP server entry name.
	Name pulumi.StringPtrInput
	// Enable/disable obtaining of user information. Valid values: `enable`, `disable`.
	ObtainUserInfo pulumi.StringPtrInput
	// Password for initial binding.
	Password pulumi.StringPtrInput
	// Name of attribute to get password hash.
	PasswordAttr pulumi.StringPtrInput
	// Enable/disable password expiry warnings. Valid values: `enable`, `disable`.
	PasswordExpiryWarning pulumi.StringPtrInput
	// Enable/disable online password renewal. Valid values: `enable`, `disable`.
	PasswordRenewal pulumi.StringPtrInput
	// Port to be used for communication with the LDAP server (default = 389).
	Port pulumi.IntPtrInput
	// Search type. Valid values: `recursive`.
	SearchType pulumi.StringPtrInput
	// Secondary LDAP server CN domain name or IP.
	SecondaryServer pulumi.StringPtrInput
	// Port to be used for authentication. Valid values: `disable`, `starttls`, `ldaps`.
	Secure pulumi.StringPtrInput
	// LDAP server CN domain name or IP.
	Server pulumi.StringInput
	// Enable/disable LDAP server identity check (verify server domain name/IP address against the server certificate). Valid values: `enable`, `disable`.
	ServerIdentityCheck pulumi.StringPtrInput
	// Source IP for communications to LDAP server.
	SourceIp pulumi.StringPtrInput
	// Source port to be used for communication with the LDAP server.
	SourcePort pulumi.IntPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion pulumi.StringPtrInput
	// Tertiary LDAP server CN domain name or IP.
	TertiaryServer pulumi.StringPtrInput
	// Enable/disable two-factor authentication. Valid values: `disable`, `fortitoken-cloud`.
	TwoFactor pulumi.StringPtrInput
	// Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
	TwoFactorAuthentication pulumi.StringPtrInput
	// Filter used to synchronize users to FortiToken Cloud.
	TwoFactorFilter pulumi.StringPtrInput
	// Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
	TwoFactorNotification pulumi.StringPtrInput
	// Authentication type for LDAP searches. Valid values: `simple`, `anonymous`, `regular`.
	Type pulumi.StringPtrInput
	// MS Exchange server from which to fetch user information.
	UserInfoExchangeServer pulumi.StringPtrInput
	// Username (full DN) for initial binding.
	Username pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (LdapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ldapArgs)(nil)).Elem()
}

type LdapInput interface {
	pulumi.Input

	ToLdapOutput() LdapOutput
	ToLdapOutputWithContext(ctx context.Context) LdapOutput
}

func (*Ldap) ElementType() reflect.Type {
	return reflect.TypeOf((**Ldap)(nil)).Elem()
}

func (i *Ldap) ToLdapOutput() LdapOutput {
	return i.ToLdapOutputWithContext(context.Background())
}

func (i *Ldap) ToLdapOutputWithContext(ctx context.Context) LdapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LdapOutput)
}

// LdapArrayInput is an input type that accepts LdapArray and LdapArrayOutput values.
// You can construct a concrete instance of `LdapArrayInput` via:
//
//	LdapArray{ LdapArgs{...} }
type LdapArrayInput interface {
	pulumi.Input

	ToLdapArrayOutput() LdapArrayOutput
	ToLdapArrayOutputWithContext(context.Context) LdapArrayOutput
}

type LdapArray []LdapInput

func (LdapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ldap)(nil)).Elem()
}

func (i LdapArray) ToLdapArrayOutput() LdapArrayOutput {
	return i.ToLdapArrayOutputWithContext(context.Background())
}

func (i LdapArray) ToLdapArrayOutputWithContext(ctx context.Context) LdapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LdapArrayOutput)
}

// LdapMapInput is an input type that accepts LdapMap and LdapMapOutput values.
// You can construct a concrete instance of `LdapMapInput` via:
//
//	LdapMap{ "key": LdapArgs{...} }
type LdapMapInput interface {
	pulumi.Input

	ToLdapMapOutput() LdapMapOutput
	ToLdapMapOutputWithContext(context.Context) LdapMapOutput
}

type LdapMap map[string]LdapInput

func (LdapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ldap)(nil)).Elem()
}

func (i LdapMap) ToLdapMapOutput() LdapMapOutput {
	return i.ToLdapMapOutputWithContext(context.Background())
}

func (i LdapMap) ToLdapMapOutputWithContext(ctx context.Context) LdapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LdapMapOutput)
}

type LdapOutput struct{ *pulumi.OutputState }

func (LdapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ldap)(nil)).Elem()
}

func (o LdapOutput) ToLdapOutput() LdapOutput {
	return o
}

func (o LdapOutput) ToLdapOutputWithContext(ctx context.Context) LdapOutput {
	return o
}

// Define subject identity field in certificate for user access right checking. Valid values: `othername`, `rfc822name`, `dnsname`.
func (o LdapOutput) AccountKeyCertField() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.AccountKeyCertField }).(pulumi.StringOutput)
}

// Account key filter, using the UPN as the search filter.
func (o LdapOutput) AccountKeyFilter() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.AccountKeyFilter }).(pulumi.StringOutput)
}

// Account key processing operation, either keep or strip domain string of UPN in the token. Valid values: `same`, `strip`.
func (o LdapOutput) AccountKeyProcessing() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.AccountKeyProcessing }).(pulumi.StringOutput)
}

// Define SAN in certificate for user principle name matching. Valid values: `othername`, `rfc822name`, `dnsname`.
func (o LdapOutput) AccountKeyUpnSan() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.AccountKeyUpnSan }).(pulumi.StringOutput)
}

// Enable/disable AntiPhishing credential backend. Valid values: `enable`, `disable`.
func (o LdapOutput) Antiphish() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.Antiphish }).(pulumi.StringOutput)
}

// CA certificate name.
func (o LdapOutput) CaCert() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.CaCert }).(pulumi.StringOutput)
}

// Client certificate name.
func (o LdapOutput) ClientCert() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.ClientCert }).(pulumi.StringOutput)
}

// Enable/disable using client certificate for TLS authentication. Valid values: `enable`, `disable`.
func (o LdapOutput) ClientCertAuth() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.ClientCertAuth }).(pulumi.StringOutput)
}

// Common name identifier for the LDAP server. The common name identifier for most LDAP servers is "cn".
func (o LdapOutput) Cnid() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.Cnid }).(pulumi.StringOutput)
}

// Distinguished name used to look up entries on the LDAP server.
func (o LdapOutput) Dn() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.Dn }).(pulumi.StringOutput)
}

// Filter used for group matching.
func (o LdapOutput) GroupFilter() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.GroupFilter }).(pulumi.StringOutput)
}

// Group member checking methods. Valid values: `user-attr`, `group-object`, `posix-group-object`.
func (o LdapOutput) GroupMemberCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.GroupMemberCheck }).(pulumi.StringOutput)
}

// Filter used for group searching.
func (o LdapOutput) GroupObjectFilter() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.GroupObjectFilter }).(pulumi.StringOutput)
}

// Search base used for group searching.
func (o LdapOutput) GroupSearchBase() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.GroupSearchBase }).(pulumi.StringOutput)
}

// Specify outgoing interface to reach server.
func (o LdapOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
func (o LdapOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

// Name of attribute from which to get group membership.
func (o LdapOutput) MemberAttr() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.MemberAttr }).(pulumi.StringOutput)
}

// LDAP server entry name.
func (o LdapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable obtaining of user information. Valid values: `enable`, `disable`.
func (o LdapOutput) ObtainUserInfo() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.ObtainUserInfo }).(pulumi.StringOutput)
}

// Password for initial binding.
func (o LdapOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Name of attribute to get password hash.
func (o LdapOutput) PasswordAttr() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.PasswordAttr }).(pulumi.StringOutput)
}

// Enable/disable password expiry warnings. Valid values: `enable`, `disable`.
func (o LdapOutput) PasswordExpiryWarning() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.PasswordExpiryWarning }).(pulumi.StringOutput)
}

// Enable/disable online password renewal. Valid values: `enable`, `disable`.
func (o LdapOutput) PasswordRenewal() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.PasswordRenewal }).(pulumi.StringOutput)
}

// Port to be used for communication with the LDAP server (default = 389).
func (o LdapOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Ldap) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Search type. Valid values: `recursive`.
func (o LdapOutput) SearchType() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.SearchType }).(pulumi.StringOutput)
}

// Secondary LDAP server CN domain name or IP.
func (o LdapOutput) SecondaryServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.SecondaryServer }).(pulumi.StringOutput)
}

// Port to be used for authentication. Valid values: `disable`, `starttls`, `ldaps`.
func (o LdapOutput) Secure() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.Secure }).(pulumi.StringOutput)
}

// LDAP server CN domain name or IP.
func (o LdapOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// Enable/disable LDAP server identity check (verify server domain name/IP address against the server certificate). Valid values: `enable`, `disable`.
func (o LdapOutput) ServerIdentityCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.ServerIdentityCheck }).(pulumi.StringOutput)
}

// Source IP for communications to LDAP server.
func (o LdapOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// Source port to be used for communication with the LDAP server.
func (o LdapOutput) SourcePort() pulumi.IntOutput {
	return o.ApplyT(func(v *Ldap) pulumi.IntOutput { return v.SourcePort }).(pulumi.IntOutput)
}

// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
func (o LdapOutput) SslMinProtoVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.SslMinProtoVersion }).(pulumi.StringOutput)
}

// Tertiary LDAP server CN domain name or IP.
func (o LdapOutput) TertiaryServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.TertiaryServer }).(pulumi.StringOutput)
}

// Enable/disable two-factor authentication. Valid values: `disable`, `fortitoken-cloud`.
func (o LdapOutput) TwoFactor() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.TwoFactor }).(pulumi.StringOutput)
}

// Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
func (o LdapOutput) TwoFactorAuthentication() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.TwoFactorAuthentication }).(pulumi.StringOutput)
}

// Filter used to synchronize users to FortiToken Cloud.
func (o LdapOutput) TwoFactorFilter() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.TwoFactorFilter }).(pulumi.StringOutput)
}

// Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
func (o LdapOutput) TwoFactorNotification() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.TwoFactorNotification }).(pulumi.StringOutput)
}

// Authentication type for LDAP searches. Valid values: `simple`, `anonymous`, `regular`.
func (o LdapOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// MS Exchange server from which to fetch user information.
func (o LdapOutput) UserInfoExchangeServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.UserInfoExchangeServer }).(pulumi.StringOutput)
}

// Username (full DN) for initial binding.
func (o LdapOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o LdapOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ldap) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type LdapArrayOutput struct{ *pulumi.OutputState }

func (LdapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ldap)(nil)).Elem()
}

func (o LdapArrayOutput) ToLdapArrayOutput() LdapArrayOutput {
	return o
}

func (o LdapArrayOutput) ToLdapArrayOutputWithContext(ctx context.Context) LdapArrayOutput {
	return o
}

func (o LdapArrayOutput) Index(i pulumi.IntInput) LdapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ldap {
		return vs[0].([]*Ldap)[vs[1].(int)]
	}).(LdapOutput)
}

type LdapMapOutput struct{ *pulumi.OutputState }

func (LdapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ldap)(nil)).Elem()
}

func (o LdapMapOutput) ToLdapMapOutput() LdapMapOutput {
	return o
}

func (o LdapMapOutput) ToLdapMapOutputWithContext(ctx context.Context) LdapMapOutput {
	return o
}

func (o LdapMapOutput) MapIndex(k pulumi.StringInput) LdapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ldap {
		return vs[0].(map[string]*Ldap)[vs[1].(string)]
	}).(LdapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LdapInput)(nil)).Elem(), &Ldap{})
	pulumi.RegisterInputType(reflect.TypeOf((*LdapArrayInput)(nil)).Elem(), LdapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LdapMapInput)(nil)).Elem(), LdapMap{})
	pulumi.RegisterOutputType(LdapOutput{})
	pulumi.RegisterOutputType(LdapArrayOutput{})
	pulumi.RegisterOutputType(LdapMapOutput{})
}
