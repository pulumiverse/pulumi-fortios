// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure user password policy.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/user"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := user.NewPasswordpolicy(ctx, "trname", &user.PasswordpolicyArgs{
//				ExpireDays: pulumi.Int(22),
//				WarnDays:   pulumi.Int(13),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// User PasswordPolicy can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:user/passwordpolicy:Passwordpolicy labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:user/passwordpolicy:Passwordpolicy labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Passwordpolicy struct {
	pulumi.CustomResourceState

	// Time in days before the user's password expires.
	ExpireDays pulumi.IntOutput `pulumi:"expireDays"`
	// Enable/disable password expiration. Valid values: `enable`, `disable`.
	ExpireStatus pulumi.StringOutput `pulumi:"expireStatus"`
	// Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
	ExpiredPasswordRenewal pulumi.StringOutput `pulumi:"expiredPasswordRenewal"`
	// Minimum number of unique characters in new password which do not exist in old password (0 - 128, default = 0. This attribute overrides reuse-password if both are enabled).
	MinChangeCharacters pulumi.IntOutput `pulumi:"minChangeCharacters"`
	// Minimum number of lowercase characters in password (0 - 128, default = 0).
	MinLowerCaseLetter pulumi.IntOutput `pulumi:"minLowerCaseLetter"`
	// Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
	MinNonAlphanumeric pulumi.IntOutput `pulumi:"minNonAlphanumeric"`
	// Minimum number of numeric characters in password (0 - 128, default = 0).
	MinNumber pulumi.IntOutput `pulumi:"minNumber"`
	// Minimum number of uppercase characters in password (0 - 128, default = 0).
	MinUpperCaseLetter pulumi.IntOutput `pulumi:"minUpperCaseLetter"`
	// Minimum password length (8 - 128, default = 8).
	MinimumLength pulumi.IntOutput `pulumi:"minimumLength"`
	// Password policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable reuse of password. If both reuse-password and min-change-characters are enabled, min-change-characters overrides. Valid values: `enable`, `disable`.
	ReusePassword pulumi.StringOutput `pulumi:"reusePassword"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Time in days before a password expiration warning message is displayed to the user upon login.
	WarnDays pulumi.IntOutput `pulumi:"warnDays"`
}

// NewPasswordpolicy registers a new resource with the given unique name, arguments, and options.
func NewPasswordpolicy(ctx *pulumi.Context,
	name string, args *PasswordpolicyArgs, opts ...pulumi.ResourceOption) (*Passwordpolicy, error) {
	if args == nil {
		args = &PasswordpolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Passwordpolicy
	err := ctx.RegisterResource("fortios:user/passwordpolicy:Passwordpolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPasswordpolicy gets an existing Passwordpolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPasswordpolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PasswordpolicyState, opts ...pulumi.ResourceOption) (*Passwordpolicy, error) {
	var resource Passwordpolicy
	err := ctx.ReadResource("fortios:user/passwordpolicy:Passwordpolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Passwordpolicy resources.
type passwordpolicyState struct {
	// Time in days before the user's password expires.
	ExpireDays *int `pulumi:"expireDays"`
	// Enable/disable password expiration. Valid values: `enable`, `disable`.
	ExpireStatus *string `pulumi:"expireStatus"`
	// Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
	ExpiredPasswordRenewal *string `pulumi:"expiredPasswordRenewal"`
	// Minimum number of unique characters in new password which do not exist in old password (0 - 128, default = 0. This attribute overrides reuse-password if both are enabled).
	MinChangeCharacters *int `pulumi:"minChangeCharacters"`
	// Minimum number of lowercase characters in password (0 - 128, default = 0).
	MinLowerCaseLetter *int `pulumi:"minLowerCaseLetter"`
	// Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
	MinNonAlphanumeric *int `pulumi:"minNonAlphanumeric"`
	// Minimum number of numeric characters in password (0 - 128, default = 0).
	MinNumber *int `pulumi:"minNumber"`
	// Minimum number of uppercase characters in password (0 - 128, default = 0).
	MinUpperCaseLetter *int `pulumi:"minUpperCaseLetter"`
	// Minimum password length (8 - 128, default = 8).
	MinimumLength *int `pulumi:"minimumLength"`
	// Password policy name.
	Name *string `pulumi:"name"`
	// Enable/disable reuse of password. If both reuse-password and min-change-characters are enabled, min-change-characters overrides. Valid values: `enable`, `disable`.
	ReusePassword *string `pulumi:"reusePassword"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Time in days before a password expiration warning message is displayed to the user upon login.
	WarnDays *int `pulumi:"warnDays"`
}

type PasswordpolicyState struct {
	// Time in days before the user's password expires.
	ExpireDays pulumi.IntPtrInput
	// Enable/disable password expiration. Valid values: `enable`, `disable`.
	ExpireStatus pulumi.StringPtrInput
	// Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
	ExpiredPasswordRenewal pulumi.StringPtrInput
	// Minimum number of unique characters in new password which do not exist in old password (0 - 128, default = 0. This attribute overrides reuse-password if both are enabled).
	MinChangeCharacters pulumi.IntPtrInput
	// Minimum number of lowercase characters in password (0 - 128, default = 0).
	MinLowerCaseLetter pulumi.IntPtrInput
	// Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
	MinNonAlphanumeric pulumi.IntPtrInput
	// Minimum number of numeric characters in password (0 - 128, default = 0).
	MinNumber pulumi.IntPtrInput
	// Minimum number of uppercase characters in password (0 - 128, default = 0).
	MinUpperCaseLetter pulumi.IntPtrInput
	// Minimum password length (8 - 128, default = 8).
	MinimumLength pulumi.IntPtrInput
	// Password policy name.
	Name pulumi.StringPtrInput
	// Enable/disable reuse of password. If both reuse-password and min-change-characters are enabled, min-change-characters overrides. Valid values: `enable`, `disable`.
	ReusePassword pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Time in days before a password expiration warning message is displayed to the user upon login.
	WarnDays pulumi.IntPtrInput
}

func (PasswordpolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordpolicyState)(nil)).Elem()
}

type passwordpolicyArgs struct {
	// Time in days before the user's password expires.
	ExpireDays *int `pulumi:"expireDays"`
	// Enable/disable password expiration. Valid values: `enable`, `disable`.
	ExpireStatus *string `pulumi:"expireStatus"`
	// Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
	ExpiredPasswordRenewal *string `pulumi:"expiredPasswordRenewal"`
	// Minimum number of unique characters in new password which do not exist in old password (0 - 128, default = 0. This attribute overrides reuse-password if both are enabled).
	MinChangeCharacters *int `pulumi:"minChangeCharacters"`
	// Minimum number of lowercase characters in password (0 - 128, default = 0).
	MinLowerCaseLetter *int `pulumi:"minLowerCaseLetter"`
	// Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
	MinNonAlphanumeric *int `pulumi:"minNonAlphanumeric"`
	// Minimum number of numeric characters in password (0 - 128, default = 0).
	MinNumber *int `pulumi:"minNumber"`
	// Minimum number of uppercase characters in password (0 - 128, default = 0).
	MinUpperCaseLetter *int `pulumi:"minUpperCaseLetter"`
	// Minimum password length (8 - 128, default = 8).
	MinimumLength *int `pulumi:"minimumLength"`
	// Password policy name.
	Name *string `pulumi:"name"`
	// Enable/disable reuse of password. If both reuse-password and min-change-characters are enabled, min-change-characters overrides. Valid values: `enable`, `disable`.
	ReusePassword *string `pulumi:"reusePassword"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Time in days before a password expiration warning message is displayed to the user upon login.
	WarnDays *int `pulumi:"warnDays"`
}

// The set of arguments for constructing a Passwordpolicy resource.
type PasswordpolicyArgs struct {
	// Time in days before the user's password expires.
	ExpireDays pulumi.IntPtrInput
	// Enable/disable password expiration. Valid values: `enable`, `disable`.
	ExpireStatus pulumi.StringPtrInput
	// Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
	ExpiredPasswordRenewal pulumi.StringPtrInput
	// Minimum number of unique characters in new password which do not exist in old password (0 - 128, default = 0. This attribute overrides reuse-password if both are enabled).
	MinChangeCharacters pulumi.IntPtrInput
	// Minimum number of lowercase characters in password (0 - 128, default = 0).
	MinLowerCaseLetter pulumi.IntPtrInput
	// Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
	MinNonAlphanumeric pulumi.IntPtrInput
	// Minimum number of numeric characters in password (0 - 128, default = 0).
	MinNumber pulumi.IntPtrInput
	// Minimum number of uppercase characters in password (0 - 128, default = 0).
	MinUpperCaseLetter pulumi.IntPtrInput
	// Minimum password length (8 - 128, default = 8).
	MinimumLength pulumi.IntPtrInput
	// Password policy name.
	Name pulumi.StringPtrInput
	// Enable/disable reuse of password. If both reuse-password and min-change-characters are enabled, min-change-characters overrides. Valid values: `enable`, `disable`.
	ReusePassword pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Time in days before a password expiration warning message is displayed to the user upon login.
	WarnDays pulumi.IntPtrInput
}

func (PasswordpolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordpolicyArgs)(nil)).Elem()
}

type PasswordpolicyInput interface {
	pulumi.Input

	ToPasswordpolicyOutput() PasswordpolicyOutput
	ToPasswordpolicyOutputWithContext(ctx context.Context) PasswordpolicyOutput
}

func (*Passwordpolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**Passwordpolicy)(nil)).Elem()
}

func (i *Passwordpolicy) ToPasswordpolicyOutput() PasswordpolicyOutput {
	return i.ToPasswordpolicyOutputWithContext(context.Background())
}

func (i *Passwordpolicy) ToPasswordpolicyOutputWithContext(ctx context.Context) PasswordpolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordpolicyOutput)
}

// PasswordpolicyArrayInput is an input type that accepts PasswordpolicyArray and PasswordpolicyArrayOutput values.
// You can construct a concrete instance of `PasswordpolicyArrayInput` via:
//
//	PasswordpolicyArray{ PasswordpolicyArgs{...} }
type PasswordpolicyArrayInput interface {
	pulumi.Input

	ToPasswordpolicyArrayOutput() PasswordpolicyArrayOutput
	ToPasswordpolicyArrayOutputWithContext(context.Context) PasswordpolicyArrayOutput
}

type PasswordpolicyArray []PasswordpolicyInput

func (PasswordpolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Passwordpolicy)(nil)).Elem()
}

func (i PasswordpolicyArray) ToPasswordpolicyArrayOutput() PasswordpolicyArrayOutput {
	return i.ToPasswordpolicyArrayOutputWithContext(context.Background())
}

func (i PasswordpolicyArray) ToPasswordpolicyArrayOutputWithContext(ctx context.Context) PasswordpolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordpolicyArrayOutput)
}

// PasswordpolicyMapInput is an input type that accepts PasswordpolicyMap and PasswordpolicyMapOutput values.
// You can construct a concrete instance of `PasswordpolicyMapInput` via:
//
//	PasswordpolicyMap{ "key": PasswordpolicyArgs{...} }
type PasswordpolicyMapInput interface {
	pulumi.Input

	ToPasswordpolicyMapOutput() PasswordpolicyMapOutput
	ToPasswordpolicyMapOutputWithContext(context.Context) PasswordpolicyMapOutput
}

type PasswordpolicyMap map[string]PasswordpolicyInput

func (PasswordpolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Passwordpolicy)(nil)).Elem()
}

func (i PasswordpolicyMap) ToPasswordpolicyMapOutput() PasswordpolicyMapOutput {
	return i.ToPasswordpolicyMapOutputWithContext(context.Background())
}

func (i PasswordpolicyMap) ToPasswordpolicyMapOutputWithContext(ctx context.Context) PasswordpolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordpolicyMapOutput)
}

type PasswordpolicyOutput struct{ *pulumi.OutputState }

func (PasswordpolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Passwordpolicy)(nil)).Elem()
}

func (o PasswordpolicyOutput) ToPasswordpolicyOutput() PasswordpolicyOutput {
	return o
}

func (o PasswordpolicyOutput) ToPasswordpolicyOutputWithContext(ctx context.Context) PasswordpolicyOutput {
	return o
}

// Time in days before the user's password expires.
func (o PasswordpolicyOutput) ExpireDays() pulumi.IntOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.IntOutput { return v.ExpireDays }).(pulumi.IntOutput)
}

// Enable/disable password expiration. Valid values: `enable`, `disable`.
func (o PasswordpolicyOutput) ExpireStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.StringOutput { return v.ExpireStatus }).(pulumi.StringOutput)
}

// Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
func (o PasswordpolicyOutput) ExpiredPasswordRenewal() pulumi.StringOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.StringOutput { return v.ExpiredPasswordRenewal }).(pulumi.StringOutput)
}

// Minimum number of unique characters in new password which do not exist in old password (0 - 128, default = 0. This attribute overrides reuse-password if both are enabled).
func (o PasswordpolicyOutput) MinChangeCharacters() pulumi.IntOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.IntOutput { return v.MinChangeCharacters }).(pulumi.IntOutput)
}

// Minimum number of lowercase characters in password (0 - 128, default = 0).
func (o PasswordpolicyOutput) MinLowerCaseLetter() pulumi.IntOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.IntOutput { return v.MinLowerCaseLetter }).(pulumi.IntOutput)
}

// Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
func (o PasswordpolicyOutput) MinNonAlphanumeric() pulumi.IntOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.IntOutput { return v.MinNonAlphanumeric }).(pulumi.IntOutput)
}

// Minimum number of numeric characters in password (0 - 128, default = 0).
func (o PasswordpolicyOutput) MinNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.IntOutput { return v.MinNumber }).(pulumi.IntOutput)
}

// Minimum number of uppercase characters in password (0 - 128, default = 0).
func (o PasswordpolicyOutput) MinUpperCaseLetter() pulumi.IntOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.IntOutput { return v.MinUpperCaseLetter }).(pulumi.IntOutput)
}

// Minimum password length (8 - 128, default = 8).
func (o PasswordpolicyOutput) MinimumLength() pulumi.IntOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.IntOutput { return v.MinimumLength }).(pulumi.IntOutput)
}

// Password policy name.
func (o PasswordpolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable reuse of password. If both reuse-password and min-change-characters are enabled, min-change-characters overrides. Valid values: `enable`, `disable`.
func (o PasswordpolicyOutput) ReusePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.StringOutput { return v.ReusePassword }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o PasswordpolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Time in days before a password expiration warning message is displayed to the user upon login.
func (o PasswordpolicyOutput) WarnDays() pulumi.IntOutput {
	return o.ApplyT(func(v *Passwordpolicy) pulumi.IntOutput { return v.WarnDays }).(pulumi.IntOutput)
}

type PasswordpolicyArrayOutput struct{ *pulumi.OutputState }

func (PasswordpolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Passwordpolicy)(nil)).Elem()
}

func (o PasswordpolicyArrayOutput) ToPasswordpolicyArrayOutput() PasswordpolicyArrayOutput {
	return o
}

func (o PasswordpolicyArrayOutput) ToPasswordpolicyArrayOutputWithContext(ctx context.Context) PasswordpolicyArrayOutput {
	return o
}

func (o PasswordpolicyArrayOutput) Index(i pulumi.IntInput) PasswordpolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Passwordpolicy {
		return vs[0].([]*Passwordpolicy)[vs[1].(int)]
	}).(PasswordpolicyOutput)
}

type PasswordpolicyMapOutput struct{ *pulumi.OutputState }

func (PasswordpolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Passwordpolicy)(nil)).Elem()
}

func (o PasswordpolicyMapOutput) ToPasswordpolicyMapOutput() PasswordpolicyMapOutput {
	return o
}

func (o PasswordpolicyMapOutput) ToPasswordpolicyMapOutputWithContext(ctx context.Context) PasswordpolicyMapOutput {
	return o
}

func (o PasswordpolicyMapOutput) MapIndex(k pulumi.StringInput) PasswordpolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Passwordpolicy {
		return vs[0].(map[string]*Passwordpolicy)[vs[1].(string)]
	}).(PasswordpolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordpolicyInput)(nil)).Elem(), &Passwordpolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordpolicyArrayInput)(nil)).Elem(), PasswordpolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordpolicyMapInput)(nil)).Elem(), PasswordpolicyMap{})
	pulumi.RegisterOutputType(PasswordpolicyOutput{})
	pulumi.RegisterOutputType(PasswordpolicyArrayOutput{})
	pulumi.RegisterOutputType(PasswordpolicyMapOutput{})
}
