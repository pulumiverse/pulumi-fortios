// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

var _ = internal.GetEnvOrDefault

type DeviceTagging struct {
	// Tag category.
	Category *string `pulumi:"category"`
	// Tagging entry name.
	Name *string `pulumi:"name"`
	// Tags. The structure of `tags` block is documented below.
	Tags []DeviceTaggingTag `pulumi:"tags"`
}

// DeviceTaggingInput is an input type that accepts DeviceTaggingArgs and DeviceTaggingOutput values.
// You can construct a concrete instance of `DeviceTaggingInput` via:
//
//	DeviceTaggingArgs{...}
type DeviceTaggingInput interface {
	pulumi.Input

	ToDeviceTaggingOutput() DeviceTaggingOutput
	ToDeviceTaggingOutputWithContext(context.Context) DeviceTaggingOutput
}

type DeviceTaggingArgs struct {
	// Tag category.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// Tagging entry name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags. The structure of `tags` block is documented below.
	Tags DeviceTaggingTagArrayInput `pulumi:"tags"`
}

func (DeviceTaggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceTagging)(nil)).Elem()
}

func (i DeviceTaggingArgs) ToDeviceTaggingOutput() DeviceTaggingOutput {
	return i.ToDeviceTaggingOutputWithContext(context.Background())
}

func (i DeviceTaggingArgs) ToDeviceTaggingOutputWithContext(ctx context.Context) DeviceTaggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceTaggingOutput)
}

// DeviceTaggingArrayInput is an input type that accepts DeviceTaggingArray and DeviceTaggingArrayOutput values.
// You can construct a concrete instance of `DeviceTaggingArrayInput` via:
//
//	DeviceTaggingArray{ DeviceTaggingArgs{...} }
type DeviceTaggingArrayInput interface {
	pulumi.Input

	ToDeviceTaggingArrayOutput() DeviceTaggingArrayOutput
	ToDeviceTaggingArrayOutputWithContext(context.Context) DeviceTaggingArrayOutput
}

type DeviceTaggingArray []DeviceTaggingInput

func (DeviceTaggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceTagging)(nil)).Elem()
}

func (i DeviceTaggingArray) ToDeviceTaggingArrayOutput() DeviceTaggingArrayOutput {
	return i.ToDeviceTaggingArrayOutputWithContext(context.Background())
}

func (i DeviceTaggingArray) ToDeviceTaggingArrayOutputWithContext(ctx context.Context) DeviceTaggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceTaggingArrayOutput)
}

type DeviceTaggingOutput struct{ *pulumi.OutputState }

func (DeviceTaggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceTagging)(nil)).Elem()
}

func (o DeviceTaggingOutput) ToDeviceTaggingOutput() DeviceTaggingOutput {
	return o
}

func (o DeviceTaggingOutput) ToDeviceTaggingOutputWithContext(ctx context.Context) DeviceTaggingOutput {
	return o
}

// Tag category.
func (o DeviceTaggingOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceTagging) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Tagging entry name.
func (o DeviceTaggingOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceTagging) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags. The structure of `tags` block is documented below.
func (o DeviceTaggingOutput) Tags() DeviceTaggingTagArrayOutput {
	return o.ApplyT(func(v DeviceTagging) []DeviceTaggingTag { return v.Tags }).(DeviceTaggingTagArrayOutput)
}

type DeviceTaggingArrayOutput struct{ *pulumi.OutputState }

func (DeviceTaggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceTagging)(nil)).Elem()
}

func (o DeviceTaggingArrayOutput) ToDeviceTaggingArrayOutput() DeviceTaggingArrayOutput {
	return o
}

func (o DeviceTaggingArrayOutput) ToDeviceTaggingArrayOutputWithContext(ctx context.Context) DeviceTaggingArrayOutput {
	return o
}

func (o DeviceTaggingArrayOutput) Index(i pulumi.IntInput) DeviceTaggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceTagging {
		return vs[0].([]DeviceTagging)[vs[1].(int)]
	}).(DeviceTaggingOutput)
}

type DeviceTaggingTag struct {
	// Tag name.
	Name *string `pulumi:"name"`
}

// DeviceTaggingTagInput is an input type that accepts DeviceTaggingTagArgs and DeviceTaggingTagOutput values.
// You can construct a concrete instance of `DeviceTaggingTagInput` via:
//
//	DeviceTaggingTagArgs{...}
type DeviceTaggingTagInput interface {
	pulumi.Input

	ToDeviceTaggingTagOutput() DeviceTaggingTagOutput
	ToDeviceTaggingTagOutputWithContext(context.Context) DeviceTaggingTagOutput
}

type DeviceTaggingTagArgs struct {
	// Tag name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DeviceTaggingTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceTaggingTag)(nil)).Elem()
}

func (i DeviceTaggingTagArgs) ToDeviceTaggingTagOutput() DeviceTaggingTagOutput {
	return i.ToDeviceTaggingTagOutputWithContext(context.Background())
}

func (i DeviceTaggingTagArgs) ToDeviceTaggingTagOutputWithContext(ctx context.Context) DeviceTaggingTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceTaggingTagOutput)
}

// DeviceTaggingTagArrayInput is an input type that accepts DeviceTaggingTagArray and DeviceTaggingTagArrayOutput values.
// You can construct a concrete instance of `DeviceTaggingTagArrayInput` via:
//
//	DeviceTaggingTagArray{ DeviceTaggingTagArgs{...} }
type DeviceTaggingTagArrayInput interface {
	pulumi.Input

	ToDeviceTaggingTagArrayOutput() DeviceTaggingTagArrayOutput
	ToDeviceTaggingTagArrayOutputWithContext(context.Context) DeviceTaggingTagArrayOutput
}

type DeviceTaggingTagArray []DeviceTaggingTagInput

func (DeviceTaggingTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceTaggingTag)(nil)).Elem()
}

func (i DeviceTaggingTagArray) ToDeviceTaggingTagArrayOutput() DeviceTaggingTagArrayOutput {
	return i.ToDeviceTaggingTagArrayOutputWithContext(context.Background())
}

func (i DeviceTaggingTagArray) ToDeviceTaggingTagArrayOutputWithContext(ctx context.Context) DeviceTaggingTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceTaggingTagArrayOutput)
}

type DeviceTaggingTagOutput struct{ *pulumi.OutputState }

func (DeviceTaggingTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceTaggingTag)(nil)).Elem()
}

func (o DeviceTaggingTagOutput) ToDeviceTaggingTagOutput() DeviceTaggingTagOutput {
	return o
}

func (o DeviceTaggingTagOutput) ToDeviceTaggingTagOutputWithContext(ctx context.Context) DeviceTaggingTagOutput {
	return o
}

// Tag name.
func (o DeviceTaggingTagOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceTaggingTag) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DeviceTaggingTagArrayOutput struct{ *pulumi.OutputState }

func (DeviceTaggingTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceTaggingTag)(nil)).Elem()
}

func (o DeviceTaggingTagArrayOutput) ToDeviceTaggingTagArrayOutput() DeviceTaggingTagArrayOutput {
	return o
}

func (o DeviceTaggingTagArrayOutput) ToDeviceTaggingTagArrayOutputWithContext(ctx context.Context) DeviceTaggingTagArrayOutput {
	return o
}

func (o DeviceTaggingTagArrayOutput) Index(i pulumi.IntInput) DeviceTaggingTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceTaggingTag {
		return vs[0].([]DeviceTaggingTag)[vs[1].(int)]
	}).(DeviceTaggingTagOutput)
}

type DeviceaccesslistDeviceList struct {
	// Allow or block device. Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// Firewall device or device group.
	Device *string `pulumi:"device"`
	// Entry ID.
	Id *int `pulumi:"id"`
}

// DeviceaccesslistDeviceListInput is an input type that accepts DeviceaccesslistDeviceListArgs and DeviceaccesslistDeviceListOutput values.
// You can construct a concrete instance of `DeviceaccesslistDeviceListInput` via:
//
//	DeviceaccesslistDeviceListArgs{...}
type DeviceaccesslistDeviceListInput interface {
	pulumi.Input

	ToDeviceaccesslistDeviceListOutput() DeviceaccesslistDeviceListOutput
	ToDeviceaccesslistDeviceListOutputWithContext(context.Context) DeviceaccesslistDeviceListOutput
}

type DeviceaccesslistDeviceListArgs struct {
	// Allow or block device. Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Firewall device or device group.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// Entry ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
}

func (DeviceaccesslistDeviceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceaccesslistDeviceList)(nil)).Elem()
}

func (i DeviceaccesslistDeviceListArgs) ToDeviceaccesslistDeviceListOutput() DeviceaccesslistDeviceListOutput {
	return i.ToDeviceaccesslistDeviceListOutputWithContext(context.Background())
}

func (i DeviceaccesslistDeviceListArgs) ToDeviceaccesslistDeviceListOutputWithContext(ctx context.Context) DeviceaccesslistDeviceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceaccesslistDeviceListOutput)
}

// DeviceaccesslistDeviceListArrayInput is an input type that accepts DeviceaccesslistDeviceListArray and DeviceaccesslistDeviceListArrayOutput values.
// You can construct a concrete instance of `DeviceaccesslistDeviceListArrayInput` via:
//
//	DeviceaccesslistDeviceListArray{ DeviceaccesslistDeviceListArgs{...} }
type DeviceaccesslistDeviceListArrayInput interface {
	pulumi.Input

	ToDeviceaccesslistDeviceListArrayOutput() DeviceaccesslistDeviceListArrayOutput
	ToDeviceaccesslistDeviceListArrayOutputWithContext(context.Context) DeviceaccesslistDeviceListArrayOutput
}

type DeviceaccesslistDeviceListArray []DeviceaccesslistDeviceListInput

func (DeviceaccesslistDeviceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceaccesslistDeviceList)(nil)).Elem()
}

func (i DeviceaccesslistDeviceListArray) ToDeviceaccesslistDeviceListArrayOutput() DeviceaccesslistDeviceListArrayOutput {
	return i.ToDeviceaccesslistDeviceListArrayOutputWithContext(context.Background())
}

func (i DeviceaccesslistDeviceListArray) ToDeviceaccesslistDeviceListArrayOutputWithContext(ctx context.Context) DeviceaccesslistDeviceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceaccesslistDeviceListArrayOutput)
}

type DeviceaccesslistDeviceListOutput struct{ *pulumi.OutputState }

func (DeviceaccesslistDeviceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceaccesslistDeviceList)(nil)).Elem()
}

func (o DeviceaccesslistDeviceListOutput) ToDeviceaccesslistDeviceListOutput() DeviceaccesslistDeviceListOutput {
	return o
}

func (o DeviceaccesslistDeviceListOutput) ToDeviceaccesslistDeviceListOutputWithContext(ctx context.Context) DeviceaccesslistDeviceListOutput {
	return o
}

// Allow or block device. Valid values: `accept`, `deny`.
func (o DeviceaccesslistDeviceListOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceaccesslistDeviceList) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Firewall device or device group.
func (o DeviceaccesslistDeviceListOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceaccesslistDeviceList) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Entry ID.
func (o DeviceaccesslistDeviceListOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceaccesslistDeviceList) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type DeviceaccesslistDeviceListArrayOutput struct{ *pulumi.OutputState }

func (DeviceaccesslistDeviceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceaccesslistDeviceList)(nil)).Elem()
}

func (o DeviceaccesslistDeviceListArrayOutput) ToDeviceaccesslistDeviceListArrayOutput() DeviceaccesslistDeviceListArrayOutput {
	return o
}

func (o DeviceaccesslistDeviceListArrayOutput) ToDeviceaccesslistDeviceListArrayOutputWithContext(ctx context.Context) DeviceaccesslistDeviceListArrayOutput {
	return o
}

func (o DeviceaccesslistDeviceListArrayOutput) Index(i pulumi.IntInput) DeviceaccesslistDeviceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceaccesslistDeviceList {
		return vs[0].([]DeviceaccesslistDeviceList)[vs[1].(int)]
	}).(DeviceaccesslistDeviceListOutput)
}

type DevicegroupMember struct {
	// Device name.
	Name *string `pulumi:"name"`
}

// DevicegroupMemberInput is an input type that accepts DevicegroupMemberArgs and DevicegroupMemberOutput values.
// You can construct a concrete instance of `DevicegroupMemberInput` via:
//
//	DevicegroupMemberArgs{...}
type DevicegroupMemberInput interface {
	pulumi.Input

	ToDevicegroupMemberOutput() DevicegroupMemberOutput
	ToDevicegroupMemberOutputWithContext(context.Context) DevicegroupMemberOutput
}

type DevicegroupMemberArgs struct {
	// Device name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DevicegroupMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevicegroupMember)(nil)).Elem()
}

func (i DevicegroupMemberArgs) ToDevicegroupMemberOutput() DevicegroupMemberOutput {
	return i.ToDevicegroupMemberOutputWithContext(context.Background())
}

func (i DevicegroupMemberArgs) ToDevicegroupMemberOutputWithContext(ctx context.Context) DevicegroupMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicegroupMemberOutput)
}

// DevicegroupMemberArrayInput is an input type that accepts DevicegroupMemberArray and DevicegroupMemberArrayOutput values.
// You can construct a concrete instance of `DevicegroupMemberArrayInput` via:
//
//	DevicegroupMemberArray{ DevicegroupMemberArgs{...} }
type DevicegroupMemberArrayInput interface {
	pulumi.Input

	ToDevicegroupMemberArrayOutput() DevicegroupMemberArrayOutput
	ToDevicegroupMemberArrayOutputWithContext(context.Context) DevicegroupMemberArrayOutput
}

type DevicegroupMemberArray []DevicegroupMemberInput

func (DevicegroupMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevicegroupMember)(nil)).Elem()
}

func (i DevicegroupMemberArray) ToDevicegroupMemberArrayOutput() DevicegroupMemberArrayOutput {
	return i.ToDevicegroupMemberArrayOutputWithContext(context.Background())
}

func (i DevicegroupMemberArray) ToDevicegroupMemberArrayOutputWithContext(ctx context.Context) DevicegroupMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicegroupMemberArrayOutput)
}

type DevicegroupMemberOutput struct{ *pulumi.OutputState }

func (DevicegroupMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevicegroupMember)(nil)).Elem()
}

func (o DevicegroupMemberOutput) ToDevicegroupMemberOutput() DevicegroupMemberOutput {
	return o
}

func (o DevicegroupMemberOutput) ToDevicegroupMemberOutputWithContext(ctx context.Context) DevicegroupMemberOutput {
	return o
}

// Device name.
func (o DevicegroupMemberOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevicegroupMember) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DevicegroupMemberArrayOutput struct{ *pulumi.OutputState }

func (DevicegroupMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevicegroupMember)(nil)).Elem()
}

func (o DevicegroupMemberArrayOutput) ToDevicegroupMemberArrayOutput() DevicegroupMemberArrayOutput {
	return o
}

func (o DevicegroupMemberArrayOutput) ToDevicegroupMemberArrayOutputWithContext(ctx context.Context) DevicegroupMemberArrayOutput {
	return o
}

func (o DevicegroupMemberArrayOutput) Index(i pulumi.IntInput) DevicegroupMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DevicegroupMember {
		return vs[0].([]DevicegroupMember)[vs[1].(int)]
	}).(DevicegroupMemberOutput)
}

type DevicegroupTagging struct {
	// Tag category.
	Category *string `pulumi:"category"`
	// Tagging entry name.
	Name *string `pulumi:"name"`
	// Tags. The structure of `tags` block is documented below.
	Tags []DevicegroupTaggingTag `pulumi:"tags"`
}

// DevicegroupTaggingInput is an input type that accepts DevicegroupTaggingArgs and DevicegroupTaggingOutput values.
// You can construct a concrete instance of `DevicegroupTaggingInput` via:
//
//	DevicegroupTaggingArgs{...}
type DevicegroupTaggingInput interface {
	pulumi.Input

	ToDevicegroupTaggingOutput() DevicegroupTaggingOutput
	ToDevicegroupTaggingOutputWithContext(context.Context) DevicegroupTaggingOutput
}

type DevicegroupTaggingArgs struct {
	// Tag category.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// Tagging entry name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags. The structure of `tags` block is documented below.
	Tags DevicegroupTaggingTagArrayInput `pulumi:"tags"`
}

func (DevicegroupTaggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevicegroupTagging)(nil)).Elem()
}

func (i DevicegroupTaggingArgs) ToDevicegroupTaggingOutput() DevicegroupTaggingOutput {
	return i.ToDevicegroupTaggingOutputWithContext(context.Background())
}

func (i DevicegroupTaggingArgs) ToDevicegroupTaggingOutputWithContext(ctx context.Context) DevicegroupTaggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicegroupTaggingOutput)
}

// DevicegroupTaggingArrayInput is an input type that accepts DevicegroupTaggingArray and DevicegroupTaggingArrayOutput values.
// You can construct a concrete instance of `DevicegroupTaggingArrayInput` via:
//
//	DevicegroupTaggingArray{ DevicegroupTaggingArgs{...} }
type DevicegroupTaggingArrayInput interface {
	pulumi.Input

	ToDevicegroupTaggingArrayOutput() DevicegroupTaggingArrayOutput
	ToDevicegroupTaggingArrayOutputWithContext(context.Context) DevicegroupTaggingArrayOutput
}

type DevicegroupTaggingArray []DevicegroupTaggingInput

func (DevicegroupTaggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevicegroupTagging)(nil)).Elem()
}

func (i DevicegroupTaggingArray) ToDevicegroupTaggingArrayOutput() DevicegroupTaggingArrayOutput {
	return i.ToDevicegroupTaggingArrayOutputWithContext(context.Background())
}

func (i DevicegroupTaggingArray) ToDevicegroupTaggingArrayOutputWithContext(ctx context.Context) DevicegroupTaggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicegroupTaggingArrayOutput)
}

type DevicegroupTaggingOutput struct{ *pulumi.OutputState }

func (DevicegroupTaggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevicegroupTagging)(nil)).Elem()
}

func (o DevicegroupTaggingOutput) ToDevicegroupTaggingOutput() DevicegroupTaggingOutput {
	return o
}

func (o DevicegroupTaggingOutput) ToDevicegroupTaggingOutputWithContext(ctx context.Context) DevicegroupTaggingOutput {
	return o
}

// Tag category.
func (o DevicegroupTaggingOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevicegroupTagging) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Tagging entry name.
func (o DevicegroupTaggingOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevicegroupTagging) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags. The structure of `tags` block is documented below.
func (o DevicegroupTaggingOutput) Tags() DevicegroupTaggingTagArrayOutput {
	return o.ApplyT(func(v DevicegroupTagging) []DevicegroupTaggingTag { return v.Tags }).(DevicegroupTaggingTagArrayOutput)
}

type DevicegroupTaggingArrayOutput struct{ *pulumi.OutputState }

func (DevicegroupTaggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevicegroupTagging)(nil)).Elem()
}

func (o DevicegroupTaggingArrayOutput) ToDevicegroupTaggingArrayOutput() DevicegroupTaggingArrayOutput {
	return o
}

func (o DevicegroupTaggingArrayOutput) ToDevicegroupTaggingArrayOutputWithContext(ctx context.Context) DevicegroupTaggingArrayOutput {
	return o
}

func (o DevicegroupTaggingArrayOutput) Index(i pulumi.IntInput) DevicegroupTaggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DevicegroupTagging {
		return vs[0].([]DevicegroupTagging)[vs[1].(int)]
	}).(DevicegroupTaggingOutput)
}

type DevicegroupTaggingTag struct {
	// Tag name.
	Name *string `pulumi:"name"`
}

// DevicegroupTaggingTagInput is an input type that accepts DevicegroupTaggingTagArgs and DevicegroupTaggingTagOutput values.
// You can construct a concrete instance of `DevicegroupTaggingTagInput` via:
//
//	DevicegroupTaggingTagArgs{...}
type DevicegroupTaggingTagInput interface {
	pulumi.Input

	ToDevicegroupTaggingTagOutput() DevicegroupTaggingTagOutput
	ToDevicegroupTaggingTagOutputWithContext(context.Context) DevicegroupTaggingTagOutput
}

type DevicegroupTaggingTagArgs struct {
	// Tag name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DevicegroupTaggingTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevicegroupTaggingTag)(nil)).Elem()
}

func (i DevicegroupTaggingTagArgs) ToDevicegroupTaggingTagOutput() DevicegroupTaggingTagOutput {
	return i.ToDevicegroupTaggingTagOutputWithContext(context.Background())
}

func (i DevicegroupTaggingTagArgs) ToDevicegroupTaggingTagOutputWithContext(ctx context.Context) DevicegroupTaggingTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicegroupTaggingTagOutput)
}

// DevicegroupTaggingTagArrayInput is an input type that accepts DevicegroupTaggingTagArray and DevicegroupTaggingTagArrayOutput values.
// You can construct a concrete instance of `DevicegroupTaggingTagArrayInput` via:
//
//	DevicegroupTaggingTagArray{ DevicegroupTaggingTagArgs{...} }
type DevicegroupTaggingTagArrayInput interface {
	pulumi.Input

	ToDevicegroupTaggingTagArrayOutput() DevicegroupTaggingTagArrayOutput
	ToDevicegroupTaggingTagArrayOutputWithContext(context.Context) DevicegroupTaggingTagArrayOutput
}

type DevicegroupTaggingTagArray []DevicegroupTaggingTagInput

func (DevicegroupTaggingTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevicegroupTaggingTag)(nil)).Elem()
}

func (i DevicegroupTaggingTagArray) ToDevicegroupTaggingTagArrayOutput() DevicegroupTaggingTagArrayOutput {
	return i.ToDevicegroupTaggingTagArrayOutputWithContext(context.Background())
}

func (i DevicegroupTaggingTagArray) ToDevicegroupTaggingTagArrayOutputWithContext(ctx context.Context) DevicegroupTaggingTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicegroupTaggingTagArrayOutput)
}

type DevicegroupTaggingTagOutput struct{ *pulumi.OutputState }

func (DevicegroupTaggingTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevicegroupTaggingTag)(nil)).Elem()
}

func (o DevicegroupTaggingTagOutput) ToDevicegroupTaggingTagOutput() DevicegroupTaggingTagOutput {
	return o
}

func (o DevicegroupTaggingTagOutput) ToDevicegroupTaggingTagOutputWithContext(ctx context.Context) DevicegroupTaggingTagOutput {
	return o
}

// Tag name.
func (o DevicegroupTaggingTagOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevicegroupTaggingTag) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DevicegroupTaggingTagArrayOutput struct{ *pulumi.OutputState }

func (DevicegroupTaggingTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevicegroupTaggingTag)(nil)).Elem()
}

func (o DevicegroupTaggingTagArrayOutput) ToDevicegroupTaggingTagArrayOutput() DevicegroupTaggingTagArrayOutput {
	return o
}

func (o DevicegroupTaggingTagArrayOutput) ToDevicegroupTaggingTagArrayOutputWithContext(ctx context.Context) DevicegroupTaggingTagArrayOutput {
	return o
}

func (o DevicegroupTaggingTagArrayOutput) Index(i pulumi.IntInput) DevicegroupTaggingTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DevicegroupTaggingTag {
		return vs[0].([]DevicegroupTaggingTag)[vs[1].(int)]
	}).(DevicegroupTaggingTagOutput)
}

type DomaincontrollerExtraServer struct {
	// Server ID.
	Id *int `pulumi:"id"`
	// Domain controller IP address.
	IpAddress *string `pulumi:"ipAddress"`
	// Port to be used for communication with the domain controller (default = 445).
	Port *int `pulumi:"port"`
	// FortiGate IPv4 address to be used for communication with the domain controller.
	SourceIpAddress *string `pulumi:"sourceIpAddress"`
	// Source port to be used for communication with the domain controller.
	SourcePort *int `pulumi:"sourcePort"`
}

// DomaincontrollerExtraServerInput is an input type that accepts DomaincontrollerExtraServerArgs and DomaincontrollerExtraServerOutput values.
// You can construct a concrete instance of `DomaincontrollerExtraServerInput` via:
//
//	DomaincontrollerExtraServerArgs{...}
type DomaincontrollerExtraServerInput interface {
	pulumi.Input

	ToDomaincontrollerExtraServerOutput() DomaincontrollerExtraServerOutput
	ToDomaincontrollerExtraServerOutputWithContext(context.Context) DomaincontrollerExtraServerOutput
}

type DomaincontrollerExtraServerArgs struct {
	// Server ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Domain controller IP address.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// Port to be used for communication with the domain controller (default = 445).
	Port pulumi.IntPtrInput `pulumi:"port"`
	// FortiGate IPv4 address to be used for communication with the domain controller.
	SourceIpAddress pulumi.StringPtrInput `pulumi:"sourceIpAddress"`
	// Source port to be used for communication with the domain controller.
	SourcePort pulumi.IntPtrInput `pulumi:"sourcePort"`
}

func (DomaincontrollerExtraServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomaincontrollerExtraServer)(nil)).Elem()
}

func (i DomaincontrollerExtraServerArgs) ToDomaincontrollerExtraServerOutput() DomaincontrollerExtraServerOutput {
	return i.ToDomaincontrollerExtraServerOutputWithContext(context.Background())
}

func (i DomaincontrollerExtraServerArgs) ToDomaincontrollerExtraServerOutputWithContext(ctx context.Context) DomaincontrollerExtraServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomaincontrollerExtraServerOutput)
}

// DomaincontrollerExtraServerArrayInput is an input type that accepts DomaincontrollerExtraServerArray and DomaincontrollerExtraServerArrayOutput values.
// You can construct a concrete instance of `DomaincontrollerExtraServerArrayInput` via:
//
//	DomaincontrollerExtraServerArray{ DomaincontrollerExtraServerArgs{...} }
type DomaincontrollerExtraServerArrayInput interface {
	pulumi.Input

	ToDomaincontrollerExtraServerArrayOutput() DomaincontrollerExtraServerArrayOutput
	ToDomaincontrollerExtraServerArrayOutputWithContext(context.Context) DomaincontrollerExtraServerArrayOutput
}

type DomaincontrollerExtraServerArray []DomaincontrollerExtraServerInput

func (DomaincontrollerExtraServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomaincontrollerExtraServer)(nil)).Elem()
}

func (i DomaincontrollerExtraServerArray) ToDomaincontrollerExtraServerArrayOutput() DomaincontrollerExtraServerArrayOutput {
	return i.ToDomaincontrollerExtraServerArrayOutputWithContext(context.Background())
}

func (i DomaincontrollerExtraServerArray) ToDomaincontrollerExtraServerArrayOutputWithContext(ctx context.Context) DomaincontrollerExtraServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomaincontrollerExtraServerArrayOutput)
}

type DomaincontrollerExtraServerOutput struct{ *pulumi.OutputState }

func (DomaincontrollerExtraServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomaincontrollerExtraServer)(nil)).Elem()
}

func (o DomaincontrollerExtraServerOutput) ToDomaincontrollerExtraServerOutput() DomaincontrollerExtraServerOutput {
	return o
}

func (o DomaincontrollerExtraServerOutput) ToDomaincontrollerExtraServerOutputWithContext(ctx context.Context) DomaincontrollerExtraServerOutput {
	return o
}

// Server ID.
func (o DomaincontrollerExtraServerOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomaincontrollerExtraServer) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Domain controller IP address.
func (o DomaincontrollerExtraServerOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomaincontrollerExtraServer) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Port to be used for communication with the domain controller (default = 445).
func (o DomaincontrollerExtraServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomaincontrollerExtraServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// FortiGate IPv4 address to be used for communication with the domain controller.
func (o DomaincontrollerExtraServerOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomaincontrollerExtraServer) *string { return v.SourceIpAddress }).(pulumi.StringPtrOutput)
}

// Source port to be used for communication with the domain controller.
func (o DomaincontrollerExtraServerOutput) SourcePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomaincontrollerExtraServer) *int { return v.SourcePort }).(pulumi.IntPtrOutput)
}

type DomaincontrollerExtraServerArrayOutput struct{ *pulumi.OutputState }

func (DomaincontrollerExtraServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomaincontrollerExtraServer)(nil)).Elem()
}

func (o DomaincontrollerExtraServerArrayOutput) ToDomaincontrollerExtraServerArrayOutput() DomaincontrollerExtraServerArrayOutput {
	return o
}

func (o DomaincontrollerExtraServerArrayOutput) ToDomaincontrollerExtraServerArrayOutputWithContext(ctx context.Context) DomaincontrollerExtraServerArrayOutput {
	return o
}

func (o DomaincontrollerExtraServerArrayOutput) Index(i pulumi.IntInput) DomaincontrollerExtraServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomaincontrollerExtraServer {
		return vs[0].([]DomaincontrollerExtraServer)[vs[1].(int)]
	}).(DomaincontrollerExtraServerOutput)
}

type ExchangeKdcIp struct {
	// KDC IPv4 addresses for Kerberos authentication.
	Ipv4 *string `pulumi:"ipv4"`
}

// ExchangeKdcIpInput is an input type that accepts ExchangeKdcIpArgs and ExchangeKdcIpOutput values.
// You can construct a concrete instance of `ExchangeKdcIpInput` via:
//
//	ExchangeKdcIpArgs{...}
type ExchangeKdcIpInput interface {
	pulumi.Input

	ToExchangeKdcIpOutput() ExchangeKdcIpOutput
	ToExchangeKdcIpOutputWithContext(context.Context) ExchangeKdcIpOutput
}

type ExchangeKdcIpArgs struct {
	// KDC IPv4 addresses for Kerberos authentication.
	Ipv4 pulumi.StringPtrInput `pulumi:"ipv4"`
}

func (ExchangeKdcIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExchangeKdcIp)(nil)).Elem()
}

func (i ExchangeKdcIpArgs) ToExchangeKdcIpOutput() ExchangeKdcIpOutput {
	return i.ToExchangeKdcIpOutputWithContext(context.Background())
}

func (i ExchangeKdcIpArgs) ToExchangeKdcIpOutputWithContext(ctx context.Context) ExchangeKdcIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeKdcIpOutput)
}

// ExchangeKdcIpArrayInput is an input type that accepts ExchangeKdcIpArray and ExchangeKdcIpArrayOutput values.
// You can construct a concrete instance of `ExchangeKdcIpArrayInput` via:
//
//	ExchangeKdcIpArray{ ExchangeKdcIpArgs{...} }
type ExchangeKdcIpArrayInput interface {
	pulumi.Input

	ToExchangeKdcIpArrayOutput() ExchangeKdcIpArrayOutput
	ToExchangeKdcIpArrayOutputWithContext(context.Context) ExchangeKdcIpArrayOutput
}

type ExchangeKdcIpArray []ExchangeKdcIpInput

func (ExchangeKdcIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExchangeKdcIp)(nil)).Elem()
}

func (i ExchangeKdcIpArray) ToExchangeKdcIpArrayOutput() ExchangeKdcIpArrayOutput {
	return i.ToExchangeKdcIpArrayOutputWithContext(context.Background())
}

func (i ExchangeKdcIpArray) ToExchangeKdcIpArrayOutputWithContext(ctx context.Context) ExchangeKdcIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeKdcIpArrayOutput)
}

type ExchangeKdcIpOutput struct{ *pulumi.OutputState }

func (ExchangeKdcIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExchangeKdcIp)(nil)).Elem()
}

func (o ExchangeKdcIpOutput) ToExchangeKdcIpOutput() ExchangeKdcIpOutput {
	return o
}

func (o ExchangeKdcIpOutput) ToExchangeKdcIpOutputWithContext(ctx context.Context) ExchangeKdcIpOutput {
	return o
}

// KDC IPv4 addresses for Kerberos authentication.
func (o ExchangeKdcIpOutput) Ipv4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExchangeKdcIp) *string { return v.Ipv4 }).(pulumi.StringPtrOutput)
}

type ExchangeKdcIpArrayOutput struct{ *pulumi.OutputState }

func (ExchangeKdcIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExchangeKdcIp)(nil)).Elem()
}

func (o ExchangeKdcIpArrayOutput) ToExchangeKdcIpArrayOutput() ExchangeKdcIpArrayOutput {
	return o
}

func (o ExchangeKdcIpArrayOutput) ToExchangeKdcIpArrayOutputWithContext(ctx context.Context) ExchangeKdcIpArrayOutput {
	return o
}

func (o ExchangeKdcIpArrayOutput) Index(i pulumi.IntInput) ExchangeKdcIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExchangeKdcIp {
		return vs[0].([]ExchangeKdcIp)[vs[1].(int)]
	}).(ExchangeKdcIpOutput)
}

type FssopollingAdgrp struct {
	// Name.
	Name *string `pulumi:"name"`
}

// FssopollingAdgrpInput is an input type that accepts FssopollingAdgrpArgs and FssopollingAdgrpOutput values.
// You can construct a concrete instance of `FssopollingAdgrpInput` via:
//
//	FssopollingAdgrpArgs{...}
type FssopollingAdgrpInput interface {
	pulumi.Input

	ToFssopollingAdgrpOutput() FssopollingAdgrpOutput
	ToFssopollingAdgrpOutputWithContext(context.Context) FssopollingAdgrpOutput
}

type FssopollingAdgrpArgs struct {
	// Name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (FssopollingAdgrpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FssopollingAdgrp)(nil)).Elem()
}

func (i FssopollingAdgrpArgs) ToFssopollingAdgrpOutput() FssopollingAdgrpOutput {
	return i.ToFssopollingAdgrpOutputWithContext(context.Background())
}

func (i FssopollingAdgrpArgs) ToFssopollingAdgrpOutputWithContext(ctx context.Context) FssopollingAdgrpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FssopollingAdgrpOutput)
}

// FssopollingAdgrpArrayInput is an input type that accepts FssopollingAdgrpArray and FssopollingAdgrpArrayOutput values.
// You can construct a concrete instance of `FssopollingAdgrpArrayInput` via:
//
//	FssopollingAdgrpArray{ FssopollingAdgrpArgs{...} }
type FssopollingAdgrpArrayInput interface {
	pulumi.Input

	ToFssopollingAdgrpArrayOutput() FssopollingAdgrpArrayOutput
	ToFssopollingAdgrpArrayOutputWithContext(context.Context) FssopollingAdgrpArrayOutput
}

type FssopollingAdgrpArray []FssopollingAdgrpInput

func (FssopollingAdgrpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FssopollingAdgrp)(nil)).Elem()
}

func (i FssopollingAdgrpArray) ToFssopollingAdgrpArrayOutput() FssopollingAdgrpArrayOutput {
	return i.ToFssopollingAdgrpArrayOutputWithContext(context.Background())
}

func (i FssopollingAdgrpArray) ToFssopollingAdgrpArrayOutputWithContext(ctx context.Context) FssopollingAdgrpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FssopollingAdgrpArrayOutput)
}

type FssopollingAdgrpOutput struct{ *pulumi.OutputState }

func (FssopollingAdgrpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FssopollingAdgrp)(nil)).Elem()
}

func (o FssopollingAdgrpOutput) ToFssopollingAdgrpOutput() FssopollingAdgrpOutput {
	return o
}

func (o FssopollingAdgrpOutput) ToFssopollingAdgrpOutputWithContext(ctx context.Context) FssopollingAdgrpOutput {
	return o
}

// Name.
func (o FssopollingAdgrpOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FssopollingAdgrp) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type FssopollingAdgrpArrayOutput struct{ *pulumi.OutputState }

func (FssopollingAdgrpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FssopollingAdgrp)(nil)).Elem()
}

func (o FssopollingAdgrpArrayOutput) ToFssopollingAdgrpArrayOutput() FssopollingAdgrpArrayOutput {
	return o
}

func (o FssopollingAdgrpArrayOutput) ToFssopollingAdgrpArrayOutputWithContext(ctx context.Context) FssopollingAdgrpArrayOutput {
	return o
}

func (o FssopollingAdgrpArrayOutput) Index(i pulumi.IntInput) FssopollingAdgrpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FssopollingAdgrp {
		return vs[0].([]FssopollingAdgrp)[vs[1].(int)]
	}).(FssopollingAdgrpOutput)
}

type GroupGuest struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Set the action for the company guest user field.
	Company *string `pulumi:"company"`
	// Email.
	Email *string `pulumi:"email"`
	// Expire time.
	Expiration *string `pulumi:"expiration"`
	// Guest ID.
	Id *int `pulumi:"id"`
	// Mobile phone.
	MobilePhone *string `pulumi:"mobilePhone"`
	// Guest name.
	Name *string `pulumi:"name"`
	// Guest password.
	Password *string `pulumi:"password"`
	// Set the action for the sponsor guest user field.
	Sponsor *string `pulumi:"sponsor"`
	// Guest ID.
	UserId *string `pulumi:"userId"`
}

// GroupGuestInput is an input type that accepts GroupGuestArgs and GroupGuestOutput values.
// You can construct a concrete instance of `GroupGuestInput` via:
//
//	GroupGuestArgs{...}
type GroupGuestInput interface {
	pulumi.Input

	ToGroupGuestOutput() GroupGuestOutput
	ToGroupGuestOutputWithContext(context.Context) GroupGuestOutput
}

type GroupGuestArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Set the action for the company guest user field.
	Company pulumi.StringPtrInput `pulumi:"company"`
	// Email.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Expire time.
	Expiration pulumi.StringPtrInput `pulumi:"expiration"`
	// Guest ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Mobile phone.
	MobilePhone pulumi.StringPtrInput `pulumi:"mobilePhone"`
	// Guest name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Guest password.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Set the action for the sponsor guest user field.
	Sponsor pulumi.StringPtrInput `pulumi:"sponsor"`
	// Guest ID.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (GroupGuestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupGuest)(nil)).Elem()
}

func (i GroupGuestArgs) ToGroupGuestOutput() GroupGuestOutput {
	return i.ToGroupGuestOutputWithContext(context.Background())
}

func (i GroupGuestArgs) ToGroupGuestOutputWithContext(ctx context.Context) GroupGuestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupGuestOutput)
}

// GroupGuestArrayInput is an input type that accepts GroupGuestArray and GroupGuestArrayOutput values.
// You can construct a concrete instance of `GroupGuestArrayInput` via:
//
//	GroupGuestArray{ GroupGuestArgs{...} }
type GroupGuestArrayInput interface {
	pulumi.Input

	ToGroupGuestArrayOutput() GroupGuestArrayOutput
	ToGroupGuestArrayOutputWithContext(context.Context) GroupGuestArrayOutput
}

type GroupGuestArray []GroupGuestInput

func (GroupGuestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupGuest)(nil)).Elem()
}

func (i GroupGuestArray) ToGroupGuestArrayOutput() GroupGuestArrayOutput {
	return i.ToGroupGuestArrayOutputWithContext(context.Background())
}

func (i GroupGuestArray) ToGroupGuestArrayOutputWithContext(ctx context.Context) GroupGuestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupGuestArrayOutput)
}

type GroupGuestOutput struct{ *pulumi.OutputState }

func (GroupGuestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupGuest)(nil)).Elem()
}

func (o GroupGuestOutput) ToGroupGuestOutput() GroupGuestOutput {
	return o
}

func (o GroupGuestOutput) ToGroupGuestOutputWithContext(ctx context.Context) GroupGuestOutput {
	return o
}

// Comment.
func (o GroupGuestOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupGuest) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Set the action for the company guest user field.
func (o GroupGuestOutput) Company() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupGuest) *string { return v.Company }).(pulumi.StringPtrOutput)
}

// Email.
func (o GroupGuestOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupGuest) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Expire time.
func (o GroupGuestOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupGuest) *string { return v.Expiration }).(pulumi.StringPtrOutput)
}

// Guest ID.
func (o GroupGuestOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupGuest) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Mobile phone.
func (o GroupGuestOutput) MobilePhone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupGuest) *string { return v.MobilePhone }).(pulumi.StringPtrOutput)
}

// Guest name.
func (o GroupGuestOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupGuest) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Guest password.
func (o GroupGuestOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupGuest) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Set the action for the sponsor guest user field.
func (o GroupGuestOutput) Sponsor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupGuest) *string { return v.Sponsor }).(pulumi.StringPtrOutput)
}

// Guest ID.
func (o GroupGuestOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupGuest) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

type GroupGuestArrayOutput struct{ *pulumi.OutputState }

func (GroupGuestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupGuest)(nil)).Elem()
}

func (o GroupGuestArrayOutput) ToGroupGuestArrayOutput() GroupGuestArrayOutput {
	return o
}

func (o GroupGuestArrayOutput) ToGroupGuestArrayOutputWithContext(ctx context.Context) GroupGuestArrayOutput {
	return o
}

func (o GroupGuestArrayOutput) Index(i pulumi.IntInput) GroupGuestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupGuest {
		return vs[0].([]GroupGuest)[vs[1].(int)]
	}).(GroupGuestOutput)
}

type GroupMatch struct {
	// Name of matching group on remote auththentication server.
	GroupName *string `pulumi:"groupName"`
	// ID.
	Id *int `pulumi:"id"`
	// Name of remote auth server.
	ServerName *string `pulumi:"serverName"`
}

// GroupMatchInput is an input type that accepts GroupMatchArgs and GroupMatchOutput values.
// You can construct a concrete instance of `GroupMatchInput` via:
//
//	GroupMatchArgs{...}
type GroupMatchInput interface {
	pulumi.Input

	ToGroupMatchOutput() GroupMatchOutput
	ToGroupMatchOutputWithContext(context.Context) GroupMatchOutput
}

type GroupMatchArgs struct {
	// Name of matching group on remote auththentication server.
	GroupName pulumi.StringPtrInput `pulumi:"groupName"`
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Name of remote auth server.
	ServerName pulumi.StringPtrInput `pulumi:"serverName"`
}

func (GroupMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMatch)(nil)).Elem()
}

func (i GroupMatchArgs) ToGroupMatchOutput() GroupMatchOutput {
	return i.ToGroupMatchOutputWithContext(context.Background())
}

func (i GroupMatchArgs) ToGroupMatchOutputWithContext(ctx context.Context) GroupMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMatchOutput)
}

// GroupMatchArrayInput is an input type that accepts GroupMatchArray and GroupMatchArrayOutput values.
// You can construct a concrete instance of `GroupMatchArrayInput` via:
//
//	GroupMatchArray{ GroupMatchArgs{...} }
type GroupMatchArrayInput interface {
	pulumi.Input

	ToGroupMatchArrayOutput() GroupMatchArrayOutput
	ToGroupMatchArrayOutputWithContext(context.Context) GroupMatchArrayOutput
}

type GroupMatchArray []GroupMatchInput

func (GroupMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupMatch)(nil)).Elem()
}

func (i GroupMatchArray) ToGroupMatchArrayOutput() GroupMatchArrayOutput {
	return i.ToGroupMatchArrayOutputWithContext(context.Background())
}

func (i GroupMatchArray) ToGroupMatchArrayOutputWithContext(ctx context.Context) GroupMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMatchArrayOutput)
}

type GroupMatchOutput struct{ *pulumi.OutputState }

func (GroupMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMatch)(nil)).Elem()
}

func (o GroupMatchOutput) ToGroupMatchOutput() GroupMatchOutput {
	return o
}

func (o GroupMatchOutput) ToGroupMatchOutputWithContext(ctx context.Context) GroupMatchOutput {
	return o
}

// Name of matching group on remote auththentication server.
func (o GroupMatchOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMatch) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

// ID.
func (o GroupMatchOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupMatch) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Name of remote auth server.
func (o GroupMatchOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMatch) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

type GroupMatchArrayOutput struct{ *pulumi.OutputState }

func (GroupMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupMatch)(nil)).Elem()
}

func (o GroupMatchArrayOutput) ToGroupMatchArrayOutput() GroupMatchArrayOutput {
	return o
}

func (o GroupMatchArrayOutput) ToGroupMatchArrayOutputWithContext(ctx context.Context) GroupMatchArrayOutput {
	return o
}

func (o GroupMatchArrayOutput) Index(i pulumi.IntInput) GroupMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupMatch {
		return vs[0].([]GroupMatch)[vs[1].(int)]
	}).(GroupMatchOutput)
}

type GroupMember struct {
	// Group member name.
	Name *string `pulumi:"name"`
}

// GroupMemberInput is an input type that accepts GroupMemberArgs and GroupMemberOutput values.
// You can construct a concrete instance of `GroupMemberInput` via:
//
//	GroupMemberArgs{...}
type GroupMemberInput interface {
	pulumi.Input

	ToGroupMemberOutput() GroupMemberOutput
	ToGroupMemberOutputWithContext(context.Context) GroupMemberOutput
}

type GroupMemberArgs struct {
	// Group member name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GroupMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMember)(nil)).Elem()
}

func (i GroupMemberArgs) ToGroupMemberOutput() GroupMemberOutput {
	return i.ToGroupMemberOutputWithContext(context.Background())
}

func (i GroupMemberArgs) ToGroupMemberOutputWithContext(ctx context.Context) GroupMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMemberOutput)
}

// GroupMemberArrayInput is an input type that accepts GroupMemberArray and GroupMemberArrayOutput values.
// You can construct a concrete instance of `GroupMemberArrayInput` via:
//
//	GroupMemberArray{ GroupMemberArgs{...} }
type GroupMemberArrayInput interface {
	pulumi.Input

	ToGroupMemberArrayOutput() GroupMemberArrayOutput
	ToGroupMemberArrayOutputWithContext(context.Context) GroupMemberArrayOutput
}

type GroupMemberArray []GroupMemberInput

func (GroupMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupMember)(nil)).Elem()
}

func (i GroupMemberArray) ToGroupMemberArrayOutput() GroupMemberArrayOutput {
	return i.ToGroupMemberArrayOutputWithContext(context.Background())
}

func (i GroupMemberArray) ToGroupMemberArrayOutputWithContext(ctx context.Context) GroupMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMemberArrayOutput)
}

type GroupMemberOutput struct{ *pulumi.OutputState }

func (GroupMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMember)(nil)).Elem()
}

func (o GroupMemberOutput) ToGroupMemberOutput() GroupMemberOutput {
	return o
}

func (o GroupMemberOutput) ToGroupMemberOutputWithContext(ctx context.Context) GroupMemberOutput {
	return o
}

// Group member name.
func (o GroupMemberOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMember) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GroupMemberArrayOutput struct{ *pulumi.OutputState }

func (GroupMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupMember)(nil)).Elem()
}

func (o GroupMemberArrayOutput) ToGroupMemberArrayOutput() GroupMemberArrayOutput {
	return o
}

func (o GroupMemberArrayOutput) ToGroupMemberArrayOutputWithContext(ctx context.Context) GroupMemberArrayOutput {
	return o
}

func (o GroupMemberArrayOutput) Index(i pulumi.IntInput) GroupMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupMember {
		return vs[0].([]GroupMember)[vs[1].(int)]
	}).(GroupMemberOutput)
}

type NacpolicySeverity struct {
	// Enter multiple severity levels, where 0 = Info, 1 = Low, ..., 4 = Critical
	SeverityNum *int `pulumi:"severityNum"`
}

// NacpolicySeverityInput is an input type that accepts NacpolicySeverityArgs and NacpolicySeverityOutput values.
// You can construct a concrete instance of `NacpolicySeverityInput` via:
//
//	NacpolicySeverityArgs{...}
type NacpolicySeverityInput interface {
	pulumi.Input

	ToNacpolicySeverityOutput() NacpolicySeverityOutput
	ToNacpolicySeverityOutputWithContext(context.Context) NacpolicySeverityOutput
}

type NacpolicySeverityArgs struct {
	// Enter multiple severity levels, where 0 = Info, 1 = Low, ..., 4 = Critical
	SeverityNum pulumi.IntPtrInput `pulumi:"severityNum"`
}

func (NacpolicySeverityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NacpolicySeverity)(nil)).Elem()
}

func (i NacpolicySeverityArgs) ToNacpolicySeverityOutput() NacpolicySeverityOutput {
	return i.ToNacpolicySeverityOutputWithContext(context.Background())
}

func (i NacpolicySeverityArgs) ToNacpolicySeverityOutputWithContext(ctx context.Context) NacpolicySeverityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacpolicySeverityOutput)
}

// NacpolicySeverityArrayInput is an input type that accepts NacpolicySeverityArray and NacpolicySeverityArrayOutput values.
// You can construct a concrete instance of `NacpolicySeverityArrayInput` via:
//
//	NacpolicySeverityArray{ NacpolicySeverityArgs{...} }
type NacpolicySeverityArrayInput interface {
	pulumi.Input

	ToNacpolicySeverityArrayOutput() NacpolicySeverityArrayOutput
	ToNacpolicySeverityArrayOutputWithContext(context.Context) NacpolicySeverityArrayOutput
}

type NacpolicySeverityArray []NacpolicySeverityInput

func (NacpolicySeverityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NacpolicySeverity)(nil)).Elem()
}

func (i NacpolicySeverityArray) ToNacpolicySeverityArrayOutput() NacpolicySeverityArrayOutput {
	return i.ToNacpolicySeverityArrayOutputWithContext(context.Background())
}

func (i NacpolicySeverityArray) ToNacpolicySeverityArrayOutputWithContext(ctx context.Context) NacpolicySeverityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacpolicySeverityArrayOutput)
}

type NacpolicySeverityOutput struct{ *pulumi.OutputState }

func (NacpolicySeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NacpolicySeverity)(nil)).Elem()
}

func (o NacpolicySeverityOutput) ToNacpolicySeverityOutput() NacpolicySeverityOutput {
	return o
}

func (o NacpolicySeverityOutput) ToNacpolicySeverityOutputWithContext(ctx context.Context) NacpolicySeverityOutput {
	return o
}

// Enter multiple severity levels, where 0 = Info, 1 = Low, ..., 4 = Critical
func (o NacpolicySeverityOutput) SeverityNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NacpolicySeverity) *int { return v.SeverityNum }).(pulumi.IntPtrOutput)
}

type NacpolicySeverityArrayOutput struct{ *pulumi.OutputState }

func (NacpolicySeverityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NacpolicySeverity)(nil)).Elem()
}

func (o NacpolicySeverityArrayOutput) ToNacpolicySeverityArrayOutput() NacpolicySeverityArrayOutput {
	return o
}

func (o NacpolicySeverityArrayOutput) ToNacpolicySeverityArrayOutputWithContext(ctx context.Context) NacpolicySeverityArrayOutput {
	return o
}

func (o NacpolicySeverityArrayOutput) Index(i pulumi.IntInput) NacpolicySeverityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NacpolicySeverity {
		return vs[0].([]NacpolicySeverity)[vs[1].(int)]
	}).(NacpolicySeverityOutput)
}

type NacpolicySwitchGroup struct {
	// Managed FortiSwitch group name from available options.
	Name *string `pulumi:"name"`
}

// NacpolicySwitchGroupInput is an input type that accepts NacpolicySwitchGroupArgs and NacpolicySwitchGroupOutput values.
// You can construct a concrete instance of `NacpolicySwitchGroupInput` via:
//
//	NacpolicySwitchGroupArgs{...}
type NacpolicySwitchGroupInput interface {
	pulumi.Input

	ToNacpolicySwitchGroupOutput() NacpolicySwitchGroupOutput
	ToNacpolicySwitchGroupOutputWithContext(context.Context) NacpolicySwitchGroupOutput
}

type NacpolicySwitchGroupArgs struct {
	// Managed FortiSwitch group name from available options.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (NacpolicySwitchGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NacpolicySwitchGroup)(nil)).Elem()
}

func (i NacpolicySwitchGroupArgs) ToNacpolicySwitchGroupOutput() NacpolicySwitchGroupOutput {
	return i.ToNacpolicySwitchGroupOutputWithContext(context.Background())
}

func (i NacpolicySwitchGroupArgs) ToNacpolicySwitchGroupOutputWithContext(ctx context.Context) NacpolicySwitchGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacpolicySwitchGroupOutput)
}

// NacpolicySwitchGroupArrayInput is an input type that accepts NacpolicySwitchGroupArray and NacpolicySwitchGroupArrayOutput values.
// You can construct a concrete instance of `NacpolicySwitchGroupArrayInput` via:
//
//	NacpolicySwitchGroupArray{ NacpolicySwitchGroupArgs{...} }
type NacpolicySwitchGroupArrayInput interface {
	pulumi.Input

	ToNacpolicySwitchGroupArrayOutput() NacpolicySwitchGroupArrayOutput
	ToNacpolicySwitchGroupArrayOutputWithContext(context.Context) NacpolicySwitchGroupArrayOutput
}

type NacpolicySwitchGroupArray []NacpolicySwitchGroupInput

func (NacpolicySwitchGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NacpolicySwitchGroup)(nil)).Elem()
}

func (i NacpolicySwitchGroupArray) ToNacpolicySwitchGroupArrayOutput() NacpolicySwitchGroupArrayOutput {
	return i.ToNacpolicySwitchGroupArrayOutputWithContext(context.Background())
}

func (i NacpolicySwitchGroupArray) ToNacpolicySwitchGroupArrayOutputWithContext(ctx context.Context) NacpolicySwitchGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacpolicySwitchGroupArrayOutput)
}

type NacpolicySwitchGroupOutput struct{ *pulumi.OutputState }

func (NacpolicySwitchGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NacpolicySwitchGroup)(nil)).Elem()
}

func (o NacpolicySwitchGroupOutput) ToNacpolicySwitchGroupOutput() NacpolicySwitchGroupOutput {
	return o
}

func (o NacpolicySwitchGroupOutput) ToNacpolicySwitchGroupOutputWithContext(ctx context.Context) NacpolicySwitchGroupOutput {
	return o
}

// Managed FortiSwitch group name from available options.
func (o NacpolicySwitchGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NacpolicySwitchGroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type NacpolicySwitchGroupArrayOutput struct{ *pulumi.OutputState }

func (NacpolicySwitchGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NacpolicySwitchGroup)(nil)).Elem()
}

func (o NacpolicySwitchGroupArrayOutput) ToNacpolicySwitchGroupArrayOutput() NacpolicySwitchGroupArrayOutput {
	return o
}

func (o NacpolicySwitchGroupArrayOutput) ToNacpolicySwitchGroupArrayOutputWithContext(ctx context.Context) NacpolicySwitchGroupArrayOutput {
	return o
}

func (o NacpolicySwitchGroupArrayOutput) Index(i pulumi.IntInput) NacpolicySwitchGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NacpolicySwitchGroup {
		return vs[0].([]NacpolicySwitchGroup)[vs[1].(int)]
	}).(NacpolicySwitchGroupOutput)
}

type NacpolicySwitchScope struct {
	// Managed FortiSwitch name from available options.
	SwitchId *string `pulumi:"switchId"`
}

// NacpolicySwitchScopeInput is an input type that accepts NacpolicySwitchScopeArgs and NacpolicySwitchScopeOutput values.
// You can construct a concrete instance of `NacpolicySwitchScopeInput` via:
//
//	NacpolicySwitchScopeArgs{...}
type NacpolicySwitchScopeInput interface {
	pulumi.Input

	ToNacpolicySwitchScopeOutput() NacpolicySwitchScopeOutput
	ToNacpolicySwitchScopeOutputWithContext(context.Context) NacpolicySwitchScopeOutput
}

type NacpolicySwitchScopeArgs struct {
	// Managed FortiSwitch name from available options.
	SwitchId pulumi.StringPtrInput `pulumi:"switchId"`
}

func (NacpolicySwitchScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NacpolicySwitchScope)(nil)).Elem()
}

func (i NacpolicySwitchScopeArgs) ToNacpolicySwitchScopeOutput() NacpolicySwitchScopeOutput {
	return i.ToNacpolicySwitchScopeOutputWithContext(context.Background())
}

func (i NacpolicySwitchScopeArgs) ToNacpolicySwitchScopeOutputWithContext(ctx context.Context) NacpolicySwitchScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacpolicySwitchScopeOutput)
}

// NacpolicySwitchScopeArrayInput is an input type that accepts NacpolicySwitchScopeArray and NacpolicySwitchScopeArrayOutput values.
// You can construct a concrete instance of `NacpolicySwitchScopeArrayInput` via:
//
//	NacpolicySwitchScopeArray{ NacpolicySwitchScopeArgs{...} }
type NacpolicySwitchScopeArrayInput interface {
	pulumi.Input

	ToNacpolicySwitchScopeArrayOutput() NacpolicySwitchScopeArrayOutput
	ToNacpolicySwitchScopeArrayOutputWithContext(context.Context) NacpolicySwitchScopeArrayOutput
}

type NacpolicySwitchScopeArray []NacpolicySwitchScopeInput

func (NacpolicySwitchScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NacpolicySwitchScope)(nil)).Elem()
}

func (i NacpolicySwitchScopeArray) ToNacpolicySwitchScopeArrayOutput() NacpolicySwitchScopeArrayOutput {
	return i.ToNacpolicySwitchScopeArrayOutputWithContext(context.Background())
}

func (i NacpolicySwitchScopeArray) ToNacpolicySwitchScopeArrayOutputWithContext(ctx context.Context) NacpolicySwitchScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacpolicySwitchScopeArrayOutput)
}

type NacpolicySwitchScopeOutput struct{ *pulumi.OutputState }

func (NacpolicySwitchScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NacpolicySwitchScope)(nil)).Elem()
}

func (o NacpolicySwitchScopeOutput) ToNacpolicySwitchScopeOutput() NacpolicySwitchScopeOutput {
	return o
}

func (o NacpolicySwitchScopeOutput) ToNacpolicySwitchScopeOutputWithContext(ctx context.Context) NacpolicySwitchScopeOutput {
	return o
}

// Managed FortiSwitch name from available options.
func (o NacpolicySwitchScopeOutput) SwitchId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NacpolicySwitchScope) *string { return v.SwitchId }).(pulumi.StringPtrOutput)
}

type NacpolicySwitchScopeArrayOutput struct{ *pulumi.OutputState }

func (NacpolicySwitchScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NacpolicySwitchScope)(nil)).Elem()
}

func (o NacpolicySwitchScopeArrayOutput) ToNacpolicySwitchScopeArrayOutput() NacpolicySwitchScopeArrayOutput {
	return o
}

func (o NacpolicySwitchScopeArrayOutput) ToNacpolicySwitchScopeArrayOutputWithContext(ctx context.Context) NacpolicySwitchScopeArrayOutput {
	return o
}

func (o NacpolicySwitchScopeArrayOutput) Index(i pulumi.IntInput) NacpolicySwitchScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NacpolicySwitchScope {
		return vs[0].([]NacpolicySwitchScope)[vs[1].(int)]
	}).(NacpolicySwitchScopeOutput)
}

type PeergrpMember struct {
	// Peer group member name.
	Name *string `pulumi:"name"`
}

// PeergrpMemberInput is an input type that accepts PeergrpMemberArgs and PeergrpMemberOutput values.
// You can construct a concrete instance of `PeergrpMemberInput` via:
//
//	PeergrpMemberArgs{...}
type PeergrpMemberInput interface {
	pulumi.Input

	ToPeergrpMemberOutput() PeergrpMemberOutput
	ToPeergrpMemberOutputWithContext(context.Context) PeergrpMemberOutput
}

type PeergrpMemberArgs struct {
	// Peer group member name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PeergrpMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeergrpMember)(nil)).Elem()
}

func (i PeergrpMemberArgs) ToPeergrpMemberOutput() PeergrpMemberOutput {
	return i.ToPeergrpMemberOutputWithContext(context.Background())
}

func (i PeergrpMemberArgs) ToPeergrpMemberOutputWithContext(ctx context.Context) PeergrpMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeergrpMemberOutput)
}

// PeergrpMemberArrayInput is an input type that accepts PeergrpMemberArray and PeergrpMemberArrayOutput values.
// You can construct a concrete instance of `PeergrpMemberArrayInput` via:
//
//	PeergrpMemberArray{ PeergrpMemberArgs{...} }
type PeergrpMemberArrayInput interface {
	pulumi.Input

	ToPeergrpMemberArrayOutput() PeergrpMemberArrayOutput
	ToPeergrpMemberArrayOutputWithContext(context.Context) PeergrpMemberArrayOutput
}

type PeergrpMemberArray []PeergrpMemberInput

func (PeergrpMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PeergrpMember)(nil)).Elem()
}

func (i PeergrpMemberArray) ToPeergrpMemberArrayOutput() PeergrpMemberArrayOutput {
	return i.ToPeergrpMemberArrayOutputWithContext(context.Background())
}

func (i PeergrpMemberArray) ToPeergrpMemberArrayOutputWithContext(ctx context.Context) PeergrpMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeergrpMemberArrayOutput)
}

type PeergrpMemberOutput struct{ *pulumi.OutputState }

func (PeergrpMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeergrpMember)(nil)).Elem()
}

func (o PeergrpMemberOutput) ToPeergrpMemberOutput() PeergrpMemberOutput {
	return o
}

func (o PeergrpMemberOutput) ToPeergrpMemberOutputWithContext(ctx context.Context) PeergrpMemberOutput {
	return o
}

// Peer group member name.
func (o PeergrpMemberOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeergrpMember) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PeergrpMemberArrayOutput struct{ *pulumi.OutputState }

func (PeergrpMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PeergrpMember)(nil)).Elem()
}

func (o PeergrpMemberArrayOutput) ToPeergrpMemberArrayOutput() PeergrpMemberArrayOutput {
	return o
}

func (o PeergrpMemberArrayOutput) ToPeergrpMemberArrayOutputWithContext(ctx context.Context) PeergrpMemberArrayOutput {
	return o
}

func (o PeergrpMemberArrayOutput) Index(i pulumi.IntInput) PeergrpMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PeergrpMember {
		return vs[0].([]PeergrpMember)[vs[1].(int)]
	}).(PeergrpMemberOutput)
}

type QuarantineTarget struct {
	// Description for the quarantine entry.
	Description *string `pulumi:"description"`
	// Quarantine entry name.
	Entry *string `pulumi:"entry"`
	// Quarantine MACs. The structure of `macs` block is documented below.
	Macs []QuarantineTargetMac `pulumi:"macs"`
}

// QuarantineTargetInput is an input type that accepts QuarantineTargetArgs and QuarantineTargetOutput values.
// You can construct a concrete instance of `QuarantineTargetInput` via:
//
//	QuarantineTargetArgs{...}
type QuarantineTargetInput interface {
	pulumi.Input

	ToQuarantineTargetOutput() QuarantineTargetOutput
	ToQuarantineTargetOutputWithContext(context.Context) QuarantineTargetOutput
}

type QuarantineTargetArgs struct {
	// Description for the quarantine entry.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Quarantine entry name.
	Entry pulumi.StringPtrInput `pulumi:"entry"`
	// Quarantine MACs. The structure of `macs` block is documented below.
	Macs QuarantineTargetMacArrayInput `pulumi:"macs"`
}

func (QuarantineTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuarantineTarget)(nil)).Elem()
}

func (i QuarantineTargetArgs) ToQuarantineTargetOutput() QuarantineTargetOutput {
	return i.ToQuarantineTargetOutputWithContext(context.Background())
}

func (i QuarantineTargetArgs) ToQuarantineTargetOutputWithContext(ctx context.Context) QuarantineTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuarantineTargetOutput)
}

// QuarantineTargetArrayInput is an input type that accepts QuarantineTargetArray and QuarantineTargetArrayOutput values.
// You can construct a concrete instance of `QuarantineTargetArrayInput` via:
//
//	QuarantineTargetArray{ QuarantineTargetArgs{...} }
type QuarantineTargetArrayInput interface {
	pulumi.Input

	ToQuarantineTargetArrayOutput() QuarantineTargetArrayOutput
	ToQuarantineTargetArrayOutputWithContext(context.Context) QuarantineTargetArrayOutput
}

type QuarantineTargetArray []QuarantineTargetInput

func (QuarantineTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuarantineTarget)(nil)).Elem()
}

func (i QuarantineTargetArray) ToQuarantineTargetArrayOutput() QuarantineTargetArrayOutput {
	return i.ToQuarantineTargetArrayOutputWithContext(context.Background())
}

func (i QuarantineTargetArray) ToQuarantineTargetArrayOutputWithContext(ctx context.Context) QuarantineTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuarantineTargetArrayOutput)
}

type QuarantineTargetOutput struct{ *pulumi.OutputState }

func (QuarantineTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuarantineTarget)(nil)).Elem()
}

func (o QuarantineTargetOutput) ToQuarantineTargetOutput() QuarantineTargetOutput {
	return o
}

func (o QuarantineTargetOutput) ToQuarantineTargetOutputWithContext(ctx context.Context) QuarantineTargetOutput {
	return o
}

// Description for the quarantine entry.
func (o QuarantineTargetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuarantineTarget) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Quarantine entry name.
func (o QuarantineTargetOutput) Entry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuarantineTarget) *string { return v.Entry }).(pulumi.StringPtrOutput)
}

// Quarantine MACs. The structure of `macs` block is documented below.
func (o QuarantineTargetOutput) Macs() QuarantineTargetMacArrayOutput {
	return o.ApplyT(func(v QuarantineTarget) []QuarantineTargetMac { return v.Macs }).(QuarantineTargetMacArrayOutput)
}

type QuarantineTargetArrayOutput struct{ *pulumi.OutputState }

func (QuarantineTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuarantineTarget)(nil)).Elem()
}

func (o QuarantineTargetArrayOutput) ToQuarantineTargetArrayOutput() QuarantineTargetArrayOutput {
	return o
}

func (o QuarantineTargetArrayOutput) ToQuarantineTargetArrayOutputWithContext(ctx context.Context) QuarantineTargetArrayOutput {
	return o
}

func (o QuarantineTargetArrayOutput) Index(i pulumi.IntInput) QuarantineTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QuarantineTarget {
		return vs[0].([]QuarantineTarget)[vs[1].(int)]
	}).(QuarantineTargetOutput)
}

type QuarantineTargetMac struct {
	// Description for the quarantine MAC.
	Description *string `pulumi:"description"`
	// Enable/Disable dropping of quarantined device traffic Valid values: `disable`, `enable`.
	Drop *string `pulumi:"drop"`
	// FSW entry id for the quarantine MAC.
	EntryId *int `pulumi:"entryId"`
	// Quarantine MAC.
	Mac *string `pulumi:"mac"`
	// Parent entry name.
	Parent *string `pulumi:"parent"`
}

// QuarantineTargetMacInput is an input type that accepts QuarantineTargetMacArgs and QuarantineTargetMacOutput values.
// You can construct a concrete instance of `QuarantineTargetMacInput` via:
//
//	QuarantineTargetMacArgs{...}
type QuarantineTargetMacInput interface {
	pulumi.Input

	ToQuarantineTargetMacOutput() QuarantineTargetMacOutput
	ToQuarantineTargetMacOutputWithContext(context.Context) QuarantineTargetMacOutput
}

type QuarantineTargetMacArgs struct {
	// Description for the quarantine MAC.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enable/Disable dropping of quarantined device traffic Valid values: `disable`, `enable`.
	Drop pulumi.StringPtrInput `pulumi:"drop"`
	// FSW entry id for the quarantine MAC.
	EntryId pulumi.IntPtrInput `pulumi:"entryId"`
	// Quarantine MAC.
	Mac pulumi.StringPtrInput `pulumi:"mac"`
	// Parent entry name.
	Parent pulumi.StringPtrInput `pulumi:"parent"`
}

func (QuarantineTargetMacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuarantineTargetMac)(nil)).Elem()
}

func (i QuarantineTargetMacArgs) ToQuarantineTargetMacOutput() QuarantineTargetMacOutput {
	return i.ToQuarantineTargetMacOutputWithContext(context.Background())
}

func (i QuarantineTargetMacArgs) ToQuarantineTargetMacOutputWithContext(ctx context.Context) QuarantineTargetMacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuarantineTargetMacOutput)
}

// QuarantineTargetMacArrayInput is an input type that accepts QuarantineTargetMacArray and QuarantineTargetMacArrayOutput values.
// You can construct a concrete instance of `QuarantineTargetMacArrayInput` via:
//
//	QuarantineTargetMacArray{ QuarantineTargetMacArgs{...} }
type QuarantineTargetMacArrayInput interface {
	pulumi.Input

	ToQuarantineTargetMacArrayOutput() QuarantineTargetMacArrayOutput
	ToQuarantineTargetMacArrayOutputWithContext(context.Context) QuarantineTargetMacArrayOutput
}

type QuarantineTargetMacArray []QuarantineTargetMacInput

func (QuarantineTargetMacArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuarantineTargetMac)(nil)).Elem()
}

func (i QuarantineTargetMacArray) ToQuarantineTargetMacArrayOutput() QuarantineTargetMacArrayOutput {
	return i.ToQuarantineTargetMacArrayOutputWithContext(context.Background())
}

func (i QuarantineTargetMacArray) ToQuarantineTargetMacArrayOutputWithContext(ctx context.Context) QuarantineTargetMacArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuarantineTargetMacArrayOutput)
}

type QuarantineTargetMacOutput struct{ *pulumi.OutputState }

func (QuarantineTargetMacOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuarantineTargetMac)(nil)).Elem()
}

func (o QuarantineTargetMacOutput) ToQuarantineTargetMacOutput() QuarantineTargetMacOutput {
	return o
}

func (o QuarantineTargetMacOutput) ToQuarantineTargetMacOutputWithContext(ctx context.Context) QuarantineTargetMacOutput {
	return o
}

// Description for the quarantine MAC.
func (o QuarantineTargetMacOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuarantineTargetMac) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enable/Disable dropping of quarantined device traffic Valid values: `disable`, `enable`.
func (o QuarantineTargetMacOutput) Drop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuarantineTargetMac) *string { return v.Drop }).(pulumi.StringPtrOutput)
}

// FSW entry id for the quarantine MAC.
func (o QuarantineTargetMacOutput) EntryId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QuarantineTargetMac) *int { return v.EntryId }).(pulumi.IntPtrOutput)
}

// Quarantine MAC.
func (o QuarantineTargetMacOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuarantineTargetMac) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

// Parent entry name.
func (o QuarantineTargetMacOutput) Parent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuarantineTargetMac) *string { return v.Parent }).(pulumi.StringPtrOutput)
}

type QuarantineTargetMacArrayOutput struct{ *pulumi.OutputState }

func (QuarantineTargetMacArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuarantineTargetMac)(nil)).Elem()
}

func (o QuarantineTargetMacArrayOutput) ToQuarantineTargetMacArrayOutput() QuarantineTargetMacArrayOutput {
	return o
}

func (o QuarantineTargetMacArrayOutput) ToQuarantineTargetMacArrayOutputWithContext(ctx context.Context) QuarantineTargetMacArrayOutput {
	return o
}

func (o QuarantineTargetMacArrayOutput) Index(i pulumi.IntInput) QuarantineTargetMacOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QuarantineTargetMac {
		return vs[0].([]QuarantineTargetMac)[vs[1].(int)]
	}).(QuarantineTargetMacOutput)
}

type RadiusAccountingServer struct {
	// ID (0 - 4294967295).
	Id *int `pulumi:"id"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// RADIUS accounting port number.
	Port *int `pulumi:"port"`
	// Secret key.
	Secret *string `pulumi:"secret"`
	// {<name_str|ip_str>} Server CN domain name or IP.
	Server *string `pulumi:"server"`
	// Source IP address for communications to the RADIUS server.
	SourceIp *string `pulumi:"sourceIp"`
	// Status. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
}

// RadiusAccountingServerInput is an input type that accepts RadiusAccountingServerArgs and RadiusAccountingServerOutput values.
// You can construct a concrete instance of `RadiusAccountingServerInput` via:
//
//	RadiusAccountingServerArgs{...}
type RadiusAccountingServerInput interface {
	pulumi.Input

	ToRadiusAccountingServerOutput() RadiusAccountingServerOutput
	ToRadiusAccountingServerOutputWithContext(context.Context) RadiusAccountingServerOutput
}

type RadiusAccountingServerArgs struct {
	// ID (0 - 4294967295).
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput `pulumi:"interfaceSelectMethod"`
	// RADIUS accounting port number.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Secret key.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// {<name_str|ip_str>} Server CN domain name or IP.
	Server pulumi.StringPtrInput `pulumi:"server"`
	// Source IP address for communications to the RADIUS server.
	SourceIp pulumi.StringPtrInput `pulumi:"sourceIp"`
	// Status. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (RadiusAccountingServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RadiusAccountingServer)(nil)).Elem()
}

func (i RadiusAccountingServerArgs) ToRadiusAccountingServerOutput() RadiusAccountingServerOutput {
	return i.ToRadiusAccountingServerOutputWithContext(context.Background())
}

func (i RadiusAccountingServerArgs) ToRadiusAccountingServerOutputWithContext(ctx context.Context) RadiusAccountingServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RadiusAccountingServerOutput)
}

// RadiusAccountingServerArrayInput is an input type that accepts RadiusAccountingServerArray and RadiusAccountingServerArrayOutput values.
// You can construct a concrete instance of `RadiusAccountingServerArrayInput` via:
//
//	RadiusAccountingServerArray{ RadiusAccountingServerArgs{...} }
type RadiusAccountingServerArrayInput interface {
	pulumi.Input

	ToRadiusAccountingServerArrayOutput() RadiusAccountingServerArrayOutput
	ToRadiusAccountingServerArrayOutputWithContext(context.Context) RadiusAccountingServerArrayOutput
}

type RadiusAccountingServerArray []RadiusAccountingServerInput

func (RadiusAccountingServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RadiusAccountingServer)(nil)).Elem()
}

func (i RadiusAccountingServerArray) ToRadiusAccountingServerArrayOutput() RadiusAccountingServerArrayOutput {
	return i.ToRadiusAccountingServerArrayOutputWithContext(context.Background())
}

func (i RadiusAccountingServerArray) ToRadiusAccountingServerArrayOutputWithContext(ctx context.Context) RadiusAccountingServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RadiusAccountingServerArrayOutput)
}

type RadiusAccountingServerOutput struct{ *pulumi.OutputState }

func (RadiusAccountingServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RadiusAccountingServer)(nil)).Elem()
}

func (o RadiusAccountingServerOutput) ToRadiusAccountingServerOutput() RadiusAccountingServerOutput {
	return o
}

func (o RadiusAccountingServerOutput) ToRadiusAccountingServerOutputWithContext(ctx context.Context) RadiusAccountingServerOutput {
	return o
}

// ID (0 - 4294967295).
func (o RadiusAccountingServerOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RadiusAccountingServer) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Specify outgoing interface to reach server.
func (o RadiusAccountingServerOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RadiusAccountingServer) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
func (o RadiusAccountingServerOutput) InterfaceSelectMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RadiusAccountingServer) *string { return v.InterfaceSelectMethod }).(pulumi.StringPtrOutput)
}

// RADIUS accounting port number.
func (o RadiusAccountingServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RadiusAccountingServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Secret key.
func (o RadiusAccountingServerOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RadiusAccountingServer) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// {<name_str|ip_str>} Server CN domain name or IP.
func (o RadiusAccountingServerOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RadiusAccountingServer) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// Source IP address for communications to the RADIUS server.
func (o RadiusAccountingServerOutput) SourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RadiusAccountingServer) *string { return v.SourceIp }).(pulumi.StringPtrOutput)
}

// Status. Valid values: `enable`, `disable`.
func (o RadiusAccountingServerOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RadiusAccountingServer) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type RadiusAccountingServerArrayOutput struct{ *pulumi.OutputState }

func (RadiusAccountingServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RadiusAccountingServer)(nil)).Elem()
}

func (o RadiusAccountingServerArrayOutput) ToRadiusAccountingServerArrayOutput() RadiusAccountingServerArrayOutput {
	return o
}

func (o RadiusAccountingServerArrayOutput) ToRadiusAccountingServerArrayOutputWithContext(ctx context.Context) RadiusAccountingServerArrayOutput {
	return o
}

func (o RadiusAccountingServerArrayOutput) Index(i pulumi.IntInput) RadiusAccountingServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RadiusAccountingServer {
		return vs[0].([]RadiusAccountingServer)[vs[1].(int)]
	}).(RadiusAccountingServerOutput)
}

type RadiusClass struct {
	// Class name.
	Name *string `pulumi:"name"`
}

// RadiusClassInput is an input type that accepts RadiusClassArgs and RadiusClassOutput values.
// You can construct a concrete instance of `RadiusClassInput` via:
//
//	RadiusClassArgs{...}
type RadiusClassInput interface {
	pulumi.Input

	ToRadiusClassOutput() RadiusClassOutput
	ToRadiusClassOutputWithContext(context.Context) RadiusClassOutput
}

type RadiusClassArgs struct {
	// Class name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RadiusClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RadiusClass)(nil)).Elem()
}

func (i RadiusClassArgs) ToRadiusClassOutput() RadiusClassOutput {
	return i.ToRadiusClassOutputWithContext(context.Background())
}

func (i RadiusClassArgs) ToRadiusClassOutputWithContext(ctx context.Context) RadiusClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RadiusClassOutput)
}

// RadiusClassArrayInput is an input type that accepts RadiusClassArray and RadiusClassArrayOutput values.
// You can construct a concrete instance of `RadiusClassArrayInput` via:
//
//	RadiusClassArray{ RadiusClassArgs{...} }
type RadiusClassArrayInput interface {
	pulumi.Input

	ToRadiusClassArrayOutput() RadiusClassArrayOutput
	ToRadiusClassArrayOutputWithContext(context.Context) RadiusClassArrayOutput
}

type RadiusClassArray []RadiusClassInput

func (RadiusClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RadiusClass)(nil)).Elem()
}

func (i RadiusClassArray) ToRadiusClassArrayOutput() RadiusClassArrayOutput {
	return i.ToRadiusClassArrayOutputWithContext(context.Background())
}

func (i RadiusClassArray) ToRadiusClassArrayOutputWithContext(ctx context.Context) RadiusClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RadiusClassArrayOutput)
}

type RadiusClassOutput struct{ *pulumi.OutputState }

func (RadiusClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RadiusClass)(nil)).Elem()
}

func (o RadiusClassOutput) ToRadiusClassOutput() RadiusClassOutput {
	return o
}

func (o RadiusClassOutput) ToRadiusClassOutputWithContext(ctx context.Context) RadiusClassOutput {
	return o
}

// Class name.
func (o RadiusClassOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RadiusClass) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RadiusClassArrayOutput struct{ *pulumi.OutputState }

func (RadiusClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RadiusClass)(nil)).Elem()
}

func (o RadiusClassArrayOutput) ToRadiusClassArrayOutput() RadiusClassArrayOutput {
	return o
}

func (o RadiusClassArrayOutput) ToRadiusClassArrayOutputWithContext(ctx context.Context) RadiusClassArrayOutput {
	return o
}

func (o RadiusClassArrayOutput) Index(i pulumi.IntInput) RadiusClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RadiusClass {
		return vs[0].([]RadiusClass)[vs[1].(int)]
	}).(RadiusClassOutput)
}

type SecurityexemptlistRule struct {
	// Devices or device groups. The structure of `devices` block is documented below.
	Devices []SecurityexemptlistRuleDevice `pulumi:"devices"`
	// Destination addresses or address groups. The structure of `dstaddr` block is documented below.
	Dstaddrs []SecurityexemptlistRuleDstaddr `pulumi:"dstaddrs"`
	// ID.
	Id *int `pulumi:"id"`
	// Destination services. The structure of `service` block is documented below.
	Services []SecurityexemptlistRuleService `pulumi:"services"`
	// Source addresses or address groups. The structure of `srcaddr` block is documented below.
	Srcaddrs []SecurityexemptlistRuleSrcaddr `pulumi:"srcaddrs"`
}

// SecurityexemptlistRuleInput is an input type that accepts SecurityexemptlistRuleArgs and SecurityexemptlistRuleOutput values.
// You can construct a concrete instance of `SecurityexemptlistRuleInput` via:
//
//	SecurityexemptlistRuleArgs{...}
type SecurityexemptlistRuleInput interface {
	pulumi.Input

	ToSecurityexemptlistRuleOutput() SecurityexemptlistRuleOutput
	ToSecurityexemptlistRuleOutputWithContext(context.Context) SecurityexemptlistRuleOutput
}

type SecurityexemptlistRuleArgs struct {
	// Devices or device groups. The structure of `devices` block is documented below.
	Devices SecurityexemptlistRuleDeviceArrayInput `pulumi:"devices"`
	// Destination addresses or address groups. The structure of `dstaddr` block is documented below.
	Dstaddrs SecurityexemptlistRuleDstaddrArrayInput `pulumi:"dstaddrs"`
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Destination services. The structure of `service` block is documented below.
	Services SecurityexemptlistRuleServiceArrayInput `pulumi:"services"`
	// Source addresses or address groups. The structure of `srcaddr` block is documented below.
	Srcaddrs SecurityexemptlistRuleSrcaddrArrayInput `pulumi:"srcaddrs"`
}

func (SecurityexemptlistRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityexemptlistRule)(nil)).Elem()
}

func (i SecurityexemptlistRuleArgs) ToSecurityexemptlistRuleOutput() SecurityexemptlistRuleOutput {
	return i.ToSecurityexemptlistRuleOutputWithContext(context.Background())
}

func (i SecurityexemptlistRuleArgs) ToSecurityexemptlistRuleOutputWithContext(ctx context.Context) SecurityexemptlistRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityexemptlistRuleOutput)
}

// SecurityexemptlistRuleArrayInput is an input type that accepts SecurityexemptlistRuleArray and SecurityexemptlistRuleArrayOutput values.
// You can construct a concrete instance of `SecurityexemptlistRuleArrayInput` via:
//
//	SecurityexemptlistRuleArray{ SecurityexemptlistRuleArgs{...} }
type SecurityexemptlistRuleArrayInput interface {
	pulumi.Input

	ToSecurityexemptlistRuleArrayOutput() SecurityexemptlistRuleArrayOutput
	ToSecurityexemptlistRuleArrayOutputWithContext(context.Context) SecurityexemptlistRuleArrayOutput
}

type SecurityexemptlistRuleArray []SecurityexemptlistRuleInput

func (SecurityexemptlistRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityexemptlistRule)(nil)).Elem()
}

func (i SecurityexemptlistRuleArray) ToSecurityexemptlistRuleArrayOutput() SecurityexemptlistRuleArrayOutput {
	return i.ToSecurityexemptlistRuleArrayOutputWithContext(context.Background())
}

func (i SecurityexemptlistRuleArray) ToSecurityexemptlistRuleArrayOutputWithContext(ctx context.Context) SecurityexemptlistRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityexemptlistRuleArrayOutput)
}

type SecurityexemptlistRuleOutput struct{ *pulumi.OutputState }

func (SecurityexemptlistRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityexemptlistRule)(nil)).Elem()
}

func (o SecurityexemptlistRuleOutput) ToSecurityexemptlistRuleOutput() SecurityexemptlistRuleOutput {
	return o
}

func (o SecurityexemptlistRuleOutput) ToSecurityexemptlistRuleOutputWithContext(ctx context.Context) SecurityexemptlistRuleOutput {
	return o
}

// Devices or device groups. The structure of `devices` block is documented below.
func (o SecurityexemptlistRuleOutput) Devices() SecurityexemptlistRuleDeviceArrayOutput {
	return o.ApplyT(func(v SecurityexemptlistRule) []SecurityexemptlistRuleDevice { return v.Devices }).(SecurityexemptlistRuleDeviceArrayOutput)
}

// Destination addresses or address groups. The structure of `dstaddr` block is documented below.
func (o SecurityexemptlistRuleOutput) Dstaddrs() SecurityexemptlistRuleDstaddrArrayOutput {
	return o.ApplyT(func(v SecurityexemptlistRule) []SecurityexemptlistRuleDstaddr { return v.Dstaddrs }).(SecurityexemptlistRuleDstaddrArrayOutput)
}

// ID.
func (o SecurityexemptlistRuleOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityexemptlistRule) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Destination services. The structure of `service` block is documented below.
func (o SecurityexemptlistRuleOutput) Services() SecurityexemptlistRuleServiceArrayOutput {
	return o.ApplyT(func(v SecurityexemptlistRule) []SecurityexemptlistRuleService { return v.Services }).(SecurityexemptlistRuleServiceArrayOutput)
}

// Source addresses or address groups. The structure of `srcaddr` block is documented below.
func (o SecurityexemptlistRuleOutput) Srcaddrs() SecurityexemptlistRuleSrcaddrArrayOutput {
	return o.ApplyT(func(v SecurityexemptlistRule) []SecurityexemptlistRuleSrcaddr { return v.Srcaddrs }).(SecurityexemptlistRuleSrcaddrArrayOutput)
}

type SecurityexemptlistRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityexemptlistRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityexemptlistRule)(nil)).Elem()
}

func (o SecurityexemptlistRuleArrayOutput) ToSecurityexemptlistRuleArrayOutput() SecurityexemptlistRuleArrayOutput {
	return o
}

func (o SecurityexemptlistRuleArrayOutput) ToSecurityexemptlistRuleArrayOutputWithContext(ctx context.Context) SecurityexemptlistRuleArrayOutput {
	return o
}

func (o SecurityexemptlistRuleArrayOutput) Index(i pulumi.IntInput) SecurityexemptlistRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityexemptlistRule {
		return vs[0].([]SecurityexemptlistRule)[vs[1].(int)]
	}).(SecurityexemptlistRuleOutput)
}

type SecurityexemptlistRuleDevice struct {
	// Device or group name.
	Name *string `pulumi:"name"`
}

// SecurityexemptlistRuleDeviceInput is an input type that accepts SecurityexemptlistRuleDeviceArgs and SecurityexemptlistRuleDeviceOutput values.
// You can construct a concrete instance of `SecurityexemptlistRuleDeviceInput` via:
//
//	SecurityexemptlistRuleDeviceArgs{...}
type SecurityexemptlistRuleDeviceInput interface {
	pulumi.Input

	ToSecurityexemptlistRuleDeviceOutput() SecurityexemptlistRuleDeviceOutput
	ToSecurityexemptlistRuleDeviceOutputWithContext(context.Context) SecurityexemptlistRuleDeviceOutput
}

type SecurityexemptlistRuleDeviceArgs struct {
	// Device or group name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SecurityexemptlistRuleDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityexemptlistRuleDevice)(nil)).Elem()
}

func (i SecurityexemptlistRuleDeviceArgs) ToSecurityexemptlistRuleDeviceOutput() SecurityexemptlistRuleDeviceOutput {
	return i.ToSecurityexemptlistRuleDeviceOutputWithContext(context.Background())
}

func (i SecurityexemptlistRuleDeviceArgs) ToSecurityexemptlistRuleDeviceOutputWithContext(ctx context.Context) SecurityexemptlistRuleDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityexemptlistRuleDeviceOutput)
}

// SecurityexemptlistRuleDeviceArrayInput is an input type that accepts SecurityexemptlistRuleDeviceArray and SecurityexemptlistRuleDeviceArrayOutput values.
// You can construct a concrete instance of `SecurityexemptlistRuleDeviceArrayInput` via:
//
//	SecurityexemptlistRuleDeviceArray{ SecurityexemptlistRuleDeviceArgs{...} }
type SecurityexemptlistRuleDeviceArrayInput interface {
	pulumi.Input

	ToSecurityexemptlistRuleDeviceArrayOutput() SecurityexemptlistRuleDeviceArrayOutput
	ToSecurityexemptlistRuleDeviceArrayOutputWithContext(context.Context) SecurityexemptlistRuleDeviceArrayOutput
}

type SecurityexemptlistRuleDeviceArray []SecurityexemptlistRuleDeviceInput

func (SecurityexemptlistRuleDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityexemptlistRuleDevice)(nil)).Elem()
}

func (i SecurityexemptlistRuleDeviceArray) ToSecurityexemptlistRuleDeviceArrayOutput() SecurityexemptlistRuleDeviceArrayOutput {
	return i.ToSecurityexemptlistRuleDeviceArrayOutputWithContext(context.Background())
}

func (i SecurityexemptlistRuleDeviceArray) ToSecurityexemptlistRuleDeviceArrayOutputWithContext(ctx context.Context) SecurityexemptlistRuleDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityexemptlistRuleDeviceArrayOutput)
}

type SecurityexemptlistRuleDeviceOutput struct{ *pulumi.OutputState }

func (SecurityexemptlistRuleDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityexemptlistRuleDevice)(nil)).Elem()
}

func (o SecurityexemptlistRuleDeviceOutput) ToSecurityexemptlistRuleDeviceOutput() SecurityexemptlistRuleDeviceOutput {
	return o
}

func (o SecurityexemptlistRuleDeviceOutput) ToSecurityexemptlistRuleDeviceOutputWithContext(ctx context.Context) SecurityexemptlistRuleDeviceOutput {
	return o
}

// Device or group name.
func (o SecurityexemptlistRuleDeviceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityexemptlistRuleDevice) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SecurityexemptlistRuleDeviceArrayOutput struct{ *pulumi.OutputState }

func (SecurityexemptlistRuleDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityexemptlistRuleDevice)(nil)).Elem()
}

func (o SecurityexemptlistRuleDeviceArrayOutput) ToSecurityexemptlistRuleDeviceArrayOutput() SecurityexemptlistRuleDeviceArrayOutput {
	return o
}

func (o SecurityexemptlistRuleDeviceArrayOutput) ToSecurityexemptlistRuleDeviceArrayOutputWithContext(ctx context.Context) SecurityexemptlistRuleDeviceArrayOutput {
	return o
}

func (o SecurityexemptlistRuleDeviceArrayOutput) Index(i pulumi.IntInput) SecurityexemptlistRuleDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityexemptlistRuleDevice {
		return vs[0].([]SecurityexemptlistRuleDevice)[vs[1].(int)]
	}).(SecurityexemptlistRuleDeviceOutput)
}

type SecurityexemptlistRuleDstaddr struct {
	// Address or group name.
	Name *string `pulumi:"name"`
}

// SecurityexemptlistRuleDstaddrInput is an input type that accepts SecurityexemptlistRuleDstaddrArgs and SecurityexemptlistRuleDstaddrOutput values.
// You can construct a concrete instance of `SecurityexemptlistRuleDstaddrInput` via:
//
//	SecurityexemptlistRuleDstaddrArgs{...}
type SecurityexemptlistRuleDstaddrInput interface {
	pulumi.Input

	ToSecurityexemptlistRuleDstaddrOutput() SecurityexemptlistRuleDstaddrOutput
	ToSecurityexemptlistRuleDstaddrOutputWithContext(context.Context) SecurityexemptlistRuleDstaddrOutput
}

type SecurityexemptlistRuleDstaddrArgs struct {
	// Address or group name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SecurityexemptlistRuleDstaddrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityexemptlistRuleDstaddr)(nil)).Elem()
}

func (i SecurityexemptlistRuleDstaddrArgs) ToSecurityexemptlistRuleDstaddrOutput() SecurityexemptlistRuleDstaddrOutput {
	return i.ToSecurityexemptlistRuleDstaddrOutputWithContext(context.Background())
}

func (i SecurityexemptlistRuleDstaddrArgs) ToSecurityexemptlistRuleDstaddrOutputWithContext(ctx context.Context) SecurityexemptlistRuleDstaddrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityexemptlistRuleDstaddrOutput)
}

// SecurityexemptlistRuleDstaddrArrayInput is an input type that accepts SecurityexemptlistRuleDstaddrArray and SecurityexemptlistRuleDstaddrArrayOutput values.
// You can construct a concrete instance of `SecurityexemptlistRuleDstaddrArrayInput` via:
//
//	SecurityexemptlistRuleDstaddrArray{ SecurityexemptlistRuleDstaddrArgs{...} }
type SecurityexemptlistRuleDstaddrArrayInput interface {
	pulumi.Input

	ToSecurityexemptlistRuleDstaddrArrayOutput() SecurityexemptlistRuleDstaddrArrayOutput
	ToSecurityexemptlistRuleDstaddrArrayOutputWithContext(context.Context) SecurityexemptlistRuleDstaddrArrayOutput
}

type SecurityexemptlistRuleDstaddrArray []SecurityexemptlistRuleDstaddrInput

func (SecurityexemptlistRuleDstaddrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityexemptlistRuleDstaddr)(nil)).Elem()
}

func (i SecurityexemptlistRuleDstaddrArray) ToSecurityexemptlistRuleDstaddrArrayOutput() SecurityexemptlistRuleDstaddrArrayOutput {
	return i.ToSecurityexemptlistRuleDstaddrArrayOutputWithContext(context.Background())
}

func (i SecurityexemptlistRuleDstaddrArray) ToSecurityexemptlistRuleDstaddrArrayOutputWithContext(ctx context.Context) SecurityexemptlistRuleDstaddrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityexemptlistRuleDstaddrArrayOutput)
}

type SecurityexemptlistRuleDstaddrOutput struct{ *pulumi.OutputState }

func (SecurityexemptlistRuleDstaddrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityexemptlistRuleDstaddr)(nil)).Elem()
}

func (o SecurityexemptlistRuleDstaddrOutput) ToSecurityexemptlistRuleDstaddrOutput() SecurityexemptlistRuleDstaddrOutput {
	return o
}

func (o SecurityexemptlistRuleDstaddrOutput) ToSecurityexemptlistRuleDstaddrOutputWithContext(ctx context.Context) SecurityexemptlistRuleDstaddrOutput {
	return o
}

// Address or group name.
func (o SecurityexemptlistRuleDstaddrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityexemptlistRuleDstaddr) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SecurityexemptlistRuleDstaddrArrayOutput struct{ *pulumi.OutputState }

func (SecurityexemptlistRuleDstaddrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityexemptlistRuleDstaddr)(nil)).Elem()
}

func (o SecurityexemptlistRuleDstaddrArrayOutput) ToSecurityexemptlistRuleDstaddrArrayOutput() SecurityexemptlistRuleDstaddrArrayOutput {
	return o
}

func (o SecurityexemptlistRuleDstaddrArrayOutput) ToSecurityexemptlistRuleDstaddrArrayOutputWithContext(ctx context.Context) SecurityexemptlistRuleDstaddrArrayOutput {
	return o
}

func (o SecurityexemptlistRuleDstaddrArrayOutput) Index(i pulumi.IntInput) SecurityexemptlistRuleDstaddrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityexemptlistRuleDstaddr {
		return vs[0].([]SecurityexemptlistRuleDstaddr)[vs[1].(int)]
	}).(SecurityexemptlistRuleDstaddrOutput)
}

type SecurityexemptlistRuleService struct {
	// Service name.
	Name *string `pulumi:"name"`
}

// SecurityexemptlistRuleServiceInput is an input type that accepts SecurityexemptlistRuleServiceArgs and SecurityexemptlistRuleServiceOutput values.
// You can construct a concrete instance of `SecurityexemptlistRuleServiceInput` via:
//
//	SecurityexemptlistRuleServiceArgs{...}
type SecurityexemptlistRuleServiceInput interface {
	pulumi.Input

	ToSecurityexemptlistRuleServiceOutput() SecurityexemptlistRuleServiceOutput
	ToSecurityexemptlistRuleServiceOutputWithContext(context.Context) SecurityexemptlistRuleServiceOutput
}

type SecurityexemptlistRuleServiceArgs struct {
	// Service name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SecurityexemptlistRuleServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityexemptlistRuleService)(nil)).Elem()
}

func (i SecurityexemptlistRuleServiceArgs) ToSecurityexemptlistRuleServiceOutput() SecurityexemptlistRuleServiceOutput {
	return i.ToSecurityexemptlistRuleServiceOutputWithContext(context.Background())
}

func (i SecurityexemptlistRuleServiceArgs) ToSecurityexemptlistRuleServiceOutputWithContext(ctx context.Context) SecurityexemptlistRuleServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityexemptlistRuleServiceOutput)
}

// SecurityexemptlistRuleServiceArrayInput is an input type that accepts SecurityexemptlistRuleServiceArray and SecurityexemptlistRuleServiceArrayOutput values.
// You can construct a concrete instance of `SecurityexemptlistRuleServiceArrayInput` via:
//
//	SecurityexemptlistRuleServiceArray{ SecurityexemptlistRuleServiceArgs{...} }
type SecurityexemptlistRuleServiceArrayInput interface {
	pulumi.Input

	ToSecurityexemptlistRuleServiceArrayOutput() SecurityexemptlistRuleServiceArrayOutput
	ToSecurityexemptlistRuleServiceArrayOutputWithContext(context.Context) SecurityexemptlistRuleServiceArrayOutput
}

type SecurityexemptlistRuleServiceArray []SecurityexemptlistRuleServiceInput

func (SecurityexemptlistRuleServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityexemptlistRuleService)(nil)).Elem()
}

func (i SecurityexemptlistRuleServiceArray) ToSecurityexemptlistRuleServiceArrayOutput() SecurityexemptlistRuleServiceArrayOutput {
	return i.ToSecurityexemptlistRuleServiceArrayOutputWithContext(context.Background())
}

func (i SecurityexemptlistRuleServiceArray) ToSecurityexemptlistRuleServiceArrayOutputWithContext(ctx context.Context) SecurityexemptlistRuleServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityexemptlistRuleServiceArrayOutput)
}

type SecurityexemptlistRuleServiceOutput struct{ *pulumi.OutputState }

func (SecurityexemptlistRuleServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityexemptlistRuleService)(nil)).Elem()
}

func (o SecurityexemptlistRuleServiceOutput) ToSecurityexemptlistRuleServiceOutput() SecurityexemptlistRuleServiceOutput {
	return o
}

func (o SecurityexemptlistRuleServiceOutput) ToSecurityexemptlistRuleServiceOutputWithContext(ctx context.Context) SecurityexemptlistRuleServiceOutput {
	return o
}

// Service name.
func (o SecurityexemptlistRuleServiceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityexemptlistRuleService) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SecurityexemptlistRuleServiceArrayOutput struct{ *pulumi.OutputState }

func (SecurityexemptlistRuleServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityexemptlistRuleService)(nil)).Elem()
}

func (o SecurityexemptlistRuleServiceArrayOutput) ToSecurityexemptlistRuleServiceArrayOutput() SecurityexemptlistRuleServiceArrayOutput {
	return o
}

func (o SecurityexemptlistRuleServiceArrayOutput) ToSecurityexemptlistRuleServiceArrayOutputWithContext(ctx context.Context) SecurityexemptlistRuleServiceArrayOutput {
	return o
}

func (o SecurityexemptlistRuleServiceArrayOutput) Index(i pulumi.IntInput) SecurityexemptlistRuleServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityexemptlistRuleService {
		return vs[0].([]SecurityexemptlistRuleService)[vs[1].(int)]
	}).(SecurityexemptlistRuleServiceOutput)
}

type SecurityexemptlistRuleSrcaddr struct {
	// Address or group name.
	Name *string `pulumi:"name"`
}

// SecurityexemptlistRuleSrcaddrInput is an input type that accepts SecurityexemptlistRuleSrcaddrArgs and SecurityexemptlistRuleSrcaddrOutput values.
// You can construct a concrete instance of `SecurityexemptlistRuleSrcaddrInput` via:
//
//	SecurityexemptlistRuleSrcaddrArgs{...}
type SecurityexemptlistRuleSrcaddrInput interface {
	pulumi.Input

	ToSecurityexemptlistRuleSrcaddrOutput() SecurityexemptlistRuleSrcaddrOutput
	ToSecurityexemptlistRuleSrcaddrOutputWithContext(context.Context) SecurityexemptlistRuleSrcaddrOutput
}

type SecurityexemptlistRuleSrcaddrArgs struct {
	// Address or group name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SecurityexemptlistRuleSrcaddrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityexemptlistRuleSrcaddr)(nil)).Elem()
}

func (i SecurityexemptlistRuleSrcaddrArgs) ToSecurityexemptlistRuleSrcaddrOutput() SecurityexemptlistRuleSrcaddrOutput {
	return i.ToSecurityexemptlistRuleSrcaddrOutputWithContext(context.Background())
}

func (i SecurityexemptlistRuleSrcaddrArgs) ToSecurityexemptlistRuleSrcaddrOutputWithContext(ctx context.Context) SecurityexemptlistRuleSrcaddrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityexemptlistRuleSrcaddrOutput)
}

// SecurityexemptlistRuleSrcaddrArrayInput is an input type that accepts SecurityexemptlistRuleSrcaddrArray and SecurityexemptlistRuleSrcaddrArrayOutput values.
// You can construct a concrete instance of `SecurityexemptlistRuleSrcaddrArrayInput` via:
//
//	SecurityexemptlistRuleSrcaddrArray{ SecurityexemptlistRuleSrcaddrArgs{...} }
type SecurityexemptlistRuleSrcaddrArrayInput interface {
	pulumi.Input

	ToSecurityexemptlistRuleSrcaddrArrayOutput() SecurityexemptlistRuleSrcaddrArrayOutput
	ToSecurityexemptlistRuleSrcaddrArrayOutputWithContext(context.Context) SecurityexemptlistRuleSrcaddrArrayOutput
}

type SecurityexemptlistRuleSrcaddrArray []SecurityexemptlistRuleSrcaddrInput

func (SecurityexemptlistRuleSrcaddrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityexemptlistRuleSrcaddr)(nil)).Elem()
}

func (i SecurityexemptlistRuleSrcaddrArray) ToSecurityexemptlistRuleSrcaddrArrayOutput() SecurityexemptlistRuleSrcaddrArrayOutput {
	return i.ToSecurityexemptlistRuleSrcaddrArrayOutputWithContext(context.Background())
}

func (i SecurityexemptlistRuleSrcaddrArray) ToSecurityexemptlistRuleSrcaddrArrayOutputWithContext(ctx context.Context) SecurityexemptlistRuleSrcaddrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityexemptlistRuleSrcaddrArrayOutput)
}

type SecurityexemptlistRuleSrcaddrOutput struct{ *pulumi.OutputState }

func (SecurityexemptlistRuleSrcaddrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityexemptlistRuleSrcaddr)(nil)).Elem()
}

func (o SecurityexemptlistRuleSrcaddrOutput) ToSecurityexemptlistRuleSrcaddrOutput() SecurityexemptlistRuleSrcaddrOutput {
	return o
}

func (o SecurityexemptlistRuleSrcaddrOutput) ToSecurityexemptlistRuleSrcaddrOutputWithContext(ctx context.Context) SecurityexemptlistRuleSrcaddrOutput {
	return o
}

// Address or group name.
func (o SecurityexemptlistRuleSrcaddrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityexemptlistRuleSrcaddr) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SecurityexemptlistRuleSrcaddrArrayOutput struct{ *pulumi.OutputState }

func (SecurityexemptlistRuleSrcaddrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityexemptlistRuleSrcaddr)(nil)).Elem()
}

func (o SecurityexemptlistRuleSrcaddrArrayOutput) ToSecurityexemptlistRuleSrcaddrArrayOutput() SecurityexemptlistRuleSrcaddrArrayOutput {
	return o
}

func (o SecurityexemptlistRuleSrcaddrArrayOutput) ToSecurityexemptlistRuleSrcaddrArrayOutputWithContext(ctx context.Context) SecurityexemptlistRuleSrcaddrArrayOutput {
	return o
}

func (o SecurityexemptlistRuleSrcaddrArrayOutput) Index(i pulumi.IntInput) SecurityexemptlistRuleSrcaddrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityexemptlistRuleSrcaddr {
		return vs[0].([]SecurityexemptlistRuleSrcaddr)[vs[1].(int)]
	}).(SecurityexemptlistRuleSrcaddrOutput)
}

type SettingAuthPort struct {
	// ID.
	Id *int `pulumi:"id"`
	// Non-standard port for firewall user authentication.
	Port *int `pulumi:"port"`
	// Service type. Valid values: `http`, `https`, `ftp`, `telnet`.
	Type *string `pulumi:"type"`
}

// SettingAuthPortInput is an input type that accepts SettingAuthPortArgs and SettingAuthPortOutput values.
// You can construct a concrete instance of `SettingAuthPortInput` via:
//
//	SettingAuthPortArgs{...}
type SettingAuthPortInput interface {
	pulumi.Input

	ToSettingAuthPortOutput() SettingAuthPortOutput
	ToSettingAuthPortOutputWithContext(context.Context) SettingAuthPortOutput
}

type SettingAuthPortArgs struct {
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Non-standard port for firewall user authentication.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Service type. Valid values: `http`, `https`, `ftp`, `telnet`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SettingAuthPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingAuthPort)(nil)).Elem()
}

func (i SettingAuthPortArgs) ToSettingAuthPortOutput() SettingAuthPortOutput {
	return i.ToSettingAuthPortOutputWithContext(context.Background())
}

func (i SettingAuthPortArgs) ToSettingAuthPortOutputWithContext(ctx context.Context) SettingAuthPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingAuthPortOutput)
}

// SettingAuthPortArrayInput is an input type that accepts SettingAuthPortArray and SettingAuthPortArrayOutput values.
// You can construct a concrete instance of `SettingAuthPortArrayInput` via:
//
//	SettingAuthPortArray{ SettingAuthPortArgs{...} }
type SettingAuthPortArrayInput interface {
	pulumi.Input

	ToSettingAuthPortArrayOutput() SettingAuthPortArrayOutput
	ToSettingAuthPortArrayOutputWithContext(context.Context) SettingAuthPortArrayOutput
}

type SettingAuthPortArray []SettingAuthPortInput

func (SettingAuthPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingAuthPort)(nil)).Elem()
}

func (i SettingAuthPortArray) ToSettingAuthPortArrayOutput() SettingAuthPortArrayOutput {
	return i.ToSettingAuthPortArrayOutputWithContext(context.Background())
}

func (i SettingAuthPortArray) ToSettingAuthPortArrayOutputWithContext(ctx context.Context) SettingAuthPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingAuthPortArrayOutput)
}

type SettingAuthPortOutput struct{ *pulumi.OutputState }

func (SettingAuthPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingAuthPort)(nil)).Elem()
}

func (o SettingAuthPortOutput) ToSettingAuthPortOutput() SettingAuthPortOutput {
	return o
}

func (o SettingAuthPortOutput) ToSettingAuthPortOutputWithContext(ctx context.Context) SettingAuthPortOutput {
	return o
}

// ID.
func (o SettingAuthPortOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingAuthPort) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Non-standard port for firewall user authentication.
func (o SettingAuthPortOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingAuthPort) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Service type. Valid values: `http`, `https`, `ftp`, `telnet`.
func (o SettingAuthPortOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingAuthPort) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SettingAuthPortArrayOutput struct{ *pulumi.OutputState }

func (SettingAuthPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingAuthPort)(nil)).Elem()
}

func (o SettingAuthPortArrayOutput) ToSettingAuthPortArrayOutput() SettingAuthPortArrayOutput {
	return o
}

func (o SettingAuthPortArrayOutput) ToSettingAuthPortArrayOutputWithContext(ctx context.Context) SettingAuthPortArrayOutput {
	return o
}

func (o SettingAuthPortArrayOutput) Index(i pulumi.IntInput) SettingAuthPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingAuthPort {
		return vs[0].([]SettingAuthPort)[vs[1].(int)]
	}).(SettingAuthPortOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceTaggingInput)(nil)).Elem(), DeviceTaggingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceTaggingArrayInput)(nil)).Elem(), DeviceTaggingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceTaggingTagInput)(nil)).Elem(), DeviceTaggingTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceTaggingTagArrayInput)(nil)).Elem(), DeviceTaggingTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceaccesslistDeviceListInput)(nil)).Elem(), DeviceaccesslistDeviceListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceaccesslistDeviceListArrayInput)(nil)).Elem(), DeviceaccesslistDeviceListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicegroupMemberInput)(nil)).Elem(), DevicegroupMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicegroupMemberArrayInput)(nil)).Elem(), DevicegroupMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicegroupTaggingInput)(nil)).Elem(), DevicegroupTaggingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicegroupTaggingArrayInput)(nil)).Elem(), DevicegroupTaggingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicegroupTaggingTagInput)(nil)).Elem(), DevicegroupTaggingTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicegroupTaggingTagArrayInput)(nil)).Elem(), DevicegroupTaggingTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomaincontrollerExtraServerInput)(nil)).Elem(), DomaincontrollerExtraServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomaincontrollerExtraServerArrayInput)(nil)).Elem(), DomaincontrollerExtraServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExchangeKdcIpInput)(nil)).Elem(), ExchangeKdcIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExchangeKdcIpArrayInput)(nil)).Elem(), ExchangeKdcIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FssopollingAdgrpInput)(nil)).Elem(), FssopollingAdgrpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FssopollingAdgrpArrayInput)(nil)).Elem(), FssopollingAdgrpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupGuestInput)(nil)).Elem(), GroupGuestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupGuestArrayInput)(nil)).Elem(), GroupGuestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMatchInput)(nil)).Elem(), GroupMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMatchArrayInput)(nil)).Elem(), GroupMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMemberInput)(nil)).Elem(), GroupMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMemberArrayInput)(nil)).Elem(), GroupMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacpolicySeverityInput)(nil)).Elem(), NacpolicySeverityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacpolicySeverityArrayInput)(nil)).Elem(), NacpolicySeverityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacpolicySwitchGroupInput)(nil)).Elem(), NacpolicySwitchGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacpolicySwitchGroupArrayInput)(nil)).Elem(), NacpolicySwitchGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacpolicySwitchScopeInput)(nil)).Elem(), NacpolicySwitchScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacpolicySwitchScopeArrayInput)(nil)).Elem(), NacpolicySwitchScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeergrpMemberInput)(nil)).Elem(), PeergrpMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeergrpMemberArrayInput)(nil)).Elem(), PeergrpMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuarantineTargetInput)(nil)).Elem(), QuarantineTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuarantineTargetArrayInput)(nil)).Elem(), QuarantineTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuarantineTargetMacInput)(nil)).Elem(), QuarantineTargetMacArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuarantineTargetMacArrayInput)(nil)).Elem(), QuarantineTargetMacArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RadiusAccountingServerInput)(nil)).Elem(), RadiusAccountingServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RadiusAccountingServerArrayInput)(nil)).Elem(), RadiusAccountingServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RadiusClassInput)(nil)).Elem(), RadiusClassArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RadiusClassArrayInput)(nil)).Elem(), RadiusClassArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityexemptlistRuleInput)(nil)).Elem(), SecurityexemptlistRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityexemptlistRuleArrayInput)(nil)).Elem(), SecurityexemptlistRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityexemptlistRuleDeviceInput)(nil)).Elem(), SecurityexemptlistRuleDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityexemptlistRuleDeviceArrayInput)(nil)).Elem(), SecurityexemptlistRuleDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityexemptlistRuleDstaddrInput)(nil)).Elem(), SecurityexemptlistRuleDstaddrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityexemptlistRuleDstaddrArrayInput)(nil)).Elem(), SecurityexemptlistRuleDstaddrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityexemptlistRuleServiceInput)(nil)).Elem(), SecurityexemptlistRuleServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityexemptlistRuleServiceArrayInput)(nil)).Elem(), SecurityexemptlistRuleServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityexemptlistRuleSrcaddrInput)(nil)).Elem(), SecurityexemptlistRuleSrcaddrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityexemptlistRuleSrcaddrArrayInput)(nil)).Elem(), SecurityexemptlistRuleSrcaddrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingAuthPortInput)(nil)).Elem(), SettingAuthPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingAuthPortArrayInput)(nil)).Elem(), SettingAuthPortArray{})
	pulumi.RegisterOutputType(DeviceTaggingOutput{})
	pulumi.RegisterOutputType(DeviceTaggingArrayOutput{})
	pulumi.RegisterOutputType(DeviceTaggingTagOutput{})
	pulumi.RegisterOutputType(DeviceTaggingTagArrayOutput{})
	pulumi.RegisterOutputType(DeviceaccesslistDeviceListOutput{})
	pulumi.RegisterOutputType(DeviceaccesslistDeviceListArrayOutput{})
	pulumi.RegisterOutputType(DevicegroupMemberOutput{})
	pulumi.RegisterOutputType(DevicegroupMemberArrayOutput{})
	pulumi.RegisterOutputType(DevicegroupTaggingOutput{})
	pulumi.RegisterOutputType(DevicegroupTaggingArrayOutput{})
	pulumi.RegisterOutputType(DevicegroupTaggingTagOutput{})
	pulumi.RegisterOutputType(DevicegroupTaggingTagArrayOutput{})
	pulumi.RegisterOutputType(DomaincontrollerExtraServerOutput{})
	pulumi.RegisterOutputType(DomaincontrollerExtraServerArrayOutput{})
	pulumi.RegisterOutputType(ExchangeKdcIpOutput{})
	pulumi.RegisterOutputType(ExchangeKdcIpArrayOutput{})
	pulumi.RegisterOutputType(FssopollingAdgrpOutput{})
	pulumi.RegisterOutputType(FssopollingAdgrpArrayOutput{})
	pulumi.RegisterOutputType(GroupGuestOutput{})
	pulumi.RegisterOutputType(GroupGuestArrayOutput{})
	pulumi.RegisterOutputType(GroupMatchOutput{})
	pulumi.RegisterOutputType(GroupMatchArrayOutput{})
	pulumi.RegisterOutputType(GroupMemberOutput{})
	pulumi.RegisterOutputType(GroupMemberArrayOutput{})
	pulumi.RegisterOutputType(NacpolicySeverityOutput{})
	pulumi.RegisterOutputType(NacpolicySeverityArrayOutput{})
	pulumi.RegisterOutputType(NacpolicySwitchGroupOutput{})
	pulumi.RegisterOutputType(NacpolicySwitchGroupArrayOutput{})
	pulumi.RegisterOutputType(NacpolicySwitchScopeOutput{})
	pulumi.RegisterOutputType(NacpolicySwitchScopeArrayOutput{})
	pulumi.RegisterOutputType(PeergrpMemberOutput{})
	pulumi.RegisterOutputType(PeergrpMemberArrayOutput{})
	pulumi.RegisterOutputType(QuarantineTargetOutput{})
	pulumi.RegisterOutputType(QuarantineTargetArrayOutput{})
	pulumi.RegisterOutputType(QuarantineTargetMacOutput{})
	pulumi.RegisterOutputType(QuarantineTargetMacArrayOutput{})
	pulumi.RegisterOutputType(RadiusAccountingServerOutput{})
	pulumi.RegisterOutputType(RadiusAccountingServerArrayOutput{})
	pulumi.RegisterOutputType(RadiusClassOutput{})
	pulumi.RegisterOutputType(RadiusClassArrayOutput{})
	pulumi.RegisterOutputType(SecurityexemptlistRuleOutput{})
	pulumi.RegisterOutputType(SecurityexemptlistRuleArrayOutput{})
	pulumi.RegisterOutputType(SecurityexemptlistRuleDeviceOutput{})
	pulumi.RegisterOutputType(SecurityexemptlistRuleDeviceArrayOutput{})
	pulumi.RegisterOutputType(SecurityexemptlistRuleDstaddrOutput{})
	pulumi.RegisterOutputType(SecurityexemptlistRuleDstaddrArrayOutput{})
	pulumi.RegisterOutputType(SecurityexemptlistRuleServiceOutput{})
	pulumi.RegisterOutputType(SecurityexemptlistRuleServiceArrayOutput{})
	pulumi.RegisterOutputType(SecurityexemptlistRuleSrcaddrOutput{})
	pulumi.RegisterOutputType(SecurityexemptlistRuleSrcaddrArrayOutput{})
	pulumi.RegisterOutputType(SettingAuthPortOutput{})
	pulumi.RegisterOutputType(SettingAuthPortArrayOutput{})
}
