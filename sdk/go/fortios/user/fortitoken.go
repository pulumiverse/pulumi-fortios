// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure FortiToken.
//
// ## Import
//
// User Fortitoken can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:user/fortitoken:Fortitoken labelname {{serial_number}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:user/fortitoken:Fortitoken labelname {{serial_number}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Fortitoken struct {
	pulumi.CustomResourceState

	// Mobile token user activation-code.
	ActivationCode pulumi.StringOutput `pulumi:"activationCode"`
	// Mobile token user activation-code expire time.
	ActivationExpire pulumi.IntOutput `pulumi:"activationExpire"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Mobile token license.
	License pulumi.StringOutput `pulumi:"license"`
	// Device Mobile Version.
	OsVer pulumi.StringOutput `pulumi:"osVer"`
	// Device Reg ID.
	RegId pulumi.StringOutput `pulumi:"regId"`
	// Token seed.
	Seed pulumi.StringOutput `pulumi:"seed"`
	// Serial number.
	SerialNumber pulumi.StringOutput `pulumi:"serialNumber"`
	// Status Valid values: `active`, `lock`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewFortitoken registers a new resource with the given unique name, arguments, and options.
func NewFortitoken(ctx *pulumi.Context,
	name string, args *FortitokenArgs, opts ...pulumi.ResourceOption) (*Fortitoken, error) {
	if args == nil {
		args = &FortitokenArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Fortitoken
	err := ctx.RegisterResource("fortios:user/fortitoken:Fortitoken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFortitoken gets an existing Fortitoken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFortitoken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FortitokenState, opts ...pulumi.ResourceOption) (*Fortitoken, error) {
	var resource Fortitoken
	err := ctx.ReadResource("fortios:user/fortitoken:Fortitoken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fortitoken resources.
type fortitokenState struct {
	// Mobile token user activation-code.
	ActivationCode *string `pulumi:"activationCode"`
	// Mobile token user activation-code expire time.
	ActivationExpire *int `pulumi:"activationExpire"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Mobile token license.
	License *string `pulumi:"license"`
	// Device Mobile Version.
	OsVer *string `pulumi:"osVer"`
	// Device Reg ID.
	RegId *string `pulumi:"regId"`
	// Token seed.
	Seed *string `pulumi:"seed"`
	// Serial number.
	SerialNumber *string `pulumi:"serialNumber"`
	// Status Valid values: `active`, `lock`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FortitokenState struct {
	// Mobile token user activation-code.
	ActivationCode pulumi.StringPtrInput
	// Mobile token user activation-code expire time.
	ActivationExpire pulumi.IntPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Mobile token license.
	License pulumi.StringPtrInput
	// Device Mobile Version.
	OsVer pulumi.StringPtrInput
	// Device Reg ID.
	RegId pulumi.StringPtrInput
	// Token seed.
	Seed pulumi.StringPtrInput
	// Serial number.
	SerialNumber pulumi.StringPtrInput
	// Status Valid values: `active`, `lock`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FortitokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*fortitokenState)(nil)).Elem()
}

type fortitokenArgs struct {
	// Mobile token user activation-code.
	ActivationCode *string `pulumi:"activationCode"`
	// Mobile token user activation-code expire time.
	ActivationExpire *int `pulumi:"activationExpire"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Mobile token license.
	License *string `pulumi:"license"`
	// Device Mobile Version.
	OsVer *string `pulumi:"osVer"`
	// Device Reg ID.
	RegId *string `pulumi:"regId"`
	// Token seed.
	Seed *string `pulumi:"seed"`
	// Serial number.
	SerialNumber *string `pulumi:"serialNumber"`
	// Status Valid values: `active`, `lock`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Fortitoken resource.
type FortitokenArgs struct {
	// Mobile token user activation-code.
	ActivationCode pulumi.StringPtrInput
	// Mobile token user activation-code expire time.
	ActivationExpire pulumi.IntPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Mobile token license.
	License pulumi.StringPtrInput
	// Device Mobile Version.
	OsVer pulumi.StringPtrInput
	// Device Reg ID.
	RegId pulumi.StringPtrInput
	// Token seed.
	Seed pulumi.StringPtrInput
	// Serial number.
	SerialNumber pulumi.StringPtrInput
	// Status Valid values: `active`, `lock`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FortitokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fortitokenArgs)(nil)).Elem()
}

type FortitokenInput interface {
	pulumi.Input

	ToFortitokenOutput() FortitokenOutput
	ToFortitokenOutputWithContext(ctx context.Context) FortitokenOutput
}

func (*Fortitoken) ElementType() reflect.Type {
	return reflect.TypeOf((**Fortitoken)(nil)).Elem()
}

func (i *Fortitoken) ToFortitokenOutput() FortitokenOutput {
	return i.ToFortitokenOutputWithContext(context.Background())
}

func (i *Fortitoken) ToFortitokenOutputWithContext(ctx context.Context) FortitokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortitokenOutput)
}

// FortitokenArrayInput is an input type that accepts FortitokenArray and FortitokenArrayOutput values.
// You can construct a concrete instance of `FortitokenArrayInput` via:
//
//	FortitokenArray{ FortitokenArgs{...} }
type FortitokenArrayInput interface {
	pulumi.Input

	ToFortitokenArrayOutput() FortitokenArrayOutput
	ToFortitokenArrayOutputWithContext(context.Context) FortitokenArrayOutput
}

type FortitokenArray []FortitokenInput

func (FortitokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fortitoken)(nil)).Elem()
}

func (i FortitokenArray) ToFortitokenArrayOutput() FortitokenArrayOutput {
	return i.ToFortitokenArrayOutputWithContext(context.Background())
}

func (i FortitokenArray) ToFortitokenArrayOutputWithContext(ctx context.Context) FortitokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortitokenArrayOutput)
}

// FortitokenMapInput is an input type that accepts FortitokenMap and FortitokenMapOutput values.
// You can construct a concrete instance of `FortitokenMapInput` via:
//
//	FortitokenMap{ "key": FortitokenArgs{...} }
type FortitokenMapInput interface {
	pulumi.Input

	ToFortitokenMapOutput() FortitokenMapOutput
	ToFortitokenMapOutputWithContext(context.Context) FortitokenMapOutput
}

type FortitokenMap map[string]FortitokenInput

func (FortitokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fortitoken)(nil)).Elem()
}

func (i FortitokenMap) ToFortitokenMapOutput() FortitokenMapOutput {
	return i.ToFortitokenMapOutputWithContext(context.Background())
}

func (i FortitokenMap) ToFortitokenMapOutputWithContext(ctx context.Context) FortitokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FortitokenMapOutput)
}

type FortitokenOutput struct{ *pulumi.OutputState }

func (FortitokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fortitoken)(nil)).Elem()
}

func (o FortitokenOutput) ToFortitokenOutput() FortitokenOutput {
	return o
}

func (o FortitokenOutput) ToFortitokenOutputWithContext(ctx context.Context) FortitokenOutput {
	return o
}

// Mobile token user activation-code.
func (o FortitokenOutput) ActivationCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Fortitoken) pulumi.StringOutput { return v.ActivationCode }).(pulumi.StringOutput)
}

// Mobile token user activation-code expire time.
func (o FortitokenOutput) ActivationExpire() pulumi.IntOutput {
	return o.ApplyT(func(v *Fortitoken) pulumi.IntOutput { return v.ActivationExpire }).(pulumi.IntOutput)
}

// Comment.
func (o FortitokenOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fortitoken) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Mobile token license.
func (o FortitokenOutput) License() pulumi.StringOutput {
	return o.ApplyT(func(v *Fortitoken) pulumi.StringOutput { return v.License }).(pulumi.StringOutput)
}

// Device Mobile Version.
func (o FortitokenOutput) OsVer() pulumi.StringOutput {
	return o.ApplyT(func(v *Fortitoken) pulumi.StringOutput { return v.OsVer }).(pulumi.StringOutput)
}

// Device Reg ID.
func (o FortitokenOutput) RegId() pulumi.StringOutput {
	return o.ApplyT(func(v *Fortitoken) pulumi.StringOutput { return v.RegId }).(pulumi.StringOutput)
}

// Token seed.
func (o FortitokenOutput) Seed() pulumi.StringOutput {
	return o.ApplyT(func(v *Fortitoken) pulumi.StringOutput { return v.Seed }).(pulumi.StringOutput)
}

// Serial number.
func (o FortitokenOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *Fortitoken) pulumi.StringOutput { return v.SerialNumber }).(pulumi.StringOutput)
}

// Status Valid values: `active`, `lock`.
func (o FortitokenOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Fortitoken) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o FortitokenOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Fortitoken) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type FortitokenArrayOutput struct{ *pulumi.OutputState }

func (FortitokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fortitoken)(nil)).Elem()
}

func (o FortitokenArrayOutput) ToFortitokenArrayOutput() FortitokenArrayOutput {
	return o
}

func (o FortitokenArrayOutput) ToFortitokenArrayOutputWithContext(ctx context.Context) FortitokenArrayOutput {
	return o
}

func (o FortitokenArrayOutput) Index(i pulumi.IntInput) FortitokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Fortitoken {
		return vs[0].([]*Fortitoken)[vs[1].(int)]
	}).(FortitokenOutput)
}

type FortitokenMapOutput struct{ *pulumi.OutputState }

func (FortitokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fortitoken)(nil)).Elem()
}

func (o FortitokenMapOutput) ToFortitokenMapOutput() FortitokenMapOutput {
	return o
}

func (o FortitokenMapOutput) ToFortitokenMapOutputWithContext(ctx context.Context) FortitokenMapOutput {
	return o
}

func (o FortitokenMapOutput) MapIndex(k pulumi.StringInput) FortitokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Fortitoken {
		return vs[0].(map[string]*Fortitoken)[vs[1].(string)]
	}).(FortitokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FortitokenInput)(nil)).Elem(), &Fortitoken{})
	pulumi.RegisterInputType(reflect.TypeOf((*FortitokenArrayInput)(nil)).Elem(), FortitokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FortitokenMapInput)(nil)).Elem(), FortitokenMap{})
	pulumi.RegisterOutputType(FortitokenOutput{})
	pulumi.RegisterOutputType(FortitokenArrayOutput{})
	pulumi.RegisterOutputType(FortitokenMapOutput{})
}
