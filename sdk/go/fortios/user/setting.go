// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure user authentication setting.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/user"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := user.NewSetting(ctx, "trname", &user.SettingArgs{
//				AuthBlackoutTime:          pulumi.Int(0),
//				AuthCert:                  pulumi.String("Fortinet_Factory"),
//				AuthHttpBasic:             pulumi.String("disable"),
//				AuthInvalidMax:            pulumi.Int(5),
//				AuthLockoutDuration:       pulumi.Int(0),
//				AuthLockoutThreshold:      pulumi.Int(3),
//				AuthOnDemand:              pulumi.String("implicitly"),
//				AuthPortalTimeout:         pulumi.Int(3),
//				AuthSecureHttp:            pulumi.String("disable"),
//				AuthSrcMac:                pulumi.String("enable"),
//				AuthSslAllowRenegotiation: pulumi.String("disable"),
//				AuthTimeout:               pulumi.Int(5),
//				AuthTimeoutType:           pulumi.String("idle-timeout"),
//				AuthType:                  pulumi.String("http https ftp telnet"),
//				RadiusSesTimeoutAct:       pulumi.String("hard-timeout"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// User Setting can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:user/setting:Setting labelname UserSetting
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:user/setting:Setting labelname UserSetting
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Setting struct {
	pulumi.CustomResourceState

	// Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
	AuthBlackoutTime pulumi.IntOutput `pulumi:"authBlackoutTime"`
	// HTTPS CA certificate for policy authentication.
	AuthCaCert pulumi.StringOutput `pulumi:"authCaCert"`
	// HTTPS server certificate for policy authentication.
	AuthCert pulumi.StringOutput `pulumi:"authCert"`
	// Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
	AuthHttpBasic pulumi.StringOutput `pulumi:"authHttpBasic"`
	// Maximum number of failed authentication attempts before the user is blocked.
	AuthInvalidMax pulumi.IntOutput `pulumi:"authInvalidMax"`
	// Lockout period in seconds after too many login failures.
	AuthLockoutDuration pulumi.IntOutput `pulumi:"authLockoutDuration"`
	// Maximum number of failed login attempts before login lockout is triggered.
	AuthLockoutThreshold pulumi.IntOutput `pulumi:"authLockoutThreshold"`
	// Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
	AuthOnDemand pulumi.StringOutput `pulumi:"authOnDemand"`
	// Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
	AuthPortalTimeout pulumi.IntOutput `pulumi:"authPortalTimeout"`
	// Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `authPorts` block is documented below.
	AuthPorts SettingAuthPortArrayOutput `pulumi:"authPorts"`
	// Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
	AuthSecureHttp pulumi.StringOutput `pulumi:"authSecureHttp"`
	// Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
	AuthSrcMac pulumi.StringOutput `pulumi:"authSrcMac"`
	// Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
	AuthSslAllowRenegotiation pulumi.StringOutput `pulumi:"authSslAllowRenegotiation"`
	// Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
	AuthSslMaxProtoVersion pulumi.StringOutput `pulumi:"authSslMaxProtoVersion"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	AuthSslMinProtoVersion pulumi.StringOutput `pulumi:"authSslMinProtoVersion"`
	// Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
	AuthSslSigalgs pulumi.StringOutput `pulumi:"authSslSigalgs"`
	// Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
	AuthTimeout pulumi.IntOutput `pulumi:"authTimeout"`
	// Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
	AuthTimeoutType pulumi.StringOutput `pulumi:"authTimeoutType"`
	// Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
	AuthType pulumi.StringOutput `pulumi:"authType"`
	// Default password policy to apply to all local users unless otherwise specified, as defined in config user password-policy.
	DefaultUserPasswordPolicy pulumi.StringOutput `pulumi:"defaultUserPasswordPolicy"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
	PerPolicyDisclaimer pulumi.StringOutput `pulumi:"perPolicyDisclaimer"`
	// Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
	RadiusSesTimeoutAct pulumi.StringOutput `pulumi:"radiusSesTimeoutAct"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSetting registers a new resource with the given unique name, arguments, and options.
func NewSetting(ctx *pulumi.Context,
	name string, args *SettingArgs, opts ...pulumi.ResourceOption) (*Setting, error) {
	if args == nil {
		args = &SettingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Setting
	err := ctx.RegisterResource("fortios:user/setting:Setting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSetting gets an existing Setting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SettingState, opts ...pulumi.ResourceOption) (*Setting, error) {
	var resource Setting
	err := ctx.ReadResource("fortios:user/setting:Setting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Setting resources.
type settingState struct {
	// Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
	AuthBlackoutTime *int `pulumi:"authBlackoutTime"`
	// HTTPS CA certificate for policy authentication.
	AuthCaCert *string `pulumi:"authCaCert"`
	// HTTPS server certificate for policy authentication.
	AuthCert *string `pulumi:"authCert"`
	// Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
	AuthHttpBasic *string `pulumi:"authHttpBasic"`
	// Maximum number of failed authentication attempts before the user is blocked.
	AuthInvalidMax *int `pulumi:"authInvalidMax"`
	// Lockout period in seconds after too many login failures.
	AuthLockoutDuration *int `pulumi:"authLockoutDuration"`
	// Maximum number of failed login attempts before login lockout is triggered.
	AuthLockoutThreshold *int `pulumi:"authLockoutThreshold"`
	// Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
	AuthOnDemand *string `pulumi:"authOnDemand"`
	// Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
	AuthPortalTimeout *int `pulumi:"authPortalTimeout"`
	// Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `authPorts` block is documented below.
	AuthPorts []SettingAuthPort `pulumi:"authPorts"`
	// Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
	AuthSecureHttp *string `pulumi:"authSecureHttp"`
	// Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
	AuthSrcMac *string `pulumi:"authSrcMac"`
	// Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
	AuthSslAllowRenegotiation *string `pulumi:"authSslAllowRenegotiation"`
	// Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
	AuthSslMaxProtoVersion *string `pulumi:"authSslMaxProtoVersion"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	AuthSslMinProtoVersion *string `pulumi:"authSslMinProtoVersion"`
	// Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
	AuthSslSigalgs *string `pulumi:"authSslSigalgs"`
	// Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
	AuthTimeout *int `pulumi:"authTimeout"`
	// Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
	AuthTimeoutType *string `pulumi:"authTimeoutType"`
	// Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
	AuthType *string `pulumi:"authType"`
	// Default password policy to apply to all local users unless otherwise specified, as defined in config user password-policy.
	DefaultUserPasswordPolicy *string `pulumi:"defaultUserPasswordPolicy"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
	PerPolicyDisclaimer *string `pulumi:"perPolicyDisclaimer"`
	// Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
	RadiusSesTimeoutAct *string `pulumi:"radiusSesTimeoutAct"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SettingState struct {
	// Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
	AuthBlackoutTime pulumi.IntPtrInput
	// HTTPS CA certificate for policy authentication.
	AuthCaCert pulumi.StringPtrInput
	// HTTPS server certificate for policy authentication.
	AuthCert pulumi.StringPtrInput
	// Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
	AuthHttpBasic pulumi.StringPtrInput
	// Maximum number of failed authentication attempts before the user is blocked.
	AuthInvalidMax pulumi.IntPtrInput
	// Lockout period in seconds after too many login failures.
	AuthLockoutDuration pulumi.IntPtrInput
	// Maximum number of failed login attempts before login lockout is triggered.
	AuthLockoutThreshold pulumi.IntPtrInput
	// Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
	AuthOnDemand pulumi.StringPtrInput
	// Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
	AuthPortalTimeout pulumi.IntPtrInput
	// Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `authPorts` block is documented below.
	AuthPorts SettingAuthPortArrayInput
	// Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
	AuthSecureHttp pulumi.StringPtrInput
	// Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
	AuthSrcMac pulumi.StringPtrInput
	// Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
	AuthSslAllowRenegotiation pulumi.StringPtrInput
	// Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
	AuthSslMaxProtoVersion pulumi.StringPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	AuthSslMinProtoVersion pulumi.StringPtrInput
	// Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
	AuthSslSigalgs pulumi.StringPtrInput
	// Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
	AuthTimeout pulumi.IntPtrInput
	// Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
	AuthTimeoutType pulumi.StringPtrInput
	// Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
	AuthType pulumi.StringPtrInput
	// Default password policy to apply to all local users unless otherwise specified, as defined in config user password-policy.
	DefaultUserPasswordPolicy pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
	PerPolicyDisclaimer pulumi.StringPtrInput
	// Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
	RadiusSesTimeoutAct pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*settingState)(nil)).Elem()
}

type settingArgs struct {
	// Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
	AuthBlackoutTime *int `pulumi:"authBlackoutTime"`
	// HTTPS CA certificate for policy authentication.
	AuthCaCert *string `pulumi:"authCaCert"`
	// HTTPS server certificate for policy authentication.
	AuthCert *string `pulumi:"authCert"`
	// Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
	AuthHttpBasic *string `pulumi:"authHttpBasic"`
	// Maximum number of failed authentication attempts before the user is blocked.
	AuthInvalidMax *int `pulumi:"authInvalidMax"`
	// Lockout period in seconds after too many login failures.
	AuthLockoutDuration *int `pulumi:"authLockoutDuration"`
	// Maximum number of failed login attempts before login lockout is triggered.
	AuthLockoutThreshold *int `pulumi:"authLockoutThreshold"`
	// Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
	AuthOnDemand *string `pulumi:"authOnDemand"`
	// Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
	AuthPortalTimeout *int `pulumi:"authPortalTimeout"`
	// Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `authPorts` block is documented below.
	AuthPorts []SettingAuthPort `pulumi:"authPorts"`
	// Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
	AuthSecureHttp *string `pulumi:"authSecureHttp"`
	// Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
	AuthSrcMac *string `pulumi:"authSrcMac"`
	// Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
	AuthSslAllowRenegotiation *string `pulumi:"authSslAllowRenegotiation"`
	// Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
	AuthSslMaxProtoVersion *string `pulumi:"authSslMaxProtoVersion"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	AuthSslMinProtoVersion *string `pulumi:"authSslMinProtoVersion"`
	// Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
	AuthSslSigalgs *string `pulumi:"authSslSigalgs"`
	// Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
	AuthTimeout *int `pulumi:"authTimeout"`
	// Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
	AuthTimeoutType *string `pulumi:"authTimeoutType"`
	// Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
	AuthType *string `pulumi:"authType"`
	// Default password policy to apply to all local users unless otherwise specified, as defined in config user password-policy.
	DefaultUserPasswordPolicy *string `pulumi:"defaultUserPasswordPolicy"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
	PerPolicyDisclaimer *string `pulumi:"perPolicyDisclaimer"`
	// Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
	RadiusSesTimeoutAct *string `pulumi:"radiusSesTimeoutAct"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Setting resource.
type SettingArgs struct {
	// Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
	AuthBlackoutTime pulumi.IntPtrInput
	// HTTPS CA certificate for policy authentication.
	AuthCaCert pulumi.StringPtrInput
	// HTTPS server certificate for policy authentication.
	AuthCert pulumi.StringPtrInput
	// Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
	AuthHttpBasic pulumi.StringPtrInput
	// Maximum number of failed authentication attempts before the user is blocked.
	AuthInvalidMax pulumi.IntPtrInput
	// Lockout period in seconds after too many login failures.
	AuthLockoutDuration pulumi.IntPtrInput
	// Maximum number of failed login attempts before login lockout is triggered.
	AuthLockoutThreshold pulumi.IntPtrInput
	// Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
	AuthOnDemand pulumi.StringPtrInput
	// Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
	AuthPortalTimeout pulumi.IntPtrInput
	// Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `authPorts` block is documented below.
	AuthPorts SettingAuthPortArrayInput
	// Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
	AuthSecureHttp pulumi.StringPtrInput
	// Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
	AuthSrcMac pulumi.StringPtrInput
	// Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
	AuthSslAllowRenegotiation pulumi.StringPtrInput
	// Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
	AuthSslMaxProtoVersion pulumi.StringPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	AuthSslMinProtoVersion pulumi.StringPtrInput
	// Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
	AuthSslSigalgs pulumi.StringPtrInput
	// Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
	AuthTimeout pulumi.IntPtrInput
	// Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
	AuthTimeoutType pulumi.StringPtrInput
	// Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
	AuthType pulumi.StringPtrInput
	// Default password policy to apply to all local users unless otherwise specified, as defined in config user password-policy.
	DefaultUserPasswordPolicy pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
	PerPolicyDisclaimer pulumi.StringPtrInput
	// Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
	RadiusSesTimeoutAct pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*settingArgs)(nil)).Elem()
}

type SettingInput interface {
	pulumi.Input

	ToSettingOutput() SettingOutput
	ToSettingOutputWithContext(ctx context.Context) SettingOutput
}

func (*Setting) ElementType() reflect.Type {
	return reflect.TypeOf((**Setting)(nil)).Elem()
}

func (i *Setting) ToSettingOutput() SettingOutput {
	return i.ToSettingOutputWithContext(context.Background())
}

func (i *Setting) ToSettingOutputWithContext(ctx context.Context) SettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingOutput)
}

// SettingArrayInput is an input type that accepts SettingArray and SettingArrayOutput values.
// You can construct a concrete instance of `SettingArrayInput` via:
//
//	SettingArray{ SettingArgs{...} }
type SettingArrayInput interface {
	pulumi.Input

	ToSettingArrayOutput() SettingArrayOutput
	ToSettingArrayOutputWithContext(context.Context) SettingArrayOutput
}

type SettingArray []SettingInput

func (SettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Setting)(nil)).Elem()
}

func (i SettingArray) ToSettingArrayOutput() SettingArrayOutput {
	return i.ToSettingArrayOutputWithContext(context.Background())
}

func (i SettingArray) ToSettingArrayOutputWithContext(ctx context.Context) SettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingArrayOutput)
}

// SettingMapInput is an input type that accepts SettingMap and SettingMapOutput values.
// You can construct a concrete instance of `SettingMapInput` via:
//
//	SettingMap{ "key": SettingArgs{...} }
type SettingMapInput interface {
	pulumi.Input

	ToSettingMapOutput() SettingMapOutput
	ToSettingMapOutputWithContext(context.Context) SettingMapOutput
}

type SettingMap map[string]SettingInput

func (SettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Setting)(nil)).Elem()
}

func (i SettingMap) ToSettingMapOutput() SettingMapOutput {
	return i.ToSettingMapOutputWithContext(context.Background())
}

func (i SettingMap) ToSettingMapOutputWithContext(ctx context.Context) SettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMapOutput)
}

type SettingOutput struct{ *pulumi.OutputState }

func (SettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Setting)(nil)).Elem()
}

func (o SettingOutput) ToSettingOutput() SettingOutput {
	return o
}

func (o SettingOutput) ToSettingOutputWithContext(ctx context.Context) SettingOutput {
	return o
}

// Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
func (o SettingOutput) AuthBlackoutTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Setting) pulumi.IntOutput { return v.AuthBlackoutTime }).(pulumi.IntOutput)
}

// HTTPS CA certificate for policy authentication.
func (o SettingOutput) AuthCaCert() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.AuthCaCert }).(pulumi.StringOutput)
}

// HTTPS server certificate for policy authentication.
func (o SettingOutput) AuthCert() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.AuthCert }).(pulumi.StringOutput)
}

// Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
func (o SettingOutput) AuthHttpBasic() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.AuthHttpBasic }).(pulumi.StringOutput)
}

// Maximum number of failed authentication attempts before the user is blocked.
func (o SettingOutput) AuthInvalidMax() pulumi.IntOutput {
	return o.ApplyT(func(v *Setting) pulumi.IntOutput { return v.AuthInvalidMax }).(pulumi.IntOutput)
}

// Lockout period in seconds after too many login failures.
func (o SettingOutput) AuthLockoutDuration() pulumi.IntOutput {
	return o.ApplyT(func(v *Setting) pulumi.IntOutput { return v.AuthLockoutDuration }).(pulumi.IntOutput)
}

// Maximum number of failed login attempts before login lockout is triggered.
func (o SettingOutput) AuthLockoutThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *Setting) pulumi.IntOutput { return v.AuthLockoutThreshold }).(pulumi.IntOutput)
}

// Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
func (o SettingOutput) AuthOnDemand() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.AuthOnDemand }).(pulumi.StringOutput)
}

// Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
func (o SettingOutput) AuthPortalTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Setting) pulumi.IntOutput { return v.AuthPortalTimeout }).(pulumi.IntOutput)
}

// Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `authPorts` block is documented below.
func (o SettingOutput) AuthPorts() SettingAuthPortArrayOutput {
	return o.ApplyT(func(v *Setting) SettingAuthPortArrayOutput { return v.AuthPorts }).(SettingAuthPortArrayOutput)
}

// Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
func (o SettingOutput) AuthSecureHttp() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.AuthSecureHttp }).(pulumi.StringOutput)
}

// Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
func (o SettingOutput) AuthSrcMac() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.AuthSrcMac }).(pulumi.StringOutput)
}

// Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
func (o SettingOutput) AuthSslAllowRenegotiation() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.AuthSslAllowRenegotiation }).(pulumi.StringOutput)
}

// Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
func (o SettingOutput) AuthSslMaxProtoVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.AuthSslMaxProtoVersion }).(pulumi.StringOutput)
}

// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
func (o SettingOutput) AuthSslMinProtoVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.AuthSslMinProtoVersion }).(pulumi.StringOutput)
}

// Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
func (o SettingOutput) AuthSslSigalgs() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.AuthSslSigalgs }).(pulumi.StringOutput)
}

// Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
func (o SettingOutput) AuthTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Setting) pulumi.IntOutput { return v.AuthTimeout }).(pulumi.IntOutput)
}

// Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
func (o SettingOutput) AuthTimeoutType() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.AuthTimeoutType }).(pulumi.StringOutput)
}

// Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
func (o SettingOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.AuthType }).(pulumi.StringOutput)
}

// Default password policy to apply to all local users unless otherwise specified, as defined in config user password-policy.
func (o SettingOutput) DefaultUserPasswordPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.DefaultUserPasswordPolicy }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SettingOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o SettingOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
func (o SettingOutput) PerPolicyDisclaimer() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.PerPolicyDisclaimer }).(pulumi.StringOutput)
}

// Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
func (o SettingOutput) RadiusSesTimeoutAct() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.RadiusSesTimeoutAct }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SettingOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SettingArrayOutput struct{ *pulumi.OutputState }

func (SettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Setting)(nil)).Elem()
}

func (o SettingArrayOutput) ToSettingArrayOutput() SettingArrayOutput {
	return o
}

func (o SettingArrayOutput) ToSettingArrayOutputWithContext(ctx context.Context) SettingArrayOutput {
	return o
}

func (o SettingArrayOutput) Index(i pulumi.IntInput) SettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Setting {
		return vs[0].([]*Setting)[vs[1].(int)]
	}).(SettingOutput)
}

type SettingMapOutput struct{ *pulumi.OutputState }

func (SettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Setting)(nil)).Elem()
}

func (o SettingMapOutput) ToSettingMapOutput() SettingMapOutput {
	return o
}

func (o SettingMapOutput) ToSettingMapOutputWithContext(ctx context.Context) SettingMapOutput {
	return o
}

func (o SettingMapOutput) MapIndex(k pulumi.StringInput) SettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Setting {
		return vs[0].(map[string]*Setting)[vs[1].(string)]
	}).(SettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SettingInput)(nil)).Elem(), &Setting{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingArrayInput)(nil)).Elem(), SettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingMapInput)(nil)).Elem(), SettingMap{})
	pulumi.RegisterOutputType(SettingOutput{})
	pulumi.RegisterOutputType(SettingArrayOutput{})
	pulumi.RegisterOutputType(SettingMapOutput{})
}
