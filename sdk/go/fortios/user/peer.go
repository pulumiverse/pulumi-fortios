// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure peer users.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/user"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := user.NewPeer(ctx, "trname1", &user.PeerArgs{
//				Ca:                pulumi.String("EC-ACC"),
//				CnType:            pulumi.String("string"),
//				LdapMode:          pulumi.String("password"),
//				MandatoryCaVerify: pulumi.String("enable"),
//				TwoFactor:         pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// User Peer can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:user/peer:Peer labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:user/peer:Peer labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Peer struct {
	pulumi.CustomResourceState

	// Name of the CA certificate as returned by the execute vpn certificate ca list command.
	Ca pulumi.StringOutput `pulumi:"ca"`
	// Peer certificate common name.
	Cn pulumi.StringOutput `pulumi:"cn"`
	// Peer certificate common name type. Valid values: `string`, `email`, `FQDN`, `ipv4`, `ipv6`.
	CnType pulumi.StringOutput `pulumi:"cnType"`
	// Mode for LDAP peer authentication. Valid values: `password`, `principal-name`.
	LdapMode pulumi.StringOutput `pulumi:"ldapMode"`
	// Password for LDAP server bind.
	LdapPassword pulumi.StringPtrOutput `pulumi:"ldapPassword"`
	// Name of an LDAP server defined under the user ldap command. Performs client access rights check.
	LdapServer pulumi.StringOutput `pulumi:"ldapServer"`
	// Username for LDAP server bind.
	LdapUsername pulumi.StringOutput `pulumi:"ldapUsername"`
	// Determine what happens to the peer if the CA certificate is not installed. Disable to automatically consider the peer certificate as valid. Valid values: `enable`, `disable`.
	MandatoryCaVerify pulumi.StringOutput `pulumi:"mandatoryCaVerify"`
	// MFA mode for remote peer authentication/authorization. Valid values: `none`, `password`, `subject-identity`.
	MfaMode pulumi.StringOutput `pulumi:"mfaMode"`
	// Unified password for remote authentication. This field may be left empty when RADIUS authentication is used, in which case the FortiGate will use the RADIUS username as a password.
	MfaPassword pulumi.StringPtrOutput `pulumi:"mfaPassword"`
	// Name of a remote authenticator. Performs client access right check.
	MfaServer pulumi.StringOutput `pulumi:"mfaServer"`
	// Unified username for remote authentication.
	MfaUsername pulumi.StringOutput `pulumi:"mfaUsername"`
	// Peer name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Online Certificate Status Protocol (OCSP) server for certificate retrieval.
	OcspOverrideServer pulumi.StringOutput `pulumi:"ocspOverrideServer"`
	// Peer's password used for two-factor authentication.
	Passwd pulumi.StringPtrOutput `pulumi:"passwd"`
	// Peer certificate name constraints.
	Subject pulumi.StringOutput `pulumi:"subject"`
	// Enable/disable two-factor authentication, applying certificate and password-based authentication. Valid values: `enable`, `disable`.
	TwoFactor pulumi.StringOutput `pulumi:"twoFactor"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewPeer registers a new resource with the given unique name, arguments, and options.
func NewPeer(ctx *pulumi.Context,
	name string, args *PeerArgs, opts ...pulumi.ResourceOption) (*Peer, error) {
	if args == nil {
		args = &PeerArgs{}
	}

	if args.LdapPassword != nil {
		args.LdapPassword = pulumi.ToSecret(args.LdapPassword).(pulumi.StringPtrInput)
	}
	if args.Passwd != nil {
		args.Passwd = pulumi.ToSecret(args.Passwd).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"ldapPassword",
		"passwd",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Peer
	err := ctx.RegisterResource("fortios:user/peer:Peer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeer gets an existing Peer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeerState, opts ...pulumi.ResourceOption) (*Peer, error) {
	var resource Peer
	err := ctx.ReadResource("fortios:user/peer:Peer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Peer resources.
type peerState struct {
	// Name of the CA certificate as returned by the execute vpn certificate ca list command.
	Ca *string `pulumi:"ca"`
	// Peer certificate common name.
	Cn *string `pulumi:"cn"`
	// Peer certificate common name type. Valid values: `string`, `email`, `FQDN`, `ipv4`, `ipv6`.
	CnType *string `pulumi:"cnType"`
	// Mode for LDAP peer authentication. Valid values: `password`, `principal-name`.
	LdapMode *string `pulumi:"ldapMode"`
	// Password for LDAP server bind.
	LdapPassword *string `pulumi:"ldapPassword"`
	// Name of an LDAP server defined under the user ldap command. Performs client access rights check.
	LdapServer *string `pulumi:"ldapServer"`
	// Username for LDAP server bind.
	LdapUsername *string `pulumi:"ldapUsername"`
	// Determine what happens to the peer if the CA certificate is not installed. Disable to automatically consider the peer certificate as valid. Valid values: `enable`, `disable`.
	MandatoryCaVerify *string `pulumi:"mandatoryCaVerify"`
	// MFA mode for remote peer authentication/authorization. Valid values: `none`, `password`, `subject-identity`.
	MfaMode *string `pulumi:"mfaMode"`
	// Unified password for remote authentication. This field may be left empty when RADIUS authentication is used, in which case the FortiGate will use the RADIUS username as a password.
	MfaPassword *string `pulumi:"mfaPassword"`
	// Name of a remote authenticator. Performs client access right check.
	MfaServer *string `pulumi:"mfaServer"`
	// Unified username for remote authentication.
	MfaUsername *string `pulumi:"mfaUsername"`
	// Peer name.
	Name *string `pulumi:"name"`
	// Online Certificate Status Protocol (OCSP) server for certificate retrieval.
	OcspOverrideServer *string `pulumi:"ocspOverrideServer"`
	// Peer's password used for two-factor authentication.
	Passwd *string `pulumi:"passwd"`
	// Peer certificate name constraints.
	Subject *string `pulumi:"subject"`
	// Enable/disable two-factor authentication, applying certificate and password-based authentication. Valid values: `enable`, `disable`.
	TwoFactor *string `pulumi:"twoFactor"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type PeerState struct {
	// Name of the CA certificate as returned by the execute vpn certificate ca list command.
	Ca pulumi.StringPtrInput
	// Peer certificate common name.
	Cn pulumi.StringPtrInput
	// Peer certificate common name type. Valid values: `string`, `email`, `FQDN`, `ipv4`, `ipv6`.
	CnType pulumi.StringPtrInput
	// Mode for LDAP peer authentication. Valid values: `password`, `principal-name`.
	LdapMode pulumi.StringPtrInput
	// Password for LDAP server bind.
	LdapPassword pulumi.StringPtrInput
	// Name of an LDAP server defined under the user ldap command. Performs client access rights check.
	LdapServer pulumi.StringPtrInput
	// Username for LDAP server bind.
	LdapUsername pulumi.StringPtrInput
	// Determine what happens to the peer if the CA certificate is not installed. Disable to automatically consider the peer certificate as valid. Valid values: `enable`, `disable`.
	MandatoryCaVerify pulumi.StringPtrInput
	// MFA mode for remote peer authentication/authorization. Valid values: `none`, `password`, `subject-identity`.
	MfaMode pulumi.StringPtrInput
	// Unified password for remote authentication. This field may be left empty when RADIUS authentication is used, in which case the FortiGate will use the RADIUS username as a password.
	MfaPassword pulumi.StringPtrInput
	// Name of a remote authenticator. Performs client access right check.
	MfaServer pulumi.StringPtrInput
	// Unified username for remote authentication.
	MfaUsername pulumi.StringPtrInput
	// Peer name.
	Name pulumi.StringPtrInput
	// Online Certificate Status Protocol (OCSP) server for certificate retrieval.
	OcspOverrideServer pulumi.StringPtrInput
	// Peer's password used for two-factor authentication.
	Passwd pulumi.StringPtrInput
	// Peer certificate name constraints.
	Subject pulumi.StringPtrInput
	// Enable/disable two-factor authentication, applying certificate and password-based authentication. Valid values: `enable`, `disable`.
	TwoFactor pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (PeerState) ElementType() reflect.Type {
	return reflect.TypeOf((*peerState)(nil)).Elem()
}

type peerArgs struct {
	// Name of the CA certificate as returned by the execute vpn certificate ca list command.
	Ca *string `pulumi:"ca"`
	// Peer certificate common name.
	Cn *string `pulumi:"cn"`
	// Peer certificate common name type. Valid values: `string`, `email`, `FQDN`, `ipv4`, `ipv6`.
	CnType *string `pulumi:"cnType"`
	// Mode for LDAP peer authentication. Valid values: `password`, `principal-name`.
	LdapMode *string `pulumi:"ldapMode"`
	// Password for LDAP server bind.
	LdapPassword *string `pulumi:"ldapPassword"`
	// Name of an LDAP server defined under the user ldap command. Performs client access rights check.
	LdapServer *string `pulumi:"ldapServer"`
	// Username for LDAP server bind.
	LdapUsername *string `pulumi:"ldapUsername"`
	// Determine what happens to the peer if the CA certificate is not installed. Disable to automatically consider the peer certificate as valid. Valid values: `enable`, `disable`.
	MandatoryCaVerify *string `pulumi:"mandatoryCaVerify"`
	// MFA mode for remote peer authentication/authorization. Valid values: `none`, `password`, `subject-identity`.
	MfaMode *string `pulumi:"mfaMode"`
	// Unified password for remote authentication. This field may be left empty when RADIUS authentication is used, in which case the FortiGate will use the RADIUS username as a password.
	MfaPassword *string `pulumi:"mfaPassword"`
	// Name of a remote authenticator. Performs client access right check.
	MfaServer *string `pulumi:"mfaServer"`
	// Unified username for remote authentication.
	MfaUsername *string `pulumi:"mfaUsername"`
	// Peer name.
	Name *string `pulumi:"name"`
	// Online Certificate Status Protocol (OCSP) server for certificate retrieval.
	OcspOverrideServer *string `pulumi:"ocspOverrideServer"`
	// Peer's password used for two-factor authentication.
	Passwd *string `pulumi:"passwd"`
	// Peer certificate name constraints.
	Subject *string `pulumi:"subject"`
	// Enable/disable two-factor authentication, applying certificate and password-based authentication. Valid values: `enable`, `disable`.
	TwoFactor *string `pulumi:"twoFactor"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Peer resource.
type PeerArgs struct {
	// Name of the CA certificate as returned by the execute vpn certificate ca list command.
	Ca pulumi.StringPtrInput
	// Peer certificate common name.
	Cn pulumi.StringPtrInput
	// Peer certificate common name type. Valid values: `string`, `email`, `FQDN`, `ipv4`, `ipv6`.
	CnType pulumi.StringPtrInput
	// Mode for LDAP peer authentication. Valid values: `password`, `principal-name`.
	LdapMode pulumi.StringPtrInput
	// Password for LDAP server bind.
	LdapPassword pulumi.StringPtrInput
	// Name of an LDAP server defined under the user ldap command. Performs client access rights check.
	LdapServer pulumi.StringPtrInput
	// Username for LDAP server bind.
	LdapUsername pulumi.StringPtrInput
	// Determine what happens to the peer if the CA certificate is not installed. Disable to automatically consider the peer certificate as valid. Valid values: `enable`, `disable`.
	MandatoryCaVerify pulumi.StringPtrInput
	// MFA mode for remote peer authentication/authorization. Valid values: `none`, `password`, `subject-identity`.
	MfaMode pulumi.StringPtrInput
	// Unified password for remote authentication. This field may be left empty when RADIUS authentication is used, in which case the FortiGate will use the RADIUS username as a password.
	MfaPassword pulumi.StringPtrInput
	// Name of a remote authenticator. Performs client access right check.
	MfaServer pulumi.StringPtrInput
	// Unified username for remote authentication.
	MfaUsername pulumi.StringPtrInput
	// Peer name.
	Name pulumi.StringPtrInput
	// Online Certificate Status Protocol (OCSP) server for certificate retrieval.
	OcspOverrideServer pulumi.StringPtrInput
	// Peer's password used for two-factor authentication.
	Passwd pulumi.StringPtrInput
	// Peer certificate name constraints.
	Subject pulumi.StringPtrInput
	// Enable/disable two-factor authentication, applying certificate and password-based authentication. Valid values: `enable`, `disable`.
	TwoFactor pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (PeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peerArgs)(nil)).Elem()
}

type PeerInput interface {
	pulumi.Input

	ToPeerOutput() PeerOutput
	ToPeerOutputWithContext(ctx context.Context) PeerOutput
}

func (*Peer) ElementType() reflect.Type {
	return reflect.TypeOf((**Peer)(nil)).Elem()
}

func (i *Peer) ToPeerOutput() PeerOutput {
	return i.ToPeerOutputWithContext(context.Background())
}

func (i *Peer) ToPeerOutputWithContext(ctx context.Context) PeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerOutput)
}

// PeerArrayInput is an input type that accepts PeerArray and PeerArrayOutput values.
// You can construct a concrete instance of `PeerArrayInput` via:
//
//	PeerArray{ PeerArgs{...} }
type PeerArrayInput interface {
	pulumi.Input

	ToPeerArrayOutput() PeerArrayOutput
	ToPeerArrayOutputWithContext(context.Context) PeerArrayOutput
}

type PeerArray []PeerInput

func (PeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Peer)(nil)).Elem()
}

func (i PeerArray) ToPeerArrayOutput() PeerArrayOutput {
	return i.ToPeerArrayOutputWithContext(context.Background())
}

func (i PeerArray) ToPeerArrayOutputWithContext(ctx context.Context) PeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerArrayOutput)
}

// PeerMapInput is an input type that accepts PeerMap and PeerMapOutput values.
// You can construct a concrete instance of `PeerMapInput` via:
//
//	PeerMap{ "key": PeerArgs{...} }
type PeerMapInput interface {
	pulumi.Input

	ToPeerMapOutput() PeerMapOutput
	ToPeerMapOutputWithContext(context.Context) PeerMapOutput
}

type PeerMap map[string]PeerInput

func (PeerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Peer)(nil)).Elem()
}

func (i PeerMap) ToPeerMapOutput() PeerMapOutput {
	return i.ToPeerMapOutputWithContext(context.Background())
}

func (i PeerMap) ToPeerMapOutputWithContext(ctx context.Context) PeerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerMapOutput)
}

type PeerOutput struct{ *pulumi.OutputState }

func (PeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Peer)(nil)).Elem()
}

func (o PeerOutput) ToPeerOutput() PeerOutput {
	return o
}

func (o PeerOutput) ToPeerOutputWithContext(ctx context.Context) PeerOutput {
	return o
}

// Name of the CA certificate as returned by the execute vpn certificate ca list command.
func (o PeerOutput) Ca() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.Ca }).(pulumi.StringOutput)
}

// Peer certificate common name.
func (o PeerOutput) Cn() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.Cn }).(pulumi.StringOutput)
}

// Peer certificate common name type. Valid values: `string`, `email`, `FQDN`, `ipv4`, `ipv6`.
func (o PeerOutput) CnType() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.CnType }).(pulumi.StringOutput)
}

// Mode for LDAP peer authentication. Valid values: `password`, `principal-name`.
func (o PeerOutput) LdapMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.LdapMode }).(pulumi.StringOutput)
}

// Password for LDAP server bind.
func (o PeerOutput) LdapPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringPtrOutput { return v.LdapPassword }).(pulumi.StringPtrOutput)
}

// Name of an LDAP server defined under the user ldap command. Performs client access rights check.
func (o PeerOutput) LdapServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.LdapServer }).(pulumi.StringOutput)
}

// Username for LDAP server bind.
func (o PeerOutput) LdapUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.LdapUsername }).(pulumi.StringOutput)
}

// Determine what happens to the peer if the CA certificate is not installed. Disable to automatically consider the peer certificate as valid. Valid values: `enable`, `disable`.
func (o PeerOutput) MandatoryCaVerify() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.MandatoryCaVerify }).(pulumi.StringOutput)
}

// MFA mode for remote peer authentication/authorization. Valid values: `none`, `password`, `subject-identity`.
func (o PeerOutput) MfaMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.MfaMode }).(pulumi.StringOutput)
}

// Unified password for remote authentication. This field may be left empty when RADIUS authentication is used, in which case the FortiGate will use the RADIUS username as a password.
func (o PeerOutput) MfaPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringPtrOutput { return v.MfaPassword }).(pulumi.StringPtrOutput)
}

// Name of a remote authenticator. Performs client access right check.
func (o PeerOutput) MfaServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.MfaServer }).(pulumi.StringOutput)
}

// Unified username for remote authentication.
func (o PeerOutput) MfaUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.MfaUsername }).(pulumi.StringOutput)
}

// Peer name.
func (o PeerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Online Certificate Status Protocol (OCSP) server for certificate retrieval.
func (o PeerOutput) OcspOverrideServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.OcspOverrideServer }).(pulumi.StringOutput)
}

// Peer's password used for two-factor authentication.
func (o PeerOutput) Passwd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringPtrOutput { return v.Passwd }).(pulumi.StringPtrOutput)
}

// Peer certificate name constraints.
func (o PeerOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.Subject }).(pulumi.StringOutput)
}

// Enable/disable two-factor authentication, applying certificate and password-based authentication. Valid values: `enable`, `disable`.
func (o PeerOutput) TwoFactor() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.TwoFactor }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o PeerOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type PeerArrayOutput struct{ *pulumi.OutputState }

func (PeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Peer)(nil)).Elem()
}

func (o PeerArrayOutput) ToPeerArrayOutput() PeerArrayOutput {
	return o
}

func (o PeerArrayOutput) ToPeerArrayOutputWithContext(ctx context.Context) PeerArrayOutput {
	return o
}

func (o PeerArrayOutput) Index(i pulumi.IntInput) PeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Peer {
		return vs[0].([]*Peer)[vs[1].(int)]
	}).(PeerOutput)
}

type PeerMapOutput struct{ *pulumi.OutputState }

func (PeerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Peer)(nil)).Elem()
}

func (o PeerMapOutput) ToPeerMapOutput() PeerMapOutput {
	return o
}

func (o PeerMapOutput) ToPeerMapOutputWithContext(ctx context.Context) PeerMapOutput {
	return o
}

func (o PeerMapOutput) MapIndex(k pulumi.StringInput) PeerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Peer {
		return vs[0].(map[string]*Peer)[vs[1].(string)]
	}).(PeerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PeerInput)(nil)).Elem(), &Peer{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeerArrayInput)(nil)).Elem(), PeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeerMapInput)(nil)).Elem(), PeerMap{})
	pulumi.RegisterOutputType(PeerOutput{})
	pulumi.RegisterOutputType(PeerArrayOutput{})
	pulumi.RegisterOutputType(PeerMapOutput{})
}
