// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package icap

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure ICAP servers.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/icap"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := icap.NewServer(ctx, "trname", &icap.ServerArgs{
//				Ip6Address:     pulumi.String("::"),
//				IpAddress:      pulumi.String("1.1.1.1"),
//				IpVersion:      pulumi.String("4"),
//				MaxConnections: pulumi.Int(100),
//				Port:           pulumi.Int(22),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Icap Server can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:icap/server:Server labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:icap/server:Server labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Server struct {
	pulumi.CustomResourceState

	// Address type of the remote ICAP server: IPv4, IPv6 or FQDN. Valid values: `ip4`, `ip6`, `fqdn`.
	AddrType pulumi.StringOutput `pulumi:"addrType"`
	// ICAP remote server Fully Qualified Domain Name (FQDN).
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// Enable/disable ICAP remote server health checking. Attempts to connect to the remote ICAP server to verify that the server is operating normally. Valid values: `disable`, `enable`.
	Healthcheck pulumi.StringOutput `pulumi:"healthcheck"`
	// ICAP Service name to use for health checks.
	HealthcheckService pulumi.StringOutput `pulumi:"healthcheckService"`
	// IPv6 address of the ICAP server.
	Ip6Address pulumi.StringOutput `pulumi:"ip6Address"`
	// IPv4 address of the ICAP server.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// IP version. Valid values: `4`, `6`.
	IpVersion pulumi.StringOutput `pulumi:"ipVersion"`
	// Maximum number of concurrent connections to ICAP server. Must not be less than wad-worker-count.
	MaxConnections pulumi.IntOutput `pulumi:"maxConnections"`
	// Server name.
	Name pulumi.StringOutput `pulumi:"name"`
	// ICAP server port.
	Port pulumi.IntOutput `pulumi:"port"`
	// Enable/disable secure connection to ICAP server. Valid values: `enable`, `disable`.
	Secure pulumi.StringOutput `pulumi:"secure"`
	// CA certificate name.
	SslCert pulumi.StringOutput `pulumi:"sslCert"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil {
		args = &ServerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Server
	err := ctx.RegisterResource("fortios:icap/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("fortios:icap/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// Address type of the remote ICAP server: IPv4, IPv6 or FQDN. Valid values: `ip4`, `ip6`, `fqdn`.
	AddrType *string `pulumi:"addrType"`
	// ICAP remote server Fully Qualified Domain Name (FQDN).
	Fqdn *string `pulumi:"fqdn"`
	// Enable/disable ICAP remote server health checking. Attempts to connect to the remote ICAP server to verify that the server is operating normally. Valid values: `disable`, `enable`.
	Healthcheck *string `pulumi:"healthcheck"`
	// ICAP Service name to use for health checks.
	HealthcheckService *string `pulumi:"healthcheckService"`
	// IPv6 address of the ICAP server.
	Ip6Address *string `pulumi:"ip6Address"`
	// IPv4 address of the ICAP server.
	IpAddress *string `pulumi:"ipAddress"`
	// IP version. Valid values: `4`, `6`.
	IpVersion *string `pulumi:"ipVersion"`
	// Maximum number of concurrent connections to ICAP server. Must not be less than wad-worker-count.
	MaxConnections *int `pulumi:"maxConnections"`
	// Server name.
	Name *string `pulumi:"name"`
	// ICAP server port.
	Port *int `pulumi:"port"`
	// Enable/disable secure connection to ICAP server. Valid values: `enable`, `disable`.
	Secure *string `pulumi:"secure"`
	// CA certificate name.
	SslCert *string `pulumi:"sslCert"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type ServerState struct {
	// Address type of the remote ICAP server: IPv4, IPv6 or FQDN. Valid values: `ip4`, `ip6`, `fqdn`.
	AddrType pulumi.StringPtrInput
	// ICAP remote server Fully Qualified Domain Name (FQDN).
	Fqdn pulumi.StringPtrInput
	// Enable/disable ICAP remote server health checking. Attempts to connect to the remote ICAP server to verify that the server is operating normally. Valid values: `disable`, `enable`.
	Healthcheck pulumi.StringPtrInput
	// ICAP Service name to use for health checks.
	HealthcheckService pulumi.StringPtrInput
	// IPv6 address of the ICAP server.
	Ip6Address pulumi.StringPtrInput
	// IPv4 address of the ICAP server.
	IpAddress pulumi.StringPtrInput
	// IP version. Valid values: `4`, `6`.
	IpVersion pulumi.StringPtrInput
	// Maximum number of concurrent connections to ICAP server. Must not be less than wad-worker-count.
	MaxConnections pulumi.IntPtrInput
	// Server name.
	Name pulumi.StringPtrInput
	// ICAP server port.
	Port pulumi.IntPtrInput
	// Enable/disable secure connection to ICAP server. Valid values: `enable`, `disable`.
	Secure pulumi.StringPtrInput
	// CA certificate name.
	SslCert pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	// Address type of the remote ICAP server: IPv4, IPv6 or FQDN. Valid values: `ip4`, `ip6`, `fqdn`.
	AddrType *string `pulumi:"addrType"`
	// ICAP remote server Fully Qualified Domain Name (FQDN).
	Fqdn *string `pulumi:"fqdn"`
	// Enable/disable ICAP remote server health checking. Attempts to connect to the remote ICAP server to verify that the server is operating normally. Valid values: `disable`, `enable`.
	Healthcheck *string `pulumi:"healthcheck"`
	// ICAP Service name to use for health checks.
	HealthcheckService *string `pulumi:"healthcheckService"`
	// IPv6 address of the ICAP server.
	Ip6Address *string `pulumi:"ip6Address"`
	// IPv4 address of the ICAP server.
	IpAddress *string `pulumi:"ipAddress"`
	// IP version. Valid values: `4`, `6`.
	IpVersion *string `pulumi:"ipVersion"`
	// Maximum number of concurrent connections to ICAP server. Must not be less than wad-worker-count.
	MaxConnections *int `pulumi:"maxConnections"`
	// Server name.
	Name *string `pulumi:"name"`
	// ICAP server port.
	Port *int `pulumi:"port"`
	// Enable/disable secure connection to ICAP server. Valid values: `enable`, `disable`.
	Secure *string `pulumi:"secure"`
	// CA certificate name.
	SslCert *string `pulumi:"sslCert"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// Address type of the remote ICAP server: IPv4, IPv6 or FQDN. Valid values: `ip4`, `ip6`, `fqdn`.
	AddrType pulumi.StringPtrInput
	// ICAP remote server Fully Qualified Domain Name (FQDN).
	Fqdn pulumi.StringPtrInput
	// Enable/disable ICAP remote server health checking. Attempts to connect to the remote ICAP server to verify that the server is operating normally. Valid values: `disable`, `enable`.
	Healthcheck pulumi.StringPtrInput
	// ICAP Service name to use for health checks.
	HealthcheckService pulumi.StringPtrInput
	// IPv6 address of the ICAP server.
	Ip6Address pulumi.StringPtrInput
	// IPv4 address of the ICAP server.
	IpAddress pulumi.StringPtrInput
	// IP version. Valid values: `4`, `6`.
	IpVersion pulumi.StringPtrInput
	// Maximum number of concurrent connections to ICAP server. Must not be less than wad-worker-count.
	MaxConnections pulumi.IntPtrInput
	// Server name.
	Name pulumi.StringPtrInput
	// ICAP server port.
	Port pulumi.IntPtrInput
	// Enable/disable secure connection to ICAP server. Valid values: `enable`, `disable`.
	Secure pulumi.StringPtrInput
	// CA certificate name.
	SslCert pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}

type ServerInput interface {
	pulumi.Input

	ToServerOutput() ServerOutput
	ToServerOutputWithContext(ctx context.Context) ServerOutput
}

func (*Server) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (i *Server) ToServerOutput() ServerOutput {
	return i.ToServerOutputWithContext(context.Background())
}

func (i *Server) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOutput)
}

// ServerArrayInput is an input type that accepts ServerArray and ServerArrayOutput values.
// You can construct a concrete instance of `ServerArrayInput` via:
//
//	ServerArray{ ServerArgs{...} }
type ServerArrayInput interface {
	pulumi.Input

	ToServerArrayOutput() ServerArrayOutput
	ToServerArrayOutputWithContext(context.Context) ServerArrayOutput
}

type ServerArray []ServerInput

func (ServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (i ServerArray) ToServerArrayOutput() ServerArrayOutput {
	return i.ToServerArrayOutputWithContext(context.Background())
}

func (i ServerArray) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerArrayOutput)
}

// ServerMapInput is an input type that accepts ServerMap and ServerMapOutput values.
// You can construct a concrete instance of `ServerMapInput` via:
//
//	ServerMap{ "key": ServerArgs{...} }
type ServerMapInput interface {
	pulumi.Input

	ToServerMapOutput() ServerMapOutput
	ToServerMapOutputWithContext(context.Context) ServerMapOutput
}

type ServerMap map[string]ServerInput

func (ServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (i ServerMap) ToServerMapOutput() ServerMapOutput {
	return i.ToServerMapOutputWithContext(context.Background())
}

func (i ServerMap) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMapOutput)
}

type ServerOutput struct{ *pulumi.OutputState }

func (ServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (o ServerOutput) ToServerOutput() ServerOutput {
	return o
}

func (o ServerOutput) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return o
}

// Address type of the remote ICAP server: IPv4, IPv6 or FQDN. Valid values: `ip4`, `ip6`, `fqdn`.
func (o ServerOutput) AddrType() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.AddrType }).(pulumi.StringOutput)
}

// ICAP remote server Fully Qualified Domain Name (FQDN).
func (o ServerOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// Enable/disable ICAP remote server health checking. Attempts to connect to the remote ICAP server to verify that the server is operating normally. Valid values: `disable`, `enable`.
func (o ServerOutput) Healthcheck() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Healthcheck }).(pulumi.StringOutput)
}

// ICAP Service name to use for health checks.
func (o ServerOutput) HealthcheckService() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.HealthcheckService }).(pulumi.StringOutput)
}

// IPv6 address of the ICAP server.
func (o ServerOutput) Ip6Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Ip6Address }).(pulumi.StringOutput)
}

// IPv4 address of the ICAP server.
func (o ServerOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// IP version. Valid values: `4`, `6`.
func (o ServerOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.IpVersion }).(pulumi.StringOutput)
}

// Maximum number of concurrent connections to ICAP server. Must not be less than wad-worker-count.
func (o ServerOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.MaxConnections }).(pulumi.IntOutput)
}

// Server name.
func (o ServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ICAP server port.
func (o ServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Enable/disable secure connection to ICAP server. Valid values: `enable`, `disable`.
func (o ServerOutput) Secure() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Secure }).(pulumi.StringOutput)
}

// CA certificate name.
func (o ServerOutput) SslCert() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.SslCert }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ServerOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type ServerArrayOutput struct{ *pulumi.OutputState }

func (ServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (o ServerArrayOutput) ToServerArrayOutput() ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) Index(i pulumi.IntInput) ServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Server {
		return vs[0].([]*Server)[vs[1].(int)]
	}).(ServerOutput)
}

type ServerMapOutput struct{ *pulumi.OutputState }

func (ServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (o ServerMapOutput) ToServerMapOutput() ServerMapOutput {
	return o
}

func (o ServerMapOutput) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return o
}

func (o ServerMapOutput) MapIndex(k pulumi.StringInput) ServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Server {
		return vs[0].(map[string]*Server)[vs[1].(string)]
	}).(ServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerInput)(nil)).Elem(), &Server{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerArrayInput)(nil)).Elem(), ServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMapInput)(nil)).Elem(), ServerMap{})
	pulumi.RegisterOutputType(ServerOutput{})
	pulumi.RegisterOutputType(ServerArrayOutput{})
	pulumi.RegisterOutputType(ServerMapOutput{})
}
