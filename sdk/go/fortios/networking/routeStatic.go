// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Provides a resource to configure static route of FortiOS.
//
// !> **Warning:** The resource will be deprecated and replaced by new resource `router.Static`, we recommend that you use the new resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/networking"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networking.NewRouteStatic(ctx, "subnet", &networking.RouteStaticArgs{
//				Blackhole: pulumi.String("disable"),
//				Comment:   pulumi.String("Terraform test"),
//				Device:    pulumi.String("port2"),
//				Distance:  pulumi.String("22"),
//				Dst:       pulumi.String("110.2.2.122/32"),
//				Gateway:   pulumi.String("2.2.2.2"),
//				Priority:  pulumi.String("3"),
//				Status:    pulumi.String("enable"),
//				Weight:    pulumi.String("3"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networking.NewRouteStatic(ctx, "internetService", &networking.RouteStaticArgs{
//				Blackhole:       pulumi.String("disable"),
//				Comment:         pulumi.String("Terraform Test"),
//				Device:          pulumi.String("port2"),
//				Distance:        pulumi.String("22"),
//				Gateway:         pulumi.String("2.2.2.2"),
//				InternetService: pulumi.Int(5242881),
//				Priority:        pulumi.String("3"),
//				Status:          pulumi.String("enable"),
//				Weight:          pulumi.String("3"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RouteStatic struct {
	pulumi.CustomResourceState

	// Enable/disable black hole.
	Blackhole pulumi.StringOutput `pulumi:"blackhole"`
	// Optional comments.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Gateway out interface or tunnel.
	Device pulumi.StringOutput `pulumi:"device"`
	// Administrative distance.
	Distance pulumi.StringOutput `pulumi:"distance"`
	// Destination IP and mask for this route.
	Dst pulumi.StringOutput `pulumi:"dst"`
	// Gateway IP for this route.
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Application ID in the Internet service database.
	InternetService pulumi.IntOutput `pulumi:"internetService"`
	// Administrative priority.
	Priority pulumi.StringOutput `pulumi:"priority"`
	// Enable/disable this static route. default is "enable".
	Status pulumi.StringOutput `pulumi:"status"`
	// Administrative weight.
	Weight pulumi.StringOutput `pulumi:"weight"`
}

// NewRouteStatic registers a new resource with the given unique name, arguments, and options.
func NewRouteStatic(ctx *pulumi.Context,
	name string, args *RouteStaticArgs, opts ...pulumi.ResourceOption) (*RouteStatic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Device == nil {
		return nil, errors.New("invalid value for required argument 'Device'")
	}
	if args.Gateway == nil {
		return nil, errors.New("invalid value for required argument 'Gateway'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteStatic
	err := ctx.RegisterResource("fortios:networking/routeStatic:RouteStatic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteStatic gets an existing RouteStatic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteStatic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteStaticState, opts ...pulumi.ResourceOption) (*RouteStatic, error) {
	var resource RouteStatic
	err := ctx.ReadResource("fortios:networking/routeStatic:RouteStatic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteStatic resources.
type routeStaticState struct {
	// Enable/disable black hole.
	Blackhole *string `pulumi:"blackhole"`
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Gateway out interface or tunnel.
	Device *string `pulumi:"device"`
	// Administrative distance.
	Distance *string `pulumi:"distance"`
	// Destination IP and mask for this route.
	Dst *string `pulumi:"dst"`
	// Gateway IP for this route.
	Gateway *string `pulumi:"gateway"`
	// Application ID in the Internet service database.
	InternetService *int `pulumi:"internetService"`
	// Administrative priority.
	Priority *string `pulumi:"priority"`
	// Enable/disable this static route. default is "enable".
	Status *string `pulumi:"status"`
	// Administrative weight.
	Weight *string `pulumi:"weight"`
}

type RouteStaticState struct {
	// Enable/disable black hole.
	Blackhole pulumi.StringPtrInput
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Gateway out interface or tunnel.
	Device pulumi.StringPtrInput
	// Administrative distance.
	Distance pulumi.StringPtrInput
	// Destination IP and mask for this route.
	Dst pulumi.StringPtrInput
	// Gateway IP for this route.
	Gateway pulumi.StringPtrInput
	// Application ID in the Internet service database.
	InternetService pulumi.IntPtrInput
	// Administrative priority.
	Priority pulumi.StringPtrInput
	// Enable/disable this static route. default is "enable".
	Status pulumi.StringPtrInput
	// Administrative weight.
	Weight pulumi.StringPtrInput
}

func (RouteStaticState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeStaticState)(nil)).Elem()
}

type routeStaticArgs struct {
	// Enable/disable black hole.
	Blackhole *string `pulumi:"blackhole"`
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Gateway out interface or tunnel.
	Device string `pulumi:"device"`
	// Administrative distance.
	Distance *string `pulumi:"distance"`
	// Destination IP and mask for this route.
	Dst *string `pulumi:"dst"`
	// Gateway IP for this route.
	Gateway string `pulumi:"gateway"`
	// Application ID in the Internet service database.
	InternetService *int `pulumi:"internetService"`
	// Administrative priority.
	Priority *string `pulumi:"priority"`
	// Enable/disable this static route. default is "enable".
	Status *string `pulumi:"status"`
	// Administrative weight.
	Weight *string `pulumi:"weight"`
}

// The set of arguments for constructing a RouteStatic resource.
type RouteStaticArgs struct {
	// Enable/disable black hole.
	Blackhole pulumi.StringPtrInput
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Gateway out interface or tunnel.
	Device pulumi.StringInput
	// Administrative distance.
	Distance pulumi.StringPtrInput
	// Destination IP and mask for this route.
	Dst pulumi.StringPtrInput
	// Gateway IP for this route.
	Gateway pulumi.StringInput
	// Application ID in the Internet service database.
	InternetService pulumi.IntPtrInput
	// Administrative priority.
	Priority pulumi.StringPtrInput
	// Enable/disable this static route. default is "enable".
	Status pulumi.StringPtrInput
	// Administrative weight.
	Weight pulumi.StringPtrInput
}

func (RouteStaticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeStaticArgs)(nil)).Elem()
}

type RouteStaticInput interface {
	pulumi.Input

	ToRouteStaticOutput() RouteStaticOutput
	ToRouteStaticOutputWithContext(ctx context.Context) RouteStaticOutput
}

func (*RouteStatic) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteStatic)(nil)).Elem()
}

func (i *RouteStatic) ToRouteStaticOutput() RouteStaticOutput {
	return i.ToRouteStaticOutputWithContext(context.Background())
}

func (i *RouteStatic) ToRouteStaticOutputWithContext(ctx context.Context) RouteStaticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteStaticOutput)
}

// RouteStaticArrayInput is an input type that accepts RouteStaticArray and RouteStaticArrayOutput values.
// You can construct a concrete instance of `RouteStaticArrayInput` via:
//
//	RouteStaticArray{ RouteStaticArgs{...} }
type RouteStaticArrayInput interface {
	pulumi.Input

	ToRouteStaticArrayOutput() RouteStaticArrayOutput
	ToRouteStaticArrayOutputWithContext(context.Context) RouteStaticArrayOutput
}

type RouteStaticArray []RouteStaticInput

func (RouteStaticArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteStatic)(nil)).Elem()
}

func (i RouteStaticArray) ToRouteStaticArrayOutput() RouteStaticArrayOutput {
	return i.ToRouteStaticArrayOutputWithContext(context.Background())
}

func (i RouteStaticArray) ToRouteStaticArrayOutputWithContext(ctx context.Context) RouteStaticArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteStaticArrayOutput)
}

// RouteStaticMapInput is an input type that accepts RouteStaticMap and RouteStaticMapOutput values.
// You can construct a concrete instance of `RouteStaticMapInput` via:
//
//	RouteStaticMap{ "key": RouteStaticArgs{...} }
type RouteStaticMapInput interface {
	pulumi.Input

	ToRouteStaticMapOutput() RouteStaticMapOutput
	ToRouteStaticMapOutputWithContext(context.Context) RouteStaticMapOutput
}

type RouteStaticMap map[string]RouteStaticInput

func (RouteStaticMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteStatic)(nil)).Elem()
}

func (i RouteStaticMap) ToRouteStaticMapOutput() RouteStaticMapOutput {
	return i.ToRouteStaticMapOutputWithContext(context.Background())
}

func (i RouteStaticMap) ToRouteStaticMapOutputWithContext(ctx context.Context) RouteStaticMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteStaticMapOutput)
}

type RouteStaticOutput struct{ *pulumi.OutputState }

func (RouteStaticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteStatic)(nil)).Elem()
}

func (o RouteStaticOutput) ToRouteStaticOutput() RouteStaticOutput {
	return o
}

func (o RouteStaticOutput) ToRouteStaticOutputWithContext(ctx context.Context) RouteStaticOutput {
	return o
}

// Enable/disable black hole.
func (o RouteStaticOutput) Blackhole() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteStatic) pulumi.StringOutput { return v.Blackhole }).(pulumi.StringOutput)
}

// Optional comments.
func (o RouteStaticOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteStatic) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Gateway out interface or tunnel.
func (o RouteStaticOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteStatic) pulumi.StringOutput { return v.Device }).(pulumi.StringOutput)
}

// Administrative distance.
func (o RouteStaticOutput) Distance() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteStatic) pulumi.StringOutput { return v.Distance }).(pulumi.StringOutput)
}

// Destination IP and mask for this route.
func (o RouteStaticOutput) Dst() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteStatic) pulumi.StringOutput { return v.Dst }).(pulumi.StringOutput)
}

// Gateway IP for this route.
func (o RouteStaticOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteStatic) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// Application ID in the Internet service database.
func (o RouteStaticOutput) InternetService() pulumi.IntOutput {
	return o.ApplyT(func(v *RouteStatic) pulumi.IntOutput { return v.InternetService }).(pulumi.IntOutput)
}

// Administrative priority.
func (o RouteStaticOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteStatic) pulumi.StringOutput { return v.Priority }).(pulumi.StringOutput)
}

// Enable/disable this static route. default is "enable".
func (o RouteStaticOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteStatic) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Administrative weight.
func (o RouteStaticOutput) Weight() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteStatic) pulumi.StringOutput { return v.Weight }).(pulumi.StringOutput)
}

type RouteStaticArrayOutput struct{ *pulumi.OutputState }

func (RouteStaticArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteStatic)(nil)).Elem()
}

func (o RouteStaticArrayOutput) ToRouteStaticArrayOutput() RouteStaticArrayOutput {
	return o
}

func (o RouteStaticArrayOutput) ToRouteStaticArrayOutputWithContext(ctx context.Context) RouteStaticArrayOutput {
	return o
}

func (o RouteStaticArrayOutput) Index(i pulumi.IntInput) RouteStaticOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteStatic {
		return vs[0].([]*RouteStatic)[vs[1].(int)]
	}).(RouteStaticOutput)
}

type RouteStaticMapOutput struct{ *pulumi.OutputState }

func (RouteStaticMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteStatic)(nil)).Elem()
}

func (o RouteStaticMapOutput) ToRouteStaticMapOutput() RouteStaticMapOutput {
	return o
}

func (o RouteStaticMapOutput) ToRouteStaticMapOutputWithContext(ctx context.Context) RouteStaticMapOutput {
	return o
}

func (o RouteStaticMapOutput) MapIndex(k pulumi.StringInput) RouteStaticOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteStatic {
		return vs[0].(map[string]*RouteStatic)[vs[1].(string)]
	}).(RouteStaticOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteStaticInput)(nil)).Elem(), &RouteStatic{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteStaticArrayInput)(nil)).Elem(), RouteStaticArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteStaticMapInput)(nil)).Elem(), RouteStaticMap{})
	pulumi.RegisterOutputType(RouteStaticOutput{})
	pulumi.RegisterOutputType(RouteStaticArrayOutput{})
	pulumi.RegisterOutputType(RouteStaticMapOutput{})
}
