// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package voip

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

var _ = internal.GetEnvOrDefault

type ProfileMsrp struct {
	// Enable/disable logging of MSRP violations. Valid values: `disable`, `enable`.
	LogViolations *string `pulumi:"logViolations"`
	// Maximum allowable MSRP message size (1-65535).
	MaxMsgSize *int `pulumi:"maxMsgSize"`
	// Action for violation of max-msg-size. Valid values: `pass`, `block`, `reset`, `monitor`.
	MaxMsgSizeAction *string `pulumi:"maxMsgSizeAction"`
	// Enable/disable MSRP. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
}

// ProfileMsrpInput is an input type that accepts ProfileMsrpArgs and ProfileMsrpOutput values.
// You can construct a concrete instance of `ProfileMsrpInput` via:
//
//	ProfileMsrpArgs{...}
type ProfileMsrpInput interface {
	pulumi.Input

	ToProfileMsrpOutput() ProfileMsrpOutput
	ToProfileMsrpOutputWithContext(context.Context) ProfileMsrpOutput
}

type ProfileMsrpArgs struct {
	// Enable/disable logging of MSRP violations. Valid values: `disable`, `enable`.
	LogViolations pulumi.StringPtrInput `pulumi:"logViolations"`
	// Maximum allowable MSRP message size (1-65535).
	MaxMsgSize pulumi.IntPtrInput `pulumi:"maxMsgSize"`
	// Action for violation of max-msg-size. Valid values: `pass`, `block`, `reset`, `monitor`.
	MaxMsgSizeAction pulumi.StringPtrInput `pulumi:"maxMsgSizeAction"`
	// Enable/disable MSRP. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ProfileMsrpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileMsrp)(nil)).Elem()
}

func (i ProfileMsrpArgs) ToProfileMsrpOutput() ProfileMsrpOutput {
	return i.ToProfileMsrpOutputWithContext(context.Background())
}

func (i ProfileMsrpArgs) ToProfileMsrpOutputWithContext(ctx context.Context) ProfileMsrpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMsrpOutput)
}

func (i ProfileMsrpArgs) ToProfileMsrpPtrOutput() ProfileMsrpPtrOutput {
	return i.ToProfileMsrpPtrOutputWithContext(context.Background())
}

func (i ProfileMsrpArgs) ToProfileMsrpPtrOutputWithContext(ctx context.Context) ProfileMsrpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMsrpOutput).ToProfileMsrpPtrOutputWithContext(ctx)
}

// ProfileMsrpPtrInput is an input type that accepts ProfileMsrpArgs, ProfileMsrpPtr and ProfileMsrpPtrOutput values.
// You can construct a concrete instance of `ProfileMsrpPtrInput` via:
//
//	        ProfileMsrpArgs{...}
//
//	or:
//
//	        nil
type ProfileMsrpPtrInput interface {
	pulumi.Input

	ToProfileMsrpPtrOutput() ProfileMsrpPtrOutput
	ToProfileMsrpPtrOutputWithContext(context.Context) ProfileMsrpPtrOutput
}

type profileMsrpPtrType ProfileMsrpArgs

func ProfileMsrpPtr(v *ProfileMsrpArgs) ProfileMsrpPtrInput {
	return (*profileMsrpPtrType)(v)
}

func (*profileMsrpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileMsrp)(nil)).Elem()
}

func (i *profileMsrpPtrType) ToProfileMsrpPtrOutput() ProfileMsrpPtrOutput {
	return i.ToProfileMsrpPtrOutputWithContext(context.Background())
}

func (i *profileMsrpPtrType) ToProfileMsrpPtrOutputWithContext(ctx context.Context) ProfileMsrpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMsrpPtrOutput)
}

type ProfileMsrpOutput struct{ *pulumi.OutputState }

func (ProfileMsrpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileMsrp)(nil)).Elem()
}

func (o ProfileMsrpOutput) ToProfileMsrpOutput() ProfileMsrpOutput {
	return o
}

func (o ProfileMsrpOutput) ToProfileMsrpOutputWithContext(ctx context.Context) ProfileMsrpOutput {
	return o
}

func (o ProfileMsrpOutput) ToProfileMsrpPtrOutput() ProfileMsrpPtrOutput {
	return o.ToProfileMsrpPtrOutputWithContext(context.Background())
}

func (o ProfileMsrpOutput) ToProfileMsrpPtrOutputWithContext(ctx context.Context) ProfileMsrpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileMsrp) *ProfileMsrp {
		return &v
	}).(ProfileMsrpPtrOutput)
}

// Enable/disable logging of MSRP violations. Valid values: `disable`, `enable`.
func (o ProfileMsrpOutput) LogViolations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileMsrp) *string { return v.LogViolations }).(pulumi.StringPtrOutput)
}

// Maximum allowable MSRP message size (1-65535).
func (o ProfileMsrpOutput) MaxMsgSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileMsrp) *int { return v.MaxMsgSize }).(pulumi.IntPtrOutput)
}

// Action for violation of max-msg-size. Valid values: `pass`, `block`, `reset`, `monitor`.
func (o ProfileMsrpOutput) MaxMsgSizeAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileMsrp) *string { return v.MaxMsgSizeAction }).(pulumi.StringPtrOutput)
}

// Enable/disable MSRP. Valid values: `disable`, `enable`.
func (o ProfileMsrpOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileMsrp) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ProfileMsrpPtrOutput struct{ *pulumi.OutputState }

func (ProfileMsrpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileMsrp)(nil)).Elem()
}

func (o ProfileMsrpPtrOutput) ToProfileMsrpPtrOutput() ProfileMsrpPtrOutput {
	return o
}

func (o ProfileMsrpPtrOutput) ToProfileMsrpPtrOutputWithContext(ctx context.Context) ProfileMsrpPtrOutput {
	return o
}

func (o ProfileMsrpPtrOutput) Elem() ProfileMsrpOutput {
	return o.ApplyT(func(v *ProfileMsrp) ProfileMsrp {
		if v != nil {
			return *v
		}
		var ret ProfileMsrp
		return ret
	}).(ProfileMsrpOutput)
}

// Enable/disable logging of MSRP violations. Valid values: `disable`, `enable`.
func (o ProfileMsrpPtrOutput) LogViolations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileMsrp) *string {
		if v == nil {
			return nil
		}
		return v.LogViolations
	}).(pulumi.StringPtrOutput)
}

// Maximum allowable MSRP message size (1-65535).
func (o ProfileMsrpPtrOutput) MaxMsgSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileMsrp) *int {
		if v == nil {
			return nil
		}
		return v.MaxMsgSize
	}).(pulumi.IntPtrOutput)
}

// Action for violation of max-msg-size. Valid values: `pass`, `block`, `reset`, `monitor`.
func (o ProfileMsrpPtrOutput) MaxMsgSizeAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileMsrp) *string {
		if v == nil {
			return nil
		}
		return v.MaxMsgSizeAction
	}).(pulumi.StringPtrOutput)
}

// Enable/disable MSRP. Valid values: `disable`, `enable`.
func (o ProfileMsrpPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileMsrp) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type ProfileSccp struct {
	// Enable/disable block multicast RTP connections. Valid values: `disable`, `enable`.
	BlockMcast *string `pulumi:"blockMcast"`
	// Enable/disable log summary of SCCP calls. Valid values: `disable`, `enable`.
	LogCallSummary *string `pulumi:"logCallSummary"`
	// Enable/disable logging of SCCP violations. Valid values: `disable`, `enable`.
	LogViolations *string `pulumi:"logViolations"`
	// Maximum calls per minute per SCCP client (max 65535).
	MaxCalls *int `pulumi:"maxCalls"`
	// Enable/disable SCCP. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// Enable/disable verify SCCP header content. Valid values: `disable`, `enable`.
	VerifyHeader *string `pulumi:"verifyHeader"`
}

// ProfileSccpInput is an input type that accepts ProfileSccpArgs and ProfileSccpOutput values.
// You can construct a concrete instance of `ProfileSccpInput` via:
//
//	ProfileSccpArgs{...}
type ProfileSccpInput interface {
	pulumi.Input

	ToProfileSccpOutput() ProfileSccpOutput
	ToProfileSccpOutputWithContext(context.Context) ProfileSccpOutput
}

type ProfileSccpArgs struct {
	// Enable/disable block multicast RTP connections. Valid values: `disable`, `enable`.
	BlockMcast pulumi.StringPtrInput `pulumi:"blockMcast"`
	// Enable/disable log summary of SCCP calls. Valid values: `disable`, `enable`.
	LogCallSummary pulumi.StringPtrInput `pulumi:"logCallSummary"`
	// Enable/disable logging of SCCP violations. Valid values: `disable`, `enable`.
	LogViolations pulumi.StringPtrInput `pulumi:"logViolations"`
	// Maximum calls per minute per SCCP client (max 65535).
	MaxCalls pulumi.IntPtrInput `pulumi:"maxCalls"`
	// Enable/disable SCCP. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Enable/disable verify SCCP header content. Valid values: `disable`, `enable`.
	VerifyHeader pulumi.StringPtrInput `pulumi:"verifyHeader"`
}

func (ProfileSccpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileSccp)(nil)).Elem()
}

func (i ProfileSccpArgs) ToProfileSccpOutput() ProfileSccpOutput {
	return i.ToProfileSccpOutputWithContext(context.Background())
}

func (i ProfileSccpArgs) ToProfileSccpOutputWithContext(ctx context.Context) ProfileSccpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileSccpOutput)
}

func (i ProfileSccpArgs) ToProfileSccpPtrOutput() ProfileSccpPtrOutput {
	return i.ToProfileSccpPtrOutputWithContext(context.Background())
}

func (i ProfileSccpArgs) ToProfileSccpPtrOutputWithContext(ctx context.Context) ProfileSccpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileSccpOutput).ToProfileSccpPtrOutputWithContext(ctx)
}

// ProfileSccpPtrInput is an input type that accepts ProfileSccpArgs, ProfileSccpPtr and ProfileSccpPtrOutput values.
// You can construct a concrete instance of `ProfileSccpPtrInput` via:
//
//	        ProfileSccpArgs{...}
//
//	or:
//
//	        nil
type ProfileSccpPtrInput interface {
	pulumi.Input

	ToProfileSccpPtrOutput() ProfileSccpPtrOutput
	ToProfileSccpPtrOutputWithContext(context.Context) ProfileSccpPtrOutput
}

type profileSccpPtrType ProfileSccpArgs

func ProfileSccpPtr(v *ProfileSccpArgs) ProfileSccpPtrInput {
	return (*profileSccpPtrType)(v)
}

func (*profileSccpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileSccp)(nil)).Elem()
}

func (i *profileSccpPtrType) ToProfileSccpPtrOutput() ProfileSccpPtrOutput {
	return i.ToProfileSccpPtrOutputWithContext(context.Background())
}

func (i *profileSccpPtrType) ToProfileSccpPtrOutputWithContext(ctx context.Context) ProfileSccpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileSccpPtrOutput)
}

type ProfileSccpOutput struct{ *pulumi.OutputState }

func (ProfileSccpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileSccp)(nil)).Elem()
}

func (o ProfileSccpOutput) ToProfileSccpOutput() ProfileSccpOutput {
	return o
}

func (o ProfileSccpOutput) ToProfileSccpOutputWithContext(ctx context.Context) ProfileSccpOutput {
	return o
}

func (o ProfileSccpOutput) ToProfileSccpPtrOutput() ProfileSccpPtrOutput {
	return o.ToProfileSccpPtrOutputWithContext(context.Background())
}

func (o ProfileSccpOutput) ToProfileSccpPtrOutputWithContext(ctx context.Context) ProfileSccpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileSccp) *ProfileSccp {
		return &v
	}).(ProfileSccpPtrOutput)
}

// Enable/disable block multicast RTP connections. Valid values: `disable`, `enable`.
func (o ProfileSccpOutput) BlockMcast() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSccp) *string { return v.BlockMcast }).(pulumi.StringPtrOutput)
}

// Enable/disable log summary of SCCP calls. Valid values: `disable`, `enable`.
func (o ProfileSccpOutput) LogCallSummary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSccp) *string { return v.LogCallSummary }).(pulumi.StringPtrOutput)
}

// Enable/disable logging of SCCP violations. Valid values: `disable`, `enable`.
func (o ProfileSccpOutput) LogViolations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSccp) *string { return v.LogViolations }).(pulumi.StringPtrOutput)
}

// Maximum calls per minute per SCCP client (max 65535).
func (o ProfileSccpOutput) MaxCalls() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSccp) *int { return v.MaxCalls }).(pulumi.IntPtrOutput)
}

// Enable/disable SCCP. Valid values: `disable`, `enable`.
func (o ProfileSccpOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSccp) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Enable/disable verify SCCP header content. Valid values: `disable`, `enable`.
func (o ProfileSccpOutput) VerifyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSccp) *string { return v.VerifyHeader }).(pulumi.StringPtrOutput)
}

type ProfileSccpPtrOutput struct{ *pulumi.OutputState }

func (ProfileSccpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileSccp)(nil)).Elem()
}

func (o ProfileSccpPtrOutput) ToProfileSccpPtrOutput() ProfileSccpPtrOutput {
	return o
}

func (o ProfileSccpPtrOutput) ToProfileSccpPtrOutputWithContext(ctx context.Context) ProfileSccpPtrOutput {
	return o
}

func (o ProfileSccpPtrOutput) Elem() ProfileSccpOutput {
	return o.ApplyT(func(v *ProfileSccp) ProfileSccp {
		if v != nil {
			return *v
		}
		var ret ProfileSccp
		return ret
	}).(ProfileSccpOutput)
}

// Enable/disable block multicast RTP connections. Valid values: `disable`, `enable`.
func (o ProfileSccpPtrOutput) BlockMcast() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSccp) *string {
		if v == nil {
			return nil
		}
		return v.BlockMcast
	}).(pulumi.StringPtrOutput)
}

// Enable/disable log summary of SCCP calls. Valid values: `disable`, `enable`.
func (o ProfileSccpPtrOutput) LogCallSummary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSccp) *string {
		if v == nil {
			return nil
		}
		return v.LogCallSummary
	}).(pulumi.StringPtrOutput)
}

// Enable/disable logging of SCCP violations. Valid values: `disable`, `enable`.
func (o ProfileSccpPtrOutput) LogViolations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSccp) *string {
		if v == nil {
			return nil
		}
		return v.LogViolations
	}).(pulumi.StringPtrOutput)
}

// Maximum calls per minute per SCCP client (max 65535).
func (o ProfileSccpPtrOutput) MaxCalls() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSccp) *int {
		if v == nil {
			return nil
		}
		return v.MaxCalls
	}).(pulumi.IntPtrOutput)
}

// Enable/disable SCCP. Valid values: `disable`, `enable`.
func (o ProfileSccpPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSccp) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Enable/disable verify SCCP header content. Valid values: `disable`, `enable`.
func (o ProfileSccpPtrOutput) VerifyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSccp) *string {
		if v == nil {
			return nil
		}
		return v.VerifyHeader
	}).(pulumi.StringPtrOutput)
}

type ProfileSip struct {
	// ACK request rate limit (per second, per policy).
	AckRate *int `pulumi:"ackRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	AckRateTrack *string `pulumi:"ackRateTrack"`
	// Enable/disable block ACK requests. Valid values: `disable`, `enable`.
	BlockAck *string `pulumi:"blockAck"`
	// Enable/disable block BYE requests. Valid values: `disable`, `enable`.
	BlockBye *string `pulumi:"blockBye"`
	// Enable/disable block CANCEL requests. Valid values: `disable`, `enable`.
	BlockCancel *string `pulumi:"blockCancel"`
	// Enable/disable block OPTIONS requests, but OPTIONS requests still notify for redundancy. Valid values: `disable`, `enable`.
	BlockGeoRedOptions *string `pulumi:"blockGeoRedOptions"`
	// Enable/disable block INFO requests. Valid values: `disable`, `enable`.
	BlockInfo *string `pulumi:"blockInfo"`
	// Enable/disable block INVITE requests. Valid values: `disable`, `enable`.
	BlockInvite *string `pulumi:"blockInvite"`
	// Enable/disable block requests with headers exceeding max-line-length. Valid values: `disable`, `enable`.
	BlockLongLines *string `pulumi:"blockLongLines"`
	// Enable/disable block MESSAGE requests. Valid values: `disable`, `enable`.
	BlockMessage *string `pulumi:"blockMessage"`
	// Enable/disable block NOTIFY requests. Valid values: `disable`, `enable`.
	BlockNotify *string `pulumi:"blockNotify"`
	// Enable/disable block OPTIONS requests and no OPTIONS as notifying message for redundancy either. Valid values: `disable`, `enable`.
	BlockOptions *string `pulumi:"blockOptions"`
	// Enable/disable block prack requests. Valid values: `disable`, `enable`.
	BlockPrack *string `pulumi:"blockPrack"`
	// Enable/disable block PUBLISH requests. Valid values: `disable`, `enable`.
	BlockPublish *string `pulumi:"blockPublish"`
	// Enable/disable block REFER requests. Valid values: `disable`, `enable`.
	BlockRefer *string `pulumi:"blockRefer"`
	// Enable/disable block REGISTER requests. Valid values: `disable`, `enable`.
	BlockRegister *string `pulumi:"blockRegister"`
	// Enable/disable block SUBSCRIBE requests. Valid values: `disable`, `enable`.
	BlockSubscribe *string `pulumi:"blockSubscribe"`
	// Block unrecognized SIP requests (enabled by default). Valid values: `disable`, `enable`.
	BlockUnknown *string `pulumi:"blockUnknown"`
	// Enable/disable block UPDATE requests. Valid values: `disable`, `enable`.
	BlockUpdate *string `pulumi:"blockUpdate"`
	// BYE request rate limit (per second, per policy).
	ByeRate *int `pulumi:"byeRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	ByeRateTrack *string `pulumi:"byeRateTrack"`
	// Validate PCRE regular expression for Call-Id header value.
	CallIdRegex *string `pulumi:"callIdRegex"`
	// Continue tracking calls with no RTP for this many minutes.
	CallKeepalive *int `pulumi:"callKeepalive"`
	// CANCEL request rate limit (per second, per policy).
	CancelRate *int `pulumi:"cancelRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	CancelRateTrack *string `pulumi:"cancelRateTrack"`
	// Fixup contact anyway even if contact's IP:port doesn't match session's IP:port. Valid values: `disable`, `enable`.
	ContactFixup *string `pulumi:"contactFixup"`
	// Validate PCRE regular expression for Content-Type header value.
	ContentTypeRegex *string `pulumi:"contentTypeRegex"`
	// Enable/disable restrict RTP source IP to be the same as SIP source IP when HNT is enabled. Valid values: `disable`, `enable`.
	HntRestrictSourceIp *string `pulumi:"hntRestrictSourceIp"`
	// Hosted NAT Traversal (HNT). Valid values: `disable`, `enable`.
	HostedNatTraversal *string `pulumi:"hostedNatTraversal"`
	// INFO request rate limit (per second, per policy).
	InfoRate *int `pulumi:"infoRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	InfoRateTrack *string `pulumi:"infoRateTrack"`
	// INVITE request rate limit (per second, per policy).
	InviteRate *int `pulumi:"inviteRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	InviteRateTrack *string `pulumi:"inviteRateTrack"`
	// Enable/disable allow IPS on RTP. Valid values: `disable`, `enable`.
	IpsRtp *string `pulumi:"ipsRtp"`
	// Enable/disable logging of SIP call summary. Valid values: `disable`, `enable`.
	LogCallSummary *string `pulumi:"logCallSummary"`
	// Enable/disable logging of SIP violations. Valid values: `disable`, `enable`.
	LogViolations *string `pulumi:"logViolations"`
	// Action for malformed Allow header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderAllow *string `pulumi:"malformedHeaderAllow"`
	// Action for malformed Call-ID header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderCallId *string `pulumi:"malformedHeaderCallId"`
	// Action for malformed Contact header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderContact *string `pulumi:"malformedHeaderContact"`
	// Action for malformed Content-Length header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderContentLength *string `pulumi:"malformedHeaderContentLength"`
	// Action for malformed Content-Type header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderContentType *string `pulumi:"malformedHeaderContentType"`
	// Action for malformed CSeq header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderCseq *string `pulumi:"malformedHeaderCseq"`
	// Action for malformed Expires header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderExpires *string `pulumi:"malformedHeaderExpires"`
	// Action for malformed From header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderFrom *string `pulumi:"malformedHeaderFrom"`
	// Action for malformed Max-Forwards header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderMaxForwards *string `pulumi:"malformedHeaderMaxForwards"`
	// Action for malformed SIP messages without Proxy-Require header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderNoProxyRequire *string `pulumi:"malformedHeaderNoProxyRequire"`
	// Action for malformed SIP messages without Require header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderNoRequire *string `pulumi:"malformedHeaderNoRequire"`
	// Action for malformed P-Asserted-Identity header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderPAssertedIdentity *string `pulumi:"malformedHeaderPAssertedIdentity"`
	// Action for malformed RAck header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderRack *string `pulumi:"malformedHeaderRack"`
	// Action for malformed Record-Route header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderRecordRoute *string `pulumi:"malformedHeaderRecordRoute"`
	// Action for malformed Route header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderRoute *string `pulumi:"malformedHeaderRoute"`
	// Action for malformed RSeq header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderRseq *string `pulumi:"malformedHeaderRseq"`
	// Action for malformed SDP a line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpA *string `pulumi:"malformedHeaderSdpA"`
	// Action for malformed SDP b line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpB *string `pulumi:"malformedHeaderSdpB"`
	// Action for malformed SDP c line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpC *string `pulumi:"malformedHeaderSdpC"`
	// Action for malformed SDP i line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpI *string `pulumi:"malformedHeaderSdpI"`
	// Action for malformed SDP k line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpK *string `pulumi:"malformedHeaderSdpK"`
	// Action for malformed SDP m line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpM *string `pulumi:"malformedHeaderSdpM"`
	// Action for malformed SDP o line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpO *string `pulumi:"malformedHeaderSdpO"`
	// Action for malformed SDP r line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpR *string `pulumi:"malformedHeaderSdpR"`
	// Action for malformed SDP s line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpS *string `pulumi:"malformedHeaderSdpS"`
	// Action for malformed SDP t line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpT *string `pulumi:"malformedHeaderSdpT"`
	// Action for malformed SDP v line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpV *string `pulumi:"malformedHeaderSdpV"`
	// Action for malformed SDP z line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpZ *string `pulumi:"malformedHeaderSdpZ"`
	// Action for malformed To header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderTo *string `pulumi:"malformedHeaderTo"`
	// Action for malformed VIA header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderVia *string `pulumi:"malformedHeaderVia"`
	// Action for malformed request line. Valid values: `discard`, `pass`, `respond`.
	MalformedRequestLine *string `pulumi:"malformedRequestLine"`
	// Maximum SIP message body length (0 meaning no limit).
	MaxBodyLength *int `pulumi:"maxBodyLength"`
	// Maximum number of concurrent calls/dialogs (per policy).
	MaxDialogs *int `pulumi:"maxDialogs"`
	// Maximum number established but idle dialogs to retain (per policy).
	MaxIdleDialogs *int `pulumi:"maxIdleDialogs"`
	// Maximum SIP header line length (78-4096).
	MaxLineLength *int `pulumi:"maxLineLength"`
	// MESSAGE request rate limit (per second, per policy).
	MessageRate *int `pulumi:"messageRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	MessageRateTrack *string `pulumi:"messageRateTrack"`
	// RTP NAT port range.
	NatPortRange *string `pulumi:"natPortRange"`
	// Enable/disable preservation of original IP in SDP i line. Valid values: `disable`, `enable`.
	NatTrace *string `pulumi:"natTrace"`
	// Enable/disable no SDP fix-up. Valid values: `disable`, `enable`.
	NoSdpFixup *string `pulumi:"noSdpFixup"`
	// NOTIFY request rate limit (per second, per policy).
	NotifyRate *int `pulumi:"notifyRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	NotifyRateTrack *string `pulumi:"notifyRateTrack"`
	// Enable/disable open pinhole for non-REGISTER Contact port. Valid values: `disable`, `enable`.
	OpenContactPinhole *string `pulumi:"openContactPinhole"`
	// Enable/disable open pinhole for Record-Route port. Valid values: `disable`, `enable`.
	OpenRecordRoutePinhole *string `pulumi:"openRecordRoutePinhole"`
	// Enable/disable open pinhole for REGISTER Contact port. Valid values: `disable`, `enable`.
	OpenRegisterPinhole *string `pulumi:"openRegisterPinhole"`
	// Enable/disable open pinhole for Via port. Valid values: `disable`, `enable`.
	OpenViaPinhole *string `pulumi:"openViaPinhole"`
	// OPTIONS request rate limit (per second, per policy).
	OptionsRate *int `pulumi:"optionsRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	OptionsRateTrack *string `pulumi:"optionsRateTrack"`
	// PRACK request rate limit (per second, per policy).
	PrackRate *int `pulumi:"prackRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	PrackRateTrack *string `pulumi:"prackRateTrack"`
	// Override i line to preserve original IPS (default: append). Valid values: `disable`, `enable`.
	PreserveOverride *string `pulumi:"preserveOverride"`
	// Expiry time for provisional INVITE (10 - 3600 sec).
	ProvisionalInviteExpiryTime *int `pulumi:"provisionalInviteExpiryTime"`
	// PUBLISH request rate limit (per second, per policy).
	PublishRate *int `pulumi:"publishRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	PublishRateTrack *string `pulumi:"publishRateTrack"`
	// REFER request rate limit (per second, per policy).
	ReferRate *int `pulumi:"referRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	ReferRateTrack *string `pulumi:"referRateTrack"`
	// Enable/disable trace original IP/port within the contact header of REGISTER requests. Valid values: `disable`, `enable`.
	RegisterContactTrace *string `pulumi:"registerContactTrace"`
	// REGISTER request rate limit (per second, per policy).
	RegisterRate *int `pulumi:"registerRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	RegisterRateTrack *string `pulumi:"registerRateTrack"`
	// Enable/disable support via branch compliant with RFC 2543. Valid values: `disable`, `enable`.
	Rfc2543Branch *string `pulumi:"rfc2543Branch"`
	// Enable/disable create pinholes for RTP traffic to traverse firewall. Valid values: `disable`, `enable`.
	Rtp *string `pulumi:"rtp"`
	// Relative strength of encryption algorithms accepted in negotiation. Valid values: `high`, `medium`, `low`.
	SslAlgorithm *string `pulumi:"sslAlgorithm"`
	// Require a client certificate and authenticate it with the peer/peergrp.
	SslAuthClient *string `pulumi:"sslAuthClient"`
	// Authenticate the server's certificate with the peer/peergrp.
	SslAuthServer *string `pulumi:"sslAuthServer"`
	// Name of Certificate to offer to server if requested.
	SslClientCertificate *string `pulumi:"sslClientCertificate"`
	// Allow/block client renegotiation by server. Valid values: `allow`, `deny`, `secure`.
	SslClientRenegotiation *string `pulumi:"sslClientRenegotiation"`
	// Highest SSL/TLS version to negotiate.
	SslMaxVersion *string `pulumi:"sslMaxVersion"`
	// Lowest SSL/TLS version to negotiate.
	SslMinVersion *string `pulumi:"sslMinVersion"`
	// SSL/TLS mode for encryption & decryption of traffic. Valid values: `off`, `full`.
	SslMode *string `pulumi:"sslMode"`
	// SSL Perfect Forward Secrecy. Valid values: `require`, `deny`, `allow`.
	SslPfs *string `pulumi:"sslPfs"`
	// Send empty fragments to avoid attack on CBC IV (SSL 3.0 & TLS 1.0 only). Valid values: `enable`, `disable`.
	SslSendEmptyFrags *string `pulumi:"sslSendEmptyFrags"`
	// Name of Certificate return to the client in every SSL connection.
	SslServerCertificate *string `pulumi:"sslServerCertificate"`
	// Enable/disable SIP. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// Enable/disable only allow the registrar to connect. Valid values: `disable`, `enable`.
	StrictRegister *string `pulumi:"strictRegister"`
	// SUBSCRIBE request rate limit (per second, per policy).
	SubscribeRate *int `pulumi:"subscribeRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	SubscribeRateTrack *string `pulumi:"subscribeRateTrack"`
	// Action for unknown SIP header. Valid values: `discard`, `pass`, `respond`.
	UnknownHeader *string `pulumi:"unknownHeader"`
	// UPDATE request rate limit (per second, per policy).
	UpdateRate *int `pulumi:"updateRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	UpdateRateTrack *string `pulumi:"updateRateTrack"`
}

// ProfileSipInput is an input type that accepts ProfileSipArgs and ProfileSipOutput values.
// You can construct a concrete instance of `ProfileSipInput` via:
//
//	ProfileSipArgs{...}
type ProfileSipInput interface {
	pulumi.Input

	ToProfileSipOutput() ProfileSipOutput
	ToProfileSipOutputWithContext(context.Context) ProfileSipOutput
}

type ProfileSipArgs struct {
	// ACK request rate limit (per second, per policy).
	AckRate pulumi.IntPtrInput `pulumi:"ackRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	AckRateTrack pulumi.StringPtrInput `pulumi:"ackRateTrack"`
	// Enable/disable block ACK requests. Valid values: `disable`, `enable`.
	BlockAck pulumi.StringPtrInput `pulumi:"blockAck"`
	// Enable/disable block BYE requests. Valid values: `disable`, `enable`.
	BlockBye pulumi.StringPtrInput `pulumi:"blockBye"`
	// Enable/disable block CANCEL requests. Valid values: `disable`, `enable`.
	BlockCancel pulumi.StringPtrInput `pulumi:"blockCancel"`
	// Enable/disable block OPTIONS requests, but OPTIONS requests still notify for redundancy. Valid values: `disable`, `enable`.
	BlockGeoRedOptions pulumi.StringPtrInput `pulumi:"blockGeoRedOptions"`
	// Enable/disable block INFO requests. Valid values: `disable`, `enable`.
	BlockInfo pulumi.StringPtrInput `pulumi:"blockInfo"`
	// Enable/disable block INVITE requests. Valid values: `disable`, `enable`.
	BlockInvite pulumi.StringPtrInput `pulumi:"blockInvite"`
	// Enable/disable block requests with headers exceeding max-line-length. Valid values: `disable`, `enable`.
	BlockLongLines pulumi.StringPtrInput `pulumi:"blockLongLines"`
	// Enable/disable block MESSAGE requests. Valid values: `disable`, `enable`.
	BlockMessage pulumi.StringPtrInput `pulumi:"blockMessage"`
	// Enable/disable block NOTIFY requests. Valid values: `disable`, `enable`.
	BlockNotify pulumi.StringPtrInput `pulumi:"blockNotify"`
	// Enable/disable block OPTIONS requests and no OPTIONS as notifying message for redundancy either. Valid values: `disable`, `enable`.
	BlockOptions pulumi.StringPtrInput `pulumi:"blockOptions"`
	// Enable/disable block prack requests. Valid values: `disable`, `enable`.
	BlockPrack pulumi.StringPtrInput `pulumi:"blockPrack"`
	// Enable/disable block PUBLISH requests. Valid values: `disable`, `enable`.
	BlockPublish pulumi.StringPtrInput `pulumi:"blockPublish"`
	// Enable/disable block REFER requests. Valid values: `disable`, `enable`.
	BlockRefer pulumi.StringPtrInput `pulumi:"blockRefer"`
	// Enable/disable block REGISTER requests. Valid values: `disable`, `enable`.
	BlockRegister pulumi.StringPtrInput `pulumi:"blockRegister"`
	// Enable/disable block SUBSCRIBE requests. Valid values: `disable`, `enable`.
	BlockSubscribe pulumi.StringPtrInput `pulumi:"blockSubscribe"`
	// Block unrecognized SIP requests (enabled by default). Valid values: `disable`, `enable`.
	BlockUnknown pulumi.StringPtrInput `pulumi:"blockUnknown"`
	// Enable/disable block UPDATE requests. Valid values: `disable`, `enable`.
	BlockUpdate pulumi.StringPtrInput `pulumi:"blockUpdate"`
	// BYE request rate limit (per second, per policy).
	ByeRate pulumi.IntPtrInput `pulumi:"byeRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	ByeRateTrack pulumi.StringPtrInput `pulumi:"byeRateTrack"`
	// Validate PCRE regular expression for Call-Id header value.
	CallIdRegex pulumi.StringPtrInput `pulumi:"callIdRegex"`
	// Continue tracking calls with no RTP for this many minutes.
	CallKeepalive pulumi.IntPtrInput `pulumi:"callKeepalive"`
	// CANCEL request rate limit (per second, per policy).
	CancelRate pulumi.IntPtrInput `pulumi:"cancelRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	CancelRateTrack pulumi.StringPtrInput `pulumi:"cancelRateTrack"`
	// Fixup contact anyway even if contact's IP:port doesn't match session's IP:port. Valid values: `disable`, `enable`.
	ContactFixup pulumi.StringPtrInput `pulumi:"contactFixup"`
	// Validate PCRE regular expression for Content-Type header value.
	ContentTypeRegex pulumi.StringPtrInput `pulumi:"contentTypeRegex"`
	// Enable/disable restrict RTP source IP to be the same as SIP source IP when HNT is enabled. Valid values: `disable`, `enable`.
	HntRestrictSourceIp pulumi.StringPtrInput `pulumi:"hntRestrictSourceIp"`
	// Hosted NAT Traversal (HNT). Valid values: `disable`, `enable`.
	HostedNatTraversal pulumi.StringPtrInput `pulumi:"hostedNatTraversal"`
	// INFO request rate limit (per second, per policy).
	InfoRate pulumi.IntPtrInput `pulumi:"infoRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	InfoRateTrack pulumi.StringPtrInput `pulumi:"infoRateTrack"`
	// INVITE request rate limit (per second, per policy).
	InviteRate pulumi.IntPtrInput `pulumi:"inviteRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	InviteRateTrack pulumi.StringPtrInput `pulumi:"inviteRateTrack"`
	// Enable/disable allow IPS on RTP. Valid values: `disable`, `enable`.
	IpsRtp pulumi.StringPtrInput `pulumi:"ipsRtp"`
	// Enable/disable logging of SIP call summary. Valid values: `disable`, `enable`.
	LogCallSummary pulumi.StringPtrInput `pulumi:"logCallSummary"`
	// Enable/disable logging of SIP violations. Valid values: `disable`, `enable`.
	LogViolations pulumi.StringPtrInput `pulumi:"logViolations"`
	// Action for malformed Allow header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderAllow pulumi.StringPtrInput `pulumi:"malformedHeaderAllow"`
	// Action for malformed Call-ID header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderCallId pulumi.StringPtrInput `pulumi:"malformedHeaderCallId"`
	// Action for malformed Contact header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderContact pulumi.StringPtrInput `pulumi:"malformedHeaderContact"`
	// Action for malformed Content-Length header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderContentLength pulumi.StringPtrInput `pulumi:"malformedHeaderContentLength"`
	// Action for malformed Content-Type header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderContentType pulumi.StringPtrInput `pulumi:"malformedHeaderContentType"`
	// Action for malformed CSeq header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderCseq pulumi.StringPtrInput `pulumi:"malformedHeaderCseq"`
	// Action for malformed Expires header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderExpires pulumi.StringPtrInput `pulumi:"malformedHeaderExpires"`
	// Action for malformed From header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderFrom pulumi.StringPtrInput `pulumi:"malformedHeaderFrom"`
	// Action for malformed Max-Forwards header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderMaxForwards pulumi.StringPtrInput `pulumi:"malformedHeaderMaxForwards"`
	// Action for malformed SIP messages without Proxy-Require header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderNoProxyRequire pulumi.StringPtrInput `pulumi:"malformedHeaderNoProxyRequire"`
	// Action for malformed SIP messages without Require header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderNoRequire pulumi.StringPtrInput `pulumi:"malformedHeaderNoRequire"`
	// Action for malformed P-Asserted-Identity header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderPAssertedIdentity pulumi.StringPtrInput `pulumi:"malformedHeaderPAssertedIdentity"`
	// Action for malformed RAck header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderRack pulumi.StringPtrInput `pulumi:"malformedHeaderRack"`
	// Action for malformed Record-Route header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderRecordRoute pulumi.StringPtrInput `pulumi:"malformedHeaderRecordRoute"`
	// Action for malformed Route header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderRoute pulumi.StringPtrInput `pulumi:"malformedHeaderRoute"`
	// Action for malformed RSeq header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderRseq pulumi.StringPtrInput `pulumi:"malformedHeaderRseq"`
	// Action for malformed SDP a line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpA pulumi.StringPtrInput `pulumi:"malformedHeaderSdpA"`
	// Action for malformed SDP b line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpB pulumi.StringPtrInput `pulumi:"malformedHeaderSdpB"`
	// Action for malformed SDP c line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpC pulumi.StringPtrInput `pulumi:"malformedHeaderSdpC"`
	// Action for malformed SDP i line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpI pulumi.StringPtrInput `pulumi:"malformedHeaderSdpI"`
	// Action for malformed SDP k line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpK pulumi.StringPtrInput `pulumi:"malformedHeaderSdpK"`
	// Action for malformed SDP m line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpM pulumi.StringPtrInput `pulumi:"malformedHeaderSdpM"`
	// Action for malformed SDP o line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpO pulumi.StringPtrInput `pulumi:"malformedHeaderSdpO"`
	// Action for malformed SDP r line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpR pulumi.StringPtrInput `pulumi:"malformedHeaderSdpR"`
	// Action for malformed SDP s line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpS pulumi.StringPtrInput `pulumi:"malformedHeaderSdpS"`
	// Action for malformed SDP t line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpT pulumi.StringPtrInput `pulumi:"malformedHeaderSdpT"`
	// Action for malformed SDP v line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpV pulumi.StringPtrInput `pulumi:"malformedHeaderSdpV"`
	// Action for malformed SDP z line. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderSdpZ pulumi.StringPtrInput `pulumi:"malformedHeaderSdpZ"`
	// Action for malformed To header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderTo pulumi.StringPtrInput `pulumi:"malformedHeaderTo"`
	// Action for malformed VIA header. Valid values: `discard`, `pass`, `respond`.
	MalformedHeaderVia pulumi.StringPtrInput `pulumi:"malformedHeaderVia"`
	// Action for malformed request line. Valid values: `discard`, `pass`, `respond`.
	MalformedRequestLine pulumi.StringPtrInput `pulumi:"malformedRequestLine"`
	// Maximum SIP message body length (0 meaning no limit).
	MaxBodyLength pulumi.IntPtrInput `pulumi:"maxBodyLength"`
	// Maximum number of concurrent calls/dialogs (per policy).
	MaxDialogs pulumi.IntPtrInput `pulumi:"maxDialogs"`
	// Maximum number established but idle dialogs to retain (per policy).
	MaxIdleDialogs pulumi.IntPtrInput `pulumi:"maxIdleDialogs"`
	// Maximum SIP header line length (78-4096).
	MaxLineLength pulumi.IntPtrInput `pulumi:"maxLineLength"`
	// MESSAGE request rate limit (per second, per policy).
	MessageRate pulumi.IntPtrInput `pulumi:"messageRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	MessageRateTrack pulumi.StringPtrInput `pulumi:"messageRateTrack"`
	// RTP NAT port range.
	NatPortRange pulumi.StringPtrInput `pulumi:"natPortRange"`
	// Enable/disable preservation of original IP in SDP i line. Valid values: `disable`, `enable`.
	NatTrace pulumi.StringPtrInput `pulumi:"natTrace"`
	// Enable/disable no SDP fix-up. Valid values: `disable`, `enable`.
	NoSdpFixup pulumi.StringPtrInput `pulumi:"noSdpFixup"`
	// NOTIFY request rate limit (per second, per policy).
	NotifyRate pulumi.IntPtrInput `pulumi:"notifyRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	NotifyRateTrack pulumi.StringPtrInput `pulumi:"notifyRateTrack"`
	// Enable/disable open pinhole for non-REGISTER Contact port. Valid values: `disable`, `enable`.
	OpenContactPinhole pulumi.StringPtrInput `pulumi:"openContactPinhole"`
	// Enable/disable open pinhole for Record-Route port. Valid values: `disable`, `enable`.
	OpenRecordRoutePinhole pulumi.StringPtrInput `pulumi:"openRecordRoutePinhole"`
	// Enable/disable open pinhole for REGISTER Contact port. Valid values: `disable`, `enable`.
	OpenRegisterPinhole pulumi.StringPtrInput `pulumi:"openRegisterPinhole"`
	// Enable/disable open pinhole for Via port. Valid values: `disable`, `enable`.
	OpenViaPinhole pulumi.StringPtrInput `pulumi:"openViaPinhole"`
	// OPTIONS request rate limit (per second, per policy).
	OptionsRate pulumi.IntPtrInput `pulumi:"optionsRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	OptionsRateTrack pulumi.StringPtrInput `pulumi:"optionsRateTrack"`
	// PRACK request rate limit (per second, per policy).
	PrackRate pulumi.IntPtrInput `pulumi:"prackRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	PrackRateTrack pulumi.StringPtrInput `pulumi:"prackRateTrack"`
	// Override i line to preserve original IPS (default: append). Valid values: `disable`, `enable`.
	PreserveOverride pulumi.StringPtrInput `pulumi:"preserveOverride"`
	// Expiry time for provisional INVITE (10 - 3600 sec).
	ProvisionalInviteExpiryTime pulumi.IntPtrInput `pulumi:"provisionalInviteExpiryTime"`
	// PUBLISH request rate limit (per second, per policy).
	PublishRate pulumi.IntPtrInput `pulumi:"publishRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	PublishRateTrack pulumi.StringPtrInput `pulumi:"publishRateTrack"`
	// REFER request rate limit (per second, per policy).
	ReferRate pulumi.IntPtrInput `pulumi:"referRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	ReferRateTrack pulumi.StringPtrInput `pulumi:"referRateTrack"`
	// Enable/disable trace original IP/port within the contact header of REGISTER requests. Valid values: `disable`, `enable`.
	RegisterContactTrace pulumi.StringPtrInput `pulumi:"registerContactTrace"`
	// REGISTER request rate limit (per second, per policy).
	RegisterRate pulumi.IntPtrInput `pulumi:"registerRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	RegisterRateTrack pulumi.StringPtrInput `pulumi:"registerRateTrack"`
	// Enable/disable support via branch compliant with RFC 2543. Valid values: `disable`, `enable`.
	Rfc2543Branch pulumi.StringPtrInput `pulumi:"rfc2543Branch"`
	// Enable/disable create pinholes for RTP traffic to traverse firewall. Valid values: `disable`, `enable`.
	Rtp pulumi.StringPtrInput `pulumi:"rtp"`
	// Relative strength of encryption algorithms accepted in negotiation. Valid values: `high`, `medium`, `low`.
	SslAlgorithm pulumi.StringPtrInput `pulumi:"sslAlgorithm"`
	// Require a client certificate and authenticate it with the peer/peergrp.
	SslAuthClient pulumi.StringPtrInput `pulumi:"sslAuthClient"`
	// Authenticate the server's certificate with the peer/peergrp.
	SslAuthServer pulumi.StringPtrInput `pulumi:"sslAuthServer"`
	// Name of Certificate to offer to server if requested.
	SslClientCertificate pulumi.StringPtrInput `pulumi:"sslClientCertificate"`
	// Allow/block client renegotiation by server. Valid values: `allow`, `deny`, `secure`.
	SslClientRenegotiation pulumi.StringPtrInput `pulumi:"sslClientRenegotiation"`
	// Highest SSL/TLS version to negotiate.
	SslMaxVersion pulumi.StringPtrInput `pulumi:"sslMaxVersion"`
	// Lowest SSL/TLS version to negotiate.
	SslMinVersion pulumi.StringPtrInput `pulumi:"sslMinVersion"`
	// SSL/TLS mode for encryption & decryption of traffic. Valid values: `off`, `full`.
	SslMode pulumi.StringPtrInput `pulumi:"sslMode"`
	// SSL Perfect Forward Secrecy. Valid values: `require`, `deny`, `allow`.
	SslPfs pulumi.StringPtrInput `pulumi:"sslPfs"`
	// Send empty fragments to avoid attack on CBC IV (SSL 3.0 & TLS 1.0 only). Valid values: `enable`, `disable`.
	SslSendEmptyFrags pulumi.StringPtrInput `pulumi:"sslSendEmptyFrags"`
	// Name of Certificate return to the client in every SSL connection.
	SslServerCertificate pulumi.StringPtrInput `pulumi:"sslServerCertificate"`
	// Enable/disable SIP. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Enable/disable only allow the registrar to connect. Valid values: `disable`, `enable`.
	StrictRegister pulumi.StringPtrInput `pulumi:"strictRegister"`
	// SUBSCRIBE request rate limit (per second, per policy).
	SubscribeRate pulumi.IntPtrInput `pulumi:"subscribeRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	SubscribeRateTrack pulumi.StringPtrInput `pulumi:"subscribeRateTrack"`
	// Action for unknown SIP header. Valid values: `discard`, `pass`, `respond`.
	UnknownHeader pulumi.StringPtrInput `pulumi:"unknownHeader"`
	// UPDATE request rate limit (per second, per policy).
	UpdateRate pulumi.IntPtrInput `pulumi:"updateRate"`
	// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
	UpdateRateTrack pulumi.StringPtrInput `pulumi:"updateRateTrack"`
}

func (ProfileSipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileSip)(nil)).Elem()
}

func (i ProfileSipArgs) ToProfileSipOutput() ProfileSipOutput {
	return i.ToProfileSipOutputWithContext(context.Background())
}

func (i ProfileSipArgs) ToProfileSipOutputWithContext(ctx context.Context) ProfileSipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileSipOutput)
}

func (i ProfileSipArgs) ToProfileSipPtrOutput() ProfileSipPtrOutput {
	return i.ToProfileSipPtrOutputWithContext(context.Background())
}

func (i ProfileSipArgs) ToProfileSipPtrOutputWithContext(ctx context.Context) ProfileSipPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileSipOutput).ToProfileSipPtrOutputWithContext(ctx)
}

// ProfileSipPtrInput is an input type that accepts ProfileSipArgs, ProfileSipPtr and ProfileSipPtrOutput values.
// You can construct a concrete instance of `ProfileSipPtrInput` via:
//
//	        ProfileSipArgs{...}
//
//	or:
//
//	        nil
type ProfileSipPtrInput interface {
	pulumi.Input

	ToProfileSipPtrOutput() ProfileSipPtrOutput
	ToProfileSipPtrOutputWithContext(context.Context) ProfileSipPtrOutput
}

type profileSipPtrType ProfileSipArgs

func ProfileSipPtr(v *ProfileSipArgs) ProfileSipPtrInput {
	return (*profileSipPtrType)(v)
}

func (*profileSipPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileSip)(nil)).Elem()
}

func (i *profileSipPtrType) ToProfileSipPtrOutput() ProfileSipPtrOutput {
	return i.ToProfileSipPtrOutputWithContext(context.Background())
}

func (i *profileSipPtrType) ToProfileSipPtrOutputWithContext(ctx context.Context) ProfileSipPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileSipPtrOutput)
}

type ProfileSipOutput struct{ *pulumi.OutputState }

func (ProfileSipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileSip)(nil)).Elem()
}

func (o ProfileSipOutput) ToProfileSipOutput() ProfileSipOutput {
	return o
}

func (o ProfileSipOutput) ToProfileSipOutputWithContext(ctx context.Context) ProfileSipOutput {
	return o
}

func (o ProfileSipOutput) ToProfileSipPtrOutput() ProfileSipPtrOutput {
	return o.ToProfileSipPtrOutputWithContext(context.Background())
}

func (o ProfileSipOutput) ToProfileSipPtrOutputWithContext(ctx context.Context) ProfileSipPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileSip) *ProfileSip {
		return &v
	}).(ProfileSipPtrOutput)
}

// ACK request rate limit (per second, per policy).
func (o ProfileSipOutput) AckRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.AckRate }).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipOutput) AckRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.AckRateTrack }).(pulumi.StringPtrOutput)
}

// Enable/disable block ACK requests. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) BlockAck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.BlockAck }).(pulumi.StringPtrOutput)
}

// Enable/disable block BYE requests. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) BlockBye() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.BlockBye }).(pulumi.StringPtrOutput)
}

// Enable/disable block CANCEL requests. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) BlockCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.BlockCancel }).(pulumi.StringPtrOutput)
}

// Enable/disable block OPTIONS requests, but OPTIONS requests still notify for redundancy. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) BlockGeoRedOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.BlockGeoRedOptions }).(pulumi.StringPtrOutput)
}

// Enable/disable block INFO requests. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) BlockInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.BlockInfo }).(pulumi.StringPtrOutput)
}

// Enable/disable block INVITE requests. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) BlockInvite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.BlockInvite }).(pulumi.StringPtrOutput)
}

// Enable/disable block requests with headers exceeding max-line-length. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) BlockLongLines() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.BlockLongLines }).(pulumi.StringPtrOutput)
}

// Enable/disable block MESSAGE requests. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) BlockMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.BlockMessage }).(pulumi.StringPtrOutput)
}

// Enable/disable block NOTIFY requests. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) BlockNotify() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.BlockNotify }).(pulumi.StringPtrOutput)
}

// Enable/disable block OPTIONS requests and no OPTIONS as notifying message for redundancy either. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) BlockOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.BlockOptions }).(pulumi.StringPtrOutput)
}

// Enable/disable block prack requests. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) BlockPrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.BlockPrack }).(pulumi.StringPtrOutput)
}

// Enable/disable block PUBLISH requests. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) BlockPublish() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.BlockPublish }).(pulumi.StringPtrOutput)
}

// Enable/disable block REFER requests. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) BlockRefer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.BlockRefer }).(pulumi.StringPtrOutput)
}

// Enable/disable block REGISTER requests. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) BlockRegister() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.BlockRegister }).(pulumi.StringPtrOutput)
}

// Enable/disable block SUBSCRIBE requests. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) BlockSubscribe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.BlockSubscribe }).(pulumi.StringPtrOutput)
}

// Block unrecognized SIP requests (enabled by default). Valid values: `disable`, `enable`.
func (o ProfileSipOutput) BlockUnknown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.BlockUnknown }).(pulumi.StringPtrOutput)
}

// Enable/disable block UPDATE requests. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) BlockUpdate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.BlockUpdate }).(pulumi.StringPtrOutput)
}

// BYE request rate limit (per second, per policy).
func (o ProfileSipOutput) ByeRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.ByeRate }).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipOutput) ByeRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.ByeRateTrack }).(pulumi.StringPtrOutput)
}

// Validate PCRE regular expression for Call-Id header value.
func (o ProfileSipOutput) CallIdRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.CallIdRegex }).(pulumi.StringPtrOutput)
}

// Continue tracking calls with no RTP for this many minutes.
func (o ProfileSipOutput) CallKeepalive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.CallKeepalive }).(pulumi.IntPtrOutput)
}

// CANCEL request rate limit (per second, per policy).
func (o ProfileSipOutput) CancelRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.CancelRate }).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipOutput) CancelRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.CancelRateTrack }).(pulumi.StringPtrOutput)
}

// Fixup contact anyway even if contact's IP:port doesn't match session's IP:port. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) ContactFixup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.ContactFixup }).(pulumi.StringPtrOutput)
}

// Validate PCRE regular expression for Content-Type header value.
func (o ProfileSipOutput) ContentTypeRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.ContentTypeRegex }).(pulumi.StringPtrOutput)
}

// Enable/disable restrict RTP source IP to be the same as SIP source IP when HNT is enabled. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) HntRestrictSourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.HntRestrictSourceIp }).(pulumi.StringPtrOutput)
}

// Hosted NAT Traversal (HNT). Valid values: `disable`, `enable`.
func (o ProfileSipOutput) HostedNatTraversal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.HostedNatTraversal }).(pulumi.StringPtrOutput)
}

// INFO request rate limit (per second, per policy).
func (o ProfileSipOutput) InfoRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.InfoRate }).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipOutput) InfoRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.InfoRateTrack }).(pulumi.StringPtrOutput)
}

// INVITE request rate limit (per second, per policy).
func (o ProfileSipOutput) InviteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.InviteRate }).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipOutput) InviteRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.InviteRateTrack }).(pulumi.StringPtrOutput)
}

// Enable/disable allow IPS on RTP. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) IpsRtp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.IpsRtp }).(pulumi.StringPtrOutput)
}

// Enable/disable logging of SIP call summary. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) LogCallSummary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.LogCallSummary }).(pulumi.StringPtrOutput)
}

// Enable/disable logging of SIP violations. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) LogViolations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.LogViolations }).(pulumi.StringPtrOutput)
}

// Action for malformed Allow header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderAllow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderAllow }).(pulumi.StringPtrOutput)
}

// Action for malformed Call-ID header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderCallId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderCallId }).(pulumi.StringPtrOutput)
}

// Action for malformed Contact header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderContact }).(pulumi.StringPtrOutput)
}

// Action for malformed Content-Length header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderContentLength() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderContentLength }).(pulumi.StringPtrOutput)
}

// Action for malformed Content-Type header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderContentType }).(pulumi.StringPtrOutput)
}

// Action for malformed CSeq header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderCseq() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderCseq }).(pulumi.StringPtrOutput)
}

// Action for malformed Expires header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderExpires() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderExpires }).(pulumi.StringPtrOutput)
}

// Action for malformed From header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderFrom }).(pulumi.StringPtrOutput)
}

// Action for malformed Max-Forwards header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderMaxForwards() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderMaxForwards }).(pulumi.StringPtrOutput)
}

// Action for malformed SIP messages without Proxy-Require header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderNoProxyRequire() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderNoProxyRequire }).(pulumi.StringPtrOutput)
}

// Action for malformed SIP messages without Require header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderNoRequire() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderNoRequire }).(pulumi.StringPtrOutput)
}

// Action for malformed P-Asserted-Identity header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderPAssertedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderPAssertedIdentity }).(pulumi.StringPtrOutput)
}

// Action for malformed RAck header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderRack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderRack }).(pulumi.StringPtrOutput)
}

// Action for malformed Record-Route header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderRecordRoute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderRecordRoute }).(pulumi.StringPtrOutput)
}

// Action for malformed Route header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderRoute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderRoute }).(pulumi.StringPtrOutput)
}

// Action for malformed RSeq header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderRseq() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderRseq }).(pulumi.StringPtrOutput)
}

// Action for malformed SDP a line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderSdpA() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderSdpA }).(pulumi.StringPtrOutput)
}

// Action for malformed SDP b line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderSdpB() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderSdpB }).(pulumi.StringPtrOutput)
}

// Action for malformed SDP c line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderSdpC() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderSdpC }).(pulumi.StringPtrOutput)
}

// Action for malformed SDP i line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderSdpI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderSdpI }).(pulumi.StringPtrOutput)
}

// Action for malformed SDP k line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderSdpK() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderSdpK }).(pulumi.StringPtrOutput)
}

// Action for malformed SDP m line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderSdpM() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderSdpM }).(pulumi.StringPtrOutput)
}

// Action for malformed SDP o line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderSdpO() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderSdpO }).(pulumi.StringPtrOutput)
}

// Action for malformed SDP r line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderSdpR() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderSdpR }).(pulumi.StringPtrOutput)
}

// Action for malformed SDP s line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderSdpS() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderSdpS }).(pulumi.StringPtrOutput)
}

// Action for malformed SDP t line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderSdpT() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderSdpT }).(pulumi.StringPtrOutput)
}

// Action for malformed SDP v line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderSdpV() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderSdpV }).(pulumi.StringPtrOutput)
}

// Action for malformed SDP z line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderSdpZ() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderSdpZ }).(pulumi.StringPtrOutput)
}

// Action for malformed To header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderTo }).(pulumi.StringPtrOutput)
}

// Action for malformed VIA header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedHeaderVia() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedHeaderVia }).(pulumi.StringPtrOutput)
}

// Action for malformed request line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) MalformedRequestLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MalformedRequestLine }).(pulumi.StringPtrOutput)
}

// Maximum SIP message body length (0 meaning no limit).
func (o ProfileSipOutput) MaxBodyLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.MaxBodyLength }).(pulumi.IntPtrOutput)
}

// Maximum number of concurrent calls/dialogs (per policy).
func (o ProfileSipOutput) MaxDialogs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.MaxDialogs }).(pulumi.IntPtrOutput)
}

// Maximum number established but idle dialogs to retain (per policy).
func (o ProfileSipOutput) MaxIdleDialogs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.MaxIdleDialogs }).(pulumi.IntPtrOutput)
}

// Maximum SIP header line length (78-4096).
func (o ProfileSipOutput) MaxLineLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.MaxLineLength }).(pulumi.IntPtrOutput)
}

// MESSAGE request rate limit (per second, per policy).
func (o ProfileSipOutput) MessageRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.MessageRate }).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipOutput) MessageRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.MessageRateTrack }).(pulumi.StringPtrOutput)
}

// RTP NAT port range.
func (o ProfileSipOutput) NatPortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.NatPortRange }).(pulumi.StringPtrOutput)
}

// Enable/disable preservation of original IP in SDP i line. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) NatTrace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.NatTrace }).(pulumi.StringPtrOutput)
}

// Enable/disable no SDP fix-up. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) NoSdpFixup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.NoSdpFixup }).(pulumi.StringPtrOutput)
}

// NOTIFY request rate limit (per second, per policy).
func (o ProfileSipOutput) NotifyRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.NotifyRate }).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipOutput) NotifyRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.NotifyRateTrack }).(pulumi.StringPtrOutput)
}

// Enable/disable open pinhole for non-REGISTER Contact port. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) OpenContactPinhole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.OpenContactPinhole }).(pulumi.StringPtrOutput)
}

// Enable/disable open pinhole for Record-Route port. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) OpenRecordRoutePinhole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.OpenRecordRoutePinhole }).(pulumi.StringPtrOutput)
}

// Enable/disable open pinhole for REGISTER Contact port. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) OpenRegisterPinhole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.OpenRegisterPinhole }).(pulumi.StringPtrOutput)
}

// Enable/disable open pinhole for Via port. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) OpenViaPinhole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.OpenViaPinhole }).(pulumi.StringPtrOutput)
}

// OPTIONS request rate limit (per second, per policy).
func (o ProfileSipOutput) OptionsRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.OptionsRate }).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipOutput) OptionsRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.OptionsRateTrack }).(pulumi.StringPtrOutput)
}

// PRACK request rate limit (per second, per policy).
func (o ProfileSipOutput) PrackRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.PrackRate }).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipOutput) PrackRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.PrackRateTrack }).(pulumi.StringPtrOutput)
}

// Override i line to preserve original IPS (default: append). Valid values: `disable`, `enable`.
func (o ProfileSipOutput) PreserveOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.PreserveOverride }).(pulumi.StringPtrOutput)
}

// Expiry time for provisional INVITE (10 - 3600 sec).
func (o ProfileSipOutput) ProvisionalInviteExpiryTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.ProvisionalInviteExpiryTime }).(pulumi.IntPtrOutput)
}

// PUBLISH request rate limit (per second, per policy).
func (o ProfileSipOutput) PublishRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.PublishRate }).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipOutput) PublishRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.PublishRateTrack }).(pulumi.StringPtrOutput)
}

// REFER request rate limit (per second, per policy).
func (o ProfileSipOutput) ReferRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.ReferRate }).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipOutput) ReferRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.ReferRateTrack }).(pulumi.StringPtrOutput)
}

// Enable/disable trace original IP/port within the contact header of REGISTER requests. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) RegisterContactTrace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.RegisterContactTrace }).(pulumi.StringPtrOutput)
}

// REGISTER request rate limit (per second, per policy).
func (o ProfileSipOutput) RegisterRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.RegisterRate }).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipOutput) RegisterRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.RegisterRateTrack }).(pulumi.StringPtrOutput)
}

// Enable/disable support via branch compliant with RFC 2543. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) Rfc2543Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.Rfc2543Branch }).(pulumi.StringPtrOutput)
}

// Enable/disable create pinholes for RTP traffic to traverse firewall. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) Rtp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.Rtp }).(pulumi.StringPtrOutput)
}

// Relative strength of encryption algorithms accepted in negotiation. Valid values: `high`, `medium`, `low`.
func (o ProfileSipOutput) SslAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.SslAlgorithm }).(pulumi.StringPtrOutput)
}

// Require a client certificate and authenticate it with the peer/peergrp.
func (o ProfileSipOutput) SslAuthClient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.SslAuthClient }).(pulumi.StringPtrOutput)
}

// Authenticate the server's certificate with the peer/peergrp.
func (o ProfileSipOutput) SslAuthServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.SslAuthServer }).(pulumi.StringPtrOutput)
}

// Name of Certificate to offer to server if requested.
func (o ProfileSipOutput) SslClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.SslClientCertificate }).(pulumi.StringPtrOutput)
}

// Allow/block client renegotiation by server. Valid values: `allow`, `deny`, `secure`.
func (o ProfileSipOutput) SslClientRenegotiation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.SslClientRenegotiation }).(pulumi.StringPtrOutput)
}

// Highest SSL/TLS version to negotiate.
func (o ProfileSipOutput) SslMaxVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.SslMaxVersion }).(pulumi.StringPtrOutput)
}

// Lowest SSL/TLS version to negotiate.
func (o ProfileSipOutput) SslMinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.SslMinVersion }).(pulumi.StringPtrOutput)
}

// SSL/TLS mode for encryption & decryption of traffic. Valid values: `off`, `full`.
func (o ProfileSipOutput) SslMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.SslMode }).(pulumi.StringPtrOutput)
}

// SSL Perfect Forward Secrecy. Valid values: `require`, `deny`, `allow`.
func (o ProfileSipOutput) SslPfs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.SslPfs }).(pulumi.StringPtrOutput)
}

// Send empty fragments to avoid attack on CBC IV (SSL 3.0 & TLS 1.0 only). Valid values: `enable`, `disable`.
func (o ProfileSipOutput) SslSendEmptyFrags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.SslSendEmptyFrags }).(pulumi.StringPtrOutput)
}

// Name of Certificate return to the client in every SSL connection.
func (o ProfileSipOutput) SslServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.SslServerCertificate }).(pulumi.StringPtrOutput)
}

// Enable/disable SIP. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Enable/disable only allow the registrar to connect. Valid values: `disable`, `enable`.
func (o ProfileSipOutput) StrictRegister() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.StrictRegister }).(pulumi.StringPtrOutput)
}

// SUBSCRIBE request rate limit (per second, per policy).
func (o ProfileSipOutput) SubscribeRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.SubscribeRate }).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipOutput) SubscribeRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.SubscribeRateTrack }).(pulumi.StringPtrOutput)
}

// Action for unknown SIP header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipOutput) UnknownHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.UnknownHeader }).(pulumi.StringPtrOutput)
}

// UPDATE request rate limit (per second, per policy).
func (o ProfileSipOutput) UpdateRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileSip) *int { return v.UpdateRate }).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipOutput) UpdateRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileSip) *string { return v.UpdateRateTrack }).(pulumi.StringPtrOutput)
}

type ProfileSipPtrOutput struct{ *pulumi.OutputState }

func (ProfileSipPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileSip)(nil)).Elem()
}

func (o ProfileSipPtrOutput) ToProfileSipPtrOutput() ProfileSipPtrOutput {
	return o
}

func (o ProfileSipPtrOutput) ToProfileSipPtrOutputWithContext(ctx context.Context) ProfileSipPtrOutput {
	return o
}

func (o ProfileSipPtrOutput) Elem() ProfileSipOutput {
	return o.ApplyT(func(v *ProfileSip) ProfileSip {
		if v != nil {
			return *v
		}
		var ret ProfileSip
		return ret
	}).(ProfileSipOutput)
}

// ACK request rate limit (per second, per policy).
func (o ProfileSipPtrOutput) AckRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.AckRate
	}).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipPtrOutput) AckRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.AckRateTrack
	}).(pulumi.StringPtrOutput)
}

// Enable/disable block ACK requests. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) BlockAck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.BlockAck
	}).(pulumi.StringPtrOutput)
}

// Enable/disable block BYE requests. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) BlockBye() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.BlockBye
	}).(pulumi.StringPtrOutput)
}

// Enable/disable block CANCEL requests. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) BlockCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.BlockCancel
	}).(pulumi.StringPtrOutput)
}

// Enable/disable block OPTIONS requests, but OPTIONS requests still notify for redundancy. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) BlockGeoRedOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.BlockGeoRedOptions
	}).(pulumi.StringPtrOutput)
}

// Enable/disable block INFO requests. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) BlockInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.BlockInfo
	}).(pulumi.StringPtrOutput)
}

// Enable/disable block INVITE requests. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) BlockInvite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.BlockInvite
	}).(pulumi.StringPtrOutput)
}

// Enable/disable block requests with headers exceeding max-line-length. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) BlockLongLines() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.BlockLongLines
	}).(pulumi.StringPtrOutput)
}

// Enable/disable block MESSAGE requests. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) BlockMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.BlockMessage
	}).(pulumi.StringPtrOutput)
}

// Enable/disable block NOTIFY requests. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) BlockNotify() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.BlockNotify
	}).(pulumi.StringPtrOutput)
}

// Enable/disable block OPTIONS requests and no OPTIONS as notifying message for redundancy either. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) BlockOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.BlockOptions
	}).(pulumi.StringPtrOutput)
}

// Enable/disable block prack requests. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) BlockPrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.BlockPrack
	}).(pulumi.StringPtrOutput)
}

// Enable/disable block PUBLISH requests. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) BlockPublish() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.BlockPublish
	}).(pulumi.StringPtrOutput)
}

// Enable/disable block REFER requests. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) BlockRefer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.BlockRefer
	}).(pulumi.StringPtrOutput)
}

// Enable/disable block REGISTER requests. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) BlockRegister() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.BlockRegister
	}).(pulumi.StringPtrOutput)
}

// Enable/disable block SUBSCRIBE requests. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) BlockSubscribe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.BlockSubscribe
	}).(pulumi.StringPtrOutput)
}

// Block unrecognized SIP requests (enabled by default). Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) BlockUnknown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.BlockUnknown
	}).(pulumi.StringPtrOutput)
}

// Enable/disable block UPDATE requests. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) BlockUpdate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.BlockUpdate
	}).(pulumi.StringPtrOutput)
}

// BYE request rate limit (per second, per policy).
func (o ProfileSipPtrOutput) ByeRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.ByeRate
	}).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipPtrOutput) ByeRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.ByeRateTrack
	}).(pulumi.StringPtrOutput)
}

// Validate PCRE regular expression for Call-Id header value.
func (o ProfileSipPtrOutput) CallIdRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.CallIdRegex
	}).(pulumi.StringPtrOutput)
}

// Continue tracking calls with no RTP for this many minutes.
func (o ProfileSipPtrOutput) CallKeepalive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.CallKeepalive
	}).(pulumi.IntPtrOutput)
}

// CANCEL request rate limit (per second, per policy).
func (o ProfileSipPtrOutput) CancelRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.CancelRate
	}).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipPtrOutput) CancelRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.CancelRateTrack
	}).(pulumi.StringPtrOutput)
}

// Fixup contact anyway even if contact's IP:port doesn't match session's IP:port. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) ContactFixup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.ContactFixup
	}).(pulumi.StringPtrOutput)
}

// Validate PCRE regular expression for Content-Type header value.
func (o ProfileSipPtrOutput) ContentTypeRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.ContentTypeRegex
	}).(pulumi.StringPtrOutput)
}

// Enable/disable restrict RTP source IP to be the same as SIP source IP when HNT is enabled. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) HntRestrictSourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.HntRestrictSourceIp
	}).(pulumi.StringPtrOutput)
}

// Hosted NAT Traversal (HNT). Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) HostedNatTraversal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.HostedNatTraversal
	}).(pulumi.StringPtrOutput)
}

// INFO request rate limit (per second, per policy).
func (o ProfileSipPtrOutput) InfoRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.InfoRate
	}).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipPtrOutput) InfoRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.InfoRateTrack
	}).(pulumi.StringPtrOutput)
}

// INVITE request rate limit (per second, per policy).
func (o ProfileSipPtrOutput) InviteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.InviteRate
	}).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipPtrOutput) InviteRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.InviteRateTrack
	}).(pulumi.StringPtrOutput)
}

// Enable/disable allow IPS on RTP. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) IpsRtp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.IpsRtp
	}).(pulumi.StringPtrOutput)
}

// Enable/disable logging of SIP call summary. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) LogCallSummary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.LogCallSummary
	}).(pulumi.StringPtrOutput)
}

// Enable/disable logging of SIP violations. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) LogViolations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.LogViolations
	}).(pulumi.StringPtrOutput)
}

// Action for malformed Allow header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderAllow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderAllow
	}).(pulumi.StringPtrOutput)
}

// Action for malformed Call-ID header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderCallId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderCallId
	}).(pulumi.StringPtrOutput)
}

// Action for malformed Contact header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderContact
	}).(pulumi.StringPtrOutput)
}

// Action for malformed Content-Length header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderContentLength() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderContentLength
	}).(pulumi.StringPtrOutput)
}

// Action for malformed Content-Type header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderContentType
	}).(pulumi.StringPtrOutput)
}

// Action for malformed CSeq header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderCseq() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderCseq
	}).(pulumi.StringPtrOutput)
}

// Action for malformed Expires header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderExpires() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderExpires
	}).(pulumi.StringPtrOutput)
}

// Action for malformed From header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderFrom
	}).(pulumi.StringPtrOutput)
}

// Action for malformed Max-Forwards header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderMaxForwards() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderMaxForwards
	}).(pulumi.StringPtrOutput)
}

// Action for malformed SIP messages without Proxy-Require header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderNoProxyRequire() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderNoProxyRequire
	}).(pulumi.StringPtrOutput)
}

// Action for malformed SIP messages without Require header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderNoRequire() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderNoRequire
	}).(pulumi.StringPtrOutput)
}

// Action for malformed P-Asserted-Identity header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderPAssertedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderPAssertedIdentity
	}).(pulumi.StringPtrOutput)
}

// Action for malformed RAck header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderRack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderRack
	}).(pulumi.StringPtrOutput)
}

// Action for malformed Record-Route header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderRecordRoute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderRecordRoute
	}).(pulumi.StringPtrOutput)
}

// Action for malformed Route header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderRoute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderRoute
	}).(pulumi.StringPtrOutput)
}

// Action for malformed RSeq header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderRseq() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderRseq
	}).(pulumi.StringPtrOutput)
}

// Action for malformed SDP a line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderSdpA() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderSdpA
	}).(pulumi.StringPtrOutput)
}

// Action for malformed SDP b line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderSdpB() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderSdpB
	}).(pulumi.StringPtrOutput)
}

// Action for malformed SDP c line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderSdpC() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderSdpC
	}).(pulumi.StringPtrOutput)
}

// Action for malformed SDP i line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderSdpI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderSdpI
	}).(pulumi.StringPtrOutput)
}

// Action for malformed SDP k line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderSdpK() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderSdpK
	}).(pulumi.StringPtrOutput)
}

// Action for malformed SDP m line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderSdpM() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderSdpM
	}).(pulumi.StringPtrOutput)
}

// Action for malformed SDP o line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderSdpO() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderSdpO
	}).(pulumi.StringPtrOutput)
}

// Action for malformed SDP r line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderSdpR() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderSdpR
	}).(pulumi.StringPtrOutput)
}

// Action for malformed SDP s line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderSdpS() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderSdpS
	}).(pulumi.StringPtrOutput)
}

// Action for malformed SDP t line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderSdpT() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderSdpT
	}).(pulumi.StringPtrOutput)
}

// Action for malformed SDP v line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderSdpV() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderSdpV
	}).(pulumi.StringPtrOutput)
}

// Action for malformed SDP z line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderSdpZ() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderSdpZ
	}).(pulumi.StringPtrOutput)
}

// Action for malformed To header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderTo
	}).(pulumi.StringPtrOutput)
}

// Action for malformed VIA header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedHeaderVia() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedHeaderVia
	}).(pulumi.StringPtrOutput)
}

// Action for malformed request line. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) MalformedRequestLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MalformedRequestLine
	}).(pulumi.StringPtrOutput)
}

// Maximum SIP message body length (0 meaning no limit).
func (o ProfileSipPtrOutput) MaxBodyLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.MaxBodyLength
	}).(pulumi.IntPtrOutput)
}

// Maximum number of concurrent calls/dialogs (per policy).
func (o ProfileSipPtrOutput) MaxDialogs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.MaxDialogs
	}).(pulumi.IntPtrOutput)
}

// Maximum number established but idle dialogs to retain (per policy).
func (o ProfileSipPtrOutput) MaxIdleDialogs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleDialogs
	}).(pulumi.IntPtrOutput)
}

// Maximum SIP header line length (78-4096).
func (o ProfileSipPtrOutput) MaxLineLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.MaxLineLength
	}).(pulumi.IntPtrOutput)
}

// MESSAGE request rate limit (per second, per policy).
func (o ProfileSipPtrOutput) MessageRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.MessageRate
	}).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipPtrOutput) MessageRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.MessageRateTrack
	}).(pulumi.StringPtrOutput)
}

// RTP NAT port range.
func (o ProfileSipPtrOutput) NatPortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.NatPortRange
	}).(pulumi.StringPtrOutput)
}

// Enable/disable preservation of original IP in SDP i line. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) NatTrace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.NatTrace
	}).(pulumi.StringPtrOutput)
}

// Enable/disable no SDP fix-up. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) NoSdpFixup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.NoSdpFixup
	}).(pulumi.StringPtrOutput)
}

// NOTIFY request rate limit (per second, per policy).
func (o ProfileSipPtrOutput) NotifyRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.NotifyRate
	}).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipPtrOutput) NotifyRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.NotifyRateTrack
	}).(pulumi.StringPtrOutput)
}

// Enable/disable open pinhole for non-REGISTER Contact port. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) OpenContactPinhole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.OpenContactPinhole
	}).(pulumi.StringPtrOutput)
}

// Enable/disable open pinhole for Record-Route port. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) OpenRecordRoutePinhole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.OpenRecordRoutePinhole
	}).(pulumi.StringPtrOutput)
}

// Enable/disable open pinhole for REGISTER Contact port. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) OpenRegisterPinhole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.OpenRegisterPinhole
	}).(pulumi.StringPtrOutput)
}

// Enable/disable open pinhole for Via port. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) OpenViaPinhole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.OpenViaPinhole
	}).(pulumi.StringPtrOutput)
}

// OPTIONS request rate limit (per second, per policy).
func (o ProfileSipPtrOutput) OptionsRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.OptionsRate
	}).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipPtrOutput) OptionsRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.OptionsRateTrack
	}).(pulumi.StringPtrOutput)
}

// PRACK request rate limit (per second, per policy).
func (o ProfileSipPtrOutput) PrackRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.PrackRate
	}).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipPtrOutput) PrackRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.PrackRateTrack
	}).(pulumi.StringPtrOutput)
}

// Override i line to preserve original IPS (default: append). Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) PreserveOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.PreserveOverride
	}).(pulumi.StringPtrOutput)
}

// Expiry time for provisional INVITE (10 - 3600 sec).
func (o ProfileSipPtrOutput) ProvisionalInviteExpiryTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.ProvisionalInviteExpiryTime
	}).(pulumi.IntPtrOutput)
}

// PUBLISH request rate limit (per second, per policy).
func (o ProfileSipPtrOutput) PublishRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.PublishRate
	}).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipPtrOutput) PublishRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.PublishRateTrack
	}).(pulumi.StringPtrOutput)
}

// REFER request rate limit (per second, per policy).
func (o ProfileSipPtrOutput) ReferRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.ReferRate
	}).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipPtrOutput) ReferRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.ReferRateTrack
	}).(pulumi.StringPtrOutput)
}

// Enable/disable trace original IP/port within the contact header of REGISTER requests. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) RegisterContactTrace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.RegisterContactTrace
	}).(pulumi.StringPtrOutput)
}

// REGISTER request rate limit (per second, per policy).
func (o ProfileSipPtrOutput) RegisterRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.RegisterRate
	}).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipPtrOutput) RegisterRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.RegisterRateTrack
	}).(pulumi.StringPtrOutput)
}

// Enable/disable support via branch compliant with RFC 2543. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) Rfc2543Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.Rfc2543Branch
	}).(pulumi.StringPtrOutput)
}

// Enable/disable create pinholes for RTP traffic to traverse firewall. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) Rtp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.Rtp
	}).(pulumi.StringPtrOutput)
}

// Relative strength of encryption algorithms accepted in negotiation. Valid values: `high`, `medium`, `low`.
func (o ProfileSipPtrOutput) SslAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.SslAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Require a client certificate and authenticate it with the peer/peergrp.
func (o ProfileSipPtrOutput) SslAuthClient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.SslAuthClient
	}).(pulumi.StringPtrOutput)
}

// Authenticate the server's certificate with the peer/peergrp.
func (o ProfileSipPtrOutput) SslAuthServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.SslAuthServer
	}).(pulumi.StringPtrOutput)
}

// Name of Certificate to offer to server if requested.
func (o ProfileSipPtrOutput) SslClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.SslClientCertificate
	}).(pulumi.StringPtrOutput)
}

// Allow/block client renegotiation by server. Valid values: `allow`, `deny`, `secure`.
func (o ProfileSipPtrOutput) SslClientRenegotiation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.SslClientRenegotiation
	}).(pulumi.StringPtrOutput)
}

// Highest SSL/TLS version to negotiate.
func (o ProfileSipPtrOutput) SslMaxVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.SslMaxVersion
	}).(pulumi.StringPtrOutput)
}

// Lowest SSL/TLS version to negotiate.
func (o ProfileSipPtrOutput) SslMinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.SslMinVersion
	}).(pulumi.StringPtrOutput)
}

// SSL/TLS mode for encryption & decryption of traffic. Valid values: `off`, `full`.
func (o ProfileSipPtrOutput) SslMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.SslMode
	}).(pulumi.StringPtrOutput)
}

// SSL Perfect Forward Secrecy. Valid values: `require`, `deny`, `allow`.
func (o ProfileSipPtrOutput) SslPfs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.SslPfs
	}).(pulumi.StringPtrOutput)
}

// Send empty fragments to avoid attack on CBC IV (SSL 3.0 & TLS 1.0 only). Valid values: `enable`, `disable`.
func (o ProfileSipPtrOutput) SslSendEmptyFrags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.SslSendEmptyFrags
	}).(pulumi.StringPtrOutput)
}

// Name of Certificate return to the client in every SSL connection.
func (o ProfileSipPtrOutput) SslServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.SslServerCertificate
	}).(pulumi.StringPtrOutput)
}

// Enable/disable SIP. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Enable/disable only allow the registrar to connect. Valid values: `disable`, `enable`.
func (o ProfileSipPtrOutput) StrictRegister() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.StrictRegister
	}).(pulumi.StringPtrOutput)
}

// SUBSCRIBE request rate limit (per second, per policy).
func (o ProfileSipPtrOutput) SubscribeRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.SubscribeRate
	}).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipPtrOutput) SubscribeRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.SubscribeRateTrack
	}).(pulumi.StringPtrOutput)
}

// Action for unknown SIP header. Valid values: `discard`, `pass`, `respond`.
func (o ProfileSipPtrOutput) UnknownHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.UnknownHeader
	}).(pulumi.StringPtrOutput)
}

// UPDATE request rate limit (per second, per policy).
func (o ProfileSipPtrOutput) UpdateRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *int {
		if v == nil {
			return nil
		}
		return v.UpdateRate
	}).(pulumi.IntPtrOutput)
}

// Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
func (o ProfileSipPtrOutput) UpdateRateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileSip) *string {
		if v == nil {
			return nil
		}
		return v.UpdateRateTrack
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileMsrpInput)(nil)).Elem(), ProfileMsrpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileMsrpPtrInput)(nil)).Elem(), ProfileMsrpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileSccpInput)(nil)).Elem(), ProfileSccpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileSccpPtrInput)(nil)).Elem(), ProfileSccpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileSipInput)(nil)).Elem(), ProfileSipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileSipPtrInput)(nil)).Elem(), ProfileSipArgs{})
	pulumi.RegisterOutputType(ProfileMsrpOutput{})
	pulumi.RegisterOutputType(ProfileMsrpPtrOutput{})
	pulumi.RegisterOutputType(ProfileSccpOutput{})
	pulumi.RegisterOutputType(ProfileSccpPtrOutput{})
	pulumi.RegisterOutputType(ProfileSipOutput{})
	pulumi.RegisterOutputType(ProfileSipPtrOutput{})
}
