// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssl

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Use this data source to get information on fortios vpnssl settings
func LookupSettings(ctx *pulumi.Context, args *LookupSettingsArgs, opts ...pulumi.InvokeOption) (*LookupSettingsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSettingsResult
	err := ctx.Invoke("fortios:vpn/ssl/getSettings:getSettings", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSettings.
type LookupSettingsArgs struct {
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by getSettings.
type LookupSettingsResult struct {
	// Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any.
	Algorithm string `pulumi:"algorithm"`
	// Enable/disable checking of source IP for authentication session.
	AuthSessionCheckSourceIp string `pulumi:"authSessionCheckSourceIp"`
	// SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
	AuthTimeout int `pulumi:"authTimeout"`
	// Authentication rule for SSL VPN. The structure of `authenticationRule` block is documented below.
	AuthenticationRules []GetSettingsAuthenticationRule `pulumi:"authenticationRules"`
	// Enable to auto-create static routes for the SSL-VPN tunnel IP addresses.
	AutoTunnelStaticRoute string `pulumi:"autoTunnelStaticRoute"`
	// Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
	BannedCipher string `pulumi:"bannedCipher"`
	// Enable/disable overriding the configured system language based on the preferred language of the browser.
	BrowserLanguageDetection string `pulumi:"browserLanguageDetection"`
	// Enable/disable verification of referer field in HTTP request header.
	CheckReferer string `pulumi:"checkReferer"`
	// Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below.
	Ciphersuite string `pulumi:"ciphersuite"`
	// Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only.
	ClientSigalgs string `pulumi:"clientSigalgs"`
	// Default SSL VPN portal.
	DefaultPortal string `pulumi:"defaultPortal"`
	// Compression level (0~9).
	DeflateCompressionLevel int `pulumi:"deflateCompressionLevel"`
	// Minimum amount of data that triggers compression (200 - 65535 bytes).
	DeflateMinDataSize int `pulumi:"deflateMinDataSize"`
	// DNS server 1.
	DnsServer1 string `pulumi:"dnsServer1"`
	// DNS server 2.
	DnsServer2 string `pulumi:"dnsServer2"`
	// DNS suffix used for SSL-VPN clients.
	DnsSuffix string `pulumi:"dnsSuffix"`
	// Number of missing heartbeats before the connection is considered dropped.
	DtlsHeartbeatFailCount int `pulumi:"dtlsHeartbeatFailCount"`
	// Idle timeout before DTLS heartbeat is sent.
	DtlsHeartbeatIdleTimeout int `pulumi:"dtlsHeartbeatIdleTimeout"`
	// Interval between DTLS heartbeat.
	DtlsHeartbeatInterval int `pulumi:"dtlsHeartbeatInterval"`
	// SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
	DtlsHelloTimeout int `pulumi:"dtlsHelloTimeout"`
	// DTLS maximum protocol version.
	DtlsMaxProtoVer string `pulumi:"dtlsMaxProtoVer"`
	// DTLS minimum protocol version.
	DtlsMinProtoVer string `pulumi:"dtlsMinProtoVer"`
	// Enable DTLS to prevent eavesdropping, tampering, or message forgery.
	DtlsTunnel string `pulumi:"dtlsTunnel"`
	// Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal.
	DualStackMode string `pulumi:"dualStackMode"`
	// Encode \2F sequence to forward slash in URLs.
	Encode2fSequence string `pulumi:"encode2fSequence"`
	// Encrypt and store user passwords for SSL-VPN web sessions.
	EncryptAndStorePassword string `pulumi:"encryptAndStorePassword"`
	// Enable to force two-factor authentication for all SSL-VPNs.
	ForceTwoFactorAuth string `pulumi:"forceTwoFactorAuth"`
	// Forward the same, add, or remove HTTP header.
	HeaderXForwardedFor string `pulumi:"headerXForwardedFor"`
	// Add HSTS includeSubDomains response header.
	HstsIncludeSubdomains string `pulumi:"hstsIncludeSubdomains"`
	// Enable to allow HTTP compression over SSL-VPN tunnels.
	HttpCompression string `pulumi:"httpCompression"`
	// Enable/disable SSL-VPN support for HttpOnly cookies.
	HttpOnlyCookie string `pulumi:"httpOnlyCookie"`
	// SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
	HttpRequestBodyTimeout int `pulumi:"httpRequestBodyTimeout"`
	// SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
	HttpRequestHeaderTimeout int `pulumi:"httpRequestHeaderTimeout"`
	// Enable/disable redirect of port 80 to SSL-VPN port.
	HttpsRedirect string `pulumi:"httpsRedirect"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// SSL VPN disconnects if idle for specified time in seconds.
	IdleTimeout int `pulumi:"idleTimeout"`
	// IPv6 DNS server 1.
	Ipv6DnsServer1 string `pulumi:"ipv6DnsServer1"`
	// IPv6 DNS server 2.
	Ipv6DnsServer2 string `pulumi:"ipv6DnsServer2"`
	// IPv6 WINS server 1.
	Ipv6WinsServer1 string `pulumi:"ipv6WinsServer1"`
	// IPv6 WINS server 2.
	Ipv6WinsServer2 string `pulumi:"ipv6WinsServer2"`
	// SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
	LoginAttemptLimit int `pulumi:"loginAttemptLimit"`
	// Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
	LoginBlockTime int `pulumi:"loginBlockTime"`
	// SSLVPN maximum login timeout (10 - 180 sec, default = 30).
	LoginTimeout int `pulumi:"loginTimeout"`
	// SSL-VPN access port (1 - 65535).
	Port int `pulumi:"port"`
	// Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface.
	PortPrecedence string `pulumi:"portPrecedence"`
	// Enable to require client certificates for all SSL-VPN users.
	Reqclientcert string `pulumi:"reqclientcert"`
	// Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface.
	RouteSourceInterface string `pulumi:"routeSourceInterface"`
	// SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
	SamlRedirectPort int `pulumi:"samlRedirectPort"`
	// Server hostname for HTTPS. When set, will be used for SSL VPN web proxy host header for any redirection.
	ServerHostname string `pulumi:"serverHostname"`
	// Name of the server certificate to be used for SSL-VPNs.
	Servercert string `pulumi:"servercert"`
	// Enable/disable negated source IPv6 address match.
	SourceAddress6Negate string `pulumi:"sourceAddress6Negate"`
	// IPv6 source address of incoming traffic. The structure of `sourceAddress6` block is documented below.
	SourceAddress6s []GetSettingsSourceAddress6 `pulumi:"sourceAddress6s"`
	// Enable/disable negated source address match.
	SourceAddressNegate string `pulumi:"sourceAddressNegate"`
	// Source address of incoming traffic. The structure of `sourceAddress` block is documented below.
	SourceAddresses []GetSettingsSourceAddress `pulumi:"sourceAddresses"`
	// SSL VPN source interface of incoming traffic. The structure of `sourceInterface` block is documented below.
	SourceInterfaces []GetSettingsSourceInterface `pulumi:"sourceInterfaces"`
	// Enable to allow client renegotiation by the server if the tunnel goes down.
	SslClientRenegotiation string `pulumi:"sslClientRenegotiation"`
	// Enable/disable insertion of empty fragment.
	SslInsertEmptyFragment string `pulumi:"sslInsertEmptyFragment"`
	// SSL maximum protocol version.
	SslMaxProtoVer string `pulumi:"sslMaxProtoVer"`
	// SSL minimum protocol version.
	SslMinProtoVer string `pulumi:"sslMinProtoVer"`
	// Enable/disable SSL-VPN.
	Status string `pulumi:"status"`
	// Enable/disable TLSv1.0.
	Tlsv10 string `pulumi:"tlsv10"`
	// Enable/disable TLSv1.1.
	Tlsv11 string `pulumi:"tlsv11"`
	// Enable/disable TLSv1.2.
	Tlsv12 string `pulumi:"tlsv12"`
	// Enable/disable TLSv1.3.
	Tlsv13 string `pulumi:"tlsv13"`
	// Transform backward slashes to forward slashes in URLs.
	TransformBackwardSlashes string `pulumi:"transformBackwardSlashes"`
	// Method used for assigning address for tunnel.
	TunnelAddrAssignedMethod string `pulumi:"tunnelAddrAssignedMethod"`
	// Enable/disable tunnel connection without re-authorization if previous connection dropped.
	TunnelConnectWithoutReauth string `pulumi:"tunnelConnectWithoutReauth"`
	// Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpPools` block is documented below.
	TunnelIpPools []GetSettingsTunnelIpPool `pulumi:"tunnelIpPools"`
	// Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpv6Pools` block is documented below.
	TunnelIpv6Pools []GetSettingsTunnelIpv6Pool `pulumi:"tunnelIpv6Pools"`
	// Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
	TunnelUserSessionTimeout int `pulumi:"tunnelUserSessionTimeout"`
	// Enable/disable unsafe legacy re-negotiation.
	UnsafeLegacyRenegotiation string `pulumi:"unsafeLegacyRenegotiation"`
	// Enable to obscure the host name of the URL of the web browser display.
	UrlObscuration string `pulumi:"urlObscuration"`
	// Name of user peer.
	UserPeer  string  `pulumi:"userPeer"`
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable use of IP pools defined in firewall policy while using web-mode.
	WebModeSnat string `pulumi:"webModeSnat"`
	// WINS server 1.
	WinsServer1 string `pulumi:"winsServer1"`
	// WINS server 2.
	WinsServer2 string `pulumi:"winsServer2"`
	// Add HTTP X-Content-Type-Options header.
	XContentTypeOptions string `pulumi:"xContentTypeOptions"`
	// Enable/disable verification of device certificate for SSLVPN ZTNA session.
	ZtnaTrustedClient string `pulumi:"ztnaTrustedClient"`
}

func LookupSettingsOutput(ctx *pulumi.Context, args LookupSettingsOutputArgs, opts ...pulumi.InvokeOption) LookupSettingsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSettingsResult, error) {
			args := v.(LookupSettingsArgs)
			r, err := LookupSettings(ctx, &args, opts...)
			var s LookupSettingsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSettingsResultOutput)
}

// A collection of arguments for invoking getSettings.
type LookupSettingsOutputArgs struct {
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupSettingsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSettingsArgs)(nil)).Elem()
}

// A collection of values returned by getSettings.
type LookupSettingsResultOutput struct{ *pulumi.OutputState }

func (LookupSettingsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSettingsResult)(nil)).Elem()
}

func (o LookupSettingsResultOutput) ToLookupSettingsResultOutput() LookupSettingsResultOutput {
	return o
}

func (o LookupSettingsResultOutput) ToLookupSettingsResultOutputWithContext(ctx context.Context) LookupSettingsResultOutput {
	return o
}

// Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any.
func (o LookupSettingsResultOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.Algorithm }).(pulumi.StringOutput)
}

// Enable/disable checking of source IP for authentication session.
func (o LookupSettingsResultOutput) AuthSessionCheckSourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.AuthSessionCheckSourceIp }).(pulumi.StringOutput)
}

// SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
func (o LookupSettingsResultOutput) AuthTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSettingsResult) int { return v.AuthTimeout }).(pulumi.IntOutput)
}

// Authentication rule for SSL VPN. The structure of `authenticationRule` block is documented below.
func (o LookupSettingsResultOutput) AuthenticationRules() GetSettingsAuthenticationRuleArrayOutput {
	return o.ApplyT(func(v LookupSettingsResult) []GetSettingsAuthenticationRule { return v.AuthenticationRules }).(GetSettingsAuthenticationRuleArrayOutput)
}

// Enable to auto-create static routes for the SSL-VPN tunnel IP addresses.
func (o LookupSettingsResultOutput) AutoTunnelStaticRoute() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.AutoTunnelStaticRoute }).(pulumi.StringOutput)
}

// Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
func (o LookupSettingsResultOutput) BannedCipher() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.BannedCipher }).(pulumi.StringOutput)
}

// Enable/disable overriding the configured system language based on the preferred language of the browser.
func (o LookupSettingsResultOutput) BrowserLanguageDetection() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.BrowserLanguageDetection }).(pulumi.StringOutput)
}

// Enable/disable verification of referer field in HTTP request header.
func (o LookupSettingsResultOutput) CheckReferer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.CheckReferer }).(pulumi.StringOutput)
}

// Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below.
func (o LookupSettingsResultOutput) Ciphersuite() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.Ciphersuite }).(pulumi.StringOutput)
}

// Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only.
func (o LookupSettingsResultOutput) ClientSigalgs() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.ClientSigalgs }).(pulumi.StringOutput)
}

// Default SSL VPN portal.
func (o LookupSettingsResultOutput) DefaultPortal() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.DefaultPortal }).(pulumi.StringOutput)
}

// Compression level (0~9).
func (o LookupSettingsResultOutput) DeflateCompressionLevel() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSettingsResult) int { return v.DeflateCompressionLevel }).(pulumi.IntOutput)
}

// Minimum amount of data that triggers compression (200 - 65535 bytes).
func (o LookupSettingsResultOutput) DeflateMinDataSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSettingsResult) int { return v.DeflateMinDataSize }).(pulumi.IntOutput)
}

// DNS server 1.
func (o LookupSettingsResultOutput) DnsServer1() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.DnsServer1 }).(pulumi.StringOutput)
}

// DNS server 2.
func (o LookupSettingsResultOutput) DnsServer2() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.DnsServer2 }).(pulumi.StringOutput)
}

// DNS suffix used for SSL-VPN clients.
func (o LookupSettingsResultOutput) DnsSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.DnsSuffix }).(pulumi.StringOutput)
}

// Number of missing heartbeats before the connection is considered dropped.
func (o LookupSettingsResultOutput) DtlsHeartbeatFailCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSettingsResult) int { return v.DtlsHeartbeatFailCount }).(pulumi.IntOutput)
}

// Idle timeout before DTLS heartbeat is sent.
func (o LookupSettingsResultOutput) DtlsHeartbeatIdleTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSettingsResult) int { return v.DtlsHeartbeatIdleTimeout }).(pulumi.IntOutput)
}

// Interval between DTLS heartbeat.
func (o LookupSettingsResultOutput) DtlsHeartbeatInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSettingsResult) int { return v.DtlsHeartbeatInterval }).(pulumi.IntOutput)
}

// SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
func (o LookupSettingsResultOutput) DtlsHelloTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSettingsResult) int { return v.DtlsHelloTimeout }).(pulumi.IntOutput)
}

// DTLS maximum protocol version.
func (o LookupSettingsResultOutput) DtlsMaxProtoVer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.DtlsMaxProtoVer }).(pulumi.StringOutput)
}

// DTLS minimum protocol version.
func (o LookupSettingsResultOutput) DtlsMinProtoVer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.DtlsMinProtoVer }).(pulumi.StringOutput)
}

// Enable DTLS to prevent eavesdropping, tampering, or message forgery.
func (o LookupSettingsResultOutput) DtlsTunnel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.DtlsTunnel }).(pulumi.StringOutput)
}

// Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal.
func (o LookupSettingsResultOutput) DualStackMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.DualStackMode }).(pulumi.StringOutput)
}

// Encode \2F sequence to forward slash in URLs.
func (o LookupSettingsResultOutput) Encode2fSequence() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.Encode2fSequence }).(pulumi.StringOutput)
}

// Encrypt and store user passwords for SSL-VPN web sessions.
func (o LookupSettingsResultOutput) EncryptAndStorePassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.EncryptAndStorePassword }).(pulumi.StringOutput)
}

// Enable to force two-factor authentication for all SSL-VPNs.
func (o LookupSettingsResultOutput) ForceTwoFactorAuth() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.ForceTwoFactorAuth }).(pulumi.StringOutput)
}

// Forward the same, add, or remove HTTP header.
func (o LookupSettingsResultOutput) HeaderXForwardedFor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.HeaderXForwardedFor }).(pulumi.StringOutput)
}

// Add HSTS includeSubDomains response header.
func (o LookupSettingsResultOutput) HstsIncludeSubdomains() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.HstsIncludeSubdomains }).(pulumi.StringOutput)
}

// Enable to allow HTTP compression over SSL-VPN tunnels.
func (o LookupSettingsResultOutput) HttpCompression() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.HttpCompression }).(pulumi.StringOutput)
}

// Enable/disable SSL-VPN support for HttpOnly cookies.
func (o LookupSettingsResultOutput) HttpOnlyCookie() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.HttpOnlyCookie }).(pulumi.StringOutput)
}

// SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
func (o LookupSettingsResultOutput) HttpRequestBodyTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSettingsResult) int { return v.HttpRequestBodyTimeout }).(pulumi.IntOutput)
}

// SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
func (o LookupSettingsResultOutput) HttpRequestHeaderTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSettingsResult) int { return v.HttpRequestHeaderTimeout }).(pulumi.IntOutput)
}

// Enable/disable redirect of port 80 to SSL-VPN port.
func (o LookupSettingsResultOutput) HttpsRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.HttpsRedirect }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSettingsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.Id }).(pulumi.StringOutput)
}

// SSL VPN disconnects if idle for specified time in seconds.
func (o LookupSettingsResultOutput) IdleTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSettingsResult) int { return v.IdleTimeout }).(pulumi.IntOutput)
}

// IPv6 DNS server 1.
func (o LookupSettingsResultOutput) Ipv6DnsServer1() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.Ipv6DnsServer1 }).(pulumi.StringOutput)
}

// IPv6 DNS server 2.
func (o LookupSettingsResultOutput) Ipv6DnsServer2() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.Ipv6DnsServer2 }).(pulumi.StringOutput)
}

// IPv6 WINS server 1.
func (o LookupSettingsResultOutput) Ipv6WinsServer1() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.Ipv6WinsServer1 }).(pulumi.StringOutput)
}

// IPv6 WINS server 2.
func (o LookupSettingsResultOutput) Ipv6WinsServer2() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.Ipv6WinsServer2 }).(pulumi.StringOutput)
}

// SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
func (o LookupSettingsResultOutput) LoginAttemptLimit() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSettingsResult) int { return v.LoginAttemptLimit }).(pulumi.IntOutput)
}

// Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
func (o LookupSettingsResultOutput) LoginBlockTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSettingsResult) int { return v.LoginBlockTime }).(pulumi.IntOutput)
}

// SSLVPN maximum login timeout (10 - 180 sec, default = 30).
func (o LookupSettingsResultOutput) LoginTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSettingsResult) int { return v.LoginTimeout }).(pulumi.IntOutput)
}

// SSL-VPN access port (1 - 65535).
func (o LookupSettingsResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSettingsResult) int { return v.Port }).(pulumi.IntOutput)
}

// Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface.
func (o LookupSettingsResultOutput) PortPrecedence() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.PortPrecedence }).(pulumi.StringOutput)
}

// Enable to require client certificates for all SSL-VPN users.
func (o LookupSettingsResultOutput) Reqclientcert() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.Reqclientcert }).(pulumi.StringOutput)
}

// Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface.
func (o LookupSettingsResultOutput) RouteSourceInterface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.RouteSourceInterface }).(pulumi.StringOutput)
}

// SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
func (o LookupSettingsResultOutput) SamlRedirectPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSettingsResult) int { return v.SamlRedirectPort }).(pulumi.IntOutput)
}

// Server hostname for HTTPS. When set, will be used for SSL VPN web proxy host header for any redirection.
func (o LookupSettingsResultOutput) ServerHostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.ServerHostname }).(pulumi.StringOutput)
}

// Name of the server certificate to be used for SSL-VPNs.
func (o LookupSettingsResultOutput) Servercert() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.Servercert }).(pulumi.StringOutput)
}

// Enable/disable negated source IPv6 address match.
func (o LookupSettingsResultOutput) SourceAddress6Negate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.SourceAddress6Negate }).(pulumi.StringOutput)
}

// IPv6 source address of incoming traffic. The structure of `sourceAddress6` block is documented below.
func (o LookupSettingsResultOutput) SourceAddress6s() GetSettingsSourceAddress6ArrayOutput {
	return o.ApplyT(func(v LookupSettingsResult) []GetSettingsSourceAddress6 { return v.SourceAddress6s }).(GetSettingsSourceAddress6ArrayOutput)
}

// Enable/disable negated source address match.
func (o LookupSettingsResultOutput) SourceAddressNegate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.SourceAddressNegate }).(pulumi.StringOutput)
}

// Source address of incoming traffic. The structure of `sourceAddress` block is documented below.
func (o LookupSettingsResultOutput) SourceAddresses() GetSettingsSourceAddressArrayOutput {
	return o.ApplyT(func(v LookupSettingsResult) []GetSettingsSourceAddress { return v.SourceAddresses }).(GetSettingsSourceAddressArrayOutput)
}

// SSL VPN source interface of incoming traffic. The structure of `sourceInterface` block is documented below.
func (o LookupSettingsResultOutput) SourceInterfaces() GetSettingsSourceInterfaceArrayOutput {
	return o.ApplyT(func(v LookupSettingsResult) []GetSettingsSourceInterface { return v.SourceInterfaces }).(GetSettingsSourceInterfaceArrayOutput)
}

// Enable to allow client renegotiation by the server if the tunnel goes down.
func (o LookupSettingsResultOutput) SslClientRenegotiation() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.SslClientRenegotiation }).(pulumi.StringOutput)
}

// Enable/disable insertion of empty fragment.
func (o LookupSettingsResultOutput) SslInsertEmptyFragment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.SslInsertEmptyFragment }).(pulumi.StringOutput)
}

// SSL maximum protocol version.
func (o LookupSettingsResultOutput) SslMaxProtoVer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.SslMaxProtoVer }).(pulumi.StringOutput)
}

// SSL minimum protocol version.
func (o LookupSettingsResultOutput) SslMinProtoVer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.SslMinProtoVer }).(pulumi.StringOutput)
}

// Enable/disable SSL-VPN.
func (o LookupSettingsResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.Status }).(pulumi.StringOutput)
}

// Enable/disable TLSv1.0.
func (o LookupSettingsResultOutput) Tlsv10() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.Tlsv10 }).(pulumi.StringOutput)
}

// Enable/disable TLSv1.1.
func (o LookupSettingsResultOutput) Tlsv11() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.Tlsv11 }).(pulumi.StringOutput)
}

// Enable/disable TLSv1.2.
func (o LookupSettingsResultOutput) Tlsv12() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.Tlsv12 }).(pulumi.StringOutput)
}

// Enable/disable TLSv1.3.
func (o LookupSettingsResultOutput) Tlsv13() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.Tlsv13 }).(pulumi.StringOutput)
}

// Transform backward slashes to forward slashes in URLs.
func (o LookupSettingsResultOutput) TransformBackwardSlashes() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.TransformBackwardSlashes }).(pulumi.StringOutput)
}

// Method used for assigning address for tunnel.
func (o LookupSettingsResultOutput) TunnelAddrAssignedMethod() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.TunnelAddrAssignedMethod }).(pulumi.StringOutput)
}

// Enable/disable tunnel connection without re-authorization if previous connection dropped.
func (o LookupSettingsResultOutput) TunnelConnectWithoutReauth() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.TunnelConnectWithoutReauth }).(pulumi.StringOutput)
}

// Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpPools` block is documented below.
func (o LookupSettingsResultOutput) TunnelIpPools() GetSettingsTunnelIpPoolArrayOutput {
	return o.ApplyT(func(v LookupSettingsResult) []GetSettingsTunnelIpPool { return v.TunnelIpPools }).(GetSettingsTunnelIpPoolArrayOutput)
}

// Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnelIpv6Pools` block is documented below.
func (o LookupSettingsResultOutput) TunnelIpv6Pools() GetSettingsTunnelIpv6PoolArrayOutput {
	return o.ApplyT(func(v LookupSettingsResult) []GetSettingsTunnelIpv6Pool { return v.TunnelIpv6Pools }).(GetSettingsTunnelIpv6PoolArrayOutput)
}

// Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
func (o LookupSettingsResultOutput) TunnelUserSessionTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSettingsResult) int { return v.TunnelUserSessionTimeout }).(pulumi.IntOutput)
}

// Enable/disable unsafe legacy re-negotiation.
func (o LookupSettingsResultOutput) UnsafeLegacyRenegotiation() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.UnsafeLegacyRenegotiation }).(pulumi.StringOutput)
}

// Enable to obscure the host name of the URL of the web browser display.
func (o LookupSettingsResultOutput) UrlObscuration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.UrlObscuration }).(pulumi.StringOutput)
}

// Name of user peer.
func (o LookupSettingsResultOutput) UserPeer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.UserPeer }).(pulumi.StringOutput)
}

func (o LookupSettingsResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSettingsResult) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Enable/disable use of IP pools defined in firewall policy while using web-mode.
func (o LookupSettingsResultOutput) WebModeSnat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.WebModeSnat }).(pulumi.StringOutput)
}

// WINS server 1.
func (o LookupSettingsResultOutput) WinsServer1() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.WinsServer1 }).(pulumi.StringOutput)
}

// WINS server 2.
func (o LookupSettingsResultOutput) WinsServer2() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.WinsServer2 }).(pulumi.StringOutput)
}

// Add HTTP X-Content-Type-Options header.
func (o LookupSettingsResultOutput) XContentTypeOptions() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.XContentTypeOptions }).(pulumi.StringOutput)
}

// Enable/disable verification of device certificate for SSLVPN ZTNA session.
func (o LookupSettingsResultOutput) ZtnaTrustedClient() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingsResult) string { return v.ZtnaTrustedClient }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSettingsResultOutput{})
}
