// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipsec

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure IPsec manual keys.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpn.NewManualkeyinterface(ctx, "trname", &vpn.ManualkeyinterfaceArgs{
//				AddrType:  pulumi.String("4"),
//				AuthAlg:   pulumi.String("null"),
//				AuthKey:   pulumi.String("-"),
//				EncAlg:    pulumi.String("des"),
//				EncKey:    pulumi.String("CECA2184ACADAEEF"),
//				Interface: pulumi.String("port3"),
//				IpVersion: pulumi.String("4"),
//				LocalGw:   pulumi.String("0.0.0.0"),
//				LocalGw6:  pulumi.String("::"),
//				LocalSpi:  pulumi.String("0x100"),
//				RemoteGw:  pulumi.String("2.2.2.2"),
//				RemoteGw6: pulumi.String("::"),
//				RemoteSpi: pulumi.String("0x100"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VpnIpsec ManualkeyInterface can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:vpn/ipsec/manualkeyinterface:Manualkeyinterface labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:vpn/ipsec/manualkeyinterface:Manualkeyinterface labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Manualkeyinterface struct {
	pulumi.CustomResourceState

	// IP version to use for IP packets. Valid values: `4`, `6`.
	AddrType pulumi.StringOutput `pulumi:"addrType"`
	// Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
	AuthAlg pulumi.StringOutput `pulumi:"authAlg"`
	// Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
	AuthKey pulumi.StringOutput `pulumi:"authKey"`
	// Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
	EncAlg pulumi.StringOutput `pulumi:"encAlg"`
	// Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
	EncKey pulumi.StringOutput `pulumi:"encKey"`
	// Name of the physical, aggregate, or VLAN interface.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// IP version to use for VPN interface. Valid values: `4`, `6`.
	IpVersion pulumi.StringOutput `pulumi:"ipVersion"`
	// IPv4 address of the local gateway's external interface.
	LocalGw pulumi.StringOutput `pulumi:"localGw"`
	// Local IPv6 address of VPN gateway.
	LocalGw6 pulumi.StringOutput `pulumi:"localGw6"`
	// Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	LocalSpi pulumi.StringOutput `pulumi:"localSpi"`
	// IPsec tunnel name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
	NpuOffload pulumi.StringOutput `pulumi:"npuOffload"`
	// IPv4 address of the remote gateway's external interface.
	RemoteGw pulumi.StringOutput `pulumi:"remoteGw"`
	// Remote IPv6 address of VPN gateway.
	RemoteGw6 pulumi.StringOutput `pulumi:"remoteGw6"`
	// Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	RemoteSpi pulumi.StringOutput `pulumi:"remoteSpi"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewManualkeyinterface registers a new resource with the given unique name, arguments, and options.
func NewManualkeyinterface(ctx *pulumi.Context,
	name string, args *ManualkeyinterfaceArgs, opts ...pulumi.ResourceOption) (*Manualkeyinterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthAlg == nil {
		return nil, errors.New("invalid value for required argument 'AuthAlg'")
	}
	if args.EncAlg == nil {
		return nil, errors.New("invalid value for required argument 'EncAlg'")
	}
	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.RemoteGw == nil {
		return nil, errors.New("invalid value for required argument 'RemoteGw'")
	}
	if args.RemoteGw6 == nil {
		return nil, errors.New("invalid value for required argument 'RemoteGw6'")
	}
	if args.AuthKey != nil {
		args.AuthKey = pulumi.ToSecret(args.AuthKey).(pulumi.StringPtrInput)
	}
	if args.EncKey != nil {
		args.EncKey = pulumi.ToSecret(args.EncKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"authKey",
		"encKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Manualkeyinterface
	err := ctx.RegisterResource("fortios:vpn/ipsec/manualkeyinterface:Manualkeyinterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManualkeyinterface gets an existing Manualkeyinterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManualkeyinterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManualkeyinterfaceState, opts ...pulumi.ResourceOption) (*Manualkeyinterface, error) {
	var resource Manualkeyinterface
	err := ctx.ReadResource("fortios:vpn/ipsec/manualkeyinterface:Manualkeyinterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Manualkeyinterface resources.
type manualkeyinterfaceState struct {
	// IP version to use for IP packets. Valid values: `4`, `6`.
	AddrType *string `pulumi:"addrType"`
	// Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
	AuthAlg *string `pulumi:"authAlg"`
	// Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
	AuthKey *string `pulumi:"authKey"`
	// Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
	EncAlg *string `pulumi:"encAlg"`
	// Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
	EncKey *string `pulumi:"encKey"`
	// Name of the physical, aggregate, or VLAN interface.
	Interface *string `pulumi:"interface"`
	// IP version to use for VPN interface. Valid values: `4`, `6`.
	IpVersion *string `pulumi:"ipVersion"`
	// IPv4 address of the local gateway's external interface.
	LocalGw *string `pulumi:"localGw"`
	// Local IPv6 address of VPN gateway.
	LocalGw6 *string `pulumi:"localGw6"`
	// Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	LocalSpi *string `pulumi:"localSpi"`
	// IPsec tunnel name.
	Name *string `pulumi:"name"`
	// Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
	NpuOffload *string `pulumi:"npuOffload"`
	// IPv4 address of the remote gateway's external interface.
	RemoteGw *string `pulumi:"remoteGw"`
	// Remote IPv6 address of VPN gateway.
	RemoteGw6 *string `pulumi:"remoteGw6"`
	// Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	RemoteSpi *string `pulumi:"remoteSpi"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type ManualkeyinterfaceState struct {
	// IP version to use for IP packets. Valid values: `4`, `6`.
	AddrType pulumi.StringPtrInput
	// Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
	AuthAlg pulumi.StringPtrInput
	// Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
	AuthKey pulumi.StringPtrInput
	// Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
	EncAlg pulumi.StringPtrInput
	// Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
	EncKey pulumi.StringPtrInput
	// Name of the physical, aggregate, or VLAN interface.
	Interface pulumi.StringPtrInput
	// IP version to use for VPN interface. Valid values: `4`, `6`.
	IpVersion pulumi.StringPtrInput
	// IPv4 address of the local gateway's external interface.
	LocalGw pulumi.StringPtrInput
	// Local IPv6 address of VPN gateway.
	LocalGw6 pulumi.StringPtrInput
	// Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	LocalSpi pulumi.StringPtrInput
	// IPsec tunnel name.
	Name pulumi.StringPtrInput
	// Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
	NpuOffload pulumi.StringPtrInput
	// IPv4 address of the remote gateway's external interface.
	RemoteGw pulumi.StringPtrInput
	// Remote IPv6 address of VPN gateway.
	RemoteGw6 pulumi.StringPtrInput
	// Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	RemoteSpi pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ManualkeyinterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*manualkeyinterfaceState)(nil)).Elem()
}

type manualkeyinterfaceArgs struct {
	// IP version to use for IP packets. Valid values: `4`, `6`.
	AddrType *string `pulumi:"addrType"`
	// Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
	AuthAlg string `pulumi:"authAlg"`
	// Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
	AuthKey *string `pulumi:"authKey"`
	// Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
	EncAlg string `pulumi:"encAlg"`
	// Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
	EncKey *string `pulumi:"encKey"`
	// Name of the physical, aggregate, or VLAN interface.
	Interface string `pulumi:"interface"`
	// IP version to use for VPN interface. Valid values: `4`, `6`.
	IpVersion *string `pulumi:"ipVersion"`
	// IPv4 address of the local gateway's external interface.
	LocalGw *string `pulumi:"localGw"`
	// Local IPv6 address of VPN gateway.
	LocalGw6 *string `pulumi:"localGw6"`
	// Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	LocalSpi *string `pulumi:"localSpi"`
	// IPsec tunnel name.
	Name *string `pulumi:"name"`
	// Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
	NpuOffload *string `pulumi:"npuOffload"`
	// IPv4 address of the remote gateway's external interface.
	RemoteGw string `pulumi:"remoteGw"`
	// Remote IPv6 address of VPN gateway.
	RemoteGw6 string `pulumi:"remoteGw6"`
	// Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	RemoteSpi *string `pulumi:"remoteSpi"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Manualkeyinterface resource.
type ManualkeyinterfaceArgs struct {
	// IP version to use for IP packets. Valid values: `4`, `6`.
	AddrType pulumi.StringPtrInput
	// Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
	AuthAlg pulumi.StringInput
	// Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
	AuthKey pulumi.StringPtrInput
	// Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
	EncAlg pulumi.StringInput
	// Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
	EncKey pulumi.StringPtrInput
	// Name of the physical, aggregate, or VLAN interface.
	Interface pulumi.StringInput
	// IP version to use for VPN interface. Valid values: `4`, `6`.
	IpVersion pulumi.StringPtrInput
	// IPv4 address of the local gateway's external interface.
	LocalGw pulumi.StringPtrInput
	// Local IPv6 address of VPN gateway.
	LocalGw6 pulumi.StringPtrInput
	// Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	LocalSpi pulumi.StringPtrInput
	// IPsec tunnel name.
	Name pulumi.StringPtrInput
	// Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
	NpuOffload pulumi.StringPtrInput
	// IPv4 address of the remote gateway's external interface.
	RemoteGw pulumi.StringInput
	// Remote IPv6 address of VPN gateway.
	RemoteGw6 pulumi.StringInput
	// Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
	RemoteSpi pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ManualkeyinterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*manualkeyinterfaceArgs)(nil)).Elem()
}

type ManualkeyinterfaceInput interface {
	pulumi.Input

	ToManualkeyinterfaceOutput() ManualkeyinterfaceOutput
	ToManualkeyinterfaceOutputWithContext(ctx context.Context) ManualkeyinterfaceOutput
}

func (*Manualkeyinterface) ElementType() reflect.Type {
	return reflect.TypeOf((**Manualkeyinterface)(nil)).Elem()
}

func (i *Manualkeyinterface) ToManualkeyinterfaceOutput() ManualkeyinterfaceOutput {
	return i.ToManualkeyinterfaceOutputWithContext(context.Background())
}

func (i *Manualkeyinterface) ToManualkeyinterfaceOutputWithContext(ctx context.Context) ManualkeyinterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualkeyinterfaceOutput)
}

// ManualkeyinterfaceArrayInput is an input type that accepts ManualkeyinterfaceArray and ManualkeyinterfaceArrayOutput values.
// You can construct a concrete instance of `ManualkeyinterfaceArrayInput` via:
//
//	ManualkeyinterfaceArray{ ManualkeyinterfaceArgs{...} }
type ManualkeyinterfaceArrayInput interface {
	pulumi.Input

	ToManualkeyinterfaceArrayOutput() ManualkeyinterfaceArrayOutput
	ToManualkeyinterfaceArrayOutputWithContext(context.Context) ManualkeyinterfaceArrayOutput
}

type ManualkeyinterfaceArray []ManualkeyinterfaceInput

func (ManualkeyinterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Manualkeyinterface)(nil)).Elem()
}

func (i ManualkeyinterfaceArray) ToManualkeyinterfaceArrayOutput() ManualkeyinterfaceArrayOutput {
	return i.ToManualkeyinterfaceArrayOutputWithContext(context.Background())
}

func (i ManualkeyinterfaceArray) ToManualkeyinterfaceArrayOutputWithContext(ctx context.Context) ManualkeyinterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualkeyinterfaceArrayOutput)
}

// ManualkeyinterfaceMapInput is an input type that accepts ManualkeyinterfaceMap and ManualkeyinterfaceMapOutput values.
// You can construct a concrete instance of `ManualkeyinterfaceMapInput` via:
//
//	ManualkeyinterfaceMap{ "key": ManualkeyinterfaceArgs{...} }
type ManualkeyinterfaceMapInput interface {
	pulumi.Input

	ToManualkeyinterfaceMapOutput() ManualkeyinterfaceMapOutput
	ToManualkeyinterfaceMapOutputWithContext(context.Context) ManualkeyinterfaceMapOutput
}

type ManualkeyinterfaceMap map[string]ManualkeyinterfaceInput

func (ManualkeyinterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Manualkeyinterface)(nil)).Elem()
}

func (i ManualkeyinterfaceMap) ToManualkeyinterfaceMapOutput() ManualkeyinterfaceMapOutput {
	return i.ToManualkeyinterfaceMapOutputWithContext(context.Background())
}

func (i ManualkeyinterfaceMap) ToManualkeyinterfaceMapOutputWithContext(ctx context.Context) ManualkeyinterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualkeyinterfaceMapOutput)
}

type ManualkeyinterfaceOutput struct{ *pulumi.OutputState }

func (ManualkeyinterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Manualkeyinterface)(nil)).Elem()
}

func (o ManualkeyinterfaceOutput) ToManualkeyinterfaceOutput() ManualkeyinterfaceOutput {
	return o
}

func (o ManualkeyinterfaceOutput) ToManualkeyinterfaceOutputWithContext(ctx context.Context) ManualkeyinterfaceOutput {
	return o
}

// IP version to use for IP packets. Valid values: `4`, `6`.
func (o ManualkeyinterfaceOutput) AddrType() pulumi.StringOutput {
	return o.ApplyT(func(v *Manualkeyinterface) pulumi.StringOutput { return v.AddrType }).(pulumi.StringOutput)
}

// Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
func (o ManualkeyinterfaceOutput) AuthAlg() pulumi.StringOutput {
	return o.ApplyT(func(v *Manualkeyinterface) pulumi.StringOutput { return v.AuthAlg }).(pulumi.StringOutput)
}

// Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
func (o ManualkeyinterfaceOutput) AuthKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Manualkeyinterface) pulumi.StringOutput { return v.AuthKey }).(pulumi.StringOutput)
}

// Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
func (o ManualkeyinterfaceOutput) EncAlg() pulumi.StringOutput {
	return o.ApplyT(func(v *Manualkeyinterface) pulumi.StringOutput { return v.EncAlg }).(pulumi.StringOutput)
}

// Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
func (o ManualkeyinterfaceOutput) EncKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Manualkeyinterface) pulumi.StringOutput { return v.EncKey }).(pulumi.StringOutput)
}

// Name of the physical, aggregate, or VLAN interface.
func (o ManualkeyinterfaceOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Manualkeyinterface) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// IP version to use for VPN interface. Valid values: `4`, `6`.
func (o ManualkeyinterfaceOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Manualkeyinterface) pulumi.StringOutput { return v.IpVersion }).(pulumi.StringOutput)
}

// IPv4 address of the local gateway's external interface.
func (o ManualkeyinterfaceOutput) LocalGw() pulumi.StringOutput {
	return o.ApplyT(func(v *Manualkeyinterface) pulumi.StringOutput { return v.LocalGw }).(pulumi.StringOutput)
}

// Local IPv6 address of VPN gateway.
func (o ManualkeyinterfaceOutput) LocalGw6() pulumi.StringOutput {
	return o.ApplyT(func(v *Manualkeyinterface) pulumi.StringOutput { return v.LocalGw6 }).(pulumi.StringOutput)
}

// Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
func (o ManualkeyinterfaceOutput) LocalSpi() pulumi.StringOutput {
	return o.ApplyT(func(v *Manualkeyinterface) pulumi.StringOutput { return v.LocalSpi }).(pulumi.StringOutput)
}

// IPsec tunnel name.
func (o ManualkeyinterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Manualkeyinterface) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
func (o ManualkeyinterfaceOutput) NpuOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *Manualkeyinterface) pulumi.StringOutput { return v.NpuOffload }).(pulumi.StringOutput)
}

// IPv4 address of the remote gateway's external interface.
func (o ManualkeyinterfaceOutput) RemoteGw() pulumi.StringOutput {
	return o.ApplyT(func(v *Manualkeyinterface) pulumi.StringOutput { return v.RemoteGw }).(pulumi.StringOutput)
}

// Remote IPv6 address of VPN gateway.
func (o ManualkeyinterfaceOutput) RemoteGw6() pulumi.StringOutput {
	return o.ApplyT(func(v *Manualkeyinterface) pulumi.StringOutput { return v.RemoteGw6 }).(pulumi.StringOutput)
}

// Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
func (o ManualkeyinterfaceOutput) RemoteSpi() pulumi.StringOutput {
	return o.ApplyT(func(v *Manualkeyinterface) pulumi.StringOutput { return v.RemoteSpi }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ManualkeyinterfaceOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Manualkeyinterface) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type ManualkeyinterfaceArrayOutput struct{ *pulumi.OutputState }

func (ManualkeyinterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Manualkeyinterface)(nil)).Elem()
}

func (o ManualkeyinterfaceArrayOutput) ToManualkeyinterfaceArrayOutput() ManualkeyinterfaceArrayOutput {
	return o
}

func (o ManualkeyinterfaceArrayOutput) ToManualkeyinterfaceArrayOutputWithContext(ctx context.Context) ManualkeyinterfaceArrayOutput {
	return o
}

func (o ManualkeyinterfaceArrayOutput) Index(i pulumi.IntInput) ManualkeyinterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Manualkeyinterface {
		return vs[0].([]*Manualkeyinterface)[vs[1].(int)]
	}).(ManualkeyinterfaceOutput)
}

type ManualkeyinterfaceMapOutput struct{ *pulumi.OutputState }

func (ManualkeyinterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Manualkeyinterface)(nil)).Elem()
}

func (o ManualkeyinterfaceMapOutput) ToManualkeyinterfaceMapOutput() ManualkeyinterfaceMapOutput {
	return o
}

func (o ManualkeyinterfaceMapOutput) ToManualkeyinterfaceMapOutputWithContext(ctx context.Context) ManualkeyinterfaceMapOutput {
	return o
}

func (o ManualkeyinterfaceMapOutput) MapIndex(k pulumi.StringInput) ManualkeyinterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Manualkeyinterface {
		return vs[0].(map[string]*Manualkeyinterface)[vs[1].(string)]
	}).(ManualkeyinterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManualkeyinterfaceInput)(nil)).Elem(), &Manualkeyinterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManualkeyinterfaceArrayInput)(nil)).Elem(), ManualkeyinterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManualkeyinterfaceMapInput)(nil)).Elem(), ManualkeyinterfaceMap{})
	pulumi.RegisterOutputType(ManualkeyinterfaceOutput{})
	pulumi.RegisterOutputType(ManualkeyinterfaceArrayOutput{})
	pulumi.RegisterOutputType(ManualkeyinterfaceMapOutput{})
}
