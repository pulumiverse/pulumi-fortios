// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipsec

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure FortiClient policy realm.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// fortios_vpnipsec_phase1interface.trname2:
//			trname4, err := vpn.NewPhase1interface(ctx, "trname4", &vpn.Phase1interfaceArgs{
//				AcctVerify:             pulumi.String("disable"),
//				AddGwRoute:             pulumi.String("disable"),
//				AddRoute:               pulumi.String("enable"),
//				AssignIp:               pulumi.String("enable"),
//				AssignIpFrom:           pulumi.String("range"),
//				Authmethod:             pulumi.String("psk"),
//				Authusrgrp:             pulumi.String("Guest-group"),
//				AutoDiscoveryForwarder: pulumi.String("disable"),
//				AutoDiscoveryPsk:       pulumi.String("disable"),
//				AutoDiscoveryReceiver:  pulumi.String("disable"),
//				AutoDiscoverySender:    pulumi.String("disable"),
//				AutoNegotiate:          pulumi.String("enable"),
//				CertIdValidation:       pulumi.String("enable"),
//				ChildlessIke:           pulumi.String("disable"),
//				ClientAutoNegotiate:    pulumi.String("disable"),
//				ClientKeepAlive:        pulumi.String("disable"),
//				Comments:               pulumi.String("VPN: Dialup_IPsec (Created by VPN wizard)"),
//				DefaultGw:              pulumi.String("0.0.0.0"),
//				DefaultGwPriority:      pulumi.Int(0),
//				Dhgrp:                  pulumi.String("14 5"),
//				DigitalSignatureAuth:   pulumi.String("disable"),
//				Distance:               pulumi.Int(15),
//				DnsMode:                pulumi.String("auto"),
//				Dpd:                    pulumi.String("on-idle"),
//				DpdRetrycount:          pulumi.Int(3),
//				DpdRetryinterval:       pulumi.String("60"),
//				Eap:                    pulumi.String("disable"),
//				EapIdentity:            pulumi.String("use-id-payload"),
//				EncapLocalGw4:          pulumi.String("0.0.0.0"),
//				EncapLocalGw6:          pulumi.String("::"),
//				EncapRemoteGw4:         pulumi.String("0.0.0.0"),
//				EncapRemoteGw6:         pulumi.String("::"),
//				Encapsulation:          pulumi.String("none"),
//				EncapsulationAddress:   pulumi.String("ike"),
//				EnforceUniqueId:        pulumi.String("disable"),
//				ExchangeInterfaceIp:    pulumi.String("disable"),
//				ExchangeIpAddr4:        pulumi.String("0.0.0.0"),
//				ExchangeIpAddr6:        pulumi.String("::"),
//				ForticlientEnforcement: pulumi.String("disable"),
//				Fragmentation:          pulumi.String("enable"),
//				FragmentationMtu:       pulumi.Int(1200),
//				GroupAuthentication:    pulumi.String("disable"),
//				HaSyncEspSeqno:         pulumi.String("enable"),
//				IdleTimeout:            pulumi.String("disable"),
//				IdleTimeoutinterval:    pulumi.Int(15),
//				IkeVersion:             pulumi.String("1"),
//				IncludeLocalLan:        pulumi.String("disable"),
//				Interface:              pulumi.String("port4"),
//				IpVersion:              pulumi.String("4"),
//				Ipv4DnsServer1:         pulumi.String("0.0.0.0"),
//				Ipv4DnsServer2:         pulumi.String("0.0.0.0"),
//				Ipv4DnsServer3:         pulumi.String("0.0.0.0"),
//				Ipv4EndIp:              pulumi.String("10.10.10.10"),
//				Ipv4Netmask:            pulumi.String("255.255.255.192"),
//				Ipv4SplitInclude:       pulumi.String("FIREWALL_AUTH_PORTAL_ADDRESS"),
//				Ipv4StartIp:            pulumi.String("10.10.10.1"),
//				Ipv4WinsServer1:        pulumi.String("0.0.0.0"),
//				Ipv4WinsServer2:        pulumi.String("0.0.0.0"),
//				Ipv6DnsServer1:         pulumi.String("::"),
//				Ipv6DnsServer2:         pulumi.String("::"),
//				Ipv6DnsServer3:         pulumi.String("::"),
//				Ipv6EndIp:              pulumi.String("::"),
//				Ipv6Prefix:             pulumi.Int(128),
//				Ipv6StartIp:            pulumi.String("::"),
//				Keepalive:              pulumi.Int(10),
//				Keylife:                pulumi.Int(86400),
//				LocalGw:                pulumi.String("0.0.0.0"),
//				LocalGw6:               pulumi.String("::"),
//				LocalidType:            pulumi.String("auto"),
//				MeshSelectorType:       pulumi.String("disable"),
//				Mode:                   pulumi.String("aggressive"),
//				ModeCfg:                pulumi.String("enable"),
//				MonitorHoldDownDelay:   pulumi.Int(0),
//				MonitorHoldDownTime:    pulumi.String("00:00"),
//				MonitorHoldDownType:    pulumi.String("immediate"),
//				MonitorHoldDownWeekday: pulumi.String("sunday"),
//				Nattraversal:           pulumi.String("enable"),
//				NegotiateTimeout:       pulumi.Int(30),
//				NetDevice:              pulumi.String("enable"),
//				PassiveMode:            pulumi.String("disable"),
//				Peertype:               pulumi.String("any"),
//				Psksecret:              pulumi.String("NCIEW32930293203932"),
//				Ppk:                    pulumi.String("disable"),
//				Priority:               pulumi.Int(0),
//				Proposal:               pulumi.String("aes128-sha256 aes256-sha256 aes128-sha1 aes256-sha1"),
//				Reauth:                 pulumi.String("disable"),
//				Rekey:                  pulumi.String("enable"),
//				RemoteGw:               pulumi.String("0.0.0.0"),
//				RemoteGw6:              pulumi.String("::"),
//				RsaSignatureFormat:     pulumi.String("pkcs1"),
//				SavePassword:           pulumi.String("enable"),
//				SendCertChain:          pulumi.String("enable"),
//				SignatureHashAlg:       pulumi.String("sha2-512 sha2-384 sha2-256 sha1"),
//				SuiteB:                 pulumi.String("disable"),
//				TunnelSearch:           pulumi.String("selectors"),
//				Type:                   pulumi.String("dynamic"),
//				UnitySupport:           pulumi.String("enable"),
//				WizardType:             pulumi.String("dialup-forticlient"),
//				Xauthtype:              pulumi.String("auto"),
//			})
//			if err != nil {
//				return err
//			}
//			// fortios_vpnipsec_phase2interface.trname1:
//			trname3, err := vpn.NewPhase2interface(ctx, "trname3", &vpn.Phase2interfaceArgs{
//				AddRoute:               pulumi.String("phase1"),
//				AutoDiscoveryForwarder: pulumi.String("phase1"),
//				AutoDiscoverySender:    pulumi.String("phase1"),
//				AutoNegotiate:          pulumi.String("disable"),
//				DhcpIpsec:              pulumi.String("disable"),
//				Dhgrp:                  pulumi.String("14 5"),
//				DstAddrType:            pulumi.String("subnet"),
//				DstEndIp:               pulumi.String("0.0.0.0"),
//				DstEndIp6:              pulumi.String("::"),
//				DstPort:                pulumi.Int(0),
//				DstStartIp:             pulumi.String("0.0.0.0"),
//				DstStartIp6:            pulumi.String("::"),
//				DstSubnet:              pulumi.String("0.0.0.0 0.0.0.0"),
//				DstSubnet6:             pulumi.String("::/0"),
//				Encapsulation:          pulumi.String("tunnel-mode"),
//				Keepalive:              pulumi.String("disable"),
//				KeylifeType:            pulumi.String("seconds"),
//				Keylifekbs:             pulumi.Int(5120),
//				Keylifeseconds:         pulumi.Int(43200),
//				L2tp:                   pulumi.String("disable"),
//				Pfs:                    pulumi.String("enable"),
//				Phase1name:             trname4.Name,
//				Proposal:               pulumi.String("aes128-sha1 aes256-sha1 aes128-sha256 aes256-sha256 aes128gcm aes256gcm chacha20poly1305"),
//				Protocol:               pulumi.Int(0),
//				Replay:                 pulumi.String("enable"),
//				RouteOverlap:           pulumi.String("use-new"),
//				SingleSource:           pulumi.String("disable"),
//				SrcAddrType:            pulumi.String("subnet"),
//				SrcEndIp:               pulumi.String("0.0.0.0"),
//				SrcEndIp6:              pulumi.String("::"),
//				SrcPort:                pulumi.Int(0),
//				SrcStartIp:             pulumi.String("0.0.0.0"),
//				SrcStartIp6:            pulumi.String("::"),
//				SrcSubnet:              pulumi.String("0.0.0.0 0.0.0.0"),
//				SrcSubnet6:             pulumi.String("::/0"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpn.NewForticlient(ctx, "trname", &vpn.ForticlientArgs{
//				Phase2name:    trname3.Name,
//				Realm:         pulumi.String("1"),
//				Status:        pulumi.String("enable"),
//				Usergroupname: pulumi.String("Guest-group"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VpnIpsec Forticlient can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:vpn/ipsec/forticlient:Forticlient labelname {{realm}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:vpn/ipsec/forticlient:Forticlient labelname {{realm}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Forticlient struct {
	pulumi.CustomResourceState

	// Phase 2 tunnel name that you defined in the FortiClient dialup configuration.
	Phase2name pulumi.StringOutput `pulumi:"phase2name"`
	// FortiClient realm name.
	Realm pulumi.StringOutput `pulumi:"realm"`
	// Enable/disable this FortiClient configuration. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// User group name for FortiClient users.
	Usergroupname pulumi.StringOutput `pulumi:"usergroupname"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewForticlient registers a new resource with the given unique name, arguments, and options.
func NewForticlient(ctx *pulumi.Context,
	name string, args *ForticlientArgs, opts ...pulumi.ResourceOption) (*Forticlient, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Phase2name == nil {
		return nil, errors.New("invalid value for required argument 'Phase2name'")
	}
	if args.Usergroupname == nil {
		return nil, errors.New("invalid value for required argument 'Usergroupname'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Forticlient
	err := ctx.RegisterResource("fortios:vpn/ipsec/forticlient:Forticlient", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetForticlient gets an existing Forticlient resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetForticlient(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ForticlientState, opts ...pulumi.ResourceOption) (*Forticlient, error) {
	var resource Forticlient
	err := ctx.ReadResource("fortios:vpn/ipsec/forticlient:Forticlient", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Forticlient resources.
type forticlientState struct {
	// Phase 2 tunnel name that you defined in the FortiClient dialup configuration.
	Phase2name *string `pulumi:"phase2name"`
	// FortiClient realm name.
	Realm *string `pulumi:"realm"`
	// Enable/disable this FortiClient configuration. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// User group name for FortiClient users.
	Usergroupname *string `pulumi:"usergroupname"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type ForticlientState struct {
	// Phase 2 tunnel name that you defined in the FortiClient dialup configuration.
	Phase2name pulumi.StringPtrInput
	// FortiClient realm name.
	Realm pulumi.StringPtrInput
	// Enable/disable this FortiClient configuration. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// User group name for FortiClient users.
	Usergroupname pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ForticlientState) ElementType() reflect.Type {
	return reflect.TypeOf((*forticlientState)(nil)).Elem()
}

type forticlientArgs struct {
	// Phase 2 tunnel name that you defined in the FortiClient dialup configuration.
	Phase2name string `pulumi:"phase2name"`
	// FortiClient realm name.
	Realm *string `pulumi:"realm"`
	// Enable/disable this FortiClient configuration. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// User group name for FortiClient users.
	Usergroupname string `pulumi:"usergroupname"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Forticlient resource.
type ForticlientArgs struct {
	// Phase 2 tunnel name that you defined in the FortiClient dialup configuration.
	Phase2name pulumi.StringInput
	// FortiClient realm name.
	Realm pulumi.StringPtrInput
	// Enable/disable this FortiClient configuration. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// User group name for FortiClient users.
	Usergroupname pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ForticlientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*forticlientArgs)(nil)).Elem()
}

type ForticlientInput interface {
	pulumi.Input

	ToForticlientOutput() ForticlientOutput
	ToForticlientOutputWithContext(ctx context.Context) ForticlientOutput
}

func (*Forticlient) ElementType() reflect.Type {
	return reflect.TypeOf((**Forticlient)(nil)).Elem()
}

func (i *Forticlient) ToForticlientOutput() ForticlientOutput {
	return i.ToForticlientOutputWithContext(context.Background())
}

func (i *Forticlient) ToForticlientOutputWithContext(ctx context.Context) ForticlientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForticlientOutput)
}

// ForticlientArrayInput is an input type that accepts ForticlientArray and ForticlientArrayOutput values.
// You can construct a concrete instance of `ForticlientArrayInput` via:
//
//	ForticlientArray{ ForticlientArgs{...} }
type ForticlientArrayInput interface {
	pulumi.Input

	ToForticlientArrayOutput() ForticlientArrayOutput
	ToForticlientArrayOutputWithContext(context.Context) ForticlientArrayOutput
}

type ForticlientArray []ForticlientInput

func (ForticlientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Forticlient)(nil)).Elem()
}

func (i ForticlientArray) ToForticlientArrayOutput() ForticlientArrayOutput {
	return i.ToForticlientArrayOutputWithContext(context.Background())
}

func (i ForticlientArray) ToForticlientArrayOutputWithContext(ctx context.Context) ForticlientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForticlientArrayOutput)
}

// ForticlientMapInput is an input type that accepts ForticlientMap and ForticlientMapOutput values.
// You can construct a concrete instance of `ForticlientMapInput` via:
//
//	ForticlientMap{ "key": ForticlientArgs{...} }
type ForticlientMapInput interface {
	pulumi.Input

	ToForticlientMapOutput() ForticlientMapOutput
	ToForticlientMapOutputWithContext(context.Context) ForticlientMapOutput
}

type ForticlientMap map[string]ForticlientInput

func (ForticlientMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Forticlient)(nil)).Elem()
}

func (i ForticlientMap) ToForticlientMapOutput() ForticlientMapOutput {
	return i.ToForticlientMapOutputWithContext(context.Background())
}

func (i ForticlientMap) ToForticlientMapOutputWithContext(ctx context.Context) ForticlientMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForticlientMapOutput)
}

type ForticlientOutput struct{ *pulumi.OutputState }

func (ForticlientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Forticlient)(nil)).Elem()
}

func (o ForticlientOutput) ToForticlientOutput() ForticlientOutput {
	return o
}

func (o ForticlientOutput) ToForticlientOutputWithContext(ctx context.Context) ForticlientOutput {
	return o
}

// Phase 2 tunnel name that you defined in the FortiClient dialup configuration.
func (o ForticlientOutput) Phase2name() pulumi.StringOutput {
	return o.ApplyT(func(v *Forticlient) pulumi.StringOutput { return v.Phase2name }).(pulumi.StringOutput)
}

// FortiClient realm name.
func (o ForticlientOutput) Realm() pulumi.StringOutput {
	return o.ApplyT(func(v *Forticlient) pulumi.StringOutput { return v.Realm }).(pulumi.StringOutput)
}

// Enable/disable this FortiClient configuration. Valid values: `enable`, `disable`.
func (o ForticlientOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Forticlient) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// User group name for FortiClient users.
func (o ForticlientOutput) Usergroupname() pulumi.StringOutput {
	return o.ApplyT(func(v *Forticlient) pulumi.StringOutput { return v.Usergroupname }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ForticlientOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Forticlient) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type ForticlientArrayOutput struct{ *pulumi.OutputState }

func (ForticlientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Forticlient)(nil)).Elem()
}

func (o ForticlientArrayOutput) ToForticlientArrayOutput() ForticlientArrayOutput {
	return o
}

func (o ForticlientArrayOutput) ToForticlientArrayOutputWithContext(ctx context.Context) ForticlientArrayOutput {
	return o
}

func (o ForticlientArrayOutput) Index(i pulumi.IntInput) ForticlientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Forticlient {
		return vs[0].([]*Forticlient)[vs[1].(int)]
	}).(ForticlientOutput)
}

type ForticlientMapOutput struct{ *pulumi.OutputState }

func (ForticlientMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Forticlient)(nil)).Elem()
}

func (o ForticlientMapOutput) ToForticlientMapOutput() ForticlientMapOutput {
	return o
}

func (o ForticlientMapOutput) ToForticlientMapOutputWithContext(ctx context.Context) ForticlientMapOutput {
	return o
}

func (o ForticlientMapOutput) MapIndex(k pulumi.StringInput) ForticlientOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Forticlient {
		return vs[0].(map[string]*Forticlient)[vs[1].(string)]
	}).(ForticlientOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ForticlientInput)(nil)).Elem(), &Forticlient{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForticlientArrayInput)(nil)).Elem(), ForticlientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForticlientMapInput)(nil)).Elem(), ForticlientMap{})
	pulumi.RegisterOutputType(ForticlientOutput{})
	pulumi.RegisterOutputType(ForticlientArrayOutput{})
	pulumi.RegisterOutputType(ForticlientMapOutput{})
}
