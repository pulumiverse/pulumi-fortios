// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipsec

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure VPN autokey tunnel.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			trnamex2, err := vpn.NewPhase1(ctx, "trnamex2", &vpn.Phase1Args{
//				AcctVerify:             pulumi.String("disable"),
//				AddGwRoute:             pulumi.String("disable"),
//				AddRoute:               pulumi.String("disable"),
//				AssignIp:               pulumi.String("enable"),
//				AssignIpFrom:           pulumi.String("range"),
//				Authmethod:             pulumi.String("psk"),
//				AutoNegotiate:          pulumi.String("enable"),
//				CertIdValidation:       pulumi.String("enable"),
//				ChildlessIke:           pulumi.String("disable"),
//				ClientAutoNegotiate:    pulumi.String("disable"),
//				ClientKeepAlive:        pulumi.String("disable"),
//				Dhgrp:                  pulumi.String("14 5"),
//				DigitalSignatureAuth:   pulumi.String("disable"),
//				Distance:               pulumi.Int(15),
//				DnsMode:                pulumi.String("manual"),
//				Dpd:                    pulumi.String("on-demand"),
//				DpdRetrycount:          pulumi.Int(3),
//				DpdRetryinterval:       pulumi.String("20"),
//				Eap:                    pulumi.String("disable"),
//				EapIdentity:            pulumi.String("use-id-payload"),
//				EnforceUniqueId:        pulumi.String("disable"),
//				ForticlientEnforcement: pulumi.String("disable"),
//				Fragmentation:          pulumi.String("enable"),
//				FragmentationMtu:       pulumi.Int(1200),
//				GroupAuthentication:    pulumi.String("disable"),
//				HaSyncEspSeqno:         pulumi.String("enable"),
//				IdleTimeout:            pulumi.String("disable"),
//				IdleTimeoutinterval:    pulumi.Int(15),
//				IkeVersion:             pulumi.String("1"),
//				IncludeLocalLan:        pulumi.String("disable"),
//				Interface:              pulumi.String("port4"),
//				Ipv4DnsServer1:         pulumi.String("0.0.0.0"),
//				Ipv4DnsServer2:         pulumi.String("0.0.0.0"),
//				Ipv4DnsServer3:         pulumi.String("0.0.0.0"),
//				Ipv4EndIp:              pulumi.String("0.0.0.0"),
//				Ipv4Netmask:            pulumi.String("255.255.255.255"),
//				Ipv4StartIp:            pulumi.String("0.0.0.0"),
//				Ipv4WinsServer1:        pulumi.String("0.0.0.0"),
//				Ipv4WinsServer2:        pulumi.String("0.0.0.0"),
//				Ipv6DnsServer1:         pulumi.String("::"),
//				Ipv6DnsServer2:         pulumi.String("::"),
//				Ipv6DnsServer3:         pulumi.String("::"),
//				Ipv6EndIp:              pulumi.String("::"),
//				Ipv6Prefix:             pulumi.Int(128),
//				Ipv6StartIp:            pulumi.String("::"),
//				Keepalive:              pulumi.Int(10),
//				Keylife:                pulumi.Int(86400),
//				LocalGw:                pulumi.String("0.0.0.0"),
//				LocalidType:            pulumi.String("auto"),
//				MeshSelectorType:       pulumi.String("disable"),
//				Mode:                   pulumi.String("main"),
//				ModeCfg:                pulumi.String("disable"),
//				Nattraversal:           pulumi.String("enable"),
//				NegotiateTimeout:       pulumi.Int(30),
//				Peertype:               pulumi.String("any"),
//				Ppk:                    pulumi.String("disable"),
//				Priority:               pulumi.Int(0),
//				Proposal:               pulumi.String("aes128-sha256 aes256-sha256 aes128-sha1 aes256-sha1"),
//				Psksecret:              pulumi.String("dewcEde2112"),
//				Reauth:                 pulumi.String("disable"),
//				Rekey:                  pulumi.String("enable"),
//				RemoteGw:               pulumi.String("2.1.1.1"),
//				RsaSignatureFormat:     pulumi.String("pkcs1"),
//				SavePassword:           pulumi.String("disable"),
//				SendCertChain:          pulumi.String("enable"),
//				SignatureHashAlg:       pulumi.String("sha2-512 sha2-384 sha2-256 sha1"),
//				SuiteB:                 pulumi.String("disable"),
//				Type:                   pulumi.String("static"),
//				UnitySupport:           pulumi.String("enable"),
//				WizardType:             pulumi.String("custom"),
//				Xauthtype:              pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpn.NewPhase2(ctx, "trname", &vpn.Phase2Args{
//				AddRoute:       pulumi.String("phase1"),
//				AutoNegotiate:  pulumi.String("disable"),
//				DhcpIpsec:      pulumi.String("disable"),
//				Dhgrp:          pulumi.String("14 5"),
//				DstAddrType:    pulumi.String("subnet"),
//				DstEndIp:       pulumi.String("0.0.0.0"),
//				DstEndIp6:      pulumi.String("::"),
//				DstPort:        pulumi.Int(0),
//				DstStartIp:     pulumi.String("0.0.0.0"),
//				DstStartIp6:    pulumi.String("::"),
//				DstSubnet:      pulumi.String("0.0.0.0 0.0.0.0"),
//				DstSubnet6:     pulumi.String("::/0"),
//				Encapsulation:  pulumi.String("tunnel-mode"),
//				Keepalive:      pulumi.String("disable"),
//				KeylifeType:    pulumi.String("seconds"),
//				Keylifekbs:     pulumi.Int(5120),
//				Keylifeseconds: pulumi.Int(43200),
//				L2tp:           pulumi.String("disable"),
//				Pfs:            pulumi.String("enable"),
//				Phase1name:     trnamex2.Name,
//				Proposal:       pulumi.String("null-md5 null-sha1 null-sha256"),
//				Protocol:       pulumi.Int(0),
//				Replay:         pulumi.String("enable"),
//				RouteOverlap:   pulumi.String("use-new"),
//				SelectorMatch:  pulumi.String("auto"),
//				SingleSource:   pulumi.String("disable"),
//				SrcAddrType:    pulumi.String("subnet"),
//				SrcEndIp:       pulumi.String("0.0.0.0"),
//				SrcEndIp6:      pulumi.String("::"),
//				SrcPort:        pulumi.Int(0),
//				SrcStartIp:     pulumi.String("0.0.0.0"),
//				SrcStartIp6:    pulumi.String("::"),
//				SrcSubnet:      pulumi.String("0.0.0.0 0.0.0.0"),
//				SrcSubnet6:     pulumi.String("::/0"),
//				UseNatip:       pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VpnIpsec Phase2 can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:vpn/ipsec/phase2:Phase2 labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:vpn/ipsec/phase2:Phase2 labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Phase2 struct {
	pulumi.CustomResourceState

	// Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
	AddRoute pulumi.StringOutput `pulumi:"addRoute"`
	// Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
	AutoNegotiate pulumi.StringOutput `pulumi:"autoNegotiate"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
	DhcpIpsec pulumi.StringOutput `pulumi:"dhcpIpsec"`
	// Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
	Dhgrp pulumi.StringOutput `pulumi:"dhgrp"`
	// Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
	Diffserv pulumi.StringOutput `pulumi:"diffserv"`
	// DSCP value to be applied to the IPsec tunnel outer IP header.
	Diffservcode pulumi.StringOutput `pulumi:"diffservcode"`
	// Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
	DstAddrType pulumi.StringOutput `pulumi:"dstAddrType"`
	// Remote proxy ID IPv4 end.
	DstEndIp pulumi.StringOutput `pulumi:"dstEndIp"`
	// Remote proxy ID IPv6 end.
	DstEndIp6 pulumi.StringOutput `pulumi:"dstEndIp6"`
	// Remote proxy ID name.
	DstName pulumi.StringOutput `pulumi:"dstName"`
	// Remote proxy ID name.
	DstName6 pulumi.StringOutput `pulumi:"dstName6"`
	// Quick mode destination port (1 - 65535 or 0 for all).
	DstPort pulumi.IntOutput `pulumi:"dstPort"`
	// Remote proxy ID IPv4 start.
	DstStartIp pulumi.StringOutput `pulumi:"dstStartIp"`
	// Remote proxy ID IPv6 start.
	DstStartIp6 pulumi.StringOutput `pulumi:"dstStartIp6"`
	// Remote proxy ID IPv4 subnet.
	DstSubnet pulumi.StringOutput `pulumi:"dstSubnet"`
	// Remote proxy ID IPv6 subnet.
	DstSubnet6 pulumi.StringOutput `pulumi:"dstSubnet6"`
	// ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
	Encapsulation pulumi.StringOutput `pulumi:"encapsulation"`
	// Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
	InboundDscpCopy pulumi.StringOutput `pulumi:"inboundDscpCopy"`
	// Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
	InitiatorTsNarrow pulumi.StringOutput `pulumi:"initiatorTsNarrow"`
	// Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
	Ipv4Df pulumi.StringOutput `pulumi:"ipv4Df"`
	// Enable/disable keep alive. Valid values: `enable`, `disable`.
	Keepalive pulumi.StringOutput `pulumi:"keepalive"`
	// Keylife type. Valid values: `seconds`, `kbs`, `both`.
	KeylifeType pulumi.StringOutput `pulumi:"keylifeType"`
	// Phase2 key life in number of kilobytes of traffic (5120 - 4294967295).
	Keylifekbs pulumi.IntOutput `pulumi:"keylifekbs"`
	// Phase2 key life in time in seconds (120 - 172800).
	Keylifeseconds pulumi.IntOutput `pulumi:"keylifeseconds"`
	// Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
	L2tp pulumi.StringOutput `pulumi:"l2tp"`
	// IPsec tunnel name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable PFS feature. Valid values: `enable`, `disable`.
	Pfs pulumi.StringOutput `pulumi:"pfs"`
	// Phase 1 determines the options required for phase 2.
	Phase1name pulumi.StringOutput `pulumi:"phase1name"`
	// Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
	Proposal pulumi.StringOutput `pulumi:"proposal"`
	// Quick mode protocol selector (1 - 255 or 0 for all).
	Protocol pulumi.IntOutput `pulumi:"protocol"`
	// Enable/disable replay detection. Valid values: `enable`, `disable`.
	Replay pulumi.StringOutput `pulumi:"replay"`
	// Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
	RouteOverlap pulumi.StringOutput `pulumi:"routeOverlap"`
	// Match type to use when comparing selectors. Valid values: `exact`, `subset`, `auto`.
	SelectorMatch pulumi.StringOutput `pulumi:"selectorMatch"`
	// Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
	SingleSource pulumi.StringOutput `pulumi:"singleSource"`
	// Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
	SrcAddrType pulumi.StringOutput `pulumi:"srcAddrType"`
	// Local proxy ID end.
	SrcEndIp pulumi.StringOutput `pulumi:"srcEndIp"`
	// Local proxy ID IPv6 end.
	SrcEndIp6 pulumi.StringOutput `pulumi:"srcEndIp6"`
	// Local proxy ID name.
	SrcName pulumi.StringOutput `pulumi:"srcName"`
	// Local proxy ID name.
	SrcName6 pulumi.StringOutput `pulumi:"srcName6"`
	// Quick mode source port (1 - 65535 or 0 for all).
	SrcPort pulumi.IntOutput `pulumi:"srcPort"`
	// Local proxy ID start.
	SrcStartIp pulumi.StringOutput `pulumi:"srcStartIp"`
	// Local proxy ID IPv6 start.
	SrcStartIp6 pulumi.StringOutput `pulumi:"srcStartIp6"`
	// Local proxy ID subnet.
	SrcSubnet pulumi.StringOutput `pulumi:"srcSubnet"`
	// Local proxy ID IPv6 subnet.
	SrcSubnet6 pulumi.StringOutput `pulumi:"srcSubnet6"`
	// Enable to use the FortiGate public IP as the source selector when outbound NAT is used. Valid values: `enable`, `disable`.
	UseNatip pulumi.StringOutput `pulumi:"useNatip"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewPhase2 registers a new resource with the given unique name, arguments, and options.
func NewPhase2(ctx *pulumi.Context,
	name string, args *Phase2Args, opts ...pulumi.ResourceOption) (*Phase2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Phase1name == nil {
		return nil, errors.New("invalid value for required argument 'Phase1name'")
	}
	if args.Proposal == nil {
		return nil, errors.New("invalid value for required argument 'Proposal'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Phase2
	err := ctx.RegisterResource("fortios:vpn/ipsec/phase2:Phase2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPhase2 gets an existing Phase2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPhase2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Phase2State, opts ...pulumi.ResourceOption) (*Phase2, error) {
	var resource Phase2
	err := ctx.ReadResource("fortios:vpn/ipsec/phase2:Phase2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Phase2 resources.
type phase2State struct {
	// Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
	AddRoute *string `pulumi:"addRoute"`
	// Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
	AutoNegotiate *string `pulumi:"autoNegotiate"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
	DhcpIpsec *string `pulumi:"dhcpIpsec"`
	// Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
	Dhgrp *string `pulumi:"dhgrp"`
	// Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
	Diffserv *string `pulumi:"diffserv"`
	// DSCP value to be applied to the IPsec tunnel outer IP header.
	Diffservcode *string `pulumi:"diffservcode"`
	// Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
	DstAddrType *string `pulumi:"dstAddrType"`
	// Remote proxy ID IPv4 end.
	DstEndIp *string `pulumi:"dstEndIp"`
	// Remote proxy ID IPv6 end.
	DstEndIp6 *string `pulumi:"dstEndIp6"`
	// Remote proxy ID name.
	DstName *string `pulumi:"dstName"`
	// Remote proxy ID name.
	DstName6 *string `pulumi:"dstName6"`
	// Quick mode destination port (1 - 65535 or 0 for all).
	DstPort *int `pulumi:"dstPort"`
	// Remote proxy ID IPv4 start.
	DstStartIp *string `pulumi:"dstStartIp"`
	// Remote proxy ID IPv6 start.
	DstStartIp6 *string `pulumi:"dstStartIp6"`
	// Remote proxy ID IPv4 subnet.
	DstSubnet *string `pulumi:"dstSubnet"`
	// Remote proxy ID IPv6 subnet.
	DstSubnet6 *string `pulumi:"dstSubnet6"`
	// ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
	Encapsulation *string `pulumi:"encapsulation"`
	// Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
	InboundDscpCopy *string `pulumi:"inboundDscpCopy"`
	// Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
	InitiatorTsNarrow *string `pulumi:"initiatorTsNarrow"`
	// Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
	Ipv4Df *string `pulumi:"ipv4Df"`
	// Enable/disable keep alive. Valid values: `enable`, `disable`.
	Keepalive *string `pulumi:"keepalive"`
	// Keylife type. Valid values: `seconds`, `kbs`, `both`.
	KeylifeType *string `pulumi:"keylifeType"`
	// Phase2 key life in number of kilobytes of traffic (5120 - 4294967295).
	Keylifekbs *int `pulumi:"keylifekbs"`
	// Phase2 key life in time in seconds (120 - 172800).
	Keylifeseconds *int `pulumi:"keylifeseconds"`
	// Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
	L2tp *string `pulumi:"l2tp"`
	// IPsec tunnel name.
	Name *string `pulumi:"name"`
	// Enable/disable PFS feature. Valid values: `enable`, `disable`.
	Pfs *string `pulumi:"pfs"`
	// Phase 1 determines the options required for phase 2.
	Phase1name *string `pulumi:"phase1name"`
	// Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
	Proposal *string `pulumi:"proposal"`
	// Quick mode protocol selector (1 - 255 or 0 for all).
	Protocol *int `pulumi:"protocol"`
	// Enable/disable replay detection. Valid values: `enable`, `disable`.
	Replay *string `pulumi:"replay"`
	// Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
	RouteOverlap *string `pulumi:"routeOverlap"`
	// Match type to use when comparing selectors. Valid values: `exact`, `subset`, `auto`.
	SelectorMatch *string `pulumi:"selectorMatch"`
	// Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
	SingleSource *string `pulumi:"singleSource"`
	// Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
	SrcAddrType *string `pulumi:"srcAddrType"`
	// Local proxy ID end.
	SrcEndIp *string `pulumi:"srcEndIp"`
	// Local proxy ID IPv6 end.
	SrcEndIp6 *string `pulumi:"srcEndIp6"`
	// Local proxy ID name.
	SrcName *string `pulumi:"srcName"`
	// Local proxy ID name.
	SrcName6 *string `pulumi:"srcName6"`
	// Quick mode source port (1 - 65535 or 0 for all).
	SrcPort *int `pulumi:"srcPort"`
	// Local proxy ID start.
	SrcStartIp *string `pulumi:"srcStartIp"`
	// Local proxy ID IPv6 start.
	SrcStartIp6 *string `pulumi:"srcStartIp6"`
	// Local proxy ID subnet.
	SrcSubnet *string `pulumi:"srcSubnet"`
	// Local proxy ID IPv6 subnet.
	SrcSubnet6 *string `pulumi:"srcSubnet6"`
	// Enable to use the FortiGate public IP as the source selector when outbound NAT is used. Valid values: `enable`, `disable`.
	UseNatip *string `pulumi:"useNatip"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type Phase2State struct {
	// Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
	AddRoute pulumi.StringPtrInput
	// Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
	AutoNegotiate pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
	DhcpIpsec pulumi.StringPtrInput
	// Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
	Dhgrp pulumi.StringPtrInput
	// Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
	Diffserv pulumi.StringPtrInput
	// DSCP value to be applied to the IPsec tunnel outer IP header.
	Diffservcode pulumi.StringPtrInput
	// Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
	DstAddrType pulumi.StringPtrInput
	// Remote proxy ID IPv4 end.
	DstEndIp pulumi.StringPtrInput
	// Remote proxy ID IPv6 end.
	DstEndIp6 pulumi.StringPtrInput
	// Remote proxy ID name.
	DstName pulumi.StringPtrInput
	// Remote proxy ID name.
	DstName6 pulumi.StringPtrInput
	// Quick mode destination port (1 - 65535 or 0 for all).
	DstPort pulumi.IntPtrInput
	// Remote proxy ID IPv4 start.
	DstStartIp pulumi.StringPtrInput
	// Remote proxy ID IPv6 start.
	DstStartIp6 pulumi.StringPtrInput
	// Remote proxy ID IPv4 subnet.
	DstSubnet pulumi.StringPtrInput
	// Remote proxy ID IPv6 subnet.
	DstSubnet6 pulumi.StringPtrInput
	// ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
	Encapsulation pulumi.StringPtrInput
	// Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
	InboundDscpCopy pulumi.StringPtrInput
	// Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
	InitiatorTsNarrow pulumi.StringPtrInput
	// Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
	Ipv4Df pulumi.StringPtrInput
	// Enable/disable keep alive. Valid values: `enable`, `disable`.
	Keepalive pulumi.StringPtrInput
	// Keylife type. Valid values: `seconds`, `kbs`, `both`.
	KeylifeType pulumi.StringPtrInput
	// Phase2 key life in number of kilobytes of traffic (5120 - 4294967295).
	Keylifekbs pulumi.IntPtrInput
	// Phase2 key life in time in seconds (120 - 172800).
	Keylifeseconds pulumi.IntPtrInput
	// Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
	L2tp pulumi.StringPtrInput
	// IPsec tunnel name.
	Name pulumi.StringPtrInput
	// Enable/disable PFS feature. Valid values: `enable`, `disable`.
	Pfs pulumi.StringPtrInput
	// Phase 1 determines the options required for phase 2.
	Phase1name pulumi.StringPtrInput
	// Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
	Proposal pulumi.StringPtrInput
	// Quick mode protocol selector (1 - 255 or 0 for all).
	Protocol pulumi.IntPtrInput
	// Enable/disable replay detection. Valid values: `enable`, `disable`.
	Replay pulumi.StringPtrInput
	// Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
	RouteOverlap pulumi.StringPtrInput
	// Match type to use when comparing selectors. Valid values: `exact`, `subset`, `auto`.
	SelectorMatch pulumi.StringPtrInput
	// Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
	SingleSource pulumi.StringPtrInput
	// Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
	SrcAddrType pulumi.StringPtrInput
	// Local proxy ID end.
	SrcEndIp pulumi.StringPtrInput
	// Local proxy ID IPv6 end.
	SrcEndIp6 pulumi.StringPtrInput
	// Local proxy ID name.
	SrcName pulumi.StringPtrInput
	// Local proxy ID name.
	SrcName6 pulumi.StringPtrInput
	// Quick mode source port (1 - 65535 or 0 for all).
	SrcPort pulumi.IntPtrInput
	// Local proxy ID start.
	SrcStartIp pulumi.StringPtrInput
	// Local proxy ID IPv6 start.
	SrcStartIp6 pulumi.StringPtrInput
	// Local proxy ID subnet.
	SrcSubnet pulumi.StringPtrInput
	// Local proxy ID IPv6 subnet.
	SrcSubnet6 pulumi.StringPtrInput
	// Enable to use the FortiGate public IP as the source selector when outbound NAT is used. Valid values: `enable`, `disable`.
	UseNatip pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Phase2State) ElementType() reflect.Type {
	return reflect.TypeOf((*phase2State)(nil)).Elem()
}

type phase2Args struct {
	// Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
	AddRoute *string `pulumi:"addRoute"`
	// Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
	AutoNegotiate *string `pulumi:"autoNegotiate"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
	DhcpIpsec *string `pulumi:"dhcpIpsec"`
	// Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
	Dhgrp *string `pulumi:"dhgrp"`
	// Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
	Diffserv *string `pulumi:"diffserv"`
	// DSCP value to be applied to the IPsec tunnel outer IP header.
	Diffservcode *string `pulumi:"diffservcode"`
	// Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
	DstAddrType *string `pulumi:"dstAddrType"`
	// Remote proxy ID IPv4 end.
	DstEndIp *string `pulumi:"dstEndIp"`
	// Remote proxy ID IPv6 end.
	DstEndIp6 *string `pulumi:"dstEndIp6"`
	// Remote proxy ID name.
	DstName *string `pulumi:"dstName"`
	// Remote proxy ID name.
	DstName6 *string `pulumi:"dstName6"`
	// Quick mode destination port (1 - 65535 or 0 for all).
	DstPort *int `pulumi:"dstPort"`
	// Remote proxy ID IPv4 start.
	DstStartIp *string `pulumi:"dstStartIp"`
	// Remote proxy ID IPv6 start.
	DstStartIp6 *string `pulumi:"dstStartIp6"`
	// Remote proxy ID IPv4 subnet.
	DstSubnet *string `pulumi:"dstSubnet"`
	// Remote proxy ID IPv6 subnet.
	DstSubnet6 *string `pulumi:"dstSubnet6"`
	// ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
	Encapsulation *string `pulumi:"encapsulation"`
	// Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
	InboundDscpCopy *string `pulumi:"inboundDscpCopy"`
	// Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
	InitiatorTsNarrow *string `pulumi:"initiatorTsNarrow"`
	// Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
	Ipv4Df *string `pulumi:"ipv4Df"`
	// Enable/disable keep alive. Valid values: `enable`, `disable`.
	Keepalive *string `pulumi:"keepalive"`
	// Keylife type. Valid values: `seconds`, `kbs`, `both`.
	KeylifeType *string `pulumi:"keylifeType"`
	// Phase2 key life in number of kilobytes of traffic (5120 - 4294967295).
	Keylifekbs *int `pulumi:"keylifekbs"`
	// Phase2 key life in time in seconds (120 - 172800).
	Keylifeseconds *int `pulumi:"keylifeseconds"`
	// Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
	L2tp *string `pulumi:"l2tp"`
	// IPsec tunnel name.
	Name *string `pulumi:"name"`
	// Enable/disable PFS feature. Valid values: `enable`, `disable`.
	Pfs *string `pulumi:"pfs"`
	// Phase 1 determines the options required for phase 2.
	Phase1name string `pulumi:"phase1name"`
	// Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
	Proposal string `pulumi:"proposal"`
	// Quick mode protocol selector (1 - 255 or 0 for all).
	Protocol *int `pulumi:"protocol"`
	// Enable/disable replay detection. Valid values: `enable`, `disable`.
	Replay *string `pulumi:"replay"`
	// Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
	RouteOverlap *string `pulumi:"routeOverlap"`
	// Match type to use when comparing selectors. Valid values: `exact`, `subset`, `auto`.
	SelectorMatch *string `pulumi:"selectorMatch"`
	// Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
	SingleSource *string `pulumi:"singleSource"`
	// Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
	SrcAddrType *string `pulumi:"srcAddrType"`
	// Local proxy ID end.
	SrcEndIp *string `pulumi:"srcEndIp"`
	// Local proxy ID IPv6 end.
	SrcEndIp6 *string `pulumi:"srcEndIp6"`
	// Local proxy ID name.
	SrcName *string `pulumi:"srcName"`
	// Local proxy ID name.
	SrcName6 *string `pulumi:"srcName6"`
	// Quick mode source port (1 - 65535 or 0 for all).
	SrcPort *int `pulumi:"srcPort"`
	// Local proxy ID start.
	SrcStartIp *string `pulumi:"srcStartIp"`
	// Local proxy ID IPv6 start.
	SrcStartIp6 *string `pulumi:"srcStartIp6"`
	// Local proxy ID subnet.
	SrcSubnet *string `pulumi:"srcSubnet"`
	// Local proxy ID IPv6 subnet.
	SrcSubnet6 *string `pulumi:"srcSubnet6"`
	// Enable to use the FortiGate public IP as the source selector when outbound NAT is used. Valid values: `enable`, `disable`.
	UseNatip *string `pulumi:"useNatip"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Phase2 resource.
type Phase2Args struct {
	// Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
	AddRoute pulumi.StringPtrInput
	// Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
	AutoNegotiate pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
	DhcpIpsec pulumi.StringPtrInput
	// Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
	Dhgrp pulumi.StringPtrInput
	// Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
	Diffserv pulumi.StringPtrInput
	// DSCP value to be applied to the IPsec tunnel outer IP header.
	Diffservcode pulumi.StringPtrInput
	// Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
	DstAddrType pulumi.StringPtrInput
	// Remote proxy ID IPv4 end.
	DstEndIp pulumi.StringPtrInput
	// Remote proxy ID IPv6 end.
	DstEndIp6 pulumi.StringPtrInput
	// Remote proxy ID name.
	DstName pulumi.StringPtrInput
	// Remote proxy ID name.
	DstName6 pulumi.StringPtrInput
	// Quick mode destination port (1 - 65535 or 0 for all).
	DstPort pulumi.IntPtrInput
	// Remote proxy ID IPv4 start.
	DstStartIp pulumi.StringPtrInput
	// Remote proxy ID IPv6 start.
	DstStartIp6 pulumi.StringPtrInput
	// Remote proxy ID IPv4 subnet.
	DstSubnet pulumi.StringPtrInput
	// Remote proxy ID IPv6 subnet.
	DstSubnet6 pulumi.StringPtrInput
	// ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
	Encapsulation pulumi.StringPtrInput
	// Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
	InboundDscpCopy pulumi.StringPtrInput
	// Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
	InitiatorTsNarrow pulumi.StringPtrInput
	// Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
	Ipv4Df pulumi.StringPtrInput
	// Enable/disable keep alive. Valid values: `enable`, `disable`.
	Keepalive pulumi.StringPtrInput
	// Keylife type. Valid values: `seconds`, `kbs`, `both`.
	KeylifeType pulumi.StringPtrInput
	// Phase2 key life in number of kilobytes of traffic (5120 - 4294967295).
	Keylifekbs pulumi.IntPtrInput
	// Phase2 key life in time in seconds (120 - 172800).
	Keylifeseconds pulumi.IntPtrInput
	// Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
	L2tp pulumi.StringPtrInput
	// IPsec tunnel name.
	Name pulumi.StringPtrInput
	// Enable/disable PFS feature. Valid values: `enable`, `disable`.
	Pfs pulumi.StringPtrInput
	// Phase 1 determines the options required for phase 2.
	Phase1name pulumi.StringInput
	// Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
	Proposal pulumi.StringInput
	// Quick mode protocol selector (1 - 255 or 0 for all).
	Protocol pulumi.IntPtrInput
	// Enable/disable replay detection. Valid values: `enable`, `disable`.
	Replay pulumi.StringPtrInput
	// Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
	RouteOverlap pulumi.StringPtrInput
	// Match type to use when comparing selectors. Valid values: `exact`, `subset`, `auto`.
	SelectorMatch pulumi.StringPtrInput
	// Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
	SingleSource pulumi.StringPtrInput
	// Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
	SrcAddrType pulumi.StringPtrInput
	// Local proxy ID end.
	SrcEndIp pulumi.StringPtrInput
	// Local proxy ID IPv6 end.
	SrcEndIp6 pulumi.StringPtrInput
	// Local proxy ID name.
	SrcName pulumi.StringPtrInput
	// Local proxy ID name.
	SrcName6 pulumi.StringPtrInput
	// Quick mode source port (1 - 65535 or 0 for all).
	SrcPort pulumi.IntPtrInput
	// Local proxy ID start.
	SrcStartIp pulumi.StringPtrInput
	// Local proxy ID IPv6 start.
	SrcStartIp6 pulumi.StringPtrInput
	// Local proxy ID subnet.
	SrcSubnet pulumi.StringPtrInput
	// Local proxy ID IPv6 subnet.
	SrcSubnet6 pulumi.StringPtrInput
	// Enable to use the FortiGate public IP as the source selector when outbound NAT is used. Valid values: `enable`, `disable`.
	UseNatip pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Phase2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*phase2Args)(nil)).Elem()
}

type Phase2Input interface {
	pulumi.Input

	ToPhase2Output() Phase2Output
	ToPhase2OutputWithContext(ctx context.Context) Phase2Output
}

func (*Phase2) ElementType() reflect.Type {
	return reflect.TypeOf((**Phase2)(nil)).Elem()
}

func (i *Phase2) ToPhase2Output() Phase2Output {
	return i.ToPhase2OutputWithContext(context.Background())
}

func (i *Phase2) ToPhase2OutputWithContext(ctx context.Context) Phase2Output {
	return pulumi.ToOutputWithContext(ctx, i).(Phase2Output)
}

// Phase2ArrayInput is an input type that accepts Phase2Array and Phase2ArrayOutput values.
// You can construct a concrete instance of `Phase2ArrayInput` via:
//
//	Phase2Array{ Phase2Args{...} }
type Phase2ArrayInput interface {
	pulumi.Input

	ToPhase2ArrayOutput() Phase2ArrayOutput
	ToPhase2ArrayOutputWithContext(context.Context) Phase2ArrayOutput
}

type Phase2Array []Phase2Input

func (Phase2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Phase2)(nil)).Elem()
}

func (i Phase2Array) ToPhase2ArrayOutput() Phase2ArrayOutput {
	return i.ToPhase2ArrayOutputWithContext(context.Background())
}

func (i Phase2Array) ToPhase2ArrayOutputWithContext(ctx context.Context) Phase2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Phase2ArrayOutput)
}

// Phase2MapInput is an input type that accepts Phase2Map and Phase2MapOutput values.
// You can construct a concrete instance of `Phase2MapInput` via:
//
//	Phase2Map{ "key": Phase2Args{...} }
type Phase2MapInput interface {
	pulumi.Input

	ToPhase2MapOutput() Phase2MapOutput
	ToPhase2MapOutputWithContext(context.Context) Phase2MapOutput
}

type Phase2Map map[string]Phase2Input

func (Phase2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Phase2)(nil)).Elem()
}

func (i Phase2Map) ToPhase2MapOutput() Phase2MapOutput {
	return i.ToPhase2MapOutputWithContext(context.Background())
}

func (i Phase2Map) ToPhase2MapOutputWithContext(ctx context.Context) Phase2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Phase2MapOutput)
}

type Phase2Output struct{ *pulumi.OutputState }

func (Phase2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**Phase2)(nil)).Elem()
}

func (o Phase2Output) ToPhase2Output() Phase2Output {
	return o
}

func (o Phase2Output) ToPhase2OutputWithContext(ctx context.Context) Phase2Output {
	return o
}

// Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
func (o Phase2Output) AddRoute() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.AddRoute }).(pulumi.StringOutput)
}

// Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
func (o Phase2Output) AutoNegotiate() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.AutoNegotiate }).(pulumi.StringOutput)
}

// Comment.
func (o Phase2Output) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
func (o Phase2Output) DhcpIpsec() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.DhcpIpsec }).(pulumi.StringOutput)
}

// Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
func (o Phase2Output) Dhgrp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.Dhgrp }).(pulumi.StringOutput)
}

// Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
func (o Phase2Output) Diffserv() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.Diffserv }).(pulumi.StringOutput)
}

// DSCP value to be applied to the IPsec tunnel outer IP header.
func (o Phase2Output) Diffservcode() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.Diffservcode }).(pulumi.StringOutput)
}

// Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
func (o Phase2Output) DstAddrType() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.DstAddrType }).(pulumi.StringOutput)
}

// Remote proxy ID IPv4 end.
func (o Phase2Output) DstEndIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.DstEndIp }).(pulumi.StringOutput)
}

// Remote proxy ID IPv6 end.
func (o Phase2Output) DstEndIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.DstEndIp6 }).(pulumi.StringOutput)
}

// Remote proxy ID name.
func (o Phase2Output) DstName() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.DstName }).(pulumi.StringOutput)
}

// Remote proxy ID name.
func (o Phase2Output) DstName6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.DstName6 }).(pulumi.StringOutput)
}

// Quick mode destination port (1 - 65535 or 0 for all).
func (o Phase2Output) DstPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase2) pulumi.IntOutput { return v.DstPort }).(pulumi.IntOutput)
}

// Remote proxy ID IPv4 start.
func (o Phase2Output) DstStartIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.DstStartIp }).(pulumi.StringOutput)
}

// Remote proxy ID IPv6 start.
func (o Phase2Output) DstStartIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.DstStartIp6 }).(pulumi.StringOutput)
}

// Remote proxy ID IPv4 subnet.
func (o Phase2Output) DstSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.DstSubnet }).(pulumi.StringOutput)
}

// Remote proxy ID IPv6 subnet.
func (o Phase2Output) DstSubnet6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.DstSubnet6 }).(pulumi.StringOutput)
}

// ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
func (o Phase2Output) Encapsulation() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.Encapsulation }).(pulumi.StringOutput)
}

// Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
func (o Phase2Output) InboundDscpCopy() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.InboundDscpCopy }).(pulumi.StringOutput)
}

// Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
func (o Phase2Output) InitiatorTsNarrow() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.InitiatorTsNarrow }).(pulumi.StringOutput)
}

// Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
func (o Phase2Output) Ipv4Df() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.Ipv4Df }).(pulumi.StringOutput)
}

// Enable/disable keep alive. Valid values: `enable`, `disable`.
func (o Phase2Output) Keepalive() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.Keepalive }).(pulumi.StringOutput)
}

// Keylife type. Valid values: `seconds`, `kbs`, `both`.
func (o Phase2Output) KeylifeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.KeylifeType }).(pulumi.StringOutput)
}

// Phase2 key life in number of kilobytes of traffic (5120 - 4294967295).
func (o Phase2Output) Keylifekbs() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase2) pulumi.IntOutput { return v.Keylifekbs }).(pulumi.IntOutput)
}

// Phase2 key life in time in seconds (120 - 172800).
func (o Phase2Output) Keylifeseconds() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase2) pulumi.IntOutput { return v.Keylifeseconds }).(pulumi.IntOutput)
}

// Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
func (o Phase2Output) L2tp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.L2tp }).(pulumi.StringOutput)
}

// IPsec tunnel name.
func (o Phase2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable PFS feature. Valid values: `enable`, `disable`.
func (o Phase2Output) Pfs() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.Pfs }).(pulumi.StringOutput)
}

// Phase 1 determines the options required for phase 2.
func (o Phase2Output) Phase1name() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.Phase1name }).(pulumi.StringOutput)
}

// Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
func (o Phase2Output) Proposal() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.Proposal }).(pulumi.StringOutput)
}

// Quick mode protocol selector (1 - 255 or 0 for all).
func (o Phase2Output) Protocol() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase2) pulumi.IntOutput { return v.Protocol }).(pulumi.IntOutput)
}

// Enable/disable replay detection. Valid values: `enable`, `disable`.
func (o Phase2Output) Replay() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.Replay }).(pulumi.StringOutput)
}

// Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
func (o Phase2Output) RouteOverlap() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.RouteOverlap }).(pulumi.StringOutput)
}

// Match type to use when comparing selectors. Valid values: `exact`, `subset`, `auto`.
func (o Phase2Output) SelectorMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.SelectorMatch }).(pulumi.StringOutput)
}

// Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
func (o Phase2Output) SingleSource() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.SingleSource }).(pulumi.StringOutput)
}

// Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`.
func (o Phase2Output) SrcAddrType() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.SrcAddrType }).(pulumi.StringOutput)
}

// Local proxy ID end.
func (o Phase2Output) SrcEndIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.SrcEndIp }).(pulumi.StringOutput)
}

// Local proxy ID IPv6 end.
func (o Phase2Output) SrcEndIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.SrcEndIp6 }).(pulumi.StringOutput)
}

// Local proxy ID name.
func (o Phase2Output) SrcName() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.SrcName }).(pulumi.StringOutput)
}

// Local proxy ID name.
func (o Phase2Output) SrcName6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.SrcName6 }).(pulumi.StringOutput)
}

// Quick mode source port (1 - 65535 or 0 for all).
func (o Phase2Output) SrcPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase2) pulumi.IntOutput { return v.SrcPort }).(pulumi.IntOutput)
}

// Local proxy ID start.
func (o Phase2Output) SrcStartIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.SrcStartIp }).(pulumi.StringOutput)
}

// Local proxy ID IPv6 start.
func (o Phase2Output) SrcStartIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.SrcStartIp6 }).(pulumi.StringOutput)
}

// Local proxy ID subnet.
func (o Phase2Output) SrcSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.SrcSubnet }).(pulumi.StringOutput)
}

// Local proxy ID IPv6 subnet.
func (o Phase2Output) SrcSubnet6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.SrcSubnet6 }).(pulumi.StringOutput)
}

// Enable to use the FortiGate public IP as the source selector when outbound NAT is used. Valid values: `enable`, `disable`.
func (o Phase2Output) UseNatip() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.UseNatip }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o Phase2Output) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type Phase2ArrayOutput struct{ *pulumi.OutputState }

func (Phase2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Phase2)(nil)).Elem()
}

func (o Phase2ArrayOutput) ToPhase2ArrayOutput() Phase2ArrayOutput {
	return o
}

func (o Phase2ArrayOutput) ToPhase2ArrayOutputWithContext(ctx context.Context) Phase2ArrayOutput {
	return o
}

func (o Phase2ArrayOutput) Index(i pulumi.IntInput) Phase2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Phase2 {
		return vs[0].([]*Phase2)[vs[1].(int)]
	}).(Phase2Output)
}

type Phase2MapOutput struct{ *pulumi.OutputState }

func (Phase2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Phase2)(nil)).Elem()
}

func (o Phase2MapOutput) ToPhase2MapOutput() Phase2MapOutput {
	return o
}

func (o Phase2MapOutput) ToPhase2MapOutputWithContext(ctx context.Context) Phase2MapOutput {
	return o
}

func (o Phase2MapOutput) MapIndex(k pulumi.StringInput) Phase2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Phase2 {
		return vs[0].(map[string]*Phase2)[vs[1].(string)]
	}).(Phase2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Phase2Input)(nil)).Elem(), &Phase2{})
	pulumi.RegisterInputType(reflect.TypeOf((*Phase2ArrayInput)(nil)).Elem(), Phase2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*Phase2MapInput)(nil)).Elem(), Phase2Map{})
	pulumi.RegisterOutputType(Phase2Output{})
	pulumi.RegisterOutputType(Phase2ArrayOutput{})
	pulumi.RegisterOutputType(Phase2MapOutput{})
}
