// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipsec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure Forward Error Correction (FEC) mapping profiles. Applies to FortiOS Version `>= 7.0.2`.
//
// ## Import
//
// VpnIpsec Fec can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:vpn/ipsec/fec:Fec labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:vpn/ipsec/fec:Fec labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Fec struct {
	pulumi.CustomResourceState

	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// FEC redundancy mapping table. The structure of `mappings` block is documented below.
	Mappings FecMappingArrayOutput `pulumi:"mappings"`
	// Profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFec registers a new resource with the given unique name, arguments, and options.
func NewFec(ctx *pulumi.Context,
	name string, args *FecArgs, opts ...pulumi.ResourceOption) (*Fec, error) {
	if args == nil {
		args = &FecArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Fec
	err := ctx.RegisterResource("fortios:vpn/ipsec/fec:Fec", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFec gets an existing Fec resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFec(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FecState, opts ...pulumi.ResourceOption) (*Fec, error) {
	var resource Fec
	err := ctx.ReadResource("fortios:vpn/ipsec/fec:Fec", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fec resources.
type fecState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// FEC redundancy mapping table. The structure of `mappings` block is documented below.
	Mappings []FecMapping `pulumi:"mappings"`
	// Profile name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FecState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// FEC redundancy mapping table. The structure of `mappings` block is documented below.
	Mappings FecMappingArrayInput
	// Profile name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FecState) ElementType() reflect.Type {
	return reflect.TypeOf((*fecState)(nil)).Elem()
}

type fecArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// FEC redundancy mapping table. The structure of `mappings` block is documented below.
	Mappings []FecMapping `pulumi:"mappings"`
	// Profile name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Fec resource.
type FecArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// FEC redundancy mapping table. The structure of `mappings` block is documented below.
	Mappings FecMappingArrayInput
	// Profile name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fecArgs)(nil)).Elem()
}

type FecInput interface {
	pulumi.Input

	ToFecOutput() FecOutput
	ToFecOutputWithContext(ctx context.Context) FecOutput
}

func (*Fec) ElementType() reflect.Type {
	return reflect.TypeOf((**Fec)(nil)).Elem()
}

func (i *Fec) ToFecOutput() FecOutput {
	return i.ToFecOutputWithContext(context.Background())
}

func (i *Fec) ToFecOutputWithContext(ctx context.Context) FecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FecOutput)
}

// FecArrayInput is an input type that accepts FecArray and FecArrayOutput values.
// You can construct a concrete instance of `FecArrayInput` via:
//
//	FecArray{ FecArgs{...} }
type FecArrayInput interface {
	pulumi.Input

	ToFecArrayOutput() FecArrayOutput
	ToFecArrayOutputWithContext(context.Context) FecArrayOutput
}

type FecArray []FecInput

func (FecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fec)(nil)).Elem()
}

func (i FecArray) ToFecArrayOutput() FecArrayOutput {
	return i.ToFecArrayOutputWithContext(context.Background())
}

func (i FecArray) ToFecArrayOutputWithContext(ctx context.Context) FecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FecArrayOutput)
}

// FecMapInput is an input type that accepts FecMap and FecMapOutput values.
// You can construct a concrete instance of `FecMapInput` via:
//
//	FecMap{ "key": FecArgs{...} }
type FecMapInput interface {
	pulumi.Input

	ToFecMapOutput() FecMapOutput
	ToFecMapOutputWithContext(context.Context) FecMapOutput
}

type FecMap map[string]FecInput

func (FecMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fec)(nil)).Elem()
}

func (i FecMap) ToFecMapOutput() FecMapOutput {
	return i.ToFecMapOutputWithContext(context.Background())
}

func (i FecMap) ToFecMapOutputWithContext(ctx context.Context) FecMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FecMapOutput)
}

type FecOutput struct{ *pulumi.OutputState }

func (FecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fec)(nil)).Elem()
}

func (o FecOutput) ToFecOutput() FecOutput {
	return o
}

func (o FecOutput) ToFecOutputWithContext(ctx context.Context) FecOutput {
	return o
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o FecOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fec) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o FecOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fec) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// FEC redundancy mapping table. The structure of `mappings` block is documented below.
func (o FecOutput) Mappings() FecMappingArrayOutput {
	return o.ApplyT(func(v *Fec) FecMappingArrayOutput { return v.Mappings }).(FecMappingArrayOutput)
}

// Profile name.
func (o FecOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Fec) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o FecOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fec) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FecArrayOutput struct{ *pulumi.OutputState }

func (FecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fec)(nil)).Elem()
}

func (o FecArrayOutput) ToFecArrayOutput() FecArrayOutput {
	return o
}

func (o FecArrayOutput) ToFecArrayOutputWithContext(ctx context.Context) FecArrayOutput {
	return o
}

func (o FecArrayOutput) Index(i pulumi.IntInput) FecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Fec {
		return vs[0].([]*Fec)[vs[1].(int)]
	}).(FecOutput)
}

type FecMapOutput struct{ *pulumi.OutputState }

func (FecMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fec)(nil)).Elem()
}

func (o FecMapOutput) ToFecMapOutput() FecMapOutput {
	return o
}

func (o FecMapOutput) ToFecMapOutputWithContext(ctx context.Context) FecMapOutput {
	return o
}

func (o FecMapOutput) MapIndex(k pulumi.StringInput) FecOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Fec {
		return vs[0].(map[string]*Fec)[vs[1].(string)]
	}).(FecOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FecInput)(nil)).Elem(), &Fec{})
	pulumi.RegisterInputType(reflect.TypeOf((*FecArrayInput)(nil)).Elem(), FecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FecMapInput)(nil)).Elem(), FecMap{})
	pulumi.RegisterOutputType(FecOutput{})
	pulumi.RegisterOutputType(FecArrayOutput{})
	pulumi.RegisterOutputType(FecMapOutput{})
}
