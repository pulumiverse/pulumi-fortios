// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipsec

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure VPN remote gateway.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpn.NewPhase1interface(ctx, "trname2", &vpn.Phase1interfaceArgs{
//				AcctVerify:             pulumi.String("disable"),
//				AddGwRoute:             pulumi.String("disable"),
//				AddRoute:               pulumi.String("enable"),
//				AssignIp:               pulumi.String("enable"),
//				AssignIpFrom:           pulumi.String("range"),
//				Authmethod:             pulumi.String("psk"),
//				AutoDiscoveryForwarder: pulumi.String("disable"),
//				AutoDiscoveryPsk:       pulumi.String("disable"),
//				AutoDiscoveryReceiver:  pulumi.String("disable"),
//				AutoDiscoverySender:    pulumi.String("disable"),
//				AutoNegotiate:          pulumi.String("enable"),
//				CertIdValidation:       pulumi.String("enable"),
//				ChildlessIke:           pulumi.String("disable"),
//				ClientAutoNegotiate:    pulumi.String("disable"),
//				ClientKeepAlive:        pulumi.String("disable"),
//				DefaultGw:              pulumi.String("0.0.0.0"),
//				DefaultGwPriority:      pulumi.Int(0),
//				Dhgrp:                  pulumi.String("14 5"),
//				DigitalSignatureAuth:   pulumi.String("disable"),
//				Distance:               pulumi.Int(15),
//				DnsMode:                pulumi.String("manual"),
//				Dpd:                    pulumi.String("on-demand"),
//				DpdRetrycount:          pulumi.Int(3),
//				DpdRetryinterval:       pulumi.String("20"),
//				Eap:                    pulumi.String("disable"),
//				EapIdentity:            pulumi.String("use-id-payload"),
//				EncapLocalGw4:          pulumi.String("0.0.0.0"),
//				EncapLocalGw6:          pulumi.String("::"),
//				EncapRemoteGw4:         pulumi.String("0.0.0.0"),
//				EncapRemoteGw6:         pulumi.String("::"),
//				Encapsulation:          pulumi.String("none"),
//				EncapsulationAddress:   pulumi.String("ike"),
//				EnforceUniqueId:        pulumi.String("disable"),
//				ExchangeInterfaceIp:    pulumi.String("disable"),
//				ExchangeIpAddr4:        pulumi.String("0.0.0.0"),
//				ExchangeIpAddr6:        pulumi.String("::"),
//				ForticlientEnforcement: pulumi.String("disable"),
//				Fragmentation:          pulumi.String("enable"),
//				FragmentationMtu:       pulumi.Int(1200),
//				GroupAuthentication:    pulumi.String("disable"),
//				HaSyncEspSeqno:         pulumi.String("enable"),
//				IdleTimeout:            pulumi.String("disable"),
//				IdleTimeoutinterval:    pulumi.Int(15),
//				IkeVersion:             pulumi.String("1"),
//				IncludeLocalLan:        pulumi.String("disable"),
//				Interface:              pulumi.String("port3"),
//				IpVersion:              pulumi.String("4"),
//				Ipv4DnsServer1:         pulumi.String("0.0.0.0"),
//				Ipv4DnsServer2:         pulumi.String("0.0.0.0"),
//				Ipv4DnsServer3:         pulumi.String("0.0.0.0"),
//				Ipv4EndIp:              pulumi.String("0.0.0.0"),
//				Ipv4Netmask:            pulumi.String("255.255.255.255"),
//				Ipv4StartIp:            pulumi.String("0.0.0.0"),
//				Ipv4WinsServer1:        pulumi.String("0.0.0.0"),
//				Ipv4WinsServer2:        pulumi.String("0.0.0.0"),
//				Ipv6DnsServer1:         pulumi.String("::"),
//				Ipv6DnsServer2:         pulumi.String("::"),
//				Ipv6DnsServer3:         pulumi.String("::"),
//				Ipv6EndIp:              pulumi.String("::"),
//				Ipv6Prefix:             pulumi.Int(128),
//				Ipv6StartIp:            pulumi.String("::"),
//				Keepalive:              pulumi.Int(10),
//				Keylife:                pulumi.Int(86400),
//				LocalGw:                pulumi.String("0.0.0.0"),
//				LocalGw6:               pulumi.String("::"),
//				LocalidType:            pulumi.String("auto"),
//				MeshSelectorType:       pulumi.String("disable"),
//				Mode:                   pulumi.String("main"),
//				ModeCfg:                pulumi.String("disable"),
//				MonitorHoldDownDelay:   pulumi.Int(0),
//				MonitorHoldDownTime:    pulumi.String("00:00"),
//				MonitorHoldDownType:    pulumi.String("immediate"),
//				MonitorHoldDownWeekday: pulumi.String("sunday"),
//				Nattraversal:           pulumi.String("enable"),
//				NegotiateTimeout:       pulumi.Int(30),
//				NetDevice:              pulumi.String("disable"),
//				PassiveMode:            pulumi.String("disable"),
//				Peertype:               pulumi.String("any"),
//				Ppk:                    pulumi.String("disable"),
//				Priority:               pulumi.Int(0),
//				Proposal:               pulumi.String("aes128-sha256 aes256-sha256 aes128-sha1 aes256-sha1"),
//				Psksecret:              pulumi.String("eweeeeeeeecee"),
//				Reauth:                 pulumi.String("disable"),
//				Rekey:                  pulumi.String("enable"),
//				RemoteGw:               pulumi.String("102.2.2.12"),
//				RemoteGw6:              pulumi.String("::"),
//				RsaSignatureFormat:     pulumi.String("pkcs1"),
//				SavePassword:           pulumi.String("disable"),
//				SendCertChain:          pulumi.String("enable"),
//				SignatureHashAlg:       pulumi.String("sha2-512 sha2-384 sha2-256 sha1"),
//				SuiteB:                 pulumi.String("disable"),
//				TunnelSearch:           pulumi.String("selectors"),
//				Type:                   pulumi.String("static"),
//				UnitySupport:           pulumi.String("enable"),
//				WizardType:             pulumi.String("custom"),
//				Xauthtype:              pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// VpnIpsec Phase1Interface can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:vpn/ipsec/phase1interface:Phase1interface labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:vpn/ipsec/phase1interface:Phase1interface labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Phase1interface struct {
	pulumi.CustomResourceState

	// Enable/disable verification of RADIUS accounting record. Valid values: `enable`, `disable`.
	AcctVerify pulumi.StringOutput `pulumi:"acctVerify"`
	// Enable/disable automatically add a route to the remote gateway. Valid values: `enable`, `disable`.
	AddGwRoute pulumi.StringOutput `pulumi:"addGwRoute"`
	// Enable/disable control addition of a route to peer destination selector. Valid values: `disable`, `enable`.
	AddRoute pulumi.StringOutput `pulumi:"addRoute"`
	// Enable/disable use as an aggregate member. Valid values: `enable`, `disable`.
	AggregateMember pulumi.StringOutput `pulumi:"aggregateMember"`
	// Link weight for aggregate.
	AggregateWeight pulumi.IntOutput `pulumi:"aggregateWeight"`
	// Enable/disable assignment of IP to IPsec interface via configuration method. Valid values: `disable`, `enable`.
	AssignIp pulumi.StringOutput `pulumi:"assignIp"`
	// Method by which the IP address will be assigned. Valid values: `range`, `usrgrp`, `dhcp`, `name`.
	AssignIpFrom pulumi.StringOutput `pulumi:"assignIpFrom"`
	// Authentication method. Valid values: `psk`, `signature`.
	Authmethod pulumi.StringOutput `pulumi:"authmethod"`
	// Authentication method (remote side). Valid values: `psk`, `signature`.
	AuthmethodRemote pulumi.StringOutput `pulumi:"authmethodRemote"`
	// XAuth password (max 35 characters).
	Authpasswd pulumi.StringPtrOutput `pulumi:"authpasswd"`
	// XAuth user name.
	Authusr pulumi.StringOutput `pulumi:"authusr"`
	// Authentication user group.
	Authusrgrp pulumi.StringOutput `pulumi:"authusrgrp"`
	// Allow/block set-up of short-cut tunnels between different network IDs. Valid values: `allow`, `block`.
	AutoDiscoveryCrossover pulumi.StringOutput `pulumi:"autoDiscoveryCrossover"`
	// Enable/disable forwarding auto-discovery short-cut messages. Valid values: `enable`, `disable`.
	AutoDiscoveryForwarder pulumi.StringOutput `pulumi:"autoDiscoveryForwarder"`
	// Interval between shortcut offer messages in seconds (1 - 300, default = 5).
	AutoDiscoveryOfferInterval pulumi.IntOutput `pulumi:"autoDiscoveryOfferInterval"`
	// Enable/disable use of pre-shared secrets for authentication of auto-discovery tunnels. Valid values: `enable`, `disable`.
	AutoDiscoveryPsk pulumi.StringOutput `pulumi:"autoDiscoveryPsk"`
	// Enable/disable accepting auto-discovery short-cut messages. Valid values: `enable`, `disable`.
	AutoDiscoveryReceiver pulumi.StringOutput `pulumi:"autoDiscoveryReceiver"`
	// Enable/disable sending auto-discovery short-cut messages. Valid values: `enable`, `disable`.
	AutoDiscoverySender pulumi.StringOutput `pulumi:"autoDiscoverySender"`
	// Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
	AutoDiscoveryShortcuts pulumi.StringOutput `pulumi:"autoDiscoveryShortcuts"`
	// Enable/disable automatic initiation of IKE SA negotiation. Valid values: `enable`, `disable`.
	AutoNegotiate pulumi.StringOutput `pulumi:"autoNegotiate"`
	// Enable/disable Azure AD Auto-Connect for FortiClient. Valid values: `enable`, `disable`.
	AzureAdAutoconnect pulumi.StringOutput `pulumi:"azureAdAutoconnect"`
	// Instruct unity clients about the backup gateway address(es). The structure of `backupGateway` block is documented below.
	BackupGateways Phase1interfaceBackupGatewayArrayOutput `pulumi:"backupGateways"`
	// Message that unity client should display after connecting.
	Banner pulumi.StringPtrOutput `pulumi:"banner"`
	// Enable/disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945. Valid values: `enable`, `disable`.
	CertIdValidation pulumi.StringOutput `pulumi:"certIdValidation"`
	// CA certificate trust store. Valid values: `local`, `ems`.
	CertTrustStore pulumi.StringOutput `pulumi:"certTrustStore"`
	// The names of up to 4 signed personal certificates. The structure of `certificate` block is documented below.
	Certificates Phase1interfaceCertificateArrayOutput `pulumi:"certificates"`
	// Enable/disable childless IKEv2 initiation (RFC 6023). Valid values: `enable`, `disable`.
	ChildlessIke pulumi.StringOutput `pulumi:"childlessIke"`
	// Enable/disable allowing the VPN client to bring up the tunnel when there is no traffic. Valid values: `disable`, `enable`.
	ClientAutoNegotiate pulumi.StringOutput `pulumi:"clientAutoNegotiate"`
	// Enable/disable allowing the VPN client to keep the tunnel up when there is no traffic. Valid values: `disable`, `enable`.
	ClientKeepAlive pulumi.StringOutput `pulumi:"clientKeepAlive"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// IPv4 address of default route gateway to use for traffic exiting the interface.
	DefaultGw pulumi.StringOutput `pulumi:"defaultGw"`
	// Priority for default gateway route. A higher priority number signifies a less preferred route.
	DefaultGwPriority pulumi.IntOutput `pulumi:"defaultGwPriority"`
	// Device ID carried by the device ID notification.
	DevId pulumi.StringOutput `pulumi:"devId"`
	// Enable/disable device ID notification. Valid values: `disable`, `enable`.
	DevIdNotification pulumi.StringOutput `pulumi:"devIdNotification"`
	// Relay agent IPv6 link address to use in DHCP6 requests.
	Dhcp6RaLinkaddr pulumi.StringOutput `pulumi:"dhcp6RaLinkaddr"`
	// Relay agent gateway IP address to use in the giaddr field of DHCP requests.
	DhcpRaGiaddr pulumi.StringOutput `pulumi:"dhcpRaGiaddr"`
	// DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
	Dhgrp pulumi.StringOutput `pulumi:"dhgrp"`
	// Enable/disable IKEv2 Digital Signature Authentication (RFC 7427). Valid values: `enable`, `disable`.
	DigitalSignatureAuth pulumi.StringOutput `pulumi:"digitalSignatureAuth"`
	// Distance for routes added by IKE (1 - 255).
	Distance pulumi.IntOutput `pulumi:"distance"`
	// DNS server mode. Valid values: `manual`, `auto`.
	DnsMode pulumi.StringOutput `pulumi:"dnsMode"`
	// Instruct unity clients about the default DNS domain.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Dead Peer Detection mode. Valid values: `disable`, `on-idle`, `on-demand`.
	Dpd pulumi.StringOutput `pulumi:"dpd"`
	// Number of DPD retry attempts.
	DpdRetrycount pulumi.IntOutput `pulumi:"dpdRetrycount"`
	// DPD retry interval.
	DpdRetryinterval pulumi.StringOutput `pulumi:"dpdRetryinterval"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Enable/disable IKEv2 EAP authentication. Valid values: `enable`, `disable`.
	Eap pulumi.StringOutput `pulumi:"eap"`
	// Enable/disable peer certificate authentication in addition to EAP if peer is a FortiClient endpoint. Valid values: `enable`, `disable`.
	EapCertAuth pulumi.StringOutput `pulumi:"eapCertAuth"`
	// Peer group excluded from EAP authentication.
	EapExcludePeergrp pulumi.StringOutput `pulumi:"eapExcludePeergrp"`
	// IKEv2 EAP peer identity type. Valid values: `use-id-payload`, `send-request`.
	EapIdentity pulumi.StringOutput `pulumi:"eapIdentity"`
	// Enable/disable verification of EMS serial number. Valid values: `enable`, `disable`.
	EmsSnCheck pulumi.StringOutput `pulumi:"emsSnCheck"`
	// Local IPv4 address of GRE/VXLAN tunnel.
	EncapLocalGw4 pulumi.StringOutput `pulumi:"encapLocalGw4"`
	// Local IPv6 address of GRE/VXLAN tunnel.
	EncapLocalGw6 pulumi.StringOutput `pulumi:"encapLocalGw6"`
	// Remote IPv4 address of GRE/VXLAN tunnel.
	EncapRemoteGw4 pulumi.StringOutput `pulumi:"encapRemoteGw4"`
	// Remote IPv6 address of GRE/VXLAN tunnel.
	EncapRemoteGw6 pulumi.StringOutput `pulumi:"encapRemoteGw6"`
	// Enable/disable GRE/VXLAN encapsulation.
	Encapsulation pulumi.StringOutput `pulumi:"encapsulation"`
	// Source for GRE/VXLAN tunnel address. Valid values: `ike`, `ipv4`, `ipv6`.
	EncapsulationAddress pulumi.StringOutput `pulumi:"encapsulationAddress"`
	// Enable/disable peer ID uniqueness check. Valid values: `disable`, `keep-new`, `keep-old`.
	EnforceUniqueId pulumi.StringOutput `pulumi:"enforceUniqueId"`
	// Extended sequence number (ESN) negotiation. Valid values: `require`, `allow`, `disable`.
	Esn pulumi.StringOutput `pulumi:"esn"`
	// Enable/disable device identifier exchange with peer FortiGate units for use of VPN monitor data by FortiManager. Valid values: `enable`, `disable`.
	ExchangeFgtDeviceId pulumi.StringOutput `pulumi:"exchangeFgtDeviceId"`
	// Enable/disable exchange of IPsec interface IP address. Valid values: `enable`, `disable`.
	ExchangeInterfaceIp pulumi.StringOutput `pulumi:"exchangeInterfaceIp"`
	// IPv4 address to exchange with peers.
	ExchangeIpAddr4 pulumi.StringOutput `pulumi:"exchangeIpAddr4"`
	// IPv6 address to exchange with peers
	ExchangeIpAddr6 pulumi.StringOutput `pulumi:"exchangeIpAddr6"`
	// Timeout in seconds before falling back IKE/IPsec traffic to tcp.
	FallbackTcpThreshold pulumi.IntOutput `pulumi:"fallbackTcpThreshold"`
	// Number of base Forward Error Correction packets (1 - 100).
	FecBase pulumi.IntOutput `pulumi:"fecBase"`
	// ipsec fec encoding/decoding algorithm (0: reed-solomon, 1: xor).
	FecCodec pulumi.IntOutput `pulumi:"fecCodec"`
	// Forward Error Correction encoding/decoding algorithm. Valid values: `rs`, `xor`.
	FecCodecString pulumi.StringOutput `pulumi:"fecCodecString"`
	// Enable/disable Forward Error Correction for egress IPsec traffic. Valid values: `enable`, `disable`.
	FecEgress pulumi.StringOutput `pulumi:"fecEgress"`
	// SD-WAN health check.
	FecHealthCheck pulumi.StringOutput `pulumi:"fecHealthCheck"`
	// Enable/disable Forward Error Correction for ingress IPsec traffic. Valid values: `enable`, `disable`.
	FecIngress pulumi.StringOutput `pulumi:"fecIngress"`
	// Forward Error Correction (FEC) mapping profile.
	FecMappingProfile pulumi.StringOutput `pulumi:"fecMappingProfile"`
	// Timeout in milliseconds before dropping Forward Error Correction packets (1 - 10000).
	FecReceiveTimeout pulumi.IntOutput `pulumi:"fecReceiveTimeout"`
	// Number of redundant Forward Error Correction packets (1 - 100).
	FecRedundant pulumi.IntOutput `pulumi:"fecRedundant"`
	// Timeout in milliseconds before sending Forward Error Correction packets (1 - 1000).
	FecSendTimeout pulumi.IntOutput `pulumi:"fecSendTimeout"`
	// Enable/disable IPsec syncing of tunnels for FGSP IPsec. Valid values: `enable`, `disable`.
	FgspSync pulumi.StringOutput `pulumi:"fgspSync"`
	// Enable/disable FortiClient enforcement. Valid values: `enable`, `disable`.
	ForticlientEnforcement pulumi.StringOutput `pulumi:"forticlientEnforcement"`
	// Enable/disable Fortinet ESP encapsulaton. Valid values: `enable`, `disable`.
	FortinetEsp pulumi.StringOutput `pulumi:"fortinetEsp"`
	// Enable/disable fragment IKE message on re-transmission. Valid values: `enable`, `disable`.
	Fragmentation pulumi.StringOutput `pulumi:"fragmentation"`
	// IKE fragmentation MTU (500 - 16000).
	FragmentationMtu pulumi.IntOutput `pulumi:"fragmentationMtu"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Enable/disable IKEv2 IDi group authentication. Valid values: `enable`, `disable`.
	GroupAuthentication pulumi.StringOutput `pulumi:"groupAuthentication"`
	// Password for IKEv2 IDi group authentication.  (ASCII string or hexadecimal indicated by a leading 0x.)
	GroupAuthenticationSecret pulumi.StringPtrOutput `pulumi:"groupAuthenticationSecret"`
	// Enable/disable sequence number jump ahead for IPsec HA. Valid values: `enable`, `disable`.
	HaSyncEspSeqno pulumi.StringOutput `pulumi:"haSyncEspSeqno"`
	// Enable/disable IPsec tunnel idle timeout. Valid values: `enable`, `disable`.
	IdleTimeout pulumi.StringOutput `pulumi:"idleTimeout"`
	// IPsec tunnel idle timeout in minutes (5 - 43200).
	IdleTimeoutinterval pulumi.IntOutput `pulumi:"idleTimeoutinterval"`
	// IKE protocol version. Valid values: `1`, `2`.
	IkeVersion pulumi.StringOutput `pulumi:"ikeVersion"`
	// Enable/disable copy the dscp in the ESP header to the inner IP Header. Valid values: `enable`, `disable`.
	InboundDscpCopy pulumi.StringOutput `pulumi:"inboundDscpCopy"`
	// Enable/disable allow local LAN access on unity clients. Valid values: `disable`, `enable`.
	IncludeLocalLan pulumi.StringOutput `pulumi:"includeLocalLan"`
	// Local physical, aggregate, or VLAN outgoing interface.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// One or more internal domain names in quotes separated by spaces. The structure of `internalDomainList` block is documented below.
	InternalDomainLists Phase1interfaceInternalDomainListArrayOutput `pulumi:"internalDomainLists"`
	// IP address reuse delay interval in seconds (0 - 28800).
	IpDelayInterval pulumi.IntOutput `pulumi:"ipDelayInterval"`
	// Determine whether IP packets are fragmented before or after IPsec encapsulation. Valid values: `pre-encapsulation`, `post-encapsulation`.
	IpFragmentation pulumi.StringOutput `pulumi:"ipFragmentation"`
	// IP version to use for VPN interface. Valid values: `4`, `6`.
	IpVersion pulumi.StringOutput `pulumi:"ipVersion"`
	// IPv4 DNS server 1.
	Ipv4DnsServer1 pulumi.StringOutput `pulumi:"ipv4DnsServer1"`
	// IPv4 DNS server 2.
	Ipv4DnsServer2 pulumi.StringOutput `pulumi:"ipv4DnsServer2"`
	// IPv4 DNS server 3.
	Ipv4DnsServer3 pulumi.StringOutput `pulumi:"ipv4DnsServer3"`
	// End of IPv4 range.
	Ipv4EndIp pulumi.StringOutput `pulumi:"ipv4EndIp"`
	// Configuration Method IPv4 exclude ranges. The structure of `ipv4ExcludeRange` block is documented below.
	Ipv4ExcludeRanges Phase1interfaceIpv4ExcludeRangeArrayOutput `pulumi:"ipv4ExcludeRanges"`
	// IPv4 address name.
	Ipv4Name pulumi.StringOutput `pulumi:"ipv4Name"`
	// IPv4 Netmask.
	Ipv4Netmask pulumi.StringOutput `pulumi:"ipv4Netmask"`
	// IPv4 subnets that should not be sent over the IPsec tunnel.
	Ipv4SplitExclude pulumi.StringOutput `pulumi:"ipv4SplitExclude"`
	// IPv4 split-include subnets.
	Ipv4SplitInclude pulumi.StringOutput `pulumi:"ipv4SplitInclude"`
	// Start of IPv4 range.
	Ipv4StartIp pulumi.StringOutput `pulumi:"ipv4StartIp"`
	// WINS server 1.
	Ipv4WinsServer1 pulumi.StringOutput `pulumi:"ipv4WinsServer1"`
	// WINS server 2.
	Ipv4WinsServer2 pulumi.StringOutput `pulumi:"ipv4WinsServer2"`
	// IPv6 DNS server 1.
	Ipv6DnsServer1 pulumi.StringOutput `pulumi:"ipv6DnsServer1"`
	// IPv6 DNS server 2.
	Ipv6DnsServer2 pulumi.StringOutput `pulumi:"ipv6DnsServer2"`
	// IPv6 DNS server 3.
	Ipv6DnsServer3 pulumi.StringOutput `pulumi:"ipv6DnsServer3"`
	// End of IPv6 range.
	Ipv6EndIp pulumi.StringOutput `pulumi:"ipv6EndIp"`
	// Configuration method IPv6 exclude ranges. The structure of `ipv6ExcludeRange` block is documented below.
	Ipv6ExcludeRanges Phase1interfaceIpv6ExcludeRangeArrayOutput `pulumi:"ipv6ExcludeRanges"`
	// IPv6 address name.
	Ipv6Name pulumi.StringOutput `pulumi:"ipv6Name"`
	// IPv6 prefix.
	Ipv6Prefix pulumi.IntOutput `pulumi:"ipv6Prefix"`
	// IPv6 subnets that should not be sent over the IPsec tunnel.
	Ipv6SplitExclude pulumi.StringOutput `pulumi:"ipv6SplitExclude"`
	// IPv6 split-include subnets.
	Ipv6SplitInclude pulumi.StringOutput `pulumi:"ipv6SplitInclude"`
	// Start of IPv6 range.
	Ipv6StartIp pulumi.StringOutput `pulumi:"ipv6StartIp"`
	// NAT-T keep alive interval.
	Keepalive pulumi.IntOutput `pulumi:"keepalive"`
	// Time to wait in seconds before phase 1 encryption key expires.
	Keylife pulumi.IntOutput `pulumi:"keylife"`
	// Key Management Services server.
	Kms pulumi.StringOutput `pulumi:"kms"`
	// VPN tunnel underlay link cost.
	LinkCost pulumi.IntOutput `pulumi:"linkCost"`
	// IPv4 address of the local gateway's external interface.
	LocalGw pulumi.StringOutput `pulumi:"localGw"`
	// IPv6 address of the local gateway's external interface.
	LocalGw6 pulumi.StringOutput `pulumi:"localGw6"`
	// Local ID.
	Localid pulumi.StringOutput `pulumi:"localid"`
	// Local ID type. Valid values: `auto`, `fqdn`, `user-fqdn`, `keyid`, `address`, `asn1dn`.
	LocalidType pulumi.StringOutput `pulumi:"localidType"`
	// Enable/disable asymmetric routing for IKE traffic on loopback interface. Valid values: `enable`, `disable`.
	LoopbackAsymroute pulumi.StringOutput `pulumi:"loopbackAsymroute"`
	// Add selectors containing subsets of the configuration depending on traffic. Valid values: `disable`, `subnet`, `host`.
	MeshSelectorType pulumi.StringOutput `pulumi:"meshSelectorType"`
	// The ID protection mode used to establish a secure channel. Valid values: `aggressive`, `main`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Enable/disable configuration method. Valid values: `disable`, `enable`.
	ModeCfg pulumi.StringOutput `pulumi:"modeCfg"`
	// Enable/disable mode-cfg client to use custom phase2 selectors. Valid values: `disable`, `enable`.
	ModeCfgAllowClientSelector pulumi.StringOutput `pulumi:"modeCfgAllowClientSelector"`
	// IPsec interface as backup for primary interface.
	Monitor pulumi.StringOutput `pulumi:"monitor"`
	// Time to wait in seconds before recovery once primary re-establishes.
	MonitorHoldDownDelay pulumi.IntOutput `pulumi:"monitorHoldDownDelay"`
	// Time of day at which to fail back to primary after it re-establishes.
	MonitorHoldDownTime pulumi.StringOutput `pulumi:"monitorHoldDownTime"`
	// Recovery time method when primary interface re-establishes. Valid values: `immediate`, `delay`, `time`.
	MonitorHoldDownType pulumi.StringOutput `pulumi:"monitorHoldDownType"`
	// Day of the week to recover once primary re-establishes. Valid values: `everyday`, `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	MonitorHoldDownWeekday pulumi.StringOutput `pulumi:"monitorHoldDownWeekday"`
	// Minimum number of links to become degraded before activating this interface.  Zero (0) means all links must be down before activating this interface.
	MonitorMin pulumi.IntOutput `pulumi:"monitorMin"`
	// IPsec remote gateway name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable NAT traversal. Valid values: `enable`, `disable`, `forced`.
	Nattraversal pulumi.StringOutput `pulumi:"nattraversal"`
	// IKE SA negotiation timeout in seconds (1 - 300).
	NegotiateTimeout pulumi.IntOutput `pulumi:"negotiateTimeout"`
	// Enable/disable kernel device creation. Valid values: `enable`, `disable`.
	NetDevice pulumi.StringOutput `pulumi:"netDevice"`
	// VPN gateway network ID.
	NetworkId pulumi.IntOutput `pulumi:"networkId"`
	// Enable/disable network overlays. Valid values: `disable`, `enable`.
	NetworkOverlay pulumi.StringOutput `pulumi:"networkOverlay"`
	// Enable/disable offloading NPU. Valid values: `enable`, `disable`.
	NpuOffload pulumi.StringOutput `pulumi:"npuOffload"`
	// Enable/disable packet distribution (RPS) on the IPsec interface. Valid values: `enable`, `disable`.
	PacketRedistribution pulumi.StringOutput `pulumi:"packetRedistribution"`
	// Enable/disable IPsec passive mode for static tunnels. Valid values: `enable`, `disable`.
	PassiveMode pulumi.StringOutput `pulumi:"passiveMode"`
	// Accept this peer certificate.
	Peer pulumi.StringOutput `pulumi:"peer"`
	// Accept this peer certificate group.
	Peergrp pulumi.StringOutput `pulumi:"peergrp"`
	// Accept this peer identity.
	Peerid pulumi.StringOutput `pulumi:"peerid"`
	// Accept this peer type. Valid values: `any`, `one`, `dialup`, `peer`, `peergrp`.
	Peertype pulumi.StringOutput `pulumi:"peertype"`
	// Enable/disable IKEv2 Postquantum Preshared Key (PPK). Valid values: `disable`, `allow`, `require`.
	Ppk pulumi.StringOutput `pulumi:"ppk"`
	// IKEv2 Postquantum Preshared Key Identity.
	PpkIdentity pulumi.StringOutput `pulumi:"ppkIdentity"`
	// IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
	PpkSecret pulumi.StringPtrOutput `pulumi:"ppkSecret"`
	// Priority for routes added by IKE (0 - 4294967295).
	Priority pulumi.IntOutput `pulumi:"priority"`
	// Phase1 proposal. Valid values: `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm-prfsha1`, `aes128gcm-prfsha256`, `aes128gcm-prfsha384`, `aes128gcm-prfsha512`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm-prfsha1`, `aes256gcm-prfsha256`, `aes256gcm-prfsha384`, `aes256gcm-prfsha512`, `chacha20poly1305-prfsha1`, `chacha20poly1305-prfsha256`, `chacha20poly1305-prfsha384`, `chacha20poly1305-prfsha512`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
	Proposal pulumi.StringOutput `pulumi:"proposal"`
	// Pre-shared secret for PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
	Psksecret pulumi.StringPtrOutput `pulumi:"psksecret"`
	// Pre-shared secret for remote side PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
	PsksecretRemote pulumi.StringPtrOutput `pulumi:"psksecretRemote"`
	// Enable/disable use of Quantum Key Distribution (QKD) server. Valid values: `disable`, `allow`, `require`.
	Qkd pulumi.StringOutput `pulumi:"qkd"`
	// Quantum Key Distribution (QKD) server profile.
	QkdProfile pulumi.StringOutput `pulumi:"qkdProfile"`
	// Enable/disable re-authentication upon IKE SA lifetime expiration. Valid values: `disable`, `enable`.
	Reauth pulumi.StringOutput `pulumi:"reauth"`
	// Enable/disable phase1 rekey. Valid values: `enable`, `disable`.
	Rekey pulumi.StringOutput `pulumi:"rekey"`
	// IPv4 address of the remote gateway's external interface.
	RemoteGw pulumi.StringOutput `pulumi:"remoteGw"`
	// IPv6 address of the remote gateway's external interface.
	RemoteGw6 pulumi.StringOutput `pulumi:"remoteGw6"`
	// Domain name of remote gateway (eg. name.DDNS.com).
	RemotegwDdns pulumi.StringOutput `pulumi:"remotegwDdns"`
	// Digital Signature Authentication RSA signature format. Valid values: `pkcs1`, `pss`.
	RsaSignatureFormat pulumi.StringOutput `pulumi:"rsaSignatureFormat"`
	// Enable/disable IKEv2 RSA signature hash algorithm override. Valid values: `enable`, `disable`.
	RsaSignatureHashOverride pulumi.StringOutput `pulumi:"rsaSignatureHashOverride"`
	// Enable/disable saving XAuth username and password on VPN clients. Valid values: `disable`, `enable`.
	SavePassword pulumi.StringOutput `pulumi:"savePassword"`
	// Enable/disable sending certificate chain. Valid values: `enable`, `disable`.
	SendCertChain pulumi.StringOutput `pulumi:"sendCertChain"`
	// Digital Signature Authentication hash algorithms. Valid values: `sha1`, `sha2-256`, `sha2-384`, `sha2-512`.
	SignatureHashAlg pulumi.StringOutput `pulumi:"signatureHashAlg"`
	// Split-include services.
	SplitIncludeService pulumi.StringOutput `pulumi:"splitIncludeService"`
	// Use Suite-B. Valid values: `disable`, `suite-b-gcm-128`, `suite-b-gcm-256`.
	SuiteB pulumi.StringOutput `pulumi:"suiteB"`
	// Set IKE transport protocol. Valid values: `udp`, `udp-fallback-tcp`, `tcp`.
	Transport pulumi.StringOutput `pulumi:"transport"`
	// Tunnel search method for when the interface is shared. Valid values: `selectors`, `nexthop`.
	TunnelSearch pulumi.StringOutput `pulumi:"tunnelSearch"`
	// Remote gateway type. Valid values: `static`, `dynamic`, `ddns`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Enable/disable support for Cisco UNITY Configuration Method extensions. Valid values: `disable`, `enable`.
	UnitySupport pulumi.StringOutput `pulumi:"unitySupport"`
	// User group name for dialup peers.
	Usrgrp pulumi.StringOutput `pulumi:"usrgrp"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// VNI of VXLAN tunnel.
	Vni pulumi.IntOutput `pulumi:"vni"`
	// GUI VPN Wizard Type.
	WizardType pulumi.StringOutput `pulumi:"wizardType"`
	// XAuth type. Valid values: `disable`, `client`, `pap`, `chap`, `auto`.
	Xauthtype pulumi.StringOutput `pulumi:"xauthtype"`
}

// NewPhase1interface registers a new resource with the given unique name, arguments, and options.
func NewPhase1interface(ctx *pulumi.Context,
	name string, args *Phase1interfaceArgs, opts ...pulumi.ResourceOption) (*Phase1interface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Proposal == nil {
		return nil, errors.New("invalid value for required argument 'Proposal'")
	}
	if args.Authpasswd != nil {
		args.Authpasswd = pulumi.ToSecret(args.Authpasswd).(pulumi.StringPtrInput)
	}
	if args.GroupAuthenticationSecret != nil {
		args.GroupAuthenticationSecret = pulumi.ToSecret(args.GroupAuthenticationSecret).(pulumi.StringPtrInput)
	}
	if args.PpkSecret != nil {
		args.PpkSecret = pulumi.ToSecret(args.PpkSecret).(pulumi.StringPtrInput)
	}
	if args.Psksecret != nil {
		args.Psksecret = pulumi.ToSecret(args.Psksecret).(pulumi.StringPtrInput)
	}
	if args.PsksecretRemote != nil {
		args.PsksecretRemote = pulumi.ToSecret(args.PsksecretRemote).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"authpasswd",
		"groupAuthenticationSecret",
		"ppkSecret",
		"psksecret",
		"psksecretRemote",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Phase1interface
	err := ctx.RegisterResource("fortios:vpn/ipsec/phase1interface:Phase1interface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPhase1interface gets an existing Phase1interface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPhase1interface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Phase1interfaceState, opts ...pulumi.ResourceOption) (*Phase1interface, error) {
	var resource Phase1interface
	err := ctx.ReadResource("fortios:vpn/ipsec/phase1interface:Phase1interface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Phase1interface resources.
type phase1interfaceState struct {
	// Enable/disable verification of RADIUS accounting record. Valid values: `enable`, `disable`.
	AcctVerify *string `pulumi:"acctVerify"`
	// Enable/disable automatically add a route to the remote gateway. Valid values: `enable`, `disable`.
	AddGwRoute *string `pulumi:"addGwRoute"`
	// Enable/disable control addition of a route to peer destination selector. Valid values: `disable`, `enable`.
	AddRoute *string `pulumi:"addRoute"`
	// Enable/disable use as an aggregate member. Valid values: `enable`, `disable`.
	AggregateMember *string `pulumi:"aggregateMember"`
	// Link weight for aggregate.
	AggregateWeight *int `pulumi:"aggregateWeight"`
	// Enable/disable assignment of IP to IPsec interface via configuration method. Valid values: `disable`, `enable`.
	AssignIp *string `pulumi:"assignIp"`
	// Method by which the IP address will be assigned. Valid values: `range`, `usrgrp`, `dhcp`, `name`.
	AssignIpFrom *string `pulumi:"assignIpFrom"`
	// Authentication method. Valid values: `psk`, `signature`.
	Authmethod *string `pulumi:"authmethod"`
	// Authentication method (remote side). Valid values: `psk`, `signature`.
	AuthmethodRemote *string `pulumi:"authmethodRemote"`
	// XAuth password (max 35 characters).
	Authpasswd *string `pulumi:"authpasswd"`
	// XAuth user name.
	Authusr *string `pulumi:"authusr"`
	// Authentication user group.
	Authusrgrp *string `pulumi:"authusrgrp"`
	// Allow/block set-up of short-cut tunnels between different network IDs. Valid values: `allow`, `block`.
	AutoDiscoveryCrossover *string `pulumi:"autoDiscoveryCrossover"`
	// Enable/disable forwarding auto-discovery short-cut messages. Valid values: `enable`, `disable`.
	AutoDiscoveryForwarder *string `pulumi:"autoDiscoveryForwarder"`
	// Interval between shortcut offer messages in seconds (1 - 300, default = 5).
	AutoDiscoveryOfferInterval *int `pulumi:"autoDiscoveryOfferInterval"`
	// Enable/disable use of pre-shared secrets for authentication of auto-discovery tunnels. Valid values: `enable`, `disable`.
	AutoDiscoveryPsk *string `pulumi:"autoDiscoveryPsk"`
	// Enable/disable accepting auto-discovery short-cut messages. Valid values: `enable`, `disable`.
	AutoDiscoveryReceiver *string `pulumi:"autoDiscoveryReceiver"`
	// Enable/disable sending auto-discovery short-cut messages. Valid values: `enable`, `disable`.
	AutoDiscoverySender *string `pulumi:"autoDiscoverySender"`
	// Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
	AutoDiscoveryShortcuts *string `pulumi:"autoDiscoveryShortcuts"`
	// Enable/disable automatic initiation of IKE SA negotiation. Valid values: `enable`, `disable`.
	AutoNegotiate *string `pulumi:"autoNegotiate"`
	// Enable/disable Azure AD Auto-Connect for FortiClient. Valid values: `enable`, `disable`.
	AzureAdAutoconnect *string `pulumi:"azureAdAutoconnect"`
	// Instruct unity clients about the backup gateway address(es). The structure of `backupGateway` block is documented below.
	BackupGateways []Phase1interfaceBackupGateway `pulumi:"backupGateways"`
	// Message that unity client should display after connecting.
	Banner *string `pulumi:"banner"`
	// Enable/disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945. Valid values: `enable`, `disable`.
	CertIdValidation *string `pulumi:"certIdValidation"`
	// CA certificate trust store. Valid values: `local`, `ems`.
	CertTrustStore *string `pulumi:"certTrustStore"`
	// The names of up to 4 signed personal certificates. The structure of `certificate` block is documented below.
	Certificates []Phase1interfaceCertificate `pulumi:"certificates"`
	// Enable/disable childless IKEv2 initiation (RFC 6023). Valid values: `enable`, `disable`.
	ChildlessIke *string `pulumi:"childlessIke"`
	// Enable/disable allowing the VPN client to bring up the tunnel when there is no traffic. Valid values: `disable`, `enable`.
	ClientAutoNegotiate *string `pulumi:"clientAutoNegotiate"`
	// Enable/disable allowing the VPN client to keep the tunnel up when there is no traffic. Valid values: `disable`, `enable`.
	ClientKeepAlive *string `pulumi:"clientKeepAlive"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// IPv4 address of default route gateway to use for traffic exiting the interface.
	DefaultGw *string `pulumi:"defaultGw"`
	// Priority for default gateway route. A higher priority number signifies a less preferred route.
	DefaultGwPriority *int `pulumi:"defaultGwPriority"`
	// Device ID carried by the device ID notification.
	DevId *string `pulumi:"devId"`
	// Enable/disable device ID notification. Valid values: `disable`, `enable`.
	DevIdNotification *string `pulumi:"devIdNotification"`
	// Relay agent IPv6 link address to use in DHCP6 requests.
	Dhcp6RaLinkaddr *string `pulumi:"dhcp6RaLinkaddr"`
	// Relay agent gateway IP address to use in the giaddr field of DHCP requests.
	DhcpRaGiaddr *string `pulumi:"dhcpRaGiaddr"`
	// DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
	Dhgrp *string `pulumi:"dhgrp"`
	// Enable/disable IKEv2 Digital Signature Authentication (RFC 7427). Valid values: `enable`, `disable`.
	DigitalSignatureAuth *string `pulumi:"digitalSignatureAuth"`
	// Distance for routes added by IKE (1 - 255).
	Distance *int `pulumi:"distance"`
	// DNS server mode. Valid values: `manual`, `auto`.
	DnsMode *string `pulumi:"dnsMode"`
	// Instruct unity clients about the default DNS domain.
	Domain *string `pulumi:"domain"`
	// Dead Peer Detection mode. Valid values: `disable`, `on-idle`, `on-demand`.
	Dpd *string `pulumi:"dpd"`
	// Number of DPD retry attempts.
	DpdRetrycount *int `pulumi:"dpdRetrycount"`
	// DPD retry interval.
	DpdRetryinterval *string `pulumi:"dpdRetryinterval"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable IKEv2 EAP authentication. Valid values: `enable`, `disable`.
	Eap *string `pulumi:"eap"`
	// Enable/disable peer certificate authentication in addition to EAP if peer is a FortiClient endpoint. Valid values: `enable`, `disable`.
	EapCertAuth *string `pulumi:"eapCertAuth"`
	// Peer group excluded from EAP authentication.
	EapExcludePeergrp *string `pulumi:"eapExcludePeergrp"`
	// IKEv2 EAP peer identity type. Valid values: `use-id-payload`, `send-request`.
	EapIdentity *string `pulumi:"eapIdentity"`
	// Enable/disable verification of EMS serial number. Valid values: `enable`, `disable`.
	EmsSnCheck *string `pulumi:"emsSnCheck"`
	// Local IPv4 address of GRE/VXLAN tunnel.
	EncapLocalGw4 *string `pulumi:"encapLocalGw4"`
	// Local IPv6 address of GRE/VXLAN tunnel.
	EncapLocalGw6 *string `pulumi:"encapLocalGw6"`
	// Remote IPv4 address of GRE/VXLAN tunnel.
	EncapRemoteGw4 *string `pulumi:"encapRemoteGw4"`
	// Remote IPv6 address of GRE/VXLAN tunnel.
	EncapRemoteGw6 *string `pulumi:"encapRemoteGw6"`
	// Enable/disable GRE/VXLAN encapsulation.
	Encapsulation *string `pulumi:"encapsulation"`
	// Source for GRE/VXLAN tunnel address. Valid values: `ike`, `ipv4`, `ipv6`.
	EncapsulationAddress *string `pulumi:"encapsulationAddress"`
	// Enable/disable peer ID uniqueness check. Valid values: `disable`, `keep-new`, `keep-old`.
	EnforceUniqueId *string `pulumi:"enforceUniqueId"`
	// Extended sequence number (ESN) negotiation. Valid values: `require`, `allow`, `disable`.
	Esn *string `pulumi:"esn"`
	// Enable/disable device identifier exchange with peer FortiGate units for use of VPN monitor data by FortiManager. Valid values: `enable`, `disable`.
	ExchangeFgtDeviceId *string `pulumi:"exchangeFgtDeviceId"`
	// Enable/disable exchange of IPsec interface IP address. Valid values: `enable`, `disable`.
	ExchangeInterfaceIp *string `pulumi:"exchangeInterfaceIp"`
	// IPv4 address to exchange with peers.
	ExchangeIpAddr4 *string `pulumi:"exchangeIpAddr4"`
	// IPv6 address to exchange with peers
	ExchangeIpAddr6 *string `pulumi:"exchangeIpAddr6"`
	// Timeout in seconds before falling back IKE/IPsec traffic to tcp.
	FallbackTcpThreshold *int `pulumi:"fallbackTcpThreshold"`
	// Number of base Forward Error Correction packets (1 - 100).
	FecBase *int `pulumi:"fecBase"`
	// ipsec fec encoding/decoding algorithm (0: reed-solomon, 1: xor).
	FecCodec *int `pulumi:"fecCodec"`
	// Forward Error Correction encoding/decoding algorithm. Valid values: `rs`, `xor`.
	FecCodecString *string `pulumi:"fecCodecString"`
	// Enable/disable Forward Error Correction for egress IPsec traffic. Valid values: `enable`, `disable`.
	FecEgress *string `pulumi:"fecEgress"`
	// SD-WAN health check.
	FecHealthCheck *string `pulumi:"fecHealthCheck"`
	// Enable/disable Forward Error Correction for ingress IPsec traffic. Valid values: `enable`, `disable`.
	FecIngress *string `pulumi:"fecIngress"`
	// Forward Error Correction (FEC) mapping profile.
	FecMappingProfile *string `pulumi:"fecMappingProfile"`
	// Timeout in milliseconds before dropping Forward Error Correction packets (1 - 10000).
	FecReceiveTimeout *int `pulumi:"fecReceiveTimeout"`
	// Number of redundant Forward Error Correction packets (1 - 100).
	FecRedundant *int `pulumi:"fecRedundant"`
	// Timeout in milliseconds before sending Forward Error Correction packets (1 - 1000).
	FecSendTimeout *int `pulumi:"fecSendTimeout"`
	// Enable/disable IPsec syncing of tunnels for FGSP IPsec. Valid values: `enable`, `disable`.
	FgspSync *string `pulumi:"fgspSync"`
	// Enable/disable FortiClient enforcement. Valid values: `enable`, `disable`.
	ForticlientEnforcement *string `pulumi:"forticlientEnforcement"`
	// Enable/disable Fortinet ESP encapsulaton. Valid values: `enable`, `disable`.
	FortinetEsp *string `pulumi:"fortinetEsp"`
	// Enable/disable fragment IKE message on re-transmission. Valid values: `enable`, `disable`.
	Fragmentation *string `pulumi:"fragmentation"`
	// IKE fragmentation MTU (500 - 16000).
	FragmentationMtu *int `pulumi:"fragmentationMtu"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable IKEv2 IDi group authentication. Valid values: `enable`, `disable`.
	GroupAuthentication *string `pulumi:"groupAuthentication"`
	// Password for IKEv2 IDi group authentication.  (ASCII string or hexadecimal indicated by a leading 0x.)
	GroupAuthenticationSecret *string `pulumi:"groupAuthenticationSecret"`
	// Enable/disable sequence number jump ahead for IPsec HA. Valid values: `enable`, `disable`.
	HaSyncEspSeqno *string `pulumi:"haSyncEspSeqno"`
	// Enable/disable IPsec tunnel idle timeout. Valid values: `enable`, `disable`.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// IPsec tunnel idle timeout in minutes (5 - 43200).
	IdleTimeoutinterval *int `pulumi:"idleTimeoutinterval"`
	// IKE protocol version. Valid values: `1`, `2`.
	IkeVersion *string `pulumi:"ikeVersion"`
	// Enable/disable copy the dscp in the ESP header to the inner IP Header. Valid values: `enable`, `disable`.
	InboundDscpCopy *string `pulumi:"inboundDscpCopy"`
	// Enable/disable allow local LAN access on unity clients. Valid values: `disable`, `enable`.
	IncludeLocalLan *string `pulumi:"includeLocalLan"`
	// Local physical, aggregate, or VLAN outgoing interface.
	Interface *string `pulumi:"interface"`
	// One or more internal domain names in quotes separated by spaces. The structure of `internalDomainList` block is documented below.
	InternalDomainLists []Phase1interfaceInternalDomainList `pulumi:"internalDomainLists"`
	// IP address reuse delay interval in seconds (0 - 28800).
	IpDelayInterval *int `pulumi:"ipDelayInterval"`
	// Determine whether IP packets are fragmented before or after IPsec encapsulation. Valid values: `pre-encapsulation`, `post-encapsulation`.
	IpFragmentation *string `pulumi:"ipFragmentation"`
	// IP version to use for VPN interface. Valid values: `4`, `6`.
	IpVersion *string `pulumi:"ipVersion"`
	// IPv4 DNS server 1.
	Ipv4DnsServer1 *string `pulumi:"ipv4DnsServer1"`
	// IPv4 DNS server 2.
	Ipv4DnsServer2 *string `pulumi:"ipv4DnsServer2"`
	// IPv4 DNS server 3.
	Ipv4DnsServer3 *string `pulumi:"ipv4DnsServer3"`
	// End of IPv4 range.
	Ipv4EndIp *string `pulumi:"ipv4EndIp"`
	// Configuration Method IPv4 exclude ranges. The structure of `ipv4ExcludeRange` block is documented below.
	Ipv4ExcludeRanges []Phase1interfaceIpv4ExcludeRange `pulumi:"ipv4ExcludeRanges"`
	// IPv4 address name.
	Ipv4Name *string `pulumi:"ipv4Name"`
	// IPv4 Netmask.
	Ipv4Netmask *string `pulumi:"ipv4Netmask"`
	// IPv4 subnets that should not be sent over the IPsec tunnel.
	Ipv4SplitExclude *string `pulumi:"ipv4SplitExclude"`
	// IPv4 split-include subnets.
	Ipv4SplitInclude *string `pulumi:"ipv4SplitInclude"`
	// Start of IPv4 range.
	Ipv4StartIp *string `pulumi:"ipv4StartIp"`
	// WINS server 1.
	Ipv4WinsServer1 *string `pulumi:"ipv4WinsServer1"`
	// WINS server 2.
	Ipv4WinsServer2 *string `pulumi:"ipv4WinsServer2"`
	// IPv6 DNS server 1.
	Ipv6DnsServer1 *string `pulumi:"ipv6DnsServer1"`
	// IPv6 DNS server 2.
	Ipv6DnsServer2 *string `pulumi:"ipv6DnsServer2"`
	// IPv6 DNS server 3.
	Ipv6DnsServer3 *string `pulumi:"ipv6DnsServer3"`
	// End of IPv6 range.
	Ipv6EndIp *string `pulumi:"ipv6EndIp"`
	// Configuration method IPv6 exclude ranges. The structure of `ipv6ExcludeRange` block is documented below.
	Ipv6ExcludeRanges []Phase1interfaceIpv6ExcludeRange `pulumi:"ipv6ExcludeRanges"`
	// IPv6 address name.
	Ipv6Name *string `pulumi:"ipv6Name"`
	// IPv6 prefix.
	Ipv6Prefix *int `pulumi:"ipv6Prefix"`
	// IPv6 subnets that should not be sent over the IPsec tunnel.
	Ipv6SplitExclude *string `pulumi:"ipv6SplitExclude"`
	// IPv6 split-include subnets.
	Ipv6SplitInclude *string `pulumi:"ipv6SplitInclude"`
	// Start of IPv6 range.
	Ipv6StartIp *string `pulumi:"ipv6StartIp"`
	// NAT-T keep alive interval.
	Keepalive *int `pulumi:"keepalive"`
	// Time to wait in seconds before phase 1 encryption key expires.
	Keylife *int `pulumi:"keylife"`
	// Key Management Services server.
	Kms *string `pulumi:"kms"`
	// VPN tunnel underlay link cost.
	LinkCost *int `pulumi:"linkCost"`
	// IPv4 address of the local gateway's external interface.
	LocalGw *string `pulumi:"localGw"`
	// IPv6 address of the local gateway's external interface.
	LocalGw6 *string `pulumi:"localGw6"`
	// Local ID.
	Localid *string `pulumi:"localid"`
	// Local ID type. Valid values: `auto`, `fqdn`, `user-fqdn`, `keyid`, `address`, `asn1dn`.
	LocalidType *string `pulumi:"localidType"`
	// Enable/disable asymmetric routing for IKE traffic on loopback interface. Valid values: `enable`, `disable`.
	LoopbackAsymroute *string `pulumi:"loopbackAsymroute"`
	// Add selectors containing subsets of the configuration depending on traffic. Valid values: `disable`, `subnet`, `host`.
	MeshSelectorType *string `pulumi:"meshSelectorType"`
	// The ID protection mode used to establish a secure channel. Valid values: `aggressive`, `main`.
	Mode *string `pulumi:"mode"`
	// Enable/disable configuration method. Valid values: `disable`, `enable`.
	ModeCfg *string `pulumi:"modeCfg"`
	// Enable/disable mode-cfg client to use custom phase2 selectors. Valid values: `disable`, `enable`.
	ModeCfgAllowClientSelector *string `pulumi:"modeCfgAllowClientSelector"`
	// IPsec interface as backup for primary interface.
	Monitor *string `pulumi:"monitor"`
	// Time to wait in seconds before recovery once primary re-establishes.
	MonitorHoldDownDelay *int `pulumi:"monitorHoldDownDelay"`
	// Time of day at which to fail back to primary after it re-establishes.
	MonitorHoldDownTime *string `pulumi:"monitorHoldDownTime"`
	// Recovery time method when primary interface re-establishes. Valid values: `immediate`, `delay`, `time`.
	MonitorHoldDownType *string `pulumi:"monitorHoldDownType"`
	// Day of the week to recover once primary re-establishes. Valid values: `everyday`, `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	MonitorHoldDownWeekday *string `pulumi:"monitorHoldDownWeekday"`
	// Minimum number of links to become degraded before activating this interface.  Zero (0) means all links must be down before activating this interface.
	MonitorMin *int `pulumi:"monitorMin"`
	// IPsec remote gateway name.
	Name *string `pulumi:"name"`
	// Enable/disable NAT traversal. Valid values: `enable`, `disable`, `forced`.
	Nattraversal *string `pulumi:"nattraversal"`
	// IKE SA negotiation timeout in seconds (1 - 300).
	NegotiateTimeout *int `pulumi:"negotiateTimeout"`
	// Enable/disable kernel device creation. Valid values: `enable`, `disable`.
	NetDevice *string `pulumi:"netDevice"`
	// VPN gateway network ID.
	NetworkId *int `pulumi:"networkId"`
	// Enable/disable network overlays. Valid values: `disable`, `enable`.
	NetworkOverlay *string `pulumi:"networkOverlay"`
	// Enable/disable offloading NPU. Valid values: `enable`, `disable`.
	NpuOffload *string `pulumi:"npuOffload"`
	// Enable/disable packet distribution (RPS) on the IPsec interface. Valid values: `enable`, `disable`.
	PacketRedistribution *string `pulumi:"packetRedistribution"`
	// Enable/disable IPsec passive mode for static tunnels. Valid values: `enable`, `disable`.
	PassiveMode *string `pulumi:"passiveMode"`
	// Accept this peer certificate.
	Peer *string `pulumi:"peer"`
	// Accept this peer certificate group.
	Peergrp *string `pulumi:"peergrp"`
	// Accept this peer identity.
	Peerid *string `pulumi:"peerid"`
	// Accept this peer type. Valid values: `any`, `one`, `dialup`, `peer`, `peergrp`.
	Peertype *string `pulumi:"peertype"`
	// Enable/disable IKEv2 Postquantum Preshared Key (PPK). Valid values: `disable`, `allow`, `require`.
	Ppk *string `pulumi:"ppk"`
	// IKEv2 Postquantum Preshared Key Identity.
	PpkIdentity *string `pulumi:"ppkIdentity"`
	// IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
	PpkSecret *string `pulumi:"ppkSecret"`
	// Priority for routes added by IKE (0 - 4294967295).
	Priority *int `pulumi:"priority"`
	// Phase1 proposal. Valid values: `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm-prfsha1`, `aes128gcm-prfsha256`, `aes128gcm-prfsha384`, `aes128gcm-prfsha512`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm-prfsha1`, `aes256gcm-prfsha256`, `aes256gcm-prfsha384`, `aes256gcm-prfsha512`, `chacha20poly1305-prfsha1`, `chacha20poly1305-prfsha256`, `chacha20poly1305-prfsha384`, `chacha20poly1305-prfsha512`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
	Proposal *string `pulumi:"proposal"`
	// Pre-shared secret for PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
	Psksecret *string `pulumi:"psksecret"`
	// Pre-shared secret for remote side PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
	PsksecretRemote *string `pulumi:"psksecretRemote"`
	// Enable/disable use of Quantum Key Distribution (QKD) server. Valid values: `disable`, `allow`, `require`.
	Qkd *string `pulumi:"qkd"`
	// Quantum Key Distribution (QKD) server profile.
	QkdProfile *string `pulumi:"qkdProfile"`
	// Enable/disable re-authentication upon IKE SA lifetime expiration. Valid values: `disable`, `enable`.
	Reauth *string `pulumi:"reauth"`
	// Enable/disable phase1 rekey. Valid values: `enable`, `disable`.
	Rekey *string `pulumi:"rekey"`
	// IPv4 address of the remote gateway's external interface.
	RemoteGw *string `pulumi:"remoteGw"`
	// IPv6 address of the remote gateway's external interface.
	RemoteGw6 *string `pulumi:"remoteGw6"`
	// Domain name of remote gateway (eg. name.DDNS.com).
	RemotegwDdns *string `pulumi:"remotegwDdns"`
	// Digital Signature Authentication RSA signature format. Valid values: `pkcs1`, `pss`.
	RsaSignatureFormat *string `pulumi:"rsaSignatureFormat"`
	// Enable/disable IKEv2 RSA signature hash algorithm override. Valid values: `enable`, `disable`.
	RsaSignatureHashOverride *string `pulumi:"rsaSignatureHashOverride"`
	// Enable/disable saving XAuth username and password on VPN clients. Valid values: `disable`, `enable`.
	SavePassword *string `pulumi:"savePassword"`
	// Enable/disable sending certificate chain. Valid values: `enable`, `disable`.
	SendCertChain *string `pulumi:"sendCertChain"`
	// Digital Signature Authentication hash algorithms. Valid values: `sha1`, `sha2-256`, `sha2-384`, `sha2-512`.
	SignatureHashAlg *string `pulumi:"signatureHashAlg"`
	// Split-include services.
	SplitIncludeService *string `pulumi:"splitIncludeService"`
	// Use Suite-B. Valid values: `disable`, `suite-b-gcm-128`, `suite-b-gcm-256`.
	SuiteB *string `pulumi:"suiteB"`
	// Set IKE transport protocol. Valid values: `udp`, `udp-fallback-tcp`, `tcp`.
	Transport *string `pulumi:"transport"`
	// Tunnel search method for when the interface is shared. Valid values: `selectors`, `nexthop`.
	TunnelSearch *string `pulumi:"tunnelSearch"`
	// Remote gateway type. Valid values: `static`, `dynamic`, `ddns`.
	Type *string `pulumi:"type"`
	// Enable/disable support for Cisco UNITY Configuration Method extensions. Valid values: `disable`, `enable`.
	UnitySupport *string `pulumi:"unitySupport"`
	// User group name for dialup peers.
	Usrgrp *string `pulumi:"usrgrp"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// VNI of VXLAN tunnel.
	Vni *int `pulumi:"vni"`
	// GUI VPN Wizard Type.
	WizardType *string `pulumi:"wizardType"`
	// XAuth type. Valid values: `disable`, `client`, `pap`, `chap`, `auto`.
	Xauthtype *string `pulumi:"xauthtype"`
}

type Phase1interfaceState struct {
	// Enable/disable verification of RADIUS accounting record. Valid values: `enable`, `disable`.
	AcctVerify pulumi.StringPtrInput
	// Enable/disable automatically add a route to the remote gateway. Valid values: `enable`, `disable`.
	AddGwRoute pulumi.StringPtrInput
	// Enable/disable control addition of a route to peer destination selector. Valid values: `disable`, `enable`.
	AddRoute pulumi.StringPtrInput
	// Enable/disable use as an aggregate member. Valid values: `enable`, `disable`.
	AggregateMember pulumi.StringPtrInput
	// Link weight for aggregate.
	AggregateWeight pulumi.IntPtrInput
	// Enable/disable assignment of IP to IPsec interface via configuration method. Valid values: `disable`, `enable`.
	AssignIp pulumi.StringPtrInput
	// Method by which the IP address will be assigned. Valid values: `range`, `usrgrp`, `dhcp`, `name`.
	AssignIpFrom pulumi.StringPtrInput
	// Authentication method. Valid values: `psk`, `signature`.
	Authmethod pulumi.StringPtrInput
	// Authentication method (remote side). Valid values: `psk`, `signature`.
	AuthmethodRemote pulumi.StringPtrInput
	// XAuth password (max 35 characters).
	Authpasswd pulumi.StringPtrInput
	// XAuth user name.
	Authusr pulumi.StringPtrInput
	// Authentication user group.
	Authusrgrp pulumi.StringPtrInput
	// Allow/block set-up of short-cut tunnels between different network IDs. Valid values: `allow`, `block`.
	AutoDiscoveryCrossover pulumi.StringPtrInput
	// Enable/disable forwarding auto-discovery short-cut messages. Valid values: `enable`, `disable`.
	AutoDiscoveryForwarder pulumi.StringPtrInput
	// Interval between shortcut offer messages in seconds (1 - 300, default = 5).
	AutoDiscoveryOfferInterval pulumi.IntPtrInput
	// Enable/disable use of pre-shared secrets for authentication of auto-discovery tunnels. Valid values: `enable`, `disable`.
	AutoDiscoveryPsk pulumi.StringPtrInput
	// Enable/disable accepting auto-discovery short-cut messages. Valid values: `enable`, `disable`.
	AutoDiscoveryReceiver pulumi.StringPtrInput
	// Enable/disable sending auto-discovery short-cut messages. Valid values: `enable`, `disable`.
	AutoDiscoverySender pulumi.StringPtrInput
	// Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
	AutoDiscoveryShortcuts pulumi.StringPtrInput
	// Enable/disable automatic initiation of IKE SA negotiation. Valid values: `enable`, `disable`.
	AutoNegotiate pulumi.StringPtrInput
	// Enable/disable Azure AD Auto-Connect for FortiClient. Valid values: `enable`, `disable`.
	AzureAdAutoconnect pulumi.StringPtrInput
	// Instruct unity clients about the backup gateway address(es). The structure of `backupGateway` block is documented below.
	BackupGateways Phase1interfaceBackupGatewayArrayInput
	// Message that unity client should display after connecting.
	Banner pulumi.StringPtrInput
	// Enable/disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945. Valid values: `enable`, `disable`.
	CertIdValidation pulumi.StringPtrInput
	// CA certificate trust store. Valid values: `local`, `ems`.
	CertTrustStore pulumi.StringPtrInput
	// The names of up to 4 signed personal certificates. The structure of `certificate` block is documented below.
	Certificates Phase1interfaceCertificateArrayInput
	// Enable/disable childless IKEv2 initiation (RFC 6023). Valid values: `enable`, `disable`.
	ChildlessIke pulumi.StringPtrInput
	// Enable/disable allowing the VPN client to bring up the tunnel when there is no traffic. Valid values: `disable`, `enable`.
	ClientAutoNegotiate pulumi.StringPtrInput
	// Enable/disable allowing the VPN client to keep the tunnel up when there is no traffic. Valid values: `disable`, `enable`.
	ClientKeepAlive pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// IPv4 address of default route gateway to use for traffic exiting the interface.
	DefaultGw pulumi.StringPtrInput
	// Priority for default gateway route. A higher priority number signifies a less preferred route.
	DefaultGwPriority pulumi.IntPtrInput
	// Device ID carried by the device ID notification.
	DevId pulumi.StringPtrInput
	// Enable/disable device ID notification. Valid values: `disable`, `enable`.
	DevIdNotification pulumi.StringPtrInput
	// Relay agent IPv6 link address to use in DHCP6 requests.
	Dhcp6RaLinkaddr pulumi.StringPtrInput
	// Relay agent gateway IP address to use in the giaddr field of DHCP requests.
	DhcpRaGiaddr pulumi.StringPtrInput
	// DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
	Dhgrp pulumi.StringPtrInput
	// Enable/disable IKEv2 Digital Signature Authentication (RFC 7427). Valid values: `enable`, `disable`.
	DigitalSignatureAuth pulumi.StringPtrInput
	// Distance for routes added by IKE (1 - 255).
	Distance pulumi.IntPtrInput
	// DNS server mode. Valid values: `manual`, `auto`.
	DnsMode pulumi.StringPtrInput
	// Instruct unity clients about the default DNS domain.
	Domain pulumi.StringPtrInput
	// Dead Peer Detection mode. Valid values: `disable`, `on-idle`, `on-demand`.
	Dpd pulumi.StringPtrInput
	// Number of DPD retry attempts.
	DpdRetrycount pulumi.IntPtrInput
	// DPD retry interval.
	DpdRetryinterval pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable IKEv2 EAP authentication. Valid values: `enable`, `disable`.
	Eap pulumi.StringPtrInput
	// Enable/disable peer certificate authentication in addition to EAP if peer is a FortiClient endpoint. Valid values: `enable`, `disable`.
	EapCertAuth pulumi.StringPtrInput
	// Peer group excluded from EAP authentication.
	EapExcludePeergrp pulumi.StringPtrInput
	// IKEv2 EAP peer identity type. Valid values: `use-id-payload`, `send-request`.
	EapIdentity pulumi.StringPtrInput
	// Enable/disable verification of EMS serial number. Valid values: `enable`, `disable`.
	EmsSnCheck pulumi.StringPtrInput
	// Local IPv4 address of GRE/VXLAN tunnel.
	EncapLocalGw4 pulumi.StringPtrInput
	// Local IPv6 address of GRE/VXLAN tunnel.
	EncapLocalGw6 pulumi.StringPtrInput
	// Remote IPv4 address of GRE/VXLAN tunnel.
	EncapRemoteGw4 pulumi.StringPtrInput
	// Remote IPv6 address of GRE/VXLAN tunnel.
	EncapRemoteGw6 pulumi.StringPtrInput
	// Enable/disable GRE/VXLAN encapsulation.
	Encapsulation pulumi.StringPtrInput
	// Source for GRE/VXLAN tunnel address. Valid values: `ike`, `ipv4`, `ipv6`.
	EncapsulationAddress pulumi.StringPtrInput
	// Enable/disable peer ID uniqueness check. Valid values: `disable`, `keep-new`, `keep-old`.
	EnforceUniqueId pulumi.StringPtrInput
	// Extended sequence number (ESN) negotiation. Valid values: `require`, `allow`, `disable`.
	Esn pulumi.StringPtrInput
	// Enable/disable device identifier exchange with peer FortiGate units for use of VPN monitor data by FortiManager. Valid values: `enable`, `disable`.
	ExchangeFgtDeviceId pulumi.StringPtrInput
	// Enable/disable exchange of IPsec interface IP address. Valid values: `enable`, `disable`.
	ExchangeInterfaceIp pulumi.StringPtrInput
	// IPv4 address to exchange with peers.
	ExchangeIpAddr4 pulumi.StringPtrInput
	// IPv6 address to exchange with peers
	ExchangeIpAddr6 pulumi.StringPtrInput
	// Timeout in seconds before falling back IKE/IPsec traffic to tcp.
	FallbackTcpThreshold pulumi.IntPtrInput
	// Number of base Forward Error Correction packets (1 - 100).
	FecBase pulumi.IntPtrInput
	// ipsec fec encoding/decoding algorithm (0: reed-solomon, 1: xor).
	FecCodec pulumi.IntPtrInput
	// Forward Error Correction encoding/decoding algorithm. Valid values: `rs`, `xor`.
	FecCodecString pulumi.StringPtrInput
	// Enable/disable Forward Error Correction for egress IPsec traffic. Valid values: `enable`, `disable`.
	FecEgress pulumi.StringPtrInput
	// SD-WAN health check.
	FecHealthCheck pulumi.StringPtrInput
	// Enable/disable Forward Error Correction for ingress IPsec traffic. Valid values: `enable`, `disable`.
	FecIngress pulumi.StringPtrInput
	// Forward Error Correction (FEC) mapping profile.
	FecMappingProfile pulumi.StringPtrInput
	// Timeout in milliseconds before dropping Forward Error Correction packets (1 - 10000).
	FecReceiveTimeout pulumi.IntPtrInput
	// Number of redundant Forward Error Correction packets (1 - 100).
	FecRedundant pulumi.IntPtrInput
	// Timeout in milliseconds before sending Forward Error Correction packets (1 - 1000).
	FecSendTimeout pulumi.IntPtrInput
	// Enable/disable IPsec syncing of tunnels for FGSP IPsec. Valid values: `enable`, `disable`.
	FgspSync pulumi.StringPtrInput
	// Enable/disable FortiClient enforcement. Valid values: `enable`, `disable`.
	ForticlientEnforcement pulumi.StringPtrInput
	// Enable/disable Fortinet ESP encapsulaton. Valid values: `enable`, `disable`.
	FortinetEsp pulumi.StringPtrInput
	// Enable/disable fragment IKE message on re-transmission. Valid values: `enable`, `disable`.
	Fragmentation pulumi.StringPtrInput
	// IKE fragmentation MTU (500 - 16000).
	FragmentationMtu pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable IKEv2 IDi group authentication. Valid values: `enable`, `disable`.
	GroupAuthentication pulumi.StringPtrInput
	// Password for IKEv2 IDi group authentication.  (ASCII string or hexadecimal indicated by a leading 0x.)
	GroupAuthenticationSecret pulumi.StringPtrInput
	// Enable/disable sequence number jump ahead for IPsec HA. Valid values: `enable`, `disable`.
	HaSyncEspSeqno pulumi.StringPtrInput
	// Enable/disable IPsec tunnel idle timeout. Valid values: `enable`, `disable`.
	IdleTimeout pulumi.StringPtrInput
	// IPsec tunnel idle timeout in minutes (5 - 43200).
	IdleTimeoutinterval pulumi.IntPtrInput
	// IKE protocol version. Valid values: `1`, `2`.
	IkeVersion pulumi.StringPtrInput
	// Enable/disable copy the dscp in the ESP header to the inner IP Header. Valid values: `enable`, `disable`.
	InboundDscpCopy pulumi.StringPtrInput
	// Enable/disable allow local LAN access on unity clients. Valid values: `disable`, `enable`.
	IncludeLocalLan pulumi.StringPtrInput
	// Local physical, aggregate, or VLAN outgoing interface.
	Interface pulumi.StringPtrInput
	// One or more internal domain names in quotes separated by spaces. The structure of `internalDomainList` block is documented below.
	InternalDomainLists Phase1interfaceInternalDomainListArrayInput
	// IP address reuse delay interval in seconds (0 - 28800).
	IpDelayInterval pulumi.IntPtrInput
	// Determine whether IP packets are fragmented before or after IPsec encapsulation. Valid values: `pre-encapsulation`, `post-encapsulation`.
	IpFragmentation pulumi.StringPtrInput
	// IP version to use for VPN interface. Valid values: `4`, `6`.
	IpVersion pulumi.StringPtrInput
	// IPv4 DNS server 1.
	Ipv4DnsServer1 pulumi.StringPtrInput
	// IPv4 DNS server 2.
	Ipv4DnsServer2 pulumi.StringPtrInput
	// IPv4 DNS server 3.
	Ipv4DnsServer3 pulumi.StringPtrInput
	// End of IPv4 range.
	Ipv4EndIp pulumi.StringPtrInput
	// Configuration Method IPv4 exclude ranges. The structure of `ipv4ExcludeRange` block is documented below.
	Ipv4ExcludeRanges Phase1interfaceIpv4ExcludeRangeArrayInput
	// IPv4 address name.
	Ipv4Name pulumi.StringPtrInput
	// IPv4 Netmask.
	Ipv4Netmask pulumi.StringPtrInput
	// IPv4 subnets that should not be sent over the IPsec tunnel.
	Ipv4SplitExclude pulumi.StringPtrInput
	// IPv4 split-include subnets.
	Ipv4SplitInclude pulumi.StringPtrInput
	// Start of IPv4 range.
	Ipv4StartIp pulumi.StringPtrInput
	// WINS server 1.
	Ipv4WinsServer1 pulumi.StringPtrInput
	// WINS server 2.
	Ipv4WinsServer2 pulumi.StringPtrInput
	// IPv6 DNS server 1.
	Ipv6DnsServer1 pulumi.StringPtrInput
	// IPv6 DNS server 2.
	Ipv6DnsServer2 pulumi.StringPtrInput
	// IPv6 DNS server 3.
	Ipv6DnsServer3 pulumi.StringPtrInput
	// End of IPv6 range.
	Ipv6EndIp pulumi.StringPtrInput
	// Configuration method IPv6 exclude ranges. The structure of `ipv6ExcludeRange` block is documented below.
	Ipv6ExcludeRanges Phase1interfaceIpv6ExcludeRangeArrayInput
	// IPv6 address name.
	Ipv6Name pulumi.StringPtrInput
	// IPv6 prefix.
	Ipv6Prefix pulumi.IntPtrInput
	// IPv6 subnets that should not be sent over the IPsec tunnel.
	Ipv6SplitExclude pulumi.StringPtrInput
	// IPv6 split-include subnets.
	Ipv6SplitInclude pulumi.StringPtrInput
	// Start of IPv6 range.
	Ipv6StartIp pulumi.StringPtrInput
	// NAT-T keep alive interval.
	Keepalive pulumi.IntPtrInput
	// Time to wait in seconds before phase 1 encryption key expires.
	Keylife pulumi.IntPtrInput
	// Key Management Services server.
	Kms pulumi.StringPtrInput
	// VPN tunnel underlay link cost.
	LinkCost pulumi.IntPtrInput
	// IPv4 address of the local gateway's external interface.
	LocalGw pulumi.StringPtrInput
	// IPv6 address of the local gateway's external interface.
	LocalGw6 pulumi.StringPtrInput
	// Local ID.
	Localid pulumi.StringPtrInput
	// Local ID type. Valid values: `auto`, `fqdn`, `user-fqdn`, `keyid`, `address`, `asn1dn`.
	LocalidType pulumi.StringPtrInput
	// Enable/disable asymmetric routing for IKE traffic on loopback interface. Valid values: `enable`, `disable`.
	LoopbackAsymroute pulumi.StringPtrInput
	// Add selectors containing subsets of the configuration depending on traffic. Valid values: `disable`, `subnet`, `host`.
	MeshSelectorType pulumi.StringPtrInput
	// The ID protection mode used to establish a secure channel. Valid values: `aggressive`, `main`.
	Mode pulumi.StringPtrInput
	// Enable/disable configuration method. Valid values: `disable`, `enable`.
	ModeCfg pulumi.StringPtrInput
	// Enable/disable mode-cfg client to use custom phase2 selectors. Valid values: `disable`, `enable`.
	ModeCfgAllowClientSelector pulumi.StringPtrInput
	// IPsec interface as backup for primary interface.
	Monitor pulumi.StringPtrInput
	// Time to wait in seconds before recovery once primary re-establishes.
	MonitorHoldDownDelay pulumi.IntPtrInput
	// Time of day at which to fail back to primary after it re-establishes.
	MonitorHoldDownTime pulumi.StringPtrInput
	// Recovery time method when primary interface re-establishes. Valid values: `immediate`, `delay`, `time`.
	MonitorHoldDownType pulumi.StringPtrInput
	// Day of the week to recover once primary re-establishes. Valid values: `everyday`, `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	MonitorHoldDownWeekday pulumi.StringPtrInput
	// Minimum number of links to become degraded before activating this interface.  Zero (0) means all links must be down before activating this interface.
	MonitorMin pulumi.IntPtrInput
	// IPsec remote gateway name.
	Name pulumi.StringPtrInput
	// Enable/disable NAT traversal. Valid values: `enable`, `disable`, `forced`.
	Nattraversal pulumi.StringPtrInput
	// IKE SA negotiation timeout in seconds (1 - 300).
	NegotiateTimeout pulumi.IntPtrInput
	// Enable/disable kernel device creation. Valid values: `enable`, `disable`.
	NetDevice pulumi.StringPtrInput
	// VPN gateway network ID.
	NetworkId pulumi.IntPtrInput
	// Enable/disable network overlays. Valid values: `disable`, `enable`.
	NetworkOverlay pulumi.StringPtrInput
	// Enable/disable offloading NPU. Valid values: `enable`, `disable`.
	NpuOffload pulumi.StringPtrInput
	// Enable/disable packet distribution (RPS) on the IPsec interface. Valid values: `enable`, `disable`.
	PacketRedistribution pulumi.StringPtrInput
	// Enable/disable IPsec passive mode for static tunnels. Valid values: `enable`, `disable`.
	PassiveMode pulumi.StringPtrInput
	// Accept this peer certificate.
	Peer pulumi.StringPtrInput
	// Accept this peer certificate group.
	Peergrp pulumi.StringPtrInput
	// Accept this peer identity.
	Peerid pulumi.StringPtrInput
	// Accept this peer type. Valid values: `any`, `one`, `dialup`, `peer`, `peergrp`.
	Peertype pulumi.StringPtrInput
	// Enable/disable IKEv2 Postquantum Preshared Key (PPK). Valid values: `disable`, `allow`, `require`.
	Ppk pulumi.StringPtrInput
	// IKEv2 Postquantum Preshared Key Identity.
	PpkIdentity pulumi.StringPtrInput
	// IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
	PpkSecret pulumi.StringPtrInput
	// Priority for routes added by IKE (0 - 4294967295).
	Priority pulumi.IntPtrInput
	// Phase1 proposal. Valid values: `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm-prfsha1`, `aes128gcm-prfsha256`, `aes128gcm-prfsha384`, `aes128gcm-prfsha512`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm-prfsha1`, `aes256gcm-prfsha256`, `aes256gcm-prfsha384`, `aes256gcm-prfsha512`, `chacha20poly1305-prfsha1`, `chacha20poly1305-prfsha256`, `chacha20poly1305-prfsha384`, `chacha20poly1305-prfsha512`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
	Proposal pulumi.StringPtrInput
	// Pre-shared secret for PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
	Psksecret pulumi.StringPtrInput
	// Pre-shared secret for remote side PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
	PsksecretRemote pulumi.StringPtrInput
	// Enable/disable use of Quantum Key Distribution (QKD) server. Valid values: `disable`, `allow`, `require`.
	Qkd pulumi.StringPtrInput
	// Quantum Key Distribution (QKD) server profile.
	QkdProfile pulumi.StringPtrInput
	// Enable/disable re-authentication upon IKE SA lifetime expiration. Valid values: `disable`, `enable`.
	Reauth pulumi.StringPtrInput
	// Enable/disable phase1 rekey. Valid values: `enable`, `disable`.
	Rekey pulumi.StringPtrInput
	// IPv4 address of the remote gateway's external interface.
	RemoteGw pulumi.StringPtrInput
	// IPv6 address of the remote gateway's external interface.
	RemoteGw6 pulumi.StringPtrInput
	// Domain name of remote gateway (eg. name.DDNS.com).
	RemotegwDdns pulumi.StringPtrInput
	// Digital Signature Authentication RSA signature format. Valid values: `pkcs1`, `pss`.
	RsaSignatureFormat pulumi.StringPtrInput
	// Enable/disable IKEv2 RSA signature hash algorithm override. Valid values: `enable`, `disable`.
	RsaSignatureHashOverride pulumi.StringPtrInput
	// Enable/disable saving XAuth username and password on VPN clients. Valid values: `disable`, `enable`.
	SavePassword pulumi.StringPtrInput
	// Enable/disable sending certificate chain. Valid values: `enable`, `disable`.
	SendCertChain pulumi.StringPtrInput
	// Digital Signature Authentication hash algorithms. Valid values: `sha1`, `sha2-256`, `sha2-384`, `sha2-512`.
	SignatureHashAlg pulumi.StringPtrInput
	// Split-include services.
	SplitIncludeService pulumi.StringPtrInput
	// Use Suite-B. Valid values: `disable`, `suite-b-gcm-128`, `suite-b-gcm-256`.
	SuiteB pulumi.StringPtrInput
	// Set IKE transport protocol. Valid values: `udp`, `udp-fallback-tcp`, `tcp`.
	Transport pulumi.StringPtrInput
	// Tunnel search method for when the interface is shared. Valid values: `selectors`, `nexthop`.
	TunnelSearch pulumi.StringPtrInput
	// Remote gateway type. Valid values: `static`, `dynamic`, `ddns`.
	Type pulumi.StringPtrInput
	// Enable/disable support for Cisco UNITY Configuration Method extensions. Valid values: `disable`, `enable`.
	UnitySupport pulumi.StringPtrInput
	// User group name for dialup peers.
	Usrgrp pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// VNI of VXLAN tunnel.
	Vni pulumi.IntPtrInput
	// GUI VPN Wizard Type.
	WizardType pulumi.StringPtrInput
	// XAuth type. Valid values: `disable`, `client`, `pap`, `chap`, `auto`.
	Xauthtype pulumi.StringPtrInput
}

func (Phase1interfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*phase1interfaceState)(nil)).Elem()
}

type phase1interfaceArgs struct {
	// Enable/disable verification of RADIUS accounting record. Valid values: `enable`, `disable`.
	AcctVerify *string `pulumi:"acctVerify"`
	// Enable/disable automatically add a route to the remote gateway. Valid values: `enable`, `disable`.
	AddGwRoute *string `pulumi:"addGwRoute"`
	// Enable/disable control addition of a route to peer destination selector. Valid values: `disable`, `enable`.
	AddRoute *string `pulumi:"addRoute"`
	// Enable/disable use as an aggregate member. Valid values: `enable`, `disable`.
	AggregateMember *string `pulumi:"aggregateMember"`
	// Link weight for aggregate.
	AggregateWeight *int `pulumi:"aggregateWeight"`
	// Enable/disable assignment of IP to IPsec interface via configuration method. Valid values: `disable`, `enable`.
	AssignIp *string `pulumi:"assignIp"`
	// Method by which the IP address will be assigned. Valid values: `range`, `usrgrp`, `dhcp`, `name`.
	AssignIpFrom *string `pulumi:"assignIpFrom"`
	// Authentication method. Valid values: `psk`, `signature`.
	Authmethod *string `pulumi:"authmethod"`
	// Authentication method (remote side). Valid values: `psk`, `signature`.
	AuthmethodRemote *string `pulumi:"authmethodRemote"`
	// XAuth password (max 35 characters).
	Authpasswd *string `pulumi:"authpasswd"`
	// XAuth user name.
	Authusr *string `pulumi:"authusr"`
	// Authentication user group.
	Authusrgrp *string `pulumi:"authusrgrp"`
	// Allow/block set-up of short-cut tunnels between different network IDs. Valid values: `allow`, `block`.
	AutoDiscoveryCrossover *string `pulumi:"autoDiscoveryCrossover"`
	// Enable/disable forwarding auto-discovery short-cut messages. Valid values: `enable`, `disable`.
	AutoDiscoveryForwarder *string `pulumi:"autoDiscoveryForwarder"`
	// Interval between shortcut offer messages in seconds (1 - 300, default = 5).
	AutoDiscoveryOfferInterval *int `pulumi:"autoDiscoveryOfferInterval"`
	// Enable/disable use of pre-shared secrets for authentication of auto-discovery tunnels. Valid values: `enable`, `disable`.
	AutoDiscoveryPsk *string `pulumi:"autoDiscoveryPsk"`
	// Enable/disable accepting auto-discovery short-cut messages. Valid values: `enable`, `disable`.
	AutoDiscoveryReceiver *string `pulumi:"autoDiscoveryReceiver"`
	// Enable/disable sending auto-discovery short-cut messages. Valid values: `enable`, `disable`.
	AutoDiscoverySender *string `pulumi:"autoDiscoverySender"`
	// Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
	AutoDiscoveryShortcuts *string `pulumi:"autoDiscoveryShortcuts"`
	// Enable/disable automatic initiation of IKE SA negotiation. Valid values: `enable`, `disable`.
	AutoNegotiate *string `pulumi:"autoNegotiate"`
	// Enable/disable Azure AD Auto-Connect for FortiClient. Valid values: `enable`, `disable`.
	AzureAdAutoconnect *string `pulumi:"azureAdAutoconnect"`
	// Instruct unity clients about the backup gateway address(es). The structure of `backupGateway` block is documented below.
	BackupGateways []Phase1interfaceBackupGateway `pulumi:"backupGateways"`
	// Message that unity client should display after connecting.
	Banner *string `pulumi:"banner"`
	// Enable/disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945. Valid values: `enable`, `disable`.
	CertIdValidation *string `pulumi:"certIdValidation"`
	// CA certificate trust store. Valid values: `local`, `ems`.
	CertTrustStore *string `pulumi:"certTrustStore"`
	// The names of up to 4 signed personal certificates. The structure of `certificate` block is documented below.
	Certificates []Phase1interfaceCertificate `pulumi:"certificates"`
	// Enable/disable childless IKEv2 initiation (RFC 6023). Valid values: `enable`, `disable`.
	ChildlessIke *string `pulumi:"childlessIke"`
	// Enable/disable allowing the VPN client to bring up the tunnel when there is no traffic. Valid values: `disable`, `enable`.
	ClientAutoNegotiate *string `pulumi:"clientAutoNegotiate"`
	// Enable/disable allowing the VPN client to keep the tunnel up when there is no traffic. Valid values: `disable`, `enable`.
	ClientKeepAlive *string `pulumi:"clientKeepAlive"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// IPv4 address of default route gateway to use for traffic exiting the interface.
	DefaultGw *string `pulumi:"defaultGw"`
	// Priority for default gateway route. A higher priority number signifies a less preferred route.
	DefaultGwPriority *int `pulumi:"defaultGwPriority"`
	// Device ID carried by the device ID notification.
	DevId *string `pulumi:"devId"`
	// Enable/disable device ID notification. Valid values: `disable`, `enable`.
	DevIdNotification *string `pulumi:"devIdNotification"`
	// Relay agent IPv6 link address to use in DHCP6 requests.
	Dhcp6RaLinkaddr *string `pulumi:"dhcp6RaLinkaddr"`
	// Relay agent gateway IP address to use in the giaddr field of DHCP requests.
	DhcpRaGiaddr *string `pulumi:"dhcpRaGiaddr"`
	// DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
	Dhgrp *string `pulumi:"dhgrp"`
	// Enable/disable IKEv2 Digital Signature Authentication (RFC 7427). Valid values: `enable`, `disable`.
	DigitalSignatureAuth *string `pulumi:"digitalSignatureAuth"`
	// Distance for routes added by IKE (1 - 255).
	Distance *int `pulumi:"distance"`
	// DNS server mode. Valid values: `manual`, `auto`.
	DnsMode *string `pulumi:"dnsMode"`
	// Instruct unity clients about the default DNS domain.
	Domain *string `pulumi:"domain"`
	// Dead Peer Detection mode. Valid values: `disable`, `on-idle`, `on-demand`.
	Dpd *string `pulumi:"dpd"`
	// Number of DPD retry attempts.
	DpdRetrycount *int `pulumi:"dpdRetrycount"`
	// DPD retry interval.
	DpdRetryinterval *string `pulumi:"dpdRetryinterval"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable IKEv2 EAP authentication. Valid values: `enable`, `disable`.
	Eap *string `pulumi:"eap"`
	// Enable/disable peer certificate authentication in addition to EAP if peer is a FortiClient endpoint. Valid values: `enable`, `disable`.
	EapCertAuth *string `pulumi:"eapCertAuth"`
	// Peer group excluded from EAP authentication.
	EapExcludePeergrp *string `pulumi:"eapExcludePeergrp"`
	// IKEv2 EAP peer identity type. Valid values: `use-id-payload`, `send-request`.
	EapIdentity *string `pulumi:"eapIdentity"`
	// Enable/disable verification of EMS serial number. Valid values: `enable`, `disable`.
	EmsSnCheck *string `pulumi:"emsSnCheck"`
	// Local IPv4 address of GRE/VXLAN tunnel.
	EncapLocalGw4 *string `pulumi:"encapLocalGw4"`
	// Local IPv6 address of GRE/VXLAN tunnel.
	EncapLocalGw6 *string `pulumi:"encapLocalGw6"`
	// Remote IPv4 address of GRE/VXLAN tunnel.
	EncapRemoteGw4 *string `pulumi:"encapRemoteGw4"`
	// Remote IPv6 address of GRE/VXLAN tunnel.
	EncapRemoteGw6 *string `pulumi:"encapRemoteGw6"`
	// Enable/disable GRE/VXLAN encapsulation.
	Encapsulation *string `pulumi:"encapsulation"`
	// Source for GRE/VXLAN tunnel address. Valid values: `ike`, `ipv4`, `ipv6`.
	EncapsulationAddress *string `pulumi:"encapsulationAddress"`
	// Enable/disable peer ID uniqueness check. Valid values: `disable`, `keep-new`, `keep-old`.
	EnforceUniqueId *string `pulumi:"enforceUniqueId"`
	// Extended sequence number (ESN) negotiation. Valid values: `require`, `allow`, `disable`.
	Esn *string `pulumi:"esn"`
	// Enable/disable device identifier exchange with peer FortiGate units for use of VPN monitor data by FortiManager. Valid values: `enable`, `disable`.
	ExchangeFgtDeviceId *string `pulumi:"exchangeFgtDeviceId"`
	// Enable/disable exchange of IPsec interface IP address. Valid values: `enable`, `disable`.
	ExchangeInterfaceIp *string `pulumi:"exchangeInterfaceIp"`
	// IPv4 address to exchange with peers.
	ExchangeIpAddr4 *string `pulumi:"exchangeIpAddr4"`
	// IPv6 address to exchange with peers
	ExchangeIpAddr6 *string `pulumi:"exchangeIpAddr6"`
	// Timeout in seconds before falling back IKE/IPsec traffic to tcp.
	FallbackTcpThreshold *int `pulumi:"fallbackTcpThreshold"`
	// Number of base Forward Error Correction packets (1 - 100).
	FecBase *int `pulumi:"fecBase"`
	// ipsec fec encoding/decoding algorithm (0: reed-solomon, 1: xor).
	FecCodec *int `pulumi:"fecCodec"`
	// Forward Error Correction encoding/decoding algorithm. Valid values: `rs`, `xor`.
	FecCodecString *string `pulumi:"fecCodecString"`
	// Enable/disable Forward Error Correction for egress IPsec traffic. Valid values: `enable`, `disable`.
	FecEgress *string `pulumi:"fecEgress"`
	// SD-WAN health check.
	FecHealthCheck *string `pulumi:"fecHealthCheck"`
	// Enable/disable Forward Error Correction for ingress IPsec traffic. Valid values: `enable`, `disable`.
	FecIngress *string `pulumi:"fecIngress"`
	// Forward Error Correction (FEC) mapping profile.
	FecMappingProfile *string `pulumi:"fecMappingProfile"`
	// Timeout in milliseconds before dropping Forward Error Correction packets (1 - 10000).
	FecReceiveTimeout *int `pulumi:"fecReceiveTimeout"`
	// Number of redundant Forward Error Correction packets (1 - 100).
	FecRedundant *int `pulumi:"fecRedundant"`
	// Timeout in milliseconds before sending Forward Error Correction packets (1 - 1000).
	FecSendTimeout *int `pulumi:"fecSendTimeout"`
	// Enable/disable IPsec syncing of tunnels for FGSP IPsec. Valid values: `enable`, `disable`.
	FgspSync *string `pulumi:"fgspSync"`
	// Enable/disable FortiClient enforcement. Valid values: `enable`, `disable`.
	ForticlientEnforcement *string `pulumi:"forticlientEnforcement"`
	// Enable/disable Fortinet ESP encapsulaton. Valid values: `enable`, `disable`.
	FortinetEsp *string `pulumi:"fortinetEsp"`
	// Enable/disable fragment IKE message on re-transmission. Valid values: `enable`, `disable`.
	Fragmentation *string `pulumi:"fragmentation"`
	// IKE fragmentation MTU (500 - 16000).
	FragmentationMtu *int `pulumi:"fragmentationMtu"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Enable/disable IKEv2 IDi group authentication. Valid values: `enable`, `disable`.
	GroupAuthentication *string `pulumi:"groupAuthentication"`
	// Password for IKEv2 IDi group authentication.  (ASCII string or hexadecimal indicated by a leading 0x.)
	GroupAuthenticationSecret *string `pulumi:"groupAuthenticationSecret"`
	// Enable/disable sequence number jump ahead for IPsec HA. Valid values: `enable`, `disable`.
	HaSyncEspSeqno *string `pulumi:"haSyncEspSeqno"`
	// Enable/disable IPsec tunnel idle timeout. Valid values: `enable`, `disable`.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// IPsec tunnel idle timeout in minutes (5 - 43200).
	IdleTimeoutinterval *int `pulumi:"idleTimeoutinterval"`
	// IKE protocol version. Valid values: `1`, `2`.
	IkeVersion *string `pulumi:"ikeVersion"`
	// Enable/disable copy the dscp in the ESP header to the inner IP Header. Valid values: `enable`, `disable`.
	InboundDscpCopy *string `pulumi:"inboundDscpCopy"`
	// Enable/disable allow local LAN access on unity clients. Valid values: `disable`, `enable`.
	IncludeLocalLan *string `pulumi:"includeLocalLan"`
	// Local physical, aggregate, or VLAN outgoing interface.
	Interface string `pulumi:"interface"`
	// One or more internal domain names in quotes separated by spaces. The structure of `internalDomainList` block is documented below.
	InternalDomainLists []Phase1interfaceInternalDomainList `pulumi:"internalDomainLists"`
	// IP address reuse delay interval in seconds (0 - 28800).
	IpDelayInterval *int `pulumi:"ipDelayInterval"`
	// Determine whether IP packets are fragmented before or after IPsec encapsulation. Valid values: `pre-encapsulation`, `post-encapsulation`.
	IpFragmentation *string `pulumi:"ipFragmentation"`
	// IP version to use for VPN interface. Valid values: `4`, `6`.
	IpVersion *string `pulumi:"ipVersion"`
	// IPv4 DNS server 1.
	Ipv4DnsServer1 *string `pulumi:"ipv4DnsServer1"`
	// IPv4 DNS server 2.
	Ipv4DnsServer2 *string `pulumi:"ipv4DnsServer2"`
	// IPv4 DNS server 3.
	Ipv4DnsServer3 *string `pulumi:"ipv4DnsServer3"`
	// End of IPv4 range.
	Ipv4EndIp *string `pulumi:"ipv4EndIp"`
	// Configuration Method IPv4 exclude ranges. The structure of `ipv4ExcludeRange` block is documented below.
	Ipv4ExcludeRanges []Phase1interfaceIpv4ExcludeRange `pulumi:"ipv4ExcludeRanges"`
	// IPv4 address name.
	Ipv4Name *string `pulumi:"ipv4Name"`
	// IPv4 Netmask.
	Ipv4Netmask *string `pulumi:"ipv4Netmask"`
	// IPv4 subnets that should not be sent over the IPsec tunnel.
	Ipv4SplitExclude *string `pulumi:"ipv4SplitExclude"`
	// IPv4 split-include subnets.
	Ipv4SplitInclude *string `pulumi:"ipv4SplitInclude"`
	// Start of IPv4 range.
	Ipv4StartIp *string `pulumi:"ipv4StartIp"`
	// WINS server 1.
	Ipv4WinsServer1 *string `pulumi:"ipv4WinsServer1"`
	// WINS server 2.
	Ipv4WinsServer2 *string `pulumi:"ipv4WinsServer2"`
	// IPv6 DNS server 1.
	Ipv6DnsServer1 *string `pulumi:"ipv6DnsServer1"`
	// IPv6 DNS server 2.
	Ipv6DnsServer2 *string `pulumi:"ipv6DnsServer2"`
	// IPv6 DNS server 3.
	Ipv6DnsServer3 *string `pulumi:"ipv6DnsServer3"`
	// End of IPv6 range.
	Ipv6EndIp *string `pulumi:"ipv6EndIp"`
	// Configuration method IPv6 exclude ranges. The structure of `ipv6ExcludeRange` block is documented below.
	Ipv6ExcludeRanges []Phase1interfaceIpv6ExcludeRange `pulumi:"ipv6ExcludeRanges"`
	// IPv6 address name.
	Ipv6Name *string `pulumi:"ipv6Name"`
	// IPv6 prefix.
	Ipv6Prefix *int `pulumi:"ipv6Prefix"`
	// IPv6 subnets that should not be sent over the IPsec tunnel.
	Ipv6SplitExclude *string `pulumi:"ipv6SplitExclude"`
	// IPv6 split-include subnets.
	Ipv6SplitInclude *string `pulumi:"ipv6SplitInclude"`
	// Start of IPv6 range.
	Ipv6StartIp *string `pulumi:"ipv6StartIp"`
	// NAT-T keep alive interval.
	Keepalive *int `pulumi:"keepalive"`
	// Time to wait in seconds before phase 1 encryption key expires.
	Keylife *int `pulumi:"keylife"`
	// Key Management Services server.
	Kms *string `pulumi:"kms"`
	// VPN tunnel underlay link cost.
	LinkCost *int `pulumi:"linkCost"`
	// IPv4 address of the local gateway's external interface.
	LocalGw *string `pulumi:"localGw"`
	// IPv6 address of the local gateway's external interface.
	LocalGw6 *string `pulumi:"localGw6"`
	// Local ID.
	Localid *string `pulumi:"localid"`
	// Local ID type. Valid values: `auto`, `fqdn`, `user-fqdn`, `keyid`, `address`, `asn1dn`.
	LocalidType *string `pulumi:"localidType"`
	// Enable/disable asymmetric routing for IKE traffic on loopback interface. Valid values: `enable`, `disable`.
	LoopbackAsymroute *string `pulumi:"loopbackAsymroute"`
	// Add selectors containing subsets of the configuration depending on traffic. Valid values: `disable`, `subnet`, `host`.
	MeshSelectorType *string `pulumi:"meshSelectorType"`
	// The ID protection mode used to establish a secure channel. Valid values: `aggressive`, `main`.
	Mode *string `pulumi:"mode"`
	// Enable/disable configuration method. Valid values: `disable`, `enable`.
	ModeCfg *string `pulumi:"modeCfg"`
	// Enable/disable mode-cfg client to use custom phase2 selectors. Valid values: `disable`, `enable`.
	ModeCfgAllowClientSelector *string `pulumi:"modeCfgAllowClientSelector"`
	// IPsec interface as backup for primary interface.
	Monitor *string `pulumi:"monitor"`
	// Time to wait in seconds before recovery once primary re-establishes.
	MonitorHoldDownDelay *int `pulumi:"monitorHoldDownDelay"`
	// Time of day at which to fail back to primary after it re-establishes.
	MonitorHoldDownTime *string `pulumi:"monitorHoldDownTime"`
	// Recovery time method when primary interface re-establishes. Valid values: `immediate`, `delay`, `time`.
	MonitorHoldDownType *string `pulumi:"monitorHoldDownType"`
	// Day of the week to recover once primary re-establishes. Valid values: `everyday`, `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	MonitorHoldDownWeekday *string `pulumi:"monitorHoldDownWeekday"`
	// Minimum number of links to become degraded before activating this interface.  Zero (0) means all links must be down before activating this interface.
	MonitorMin *int `pulumi:"monitorMin"`
	// IPsec remote gateway name.
	Name *string `pulumi:"name"`
	// Enable/disable NAT traversal. Valid values: `enable`, `disable`, `forced`.
	Nattraversal *string `pulumi:"nattraversal"`
	// IKE SA negotiation timeout in seconds (1 - 300).
	NegotiateTimeout *int `pulumi:"negotiateTimeout"`
	// Enable/disable kernel device creation. Valid values: `enable`, `disable`.
	NetDevice *string `pulumi:"netDevice"`
	// VPN gateway network ID.
	NetworkId *int `pulumi:"networkId"`
	// Enable/disable network overlays. Valid values: `disable`, `enable`.
	NetworkOverlay *string `pulumi:"networkOverlay"`
	// Enable/disable offloading NPU. Valid values: `enable`, `disable`.
	NpuOffload *string `pulumi:"npuOffload"`
	// Enable/disable packet distribution (RPS) on the IPsec interface. Valid values: `enable`, `disable`.
	PacketRedistribution *string `pulumi:"packetRedistribution"`
	// Enable/disable IPsec passive mode for static tunnels. Valid values: `enable`, `disable`.
	PassiveMode *string `pulumi:"passiveMode"`
	// Accept this peer certificate.
	Peer *string `pulumi:"peer"`
	// Accept this peer certificate group.
	Peergrp *string `pulumi:"peergrp"`
	// Accept this peer identity.
	Peerid *string `pulumi:"peerid"`
	// Accept this peer type. Valid values: `any`, `one`, `dialup`, `peer`, `peergrp`.
	Peertype *string `pulumi:"peertype"`
	// Enable/disable IKEv2 Postquantum Preshared Key (PPK). Valid values: `disable`, `allow`, `require`.
	Ppk *string `pulumi:"ppk"`
	// IKEv2 Postquantum Preshared Key Identity.
	PpkIdentity *string `pulumi:"ppkIdentity"`
	// IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
	PpkSecret *string `pulumi:"ppkSecret"`
	// Priority for routes added by IKE (0 - 4294967295).
	Priority *int `pulumi:"priority"`
	// Phase1 proposal. Valid values: `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm-prfsha1`, `aes128gcm-prfsha256`, `aes128gcm-prfsha384`, `aes128gcm-prfsha512`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm-prfsha1`, `aes256gcm-prfsha256`, `aes256gcm-prfsha384`, `aes256gcm-prfsha512`, `chacha20poly1305-prfsha1`, `chacha20poly1305-prfsha256`, `chacha20poly1305-prfsha384`, `chacha20poly1305-prfsha512`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
	Proposal string `pulumi:"proposal"`
	// Pre-shared secret for PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
	Psksecret *string `pulumi:"psksecret"`
	// Pre-shared secret for remote side PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
	PsksecretRemote *string `pulumi:"psksecretRemote"`
	// Enable/disable use of Quantum Key Distribution (QKD) server. Valid values: `disable`, `allow`, `require`.
	Qkd *string `pulumi:"qkd"`
	// Quantum Key Distribution (QKD) server profile.
	QkdProfile *string `pulumi:"qkdProfile"`
	// Enable/disable re-authentication upon IKE SA lifetime expiration. Valid values: `disable`, `enable`.
	Reauth *string `pulumi:"reauth"`
	// Enable/disable phase1 rekey. Valid values: `enable`, `disable`.
	Rekey *string `pulumi:"rekey"`
	// IPv4 address of the remote gateway's external interface.
	RemoteGw *string `pulumi:"remoteGw"`
	// IPv6 address of the remote gateway's external interface.
	RemoteGw6 *string `pulumi:"remoteGw6"`
	// Domain name of remote gateway (eg. name.DDNS.com).
	RemotegwDdns *string `pulumi:"remotegwDdns"`
	// Digital Signature Authentication RSA signature format. Valid values: `pkcs1`, `pss`.
	RsaSignatureFormat *string `pulumi:"rsaSignatureFormat"`
	// Enable/disable IKEv2 RSA signature hash algorithm override. Valid values: `enable`, `disable`.
	RsaSignatureHashOverride *string `pulumi:"rsaSignatureHashOverride"`
	// Enable/disable saving XAuth username and password on VPN clients. Valid values: `disable`, `enable`.
	SavePassword *string `pulumi:"savePassword"`
	// Enable/disable sending certificate chain. Valid values: `enable`, `disable`.
	SendCertChain *string `pulumi:"sendCertChain"`
	// Digital Signature Authentication hash algorithms. Valid values: `sha1`, `sha2-256`, `sha2-384`, `sha2-512`.
	SignatureHashAlg *string `pulumi:"signatureHashAlg"`
	// Split-include services.
	SplitIncludeService *string `pulumi:"splitIncludeService"`
	// Use Suite-B. Valid values: `disable`, `suite-b-gcm-128`, `suite-b-gcm-256`.
	SuiteB *string `pulumi:"suiteB"`
	// Set IKE transport protocol. Valid values: `udp`, `udp-fallback-tcp`, `tcp`.
	Transport *string `pulumi:"transport"`
	// Tunnel search method for when the interface is shared. Valid values: `selectors`, `nexthop`.
	TunnelSearch *string `pulumi:"tunnelSearch"`
	// Remote gateway type. Valid values: `static`, `dynamic`, `ddns`.
	Type *string `pulumi:"type"`
	// Enable/disable support for Cisco UNITY Configuration Method extensions. Valid values: `disable`, `enable`.
	UnitySupport *string `pulumi:"unitySupport"`
	// User group name for dialup peers.
	Usrgrp *string `pulumi:"usrgrp"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// VNI of VXLAN tunnel.
	Vni *int `pulumi:"vni"`
	// GUI VPN Wizard Type.
	WizardType *string `pulumi:"wizardType"`
	// XAuth type. Valid values: `disable`, `client`, `pap`, `chap`, `auto`.
	Xauthtype *string `pulumi:"xauthtype"`
}

// The set of arguments for constructing a Phase1interface resource.
type Phase1interfaceArgs struct {
	// Enable/disable verification of RADIUS accounting record. Valid values: `enable`, `disable`.
	AcctVerify pulumi.StringPtrInput
	// Enable/disable automatically add a route to the remote gateway. Valid values: `enable`, `disable`.
	AddGwRoute pulumi.StringPtrInput
	// Enable/disable control addition of a route to peer destination selector. Valid values: `disable`, `enable`.
	AddRoute pulumi.StringPtrInput
	// Enable/disable use as an aggregate member. Valid values: `enable`, `disable`.
	AggregateMember pulumi.StringPtrInput
	// Link weight for aggregate.
	AggregateWeight pulumi.IntPtrInput
	// Enable/disable assignment of IP to IPsec interface via configuration method. Valid values: `disable`, `enable`.
	AssignIp pulumi.StringPtrInput
	// Method by which the IP address will be assigned. Valid values: `range`, `usrgrp`, `dhcp`, `name`.
	AssignIpFrom pulumi.StringPtrInput
	// Authentication method. Valid values: `psk`, `signature`.
	Authmethod pulumi.StringPtrInput
	// Authentication method (remote side). Valid values: `psk`, `signature`.
	AuthmethodRemote pulumi.StringPtrInput
	// XAuth password (max 35 characters).
	Authpasswd pulumi.StringPtrInput
	// XAuth user name.
	Authusr pulumi.StringPtrInput
	// Authentication user group.
	Authusrgrp pulumi.StringPtrInput
	// Allow/block set-up of short-cut tunnels between different network IDs. Valid values: `allow`, `block`.
	AutoDiscoveryCrossover pulumi.StringPtrInput
	// Enable/disable forwarding auto-discovery short-cut messages. Valid values: `enable`, `disable`.
	AutoDiscoveryForwarder pulumi.StringPtrInput
	// Interval between shortcut offer messages in seconds (1 - 300, default = 5).
	AutoDiscoveryOfferInterval pulumi.IntPtrInput
	// Enable/disable use of pre-shared secrets for authentication of auto-discovery tunnels. Valid values: `enable`, `disable`.
	AutoDiscoveryPsk pulumi.StringPtrInput
	// Enable/disable accepting auto-discovery short-cut messages. Valid values: `enable`, `disable`.
	AutoDiscoveryReceiver pulumi.StringPtrInput
	// Enable/disable sending auto-discovery short-cut messages. Valid values: `enable`, `disable`.
	AutoDiscoverySender pulumi.StringPtrInput
	// Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
	AutoDiscoveryShortcuts pulumi.StringPtrInput
	// Enable/disable automatic initiation of IKE SA negotiation. Valid values: `enable`, `disable`.
	AutoNegotiate pulumi.StringPtrInput
	// Enable/disable Azure AD Auto-Connect for FortiClient. Valid values: `enable`, `disable`.
	AzureAdAutoconnect pulumi.StringPtrInput
	// Instruct unity clients about the backup gateway address(es). The structure of `backupGateway` block is documented below.
	BackupGateways Phase1interfaceBackupGatewayArrayInput
	// Message that unity client should display after connecting.
	Banner pulumi.StringPtrInput
	// Enable/disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945. Valid values: `enable`, `disable`.
	CertIdValidation pulumi.StringPtrInput
	// CA certificate trust store. Valid values: `local`, `ems`.
	CertTrustStore pulumi.StringPtrInput
	// The names of up to 4 signed personal certificates. The structure of `certificate` block is documented below.
	Certificates Phase1interfaceCertificateArrayInput
	// Enable/disable childless IKEv2 initiation (RFC 6023). Valid values: `enable`, `disable`.
	ChildlessIke pulumi.StringPtrInput
	// Enable/disable allowing the VPN client to bring up the tunnel when there is no traffic. Valid values: `disable`, `enable`.
	ClientAutoNegotiate pulumi.StringPtrInput
	// Enable/disable allowing the VPN client to keep the tunnel up when there is no traffic. Valid values: `disable`, `enable`.
	ClientKeepAlive pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// IPv4 address of default route gateway to use for traffic exiting the interface.
	DefaultGw pulumi.StringPtrInput
	// Priority for default gateway route. A higher priority number signifies a less preferred route.
	DefaultGwPriority pulumi.IntPtrInput
	// Device ID carried by the device ID notification.
	DevId pulumi.StringPtrInput
	// Enable/disable device ID notification. Valid values: `disable`, `enable`.
	DevIdNotification pulumi.StringPtrInput
	// Relay agent IPv6 link address to use in DHCP6 requests.
	Dhcp6RaLinkaddr pulumi.StringPtrInput
	// Relay agent gateway IP address to use in the giaddr field of DHCP requests.
	DhcpRaGiaddr pulumi.StringPtrInput
	// DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
	Dhgrp pulumi.StringPtrInput
	// Enable/disable IKEv2 Digital Signature Authentication (RFC 7427). Valid values: `enable`, `disable`.
	DigitalSignatureAuth pulumi.StringPtrInput
	// Distance for routes added by IKE (1 - 255).
	Distance pulumi.IntPtrInput
	// DNS server mode. Valid values: `manual`, `auto`.
	DnsMode pulumi.StringPtrInput
	// Instruct unity clients about the default DNS domain.
	Domain pulumi.StringPtrInput
	// Dead Peer Detection mode. Valid values: `disable`, `on-idle`, `on-demand`.
	Dpd pulumi.StringPtrInput
	// Number of DPD retry attempts.
	DpdRetrycount pulumi.IntPtrInput
	// DPD retry interval.
	DpdRetryinterval pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable IKEv2 EAP authentication. Valid values: `enable`, `disable`.
	Eap pulumi.StringPtrInput
	// Enable/disable peer certificate authentication in addition to EAP if peer is a FortiClient endpoint. Valid values: `enable`, `disable`.
	EapCertAuth pulumi.StringPtrInput
	// Peer group excluded from EAP authentication.
	EapExcludePeergrp pulumi.StringPtrInput
	// IKEv2 EAP peer identity type. Valid values: `use-id-payload`, `send-request`.
	EapIdentity pulumi.StringPtrInput
	// Enable/disable verification of EMS serial number. Valid values: `enable`, `disable`.
	EmsSnCheck pulumi.StringPtrInput
	// Local IPv4 address of GRE/VXLAN tunnel.
	EncapLocalGw4 pulumi.StringPtrInput
	// Local IPv6 address of GRE/VXLAN tunnel.
	EncapLocalGw6 pulumi.StringPtrInput
	// Remote IPv4 address of GRE/VXLAN tunnel.
	EncapRemoteGw4 pulumi.StringPtrInput
	// Remote IPv6 address of GRE/VXLAN tunnel.
	EncapRemoteGw6 pulumi.StringPtrInput
	// Enable/disable GRE/VXLAN encapsulation.
	Encapsulation pulumi.StringPtrInput
	// Source for GRE/VXLAN tunnel address. Valid values: `ike`, `ipv4`, `ipv6`.
	EncapsulationAddress pulumi.StringPtrInput
	// Enable/disable peer ID uniqueness check. Valid values: `disable`, `keep-new`, `keep-old`.
	EnforceUniqueId pulumi.StringPtrInput
	// Extended sequence number (ESN) negotiation. Valid values: `require`, `allow`, `disable`.
	Esn pulumi.StringPtrInput
	// Enable/disable device identifier exchange with peer FortiGate units for use of VPN monitor data by FortiManager. Valid values: `enable`, `disable`.
	ExchangeFgtDeviceId pulumi.StringPtrInput
	// Enable/disable exchange of IPsec interface IP address. Valid values: `enable`, `disable`.
	ExchangeInterfaceIp pulumi.StringPtrInput
	// IPv4 address to exchange with peers.
	ExchangeIpAddr4 pulumi.StringPtrInput
	// IPv6 address to exchange with peers
	ExchangeIpAddr6 pulumi.StringPtrInput
	// Timeout in seconds before falling back IKE/IPsec traffic to tcp.
	FallbackTcpThreshold pulumi.IntPtrInput
	// Number of base Forward Error Correction packets (1 - 100).
	FecBase pulumi.IntPtrInput
	// ipsec fec encoding/decoding algorithm (0: reed-solomon, 1: xor).
	FecCodec pulumi.IntPtrInput
	// Forward Error Correction encoding/decoding algorithm. Valid values: `rs`, `xor`.
	FecCodecString pulumi.StringPtrInput
	// Enable/disable Forward Error Correction for egress IPsec traffic. Valid values: `enable`, `disable`.
	FecEgress pulumi.StringPtrInput
	// SD-WAN health check.
	FecHealthCheck pulumi.StringPtrInput
	// Enable/disable Forward Error Correction for ingress IPsec traffic. Valid values: `enable`, `disable`.
	FecIngress pulumi.StringPtrInput
	// Forward Error Correction (FEC) mapping profile.
	FecMappingProfile pulumi.StringPtrInput
	// Timeout in milliseconds before dropping Forward Error Correction packets (1 - 10000).
	FecReceiveTimeout pulumi.IntPtrInput
	// Number of redundant Forward Error Correction packets (1 - 100).
	FecRedundant pulumi.IntPtrInput
	// Timeout in milliseconds before sending Forward Error Correction packets (1 - 1000).
	FecSendTimeout pulumi.IntPtrInput
	// Enable/disable IPsec syncing of tunnels for FGSP IPsec. Valid values: `enable`, `disable`.
	FgspSync pulumi.StringPtrInput
	// Enable/disable FortiClient enforcement. Valid values: `enable`, `disable`.
	ForticlientEnforcement pulumi.StringPtrInput
	// Enable/disable Fortinet ESP encapsulaton. Valid values: `enable`, `disable`.
	FortinetEsp pulumi.StringPtrInput
	// Enable/disable fragment IKE message on re-transmission. Valid values: `enable`, `disable`.
	Fragmentation pulumi.StringPtrInput
	// IKE fragmentation MTU (500 - 16000).
	FragmentationMtu pulumi.IntPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Enable/disable IKEv2 IDi group authentication. Valid values: `enable`, `disable`.
	GroupAuthentication pulumi.StringPtrInput
	// Password for IKEv2 IDi group authentication.  (ASCII string or hexadecimal indicated by a leading 0x.)
	GroupAuthenticationSecret pulumi.StringPtrInput
	// Enable/disable sequence number jump ahead for IPsec HA. Valid values: `enable`, `disable`.
	HaSyncEspSeqno pulumi.StringPtrInput
	// Enable/disable IPsec tunnel idle timeout. Valid values: `enable`, `disable`.
	IdleTimeout pulumi.StringPtrInput
	// IPsec tunnel idle timeout in minutes (5 - 43200).
	IdleTimeoutinterval pulumi.IntPtrInput
	// IKE protocol version. Valid values: `1`, `2`.
	IkeVersion pulumi.StringPtrInput
	// Enable/disable copy the dscp in the ESP header to the inner IP Header. Valid values: `enable`, `disable`.
	InboundDscpCopy pulumi.StringPtrInput
	// Enable/disable allow local LAN access on unity clients. Valid values: `disable`, `enable`.
	IncludeLocalLan pulumi.StringPtrInput
	// Local physical, aggregate, or VLAN outgoing interface.
	Interface pulumi.StringInput
	// One or more internal domain names in quotes separated by spaces. The structure of `internalDomainList` block is documented below.
	InternalDomainLists Phase1interfaceInternalDomainListArrayInput
	// IP address reuse delay interval in seconds (0 - 28800).
	IpDelayInterval pulumi.IntPtrInput
	// Determine whether IP packets are fragmented before or after IPsec encapsulation. Valid values: `pre-encapsulation`, `post-encapsulation`.
	IpFragmentation pulumi.StringPtrInput
	// IP version to use for VPN interface. Valid values: `4`, `6`.
	IpVersion pulumi.StringPtrInput
	// IPv4 DNS server 1.
	Ipv4DnsServer1 pulumi.StringPtrInput
	// IPv4 DNS server 2.
	Ipv4DnsServer2 pulumi.StringPtrInput
	// IPv4 DNS server 3.
	Ipv4DnsServer3 pulumi.StringPtrInput
	// End of IPv4 range.
	Ipv4EndIp pulumi.StringPtrInput
	// Configuration Method IPv4 exclude ranges. The structure of `ipv4ExcludeRange` block is documented below.
	Ipv4ExcludeRanges Phase1interfaceIpv4ExcludeRangeArrayInput
	// IPv4 address name.
	Ipv4Name pulumi.StringPtrInput
	// IPv4 Netmask.
	Ipv4Netmask pulumi.StringPtrInput
	// IPv4 subnets that should not be sent over the IPsec tunnel.
	Ipv4SplitExclude pulumi.StringPtrInput
	// IPv4 split-include subnets.
	Ipv4SplitInclude pulumi.StringPtrInput
	// Start of IPv4 range.
	Ipv4StartIp pulumi.StringPtrInput
	// WINS server 1.
	Ipv4WinsServer1 pulumi.StringPtrInput
	// WINS server 2.
	Ipv4WinsServer2 pulumi.StringPtrInput
	// IPv6 DNS server 1.
	Ipv6DnsServer1 pulumi.StringPtrInput
	// IPv6 DNS server 2.
	Ipv6DnsServer2 pulumi.StringPtrInput
	// IPv6 DNS server 3.
	Ipv6DnsServer3 pulumi.StringPtrInput
	// End of IPv6 range.
	Ipv6EndIp pulumi.StringPtrInput
	// Configuration method IPv6 exclude ranges. The structure of `ipv6ExcludeRange` block is documented below.
	Ipv6ExcludeRanges Phase1interfaceIpv6ExcludeRangeArrayInput
	// IPv6 address name.
	Ipv6Name pulumi.StringPtrInput
	// IPv6 prefix.
	Ipv6Prefix pulumi.IntPtrInput
	// IPv6 subnets that should not be sent over the IPsec tunnel.
	Ipv6SplitExclude pulumi.StringPtrInput
	// IPv6 split-include subnets.
	Ipv6SplitInclude pulumi.StringPtrInput
	// Start of IPv6 range.
	Ipv6StartIp pulumi.StringPtrInput
	// NAT-T keep alive interval.
	Keepalive pulumi.IntPtrInput
	// Time to wait in seconds before phase 1 encryption key expires.
	Keylife pulumi.IntPtrInput
	// Key Management Services server.
	Kms pulumi.StringPtrInput
	// VPN tunnel underlay link cost.
	LinkCost pulumi.IntPtrInput
	// IPv4 address of the local gateway's external interface.
	LocalGw pulumi.StringPtrInput
	// IPv6 address of the local gateway's external interface.
	LocalGw6 pulumi.StringPtrInput
	// Local ID.
	Localid pulumi.StringPtrInput
	// Local ID type. Valid values: `auto`, `fqdn`, `user-fqdn`, `keyid`, `address`, `asn1dn`.
	LocalidType pulumi.StringPtrInput
	// Enable/disable asymmetric routing for IKE traffic on loopback interface. Valid values: `enable`, `disable`.
	LoopbackAsymroute pulumi.StringPtrInput
	// Add selectors containing subsets of the configuration depending on traffic. Valid values: `disable`, `subnet`, `host`.
	MeshSelectorType pulumi.StringPtrInput
	// The ID protection mode used to establish a secure channel. Valid values: `aggressive`, `main`.
	Mode pulumi.StringPtrInput
	// Enable/disable configuration method. Valid values: `disable`, `enable`.
	ModeCfg pulumi.StringPtrInput
	// Enable/disable mode-cfg client to use custom phase2 selectors. Valid values: `disable`, `enable`.
	ModeCfgAllowClientSelector pulumi.StringPtrInput
	// IPsec interface as backup for primary interface.
	Monitor pulumi.StringPtrInput
	// Time to wait in seconds before recovery once primary re-establishes.
	MonitorHoldDownDelay pulumi.IntPtrInput
	// Time of day at which to fail back to primary after it re-establishes.
	MonitorHoldDownTime pulumi.StringPtrInput
	// Recovery time method when primary interface re-establishes. Valid values: `immediate`, `delay`, `time`.
	MonitorHoldDownType pulumi.StringPtrInput
	// Day of the week to recover once primary re-establishes. Valid values: `everyday`, `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
	MonitorHoldDownWeekday pulumi.StringPtrInput
	// Minimum number of links to become degraded before activating this interface.  Zero (0) means all links must be down before activating this interface.
	MonitorMin pulumi.IntPtrInput
	// IPsec remote gateway name.
	Name pulumi.StringPtrInput
	// Enable/disable NAT traversal. Valid values: `enable`, `disable`, `forced`.
	Nattraversal pulumi.StringPtrInput
	// IKE SA negotiation timeout in seconds (1 - 300).
	NegotiateTimeout pulumi.IntPtrInput
	// Enable/disable kernel device creation. Valid values: `enable`, `disable`.
	NetDevice pulumi.StringPtrInput
	// VPN gateway network ID.
	NetworkId pulumi.IntPtrInput
	// Enable/disable network overlays. Valid values: `disable`, `enable`.
	NetworkOverlay pulumi.StringPtrInput
	// Enable/disable offloading NPU. Valid values: `enable`, `disable`.
	NpuOffload pulumi.StringPtrInput
	// Enable/disable packet distribution (RPS) on the IPsec interface. Valid values: `enable`, `disable`.
	PacketRedistribution pulumi.StringPtrInput
	// Enable/disable IPsec passive mode for static tunnels. Valid values: `enable`, `disable`.
	PassiveMode pulumi.StringPtrInput
	// Accept this peer certificate.
	Peer pulumi.StringPtrInput
	// Accept this peer certificate group.
	Peergrp pulumi.StringPtrInput
	// Accept this peer identity.
	Peerid pulumi.StringPtrInput
	// Accept this peer type. Valid values: `any`, `one`, `dialup`, `peer`, `peergrp`.
	Peertype pulumi.StringPtrInput
	// Enable/disable IKEv2 Postquantum Preshared Key (PPK). Valid values: `disable`, `allow`, `require`.
	Ppk pulumi.StringPtrInput
	// IKEv2 Postquantum Preshared Key Identity.
	PpkIdentity pulumi.StringPtrInput
	// IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
	PpkSecret pulumi.StringPtrInput
	// Priority for routes added by IKE (0 - 4294967295).
	Priority pulumi.IntPtrInput
	// Phase1 proposal. Valid values: `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm-prfsha1`, `aes128gcm-prfsha256`, `aes128gcm-prfsha384`, `aes128gcm-prfsha512`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm-prfsha1`, `aes256gcm-prfsha256`, `aes256gcm-prfsha384`, `aes256gcm-prfsha512`, `chacha20poly1305-prfsha1`, `chacha20poly1305-prfsha256`, `chacha20poly1305-prfsha384`, `chacha20poly1305-prfsha512`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
	Proposal pulumi.StringInput
	// Pre-shared secret for PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
	Psksecret pulumi.StringPtrInput
	// Pre-shared secret for remote side PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
	PsksecretRemote pulumi.StringPtrInput
	// Enable/disable use of Quantum Key Distribution (QKD) server. Valid values: `disable`, `allow`, `require`.
	Qkd pulumi.StringPtrInput
	// Quantum Key Distribution (QKD) server profile.
	QkdProfile pulumi.StringPtrInput
	// Enable/disable re-authentication upon IKE SA lifetime expiration. Valid values: `disable`, `enable`.
	Reauth pulumi.StringPtrInput
	// Enable/disable phase1 rekey. Valid values: `enable`, `disable`.
	Rekey pulumi.StringPtrInput
	// IPv4 address of the remote gateway's external interface.
	RemoteGw pulumi.StringPtrInput
	// IPv6 address of the remote gateway's external interface.
	RemoteGw6 pulumi.StringPtrInput
	// Domain name of remote gateway (eg. name.DDNS.com).
	RemotegwDdns pulumi.StringPtrInput
	// Digital Signature Authentication RSA signature format. Valid values: `pkcs1`, `pss`.
	RsaSignatureFormat pulumi.StringPtrInput
	// Enable/disable IKEv2 RSA signature hash algorithm override. Valid values: `enable`, `disable`.
	RsaSignatureHashOverride pulumi.StringPtrInput
	// Enable/disable saving XAuth username and password on VPN clients. Valid values: `disable`, `enable`.
	SavePassword pulumi.StringPtrInput
	// Enable/disable sending certificate chain. Valid values: `enable`, `disable`.
	SendCertChain pulumi.StringPtrInput
	// Digital Signature Authentication hash algorithms. Valid values: `sha1`, `sha2-256`, `sha2-384`, `sha2-512`.
	SignatureHashAlg pulumi.StringPtrInput
	// Split-include services.
	SplitIncludeService pulumi.StringPtrInput
	// Use Suite-B. Valid values: `disable`, `suite-b-gcm-128`, `suite-b-gcm-256`.
	SuiteB pulumi.StringPtrInput
	// Set IKE transport protocol. Valid values: `udp`, `udp-fallback-tcp`, `tcp`.
	Transport pulumi.StringPtrInput
	// Tunnel search method for when the interface is shared. Valid values: `selectors`, `nexthop`.
	TunnelSearch pulumi.StringPtrInput
	// Remote gateway type. Valid values: `static`, `dynamic`, `ddns`.
	Type pulumi.StringPtrInput
	// Enable/disable support for Cisco UNITY Configuration Method extensions. Valid values: `disable`, `enable`.
	UnitySupport pulumi.StringPtrInput
	// User group name for dialup peers.
	Usrgrp pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// VNI of VXLAN tunnel.
	Vni pulumi.IntPtrInput
	// GUI VPN Wizard Type.
	WizardType pulumi.StringPtrInput
	// XAuth type. Valid values: `disable`, `client`, `pap`, `chap`, `auto`.
	Xauthtype pulumi.StringPtrInput
}

func (Phase1interfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*phase1interfaceArgs)(nil)).Elem()
}

type Phase1interfaceInput interface {
	pulumi.Input

	ToPhase1interfaceOutput() Phase1interfaceOutput
	ToPhase1interfaceOutputWithContext(ctx context.Context) Phase1interfaceOutput
}

func (*Phase1interface) ElementType() reflect.Type {
	return reflect.TypeOf((**Phase1interface)(nil)).Elem()
}

func (i *Phase1interface) ToPhase1interfaceOutput() Phase1interfaceOutput {
	return i.ToPhase1interfaceOutputWithContext(context.Background())
}

func (i *Phase1interface) ToPhase1interfaceOutputWithContext(ctx context.Context) Phase1interfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Phase1interfaceOutput)
}

// Phase1interfaceArrayInput is an input type that accepts Phase1interfaceArray and Phase1interfaceArrayOutput values.
// You can construct a concrete instance of `Phase1interfaceArrayInput` via:
//
//	Phase1interfaceArray{ Phase1interfaceArgs{...} }
type Phase1interfaceArrayInput interface {
	pulumi.Input

	ToPhase1interfaceArrayOutput() Phase1interfaceArrayOutput
	ToPhase1interfaceArrayOutputWithContext(context.Context) Phase1interfaceArrayOutput
}

type Phase1interfaceArray []Phase1interfaceInput

func (Phase1interfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Phase1interface)(nil)).Elem()
}

func (i Phase1interfaceArray) ToPhase1interfaceArrayOutput() Phase1interfaceArrayOutput {
	return i.ToPhase1interfaceArrayOutputWithContext(context.Background())
}

func (i Phase1interfaceArray) ToPhase1interfaceArrayOutputWithContext(ctx context.Context) Phase1interfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Phase1interfaceArrayOutput)
}

// Phase1interfaceMapInput is an input type that accepts Phase1interfaceMap and Phase1interfaceMapOutput values.
// You can construct a concrete instance of `Phase1interfaceMapInput` via:
//
//	Phase1interfaceMap{ "key": Phase1interfaceArgs{...} }
type Phase1interfaceMapInput interface {
	pulumi.Input

	ToPhase1interfaceMapOutput() Phase1interfaceMapOutput
	ToPhase1interfaceMapOutputWithContext(context.Context) Phase1interfaceMapOutput
}

type Phase1interfaceMap map[string]Phase1interfaceInput

func (Phase1interfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Phase1interface)(nil)).Elem()
}

func (i Phase1interfaceMap) ToPhase1interfaceMapOutput() Phase1interfaceMapOutput {
	return i.ToPhase1interfaceMapOutputWithContext(context.Background())
}

func (i Phase1interfaceMap) ToPhase1interfaceMapOutputWithContext(ctx context.Context) Phase1interfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Phase1interfaceMapOutput)
}

type Phase1interfaceOutput struct{ *pulumi.OutputState }

func (Phase1interfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Phase1interface)(nil)).Elem()
}

func (o Phase1interfaceOutput) ToPhase1interfaceOutput() Phase1interfaceOutput {
	return o
}

func (o Phase1interfaceOutput) ToPhase1interfaceOutputWithContext(ctx context.Context) Phase1interfaceOutput {
	return o
}

// Enable/disable verification of RADIUS accounting record. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) AcctVerify() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.AcctVerify }).(pulumi.StringOutput)
}

// Enable/disable automatically add a route to the remote gateway. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) AddGwRoute() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.AddGwRoute }).(pulumi.StringOutput)
}

// Enable/disable control addition of a route to peer destination selector. Valid values: `disable`, `enable`.
func (o Phase1interfaceOutput) AddRoute() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.AddRoute }).(pulumi.StringOutput)
}

// Enable/disable use as an aggregate member. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) AggregateMember() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.AggregateMember }).(pulumi.StringOutput)
}

// Link weight for aggregate.
func (o Phase1interfaceOutput) AggregateWeight() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.AggregateWeight }).(pulumi.IntOutput)
}

// Enable/disable assignment of IP to IPsec interface via configuration method. Valid values: `disable`, `enable`.
func (o Phase1interfaceOutput) AssignIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.AssignIp }).(pulumi.StringOutput)
}

// Method by which the IP address will be assigned. Valid values: `range`, `usrgrp`, `dhcp`, `name`.
func (o Phase1interfaceOutput) AssignIpFrom() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.AssignIpFrom }).(pulumi.StringOutput)
}

// Authentication method. Valid values: `psk`, `signature`.
func (o Phase1interfaceOutput) Authmethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Authmethod }).(pulumi.StringOutput)
}

// Authentication method (remote side). Valid values: `psk`, `signature`.
func (o Phase1interfaceOutput) AuthmethodRemote() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.AuthmethodRemote }).(pulumi.StringOutput)
}

// XAuth password (max 35 characters).
func (o Phase1interfaceOutput) Authpasswd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringPtrOutput { return v.Authpasswd }).(pulumi.StringPtrOutput)
}

// XAuth user name.
func (o Phase1interfaceOutput) Authusr() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Authusr }).(pulumi.StringOutput)
}

// Authentication user group.
func (o Phase1interfaceOutput) Authusrgrp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Authusrgrp }).(pulumi.StringOutput)
}

// Allow/block set-up of short-cut tunnels between different network IDs. Valid values: `allow`, `block`.
func (o Phase1interfaceOutput) AutoDiscoveryCrossover() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.AutoDiscoveryCrossover }).(pulumi.StringOutput)
}

// Enable/disable forwarding auto-discovery short-cut messages. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) AutoDiscoveryForwarder() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.AutoDiscoveryForwarder }).(pulumi.StringOutput)
}

// Interval between shortcut offer messages in seconds (1 - 300, default = 5).
func (o Phase1interfaceOutput) AutoDiscoveryOfferInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.AutoDiscoveryOfferInterval }).(pulumi.IntOutput)
}

// Enable/disable use of pre-shared secrets for authentication of auto-discovery tunnels. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) AutoDiscoveryPsk() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.AutoDiscoveryPsk }).(pulumi.StringOutput)
}

// Enable/disable accepting auto-discovery short-cut messages. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) AutoDiscoveryReceiver() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.AutoDiscoveryReceiver }).(pulumi.StringOutput)
}

// Enable/disable sending auto-discovery short-cut messages. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) AutoDiscoverySender() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.AutoDiscoverySender }).(pulumi.StringOutput)
}

// Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
func (o Phase1interfaceOutput) AutoDiscoveryShortcuts() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.AutoDiscoveryShortcuts }).(pulumi.StringOutput)
}

// Enable/disable automatic initiation of IKE SA negotiation. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) AutoNegotiate() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.AutoNegotiate }).(pulumi.StringOutput)
}

// Enable/disable Azure AD Auto-Connect for FortiClient. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) AzureAdAutoconnect() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.AzureAdAutoconnect }).(pulumi.StringOutput)
}

// Instruct unity clients about the backup gateway address(es). The structure of `backupGateway` block is documented below.
func (o Phase1interfaceOutput) BackupGateways() Phase1interfaceBackupGatewayArrayOutput {
	return o.ApplyT(func(v *Phase1interface) Phase1interfaceBackupGatewayArrayOutput { return v.BackupGateways }).(Phase1interfaceBackupGatewayArrayOutput)
}

// Message that unity client should display after connecting.
func (o Phase1interfaceOutput) Banner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringPtrOutput { return v.Banner }).(pulumi.StringPtrOutput)
}

// Enable/disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) CertIdValidation() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.CertIdValidation }).(pulumi.StringOutput)
}

// CA certificate trust store. Valid values: `local`, `ems`.
func (o Phase1interfaceOutput) CertTrustStore() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.CertTrustStore }).(pulumi.StringOutput)
}

// The names of up to 4 signed personal certificates. The structure of `certificate` block is documented below.
func (o Phase1interfaceOutput) Certificates() Phase1interfaceCertificateArrayOutput {
	return o.ApplyT(func(v *Phase1interface) Phase1interfaceCertificateArrayOutput { return v.Certificates }).(Phase1interfaceCertificateArrayOutput)
}

// Enable/disable childless IKEv2 initiation (RFC 6023). Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) ChildlessIke() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.ChildlessIke }).(pulumi.StringOutput)
}

// Enable/disable allowing the VPN client to bring up the tunnel when there is no traffic. Valid values: `disable`, `enable`.
func (o Phase1interfaceOutput) ClientAutoNegotiate() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.ClientAutoNegotiate }).(pulumi.StringOutput)
}

// Enable/disable allowing the VPN client to keep the tunnel up when there is no traffic. Valid values: `disable`, `enable`.
func (o Phase1interfaceOutput) ClientKeepAlive() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.ClientKeepAlive }).(pulumi.StringOutput)
}

// Comment.
func (o Phase1interfaceOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// IPv4 address of default route gateway to use for traffic exiting the interface.
func (o Phase1interfaceOutput) DefaultGw() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.DefaultGw }).(pulumi.StringOutput)
}

// Priority for default gateway route. A higher priority number signifies a less preferred route.
func (o Phase1interfaceOutput) DefaultGwPriority() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.DefaultGwPriority }).(pulumi.IntOutput)
}

// Device ID carried by the device ID notification.
func (o Phase1interfaceOutput) DevId() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.DevId }).(pulumi.StringOutput)
}

// Enable/disable device ID notification. Valid values: `disable`, `enable`.
func (o Phase1interfaceOutput) DevIdNotification() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.DevIdNotification }).(pulumi.StringOutput)
}

// Relay agent IPv6 link address to use in DHCP6 requests.
func (o Phase1interfaceOutput) Dhcp6RaLinkaddr() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Dhcp6RaLinkaddr }).(pulumi.StringOutput)
}

// Relay agent gateway IP address to use in the giaddr field of DHCP requests.
func (o Phase1interfaceOutput) DhcpRaGiaddr() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.DhcpRaGiaddr }).(pulumi.StringOutput)
}

// DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
func (o Phase1interfaceOutput) Dhgrp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Dhgrp }).(pulumi.StringOutput)
}

// Enable/disable IKEv2 Digital Signature Authentication (RFC 7427). Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) DigitalSignatureAuth() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.DigitalSignatureAuth }).(pulumi.StringOutput)
}

// Distance for routes added by IKE (1 - 255).
func (o Phase1interfaceOutput) Distance() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.Distance }).(pulumi.IntOutput)
}

// DNS server mode. Valid values: `manual`, `auto`.
func (o Phase1interfaceOutput) DnsMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.DnsMode }).(pulumi.StringOutput)
}

// Instruct unity clients about the default DNS domain.
func (o Phase1interfaceOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Dead Peer Detection mode. Valid values: `disable`, `on-idle`, `on-demand`.
func (o Phase1interfaceOutput) Dpd() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Dpd }).(pulumi.StringOutput)
}

// Number of DPD retry attempts.
func (o Phase1interfaceOutput) DpdRetrycount() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.DpdRetrycount }).(pulumi.IntOutput)
}

// DPD retry interval.
func (o Phase1interfaceOutput) DpdRetryinterval() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.DpdRetryinterval }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o Phase1interfaceOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Enable/disable IKEv2 EAP authentication. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) Eap() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Eap }).(pulumi.StringOutput)
}

// Enable/disable peer certificate authentication in addition to EAP if peer is a FortiClient endpoint. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) EapCertAuth() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.EapCertAuth }).(pulumi.StringOutput)
}

// Peer group excluded from EAP authentication.
func (o Phase1interfaceOutput) EapExcludePeergrp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.EapExcludePeergrp }).(pulumi.StringOutput)
}

// IKEv2 EAP peer identity type. Valid values: `use-id-payload`, `send-request`.
func (o Phase1interfaceOutput) EapIdentity() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.EapIdentity }).(pulumi.StringOutput)
}

// Enable/disable verification of EMS serial number. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) EmsSnCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.EmsSnCheck }).(pulumi.StringOutput)
}

// Local IPv4 address of GRE/VXLAN tunnel.
func (o Phase1interfaceOutput) EncapLocalGw4() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.EncapLocalGw4 }).(pulumi.StringOutput)
}

// Local IPv6 address of GRE/VXLAN tunnel.
func (o Phase1interfaceOutput) EncapLocalGw6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.EncapLocalGw6 }).(pulumi.StringOutput)
}

// Remote IPv4 address of GRE/VXLAN tunnel.
func (o Phase1interfaceOutput) EncapRemoteGw4() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.EncapRemoteGw4 }).(pulumi.StringOutput)
}

// Remote IPv6 address of GRE/VXLAN tunnel.
func (o Phase1interfaceOutput) EncapRemoteGw6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.EncapRemoteGw6 }).(pulumi.StringOutput)
}

// Enable/disable GRE/VXLAN encapsulation.
func (o Phase1interfaceOutput) Encapsulation() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Encapsulation }).(pulumi.StringOutput)
}

// Source for GRE/VXLAN tunnel address. Valid values: `ike`, `ipv4`, `ipv6`.
func (o Phase1interfaceOutput) EncapsulationAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.EncapsulationAddress }).(pulumi.StringOutput)
}

// Enable/disable peer ID uniqueness check. Valid values: `disable`, `keep-new`, `keep-old`.
func (o Phase1interfaceOutput) EnforceUniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.EnforceUniqueId }).(pulumi.StringOutput)
}

// Extended sequence number (ESN) negotiation. Valid values: `require`, `allow`, `disable`.
func (o Phase1interfaceOutput) Esn() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Esn }).(pulumi.StringOutput)
}

// Enable/disable device identifier exchange with peer FortiGate units for use of VPN monitor data by FortiManager. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) ExchangeFgtDeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.ExchangeFgtDeviceId }).(pulumi.StringOutput)
}

// Enable/disable exchange of IPsec interface IP address. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) ExchangeInterfaceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.ExchangeInterfaceIp }).(pulumi.StringOutput)
}

// IPv4 address to exchange with peers.
func (o Phase1interfaceOutput) ExchangeIpAddr4() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.ExchangeIpAddr4 }).(pulumi.StringOutput)
}

// IPv6 address to exchange with peers
func (o Phase1interfaceOutput) ExchangeIpAddr6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.ExchangeIpAddr6 }).(pulumi.StringOutput)
}

// Timeout in seconds before falling back IKE/IPsec traffic to tcp.
func (o Phase1interfaceOutput) FallbackTcpThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.FallbackTcpThreshold }).(pulumi.IntOutput)
}

// Number of base Forward Error Correction packets (1 - 100).
func (o Phase1interfaceOutput) FecBase() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.FecBase }).(pulumi.IntOutput)
}

// ipsec fec encoding/decoding algorithm (0: reed-solomon, 1: xor).
func (o Phase1interfaceOutput) FecCodec() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.FecCodec }).(pulumi.IntOutput)
}

// Forward Error Correction encoding/decoding algorithm. Valid values: `rs`, `xor`.
func (o Phase1interfaceOutput) FecCodecString() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.FecCodecString }).(pulumi.StringOutput)
}

// Enable/disable Forward Error Correction for egress IPsec traffic. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) FecEgress() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.FecEgress }).(pulumi.StringOutput)
}

// SD-WAN health check.
func (o Phase1interfaceOutput) FecHealthCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.FecHealthCheck }).(pulumi.StringOutput)
}

// Enable/disable Forward Error Correction for ingress IPsec traffic. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) FecIngress() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.FecIngress }).(pulumi.StringOutput)
}

// Forward Error Correction (FEC) mapping profile.
func (o Phase1interfaceOutput) FecMappingProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.FecMappingProfile }).(pulumi.StringOutput)
}

// Timeout in milliseconds before dropping Forward Error Correction packets (1 - 10000).
func (o Phase1interfaceOutput) FecReceiveTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.FecReceiveTimeout }).(pulumi.IntOutput)
}

// Number of redundant Forward Error Correction packets (1 - 100).
func (o Phase1interfaceOutput) FecRedundant() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.FecRedundant }).(pulumi.IntOutput)
}

// Timeout in milliseconds before sending Forward Error Correction packets (1 - 1000).
func (o Phase1interfaceOutput) FecSendTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.FecSendTimeout }).(pulumi.IntOutput)
}

// Enable/disable IPsec syncing of tunnels for FGSP IPsec. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) FgspSync() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.FgspSync }).(pulumi.StringOutput)
}

// Enable/disable FortiClient enforcement. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) ForticlientEnforcement() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.ForticlientEnforcement }).(pulumi.StringOutput)
}

// Enable/disable Fortinet ESP encapsulaton. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) FortinetEsp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.FortinetEsp }).(pulumi.StringOutput)
}

// Enable/disable fragment IKE message on re-transmission. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) Fragmentation() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Fragmentation }).(pulumi.StringOutput)
}

// IKE fragmentation MTU (500 - 16000).
func (o Phase1interfaceOutput) FragmentationMtu() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.FragmentationMtu }).(pulumi.IntOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o Phase1interfaceOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Enable/disable IKEv2 IDi group authentication. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) GroupAuthentication() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.GroupAuthentication }).(pulumi.StringOutput)
}

// Password for IKEv2 IDi group authentication.  (ASCII string or hexadecimal indicated by a leading 0x.)
func (o Phase1interfaceOutput) GroupAuthenticationSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringPtrOutput { return v.GroupAuthenticationSecret }).(pulumi.StringPtrOutput)
}

// Enable/disable sequence number jump ahead for IPsec HA. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) HaSyncEspSeqno() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.HaSyncEspSeqno }).(pulumi.StringOutput)
}

// Enable/disable IPsec tunnel idle timeout. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) IdleTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.IdleTimeout }).(pulumi.StringOutput)
}

// IPsec tunnel idle timeout in minutes (5 - 43200).
func (o Phase1interfaceOutput) IdleTimeoutinterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.IdleTimeoutinterval }).(pulumi.IntOutput)
}

// IKE protocol version. Valid values: `1`, `2`.
func (o Phase1interfaceOutput) IkeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.IkeVersion }).(pulumi.StringOutput)
}

// Enable/disable copy the dscp in the ESP header to the inner IP Header. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) InboundDscpCopy() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.InboundDscpCopy }).(pulumi.StringOutput)
}

// Enable/disable allow local LAN access on unity clients. Valid values: `disable`, `enable`.
func (o Phase1interfaceOutput) IncludeLocalLan() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.IncludeLocalLan }).(pulumi.StringOutput)
}

// Local physical, aggregate, or VLAN outgoing interface.
func (o Phase1interfaceOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// One or more internal domain names in quotes separated by spaces. The structure of `internalDomainList` block is documented below.
func (o Phase1interfaceOutput) InternalDomainLists() Phase1interfaceInternalDomainListArrayOutput {
	return o.ApplyT(func(v *Phase1interface) Phase1interfaceInternalDomainListArrayOutput { return v.InternalDomainLists }).(Phase1interfaceInternalDomainListArrayOutput)
}

// IP address reuse delay interval in seconds (0 - 28800).
func (o Phase1interfaceOutput) IpDelayInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.IpDelayInterval }).(pulumi.IntOutput)
}

// Determine whether IP packets are fragmented before or after IPsec encapsulation. Valid values: `pre-encapsulation`, `post-encapsulation`.
func (o Phase1interfaceOutput) IpFragmentation() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.IpFragmentation }).(pulumi.StringOutput)
}

// IP version to use for VPN interface. Valid values: `4`, `6`.
func (o Phase1interfaceOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.IpVersion }).(pulumi.StringOutput)
}

// IPv4 DNS server 1.
func (o Phase1interfaceOutput) Ipv4DnsServer1() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv4DnsServer1 }).(pulumi.StringOutput)
}

// IPv4 DNS server 2.
func (o Phase1interfaceOutput) Ipv4DnsServer2() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv4DnsServer2 }).(pulumi.StringOutput)
}

// IPv4 DNS server 3.
func (o Phase1interfaceOutput) Ipv4DnsServer3() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv4DnsServer3 }).(pulumi.StringOutput)
}

// End of IPv4 range.
func (o Phase1interfaceOutput) Ipv4EndIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv4EndIp }).(pulumi.StringOutput)
}

// Configuration Method IPv4 exclude ranges. The structure of `ipv4ExcludeRange` block is documented below.
func (o Phase1interfaceOutput) Ipv4ExcludeRanges() Phase1interfaceIpv4ExcludeRangeArrayOutput {
	return o.ApplyT(func(v *Phase1interface) Phase1interfaceIpv4ExcludeRangeArrayOutput { return v.Ipv4ExcludeRanges }).(Phase1interfaceIpv4ExcludeRangeArrayOutput)
}

// IPv4 address name.
func (o Phase1interfaceOutput) Ipv4Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv4Name }).(pulumi.StringOutput)
}

// IPv4 Netmask.
func (o Phase1interfaceOutput) Ipv4Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv4Netmask }).(pulumi.StringOutput)
}

// IPv4 subnets that should not be sent over the IPsec tunnel.
func (o Phase1interfaceOutput) Ipv4SplitExclude() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv4SplitExclude }).(pulumi.StringOutput)
}

// IPv4 split-include subnets.
func (o Phase1interfaceOutput) Ipv4SplitInclude() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv4SplitInclude }).(pulumi.StringOutput)
}

// Start of IPv4 range.
func (o Phase1interfaceOutput) Ipv4StartIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv4StartIp }).(pulumi.StringOutput)
}

// WINS server 1.
func (o Phase1interfaceOutput) Ipv4WinsServer1() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv4WinsServer1 }).(pulumi.StringOutput)
}

// WINS server 2.
func (o Phase1interfaceOutput) Ipv4WinsServer2() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv4WinsServer2 }).(pulumi.StringOutput)
}

// IPv6 DNS server 1.
func (o Phase1interfaceOutput) Ipv6DnsServer1() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv6DnsServer1 }).(pulumi.StringOutput)
}

// IPv6 DNS server 2.
func (o Phase1interfaceOutput) Ipv6DnsServer2() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv6DnsServer2 }).(pulumi.StringOutput)
}

// IPv6 DNS server 3.
func (o Phase1interfaceOutput) Ipv6DnsServer3() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv6DnsServer3 }).(pulumi.StringOutput)
}

// End of IPv6 range.
func (o Phase1interfaceOutput) Ipv6EndIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv6EndIp }).(pulumi.StringOutput)
}

// Configuration method IPv6 exclude ranges. The structure of `ipv6ExcludeRange` block is documented below.
func (o Phase1interfaceOutput) Ipv6ExcludeRanges() Phase1interfaceIpv6ExcludeRangeArrayOutput {
	return o.ApplyT(func(v *Phase1interface) Phase1interfaceIpv6ExcludeRangeArrayOutput { return v.Ipv6ExcludeRanges }).(Phase1interfaceIpv6ExcludeRangeArrayOutput)
}

// IPv6 address name.
func (o Phase1interfaceOutput) Ipv6Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv6Name }).(pulumi.StringOutput)
}

// IPv6 prefix.
func (o Phase1interfaceOutput) Ipv6Prefix() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.Ipv6Prefix }).(pulumi.IntOutput)
}

// IPv6 subnets that should not be sent over the IPsec tunnel.
func (o Phase1interfaceOutput) Ipv6SplitExclude() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv6SplitExclude }).(pulumi.StringOutput)
}

// IPv6 split-include subnets.
func (o Phase1interfaceOutput) Ipv6SplitInclude() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv6SplitInclude }).(pulumi.StringOutput)
}

// Start of IPv6 range.
func (o Phase1interfaceOutput) Ipv6StartIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ipv6StartIp }).(pulumi.StringOutput)
}

// NAT-T keep alive interval.
func (o Phase1interfaceOutput) Keepalive() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.Keepalive }).(pulumi.IntOutput)
}

// Time to wait in seconds before phase 1 encryption key expires.
func (o Phase1interfaceOutput) Keylife() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.Keylife }).(pulumi.IntOutput)
}

// Key Management Services server.
func (o Phase1interfaceOutput) Kms() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Kms }).(pulumi.StringOutput)
}

// VPN tunnel underlay link cost.
func (o Phase1interfaceOutput) LinkCost() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.LinkCost }).(pulumi.IntOutput)
}

// IPv4 address of the local gateway's external interface.
func (o Phase1interfaceOutput) LocalGw() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.LocalGw }).(pulumi.StringOutput)
}

// IPv6 address of the local gateway's external interface.
func (o Phase1interfaceOutput) LocalGw6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.LocalGw6 }).(pulumi.StringOutput)
}

// Local ID.
func (o Phase1interfaceOutput) Localid() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Localid }).(pulumi.StringOutput)
}

// Local ID type. Valid values: `auto`, `fqdn`, `user-fqdn`, `keyid`, `address`, `asn1dn`.
func (o Phase1interfaceOutput) LocalidType() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.LocalidType }).(pulumi.StringOutput)
}

// Enable/disable asymmetric routing for IKE traffic on loopback interface. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) LoopbackAsymroute() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.LoopbackAsymroute }).(pulumi.StringOutput)
}

// Add selectors containing subsets of the configuration depending on traffic. Valid values: `disable`, `subnet`, `host`.
func (o Phase1interfaceOutput) MeshSelectorType() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.MeshSelectorType }).(pulumi.StringOutput)
}

// The ID protection mode used to establish a secure channel. Valid values: `aggressive`, `main`.
func (o Phase1interfaceOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Enable/disable configuration method. Valid values: `disable`, `enable`.
func (o Phase1interfaceOutput) ModeCfg() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.ModeCfg }).(pulumi.StringOutput)
}

// Enable/disable mode-cfg client to use custom phase2 selectors. Valid values: `disable`, `enable`.
func (o Phase1interfaceOutput) ModeCfgAllowClientSelector() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.ModeCfgAllowClientSelector }).(pulumi.StringOutput)
}

// IPsec interface as backup for primary interface.
func (o Phase1interfaceOutput) Monitor() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Monitor }).(pulumi.StringOutput)
}

// Time to wait in seconds before recovery once primary re-establishes.
func (o Phase1interfaceOutput) MonitorHoldDownDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.MonitorHoldDownDelay }).(pulumi.IntOutput)
}

// Time of day at which to fail back to primary after it re-establishes.
func (o Phase1interfaceOutput) MonitorHoldDownTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.MonitorHoldDownTime }).(pulumi.StringOutput)
}

// Recovery time method when primary interface re-establishes. Valid values: `immediate`, `delay`, `time`.
func (o Phase1interfaceOutput) MonitorHoldDownType() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.MonitorHoldDownType }).(pulumi.StringOutput)
}

// Day of the week to recover once primary re-establishes. Valid values: `everyday`, `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
func (o Phase1interfaceOutput) MonitorHoldDownWeekday() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.MonitorHoldDownWeekday }).(pulumi.StringOutput)
}

// Minimum number of links to become degraded before activating this interface.  Zero (0) means all links must be down before activating this interface.
func (o Phase1interfaceOutput) MonitorMin() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.MonitorMin }).(pulumi.IntOutput)
}

// IPsec remote gateway name.
func (o Phase1interfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable NAT traversal. Valid values: `enable`, `disable`, `forced`.
func (o Phase1interfaceOutput) Nattraversal() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Nattraversal }).(pulumi.StringOutput)
}

// IKE SA negotiation timeout in seconds (1 - 300).
func (o Phase1interfaceOutput) NegotiateTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.NegotiateTimeout }).(pulumi.IntOutput)
}

// Enable/disable kernel device creation. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) NetDevice() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.NetDevice }).(pulumi.StringOutput)
}

// VPN gateway network ID.
func (o Phase1interfaceOutput) NetworkId() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.NetworkId }).(pulumi.IntOutput)
}

// Enable/disable network overlays. Valid values: `disable`, `enable`.
func (o Phase1interfaceOutput) NetworkOverlay() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.NetworkOverlay }).(pulumi.StringOutput)
}

// Enable/disable offloading NPU. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) NpuOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.NpuOffload }).(pulumi.StringOutput)
}

// Enable/disable packet distribution (RPS) on the IPsec interface. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) PacketRedistribution() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.PacketRedistribution }).(pulumi.StringOutput)
}

// Enable/disable IPsec passive mode for static tunnels. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) PassiveMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.PassiveMode }).(pulumi.StringOutput)
}

// Accept this peer certificate.
func (o Phase1interfaceOutput) Peer() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Peer }).(pulumi.StringOutput)
}

// Accept this peer certificate group.
func (o Phase1interfaceOutput) Peergrp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Peergrp }).(pulumi.StringOutput)
}

// Accept this peer identity.
func (o Phase1interfaceOutput) Peerid() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Peerid }).(pulumi.StringOutput)
}

// Accept this peer type. Valid values: `any`, `one`, `dialup`, `peer`, `peergrp`.
func (o Phase1interfaceOutput) Peertype() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Peertype }).(pulumi.StringOutput)
}

// Enable/disable IKEv2 Postquantum Preshared Key (PPK). Valid values: `disable`, `allow`, `require`.
func (o Phase1interfaceOutput) Ppk() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Ppk }).(pulumi.StringOutput)
}

// IKEv2 Postquantum Preshared Key Identity.
func (o Phase1interfaceOutput) PpkIdentity() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.PpkIdentity }).(pulumi.StringOutput)
}

// IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
func (o Phase1interfaceOutput) PpkSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringPtrOutput { return v.PpkSecret }).(pulumi.StringPtrOutput)
}

// Priority for routes added by IKE (0 - 4294967295).
func (o Phase1interfaceOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// Phase1 proposal. Valid values: `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm-prfsha1`, `aes128gcm-prfsha256`, `aes128gcm-prfsha384`, `aes128gcm-prfsha512`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm-prfsha1`, `aes256gcm-prfsha256`, `aes256gcm-prfsha384`, `aes256gcm-prfsha512`, `chacha20poly1305-prfsha1`, `chacha20poly1305-prfsha256`, `chacha20poly1305-prfsha384`, `chacha20poly1305-prfsha512`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
func (o Phase1interfaceOutput) Proposal() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Proposal }).(pulumi.StringOutput)
}

// Pre-shared secret for PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
func (o Phase1interfaceOutput) Psksecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringPtrOutput { return v.Psksecret }).(pulumi.StringPtrOutput)
}

// Pre-shared secret for remote side PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
func (o Phase1interfaceOutput) PsksecretRemote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringPtrOutput { return v.PsksecretRemote }).(pulumi.StringPtrOutput)
}

// Enable/disable use of Quantum Key Distribution (QKD) server. Valid values: `disable`, `allow`, `require`.
func (o Phase1interfaceOutput) Qkd() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Qkd }).(pulumi.StringOutput)
}

// Quantum Key Distribution (QKD) server profile.
func (o Phase1interfaceOutput) QkdProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.QkdProfile }).(pulumi.StringOutput)
}

// Enable/disable re-authentication upon IKE SA lifetime expiration. Valid values: `disable`, `enable`.
func (o Phase1interfaceOutput) Reauth() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Reauth }).(pulumi.StringOutput)
}

// Enable/disable phase1 rekey. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) Rekey() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Rekey }).(pulumi.StringOutput)
}

// IPv4 address of the remote gateway's external interface.
func (o Phase1interfaceOutput) RemoteGw() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.RemoteGw }).(pulumi.StringOutput)
}

// IPv6 address of the remote gateway's external interface.
func (o Phase1interfaceOutput) RemoteGw6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.RemoteGw6 }).(pulumi.StringOutput)
}

// Domain name of remote gateway (eg. name.DDNS.com).
func (o Phase1interfaceOutput) RemotegwDdns() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.RemotegwDdns }).(pulumi.StringOutput)
}

// Digital Signature Authentication RSA signature format. Valid values: `pkcs1`, `pss`.
func (o Phase1interfaceOutput) RsaSignatureFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.RsaSignatureFormat }).(pulumi.StringOutput)
}

// Enable/disable IKEv2 RSA signature hash algorithm override. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) RsaSignatureHashOverride() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.RsaSignatureHashOverride }).(pulumi.StringOutput)
}

// Enable/disable saving XAuth username and password on VPN clients. Valid values: `disable`, `enable`.
func (o Phase1interfaceOutput) SavePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.SavePassword }).(pulumi.StringOutput)
}

// Enable/disable sending certificate chain. Valid values: `enable`, `disable`.
func (o Phase1interfaceOutput) SendCertChain() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.SendCertChain }).(pulumi.StringOutput)
}

// Digital Signature Authentication hash algorithms. Valid values: `sha1`, `sha2-256`, `sha2-384`, `sha2-512`.
func (o Phase1interfaceOutput) SignatureHashAlg() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.SignatureHashAlg }).(pulumi.StringOutput)
}

// Split-include services.
func (o Phase1interfaceOutput) SplitIncludeService() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.SplitIncludeService }).(pulumi.StringOutput)
}

// Use Suite-B. Valid values: `disable`, `suite-b-gcm-128`, `suite-b-gcm-256`.
func (o Phase1interfaceOutput) SuiteB() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.SuiteB }).(pulumi.StringOutput)
}

// Set IKE transport protocol. Valid values: `udp`, `udp-fallback-tcp`, `tcp`.
func (o Phase1interfaceOutput) Transport() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Transport }).(pulumi.StringOutput)
}

// Tunnel search method for when the interface is shared. Valid values: `selectors`, `nexthop`.
func (o Phase1interfaceOutput) TunnelSearch() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.TunnelSearch }).(pulumi.StringOutput)
}

// Remote gateway type. Valid values: `static`, `dynamic`, `ddns`.
func (o Phase1interfaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Enable/disable support for Cisco UNITY Configuration Method extensions. Valid values: `disable`, `enable`.
func (o Phase1interfaceOutput) UnitySupport() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.UnitySupport }).(pulumi.StringOutput)
}

// User group name for dialup peers.
func (o Phase1interfaceOutput) Usrgrp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Usrgrp }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o Phase1interfaceOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// VNI of VXLAN tunnel.
func (o Phase1interfaceOutput) Vni() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.IntOutput { return v.Vni }).(pulumi.IntOutput)
}

// GUI VPN Wizard Type.
func (o Phase1interfaceOutput) WizardType() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.WizardType }).(pulumi.StringOutput)
}

// XAuth type. Valid values: `disable`, `client`, `pap`, `chap`, `auto`.
func (o Phase1interfaceOutput) Xauthtype() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase1interface) pulumi.StringOutput { return v.Xauthtype }).(pulumi.StringOutput)
}

type Phase1interfaceArrayOutput struct{ *pulumi.OutputState }

func (Phase1interfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Phase1interface)(nil)).Elem()
}

func (o Phase1interfaceArrayOutput) ToPhase1interfaceArrayOutput() Phase1interfaceArrayOutput {
	return o
}

func (o Phase1interfaceArrayOutput) ToPhase1interfaceArrayOutputWithContext(ctx context.Context) Phase1interfaceArrayOutput {
	return o
}

func (o Phase1interfaceArrayOutput) Index(i pulumi.IntInput) Phase1interfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Phase1interface {
		return vs[0].([]*Phase1interface)[vs[1].(int)]
	}).(Phase1interfaceOutput)
}

type Phase1interfaceMapOutput struct{ *pulumi.OutputState }

func (Phase1interfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Phase1interface)(nil)).Elem()
}

func (o Phase1interfaceMapOutput) ToPhase1interfaceMapOutput() Phase1interfaceMapOutput {
	return o
}

func (o Phase1interfaceMapOutput) ToPhase1interfaceMapOutputWithContext(ctx context.Context) Phase1interfaceMapOutput {
	return o
}

func (o Phase1interfaceMapOutput) MapIndex(k pulumi.StringInput) Phase1interfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Phase1interface {
		return vs[0].(map[string]*Phase1interface)[vs[1].(string)]
	}).(Phase1interfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Phase1interfaceInput)(nil)).Elem(), &Phase1interface{})
	pulumi.RegisterInputType(reflect.TypeOf((*Phase1interfaceArrayInput)(nil)).Elem(), Phase1interfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Phase1interfaceMapInput)(nil)).Elem(), Phase1interfaceMap{})
	pulumi.RegisterOutputType(Phase1interfaceOutput{})
	pulumi.RegisterOutputType(Phase1interfaceArrayOutput{})
	pulumi.RegisterOutputType(Phase1interfaceMapOutput{})
}
