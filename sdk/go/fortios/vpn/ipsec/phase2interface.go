// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipsec

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure VPN autokey tunnel.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			trname3, err := vpn.NewPhase1interface(ctx, "trname3", &vpn.Phase1interfaceArgs{
//				AcctVerify:             pulumi.String("disable"),
//				AddGwRoute:             pulumi.String("disable"),
//				AddRoute:               pulumi.String("enable"),
//				AssignIp:               pulumi.String("enable"),
//				AssignIpFrom:           pulumi.String("range"),
//				Authmethod:             pulumi.String("psk"),
//				AutoDiscoveryForwarder: pulumi.String("disable"),
//				AutoDiscoveryPsk:       pulumi.String("disable"),
//				AutoDiscoveryReceiver:  pulumi.String("disable"),
//				AutoDiscoverySender:    pulumi.String("disable"),
//				AutoNegotiate:          pulumi.String("enable"),
//				CertIdValidation:       pulumi.String("enable"),
//				ChildlessIke:           pulumi.String("disable"),
//				ClientAutoNegotiate:    pulumi.String("disable"),
//				ClientKeepAlive:        pulumi.String("disable"),
//				DefaultGw:              pulumi.String("0.0.0.0"),
//				DefaultGwPriority:      pulumi.Int(0),
//				Dhgrp:                  pulumi.String("14 5"),
//				DigitalSignatureAuth:   pulumi.String("disable"),
//				Distance:               pulumi.Int(15),
//				DnsMode:                pulumi.String("manual"),
//				Dpd:                    pulumi.String("on-demand"),
//				DpdRetrycount:          pulumi.Int(3),
//				DpdRetryinterval:       pulumi.String("20"),
//				Eap:                    pulumi.String("disable"),
//				EapIdentity:            pulumi.String("use-id-payload"),
//				EncapLocalGw4:          pulumi.String("0.0.0.0"),
//				EncapLocalGw6:          pulumi.String("::"),
//				EncapRemoteGw4:         pulumi.String("0.0.0.0"),
//				EncapRemoteGw6:         pulumi.String("::"),
//				Encapsulation:          pulumi.String("none"),
//				EncapsulationAddress:   pulumi.String("ike"),
//				EnforceUniqueId:        pulumi.String("disable"),
//				ExchangeInterfaceIp:    pulumi.String("disable"),
//				ExchangeIpAddr4:        pulumi.String("0.0.0.0"),
//				ExchangeIpAddr6:        pulumi.String("::"),
//				ForticlientEnforcement: pulumi.String("disable"),
//				Fragmentation:          pulumi.String("enable"),
//				FragmentationMtu:       pulumi.Int(1200),
//				GroupAuthentication:    pulumi.String("disable"),
//				HaSyncEspSeqno:         pulumi.String("enable"),
//				IdleTimeout:            pulumi.String("disable"),
//				IdleTimeoutinterval:    pulumi.Int(15),
//				IkeVersion:             pulumi.String("1"),
//				IncludeLocalLan:        pulumi.String("disable"),
//				Interface:              pulumi.String("port3"),
//				IpVersion:              pulumi.String("4"),
//				Ipv4DnsServer1:         pulumi.String("0.0.0.0"),
//				Ipv4DnsServer2:         pulumi.String("0.0.0.0"),
//				Ipv4DnsServer3:         pulumi.String("0.0.0.0"),
//				Ipv4EndIp:              pulumi.String("0.0.0.0"),
//				Ipv4Netmask:            pulumi.String("255.255.255.255"),
//				Ipv4StartIp:            pulumi.String("0.0.0.0"),
//				Ipv4WinsServer1:        pulumi.String("0.0.0.0"),
//				Ipv4WinsServer2:        pulumi.String("0.0.0.0"),
//				Ipv6DnsServer1:         pulumi.String("::"),
//				Ipv6DnsServer2:         pulumi.String("::"),
//				Ipv6DnsServer3:         pulumi.String("::"),
//				Ipv6EndIp:              pulumi.String("::"),
//				Ipv6Prefix:             pulumi.Int(128),
//				Ipv6StartIp:            pulumi.String("::"),
//				Keepalive:              pulumi.Int(10),
//				Keylife:                pulumi.Int(86400),
//				LocalGw:                pulumi.String("0.0.0.0"),
//				LocalGw6:               pulumi.String("::"),
//				LocalidType:            pulumi.String("auto"),
//				MeshSelectorType:       pulumi.String("disable"),
//				Mode:                   pulumi.String("main"),
//				ModeCfg:                pulumi.String("disable"),
//				MonitorHoldDownDelay:   pulumi.Int(0),
//				MonitorHoldDownTime:    pulumi.String("00:00"),
//				MonitorHoldDownType:    pulumi.String("immediate"),
//				MonitorHoldDownWeekday: pulumi.String("sunday"),
//				Nattraversal:           pulumi.String("enable"),
//				NegotiateTimeout:       pulumi.Int(30),
//				NetDevice:              pulumi.String("disable"),
//				PassiveMode:            pulumi.String("disable"),
//				Peertype:               pulumi.String("any"),
//				Ppk:                    pulumi.String("disable"),
//				Priority:               pulumi.Int(0),
//				Proposal:               pulumi.String("aes128-sha256 aes256-sha256 aes128-sha1 aes256-sha1"),
//				Psksecret:              pulumi.String("eweeeeeeeecee"),
//				Reauth:                 pulumi.String("disable"),
//				Rekey:                  pulumi.String("enable"),
//				RemoteGw:               pulumi.String("2.22.2.2"),
//				RemoteGw6:              pulumi.String("::"),
//				RsaSignatureFormat:     pulumi.String("pkcs1"),
//				SavePassword:           pulumi.String("disable"),
//				SendCertChain:          pulumi.String("enable"),
//				SignatureHashAlg:       pulumi.String("sha2-512 sha2-384 sha2-256 sha1"),
//				SuiteB:                 pulumi.String("disable"),
//				TunnelSearch:           pulumi.String("selectors"),
//				Type:                   pulumi.String("static"),
//				UnitySupport:           pulumi.String("enable"),
//				WizardType:             pulumi.String("custom"),
//				Xauthtype:              pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpn.NewPhase2interface(ctx, "trname2", &vpn.Phase2interfaceArgs{
//				AddRoute:               pulumi.String("phase1"),
//				AutoDiscoveryForwarder: pulumi.String("phase1"),
//				AutoDiscoverySender:    pulumi.String("phase1"),
//				AutoNegotiate:          pulumi.String("disable"),
//				DhcpIpsec:              pulumi.String("disable"),
//				Dhgrp:                  pulumi.String("14 5"),
//				DstAddrType:            pulumi.String("subnet"),
//				DstEndIp6:              pulumi.String("::"),
//				DstPort:                pulumi.Int(0),
//				DstSubnet:              pulumi.String("0.0.0.0 0.0.0.0"),
//				Encapsulation:          pulumi.String("tunnel-mode"),
//				Keepalive:              pulumi.String("disable"),
//				KeylifeType:            pulumi.String("seconds"),
//				Keylifekbs:             pulumi.Int(5120),
//				Keylifeseconds:         pulumi.Int(43200),
//				L2tp:                   pulumi.String("disable"),
//				Pfs:                    pulumi.String("enable"),
//				Phase1name:             trname3.Name,
//				Proposal:               pulumi.String("aes128-sha1 aes256-sha1 aes128-sha256 aes256-sha256 aes128gcm aes256gcm chacha20poly1305"),
//				Protocol:               pulumi.Int(0),
//				Replay:                 pulumi.String("enable"),
//				RouteOverlap:           pulumi.String("use-new"),
//				SingleSource:           pulumi.String("disable"),
//				SrcAddrType:            pulumi.String("subnet"),
//				SrcEndIp6:              pulumi.String("::"),
//				SrcPort:                pulumi.Int(0),
//				SrcSubnet:              pulumi.String("0.0.0.0 0.0.0.0"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VpnIpsec Phase2Interface can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:vpn/ipsec/phase2interface:Phase2interface labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:vpn/ipsec/phase2interface:Phase2interface labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Phase2interface struct {
	pulumi.CustomResourceState

	// Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
	AddRoute pulumi.StringOutput `pulumi:"addRoute"`
	// Enable/disable forwarding short-cut messages. Valid values: `phase1`, `enable`, `disable`.
	AutoDiscoveryForwarder pulumi.StringOutput `pulumi:"autoDiscoveryForwarder"`
	// Enable/disable sending short-cut messages. Valid values: `phase1`, `enable`, `disable`.
	AutoDiscoverySender pulumi.StringOutput `pulumi:"autoDiscoverySender"`
	// Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
	AutoNegotiate pulumi.StringOutput `pulumi:"autoNegotiate"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
	DhcpIpsec pulumi.StringOutput `pulumi:"dhcpIpsec"`
	// Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
	Dhgrp pulumi.StringOutput `pulumi:"dhgrp"`
	// Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
	Diffserv pulumi.StringOutput `pulumi:"diffserv"`
	// DSCP value to be applied to the IPsec tunnel outer IP header.
	Diffservcode pulumi.StringOutput `pulumi:"diffservcode"`
	// Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
	DstAddrType pulumi.StringOutput `pulumi:"dstAddrType"`
	// Remote proxy ID IPv4 end.
	DstEndIp pulumi.StringOutput `pulumi:"dstEndIp"`
	// Remote proxy ID IPv6 end.
	DstEndIp6 pulumi.StringOutput `pulumi:"dstEndIp6"`
	// Remote proxy ID name.
	DstName pulumi.StringOutput `pulumi:"dstName"`
	// Remote proxy ID name.
	DstName6 pulumi.StringOutput `pulumi:"dstName6"`
	// Quick mode destination port (1 - 65535 or 0 for all).
	DstPort pulumi.IntOutput `pulumi:"dstPort"`
	// Remote proxy ID IPv4 start.
	DstStartIp pulumi.StringOutput `pulumi:"dstStartIp"`
	// Remote proxy ID IPv6 start.
	DstStartIp6 pulumi.StringOutput `pulumi:"dstStartIp6"`
	// Remote proxy ID IPv4 subnet.
	DstSubnet pulumi.StringOutput `pulumi:"dstSubnet"`
	// Remote proxy ID IPv6 subnet.
	DstSubnet6 pulumi.StringOutput `pulumi:"dstSubnet6"`
	// ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
	Encapsulation pulumi.StringOutput `pulumi:"encapsulation"`
	// Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
	InboundDscpCopy pulumi.StringOutput `pulumi:"inboundDscpCopy"`
	// Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
	InitiatorTsNarrow pulumi.StringOutput `pulumi:"initiatorTsNarrow"`
	// Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
	Ipv4Df pulumi.StringOutput `pulumi:"ipv4Df"`
	// Enable/disable keep alive. Valid values: `enable`, `disable`.
	Keepalive pulumi.StringOutput `pulumi:"keepalive"`
	// Keylife type. Valid values: `seconds`, `kbs`, `both`.
	KeylifeType pulumi.StringOutput `pulumi:"keylifeType"`
	// Phase2 key life in number of bytes of traffic (5120 - 4294967295).
	Keylifekbs pulumi.IntOutput `pulumi:"keylifekbs"`
	// Phase2 key life in time in seconds (120 - 172800).
	Keylifeseconds pulumi.IntOutput `pulumi:"keylifeseconds"`
	// Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
	L2tp pulumi.StringOutput `pulumi:"l2tp"`
	// IPsec tunnel name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable PFS feature. Valid values: `enable`, `disable`.
	Pfs pulumi.StringOutput `pulumi:"pfs"`
	// Phase 1 determines the options required for phase 2.
	Phase1name pulumi.StringOutput `pulumi:"phase1name"`
	// Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
	Proposal pulumi.StringOutput `pulumi:"proposal"`
	// Quick mode protocol selector (1 - 255 or 0 for all).
	Protocol pulumi.IntOutput `pulumi:"protocol"`
	// Enable/disable replay detection. Valid values: `enable`, `disable`.
	Replay pulumi.StringOutput `pulumi:"replay"`
	// Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
	RouteOverlap pulumi.StringOutput `pulumi:"routeOverlap"`
	// Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
	SingleSource pulumi.StringOutput `pulumi:"singleSource"`
	// Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
	SrcAddrType pulumi.StringOutput `pulumi:"srcAddrType"`
	// Local proxy ID end.
	SrcEndIp pulumi.StringOutput `pulumi:"srcEndIp"`
	// Local proxy ID IPv6 end.
	SrcEndIp6 pulumi.StringOutput `pulumi:"srcEndIp6"`
	// Local proxy ID name.
	SrcName pulumi.StringOutput `pulumi:"srcName"`
	// Local proxy ID name.
	SrcName6 pulumi.StringOutput `pulumi:"srcName6"`
	// Quick mode source port (1 - 65535 or 0 for all).
	SrcPort pulumi.IntOutput `pulumi:"srcPort"`
	// Local proxy ID start.
	SrcStartIp pulumi.StringOutput `pulumi:"srcStartIp"`
	// Local proxy ID IPv6 start.
	SrcStartIp6 pulumi.StringOutput `pulumi:"srcStartIp6"`
	// Local proxy ID subnet.
	SrcSubnet pulumi.StringOutput `pulumi:"srcSubnet"`
	// Local proxy ID IPv6 subnet.
	SrcSubnet6 pulumi.StringOutput `pulumi:"srcSubnet6"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewPhase2interface registers a new resource with the given unique name, arguments, and options.
func NewPhase2interface(ctx *pulumi.Context,
	name string, args *Phase2interfaceArgs, opts ...pulumi.ResourceOption) (*Phase2interface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Phase1name == nil {
		return nil, errors.New("invalid value for required argument 'Phase1name'")
	}
	if args.Proposal == nil {
		return nil, errors.New("invalid value for required argument 'Proposal'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Phase2interface
	err := ctx.RegisterResource("fortios:vpn/ipsec/phase2interface:Phase2interface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPhase2interface gets an existing Phase2interface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPhase2interface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Phase2interfaceState, opts ...pulumi.ResourceOption) (*Phase2interface, error) {
	var resource Phase2interface
	err := ctx.ReadResource("fortios:vpn/ipsec/phase2interface:Phase2interface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Phase2interface resources.
type phase2interfaceState struct {
	// Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
	AddRoute *string `pulumi:"addRoute"`
	// Enable/disable forwarding short-cut messages. Valid values: `phase1`, `enable`, `disable`.
	AutoDiscoveryForwarder *string `pulumi:"autoDiscoveryForwarder"`
	// Enable/disable sending short-cut messages. Valid values: `phase1`, `enable`, `disable`.
	AutoDiscoverySender *string `pulumi:"autoDiscoverySender"`
	// Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
	AutoNegotiate *string `pulumi:"autoNegotiate"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
	DhcpIpsec *string `pulumi:"dhcpIpsec"`
	// Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
	Dhgrp *string `pulumi:"dhgrp"`
	// Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
	Diffserv *string `pulumi:"diffserv"`
	// DSCP value to be applied to the IPsec tunnel outer IP header.
	Diffservcode *string `pulumi:"diffservcode"`
	// Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
	DstAddrType *string `pulumi:"dstAddrType"`
	// Remote proxy ID IPv4 end.
	DstEndIp *string `pulumi:"dstEndIp"`
	// Remote proxy ID IPv6 end.
	DstEndIp6 *string `pulumi:"dstEndIp6"`
	// Remote proxy ID name.
	DstName *string `pulumi:"dstName"`
	// Remote proxy ID name.
	DstName6 *string `pulumi:"dstName6"`
	// Quick mode destination port (1 - 65535 or 0 for all).
	DstPort *int `pulumi:"dstPort"`
	// Remote proxy ID IPv4 start.
	DstStartIp *string `pulumi:"dstStartIp"`
	// Remote proxy ID IPv6 start.
	DstStartIp6 *string `pulumi:"dstStartIp6"`
	// Remote proxy ID IPv4 subnet.
	DstSubnet *string `pulumi:"dstSubnet"`
	// Remote proxy ID IPv6 subnet.
	DstSubnet6 *string `pulumi:"dstSubnet6"`
	// ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
	Encapsulation *string `pulumi:"encapsulation"`
	// Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
	InboundDscpCopy *string `pulumi:"inboundDscpCopy"`
	// Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
	InitiatorTsNarrow *string `pulumi:"initiatorTsNarrow"`
	// Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
	Ipv4Df *string `pulumi:"ipv4Df"`
	// Enable/disable keep alive. Valid values: `enable`, `disable`.
	Keepalive *string `pulumi:"keepalive"`
	// Keylife type. Valid values: `seconds`, `kbs`, `both`.
	KeylifeType *string `pulumi:"keylifeType"`
	// Phase2 key life in number of bytes of traffic (5120 - 4294967295).
	Keylifekbs *int `pulumi:"keylifekbs"`
	// Phase2 key life in time in seconds (120 - 172800).
	Keylifeseconds *int `pulumi:"keylifeseconds"`
	// Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
	L2tp *string `pulumi:"l2tp"`
	// IPsec tunnel name.
	Name *string `pulumi:"name"`
	// Enable/disable PFS feature. Valid values: `enable`, `disable`.
	Pfs *string `pulumi:"pfs"`
	// Phase 1 determines the options required for phase 2.
	Phase1name *string `pulumi:"phase1name"`
	// Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
	Proposal *string `pulumi:"proposal"`
	// Quick mode protocol selector (1 - 255 or 0 for all).
	Protocol *int `pulumi:"protocol"`
	// Enable/disable replay detection. Valid values: `enable`, `disable`.
	Replay *string `pulumi:"replay"`
	// Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
	RouteOverlap *string `pulumi:"routeOverlap"`
	// Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
	SingleSource *string `pulumi:"singleSource"`
	// Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
	SrcAddrType *string `pulumi:"srcAddrType"`
	// Local proxy ID end.
	SrcEndIp *string `pulumi:"srcEndIp"`
	// Local proxy ID IPv6 end.
	SrcEndIp6 *string `pulumi:"srcEndIp6"`
	// Local proxy ID name.
	SrcName *string `pulumi:"srcName"`
	// Local proxy ID name.
	SrcName6 *string `pulumi:"srcName6"`
	// Quick mode source port (1 - 65535 or 0 for all).
	SrcPort *int `pulumi:"srcPort"`
	// Local proxy ID start.
	SrcStartIp *string `pulumi:"srcStartIp"`
	// Local proxy ID IPv6 start.
	SrcStartIp6 *string `pulumi:"srcStartIp6"`
	// Local proxy ID subnet.
	SrcSubnet *string `pulumi:"srcSubnet"`
	// Local proxy ID IPv6 subnet.
	SrcSubnet6 *string `pulumi:"srcSubnet6"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type Phase2interfaceState struct {
	// Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
	AddRoute pulumi.StringPtrInput
	// Enable/disable forwarding short-cut messages. Valid values: `phase1`, `enable`, `disable`.
	AutoDiscoveryForwarder pulumi.StringPtrInput
	// Enable/disable sending short-cut messages. Valid values: `phase1`, `enable`, `disable`.
	AutoDiscoverySender pulumi.StringPtrInput
	// Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
	AutoNegotiate pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
	DhcpIpsec pulumi.StringPtrInput
	// Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
	Dhgrp pulumi.StringPtrInput
	// Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
	Diffserv pulumi.StringPtrInput
	// DSCP value to be applied to the IPsec tunnel outer IP header.
	Diffservcode pulumi.StringPtrInput
	// Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
	DstAddrType pulumi.StringPtrInput
	// Remote proxy ID IPv4 end.
	DstEndIp pulumi.StringPtrInput
	// Remote proxy ID IPv6 end.
	DstEndIp6 pulumi.StringPtrInput
	// Remote proxy ID name.
	DstName pulumi.StringPtrInput
	// Remote proxy ID name.
	DstName6 pulumi.StringPtrInput
	// Quick mode destination port (1 - 65535 or 0 for all).
	DstPort pulumi.IntPtrInput
	// Remote proxy ID IPv4 start.
	DstStartIp pulumi.StringPtrInput
	// Remote proxy ID IPv6 start.
	DstStartIp6 pulumi.StringPtrInput
	// Remote proxy ID IPv4 subnet.
	DstSubnet pulumi.StringPtrInput
	// Remote proxy ID IPv6 subnet.
	DstSubnet6 pulumi.StringPtrInput
	// ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
	Encapsulation pulumi.StringPtrInput
	// Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
	InboundDscpCopy pulumi.StringPtrInput
	// Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
	InitiatorTsNarrow pulumi.StringPtrInput
	// Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
	Ipv4Df pulumi.StringPtrInput
	// Enable/disable keep alive. Valid values: `enable`, `disable`.
	Keepalive pulumi.StringPtrInput
	// Keylife type. Valid values: `seconds`, `kbs`, `both`.
	KeylifeType pulumi.StringPtrInput
	// Phase2 key life in number of bytes of traffic (5120 - 4294967295).
	Keylifekbs pulumi.IntPtrInput
	// Phase2 key life in time in seconds (120 - 172800).
	Keylifeseconds pulumi.IntPtrInput
	// Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
	L2tp pulumi.StringPtrInput
	// IPsec tunnel name.
	Name pulumi.StringPtrInput
	// Enable/disable PFS feature. Valid values: `enable`, `disable`.
	Pfs pulumi.StringPtrInput
	// Phase 1 determines the options required for phase 2.
	Phase1name pulumi.StringPtrInput
	// Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
	Proposal pulumi.StringPtrInput
	// Quick mode protocol selector (1 - 255 or 0 for all).
	Protocol pulumi.IntPtrInput
	// Enable/disable replay detection. Valid values: `enable`, `disable`.
	Replay pulumi.StringPtrInput
	// Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
	RouteOverlap pulumi.StringPtrInput
	// Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
	SingleSource pulumi.StringPtrInput
	// Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
	SrcAddrType pulumi.StringPtrInput
	// Local proxy ID end.
	SrcEndIp pulumi.StringPtrInput
	// Local proxy ID IPv6 end.
	SrcEndIp6 pulumi.StringPtrInput
	// Local proxy ID name.
	SrcName pulumi.StringPtrInput
	// Local proxy ID name.
	SrcName6 pulumi.StringPtrInput
	// Quick mode source port (1 - 65535 or 0 for all).
	SrcPort pulumi.IntPtrInput
	// Local proxy ID start.
	SrcStartIp pulumi.StringPtrInput
	// Local proxy ID IPv6 start.
	SrcStartIp6 pulumi.StringPtrInput
	// Local proxy ID subnet.
	SrcSubnet pulumi.StringPtrInput
	// Local proxy ID IPv6 subnet.
	SrcSubnet6 pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Phase2interfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*phase2interfaceState)(nil)).Elem()
}

type phase2interfaceArgs struct {
	// Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
	AddRoute *string `pulumi:"addRoute"`
	// Enable/disable forwarding short-cut messages. Valid values: `phase1`, `enable`, `disable`.
	AutoDiscoveryForwarder *string `pulumi:"autoDiscoveryForwarder"`
	// Enable/disable sending short-cut messages. Valid values: `phase1`, `enable`, `disable`.
	AutoDiscoverySender *string `pulumi:"autoDiscoverySender"`
	// Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
	AutoNegotiate *string `pulumi:"autoNegotiate"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
	DhcpIpsec *string `pulumi:"dhcpIpsec"`
	// Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
	Dhgrp *string `pulumi:"dhgrp"`
	// Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
	Diffserv *string `pulumi:"diffserv"`
	// DSCP value to be applied to the IPsec tunnel outer IP header.
	Diffservcode *string `pulumi:"diffservcode"`
	// Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
	DstAddrType *string `pulumi:"dstAddrType"`
	// Remote proxy ID IPv4 end.
	DstEndIp *string `pulumi:"dstEndIp"`
	// Remote proxy ID IPv6 end.
	DstEndIp6 *string `pulumi:"dstEndIp6"`
	// Remote proxy ID name.
	DstName *string `pulumi:"dstName"`
	// Remote proxy ID name.
	DstName6 *string `pulumi:"dstName6"`
	// Quick mode destination port (1 - 65535 or 0 for all).
	DstPort *int `pulumi:"dstPort"`
	// Remote proxy ID IPv4 start.
	DstStartIp *string `pulumi:"dstStartIp"`
	// Remote proxy ID IPv6 start.
	DstStartIp6 *string `pulumi:"dstStartIp6"`
	// Remote proxy ID IPv4 subnet.
	DstSubnet *string `pulumi:"dstSubnet"`
	// Remote proxy ID IPv6 subnet.
	DstSubnet6 *string `pulumi:"dstSubnet6"`
	// ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
	Encapsulation *string `pulumi:"encapsulation"`
	// Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
	InboundDscpCopy *string `pulumi:"inboundDscpCopy"`
	// Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
	InitiatorTsNarrow *string `pulumi:"initiatorTsNarrow"`
	// Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
	Ipv4Df *string `pulumi:"ipv4Df"`
	// Enable/disable keep alive. Valid values: `enable`, `disable`.
	Keepalive *string `pulumi:"keepalive"`
	// Keylife type. Valid values: `seconds`, `kbs`, `both`.
	KeylifeType *string `pulumi:"keylifeType"`
	// Phase2 key life in number of bytes of traffic (5120 - 4294967295).
	Keylifekbs *int `pulumi:"keylifekbs"`
	// Phase2 key life in time in seconds (120 - 172800).
	Keylifeseconds *int `pulumi:"keylifeseconds"`
	// Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
	L2tp *string `pulumi:"l2tp"`
	// IPsec tunnel name.
	Name *string `pulumi:"name"`
	// Enable/disable PFS feature. Valid values: `enable`, `disable`.
	Pfs *string `pulumi:"pfs"`
	// Phase 1 determines the options required for phase 2.
	Phase1name string `pulumi:"phase1name"`
	// Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
	Proposal string `pulumi:"proposal"`
	// Quick mode protocol selector (1 - 255 or 0 for all).
	Protocol *int `pulumi:"protocol"`
	// Enable/disable replay detection. Valid values: `enable`, `disable`.
	Replay *string `pulumi:"replay"`
	// Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
	RouteOverlap *string `pulumi:"routeOverlap"`
	// Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
	SingleSource *string `pulumi:"singleSource"`
	// Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
	SrcAddrType *string `pulumi:"srcAddrType"`
	// Local proxy ID end.
	SrcEndIp *string `pulumi:"srcEndIp"`
	// Local proxy ID IPv6 end.
	SrcEndIp6 *string `pulumi:"srcEndIp6"`
	// Local proxy ID name.
	SrcName *string `pulumi:"srcName"`
	// Local proxy ID name.
	SrcName6 *string `pulumi:"srcName6"`
	// Quick mode source port (1 - 65535 or 0 for all).
	SrcPort *int `pulumi:"srcPort"`
	// Local proxy ID start.
	SrcStartIp *string `pulumi:"srcStartIp"`
	// Local proxy ID IPv6 start.
	SrcStartIp6 *string `pulumi:"srcStartIp6"`
	// Local proxy ID subnet.
	SrcSubnet *string `pulumi:"srcSubnet"`
	// Local proxy ID IPv6 subnet.
	SrcSubnet6 *string `pulumi:"srcSubnet6"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Phase2interface resource.
type Phase2interfaceArgs struct {
	// Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
	AddRoute pulumi.StringPtrInput
	// Enable/disable forwarding short-cut messages. Valid values: `phase1`, `enable`, `disable`.
	AutoDiscoveryForwarder pulumi.StringPtrInput
	// Enable/disable sending short-cut messages. Valid values: `phase1`, `enable`, `disable`.
	AutoDiscoverySender pulumi.StringPtrInput
	// Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
	AutoNegotiate pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
	DhcpIpsec pulumi.StringPtrInput
	// Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
	Dhgrp pulumi.StringPtrInput
	// Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
	Diffserv pulumi.StringPtrInput
	// DSCP value to be applied to the IPsec tunnel outer IP header.
	Diffservcode pulumi.StringPtrInput
	// Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
	DstAddrType pulumi.StringPtrInput
	// Remote proxy ID IPv4 end.
	DstEndIp pulumi.StringPtrInput
	// Remote proxy ID IPv6 end.
	DstEndIp6 pulumi.StringPtrInput
	// Remote proxy ID name.
	DstName pulumi.StringPtrInput
	// Remote proxy ID name.
	DstName6 pulumi.StringPtrInput
	// Quick mode destination port (1 - 65535 or 0 for all).
	DstPort pulumi.IntPtrInput
	// Remote proxy ID IPv4 start.
	DstStartIp pulumi.StringPtrInput
	// Remote proxy ID IPv6 start.
	DstStartIp6 pulumi.StringPtrInput
	// Remote proxy ID IPv4 subnet.
	DstSubnet pulumi.StringPtrInput
	// Remote proxy ID IPv6 subnet.
	DstSubnet6 pulumi.StringPtrInput
	// ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
	Encapsulation pulumi.StringPtrInput
	// Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
	InboundDscpCopy pulumi.StringPtrInput
	// Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
	InitiatorTsNarrow pulumi.StringPtrInput
	// Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
	Ipv4Df pulumi.StringPtrInput
	// Enable/disable keep alive. Valid values: `enable`, `disable`.
	Keepalive pulumi.StringPtrInput
	// Keylife type. Valid values: `seconds`, `kbs`, `both`.
	KeylifeType pulumi.StringPtrInput
	// Phase2 key life in number of bytes of traffic (5120 - 4294967295).
	Keylifekbs pulumi.IntPtrInput
	// Phase2 key life in time in seconds (120 - 172800).
	Keylifeseconds pulumi.IntPtrInput
	// Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
	L2tp pulumi.StringPtrInput
	// IPsec tunnel name.
	Name pulumi.StringPtrInput
	// Enable/disable PFS feature. Valid values: `enable`, `disable`.
	Pfs pulumi.StringPtrInput
	// Phase 1 determines the options required for phase 2.
	Phase1name pulumi.StringInput
	// Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
	Proposal pulumi.StringInput
	// Quick mode protocol selector (1 - 255 or 0 for all).
	Protocol pulumi.IntPtrInput
	// Enable/disable replay detection. Valid values: `enable`, `disable`.
	Replay pulumi.StringPtrInput
	// Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
	RouteOverlap pulumi.StringPtrInput
	// Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
	SingleSource pulumi.StringPtrInput
	// Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
	SrcAddrType pulumi.StringPtrInput
	// Local proxy ID end.
	SrcEndIp pulumi.StringPtrInput
	// Local proxy ID IPv6 end.
	SrcEndIp6 pulumi.StringPtrInput
	// Local proxy ID name.
	SrcName pulumi.StringPtrInput
	// Local proxy ID name.
	SrcName6 pulumi.StringPtrInput
	// Quick mode source port (1 - 65535 or 0 for all).
	SrcPort pulumi.IntPtrInput
	// Local proxy ID start.
	SrcStartIp pulumi.StringPtrInput
	// Local proxy ID IPv6 start.
	SrcStartIp6 pulumi.StringPtrInput
	// Local proxy ID subnet.
	SrcSubnet pulumi.StringPtrInput
	// Local proxy ID IPv6 subnet.
	SrcSubnet6 pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Phase2interfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*phase2interfaceArgs)(nil)).Elem()
}

type Phase2interfaceInput interface {
	pulumi.Input

	ToPhase2interfaceOutput() Phase2interfaceOutput
	ToPhase2interfaceOutputWithContext(ctx context.Context) Phase2interfaceOutput
}

func (*Phase2interface) ElementType() reflect.Type {
	return reflect.TypeOf((**Phase2interface)(nil)).Elem()
}

func (i *Phase2interface) ToPhase2interfaceOutput() Phase2interfaceOutput {
	return i.ToPhase2interfaceOutputWithContext(context.Background())
}

func (i *Phase2interface) ToPhase2interfaceOutputWithContext(ctx context.Context) Phase2interfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Phase2interfaceOutput)
}

// Phase2interfaceArrayInput is an input type that accepts Phase2interfaceArray and Phase2interfaceArrayOutput values.
// You can construct a concrete instance of `Phase2interfaceArrayInput` via:
//
//	Phase2interfaceArray{ Phase2interfaceArgs{...} }
type Phase2interfaceArrayInput interface {
	pulumi.Input

	ToPhase2interfaceArrayOutput() Phase2interfaceArrayOutput
	ToPhase2interfaceArrayOutputWithContext(context.Context) Phase2interfaceArrayOutput
}

type Phase2interfaceArray []Phase2interfaceInput

func (Phase2interfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Phase2interface)(nil)).Elem()
}

func (i Phase2interfaceArray) ToPhase2interfaceArrayOutput() Phase2interfaceArrayOutput {
	return i.ToPhase2interfaceArrayOutputWithContext(context.Background())
}

func (i Phase2interfaceArray) ToPhase2interfaceArrayOutputWithContext(ctx context.Context) Phase2interfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Phase2interfaceArrayOutput)
}

// Phase2interfaceMapInput is an input type that accepts Phase2interfaceMap and Phase2interfaceMapOutput values.
// You can construct a concrete instance of `Phase2interfaceMapInput` via:
//
//	Phase2interfaceMap{ "key": Phase2interfaceArgs{...} }
type Phase2interfaceMapInput interface {
	pulumi.Input

	ToPhase2interfaceMapOutput() Phase2interfaceMapOutput
	ToPhase2interfaceMapOutputWithContext(context.Context) Phase2interfaceMapOutput
}

type Phase2interfaceMap map[string]Phase2interfaceInput

func (Phase2interfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Phase2interface)(nil)).Elem()
}

func (i Phase2interfaceMap) ToPhase2interfaceMapOutput() Phase2interfaceMapOutput {
	return i.ToPhase2interfaceMapOutputWithContext(context.Background())
}

func (i Phase2interfaceMap) ToPhase2interfaceMapOutputWithContext(ctx context.Context) Phase2interfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Phase2interfaceMapOutput)
}

type Phase2interfaceOutput struct{ *pulumi.OutputState }

func (Phase2interfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Phase2interface)(nil)).Elem()
}

func (o Phase2interfaceOutput) ToPhase2interfaceOutput() Phase2interfaceOutput {
	return o
}

func (o Phase2interfaceOutput) ToPhase2interfaceOutputWithContext(ctx context.Context) Phase2interfaceOutput {
	return o
}

// Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
func (o Phase2interfaceOutput) AddRoute() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.AddRoute }).(pulumi.StringOutput)
}

// Enable/disable forwarding short-cut messages. Valid values: `phase1`, `enable`, `disable`.
func (o Phase2interfaceOutput) AutoDiscoveryForwarder() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.AutoDiscoveryForwarder }).(pulumi.StringOutput)
}

// Enable/disable sending short-cut messages. Valid values: `phase1`, `enable`, `disable`.
func (o Phase2interfaceOutput) AutoDiscoverySender() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.AutoDiscoverySender }).(pulumi.StringOutput)
}

// Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
func (o Phase2interfaceOutput) AutoNegotiate() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.AutoNegotiate }).(pulumi.StringOutput)
}

// Comment.
func (o Phase2interfaceOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
func (o Phase2interfaceOutput) DhcpIpsec() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.DhcpIpsec }).(pulumi.StringOutput)
}

// Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
func (o Phase2interfaceOutput) Dhgrp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.Dhgrp }).(pulumi.StringOutput)
}

// Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
func (o Phase2interfaceOutput) Diffserv() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.Diffserv }).(pulumi.StringOutput)
}

// DSCP value to be applied to the IPsec tunnel outer IP header.
func (o Phase2interfaceOutput) Diffservcode() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.Diffservcode }).(pulumi.StringOutput)
}

// Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
func (o Phase2interfaceOutput) DstAddrType() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.DstAddrType }).(pulumi.StringOutput)
}

// Remote proxy ID IPv4 end.
func (o Phase2interfaceOutput) DstEndIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.DstEndIp }).(pulumi.StringOutput)
}

// Remote proxy ID IPv6 end.
func (o Phase2interfaceOutput) DstEndIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.DstEndIp6 }).(pulumi.StringOutput)
}

// Remote proxy ID name.
func (o Phase2interfaceOutput) DstName() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.DstName }).(pulumi.StringOutput)
}

// Remote proxy ID name.
func (o Phase2interfaceOutput) DstName6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.DstName6 }).(pulumi.StringOutput)
}

// Quick mode destination port (1 - 65535 or 0 for all).
func (o Phase2interfaceOutput) DstPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.IntOutput { return v.DstPort }).(pulumi.IntOutput)
}

// Remote proxy ID IPv4 start.
func (o Phase2interfaceOutput) DstStartIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.DstStartIp }).(pulumi.StringOutput)
}

// Remote proxy ID IPv6 start.
func (o Phase2interfaceOutput) DstStartIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.DstStartIp6 }).(pulumi.StringOutput)
}

// Remote proxy ID IPv4 subnet.
func (o Phase2interfaceOutput) DstSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.DstSubnet }).(pulumi.StringOutput)
}

// Remote proxy ID IPv6 subnet.
func (o Phase2interfaceOutput) DstSubnet6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.DstSubnet6 }).(pulumi.StringOutput)
}

// ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
func (o Phase2interfaceOutput) Encapsulation() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.Encapsulation }).(pulumi.StringOutput)
}

// Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
func (o Phase2interfaceOutput) InboundDscpCopy() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.InboundDscpCopy }).(pulumi.StringOutput)
}

// Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
func (o Phase2interfaceOutput) InitiatorTsNarrow() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.InitiatorTsNarrow }).(pulumi.StringOutput)
}

// Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
func (o Phase2interfaceOutput) Ipv4Df() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.Ipv4Df }).(pulumi.StringOutput)
}

// Enable/disable keep alive. Valid values: `enable`, `disable`.
func (o Phase2interfaceOutput) Keepalive() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.Keepalive }).(pulumi.StringOutput)
}

// Keylife type. Valid values: `seconds`, `kbs`, `both`.
func (o Phase2interfaceOutput) KeylifeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.KeylifeType }).(pulumi.StringOutput)
}

// Phase2 key life in number of bytes of traffic (5120 - 4294967295).
func (o Phase2interfaceOutput) Keylifekbs() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.IntOutput { return v.Keylifekbs }).(pulumi.IntOutput)
}

// Phase2 key life in time in seconds (120 - 172800).
func (o Phase2interfaceOutput) Keylifeseconds() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.IntOutput { return v.Keylifeseconds }).(pulumi.IntOutput)
}

// Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
func (o Phase2interfaceOutput) L2tp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.L2tp }).(pulumi.StringOutput)
}

// IPsec tunnel name.
func (o Phase2interfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable PFS feature. Valid values: `enable`, `disable`.
func (o Phase2interfaceOutput) Pfs() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.Pfs }).(pulumi.StringOutput)
}

// Phase 1 determines the options required for phase 2.
func (o Phase2interfaceOutput) Phase1name() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.Phase1name }).(pulumi.StringOutput)
}

// Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
func (o Phase2interfaceOutput) Proposal() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.Proposal }).(pulumi.StringOutput)
}

// Quick mode protocol selector (1 - 255 or 0 for all).
func (o Phase2interfaceOutput) Protocol() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.IntOutput { return v.Protocol }).(pulumi.IntOutput)
}

// Enable/disable replay detection. Valid values: `enable`, `disable`.
func (o Phase2interfaceOutput) Replay() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.Replay }).(pulumi.StringOutput)
}

// Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
func (o Phase2interfaceOutput) RouteOverlap() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.RouteOverlap }).(pulumi.StringOutput)
}

// Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
func (o Phase2interfaceOutput) SingleSource() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.SingleSource }).(pulumi.StringOutput)
}

// Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
func (o Phase2interfaceOutput) SrcAddrType() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.SrcAddrType }).(pulumi.StringOutput)
}

// Local proxy ID end.
func (o Phase2interfaceOutput) SrcEndIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.SrcEndIp }).(pulumi.StringOutput)
}

// Local proxy ID IPv6 end.
func (o Phase2interfaceOutput) SrcEndIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.SrcEndIp6 }).(pulumi.StringOutput)
}

// Local proxy ID name.
func (o Phase2interfaceOutput) SrcName() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.SrcName }).(pulumi.StringOutput)
}

// Local proxy ID name.
func (o Phase2interfaceOutput) SrcName6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.SrcName6 }).(pulumi.StringOutput)
}

// Quick mode source port (1 - 65535 or 0 for all).
func (o Phase2interfaceOutput) SrcPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.IntOutput { return v.SrcPort }).(pulumi.IntOutput)
}

// Local proxy ID start.
func (o Phase2interfaceOutput) SrcStartIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.SrcStartIp }).(pulumi.StringOutput)
}

// Local proxy ID IPv6 start.
func (o Phase2interfaceOutput) SrcStartIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.SrcStartIp6 }).(pulumi.StringOutput)
}

// Local proxy ID subnet.
func (o Phase2interfaceOutput) SrcSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.SrcSubnet }).(pulumi.StringOutput)
}

// Local proxy ID IPv6 subnet.
func (o Phase2interfaceOutput) SrcSubnet6() pulumi.StringOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringOutput { return v.SrcSubnet6 }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o Phase2interfaceOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Phase2interface) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type Phase2interfaceArrayOutput struct{ *pulumi.OutputState }

func (Phase2interfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Phase2interface)(nil)).Elem()
}

func (o Phase2interfaceArrayOutput) ToPhase2interfaceArrayOutput() Phase2interfaceArrayOutput {
	return o
}

func (o Phase2interfaceArrayOutput) ToPhase2interfaceArrayOutputWithContext(ctx context.Context) Phase2interfaceArrayOutput {
	return o
}

func (o Phase2interfaceArrayOutput) Index(i pulumi.IntInput) Phase2interfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Phase2interface {
		return vs[0].([]*Phase2interface)[vs[1].(int)]
	}).(Phase2interfaceOutput)
}

type Phase2interfaceMapOutput struct{ *pulumi.OutputState }

func (Phase2interfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Phase2interface)(nil)).Elem()
}

func (o Phase2interfaceMapOutput) ToPhase2interfaceMapOutput() Phase2interfaceMapOutput {
	return o
}

func (o Phase2interfaceMapOutput) ToPhase2interfaceMapOutputWithContext(ctx context.Context) Phase2interfaceMapOutput {
	return o
}

func (o Phase2interfaceMapOutput) MapIndex(k pulumi.StringInput) Phase2interfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Phase2interface {
		return vs[0].(map[string]*Phase2interface)[vs[1].(string)]
	}).(Phase2interfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Phase2interfaceInput)(nil)).Elem(), &Phase2interface{})
	pulumi.RegisterInputType(reflect.TypeOf((*Phase2interfaceArrayInput)(nil)).Elem(), Phase2interfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Phase2interfaceMapInput)(nil)).Elem(), Phase2interfaceMap{})
	pulumi.RegisterOutputType(Phase2interfaceOutput{})
	pulumi.RegisterOutputType(Phase2interfaceArrayOutput{})
	pulumi.RegisterOutputType(Phase2interfaceMapOutput{})
}
