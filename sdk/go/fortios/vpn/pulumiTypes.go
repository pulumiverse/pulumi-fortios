// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

var _ = internal.GetEnvOrDefault

type KmipserverServerList struct {
	// Client certificate to use for connectivity to the KMIP server.
	Cert *string `pulumi:"cert"`
	// ID
	Id *int `pulumi:"id"`
	// KMIP server port.
	Port *int `pulumi:"port"`
	// KMIP server FQDN or IP address.
	Server *string `pulumi:"server"`
	// Enable/disable KMIP server. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
}

// KmipserverServerListInput is an input type that accepts KmipserverServerListArgs and KmipserverServerListOutput values.
// You can construct a concrete instance of `KmipserverServerListInput` via:
//
//	KmipserverServerListArgs{...}
type KmipserverServerListInput interface {
	pulumi.Input

	ToKmipserverServerListOutput() KmipserverServerListOutput
	ToKmipserverServerListOutputWithContext(context.Context) KmipserverServerListOutput
}

type KmipserverServerListArgs struct {
	// Client certificate to use for connectivity to the KMIP server.
	Cert pulumi.StringPtrInput `pulumi:"cert"`
	// ID
	Id pulumi.IntPtrInput `pulumi:"id"`
	// KMIP server port.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// KMIP server FQDN or IP address.
	Server pulumi.StringPtrInput `pulumi:"server"`
	// Enable/disable KMIP server. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (KmipserverServerListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KmipserverServerList)(nil)).Elem()
}

func (i KmipserverServerListArgs) ToKmipserverServerListOutput() KmipserverServerListOutput {
	return i.ToKmipserverServerListOutputWithContext(context.Background())
}

func (i KmipserverServerListArgs) ToKmipserverServerListOutputWithContext(ctx context.Context) KmipserverServerListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmipserverServerListOutput)
}

// KmipserverServerListArrayInput is an input type that accepts KmipserverServerListArray and KmipserverServerListArrayOutput values.
// You can construct a concrete instance of `KmipserverServerListArrayInput` via:
//
//	KmipserverServerListArray{ KmipserverServerListArgs{...} }
type KmipserverServerListArrayInput interface {
	pulumi.Input

	ToKmipserverServerListArrayOutput() KmipserverServerListArrayOutput
	ToKmipserverServerListArrayOutputWithContext(context.Context) KmipserverServerListArrayOutput
}

type KmipserverServerListArray []KmipserverServerListInput

func (KmipserverServerListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KmipserverServerList)(nil)).Elem()
}

func (i KmipserverServerListArray) ToKmipserverServerListArrayOutput() KmipserverServerListArrayOutput {
	return i.ToKmipserverServerListArrayOutputWithContext(context.Background())
}

func (i KmipserverServerListArray) ToKmipserverServerListArrayOutputWithContext(ctx context.Context) KmipserverServerListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmipserverServerListArrayOutput)
}

type KmipserverServerListOutput struct{ *pulumi.OutputState }

func (KmipserverServerListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KmipserverServerList)(nil)).Elem()
}

func (o KmipserverServerListOutput) ToKmipserverServerListOutput() KmipserverServerListOutput {
	return o
}

func (o KmipserverServerListOutput) ToKmipserverServerListOutputWithContext(ctx context.Context) KmipserverServerListOutput {
	return o
}

// Client certificate to use for connectivity to the KMIP server.
func (o KmipserverServerListOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KmipserverServerList) *string { return v.Cert }).(pulumi.StringPtrOutput)
}

// ID
func (o KmipserverServerListOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KmipserverServerList) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// KMIP server port.
func (o KmipserverServerListOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KmipserverServerList) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// KMIP server FQDN or IP address.
func (o KmipserverServerListOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KmipserverServerList) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// Enable/disable KMIP server. Valid values: `enable`, `disable`.
func (o KmipserverServerListOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KmipserverServerList) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type KmipserverServerListArrayOutput struct{ *pulumi.OutputState }

func (KmipserverServerListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KmipserverServerList)(nil)).Elem()
}

func (o KmipserverServerListArrayOutput) ToKmipserverServerListArrayOutput() KmipserverServerListArrayOutput {
	return o
}

func (o KmipserverServerListArrayOutput) ToKmipserverServerListArrayOutputWithContext(ctx context.Context) KmipserverServerListArrayOutput {
	return o
}

func (o KmipserverServerListArrayOutput) Index(i pulumi.IntInput) KmipserverServerListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KmipserverServerList {
		return vs[0].([]KmipserverServerList)[vs[1].(int)]
	}).(KmipserverServerListOutput)
}

type OcvpnForticlientAccess struct {
	// FortiClient user authentication groups. The structure of `authGroups` block is documented below.
	AuthGroups []OcvpnForticlientAccessAuthGroup `pulumi:"authGroups"`
	// Pre-shared secret for FortiClient PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
	Psksecret *string `pulumi:"psksecret"`
	// Enable/disable FortiClient to access OCVPN networks. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
}

// OcvpnForticlientAccessInput is an input type that accepts OcvpnForticlientAccessArgs and OcvpnForticlientAccessOutput values.
// You can construct a concrete instance of `OcvpnForticlientAccessInput` via:
//
//	OcvpnForticlientAccessArgs{...}
type OcvpnForticlientAccessInput interface {
	pulumi.Input

	ToOcvpnForticlientAccessOutput() OcvpnForticlientAccessOutput
	ToOcvpnForticlientAccessOutputWithContext(context.Context) OcvpnForticlientAccessOutput
}

type OcvpnForticlientAccessArgs struct {
	// FortiClient user authentication groups. The structure of `authGroups` block is documented below.
	AuthGroups OcvpnForticlientAccessAuthGroupArrayInput `pulumi:"authGroups"`
	// Pre-shared secret for FortiClient PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
	Psksecret pulumi.StringPtrInput `pulumi:"psksecret"`
	// Enable/disable FortiClient to access OCVPN networks. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (OcvpnForticlientAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OcvpnForticlientAccess)(nil)).Elem()
}

func (i OcvpnForticlientAccessArgs) ToOcvpnForticlientAccessOutput() OcvpnForticlientAccessOutput {
	return i.ToOcvpnForticlientAccessOutputWithContext(context.Background())
}

func (i OcvpnForticlientAccessArgs) ToOcvpnForticlientAccessOutputWithContext(ctx context.Context) OcvpnForticlientAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OcvpnForticlientAccessOutput)
}

func (i OcvpnForticlientAccessArgs) ToOcvpnForticlientAccessPtrOutput() OcvpnForticlientAccessPtrOutput {
	return i.ToOcvpnForticlientAccessPtrOutputWithContext(context.Background())
}

func (i OcvpnForticlientAccessArgs) ToOcvpnForticlientAccessPtrOutputWithContext(ctx context.Context) OcvpnForticlientAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OcvpnForticlientAccessOutput).ToOcvpnForticlientAccessPtrOutputWithContext(ctx)
}

// OcvpnForticlientAccessPtrInput is an input type that accepts OcvpnForticlientAccessArgs, OcvpnForticlientAccessPtr and OcvpnForticlientAccessPtrOutput values.
// You can construct a concrete instance of `OcvpnForticlientAccessPtrInput` via:
//
//	        OcvpnForticlientAccessArgs{...}
//
//	or:
//
//	        nil
type OcvpnForticlientAccessPtrInput interface {
	pulumi.Input

	ToOcvpnForticlientAccessPtrOutput() OcvpnForticlientAccessPtrOutput
	ToOcvpnForticlientAccessPtrOutputWithContext(context.Context) OcvpnForticlientAccessPtrOutput
}

type ocvpnForticlientAccessPtrType OcvpnForticlientAccessArgs

func OcvpnForticlientAccessPtr(v *OcvpnForticlientAccessArgs) OcvpnForticlientAccessPtrInput {
	return (*ocvpnForticlientAccessPtrType)(v)
}

func (*ocvpnForticlientAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OcvpnForticlientAccess)(nil)).Elem()
}

func (i *ocvpnForticlientAccessPtrType) ToOcvpnForticlientAccessPtrOutput() OcvpnForticlientAccessPtrOutput {
	return i.ToOcvpnForticlientAccessPtrOutputWithContext(context.Background())
}

func (i *ocvpnForticlientAccessPtrType) ToOcvpnForticlientAccessPtrOutputWithContext(ctx context.Context) OcvpnForticlientAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OcvpnForticlientAccessPtrOutput)
}

type OcvpnForticlientAccessOutput struct{ *pulumi.OutputState }

func (OcvpnForticlientAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OcvpnForticlientAccess)(nil)).Elem()
}

func (o OcvpnForticlientAccessOutput) ToOcvpnForticlientAccessOutput() OcvpnForticlientAccessOutput {
	return o
}

func (o OcvpnForticlientAccessOutput) ToOcvpnForticlientAccessOutputWithContext(ctx context.Context) OcvpnForticlientAccessOutput {
	return o
}

func (o OcvpnForticlientAccessOutput) ToOcvpnForticlientAccessPtrOutput() OcvpnForticlientAccessPtrOutput {
	return o.ToOcvpnForticlientAccessPtrOutputWithContext(context.Background())
}

func (o OcvpnForticlientAccessOutput) ToOcvpnForticlientAccessPtrOutputWithContext(ctx context.Context) OcvpnForticlientAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OcvpnForticlientAccess) *OcvpnForticlientAccess {
		return &v
	}).(OcvpnForticlientAccessPtrOutput)
}

// FortiClient user authentication groups. The structure of `authGroups` block is documented below.
func (o OcvpnForticlientAccessOutput) AuthGroups() OcvpnForticlientAccessAuthGroupArrayOutput {
	return o.ApplyT(func(v OcvpnForticlientAccess) []OcvpnForticlientAccessAuthGroup { return v.AuthGroups }).(OcvpnForticlientAccessAuthGroupArrayOutput)
}

// Pre-shared secret for FortiClient PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
func (o OcvpnForticlientAccessOutput) Psksecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OcvpnForticlientAccess) *string { return v.Psksecret }).(pulumi.StringPtrOutput)
}

// Enable/disable FortiClient to access OCVPN networks. Valid values: `enable`, `disable`.
func (o OcvpnForticlientAccessOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OcvpnForticlientAccess) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type OcvpnForticlientAccessPtrOutput struct{ *pulumi.OutputState }

func (OcvpnForticlientAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OcvpnForticlientAccess)(nil)).Elem()
}

func (o OcvpnForticlientAccessPtrOutput) ToOcvpnForticlientAccessPtrOutput() OcvpnForticlientAccessPtrOutput {
	return o
}

func (o OcvpnForticlientAccessPtrOutput) ToOcvpnForticlientAccessPtrOutputWithContext(ctx context.Context) OcvpnForticlientAccessPtrOutput {
	return o
}

func (o OcvpnForticlientAccessPtrOutput) Elem() OcvpnForticlientAccessOutput {
	return o.ApplyT(func(v *OcvpnForticlientAccess) OcvpnForticlientAccess {
		if v != nil {
			return *v
		}
		var ret OcvpnForticlientAccess
		return ret
	}).(OcvpnForticlientAccessOutput)
}

// FortiClient user authentication groups. The structure of `authGroups` block is documented below.
func (o OcvpnForticlientAccessPtrOutput) AuthGroups() OcvpnForticlientAccessAuthGroupArrayOutput {
	return o.ApplyT(func(v *OcvpnForticlientAccess) []OcvpnForticlientAccessAuthGroup {
		if v == nil {
			return nil
		}
		return v.AuthGroups
	}).(OcvpnForticlientAccessAuthGroupArrayOutput)
}

// Pre-shared secret for FortiClient PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
func (o OcvpnForticlientAccessPtrOutput) Psksecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OcvpnForticlientAccess) *string {
		if v == nil {
			return nil
		}
		return v.Psksecret
	}).(pulumi.StringPtrOutput)
}

// Enable/disable FortiClient to access OCVPN networks. Valid values: `enable`, `disable`.
func (o OcvpnForticlientAccessPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OcvpnForticlientAccess) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type OcvpnForticlientAccessAuthGroup struct {
	// Authentication user group for FortiClient access.
	AuthGroup *string `pulumi:"authGroup"`
	// Group name.
	Name *string `pulumi:"name"`
	// OCVPN overlays to allow access to. The structure of `overlays` block is documented below.
	Overlays []OcvpnForticlientAccessAuthGroupOverlay `pulumi:"overlays"`
}

// OcvpnForticlientAccessAuthGroupInput is an input type that accepts OcvpnForticlientAccessAuthGroupArgs and OcvpnForticlientAccessAuthGroupOutput values.
// You can construct a concrete instance of `OcvpnForticlientAccessAuthGroupInput` via:
//
//	OcvpnForticlientAccessAuthGroupArgs{...}
type OcvpnForticlientAccessAuthGroupInput interface {
	pulumi.Input

	ToOcvpnForticlientAccessAuthGroupOutput() OcvpnForticlientAccessAuthGroupOutput
	ToOcvpnForticlientAccessAuthGroupOutputWithContext(context.Context) OcvpnForticlientAccessAuthGroupOutput
}

type OcvpnForticlientAccessAuthGroupArgs struct {
	// Authentication user group for FortiClient access.
	AuthGroup pulumi.StringPtrInput `pulumi:"authGroup"`
	// Group name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// OCVPN overlays to allow access to. The structure of `overlays` block is documented below.
	Overlays OcvpnForticlientAccessAuthGroupOverlayArrayInput `pulumi:"overlays"`
}

func (OcvpnForticlientAccessAuthGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OcvpnForticlientAccessAuthGroup)(nil)).Elem()
}

func (i OcvpnForticlientAccessAuthGroupArgs) ToOcvpnForticlientAccessAuthGroupOutput() OcvpnForticlientAccessAuthGroupOutput {
	return i.ToOcvpnForticlientAccessAuthGroupOutputWithContext(context.Background())
}

func (i OcvpnForticlientAccessAuthGroupArgs) ToOcvpnForticlientAccessAuthGroupOutputWithContext(ctx context.Context) OcvpnForticlientAccessAuthGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OcvpnForticlientAccessAuthGroupOutput)
}

// OcvpnForticlientAccessAuthGroupArrayInput is an input type that accepts OcvpnForticlientAccessAuthGroupArray and OcvpnForticlientAccessAuthGroupArrayOutput values.
// You can construct a concrete instance of `OcvpnForticlientAccessAuthGroupArrayInput` via:
//
//	OcvpnForticlientAccessAuthGroupArray{ OcvpnForticlientAccessAuthGroupArgs{...} }
type OcvpnForticlientAccessAuthGroupArrayInput interface {
	pulumi.Input

	ToOcvpnForticlientAccessAuthGroupArrayOutput() OcvpnForticlientAccessAuthGroupArrayOutput
	ToOcvpnForticlientAccessAuthGroupArrayOutputWithContext(context.Context) OcvpnForticlientAccessAuthGroupArrayOutput
}

type OcvpnForticlientAccessAuthGroupArray []OcvpnForticlientAccessAuthGroupInput

func (OcvpnForticlientAccessAuthGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OcvpnForticlientAccessAuthGroup)(nil)).Elem()
}

func (i OcvpnForticlientAccessAuthGroupArray) ToOcvpnForticlientAccessAuthGroupArrayOutput() OcvpnForticlientAccessAuthGroupArrayOutput {
	return i.ToOcvpnForticlientAccessAuthGroupArrayOutputWithContext(context.Background())
}

func (i OcvpnForticlientAccessAuthGroupArray) ToOcvpnForticlientAccessAuthGroupArrayOutputWithContext(ctx context.Context) OcvpnForticlientAccessAuthGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OcvpnForticlientAccessAuthGroupArrayOutput)
}

type OcvpnForticlientAccessAuthGroupOutput struct{ *pulumi.OutputState }

func (OcvpnForticlientAccessAuthGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OcvpnForticlientAccessAuthGroup)(nil)).Elem()
}

func (o OcvpnForticlientAccessAuthGroupOutput) ToOcvpnForticlientAccessAuthGroupOutput() OcvpnForticlientAccessAuthGroupOutput {
	return o
}

func (o OcvpnForticlientAccessAuthGroupOutput) ToOcvpnForticlientAccessAuthGroupOutputWithContext(ctx context.Context) OcvpnForticlientAccessAuthGroupOutput {
	return o
}

// Authentication user group for FortiClient access.
func (o OcvpnForticlientAccessAuthGroupOutput) AuthGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OcvpnForticlientAccessAuthGroup) *string { return v.AuthGroup }).(pulumi.StringPtrOutput)
}

// Group name.
func (o OcvpnForticlientAccessAuthGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OcvpnForticlientAccessAuthGroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// OCVPN overlays to allow access to. The structure of `overlays` block is documented below.
func (o OcvpnForticlientAccessAuthGroupOutput) Overlays() OcvpnForticlientAccessAuthGroupOverlayArrayOutput {
	return o.ApplyT(func(v OcvpnForticlientAccessAuthGroup) []OcvpnForticlientAccessAuthGroupOverlay { return v.Overlays }).(OcvpnForticlientAccessAuthGroupOverlayArrayOutput)
}

type OcvpnForticlientAccessAuthGroupArrayOutput struct{ *pulumi.OutputState }

func (OcvpnForticlientAccessAuthGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OcvpnForticlientAccessAuthGroup)(nil)).Elem()
}

func (o OcvpnForticlientAccessAuthGroupArrayOutput) ToOcvpnForticlientAccessAuthGroupArrayOutput() OcvpnForticlientAccessAuthGroupArrayOutput {
	return o
}

func (o OcvpnForticlientAccessAuthGroupArrayOutput) ToOcvpnForticlientAccessAuthGroupArrayOutputWithContext(ctx context.Context) OcvpnForticlientAccessAuthGroupArrayOutput {
	return o
}

func (o OcvpnForticlientAccessAuthGroupArrayOutput) Index(i pulumi.IntInput) OcvpnForticlientAccessAuthGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OcvpnForticlientAccessAuthGroup {
		return vs[0].([]OcvpnForticlientAccessAuthGroup)[vs[1].(int)]
	}).(OcvpnForticlientAccessAuthGroupOutput)
}

type OcvpnForticlientAccessAuthGroupOverlay struct {
	// Overlay name.
	OverlayName *string `pulumi:"overlayName"`
}

// OcvpnForticlientAccessAuthGroupOverlayInput is an input type that accepts OcvpnForticlientAccessAuthGroupOverlayArgs and OcvpnForticlientAccessAuthGroupOverlayOutput values.
// You can construct a concrete instance of `OcvpnForticlientAccessAuthGroupOverlayInput` via:
//
//	OcvpnForticlientAccessAuthGroupOverlayArgs{...}
type OcvpnForticlientAccessAuthGroupOverlayInput interface {
	pulumi.Input

	ToOcvpnForticlientAccessAuthGroupOverlayOutput() OcvpnForticlientAccessAuthGroupOverlayOutput
	ToOcvpnForticlientAccessAuthGroupOverlayOutputWithContext(context.Context) OcvpnForticlientAccessAuthGroupOverlayOutput
}

type OcvpnForticlientAccessAuthGroupOverlayArgs struct {
	// Overlay name.
	OverlayName pulumi.StringPtrInput `pulumi:"overlayName"`
}

func (OcvpnForticlientAccessAuthGroupOverlayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OcvpnForticlientAccessAuthGroupOverlay)(nil)).Elem()
}

func (i OcvpnForticlientAccessAuthGroupOverlayArgs) ToOcvpnForticlientAccessAuthGroupOverlayOutput() OcvpnForticlientAccessAuthGroupOverlayOutput {
	return i.ToOcvpnForticlientAccessAuthGroupOverlayOutputWithContext(context.Background())
}

func (i OcvpnForticlientAccessAuthGroupOverlayArgs) ToOcvpnForticlientAccessAuthGroupOverlayOutputWithContext(ctx context.Context) OcvpnForticlientAccessAuthGroupOverlayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OcvpnForticlientAccessAuthGroupOverlayOutput)
}

// OcvpnForticlientAccessAuthGroupOverlayArrayInput is an input type that accepts OcvpnForticlientAccessAuthGroupOverlayArray and OcvpnForticlientAccessAuthGroupOverlayArrayOutput values.
// You can construct a concrete instance of `OcvpnForticlientAccessAuthGroupOverlayArrayInput` via:
//
//	OcvpnForticlientAccessAuthGroupOverlayArray{ OcvpnForticlientAccessAuthGroupOverlayArgs{...} }
type OcvpnForticlientAccessAuthGroupOverlayArrayInput interface {
	pulumi.Input

	ToOcvpnForticlientAccessAuthGroupOverlayArrayOutput() OcvpnForticlientAccessAuthGroupOverlayArrayOutput
	ToOcvpnForticlientAccessAuthGroupOverlayArrayOutputWithContext(context.Context) OcvpnForticlientAccessAuthGroupOverlayArrayOutput
}

type OcvpnForticlientAccessAuthGroupOverlayArray []OcvpnForticlientAccessAuthGroupOverlayInput

func (OcvpnForticlientAccessAuthGroupOverlayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OcvpnForticlientAccessAuthGroupOverlay)(nil)).Elem()
}

func (i OcvpnForticlientAccessAuthGroupOverlayArray) ToOcvpnForticlientAccessAuthGroupOverlayArrayOutput() OcvpnForticlientAccessAuthGroupOverlayArrayOutput {
	return i.ToOcvpnForticlientAccessAuthGroupOverlayArrayOutputWithContext(context.Background())
}

func (i OcvpnForticlientAccessAuthGroupOverlayArray) ToOcvpnForticlientAccessAuthGroupOverlayArrayOutputWithContext(ctx context.Context) OcvpnForticlientAccessAuthGroupOverlayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OcvpnForticlientAccessAuthGroupOverlayArrayOutput)
}

type OcvpnForticlientAccessAuthGroupOverlayOutput struct{ *pulumi.OutputState }

func (OcvpnForticlientAccessAuthGroupOverlayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OcvpnForticlientAccessAuthGroupOverlay)(nil)).Elem()
}

func (o OcvpnForticlientAccessAuthGroupOverlayOutput) ToOcvpnForticlientAccessAuthGroupOverlayOutput() OcvpnForticlientAccessAuthGroupOverlayOutput {
	return o
}

func (o OcvpnForticlientAccessAuthGroupOverlayOutput) ToOcvpnForticlientAccessAuthGroupOverlayOutputWithContext(ctx context.Context) OcvpnForticlientAccessAuthGroupOverlayOutput {
	return o
}

// Overlay name.
func (o OcvpnForticlientAccessAuthGroupOverlayOutput) OverlayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OcvpnForticlientAccessAuthGroupOverlay) *string { return v.OverlayName }).(pulumi.StringPtrOutput)
}

type OcvpnForticlientAccessAuthGroupOverlayArrayOutput struct{ *pulumi.OutputState }

func (OcvpnForticlientAccessAuthGroupOverlayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OcvpnForticlientAccessAuthGroupOverlay)(nil)).Elem()
}

func (o OcvpnForticlientAccessAuthGroupOverlayArrayOutput) ToOcvpnForticlientAccessAuthGroupOverlayArrayOutput() OcvpnForticlientAccessAuthGroupOverlayArrayOutput {
	return o
}

func (o OcvpnForticlientAccessAuthGroupOverlayArrayOutput) ToOcvpnForticlientAccessAuthGroupOverlayArrayOutputWithContext(ctx context.Context) OcvpnForticlientAccessAuthGroupOverlayArrayOutput {
	return o
}

func (o OcvpnForticlientAccessAuthGroupOverlayArrayOutput) Index(i pulumi.IntInput) OcvpnForticlientAccessAuthGroupOverlayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OcvpnForticlientAccessAuthGroupOverlay {
		return vs[0].([]OcvpnForticlientAccessAuthGroupOverlay)[vs[1].(int)]
	}).(OcvpnForticlientAccessAuthGroupOverlayOutput)
}

type OcvpnOverlay struct {
	// Enable/disable client address assignment. Valid values: `enable`, `disable`.
	AssignIp *string `pulumi:"assignIp"`
	// ID.
	Id *int `pulumi:"id"`
	// Allow or deny traffic from other overlays. Valid values: `allow`, `deny`.
	InterOverlay *string `pulumi:"interOverlay"`
	// End of client IPv4 range.
	Ipv4EndIp *string `pulumi:"ipv4EndIp"`
	// Start of client IPv4 range.
	Ipv4StartIp *string `pulumi:"ipv4StartIp"`
	// Overlay name.
	Name *string `pulumi:"name"`
	// Overlay name.
	OverlayName *string `pulumi:"overlayName"`
	// Internal subnets to register with OCVPN service. The structure of `subnets` block is documented below.
	Subnets []OcvpnOverlaySubnet `pulumi:"subnets"`
}

// OcvpnOverlayInput is an input type that accepts OcvpnOverlayArgs and OcvpnOverlayOutput values.
// You can construct a concrete instance of `OcvpnOverlayInput` via:
//
//	OcvpnOverlayArgs{...}
type OcvpnOverlayInput interface {
	pulumi.Input

	ToOcvpnOverlayOutput() OcvpnOverlayOutput
	ToOcvpnOverlayOutputWithContext(context.Context) OcvpnOverlayOutput
}

type OcvpnOverlayArgs struct {
	// Enable/disable client address assignment. Valid values: `enable`, `disable`.
	AssignIp pulumi.StringPtrInput `pulumi:"assignIp"`
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Allow or deny traffic from other overlays. Valid values: `allow`, `deny`.
	InterOverlay pulumi.StringPtrInput `pulumi:"interOverlay"`
	// End of client IPv4 range.
	Ipv4EndIp pulumi.StringPtrInput `pulumi:"ipv4EndIp"`
	// Start of client IPv4 range.
	Ipv4StartIp pulumi.StringPtrInput `pulumi:"ipv4StartIp"`
	// Overlay name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Overlay name.
	OverlayName pulumi.StringPtrInput `pulumi:"overlayName"`
	// Internal subnets to register with OCVPN service. The structure of `subnets` block is documented below.
	Subnets OcvpnOverlaySubnetArrayInput `pulumi:"subnets"`
}

func (OcvpnOverlayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OcvpnOverlay)(nil)).Elem()
}

func (i OcvpnOverlayArgs) ToOcvpnOverlayOutput() OcvpnOverlayOutput {
	return i.ToOcvpnOverlayOutputWithContext(context.Background())
}

func (i OcvpnOverlayArgs) ToOcvpnOverlayOutputWithContext(ctx context.Context) OcvpnOverlayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OcvpnOverlayOutput)
}

// OcvpnOverlayArrayInput is an input type that accepts OcvpnOverlayArray and OcvpnOverlayArrayOutput values.
// You can construct a concrete instance of `OcvpnOverlayArrayInput` via:
//
//	OcvpnOverlayArray{ OcvpnOverlayArgs{...} }
type OcvpnOverlayArrayInput interface {
	pulumi.Input

	ToOcvpnOverlayArrayOutput() OcvpnOverlayArrayOutput
	ToOcvpnOverlayArrayOutputWithContext(context.Context) OcvpnOverlayArrayOutput
}

type OcvpnOverlayArray []OcvpnOverlayInput

func (OcvpnOverlayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OcvpnOverlay)(nil)).Elem()
}

func (i OcvpnOverlayArray) ToOcvpnOverlayArrayOutput() OcvpnOverlayArrayOutput {
	return i.ToOcvpnOverlayArrayOutputWithContext(context.Background())
}

func (i OcvpnOverlayArray) ToOcvpnOverlayArrayOutputWithContext(ctx context.Context) OcvpnOverlayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OcvpnOverlayArrayOutput)
}

type OcvpnOverlayOutput struct{ *pulumi.OutputState }

func (OcvpnOverlayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OcvpnOverlay)(nil)).Elem()
}

func (o OcvpnOverlayOutput) ToOcvpnOverlayOutput() OcvpnOverlayOutput {
	return o
}

func (o OcvpnOverlayOutput) ToOcvpnOverlayOutputWithContext(ctx context.Context) OcvpnOverlayOutput {
	return o
}

// Enable/disable client address assignment. Valid values: `enable`, `disable`.
func (o OcvpnOverlayOutput) AssignIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OcvpnOverlay) *string { return v.AssignIp }).(pulumi.StringPtrOutput)
}

// ID.
func (o OcvpnOverlayOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OcvpnOverlay) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Allow or deny traffic from other overlays. Valid values: `allow`, `deny`.
func (o OcvpnOverlayOutput) InterOverlay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OcvpnOverlay) *string { return v.InterOverlay }).(pulumi.StringPtrOutput)
}

// End of client IPv4 range.
func (o OcvpnOverlayOutput) Ipv4EndIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OcvpnOverlay) *string { return v.Ipv4EndIp }).(pulumi.StringPtrOutput)
}

// Start of client IPv4 range.
func (o OcvpnOverlayOutput) Ipv4StartIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OcvpnOverlay) *string { return v.Ipv4StartIp }).(pulumi.StringPtrOutput)
}

// Overlay name.
func (o OcvpnOverlayOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OcvpnOverlay) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Overlay name.
func (o OcvpnOverlayOutput) OverlayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OcvpnOverlay) *string { return v.OverlayName }).(pulumi.StringPtrOutput)
}

// Internal subnets to register with OCVPN service. The structure of `subnets` block is documented below.
func (o OcvpnOverlayOutput) Subnets() OcvpnOverlaySubnetArrayOutput {
	return o.ApplyT(func(v OcvpnOverlay) []OcvpnOverlaySubnet { return v.Subnets }).(OcvpnOverlaySubnetArrayOutput)
}

type OcvpnOverlayArrayOutput struct{ *pulumi.OutputState }

func (OcvpnOverlayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OcvpnOverlay)(nil)).Elem()
}

func (o OcvpnOverlayArrayOutput) ToOcvpnOverlayArrayOutput() OcvpnOverlayArrayOutput {
	return o
}

func (o OcvpnOverlayArrayOutput) ToOcvpnOverlayArrayOutputWithContext(ctx context.Context) OcvpnOverlayArrayOutput {
	return o
}

func (o OcvpnOverlayArrayOutput) Index(i pulumi.IntInput) OcvpnOverlayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OcvpnOverlay {
		return vs[0].([]OcvpnOverlay)[vs[1].(int)]
	}).(OcvpnOverlayOutput)
}

type OcvpnOverlaySubnet struct {
	// ID.
	Id *int `pulumi:"id"`
	// LAN interface.
	Interface *string `pulumi:"interface"`
	// IPv4 address and subnet mask.
	Subnet *string `pulumi:"subnet"`
	// Subnet type. Valid values: `subnet`, `interface`.
	Type *string `pulumi:"type"`
}

// OcvpnOverlaySubnetInput is an input type that accepts OcvpnOverlaySubnetArgs and OcvpnOverlaySubnetOutput values.
// You can construct a concrete instance of `OcvpnOverlaySubnetInput` via:
//
//	OcvpnOverlaySubnetArgs{...}
type OcvpnOverlaySubnetInput interface {
	pulumi.Input

	ToOcvpnOverlaySubnetOutput() OcvpnOverlaySubnetOutput
	ToOcvpnOverlaySubnetOutputWithContext(context.Context) OcvpnOverlaySubnetOutput
}

type OcvpnOverlaySubnetArgs struct {
	// ID.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// LAN interface.
	Interface pulumi.StringPtrInput `pulumi:"interface"`
	// IPv4 address and subnet mask.
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
	// Subnet type. Valid values: `subnet`, `interface`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (OcvpnOverlaySubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OcvpnOverlaySubnet)(nil)).Elem()
}

func (i OcvpnOverlaySubnetArgs) ToOcvpnOverlaySubnetOutput() OcvpnOverlaySubnetOutput {
	return i.ToOcvpnOverlaySubnetOutputWithContext(context.Background())
}

func (i OcvpnOverlaySubnetArgs) ToOcvpnOverlaySubnetOutputWithContext(ctx context.Context) OcvpnOverlaySubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OcvpnOverlaySubnetOutput)
}

// OcvpnOverlaySubnetArrayInput is an input type that accepts OcvpnOverlaySubnetArray and OcvpnOverlaySubnetArrayOutput values.
// You can construct a concrete instance of `OcvpnOverlaySubnetArrayInput` via:
//
//	OcvpnOverlaySubnetArray{ OcvpnOverlaySubnetArgs{...} }
type OcvpnOverlaySubnetArrayInput interface {
	pulumi.Input

	ToOcvpnOverlaySubnetArrayOutput() OcvpnOverlaySubnetArrayOutput
	ToOcvpnOverlaySubnetArrayOutputWithContext(context.Context) OcvpnOverlaySubnetArrayOutput
}

type OcvpnOverlaySubnetArray []OcvpnOverlaySubnetInput

func (OcvpnOverlaySubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OcvpnOverlaySubnet)(nil)).Elem()
}

func (i OcvpnOverlaySubnetArray) ToOcvpnOverlaySubnetArrayOutput() OcvpnOverlaySubnetArrayOutput {
	return i.ToOcvpnOverlaySubnetArrayOutputWithContext(context.Background())
}

func (i OcvpnOverlaySubnetArray) ToOcvpnOverlaySubnetArrayOutputWithContext(ctx context.Context) OcvpnOverlaySubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OcvpnOverlaySubnetArrayOutput)
}

type OcvpnOverlaySubnetOutput struct{ *pulumi.OutputState }

func (OcvpnOverlaySubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OcvpnOverlaySubnet)(nil)).Elem()
}

func (o OcvpnOverlaySubnetOutput) ToOcvpnOverlaySubnetOutput() OcvpnOverlaySubnetOutput {
	return o
}

func (o OcvpnOverlaySubnetOutput) ToOcvpnOverlaySubnetOutputWithContext(ctx context.Context) OcvpnOverlaySubnetOutput {
	return o
}

// ID.
func (o OcvpnOverlaySubnetOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OcvpnOverlaySubnet) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// LAN interface.
func (o OcvpnOverlaySubnetOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OcvpnOverlaySubnet) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

// IPv4 address and subnet mask.
func (o OcvpnOverlaySubnetOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OcvpnOverlaySubnet) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

// Subnet type. Valid values: `subnet`, `interface`.
func (o OcvpnOverlaySubnetOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OcvpnOverlaySubnet) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type OcvpnOverlaySubnetArrayOutput struct{ *pulumi.OutputState }

func (OcvpnOverlaySubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OcvpnOverlaySubnet)(nil)).Elem()
}

func (o OcvpnOverlaySubnetArrayOutput) ToOcvpnOverlaySubnetArrayOutput() OcvpnOverlaySubnetArrayOutput {
	return o
}

func (o OcvpnOverlaySubnetArrayOutput) ToOcvpnOverlaySubnetArrayOutputWithContext(ctx context.Context) OcvpnOverlaySubnetArrayOutput {
	return o
}

func (o OcvpnOverlaySubnetArrayOutput) Index(i pulumi.IntInput) OcvpnOverlaySubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OcvpnOverlaySubnet {
		return vs[0].([]OcvpnOverlaySubnet)[vs[1].(int)]
	}).(OcvpnOverlaySubnetOutput)
}

type OcvpnWanInterface struct {
	// Interface name.
	Name *string `pulumi:"name"`
}

// OcvpnWanInterfaceInput is an input type that accepts OcvpnWanInterfaceArgs and OcvpnWanInterfaceOutput values.
// You can construct a concrete instance of `OcvpnWanInterfaceInput` via:
//
//	OcvpnWanInterfaceArgs{...}
type OcvpnWanInterfaceInput interface {
	pulumi.Input

	ToOcvpnWanInterfaceOutput() OcvpnWanInterfaceOutput
	ToOcvpnWanInterfaceOutputWithContext(context.Context) OcvpnWanInterfaceOutput
}

type OcvpnWanInterfaceArgs struct {
	// Interface name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (OcvpnWanInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OcvpnWanInterface)(nil)).Elem()
}

func (i OcvpnWanInterfaceArgs) ToOcvpnWanInterfaceOutput() OcvpnWanInterfaceOutput {
	return i.ToOcvpnWanInterfaceOutputWithContext(context.Background())
}

func (i OcvpnWanInterfaceArgs) ToOcvpnWanInterfaceOutputWithContext(ctx context.Context) OcvpnWanInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OcvpnWanInterfaceOutput)
}

// OcvpnWanInterfaceArrayInput is an input type that accepts OcvpnWanInterfaceArray and OcvpnWanInterfaceArrayOutput values.
// You can construct a concrete instance of `OcvpnWanInterfaceArrayInput` via:
//
//	OcvpnWanInterfaceArray{ OcvpnWanInterfaceArgs{...} }
type OcvpnWanInterfaceArrayInput interface {
	pulumi.Input

	ToOcvpnWanInterfaceArrayOutput() OcvpnWanInterfaceArrayOutput
	ToOcvpnWanInterfaceArrayOutputWithContext(context.Context) OcvpnWanInterfaceArrayOutput
}

type OcvpnWanInterfaceArray []OcvpnWanInterfaceInput

func (OcvpnWanInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OcvpnWanInterface)(nil)).Elem()
}

func (i OcvpnWanInterfaceArray) ToOcvpnWanInterfaceArrayOutput() OcvpnWanInterfaceArrayOutput {
	return i.ToOcvpnWanInterfaceArrayOutputWithContext(context.Background())
}

func (i OcvpnWanInterfaceArray) ToOcvpnWanInterfaceArrayOutputWithContext(ctx context.Context) OcvpnWanInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OcvpnWanInterfaceArrayOutput)
}

type OcvpnWanInterfaceOutput struct{ *pulumi.OutputState }

func (OcvpnWanInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OcvpnWanInterface)(nil)).Elem()
}

func (o OcvpnWanInterfaceOutput) ToOcvpnWanInterfaceOutput() OcvpnWanInterfaceOutput {
	return o
}

func (o OcvpnWanInterfaceOutput) ToOcvpnWanInterfaceOutputWithContext(ctx context.Context) OcvpnWanInterfaceOutput {
	return o
}

// Interface name.
func (o OcvpnWanInterfaceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OcvpnWanInterface) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type OcvpnWanInterfaceArrayOutput struct{ *pulumi.OutputState }

func (OcvpnWanInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OcvpnWanInterface)(nil)).Elem()
}

func (o OcvpnWanInterfaceArrayOutput) ToOcvpnWanInterfaceArrayOutput() OcvpnWanInterfaceArrayOutput {
	return o
}

func (o OcvpnWanInterfaceArrayOutput) ToOcvpnWanInterfaceArrayOutputWithContext(ctx context.Context) OcvpnWanInterfaceArrayOutput {
	return o
}

func (o OcvpnWanInterfaceArrayOutput) Index(i pulumi.IntInput) OcvpnWanInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OcvpnWanInterface {
		return vs[0].([]OcvpnWanInterface)[vs[1].(int)]
	}).(OcvpnWanInterfaceOutput)
}

type QkdCertificate struct {
	// Certificate name.
	Name *string `pulumi:"name"`
}

// QkdCertificateInput is an input type that accepts QkdCertificateArgs and QkdCertificateOutput values.
// You can construct a concrete instance of `QkdCertificateInput` via:
//
//	QkdCertificateArgs{...}
type QkdCertificateInput interface {
	pulumi.Input

	ToQkdCertificateOutput() QkdCertificateOutput
	ToQkdCertificateOutputWithContext(context.Context) QkdCertificateOutput
}

type QkdCertificateArgs struct {
	// Certificate name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (QkdCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QkdCertificate)(nil)).Elem()
}

func (i QkdCertificateArgs) ToQkdCertificateOutput() QkdCertificateOutput {
	return i.ToQkdCertificateOutputWithContext(context.Background())
}

func (i QkdCertificateArgs) ToQkdCertificateOutputWithContext(ctx context.Context) QkdCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QkdCertificateOutput)
}

// QkdCertificateArrayInput is an input type that accepts QkdCertificateArray and QkdCertificateArrayOutput values.
// You can construct a concrete instance of `QkdCertificateArrayInput` via:
//
//	QkdCertificateArray{ QkdCertificateArgs{...} }
type QkdCertificateArrayInput interface {
	pulumi.Input

	ToQkdCertificateArrayOutput() QkdCertificateArrayOutput
	ToQkdCertificateArrayOutputWithContext(context.Context) QkdCertificateArrayOutput
}

type QkdCertificateArray []QkdCertificateInput

func (QkdCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QkdCertificate)(nil)).Elem()
}

func (i QkdCertificateArray) ToQkdCertificateArrayOutput() QkdCertificateArrayOutput {
	return i.ToQkdCertificateArrayOutputWithContext(context.Background())
}

func (i QkdCertificateArray) ToQkdCertificateArrayOutputWithContext(ctx context.Context) QkdCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QkdCertificateArrayOutput)
}

type QkdCertificateOutput struct{ *pulumi.OutputState }

func (QkdCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QkdCertificate)(nil)).Elem()
}

func (o QkdCertificateOutput) ToQkdCertificateOutput() QkdCertificateOutput {
	return o
}

func (o QkdCertificateOutput) ToQkdCertificateOutputWithContext(ctx context.Context) QkdCertificateOutput {
	return o
}

// Certificate name.
func (o QkdCertificateOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QkdCertificate) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type QkdCertificateArrayOutput struct{ *pulumi.OutputState }

func (QkdCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QkdCertificate)(nil)).Elem()
}

func (o QkdCertificateArrayOutput) ToQkdCertificateArrayOutput() QkdCertificateArrayOutput {
	return o
}

func (o QkdCertificateArrayOutput) ToQkdCertificateArrayOutputWithContext(ctx context.Context) QkdCertificateArrayOutput {
	return o
}

func (o QkdCertificateArrayOutput) Index(i pulumi.IntInput) QkdCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QkdCertificate {
		return vs[0].([]QkdCertificate)[vs[1].(int)]
	}).(QkdCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KmipserverServerListInput)(nil)).Elem(), KmipserverServerListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KmipserverServerListArrayInput)(nil)).Elem(), KmipserverServerListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OcvpnForticlientAccessInput)(nil)).Elem(), OcvpnForticlientAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OcvpnForticlientAccessPtrInput)(nil)).Elem(), OcvpnForticlientAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OcvpnForticlientAccessAuthGroupInput)(nil)).Elem(), OcvpnForticlientAccessAuthGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OcvpnForticlientAccessAuthGroupArrayInput)(nil)).Elem(), OcvpnForticlientAccessAuthGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OcvpnForticlientAccessAuthGroupOverlayInput)(nil)).Elem(), OcvpnForticlientAccessAuthGroupOverlayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OcvpnForticlientAccessAuthGroupOverlayArrayInput)(nil)).Elem(), OcvpnForticlientAccessAuthGroupOverlayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OcvpnOverlayInput)(nil)).Elem(), OcvpnOverlayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OcvpnOverlayArrayInput)(nil)).Elem(), OcvpnOverlayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OcvpnOverlaySubnetInput)(nil)).Elem(), OcvpnOverlaySubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OcvpnOverlaySubnetArrayInput)(nil)).Elem(), OcvpnOverlaySubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OcvpnWanInterfaceInput)(nil)).Elem(), OcvpnWanInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OcvpnWanInterfaceArrayInput)(nil)).Elem(), OcvpnWanInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QkdCertificateInput)(nil)).Elem(), QkdCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QkdCertificateArrayInput)(nil)).Elem(), QkdCertificateArray{})
	pulumi.RegisterOutputType(KmipserverServerListOutput{})
	pulumi.RegisterOutputType(KmipserverServerListArrayOutput{})
	pulumi.RegisterOutputType(OcvpnForticlientAccessOutput{})
	pulumi.RegisterOutputType(OcvpnForticlientAccessPtrOutput{})
	pulumi.RegisterOutputType(OcvpnForticlientAccessAuthGroupOutput{})
	pulumi.RegisterOutputType(OcvpnForticlientAccessAuthGroupArrayOutput{})
	pulumi.RegisterOutputType(OcvpnForticlientAccessAuthGroupOverlayOutput{})
	pulumi.RegisterOutputType(OcvpnForticlientAccessAuthGroupOverlayArrayOutput{})
	pulumi.RegisterOutputType(OcvpnOverlayOutput{})
	pulumi.RegisterOutputType(OcvpnOverlayArrayOutput{})
	pulumi.RegisterOutputType(OcvpnOverlaySubnetOutput{})
	pulumi.RegisterOutputType(OcvpnOverlaySubnetArrayOutput{})
	pulumi.RegisterOutputType(OcvpnWanInterfaceOutput{})
	pulumi.RegisterOutputType(OcvpnWanInterfaceArrayOutput{})
	pulumi.RegisterOutputType(QkdCertificateOutput{})
	pulumi.RegisterOutputType(QkdCertificateArrayOutput{})
}
