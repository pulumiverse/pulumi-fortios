// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificate

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// VPN certificate setting.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpn.NewSetting(ctx, "trname", &vpn.SettingArgs{
//				CertnameDsa1024:    pulumi.String("Fortinet_SSL_DSA1024"),
//				CertnameDsa2048:    pulumi.String("Fortinet_SSL_DSA2048"),
//				CertnameEcdsa256:   pulumi.String("Fortinet_SSL_ECDSA256"),
//				CertnameEcdsa384:   pulumi.String("Fortinet_SSL_ECDSA384"),
//				CertnameRsa1024:    pulumi.String("Fortinet_SSL_RSA1024"),
//				CertnameRsa2048:    pulumi.String("Fortinet_SSL_RSA2048"),
//				CheckCaCert:        pulumi.String("enable"),
//				CheckCaChain:       pulumi.String("disable"),
//				CmpSaveExtraCerts:  pulumi.String("disable"),
//				CnMatch:            pulumi.String("substring"),
//				OcspOption:         pulumi.String("server"),
//				OcspStatus:         pulumi.String("disable"),
//				SslMinProtoVersion: pulumi.String("default"),
//				StrictCrlCheck:     pulumi.String("disable"),
//				StrictOcspCheck:    pulumi.String("disable"),
//				SubjectMatch:       pulumi.String("substring"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// VpnCertificate Setting can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:vpn/certificate/setting:Setting labelname VpnCertificateSetting
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:vpn/certificate/setting:Setting labelname VpnCertificateSetting
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Setting struct {
	pulumi.CustomResourceState

	// Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
	CertExpireWarning pulumi.IntOutput `pulumi:"certExpireWarning"`
	// 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa1024 pulumi.StringOutput `pulumi:"certnameDsa1024"`
	// 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa2048 pulumi.StringOutput `pulumi:"certnameDsa2048"`
	// 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa256 pulumi.StringOutput `pulumi:"certnameEcdsa256"`
	// 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa384 pulumi.StringOutput `pulumi:"certnameEcdsa384"`
	// 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa521 pulumi.StringOutput `pulumi:"certnameEcdsa521"`
	// 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd25519 pulumi.StringOutput `pulumi:"certnameEd25519"`
	// 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd448 pulumi.StringOutput `pulumi:"certnameEd448"`
	// 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa1024 pulumi.StringOutput `pulumi:"certnameRsa1024"`
	// 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa2048 pulumi.StringOutput `pulumi:"certnameRsa2048"`
	// 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa4096 pulumi.StringOutput `pulumi:"certnameRsa4096"`
	// Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
	CheckCaCert pulumi.StringOutput `pulumi:"checkCaCert"`
	// Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
	CheckCaChain pulumi.StringOutput `pulumi:"checkCaChain"`
	// Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
	CmpKeyUsageChecking pulumi.StringOutput `pulumi:"cmpKeyUsageChecking"`
	// Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
	CmpSaveExtraCerts pulumi.StringOutput `pulumi:"cmpSaveExtraCerts"`
	// When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
	CnAllowMulti pulumi.StringOutput `pulumi:"cnAllowMulti"`
	// When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
	CnMatch pulumi.StringOutput `pulumi:"cnMatch"`
	// CRL verification options. The structure of `crlVerification` block is documented below.
	CrlVerification SettingCrlVerificationOutput `pulumi:"crlVerification"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// Specify outgoing interface to reach server.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringOutput `pulumi:"interfaceSelectMethod"`
	// Default OCSP server.
	OcspDefaultServer pulumi.StringOutput `pulumi:"ocspDefaultServer"`
	// Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
	OcspOption pulumi.StringOutput `pulumi:"ocspOption"`
	// Enable/disable receiving certificates using the OCSP.
	OcspStatus pulumi.StringOutput `pulumi:"ocspStatus"`
	// Proxy server FQDN or IP for OCSP/CA queries during certificate verification.
	Proxy pulumi.StringOutput `pulumi:"proxy"`
	// Proxy server password.
	ProxyPassword pulumi.StringPtrOutput `pulumi:"proxyPassword"`
	// Proxy server port (1 - 65535, default = 8080).
	ProxyPort pulumi.IntOutput `pulumi:"proxyPort"`
	// Proxy server user name.
	ProxyUsername pulumi.StringOutput `pulumi:"proxyUsername"`
	// Source IP address for dynamic AIA and OCSP queries.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion pulumi.StringOutput `pulumi:"sslMinProtoVersion"`
	// Source IP address to use to communicate with the OCSP server.
	SslOcspSourceIp pulumi.StringOutput `pulumi:"sslOcspSourceIp"`
	// Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
	StrictCrlCheck pulumi.StringOutput `pulumi:"strictCrlCheck"`
	// Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
	StrictOcspCheck pulumi.StringOutput `pulumi:"strictOcspCheck"`
	// When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
	SubjectMatch pulumi.StringOutput `pulumi:"subjectMatch"`
	// When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
	SubjectSet pulumi.StringOutput `pulumi:"subjectSet"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSetting registers a new resource with the given unique name, arguments, and options.
func NewSetting(ctx *pulumi.Context,
	name string, args *SettingArgs, opts ...pulumi.ResourceOption) (*Setting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertnameDsa1024 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameDsa1024'")
	}
	if args.CertnameDsa2048 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameDsa2048'")
	}
	if args.CertnameEcdsa256 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameEcdsa256'")
	}
	if args.CertnameEcdsa384 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameEcdsa384'")
	}
	if args.CertnameRsa1024 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameRsa1024'")
	}
	if args.CertnameRsa2048 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameRsa2048'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Setting
	err := ctx.RegisterResource("fortios:vpn/certificate/setting:Setting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSetting gets an existing Setting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SettingState, opts ...pulumi.ResourceOption) (*Setting, error) {
	var resource Setting
	err := ctx.ReadResource("fortios:vpn/certificate/setting:Setting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Setting resources.
type settingState struct {
	// Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
	CertExpireWarning *int `pulumi:"certExpireWarning"`
	// 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa1024 *string `pulumi:"certnameDsa1024"`
	// 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa2048 *string `pulumi:"certnameDsa2048"`
	// 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa256 *string `pulumi:"certnameEcdsa256"`
	// 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa384 *string `pulumi:"certnameEcdsa384"`
	// 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa521 *string `pulumi:"certnameEcdsa521"`
	// 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd25519 *string `pulumi:"certnameEd25519"`
	// 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd448 *string `pulumi:"certnameEd448"`
	// 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa1024 *string `pulumi:"certnameRsa1024"`
	// 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa2048 *string `pulumi:"certnameRsa2048"`
	// 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa4096 *string `pulumi:"certnameRsa4096"`
	// Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
	CheckCaCert *string `pulumi:"checkCaCert"`
	// Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
	CheckCaChain *string `pulumi:"checkCaChain"`
	// Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
	CmpKeyUsageChecking *string `pulumi:"cmpKeyUsageChecking"`
	// Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
	CmpSaveExtraCerts *string `pulumi:"cmpSaveExtraCerts"`
	// When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
	CnAllowMulti *string `pulumi:"cnAllowMulti"`
	// When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
	CnMatch *string `pulumi:"cnMatch"`
	// CRL verification options. The structure of `crlVerification` block is documented below.
	CrlVerification *SettingCrlVerification `pulumi:"crlVerification"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Default OCSP server.
	OcspDefaultServer *string `pulumi:"ocspDefaultServer"`
	// Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
	OcspOption *string `pulumi:"ocspOption"`
	// Enable/disable receiving certificates using the OCSP.
	OcspStatus *string `pulumi:"ocspStatus"`
	// Proxy server FQDN or IP for OCSP/CA queries during certificate verification.
	Proxy *string `pulumi:"proxy"`
	// Proxy server password.
	ProxyPassword *string `pulumi:"proxyPassword"`
	// Proxy server port (1 - 65535, default = 8080).
	ProxyPort *int `pulumi:"proxyPort"`
	// Proxy server user name.
	ProxyUsername *string `pulumi:"proxyUsername"`
	// Source IP address for dynamic AIA and OCSP queries.
	SourceIp *string `pulumi:"sourceIp"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion *string `pulumi:"sslMinProtoVersion"`
	// Source IP address to use to communicate with the OCSP server.
	SslOcspSourceIp *string `pulumi:"sslOcspSourceIp"`
	// Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
	StrictCrlCheck *string `pulumi:"strictCrlCheck"`
	// Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
	StrictOcspCheck *string `pulumi:"strictOcspCheck"`
	// When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
	SubjectMatch *string `pulumi:"subjectMatch"`
	// When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
	SubjectSet *string `pulumi:"subjectSet"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SettingState struct {
	// Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
	CertExpireWarning pulumi.IntPtrInput
	// 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa1024 pulumi.StringPtrInput
	// 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa2048 pulumi.StringPtrInput
	// 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa256 pulumi.StringPtrInput
	// 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa384 pulumi.StringPtrInput
	// 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa521 pulumi.StringPtrInput
	// 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd25519 pulumi.StringPtrInput
	// 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd448 pulumi.StringPtrInput
	// 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa1024 pulumi.StringPtrInput
	// 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa2048 pulumi.StringPtrInput
	// 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa4096 pulumi.StringPtrInput
	// Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
	CheckCaCert pulumi.StringPtrInput
	// Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
	CheckCaChain pulumi.StringPtrInput
	// Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
	CmpKeyUsageChecking pulumi.StringPtrInput
	// Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
	CmpSaveExtraCerts pulumi.StringPtrInput
	// When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
	CnAllowMulti pulumi.StringPtrInput
	// When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
	CnMatch pulumi.StringPtrInput
	// CRL verification options. The structure of `crlVerification` block is documented below.
	CrlVerification SettingCrlVerificationPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Default OCSP server.
	OcspDefaultServer pulumi.StringPtrInput
	// Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
	OcspOption pulumi.StringPtrInput
	// Enable/disable receiving certificates using the OCSP.
	OcspStatus pulumi.StringPtrInput
	// Proxy server FQDN or IP for OCSP/CA queries during certificate verification.
	Proxy pulumi.StringPtrInput
	// Proxy server password.
	ProxyPassword pulumi.StringPtrInput
	// Proxy server port (1 - 65535, default = 8080).
	ProxyPort pulumi.IntPtrInput
	// Proxy server user name.
	ProxyUsername pulumi.StringPtrInput
	// Source IP address for dynamic AIA and OCSP queries.
	SourceIp pulumi.StringPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion pulumi.StringPtrInput
	// Source IP address to use to communicate with the OCSP server.
	SslOcspSourceIp pulumi.StringPtrInput
	// Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
	StrictCrlCheck pulumi.StringPtrInput
	// Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
	StrictOcspCheck pulumi.StringPtrInput
	// When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
	SubjectMatch pulumi.StringPtrInput
	// When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
	SubjectSet pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*settingState)(nil)).Elem()
}

type settingArgs struct {
	// Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
	CertExpireWarning *int `pulumi:"certExpireWarning"`
	// 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa1024 string `pulumi:"certnameDsa1024"`
	// 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa2048 string `pulumi:"certnameDsa2048"`
	// 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa256 string `pulumi:"certnameEcdsa256"`
	// 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa384 string `pulumi:"certnameEcdsa384"`
	// 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa521 *string `pulumi:"certnameEcdsa521"`
	// 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd25519 *string `pulumi:"certnameEd25519"`
	// 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd448 *string `pulumi:"certnameEd448"`
	// 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa1024 string `pulumi:"certnameRsa1024"`
	// 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa2048 string `pulumi:"certnameRsa2048"`
	// 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa4096 *string `pulumi:"certnameRsa4096"`
	// Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
	CheckCaCert *string `pulumi:"checkCaCert"`
	// Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
	CheckCaChain *string `pulumi:"checkCaChain"`
	// Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
	CmpKeyUsageChecking *string `pulumi:"cmpKeyUsageChecking"`
	// Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
	CmpSaveExtraCerts *string `pulumi:"cmpSaveExtraCerts"`
	// When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
	CnAllowMulti *string `pulumi:"cnAllowMulti"`
	// When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
	CnMatch *string `pulumi:"cnMatch"`
	// CRL verification options. The structure of `crlVerification` block is documented below.
	CrlVerification *SettingCrlVerification `pulumi:"crlVerification"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Default OCSP server.
	OcspDefaultServer *string `pulumi:"ocspDefaultServer"`
	// Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
	OcspOption *string `pulumi:"ocspOption"`
	// Enable/disable receiving certificates using the OCSP.
	OcspStatus *string `pulumi:"ocspStatus"`
	// Proxy server FQDN or IP for OCSP/CA queries during certificate verification.
	Proxy *string `pulumi:"proxy"`
	// Proxy server password.
	ProxyPassword *string `pulumi:"proxyPassword"`
	// Proxy server port (1 - 65535, default = 8080).
	ProxyPort *int `pulumi:"proxyPort"`
	// Proxy server user name.
	ProxyUsername *string `pulumi:"proxyUsername"`
	// Source IP address for dynamic AIA and OCSP queries.
	SourceIp *string `pulumi:"sourceIp"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion *string `pulumi:"sslMinProtoVersion"`
	// Source IP address to use to communicate with the OCSP server.
	SslOcspSourceIp *string `pulumi:"sslOcspSourceIp"`
	// Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
	StrictCrlCheck *string `pulumi:"strictCrlCheck"`
	// Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
	StrictOcspCheck *string `pulumi:"strictOcspCheck"`
	// When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
	SubjectMatch *string `pulumi:"subjectMatch"`
	// When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
	SubjectSet *string `pulumi:"subjectSet"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Setting resource.
type SettingArgs struct {
	// Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
	CertExpireWarning pulumi.IntPtrInput
	// 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa1024 pulumi.StringInput
	// 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa2048 pulumi.StringInput
	// 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa256 pulumi.StringInput
	// 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa384 pulumi.StringInput
	// 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa521 pulumi.StringPtrInput
	// 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd25519 pulumi.StringPtrInput
	// 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd448 pulumi.StringPtrInput
	// 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa1024 pulumi.StringInput
	// 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa2048 pulumi.StringInput
	// 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa4096 pulumi.StringPtrInput
	// Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
	CheckCaCert pulumi.StringPtrInput
	// Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
	CheckCaChain pulumi.StringPtrInput
	// Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
	CmpKeyUsageChecking pulumi.StringPtrInput
	// Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
	CmpSaveExtraCerts pulumi.StringPtrInput
	// When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
	CnAllowMulti pulumi.StringPtrInput
	// When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
	CnMatch pulumi.StringPtrInput
	// CRL verification options. The structure of `crlVerification` block is documented below.
	CrlVerification SettingCrlVerificationPtrInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Default OCSP server.
	OcspDefaultServer pulumi.StringPtrInput
	// Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
	OcspOption pulumi.StringPtrInput
	// Enable/disable receiving certificates using the OCSP.
	OcspStatus pulumi.StringPtrInput
	// Proxy server FQDN or IP for OCSP/CA queries during certificate verification.
	Proxy pulumi.StringPtrInput
	// Proxy server password.
	ProxyPassword pulumi.StringPtrInput
	// Proxy server port (1 - 65535, default = 8080).
	ProxyPort pulumi.IntPtrInput
	// Proxy server user name.
	ProxyUsername pulumi.StringPtrInput
	// Source IP address for dynamic AIA and OCSP queries.
	SourceIp pulumi.StringPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion pulumi.StringPtrInput
	// Source IP address to use to communicate with the OCSP server.
	SslOcspSourceIp pulumi.StringPtrInput
	// Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
	StrictCrlCheck pulumi.StringPtrInput
	// Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
	StrictOcspCheck pulumi.StringPtrInput
	// When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
	SubjectMatch pulumi.StringPtrInput
	// When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
	SubjectSet pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*settingArgs)(nil)).Elem()
}

type SettingInput interface {
	pulumi.Input

	ToSettingOutput() SettingOutput
	ToSettingOutputWithContext(ctx context.Context) SettingOutput
}

func (*Setting) ElementType() reflect.Type {
	return reflect.TypeOf((**Setting)(nil)).Elem()
}

func (i *Setting) ToSettingOutput() SettingOutput {
	return i.ToSettingOutputWithContext(context.Background())
}

func (i *Setting) ToSettingOutputWithContext(ctx context.Context) SettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingOutput)
}

// SettingArrayInput is an input type that accepts SettingArray and SettingArrayOutput values.
// You can construct a concrete instance of `SettingArrayInput` via:
//
//	SettingArray{ SettingArgs{...} }
type SettingArrayInput interface {
	pulumi.Input

	ToSettingArrayOutput() SettingArrayOutput
	ToSettingArrayOutputWithContext(context.Context) SettingArrayOutput
}

type SettingArray []SettingInput

func (SettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Setting)(nil)).Elem()
}

func (i SettingArray) ToSettingArrayOutput() SettingArrayOutput {
	return i.ToSettingArrayOutputWithContext(context.Background())
}

func (i SettingArray) ToSettingArrayOutputWithContext(ctx context.Context) SettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingArrayOutput)
}

// SettingMapInput is an input type that accepts SettingMap and SettingMapOutput values.
// You can construct a concrete instance of `SettingMapInput` via:
//
//	SettingMap{ "key": SettingArgs{...} }
type SettingMapInput interface {
	pulumi.Input

	ToSettingMapOutput() SettingMapOutput
	ToSettingMapOutputWithContext(context.Context) SettingMapOutput
}

type SettingMap map[string]SettingInput

func (SettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Setting)(nil)).Elem()
}

func (i SettingMap) ToSettingMapOutput() SettingMapOutput {
	return i.ToSettingMapOutputWithContext(context.Background())
}

func (i SettingMap) ToSettingMapOutputWithContext(ctx context.Context) SettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMapOutput)
}

type SettingOutput struct{ *pulumi.OutputState }

func (SettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Setting)(nil)).Elem()
}

func (o SettingOutput) ToSettingOutput() SettingOutput {
	return o
}

func (o SettingOutput) ToSettingOutputWithContext(ctx context.Context) SettingOutput {
	return o
}

// Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
func (o SettingOutput) CertExpireWarning() pulumi.IntOutput {
	return o.ApplyT(func(v *Setting) pulumi.IntOutput { return v.CertExpireWarning }).(pulumi.IntOutput)
}

// 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
func (o SettingOutput) CertnameDsa1024() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.CertnameDsa1024 }).(pulumi.StringOutput)
}

// 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
func (o SettingOutput) CertnameDsa2048() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.CertnameDsa2048 }).(pulumi.StringOutput)
}

// 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
func (o SettingOutput) CertnameEcdsa256() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.CertnameEcdsa256 }).(pulumi.StringOutput)
}

// 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
func (o SettingOutput) CertnameEcdsa384() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.CertnameEcdsa384 }).(pulumi.StringOutput)
}

// 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
func (o SettingOutput) CertnameEcdsa521() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.CertnameEcdsa521 }).(pulumi.StringOutput)
}

// 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
func (o SettingOutput) CertnameEd25519() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.CertnameEd25519 }).(pulumi.StringOutput)
}

// 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
func (o SettingOutput) CertnameEd448() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.CertnameEd448 }).(pulumi.StringOutput)
}

// 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
func (o SettingOutput) CertnameRsa1024() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.CertnameRsa1024 }).(pulumi.StringOutput)
}

// 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
func (o SettingOutput) CertnameRsa2048() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.CertnameRsa2048 }).(pulumi.StringOutput)
}

// 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
func (o SettingOutput) CertnameRsa4096() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.CertnameRsa4096 }).(pulumi.StringOutput)
}

// Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
func (o SettingOutput) CheckCaCert() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.CheckCaCert }).(pulumi.StringOutput)
}

// Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
func (o SettingOutput) CheckCaChain() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.CheckCaChain }).(pulumi.StringOutput)
}

// Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
func (o SettingOutput) CmpKeyUsageChecking() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.CmpKeyUsageChecking }).(pulumi.StringOutput)
}

// Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
func (o SettingOutput) CmpSaveExtraCerts() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.CmpSaveExtraCerts }).(pulumi.StringOutput)
}

// When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
func (o SettingOutput) CnAllowMulti() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.CnAllowMulti }).(pulumi.StringOutput)
}

// When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
func (o SettingOutput) CnMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.CnMatch }).(pulumi.StringOutput)
}

// CRL verification options. The structure of `crlVerification` block is documented below.
func (o SettingOutput) CrlVerification() SettingCrlVerificationOutput {
	return o.ApplyT(func(v *Setting) SettingCrlVerificationOutput { return v.CrlVerification }).(SettingCrlVerificationOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o SettingOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// Specify outgoing interface to reach server.
func (o SettingOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
func (o SettingOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

// Default OCSP server.
func (o SettingOutput) OcspDefaultServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.OcspDefaultServer }).(pulumi.StringOutput)
}

// Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
func (o SettingOutput) OcspOption() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.OcspOption }).(pulumi.StringOutput)
}

// Enable/disable receiving certificates using the OCSP.
func (o SettingOutput) OcspStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.OcspStatus }).(pulumi.StringOutput)
}

// Proxy server FQDN or IP for OCSP/CA queries during certificate verification.
func (o SettingOutput) Proxy() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.Proxy }).(pulumi.StringOutput)
}

// Proxy server password.
func (o SettingOutput) ProxyPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringPtrOutput { return v.ProxyPassword }).(pulumi.StringPtrOutput)
}

// Proxy server port (1 - 65535, default = 8080).
func (o SettingOutput) ProxyPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Setting) pulumi.IntOutput { return v.ProxyPort }).(pulumi.IntOutput)
}

// Proxy server user name.
func (o SettingOutput) ProxyUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.ProxyUsername }).(pulumi.StringOutput)
}

// Source IP address for dynamic AIA and OCSP queries.
func (o SettingOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
func (o SettingOutput) SslMinProtoVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.SslMinProtoVersion }).(pulumi.StringOutput)
}

// Source IP address to use to communicate with the OCSP server.
func (o SettingOutput) SslOcspSourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.SslOcspSourceIp }).(pulumi.StringOutput)
}

// Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
func (o SettingOutput) StrictCrlCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.StrictCrlCheck }).(pulumi.StringOutput)
}

// Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
func (o SettingOutput) StrictOcspCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.StrictOcspCheck }).(pulumi.StringOutput)
}

// When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
func (o SettingOutput) SubjectMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.SubjectMatch }).(pulumi.StringOutput)
}

// When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
func (o SettingOutput) SubjectSet() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.SubjectSet }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SettingOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SettingArrayOutput struct{ *pulumi.OutputState }

func (SettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Setting)(nil)).Elem()
}

func (o SettingArrayOutput) ToSettingArrayOutput() SettingArrayOutput {
	return o
}

func (o SettingArrayOutput) ToSettingArrayOutputWithContext(ctx context.Context) SettingArrayOutput {
	return o
}

func (o SettingArrayOutput) Index(i pulumi.IntInput) SettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Setting {
		return vs[0].([]*Setting)[vs[1].(int)]
	}).(SettingOutput)
}

type SettingMapOutput struct{ *pulumi.OutputState }

func (SettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Setting)(nil)).Elem()
}

func (o SettingMapOutput) ToSettingMapOutput() SettingMapOutput {
	return o
}

func (o SettingMapOutput) ToSettingMapOutputWithContext(ctx context.Context) SettingMapOutput {
	return o
}

func (o SettingMapOutput) MapIndex(k pulumi.StringInput) SettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Setting {
		return vs[0].(map[string]*Setting)[vs[1].(string)]
	}).(SettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SettingInput)(nil)).Elem(), &Setting{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingArrayInput)(nil)).Elem(), SettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingMapInput)(nil)).Elem(), SettingMap{})
	pulumi.RegisterOutputType(SettingOutput{})
	pulumi.RegisterOutputType(SettingArrayOutput{})
	pulumi.RegisterOutputType(SettingMapOutput{})
}
