// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificate

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Remote certificate as a PEM file.
//
// ## Import
//
// VpnCertificate Remote can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:vpn/certificate/remote:Remote labelname {{name}}
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:vpn/certificate/remote:Remote labelname {{name}}
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Remote struct {
	pulumi.CustomResourceState

	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Either the global or VDOM IP address range for the remote certificate. Valid values: `global`, `vdom`.
	Range pulumi.StringOutput `pulumi:"range"`
	// Remote certificate.
	Remote pulumi.StringOutput `pulumi:"remote"`
	// Remote certificate source type.
	Source pulumi.StringOutput `pulumi:"source"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewRemote registers a new resource with the given unique name, arguments, and options.
func NewRemote(ctx *pulumi.Context,
	name string, args *RemoteArgs, opts ...pulumi.ResourceOption) (*Remote, error) {
	if args == nil {
		args = &RemoteArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Remote
	err := ctx.RegisterResource("fortios:vpn/certificate/remote:Remote", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRemote gets an existing Remote resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRemote(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RemoteState, opts ...pulumi.ResourceOption) (*Remote, error) {
	var resource Remote
	err := ctx.ReadResource("fortios:vpn/certificate/remote:Remote", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Remote resources.
type remoteState struct {
	// Name.
	Name *string `pulumi:"name"`
	// Either the global or VDOM IP address range for the remote certificate. Valid values: `global`, `vdom`.
	Range *string `pulumi:"range"`
	// Remote certificate.
	Remote *string `pulumi:"remote"`
	// Remote certificate source type.
	Source *string `pulumi:"source"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type RemoteState struct {
	// Name.
	Name pulumi.StringPtrInput
	// Either the global or VDOM IP address range for the remote certificate. Valid values: `global`, `vdom`.
	Range pulumi.StringPtrInput
	// Remote certificate.
	Remote pulumi.StringPtrInput
	// Remote certificate source type.
	Source pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RemoteState) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteState)(nil)).Elem()
}

type remoteArgs struct {
	// Name.
	Name *string `pulumi:"name"`
	// Either the global or VDOM IP address range for the remote certificate. Valid values: `global`, `vdom`.
	Range *string `pulumi:"range"`
	// Remote certificate.
	Remote *string `pulumi:"remote"`
	// Remote certificate source type.
	Source *string `pulumi:"source"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Remote resource.
type RemoteArgs struct {
	// Name.
	Name pulumi.StringPtrInput
	// Either the global or VDOM IP address range for the remote certificate. Valid values: `global`, `vdom`.
	Range pulumi.StringPtrInput
	// Remote certificate.
	Remote pulumi.StringPtrInput
	// Remote certificate source type.
	Source pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RemoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteArgs)(nil)).Elem()
}

type RemoteInput interface {
	pulumi.Input

	ToRemoteOutput() RemoteOutput
	ToRemoteOutputWithContext(ctx context.Context) RemoteOutput
}

func (*Remote) ElementType() reflect.Type {
	return reflect.TypeOf((**Remote)(nil)).Elem()
}

func (i *Remote) ToRemoteOutput() RemoteOutput {
	return i.ToRemoteOutputWithContext(context.Background())
}

func (i *Remote) ToRemoteOutputWithContext(ctx context.Context) RemoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteOutput)
}

// RemoteArrayInput is an input type that accepts RemoteArray and RemoteArrayOutput values.
// You can construct a concrete instance of `RemoteArrayInput` via:
//
//	RemoteArray{ RemoteArgs{...} }
type RemoteArrayInput interface {
	pulumi.Input

	ToRemoteArrayOutput() RemoteArrayOutput
	ToRemoteArrayOutputWithContext(context.Context) RemoteArrayOutput
}

type RemoteArray []RemoteInput

func (RemoteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Remote)(nil)).Elem()
}

func (i RemoteArray) ToRemoteArrayOutput() RemoteArrayOutput {
	return i.ToRemoteArrayOutputWithContext(context.Background())
}

func (i RemoteArray) ToRemoteArrayOutputWithContext(ctx context.Context) RemoteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteArrayOutput)
}

// RemoteMapInput is an input type that accepts RemoteMap and RemoteMapOutput values.
// You can construct a concrete instance of `RemoteMapInput` via:
//
//	RemoteMap{ "key": RemoteArgs{...} }
type RemoteMapInput interface {
	pulumi.Input

	ToRemoteMapOutput() RemoteMapOutput
	ToRemoteMapOutputWithContext(context.Context) RemoteMapOutput
}

type RemoteMap map[string]RemoteInput

func (RemoteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Remote)(nil)).Elem()
}

func (i RemoteMap) ToRemoteMapOutput() RemoteMapOutput {
	return i.ToRemoteMapOutputWithContext(context.Background())
}

func (i RemoteMap) ToRemoteMapOutputWithContext(ctx context.Context) RemoteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteMapOutput)
}

type RemoteOutput struct{ *pulumi.OutputState }

func (RemoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Remote)(nil)).Elem()
}

func (o RemoteOutput) ToRemoteOutput() RemoteOutput {
	return o
}

func (o RemoteOutput) ToRemoteOutputWithContext(ctx context.Context) RemoteOutput {
	return o
}

// Name.
func (o RemoteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Remote) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Either the global or VDOM IP address range for the remote certificate. Valid values: `global`, `vdom`.
func (o RemoteOutput) Range() pulumi.StringOutput {
	return o.ApplyT(func(v *Remote) pulumi.StringOutput { return v.Range }).(pulumi.StringOutput)
}

// Remote certificate.
func (o RemoteOutput) Remote() pulumi.StringOutput {
	return o.ApplyT(func(v *Remote) pulumi.StringOutput { return v.Remote }).(pulumi.StringOutput)
}

// Remote certificate source type.
func (o RemoteOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *Remote) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o RemoteOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Remote) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type RemoteArrayOutput struct{ *pulumi.OutputState }

func (RemoteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Remote)(nil)).Elem()
}

func (o RemoteArrayOutput) ToRemoteArrayOutput() RemoteArrayOutput {
	return o
}

func (o RemoteArrayOutput) ToRemoteArrayOutputWithContext(ctx context.Context) RemoteArrayOutput {
	return o
}

func (o RemoteArrayOutput) Index(i pulumi.IntInput) RemoteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Remote {
		return vs[0].([]*Remote)[vs[1].(int)]
	}).(RemoteOutput)
}

type RemoteMapOutput struct{ *pulumi.OutputState }

func (RemoteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Remote)(nil)).Elem()
}

func (o RemoteMapOutput) ToRemoteMapOutput() RemoteMapOutput {
	return o
}

func (o RemoteMapOutput) ToRemoteMapOutputWithContext(ctx context.Context) RemoteMapOutput {
	return o
}

func (o RemoteMapOutput) MapIndex(k pulumi.StringInput) RemoteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Remote {
		return vs[0].(map[string]*Remote)[vs[1].(string)]
	}).(RemoteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteInput)(nil)).Elem(), &Remote{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteArrayInput)(nil)).Elem(), RemoteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteMapInput)(nil)).Elem(), RemoteMap{})
	pulumi.RegisterOutputType(RemoteOutput{})
	pulumi.RegisterOutputType(RemoteArrayOutput{})
	pulumi.RegisterOutputType(RemoteMapOutput{})
}
