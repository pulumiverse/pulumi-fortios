// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Override FortiAnalyzer Cloud settings. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// LogFortianalyzerCloud OverrideSetting can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:log/fortianalyzer/cloud/overridesetting:Overridesetting labelname LogFortianalyzerCloudOverrideSetting
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:log/fortianalyzer/cloud/overridesetting:Overridesetting labelname LogFortianalyzerCloudOverrideSetting
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Overridesetting struct {
	pulumi.CustomResourceState

	// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringOutput `pulumi:"vdomparam"`
}

// NewOverridesetting registers a new resource with the given unique name, arguments, and options.
func NewOverridesetting(ctx *pulumi.Context,
	name string, args *OverridesettingArgs, opts ...pulumi.ResourceOption) (*Overridesetting, error) {
	if args == nil {
		args = &OverridesettingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Overridesetting
	err := ctx.RegisterResource("fortios:log/fortianalyzer/cloud/overridesetting:Overridesetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOverridesetting gets an existing Overridesetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOverridesetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OverridesettingState, opts ...pulumi.ResourceOption) (*Overridesetting, error) {
	var resource Overridesetting
	err := ctx.ReadResource("fortios:log/fortianalyzer/cloud/overridesetting:Overridesetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Overridesetting resources.
type overridesettingState struct {
	// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type OverridesettingState struct {
	// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (OverridesettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*overridesettingState)(nil)).Elem()
}

type overridesettingArgs struct {
	// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Overridesetting resource.
type OverridesettingArgs struct {
	// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (OverridesettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*overridesettingArgs)(nil)).Elem()
}

type OverridesettingInput interface {
	pulumi.Input

	ToOverridesettingOutput() OverridesettingOutput
	ToOverridesettingOutputWithContext(ctx context.Context) OverridesettingOutput
}

func (*Overridesetting) ElementType() reflect.Type {
	return reflect.TypeOf((**Overridesetting)(nil)).Elem()
}

func (i *Overridesetting) ToOverridesettingOutput() OverridesettingOutput {
	return i.ToOverridesettingOutputWithContext(context.Background())
}

func (i *Overridesetting) ToOverridesettingOutputWithContext(ctx context.Context) OverridesettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverridesettingOutput)
}

// OverridesettingArrayInput is an input type that accepts OverridesettingArray and OverridesettingArrayOutput values.
// You can construct a concrete instance of `OverridesettingArrayInput` via:
//
//	OverridesettingArray{ OverridesettingArgs{...} }
type OverridesettingArrayInput interface {
	pulumi.Input

	ToOverridesettingArrayOutput() OverridesettingArrayOutput
	ToOverridesettingArrayOutputWithContext(context.Context) OverridesettingArrayOutput
}

type OverridesettingArray []OverridesettingInput

func (OverridesettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Overridesetting)(nil)).Elem()
}

func (i OverridesettingArray) ToOverridesettingArrayOutput() OverridesettingArrayOutput {
	return i.ToOverridesettingArrayOutputWithContext(context.Background())
}

func (i OverridesettingArray) ToOverridesettingArrayOutputWithContext(ctx context.Context) OverridesettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverridesettingArrayOutput)
}

// OverridesettingMapInput is an input type that accepts OverridesettingMap and OverridesettingMapOutput values.
// You can construct a concrete instance of `OverridesettingMapInput` via:
//
//	OverridesettingMap{ "key": OverridesettingArgs{...} }
type OverridesettingMapInput interface {
	pulumi.Input

	ToOverridesettingMapOutput() OverridesettingMapOutput
	ToOverridesettingMapOutputWithContext(context.Context) OverridesettingMapOutput
}

type OverridesettingMap map[string]OverridesettingInput

func (OverridesettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Overridesetting)(nil)).Elem()
}

func (i OverridesettingMap) ToOverridesettingMapOutput() OverridesettingMapOutput {
	return i.ToOverridesettingMapOutputWithContext(context.Background())
}

func (i OverridesettingMap) ToOverridesettingMapOutputWithContext(ctx context.Context) OverridesettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverridesettingMapOutput)
}

type OverridesettingOutput struct{ *pulumi.OutputState }

func (OverridesettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Overridesetting)(nil)).Elem()
}

func (o OverridesettingOutput) ToOverridesettingOutput() OverridesettingOutput {
	return o
}

func (o OverridesettingOutput) ToOverridesettingOutputWithContext(ctx context.Context) OverridesettingOutput {
	return o
}

// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
func (o OverridesettingOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Overridesetting) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o OverridesettingOutput) Vdomparam() pulumi.StringOutput {
	return o.ApplyT(func(v *Overridesetting) pulumi.StringOutput { return v.Vdomparam }).(pulumi.StringOutput)
}

type OverridesettingArrayOutput struct{ *pulumi.OutputState }

func (OverridesettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Overridesetting)(nil)).Elem()
}

func (o OverridesettingArrayOutput) ToOverridesettingArrayOutput() OverridesettingArrayOutput {
	return o
}

func (o OverridesettingArrayOutput) ToOverridesettingArrayOutputWithContext(ctx context.Context) OverridesettingArrayOutput {
	return o
}

func (o OverridesettingArrayOutput) Index(i pulumi.IntInput) OverridesettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Overridesetting {
		return vs[0].([]*Overridesetting)[vs[1].(int)]
	}).(OverridesettingOutput)
}

type OverridesettingMapOutput struct{ *pulumi.OutputState }

func (OverridesettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Overridesetting)(nil)).Elem()
}

func (o OverridesettingMapOutput) ToOverridesettingMapOutput() OverridesettingMapOutput {
	return o
}

func (o OverridesettingMapOutput) ToOverridesettingMapOutputWithContext(ctx context.Context) OverridesettingMapOutput {
	return o
}

func (o OverridesettingMapOutput) MapIndex(k pulumi.StringInput) OverridesettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Overridesetting {
		return vs[0].(map[string]*Overridesetting)[vs[1].(string)]
	}).(OverridesettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OverridesettingInput)(nil)).Elem(), &Overridesetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*OverridesettingArrayInput)(nil)).Elem(), OverridesettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OverridesettingMapInput)(nil)).Elem(), OverridesettingMap{})
	pulumi.RegisterOutputType(OverridesettingOutput{})
	pulumi.RegisterOutputType(OverridesettingArrayOutput{})
	pulumi.RegisterOutputType(OverridesettingMapOutput{})
}
