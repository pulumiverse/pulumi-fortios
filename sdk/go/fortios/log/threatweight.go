// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package log

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/internal"
)

// Configure threat weight settings.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-fortios/sdk/go/fortios/log"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := log.NewThreatweight(ctx, "trname", &log.ThreatweightArgs{
//				Applications: log.ThreatweightApplicationArray{
//					&log.ThreatweightApplicationArgs{
//						Category: pulumi.Int(2),
//						Id:       pulumi.Int(1),
//						Level:    pulumi.String("low"),
//					},
//					&log.ThreatweightApplicationArgs{
//						Category: pulumi.Int(6),
//						Id:       pulumi.Int(2),
//						Level:    pulumi.String("medium"),
//					},
//				},
//				BlockedConnection: pulumi.String("high"),
//				FailedConnection:  pulumi.String("low"),
//				Ips: &log.ThreatweightIpsArgs{
//					CriticalSeverity: pulumi.String("critical"),
//					HighSeverity:     pulumi.String("high"),
//					InfoSeverity:     pulumi.String("disable"),
//					LowSeverity:      pulumi.String("low"),
//					MediumSeverity:   pulumi.String("medium"),
//				},
//				Level: &log.ThreatweightLevelArgs{
//					Critical: pulumi.Int(50),
//					High:     pulumi.Int(30),
//					Low:      pulumi.Int(5),
//					Medium:   pulumi.Int(10),
//				},
//				Malware: &log.ThreatweightMalwareArgs{
//					BotnetConnection:        pulumi.String("critical"),
//					CommandBlocked:          pulumi.String("disable"),
//					ContentDisarm:           pulumi.String("medium"),
//					FileBlocked:             pulumi.String("low"),
//					Mimefragmented:          pulumi.String("disable"),
//					Oversized:               pulumi.String("disable"),
//					SwitchProto:             pulumi.String("disable"),
//					VirusFileTypeExecutable: pulumi.String("medium"),
//					VirusInfected:           pulumi.String("critical"),
//					VirusOutbreakPrevention: pulumi.String("critical"),
//					VirusScanError:          pulumi.String("high"),
//				},
//				Status:           pulumi.String("enable"),
//				UrlBlockDetected: pulumi.String("high"),
//				Webs: log.ThreatweightWebArray{
//					&log.ThreatweightWebArgs{
//						Category: pulumi.Int(26),
//						Id:       pulumi.Int(1),
//						Level:    pulumi.String("high"),
//					},
//					&log.ThreatweightWebArgs{
//						Category: pulumi.Int(61),
//						Id:       pulumi.Int(2),
//						Level:    pulumi.String("high"),
//					},
//					&log.ThreatweightWebArgs{
//						Category: pulumi.Int(86),
//						Id:       pulumi.Int(3),
//						Level:    pulumi.String("high"),
//					},
//					&log.ThreatweightWebArgs{
//						Category: pulumi.Int(1),
//						Id:       pulumi.Int(4),
//						Level:    pulumi.String("medium"),
//					},
//					&log.ThreatweightWebArgs{
//						Category: pulumi.Int(3),
//						Id:       pulumi.Int(5),
//						Level:    pulumi.String("medium"),
//					},
//					&log.ThreatweightWebArgs{
//						Category: pulumi.Int(4),
//						Id:       pulumi.Int(6),
//						Level:    pulumi.String("medium"),
//					},
//					&log.ThreatweightWebArgs{
//						Category: pulumi.Int(5),
//						Id:       pulumi.Int(7),
//						Level:    pulumi.String("medium"),
//					},
//					&log.ThreatweightWebArgs{
//						Category: pulumi.Int(6),
//						Id:       pulumi.Int(8),
//						Level:    pulumi.String("medium"),
//					},
//					&log.ThreatweightWebArgs{
//						Category: pulumi.Int(12),
//						Id:       pulumi.Int(9),
//						Level:    pulumi.String("medium"),
//					},
//					&log.ThreatweightWebArgs{
//						Category: pulumi.Int(59),
//						Id:       pulumi.Int(10),
//						Level:    pulumi.String("medium"),
//					},
//					&log.ThreatweightWebArgs{
//						Category: pulumi.Int(62),
//						Id:       pulumi.Int(11),
//						Level:    pulumi.String("medium"),
//					},
//					&log.ThreatweightWebArgs{
//						Category: pulumi.Int(83),
//						Id:       pulumi.Int(12),
//						Level:    pulumi.String("medium"),
//					},
//					&log.ThreatweightWebArgs{
//						Category: pulumi.Int(72),
//						Id:       pulumi.Int(13),
//						Level:    pulumi.String("low"),
//					},
//					&log.ThreatweightWebArgs{
//						Category: pulumi.Int(14),
//						Id:       pulumi.Int(14),
//						Level:    pulumi.String("low"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Log ThreatWeight can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import fortios:log/threatweight:Threatweight labelname LogThreatWeight
// ```
//
// If you do not want to import arguments of block:
//
// $ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
// $ pulumi import fortios:log/threatweight:Threatweight labelname LogThreatWeight
// ```
//
// $ unset "FORTIOS_IMPORT_TABLE"
type Threatweight struct {
	pulumi.CustomResourceState

	// Application-control threat weight settings. The structure of `application` block is documented below.
	Applications ThreatweightApplicationArrayOutput `pulumi:"applications"`
	// Threat weight score for blocked connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	BlockedConnection pulumi.StringOutput `pulumi:"blockedConnection"`
	// Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	BotnetConnectionDetected pulumi.StringOutput `pulumi:"botnetConnectionDetected"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Threat weight score for failed connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	FailedConnection pulumi.StringOutput `pulumi:"failedConnection"`
	// Geolocation-based threat weight settings. The structure of `geolocation` block is documented below.
	Geolocations ThreatweightGeolocationArrayOutput `pulumi:"geolocations"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrOutput `pulumi:"getAllTables"`
	// IPS threat weight settings. The structure of `ips` block is documented below.
	Ips ThreatweightIpsOutput `pulumi:"ips"`
	// Score mapping for threat weight levels. The structure of `level` block is documented below.
	Level ThreatweightLevelOutput `pulumi:"level"`
	// Anti-virus malware threat weight settings. The structure of `malware` block is documented below.
	Malware ThreatweightMalwareOutput `pulumi:"malware"`
	// Enable/disable the threat weight feature. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Threat weight score for URL blocking. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	UrlBlockDetected pulumi.StringOutput `pulumi:"urlBlockDetected"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Web filtering threat weight settings. The structure of `web` block is documented below.
	Webs ThreatweightWebArrayOutput `pulumi:"webs"`
}

// NewThreatweight registers a new resource with the given unique name, arguments, and options.
func NewThreatweight(ctx *pulumi.Context,
	name string, args *ThreatweightArgs, opts ...pulumi.ResourceOption) (*Threatweight, error) {
	if args == nil {
		args = &ThreatweightArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Threatweight
	err := ctx.RegisterResource("fortios:log/threatweight:Threatweight", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetThreatweight gets an existing Threatweight resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetThreatweight(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ThreatweightState, opts ...pulumi.ResourceOption) (*Threatweight, error) {
	var resource Threatweight
	err := ctx.ReadResource("fortios:log/threatweight:Threatweight", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Threatweight resources.
type threatweightState struct {
	// Application-control threat weight settings. The structure of `application` block is documented below.
	Applications []ThreatweightApplication `pulumi:"applications"`
	// Threat weight score for blocked connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	BlockedConnection *string `pulumi:"blockedConnection"`
	// Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	BotnetConnectionDetected *string `pulumi:"botnetConnectionDetected"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Threat weight score for failed connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	FailedConnection *string `pulumi:"failedConnection"`
	// Geolocation-based threat weight settings. The structure of `geolocation` block is documented below.
	Geolocations []ThreatweightGeolocation `pulumi:"geolocations"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// IPS threat weight settings. The structure of `ips` block is documented below.
	Ips *ThreatweightIps `pulumi:"ips"`
	// Score mapping for threat weight levels. The structure of `level` block is documented below.
	Level *ThreatweightLevel `pulumi:"level"`
	// Anti-virus malware threat weight settings. The structure of `malware` block is documented below.
	Malware *ThreatweightMalware `pulumi:"malware"`
	// Enable/disable the threat weight feature. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Threat weight score for URL blocking. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	UrlBlockDetected *string `pulumi:"urlBlockDetected"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Web filtering threat weight settings. The structure of `web` block is documented below.
	Webs []ThreatweightWeb `pulumi:"webs"`
}

type ThreatweightState struct {
	// Application-control threat weight settings. The structure of `application` block is documented below.
	Applications ThreatweightApplicationArrayInput
	// Threat weight score for blocked connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	BlockedConnection pulumi.StringPtrInput
	// Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	BotnetConnectionDetected pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Threat weight score for failed connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	FailedConnection pulumi.StringPtrInput
	// Geolocation-based threat weight settings. The structure of `geolocation` block is documented below.
	Geolocations ThreatweightGeolocationArrayInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// IPS threat weight settings. The structure of `ips` block is documented below.
	Ips ThreatweightIpsPtrInput
	// Score mapping for threat weight levels. The structure of `level` block is documented below.
	Level ThreatweightLevelPtrInput
	// Anti-virus malware threat weight settings. The structure of `malware` block is documented below.
	Malware ThreatweightMalwarePtrInput
	// Enable/disable the threat weight feature. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Threat weight score for URL blocking. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	UrlBlockDetected pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Web filtering threat weight settings. The structure of `web` block is documented below.
	Webs ThreatweightWebArrayInput
}

func (ThreatweightState) ElementType() reflect.Type {
	return reflect.TypeOf((*threatweightState)(nil)).Elem()
}

type threatweightArgs struct {
	// Application-control threat weight settings. The structure of `application` block is documented below.
	Applications []ThreatweightApplication `pulumi:"applications"`
	// Threat weight score for blocked connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	BlockedConnection *string `pulumi:"blockedConnection"`
	// Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	BotnetConnectionDetected *string `pulumi:"botnetConnectionDetected"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Threat weight score for failed connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	FailedConnection *string `pulumi:"failedConnection"`
	// Geolocation-based threat weight settings. The structure of `geolocation` block is documented below.
	Geolocations []ThreatweightGeolocation `pulumi:"geolocations"`
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables *string `pulumi:"getAllTables"`
	// IPS threat weight settings. The structure of `ips` block is documented below.
	Ips *ThreatweightIps `pulumi:"ips"`
	// Score mapping for threat weight levels. The structure of `level` block is documented below.
	Level *ThreatweightLevel `pulumi:"level"`
	// Anti-virus malware threat weight settings. The structure of `malware` block is documented below.
	Malware *ThreatweightMalware `pulumi:"malware"`
	// Enable/disable the threat weight feature. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Threat weight score for URL blocking. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	UrlBlockDetected *string `pulumi:"urlBlockDetected"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Web filtering threat weight settings. The structure of `web` block is documented below.
	Webs []ThreatweightWeb `pulumi:"webs"`
}

// The set of arguments for constructing a Threatweight resource.
type ThreatweightArgs struct {
	// Application-control threat weight settings. The structure of `application` block is documented below.
	Applications ThreatweightApplicationArrayInput
	// Threat weight score for blocked connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	BlockedConnection pulumi.StringPtrInput
	// Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	BotnetConnectionDetected pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Threat weight score for failed connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	FailedConnection pulumi.StringPtrInput
	// Geolocation-based threat weight settings. The structure of `geolocation` block is documented below.
	Geolocations ThreatweightGeolocationArrayInput
	// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
	GetAllTables pulumi.StringPtrInput
	// IPS threat weight settings. The structure of `ips` block is documented below.
	Ips ThreatweightIpsPtrInput
	// Score mapping for threat weight levels. The structure of `level` block is documented below.
	Level ThreatweightLevelPtrInput
	// Anti-virus malware threat weight settings. The structure of `malware` block is documented below.
	Malware ThreatweightMalwarePtrInput
	// Enable/disable the threat weight feature. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Threat weight score for URL blocking. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
	UrlBlockDetected pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Web filtering threat weight settings. The structure of `web` block is documented below.
	Webs ThreatweightWebArrayInput
}

func (ThreatweightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*threatweightArgs)(nil)).Elem()
}

type ThreatweightInput interface {
	pulumi.Input

	ToThreatweightOutput() ThreatweightOutput
	ToThreatweightOutputWithContext(ctx context.Context) ThreatweightOutput
}

func (*Threatweight) ElementType() reflect.Type {
	return reflect.TypeOf((**Threatweight)(nil)).Elem()
}

func (i *Threatweight) ToThreatweightOutput() ThreatweightOutput {
	return i.ToThreatweightOutputWithContext(context.Background())
}

func (i *Threatweight) ToThreatweightOutputWithContext(ctx context.Context) ThreatweightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatweightOutput)
}

// ThreatweightArrayInput is an input type that accepts ThreatweightArray and ThreatweightArrayOutput values.
// You can construct a concrete instance of `ThreatweightArrayInput` via:
//
//	ThreatweightArray{ ThreatweightArgs{...} }
type ThreatweightArrayInput interface {
	pulumi.Input

	ToThreatweightArrayOutput() ThreatweightArrayOutput
	ToThreatweightArrayOutputWithContext(context.Context) ThreatweightArrayOutput
}

type ThreatweightArray []ThreatweightInput

func (ThreatweightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Threatweight)(nil)).Elem()
}

func (i ThreatweightArray) ToThreatweightArrayOutput() ThreatweightArrayOutput {
	return i.ToThreatweightArrayOutputWithContext(context.Background())
}

func (i ThreatweightArray) ToThreatweightArrayOutputWithContext(ctx context.Context) ThreatweightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatweightArrayOutput)
}

// ThreatweightMapInput is an input type that accepts ThreatweightMap and ThreatweightMapOutput values.
// You can construct a concrete instance of `ThreatweightMapInput` via:
//
//	ThreatweightMap{ "key": ThreatweightArgs{...} }
type ThreatweightMapInput interface {
	pulumi.Input

	ToThreatweightMapOutput() ThreatweightMapOutput
	ToThreatweightMapOutputWithContext(context.Context) ThreatweightMapOutput
}

type ThreatweightMap map[string]ThreatweightInput

func (ThreatweightMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Threatweight)(nil)).Elem()
}

func (i ThreatweightMap) ToThreatweightMapOutput() ThreatweightMapOutput {
	return i.ToThreatweightMapOutputWithContext(context.Background())
}

func (i ThreatweightMap) ToThreatweightMapOutputWithContext(ctx context.Context) ThreatweightMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatweightMapOutput)
}

type ThreatweightOutput struct{ *pulumi.OutputState }

func (ThreatweightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Threatweight)(nil)).Elem()
}

func (o ThreatweightOutput) ToThreatweightOutput() ThreatweightOutput {
	return o
}

func (o ThreatweightOutput) ToThreatweightOutputWithContext(ctx context.Context) ThreatweightOutput {
	return o
}

// Application-control threat weight settings. The structure of `application` block is documented below.
func (o ThreatweightOutput) Applications() ThreatweightApplicationArrayOutput {
	return o.ApplyT(func(v *Threatweight) ThreatweightApplicationArrayOutput { return v.Applications }).(ThreatweightApplicationArrayOutput)
}

// Threat weight score for blocked connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
func (o ThreatweightOutput) BlockedConnection() pulumi.StringOutput {
	return o.ApplyT(func(v *Threatweight) pulumi.StringOutput { return v.BlockedConnection }).(pulumi.StringOutput)
}

// Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
func (o ThreatweightOutput) BotnetConnectionDetected() pulumi.StringOutput {
	return o.ApplyT(func(v *Threatweight) pulumi.StringOutput { return v.BotnetConnectionDetected }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o ThreatweightOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Threatweight) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Threat weight score for failed connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
func (o ThreatweightOutput) FailedConnection() pulumi.StringOutput {
	return o.ApplyT(func(v *Threatweight) pulumi.StringOutput { return v.FailedConnection }).(pulumi.StringOutput)
}

// Geolocation-based threat weight settings. The structure of `geolocation` block is documented below.
func (o ThreatweightOutput) Geolocations() ThreatweightGeolocationArrayOutput {
	return o.ApplyT(func(v *Threatweight) ThreatweightGeolocationArrayOutput { return v.Geolocations }).(ThreatweightGeolocationArrayOutput)
}

// Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
func (o ThreatweightOutput) GetAllTables() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Threatweight) pulumi.StringPtrOutput { return v.GetAllTables }).(pulumi.StringPtrOutput)
}

// IPS threat weight settings. The structure of `ips` block is documented below.
func (o ThreatweightOutput) Ips() ThreatweightIpsOutput {
	return o.ApplyT(func(v *Threatweight) ThreatweightIpsOutput { return v.Ips }).(ThreatweightIpsOutput)
}

// Score mapping for threat weight levels. The structure of `level` block is documented below.
func (o ThreatweightOutput) Level() ThreatweightLevelOutput {
	return o.ApplyT(func(v *Threatweight) ThreatweightLevelOutput { return v.Level }).(ThreatweightLevelOutput)
}

// Anti-virus malware threat weight settings. The structure of `malware` block is documented below.
func (o ThreatweightOutput) Malware() ThreatweightMalwareOutput {
	return o.ApplyT(func(v *Threatweight) ThreatweightMalwareOutput { return v.Malware }).(ThreatweightMalwareOutput)
}

// Enable/disable the threat weight feature. Valid values: `enable`, `disable`.
func (o ThreatweightOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Threatweight) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Threat weight score for URL blocking. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
func (o ThreatweightOutput) UrlBlockDetected() pulumi.StringOutput {
	return o.ApplyT(func(v *Threatweight) pulumi.StringOutput { return v.UrlBlockDetected }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ThreatweightOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Threatweight) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Web filtering threat weight settings. The structure of `web` block is documented below.
func (o ThreatweightOutput) Webs() ThreatweightWebArrayOutput {
	return o.ApplyT(func(v *Threatweight) ThreatweightWebArrayOutput { return v.Webs }).(ThreatweightWebArrayOutput)
}

type ThreatweightArrayOutput struct{ *pulumi.OutputState }

func (ThreatweightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Threatweight)(nil)).Elem()
}

func (o ThreatweightArrayOutput) ToThreatweightArrayOutput() ThreatweightArrayOutput {
	return o
}

func (o ThreatweightArrayOutput) ToThreatweightArrayOutputWithContext(ctx context.Context) ThreatweightArrayOutput {
	return o
}

func (o ThreatweightArrayOutput) Index(i pulumi.IntInput) ThreatweightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Threatweight {
		return vs[0].([]*Threatweight)[vs[1].(int)]
	}).(ThreatweightOutput)
}

type ThreatweightMapOutput struct{ *pulumi.OutputState }

func (ThreatweightMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Threatweight)(nil)).Elem()
}

func (o ThreatweightMapOutput) ToThreatweightMapOutput() ThreatweightMapOutput {
	return o
}

func (o ThreatweightMapOutput) ToThreatweightMapOutputWithContext(ctx context.Context) ThreatweightMapOutput {
	return o
}

func (o ThreatweightMapOutput) MapIndex(k pulumi.StringInput) ThreatweightOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Threatweight {
		return vs[0].(map[string]*Threatweight)[vs[1].(string)]
	}).(ThreatweightOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ThreatweightInput)(nil)).Elem(), &Threatweight{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThreatweightArrayInput)(nil)).Elem(), ThreatweightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThreatweightMapInput)(nil)).Elem(), ThreatweightMap{})
	pulumi.RegisterOutputType(ThreatweightOutput{})
	pulumi.RegisterOutputType(ThreatweightArrayOutput{})
	pulumi.RegisterOutputType(ThreatweightMapOutput{})
}
