# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GroupIngress',
    'IngressAction',
    'IngressClassifier',
]

@pulumi.output_type
class GroupIngress(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: ACL ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ACL ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class IngressAction(dict):
    def __init__(__self__, *,
                 count: Optional[str] = None,
                 drop: Optional[str] = None):
        """
        :param str count: Enable/disable count. Valid values: `enable`, `disable`.
        :param str drop: Enable/disable drop. Valid values: `enable`, `disable`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def count(self) -> Optional[str]:
        """
        Enable/disable count. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def drop(self) -> Optional[str]:
        """
        Enable/disable drop. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "drop")


@pulumi.output_type
class IngressClassifier(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstIpPrefix":
            suggest = "dst_ip_prefix"
        elif key == "dstMac":
            suggest = "dst_mac"
        elif key == "srcIpPrefix":
            suggest = "src_ip_prefix"
        elif key == "srcMac":
            suggest = "src_mac"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IngressClassifier. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IngressClassifier.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IngressClassifier.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dst_ip_prefix: Optional[str] = None,
                 dst_mac: Optional[str] = None,
                 src_ip_prefix: Optional[str] = None,
                 src_mac: Optional[str] = None,
                 vlan: Optional[int] = None):
        """
        :param str dst_ip_prefix: Destination IP address to be matched.
        :param str dst_mac: Destination MAC address to be matched.
        :param str src_ip_prefix: Source IP address to be matched.
        :param str src_mac: Source MAC address to be matched.
        :param int vlan: VLAN ID to be matched.
        """
        if dst_ip_prefix is not None:
            pulumi.set(__self__, "dst_ip_prefix", dst_ip_prefix)
        if dst_mac is not None:
            pulumi.set(__self__, "dst_mac", dst_mac)
        if src_ip_prefix is not None:
            pulumi.set(__self__, "src_ip_prefix", src_ip_prefix)
        if src_mac is not None:
            pulumi.set(__self__, "src_mac", src_mac)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter(name="dstIpPrefix")
    def dst_ip_prefix(self) -> Optional[str]:
        """
        Destination IP address to be matched.
        """
        return pulumi.get(self, "dst_ip_prefix")

    @property
    @pulumi.getter(name="dstMac")
    def dst_mac(self) -> Optional[str]:
        """
        Destination MAC address to be matched.
        """
        return pulumi.get(self, "dst_mac")

    @property
    @pulumi.getter(name="srcIpPrefix")
    def src_ip_prefix(self) -> Optional[str]:
        """
        Source IP address to be matched.
        """
        return pulumi.get(self, "src_ip_prefix")

    @property
    @pulumi.getter(name="srcMac")
    def src_mac(self) -> Optional[str]:
        """
        Source MAC address to be matched.
        """
        return pulumi.get(self, "src_mac")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        """
        VLAN ID to be matched.
        """
        return pulumi.get(self, "vlan")


