# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GlobalArgs', 'Global']

@pulumi.input_type
class GlobalArgs:
    def __init__(__self__, *,
                 allow_multiple_interfaces: Optional[pulumi.Input[str]] = None,
                 bounce_quarantined_link: Optional[pulumi.Input[str]] = None,
                 custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalCustomCommandArgs']]]] = None,
                 default_virtual_switch_vlan: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_circuit_id: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_format: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_remote_id: Optional[pulumi.Input[str]] = None,
                 dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_client_db_exp: Optional[pulumi.Input[int]] = None,
                 dhcp_snoop_client_req: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_db_per_port_learn_limit: Optional[pulumi.Input[int]] = None,
                 disable_discoveries: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalDisableDiscoveryArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fips_enforce: Optional[pulumi.Input[str]] = None,
                 firmware_provision_on_authorization: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 https_image_push: Optional[pulumi.Input[str]] = None,
                 log_mac_limit_violations: Optional[pulumi.Input[str]] = None,
                 mac_aging_interval: Optional[pulumi.Input[int]] = None,
                 mac_event_logging: Optional[pulumi.Input[str]] = None,
                 mac_retention_period: Optional[pulumi.Input[int]] = None,
                 mac_violation_timer: Optional[pulumi.Input[int]] = None,
                 quarantine_mode: Optional[pulumi.Input[str]] = None,
                 sn_dns_resolution: Optional[pulumi.Input[str]] = None,
                 update_user_device: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_all_mode: Optional[pulumi.Input[str]] = None,
                 vlan_identity: Optional[pulumi.Input[str]] = None,
                 vlan_optimization: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Global resource.
        :param pulumi.Input[str] allow_multiple_interfaces: Enable/disable multiple FortiLink interfaces for redundant connections between a managed FortiSwitch and FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bounce_quarantined_link: Enable/disable bouncing (administratively bring the link down, up) of a switch port where a quarantined device was seen last. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['GlobalCustomCommandArgs']]] custom_commands: List of custom commands to be pushed to all FortiSwitches in the VDOM. The structure of `custom_command` block is documented below.
        :param pulumi.Input[str] default_virtual_switch_vlan: Default VLAN for ports when added to the virtual-switch.
        :param pulumi.Input[str] dhcp_option82_circuit_id: List the parameters to be included to inform about client identification. Valid values: `intfname`, `vlan`, `hostname`, `mode`, `description`.
        :param pulumi.Input[str] dhcp_option82_format: DHCP option-82 format string. Valid values: `ascii`, `legacy`.
        :param pulumi.Input[str] dhcp_option82_remote_id: List the parameters to be included to inform about client identification. Valid values: `mac`, `hostname`, `ip`.
        :param pulumi.Input[str] dhcp_server_access_list: Enable/disable DHCP snooping server access list. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] dhcp_snoop_client_db_exp: Expiry time for DHCP snooping server database entries (300 - 259200 sec, default = 86400 sec).
        :param pulumi.Input[str] dhcp_snoop_client_req: Client DHCP packet broadcast mode. Valid values: `drop-untrusted`, `forward-untrusted`.
        :param pulumi.Input[int] dhcp_snoop_db_per_port_learn_limit: Per Interface dhcp-server entries learn limit (0 - 1024, default = 64).
        :param pulumi.Input[Sequence[pulumi.Input['GlobalDisableDiscoveryArgs']]] disable_discoveries: Prevent this FortiSwitch from discovering. The structure of `disable_discovery` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] fips_enforce: Enable/disable enforcement of FIPS on managed FortiSwitch devices. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] firmware_provision_on_authorization: Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] https_image_push: Enable/disable image push to FortiSwitch using HTTPS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_mac_limit_violations: Enable/disable logs for Learning Limit Violations. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mac_aging_interval: Time after which an inactive MAC is aged out (10 - 1000000 sec, default = 300, 0 = disable).
        :param pulumi.Input[str] mac_event_logging: Enable/disable MAC address event logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mac_retention_period: Time in hours after which an inactive MAC is removed from client DB.
        :param pulumi.Input[int] mac_violation_timer: Set timeout for Learning Limit Violations (0 = disabled).
        :param pulumi.Input[str] quarantine_mode: Quarantine mode. Valid values: `by-vlan`, `by-redirect`.
        :param pulumi.Input[str] sn_dns_resolution: Enable/disable DNS resolution of the FortiSwitch unit's IP address by use of its serial number. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_user_device: Control which sources update the device user list. Valid values: `mac-cache`, `lldp`, `dhcp-snooping`, `l2-db`, `l3-db`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vlan_all_mode: VLAN configuration mode, user-defined-vlans or all-possible-vlans. Valid values: `all`, `defined`.
        :param pulumi.Input[str] vlan_identity: Identity of the VLAN. Commonly used for RADIUS Tunnel-Private-Group-Id. Valid values: `description`, `name`.
        :param pulumi.Input[str] vlan_optimization: FortiLink VLAN optimization. Valid values: `enable`, `disable`.
        """
        if allow_multiple_interfaces is not None:
            pulumi.set(__self__, "allow_multiple_interfaces", allow_multiple_interfaces)
        if bounce_quarantined_link is not None:
            pulumi.set(__self__, "bounce_quarantined_link", bounce_quarantined_link)
        if custom_commands is not None:
            pulumi.set(__self__, "custom_commands", custom_commands)
        if default_virtual_switch_vlan is not None:
            pulumi.set(__self__, "default_virtual_switch_vlan", default_virtual_switch_vlan)
        if dhcp_option82_circuit_id is not None:
            pulumi.set(__self__, "dhcp_option82_circuit_id", dhcp_option82_circuit_id)
        if dhcp_option82_format is not None:
            pulumi.set(__self__, "dhcp_option82_format", dhcp_option82_format)
        if dhcp_option82_remote_id is not None:
            pulumi.set(__self__, "dhcp_option82_remote_id", dhcp_option82_remote_id)
        if dhcp_server_access_list is not None:
            pulumi.set(__self__, "dhcp_server_access_list", dhcp_server_access_list)
        if dhcp_snoop_client_db_exp is not None:
            pulumi.set(__self__, "dhcp_snoop_client_db_exp", dhcp_snoop_client_db_exp)
        if dhcp_snoop_client_req is not None:
            pulumi.set(__self__, "dhcp_snoop_client_req", dhcp_snoop_client_req)
        if dhcp_snoop_db_per_port_learn_limit is not None:
            pulumi.set(__self__, "dhcp_snoop_db_per_port_learn_limit", dhcp_snoop_db_per_port_learn_limit)
        if disable_discoveries is not None:
            pulumi.set(__self__, "disable_discoveries", disable_discoveries)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fips_enforce is not None:
            pulumi.set(__self__, "fips_enforce", fips_enforce)
        if firmware_provision_on_authorization is not None:
            pulumi.set(__self__, "firmware_provision_on_authorization", firmware_provision_on_authorization)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if https_image_push is not None:
            pulumi.set(__self__, "https_image_push", https_image_push)
        if log_mac_limit_violations is not None:
            pulumi.set(__self__, "log_mac_limit_violations", log_mac_limit_violations)
        if mac_aging_interval is not None:
            pulumi.set(__self__, "mac_aging_interval", mac_aging_interval)
        if mac_event_logging is not None:
            pulumi.set(__self__, "mac_event_logging", mac_event_logging)
        if mac_retention_period is not None:
            pulumi.set(__self__, "mac_retention_period", mac_retention_period)
        if mac_violation_timer is not None:
            pulumi.set(__self__, "mac_violation_timer", mac_violation_timer)
        if quarantine_mode is not None:
            pulumi.set(__self__, "quarantine_mode", quarantine_mode)
        if sn_dns_resolution is not None:
            pulumi.set(__self__, "sn_dns_resolution", sn_dns_resolution)
        if update_user_device is not None:
            pulumi.set(__self__, "update_user_device", update_user_device)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vlan_all_mode is not None:
            pulumi.set(__self__, "vlan_all_mode", vlan_all_mode)
        if vlan_identity is not None:
            pulumi.set(__self__, "vlan_identity", vlan_identity)
        if vlan_optimization is not None:
            pulumi.set(__self__, "vlan_optimization", vlan_optimization)

    @property
    @pulumi.getter(name="allowMultipleInterfaces")
    def allow_multiple_interfaces(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable multiple FortiLink interfaces for redundant connections between a managed FortiSwitch and FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_multiple_interfaces")

    @allow_multiple_interfaces.setter
    def allow_multiple_interfaces(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_multiple_interfaces", value)

    @property
    @pulumi.getter(name="bounceQuarantinedLink")
    def bounce_quarantined_link(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable bouncing (administratively bring the link down, up) of a switch port where a quarantined device was seen last. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "bounce_quarantined_link")

    @bounce_quarantined_link.setter
    def bounce_quarantined_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bounce_quarantined_link", value)

    @property
    @pulumi.getter(name="customCommands")
    def custom_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GlobalCustomCommandArgs']]]]:
        """
        List of custom commands to be pushed to all FortiSwitches in the VDOM. The structure of `custom_command` block is documented below.
        """
        return pulumi.get(self, "custom_commands")

    @custom_commands.setter
    def custom_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalCustomCommandArgs']]]]):
        pulumi.set(self, "custom_commands", value)

    @property
    @pulumi.getter(name="defaultVirtualSwitchVlan")
    def default_virtual_switch_vlan(self) -> Optional[pulumi.Input[str]]:
        """
        Default VLAN for ports when added to the virtual-switch.
        """
        return pulumi.get(self, "default_virtual_switch_vlan")

    @default_virtual_switch_vlan.setter
    def default_virtual_switch_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_virtual_switch_vlan", value)

    @property
    @pulumi.getter(name="dhcpOption82CircuitId")
    def dhcp_option82_circuit_id(self) -> Optional[pulumi.Input[str]]:
        """
        List the parameters to be included to inform about client identification. Valid values: `intfname`, `vlan`, `hostname`, `mode`, `description`.
        """
        return pulumi.get(self, "dhcp_option82_circuit_id")

    @dhcp_option82_circuit_id.setter
    def dhcp_option82_circuit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_circuit_id", value)

    @property
    @pulumi.getter(name="dhcpOption82Format")
    def dhcp_option82_format(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP option-82 format string. Valid values: `ascii`, `legacy`.
        """
        return pulumi.get(self, "dhcp_option82_format")

    @dhcp_option82_format.setter
    def dhcp_option82_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_format", value)

    @property
    @pulumi.getter(name="dhcpOption82RemoteId")
    def dhcp_option82_remote_id(self) -> Optional[pulumi.Input[str]]:
        """
        List the parameters to be included to inform about client identification. Valid values: `mac`, `hostname`, `ip`.
        """
        return pulumi.get(self, "dhcp_option82_remote_id")

    @dhcp_option82_remote_id.setter
    def dhcp_option82_remote_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_remote_id", value)

    @property
    @pulumi.getter(name="dhcpServerAccessList")
    def dhcp_server_access_list(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DHCP snooping server access list. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_server_access_list")

    @dhcp_server_access_list.setter
    def dhcp_server_access_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_server_access_list", value)

    @property
    @pulumi.getter(name="dhcpSnoopClientDbExp")
    def dhcp_snoop_client_db_exp(self) -> Optional[pulumi.Input[int]]:
        """
        Expiry time for DHCP snooping server database entries (300 - 259200 sec, default = 86400 sec).
        """
        return pulumi.get(self, "dhcp_snoop_client_db_exp")

    @dhcp_snoop_client_db_exp.setter
    def dhcp_snoop_client_db_exp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp_snoop_client_db_exp", value)

    @property
    @pulumi.getter(name="dhcpSnoopClientReq")
    def dhcp_snoop_client_req(self) -> Optional[pulumi.Input[str]]:
        """
        Client DHCP packet broadcast mode. Valid values: `drop-untrusted`, `forward-untrusted`.
        """
        return pulumi.get(self, "dhcp_snoop_client_req")

    @dhcp_snoop_client_req.setter
    def dhcp_snoop_client_req(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_snoop_client_req", value)

    @property
    @pulumi.getter(name="dhcpSnoopDbPerPortLearnLimit")
    def dhcp_snoop_db_per_port_learn_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Per Interface dhcp-server entries learn limit (0 - 1024, default = 64).
        """
        return pulumi.get(self, "dhcp_snoop_db_per_port_learn_limit")

    @dhcp_snoop_db_per_port_learn_limit.setter
    def dhcp_snoop_db_per_port_learn_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp_snoop_db_per_port_learn_limit", value)

    @property
    @pulumi.getter(name="disableDiscoveries")
    def disable_discoveries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GlobalDisableDiscoveryArgs']]]]:
        """
        Prevent this FortiSwitch from discovering. The structure of `disable_discovery` block is documented below.
        """
        return pulumi.get(self, "disable_discoveries")

    @disable_discoveries.setter
    def disable_discoveries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalDisableDiscoveryArgs']]]]):
        pulumi.set(self, "disable_discoveries", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fipsEnforce")
    def fips_enforce(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable enforcement of FIPS on managed FortiSwitch devices. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "fips_enforce")

    @fips_enforce.setter
    def fips_enforce(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fips_enforce", value)

    @property
    @pulumi.getter(name="firmwareProvisionOnAuthorization")
    def firmware_provision_on_authorization(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "firmware_provision_on_authorization")

    @firmware_provision_on_authorization.setter
    def firmware_provision_on_authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision_on_authorization", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="httpsImagePush")
    def https_image_push(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable image push to FortiSwitch using HTTPS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "https_image_push")

    @https_image_push.setter
    def https_image_push(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_image_push", value)

    @property
    @pulumi.getter(name="logMacLimitViolations")
    def log_mac_limit_violations(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logs for Learning Limit Violations. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_mac_limit_violations")

    @log_mac_limit_violations.setter
    def log_mac_limit_violations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_mac_limit_violations", value)

    @property
    @pulumi.getter(name="macAgingInterval")
    def mac_aging_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time after which an inactive MAC is aged out (10 - 1000000 sec, default = 300, 0 = disable).
        """
        return pulumi.get(self, "mac_aging_interval")

    @mac_aging_interval.setter
    def mac_aging_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_aging_interval", value)

    @property
    @pulumi.getter(name="macEventLogging")
    def mac_event_logging(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MAC address event logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mac_event_logging")

    @mac_event_logging.setter
    def mac_event_logging(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_event_logging", value)

    @property
    @pulumi.getter(name="macRetentionPeriod")
    def mac_retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        Time in hours after which an inactive MAC is removed from client DB.
        """
        return pulumi.get(self, "mac_retention_period")

    @mac_retention_period.setter
    def mac_retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_retention_period", value)

    @property
    @pulumi.getter(name="macViolationTimer")
    def mac_violation_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Set timeout for Learning Limit Violations (0 = disabled).
        """
        return pulumi.get(self, "mac_violation_timer")

    @mac_violation_timer.setter
    def mac_violation_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_violation_timer", value)

    @property
    @pulumi.getter(name="quarantineMode")
    def quarantine_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine mode. Valid values: `by-vlan`, `by-redirect`.
        """
        return pulumi.get(self, "quarantine_mode")

    @quarantine_mode.setter
    def quarantine_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_mode", value)

    @property
    @pulumi.getter(name="snDnsResolution")
    def sn_dns_resolution(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DNS resolution of the FortiSwitch unit's IP address by use of its serial number. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sn_dns_resolution")

    @sn_dns_resolution.setter
    def sn_dns_resolution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sn_dns_resolution", value)

    @property
    @pulumi.getter(name="updateUserDevice")
    def update_user_device(self) -> Optional[pulumi.Input[str]]:
        """
        Control which sources update the device user list. Valid values: `mac-cache`, `lldp`, `dhcp-snooping`, `l2-db`, `l3-db`.
        """
        return pulumi.get(self, "update_user_device")

    @update_user_device.setter
    def update_user_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_user_device", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vlanAllMode")
    def vlan_all_mode(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN configuration mode, user-defined-vlans or all-possible-vlans. Valid values: `all`, `defined`.
        """
        return pulumi.get(self, "vlan_all_mode")

    @vlan_all_mode.setter
    def vlan_all_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_all_mode", value)

    @property
    @pulumi.getter(name="vlanIdentity")
    def vlan_identity(self) -> Optional[pulumi.Input[str]]:
        """
        Identity of the VLAN. Commonly used for RADIUS Tunnel-Private-Group-Id. Valid values: `description`, `name`.
        """
        return pulumi.get(self, "vlan_identity")

    @vlan_identity.setter
    def vlan_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_identity", value)

    @property
    @pulumi.getter(name="vlanOptimization")
    def vlan_optimization(self) -> Optional[pulumi.Input[str]]:
        """
        FortiLink VLAN optimization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vlan_optimization")

    @vlan_optimization.setter
    def vlan_optimization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_optimization", value)


@pulumi.input_type
class _GlobalState:
    def __init__(__self__, *,
                 allow_multiple_interfaces: Optional[pulumi.Input[str]] = None,
                 bounce_quarantined_link: Optional[pulumi.Input[str]] = None,
                 custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalCustomCommandArgs']]]] = None,
                 default_virtual_switch_vlan: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_circuit_id: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_format: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_remote_id: Optional[pulumi.Input[str]] = None,
                 dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_client_db_exp: Optional[pulumi.Input[int]] = None,
                 dhcp_snoop_client_req: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_db_per_port_learn_limit: Optional[pulumi.Input[int]] = None,
                 disable_discoveries: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalDisableDiscoveryArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fips_enforce: Optional[pulumi.Input[str]] = None,
                 firmware_provision_on_authorization: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 https_image_push: Optional[pulumi.Input[str]] = None,
                 log_mac_limit_violations: Optional[pulumi.Input[str]] = None,
                 mac_aging_interval: Optional[pulumi.Input[int]] = None,
                 mac_event_logging: Optional[pulumi.Input[str]] = None,
                 mac_retention_period: Optional[pulumi.Input[int]] = None,
                 mac_violation_timer: Optional[pulumi.Input[int]] = None,
                 quarantine_mode: Optional[pulumi.Input[str]] = None,
                 sn_dns_resolution: Optional[pulumi.Input[str]] = None,
                 update_user_device: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_all_mode: Optional[pulumi.Input[str]] = None,
                 vlan_identity: Optional[pulumi.Input[str]] = None,
                 vlan_optimization: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Global resources.
        :param pulumi.Input[str] allow_multiple_interfaces: Enable/disable multiple FortiLink interfaces for redundant connections between a managed FortiSwitch and FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bounce_quarantined_link: Enable/disable bouncing (administratively bring the link down, up) of a switch port where a quarantined device was seen last. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['GlobalCustomCommandArgs']]] custom_commands: List of custom commands to be pushed to all FortiSwitches in the VDOM. The structure of `custom_command` block is documented below.
        :param pulumi.Input[str] default_virtual_switch_vlan: Default VLAN for ports when added to the virtual-switch.
        :param pulumi.Input[str] dhcp_option82_circuit_id: List the parameters to be included to inform about client identification. Valid values: `intfname`, `vlan`, `hostname`, `mode`, `description`.
        :param pulumi.Input[str] dhcp_option82_format: DHCP option-82 format string. Valid values: `ascii`, `legacy`.
        :param pulumi.Input[str] dhcp_option82_remote_id: List the parameters to be included to inform about client identification. Valid values: `mac`, `hostname`, `ip`.
        :param pulumi.Input[str] dhcp_server_access_list: Enable/disable DHCP snooping server access list. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] dhcp_snoop_client_db_exp: Expiry time for DHCP snooping server database entries (300 - 259200 sec, default = 86400 sec).
        :param pulumi.Input[str] dhcp_snoop_client_req: Client DHCP packet broadcast mode. Valid values: `drop-untrusted`, `forward-untrusted`.
        :param pulumi.Input[int] dhcp_snoop_db_per_port_learn_limit: Per Interface dhcp-server entries learn limit (0 - 1024, default = 64).
        :param pulumi.Input[Sequence[pulumi.Input['GlobalDisableDiscoveryArgs']]] disable_discoveries: Prevent this FortiSwitch from discovering. The structure of `disable_discovery` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] fips_enforce: Enable/disable enforcement of FIPS on managed FortiSwitch devices. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] firmware_provision_on_authorization: Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] https_image_push: Enable/disable image push to FortiSwitch using HTTPS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_mac_limit_violations: Enable/disable logs for Learning Limit Violations. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mac_aging_interval: Time after which an inactive MAC is aged out (10 - 1000000 sec, default = 300, 0 = disable).
        :param pulumi.Input[str] mac_event_logging: Enable/disable MAC address event logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mac_retention_period: Time in hours after which an inactive MAC is removed from client DB.
        :param pulumi.Input[int] mac_violation_timer: Set timeout for Learning Limit Violations (0 = disabled).
        :param pulumi.Input[str] quarantine_mode: Quarantine mode. Valid values: `by-vlan`, `by-redirect`.
        :param pulumi.Input[str] sn_dns_resolution: Enable/disable DNS resolution of the FortiSwitch unit's IP address by use of its serial number. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_user_device: Control which sources update the device user list. Valid values: `mac-cache`, `lldp`, `dhcp-snooping`, `l2-db`, `l3-db`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vlan_all_mode: VLAN configuration mode, user-defined-vlans or all-possible-vlans. Valid values: `all`, `defined`.
        :param pulumi.Input[str] vlan_identity: Identity of the VLAN. Commonly used for RADIUS Tunnel-Private-Group-Id. Valid values: `description`, `name`.
        :param pulumi.Input[str] vlan_optimization: FortiLink VLAN optimization. Valid values: `enable`, `disable`.
        """
        if allow_multiple_interfaces is not None:
            pulumi.set(__self__, "allow_multiple_interfaces", allow_multiple_interfaces)
        if bounce_quarantined_link is not None:
            pulumi.set(__self__, "bounce_quarantined_link", bounce_quarantined_link)
        if custom_commands is not None:
            pulumi.set(__self__, "custom_commands", custom_commands)
        if default_virtual_switch_vlan is not None:
            pulumi.set(__self__, "default_virtual_switch_vlan", default_virtual_switch_vlan)
        if dhcp_option82_circuit_id is not None:
            pulumi.set(__self__, "dhcp_option82_circuit_id", dhcp_option82_circuit_id)
        if dhcp_option82_format is not None:
            pulumi.set(__self__, "dhcp_option82_format", dhcp_option82_format)
        if dhcp_option82_remote_id is not None:
            pulumi.set(__self__, "dhcp_option82_remote_id", dhcp_option82_remote_id)
        if dhcp_server_access_list is not None:
            pulumi.set(__self__, "dhcp_server_access_list", dhcp_server_access_list)
        if dhcp_snoop_client_db_exp is not None:
            pulumi.set(__self__, "dhcp_snoop_client_db_exp", dhcp_snoop_client_db_exp)
        if dhcp_snoop_client_req is not None:
            pulumi.set(__self__, "dhcp_snoop_client_req", dhcp_snoop_client_req)
        if dhcp_snoop_db_per_port_learn_limit is not None:
            pulumi.set(__self__, "dhcp_snoop_db_per_port_learn_limit", dhcp_snoop_db_per_port_learn_limit)
        if disable_discoveries is not None:
            pulumi.set(__self__, "disable_discoveries", disable_discoveries)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fips_enforce is not None:
            pulumi.set(__self__, "fips_enforce", fips_enforce)
        if firmware_provision_on_authorization is not None:
            pulumi.set(__self__, "firmware_provision_on_authorization", firmware_provision_on_authorization)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if https_image_push is not None:
            pulumi.set(__self__, "https_image_push", https_image_push)
        if log_mac_limit_violations is not None:
            pulumi.set(__self__, "log_mac_limit_violations", log_mac_limit_violations)
        if mac_aging_interval is not None:
            pulumi.set(__self__, "mac_aging_interval", mac_aging_interval)
        if mac_event_logging is not None:
            pulumi.set(__self__, "mac_event_logging", mac_event_logging)
        if mac_retention_period is not None:
            pulumi.set(__self__, "mac_retention_period", mac_retention_period)
        if mac_violation_timer is not None:
            pulumi.set(__self__, "mac_violation_timer", mac_violation_timer)
        if quarantine_mode is not None:
            pulumi.set(__self__, "quarantine_mode", quarantine_mode)
        if sn_dns_resolution is not None:
            pulumi.set(__self__, "sn_dns_resolution", sn_dns_resolution)
        if update_user_device is not None:
            pulumi.set(__self__, "update_user_device", update_user_device)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vlan_all_mode is not None:
            pulumi.set(__self__, "vlan_all_mode", vlan_all_mode)
        if vlan_identity is not None:
            pulumi.set(__self__, "vlan_identity", vlan_identity)
        if vlan_optimization is not None:
            pulumi.set(__self__, "vlan_optimization", vlan_optimization)

    @property
    @pulumi.getter(name="allowMultipleInterfaces")
    def allow_multiple_interfaces(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable multiple FortiLink interfaces for redundant connections between a managed FortiSwitch and FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_multiple_interfaces")

    @allow_multiple_interfaces.setter
    def allow_multiple_interfaces(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_multiple_interfaces", value)

    @property
    @pulumi.getter(name="bounceQuarantinedLink")
    def bounce_quarantined_link(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable bouncing (administratively bring the link down, up) of a switch port where a quarantined device was seen last. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "bounce_quarantined_link")

    @bounce_quarantined_link.setter
    def bounce_quarantined_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bounce_quarantined_link", value)

    @property
    @pulumi.getter(name="customCommands")
    def custom_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GlobalCustomCommandArgs']]]]:
        """
        List of custom commands to be pushed to all FortiSwitches in the VDOM. The structure of `custom_command` block is documented below.
        """
        return pulumi.get(self, "custom_commands")

    @custom_commands.setter
    def custom_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalCustomCommandArgs']]]]):
        pulumi.set(self, "custom_commands", value)

    @property
    @pulumi.getter(name="defaultVirtualSwitchVlan")
    def default_virtual_switch_vlan(self) -> Optional[pulumi.Input[str]]:
        """
        Default VLAN for ports when added to the virtual-switch.
        """
        return pulumi.get(self, "default_virtual_switch_vlan")

    @default_virtual_switch_vlan.setter
    def default_virtual_switch_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_virtual_switch_vlan", value)

    @property
    @pulumi.getter(name="dhcpOption82CircuitId")
    def dhcp_option82_circuit_id(self) -> Optional[pulumi.Input[str]]:
        """
        List the parameters to be included to inform about client identification. Valid values: `intfname`, `vlan`, `hostname`, `mode`, `description`.
        """
        return pulumi.get(self, "dhcp_option82_circuit_id")

    @dhcp_option82_circuit_id.setter
    def dhcp_option82_circuit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_circuit_id", value)

    @property
    @pulumi.getter(name="dhcpOption82Format")
    def dhcp_option82_format(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP option-82 format string. Valid values: `ascii`, `legacy`.
        """
        return pulumi.get(self, "dhcp_option82_format")

    @dhcp_option82_format.setter
    def dhcp_option82_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_format", value)

    @property
    @pulumi.getter(name="dhcpOption82RemoteId")
    def dhcp_option82_remote_id(self) -> Optional[pulumi.Input[str]]:
        """
        List the parameters to be included to inform about client identification. Valid values: `mac`, `hostname`, `ip`.
        """
        return pulumi.get(self, "dhcp_option82_remote_id")

    @dhcp_option82_remote_id.setter
    def dhcp_option82_remote_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_remote_id", value)

    @property
    @pulumi.getter(name="dhcpServerAccessList")
    def dhcp_server_access_list(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DHCP snooping server access list. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_server_access_list")

    @dhcp_server_access_list.setter
    def dhcp_server_access_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_server_access_list", value)

    @property
    @pulumi.getter(name="dhcpSnoopClientDbExp")
    def dhcp_snoop_client_db_exp(self) -> Optional[pulumi.Input[int]]:
        """
        Expiry time for DHCP snooping server database entries (300 - 259200 sec, default = 86400 sec).
        """
        return pulumi.get(self, "dhcp_snoop_client_db_exp")

    @dhcp_snoop_client_db_exp.setter
    def dhcp_snoop_client_db_exp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp_snoop_client_db_exp", value)

    @property
    @pulumi.getter(name="dhcpSnoopClientReq")
    def dhcp_snoop_client_req(self) -> Optional[pulumi.Input[str]]:
        """
        Client DHCP packet broadcast mode. Valid values: `drop-untrusted`, `forward-untrusted`.
        """
        return pulumi.get(self, "dhcp_snoop_client_req")

    @dhcp_snoop_client_req.setter
    def dhcp_snoop_client_req(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_snoop_client_req", value)

    @property
    @pulumi.getter(name="dhcpSnoopDbPerPortLearnLimit")
    def dhcp_snoop_db_per_port_learn_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Per Interface dhcp-server entries learn limit (0 - 1024, default = 64).
        """
        return pulumi.get(self, "dhcp_snoop_db_per_port_learn_limit")

    @dhcp_snoop_db_per_port_learn_limit.setter
    def dhcp_snoop_db_per_port_learn_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp_snoop_db_per_port_learn_limit", value)

    @property
    @pulumi.getter(name="disableDiscoveries")
    def disable_discoveries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GlobalDisableDiscoveryArgs']]]]:
        """
        Prevent this FortiSwitch from discovering. The structure of `disable_discovery` block is documented below.
        """
        return pulumi.get(self, "disable_discoveries")

    @disable_discoveries.setter
    def disable_discoveries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalDisableDiscoveryArgs']]]]):
        pulumi.set(self, "disable_discoveries", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fipsEnforce")
    def fips_enforce(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable enforcement of FIPS on managed FortiSwitch devices. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "fips_enforce")

    @fips_enforce.setter
    def fips_enforce(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fips_enforce", value)

    @property
    @pulumi.getter(name="firmwareProvisionOnAuthorization")
    def firmware_provision_on_authorization(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "firmware_provision_on_authorization")

    @firmware_provision_on_authorization.setter
    def firmware_provision_on_authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision_on_authorization", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="httpsImagePush")
    def https_image_push(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable image push to FortiSwitch using HTTPS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "https_image_push")

    @https_image_push.setter
    def https_image_push(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_image_push", value)

    @property
    @pulumi.getter(name="logMacLimitViolations")
    def log_mac_limit_violations(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logs for Learning Limit Violations. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_mac_limit_violations")

    @log_mac_limit_violations.setter
    def log_mac_limit_violations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_mac_limit_violations", value)

    @property
    @pulumi.getter(name="macAgingInterval")
    def mac_aging_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time after which an inactive MAC is aged out (10 - 1000000 sec, default = 300, 0 = disable).
        """
        return pulumi.get(self, "mac_aging_interval")

    @mac_aging_interval.setter
    def mac_aging_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_aging_interval", value)

    @property
    @pulumi.getter(name="macEventLogging")
    def mac_event_logging(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MAC address event logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mac_event_logging")

    @mac_event_logging.setter
    def mac_event_logging(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_event_logging", value)

    @property
    @pulumi.getter(name="macRetentionPeriod")
    def mac_retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        Time in hours after which an inactive MAC is removed from client DB.
        """
        return pulumi.get(self, "mac_retention_period")

    @mac_retention_period.setter
    def mac_retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_retention_period", value)

    @property
    @pulumi.getter(name="macViolationTimer")
    def mac_violation_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Set timeout for Learning Limit Violations (0 = disabled).
        """
        return pulumi.get(self, "mac_violation_timer")

    @mac_violation_timer.setter
    def mac_violation_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_violation_timer", value)

    @property
    @pulumi.getter(name="quarantineMode")
    def quarantine_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine mode. Valid values: `by-vlan`, `by-redirect`.
        """
        return pulumi.get(self, "quarantine_mode")

    @quarantine_mode.setter
    def quarantine_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_mode", value)

    @property
    @pulumi.getter(name="snDnsResolution")
    def sn_dns_resolution(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DNS resolution of the FortiSwitch unit's IP address by use of its serial number. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sn_dns_resolution")

    @sn_dns_resolution.setter
    def sn_dns_resolution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sn_dns_resolution", value)

    @property
    @pulumi.getter(name="updateUserDevice")
    def update_user_device(self) -> Optional[pulumi.Input[str]]:
        """
        Control which sources update the device user list. Valid values: `mac-cache`, `lldp`, `dhcp-snooping`, `l2-db`, `l3-db`.
        """
        return pulumi.get(self, "update_user_device")

    @update_user_device.setter
    def update_user_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_user_device", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vlanAllMode")
    def vlan_all_mode(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN configuration mode, user-defined-vlans or all-possible-vlans. Valid values: `all`, `defined`.
        """
        return pulumi.get(self, "vlan_all_mode")

    @vlan_all_mode.setter
    def vlan_all_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_all_mode", value)

    @property
    @pulumi.getter(name="vlanIdentity")
    def vlan_identity(self) -> Optional[pulumi.Input[str]]:
        """
        Identity of the VLAN. Commonly used for RADIUS Tunnel-Private-Group-Id. Valid values: `description`, `name`.
        """
        return pulumi.get(self, "vlan_identity")

    @vlan_identity.setter
    def vlan_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_identity", value)

    @property
    @pulumi.getter(name="vlanOptimization")
    def vlan_optimization(self) -> Optional[pulumi.Input[str]]:
        """
        FortiLink VLAN optimization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vlan_optimization")

    @vlan_optimization.setter
    def vlan_optimization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_optimization", value)


class Global(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_multiple_interfaces: Optional[pulumi.Input[str]] = None,
                 bounce_quarantined_link: Optional[pulumi.Input[str]] = None,
                 custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalCustomCommandArgs']]]]] = None,
                 default_virtual_switch_vlan: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_circuit_id: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_format: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_remote_id: Optional[pulumi.Input[str]] = None,
                 dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_client_db_exp: Optional[pulumi.Input[int]] = None,
                 dhcp_snoop_client_req: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_db_per_port_learn_limit: Optional[pulumi.Input[int]] = None,
                 disable_discoveries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalDisableDiscoveryArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fips_enforce: Optional[pulumi.Input[str]] = None,
                 firmware_provision_on_authorization: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 https_image_push: Optional[pulumi.Input[str]] = None,
                 log_mac_limit_violations: Optional[pulumi.Input[str]] = None,
                 mac_aging_interval: Optional[pulumi.Input[int]] = None,
                 mac_event_logging: Optional[pulumi.Input[str]] = None,
                 mac_retention_period: Optional[pulumi.Input[int]] = None,
                 mac_violation_timer: Optional[pulumi.Input[int]] = None,
                 quarantine_mode: Optional[pulumi.Input[str]] = None,
                 sn_dns_resolution: Optional[pulumi.Input[str]] = None,
                 update_user_device: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_all_mode: Optional[pulumi.Input[str]] = None,
                 vlan_identity: Optional[pulumi.Input[str]] = None,
                 vlan_optimization: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure FortiSwitch global settings.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.switchcontroller.Global("trname",
            allow_multiple_interfaces="disable",
            https_image_push="disable",
            log_mac_limit_violations="disable",
            mac_aging_interval=332,
            mac_retention_period=24,
            mac_violation_timer=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        SwitchController Global can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/global:Global labelname SwitchControllerGlobal
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/global:Global labelname SwitchControllerGlobal
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allow_multiple_interfaces: Enable/disable multiple FortiLink interfaces for redundant connections between a managed FortiSwitch and FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bounce_quarantined_link: Enable/disable bouncing (administratively bring the link down, up) of a switch port where a quarantined device was seen last. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalCustomCommandArgs']]]] custom_commands: List of custom commands to be pushed to all FortiSwitches in the VDOM. The structure of `custom_command` block is documented below.
        :param pulumi.Input[str] default_virtual_switch_vlan: Default VLAN for ports when added to the virtual-switch.
        :param pulumi.Input[str] dhcp_option82_circuit_id: List the parameters to be included to inform about client identification. Valid values: `intfname`, `vlan`, `hostname`, `mode`, `description`.
        :param pulumi.Input[str] dhcp_option82_format: DHCP option-82 format string. Valid values: `ascii`, `legacy`.
        :param pulumi.Input[str] dhcp_option82_remote_id: List the parameters to be included to inform about client identification. Valid values: `mac`, `hostname`, `ip`.
        :param pulumi.Input[str] dhcp_server_access_list: Enable/disable DHCP snooping server access list. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] dhcp_snoop_client_db_exp: Expiry time for DHCP snooping server database entries (300 - 259200 sec, default = 86400 sec).
        :param pulumi.Input[str] dhcp_snoop_client_req: Client DHCP packet broadcast mode. Valid values: `drop-untrusted`, `forward-untrusted`.
        :param pulumi.Input[int] dhcp_snoop_db_per_port_learn_limit: Per Interface dhcp-server entries learn limit (0 - 1024, default = 64).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalDisableDiscoveryArgs']]]] disable_discoveries: Prevent this FortiSwitch from discovering. The structure of `disable_discovery` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] fips_enforce: Enable/disable enforcement of FIPS on managed FortiSwitch devices. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] firmware_provision_on_authorization: Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] https_image_push: Enable/disable image push to FortiSwitch using HTTPS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_mac_limit_violations: Enable/disable logs for Learning Limit Violations. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mac_aging_interval: Time after which an inactive MAC is aged out (10 - 1000000 sec, default = 300, 0 = disable).
        :param pulumi.Input[str] mac_event_logging: Enable/disable MAC address event logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mac_retention_period: Time in hours after which an inactive MAC is removed from client DB.
        :param pulumi.Input[int] mac_violation_timer: Set timeout for Learning Limit Violations (0 = disabled).
        :param pulumi.Input[str] quarantine_mode: Quarantine mode. Valid values: `by-vlan`, `by-redirect`.
        :param pulumi.Input[str] sn_dns_resolution: Enable/disable DNS resolution of the FortiSwitch unit's IP address by use of its serial number. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_user_device: Control which sources update the device user list. Valid values: `mac-cache`, `lldp`, `dhcp-snooping`, `l2-db`, `l3-db`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vlan_all_mode: VLAN configuration mode, user-defined-vlans or all-possible-vlans. Valid values: `all`, `defined`.
        :param pulumi.Input[str] vlan_identity: Identity of the VLAN. Commonly used for RADIUS Tunnel-Private-Group-Id. Valid values: `description`, `name`.
        :param pulumi.Input[str] vlan_optimization: FortiLink VLAN optimization. Valid values: `enable`, `disable`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[GlobalArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure FortiSwitch global settings.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.switchcontroller.Global("trname",
            allow_multiple_interfaces="disable",
            https_image_push="disable",
            log_mac_limit_violations="disable",
            mac_aging_interval=332,
            mac_retention_period=24,
            mac_violation_timer=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        SwitchController Global can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/global:Global labelname SwitchControllerGlobal
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/global:Global labelname SwitchControllerGlobal
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param GlobalArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GlobalArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_multiple_interfaces: Optional[pulumi.Input[str]] = None,
                 bounce_quarantined_link: Optional[pulumi.Input[str]] = None,
                 custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalCustomCommandArgs']]]]] = None,
                 default_virtual_switch_vlan: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_circuit_id: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_format: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_remote_id: Optional[pulumi.Input[str]] = None,
                 dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_client_db_exp: Optional[pulumi.Input[int]] = None,
                 dhcp_snoop_client_req: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_db_per_port_learn_limit: Optional[pulumi.Input[int]] = None,
                 disable_discoveries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalDisableDiscoveryArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fips_enforce: Optional[pulumi.Input[str]] = None,
                 firmware_provision_on_authorization: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 https_image_push: Optional[pulumi.Input[str]] = None,
                 log_mac_limit_violations: Optional[pulumi.Input[str]] = None,
                 mac_aging_interval: Optional[pulumi.Input[int]] = None,
                 mac_event_logging: Optional[pulumi.Input[str]] = None,
                 mac_retention_period: Optional[pulumi.Input[int]] = None,
                 mac_violation_timer: Optional[pulumi.Input[int]] = None,
                 quarantine_mode: Optional[pulumi.Input[str]] = None,
                 sn_dns_resolution: Optional[pulumi.Input[str]] = None,
                 update_user_device: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_all_mode: Optional[pulumi.Input[str]] = None,
                 vlan_identity: Optional[pulumi.Input[str]] = None,
                 vlan_optimization: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GlobalArgs.__new__(GlobalArgs)

            __props__.__dict__["allow_multiple_interfaces"] = allow_multiple_interfaces
            __props__.__dict__["bounce_quarantined_link"] = bounce_quarantined_link
            __props__.__dict__["custom_commands"] = custom_commands
            __props__.__dict__["default_virtual_switch_vlan"] = default_virtual_switch_vlan
            __props__.__dict__["dhcp_option82_circuit_id"] = dhcp_option82_circuit_id
            __props__.__dict__["dhcp_option82_format"] = dhcp_option82_format
            __props__.__dict__["dhcp_option82_remote_id"] = dhcp_option82_remote_id
            __props__.__dict__["dhcp_server_access_list"] = dhcp_server_access_list
            __props__.__dict__["dhcp_snoop_client_db_exp"] = dhcp_snoop_client_db_exp
            __props__.__dict__["dhcp_snoop_client_req"] = dhcp_snoop_client_req
            __props__.__dict__["dhcp_snoop_db_per_port_learn_limit"] = dhcp_snoop_db_per_port_learn_limit
            __props__.__dict__["disable_discoveries"] = disable_discoveries
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fips_enforce"] = fips_enforce
            __props__.__dict__["firmware_provision_on_authorization"] = firmware_provision_on_authorization
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["https_image_push"] = https_image_push
            __props__.__dict__["log_mac_limit_violations"] = log_mac_limit_violations
            __props__.__dict__["mac_aging_interval"] = mac_aging_interval
            __props__.__dict__["mac_event_logging"] = mac_event_logging
            __props__.__dict__["mac_retention_period"] = mac_retention_period
            __props__.__dict__["mac_violation_timer"] = mac_violation_timer
            __props__.__dict__["quarantine_mode"] = quarantine_mode
            __props__.__dict__["sn_dns_resolution"] = sn_dns_resolution
            __props__.__dict__["update_user_device"] = update_user_device
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vlan_all_mode"] = vlan_all_mode
            __props__.__dict__["vlan_identity"] = vlan_identity
            __props__.__dict__["vlan_optimization"] = vlan_optimization
        super(Global, __self__).__init__(
            'fortios:switchcontroller/global:Global',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_multiple_interfaces: Optional[pulumi.Input[str]] = None,
            bounce_quarantined_link: Optional[pulumi.Input[str]] = None,
            custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalCustomCommandArgs']]]]] = None,
            default_virtual_switch_vlan: Optional[pulumi.Input[str]] = None,
            dhcp_option82_circuit_id: Optional[pulumi.Input[str]] = None,
            dhcp_option82_format: Optional[pulumi.Input[str]] = None,
            dhcp_option82_remote_id: Optional[pulumi.Input[str]] = None,
            dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
            dhcp_snoop_client_db_exp: Optional[pulumi.Input[int]] = None,
            dhcp_snoop_client_req: Optional[pulumi.Input[str]] = None,
            dhcp_snoop_db_per_port_learn_limit: Optional[pulumi.Input[int]] = None,
            disable_discoveries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalDisableDiscoveryArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fips_enforce: Optional[pulumi.Input[str]] = None,
            firmware_provision_on_authorization: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            https_image_push: Optional[pulumi.Input[str]] = None,
            log_mac_limit_violations: Optional[pulumi.Input[str]] = None,
            mac_aging_interval: Optional[pulumi.Input[int]] = None,
            mac_event_logging: Optional[pulumi.Input[str]] = None,
            mac_retention_period: Optional[pulumi.Input[int]] = None,
            mac_violation_timer: Optional[pulumi.Input[int]] = None,
            quarantine_mode: Optional[pulumi.Input[str]] = None,
            sn_dns_resolution: Optional[pulumi.Input[str]] = None,
            update_user_device: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vlan_all_mode: Optional[pulumi.Input[str]] = None,
            vlan_identity: Optional[pulumi.Input[str]] = None,
            vlan_optimization: Optional[pulumi.Input[str]] = None) -> 'Global':
        """
        Get an existing Global resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allow_multiple_interfaces: Enable/disable multiple FortiLink interfaces for redundant connections between a managed FortiSwitch and FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bounce_quarantined_link: Enable/disable bouncing (administratively bring the link down, up) of a switch port where a quarantined device was seen last. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalCustomCommandArgs']]]] custom_commands: List of custom commands to be pushed to all FortiSwitches in the VDOM. The structure of `custom_command` block is documented below.
        :param pulumi.Input[str] default_virtual_switch_vlan: Default VLAN for ports when added to the virtual-switch.
        :param pulumi.Input[str] dhcp_option82_circuit_id: List the parameters to be included to inform about client identification. Valid values: `intfname`, `vlan`, `hostname`, `mode`, `description`.
        :param pulumi.Input[str] dhcp_option82_format: DHCP option-82 format string. Valid values: `ascii`, `legacy`.
        :param pulumi.Input[str] dhcp_option82_remote_id: List the parameters to be included to inform about client identification. Valid values: `mac`, `hostname`, `ip`.
        :param pulumi.Input[str] dhcp_server_access_list: Enable/disable DHCP snooping server access list. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] dhcp_snoop_client_db_exp: Expiry time for DHCP snooping server database entries (300 - 259200 sec, default = 86400 sec).
        :param pulumi.Input[str] dhcp_snoop_client_req: Client DHCP packet broadcast mode. Valid values: `drop-untrusted`, `forward-untrusted`.
        :param pulumi.Input[int] dhcp_snoop_db_per_port_learn_limit: Per Interface dhcp-server entries learn limit (0 - 1024, default = 64).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalDisableDiscoveryArgs']]]] disable_discoveries: Prevent this FortiSwitch from discovering. The structure of `disable_discovery` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] fips_enforce: Enable/disable enforcement of FIPS on managed FortiSwitch devices. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] firmware_provision_on_authorization: Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] https_image_push: Enable/disable image push to FortiSwitch using HTTPS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_mac_limit_violations: Enable/disable logs for Learning Limit Violations. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mac_aging_interval: Time after which an inactive MAC is aged out (10 - 1000000 sec, default = 300, 0 = disable).
        :param pulumi.Input[str] mac_event_logging: Enable/disable MAC address event logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mac_retention_period: Time in hours after which an inactive MAC is removed from client DB.
        :param pulumi.Input[int] mac_violation_timer: Set timeout for Learning Limit Violations (0 = disabled).
        :param pulumi.Input[str] quarantine_mode: Quarantine mode. Valid values: `by-vlan`, `by-redirect`.
        :param pulumi.Input[str] sn_dns_resolution: Enable/disable DNS resolution of the FortiSwitch unit's IP address by use of its serial number. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_user_device: Control which sources update the device user list. Valid values: `mac-cache`, `lldp`, `dhcp-snooping`, `l2-db`, `l3-db`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vlan_all_mode: VLAN configuration mode, user-defined-vlans or all-possible-vlans. Valid values: `all`, `defined`.
        :param pulumi.Input[str] vlan_identity: Identity of the VLAN. Commonly used for RADIUS Tunnel-Private-Group-Id. Valid values: `description`, `name`.
        :param pulumi.Input[str] vlan_optimization: FortiLink VLAN optimization. Valid values: `enable`, `disable`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GlobalState.__new__(_GlobalState)

        __props__.__dict__["allow_multiple_interfaces"] = allow_multiple_interfaces
        __props__.__dict__["bounce_quarantined_link"] = bounce_quarantined_link
        __props__.__dict__["custom_commands"] = custom_commands
        __props__.__dict__["default_virtual_switch_vlan"] = default_virtual_switch_vlan
        __props__.__dict__["dhcp_option82_circuit_id"] = dhcp_option82_circuit_id
        __props__.__dict__["dhcp_option82_format"] = dhcp_option82_format
        __props__.__dict__["dhcp_option82_remote_id"] = dhcp_option82_remote_id
        __props__.__dict__["dhcp_server_access_list"] = dhcp_server_access_list
        __props__.__dict__["dhcp_snoop_client_db_exp"] = dhcp_snoop_client_db_exp
        __props__.__dict__["dhcp_snoop_client_req"] = dhcp_snoop_client_req
        __props__.__dict__["dhcp_snoop_db_per_port_learn_limit"] = dhcp_snoop_db_per_port_learn_limit
        __props__.__dict__["disable_discoveries"] = disable_discoveries
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fips_enforce"] = fips_enforce
        __props__.__dict__["firmware_provision_on_authorization"] = firmware_provision_on_authorization
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["https_image_push"] = https_image_push
        __props__.__dict__["log_mac_limit_violations"] = log_mac_limit_violations
        __props__.__dict__["mac_aging_interval"] = mac_aging_interval
        __props__.__dict__["mac_event_logging"] = mac_event_logging
        __props__.__dict__["mac_retention_period"] = mac_retention_period
        __props__.__dict__["mac_violation_timer"] = mac_violation_timer
        __props__.__dict__["quarantine_mode"] = quarantine_mode
        __props__.__dict__["sn_dns_resolution"] = sn_dns_resolution
        __props__.__dict__["update_user_device"] = update_user_device
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vlan_all_mode"] = vlan_all_mode
        __props__.__dict__["vlan_identity"] = vlan_identity
        __props__.__dict__["vlan_optimization"] = vlan_optimization
        return Global(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowMultipleInterfaces")
    def allow_multiple_interfaces(self) -> pulumi.Output[str]:
        """
        Enable/disable multiple FortiLink interfaces for redundant connections between a managed FortiSwitch and FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_multiple_interfaces")

    @property
    @pulumi.getter(name="bounceQuarantinedLink")
    def bounce_quarantined_link(self) -> pulumi.Output[str]:
        """
        Enable/disable bouncing (administratively bring the link down, up) of a switch port where a quarantined device was seen last. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "bounce_quarantined_link")

    @property
    @pulumi.getter(name="customCommands")
    def custom_commands(self) -> pulumi.Output[Optional[Sequence['outputs.GlobalCustomCommand']]]:
        """
        List of custom commands to be pushed to all FortiSwitches in the VDOM. The structure of `custom_command` block is documented below.
        """
        return pulumi.get(self, "custom_commands")

    @property
    @pulumi.getter(name="defaultVirtualSwitchVlan")
    def default_virtual_switch_vlan(self) -> pulumi.Output[str]:
        """
        Default VLAN for ports when added to the virtual-switch.
        """
        return pulumi.get(self, "default_virtual_switch_vlan")

    @property
    @pulumi.getter(name="dhcpOption82CircuitId")
    def dhcp_option82_circuit_id(self) -> pulumi.Output[str]:
        """
        List the parameters to be included to inform about client identification. Valid values: `intfname`, `vlan`, `hostname`, `mode`, `description`.
        """
        return pulumi.get(self, "dhcp_option82_circuit_id")

    @property
    @pulumi.getter(name="dhcpOption82Format")
    def dhcp_option82_format(self) -> pulumi.Output[str]:
        """
        DHCP option-82 format string. Valid values: `ascii`, `legacy`.
        """
        return pulumi.get(self, "dhcp_option82_format")

    @property
    @pulumi.getter(name="dhcpOption82RemoteId")
    def dhcp_option82_remote_id(self) -> pulumi.Output[str]:
        """
        List the parameters to be included to inform about client identification. Valid values: `mac`, `hostname`, `ip`.
        """
        return pulumi.get(self, "dhcp_option82_remote_id")

    @property
    @pulumi.getter(name="dhcpServerAccessList")
    def dhcp_server_access_list(self) -> pulumi.Output[str]:
        """
        Enable/disable DHCP snooping server access list. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_server_access_list")

    @property
    @pulumi.getter(name="dhcpSnoopClientDbExp")
    def dhcp_snoop_client_db_exp(self) -> pulumi.Output[int]:
        """
        Expiry time for DHCP snooping server database entries (300 - 259200 sec, default = 86400 sec).
        """
        return pulumi.get(self, "dhcp_snoop_client_db_exp")

    @property
    @pulumi.getter(name="dhcpSnoopClientReq")
    def dhcp_snoop_client_req(self) -> pulumi.Output[str]:
        """
        Client DHCP packet broadcast mode. Valid values: `drop-untrusted`, `forward-untrusted`.
        """
        return pulumi.get(self, "dhcp_snoop_client_req")

    @property
    @pulumi.getter(name="dhcpSnoopDbPerPortLearnLimit")
    def dhcp_snoop_db_per_port_learn_limit(self) -> pulumi.Output[int]:
        """
        Per Interface dhcp-server entries learn limit (0 - 1024, default = 64).
        """
        return pulumi.get(self, "dhcp_snoop_db_per_port_learn_limit")

    @property
    @pulumi.getter(name="disableDiscoveries")
    def disable_discoveries(self) -> pulumi.Output[Optional[Sequence['outputs.GlobalDisableDiscovery']]]:
        """
        Prevent this FortiSwitch from discovering. The structure of `disable_discovery` block is documented below.
        """
        return pulumi.get(self, "disable_discoveries")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="fipsEnforce")
    def fips_enforce(self) -> pulumi.Output[str]:
        """
        Enable/disable enforcement of FIPS on managed FortiSwitch devices. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "fips_enforce")

    @property
    @pulumi.getter(name="firmwareProvisionOnAuthorization")
    def firmware_provision_on_authorization(self) -> pulumi.Output[str]:
        """
        Enable/disable automatic provisioning of latest firmware on authorization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "firmware_provision_on_authorization")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="httpsImagePush")
    def https_image_push(self) -> pulumi.Output[str]:
        """
        Enable/disable image push to FortiSwitch using HTTPS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "https_image_push")

    @property
    @pulumi.getter(name="logMacLimitViolations")
    def log_mac_limit_violations(self) -> pulumi.Output[str]:
        """
        Enable/disable logs for Learning Limit Violations. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_mac_limit_violations")

    @property
    @pulumi.getter(name="macAgingInterval")
    def mac_aging_interval(self) -> pulumi.Output[int]:
        """
        Time after which an inactive MAC is aged out (10 - 1000000 sec, default = 300, 0 = disable).
        """
        return pulumi.get(self, "mac_aging_interval")

    @property
    @pulumi.getter(name="macEventLogging")
    def mac_event_logging(self) -> pulumi.Output[str]:
        """
        Enable/disable MAC address event logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mac_event_logging")

    @property
    @pulumi.getter(name="macRetentionPeriod")
    def mac_retention_period(self) -> pulumi.Output[int]:
        """
        Time in hours after which an inactive MAC is removed from client DB.
        """
        return pulumi.get(self, "mac_retention_period")

    @property
    @pulumi.getter(name="macViolationTimer")
    def mac_violation_timer(self) -> pulumi.Output[int]:
        """
        Set timeout for Learning Limit Violations (0 = disabled).
        """
        return pulumi.get(self, "mac_violation_timer")

    @property
    @pulumi.getter(name="quarantineMode")
    def quarantine_mode(self) -> pulumi.Output[str]:
        """
        Quarantine mode. Valid values: `by-vlan`, `by-redirect`.
        """
        return pulumi.get(self, "quarantine_mode")

    @property
    @pulumi.getter(name="snDnsResolution")
    def sn_dns_resolution(self) -> pulumi.Output[str]:
        """
        Enable/disable DNS resolution of the FortiSwitch unit's IP address by use of its serial number. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sn_dns_resolution")

    @property
    @pulumi.getter(name="updateUserDevice")
    def update_user_device(self) -> pulumi.Output[str]:
        """
        Control which sources update the device user list. Valid values: `mac-cache`, `lldp`, `dhcp-snooping`, `l2-db`, `l3-db`.
        """
        return pulumi.get(self, "update_user_device")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="vlanAllMode")
    def vlan_all_mode(self) -> pulumi.Output[str]:
        """
        VLAN configuration mode, user-defined-vlans or all-possible-vlans. Valid values: `all`, `defined`.
        """
        return pulumi.get(self, "vlan_all_mode")

    @property
    @pulumi.getter(name="vlanIdentity")
    def vlan_identity(self) -> pulumi.Output[str]:
        """
        Identity of the VLAN. Commonly used for RADIUS Tunnel-Private-Group-Id. Valid values: `description`, `name`.
        """
        return pulumi.get(self, "vlan_identity")

    @property
    @pulumi.getter(name="vlanOptimization")
    def vlan_optimization(self) -> pulumi.Output[str]:
        """
        FortiLink VLAN optimization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vlan_optimization")

