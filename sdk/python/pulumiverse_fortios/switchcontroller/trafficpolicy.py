# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TrafficpolicyArgs', 'Trafficpolicy']

@pulumi.input_type
class TrafficpolicyArgs:
    def __init__(__self__, *,
                 cos: Optional[pulumi.Input[int]] = None,
                 cos_queue: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 guaranteed_bandwidth: Optional[pulumi.Input[int]] = None,
                 guaranteed_burst: Optional[pulumi.Input[int]] = None,
                 maximum_burst: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policer_status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Trafficpolicy resource.
        :param pulumi.Input[int] cos: COS queue(0 - 7), or unset to disable.
        :param pulumi.Input[int] cos_queue: COS queue(0 - 7), or unset to disable.
        :param pulumi.Input[str] description: Description of the traffic policy.
        :param pulumi.Input[int] fosid: FSW Policer id
        :param pulumi.Input[int] guaranteed_bandwidth: Guaranteed bandwidth in kbps (max value = 524287000).
        :param pulumi.Input[int] guaranteed_burst: Guaranteed burst size in bytes (max value = 4294967295).
        :param pulumi.Input[int] maximum_burst: Maximum burst size in bytes (max value = 4294967295).
        :param pulumi.Input[str] name: Traffic policy name.
        :param pulumi.Input[str] policer_status: Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if cos is not None:
            pulumi.set(__self__, "cos", cos)
        if cos_queue is not None:
            pulumi.set(__self__, "cos_queue", cos_queue)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if guaranteed_bandwidth is not None:
            pulumi.set(__self__, "guaranteed_bandwidth", guaranteed_bandwidth)
        if guaranteed_burst is not None:
            pulumi.set(__self__, "guaranteed_burst", guaranteed_burst)
        if maximum_burst is not None:
            pulumi.set(__self__, "maximum_burst", maximum_burst)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policer_status is not None:
            pulumi.set(__self__, "policer_status", policer_status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def cos(self) -> Optional[pulumi.Input[int]]:
        """
        COS queue(0 - 7), or unset to disable.
        """
        return pulumi.get(self, "cos")

    @cos.setter
    def cos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cos", value)

    @property
    @pulumi.getter(name="cosQueue")
    def cos_queue(self) -> Optional[pulumi.Input[int]]:
        """
        COS queue(0 - 7), or unset to disable.
        """
        return pulumi.get(self, "cos_queue")

    @cos_queue.setter
    def cos_queue(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cos_queue", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the traffic policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        FSW Policer id
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="guaranteedBandwidth")
    def guaranteed_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Guaranteed bandwidth in kbps (max value = 524287000).
        """
        return pulumi.get(self, "guaranteed_bandwidth")

    @guaranteed_bandwidth.setter
    def guaranteed_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "guaranteed_bandwidth", value)

    @property
    @pulumi.getter(name="guaranteedBurst")
    def guaranteed_burst(self) -> Optional[pulumi.Input[int]]:
        """
        Guaranteed burst size in bytes (max value = 4294967295).
        """
        return pulumi.get(self, "guaranteed_burst")

    @guaranteed_burst.setter
    def guaranteed_burst(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "guaranteed_burst", value)

    @property
    @pulumi.getter(name="maximumBurst")
    def maximum_burst(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum burst size in bytes (max value = 4294967295).
        """
        return pulumi.get(self, "maximum_burst")

    @maximum_burst.setter
    def maximum_burst(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_burst", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policerStatus")
    def policer_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "policer_status")

    @policer_status.setter
    def policer_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policer_status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _TrafficpolicyState:
    def __init__(__self__, *,
                 cos: Optional[pulumi.Input[int]] = None,
                 cos_queue: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 guaranteed_bandwidth: Optional[pulumi.Input[int]] = None,
                 guaranteed_burst: Optional[pulumi.Input[int]] = None,
                 maximum_burst: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policer_status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Trafficpolicy resources.
        :param pulumi.Input[int] cos: COS queue(0 - 7), or unset to disable.
        :param pulumi.Input[int] cos_queue: COS queue(0 - 7), or unset to disable.
        :param pulumi.Input[str] description: Description of the traffic policy.
        :param pulumi.Input[int] fosid: FSW Policer id
        :param pulumi.Input[int] guaranteed_bandwidth: Guaranteed bandwidth in kbps (max value = 524287000).
        :param pulumi.Input[int] guaranteed_burst: Guaranteed burst size in bytes (max value = 4294967295).
        :param pulumi.Input[int] maximum_burst: Maximum burst size in bytes (max value = 4294967295).
        :param pulumi.Input[str] name: Traffic policy name.
        :param pulumi.Input[str] policer_status: Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if cos is not None:
            pulumi.set(__self__, "cos", cos)
        if cos_queue is not None:
            pulumi.set(__self__, "cos_queue", cos_queue)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if guaranteed_bandwidth is not None:
            pulumi.set(__self__, "guaranteed_bandwidth", guaranteed_bandwidth)
        if guaranteed_burst is not None:
            pulumi.set(__self__, "guaranteed_burst", guaranteed_burst)
        if maximum_burst is not None:
            pulumi.set(__self__, "maximum_burst", maximum_burst)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policer_status is not None:
            pulumi.set(__self__, "policer_status", policer_status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def cos(self) -> Optional[pulumi.Input[int]]:
        """
        COS queue(0 - 7), or unset to disable.
        """
        return pulumi.get(self, "cos")

    @cos.setter
    def cos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cos", value)

    @property
    @pulumi.getter(name="cosQueue")
    def cos_queue(self) -> Optional[pulumi.Input[int]]:
        """
        COS queue(0 - 7), or unset to disable.
        """
        return pulumi.get(self, "cos_queue")

    @cos_queue.setter
    def cos_queue(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cos_queue", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the traffic policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        FSW Policer id
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="guaranteedBandwidth")
    def guaranteed_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Guaranteed bandwidth in kbps (max value = 524287000).
        """
        return pulumi.get(self, "guaranteed_bandwidth")

    @guaranteed_bandwidth.setter
    def guaranteed_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "guaranteed_bandwidth", value)

    @property
    @pulumi.getter(name="guaranteedBurst")
    def guaranteed_burst(self) -> Optional[pulumi.Input[int]]:
        """
        Guaranteed burst size in bytes (max value = 4294967295).
        """
        return pulumi.get(self, "guaranteed_burst")

    @guaranteed_burst.setter
    def guaranteed_burst(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "guaranteed_burst", value)

    @property
    @pulumi.getter(name="maximumBurst")
    def maximum_burst(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum burst size in bytes (max value = 4294967295).
        """
        return pulumi.get(self, "maximum_burst")

    @maximum_burst.setter
    def maximum_burst(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_burst", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policerStatus")
    def policer_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "policer_status")

    @policer_status.setter
    def policer_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policer_status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Trafficpolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cos: Optional[pulumi.Input[int]] = None,
                 cos_queue: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 guaranteed_bandwidth: Optional[pulumi.Input[int]] = None,
                 guaranteed_burst: Optional[pulumi.Input[int]] = None,
                 maximum_burst: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policer_status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure FortiSwitch traffic policy.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.switchcontroller.Trafficpolicy("trname",
            guaranteed_bandwidth=0,
            guaranteed_burst=0,
            maximum_burst=0,
            policer_status="enable",
            type="ingress")
        ```

        ## Import

        SwitchController TrafficPolicy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/trafficpolicy:Trafficpolicy labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/trafficpolicy:Trafficpolicy labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] cos: COS queue(0 - 7), or unset to disable.
        :param pulumi.Input[int] cos_queue: COS queue(0 - 7), or unset to disable.
        :param pulumi.Input[str] description: Description of the traffic policy.
        :param pulumi.Input[int] fosid: FSW Policer id
        :param pulumi.Input[int] guaranteed_bandwidth: Guaranteed bandwidth in kbps (max value = 524287000).
        :param pulumi.Input[int] guaranteed_burst: Guaranteed burst size in bytes (max value = 4294967295).
        :param pulumi.Input[int] maximum_burst: Maximum burst size in bytes (max value = 4294967295).
        :param pulumi.Input[str] name: Traffic policy name.
        :param pulumi.Input[str] policer_status: Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[TrafficpolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure FortiSwitch traffic policy.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.switchcontroller.Trafficpolicy("trname",
            guaranteed_bandwidth=0,
            guaranteed_burst=0,
            maximum_burst=0,
            policer_status="enable",
            type="ingress")
        ```

        ## Import

        SwitchController TrafficPolicy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/trafficpolicy:Trafficpolicy labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/trafficpolicy:Trafficpolicy labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param TrafficpolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TrafficpolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cos: Optional[pulumi.Input[int]] = None,
                 cos_queue: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 guaranteed_bandwidth: Optional[pulumi.Input[int]] = None,
                 guaranteed_burst: Optional[pulumi.Input[int]] = None,
                 maximum_burst: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policer_status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TrafficpolicyArgs.__new__(TrafficpolicyArgs)

            __props__.__dict__["cos"] = cos
            __props__.__dict__["cos_queue"] = cos_queue
            __props__.__dict__["description"] = description
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["guaranteed_bandwidth"] = guaranteed_bandwidth
            __props__.__dict__["guaranteed_burst"] = guaranteed_burst
            __props__.__dict__["maximum_burst"] = maximum_burst
            __props__.__dict__["name"] = name
            __props__.__dict__["policer_status"] = policer_status
            __props__.__dict__["type"] = type
            __props__.__dict__["vdomparam"] = vdomparam
        super(Trafficpolicy, __self__).__init__(
            'fortios:switchcontroller/trafficpolicy:Trafficpolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cos: Optional[pulumi.Input[int]] = None,
            cos_queue: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            guaranteed_bandwidth: Optional[pulumi.Input[int]] = None,
            guaranteed_burst: Optional[pulumi.Input[int]] = None,
            maximum_burst: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            policer_status: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Trafficpolicy':
        """
        Get an existing Trafficpolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] cos: COS queue(0 - 7), or unset to disable.
        :param pulumi.Input[int] cos_queue: COS queue(0 - 7), or unset to disable.
        :param pulumi.Input[str] description: Description of the traffic policy.
        :param pulumi.Input[int] fosid: FSW Policer id
        :param pulumi.Input[int] guaranteed_bandwidth: Guaranteed bandwidth in kbps (max value = 524287000).
        :param pulumi.Input[int] guaranteed_burst: Guaranteed burst size in bytes (max value = 4294967295).
        :param pulumi.Input[int] maximum_burst: Maximum burst size in bytes (max value = 4294967295).
        :param pulumi.Input[str] name: Traffic policy name.
        :param pulumi.Input[str] policer_status: Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TrafficpolicyState.__new__(_TrafficpolicyState)

        __props__.__dict__["cos"] = cos
        __props__.__dict__["cos_queue"] = cos_queue
        __props__.__dict__["description"] = description
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["guaranteed_bandwidth"] = guaranteed_bandwidth
        __props__.__dict__["guaranteed_burst"] = guaranteed_burst
        __props__.__dict__["maximum_burst"] = maximum_burst
        __props__.__dict__["name"] = name
        __props__.__dict__["policer_status"] = policer_status
        __props__.__dict__["type"] = type
        __props__.__dict__["vdomparam"] = vdomparam
        return Trafficpolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cos(self) -> pulumi.Output[int]:
        """
        COS queue(0 - 7), or unset to disable.
        """
        return pulumi.get(self, "cos")

    @property
    @pulumi.getter(name="cosQueue")
    def cos_queue(self) -> pulumi.Output[int]:
        """
        COS queue(0 - 7), or unset to disable.
        """
        return pulumi.get(self, "cos_queue")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description of the traffic policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        """
        FSW Policer id
        """
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="guaranteedBandwidth")
    def guaranteed_bandwidth(self) -> pulumi.Output[int]:
        """
        Guaranteed bandwidth in kbps (max value = 524287000).
        """
        return pulumi.get(self, "guaranteed_bandwidth")

    @property
    @pulumi.getter(name="guaranteedBurst")
    def guaranteed_burst(self) -> pulumi.Output[int]:
        """
        Guaranteed burst size in bytes (max value = 4294967295).
        """
        return pulumi.get(self, "guaranteed_burst")

    @property
    @pulumi.getter(name="maximumBurst")
    def maximum_burst(self) -> pulumi.Output[int]:
        """
        Maximum burst size in bytes (max value = 4294967295).
        """
        return pulumi.get(self, "maximum_burst")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Traffic policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policerStatus")
    def policer_status(self) -> pulumi.Output[str]:
        """
        Enable/disable policer config on the traffic policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "policer_status")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Configure type of policy(ingress/egress). Valid values: `ingress`, `egress`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

