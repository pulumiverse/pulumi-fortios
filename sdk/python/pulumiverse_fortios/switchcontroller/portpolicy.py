# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PortpolicyArgs', 'Portpolicy']

@pulumi.input_type
class PortpolicyArgs:
    def __init__(__self__, *,
                 bounce_port_link: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fortilink: Optional[pulumi.Input[str]] = None,
                 lldp_profile: Optional[pulumi.Input[str]] = None,
                 n8021x: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 qos_policy: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_policy: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Portpolicy resource.
        :param pulumi.Input[str] bounce_port_link: Enable/disable bouncing (administratively bring the link down, up) of a switch port where this port policy is applied. Helps to clear and reassign VLAN from lldp-profile. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] description: Description for the port policy.
        :param pulumi.Input[str] fortilink: FortiLink interface for which this port policy belongs to.
        :param pulumi.Input[str] lldp_profile: LLDP profile to be applied when using this port-policy.
        :param pulumi.Input[str] n8021x: 802.1x security policy to be applied when using this port-policy.
        :param pulumi.Input[str] name: Port policy name.
        :param pulumi.Input[str] qos_policy: QoS policy to be applied when using this port-policy.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vlan_policy: VLAN policy to be applied when using this port-policy.
        """
        if bounce_port_link is not None:
            pulumi.set(__self__, "bounce_port_link", bounce_port_link)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fortilink is not None:
            pulumi.set(__self__, "fortilink", fortilink)
        if lldp_profile is not None:
            pulumi.set(__self__, "lldp_profile", lldp_profile)
        if n8021x is not None:
            pulumi.set(__self__, "n8021x", n8021x)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if qos_policy is not None:
            pulumi.set(__self__, "qos_policy", qos_policy)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vlan_policy is not None:
            pulumi.set(__self__, "vlan_policy", vlan_policy)

    @property
    @pulumi.getter(name="bouncePortLink")
    def bounce_port_link(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable bouncing (administratively bring the link down, up) of a switch port where this port policy is applied. Helps to clear and reassign VLAN from lldp-profile. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "bounce_port_link")

    @bounce_port_link.setter
    def bounce_port_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bounce_port_link", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the port policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def fortilink(self) -> Optional[pulumi.Input[str]]:
        """
        FortiLink interface for which this port policy belongs to.
        """
        return pulumi.get(self, "fortilink")

    @fortilink.setter
    def fortilink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortilink", value)

    @property
    @pulumi.getter(name="lldpProfile")
    def lldp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        LLDP profile to be applied when using this port-policy.
        """
        return pulumi.get(self, "lldp_profile")

    @lldp_profile.setter
    def lldp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_profile", value)

    @property
    @pulumi.getter
    def n8021x(self) -> Optional[pulumi.Input[str]]:
        """
        802.1x security policy to be applied when using this port-policy.
        """
        return pulumi.get(self, "n8021x")

    @n8021x.setter
    def n8021x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n8021x", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Port policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> Optional[pulumi.Input[str]]:
        """
        QoS policy to be applied when using this port-policy.
        """
        return pulumi.get(self, "qos_policy")

    @qos_policy.setter
    def qos_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_policy", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vlanPolicy")
    def vlan_policy(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN policy to be applied when using this port-policy.
        """
        return pulumi.get(self, "vlan_policy")

    @vlan_policy.setter
    def vlan_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_policy", value)


@pulumi.input_type
class _PortpolicyState:
    def __init__(__self__, *,
                 bounce_port_link: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fortilink: Optional[pulumi.Input[str]] = None,
                 lldp_profile: Optional[pulumi.Input[str]] = None,
                 n8021x: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 qos_policy: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_policy: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Portpolicy resources.
        :param pulumi.Input[str] bounce_port_link: Enable/disable bouncing (administratively bring the link down, up) of a switch port where this port policy is applied. Helps to clear and reassign VLAN from lldp-profile. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] description: Description for the port policy.
        :param pulumi.Input[str] fortilink: FortiLink interface for which this port policy belongs to.
        :param pulumi.Input[str] lldp_profile: LLDP profile to be applied when using this port-policy.
        :param pulumi.Input[str] n8021x: 802.1x security policy to be applied when using this port-policy.
        :param pulumi.Input[str] name: Port policy name.
        :param pulumi.Input[str] qos_policy: QoS policy to be applied when using this port-policy.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vlan_policy: VLAN policy to be applied when using this port-policy.
        """
        if bounce_port_link is not None:
            pulumi.set(__self__, "bounce_port_link", bounce_port_link)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fortilink is not None:
            pulumi.set(__self__, "fortilink", fortilink)
        if lldp_profile is not None:
            pulumi.set(__self__, "lldp_profile", lldp_profile)
        if n8021x is not None:
            pulumi.set(__self__, "n8021x", n8021x)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if qos_policy is not None:
            pulumi.set(__self__, "qos_policy", qos_policy)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vlan_policy is not None:
            pulumi.set(__self__, "vlan_policy", vlan_policy)

    @property
    @pulumi.getter(name="bouncePortLink")
    def bounce_port_link(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable bouncing (administratively bring the link down, up) of a switch port where this port policy is applied. Helps to clear and reassign VLAN from lldp-profile. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "bounce_port_link")

    @bounce_port_link.setter
    def bounce_port_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bounce_port_link", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the port policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def fortilink(self) -> Optional[pulumi.Input[str]]:
        """
        FortiLink interface for which this port policy belongs to.
        """
        return pulumi.get(self, "fortilink")

    @fortilink.setter
    def fortilink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortilink", value)

    @property
    @pulumi.getter(name="lldpProfile")
    def lldp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        LLDP profile to be applied when using this port-policy.
        """
        return pulumi.get(self, "lldp_profile")

    @lldp_profile.setter
    def lldp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_profile", value)

    @property
    @pulumi.getter
    def n8021x(self) -> Optional[pulumi.Input[str]]:
        """
        802.1x security policy to be applied when using this port-policy.
        """
        return pulumi.get(self, "n8021x")

    @n8021x.setter
    def n8021x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n8021x", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Port policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> Optional[pulumi.Input[str]]:
        """
        QoS policy to be applied when using this port-policy.
        """
        return pulumi.get(self, "qos_policy")

    @qos_policy.setter
    def qos_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_policy", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vlanPolicy")
    def vlan_policy(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN policy to be applied when using this port-policy.
        """
        return pulumi.get(self, "vlan_policy")

    @vlan_policy.setter
    def vlan_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_policy", value)


class Portpolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bounce_port_link: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fortilink: Optional[pulumi.Input[str]] = None,
                 lldp_profile: Optional[pulumi.Input[str]] = None,
                 n8021x: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 qos_policy: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_policy: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure port policy to be applied on the managed FortiSwitch ports through NAC device. Applies to FortiOS Version `6.4.0,6.4.1,6.4.2,6.4.10,6.4.11,6.4.12,6.4.13,6.4.14,7.0.0`.

        ## Import

        SwitchController PortPolicy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/portpolicy:Portpolicy labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/portpolicy:Portpolicy labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bounce_port_link: Enable/disable bouncing (administratively bring the link down, up) of a switch port where this port policy is applied. Helps to clear and reassign VLAN from lldp-profile. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] description: Description for the port policy.
        :param pulumi.Input[str] fortilink: FortiLink interface for which this port policy belongs to.
        :param pulumi.Input[str] lldp_profile: LLDP profile to be applied when using this port-policy.
        :param pulumi.Input[str] n8021x: 802.1x security policy to be applied when using this port-policy.
        :param pulumi.Input[str] name: Port policy name.
        :param pulumi.Input[str] qos_policy: QoS policy to be applied when using this port-policy.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vlan_policy: VLAN policy to be applied when using this port-policy.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PortpolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure port policy to be applied on the managed FortiSwitch ports through NAC device. Applies to FortiOS Version `6.4.0,6.4.1,6.4.2,6.4.10,6.4.11,6.4.12,6.4.13,6.4.14,7.0.0`.

        ## Import

        SwitchController PortPolicy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/portpolicy:Portpolicy labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/portpolicy:Portpolicy labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param PortpolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PortpolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bounce_port_link: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fortilink: Optional[pulumi.Input[str]] = None,
                 lldp_profile: Optional[pulumi.Input[str]] = None,
                 n8021x: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 qos_policy: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_policy: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PortpolicyArgs.__new__(PortpolicyArgs)

            __props__.__dict__["bounce_port_link"] = bounce_port_link
            __props__.__dict__["description"] = description
            __props__.__dict__["fortilink"] = fortilink
            __props__.__dict__["lldp_profile"] = lldp_profile
            __props__.__dict__["n8021x"] = n8021x
            __props__.__dict__["name"] = name
            __props__.__dict__["qos_policy"] = qos_policy
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vlan_policy"] = vlan_policy
        super(Portpolicy, __self__).__init__(
            'fortios:switchcontroller/portpolicy:Portpolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bounce_port_link: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            fortilink: Optional[pulumi.Input[str]] = None,
            lldp_profile: Optional[pulumi.Input[str]] = None,
            n8021x: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            qos_policy: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vlan_policy: Optional[pulumi.Input[str]] = None) -> 'Portpolicy':
        """
        Get an existing Portpolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bounce_port_link: Enable/disable bouncing (administratively bring the link down, up) of a switch port where this port policy is applied. Helps to clear and reassign VLAN from lldp-profile. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] description: Description for the port policy.
        :param pulumi.Input[str] fortilink: FortiLink interface for which this port policy belongs to.
        :param pulumi.Input[str] lldp_profile: LLDP profile to be applied when using this port-policy.
        :param pulumi.Input[str] n8021x: 802.1x security policy to be applied when using this port-policy.
        :param pulumi.Input[str] name: Port policy name.
        :param pulumi.Input[str] qos_policy: QoS policy to be applied when using this port-policy.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vlan_policy: VLAN policy to be applied when using this port-policy.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PortpolicyState.__new__(_PortpolicyState)

        __props__.__dict__["bounce_port_link"] = bounce_port_link
        __props__.__dict__["description"] = description
        __props__.__dict__["fortilink"] = fortilink
        __props__.__dict__["lldp_profile"] = lldp_profile
        __props__.__dict__["n8021x"] = n8021x
        __props__.__dict__["name"] = name
        __props__.__dict__["qos_policy"] = qos_policy
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vlan_policy"] = vlan_policy
        return Portpolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bouncePortLink")
    def bounce_port_link(self) -> pulumi.Output[str]:
        """
        Enable/disable bouncing (administratively bring the link down, up) of a switch port where this port policy is applied. Helps to clear and reassign VLAN from lldp-profile. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "bounce_port_link")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description for the port policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def fortilink(self) -> pulumi.Output[str]:
        """
        FortiLink interface for which this port policy belongs to.
        """
        return pulumi.get(self, "fortilink")

    @property
    @pulumi.getter(name="lldpProfile")
    def lldp_profile(self) -> pulumi.Output[str]:
        """
        LLDP profile to be applied when using this port-policy.
        """
        return pulumi.get(self, "lldp_profile")

    @property
    @pulumi.getter
    def n8021x(self) -> pulumi.Output[str]:
        """
        802.1x security policy to be applied when using this port-policy.
        """
        return pulumi.get(self, "n8021x")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Port policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> pulumi.Output[str]:
        """
        QoS policy to be applied when using this port-policy.
        """
        return pulumi.get(self, "qos_policy")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="vlanPolicy")
    def vlan_policy(self) -> pulumi.Output[str]:
        """
        VLAN policy to be applied when using this port-policy.
        """
        return pulumi.get(self, "vlan_policy")

