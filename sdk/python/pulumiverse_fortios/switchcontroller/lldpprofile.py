# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LldpprofileArgs', 'Lldpprofile']

@pulumi.input_type
class LldpprofileArgs:
    def __init__(__self__, *,
                 auto_isl: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth_encrypt: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth_identity: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth_macsec_profile: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth_reauth: Optional[pulumi.Input[int]] = None,
                 auto_isl_auth_user: Optional[pulumi.Input[str]] = None,
                 auto_isl_hello_timer: Optional[pulumi.Input[int]] = None,
                 auto_isl_port_group: Optional[pulumi.Input[int]] = None,
                 auto_isl_receive_timeout: Optional[pulumi.Input[int]] = None,
                 auto_mclag_icl: Optional[pulumi.Input[str]] = None,
                 custom_tlvs: Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileCustomTlvArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 med_location_services: Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileMedLocationServiceArgs']]]] = None,
                 med_network_policies: Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileMedNetworkPolicyArgs']]]] = None,
                 med_tlvs: Optional[pulumi.Input[str]] = None,
                 n8021_tlvs: Optional[pulumi.Input[str]] = None,
                 n8023_tlvs: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Lldpprofile resource.
        :param pulumi.Input[str] auto_isl: Enable/disable auto inter-switch LAG. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] auto_isl_auth: Auto inter-switch LAG authentication mode. Valid values: `legacy`, `strict`, `relax`.
        :param pulumi.Input[str] auto_isl_auth_encrypt: Auto inter-switch LAG encryption mode. Valid values: `none`, `mixed`, `must`.
        :param pulumi.Input[str] auto_isl_auth_identity: Auto inter-switch LAG authentication identity.
        :param pulumi.Input[str] auto_isl_auth_macsec_profile: Auto inter-switch LAG macsec profile for encryption.
        :param pulumi.Input[int] auto_isl_auth_reauth: Auto inter-switch LAG authentication reauth period in seconds(10 - 3600, default = 3600).
        :param pulumi.Input[str] auto_isl_auth_user: Auto inter-switch LAG authentication user certificate.
        :param pulumi.Input[int] auto_isl_hello_timer: Auto inter-switch LAG hello timer duration (1 - 30 sec, default = 3).
        :param pulumi.Input[int] auto_isl_port_group: Auto inter-switch LAG port group ID (0 - 9).
        :param pulumi.Input[int] auto_isl_receive_timeout: Auto inter-switch LAG timeout if no response is received (3 - 90 sec, default = 9).
        :param pulumi.Input[str] auto_mclag_icl: Enable/disable MCLAG inter chassis link. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['LldpprofileCustomTlvArgs']]] custom_tlvs: Configuration method to edit custom TLV entries. The structure of `custom_tlvs` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input['LldpprofileMedLocationServiceArgs']]] med_location_services: Configuration method to edit Media Endpoint Discovery (MED) location service type-length-value (TLV) categories. The structure of `med_location_service` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['LldpprofileMedNetworkPolicyArgs']]] med_network_policies: Configuration method to edit Media Endpoint Discovery (MED) network policy type-length-value (TLV) categories. The structure of `med_network_policy` block is documented below.
        :param pulumi.Input[str] med_tlvs: Transmitted LLDP-MED TLVs (type-length-value descriptions): inventory management TLV and/or network policy TLV.
        :param pulumi.Input[str] n8021_tlvs: Transmitted IEEE 802.1 TLVs. Valid values: `port-vlan-id`.
        :param pulumi.Input[str] n8023_tlvs: Transmitted IEEE 802.3 TLVs.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if auto_isl is not None:
            pulumi.set(__self__, "auto_isl", auto_isl)
        if auto_isl_auth is not None:
            pulumi.set(__self__, "auto_isl_auth", auto_isl_auth)
        if auto_isl_auth_encrypt is not None:
            pulumi.set(__self__, "auto_isl_auth_encrypt", auto_isl_auth_encrypt)
        if auto_isl_auth_identity is not None:
            pulumi.set(__self__, "auto_isl_auth_identity", auto_isl_auth_identity)
        if auto_isl_auth_macsec_profile is not None:
            pulumi.set(__self__, "auto_isl_auth_macsec_profile", auto_isl_auth_macsec_profile)
        if auto_isl_auth_reauth is not None:
            pulumi.set(__self__, "auto_isl_auth_reauth", auto_isl_auth_reauth)
        if auto_isl_auth_user is not None:
            pulumi.set(__self__, "auto_isl_auth_user", auto_isl_auth_user)
        if auto_isl_hello_timer is not None:
            pulumi.set(__self__, "auto_isl_hello_timer", auto_isl_hello_timer)
        if auto_isl_port_group is not None:
            pulumi.set(__self__, "auto_isl_port_group", auto_isl_port_group)
        if auto_isl_receive_timeout is not None:
            pulumi.set(__self__, "auto_isl_receive_timeout", auto_isl_receive_timeout)
        if auto_mclag_icl is not None:
            pulumi.set(__self__, "auto_mclag_icl", auto_mclag_icl)
        if custom_tlvs is not None:
            pulumi.set(__self__, "custom_tlvs", custom_tlvs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if med_location_services is not None:
            pulumi.set(__self__, "med_location_services", med_location_services)
        if med_network_policies is not None:
            pulumi.set(__self__, "med_network_policies", med_network_policies)
        if med_tlvs is not None:
            pulumi.set(__self__, "med_tlvs", med_tlvs)
        if n8021_tlvs is not None:
            pulumi.set(__self__, "n8021_tlvs", n8021_tlvs)
        if n8023_tlvs is not None:
            pulumi.set(__self__, "n8023_tlvs", n8023_tlvs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="autoIsl")
    def auto_isl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable auto inter-switch LAG. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "auto_isl")

    @auto_isl.setter
    def auto_isl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_isl", value)

    @property
    @pulumi.getter(name="autoIslAuth")
    def auto_isl_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Auto inter-switch LAG authentication mode. Valid values: `legacy`, `strict`, `relax`.
        """
        return pulumi.get(self, "auto_isl_auth")

    @auto_isl_auth.setter
    def auto_isl_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_isl_auth", value)

    @property
    @pulumi.getter(name="autoIslAuthEncrypt")
    def auto_isl_auth_encrypt(self) -> Optional[pulumi.Input[str]]:
        """
        Auto inter-switch LAG encryption mode. Valid values: `none`, `mixed`, `must`.
        """
        return pulumi.get(self, "auto_isl_auth_encrypt")

    @auto_isl_auth_encrypt.setter
    def auto_isl_auth_encrypt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_isl_auth_encrypt", value)

    @property
    @pulumi.getter(name="autoIslAuthIdentity")
    def auto_isl_auth_identity(self) -> Optional[pulumi.Input[str]]:
        """
        Auto inter-switch LAG authentication identity.
        """
        return pulumi.get(self, "auto_isl_auth_identity")

    @auto_isl_auth_identity.setter
    def auto_isl_auth_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_isl_auth_identity", value)

    @property
    @pulumi.getter(name="autoIslAuthMacsecProfile")
    def auto_isl_auth_macsec_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Auto inter-switch LAG macsec profile for encryption.
        """
        return pulumi.get(self, "auto_isl_auth_macsec_profile")

    @auto_isl_auth_macsec_profile.setter
    def auto_isl_auth_macsec_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_isl_auth_macsec_profile", value)

    @property
    @pulumi.getter(name="autoIslAuthReauth")
    def auto_isl_auth_reauth(self) -> Optional[pulumi.Input[int]]:
        """
        Auto inter-switch LAG authentication reauth period in seconds(10 - 3600, default = 3600).
        """
        return pulumi.get(self, "auto_isl_auth_reauth")

    @auto_isl_auth_reauth.setter
    def auto_isl_auth_reauth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_isl_auth_reauth", value)

    @property
    @pulumi.getter(name="autoIslAuthUser")
    def auto_isl_auth_user(self) -> Optional[pulumi.Input[str]]:
        """
        Auto inter-switch LAG authentication user certificate.
        """
        return pulumi.get(self, "auto_isl_auth_user")

    @auto_isl_auth_user.setter
    def auto_isl_auth_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_isl_auth_user", value)

    @property
    @pulumi.getter(name="autoIslHelloTimer")
    def auto_isl_hello_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Auto inter-switch LAG hello timer duration (1 - 30 sec, default = 3).
        """
        return pulumi.get(self, "auto_isl_hello_timer")

    @auto_isl_hello_timer.setter
    def auto_isl_hello_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_isl_hello_timer", value)

    @property
    @pulumi.getter(name="autoIslPortGroup")
    def auto_isl_port_group(self) -> Optional[pulumi.Input[int]]:
        """
        Auto inter-switch LAG port group ID (0 - 9).
        """
        return pulumi.get(self, "auto_isl_port_group")

    @auto_isl_port_group.setter
    def auto_isl_port_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_isl_port_group", value)

    @property
    @pulumi.getter(name="autoIslReceiveTimeout")
    def auto_isl_receive_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Auto inter-switch LAG timeout if no response is received (3 - 90 sec, default = 9).
        """
        return pulumi.get(self, "auto_isl_receive_timeout")

    @auto_isl_receive_timeout.setter
    def auto_isl_receive_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_isl_receive_timeout", value)

    @property
    @pulumi.getter(name="autoMclagIcl")
    def auto_mclag_icl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MCLAG inter chassis link. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "auto_mclag_icl")

    @auto_mclag_icl.setter
    def auto_mclag_icl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_mclag_icl", value)

    @property
    @pulumi.getter(name="customTlvs")
    def custom_tlvs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileCustomTlvArgs']]]]:
        """
        Configuration method to edit custom TLV entries. The structure of `custom_tlvs` block is documented below.
        """
        return pulumi.get(self, "custom_tlvs")

    @custom_tlvs.setter
    def custom_tlvs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileCustomTlvArgs']]]]):
        pulumi.set(self, "custom_tlvs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="medLocationServices")
    def med_location_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileMedLocationServiceArgs']]]]:
        """
        Configuration method to edit Media Endpoint Discovery (MED) location service type-length-value (TLV) categories. The structure of `med_location_service` block is documented below.
        """
        return pulumi.get(self, "med_location_services")

    @med_location_services.setter
    def med_location_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileMedLocationServiceArgs']]]]):
        pulumi.set(self, "med_location_services", value)

    @property
    @pulumi.getter(name="medNetworkPolicies")
    def med_network_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileMedNetworkPolicyArgs']]]]:
        """
        Configuration method to edit Media Endpoint Discovery (MED) network policy type-length-value (TLV) categories. The structure of `med_network_policy` block is documented below.
        """
        return pulumi.get(self, "med_network_policies")

    @med_network_policies.setter
    def med_network_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileMedNetworkPolicyArgs']]]]):
        pulumi.set(self, "med_network_policies", value)

    @property
    @pulumi.getter(name="medTlvs")
    def med_tlvs(self) -> Optional[pulumi.Input[str]]:
        """
        Transmitted LLDP-MED TLVs (type-length-value descriptions): inventory management TLV and/or network policy TLV.
        """
        return pulumi.get(self, "med_tlvs")

    @med_tlvs.setter
    def med_tlvs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "med_tlvs", value)

    @property
    @pulumi.getter(name="n8021Tlvs")
    def n8021_tlvs(self) -> Optional[pulumi.Input[str]]:
        """
        Transmitted IEEE 802.1 TLVs. Valid values: `port-vlan-id`.
        """
        return pulumi.get(self, "n8021_tlvs")

    @n8021_tlvs.setter
    def n8021_tlvs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n8021_tlvs", value)

    @property
    @pulumi.getter(name="n8023Tlvs")
    def n8023_tlvs(self) -> Optional[pulumi.Input[str]]:
        """
        Transmitted IEEE 802.3 TLVs.
        """
        return pulumi.get(self, "n8023_tlvs")

    @n8023_tlvs.setter
    def n8023_tlvs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n8023_tlvs", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _LldpprofileState:
    def __init__(__self__, *,
                 auto_isl: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth_encrypt: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth_identity: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth_macsec_profile: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth_reauth: Optional[pulumi.Input[int]] = None,
                 auto_isl_auth_user: Optional[pulumi.Input[str]] = None,
                 auto_isl_hello_timer: Optional[pulumi.Input[int]] = None,
                 auto_isl_port_group: Optional[pulumi.Input[int]] = None,
                 auto_isl_receive_timeout: Optional[pulumi.Input[int]] = None,
                 auto_mclag_icl: Optional[pulumi.Input[str]] = None,
                 custom_tlvs: Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileCustomTlvArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 med_location_services: Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileMedLocationServiceArgs']]]] = None,
                 med_network_policies: Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileMedNetworkPolicyArgs']]]] = None,
                 med_tlvs: Optional[pulumi.Input[str]] = None,
                 n8021_tlvs: Optional[pulumi.Input[str]] = None,
                 n8023_tlvs: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Lldpprofile resources.
        :param pulumi.Input[str] auto_isl: Enable/disable auto inter-switch LAG. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] auto_isl_auth: Auto inter-switch LAG authentication mode. Valid values: `legacy`, `strict`, `relax`.
        :param pulumi.Input[str] auto_isl_auth_encrypt: Auto inter-switch LAG encryption mode. Valid values: `none`, `mixed`, `must`.
        :param pulumi.Input[str] auto_isl_auth_identity: Auto inter-switch LAG authentication identity.
        :param pulumi.Input[str] auto_isl_auth_macsec_profile: Auto inter-switch LAG macsec profile for encryption.
        :param pulumi.Input[int] auto_isl_auth_reauth: Auto inter-switch LAG authentication reauth period in seconds(10 - 3600, default = 3600).
        :param pulumi.Input[str] auto_isl_auth_user: Auto inter-switch LAG authentication user certificate.
        :param pulumi.Input[int] auto_isl_hello_timer: Auto inter-switch LAG hello timer duration (1 - 30 sec, default = 3).
        :param pulumi.Input[int] auto_isl_port_group: Auto inter-switch LAG port group ID (0 - 9).
        :param pulumi.Input[int] auto_isl_receive_timeout: Auto inter-switch LAG timeout if no response is received (3 - 90 sec, default = 9).
        :param pulumi.Input[str] auto_mclag_icl: Enable/disable MCLAG inter chassis link. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['LldpprofileCustomTlvArgs']]] custom_tlvs: Configuration method to edit custom TLV entries. The structure of `custom_tlvs` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input['LldpprofileMedLocationServiceArgs']]] med_location_services: Configuration method to edit Media Endpoint Discovery (MED) location service type-length-value (TLV) categories. The structure of `med_location_service` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['LldpprofileMedNetworkPolicyArgs']]] med_network_policies: Configuration method to edit Media Endpoint Discovery (MED) network policy type-length-value (TLV) categories. The structure of `med_network_policy` block is documented below.
        :param pulumi.Input[str] med_tlvs: Transmitted LLDP-MED TLVs (type-length-value descriptions): inventory management TLV and/or network policy TLV.
        :param pulumi.Input[str] n8021_tlvs: Transmitted IEEE 802.1 TLVs. Valid values: `port-vlan-id`.
        :param pulumi.Input[str] n8023_tlvs: Transmitted IEEE 802.3 TLVs.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if auto_isl is not None:
            pulumi.set(__self__, "auto_isl", auto_isl)
        if auto_isl_auth is not None:
            pulumi.set(__self__, "auto_isl_auth", auto_isl_auth)
        if auto_isl_auth_encrypt is not None:
            pulumi.set(__self__, "auto_isl_auth_encrypt", auto_isl_auth_encrypt)
        if auto_isl_auth_identity is not None:
            pulumi.set(__self__, "auto_isl_auth_identity", auto_isl_auth_identity)
        if auto_isl_auth_macsec_profile is not None:
            pulumi.set(__self__, "auto_isl_auth_macsec_profile", auto_isl_auth_macsec_profile)
        if auto_isl_auth_reauth is not None:
            pulumi.set(__self__, "auto_isl_auth_reauth", auto_isl_auth_reauth)
        if auto_isl_auth_user is not None:
            pulumi.set(__self__, "auto_isl_auth_user", auto_isl_auth_user)
        if auto_isl_hello_timer is not None:
            pulumi.set(__self__, "auto_isl_hello_timer", auto_isl_hello_timer)
        if auto_isl_port_group is not None:
            pulumi.set(__self__, "auto_isl_port_group", auto_isl_port_group)
        if auto_isl_receive_timeout is not None:
            pulumi.set(__self__, "auto_isl_receive_timeout", auto_isl_receive_timeout)
        if auto_mclag_icl is not None:
            pulumi.set(__self__, "auto_mclag_icl", auto_mclag_icl)
        if custom_tlvs is not None:
            pulumi.set(__self__, "custom_tlvs", custom_tlvs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if med_location_services is not None:
            pulumi.set(__self__, "med_location_services", med_location_services)
        if med_network_policies is not None:
            pulumi.set(__self__, "med_network_policies", med_network_policies)
        if med_tlvs is not None:
            pulumi.set(__self__, "med_tlvs", med_tlvs)
        if n8021_tlvs is not None:
            pulumi.set(__self__, "n8021_tlvs", n8021_tlvs)
        if n8023_tlvs is not None:
            pulumi.set(__self__, "n8023_tlvs", n8023_tlvs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="autoIsl")
    def auto_isl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable auto inter-switch LAG. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "auto_isl")

    @auto_isl.setter
    def auto_isl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_isl", value)

    @property
    @pulumi.getter(name="autoIslAuth")
    def auto_isl_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Auto inter-switch LAG authentication mode. Valid values: `legacy`, `strict`, `relax`.
        """
        return pulumi.get(self, "auto_isl_auth")

    @auto_isl_auth.setter
    def auto_isl_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_isl_auth", value)

    @property
    @pulumi.getter(name="autoIslAuthEncrypt")
    def auto_isl_auth_encrypt(self) -> Optional[pulumi.Input[str]]:
        """
        Auto inter-switch LAG encryption mode. Valid values: `none`, `mixed`, `must`.
        """
        return pulumi.get(self, "auto_isl_auth_encrypt")

    @auto_isl_auth_encrypt.setter
    def auto_isl_auth_encrypt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_isl_auth_encrypt", value)

    @property
    @pulumi.getter(name="autoIslAuthIdentity")
    def auto_isl_auth_identity(self) -> Optional[pulumi.Input[str]]:
        """
        Auto inter-switch LAG authentication identity.
        """
        return pulumi.get(self, "auto_isl_auth_identity")

    @auto_isl_auth_identity.setter
    def auto_isl_auth_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_isl_auth_identity", value)

    @property
    @pulumi.getter(name="autoIslAuthMacsecProfile")
    def auto_isl_auth_macsec_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Auto inter-switch LAG macsec profile for encryption.
        """
        return pulumi.get(self, "auto_isl_auth_macsec_profile")

    @auto_isl_auth_macsec_profile.setter
    def auto_isl_auth_macsec_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_isl_auth_macsec_profile", value)

    @property
    @pulumi.getter(name="autoIslAuthReauth")
    def auto_isl_auth_reauth(self) -> Optional[pulumi.Input[int]]:
        """
        Auto inter-switch LAG authentication reauth period in seconds(10 - 3600, default = 3600).
        """
        return pulumi.get(self, "auto_isl_auth_reauth")

    @auto_isl_auth_reauth.setter
    def auto_isl_auth_reauth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_isl_auth_reauth", value)

    @property
    @pulumi.getter(name="autoIslAuthUser")
    def auto_isl_auth_user(self) -> Optional[pulumi.Input[str]]:
        """
        Auto inter-switch LAG authentication user certificate.
        """
        return pulumi.get(self, "auto_isl_auth_user")

    @auto_isl_auth_user.setter
    def auto_isl_auth_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_isl_auth_user", value)

    @property
    @pulumi.getter(name="autoIslHelloTimer")
    def auto_isl_hello_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Auto inter-switch LAG hello timer duration (1 - 30 sec, default = 3).
        """
        return pulumi.get(self, "auto_isl_hello_timer")

    @auto_isl_hello_timer.setter
    def auto_isl_hello_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_isl_hello_timer", value)

    @property
    @pulumi.getter(name="autoIslPortGroup")
    def auto_isl_port_group(self) -> Optional[pulumi.Input[int]]:
        """
        Auto inter-switch LAG port group ID (0 - 9).
        """
        return pulumi.get(self, "auto_isl_port_group")

    @auto_isl_port_group.setter
    def auto_isl_port_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_isl_port_group", value)

    @property
    @pulumi.getter(name="autoIslReceiveTimeout")
    def auto_isl_receive_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Auto inter-switch LAG timeout if no response is received (3 - 90 sec, default = 9).
        """
        return pulumi.get(self, "auto_isl_receive_timeout")

    @auto_isl_receive_timeout.setter
    def auto_isl_receive_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_isl_receive_timeout", value)

    @property
    @pulumi.getter(name="autoMclagIcl")
    def auto_mclag_icl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MCLAG inter chassis link. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "auto_mclag_icl")

    @auto_mclag_icl.setter
    def auto_mclag_icl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_mclag_icl", value)

    @property
    @pulumi.getter(name="customTlvs")
    def custom_tlvs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileCustomTlvArgs']]]]:
        """
        Configuration method to edit custom TLV entries. The structure of `custom_tlvs` block is documented below.
        """
        return pulumi.get(self, "custom_tlvs")

    @custom_tlvs.setter
    def custom_tlvs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileCustomTlvArgs']]]]):
        pulumi.set(self, "custom_tlvs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="medLocationServices")
    def med_location_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileMedLocationServiceArgs']]]]:
        """
        Configuration method to edit Media Endpoint Discovery (MED) location service type-length-value (TLV) categories. The structure of `med_location_service` block is documented below.
        """
        return pulumi.get(self, "med_location_services")

    @med_location_services.setter
    def med_location_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileMedLocationServiceArgs']]]]):
        pulumi.set(self, "med_location_services", value)

    @property
    @pulumi.getter(name="medNetworkPolicies")
    def med_network_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileMedNetworkPolicyArgs']]]]:
        """
        Configuration method to edit Media Endpoint Discovery (MED) network policy type-length-value (TLV) categories. The structure of `med_network_policy` block is documented below.
        """
        return pulumi.get(self, "med_network_policies")

    @med_network_policies.setter
    def med_network_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LldpprofileMedNetworkPolicyArgs']]]]):
        pulumi.set(self, "med_network_policies", value)

    @property
    @pulumi.getter(name="medTlvs")
    def med_tlvs(self) -> Optional[pulumi.Input[str]]:
        """
        Transmitted LLDP-MED TLVs (type-length-value descriptions): inventory management TLV and/or network policy TLV.
        """
        return pulumi.get(self, "med_tlvs")

    @med_tlvs.setter
    def med_tlvs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "med_tlvs", value)

    @property
    @pulumi.getter(name="n8021Tlvs")
    def n8021_tlvs(self) -> Optional[pulumi.Input[str]]:
        """
        Transmitted IEEE 802.1 TLVs. Valid values: `port-vlan-id`.
        """
        return pulumi.get(self, "n8021_tlvs")

    @n8021_tlvs.setter
    def n8021_tlvs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n8021_tlvs", value)

    @property
    @pulumi.getter(name="n8023Tlvs")
    def n8023_tlvs(self) -> Optional[pulumi.Input[str]]:
        """
        Transmitted IEEE 802.3 TLVs.
        """
        return pulumi.get(self, "n8023_tlvs")

    @n8023_tlvs.setter
    def n8023_tlvs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n8023_tlvs", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Lldpprofile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_isl: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth_encrypt: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth_identity: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth_macsec_profile: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth_reauth: Optional[pulumi.Input[int]] = None,
                 auto_isl_auth_user: Optional[pulumi.Input[str]] = None,
                 auto_isl_hello_timer: Optional[pulumi.Input[int]] = None,
                 auto_isl_port_group: Optional[pulumi.Input[int]] = None,
                 auto_isl_receive_timeout: Optional[pulumi.Input[int]] = None,
                 auto_mclag_icl: Optional[pulumi.Input[str]] = None,
                 custom_tlvs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LldpprofileCustomTlvArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 med_location_services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LldpprofileMedLocationServiceArgs']]]]] = None,
                 med_network_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LldpprofileMedNetworkPolicyArgs']]]]] = None,
                 med_tlvs: Optional[pulumi.Input[str]] = None,
                 n8021_tlvs: Optional[pulumi.Input[str]] = None,
                 n8023_tlvs: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure FortiSwitch LLDP profiles.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.switchcontroller.Lldpprofile("trname",
            auto_isl="enable",
            auto_isl_hello_timer=3,
            auto_isl_port_group=0,
            auto_isl_receive_timeout=60,
            med_tlvs="inventory-management network-policy")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        SwitchController LldpProfile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/lldpprofile:Lldpprofile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/lldpprofile:Lldpprofile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_isl: Enable/disable auto inter-switch LAG. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] auto_isl_auth: Auto inter-switch LAG authentication mode. Valid values: `legacy`, `strict`, `relax`.
        :param pulumi.Input[str] auto_isl_auth_encrypt: Auto inter-switch LAG encryption mode. Valid values: `none`, `mixed`, `must`.
        :param pulumi.Input[str] auto_isl_auth_identity: Auto inter-switch LAG authentication identity.
        :param pulumi.Input[str] auto_isl_auth_macsec_profile: Auto inter-switch LAG macsec profile for encryption.
        :param pulumi.Input[int] auto_isl_auth_reauth: Auto inter-switch LAG authentication reauth period in seconds(10 - 3600, default = 3600).
        :param pulumi.Input[str] auto_isl_auth_user: Auto inter-switch LAG authentication user certificate.
        :param pulumi.Input[int] auto_isl_hello_timer: Auto inter-switch LAG hello timer duration (1 - 30 sec, default = 3).
        :param pulumi.Input[int] auto_isl_port_group: Auto inter-switch LAG port group ID (0 - 9).
        :param pulumi.Input[int] auto_isl_receive_timeout: Auto inter-switch LAG timeout if no response is received (3 - 90 sec, default = 9).
        :param pulumi.Input[str] auto_mclag_icl: Enable/disable MCLAG inter chassis link. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LldpprofileCustomTlvArgs']]]] custom_tlvs: Configuration method to edit custom TLV entries. The structure of `custom_tlvs` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LldpprofileMedLocationServiceArgs']]]] med_location_services: Configuration method to edit Media Endpoint Discovery (MED) location service type-length-value (TLV) categories. The structure of `med_location_service` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LldpprofileMedNetworkPolicyArgs']]]] med_network_policies: Configuration method to edit Media Endpoint Discovery (MED) network policy type-length-value (TLV) categories. The structure of `med_network_policy` block is documented below.
        :param pulumi.Input[str] med_tlvs: Transmitted LLDP-MED TLVs (type-length-value descriptions): inventory management TLV and/or network policy TLV.
        :param pulumi.Input[str] n8021_tlvs: Transmitted IEEE 802.1 TLVs. Valid values: `port-vlan-id`.
        :param pulumi.Input[str] n8023_tlvs: Transmitted IEEE 802.3 TLVs.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LldpprofileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure FortiSwitch LLDP profiles.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.switchcontroller.Lldpprofile("trname",
            auto_isl="enable",
            auto_isl_hello_timer=3,
            auto_isl_port_group=0,
            auto_isl_receive_timeout=60,
            med_tlvs="inventory-management network-policy")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        SwitchController LldpProfile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/lldpprofile:Lldpprofile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/lldpprofile:Lldpprofile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param LldpprofileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LldpprofileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_isl: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth_encrypt: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth_identity: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth_macsec_profile: Optional[pulumi.Input[str]] = None,
                 auto_isl_auth_reauth: Optional[pulumi.Input[int]] = None,
                 auto_isl_auth_user: Optional[pulumi.Input[str]] = None,
                 auto_isl_hello_timer: Optional[pulumi.Input[int]] = None,
                 auto_isl_port_group: Optional[pulumi.Input[int]] = None,
                 auto_isl_receive_timeout: Optional[pulumi.Input[int]] = None,
                 auto_mclag_icl: Optional[pulumi.Input[str]] = None,
                 custom_tlvs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LldpprofileCustomTlvArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 med_location_services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LldpprofileMedLocationServiceArgs']]]]] = None,
                 med_network_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LldpprofileMedNetworkPolicyArgs']]]]] = None,
                 med_tlvs: Optional[pulumi.Input[str]] = None,
                 n8021_tlvs: Optional[pulumi.Input[str]] = None,
                 n8023_tlvs: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LldpprofileArgs.__new__(LldpprofileArgs)

            __props__.__dict__["auto_isl"] = auto_isl
            __props__.__dict__["auto_isl_auth"] = auto_isl_auth
            __props__.__dict__["auto_isl_auth_encrypt"] = auto_isl_auth_encrypt
            __props__.__dict__["auto_isl_auth_identity"] = auto_isl_auth_identity
            __props__.__dict__["auto_isl_auth_macsec_profile"] = auto_isl_auth_macsec_profile
            __props__.__dict__["auto_isl_auth_reauth"] = auto_isl_auth_reauth
            __props__.__dict__["auto_isl_auth_user"] = auto_isl_auth_user
            __props__.__dict__["auto_isl_hello_timer"] = auto_isl_hello_timer
            __props__.__dict__["auto_isl_port_group"] = auto_isl_port_group
            __props__.__dict__["auto_isl_receive_timeout"] = auto_isl_receive_timeout
            __props__.__dict__["auto_mclag_icl"] = auto_mclag_icl
            __props__.__dict__["custom_tlvs"] = custom_tlvs
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["med_location_services"] = med_location_services
            __props__.__dict__["med_network_policies"] = med_network_policies
            __props__.__dict__["med_tlvs"] = med_tlvs
            __props__.__dict__["n8021_tlvs"] = n8021_tlvs
            __props__.__dict__["n8023_tlvs"] = n8023_tlvs
            __props__.__dict__["name"] = name
            __props__.__dict__["vdomparam"] = vdomparam
        super(Lldpprofile, __self__).__init__(
            'fortios:switchcontroller/lldpprofile:Lldpprofile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_isl: Optional[pulumi.Input[str]] = None,
            auto_isl_auth: Optional[pulumi.Input[str]] = None,
            auto_isl_auth_encrypt: Optional[pulumi.Input[str]] = None,
            auto_isl_auth_identity: Optional[pulumi.Input[str]] = None,
            auto_isl_auth_macsec_profile: Optional[pulumi.Input[str]] = None,
            auto_isl_auth_reauth: Optional[pulumi.Input[int]] = None,
            auto_isl_auth_user: Optional[pulumi.Input[str]] = None,
            auto_isl_hello_timer: Optional[pulumi.Input[int]] = None,
            auto_isl_port_group: Optional[pulumi.Input[int]] = None,
            auto_isl_receive_timeout: Optional[pulumi.Input[int]] = None,
            auto_mclag_icl: Optional[pulumi.Input[str]] = None,
            custom_tlvs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LldpprofileCustomTlvArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            med_location_services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LldpprofileMedLocationServiceArgs']]]]] = None,
            med_network_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LldpprofileMedNetworkPolicyArgs']]]]] = None,
            med_tlvs: Optional[pulumi.Input[str]] = None,
            n8021_tlvs: Optional[pulumi.Input[str]] = None,
            n8023_tlvs: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Lldpprofile':
        """
        Get an existing Lldpprofile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_isl: Enable/disable auto inter-switch LAG. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] auto_isl_auth: Auto inter-switch LAG authentication mode. Valid values: `legacy`, `strict`, `relax`.
        :param pulumi.Input[str] auto_isl_auth_encrypt: Auto inter-switch LAG encryption mode. Valid values: `none`, `mixed`, `must`.
        :param pulumi.Input[str] auto_isl_auth_identity: Auto inter-switch LAG authentication identity.
        :param pulumi.Input[str] auto_isl_auth_macsec_profile: Auto inter-switch LAG macsec profile for encryption.
        :param pulumi.Input[int] auto_isl_auth_reauth: Auto inter-switch LAG authentication reauth period in seconds(10 - 3600, default = 3600).
        :param pulumi.Input[str] auto_isl_auth_user: Auto inter-switch LAG authentication user certificate.
        :param pulumi.Input[int] auto_isl_hello_timer: Auto inter-switch LAG hello timer duration (1 - 30 sec, default = 3).
        :param pulumi.Input[int] auto_isl_port_group: Auto inter-switch LAG port group ID (0 - 9).
        :param pulumi.Input[int] auto_isl_receive_timeout: Auto inter-switch LAG timeout if no response is received (3 - 90 sec, default = 9).
        :param pulumi.Input[str] auto_mclag_icl: Enable/disable MCLAG inter chassis link. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LldpprofileCustomTlvArgs']]]] custom_tlvs: Configuration method to edit custom TLV entries. The structure of `custom_tlvs` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LldpprofileMedLocationServiceArgs']]]] med_location_services: Configuration method to edit Media Endpoint Discovery (MED) location service type-length-value (TLV) categories. The structure of `med_location_service` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LldpprofileMedNetworkPolicyArgs']]]] med_network_policies: Configuration method to edit Media Endpoint Discovery (MED) network policy type-length-value (TLV) categories. The structure of `med_network_policy` block is documented below.
        :param pulumi.Input[str] med_tlvs: Transmitted LLDP-MED TLVs (type-length-value descriptions): inventory management TLV and/or network policy TLV.
        :param pulumi.Input[str] n8021_tlvs: Transmitted IEEE 802.1 TLVs. Valid values: `port-vlan-id`.
        :param pulumi.Input[str] n8023_tlvs: Transmitted IEEE 802.3 TLVs.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LldpprofileState.__new__(_LldpprofileState)

        __props__.__dict__["auto_isl"] = auto_isl
        __props__.__dict__["auto_isl_auth"] = auto_isl_auth
        __props__.__dict__["auto_isl_auth_encrypt"] = auto_isl_auth_encrypt
        __props__.__dict__["auto_isl_auth_identity"] = auto_isl_auth_identity
        __props__.__dict__["auto_isl_auth_macsec_profile"] = auto_isl_auth_macsec_profile
        __props__.__dict__["auto_isl_auth_reauth"] = auto_isl_auth_reauth
        __props__.__dict__["auto_isl_auth_user"] = auto_isl_auth_user
        __props__.__dict__["auto_isl_hello_timer"] = auto_isl_hello_timer
        __props__.__dict__["auto_isl_port_group"] = auto_isl_port_group
        __props__.__dict__["auto_isl_receive_timeout"] = auto_isl_receive_timeout
        __props__.__dict__["auto_mclag_icl"] = auto_mclag_icl
        __props__.__dict__["custom_tlvs"] = custom_tlvs
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["med_location_services"] = med_location_services
        __props__.__dict__["med_network_policies"] = med_network_policies
        __props__.__dict__["med_tlvs"] = med_tlvs
        __props__.__dict__["n8021_tlvs"] = n8021_tlvs
        __props__.__dict__["n8023_tlvs"] = n8023_tlvs
        __props__.__dict__["name"] = name
        __props__.__dict__["vdomparam"] = vdomparam
        return Lldpprofile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoIsl")
    def auto_isl(self) -> pulumi.Output[str]:
        """
        Enable/disable auto inter-switch LAG. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "auto_isl")

    @property
    @pulumi.getter(name="autoIslAuth")
    def auto_isl_auth(self) -> pulumi.Output[str]:
        """
        Auto inter-switch LAG authentication mode. Valid values: `legacy`, `strict`, `relax`.
        """
        return pulumi.get(self, "auto_isl_auth")

    @property
    @pulumi.getter(name="autoIslAuthEncrypt")
    def auto_isl_auth_encrypt(self) -> pulumi.Output[str]:
        """
        Auto inter-switch LAG encryption mode. Valid values: `none`, `mixed`, `must`.
        """
        return pulumi.get(self, "auto_isl_auth_encrypt")

    @property
    @pulumi.getter(name="autoIslAuthIdentity")
    def auto_isl_auth_identity(self) -> pulumi.Output[str]:
        """
        Auto inter-switch LAG authentication identity.
        """
        return pulumi.get(self, "auto_isl_auth_identity")

    @property
    @pulumi.getter(name="autoIslAuthMacsecProfile")
    def auto_isl_auth_macsec_profile(self) -> pulumi.Output[str]:
        """
        Auto inter-switch LAG macsec profile for encryption.
        """
        return pulumi.get(self, "auto_isl_auth_macsec_profile")

    @property
    @pulumi.getter(name="autoIslAuthReauth")
    def auto_isl_auth_reauth(self) -> pulumi.Output[int]:
        """
        Auto inter-switch LAG authentication reauth period in seconds(10 - 3600, default = 3600).
        """
        return pulumi.get(self, "auto_isl_auth_reauth")

    @property
    @pulumi.getter(name="autoIslAuthUser")
    def auto_isl_auth_user(self) -> pulumi.Output[str]:
        """
        Auto inter-switch LAG authentication user certificate.
        """
        return pulumi.get(self, "auto_isl_auth_user")

    @property
    @pulumi.getter(name="autoIslHelloTimer")
    def auto_isl_hello_timer(self) -> pulumi.Output[int]:
        """
        Auto inter-switch LAG hello timer duration (1 - 30 sec, default = 3).
        """
        return pulumi.get(self, "auto_isl_hello_timer")

    @property
    @pulumi.getter(name="autoIslPortGroup")
    def auto_isl_port_group(self) -> pulumi.Output[int]:
        """
        Auto inter-switch LAG port group ID (0 - 9).
        """
        return pulumi.get(self, "auto_isl_port_group")

    @property
    @pulumi.getter(name="autoIslReceiveTimeout")
    def auto_isl_receive_timeout(self) -> pulumi.Output[int]:
        """
        Auto inter-switch LAG timeout if no response is received (3 - 90 sec, default = 9).
        """
        return pulumi.get(self, "auto_isl_receive_timeout")

    @property
    @pulumi.getter(name="autoMclagIcl")
    def auto_mclag_icl(self) -> pulumi.Output[str]:
        """
        Enable/disable MCLAG inter chassis link. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "auto_mclag_icl")

    @property
    @pulumi.getter(name="customTlvs")
    def custom_tlvs(self) -> pulumi.Output[Optional[Sequence['outputs.LldpprofileCustomTlv']]]:
        """
        Configuration method to edit custom TLV entries. The structure of `custom_tlvs` block is documented below.
        """
        return pulumi.get(self, "custom_tlvs")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="medLocationServices")
    def med_location_services(self) -> pulumi.Output[Optional[Sequence['outputs.LldpprofileMedLocationService']]]:
        """
        Configuration method to edit Media Endpoint Discovery (MED) location service type-length-value (TLV) categories. The structure of `med_location_service` block is documented below.
        """
        return pulumi.get(self, "med_location_services")

    @property
    @pulumi.getter(name="medNetworkPolicies")
    def med_network_policies(self) -> pulumi.Output[Optional[Sequence['outputs.LldpprofileMedNetworkPolicy']]]:
        """
        Configuration method to edit Media Endpoint Discovery (MED) network policy type-length-value (TLV) categories. The structure of `med_network_policy` block is documented below.
        """
        return pulumi.get(self, "med_network_policies")

    @property
    @pulumi.getter(name="medTlvs")
    def med_tlvs(self) -> pulumi.Output[str]:
        """
        Transmitted LLDP-MED TLVs (type-length-value descriptions): inventory management TLV and/or network policy TLV.
        """
        return pulumi.get(self, "med_tlvs")

    @property
    @pulumi.getter(name="n8021Tlvs")
    def n8021_tlvs(self) -> pulumi.Output[str]:
        """
        Transmitted IEEE 802.1 TLVs. Valid values: `port-vlan-id`.
        """
        return pulumi.get(self, "n8021_tlvs")

    @property
    @pulumi.getter(name="n8023Tlvs")
    def n8023_tlvs(self) -> pulumi.Output[str]:
        """
        Transmitted IEEE 802.3 TLVs.
        """
        return pulumi.get(self, "n8023_tlvs")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

