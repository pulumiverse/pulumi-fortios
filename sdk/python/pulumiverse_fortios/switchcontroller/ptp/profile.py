# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = ['ProfileArgs', 'Profile']

@pulumi.input_type
class ProfileArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pdelay_req_interval: Optional[pulumi.Input[str]] = None,
                 ptp_profile: Optional[pulumi.Input[str]] = None,
                 transport: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Profile resource.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] domain: Configure PTP domain value (0 - 255, default = 254).
        :param pulumi.Input[str] mode: Select PTP mode. Valid values: `transparent-e2e`, `transparent-p2p`.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] pdelay_req_interval: Configure PTP peer delay request interval. Valid values: `1sec`, `2sec`, `4sec`, `8sec`, `16sec`, `32sec`.
        :param pulumi.Input[str] ptp_profile: Configure PTP power profile. Valid values: `C37.238-2017`.
        :param pulumi.Input[str] transport: Configure PTP transport mode. Valid values: `l2-mcast`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pdelay_req_interval is not None:
            pulumi.set(__self__, "pdelay_req_interval", pdelay_req_interval)
        if ptp_profile is not None:
            pulumi.set(__self__, "ptp_profile", ptp_profile)
        if transport is not None:
            pulumi.set(__self__, "transport", transport)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[int]]:
        """
        Configure PTP domain value (0 - 255, default = 254).
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Select PTP mode. Valid values: `transparent-e2e`, `transparent-p2p`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pdelayReqInterval")
    def pdelay_req_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Configure PTP peer delay request interval. Valid values: `1sec`, `2sec`, `4sec`, `8sec`, `16sec`, `32sec`.
        """
        return pulumi.get(self, "pdelay_req_interval")

    @pdelay_req_interval.setter
    def pdelay_req_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdelay_req_interval", value)

    @property
    @pulumi.getter(name="ptpProfile")
    def ptp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Configure PTP power profile. Valid values: `C37.238-2017`.
        """
        return pulumi.get(self, "ptp_profile")

    @ptp_profile.setter
    def ptp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ptp_profile", value)

    @property
    @pulumi.getter
    def transport(self) -> Optional[pulumi.Input[str]]:
        """
        Configure PTP transport mode. Valid values: `l2-mcast`.
        """
        return pulumi.get(self, "transport")

    @transport.setter
    def transport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transport", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _ProfileState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pdelay_req_interval: Optional[pulumi.Input[str]] = None,
                 ptp_profile: Optional[pulumi.Input[str]] = None,
                 transport: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Profile resources.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] domain: Configure PTP domain value (0 - 255, default = 254).
        :param pulumi.Input[str] mode: Select PTP mode. Valid values: `transparent-e2e`, `transparent-p2p`.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] pdelay_req_interval: Configure PTP peer delay request interval. Valid values: `1sec`, `2sec`, `4sec`, `8sec`, `16sec`, `32sec`.
        :param pulumi.Input[str] ptp_profile: Configure PTP power profile. Valid values: `C37.238-2017`.
        :param pulumi.Input[str] transport: Configure PTP transport mode. Valid values: `l2-mcast`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pdelay_req_interval is not None:
            pulumi.set(__self__, "pdelay_req_interval", pdelay_req_interval)
        if ptp_profile is not None:
            pulumi.set(__self__, "ptp_profile", ptp_profile)
        if transport is not None:
            pulumi.set(__self__, "transport", transport)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[int]]:
        """
        Configure PTP domain value (0 - 255, default = 254).
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Select PTP mode. Valid values: `transparent-e2e`, `transparent-p2p`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pdelayReqInterval")
    def pdelay_req_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Configure PTP peer delay request interval. Valid values: `1sec`, `2sec`, `4sec`, `8sec`, `16sec`, `32sec`.
        """
        return pulumi.get(self, "pdelay_req_interval")

    @pdelay_req_interval.setter
    def pdelay_req_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdelay_req_interval", value)

    @property
    @pulumi.getter(name="ptpProfile")
    def ptp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Configure PTP power profile. Valid values: `C37.238-2017`.
        """
        return pulumi.get(self, "ptp_profile")

    @ptp_profile.setter
    def ptp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ptp_profile", value)

    @property
    @pulumi.getter
    def transport(self) -> Optional[pulumi.Input[str]]:
        """
        Configure PTP transport mode. Valid values: `l2-mcast`.
        """
        return pulumi.get(self, "transport")

    @transport.setter
    def transport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transport", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Profile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pdelay_req_interval: Optional[pulumi.Input[str]] = None,
                 ptp_profile: Optional[pulumi.Input[str]] = None,
                 transport: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Global PTP profile. Applies to FortiOS Version `>= 7.4.1`.

        ## Import

        SwitchControllerPtp Profile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/ptp/profile:Profile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/ptp/profile:Profile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] domain: Configure PTP domain value (0 - 255, default = 254).
        :param pulumi.Input[str] mode: Select PTP mode. Valid values: `transparent-e2e`, `transparent-p2p`.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] pdelay_req_interval: Configure PTP peer delay request interval. Valid values: `1sec`, `2sec`, `4sec`, `8sec`, `16sec`, `32sec`.
        :param pulumi.Input[str] ptp_profile: Configure PTP power profile. Valid values: `C37.238-2017`.
        :param pulumi.Input[str] transport: Configure PTP transport mode. Valid values: `l2-mcast`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Global PTP profile. Applies to FortiOS Version `>= 7.4.1`.

        ## Import

        SwitchControllerPtp Profile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/ptp/profile:Profile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/ptp/profile:Profile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pdelay_req_interval: Optional[pulumi.Input[str]] = None,
                 ptp_profile: Optional[pulumi.Input[str]] = None,
                 transport: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProfileArgs.__new__(ProfileArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["domain"] = domain
            __props__.__dict__["mode"] = mode
            __props__.__dict__["name"] = name
            __props__.__dict__["pdelay_req_interval"] = pdelay_req_interval
            __props__.__dict__["ptp_profile"] = ptp_profile
            __props__.__dict__["transport"] = transport
            __props__.__dict__["vdomparam"] = vdomparam
        super(Profile, __self__).__init__(
            'fortios:switchcontroller/ptp/profile:Profile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[int]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pdelay_req_interval: Optional[pulumi.Input[str]] = None,
            ptp_profile: Optional[pulumi.Input[str]] = None,
            transport: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Profile':
        """
        Get an existing Profile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] domain: Configure PTP domain value (0 - 255, default = 254).
        :param pulumi.Input[str] mode: Select PTP mode. Valid values: `transparent-e2e`, `transparent-p2p`.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] pdelay_req_interval: Configure PTP peer delay request interval. Valid values: `1sec`, `2sec`, `4sec`, `8sec`, `16sec`, `32sec`.
        :param pulumi.Input[str] ptp_profile: Configure PTP power profile. Valid values: `C37.238-2017`.
        :param pulumi.Input[str] transport: Configure PTP transport mode. Valid values: `l2-mcast`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProfileState.__new__(_ProfileState)

        __props__.__dict__["description"] = description
        __props__.__dict__["domain"] = domain
        __props__.__dict__["mode"] = mode
        __props__.__dict__["name"] = name
        __props__.__dict__["pdelay_req_interval"] = pdelay_req_interval
        __props__.__dict__["ptp_profile"] = ptp_profile
        __props__.__dict__["transport"] = transport
        __props__.__dict__["vdomparam"] = vdomparam
        return Profile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[int]:
        """
        Configure PTP domain value (0 - 255, default = 254).
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        Select PTP mode. Valid values: `transparent-e2e`, `transparent-p2p`.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pdelayReqInterval")
    def pdelay_req_interval(self) -> pulumi.Output[str]:
        """
        Configure PTP peer delay request interval. Valid values: `1sec`, `2sec`, `4sec`, `8sec`, `16sec`, `32sec`.
        """
        return pulumi.get(self, "pdelay_req_interval")

    @property
    @pulumi.getter(name="ptpProfile")
    def ptp_profile(self) -> pulumi.Output[str]:
        """
        Configure PTP power profile. Valid values: `C37.238-2017`.
        """
        return pulumi.get(self, "ptp_profile")

    @property
    @pulumi.getter
    def transport(self) -> pulumi.Output[str]:
        """
        Configure PTP transport mode. Valid values: `l2-mcast`.
        """
        return pulumi.get(self, "transport")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

