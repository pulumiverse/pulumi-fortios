# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = ['PolicyArgs', 'Policy']

@pulumi.input_type
class PolicyArgs:
    def __init__(__self__, *,
                 igmp_flood_report: Optional[pulumi.Input[str]] = None,
                 igmp_flood_traffic: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 poe_status: Optional[pulumi.Input[str]] = None,
                 qos_policy: Optional[pulumi.Input[str]] = None,
                 storm_control_policy: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Policy resource.
        :param pulumi.Input[str] igmp_flood_report: Enable/disable IGMP flood report. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] igmp_flood_traffic: Enable/disable IGMP flood traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Auto-Config QoS policy name
        :param pulumi.Input[str] poe_status: Enable/disable PoE status. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] qos_policy: Auto-Config QoS policy.
        :param pulumi.Input[str] storm_control_policy: Auto-Config storm control policy.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if igmp_flood_report is not None:
            pulumi.set(__self__, "igmp_flood_report", igmp_flood_report)
        if igmp_flood_traffic is not None:
            pulumi.set(__self__, "igmp_flood_traffic", igmp_flood_traffic)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if poe_status is not None:
            pulumi.set(__self__, "poe_status", poe_status)
        if qos_policy is not None:
            pulumi.set(__self__, "qos_policy", qos_policy)
        if storm_control_policy is not None:
            pulumi.set(__self__, "storm_control_policy", storm_control_policy)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="igmpFloodReport")
    def igmp_flood_report(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IGMP flood report. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "igmp_flood_report")

    @igmp_flood_report.setter
    def igmp_flood_report(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "igmp_flood_report", value)

    @property
    @pulumi.getter(name="igmpFloodTraffic")
    def igmp_flood_traffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IGMP flood traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "igmp_flood_traffic")

    @igmp_flood_traffic.setter
    def igmp_flood_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "igmp_flood_traffic", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Auto-Config QoS policy name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="poeStatus")
    def poe_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PoE status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "poe_status")

    @poe_status.setter
    def poe_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_status", value)

    @property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Auto-Config QoS policy.
        """
        return pulumi.get(self, "qos_policy")

    @qos_policy.setter
    def qos_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_policy", value)

    @property
    @pulumi.getter(name="stormControlPolicy")
    def storm_control_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Auto-Config storm control policy.
        """
        return pulumi.get(self, "storm_control_policy")

    @storm_control_policy.setter
    def storm_control_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storm_control_policy", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _PolicyState:
    def __init__(__self__, *,
                 igmp_flood_report: Optional[pulumi.Input[str]] = None,
                 igmp_flood_traffic: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 poe_status: Optional[pulumi.Input[str]] = None,
                 qos_policy: Optional[pulumi.Input[str]] = None,
                 storm_control_policy: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Policy resources.
        :param pulumi.Input[str] igmp_flood_report: Enable/disable IGMP flood report. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] igmp_flood_traffic: Enable/disable IGMP flood traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Auto-Config QoS policy name
        :param pulumi.Input[str] poe_status: Enable/disable PoE status. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] qos_policy: Auto-Config QoS policy.
        :param pulumi.Input[str] storm_control_policy: Auto-Config storm control policy.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if igmp_flood_report is not None:
            pulumi.set(__self__, "igmp_flood_report", igmp_flood_report)
        if igmp_flood_traffic is not None:
            pulumi.set(__self__, "igmp_flood_traffic", igmp_flood_traffic)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if poe_status is not None:
            pulumi.set(__self__, "poe_status", poe_status)
        if qos_policy is not None:
            pulumi.set(__self__, "qos_policy", qos_policy)
        if storm_control_policy is not None:
            pulumi.set(__self__, "storm_control_policy", storm_control_policy)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="igmpFloodReport")
    def igmp_flood_report(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IGMP flood report. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "igmp_flood_report")

    @igmp_flood_report.setter
    def igmp_flood_report(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "igmp_flood_report", value)

    @property
    @pulumi.getter(name="igmpFloodTraffic")
    def igmp_flood_traffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IGMP flood traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "igmp_flood_traffic")

    @igmp_flood_traffic.setter
    def igmp_flood_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "igmp_flood_traffic", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Auto-Config QoS policy name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="poeStatus")
    def poe_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PoE status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "poe_status")

    @poe_status.setter
    def poe_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_status", value)

    @property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Auto-Config QoS policy.
        """
        return pulumi.get(self, "qos_policy")

    @qos_policy.setter
    def qos_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_policy", value)

    @property
    @pulumi.getter(name="stormControlPolicy")
    def storm_control_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Auto-Config storm control policy.
        """
        return pulumi.get(self, "storm_control_policy")

    @storm_control_policy.setter
    def storm_control_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storm_control_policy", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Policy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 igmp_flood_report: Optional[pulumi.Input[str]] = None,
                 igmp_flood_traffic: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 poe_status: Optional[pulumi.Input[str]] = None,
                 qos_policy: Optional[pulumi.Input[str]] = None,
                 storm_control_policy: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure FortiSwitch Auto-Config QoS policy.

        ## Import

        SwitchControllerAutoConfig Policy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/autoconfig/policy:Policy labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/autoconfig/policy:Policy labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] igmp_flood_report: Enable/disable IGMP flood report. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] igmp_flood_traffic: Enable/disable IGMP flood traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Auto-Config QoS policy name
        :param pulumi.Input[str] poe_status: Enable/disable PoE status. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] qos_policy: Auto-Config QoS policy.
        :param pulumi.Input[str] storm_control_policy: Auto-Config storm control policy.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure FortiSwitch Auto-Config QoS policy.

        ## Import

        SwitchControllerAutoConfig Policy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/autoconfig/policy:Policy labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/autoconfig/policy:Policy labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param PolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 igmp_flood_report: Optional[pulumi.Input[str]] = None,
                 igmp_flood_traffic: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 poe_status: Optional[pulumi.Input[str]] = None,
                 qos_policy: Optional[pulumi.Input[str]] = None,
                 storm_control_policy: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyArgs.__new__(PolicyArgs)

            __props__.__dict__["igmp_flood_report"] = igmp_flood_report
            __props__.__dict__["igmp_flood_traffic"] = igmp_flood_traffic
            __props__.__dict__["name"] = name
            __props__.__dict__["poe_status"] = poe_status
            __props__.__dict__["qos_policy"] = qos_policy
            __props__.__dict__["storm_control_policy"] = storm_control_policy
            __props__.__dict__["vdomparam"] = vdomparam
        super(Policy, __self__).__init__(
            'fortios:switchcontroller/autoconfig/policy:Policy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            igmp_flood_report: Optional[pulumi.Input[str]] = None,
            igmp_flood_traffic: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            poe_status: Optional[pulumi.Input[str]] = None,
            qos_policy: Optional[pulumi.Input[str]] = None,
            storm_control_policy: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Policy':
        """
        Get an existing Policy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] igmp_flood_report: Enable/disable IGMP flood report. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] igmp_flood_traffic: Enable/disable IGMP flood traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Auto-Config QoS policy name
        :param pulumi.Input[str] poe_status: Enable/disable PoE status. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] qos_policy: Auto-Config QoS policy.
        :param pulumi.Input[str] storm_control_policy: Auto-Config storm control policy.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyState.__new__(_PolicyState)

        __props__.__dict__["igmp_flood_report"] = igmp_flood_report
        __props__.__dict__["igmp_flood_traffic"] = igmp_flood_traffic
        __props__.__dict__["name"] = name
        __props__.__dict__["poe_status"] = poe_status
        __props__.__dict__["qos_policy"] = qos_policy
        __props__.__dict__["storm_control_policy"] = storm_control_policy
        __props__.__dict__["vdomparam"] = vdomparam
        return Policy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="igmpFloodReport")
    def igmp_flood_report(self) -> pulumi.Output[str]:
        """
        Enable/disable IGMP flood report. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "igmp_flood_report")

    @property
    @pulumi.getter(name="igmpFloodTraffic")
    def igmp_flood_traffic(self) -> pulumi.Output[str]:
        """
        Enable/disable IGMP flood traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "igmp_flood_traffic")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Auto-Config QoS policy name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="poeStatus")
    def poe_status(self) -> pulumi.Output[str]:
        """
        Enable/disable PoE status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "poe_status")

    @property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> pulumi.Output[str]:
        """
        Auto-Config QoS policy.
        """
        return pulumi.get(self, "qos_policy")

    @property
    @pulumi.getter(name="stormControlPolicy")
    def storm_control_policy(self) -> pulumi.Output[str]:
        """
        Auto-Config storm control policy.
        """
        return pulumi.get(self, "storm_control_policy")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

