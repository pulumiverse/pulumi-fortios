# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['StpsettingsArgs', 'Stpsettings']

@pulumi.input_type
class StpsettingsArgs:
    def __init__(__self__, *,
                 forward_time: Optional[pulumi.Input[int]] = None,
                 hello_time: Optional[pulumi.Input[int]] = None,
                 max_age: Optional[pulumi.Input[int]] = None,
                 max_hops: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pending_timer: Optional[pulumi.Input[int]] = None,
                 revision: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Stpsettings resource.
        :param pulumi.Input[int] forward_time: Period of time a port is in listening and learning state (4 - 30 sec, default = 15).
        :param pulumi.Input[int] hello_time: Period of time between successive STP frame Bridge Protocol Data Units (BPDUs) sent on a port (1 - 10 sec, default = 2).
        :param pulumi.Input[int] max_age: Maximum time before a bridge port saves its configuration BPDU information (6 - 40 sec, default = 20).
        :param pulumi.Input[int] max_hops: Maximum number of hops between the root bridge and the furthest bridge (1- 40, default = 20).
        :param pulumi.Input[str] name: Name of global STP settings configuration.
        :param pulumi.Input[int] pending_timer: Pending time (1 - 15 sec, default = 4).
        :param pulumi.Input[int] revision: STP revision number (0 - 65535).
        :param pulumi.Input[str] status: Enable/disable STP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if forward_time is not None:
            pulumi.set(__self__, "forward_time", forward_time)
        if hello_time is not None:
            pulumi.set(__self__, "hello_time", hello_time)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if max_hops is not None:
            pulumi.set(__self__, "max_hops", max_hops)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pending_timer is not None:
            pulumi.set(__self__, "pending_timer", pending_timer)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="forwardTime")
    def forward_time(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time a port is in listening and learning state (4 - 30 sec, default = 15).
        """
        return pulumi.get(self, "forward_time")

    @forward_time.setter
    def forward_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "forward_time", value)

    @property
    @pulumi.getter(name="helloTime")
    def hello_time(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time between successive STP frame Bridge Protocol Data Units (BPDUs) sent on a port (1 - 10 sec, default = 2).
        """
        return pulumi.get(self, "hello_time")

    @hello_time.setter
    def hello_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_time", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum time before a bridge port saves its configuration BPDU information (6 - 40 sec, default = 20).
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter(name="maxHops")
    def max_hops(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of hops between the root bridge and the furthest bridge (1- 40, default = 20).
        """
        return pulumi.get(self, "max_hops")

    @max_hops.setter
    def max_hops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_hops", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of global STP settings configuration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pendingTimer")
    def pending_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Pending time (1 - 15 sec, default = 4).
        """
        return pulumi.get(self, "pending_timer")

    @pending_timer.setter
    def pending_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pending_timer", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[int]]:
        """
        STP revision number (0 - 65535).
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "revision", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable STP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _StpsettingsState:
    def __init__(__self__, *,
                 forward_time: Optional[pulumi.Input[int]] = None,
                 hello_time: Optional[pulumi.Input[int]] = None,
                 max_age: Optional[pulumi.Input[int]] = None,
                 max_hops: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pending_timer: Optional[pulumi.Input[int]] = None,
                 revision: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Stpsettings resources.
        :param pulumi.Input[int] forward_time: Period of time a port is in listening and learning state (4 - 30 sec, default = 15).
        :param pulumi.Input[int] hello_time: Period of time between successive STP frame Bridge Protocol Data Units (BPDUs) sent on a port (1 - 10 sec, default = 2).
        :param pulumi.Input[int] max_age: Maximum time before a bridge port saves its configuration BPDU information (6 - 40 sec, default = 20).
        :param pulumi.Input[int] max_hops: Maximum number of hops between the root bridge and the furthest bridge (1- 40, default = 20).
        :param pulumi.Input[str] name: Name of global STP settings configuration.
        :param pulumi.Input[int] pending_timer: Pending time (1 - 15 sec, default = 4).
        :param pulumi.Input[int] revision: STP revision number (0 - 65535).
        :param pulumi.Input[str] status: Enable/disable STP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if forward_time is not None:
            pulumi.set(__self__, "forward_time", forward_time)
        if hello_time is not None:
            pulumi.set(__self__, "hello_time", hello_time)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if max_hops is not None:
            pulumi.set(__self__, "max_hops", max_hops)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pending_timer is not None:
            pulumi.set(__self__, "pending_timer", pending_timer)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="forwardTime")
    def forward_time(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time a port is in listening and learning state (4 - 30 sec, default = 15).
        """
        return pulumi.get(self, "forward_time")

    @forward_time.setter
    def forward_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "forward_time", value)

    @property
    @pulumi.getter(name="helloTime")
    def hello_time(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time between successive STP frame Bridge Protocol Data Units (BPDUs) sent on a port (1 - 10 sec, default = 2).
        """
        return pulumi.get(self, "hello_time")

    @hello_time.setter
    def hello_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_time", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum time before a bridge port saves its configuration BPDU information (6 - 40 sec, default = 20).
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter(name="maxHops")
    def max_hops(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of hops between the root bridge and the furthest bridge (1- 40, default = 20).
        """
        return pulumi.get(self, "max_hops")

    @max_hops.setter
    def max_hops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_hops", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of global STP settings configuration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pendingTimer")
    def pending_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Pending time (1 - 15 sec, default = 4).
        """
        return pulumi.get(self, "pending_timer")

    @pending_timer.setter
    def pending_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pending_timer", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[int]]:
        """
        STP revision number (0 - 65535).
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "revision", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable STP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Stpsettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 forward_time: Optional[pulumi.Input[int]] = None,
                 hello_time: Optional[pulumi.Input[int]] = None,
                 max_age: Optional[pulumi.Input[int]] = None,
                 max_hops: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pending_timer: Optional[pulumi.Input[int]] = None,
                 revision: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure FortiSwitch spanning tree protocol (STP).

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.switchcontroller.Stpsettings("trname",
            forward_time=15,
            hello_time=2,
            max_age=20,
            max_hops=20,
            pending_timer=4,
            revision=0,
            status="enable")
        ```

        ## Import

        SwitchController StpSettings can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/stpsettings:Stpsettings labelname SwitchControllerStpSettings
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/stpsettings:Stpsettings labelname SwitchControllerStpSettings
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] forward_time: Period of time a port is in listening and learning state (4 - 30 sec, default = 15).
        :param pulumi.Input[int] hello_time: Period of time between successive STP frame Bridge Protocol Data Units (BPDUs) sent on a port (1 - 10 sec, default = 2).
        :param pulumi.Input[int] max_age: Maximum time before a bridge port saves its configuration BPDU information (6 - 40 sec, default = 20).
        :param pulumi.Input[int] max_hops: Maximum number of hops between the root bridge and the furthest bridge (1- 40, default = 20).
        :param pulumi.Input[str] name: Name of global STP settings configuration.
        :param pulumi.Input[int] pending_timer: Pending time (1 - 15 sec, default = 4).
        :param pulumi.Input[int] revision: STP revision number (0 - 65535).
        :param pulumi.Input[str] status: Enable/disable STP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[StpsettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure FortiSwitch spanning tree protocol (STP).

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.switchcontroller.Stpsettings("trname",
            forward_time=15,
            hello_time=2,
            max_age=20,
            max_hops=20,
            pending_timer=4,
            revision=0,
            status="enable")
        ```

        ## Import

        SwitchController StpSettings can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/stpsettings:Stpsettings labelname SwitchControllerStpSettings
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/stpsettings:Stpsettings labelname SwitchControllerStpSettings
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param StpsettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StpsettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 forward_time: Optional[pulumi.Input[int]] = None,
                 hello_time: Optional[pulumi.Input[int]] = None,
                 max_age: Optional[pulumi.Input[int]] = None,
                 max_hops: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pending_timer: Optional[pulumi.Input[int]] = None,
                 revision: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StpsettingsArgs.__new__(StpsettingsArgs)

            __props__.__dict__["forward_time"] = forward_time
            __props__.__dict__["hello_time"] = hello_time
            __props__.__dict__["max_age"] = max_age
            __props__.__dict__["max_hops"] = max_hops
            __props__.__dict__["name"] = name
            __props__.__dict__["pending_timer"] = pending_timer
            __props__.__dict__["revision"] = revision
            __props__.__dict__["status"] = status
            __props__.__dict__["vdomparam"] = vdomparam
        super(Stpsettings, __self__).__init__(
            'fortios:switchcontroller/stpsettings:Stpsettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            forward_time: Optional[pulumi.Input[int]] = None,
            hello_time: Optional[pulumi.Input[int]] = None,
            max_age: Optional[pulumi.Input[int]] = None,
            max_hops: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pending_timer: Optional[pulumi.Input[int]] = None,
            revision: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Stpsettings':
        """
        Get an existing Stpsettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] forward_time: Period of time a port is in listening and learning state (4 - 30 sec, default = 15).
        :param pulumi.Input[int] hello_time: Period of time between successive STP frame Bridge Protocol Data Units (BPDUs) sent on a port (1 - 10 sec, default = 2).
        :param pulumi.Input[int] max_age: Maximum time before a bridge port saves its configuration BPDU information (6 - 40 sec, default = 20).
        :param pulumi.Input[int] max_hops: Maximum number of hops between the root bridge and the furthest bridge (1- 40, default = 20).
        :param pulumi.Input[str] name: Name of global STP settings configuration.
        :param pulumi.Input[int] pending_timer: Pending time (1 - 15 sec, default = 4).
        :param pulumi.Input[int] revision: STP revision number (0 - 65535).
        :param pulumi.Input[str] status: Enable/disable STP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StpsettingsState.__new__(_StpsettingsState)

        __props__.__dict__["forward_time"] = forward_time
        __props__.__dict__["hello_time"] = hello_time
        __props__.__dict__["max_age"] = max_age
        __props__.__dict__["max_hops"] = max_hops
        __props__.__dict__["name"] = name
        __props__.__dict__["pending_timer"] = pending_timer
        __props__.__dict__["revision"] = revision
        __props__.__dict__["status"] = status
        __props__.__dict__["vdomparam"] = vdomparam
        return Stpsettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="forwardTime")
    def forward_time(self) -> pulumi.Output[int]:
        """
        Period of time a port is in listening and learning state (4 - 30 sec, default = 15).
        """
        return pulumi.get(self, "forward_time")

    @property
    @pulumi.getter(name="helloTime")
    def hello_time(self) -> pulumi.Output[int]:
        """
        Period of time between successive STP frame Bridge Protocol Data Units (BPDUs) sent on a port (1 - 10 sec, default = 2).
        """
        return pulumi.get(self, "hello_time")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> pulumi.Output[int]:
        """
        Maximum time before a bridge port saves its configuration BPDU information (6 - 40 sec, default = 20).
        """
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter(name="maxHops")
    def max_hops(self) -> pulumi.Output[int]:
        """
        Maximum number of hops between the root bridge and the furthest bridge (1- 40, default = 20).
        """
        return pulumi.get(self, "max_hops")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of global STP settings configuration.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pendingTimer")
    def pending_timer(self) -> pulumi.Output[int]:
        """
        Pending time (1 - 15 sec, default = 4).
        """
        return pulumi.get(self, "pending_timer")

    @property
    @pulumi.getter
    def revision(self) -> pulumi.Output[int]:
        """
        STP revision number (0 - 65535).
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable STP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

