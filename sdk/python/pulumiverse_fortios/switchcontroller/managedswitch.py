# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ManagedswitchArgs', 'Managedswitch']

@pulumi.input_type
class ManagedswitchArgs:
    def __init__(__self__, *,
                 fsw_wan1_peer: pulumi.Input[str],
                 switch_id: pulumi.Input[str],
                 access_profile: Optional[pulumi.Input[str]] = None,
                 custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchCustomCommandArgs']]]] = None,
                 delayed_restart_trigger: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping_static_clients: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchDhcpSnoopingStaticClientArgs']]]] = None,
                 directly_connected: Optional[pulumi.Input[int]] = None,
                 dynamic_capability: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 dynamically_discovered: Optional[pulumi.Input[int]] = None,
                 firmware_provision: Optional[pulumi.Input[str]] = None,
                 firmware_provision_latest: Optional[pulumi.Input[str]] = None,
                 firmware_provision_version: Optional[pulumi.Input[str]] = None,
                 flow_identity: Optional[pulumi.Input[str]] = None,
                 fsw_wan1_admin: Optional[pulumi.Input[str]] = None,
                 fsw_wan2_admin: Optional[pulumi.Input[str]] = None,
                 fsw_wan2_peer: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 igmp_snooping: Optional[pulumi.Input['ManagedswitchIgmpSnoopingArgs']] = None,
                 ip_source_guards: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchIpSourceGuardArgs']]]] = None,
                 l3_discovered: Optional[pulumi.Input[int]] = None,
                 max_allowed_trunk_members: Optional[pulumi.Input[int]] = None,
                 mclag_igmp_snooping_aware: Optional[pulumi.Input[str]] = None,
                 mgmt_mode: Optional[pulumi.Input[int]] = None,
                 mirrors: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchMirrorArgs']]]] = None,
                 n8021x_settings: Optional[pulumi.Input['ManagedswitchN8021xSettingsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_snmp_community: Optional[pulumi.Input[str]] = None,
                 override_snmp_sysinfo: Optional[pulumi.Input[str]] = None,
                 override_snmp_trap_threshold: Optional[pulumi.Input[str]] = None,
                 override_snmp_user: Optional[pulumi.Input[str]] = None,
                 owner_vdom: Optional[pulumi.Input[str]] = None,
                 poe_detection_type: Optional[pulumi.Input[int]] = None,
                 poe_lldp_detection: Optional[pulumi.Input[str]] = None,
                 poe_pre_standard_detection: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchPortArgs']]]] = None,
                 pre_provisioned: Optional[pulumi.Input[int]] = None,
                 ptp_profile: Optional[pulumi.Input[str]] = None,
                 ptp_status: Optional[pulumi.Input[str]] = None,
                 purdue_level: Optional[pulumi.Input[str]] = None,
                 qos_drop_policy: Optional[pulumi.Input[str]] = None,
                 qos_red_probability: Optional[pulumi.Input[int]] = None,
                 radius_nas_ip: Optional[pulumi.Input[str]] = None,
                 radius_nas_ip_override: Optional[pulumi.Input[str]] = None,
                 remote_logs: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchRemoteLogArgs']]]] = None,
                 route_offload: Optional[pulumi.Input[str]] = None,
                 route_offload_mclag: Optional[pulumi.Input[str]] = None,
                 route_offload_routers: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchRouteOffloadRouterArgs']]]] = None,
                 sn: Optional[pulumi.Input[str]] = None,
                 snmp_communities: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchSnmpCommunityArgs']]]] = None,
                 snmp_sysinfo: Optional[pulumi.Input['ManagedswitchSnmpSysinfoArgs']] = None,
                 snmp_trap_threshold: Optional[pulumi.Input['ManagedswitchSnmpTrapThresholdArgs']] = None,
                 snmp_users: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchSnmpUserArgs']]]] = None,
                 staged_image_version: Optional[pulumi.Input[str]] = None,
                 static_macs: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchStaticMacArgs']]]] = None,
                 storm_control: Optional[pulumi.Input['ManagedswitchStormControlArgs']] = None,
                 stp_instances: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchStpInstanceArgs']]]] = None,
                 stp_settings: Optional[pulumi.Input['ManagedswitchStpSettingsArgs']] = None,
                 switch_device_tag: Optional[pulumi.Input[str]] = None,
                 switch_dhcp_opt43_key: Optional[pulumi.Input[str]] = None,
                 switch_log: Optional[pulumi.Input['ManagedswitchSwitchLogArgs']] = None,
                 switch_profile: Optional[pulumi.Input[str]] = None,
                 switch_stp_settings: Optional[pulumi.Input['ManagedswitchSwitchStpSettingsArgs']] = None,
                 tdr_supported: Optional[pulumi.Input[str]] = None,
                 tunnel_discovered: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchVlanArgs']]]] = None):
        """
        The set of arguments for constructing a Managedswitch resource.
        :param pulumi.Input[str] fsw_wan1_peer: Fortiswitch WAN1 peer port.
        :param pulumi.Input[str] switch_id: Managed-switch id.
        :param pulumi.Input[str] access_profile: FortiSwitch access profile.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchCustomCommandArgs']]] custom_commands: Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `custom_command` block is documented below.
        :param pulumi.Input[int] delayed_restart_trigger: Delayed restart triggered for this FortiSwitch.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] dhcp_server_access_list: DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchDhcpSnoopingStaticClientArgs']]] dhcp_snooping_static_clients: Configure FortiSwitch DHCP snooping static clients. The structure of `dhcp_snooping_static_client` block is documented below.
        :param pulumi.Input[int] directly_connected: Directly connected FortiSwitch.
        :param pulumi.Input[int] dynamic_capability: List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] dynamically_discovered: Dynamically discovered FortiSwitch.
        :param pulumi.Input[str] firmware_provision: Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] firmware_provision_latest: Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
        :param pulumi.Input[str] firmware_provision_version: Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
        :param pulumi.Input[str] flow_identity: Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
        :param pulumi.Input[str] fsw_wan1_admin: FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        :param pulumi.Input[str] fsw_wan2_admin: FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        :param pulumi.Input[str] fsw_wan2_peer: FortiSwitch WAN2 peer port.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input['ManagedswitchIgmpSnoopingArgs'] igmp_snooping: Configure FortiSwitch IGMP snooping global settings. The structure of `igmp_snooping` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchIpSourceGuardArgs']]] ip_source_guards: IP source guard. The structure of `ip_source_guard` block is documented below.
        :param pulumi.Input[int] l3_discovered: Layer 3 management discovered.
        :param pulumi.Input[int] max_allowed_trunk_members: FortiSwitch maximum allowed trunk members.
        :param pulumi.Input[str] mclag_igmp_snooping_aware: Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mgmt_mode: FortiLink management mode.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchMirrorArgs']]] mirrors: Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
        :param pulumi.Input['ManagedswitchN8021xSettingsArgs'] n8021x_settings: Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n802_1x_settings` block is documented below.
        :param pulumi.Input[str] name: Managed-switch name.
        :param pulumi.Input[str] override_snmp_community: Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_snmp_sysinfo: Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] override_snmp_trap_threshold: Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_snmp_user: Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] owner_vdom: VDOM which owner of port belongs to.
        :param pulumi.Input[int] poe_detection_type: PoE detection type for FortiSwitch.
        :param pulumi.Input[str] poe_lldp_detection: Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] poe_pre_standard_detection: Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchPortArgs']]] ports: Managed-switch port list. The structure of `ports` block is documented below.
        :param pulumi.Input[int] pre_provisioned: Pre-provisioned managed switch.
        :param pulumi.Input[str] ptp_profile: PTP profile configuration.
        :param pulumi.Input[str] ptp_status: Enable/disable PTP profile on this FortiSwitch. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] purdue_level: Purdue Level of this FortiSwitch. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
        :param pulumi.Input[str] qos_drop_policy: Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
        :param pulumi.Input[int] qos_red_probability: Set QoS RED/WRED drop probability.
        :param pulumi.Input[str] radius_nas_ip: NAS-IP address.
        :param pulumi.Input[str] radius_nas_ip_override: Use locally defined NAS-IP. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchRemoteLogArgs']]] remote_logs: Configure logging by FortiSwitch device to a remote syslog server. The structure of `remote_log` block is documented below.
        :param pulumi.Input[str] route_offload: Enable/disable route offload on this FortiSwitch. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] route_offload_mclag: Enable/disable route offload MCLAG on this FortiSwitch. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchRouteOffloadRouterArgs']]] route_offload_routers: Configure route offload MCLAG IP address. The structure of `route_offload_router` block is documented below.
        :param pulumi.Input[str] sn: Managed-switch serial number.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchSnmpCommunityArgs']]] snmp_communities: Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmp_community` block is documented below.
        :param pulumi.Input['ManagedswitchSnmpSysinfoArgs'] snmp_sysinfo: Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmp_sysinfo` block is documented below.
        :param pulumi.Input['ManagedswitchSnmpTrapThresholdArgs'] snmp_trap_threshold: Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmp_trap_threshold` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchSnmpUserArgs']]] snmp_users: Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmp_user` block is documented below.
        :param pulumi.Input[str] staged_image_version: Staged image version for FortiSwitch.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchStaticMacArgs']]] static_macs: Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `static_mac` block is documented below.
        :param pulumi.Input['ManagedswitchStormControlArgs'] storm_control: Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `storm_control` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchStpInstanceArgs']]] stp_instances: Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stp_instance` block is documented below.
        :param pulumi.Input['ManagedswitchStpSettingsArgs'] stp_settings: Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stp_settings` block is documented below.
        :param pulumi.Input[str] switch_device_tag: User definable label/tag.
        :param pulumi.Input[str] switch_dhcp_opt43_key: DHCP option43 key.
        :param pulumi.Input['ManagedswitchSwitchLogArgs'] switch_log: Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switch_log` block is documented below.
        :param pulumi.Input[str] switch_profile: FortiSwitch profile.
        :param pulumi.Input['ManagedswitchSwitchStpSettingsArgs'] switch_stp_settings: Configure spanning tree protocol (STP). The structure of `switch_stp_settings` block is documented below.
        :param pulumi.Input[str] tdr_supported: TDR supported.
        :param pulumi.Input[int] tunnel_discovered: SOCKS tunnel management discovered.
        :param pulumi.Input[str] type: Indication of switch type, physical or virtual. Valid values: `virtual`, `physical`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] version: FortiSwitch version.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchVlanArgs']]] vlans: Configure VLAN assignment priority. The structure of `vlan` block is documented below.
        """
        pulumi.set(__self__, "fsw_wan1_peer", fsw_wan1_peer)
        pulumi.set(__self__, "switch_id", switch_id)
        if access_profile is not None:
            pulumi.set(__self__, "access_profile", access_profile)
        if custom_commands is not None:
            pulumi.set(__self__, "custom_commands", custom_commands)
        if delayed_restart_trigger is not None:
            pulumi.set(__self__, "delayed_restart_trigger", delayed_restart_trigger)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dhcp_server_access_list is not None:
            pulumi.set(__self__, "dhcp_server_access_list", dhcp_server_access_list)
        if dhcp_snooping_static_clients is not None:
            pulumi.set(__self__, "dhcp_snooping_static_clients", dhcp_snooping_static_clients)
        if directly_connected is not None:
            pulumi.set(__self__, "directly_connected", directly_connected)
        if dynamic_capability is not None:
            pulumi.set(__self__, "dynamic_capability", dynamic_capability)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if dynamically_discovered is not None:
            pulumi.set(__self__, "dynamically_discovered", dynamically_discovered)
        if firmware_provision is not None:
            pulumi.set(__self__, "firmware_provision", firmware_provision)
        if firmware_provision_latest is not None:
            pulumi.set(__self__, "firmware_provision_latest", firmware_provision_latest)
        if firmware_provision_version is not None:
            pulumi.set(__self__, "firmware_provision_version", firmware_provision_version)
        if flow_identity is not None:
            pulumi.set(__self__, "flow_identity", flow_identity)
        if fsw_wan1_admin is not None:
            pulumi.set(__self__, "fsw_wan1_admin", fsw_wan1_admin)
        if fsw_wan2_admin is not None:
            pulumi.set(__self__, "fsw_wan2_admin", fsw_wan2_admin)
        if fsw_wan2_peer is not None:
            pulumi.set(__self__, "fsw_wan2_peer", fsw_wan2_peer)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if igmp_snooping is not None:
            pulumi.set(__self__, "igmp_snooping", igmp_snooping)
        if ip_source_guards is not None:
            pulumi.set(__self__, "ip_source_guards", ip_source_guards)
        if l3_discovered is not None:
            pulumi.set(__self__, "l3_discovered", l3_discovered)
        if max_allowed_trunk_members is not None:
            pulumi.set(__self__, "max_allowed_trunk_members", max_allowed_trunk_members)
        if mclag_igmp_snooping_aware is not None:
            pulumi.set(__self__, "mclag_igmp_snooping_aware", mclag_igmp_snooping_aware)
        if mgmt_mode is not None:
            pulumi.set(__self__, "mgmt_mode", mgmt_mode)
        if mirrors is not None:
            pulumi.set(__self__, "mirrors", mirrors)
        if n8021x_settings is not None:
            pulumi.set(__self__, "n8021x_settings", n8021x_settings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_snmp_community is not None:
            pulumi.set(__self__, "override_snmp_community", override_snmp_community)
        if override_snmp_sysinfo is not None:
            pulumi.set(__self__, "override_snmp_sysinfo", override_snmp_sysinfo)
        if override_snmp_trap_threshold is not None:
            pulumi.set(__self__, "override_snmp_trap_threshold", override_snmp_trap_threshold)
        if override_snmp_user is not None:
            pulumi.set(__self__, "override_snmp_user", override_snmp_user)
        if owner_vdom is not None:
            pulumi.set(__self__, "owner_vdom", owner_vdom)
        if poe_detection_type is not None:
            pulumi.set(__self__, "poe_detection_type", poe_detection_type)
        if poe_lldp_detection is not None:
            pulumi.set(__self__, "poe_lldp_detection", poe_lldp_detection)
        if poe_pre_standard_detection is not None:
            pulumi.set(__self__, "poe_pre_standard_detection", poe_pre_standard_detection)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if pre_provisioned is not None:
            pulumi.set(__self__, "pre_provisioned", pre_provisioned)
        if ptp_profile is not None:
            pulumi.set(__self__, "ptp_profile", ptp_profile)
        if ptp_status is not None:
            pulumi.set(__self__, "ptp_status", ptp_status)
        if purdue_level is not None:
            pulumi.set(__self__, "purdue_level", purdue_level)
        if qos_drop_policy is not None:
            pulumi.set(__self__, "qos_drop_policy", qos_drop_policy)
        if qos_red_probability is not None:
            pulumi.set(__self__, "qos_red_probability", qos_red_probability)
        if radius_nas_ip is not None:
            pulumi.set(__self__, "radius_nas_ip", radius_nas_ip)
        if radius_nas_ip_override is not None:
            pulumi.set(__self__, "radius_nas_ip_override", radius_nas_ip_override)
        if remote_logs is not None:
            pulumi.set(__self__, "remote_logs", remote_logs)
        if route_offload is not None:
            pulumi.set(__self__, "route_offload", route_offload)
        if route_offload_mclag is not None:
            pulumi.set(__self__, "route_offload_mclag", route_offload_mclag)
        if route_offload_routers is not None:
            pulumi.set(__self__, "route_offload_routers", route_offload_routers)
        if sn is not None:
            pulumi.set(__self__, "sn", sn)
        if snmp_communities is not None:
            pulumi.set(__self__, "snmp_communities", snmp_communities)
        if snmp_sysinfo is not None:
            pulumi.set(__self__, "snmp_sysinfo", snmp_sysinfo)
        if snmp_trap_threshold is not None:
            pulumi.set(__self__, "snmp_trap_threshold", snmp_trap_threshold)
        if snmp_users is not None:
            pulumi.set(__self__, "snmp_users", snmp_users)
        if staged_image_version is not None:
            pulumi.set(__self__, "staged_image_version", staged_image_version)
        if static_macs is not None:
            pulumi.set(__self__, "static_macs", static_macs)
        if storm_control is not None:
            pulumi.set(__self__, "storm_control", storm_control)
        if stp_instances is not None:
            pulumi.set(__self__, "stp_instances", stp_instances)
        if stp_settings is not None:
            pulumi.set(__self__, "stp_settings", stp_settings)
        if switch_device_tag is not None:
            pulumi.set(__self__, "switch_device_tag", switch_device_tag)
        if switch_dhcp_opt43_key is not None:
            pulumi.set(__self__, "switch_dhcp_opt43_key", switch_dhcp_opt43_key)
        if switch_log is not None:
            pulumi.set(__self__, "switch_log", switch_log)
        if switch_profile is not None:
            pulumi.set(__self__, "switch_profile", switch_profile)
        if switch_stp_settings is not None:
            pulumi.set(__self__, "switch_stp_settings", switch_stp_settings)
        if tdr_supported is not None:
            pulumi.set(__self__, "tdr_supported", tdr_supported)
        if tunnel_discovered is not None:
            pulumi.set(__self__, "tunnel_discovered", tunnel_discovered)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vlans is not None:
            pulumi.set(__self__, "vlans", vlans)

    @property
    @pulumi.getter(name="fswWan1Peer")
    def fsw_wan1_peer(self) -> pulumi.Input[str]:
        """
        Fortiswitch WAN1 peer port.
        """
        return pulumi.get(self, "fsw_wan1_peer")

    @fsw_wan1_peer.setter
    def fsw_wan1_peer(self, value: pulumi.Input[str]):
        pulumi.set(self, "fsw_wan1_peer", value)

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> pulumi.Input[str]:
        """
        Managed-switch id.
        """
        return pulumi.get(self, "switch_id")

    @switch_id.setter
    def switch_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch_id", value)

    @property
    @pulumi.getter(name="accessProfile")
    def access_profile(self) -> Optional[pulumi.Input[str]]:
        """
        FortiSwitch access profile.
        """
        return pulumi.get(self, "access_profile")

    @access_profile.setter
    def access_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_profile", value)

    @property
    @pulumi.getter(name="customCommands")
    def custom_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchCustomCommandArgs']]]]:
        """
        Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `custom_command` block is documented below.
        """
        return pulumi.get(self, "custom_commands")

    @custom_commands.setter
    def custom_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchCustomCommandArgs']]]]):
        pulumi.set(self, "custom_commands", value)

    @property
    @pulumi.getter(name="delayedRestartTrigger")
    def delayed_restart_trigger(self) -> Optional[pulumi.Input[int]]:
        """
        Delayed restart triggered for this FortiSwitch.
        """
        return pulumi.get(self, "delayed_restart_trigger")

    @delayed_restart_trigger.setter
    def delayed_restart_trigger(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delayed_restart_trigger", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dhcpServerAccessList")
    def dhcp_server_access_list(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_server_access_list")

    @dhcp_server_access_list.setter
    def dhcp_server_access_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_server_access_list", value)

    @property
    @pulumi.getter(name="dhcpSnoopingStaticClients")
    def dhcp_snooping_static_clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchDhcpSnoopingStaticClientArgs']]]]:
        """
        Configure FortiSwitch DHCP snooping static clients. The structure of `dhcp_snooping_static_client` block is documented below.
        """
        return pulumi.get(self, "dhcp_snooping_static_clients")

    @dhcp_snooping_static_clients.setter
    def dhcp_snooping_static_clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchDhcpSnoopingStaticClientArgs']]]]):
        pulumi.set(self, "dhcp_snooping_static_clients", value)

    @property
    @pulumi.getter(name="directlyConnected")
    def directly_connected(self) -> Optional[pulumi.Input[int]]:
        """
        Directly connected FortiSwitch.
        """
        return pulumi.get(self, "directly_connected")

    @directly_connected.setter
    def directly_connected(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "directly_connected", value)

    @property
    @pulumi.getter(name="dynamicCapability")
    def dynamic_capability(self) -> Optional[pulumi.Input[int]]:
        """
        List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
        """
        return pulumi.get(self, "dynamic_capability")

    @dynamic_capability.setter
    def dynamic_capability(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dynamic_capability", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="dynamicallyDiscovered")
    def dynamically_discovered(self) -> Optional[pulumi.Input[int]]:
        """
        Dynamically discovered FortiSwitch.
        """
        return pulumi.get(self, "dynamically_discovered")

    @dynamically_discovered.setter
    def dynamically_discovered(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dynamically_discovered", value)

    @property
    @pulumi.getter(name="firmwareProvision")
    def firmware_provision(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "firmware_provision")

    @firmware_provision.setter
    def firmware_provision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision", value)

    @property
    @pulumi.getter(name="firmwareProvisionLatest")
    def firmware_provision_latest(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
        """
        return pulumi.get(self, "firmware_provision_latest")

    @firmware_provision_latest.setter
    def firmware_provision_latest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision_latest", value)

    @property
    @pulumi.getter(name="firmwareProvisionVersion")
    def firmware_provision_version(self) -> Optional[pulumi.Input[str]]:
        """
        Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
        """
        return pulumi.get(self, "firmware_provision_version")

    @firmware_provision_version.setter
    def firmware_provision_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision_version", value)

    @property
    @pulumi.getter(name="flowIdentity")
    def flow_identity(self) -> Optional[pulumi.Input[str]]:
        """
        Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
        """
        return pulumi.get(self, "flow_identity")

    @flow_identity.setter
    def flow_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_identity", value)

    @property
    @pulumi.getter(name="fswWan1Admin")
    def fsw_wan1_admin(self) -> Optional[pulumi.Input[str]]:
        """
        FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        """
        return pulumi.get(self, "fsw_wan1_admin")

    @fsw_wan1_admin.setter
    def fsw_wan1_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsw_wan1_admin", value)

    @property
    @pulumi.getter(name="fswWan2Admin")
    def fsw_wan2_admin(self) -> Optional[pulumi.Input[str]]:
        """
        FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        """
        return pulumi.get(self, "fsw_wan2_admin")

    @fsw_wan2_admin.setter
    def fsw_wan2_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsw_wan2_admin", value)

    @property
    @pulumi.getter(name="fswWan2Peer")
    def fsw_wan2_peer(self) -> Optional[pulumi.Input[str]]:
        """
        FortiSwitch WAN2 peer port.
        """
        return pulumi.get(self, "fsw_wan2_peer")

    @fsw_wan2_peer.setter
    def fsw_wan2_peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsw_wan2_peer", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> Optional[pulumi.Input['ManagedswitchIgmpSnoopingArgs']]:
        """
        Configure FortiSwitch IGMP snooping global settings. The structure of `igmp_snooping` block is documented below.
        """
        return pulumi.get(self, "igmp_snooping")

    @igmp_snooping.setter
    def igmp_snooping(self, value: Optional[pulumi.Input['ManagedswitchIgmpSnoopingArgs']]):
        pulumi.set(self, "igmp_snooping", value)

    @property
    @pulumi.getter(name="ipSourceGuards")
    def ip_source_guards(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchIpSourceGuardArgs']]]]:
        """
        IP source guard. The structure of `ip_source_guard` block is documented below.
        """
        return pulumi.get(self, "ip_source_guards")

    @ip_source_guards.setter
    def ip_source_guards(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchIpSourceGuardArgs']]]]):
        pulumi.set(self, "ip_source_guards", value)

    @property
    @pulumi.getter(name="l3Discovered")
    def l3_discovered(self) -> Optional[pulumi.Input[int]]:
        """
        Layer 3 management discovered.
        """
        return pulumi.get(self, "l3_discovered")

    @l3_discovered.setter
    def l3_discovered(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "l3_discovered", value)

    @property
    @pulumi.getter(name="maxAllowedTrunkMembers")
    def max_allowed_trunk_members(self) -> Optional[pulumi.Input[int]]:
        """
        FortiSwitch maximum allowed trunk members.
        """
        return pulumi.get(self, "max_allowed_trunk_members")

    @max_allowed_trunk_members.setter
    def max_allowed_trunk_members(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_allowed_trunk_members", value)

    @property
    @pulumi.getter(name="mclagIgmpSnoopingAware")
    def mclag_igmp_snooping_aware(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mclag_igmp_snooping_aware")

    @mclag_igmp_snooping_aware.setter
    def mclag_igmp_snooping_aware(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mclag_igmp_snooping_aware", value)

    @property
    @pulumi.getter(name="mgmtMode")
    def mgmt_mode(self) -> Optional[pulumi.Input[int]]:
        """
        FortiLink management mode.
        """
        return pulumi.get(self, "mgmt_mode")

    @mgmt_mode.setter
    def mgmt_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mgmt_mode", value)

    @property
    @pulumi.getter
    def mirrors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchMirrorArgs']]]]:
        """
        Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
        """
        return pulumi.get(self, "mirrors")

    @mirrors.setter
    def mirrors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchMirrorArgs']]]]):
        pulumi.set(self, "mirrors", value)

    @property
    @pulumi.getter(name="n8021xSettings")
    def n8021x_settings(self) -> Optional[pulumi.Input['ManagedswitchN8021xSettingsArgs']]:
        """
        Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n802_1x_settings` block is documented below.
        """
        return pulumi.get(self, "n8021x_settings")

    @n8021x_settings.setter
    def n8021x_settings(self, value: Optional[pulumi.Input['ManagedswitchN8021xSettingsArgs']]):
        pulumi.set(self, "n8021x_settings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Managed-switch name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideSnmpCommunity")
    def override_snmp_community(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_snmp_community")

    @override_snmp_community.setter
    def override_snmp_community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_snmp_community", value)

    @property
    @pulumi.getter(name="overrideSnmpSysinfo")
    def override_snmp_sysinfo(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "override_snmp_sysinfo")

    @override_snmp_sysinfo.setter
    def override_snmp_sysinfo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_snmp_sysinfo", value)

    @property
    @pulumi.getter(name="overrideSnmpTrapThreshold")
    def override_snmp_trap_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_snmp_trap_threshold")

    @override_snmp_trap_threshold.setter
    def override_snmp_trap_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_snmp_trap_threshold", value)

    @property
    @pulumi.getter(name="overrideSnmpUser")
    def override_snmp_user(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_snmp_user")

    @override_snmp_user.setter
    def override_snmp_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_snmp_user", value)

    @property
    @pulumi.getter(name="ownerVdom")
    def owner_vdom(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM which owner of port belongs to.
        """
        return pulumi.get(self, "owner_vdom")

    @owner_vdom.setter
    def owner_vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_vdom", value)

    @property
    @pulumi.getter(name="poeDetectionType")
    def poe_detection_type(self) -> Optional[pulumi.Input[int]]:
        """
        PoE detection type for FortiSwitch.
        """
        return pulumi.get(self, "poe_detection_type")

    @poe_detection_type.setter
    def poe_detection_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "poe_detection_type", value)

    @property
    @pulumi.getter(name="poeLldpDetection")
    def poe_lldp_detection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "poe_lldp_detection")

    @poe_lldp_detection.setter
    def poe_lldp_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_lldp_detection", value)

    @property
    @pulumi.getter(name="poePreStandardDetection")
    def poe_pre_standard_detection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "poe_pre_standard_detection")

    @poe_pre_standard_detection.setter
    def poe_pre_standard_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_pre_standard_detection", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchPortArgs']]]]:
        """
        Managed-switch port list. The structure of `ports` block is documented below.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchPortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="preProvisioned")
    def pre_provisioned(self) -> Optional[pulumi.Input[int]]:
        """
        Pre-provisioned managed switch.
        """
        return pulumi.get(self, "pre_provisioned")

    @pre_provisioned.setter
    def pre_provisioned(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pre_provisioned", value)

    @property
    @pulumi.getter(name="ptpProfile")
    def ptp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        PTP profile configuration.
        """
        return pulumi.get(self, "ptp_profile")

    @ptp_profile.setter
    def ptp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ptp_profile", value)

    @property
    @pulumi.getter(name="ptpStatus")
    def ptp_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PTP profile on this FortiSwitch. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ptp_status")

    @ptp_status.setter
    def ptp_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ptp_status", value)

    @property
    @pulumi.getter(name="purdueLevel")
    def purdue_level(self) -> Optional[pulumi.Input[str]]:
        """
        Purdue Level of this FortiSwitch. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
        """
        return pulumi.get(self, "purdue_level")

    @purdue_level.setter
    def purdue_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "purdue_level", value)

    @property
    @pulumi.getter(name="qosDropPolicy")
    def qos_drop_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
        """
        return pulumi.get(self, "qos_drop_policy")

    @qos_drop_policy.setter
    def qos_drop_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_drop_policy", value)

    @property
    @pulumi.getter(name="qosRedProbability")
    def qos_red_probability(self) -> Optional[pulumi.Input[int]]:
        """
        Set QoS RED/WRED drop probability.
        """
        return pulumi.get(self, "qos_red_probability")

    @qos_red_probability.setter
    def qos_red_probability(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "qos_red_probability", value)

    @property
    @pulumi.getter(name="radiusNasIp")
    def radius_nas_ip(self) -> Optional[pulumi.Input[str]]:
        """
        NAS-IP address.
        """
        return pulumi.get(self, "radius_nas_ip")

    @radius_nas_ip.setter
    def radius_nas_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_nas_ip", value)

    @property
    @pulumi.getter(name="radiusNasIpOverride")
    def radius_nas_ip_override(self) -> Optional[pulumi.Input[str]]:
        """
        Use locally defined NAS-IP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "radius_nas_ip_override")

    @radius_nas_ip_override.setter
    def radius_nas_ip_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_nas_ip_override", value)

    @property
    @pulumi.getter(name="remoteLogs")
    def remote_logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchRemoteLogArgs']]]]:
        """
        Configure logging by FortiSwitch device to a remote syslog server. The structure of `remote_log` block is documented below.
        """
        return pulumi.get(self, "remote_logs")

    @remote_logs.setter
    def remote_logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchRemoteLogArgs']]]]):
        pulumi.set(self, "remote_logs", value)

    @property
    @pulumi.getter(name="routeOffload")
    def route_offload(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable route offload on this FortiSwitch. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "route_offload")

    @route_offload.setter
    def route_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_offload", value)

    @property
    @pulumi.getter(name="routeOffloadMclag")
    def route_offload_mclag(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable route offload MCLAG on this FortiSwitch. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "route_offload_mclag")

    @route_offload_mclag.setter
    def route_offload_mclag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_offload_mclag", value)

    @property
    @pulumi.getter(name="routeOffloadRouters")
    def route_offload_routers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchRouteOffloadRouterArgs']]]]:
        """
        Configure route offload MCLAG IP address. The structure of `route_offload_router` block is documented below.
        """
        return pulumi.get(self, "route_offload_routers")

    @route_offload_routers.setter
    def route_offload_routers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchRouteOffloadRouterArgs']]]]):
        pulumi.set(self, "route_offload_routers", value)

    @property
    @pulumi.getter
    def sn(self) -> Optional[pulumi.Input[str]]:
        """
        Managed-switch serial number.
        """
        return pulumi.get(self, "sn")

    @sn.setter
    def sn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sn", value)

    @property
    @pulumi.getter(name="snmpCommunities")
    def snmp_communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchSnmpCommunityArgs']]]]:
        """
        Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmp_community` block is documented below.
        """
        return pulumi.get(self, "snmp_communities")

    @snmp_communities.setter
    def snmp_communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchSnmpCommunityArgs']]]]):
        pulumi.set(self, "snmp_communities", value)

    @property
    @pulumi.getter(name="snmpSysinfo")
    def snmp_sysinfo(self) -> Optional[pulumi.Input['ManagedswitchSnmpSysinfoArgs']]:
        """
        Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmp_sysinfo` block is documented below.
        """
        return pulumi.get(self, "snmp_sysinfo")

    @snmp_sysinfo.setter
    def snmp_sysinfo(self, value: Optional[pulumi.Input['ManagedswitchSnmpSysinfoArgs']]):
        pulumi.set(self, "snmp_sysinfo", value)

    @property
    @pulumi.getter(name="snmpTrapThreshold")
    def snmp_trap_threshold(self) -> Optional[pulumi.Input['ManagedswitchSnmpTrapThresholdArgs']]:
        """
        Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmp_trap_threshold` block is documented below.
        """
        return pulumi.get(self, "snmp_trap_threshold")

    @snmp_trap_threshold.setter
    def snmp_trap_threshold(self, value: Optional[pulumi.Input['ManagedswitchSnmpTrapThresholdArgs']]):
        pulumi.set(self, "snmp_trap_threshold", value)

    @property
    @pulumi.getter(name="snmpUsers")
    def snmp_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchSnmpUserArgs']]]]:
        """
        Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmp_user` block is documented below.
        """
        return pulumi.get(self, "snmp_users")

    @snmp_users.setter
    def snmp_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchSnmpUserArgs']]]]):
        pulumi.set(self, "snmp_users", value)

    @property
    @pulumi.getter(name="stagedImageVersion")
    def staged_image_version(self) -> Optional[pulumi.Input[str]]:
        """
        Staged image version for FortiSwitch.
        """
        return pulumi.get(self, "staged_image_version")

    @staged_image_version.setter
    def staged_image_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "staged_image_version", value)

    @property
    @pulumi.getter(name="staticMacs")
    def static_macs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchStaticMacArgs']]]]:
        """
        Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `static_mac` block is documented below.
        """
        return pulumi.get(self, "static_macs")

    @static_macs.setter
    def static_macs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchStaticMacArgs']]]]):
        pulumi.set(self, "static_macs", value)

    @property
    @pulumi.getter(name="stormControl")
    def storm_control(self) -> Optional[pulumi.Input['ManagedswitchStormControlArgs']]:
        """
        Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `storm_control` block is documented below.
        """
        return pulumi.get(self, "storm_control")

    @storm_control.setter
    def storm_control(self, value: Optional[pulumi.Input['ManagedswitchStormControlArgs']]):
        pulumi.set(self, "storm_control", value)

    @property
    @pulumi.getter(name="stpInstances")
    def stp_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchStpInstanceArgs']]]]:
        """
        Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stp_instance` block is documented below.
        """
        return pulumi.get(self, "stp_instances")

    @stp_instances.setter
    def stp_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchStpInstanceArgs']]]]):
        pulumi.set(self, "stp_instances", value)

    @property
    @pulumi.getter(name="stpSettings")
    def stp_settings(self) -> Optional[pulumi.Input['ManagedswitchStpSettingsArgs']]:
        """
        Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stp_settings` block is documented below.
        """
        return pulumi.get(self, "stp_settings")

    @stp_settings.setter
    def stp_settings(self, value: Optional[pulumi.Input['ManagedswitchStpSettingsArgs']]):
        pulumi.set(self, "stp_settings", value)

    @property
    @pulumi.getter(name="switchDeviceTag")
    def switch_device_tag(self) -> Optional[pulumi.Input[str]]:
        """
        User definable label/tag.
        """
        return pulumi.get(self, "switch_device_tag")

    @switch_device_tag.setter
    def switch_device_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_device_tag", value)

    @property
    @pulumi.getter(name="switchDhcpOpt43Key")
    def switch_dhcp_opt43_key(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP option43 key.
        """
        return pulumi.get(self, "switch_dhcp_opt43_key")

    @switch_dhcp_opt43_key.setter
    def switch_dhcp_opt43_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_dhcp_opt43_key", value)

    @property
    @pulumi.getter(name="switchLog")
    def switch_log(self) -> Optional[pulumi.Input['ManagedswitchSwitchLogArgs']]:
        """
        Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switch_log` block is documented below.
        """
        return pulumi.get(self, "switch_log")

    @switch_log.setter
    def switch_log(self, value: Optional[pulumi.Input['ManagedswitchSwitchLogArgs']]):
        pulumi.set(self, "switch_log", value)

    @property
    @pulumi.getter(name="switchProfile")
    def switch_profile(self) -> Optional[pulumi.Input[str]]:
        """
        FortiSwitch profile.
        """
        return pulumi.get(self, "switch_profile")

    @switch_profile.setter
    def switch_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_profile", value)

    @property
    @pulumi.getter(name="switchStpSettings")
    def switch_stp_settings(self) -> Optional[pulumi.Input['ManagedswitchSwitchStpSettingsArgs']]:
        """
        Configure spanning tree protocol (STP). The structure of `switch_stp_settings` block is documented below.
        """
        return pulumi.get(self, "switch_stp_settings")

    @switch_stp_settings.setter
    def switch_stp_settings(self, value: Optional[pulumi.Input['ManagedswitchSwitchStpSettingsArgs']]):
        pulumi.set(self, "switch_stp_settings", value)

    @property
    @pulumi.getter(name="tdrSupported")
    def tdr_supported(self) -> Optional[pulumi.Input[str]]:
        """
        TDR supported.
        """
        return pulumi.get(self, "tdr_supported")

    @tdr_supported.setter
    def tdr_supported(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tdr_supported", value)

    @property
    @pulumi.getter(name="tunnelDiscovered")
    def tunnel_discovered(self) -> Optional[pulumi.Input[int]]:
        """
        SOCKS tunnel management discovered.
        """
        return pulumi.get(self, "tunnel_discovered")

    @tunnel_discovered.setter
    def tunnel_discovered(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel_discovered", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Indication of switch type, physical or virtual. Valid values: `virtual`, `physical`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        FortiSwitch version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchVlanArgs']]]]:
        """
        Configure VLAN assignment priority. The structure of `vlan` block is documented below.
        """
        return pulumi.get(self, "vlans")

    @vlans.setter
    def vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchVlanArgs']]]]):
        pulumi.set(self, "vlans", value)


@pulumi.input_type
class _ManagedswitchState:
    def __init__(__self__, *,
                 access_profile: Optional[pulumi.Input[str]] = None,
                 custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchCustomCommandArgs']]]] = None,
                 delayed_restart_trigger: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping_static_clients: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchDhcpSnoopingStaticClientArgs']]]] = None,
                 directly_connected: Optional[pulumi.Input[int]] = None,
                 dynamic_capability: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 dynamically_discovered: Optional[pulumi.Input[int]] = None,
                 firmware_provision: Optional[pulumi.Input[str]] = None,
                 firmware_provision_latest: Optional[pulumi.Input[str]] = None,
                 firmware_provision_version: Optional[pulumi.Input[str]] = None,
                 flow_identity: Optional[pulumi.Input[str]] = None,
                 fsw_wan1_admin: Optional[pulumi.Input[str]] = None,
                 fsw_wan1_peer: Optional[pulumi.Input[str]] = None,
                 fsw_wan2_admin: Optional[pulumi.Input[str]] = None,
                 fsw_wan2_peer: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 igmp_snooping: Optional[pulumi.Input['ManagedswitchIgmpSnoopingArgs']] = None,
                 ip_source_guards: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchIpSourceGuardArgs']]]] = None,
                 l3_discovered: Optional[pulumi.Input[int]] = None,
                 max_allowed_trunk_members: Optional[pulumi.Input[int]] = None,
                 mclag_igmp_snooping_aware: Optional[pulumi.Input[str]] = None,
                 mgmt_mode: Optional[pulumi.Input[int]] = None,
                 mirrors: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchMirrorArgs']]]] = None,
                 n8021x_settings: Optional[pulumi.Input['ManagedswitchN8021xSettingsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_snmp_community: Optional[pulumi.Input[str]] = None,
                 override_snmp_sysinfo: Optional[pulumi.Input[str]] = None,
                 override_snmp_trap_threshold: Optional[pulumi.Input[str]] = None,
                 override_snmp_user: Optional[pulumi.Input[str]] = None,
                 owner_vdom: Optional[pulumi.Input[str]] = None,
                 poe_detection_type: Optional[pulumi.Input[int]] = None,
                 poe_lldp_detection: Optional[pulumi.Input[str]] = None,
                 poe_pre_standard_detection: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchPortArgs']]]] = None,
                 pre_provisioned: Optional[pulumi.Input[int]] = None,
                 ptp_profile: Optional[pulumi.Input[str]] = None,
                 ptp_status: Optional[pulumi.Input[str]] = None,
                 purdue_level: Optional[pulumi.Input[str]] = None,
                 qos_drop_policy: Optional[pulumi.Input[str]] = None,
                 qos_red_probability: Optional[pulumi.Input[int]] = None,
                 radius_nas_ip: Optional[pulumi.Input[str]] = None,
                 radius_nas_ip_override: Optional[pulumi.Input[str]] = None,
                 remote_logs: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchRemoteLogArgs']]]] = None,
                 route_offload: Optional[pulumi.Input[str]] = None,
                 route_offload_mclag: Optional[pulumi.Input[str]] = None,
                 route_offload_routers: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchRouteOffloadRouterArgs']]]] = None,
                 sn: Optional[pulumi.Input[str]] = None,
                 snmp_communities: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchSnmpCommunityArgs']]]] = None,
                 snmp_sysinfo: Optional[pulumi.Input['ManagedswitchSnmpSysinfoArgs']] = None,
                 snmp_trap_threshold: Optional[pulumi.Input['ManagedswitchSnmpTrapThresholdArgs']] = None,
                 snmp_users: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchSnmpUserArgs']]]] = None,
                 staged_image_version: Optional[pulumi.Input[str]] = None,
                 static_macs: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchStaticMacArgs']]]] = None,
                 storm_control: Optional[pulumi.Input['ManagedswitchStormControlArgs']] = None,
                 stp_instances: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchStpInstanceArgs']]]] = None,
                 stp_settings: Optional[pulumi.Input['ManagedswitchStpSettingsArgs']] = None,
                 switch_device_tag: Optional[pulumi.Input[str]] = None,
                 switch_dhcp_opt43_key: Optional[pulumi.Input[str]] = None,
                 switch_id: Optional[pulumi.Input[str]] = None,
                 switch_log: Optional[pulumi.Input['ManagedswitchSwitchLogArgs']] = None,
                 switch_profile: Optional[pulumi.Input[str]] = None,
                 switch_stp_settings: Optional[pulumi.Input['ManagedswitchSwitchStpSettingsArgs']] = None,
                 tdr_supported: Optional[pulumi.Input[str]] = None,
                 tunnel_discovered: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchVlanArgs']]]] = None):
        """
        Input properties used for looking up and filtering Managedswitch resources.
        :param pulumi.Input[str] access_profile: FortiSwitch access profile.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchCustomCommandArgs']]] custom_commands: Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `custom_command` block is documented below.
        :param pulumi.Input[int] delayed_restart_trigger: Delayed restart triggered for this FortiSwitch.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] dhcp_server_access_list: DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchDhcpSnoopingStaticClientArgs']]] dhcp_snooping_static_clients: Configure FortiSwitch DHCP snooping static clients. The structure of `dhcp_snooping_static_client` block is documented below.
        :param pulumi.Input[int] directly_connected: Directly connected FortiSwitch.
        :param pulumi.Input[int] dynamic_capability: List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] dynamically_discovered: Dynamically discovered FortiSwitch.
        :param pulumi.Input[str] firmware_provision: Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] firmware_provision_latest: Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
        :param pulumi.Input[str] firmware_provision_version: Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
        :param pulumi.Input[str] flow_identity: Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
        :param pulumi.Input[str] fsw_wan1_admin: FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        :param pulumi.Input[str] fsw_wan1_peer: Fortiswitch WAN1 peer port.
        :param pulumi.Input[str] fsw_wan2_admin: FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        :param pulumi.Input[str] fsw_wan2_peer: FortiSwitch WAN2 peer port.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input['ManagedswitchIgmpSnoopingArgs'] igmp_snooping: Configure FortiSwitch IGMP snooping global settings. The structure of `igmp_snooping` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchIpSourceGuardArgs']]] ip_source_guards: IP source guard. The structure of `ip_source_guard` block is documented below.
        :param pulumi.Input[int] l3_discovered: Layer 3 management discovered.
        :param pulumi.Input[int] max_allowed_trunk_members: FortiSwitch maximum allowed trunk members.
        :param pulumi.Input[str] mclag_igmp_snooping_aware: Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mgmt_mode: FortiLink management mode.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchMirrorArgs']]] mirrors: Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
        :param pulumi.Input['ManagedswitchN8021xSettingsArgs'] n8021x_settings: Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n802_1x_settings` block is documented below.
        :param pulumi.Input[str] name: Managed-switch name.
        :param pulumi.Input[str] override_snmp_community: Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_snmp_sysinfo: Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] override_snmp_trap_threshold: Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_snmp_user: Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] owner_vdom: VDOM which owner of port belongs to.
        :param pulumi.Input[int] poe_detection_type: PoE detection type for FortiSwitch.
        :param pulumi.Input[str] poe_lldp_detection: Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] poe_pre_standard_detection: Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchPortArgs']]] ports: Managed-switch port list. The structure of `ports` block is documented below.
        :param pulumi.Input[int] pre_provisioned: Pre-provisioned managed switch.
        :param pulumi.Input[str] ptp_profile: PTP profile configuration.
        :param pulumi.Input[str] ptp_status: Enable/disable PTP profile on this FortiSwitch. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] purdue_level: Purdue Level of this FortiSwitch. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
        :param pulumi.Input[str] qos_drop_policy: Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
        :param pulumi.Input[int] qos_red_probability: Set QoS RED/WRED drop probability.
        :param pulumi.Input[str] radius_nas_ip: NAS-IP address.
        :param pulumi.Input[str] radius_nas_ip_override: Use locally defined NAS-IP. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchRemoteLogArgs']]] remote_logs: Configure logging by FortiSwitch device to a remote syslog server. The structure of `remote_log` block is documented below.
        :param pulumi.Input[str] route_offload: Enable/disable route offload on this FortiSwitch. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] route_offload_mclag: Enable/disable route offload MCLAG on this FortiSwitch. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchRouteOffloadRouterArgs']]] route_offload_routers: Configure route offload MCLAG IP address. The structure of `route_offload_router` block is documented below.
        :param pulumi.Input[str] sn: Managed-switch serial number.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchSnmpCommunityArgs']]] snmp_communities: Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmp_community` block is documented below.
        :param pulumi.Input['ManagedswitchSnmpSysinfoArgs'] snmp_sysinfo: Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmp_sysinfo` block is documented below.
        :param pulumi.Input['ManagedswitchSnmpTrapThresholdArgs'] snmp_trap_threshold: Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmp_trap_threshold` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchSnmpUserArgs']]] snmp_users: Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmp_user` block is documented below.
        :param pulumi.Input[str] staged_image_version: Staged image version for FortiSwitch.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchStaticMacArgs']]] static_macs: Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `static_mac` block is documented below.
        :param pulumi.Input['ManagedswitchStormControlArgs'] storm_control: Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `storm_control` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchStpInstanceArgs']]] stp_instances: Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stp_instance` block is documented below.
        :param pulumi.Input['ManagedswitchStpSettingsArgs'] stp_settings: Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stp_settings` block is documented below.
        :param pulumi.Input[str] switch_device_tag: User definable label/tag.
        :param pulumi.Input[str] switch_dhcp_opt43_key: DHCP option43 key.
        :param pulumi.Input[str] switch_id: Managed-switch id.
        :param pulumi.Input['ManagedswitchSwitchLogArgs'] switch_log: Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switch_log` block is documented below.
        :param pulumi.Input[str] switch_profile: FortiSwitch profile.
        :param pulumi.Input['ManagedswitchSwitchStpSettingsArgs'] switch_stp_settings: Configure spanning tree protocol (STP). The structure of `switch_stp_settings` block is documented below.
        :param pulumi.Input[str] tdr_supported: TDR supported.
        :param pulumi.Input[int] tunnel_discovered: SOCKS tunnel management discovered.
        :param pulumi.Input[str] type: Indication of switch type, physical or virtual. Valid values: `virtual`, `physical`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] version: FortiSwitch version.
        :param pulumi.Input[Sequence[pulumi.Input['ManagedswitchVlanArgs']]] vlans: Configure VLAN assignment priority. The structure of `vlan` block is documented below.
        """
        if access_profile is not None:
            pulumi.set(__self__, "access_profile", access_profile)
        if custom_commands is not None:
            pulumi.set(__self__, "custom_commands", custom_commands)
        if delayed_restart_trigger is not None:
            pulumi.set(__self__, "delayed_restart_trigger", delayed_restart_trigger)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dhcp_server_access_list is not None:
            pulumi.set(__self__, "dhcp_server_access_list", dhcp_server_access_list)
        if dhcp_snooping_static_clients is not None:
            pulumi.set(__self__, "dhcp_snooping_static_clients", dhcp_snooping_static_clients)
        if directly_connected is not None:
            pulumi.set(__self__, "directly_connected", directly_connected)
        if dynamic_capability is not None:
            pulumi.set(__self__, "dynamic_capability", dynamic_capability)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if dynamically_discovered is not None:
            pulumi.set(__self__, "dynamically_discovered", dynamically_discovered)
        if firmware_provision is not None:
            pulumi.set(__self__, "firmware_provision", firmware_provision)
        if firmware_provision_latest is not None:
            pulumi.set(__self__, "firmware_provision_latest", firmware_provision_latest)
        if firmware_provision_version is not None:
            pulumi.set(__self__, "firmware_provision_version", firmware_provision_version)
        if flow_identity is not None:
            pulumi.set(__self__, "flow_identity", flow_identity)
        if fsw_wan1_admin is not None:
            pulumi.set(__self__, "fsw_wan1_admin", fsw_wan1_admin)
        if fsw_wan1_peer is not None:
            pulumi.set(__self__, "fsw_wan1_peer", fsw_wan1_peer)
        if fsw_wan2_admin is not None:
            pulumi.set(__self__, "fsw_wan2_admin", fsw_wan2_admin)
        if fsw_wan2_peer is not None:
            pulumi.set(__self__, "fsw_wan2_peer", fsw_wan2_peer)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if igmp_snooping is not None:
            pulumi.set(__self__, "igmp_snooping", igmp_snooping)
        if ip_source_guards is not None:
            pulumi.set(__self__, "ip_source_guards", ip_source_guards)
        if l3_discovered is not None:
            pulumi.set(__self__, "l3_discovered", l3_discovered)
        if max_allowed_trunk_members is not None:
            pulumi.set(__self__, "max_allowed_trunk_members", max_allowed_trunk_members)
        if mclag_igmp_snooping_aware is not None:
            pulumi.set(__self__, "mclag_igmp_snooping_aware", mclag_igmp_snooping_aware)
        if mgmt_mode is not None:
            pulumi.set(__self__, "mgmt_mode", mgmt_mode)
        if mirrors is not None:
            pulumi.set(__self__, "mirrors", mirrors)
        if n8021x_settings is not None:
            pulumi.set(__self__, "n8021x_settings", n8021x_settings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_snmp_community is not None:
            pulumi.set(__self__, "override_snmp_community", override_snmp_community)
        if override_snmp_sysinfo is not None:
            pulumi.set(__self__, "override_snmp_sysinfo", override_snmp_sysinfo)
        if override_snmp_trap_threshold is not None:
            pulumi.set(__self__, "override_snmp_trap_threshold", override_snmp_trap_threshold)
        if override_snmp_user is not None:
            pulumi.set(__self__, "override_snmp_user", override_snmp_user)
        if owner_vdom is not None:
            pulumi.set(__self__, "owner_vdom", owner_vdom)
        if poe_detection_type is not None:
            pulumi.set(__self__, "poe_detection_type", poe_detection_type)
        if poe_lldp_detection is not None:
            pulumi.set(__self__, "poe_lldp_detection", poe_lldp_detection)
        if poe_pre_standard_detection is not None:
            pulumi.set(__self__, "poe_pre_standard_detection", poe_pre_standard_detection)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if pre_provisioned is not None:
            pulumi.set(__self__, "pre_provisioned", pre_provisioned)
        if ptp_profile is not None:
            pulumi.set(__self__, "ptp_profile", ptp_profile)
        if ptp_status is not None:
            pulumi.set(__self__, "ptp_status", ptp_status)
        if purdue_level is not None:
            pulumi.set(__self__, "purdue_level", purdue_level)
        if qos_drop_policy is not None:
            pulumi.set(__self__, "qos_drop_policy", qos_drop_policy)
        if qos_red_probability is not None:
            pulumi.set(__self__, "qos_red_probability", qos_red_probability)
        if radius_nas_ip is not None:
            pulumi.set(__self__, "radius_nas_ip", radius_nas_ip)
        if radius_nas_ip_override is not None:
            pulumi.set(__self__, "radius_nas_ip_override", radius_nas_ip_override)
        if remote_logs is not None:
            pulumi.set(__self__, "remote_logs", remote_logs)
        if route_offload is not None:
            pulumi.set(__self__, "route_offload", route_offload)
        if route_offload_mclag is not None:
            pulumi.set(__self__, "route_offload_mclag", route_offload_mclag)
        if route_offload_routers is not None:
            pulumi.set(__self__, "route_offload_routers", route_offload_routers)
        if sn is not None:
            pulumi.set(__self__, "sn", sn)
        if snmp_communities is not None:
            pulumi.set(__self__, "snmp_communities", snmp_communities)
        if snmp_sysinfo is not None:
            pulumi.set(__self__, "snmp_sysinfo", snmp_sysinfo)
        if snmp_trap_threshold is not None:
            pulumi.set(__self__, "snmp_trap_threshold", snmp_trap_threshold)
        if snmp_users is not None:
            pulumi.set(__self__, "snmp_users", snmp_users)
        if staged_image_version is not None:
            pulumi.set(__self__, "staged_image_version", staged_image_version)
        if static_macs is not None:
            pulumi.set(__self__, "static_macs", static_macs)
        if storm_control is not None:
            pulumi.set(__self__, "storm_control", storm_control)
        if stp_instances is not None:
            pulumi.set(__self__, "stp_instances", stp_instances)
        if stp_settings is not None:
            pulumi.set(__self__, "stp_settings", stp_settings)
        if switch_device_tag is not None:
            pulumi.set(__self__, "switch_device_tag", switch_device_tag)
        if switch_dhcp_opt43_key is not None:
            pulumi.set(__self__, "switch_dhcp_opt43_key", switch_dhcp_opt43_key)
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)
        if switch_log is not None:
            pulumi.set(__self__, "switch_log", switch_log)
        if switch_profile is not None:
            pulumi.set(__self__, "switch_profile", switch_profile)
        if switch_stp_settings is not None:
            pulumi.set(__self__, "switch_stp_settings", switch_stp_settings)
        if tdr_supported is not None:
            pulumi.set(__self__, "tdr_supported", tdr_supported)
        if tunnel_discovered is not None:
            pulumi.set(__self__, "tunnel_discovered", tunnel_discovered)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vlans is not None:
            pulumi.set(__self__, "vlans", vlans)

    @property
    @pulumi.getter(name="accessProfile")
    def access_profile(self) -> Optional[pulumi.Input[str]]:
        """
        FortiSwitch access profile.
        """
        return pulumi.get(self, "access_profile")

    @access_profile.setter
    def access_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_profile", value)

    @property
    @pulumi.getter(name="customCommands")
    def custom_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchCustomCommandArgs']]]]:
        """
        Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `custom_command` block is documented below.
        """
        return pulumi.get(self, "custom_commands")

    @custom_commands.setter
    def custom_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchCustomCommandArgs']]]]):
        pulumi.set(self, "custom_commands", value)

    @property
    @pulumi.getter(name="delayedRestartTrigger")
    def delayed_restart_trigger(self) -> Optional[pulumi.Input[int]]:
        """
        Delayed restart triggered for this FortiSwitch.
        """
        return pulumi.get(self, "delayed_restart_trigger")

    @delayed_restart_trigger.setter
    def delayed_restart_trigger(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delayed_restart_trigger", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dhcpServerAccessList")
    def dhcp_server_access_list(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_server_access_list")

    @dhcp_server_access_list.setter
    def dhcp_server_access_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_server_access_list", value)

    @property
    @pulumi.getter(name="dhcpSnoopingStaticClients")
    def dhcp_snooping_static_clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchDhcpSnoopingStaticClientArgs']]]]:
        """
        Configure FortiSwitch DHCP snooping static clients. The structure of `dhcp_snooping_static_client` block is documented below.
        """
        return pulumi.get(self, "dhcp_snooping_static_clients")

    @dhcp_snooping_static_clients.setter
    def dhcp_snooping_static_clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchDhcpSnoopingStaticClientArgs']]]]):
        pulumi.set(self, "dhcp_snooping_static_clients", value)

    @property
    @pulumi.getter(name="directlyConnected")
    def directly_connected(self) -> Optional[pulumi.Input[int]]:
        """
        Directly connected FortiSwitch.
        """
        return pulumi.get(self, "directly_connected")

    @directly_connected.setter
    def directly_connected(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "directly_connected", value)

    @property
    @pulumi.getter(name="dynamicCapability")
    def dynamic_capability(self) -> Optional[pulumi.Input[int]]:
        """
        List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
        """
        return pulumi.get(self, "dynamic_capability")

    @dynamic_capability.setter
    def dynamic_capability(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dynamic_capability", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="dynamicallyDiscovered")
    def dynamically_discovered(self) -> Optional[pulumi.Input[int]]:
        """
        Dynamically discovered FortiSwitch.
        """
        return pulumi.get(self, "dynamically_discovered")

    @dynamically_discovered.setter
    def dynamically_discovered(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dynamically_discovered", value)

    @property
    @pulumi.getter(name="firmwareProvision")
    def firmware_provision(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "firmware_provision")

    @firmware_provision.setter
    def firmware_provision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision", value)

    @property
    @pulumi.getter(name="firmwareProvisionLatest")
    def firmware_provision_latest(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
        """
        return pulumi.get(self, "firmware_provision_latest")

    @firmware_provision_latest.setter
    def firmware_provision_latest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision_latest", value)

    @property
    @pulumi.getter(name="firmwareProvisionVersion")
    def firmware_provision_version(self) -> Optional[pulumi.Input[str]]:
        """
        Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
        """
        return pulumi.get(self, "firmware_provision_version")

    @firmware_provision_version.setter
    def firmware_provision_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision_version", value)

    @property
    @pulumi.getter(name="flowIdentity")
    def flow_identity(self) -> Optional[pulumi.Input[str]]:
        """
        Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
        """
        return pulumi.get(self, "flow_identity")

    @flow_identity.setter
    def flow_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_identity", value)

    @property
    @pulumi.getter(name="fswWan1Admin")
    def fsw_wan1_admin(self) -> Optional[pulumi.Input[str]]:
        """
        FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        """
        return pulumi.get(self, "fsw_wan1_admin")

    @fsw_wan1_admin.setter
    def fsw_wan1_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsw_wan1_admin", value)

    @property
    @pulumi.getter(name="fswWan1Peer")
    def fsw_wan1_peer(self) -> Optional[pulumi.Input[str]]:
        """
        Fortiswitch WAN1 peer port.
        """
        return pulumi.get(self, "fsw_wan1_peer")

    @fsw_wan1_peer.setter
    def fsw_wan1_peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsw_wan1_peer", value)

    @property
    @pulumi.getter(name="fswWan2Admin")
    def fsw_wan2_admin(self) -> Optional[pulumi.Input[str]]:
        """
        FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        """
        return pulumi.get(self, "fsw_wan2_admin")

    @fsw_wan2_admin.setter
    def fsw_wan2_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsw_wan2_admin", value)

    @property
    @pulumi.getter(name="fswWan2Peer")
    def fsw_wan2_peer(self) -> Optional[pulumi.Input[str]]:
        """
        FortiSwitch WAN2 peer port.
        """
        return pulumi.get(self, "fsw_wan2_peer")

    @fsw_wan2_peer.setter
    def fsw_wan2_peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsw_wan2_peer", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> Optional[pulumi.Input['ManagedswitchIgmpSnoopingArgs']]:
        """
        Configure FortiSwitch IGMP snooping global settings. The structure of `igmp_snooping` block is documented below.
        """
        return pulumi.get(self, "igmp_snooping")

    @igmp_snooping.setter
    def igmp_snooping(self, value: Optional[pulumi.Input['ManagedswitchIgmpSnoopingArgs']]):
        pulumi.set(self, "igmp_snooping", value)

    @property
    @pulumi.getter(name="ipSourceGuards")
    def ip_source_guards(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchIpSourceGuardArgs']]]]:
        """
        IP source guard. The structure of `ip_source_guard` block is documented below.
        """
        return pulumi.get(self, "ip_source_guards")

    @ip_source_guards.setter
    def ip_source_guards(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchIpSourceGuardArgs']]]]):
        pulumi.set(self, "ip_source_guards", value)

    @property
    @pulumi.getter(name="l3Discovered")
    def l3_discovered(self) -> Optional[pulumi.Input[int]]:
        """
        Layer 3 management discovered.
        """
        return pulumi.get(self, "l3_discovered")

    @l3_discovered.setter
    def l3_discovered(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "l3_discovered", value)

    @property
    @pulumi.getter(name="maxAllowedTrunkMembers")
    def max_allowed_trunk_members(self) -> Optional[pulumi.Input[int]]:
        """
        FortiSwitch maximum allowed trunk members.
        """
        return pulumi.get(self, "max_allowed_trunk_members")

    @max_allowed_trunk_members.setter
    def max_allowed_trunk_members(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_allowed_trunk_members", value)

    @property
    @pulumi.getter(name="mclagIgmpSnoopingAware")
    def mclag_igmp_snooping_aware(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mclag_igmp_snooping_aware")

    @mclag_igmp_snooping_aware.setter
    def mclag_igmp_snooping_aware(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mclag_igmp_snooping_aware", value)

    @property
    @pulumi.getter(name="mgmtMode")
    def mgmt_mode(self) -> Optional[pulumi.Input[int]]:
        """
        FortiLink management mode.
        """
        return pulumi.get(self, "mgmt_mode")

    @mgmt_mode.setter
    def mgmt_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mgmt_mode", value)

    @property
    @pulumi.getter
    def mirrors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchMirrorArgs']]]]:
        """
        Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
        """
        return pulumi.get(self, "mirrors")

    @mirrors.setter
    def mirrors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchMirrorArgs']]]]):
        pulumi.set(self, "mirrors", value)

    @property
    @pulumi.getter(name="n8021xSettings")
    def n8021x_settings(self) -> Optional[pulumi.Input['ManagedswitchN8021xSettingsArgs']]:
        """
        Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n802_1x_settings` block is documented below.
        """
        return pulumi.get(self, "n8021x_settings")

    @n8021x_settings.setter
    def n8021x_settings(self, value: Optional[pulumi.Input['ManagedswitchN8021xSettingsArgs']]):
        pulumi.set(self, "n8021x_settings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Managed-switch name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideSnmpCommunity")
    def override_snmp_community(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_snmp_community")

    @override_snmp_community.setter
    def override_snmp_community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_snmp_community", value)

    @property
    @pulumi.getter(name="overrideSnmpSysinfo")
    def override_snmp_sysinfo(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "override_snmp_sysinfo")

    @override_snmp_sysinfo.setter
    def override_snmp_sysinfo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_snmp_sysinfo", value)

    @property
    @pulumi.getter(name="overrideSnmpTrapThreshold")
    def override_snmp_trap_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_snmp_trap_threshold")

    @override_snmp_trap_threshold.setter
    def override_snmp_trap_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_snmp_trap_threshold", value)

    @property
    @pulumi.getter(name="overrideSnmpUser")
    def override_snmp_user(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_snmp_user")

    @override_snmp_user.setter
    def override_snmp_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_snmp_user", value)

    @property
    @pulumi.getter(name="ownerVdom")
    def owner_vdom(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM which owner of port belongs to.
        """
        return pulumi.get(self, "owner_vdom")

    @owner_vdom.setter
    def owner_vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_vdom", value)

    @property
    @pulumi.getter(name="poeDetectionType")
    def poe_detection_type(self) -> Optional[pulumi.Input[int]]:
        """
        PoE detection type for FortiSwitch.
        """
        return pulumi.get(self, "poe_detection_type")

    @poe_detection_type.setter
    def poe_detection_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "poe_detection_type", value)

    @property
    @pulumi.getter(name="poeLldpDetection")
    def poe_lldp_detection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "poe_lldp_detection")

    @poe_lldp_detection.setter
    def poe_lldp_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_lldp_detection", value)

    @property
    @pulumi.getter(name="poePreStandardDetection")
    def poe_pre_standard_detection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "poe_pre_standard_detection")

    @poe_pre_standard_detection.setter
    def poe_pre_standard_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_pre_standard_detection", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchPortArgs']]]]:
        """
        Managed-switch port list. The structure of `ports` block is documented below.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchPortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="preProvisioned")
    def pre_provisioned(self) -> Optional[pulumi.Input[int]]:
        """
        Pre-provisioned managed switch.
        """
        return pulumi.get(self, "pre_provisioned")

    @pre_provisioned.setter
    def pre_provisioned(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pre_provisioned", value)

    @property
    @pulumi.getter(name="ptpProfile")
    def ptp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        PTP profile configuration.
        """
        return pulumi.get(self, "ptp_profile")

    @ptp_profile.setter
    def ptp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ptp_profile", value)

    @property
    @pulumi.getter(name="ptpStatus")
    def ptp_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PTP profile on this FortiSwitch. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ptp_status")

    @ptp_status.setter
    def ptp_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ptp_status", value)

    @property
    @pulumi.getter(name="purdueLevel")
    def purdue_level(self) -> Optional[pulumi.Input[str]]:
        """
        Purdue Level of this FortiSwitch. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
        """
        return pulumi.get(self, "purdue_level")

    @purdue_level.setter
    def purdue_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "purdue_level", value)

    @property
    @pulumi.getter(name="qosDropPolicy")
    def qos_drop_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
        """
        return pulumi.get(self, "qos_drop_policy")

    @qos_drop_policy.setter
    def qos_drop_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_drop_policy", value)

    @property
    @pulumi.getter(name="qosRedProbability")
    def qos_red_probability(self) -> Optional[pulumi.Input[int]]:
        """
        Set QoS RED/WRED drop probability.
        """
        return pulumi.get(self, "qos_red_probability")

    @qos_red_probability.setter
    def qos_red_probability(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "qos_red_probability", value)

    @property
    @pulumi.getter(name="radiusNasIp")
    def radius_nas_ip(self) -> Optional[pulumi.Input[str]]:
        """
        NAS-IP address.
        """
        return pulumi.get(self, "radius_nas_ip")

    @radius_nas_ip.setter
    def radius_nas_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_nas_ip", value)

    @property
    @pulumi.getter(name="radiusNasIpOverride")
    def radius_nas_ip_override(self) -> Optional[pulumi.Input[str]]:
        """
        Use locally defined NAS-IP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "radius_nas_ip_override")

    @radius_nas_ip_override.setter
    def radius_nas_ip_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_nas_ip_override", value)

    @property
    @pulumi.getter(name="remoteLogs")
    def remote_logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchRemoteLogArgs']]]]:
        """
        Configure logging by FortiSwitch device to a remote syslog server. The structure of `remote_log` block is documented below.
        """
        return pulumi.get(self, "remote_logs")

    @remote_logs.setter
    def remote_logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchRemoteLogArgs']]]]):
        pulumi.set(self, "remote_logs", value)

    @property
    @pulumi.getter(name="routeOffload")
    def route_offload(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable route offload on this FortiSwitch. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "route_offload")

    @route_offload.setter
    def route_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_offload", value)

    @property
    @pulumi.getter(name="routeOffloadMclag")
    def route_offload_mclag(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable route offload MCLAG on this FortiSwitch. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "route_offload_mclag")

    @route_offload_mclag.setter
    def route_offload_mclag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_offload_mclag", value)

    @property
    @pulumi.getter(name="routeOffloadRouters")
    def route_offload_routers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchRouteOffloadRouterArgs']]]]:
        """
        Configure route offload MCLAG IP address. The structure of `route_offload_router` block is documented below.
        """
        return pulumi.get(self, "route_offload_routers")

    @route_offload_routers.setter
    def route_offload_routers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchRouteOffloadRouterArgs']]]]):
        pulumi.set(self, "route_offload_routers", value)

    @property
    @pulumi.getter
    def sn(self) -> Optional[pulumi.Input[str]]:
        """
        Managed-switch serial number.
        """
        return pulumi.get(self, "sn")

    @sn.setter
    def sn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sn", value)

    @property
    @pulumi.getter(name="snmpCommunities")
    def snmp_communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchSnmpCommunityArgs']]]]:
        """
        Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmp_community` block is documented below.
        """
        return pulumi.get(self, "snmp_communities")

    @snmp_communities.setter
    def snmp_communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchSnmpCommunityArgs']]]]):
        pulumi.set(self, "snmp_communities", value)

    @property
    @pulumi.getter(name="snmpSysinfo")
    def snmp_sysinfo(self) -> Optional[pulumi.Input['ManagedswitchSnmpSysinfoArgs']]:
        """
        Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmp_sysinfo` block is documented below.
        """
        return pulumi.get(self, "snmp_sysinfo")

    @snmp_sysinfo.setter
    def snmp_sysinfo(self, value: Optional[pulumi.Input['ManagedswitchSnmpSysinfoArgs']]):
        pulumi.set(self, "snmp_sysinfo", value)

    @property
    @pulumi.getter(name="snmpTrapThreshold")
    def snmp_trap_threshold(self) -> Optional[pulumi.Input['ManagedswitchSnmpTrapThresholdArgs']]:
        """
        Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmp_trap_threshold` block is documented below.
        """
        return pulumi.get(self, "snmp_trap_threshold")

    @snmp_trap_threshold.setter
    def snmp_trap_threshold(self, value: Optional[pulumi.Input['ManagedswitchSnmpTrapThresholdArgs']]):
        pulumi.set(self, "snmp_trap_threshold", value)

    @property
    @pulumi.getter(name="snmpUsers")
    def snmp_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchSnmpUserArgs']]]]:
        """
        Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmp_user` block is documented below.
        """
        return pulumi.get(self, "snmp_users")

    @snmp_users.setter
    def snmp_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchSnmpUserArgs']]]]):
        pulumi.set(self, "snmp_users", value)

    @property
    @pulumi.getter(name="stagedImageVersion")
    def staged_image_version(self) -> Optional[pulumi.Input[str]]:
        """
        Staged image version for FortiSwitch.
        """
        return pulumi.get(self, "staged_image_version")

    @staged_image_version.setter
    def staged_image_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "staged_image_version", value)

    @property
    @pulumi.getter(name="staticMacs")
    def static_macs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchStaticMacArgs']]]]:
        """
        Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `static_mac` block is documented below.
        """
        return pulumi.get(self, "static_macs")

    @static_macs.setter
    def static_macs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchStaticMacArgs']]]]):
        pulumi.set(self, "static_macs", value)

    @property
    @pulumi.getter(name="stormControl")
    def storm_control(self) -> Optional[pulumi.Input['ManagedswitchStormControlArgs']]:
        """
        Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `storm_control` block is documented below.
        """
        return pulumi.get(self, "storm_control")

    @storm_control.setter
    def storm_control(self, value: Optional[pulumi.Input['ManagedswitchStormControlArgs']]):
        pulumi.set(self, "storm_control", value)

    @property
    @pulumi.getter(name="stpInstances")
    def stp_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchStpInstanceArgs']]]]:
        """
        Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stp_instance` block is documented below.
        """
        return pulumi.get(self, "stp_instances")

    @stp_instances.setter
    def stp_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchStpInstanceArgs']]]]):
        pulumi.set(self, "stp_instances", value)

    @property
    @pulumi.getter(name="stpSettings")
    def stp_settings(self) -> Optional[pulumi.Input['ManagedswitchStpSettingsArgs']]:
        """
        Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stp_settings` block is documented below.
        """
        return pulumi.get(self, "stp_settings")

    @stp_settings.setter
    def stp_settings(self, value: Optional[pulumi.Input['ManagedswitchStpSettingsArgs']]):
        pulumi.set(self, "stp_settings", value)

    @property
    @pulumi.getter(name="switchDeviceTag")
    def switch_device_tag(self) -> Optional[pulumi.Input[str]]:
        """
        User definable label/tag.
        """
        return pulumi.get(self, "switch_device_tag")

    @switch_device_tag.setter
    def switch_device_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_device_tag", value)

    @property
    @pulumi.getter(name="switchDhcpOpt43Key")
    def switch_dhcp_opt43_key(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP option43 key.
        """
        return pulumi.get(self, "switch_dhcp_opt43_key")

    @switch_dhcp_opt43_key.setter
    def switch_dhcp_opt43_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_dhcp_opt43_key", value)

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[pulumi.Input[str]]:
        """
        Managed-switch id.
        """
        return pulumi.get(self, "switch_id")

    @switch_id.setter
    def switch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_id", value)

    @property
    @pulumi.getter(name="switchLog")
    def switch_log(self) -> Optional[pulumi.Input['ManagedswitchSwitchLogArgs']]:
        """
        Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switch_log` block is documented below.
        """
        return pulumi.get(self, "switch_log")

    @switch_log.setter
    def switch_log(self, value: Optional[pulumi.Input['ManagedswitchSwitchLogArgs']]):
        pulumi.set(self, "switch_log", value)

    @property
    @pulumi.getter(name="switchProfile")
    def switch_profile(self) -> Optional[pulumi.Input[str]]:
        """
        FortiSwitch profile.
        """
        return pulumi.get(self, "switch_profile")

    @switch_profile.setter
    def switch_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_profile", value)

    @property
    @pulumi.getter(name="switchStpSettings")
    def switch_stp_settings(self) -> Optional[pulumi.Input['ManagedswitchSwitchStpSettingsArgs']]:
        """
        Configure spanning tree protocol (STP). The structure of `switch_stp_settings` block is documented below.
        """
        return pulumi.get(self, "switch_stp_settings")

    @switch_stp_settings.setter
    def switch_stp_settings(self, value: Optional[pulumi.Input['ManagedswitchSwitchStpSettingsArgs']]):
        pulumi.set(self, "switch_stp_settings", value)

    @property
    @pulumi.getter(name="tdrSupported")
    def tdr_supported(self) -> Optional[pulumi.Input[str]]:
        """
        TDR supported.
        """
        return pulumi.get(self, "tdr_supported")

    @tdr_supported.setter
    def tdr_supported(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tdr_supported", value)

    @property
    @pulumi.getter(name="tunnelDiscovered")
    def tunnel_discovered(self) -> Optional[pulumi.Input[int]]:
        """
        SOCKS tunnel management discovered.
        """
        return pulumi.get(self, "tunnel_discovered")

    @tunnel_discovered.setter
    def tunnel_discovered(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel_discovered", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Indication of switch type, physical or virtual. Valid values: `virtual`, `physical`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        FortiSwitch version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchVlanArgs']]]]:
        """
        Configure VLAN assignment priority. The structure of `vlan` block is documented below.
        """
        return pulumi.get(self, "vlans")

    @vlans.setter
    def vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedswitchVlanArgs']]]]):
        pulumi.set(self, "vlans", value)


class Managedswitch(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_profile: Optional[pulumi.Input[str]] = None,
                 custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchCustomCommandArgs']]]]] = None,
                 delayed_restart_trigger: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping_static_clients: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchDhcpSnoopingStaticClientArgs']]]]] = None,
                 directly_connected: Optional[pulumi.Input[int]] = None,
                 dynamic_capability: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 dynamically_discovered: Optional[pulumi.Input[int]] = None,
                 firmware_provision: Optional[pulumi.Input[str]] = None,
                 firmware_provision_latest: Optional[pulumi.Input[str]] = None,
                 firmware_provision_version: Optional[pulumi.Input[str]] = None,
                 flow_identity: Optional[pulumi.Input[str]] = None,
                 fsw_wan1_admin: Optional[pulumi.Input[str]] = None,
                 fsw_wan1_peer: Optional[pulumi.Input[str]] = None,
                 fsw_wan2_admin: Optional[pulumi.Input[str]] = None,
                 fsw_wan2_peer: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 igmp_snooping: Optional[pulumi.Input[pulumi.InputType['ManagedswitchIgmpSnoopingArgs']]] = None,
                 ip_source_guards: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchIpSourceGuardArgs']]]]] = None,
                 l3_discovered: Optional[pulumi.Input[int]] = None,
                 max_allowed_trunk_members: Optional[pulumi.Input[int]] = None,
                 mclag_igmp_snooping_aware: Optional[pulumi.Input[str]] = None,
                 mgmt_mode: Optional[pulumi.Input[int]] = None,
                 mirrors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchMirrorArgs']]]]] = None,
                 n8021x_settings: Optional[pulumi.Input[pulumi.InputType['ManagedswitchN8021xSettingsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_snmp_community: Optional[pulumi.Input[str]] = None,
                 override_snmp_sysinfo: Optional[pulumi.Input[str]] = None,
                 override_snmp_trap_threshold: Optional[pulumi.Input[str]] = None,
                 override_snmp_user: Optional[pulumi.Input[str]] = None,
                 owner_vdom: Optional[pulumi.Input[str]] = None,
                 poe_detection_type: Optional[pulumi.Input[int]] = None,
                 poe_lldp_detection: Optional[pulumi.Input[str]] = None,
                 poe_pre_standard_detection: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchPortArgs']]]]] = None,
                 pre_provisioned: Optional[pulumi.Input[int]] = None,
                 ptp_profile: Optional[pulumi.Input[str]] = None,
                 ptp_status: Optional[pulumi.Input[str]] = None,
                 purdue_level: Optional[pulumi.Input[str]] = None,
                 qos_drop_policy: Optional[pulumi.Input[str]] = None,
                 qos_red_probability: Optional[pulumi.Input[int]] = None,
                 radius_nas_ip: Optional[pulumi.Input[str]] = None,
                 radius_nas_ip_override: Optional[pulumi.Input[str]] = None,
                 remote_logs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchRemoteLogArgs']]]]] = None,
                 route_offload: Optional[pulumi.Input[str]] = None,
                 route_offload_mclag: Optional[pulumi.Input[str]] = None,
                 route_offload_routers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchRouteOffloadRouterArgs']]]]] = None,
                 sn: Optional[pulumi.Input[str]] = None,
                 snmp_communities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchSnmpCommunityArgs']]]]] = None,
                 snmp_sysinfo: Optional[pulumi.Input[pulumi.InputType['ManagedswitchSnmpSysinfoArgs']]] = None,
                 snmp_trap_threshold: Optional[pulumi.Input[pulumi.InputType['ManagedswitchSnmpTrapThresholdArgs']]] = None,
                 snmp_users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchSnmpUserArgs']]]]] = None,
                 staged_image_version: Optional[pulumi.Input[str]] = None,
                 static_macs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchStaticMacArgs']]]]] = None,
                 storm_control: Optional[pulumi.Input[pulumi.InputType['ManagedswitchStormControlArgs']]] = None,
                 stp_instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchStpInstanceArgs']]]]] = None,
                 stp_settings: Optional[pulumi.Input[pulumi.InputType['ManagedswitchStpSettingsArgs']]] = None,
                 switch_device_tag: Optional[pulumi.Input[str]] = None,
                 switch_dhcp_opt43_key: Optional[pulumi.Input[str]] = None,
                 switch_id: Optional[pulumi.Input[str]] = None,
                 switch_log: Optional[pulumi.Input[pulumi.InputType['ManagedswitchSwitchLogArgs']]] = None,
                 switch_profile: Optional[pulumi.Input[str]] = None,
                 switch_stp_settings: Optional[pulumi.Input[pulumi.InputType['ManagedswitchSwitchStpSettingsArgs']]] = None,
                 tdr_supported: Optional[pulumi.Input[str]] = None,
                 tunnel_discovered: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchVlanArgs']]]]] = None,
                 __props__=None):
        """
        Configure FortiSwitch devices that are managed by this FortiGate.

        ## Import

        SwitchController ManagedSwitch can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/managedswitch:Managedswitch labelname {{switch_id}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/managedswitch:Managedswitch labelname {{switch_id}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_profile: FortiSwitch access profile.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchCustomCommandArgs']]]] custom_commands: Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `custom_command` block is documented below.
        :param pulumi.Input[int] delayed_restart_trigger: Delayed restart triggered for this FortiSwitch.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] dhcp_server_access_list: DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchDhcpSnoopingStaticClientArgs']]]] dhcp_snooping_static_clients: Configure FortiSwitch DHCP snooping static clients. The structure of `dhcp_snooping_static_client` block is documented below.
        :param pulumi.Input[int] directly_connected: Directly connected FortiSwitch.
        :param pulumi.Input[int] dynamic_capability: List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] dynamically_discovered: Dynamically discovered FortiSwitch.
        :param pulumi.Input[str] firmware_provision: Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] firmware_provision_latest: Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
        :param pulumi.Input[str] firmware_provision_version: Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
        :param pulumi.Input[str] flow_identity: Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
        :param pulumi.Input[str] fsw_wan1_admin: FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        :param pulumi.Input[str] fsw_wan1_peer: Fortiswitch WAN1 peer port.
        :param pulumi.Input[str] fsw_wan2_admin: FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        :param pulumi.Input[str] fsw_wan2_peer: FortiSwitch WAN2 peer port.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[pulumi.InputType['ManagedswitchIgmpSnoopingArgs']] igmp_snooping: Configure FortiSwitch IGMP snooping global settings. The structure of `igmp_snooping` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchIpSourceGuardArgs']]]] ip_source_guards: IP source guard. The structure of `ip_source_guard` block is documented below.
        :param pulumi.Input[int] l3_discovered: Layer 3 management discovered.
        :param pulumi.Input[int] max_allowed_trunk_members: FortiSwitch maximum allowed trunk members.
        :param pulumi.Input[str] mclag_igmp_snooping_aware: Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mgmt_mode: FortiLink management mode.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchMirrorArgs']]]] mirrors: Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
        :param pulumi.Input[pulumi.InputType['ManagedswitchN8021xSettingsArgs']] n8021x_settings: Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n802_1x_settings` block is documented below.
        :param pulumi.Input[str] name: Managed-switch name.
        :param pulumi.Input[str] override_snmp_community: Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_snmp_sysinfo: Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] override_snmp_trap_threshold: Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_snmp_user: Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] owner_vdom: VDOM which owner of port belongs to.
        :param pulumi.Input[int] poe_detection_type: PoE detection type for FortiSwitch.
        :param pulumi.Input[str] poe_lldp_detection: Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] poe_pre_standard_detection: Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchPortArgs']]]] ports: Managed-switch port list. The structure of `ports` block is documented below.
        :param pulumi.Input[int] pre_provisioned: Pre-provisioned managed switch.
        :param pulumi.Input[str] ptp_profile: PTP profile configuration.
        :param pulumi.Input[str] ptp_status: Enable/disable PTP profile on this FortiSwitch. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] purdue_level: Purdue Level of this FortiSwitch. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
        :param pulumi.Input[str] qos_drop_policy: Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
        :param pulumi.Input[int] qos_red_probability: Set QoS RED/WRED drop probability.
        :param pulumi.Input[str] radius_nas_ip: NAS-IP address.
        :param pulumi.Input[str] radius_nas_ip_override: Use locally defined NAS-IP. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchRemoteLogArgs']]]] remote_logs: Configure logging by FortiSwitch device to a remote syslog server. The structure of `remote_log` block is documented below.
        :param pulumi.Input[str] route_offload: Enable/disable route offload on this FortiSwitch. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] route_offload_mclag: Enable/disable route offload MCLAG on this FortiSwitch. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchRouteOffloadRouterArgs']]]] route_offload_routers: Configure route offload MCLAG IP address. The structure of `route_offload_router` block is documented below.
        :param pulumi.Input[str] sn: Managed-switch serial number.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchSnmpCommunityArgs']]]] snmp_communities: Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmp_community` block is documented below.
        :param pulumi.Input[pulumi.InputType['ManagedswitchSnmpSysinfoArgs']] snmp_sysinfo: Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmp_sysinfo` block is documented below.
        :param pulumi.Input[pulumi.InputType['ManagedswitchSnmpTrapThresholdArgs']] snmp_trap_threshold: Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmp_trap_threshold` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchSnmpUserArgs']]]] snmp_users: Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmp_user` block is documented below.
        :param pulumi.Input[str] staged_image_version: Staged image version for FortiSwitch.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchStaticMacArgs']]]] static_macs: Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `static_mac` block is documented below.
        :param pulumi.Input[pulumi.InputType['ManagedswitchStormControlArgs']] storm_control: Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `storm_control` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchStpInstanceArgs']]]] stp_instances: Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stp_instance` block is documented below.
        :param pulumi.Input[pulumi.InputType['ManagedswitchStpSettingsArgs']] stp_settings: Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stp_settings` block is documented below.
        :param pulumi.Input[str] switch_device_tag: User definable label/tag.
        :param pulumi.Input[str] switch_dhcp_opt43_key: DHCP option43 key.
        :param pulumi.Input[str] switch_id: Managed-switch id.
        :param pulumi.Input[pulumi.InputType['ManagedswitchSwitchLogArgs']] switch_log: Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switch_log` block is documented below.
        :param pulumi.Input[str] switch_profile: FortiSwitch profile.
        :param pulumi.Input[pulumi.InputType['ManagedswitchSwitchStpSettingsArgs']] switch_stp_settings: Configure spanning tree protocol (STP). The structure of `switch_stp_settings` block is documented below.
        :param pulumi.Input[str] tdr_supported: TDR supported.
        :param pulumi.Input[int] tunnel_discovered: SOCKS tunnel management discovered.
        :param pulumi.Input[str] type: Indication of switch type, physical or virtual. Valid values: `virtual`, `physical`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] version: FortiSwitch version.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchVlanArgs']]]] vlans: Configure VLAN assignment priority. The structure of `vlan` block is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ManagedswitchArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure FortiSwitch devices that are managed by this FortiGate.

        ## Import

        SwitchController ManagedSwitch can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/managedswitch:Managedswitch labelname {{switch_id}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/managedswitch:Managedswitch labelname {{switch_id}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ManagedswitchArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ManagedswitchArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_profile: Optional[pulumi.Input[str]] = None,
                 custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchCustomCommandArgs']]]]] = None,
                 delayed_restart_trigger: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping_static_clients: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchDhcpSnoopingStaticClientArgs']]]]] = None,
                 directly_connected: Optional[pulumi.Input[int]] = None,
                 dynamic_capability: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 dynamically_discovered: Optional[pulumi.Input[int]] = None,
                 firmware_provision: Optional[pulumi.Input[str]] = None,
                 firmware_provision_latest: Optional[pulumi.Input[str]] = None,
                 firmware_provision_version: Optional[pulumi.Input[str]] = None,
                 flow_identity: Optional[pulumi.Input[str]] = None,
                 fsw_wan1_admin: Optional[pulumi.Input[str]] = None,
                 fsw_wan1_peer: Optional[pulumi.Input[str]] = None,
                 fsw_wan2_admin: Optional[pulumi.Input[str]] = None,
                 fsw_wan2_peer: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 igmp_snooping: Optional[pulumi.Input[pulumi.InputType['ManagedswitchIgmpSnoopingArgs']]] = None,
                 ip_source_guards: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchIpSourceGuardArgs']]]]] = None,
                 l3_discovered: Optional[pulumi.Input[int]] = None,
                 max_allowed_trunk_members: Optional[pulumi.Input[int]] = None,
                 mclag_igmp_snooping_aware: Optional[pulumi.Input[str]] = None,
                 mgmt_mode: Optional[pulumi.Input[int]] = None,
                 mirrors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchMirrorArgs']]]]] = None,
                 n8021x_settings: Optional[pulumi.Input[pulumi.InputType['ManagedswitchN8021xSettingsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_snmp_community: Optional[pulumi.Input[str]] = None,
                 override_snmp_sysinfo: Optional[pulumi.Input[str]] = None,
                 override_snmp_trap_threshold: Optional[pulumi.Input[str]] = None,
                 override_snmp_user: Optional[pulumi.Input[str]] = None,
                 owner_vdom: Optional[pulumi.Input[str]] = None,
                 poe_detection_type: Optional[pulumi.Input[int]] = None,
                 poe_lldp_detection: Optional[pulumi.Input[str]] = None,
                 poe_pre_standard_detection: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchPortArgs']]]]] = None,
                 pre_provisioned: Optional[pulumi.Input[int]] = None,
                 ptp_profile: Optional[pulumi.Input[str]] = None,
                 ptp_status: Optional[pulumi.Input[str]] = None,
                 purdue_level: Optional[pulumi.Input[str]] = None,
                 qos_drop_policy: Optional[pulumi.Input[str]] = None,
                 qos_red_probability: Optional[pulumi.Input[int]] = None,
                 radius_nas_ip: Optional[pulumi.Input[str]] = None,
                 radius_nas_ip_override: Optional[pulumi.Input[str]] = None,
                 remote_logs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchRemoteLogArgs']]]]] = None,
                 route_offload: Optional[pulumi.Input[str]] = None,
                 route_offload_mclag: Optional[pulumi.Input[str]] = None,
                 route_offload_routers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchRouteOffloadRouterArgs']]]]] = None,
                 sn: Optional[pulumi.Input[str]] = None,
                 snmp_communities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchSnmpCommunityArgs']]]]] = None,
                 snmp_sysinfo: Optional[pulumi.Input[pulumi.InputType['ManagedswitchSnmpSysinfoArgs']]] = None,
                 snmp_trap_threshold: Optional[pulumi.Input[pulumi.InputType['ManagedswitchSnmpTrapThresholdArgs']]] = None,
                 snmp_users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchSnmpUserArgs']]]]] = None,
                 staged_image_version: Optional[pulumi.Input[str]] = None,
                 static_macs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchStaticMacArgs']]]]] = None,
                 storm_control: Optional[pulumi.Input[pulumi.InputType['ManagedswitchStormControlArgs']]] = None,
                 stp_instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchStpInstanceArgs']]]]] = None,
                 stp_settings: Optional[pulumi.Input[pulumi.InputType['ManagedswitchStpSettingsArgs']]] = None,
                 switch_device_tag: Optional[pulumi.Input[str]] = None,
                 switch_dhcp_opt43_key: Optional[pulumi.Input[str]] = None,
                 switch_id: Optional[pulumi.Input[str]] = None,
                 switch_log: Optional[pulumi.Input[pulumi.InputType['ManagedswitchSwitchLogArgs']]] = None,
                 switch_profile: Optional[pulumi.Input[str]] = None,
                 switch_stp_settings: Optional[pulumi.Input[pulumi.InputType['ManagedswitchSwitchStpSettingsArgs']]] = None,
                 tdr_supported: Optional[pulumi.Input[str]] = None,
                 tunnel_discovered: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchVlanArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ManagedswitchArgs.__new__(ManagedswitchArgs)

            __props__.__dict__["access_profile"] = access_profile
            __props__.__dict__["custom_commands"] = custom_commands
            __props__.__dict__["delayed_restart_trigger"] = delayed_restart_trigger
            __props__.__dict__["description"] = description
            __props__.__dict__["dhcp_server_access_list"] = dhcp_server_access_list
            __props__.__dict__["dhcp_snooping_static_clients"] = dhcp_snooping_static_clients
            __props__.__dict__["directly_connected"] = directly_connected
            __props__.__dict__["dynamic_capability"] = dynamic_capability
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["dynamically_discovered"] = dynamically_discovered
            __props__.__dict__["firmware_provision"] = firmware_provision
            __props__.__dict__["firmware_provision_latest"] = firmware_provision_latest
            __props__.__dict__["firmware_provision_version"] = firmware_provision_version
            __props__.__dict__["flow_identity"] = flow_identity
            __props__.__dict__["fsw_wan1_admin"] = fsw_wan1_admin
            if fsw_wan1_peer is None and not opts.urn:
                raise TypeError("Missing required property 'fsw_wan1_peer'")
            __props__.__dict__["fsw_wan1_peer"] = fsw_wan1_peer
            __props__.__dict__["fsw_wan2_admin"] = fsw_wan2_admin
            __props__.__dict__["fsw_wan2_peer"] = fsw_wan2_peer
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["igmp_snooping"] = igmp_snooping
            __props__.__dict__["ip_source_guards"] = ip_source_guards
            __props__.__dict__["l3_discovered"] = l3_discovered
            __props__.__dict__["max_allowed_trunk_members"] = max_allowed_trunk_members
            __props__.__dict__["mclag_igmp_snooping_aware"] = mclag_igmp_snooping_aware
            __props__.__dict__["mgmt_mode"] = mgmt_mode
            __props__.__dict__["mirrors"] = mirrors
            __props__.__dict__["n8021x_settings"] = n8021x_settings
            __props__.__dict__["name"] = name
            __props__.__dict__["override_snmp_community"] = override_snmp_community
            __props__.__dict__["override_snmp_sysinfo"] = override_snmp_sysinfo
            __props__.__dict__["override_snmp_trap_threshold"] = override_snmp_trap_threshold
            __props__.__dict__["override_snmp_user"] = override_snmp_user
            __props__.__dict__["owner_vdom"] = owner_vdom
            __props__.__dict__["poe_detection_type"] = poe_detection_type
            __props__.__dict__["poe_lldp_detection"] = poe_lldp_detection
            __props__.__dict__["poe_pre_standard_detection"] = poe_pre_standard_detection
            __props__.__dict__["ports"] = ports
            __props__.__dict__["pre_provisioned"] = pre_provisioned
            __props__.__dict__["ptp_profile"] = ptp_profile
            __props__.__dict__["ptp_status"] = ptp_status
            __props__.__dict__["purdue_level"] = purdue_level
            __props__.__dict__["qos_drop_policy"] = qos_drop_policy
            __props__.__dict__["qos_red_probability"] = qos_red_probability
            __props__.__dict__["radius_nas_ip"] = radius_nas_ip
            __props__.__dict__["radius_nas_ip_override"] = radius_nas_ip_override
            __props__.__dict__["remote_logs"] = remote_logs
            __props__.__dict__["route_offload"] = route_offload
            __props__.__dict__["route_offload_mclag"] = route_offload_mclag
            __props__.__dict__["route_offload_routers"] = route_offload_routers
            __props__.__dict__["sn"] = sn
            __props__.__dict__["snmp_communities"] = snmp_communities
            __props__.__dict__["snmp_sysinfo"] = snmp_sysinfo
            __props__.__dict__["snmp_trap_threshold"] = snmp_trap_threshold
            __props__.__dict__["snmp_users"] = snmp_users
            __props__.__dict__["staged_image_version"] = staged_image_version
            __props__.__dict__["static_macs"] = static_macs
            __props__.__dict__["storm_control"] = storm_control
            __props__.__dict__["stp_instances"] = stp_instances
            __props__.__dict__["stp_settings"] = stp_settings
            __props__.__dict__["switch_device_tag"] = switch_device_tag
            __props__.__dict__["switch_dhcp_opt43_key"] = switch_dhcp_opt43_key
            if switch_id is None and not opts.urn:
                raise TypeError("Missing required property 'switch_id'")
            __props__.__dict__["switch_id"] = switch_id
            __props__.__dict__["switch_log"] = switch_log
            __props__.__dict__["switch_profile"] = switch_profile
            __props__.__dict__["switch_stp_settings"] = switch_stp_settings
            __props__.__dict__["tdr_supported"] = tdr_supported
            __props__.__dict__["tunnel_discovered"] = tunnel_discovered
            __props__.__dict__["type"] = type
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["version"] = version
            __props__.__dict__["vlans"] = vlans
        super(Managedswitch, __self__).__init__(
            'fortios:switchcontroller/managedswitch:Managedswitch',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_profile: Optional[pulumi.Input[str]] = None,
            custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchCustomCommandArgs']]]]] = None,
            delayed_restart_trigger: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
            dhcp_snooping_static_clients: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchDhcpSnoopingStaticClientArgs']]]]] = None,
            directly_connected: Optional[pulumi.Input[int]] = None,
            dynamic_capability: Optional[pulumi.Input[int]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            dynamically_discovered: Optional[pulumi.Input[int]] = None,
            firmware_provision: Optional[pulumi.Input[str]] = None,
            firmware_provision_latest: Optional[pulumi.Input[str]] = None,
            firmware_provision_version: Optional[pulumi.Input[str]] = None,
            flow_identity: Optional[pulumi.Input[str]] = None,
            fsw_wan1_admin: Optional[pulumi.Input[str]] = None,
            fsw_wan1_peer: Optional[pulumi.Input[str]] = None,
            fsw_wan2_admin: Optional[pulumi.Input[str]] = None,
            fsw_wan2_peer: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            igmp_snooping: Optional[pulumi.Input[pulumi.InputType['ManagedswitchIgmpSnoopingArgs']]] = None,
            ip_source_guards: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchIpSourceGuardArgs']]]]] = None,
            l3_discovered: Optional[pulumi.Input[int]] = None,
            max_allowed_trunk_members: Optional[pulumi.Input[int]] = None,
            mclag_igmp_snooping_aware: Optional[pulumi.Input[str]] = None,
            mgmt_mode: Optional[pulumi.Input[int]] = None,
            mirrors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchMirrorArgs']]]]] = None,
            n8021x_settings: Optional[pulumi.Input[pulumi.InputType['ManagedswitchN8021xSettingsArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            override_snmp_community: Optional[pulumi.Input[str]] = None,
            override_snmp_sysinfo: Optional[pulumi.Input[str]] = None,
            override_snmp_trap_threshold: Optional[pulumi.Input[str]] = None,
            override_snmp_user: Optional[pulumi.Input[str]] = None,
            owner_vdom: Optional[pulumi.Input[str]] = None,
            poe_detection_type: Optional[pulumi.Input[int]] = None,
            poe_lldp_detection: Optional[pulumi.Input[str]] = None,
            poe_pre_standard_detection: Optional[pulumi.Input[str]] = None,
            ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchPortArgs']]]]] = None,
            pre_provisioned: Optional[pulumi.Input[int]] = None,
            ptp_profile: Optional[pulumi.Input[str]] = None,
            ptp_status: Optional[pulumi.Input[str]] = None,
            purdue_level: Optional[pulumi.Input[str]] = None,
            qos_drop_policy: Optional[pulumi.Input[str]] = None,
            qos_red_probability: Optional[pulumi.Input[int]] = None,
            radius_nas_ip: Optional[pulumi.Input[str]] = None,
            radius_nas_ip_override: Optional[pulumi.Input[str]] = None,
            remote_logs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchRemoteLogArgs']]]]] = None,
            route_offload: Optional[pulumi.Input[str]] = None,
            route_offload_mclag: Optional[pulumi.Input[str]] = None,
            route_offload_routers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchRouteOffloadRouterArgs']]]]] = None,
            sn: Optional[pulumi.Input[str]] = None,
            snmp_communities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchSnmpCommunityArgs']]]]] = None,
            snmp_sysinfo: Optional[pulumi.Input[pulumi.InputType['ManagedswitchSnmpSysinfoArgs']]] = None,
            snmp_trap_threshold: Optional[pulumi.Input[pulumi.InputType['ManagedswitchSnmpTrapThresholdArgs']]] = None,
            snmp_users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchSnmpUserArgs']]]]] = None,
            staged_image_version: Optional[pulumi.Input[str]] = None,
            static_macs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchStaticMacArgs']]]]] = None,
            storm_control: Optional[pulumi.Input[pulumi.InputType['ManagedswitchStormControlArgs']]] = None,
            stp_instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchStpInstanceArgs']]]]] = None,
            stp_settings: Optional[pulumi.Input[pulumi.InputType['ManagedswitchStpSettingsArgs']]] = None,
            switch_device_tag: Optional[pulumi.Input[str]] = None,
            switch_dhcp_opt43_key: Optional[pulumi.Input[str]] = None,
            switch_id: Optional[pulumi.Input[str]] = None,
            switch_log: Optional[pulumi.Input[pulumi.InputType['ManagedswitchSwitchLogArgs']]] = None,
            switch_profile: Optional[pulumi.Input[str]] = None,
            switch_stp_settings: Optional[pulumi.Input[pulumi.InputType['ManagedswitchSwitchStpSettingsArgs']]] = None,
            tdr_supported: Optional[pulumi.Input[str]] = None,
            tunnel_discovered: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[int]] = None,
            vlans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchVlanArgs']]]]] = None) -> 'Managedswitch':
        """
        Get an existing Managedswitch resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_profile: FortiSwitch access profile.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchCustomCommandArgs']]]] custom_commands: Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `custom_command` block is documented below.
        :param pulumi.Input[int] delayed_restart_trigger: Delayed restart triggered for this FortiSwitch.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] dhcp_server_access_list: DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchDhcpSnoopingStaticClientArgs']]]] dhcp_snooping_static_clients: Configure FortiSwitch DHCP snooping static clients. The structure of `dhcp_snooping_static_client` block is documented below.
        :param pulumi.Input[int] directly_connected: Directly connected FortiSwitch.
        :param pulumi.Input[int] dynamic_capability: List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] dynamically_discovered: Dynamically discovered FortiSwitch.
        :param pulumi.Input[str] firmware_provision: Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] firmware_provision_latest: Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
        :param pulumi.Input[str] firmware_provision_version: Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
        :param pulumi.Input[str] flow_identity: Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
        :param pulumi.Input[str] fsw_wan1_admin: FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        :param pulumi.Input[str] fsw_wan1_peer: Fortiswitch WAN1 peer port.
        :param pulumi.Input[str] fsw_wan2_admin: FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        :param pulumi.Input[str] fsw_wan2_peer: FortiSwitch WAN2 peer port.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[pulumi.InputType['ManagedswitchIgmpSnoopingArgs']] igmp_snooping: Configure FortiSwitch IGMP snooping global settings. The structure of `igmp_snooping` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchIpSourceGuardArgs']]]] ip_source_guards: IP source guard. The structure of `ip_source_guard` block is documented below.
        :param pulumi.Input[int] l3_discovered: Layer 3 management discovered.
        :param pulumi.Input[int] max_allowed_trunk_members: FortiSwitch maximum allowed trunk members.
        :param pulumi.Input[str] mclag_igmp_snooping_aware: Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mgmt_mode: FortiLink management mode.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchMirrorArgs']]]] mirrors: Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
        :param pulumi.Input[pulumi.InputType['ManagedswitchN8021xSettingsArgs']] n8021x_settings: Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n802_1x_settings` block is documented below.
        :param pulumi.Input[str] name: Managed-switch name.
        :param pulumi.Input[str] override_snmp_community: Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_snmp_sysinfo: Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] override_snmp_trap_threshold: Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_snmp_user: Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] owner_vdom: VDOM which owner of port belongs to.
        :param pulumi.Input[int] poe_detection_type: PoE detection type for FortiSwitch.
        :param pulumi.Input[str] poe_lldp_detection: Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] poe_pre_standard_detection: Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchPortArgs']]]] ports: Managed-switch port list. The structure of `ports` block is documented below.
        :param pulumi.Input[int] pre_provisioned: Pre-provisioned managed switch.
        :param pulumi.Input[str] ptp_profile: PTP profile configuration.
        :param pulumi.Input[str] ptp_status: Enable/disable PTP profile on this FortiSwitch. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] purdue_level: Purdue Level of this FortiSwitch. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
        :param pulumi.Input[str] qos_drop_policy: Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
        :param pulumi.Input[int] qos_red_probability: Set QoS RED/WRED drop probability.
        :param pulumi.Input[str] radius_nas_ip: NAS-IP address.
        :param pulumi.Input[str] radius_nas_ip_override: Use locally defined NAS-IP. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchRemoteLogArgs']]]] remote_logs: Configure logging by FortiSwitch device to a remote syslog server. The structure of `remote_log` block is documented below.
        :param pulumi.Input[str] route_offload: Enable/disable route offload on this FortiSwitch. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] route_offload_mclag: Enable/disable route offload MCLAG on this FortiSwitch. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchRouteOffloadRouterArgs']]]] route_offload_routers: Configure route offload MCLAG IP address. The structure of `route_offload_router` block is documented below.
        :param pulumi.Input[str] sn: Managed-switch serial number.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchSnmpCommunityArgs']]]] snmp_communities: Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmp_community` block is documented below.
        :param pulumi.Input[pulumi.InputType['ManagedswitchSnmpSysinfoArgs']] snmp_sysinfo: Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmp_sysinfo` block is documented below.
        :param pulumi.Input[pulumi.InputType['ManagedswitchSnmpTrapThresholdArgs']] snmp_trap_threshold: Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmp_trap_threshold` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchSnmpUserArgs']]]] snmp_users: Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmp_user` block is documented below.
        :param pulumi.Input[str] staged_image_version: Staged image version for FortiSwitch.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchStaticMacArgs']]]] static_macs: Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `static_mac` block is documented below.
        :param pulumi.Input[pulumi.InputType['ManagedswitchStormControlArgs']] storm_control: Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `storm_control` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchStpInstanceArgs']]]] stp_instances: Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stp_instance` block is documented below.
        :param pulumi.Input[pulumi.InputType['ManagedswitchStpSettingsArgs']] stp_settings: Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stp_settings` block is documented below.
        :param pulumi.Input[str] switch_device_tag: User definable label/tag.
        :param pulumi.Input[str] switch_dhcp_opt43_key: DHCP option43 key.
        :param pulumi.Input[str] switch_id: Managed-switch id.
        :param pulumi.Input[pulumi.InputType['ManagedswitchSwitchLogArgs']] switch_log: Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switch_log` block is documented below.
        :param pulumi.Input[str] switch_profile: FortiSwitch profile.
        :param pulumi.Input[pulumi.InputType['ManagedswitchSwitchStpSettingsArgs']] switch_stp_settings: Configure spanning tree protocol (STP). The structure of `switch_stp_settings` block is documented below.
        :param pulumi.Input[str] tdr_supported: TDR supported.
        :param pulumi.Input[int] tunnel_discovered: SOCKS tunnel management discovered.
        :param pulumi.Input[str] type: Indication of switch type, physical or virtual. Valid values: `virtual`, `physical`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] version: FortiSwitch version.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedswitchVlanArgs']]]] vlans: Configure VLAN assignment priority. The structure of `vlan` block is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ManagedswitchState.__new__(_ManagedswitchState)

        __props__.__dict__["access_profile"] = access_profile
        __props__.__dict__["custom_commands"] = custom_commands
        __props__.__dict__["delayed_restart_trigger"] = delayed_restart_trigger
        __props__.__dict__["description"] = description
        __props__.__dict__["dhcp_server_access_list"] = dhcp_server_access_list
        __props__.__dict__["dhcp_snooping_static_clients"] = dhcp_snooping_static_clients
        __props__.__dict__["directly_connected"] = directly_connected
        __props__.__dict__["dynamic_capability"] = dynamic_capability
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["dynamically_discovered"] = dynamically_discovered
        __props__.__dict__["firmware_provision"] = firmware_provision
        __props__.__dict__["firmware_provision_latest"] = firmware_provision_latest
        __props__.__dict__["firmware_provision_version"] = firmware_provision_version
        __props__.__dict__["flow_identity"] = flow_identity
        __props__.__dict__["fsw_wan1_admin"] = fsw_wan1_admin
        __props__.__dict__["fsw_wan1_peer"] = fsw_wan1_peer
        __props__.__dict__["fsw_wan2_admin"] = fsw_wan2_admin
        __props__.__dict__["fsw_wan2_peer"] = fsw_wan2_peer
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["igmp_snooping"] = igmp_snooping
        __props__.__dict__["ip_source_guards"] = ip_source_guards
        __props__.__dict__["l3_discovered"] = l3_discovered
        __props__.__dict__["max_allowed_trunk_members"] = max_allowed_trunk_members
        __props__.__dict__["mclag_igmp_snooping_aware"] = mclag_igmp_snooping_aware
        __props__.__dict__["mgmt_mode"] = mgmt_mode
        __props__.__dict__["mirrors"] = mirrors
        __props__.__dict__["n8021x_settings"] = n8021x_settings
        __props__.__dict__["name"] = name
        __props__.__dict__["override_snmp_community"] = override_snmp_community
        __props__.__dict__["override_snmp_sysinfo"] = override_snmp_sysinfo
        __props__.__dict__["override_snmp_trap_threshold"] = override_snmp_trap_threshold
        __props__.__dict__["override_snmp_user"] = override_snmp_user
        __props__.__dict__["owner_vdom"] = owner_vdom
        __props__.__dict__["poe_detection_type"] = poe_detection_type
        __props__.__dict__["poe_lldp_detection"] = poe_lldp_detection
        __props__.__dict__["poe_pre_standard_detection"] = poe_pre_standard_detection
        __props__.__dict__["ports"] = ports
        __props__.__dict__["pre_provisioned"] = pre_provisioned
        __props__.__dict__["ptp_profile"] = ptp_profile
        __props__.__dict__["ptp_status"] = ptp_status
        __props__.__dict__["purdue_level"] = purdue_level
        __props__.__dict__["qos_drop_policy"] = qos_drop_policy
        __props__.__dict__["qos_red_probability"] = qos_red_probability
        __props__.__dict__["radius_nas_ip"] = radius_nas_ip
        __props__.__dict__["radius_nas_ip_override"] = radius_nas_ip_override
        __props__.__dict__["remote_logs"] = remote_logs
        __props__.__dict__["route_offload"] = route_offload
        __props__.__dict__["route_offload_mclag"] = route_offload_mclag
        __props__.__dict__["route_offload_routers"] = route_offload_routers
        __props__.__dict__["sn"] = sn
        __props__.__dict__["snmp_communities"] = snmp_communities
        __props__.__dict__["snmp_sysinfo"] = snmp_sysinfo
        __props__.__dict__["snmp_trap_threshold"] = snmp_trap_threshold
        __props__.__dict__["snmp_users"] = snmp_users
        __props__.__dict__["staged_image_version"] = staged_image_version
        __props__.__dict__["static_macs"] = static_macs
        __props__.__dict__["storm_control"] = storm_control
        __props__.__dict__["stp_instances"] = stp_instances
        __props__.__dict__["stp_settings"] = stp_settings
        __props__.__dict__["switch_device_tag"] = switch_device_tag
        __props__.__dict__["switch_dhcp_opt43_key"] = switch_dhcp_opt43_key
        __props__.__dict__["switch_id"] = switch_id
        __props__.__dict__["switch_log"] = switch_log
        __props__.__dict__["switch_profile"] = switch_profile
        __props__.__dict__["switch_stp_settings"] = switch_stp_settings
        __props__.__dict__["tdr_supported"] = tdr_supported
        __props__.__dict__["tunnel_discovered"] = tunnel_discovered
        __props__.__dict__["type"] = type
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["version"] = version
        __props__.__dict__["vlans"] = vlans
        return Managedswitch(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessProfile")
    def access_profile(self) -> pulumi.Output[str]:
        """
        FortiSwitch access profile.
        """
        return pulumi.get(self, "access_profile")

    @property
    @pulumi.getter(name="customCommands")
    def custom_commands(self) -> pulumi.Output[Optional[Sequence['outputs.ManagedswitchCustomCommand']]]:
        """
        Configuration method to edit FortiSwitch commands to be pushed to this FortiSwitch device upon rebooting the FortiGate switch controller or the FortiSwitch. The structure of `custom_command` block is documented below.
        """
        return pulumi.get(self, "custom_commands")

    @property
    @pulumi.getter(name="delayedRestartTrigger")
    def delayed_restart_trigger(self) -> pulumi.Output[int]:
        """
        Delayed restart triggered for this FortiSwitch.
        """
        return pulumi.get(self, "delayed_restart_trigger")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dhcpServerAccessList")
    def dhcp_server_access_list(self) -> pulumi.Output[str]:
        """
        DHCP snooping server access list. Valid values: `global`, `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_server_access_list")

    @property
    @pulumi.getter(name="dhcpSnoopingStaticClients")
    def dhcp_snooping_static_clients(self) -> pulumi.Output[Optional[Sequence['outputs.ManagedswitchDhcpSnoopingStaticClient']]]:
        """
        Configure FortiSwitch DHCP snooping static clients. The structure of `dhcp_snooping_static_client` block is documented below.
        """
        return pulumi.get(self, "dhcp_snooping_static_clients")

    @property
    @pulumi.getter(name="directlyConnected")
    def directly_connected(self) -> pulumi.Output[int]:
        """
        Directly connected FortiSwitch.
        """
        return pulumi.get(self, "directly_connected")

    @property
    @pulumi.getter(name="dynamicCapability")
    def dynamic_capability(self) -> pulumi.Output[int]:
        """
        List of features this FortiSwitch supports (not configurable) that is sent to the FortiGate device for subsequent configuration initiated by the FortiGate device.
        """
        return pulumi.get(self, "dynamic_capability")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="dynamicallyDiscovered")
    def dynamically_discovered(self) -> pulumi.Output[int]:
        """
        Dynamically discovered FortiSwitch.
        """
        return pulumi.get(self, "dynamically_discovered")

    @property
    @pulumi.getter(name="firmwareProvision")
    def firmware_provision(self) -> pulumi.Output[str]:
        """
        Enable/disable provisioning of firmware to FortiSwitches on join connection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "firmware_provision")

    @property
    @pulumi.getter(name="firmwareProvisionLatest")
    def firmware_provision_latest(self) -> pulumi.Output[str]:
        """
        Enable/disable one-time automatic provisioning of the latest firmware version. Valid values: `disable`, `once`.
        """
        return pulumi.get(self, "firmware_provision_latest")

    @property
    @pulumi.getter(name="firmwareProvisionVersion")
    def firmware_provision_version(self) -> pulumi.Output[str]:
        """
        Firmware version to provision to this FortiSwitch on bootup (major.minor.build, i.e. 6.2.1234).
        """
        return pulumi.get(self, "firmware_provision_version")

    @property
    @pulumi.getter(name="flowIdentity")
    def flow_identity(self) -> pulumi.Output[str]:
        """
        Flow-tracking netflow ipfix switch identity in hex format(00000000-FFFFFFFF default=0).
        """
        return pulumi.get(self, "flow_identity")

    @property
    @pulumi.getter(name="fswWan1Admin")
    def fsw_wan1_admin(self) -> pulumi.Output[str]:
        """
        FortiSwitch WAN1 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        """
        return pulumi.get(self, "fsw_wan1_admin")

    @property
    @pulumi.getter(name="fswWan1Peer")
    def fsw_wan1_peer(self) -> pulumi.Output[str]:
        """
        Fortiswitch WAN1 peer port.
        """
        return pulumi.get(self, "fsw_wan1_peer")

    @property
    @pulumi.getter(name="fswWan2Admin")
    def fsw_wan2_admin(self) -> pulumi.Output[str]:
        """
        FortiSwitch WAN2 admin status; enable to authorize the FortiSwitch as a managed switch. Valid values: `discovered`, `disable`, `enable`.
        """
        return pulumi.get(self, "fsw_wan2_admin")

    @property
    @pulumi.getter(name="fswWan2Peer")
    def fsw_wan2_peer(self) -> pulumi.Output[str]:
        """
        FortiSwitch WAN2 peer port.
        """
        return pulumi.get(self, "fsw_wan2_peer")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> pulumi.Output['outputs.ManagedswitchIgmpSnooping']:
        """
        Configure FortiSwitch IGMP snooping global settings. The structure of `igmp_snooping` block is documented below.
        """
        return pulumi.get(self, "igmp_snooping")

    @property
    @pulumi.getter(name="ipSourceGuards")
    def ip_source_guards(self) -> pulumi.Output[Optional[Sequence['outputs.ManagedswitchIpSourceGuard']]]:
        """
        IP source guard. The structure of `ip_source_guard` block is documented below.
        """
        return pulumi.get(self, "ip_source_guards")

    @property
    @pulumi.getter(name="l3Discovered")
    def l3_discovered(self) -> pulumi.Output[int]:
        """
        Layer 3 management discovered.
        """
        return pulumi.get(self, "l3_discovered")

    @property
    @pulumi.getter(name="maxAllowedTrunkMembers")
    def max_allowed_trunk_members(self) -> pulumi.Output[int]:
        """
        FortiSwitch maximum allowed trunk members.
        """
        return pulumi.get(self, "max_allowed_trunk_members")

    @property
    @pulumi.getter(name="mclagIgmpSnoopingAware")
    def mclag_igmp_snooping_aware(self) -> pulumi.Output[str]:
        """
        Enable/disable MCLAG IGMP-snooping awareness. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mclag_igmp_snooping_aware")

    @property
    @pulumi.getter(name="mgmtMode")
    def mgmt_mode(self) -> pulumi.Output[int]:
        """
        FortiLink management mode.
        """
        return pulumi.get(self, "mgmt_mode")

    @property
    @pulumi.getter
    def mirrors(self) -> pulumi.Output[Optional[Sequence['outputs.ManagedswitchMirror']]]:
        """
        Configuration method to edit FortiSwitch packet mirror. The structure of `mirror` block is documented below.
        """
        return pulumi.get(self, "mirrors")

    @property
    @pulumi.getter(name="n8021xSettings")
    def n8021x_settings(self) -> pulumi.Output['outputs.ManagedswitchN8021xSettings']:
        """
        Configuration method to edit FortiSwitch 802.1X global settings. The structure of `n802_1x_settings` block is documented below.
        """
        return pulumi.get(self, "n8021x_settings")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Managed-switch name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideSnmpCommunity")
    def override_snmp_community(self) -> pulumi.Output[str]:
        """
        Enable/disable overriding the global SNMP communities. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_snmp_community")

    @property
    @pulumi.getter(name="overrideSnmpSysinfo")
    def override_snmp_sysinfo(self) -> pulumi.Output[str]:
        """
        Enable/disable overriding the global SNMP system information. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "override_snmp_sysinfo")

    @property
    @pulumi.getter(name="overrideSnmpTrapThreshold")
    def override_snmp_trap_threshold(self) -> pulumi.Output[str]:
        """
        Enable/disable overriding the global SNMP trap threshold values. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_snmp_trap_threshold")

    @property
    @pulumi.getter(name="overrideSnmpUser")
    def override_snmp_user(self) -> pulumi.Output[str]:
        """
        Enable/disable overriding the global SNMP users. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_snmp_user")

    @property
    @pulumi.getter(name="ownerVdom")
    def owner_vdom(self) -> pulumi.Output[str]:
        """
        VDOM which owner of port belongs to.
        """
        return pulumi.get(self, "owner_vdom")

    @property
    @pulumi.getter(name="poeDetectionType")
    def poe_detection_type(self) -> pulumi.Output[int]:
        """
        PoE detection type for FortiSwitch.
        """
        return pulumi.get(self, "poe_detection_type")

    @property
    @pulumi.getter(name="poeLldpDetection")
    def poe_lldp_detection(self) -> pulumi.Output[str]:
        """
        Enable/disable PoE LLDP detection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "poe_lldp_detection")

    @property
    @pulumi.getter(name="poePreStandardDetection")
    def poe_pre_standard_detection(self) -> pulumi.Output[str]:
        """
        Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "poe_pre_standard_detection")

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Output[Sequence['outputs.ManagedswitchPort']]:
        """
        Managed-switch port list. The structure of `ports` block is documented below.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="preProvisioned")
    def pre_provisioned(self) -> pulumi.Output[int]:
        """
        Pre-provisioned managed switch.
        """
        return pulumi.get(self, "pre_provisioned")

    @property
    @pulumi.getter(name="ptpProfile")
    def ptp_profile(self) -> pulumi.Output[str]:
        """
        PTP profile configuration.
        """
        return pulumi.get(self, "ptp_profile")

    @property
    @pulumi.getter(name="ptpStatus")
    def ptp_status(self) -> pulumi.Output[str]:
        """
        Enable/disable PTP profile on this FortiSwitch. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ptp_status")

    @property
    @pulumi.getter(name="purdueLevel")
    def purdue_level(self) -> pulumi.Output[str]:
        """
        Purdue Level of this FortiSwitch. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
        """
        return pulumi.get(self, "purdue_level")

    @property
    @pulumi.getter(name="qosDropPolicy")
    def qos_drop_policy(self) -> pulumi.Output[str]:
        """
        Set QoS drop-policy. Valid values: `taildrop`, `random-early-detection`.
        """
        return pulumi.get(self, "qos_drop_policy")

    @property
    @pulumi.getter(name="qosRedProbability")
    def qos_red_probability(self) -> pulumi.Output[int]:
        """
        Set QoS RED/WRED drop probability.
        """
        return pulumi.get(self, "qos_red_probability")

    @property
    @pulumi.getter(name="radiusNasIp")
    def radius_nas_ip(self) -> pulumi.Output[str]:
        """
        NAS-IP address.
        """
        return pulumi.get(self, "radius_nas_ip")

    @property
    @pulumi.getter(name="radiusNasIpOverride")
    def radius_nas_ip_override(self) -> pulumi.Output[str]:
        """
        Use locally defined NAS-IP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "radius_nas_ip_override")

    @property
    @pulumi.getter(name="remoteLogs")
    def remote_logs(self) -> pulumi.Output[Optional[Sequence['outputs.ManagedswitchRemoteLog']]]:
        """
        Configure logging by FortiSwitch device to a remote syslog server. The structure of `remote_log` block is documented below.
        """
        return pulumi.get(self, "remote_logs")

    @property
    @pulumi.getter(name="routeOffload")
    def route_offload(self) -> pulumi.Output[str]:
        """
        Enable/disable route offload on this FortiSwitch. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "route_offload")

    @property
    @pulumi.getter(name="routeOffloadMclag")
    def route_offload_mclag(self) -> pulumi.Output[str]:
        """
        Enable/disable route offload MCLAG on this FortiSwitch. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "route_offload_mclag")

    @property
    @pulumi.getter(name="routeOffloadRouters")
    def route_offload_routers(self) -> pulumi.Output[Optional[Sequence['outputs.ManagedswitchRouteOffloadRouter']]]:
        """
        Configure route offload MCLAG IP address. The structure of `route_offload_router` block is documented below.
        """
        return pulumi.get(self, "route_offload_routers")

    @property
    @pulumi.getter
    def sn(self) -> pulumi.Output[str]:
        """
        Managed-switch serial number.
        """
        return pulumi.get(self, "sn")

    @property
    @pulumi.getter(name="snmpCommunities")
    def snmp_communities(self) -> pulumi.Output[Optional[Sequence['outputs.ManagedswitchSnmpCommunity']]]:
        """
        Configuration method to edit Simple Network Management Protocol (SNMP) communities. The structure of `snmp_community` block is documented below.
        """
        return pulumi.get(self, "snmp_communities")

    @property
    @pulumi.getter(name="snmpSysinfo")
    def snmp_sysinfo(self) -> pulumi.Output['outputs.ManagedswitchSnmpSysinfo']:
        """
        Configuration method to edit Simple Network Management Protocol (SNMP) system info. The structure of `snmp_sysinfo` block is documented below.
        """
        return pulumi.get(self, "snmp_sysinfo")

    @property
    @pulumi.getter(name="snmpTrapThreshold")
    def snmp_trap_threshold(self) -> pulumi.Output['outputs.ManagedswitchSnmpTrapThreshold']:
        """
        Configuration method to edit Simple Network Management Protocol (SNMP) trap threshold values. The structure of `snmp_trap_threshold` block is documented below.
        """
        return pulumi.get(self, "snmp_trap_threshold")

    @property
    @pulumi.getter(name="snmpUsers")
    def snmp_users(self) -> pulumi.Output[Optional[Sequence['outputs.ManagedswitchSnmpUser']]]:
        """
        Configuration method to edit Simple Network Management Protocol (SNMP) users. The structure of `snmp_user` block is documented below.
        """
        return pulumi.get(self, "snmp_users")

    @property
    @pulumi.getter(name="stagedImageVersion")
    def staged_image_version(self) -> pulumi.Output[str]:
        """
        Staged image version for FortiSwitch.
        """
        return pulumi.get(self, "staged_image_version")

    @property
    @pulumi.getter(name="staticMacs")
    def static_macs(self) -> pulumi.Output[Optional[Sequence['outputs.ManagedswitchStaticMac']]]:
        """
        Configuration method to edit FortiSwitch Static and Sticky MAC. The structure of `static_mac` block is documented below.
        """
        return pulumi.get(self, "static_macs")

    @property
    @pulumi.getter(name="stormControl")
    def storm_control(self) -> pulumi.Output['outputs.ManagedswitchStormControl']:
        """
        Configuration method to edit FortiSwitch storm control for measuring traffic activity using data rates to prevent traffic disruption. The structure of `storm_control` block is documented below.
        """
        return pulumi.get(self, "storm_control")

    @property
    @pulumi.getter(name="stpInstances")
    def stp_instances(self) -> pulumi.Output[Optional[Sequence['outputs.ManagedswitchStpInstance']]]:
        """
        Configuration method to edit Spanning Tree Protocol (STP) instances. The structure of `stp_instance` block is documented below.
        """
        return pulumi.get(self, "stp_instances")

    @property
    @pulumi.getter(name="stpSettings")
    def stp_settings(self) -> pulumi.Output['outputs.ManagedswitchStpSettings']:
        """
        Configuration method to edit Spanning Tree Protocol (STP) settings used to prevent bridge loops. The structure of `stp_settings` block is documented below.
        """
        return pulumi.get(self, "stp_settings")

    @property
    @pulumi.getter(name="switchDeviceTag")
    def switch_device_tag(self) -> pulumi.Output[str]:
        """
        User definable label/tag.
        """
        return pulumi.get(self, "switch_device_tag")

    @property
    @pulumi.getter(name="switchDhcpOpt43Key")
    def switch_dhcp_opt43_key(self) -> pulumi.Output[str]:
        """
        DHCP option43 key.
        """
        return pulumi.get(self, "switch_dhcp_opt43_key")

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> pulumi.Output[str]:
        """
        Managed-switch id.
        """
        return pulumi.get(self, "switch_id")

    @property
    @pulumi.getter(name="switchLog")
    def switch_log(self) -> pulumi.Output['outputs.ManagedswitchSwitchLog']:
        """
        Configuration method to edit FortiSwitch logging settings (logs are transferred to and inserted into the FortiGate event log). The structure of `switch_log` block is documented below.
        """
        return pulumi.get(self, "switch_log")

    @property
    @pulumi.getter(name="switchProfile")
    def switch_profile(self) -> pulumi.Output[str]:
        """
        FortiSwitch profile.
        """
        return pulumi.get(self, "switch_profile")

    @property
    @pulumi.getter(name="switchStpSettings")
    def switch_stp_settings(self) -> pulumi.Output['outputs.ManagedswitchSwitchStpSettings']:
        """
        Configure spanning tree protocol (STP). The structure of `switch_stp_settings` block is documented below.
        """
        return pulumi.get(self, "switch_stp_settings")

    @property
    @pulumi.getter(name="tdrSupported")
    def tdr_supported(self) -> pulumi.Output[str]:
        """
        TDR supported.
        """
        return pulumi.get(self, "tdr_supported")

    @property
    @pulumi.getter(name="tunnelDiscovered")
    def tunnel_discovered(self) -> pulumi.Output[int]:
        """
        SOCKS tunnel management discovered.
        """
        return pulumi.get(self, "tunnel_discovered")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Indication of switch type, physical or virtual. Valid values: `virtual`, `physical`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[int]:
        """
        FortiSwitch version.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def vlans(self) -> pulumi.Output[Optional[Sequence['outputs.ManagedswitchVlan']]]:
        """
        Configure VLAN assignment priority. The structure of `vlan` block is documented below.
        """
        return pulumi.get(self, "vlans")

