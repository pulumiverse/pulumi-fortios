# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FlowtrackingArgs', 'Flowtracking']

@pulumi.input_type
class FlowtrackingArgs:
    def __init__(__self__, *,
                 aggregates: Optional[pulumi.Input[Sequence[pulumi.Input['FlowtrackingAggregateArgs']]]] = None,
                 collector_ip: Optional[pulumi.Input[str]] = None,
                 collector_port: Optional[pulumi.Input[int]] = None,
                 collectors: Optional[pulumi.Input[Sequence[pulumi.Input['FlowtrackingCollectorArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 max_export_pkt_size: Optional[pulumi.Input[int]] = None,
                 sample_mode: Optional[pulumi.Input[str]] = None,
                 sample_rate: Optional[pulumi.Input[int]] = None,
                 template_export_period: Optional[pulumi.Input[int]] = None,
                 timeout_general: Optional[pulumi.Input[int]] = None,
                 timeout_icmp: Optional[pulumi.Input[int]] = None,
                 timeout_max: Optional[pulumi.Input[int]] = None,
                 timeout_tcp: Optional[pulumi.Input[int]] = None,
                 timeout_tcp_fin: Optional[pulumi.Input[int]] = None,
                 timeout_tcp_rst: Optional[pulumi.Input[int]] = None,
                 timeout_udp: Optional[pulumi.Input[int]] = None,
                 transport: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Flowtracking resource.
        :param pulumi.Input[Sequence[pulumi.Input['FlowtrackingAggregateArgs']]] aggregates: Configure aggregates in which all traffic sessions matching the IP Address will be grouped into the same flow. The structure of `aggregates` block is documented below.
        :param pulumi.Input[str] collector_ip: Configure collector ip address.
        :param pulumi.Input[int] collector_port: Configure collector port number(0-65535, default=0).
        :param pulumi.Input[Sequence[pulumi.Input['FlowtrackingCollectorArgs']]] collectors: Configure collectors for the flow. The structure of `collectors` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] format: Configure flow tracking protocol. Valid values: `netflow1`, `netflow5`, `netflow9`, `ipfix`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] level: Configure flow tracking level. Valid values: `vlan`, `ip`, `port`, `proto`, `mac`.
        :param pulumi.Input[int] max_export_pkt_size: Configure flow max export packet size (512-9216, default=512 bytes).
        :param pulumi.Input[str] sample_mode: Configure sample mode for the flow tracking. Valid values: `local`, `perimeter`, `device-ingress`.
        :param pulumi.Input[int] sample_rate: Configure sample rate for the perimeter and device-ingress sampling(0 - 99999).
        :param pulumi.Input[int] template_export_period: Configure template export period (1-60, default=5 minutes).
        :param pulumi.Input[int] timeout_general: Configure flow session general timeout (60-604800, default=3600 seconds).
        :param pulumi.Input[int] timeout_icmp: Configure flow session ICMP timeout (60-604800, default=300 seconds).
        :param pulumi.Input[int] timeout_max: Configure flow session max timeout (60-604800, default=604800 seconds).
        :param pulumi.Input[int] timeout_tcp: Configure flow session TCP timeout (60-604800, default=3600 seconds).
        :param pulumi.Input[int] timeout_tcp_fin: Configure flow session TCP FIN timeout (60-604800, default=300 seconds).
        :param pulumi.Input[int] timeout_tcp_rst: Configure flow session TCP RST timeout (60-604800, default=120 seconds).
        :param pulumi.Input[int] timeout_udp: Configure flow session UDP timeout (60-604800, default=300 seconds).
        :param pulumi.Input[str] transport: Configure L4 transport protocol for exporting packets. Valid values: `udp`, `tcp`, `sctp`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if aggregates is not None:
            pulumi.set(__self__, "aggregates", aggregates)
        if collector_ip is not None:
            pulumi.set(__self__, "collector_ip", collector_ip)
        if collector_port is not None:
            pulumi.set(__self__, "collector_port", collector_port)
        if collectors is not None:
            pulumi.set(__self__, "collectors", collectors)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if max_export_pkt_size is not None:
            pulumi.set(__self__, "max_export_pkt_size", max_export_pkt_size)
        if sample_mode is not None:
            pulumi.set(__self__, "sample_mode", sample_mode)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)
        if template_export_period is not None:
            pulumi.set(__self__, "template_export_period", template_export_period)
        if timeout_general is not None:
            pulumi.set(__self__, "timeout_general", timeout_general)
        if timeout_icmp is not None:
            pulumi.set(__self__, "timeout_icmp", timeout_icmp)
        if timeout_max is not None:
            pulumi.set(__self__, "timeout_max", timeout_max)
        if timeout_tcp is not None:
            pulumi.set(__self__, "timeout_tcp", timeout_tcp)
        if timeout_tcp_fin is not None:
            pulumi.set(__self__, "timeout_tcp_fin", timeout_tcp_fin)
        if timeout_tcp_rst is not None:
            pulumi.set(__self__, "timeout_tcp_rst", timeout_tcp_rst)
        if timeout_udp is not None:
            pulumi.set(__self__, "timeout_udp", timeout_udp)
        if transport is not None:
            pulumi.set(__self__, "transport", transport)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def aggregates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlowtrackingAggregateArgs']]]]:
        """
        Configure aggregates in which all traffic sessions matching the IP Address will be grouped into the same flow. The structure of `aggregates` block is documented below.
        """
        return pulumi.get(self, "aggregates")

    @aggregates.setter
    def aggregates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlowtrackingAggregateArgs']]]]):
        pulumi.set(self, "aggregates", value)

    @property
    @pulumi.getter(name="collectorIp")
    def collector_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Configure collector ip address.
        """
        return pulumi.get(self, "collector_ip")

    @collector_ip.setter
    def collector_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collector_ip", value)

    @property
    @pulumi.getter(name="collectorPort")
    def collector_port(self) -> Optional[pulumi.Input[int]]:
        """
        Configure collector port number(0-65535, default=0).
        """
        return pulumi.get(self, "collector_port")

    @collector_port.setter
    def collector_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "collector_port", value)

    @property
    @pulumi.getter
    def collectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlowtrackingCollectorArgs']]]]:
        """
        Configure collectors for the flow. The structure of `collectors` block is documented below.
        """
        return pulumi.get(self, "collectors")

    @collectors.setter
    def collectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlowtrackingCollectorArgs']]]]):
        pulumi.set(self, "collectors", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Configure flow tracking protocol. Valid values: `netflow1`, `netflow5`, `netflow9`, `ipfix`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Configure flow tracking level. Valid values: `vlan`, `ip`, `port`, `proto`, `mac`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter(name="maxExportPktSize")
    def max_export_pkt_size(self) -> Optional[pulumi.Input[int]]:
        """
        Configure flow max export packet size (512-9216, default=512 bytes).
        """
        return pulumi.get(self, "max_export_pkt_size")

    @max_export_pkt_size.setter
    def max_export_pkt_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_export_pkt_size", value)

    @property
    @pulumi.getter(name="sampleMode")
    def sample_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure sample mode for the flow tracking. Valid values: `local`, `perimeter`, `device-ingress`.
        """
        return pulumi.get(self, "sample_mode")

    @sample_mode.setter
    def sample_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sample_mode", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[pulumi.Input[int]]:
        """
        Configure sample rate for the perimeter and device-ingress sampling(0 - 99999).
        """
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter(name="templateExportPeriod")
    def template_export_period(self) -> Optional[pulumi.Input[int]]:
        """
        Configure template export period (1-60, default=5 minutes).
        """
        return pulumi.get(self, "template_export_period")

    @template_export_period.setter
    def template_export_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "template_export_period", value)

    @property
    @pulumi.getter(name="timeoutGeneral")
    def timeout_general(self) -> Optional[pulumi.Input[int]]:
        """
        Configure flow session general timeout (60-604800, default=3600 seconds).
        """
        return pulumi.get(self, "timeout_general")

    @timeout_general.setter
    def timeout_general(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_general", value)

    @property
    @pulumi.getter(name="timeoutIcmp")
    def timeout_icmp(self) -> Optional[pulumi.Input[int]]:
        """
        Configure flow session ICMP timeout (60-604800, default=300 seconds).
        """
        return pulumi.get(self, "timeout_icmp")

    @timeout_icmp.setter
    def timeout_icmp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_icmp", value)

    @property
    @pulumi.getter(name="timeoutMax")
    def timeout_max(self) -> Optional[pulumi.Input[int]]:
        """
        Configure flow session max timeout (60-604800, default=604800 seconds).
        """
        return pulumi.get(self, "timeout_max")

    @timeout_max.setter
    def timeout_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_max", value)

    @property
    @pulumi.getter(name="timeoutTcp")
    def timeout_tcp(self) -> Optional[pulumi.Input[int]]:
        """
        Configure flow session TCP timeout (60-604800, default=3600 seconds).
        """
        return pulumi.get(self, "timeout_tcp")

    @timeout_tcp.setter
    def timeout_tcp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_tcp", value)

    @property
    @pulumi.getter(name="timeoutTcpFin")
    def timeout_tcp_fin(self) -> Optional[pulumi.Input[int]]:
        """
        Configure flow session TCP FIN timeout (60-604800, default=300 seconds).
        """
        return pulumi.get(self, "timeout_tcp_fin")

    @timeout_tcp_fin.setter
    def timeout_tcp_fin(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_tcp_fin", value)

    @property
    @pulumi.getter(name="timeoutTcpRst")
    def timeout_tcp_rst(self) -> Optional[pulumi.Input[int]]:
        """
        Configure flow session TCP RST timeout (60-604800, default=120 seconds).
        """
        return pulumi.get(self, "timeout_tcp_rst")

    @timeout_tcp_rst.setter
    def timeout_tcp_rst(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_tcp_rst", value)

    @property
    @pulumi.getter(name="timeoutUdp")
    def timeout_udp(self) -> Optional[pulumi.Input[int]]:
        """
        Configure flow session UDP timeout (60-604800, default=300 seconds).
        """
        return pulumi.get(self, "timeout_udp")

    @timeout_udp.setter
    def timeout_udp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_udp", value)

    @property
    @pulumi.getter
    def transport(self) -> Optional[pulumi.Input[str]]:
        """
        Configure L4 transport protocol for exporting packets. Valid values: `udp`, `tcp`, `sctp`.
        """
        return pulumi.get(self, "transport")

    @transport.setter
    def transport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transport", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _FlowtrackingState:
    def __init__(__self__, *,
                 aggregates: Optional[pulumi.Input[Sequence[pulumi.Input['FlowtrackingAggregateArgs']]]] = None,
                 collector_ip: Optional[pulumi.Input[str]] = None,
                 collector_port: Optional[pulumi.Input[int]] = None,
                 collectors: Optional[pulumi.Input[Sequence[pulumi.Input['FlowtrackingCollectorArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 max_export_pkt_size: Optional[pulumi.Input[int]] = None,
                 sample_mode: Optional[pulumi.Input[str]] = None,
                 sample_rate: Optional[pulumi.Input[int]] = None,
                 template_export_period: Optional[pulumi.Input[int]] = None,
                 timeout_general: Optional[pulumi.Input[int]] = None,
                 timeout_icmp: Optional[pulumi.Input[int]] = None,
                 timeout_max: Optional[pulumi.Input[int]] = None,
                 timeout_tcp: Optional[pulumi.Input[int]] = None,
                 timeout_tcp_fin: Optional[pulumi.Input[int]] = None,
                 timeout_tcp_rst: Optional[pulumi.Input[int]] = None,
                 timeout_udp: Optional[pulumi.Input[int]] = None,
                 transport: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Flowtracking resources.
        :param pulumi.Input[Sequence[pulumi.Input['FlowtrackingAggregateArgs']]] aggregates: Configure aggregates in which all traffic sessions matching the IP Address will be grouped into the same flow. The structure of `aggregates` block is documented below.
        :param pulumi.Input[str] collector_ip: Configure collector ip address.
        :param pulumi.Input[int] collector_port: Configure collector port number(0-65535, default=0).
        :param pulumi.Input[Sequence[pulumi.Input['FlowtrackingCollectorArgs']]] collectors: Configure collectors for the flow. The structure of `collectors` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] format: Configure flow tracking protocol. Valid values: `netflow1`, `netflow5`, `netflow9`, `ipfix`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] level: Configure flow tracking level. Valid values: `vlan`, `ip`, `port`, `proto`, `mac`.
        :param pulumi.Input[int] max_export_pkt_size: Configure flow max export packet size (512-9216, default=512 bytes).
        :param pulumi.Input[str] sample_mode: Configure sample mode for the flow tracking. Valid values: `local`, `perimeter`, `device-ingress`.
        :param pulumi.Input[int] sample_rate: Configure sample rate for the perimeter and device-ingress sampling(0 - 99999).
        :param pulumi.Input[int] template_export_period: Configure template export period (1-60, default=5 minutes).
        :param pulumi.Input[int] timeout_general: Configure flow session general timeout (60-604800, default=3600 seconds).
        :param pulumi.Input[int] timeout_icmp: Configure flow session ICMP timeout (60-604800, default=300 seconds).
        :param pulumi.Input[int] timeout_max: Configure flow session max timeout (60-604800, default=604800 seconds).
        :param pulumi.Input[int] timeout_tcp: Configure flow session TCP timeout (60-604800, default=3600 seconds).
        :param pulumi.Input[int] timeout_tcp_fin: Configure flow session TCP FIN timeout (60-604800, default=300 seconds).
        :param pulumi.Input[int] timeout_tcp_rst: Configure flow session TCP RST timeout (60-604800, default=120 seconds).
        :param pulumi.Input[int] timeout_udp: Configure flow session UDP timeout (60-604800, default=300 seconds).
        :param pulumi.Input[str] transport: Configure L4 transport protocol for exporting packets. Valid values: `udp`, `tcp`, `sctp`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if aggregates is not None:
            pulumi.set(__self__, "aggregates", aggregates)
        if collector_ip is not None:
            pulumi.set(__self__, "collector_ip", collector_ip)
        if collector_port is not None:
            pulumi.set(__self__, "collector_port", collector_port)
        if collectors is not None:
            pulumi.set(__self__, "collectors", collectors)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if max_export_pkt_size is not None:
            pulumi.set(__self__, "max_export_pkt_size", max_export_pkt_size)
        if sample_mode is not None:
            pulumi.set(__self__, "sample_mode", sample_mode)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)
        if template_export_period is not None:
            pulumi.set(__self__, "template_export_period", template_export_period)
        if timeout_general is not None:
            pulumi.set(__self__, "timeout_general", timeout_general)
        if timeout_icmp is not None:
            pulumi.set(__self__, "timeout_icmp", timeout_icmp)
        if timeout_max is not None:
            pulumi.set(__self__, "timeout_max", timeout_max)
        if timeout_tcp is not None:
            pulumi.set(__self__, "timeout_tcp", timeout_tcp)
        if timeout_tcp_fin is not None:
            pulumi.set(__self__, "timeout_tcp_fin", timeout_tcp_fin)
        if timeout_tcp_rst is not None:
            pulumi.set(__self__, "timeout_tcp_rst", timeout_tcp_rst)
        if timeout_udp is not None:
            pulumi.set(__self__, "timeout_udp", timeout_udp)
        if transport is not None:
            pulumi.set(__self__, "transport", transport)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def aggregates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlowtrackingAggregateArgs']]]]:
        """
        Configure aggregates in which all traffic sessions matching the IP Address will be grouped into the same flow. The structure of `aggregates` block is documented below.
        """
        return pulumi.get(self, "aggregates")

    @aggregates.setter
    def aggregates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlowtrackingAggregateArgs']]]]):
        pulumi.set(self, "aggregates", value)

    @property
    @pulumi.getter(name="collectorIp")
    def collector_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Configure collector ip address.
        """
        return pulumi.get(self, "collector_ip")

    @collector_ip.setter
    def collector_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collector_ip", value)

    @property
    @pulumi.getter(name="collectorPort")
    def collector_port(self) -> Optional[pulumi.Input[int]]:
        """
        Configure collector port number(0-65535, default=0).
        """
        return pulumi.get(self, "collector_port")

    @collector_port.setter
    def collector_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "collector_port", value)

    @property
    @pulumi.getter
    def collectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlowtrackingCollectorArgs']]]]:
        """
        Configure collectors for the flow. The structure of `collectors` block is documented below.
        """
        return pulumi.get(self, "collectors")

    @collectors.setter
    def collectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlowtrackingCollectorArgs']]]]):
        pulumi.set(self, "collectors", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Configure flow tracking protocol. Valid values: `netflow1`, `netflow5`, `netflow9`, `ipfix`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Configure flow tracking level. Valid values: `vlan`, `ip`, `port`, `proto`, `mac`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter(name="maxExportPktSize")
    def max_export_pkt_size(self) -> Optional[pulumi.Input[int]]:
        """
        Configure flow max export packet size (512-9216, default=512 bytes).
        """
        return pulumi.get(self, "max_export_pkt_size")

    @max_export_pkt_size.setter
    def max_export_pkt_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_export_pkt_size", value)

    @property
    @pulumi.getter(name="sampleMode")
    def sample_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure sample mode for the flow tracking. Valid values: `local`, `perimeter`, `device-ingress`.
        """
        return pulumi.get(self, "sample_mode")

    @sample_mode.setter
    def sample_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sample_mode", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[pulumi.Input[int]]:
        """
        Configure sample rate for the perimeter and device-ingress sampling(0 - 99999).
        """
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter(name="templateExportPeriod")
    def template_export_period(self) -> Optional[pulumi.Input[int]]:
        """
        Configure template export period (1-60, default=5 minutes).
        """
        return pulumi.get(self, "template_export_period")

    @template_export_period.setter
    def template_export_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "template_export_period", value)

    @property
    @pulumi.getter(name="timeoutGeneral")
    def timeout_general(self) -> Optional[pulumi.Input[int]]:
        """
        Configure flow session general timeout (60-604800, default=3600 seconds).
        """
        return pulumi.get(self, "timeout_general")

    @timeout_general.setter
    def timeout_general(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_general", value)

    @property
    @pulumi.getter(name="timeoutIcmp")
    def timeout_icmp(self) -> Optional[pulumi.Input[int]]:
        """
        Configure flow session ICMP timeout (60-604800, default=300 seconds).
        """
        return pulumi.get(self, "timeout_icmp")

    @timeout_icmp.setter
    def timeout_icmp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_icmp", value)

    @property
    @pulumi.getter(name="timeoutMax")
    def timeout_max(self) -> Optional[pulumi.Input[int]]:
        """
        Configure flow session max timeout (60-604800, default=604800 seconds).
        """
        return pulumi.get(self, "timeout_max")

    @timeout_max.setter
    def timeout_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_max", value)

    @property
    @pulumi.getter(name="timeoutTcp")
    def timeout_tcp(self) -> Optional[pulumi.Input[int]]:
        """
        Configure flow session TCP timeout (60-604800, default=3600 seconds).
        """
        return pulumi.get(self, "timeout_tcp")

    @timeout_tcp.setter
    def timeout_tcp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_tcp", value)

    @property
    @pulumi.getter(name="timeoutTcpFin")
    def timeout_tcp_fin(self) -> Optional[pulumi.Input[int]]:
        """
        Configure flow session TCP FIN timeout (60-604800, default=300 seconds).
        """
        return pulumi.get(self, "timeout_tcp_fin")

    @timeout_tcp_fin.setter
    def timeout_tcp_fin(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_tcp_fin", value)

    @property
    @pulumi.getter(name="timeoutTcpRst")
    def timeout_tcp_rst(self) -> Optional[pulumi.Input[int]]:
        """
        Configure flow session TCP RST timeout (60-604800, default=120 seconds).
        """
        return pulumi.get(self, "timeout_tcp_rst")

    @timeout_tcp_rst.setter
    def timeout_tcp_rst(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_tcp_rst", value)

    @property
    @pulumi.getter(name="timeoutUdp")
    def timeout_udp(self) -> Optional[pulumi.Input[int]]:
        """
        Configure flow session UDP timeout (60-604800, default=300 seconds).
        """
        return pulumi.get(self, "timeout_udp")

    @timeout_udp.setter
    def timeout_udp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_udp", value)

    @property
    @pulumi.getter
    def transport(self) -> Optional[pulumi.Input[str]]:
        """
        Configure L4 transport protocol for exporting packets. Valid values: `udp`, `tcp`, `sctp`.
        """
        return pulumi.get(self, "transport")

    @transport.setter
    def transport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transport", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Flowtracking(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aggregates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowtrackingAggregateArgs']]]]] = None,
                 collector_ip: Optional[pulumi.Input[str]] = None,
                 collector_port: Optional[pulumi.Input[int]] = None,
                 collectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowtrackingCollectorArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 max_export_pkt_size: Optional[pulumi.Input[int]] = None,
                 sample_mode: Optional[pulumi.Input[str]] = None,
                 sample_rate: Optional[pulumi.Input[int]] = None,
                 template_export_period: Optional[pulumi.Input[int]] = None,
                 timeout_general: Optional[pulumi.Input[int]] = None,
                 timeout_icmp: Optional[pulumi.Input[int]] = None,
                 timeout_max: Optional[pulumi.Input[int]] = None,
                 timeout_tcp: Optional[pulumi.Input[int]] = None,
                 timeout_tcp_fin: Optional[pulumi.Input[int]] = None,
                 timeout_tcp_rst: Optional[pulumi.Input[int]] = None,
                 timeout_udp: Optional[pulumi.Input[int]] = None,
                 transport: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure FortiSwitch flow tracking and export via ipfix/netflow. Applies to FortiOS Version `>= 6.2.4`.

        ## Import

        SwitchController FlowTracking can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/flowtracking:Flowtracking labelname SwitchControllerFlowTracking
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/flowtracking:Flowtracking labelname SwitchControllerFlowTracking
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowtrackingAggregateArgs']]]] aggregates: Configure aggregates in which all traffic sessions matching the IP Address will be grouped into the same flow. The structure of `aggregates` block is documented below.
        :param pulumi.Input[str] collector_ip: Configure collector ip address.
        :param pulumi.Input[int] collector_port: Configure collector port number(0-65535, default=0).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowtrackingCollectorArgs']]]] collectors: Configure collectors for the flow. The structure of `collectors` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] format: Configure flow tracking protocol. Valid values: `netflow1`, `netflow5`, `netflow9`, `ipfix`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] level: Configure flow tracking level. Valid values: `vlan`, `ip`, `port`, `proto`, `mac`.
        :param pulumi.Input[int] max_export_pkt_size: Configure flow max export packet size (512-9216, default=512 bytes).
        :param pulumi.Input[str] sample_mode: Configure sample mode for the flow tracking. Valid values: `local`, `perimeter`, `device-ingress`.
        :param pulumi.Input[int] sample_rate: Configure sample rate for the perimeter and device-ingress sampling(0 - 99999).
        :param pulumi.Input[int] template_export_period: Configure template export period (1-60, default=5 minutes).
        :param pulumi.Input[int] timeout_general: Configure flow session general timeout (60-604800, default=3600 seconds).
        :param pulumi.Input[int] timeout_icmp: Configure flow session ICMP timeout (60-604800, default=300 seconds).
        :param pulumi.Input[int] timeout_max: Configure flow session max timeout (60-604800, default=604800 seconds).
        :param pulumi.Input[int] timeout_tcp: Configure flow session TCP timeout (60-604800, default=3600 seconds).
        :param pulumi.Input[int] timeout_tcp_fin: Configure flow session TCP FIN timeout (60-604800, default=300 seconds).
        :param pulumi.Input[int] timeout_tcp_rst: Configure flow session TCP RST timeout (60-604800, default=120 seconds).
        :param pulumi.Input[int] timeout_udp: Configure flow session UDP timeout (60-604800, default=300 seconds).
        :param pulumi.Input[str] transport: Configure L4 transport protocol for exporting packets. Valid values: `udp`, `tcp`, `sctp`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FlowtrackingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure FortiSwitch flow tracking and export via ipfix/netflow. Applies to FortiOS Version `>= 6.2.4`.

        ## Import

        SwitchController FlowTracking can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/flowtracking:Flowtracking labelname SwitchControllerFlowTracking
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/flowtracking:Flowtracking labelname SwitchControllerFlowTracking
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param FlowtrackingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FlowtrackingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aggregates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowtrackingAggregateArgs']]]]] = None,
                 collector_ip: Optional[pulumi.Input[str]] = None,
                 collector_port: Optional[pulumi.Input[int]] = None,
                 collectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowtrackingCollectorArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 max_export_pkt_size: Optional[pulumi.Input[int]] = None,
                 sample_mode: Optional[pulumi.Input[str]] = None,
                 sample_rate: Optional[pulumi.Input[int]] = None,
                 template_export_period: Optional[pulumi.Input[int]] = None,
                 timeout_general: Optional[pulumi.Input[int]] = None,
                 timeout_icmp: Optional[pulumi.Input[int]] = None,
                 timeout_max: Optional[pulumi.Input[int]] = None,
                 timeout_tcp: Optional[pulumi.Input[int]] = None,
                 timeout_tcp_fin: Optional[pulumi.Input[int]] = None,
                 timeout_tcp_rst: Optional[pulumi.Input[int]] = None,
                 timeout_udp: Optional[pulumi.Input[int]] = None,
                 transport: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FlowtrackingArgs.__new__(FlowtrackingArgs)

            __props__.__dict__["aggregates"] = aggregates
            __props__.__dict__["collector_ip"] = collector_ip
            __props__.__dict__["collector_port"] = collector_port
            __props__.__dict__["collectors"] = collectors
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["format"] = format
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["level"] = level
            __props__.__dict__["max_export_pkt_size"] = max_export_pkt_size
            __props__.__dict__["sample_mode"] = sample_mode
            __props__.__dict__["sample_rate"] = sample_rate
            __props__.__dict__["template_export_period"] = template_export_period
            __props__.__dict__["timeout_general"] = timeout_general
            __props__.__dict__["timeout_icmp"] = timeout_icmp
            __props__.__dict__["timeout_max"] = timeout_max
            __props__.__dict__["timeout_tcp"] = timeout_tcp
            __props__.__dict__["timeout_tcp_fin"] = timeout_tcp_fin
            __props__.__dict__["timeout_tcp_rst"] = timeout_tcp_rst
            __props__.__dict__["timeout_udp"] = timeout_udp
            __props__.__dict__["transport"] = transport
            __props__.__dict__["vdomparam"] = vdomparam
        super(Flowtracking, __self__).__init__(
            'fortios:switchcontroller/flowtracking:Flowtracking',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aggregates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowtrackingAggregateArgs']]]]] = None,
            collector_ip: Optional[pulumi.Input[str]] = None,
            collector_port: Optional[pulumi.Input[int]] = None,
            collectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowtrackingCollectorArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            format: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            level: Optional[pulumi.Input[str]] = None,
            max_export_pkt_size: Optional[pulumi.Input[int]] = None,
            sample_mode: Optional[pulumi.Input[str]] = None,
            sample_rate: Optional[pulumi.Input[int]] = None,
            template_export_period: Optional[pulumi.Input[int]] = None,
            timeout_general: Optional[pulumi.Input[int]] = None,
            timeout_icmp: Optional[pulumi.Input[int]] = None,
            timeout_max: Optional[pulumi.Input[int]] = None,
            timeout_tcp: Optional[pulumi.Input[int]] = None,
            timeout_tcp_fin: Optional[pulumi.Input[int]] = None,
            timeout_tcp_rst: Optional[pulumi.Input[int]] = None,
            timeout_udp: Optional[pulumi.Input[int]] = None,
            transport: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Flowtracking':
        """
        Get an existing Flowtracking resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowtrackingAggregateArgs']]]] aggregates: Configure aggregates in which all traffic sessions matching the IP Address will be grouped into the same flow. The structure of `aggregates` block is documented below.
        :param pulumi.Input[str] collector_ip: Configure collector ip address.
        :param pulumi.Input[int] collector_port: Configure collector port number(0-65535, default=0).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowtrackingCollectorArgs']]]] collectors: Configure collectors for the flow. The structure of `collectors` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] format: Configure flow tracking protocol. Valid values: `netflow1`, `netflow5`, `netflow9`, `ipfix`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] level: Configure flow tracking level. Valid values: `vlan`, `ip`, `port`, `proto`, `mac`.
        :param pulumi.Input[int] max_export_pkt_size: Configure flow max export packet size (512-9216, default=512 bytes).
        :param pulumi.Input[str] sample_mode: Configure sample mode for the flow tracking. Valid values: `local`, `perimeter`, `device-ingress`.
        :param pulumi.Input[int] sample_rate: Configure sample rate for the perimeter and device-ingress sampling(0 - 99999).
        :param pulumi.Input[int] template_export_period: Configure template export period (1-60, default=5 minutes).
        :param pulumi.Input[int] timeout_general: Configure flow session general timeout (60-604800, default=3600 seconds).
        :param pulumi.Input[int] timeout_icmp: Configure flow session ICMP timeout (60-604800, default=300 seconds).
        :param pulumi.Input[int] timeout_max: Configure flow session max timeout (60-604800, default=604800 seconds).
        :param pulumi.Input[int] timeout_tcp: Configure flow session TCP timeout (60-604800, default=3600 seconds).
        :param pulumi.Input[int] timeout_tcp_fin: Configure flow session TCP FIN timeout (60-604800, default=300 seconds).
        :param pulumi.Input[int] timeout_tcp_rst: Configure flow session TCP RST timeout (60-604800, default=120 seconds).
        :param pulumi.Input[int] timeout_udp: Configure flow session UDP timeout (60-604800, default=300 seconds).
        :param pulumi.Input[str] transport: Configure L4 transport protocol for exporting packets. Valid values: `udp`, `tcp`, `sctp`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FlowtrackingState.__new__(_FlowtrackingState)

        __props__.__dict__["aggregates"] = aggregates
        __props__.__dict__["collector_ip"] = collector_ip
        __props__.__dict__["collector_port"] = collector_port
        __props__.__dict__["collectors"] = collectors
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["format"] = format
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["level"] = level
        __props__.__dict__["max_export_pkt_size"] = max_export_pkt_size
        __props__.__dict__["sample_mode"] = sample_mode
        __props__.__dict__["sample_rate"] = sample_rate
        __props__.__dict__["template_export_period"] = template_export_period
        __props__.__dict__["timeout_general"] = timeout_general
        __props__.__dict__["timeout_icmp"] = timeout_icmp
        __props__.__dict__["timeout_max"] = timeout_max
        __props__.__dict__["timeout_tcp"] = timeout_tcp
        __props__.__dict__["timeout_tcp_fin"] = timeout_tcp_fin
        __props__.__dict__["timeout_tcp_rst"] = timeout_tcp_rst
        __props__.__dict__["timeout_udp"] = timeout_udp
        __props__.__dict__["transport"] = transport
        __props__.__dict__["vdomparam"] = vdomparam
        return Flowtracking(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def aggregates(self) -> pulumi.Output[Optional[Sequence['outputs.FlowtrackingAggregate']]]:
        """
        Configure aggregates in which all traffic sessions matching the IP Address will be grouped into the same flow. The structure of `aggregates` block is documented below.
        """
        return pulumi.get(self, "aggregates")

    @property
    @pulumi.getter(name="collectorIp")
    def collector_ip(self) -> pulumi.Output[str]:
        """
        Configure collector ip address.
        """
        return pulumi.get(self, "collector_ip")

    @property
    @pulumi.getter(name="collectorPort")
    def collector_port(self) -> pulumi.Output[int]:
        """
        Configure collector port number(0-65535, default=0).
        """
        return pulumi.get(self, "collector_port")

    @property
    @pulumi.getter
    def collectors(self) -> pulumi.Output[Optional[Sequence['outputs.FlowtrackingCollector']]]:
        """
        Configure collectors for the flow. The structure of `collectors` block is documented below.
        """
        return pulumi.get(self, "collectors")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def format(self) -> pulumi.Output[str]:
        """
        Configure flow tracking protocol. Valid values: `netflow1`, `netflow5`, `netflow9`, `ipfix`.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def level(self) -> pulumi.Output[str]:
        """
        Configure flow tracking level. Valid values: `vlan`, `ip`, `port`, `proto`, `mac`.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="maxExportPktSize")
    def max_export_pkt_size(self) -> pulumi.Output[int]:
        """
        Configure flow max export packet size (512-9216, default=512 bytes).
        """
        return pulumi.get(self, "max_export_pkt_size")

    @property
    @pulumi.getter(name="sampleMode")
    def sample_mode(self) -> pulumi.Output[str]:
        """
        Configure sample mode for the flow tracking. Valid values: `local`, `perimeter`, `device-ingress`.
        """
        return pulumi.get(self, "sample_mode")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> pulumi.Output[int]:
        """
        Configure sample rate for the perimeter and device-ingress sampling(0 - 99999).
        """
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="templateExportPeriod")
    def template_export_period(self) -> pulumi.Output[int]:
        """
        Configure template export period (1-60, default=5 minutes).
        """
        return pulumi.get(self, "template_export_period")

    @property
    @pulumi.getter(name="timeoutGeneral")
    def timeout_general(self) -> pulumi.Output[int]:
        """
        Configure flow session general timeout (60-604800, default=3600 seconds).
        """
        return pulumi.get(self, "timeout_general")

    @property
    @pulumi.getter(name="timeoutIcmp")
    def timeout_icmp(self) -> pulumi.Output[int]:
        """
        Configure flow session ICMP timeout (60-604800, default=300 seconds).
        """
        return pulumi.get(self, "timeout_icmp")

    @property
    @pulumi.getter(name="timeoutMax")
    def timeout_max(self) -> pulumi.Output[int]:
        """
        Configure flow session max timeout (60-604800, default=604800 seconds).
        """
        return pulumi.get(self, "timeout_max")

    @property
    @pulumi.getter(name="timeoutTcp")
    def timeout_tcp(self) -> pulumi.Output[int]:
        """
        Configure flow session TCP timeout (60-604800, default=3600 seconds).
        """
        return pulumi.get(self, "timeout_tcp")

    @property
    @pulumi.getter(name="timeoutTcpFin")
    def timeout_tcp_fin(self) -> pulumi.Output[int]:
        """
        Configure flow session TCP FIN timeout (60-604800, default=300 seconds).
        """
        return pulumi.get(self, "timeout_tcp_fin")

    @property
    @pulumi.getter(name="timeoutTcpRst")
    def timeout_tcp_rst(self) -> pulumi.Output[int]:
        """
        Configure flow session TCP RST timeout (60-604800, default=120 seconds).
        """
        return pulumi.get(self, "timeout_tcp_rst")

    @property
    @pulumi.getter(name="timeoutUdp")
    def timeout_udp(self) -> pulumi.Output[int]:
        """
        Configure flow session UDP timeout (60-604800, default=300 seconds).
        """
        return pulumi.get(self, "timeout_udp")

    @property
    @pulumi.getter
    def transport(self) -> pulumi.Output[str]:
        """
        Configure L4 transport protocol for exporting packets. Valid values: `udp`, `tcp`, `sctp`.
        """
        return pulumi.get(self, "transport")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

