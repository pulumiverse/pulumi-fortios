# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SnmpcommunityArgs', 'Snmpcommunity']

@pulumi.input_type
class SnmpcommunityArgs:
    def __init__(__self__, *,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpcommunityHostArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_v1_port: Optional[pulumi.Input[int]] = None,
                 query_v1_status: Optional[pulumi.Input[str]] = None,
                 query_v2c_port: Optional[pulumi.Input[int]] = None,
                 query_v2c_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_v1_lport: Optional[pulumi.Input[int]] = None,
                 trap_v1_rport: Optional[pulumi.Input[int]] = None,
                 trap_v1_status: Optional[pulumi.Input[str]] = None,
                 trap_v2c_lport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_rport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Snmpcommunity resource.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] events: SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
        :param pulumi.Input[int] fosid: SNMP community ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input['SnmpcommunityHostArgs']]] hosts: Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
        :param pulumi.Input[str] name: SNMP community name.
        :param pulumi.Input[int] query_v1_port: SNMP v1 query port (default = 161).
        :param pulumi.Input[str] query_v1_status: Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] query_v2c_port: SNMP v2c query port (default = 161).
        :param pulumi.Input[str] query_v2c_status: Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable this SNMP community. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] trap_v1_lport: SNMP v2c trap local port (default = 162).
        :param pulumi.Input[int] trap_v1_rport: SNMP v2c trap remote port (default = 162).
        :param pulumi.Input[str] trap_v1_status: Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] trap_v2c_lport: SNMP v2c trap local port (default = 162).
        :param pulumi.Input[int] trap_v2c_rport: SNMP v2c trap remote port (default = 162).
        :param pulumi.Input[str] trap_v2c_status: Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_v1_port is not None:
            pulumi.set(__self__, "query_v1_port", query_v1_port)
        if query_v1_status is not None:
            pulumi.set(__self__, "query_v1_status", query_v1_status)
        if query_v2c_port is not None:
            pulumi.set(__self__, "query_v2c_port", query_v2c_port)
        if query_v2c_status is not None:
            pulumi.set(__self__, "query_v2c_status", query_v2c_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_v1_lport is not None:
            pulumi.set(__self__, "trap_v1_lport", trap_v1_lport)
        if trap_v1_rport is not None:
            pulumi.set(__self__, "trap_v1_rport", trap_v1_rport)
        if trap_v1_status is not None:
            pulumi.set(__self__, "trap_v1_status", trap_v1_status)
        if trap_v2c_lport is not None:
            pulumi.set(__self__, "trap_v2c_lport", trap_v2c_lport)
        if trap_v2c_rport is not None:
            pulumi.set(__self__, "trap_v2c_rport", trap_v2c_rport)
        if trap_v2c_status is not None:
            pulumi.set(__self__, "trap_v2c_status", trap_v2c_status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP community ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnmpcommunityHostArgs']]]]:
        """
        Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpcommunityHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP community name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queryV1Port")
    def query_v1_port(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v1 query port (default = 161).
        """
        return pulumi.get(self, "query_v1_port")

    @query_v1_port.setter
    def query_v1_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_v1_port", value)

    @property
    @pulumi.getter(name="queryV1Status")
    def query_v1_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "query_v1_status")

    @query_v1_status.setter
    def query_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v1_status", value)

    @property
    @pulumi.getter(name="queryV2cPort")
    def query_v2c_port(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v2c query port (default = 161).
        """
        return pulumi.get(self, "query_v2c_port")

    @query_v2c_port.setter
    def query_v2c_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_v2c_port", value)

    @property
    @pulumi.getter(name="queryV2cStatus")
    def query_v2c_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "query_v2c_status")

    @query_v2c_status.setter
    def query_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v2c_status", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this SNMP community. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapV1Lport")
    def trap_v1_lport(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v2c trap local port (default = 162).
        """
        return pulumi.get(self, "trap_v1_lport")

    @trap_v1_lport.setter
    def trap_v1_lport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v1_lport", value)

    @property
    @pulumi.getter(name="trapV1Rport")
    def trap_v1_rport(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v2c trap remote port (default = 162).
        """
        return pulumi.get(self, "trap_v1_rport")

    @trap_v1_rport.setter
    def trap_v1_rport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v1_rport", value)

    @property
    @pulumi.getter(name="trapV1Status")
    def trap_v1_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "trap_v1_status")

    @trap_v1_status.setter
    def trap_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v1_status", value)

    @property
    @pulumi.getter(name="trapV2cLport")
    def trap_v2c_lport(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v2c trap local port (default = 162).
        """
        return pulumi.get(self, "trap_v2c_lport")

    @trap_v2c_lport.setter
    def trap_v2c_lport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v2c_lport", value)

    @property
    @pulumi.getter(name="trapV2cRport")
    def trap_v2c_rport(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v2c trap remote port (default = 162).
        """
        return pulumi.get(self, "trap_v2c_rport")

    @trap_v2c_rport.setter
    def trap_v2c_rport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v2c_rport", value)

    @property
    @pulumi.getter(name="trapV2cStatus")
    def trap_v2c_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "trap_v2c_status")

    @trap_v2c_status.setter
    def trap_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v2c_status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SnmpcommunityState:
    def __init__(__self__, *,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpcommunityHostArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_v1_port: Optional[pulumi.Input[int]] = None,
                 query_v1_status: Optional[pulumi.Input[str]] = None,
                 query_v2c_port: Optional[pulumi.Input[int]] = None,
                 query_v2c_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_v1_lport: Optional[pulumi.Input[int]] = None,
                 trap_v1_rport: Optional[pulumi.Input[int]] = None,
                 trap_v1_status: Optional[pulumi.Input[str]] = None,
                 trap_v2c_lport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_rport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Snmpcommunity resources.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] events: SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
        :param pulumi.Input[int] fosid: SNMP community ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input['SnmpcommunityHostArgs']]] hosts: Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
        :param pulumi.Input[str] name: SNMP community name.
        :param pulumi.Input[int] query_v1_port: SNMP v1 query port (default = 161).
        :param pulumi.Input[str] query_v1_status: Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] query_v2c_port: SNMP v2c query port (default = 161).
        :param pulumi.Input[str] query_v2c_status: Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable this SNMP community. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] trap_v1_lport: SNMP v2c trap local port (default = 162).
        :param pulumi.Input[int] trap_v1_rport: SNMP v2c trap remote port (default = 162).
        :param pulumi.Input[str] trap_v1_status: Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] trap_v2c_lport: SNMP v2c trap local port (default = 162).
        :param pulumi.Input[int] trap_v2c_rport: SNMP v2c trap remote port (default = 162).
        :param pulumi.Input[str] trap_v2c_status: Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_v1_port is not None:
            pulumi.set(__self__, "query_v1_port", query_v1_port)
        if query_v1_status is not None:
            pulumi.set(__self__, "query_v1_status", query_v1_status)
        if query_v2c_port is not None:
            pulumi.set(__self__, "query_v2c_port", query_v2c_port)
        if query_v2c_status is not None:
            pulumi.set(__self__, "query_v2c_status", query_v2c_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_v1_lport is not None:
            pulumi.set(__self__, "trap_v1_lport", trap_v1_lport)
        if trap_v1_rport is not None:
            pulumi.set(__self__, "trap_v1_rport", trap_v1_rport)
        if trap_v1_status is not None:
            pulumi.set(__self__, "trap_v1_status", trap_v1_status)
        if trap_v2c_lport is not None:
            pulumi.set(__self__, "trap_v2c_lport", trap_v2c_lport)
        if trap_v2c_rport is not None:
            pulumi.set(__self__, "trap_v2c_rport", trap_v2c_rport)
        if trap_v2c_status is not None:
            pulumi.set(__self__, "trap_v2c_status", trap_v2c_status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP community ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnmpcommunityHostArgs']]]]:
        """
        Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpcommunityHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP community name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queryV1Port")
    def query_v1_port(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v1 query port (default = 161).
        """
        return pulumi.get(self, "query_v1_port")

    @query_v1_port.setter
    def query_v1_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_v1_port", value)

    @property
    @pulumi.getter(name="queryV1Status")
    def query_v1_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "query_v1_status")

    @query_v1_status.setter
    def query_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v1_status", value)

    @property
    @pulumi.getter(name="queryV2cPort")
    def query_v2c_port(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v2c query port (default = 161).
        """
        return pulumi.get(self, "query_v2c_port")

    @query_v2c_port.setter
    def query_v2c_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_v2c_port", value)

    @property
    @pulumi.getter(name="queryV2cStatus")
    def query_v2c_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "query_v2c_status")

    @query_v2c_status.setter
    def query_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v2c_status", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this SNMP community. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapV1Lport")
    def trap_v1_lport(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v2c trap local port (default = 162).
        """
        return pulumi.get(self, "trap_v1_lport")

    @trap_v1_lport.setter
    def trap_v1_lport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v1_lport", value)

    @property
    @pulumi.getter(name="trapV1Rport")
    def trap_v1_rport(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v2c trap remote port (default = 162).
        """
        return pulumi.get(self, "trap_v1_rport")

    @trap_v1_rport.setter
    def trap_v1_rport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v1_rport", value)

    @property
    @pulumi.getter(name="trapV1Status")
    def trap_v1_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "trap_v1_status")

    @trap_v1_status.setter
    def trap_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v1_status", value)

    @property
    @pulumi.getter(name="trapV2cLport")
    def trap_v2c_lport(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v2c trap local port (default = 162).
        """
        return pulumi.get(self, "trap_v2c_lport")

    @trap_v2c_lport.setter
    def trap_v2c_lport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v2c_lport", value)

    @property
    @pulumi.getter(name="trapV2cRport")
    def trap_v2c_rport(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v2c trap remote port (default = 162).
        """
        return pulumi.get(self, "trap_v2c_rport")

    @trap_v2c_rport.setter
    def trap_v2c_rport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v2c_rport", value)

    @property
    @pulumi.getter(name="trapV2cStatus")
    def trap_v2c_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "trap_v2c_status")

    @trap_v2c_status.setter
    def trap_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v2c_status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Snmpcommunity(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpcommunityHostArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_v1_port: Optional[pulumi.Input[int]] = None,
                 query_v1_status: Optional[pulumi.Input[str]] = None,
                 query_v2c_port: Optional[pulumi.Input[int]] = None,
                 query_v2c_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_v1_lport: Optional[pulumi.Input[int]] = None,
                 trap_v1_rport: Optional[pulumi.Input[int]] = None,
                 trap_v1_status: Optional[pulumi.Input[str]] = None,
                 trap_v2c_lport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_rport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure FortiSwitch SNMP v1/v2c communities globally. Applies to FortiOS Version `>= 6.2.4`.

        ## Import

        SwitchController SnmpCommunity can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/snmpcommunity:Snmpcommunity labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/snmpcommunity:Snmpcommunity labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] events: SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
        :param pulumi.Input[int] fosid: SNMP community ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpcommunityHostArgs']]]] hosts: Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
        :param pulumi.Input[str] name: SNMP community name.
        :param pulumi.Input[int] query_v1_port: SNMP v1 query port (default = 161).
        :param pulumi.Input[str] query_v1_status: Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] query_v2c_port: SNMP v2c query port (default = 161).
        :param pulumi.Input[str] query_v2c_status: Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable this SNMP community. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] trap_v1_lport: SNMP v2c trap local port (default = 162).
        :param pulumi.Input[int] trap_v1_rport: SNMP v2c trap remote port (default = 162).
        :param pulumi.Input[str] trap_v1_status: Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] trap_v2c_lport: SNMP v2c trap local port (default = 162).
        :param pulumi.Input[int] trap_v2c_rport: SNMP v2c trap remote port (default = 162).
        :param pulumi.Input[str] trap_v2c_status: Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SnmpcommunityArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure FortiSwitch SNMP v1/v2c communities globally. Applies to FortiOS Version `>= 6.2.4`.

        ## Import

        SwitchController SnmpCommunity can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:switchcontroller/snmpcommunity:Snmpcommunity labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:switchcontroller/snmpcommunity:Snmpcommunity labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SnmpcommunityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnmpcommunityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpcommunityHostArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_v1_port: Optional[pulumi.Input[int]] = None,
                 query_v1_status: Optional[pulumi.Input[str]] = None,
                 query_v2c_port: Optional[pulumi.Input[int]] = None,
                 query_v2c_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_v1_lport: Optional[pulumi.Input[int]] = None,
                 trap_v1_rport: Optional[pulumi.Input[int]] = None,
                 trap_v1_status: Optional[pulumi.Input[str]] = None,
                 trap_v2c_lport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_rport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnmpcommunityArgs.__new__(SnmpcommunityArgs)

            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["events"] = events
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["hosts"] = hosts
            __props__.__dict__["name"] = name
            __props__.__dict__["query_v1_port"] = query_v1_port
            __props__.__dict__["query_v1_status"] = query_v1_status
            __props__.__dict__["query_v2c_port"] = query_v2c_port
            __props__.__dict__["query_v2c_status"] = query_v2c_status
            __props__.__dict__["status"] = status
            __props__.__dict__["trap_v1_lport"] = trap_v1_lport
            __props__.__dict__["trap_v1_rport"] = trap_v1_rport
            __props__.__dict__["trap_v1_status"] = trap_v1_status
            __props__.__dict__["trap_v2c_lport"] = trap_v2c_lport
            __props__.__dict__["trap_v2c_rport"] = trap_v2c_rport
            __props__.__dict__["trap_v2c_status"] = trap_v2c_status
            __props__.__dict__["vdomparam"] = vdomparam
        super(Snmpcommunity, __self__).__init__(
            'fortios:switchcontroller/snmpcommunity:Snmpcommunity',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            events: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpcommunityHostArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            query_v1_port: Optional[pulumi.Input[int]] = None,
            query_v1_status: Optional[pulumi.Input[str]] = None,
            query_v2c_port: Optional[pulumi.Input[int]] = None,
            query_v2c_status: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            trap_v1_lport: Optional[pulumi.Input[int]] = None,
            trap_v1_rport: Optional[pulumi.Input[int]] = None,
            trap_v1_status: Optional[pulumi.Input[str]] = None,
            trap_v2c_lport: Optional[pulumi.Input[int]] = None,
            trap_v2c_rport: Optional[pulumi.Input[int]] = None,
            trap_v2c_status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Snmpcommunity':
        """
        Get an existing Snmpcommunity resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] events: SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
        :param pulumi.Input[int] fosid: SNMP community ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpcommunityHostArgs']]]] hosts: Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
        :param pulumi.Input[str] name: SNMP community name.
        :param pulumi.Input[int] query_v1_port: SNMP v1 query port (default = 161).
        :param pulumi.Input[str] query_v1_status: Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] query_v2c_port: SNMP v2c query port (default = 161).
        :param pulumi.Input[str] query_v2c_status: Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable this SNMP community. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] trap_v1_lport: SNMP v2c trap local port (default = 162).
        :param pulumi.Input[int] trap_v1_rport: SNMP v2c trap remote port (default = 162).
        :param pulumi.Input[str] trap_v1_status: Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] trap_v2c_lport: SNMP v2c trap local port (default = 162).
        :param pulumi.Input[int] trap_v2c_rport: SNMP v2c trap remote port (default = 162).
        :param pulumi.Input[str] trap_v2c_status: Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SnmpcommunityState.__new__(_SnmpcommunityState)

        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["events"] = events
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["hosts"] = hosts
        __props__.__dict__["name"] = name
        __props__.__dict__["query_v1_port"] = query_v1_port
        __props__.__dict__["query_v1_status"] = query_v1_status
        __props__.__dict__["query_v2c_port"] = query_v2c_port
        __props__.__dict__["query_v2c_status"] = query_v2c_status
        __props__.__dict__["status"] = status
        __props__.__dict__["trap_v1_lport"] = trap_v1_lport
        __props__.__dict__["trap_v1_rport"] = trap_v1_rport
        __props__.__dict__["trap_v1_status"] = trap_v1_status
        __props__.__dict__["trap_v2c_lport"] = trap_v2c_lport
        __props__.__dict__["trap_v2c_rport"] = trap_v2c_rport
        __props__.__dict__["trap_v2c_status"] = trap_v2c_status
        __props__.__dict__["vdomparam"] = vdomparam
        return Snmpcommunity(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def events(self) -> pulumi.Output[str]:
        """
        SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        """
        SNMP community ID.
        """
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Optional[Sequence['outputs.SnmpcommunityHost']]]:
        """
        Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        SNMP community name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="queryV1Port")
    def query_v1_port(self) -> pulumi.Output[int]:
        """
        SNMP v1 query port (default = 161).
        """
        return pulumi.get(self, "query_v1_port")

    @property
    @pulumi.getter(name="queryV1Status")
    def query_v1_status(self) -> pulumi.Output[str]:
        """
        Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "query_v1_status")

    @property
    @pulumi.getter(name="queryV2cPort")
    def query_v2c_port(self) -> pulumi.Output[int]:
        """
        SNMP v2c query port (default = 161).
        """
        return pulumi.get(self, "query_v2c_port")

    @property
    @pulumi.getter(name="queryV2cStatus")
    def query_v2c_status(self) -> pulumi.Output[str]:
        """
        Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "query_v2c_status")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable this SNMP community. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trapV1Lport")
    def trap_v1_lport(self) -> pulumi.Output[int]:
        """
        SNMP v2c trap local port (default = 162).
        """
        return pulumi.get(self, "trap_v1_lport")

    @property
    @pulumi.getter(name="trapV1Rport")
    def trap_v1_rport(self) -> pulumi.Output[int]:
        """
        SNMP v2c trap remote port (default = 162).
        """
        return pulumi.get(self, "trap_v1_rport")

    @property
    @pulumi.getter(name="trapV1Status")
    def trap_v1_status(self) -> pulumi.Output[str]:
        """
        Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "trap_v1_status")

    @property
    @pulumi.getter(name="trapV2cLport")
    def trap_v2c_lport(self) -> pulumi.Output[int]:
        """
        SNMP v2c trap local port (default = 162).
        """
        return pulumi.get(self, "trap_v2c_lport")

    @property
    @pulumi.getter(name="trapV2cRport")
    def trap_v2c_rport(self) -> pulumi.Output[int]:
        """
        SNMP v2c trap remote port (default = 162).
        """
        return pulumi.get(self, "trap_v2c_rport")

    @property
    @pulumi.getter(name="trapV2cStatus")
    def trap_v2c_status(self) -> pulumi.Output[str]:
        """
        Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "trap_v2c_status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

