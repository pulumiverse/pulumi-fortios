# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SettingArgs', 'Setting']

@pulumi.input_type
class SettingArgs:
    def __init__(__self__, *,
                 admin_login_logs: Optional[pulumi.Input[str]] = None,
                 alert_interval: Optional[pulumi.Input[int]] = None,
                 amc_interface_bypass_mode: Optional[pulumi.Input[str]] = None,
                 antivirus_logs: Optional[pulumi.Input[str]] = None,
                 configuration_changes_logs: Optional[pulumi.Input[str]] = None,
                 critical_interval: Optional[pulumi.Input[int]] = None,
                 debug_interval: Optional[pulumi.Input[int]] = None,
                 email_interval: Optional[pulumi.Input[int]] = None,
                 emergency_interval: Optional[pulumi.Input[int]] = None,
                 error_interval: Optional[pulumi.Input[int]] = None,
                 fds_license_expiring_days: Optional[pulumi.Input[int]] = None,
                 fds_license_expiring_warning: Optional[pulumi.Input[str]] = None,
                 fds_update_logs: Optional[pulumi.Input[str]] = None,
                 filter_mode: Optional[pulumi.Input[str]] = None,
                 fips_cc_errors: Optional[pulumi.Input[str]] = None,
                 firewall_authentication_failure_logs: Optional[pulumi.Input[str]] = None,
                 fortiguard_log_quota_warning: Optional[pulumi.Input[str]] = None,
                 fsso_disconnect_logs: Optional[pulumi.Input[str]] = None,
                 ha_logs: Optional[pulumi.Input[str]] = None,
                 information_interval: Optional[pulumi.Input[int]] = None,
                 ips_logs: Optional[pulumi.Input[str]] = None,
                 ipsec_errors_logs: Optional[pulumi.Input[str]] = None,
                 local_disk_usage: Optional[pulumi.Input[int]] = None,
                 log_disk_usage_warning: Optional[pulumi.Input[str]] = None,
                 mailto1: Optional[pulumi.Input[str]] = None,
                 mailto2: Optional[pulumi.Input[str]] = None,
                 mailto3: Optional[pulumi.Input[str]] = None,
                 notification_interval: Optional[pulumi.Input[int]] = None,
                 ppp_errors_logs: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 ssh_logs: Optional[pulumi.Input[str]] = None,
                 sslvpn_authentication_errors_logs: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 violation_traffic_logs: Optional[pulumi.Input[str]] = None,
                 warning_interval: Optional[pulumi.Input[int]] = None,
                 webfilter_logs: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Setting resource.
        :param pulumi.Input[str] admin_login_logs: Enable/disable administrator login/logout logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] alert_interval: Alert alert interval in minutes.
        :param pulumi.Input[str] amc_interface_bypass_mode: Enable/disable Fortinet Advanced Mezzanine Card (AMC) interface bypass mode logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] antivirus_logs: Enable/disable antivirus logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] configuration_changes_logs: Enable/disable configuration change logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] critical_interval: Critical alert interval in minutes.
        :param pulumi.Input[int] debug_interval: Debug alert interval in minutes.
        :param pulumi.Input[int] email_interval: Interval between sending alert emails (1 - 99999 min, default = 5).
        :param pulumi.Input[int] emergency_interval: Emergency alert interval in minutes.
        :param pulumi.Input[int] error_interval: Error alert interval in minutes.
        :param pulumi.Input[int] fds_license_expiring_days: Number of days to send alert email prior to FortiGuard license expiration (1 - 100 days). On FortiOS versions 6.2.0-7.2.0: default = 100. On FortiOS versions 7.2.1-7.2.6: default = 15.
        :param pulumi.Input[str] fds_license_expiring_warning: Enable/disable FortiGuard license expiration warnings in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fds_update_logs: Enable/disable FortiGuard update logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] filter_mode: How to filter log messages that are sent to alert emails. Valid values: `category`, `threshold`.
        :param pulumi.Input[str] fips_cc_errors: Enable/disable FIPS and Common Criteria error logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] firewall_authentication_failure_logs: Enable/disable firewall authentication failure logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortiguard_log_quota_warning: Enable/disable FortiCloud log quota warnings in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fsso_disconnect_logs: Enable/disable logging of FSSO collector agent disconnect. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ha_logs: Enable/disable HA logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] information_interval: Information alert interval in minutes.
        :param pulumi.Input[str] ips_logs: Enable/disable IPS logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipsec_errors_logs: Enable/disable IPsec error logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] local_disk_usage: Disk usage percentage at which to send alert email (1 - 99 percent, default = 75).
        :param pulumi.Input[str] log_disk_usage_warning: Enable/disable disk usage warnings in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mailto1: Email address to send alert email to (usually a system administrator). On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        :param pulumi.Input[str] mailto2: Optional second email address to send alert email to. On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        :param pulumi.Input[str] mailto3: Optional third email address to send alert email to. On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        :param pulumi.Input[int] notification_interval: Notification alert interval in minutes.
        :param pulumi.Input[str] ppp_errors_logs: Enable/disable PPP error logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] ssh_logs: Enable/disable SSH logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sslvpn_authentication_errors_logs: Enable/disable SSL-VPN authentication error logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] username: Name that appears in the From: field of alert emails. On FortiOS versions 6.2.0-6.4.0: max. 36 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] violation_traffic_logs: Enable/disable violation traffic logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] warning_interval: Warning alert interval in minutes.
        :param pulumi.Input[str] webfilter_logs: Enable/disable web filter logs in alert email. Valid values: `enable`, `disable`.
        """
        if admin_login_logs is not None:
            pulumi.set(__self__, "admin_login_logs", admin_login_logs)
        if alert_interval is not None:
            pulumi.set(__self__, "alert_interval", alert_interval)
        if amc_interface_bypass_mode is not None:
            pulumi.set(__self__, "amc_interface_bypass_mode", amc_interface_bypass_mode)
        if antivirus_logs is not None:
            pulumi.set(__self__, "antivirus_logs", antivirus_logs)
        if configuration_changes_logs is not None:
            pulumi.set(__self__, "configuration_changes_logs", configuration_changes_logs)
        if critical_interval is not None:
            pulumi.set(__self__, "critical_interval", critical_interval)
        if debug_interval is not None:
            pulumi.set(__self__, "debug_interval", debug_interval)
        if email_interval is not None:
            pulumi.set(__self__, "email_interval", email_interval)
        if emergency_interval is not None:
            pulumi.set(__self__, "emergency_interval", emergency_interval)
        if error_interval is not None:
            pulumi.set(__self__, "error_interval", error_interval)
        if fds_license_expiring_days is not None:
            pulumi.set(__self__, "fds_license_expiring_days", fds_license_expiring_days)
        if fds_license_expiring_warning is not None:
            pulumi.set(__self__, "fds_license_expiring_warning", fds_license_expiring_warning)
        if fds_update_logs is not None:
            pulumi.set(__self__, "fds_update_logs", fds_update_logs)
        if filter_mode is not None:
            pulumi.set(__self__, "filter_mode", filter_mode)
        if fips_cc_errors is not None:
            pulumi.set(__self__, "fips_cc_errors", fips_cc_errors)
        if firewall_authentication_failure_logs is not None:
            pulumi.set(__self__, "firewall_authentication_failure_logs", firewall_authentication_failure_logs)
        if fortiguard_log_quota_warning is not None:
            pulumi.set(__self__, "fortiguard_log_quota_warning", fortiguard_log_quota_warning)
        if fsso_disconnect_logs is not None:
            pulumi.set(__self__, "fsso_disconnect_logs", fsso_disconnect_logs)
        if ha_logs is not None:
            pulumi.set(__self__, "ha_logs", ha_logs)
        if information_interval is not None:
            pulumi.set(__self__, "information_interval", information_interval)
        if ips_logs is not None:
            pulumi.set(__self__, "ips_logs", ips_logs)
        if ipsec_errors_logs is not None:
            pulumi.set(__self__, "ipsec_errors_logs", ipsec_errors_logs)
        if local_disk_usage is not None:
            pulumi.set(__self__, "local_disk_usage", local_disk_usage)
        if log_disk_usage_warning is not None:
            pulumi.set(__self__, "log_disk_usage_warning", log_disk_usage_warning)
        if mailto1 is not None:
            pulumi.set(__self__, "mailto1", mailto1)
        if mailto2 is not None:
            pulumi.set(__self__, "mailto2", mailto2)
        if mailto3 is not None:
            pulumi.set(__self__, "mailto3", mailto3)
        if notification_interval is not None:
            pulumi.set(__self__, "notification_interval", notification_interval)
        if ppp_errors_logs is not None:
            pulumi.set(__self__, "ppp_errors_logs", ppp_errors_logs)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if ssh_logs is not None:
            pulumi.set(__self__, "ssh_logs", ssh_logs)
        if sslvpn_authentication_errors_logs is not None:
            pulumi.set(__self__, "sslvpn_authentication_errors_logs", sslvpn_authentication_errors_logs)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if violation_traffic_logs is not None:
            pulumi.set(__self__, "violation_traffic_logs", violation_traffic_logs)
        if warning_interval is not None:
            pulumi.set(__self__, "warning_interval", warning_interval)
        if webfilter_logs is not None:
            pulumi.set(__self__, "webfilter_logs", webfilter_logs)

    @property
    @pulumi.getter(name="adminLoginLogs")
    def admin_login_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable administrator login/logout logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "admin_login_logs")

    @admin_login_logs.setter
    def admin_login_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_login_logs", value)

    @property
    @pulumi.getter(name="alertInterval")
    def alert_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Alert alert interval in minutes.
        """
        return pulumi.get(self, "alert_interval")

    @alert_interval.setter
    def alert_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "alert_interval", value)

    @property
    @pulumi.getter(name="amcInterfaceBypassMode")
    def amc_interface_bypass_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Fortinet Advanced Mezzanine Card (AMC) interface bypass mode logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "amc_interface_bypass_mode")

    @amc_interface_bypass_mode.setter
    def amc_interface_bypass_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amc_interface_bypass_mode", value)

    @property
    @pulumi.getter(name="antivirusLogs")
    def antivirus_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable antivirus logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "antivirus_logs")

    @antivirus_logs.setter
    def antivirus_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antivirus_logs", value)

    @property
    @pulumi.getter(name="configurationChangesLogs")
    def configuration_changes_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable configuration change logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "configuration_changes_logs")

    @configuration_changes_logs.setter
    def configuration_changes_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_changes_logs", value)

    @property
    @pulumi.getter(name="criticalInterval")
    def critical_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Critical alert interval in minutes.
        """
        return pulumi.get(self, "critical_interval")

    @critical_interval.setter
    def critical_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "critical_interval", value)

    @property
    @pulumi.getter(name="debugInterval")
    def debug_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Debug alert interval in minutes.
        """
        return pulumi.get(self, "debug_interval")

    @debug_interval.setter
    def debug_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "debug_interval", value)

    @property
    @pulumi.getter(name="emailInterval")
    def email_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval between sending alert emails (1 - 99999 min, default = 5).
        """
        return pulumi.get(self, "email_interval")

    @email_interval.setter
    def email_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "email_interval", value)

    @property
    @pulumi.getter(name="emergencyInterval")
    def emergency_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Emergency alert interval in minutes.
        """
        return pulumi.get(self, "emergency_interval")

    @emergency_interval.setter
    def emergency_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "emergency_interval", value)

    @property
    @pulumi.getter(name="errorInterval")
    def error_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Error alert interval in minutes.
        """
        return pulumi.get(self, "error_interval")

    @error_interval.setter
    def error_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "error_interval", value)

    @property
    @pulumi.getter(name="fdsLicenseExpiringDays")
    def fds_license_expiring_days(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days to send alert email prior to FortiGuard license expiration (1 - 100 days). On FortiOS versions 6.2.0-7.2.0: default = 100. On FortiOS versions 7.2.1-7.2.6: default = 15.
        """
        return pulumi.get(self, "fds_license_expiring_days")

    @fds_license_expiring_days.setter
    def fds_license_expiring_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fds_license_expiring_days", value)

    @property
    @pulumi.getter(name="fdsLicenseExpiringWarning")
    def fds_license_expiring_warning(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiGuard license expiration warnings in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fds_license_expiring_warning")

    @fds_license_expiring_warning.setter
    def fds_license_expiring_warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fds_license_expiring_warning", value)

    @property
    @pulumi.getter(name="fdsUpdateLogs")
    def fds_update_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiGuard update logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fds_update_logs")

    @fds_update_logs.setter
    def fds_update_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fds_update_logs", value)

    @property
    @pulumi.getter(name="filterMode")
    def filter_mode(self) -> Optional[pulumi.Input[str]]:
        """
        How to filter log messages that are sent to alert emails. Valid values: `category`, `threshold`.
        """
        return pulumi.get(self, "filter_mode")

    @filter_mode.setter
    def filter_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_mode", value)

    @property
    @pulumi.getter(name="fipsCcErrors")
    def fips_cc_errors(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FIPS and Common Criteria error logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fips_cc_errors")

    @fips_cc_errors.setter
    def fips_cc_errors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fips_cc_errors", value)

    @property
    @pulumi.getter(name="firewallAuthenticationFailureLogs")
    def firewall_authentication_failure_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable firewall authentication failure logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "firewall_authentication_failure_logs")

    @firewall_authentication_failure_logs.setter
    def firewall_authentication_failure_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_authentication_failure_logs", value)

    @property
    @pulumi.getter(name="fortiguardLogQuotaWarning")
    def fortiguard_log_quota_warning(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiCloud log quota warnings in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortiguard_log_quota_warning")

    @fortiguard_log_quota_warning.setter
    def fortiguard_log_quota_warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiguard_log_quota_warning", value)

    @property
    @pulumi.getter(name="fssoDisconnectLogs")
    def fsso_disconnect_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of FSSO collector agent disconnect. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fsso_disconnect_logs")

    @fsso_disconnect_logs.setter
    def fsso_disconnect_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsso_disconnect_logs", value)

    @property
    @pulumi.getter(name="haLogs")
    def ha_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HA logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_logs")

    @ha_logs.setter
    def ha_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_logs", value)

    @property
    @pulumi.getter(name="informationInterval")
    def information_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Information alert interval in minutes.
        """
        return pulumi.get(self, "information_interval")

    @information_interval.setter
    def information_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "information_interval", value)

    @property
    @pulumi.getter(name="ipsLogs")
    def ips_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPS logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_logs")

    @ips_logs.setter
    def ips_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_logs", value)

    @property
    @pulumi.getter(name="ipsecErrorsLogs")
    def ipsec_errors_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPsec error logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipsec_errors_logs")

    @ipsec_errors_logs.setter
    def ipsec_errors_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_errors_logs", value)

    @property
    @pulumi.getter(name="localDiskUsage")
    def local_disk_usage(self) -> Optional[pulumi.Input[int]]:
        """
        Disk usage percentage at which to send alert email (1 - 99 percent, default = 75).
        """
        return pulumi.get(self, "local_disk_usage")

    @local_disk_usage.setter
    def local_disk_usage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "local_disk_usage", value)

    @property
    @pulumi.getter(name="logDiskUsageWarning")
    def log_disk_usage_warning(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable disk usage warnings in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_disk_usage_warning")

    @log_disk_usage_warning.setter
    def log_disk_usage_warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_disk_usage_warning", value)

    @property
    @pulumi.getter
    def mailto1(self) -> Optional[pulumi.Input[str]]:
        """
        Email address to send alert email to (usually a system administrator). On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        """
        return pulumi.get(self, "mailto1")

    @mailto1.setter
    def mailto1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mailto1", value)

    @property
    @pulumi.getter
    def mailto2(self) -> Optional[pulumi.Input[str]]:
        """
        Optional second email address to send alert email to. On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        """
        return pulumi.get(self, "mailto2")

    @mailto2.setter
    def mailto2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mailto2", value)

    @property
    @pulumi.getter
    def mailto3(self) -> Optional[pulumi.Input[str]]:
        """
        Optional third email address to send alert email to. On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        """
        return pulumi.get(self, "mailto3")

    @mailto3.setter
    def mailto3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mailto3", value)

    @property
    @pulumi.getter(name="notificationInterval")
    def notification_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Notification alert interval in minutes.
        """
        return pulumi.get(self, "notification_interval")

    @notification_interval.setter
    def notification_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "notification_interval", value)

    @property
    @pulumi.getter(name="pppErrorsLogs")
    def ppp_errors_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PPP error logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ppp_errors_logs")

    @ppp_errors_logs.setter
    def ppp_errors_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp_errors_logs", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="sshLogs")
    def ssh_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSH logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssh_logs")

    @ssh_logs.setter
    def ssh_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_logs", value)

    @property
    @pulumi.getter(name="sslvpnAuthenticationErrorsLogs")
    def sslvpn_authentication_errors_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSL-VPN authentication error logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sslvpn_authentication_errors_logs")

    @sslvpn_authentication_errors_logs.setter
    def sslvpn_authentication_errors_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_authentication_errors_logs", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Name that appears in the From: field of alert emails. On FortiOS versions 6.2.0-6.4.0: max. 36 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="violationTrafficLogs")
    def violation_traffic_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable violation traffic logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "violation_traffic_logs")

    @violation_traffic_logs.setter
    def violation_traffic_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "violation_traffic_logs", value)

    @property
    @pulumi.getter(name="warningInterval")
    def warning_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Warning alert interval in minutes.
        """
        return pulumi.get(self, "warning_interval")

    @warning_interval.setter
    def warning_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "warning_interval", value)

    @property
    @pulumi.getter(name="webfilterLogs")
    def webfilter_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web filter logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webfilter_logs")

    @webfilter_logs.setter
    def webfilter_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_logs", value)


@pulumi.input_type
class _SettingState:
    def __init__(__self__, *,
                 admin_login_logs: Optional[pulumi.Input[str]] = None,
                 alert_interval: Optional[pulumi.Input[int]] = None,
                 amc_interface_bypass_mode: Optional[pulumi.Input[str]] = None,
                 antivirus_logs: Optional[pulumi.Input[str]] = None,
                 configuration_changes_logs: Optional[pulumi.Input[str]] = None,
                 critical_interval: Optional[pulumi.Input[int]] = None,
                 debug_interval: Optional[pulumi.Input[int]] = None,
                 email_interval: Optional[pulumi.Input[int]] = None,
                 emergency_interval: Optional[pulumi.Input[int]] = None,
                 error_interval: Optional[pulumi.Input[int]] = None,
                 fds_license_expiring_days: Optional[pulumi.Input[int]] = None,
                 fds_license_expiring_warning: Optional[pulumi.Input[str]] = None,
                 fds_update_logs: Optional[pulumi.Input[str]] = None,
                 filter_mode: Optional[pulumi.Input[str]] = None,
                 fips_cc_errors: Optional[pulumi.Input[str]] = None,
                 firewall_authentication_failure_logs: Optional[pulumi.Input[str]] = None,
                 fortiguard_log_quota_warning: Optional[pulumi.Input[str]] = None,
                 fsso_disconnect_logs: Optional[pulumi.Input[str]] = None,
                 ha_logs: Optional[pulumi.Input[str]] = None,
                 information_interval: Optional[pulumi.Input[int]] = None,
                 ips_logs: Optional[pulumi.Input[str]] = None,
                 ipsec_errors_logs: Optional[pulumi.Input[str]] = None,
                 local_disk_usage: Optional[pulumi.Input[int]] = None,
                 log_disk_usage_warning: Optional[pulumi.Input[str]] = None,
                 mailto1: Optional[pulumi.Input[str]] = None,
                 mailto2: Optional[pulumi.Input[str]] = None,
                 mailto3: Optional[pulumi.Input[str]] = None,
                 notification_interval: Optional[pulumi.Input[int]] = None,
                 ppp_errors_logs: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 ssh_logs: Optional[pulumi.Input[str]] = None,
                 sslvpn_authentication_errors_logs: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 violation_traffic_logs: Optional[pulumi.Input[str]] = None,
                 warning_interval: Optional[pulumi.Input[int]] = None,
                 webfilter_logs: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Setting resources.
        :param pulumi.Input[str] admin_login_logs: Enable/disable administrator login/logout logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] alert_interval: Alert alert interval in minutes.
        :param pulumi.Input[str] amc_interface_bypass_mode: Enable/disable Fortinet Advanced Mezzanine Card (AMC) interface bypass mode logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] antivirus_logs: Enable/disable antivirus logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] configuration_changes_logs: Enable/disable configuration change logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] critical_interval: Critical alert interval in minutes.
        :param pulumi.Input[int] debug_interval: Debug alert interval in minutes.
        :param pulumi.Input[int] email_interval: Interval between sending alert emails (1 - 99999 min, default = 5).
        :param pulumi.Input[int] emergency_interval: Emergency alert interval in minutes.
        :param pulumi.Input[int] error_interval: Error alert interval in minutes.
        :param pulumi.Input[int] fds_license_expiring_days: Number of days to send alert email prior to FortiGuard license expiration (1 - 100 days). On FortiOS versions 6.2.0-7.2.0: default = 100. On FortiOS versions 7.2.1-7.2.6: default = 15.
        :param pulumi.Input[str] fds_license_expiring_warning: Enable/disable FortiGuard license expiration warnings in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fds_update_logs: Enable/disable FortiGuard update logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] filter_mode: How to filter log messages that are sent to alert emails. Valid values: `category`, `threshold`.
        :param pulumi.Input[str] fips_cc_errors: Enable/disable FIPS and Common Criteria error logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] firewall_authentication_failure_logs: Enable/disable firewall authentication failure logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortiguard_log_quota_warning: Enable/disable FortiCloud log quota warnings in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fsso_disconnect_logs: Enable/disable logging of FSSO collector agent disconnect. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ha_logs: Enable/disable HA logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] information_interval: Information alert interval in minutes.
        :param pulumi.Input[str] ips_logs: Enable/disable IPS logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipsec_errors_logs: Enable/disable IPsec error logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] local_disk_usage: Disk usage percentage at which to send alert email (1 - 99 percent, default = 75).
        :param pulumi.Input[str] log_disk_usage_warning: Enable/disable disk usage warnings in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mailto1: Email address to send alert email to (usually a system administrator). On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        :param pulumi.Input[str] mailto2: Optional second email address to send alert email to. On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        :param pulumi.Input[str] mailto3: Optional third email address to send alert email to. On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        :param pulumi.Input[int] notification_interval: Notification alert interval in minutes.
        :param pulumi.Input[str] ppp_errors_logs: Enable/disable PPP error logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] ssh_logs: Enable/disable SSH logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sslvpn_authentication_errors_logs: Enable/disable SSL-VPN authentication error logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] username: Name that appears in the From: field of alert emails. On FortiOS versions 6.2.0-6.4.0: max. 36 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] violation_traffic_logs: Enable/disable violation traffic logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] warning_interval: Warning alert interval in minutes.
        :param pulumi.Input[str] webfilter_logs: Enable/disable web filter logs in alert email. Valid values: `enable`, `disable`.
        """
        if admin_login_logs is not None:
            pulumi.set(__self__, "admin_login_logs", admin_login_logs)
        if alert_interval is not None:
            pulumi.set(__self__, "alert_interval", alert_interval)
        if amc_interface_bypass_mode is not None:
            pulumi.set(__self__, "amc_interface_bypass_mode", amc_interface_bypass_mode)
        if antivirus_logs is not None:
            pulumi.set(__self__, "antivirus_logs", antivirus_logs)
        if configuration_changes_logs is not None:
            pulumi.set(__self__, "configuration_changes_logs", configuration_changes_logs)
        if critical_interval is not None:
            pulumi.set(__self__, "critical_interval", critical_interval)
        if debug_interval is not None:
            pulumi.set(__self__, "debug_interval", debug_interval)
        if email_interval is not None:
            pulumi.set(__self__, "email_interval", email_interval)
        if emergency_interval is not None:
            pulumi.set(__self__, "emergency_interval", emergency_interval)
        if error_interval is not None:
            pulumi.set(__self__, "error_interval", error_interval)
        if fds_license_expiring_days is not None:
            pulumi.set(__self__, "fds_license_expiring_days", fds_license_expiring_days)
        if fds_license_expiring_warning is not None:
            pulumi.set(__self__, "fds_license_expiring_warning", fds_license_expiring_warning)
        if fds_update_logs is not None:
            pulumi.set(__self__, "fds_update_logs", fds_update_logs)
        if filter_mode is not None:
            pulumi.set(__self__, "filter_mode", filter_mode)
        if fips_cc_errors is not None:
            pulumi.set(__self__, "fips_cc_errors", fips_cc_errors)
        if firewall_authentication_failure_logs is not None:
            pulumi.set(__self__, "firewall_authentication_failure_logs", firewall_authentication_failure_logs)
        if fortiguard_log_quota_warning is not None:
            pulumi.set(__self__, "fortiguard_log_quota_warning", fortiguard_log_quota_warning)
        if fsso_disconnect_logs is not None:
            pulumi.set(__self__, "fsso_disconnect_logs", fsso_disconnect_logs)
        if ha_logs is not None:
            pulumi.set(__self__, "ha_logs", ha_logs)
        if information_interval is not None:
            pulumi.set(__self__, "information_interval", information_interval)
        if ips_logs is not None:
            pulumi.set(__self__, "ips_logs", ips_logs)
        if ipsec_errors_logs is not None:
            pulumi.set(__self__, "ipsec_errors_logs", ipsec_errors_logs)
        if local_disk_usage is not None:
            pulumi.set(__self__, "local_disk_usage", local_disk_usage)
        if log_disk_usage_warning is not None:
            pulumi.set(__self__, "log_disk_usage_warning", log_disk_usage_warning)
        if mailto1 is not None:
            pulumi.set(__self__, "mailto1", mailto1)
        if mailto2 is not None:
            pulumi.set(__self__, "mailto2", mailto2)
        if mailto3 is not None:
            pulumi.set(__self__, "mailto3", mailto3)
        if notification_interval is not None:
            pulumi.set(__self__, "notification_interval", notification_interval)
        if ppp_errors_logs is not None:
            pulumi.set(__self__, "ppp_errors_logs", ppp_errors_logs)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if ssh_logs is not None:
            pulumi.set(__self__, "ssh_logs", ssh_logs)
        if sslvpn_authentication_errors_logs is not None:
            pulumi.set(__self__, "sslvpn_authentication_errors_logs", sslvpn_authentication_errors_logs)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if violation_traffic_logs is not None:
            pulumi.set(__self__, "violation_traffic_logs", violation_traffic_logs)
        if warning_interval is not None:
            pulumi.set(__self__, "warning_interval", warning_interval)
        if webfilter_logs is not None:
            pulumi.set(__self__, "webfilter_logs", webfilter_logs)

    @property
    @pulumi.getter(name="adminLoginLogs")
    def admin_login_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable administrator login/logout logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "admin_login_logs")

    @admin_login_logs.setter
    def admin_login_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_login_logs", value)

    @property
    @pulumi.getter(name="alertInterval")
    def alert_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Alert alert interval in minutes.
        """
        return pulumi.get(self, "alert_interval")

    @alert_interval.setter
    def alert_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "alert_interval", value)

    @property
    @pulumi.getter(name="amcInterfaceBypassMode")
    def amc_interface_bypass_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Fortinet Advanced Mezzanine Card (AMC) interface bypass mode logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "amc_interface_bypass_mode")

    @amc_interface_bypass_mode.setter
    def amc_interface_bypass_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amc_interface_bypass_mode", value)

    @property
    @pulumi.getter(name="antivirusLogs")
    def antivirus_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable antivirus logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "antivirus_logs")

    @antivirus_logs.setter
    def antivirus_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antivirus_logs", value)

    @property
    @pulumi.getter(name="configurationChangesLogs")
    def configuration_changes_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable configuration change logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "configuration_changes_logs")

    @configuration_changes_logs.setter
    def configuration_changes_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_changes_logs", value)

    @property
    @pulumi.getter(name="criticalInterval")
    def critical_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Critical alert interval in minutes.
        """
        return pulumi.get(self, "critical_interval")

    @critical_interval.setter
    def critical_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "critical_interval", value)

    @property
    @pulumi.getter(name="debugInterval")
    def debug_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Debug alert interval in minutes.
        """
        return pulumi.get(self, "debug_interval")

    @debug_interval.setter
    def debug_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "debug_interval", value)

    @property
    @pulumi.getter(name="emailInterval")
    def email_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval between sending alert emails (1 - 99999 min, default = 5).
        """
        return pulumi.get(self, "email_interval")

    @email_interval.setter
    def email_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "email_interval", value)

    @property
    @pulumi.getter(name="emergencyInterval")
    def emergency_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Emergency alert interval in minutes.
        """
        return pulumi.get(self, "emergency_interval")

    @emergency_interval.setter
    def emergency_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "emergency_interval", value)

    @property
    @pulumi.getter(name="errorInterval")
    def error_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Error alert interval in minutes.
        """
        return pulumi.get(self, "error_interval")

    @error_interval.setter
    def error_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "error_interval", value)

    @property
    @pulumi.getter(name="fdsLicenseExpiringDays")
    def fds_license_expiring_days(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days to send alert email prior to FortiGuard license expiration (1 - 100 days). On FortiOS versions 6.2.0-7.2.0: default = 100. On FortiOS versions 7.2.1-7.2.6: default = 15.
        """
        return pulumi.get(self, "fds_license_expiring_days")

    @fds_license_expiring_days.setter
    def fds_license_expiring_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fds_license_expiring_days", value)

    @property
    @pulumi.getter(name="fdsLicenseExpiringWarning")
    def fds_license_expiring_warning(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiGuard license expiration warnings in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fds_license_expiring_warning")

    @fds_license_expiring_warning.setter
    def fds_license_expiring_warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fds_license_expiring_warning", value)

    @property
    @pulumi.getter(name="fdsUpdateLogs")
    def fds_update_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiGuard update logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fds_update_logs")

    @fds_update_logs.setter
    def fds_update_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fds_update_logs", value)

    @property
    @pulumi.getter(name="filterMode")
    def filter_mode(self) -> Optional[pulumi.Input[str]]:
        """
        How to filter log messages that are sent to alert emails. Valid values: `category`, `threshold`.
        """
        return pulumi.get(self, "filter_mode")

    @filter_mode.setter
    def filter_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_mode", value)

    @property
    @pulumi.getter(name="fipsCcErrors")
    def fips_cc_errors(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FIPS and Common Criteria error logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fips_cc_errors")

    @fips_cc_errors.setter
    def fips_cc_errors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fips_cc_errors", value)

    @property
    @pulumi.getter(name="firewallAuthenticationFailureLogs")
    def firewall_authentication_failure_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable firewall authentication failure logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "firewall_authentication_failure_logs")

    @firewall_authentication_failure_logs.setter
    def firewall_authentication_failure_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_authentication_failure_logs", value)

    @property
    @pulumi.getter(name="fortiguardLogQuotaWarning")
    def fortiguard_log_quota_warning(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiCloud log quota warnings in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortiguard_log_quota_warning")

    @fortiguard_log_quota_warning.setter
    def fortiguard_log_quota_warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiguard_log_quota_warning", value)

    @property
    @pulumi.getter(name="fssoDisconnectLogs")
    def fsso_disconnect_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of FSSO collector agent disconnect. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fsso_disconnect_logs")

    @fsso_disconnect_logs.setter
    def fsso_disconnect_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsso_disconnect_logs", value)

    @property
    @pulumi.getter(name="haLogs")
    def ha_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HA logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_logs")

    @ha_logs.setter
    def ha_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_logs", value)

    @property
    @pulumi.getter(name="informationInterval")
    def information_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Information alert interval in minutes.
        """
        return pulumi.get(self, "information_interval")

    @information_interval.setter
    def information_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "information_interval", value)

    @property
    @pulumi.getter(name="ipsLogs")
    def ips_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPS logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_logs")

    @ips_logs.setter
    def ips_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_logs", value)

    @property
    @pulumi.getter(name="ipsecErrorsLogs")
    def ipsec_errors_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPsec error logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipsec_errors_logs")

    @ipsec_errors_logs.setter
    def ipsec_errors_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_errors_logs", value)

    @property
    @pulumi.getter(name="localDiskUsage")
    def local_disk_usage(self) -> Optional[pulumi.Input[int]]:
        """
        Disk usage percentage at which to send alert email (1 - 99 percent, default = 75).
        """
        return pulumi.get(self, "local_disk_usage")

    @local_disk_usage.setter
    def local_disk_usage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "local_disk_usage", value)

    @property
    @pulumi.getter(name="logDiskUsageWarning")
    def log_disk_usage_warning(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable disk usage warnings in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_disk_usage_warning")

    @log_disk_usage_warning.setter
    def log_disk_usage_warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_disk_usage_warning", value)

    @property
    @pulumi.getter
    def mailto1(self) -> Optional[pulumi.Input[str]]:
        """
        Email address to send alert email to (usually a system administrator). On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        """
        return pulumi.get(self, "mailto1")

    @mailto1.setter
    def mailto1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mailto1", value)

    @property
    @pulumi.getter
    def mailto2(self) -> Optional[pulumi.Input[str]]:
        """
        Optional second email address to send alert email to. On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        """
        return pulumi.get(self, "mailto2")

    @mailto2.setter
    def mailto2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mailto2", value)

    @property
    @pulumi.getter
    def mailto3(self) -> Optional[pulumi.Input[str]]:
        """
        Optional third email address to send alert email to. On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        """
        return pulumi.get(self, "mailto3")

    @mailto3.setter
    def mailto3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mailto3", value)

    @property
    @pulumi.getter(name="notificationInterval")
    def notification_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Notification alert interval in minutes.
        """
        return pulumi.get(self, "notification_interval")

    @notification_interval.setter
    def notification_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "notification_interval", value)

    @property
    @pulumi.getter(name="pppErrorsLogs")
    def ppp_errors_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PPP error logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ppp_errors_logs")

    @ppp_errors_logs.setter
    def ppp_errors_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp_errors_logs", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="sshLogs")
    def ssh_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSH logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssh_logs")

    @ssh_logs.setter
    def ssh_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_logs", value)

    @property
    @pulumi.getter(name="sslvpnAuthenticationErrorsLogs")
    def sslvpn_authentication_errors_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSL-VPN authentication error logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sslvpn_authentication_errors_logs")

    @sslvpn_authentication_errors_logs.setter
    def sslvpn_authentication_errors_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_authentication_errors_logs", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Name that appears in the From: field of alert emails. On FortiOS versions 6.2.0-6.4.0: max. 36 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="violationTrafficLogs")
    def violation_traffic_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable violation traffic logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "violation_traffic_logs")

    @violation_traffic_logs.setter
    def violation_traffic_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "violation_traffic_logs", value)

    @property
    @pulumi.getter(name="warningInterval")
    def warning_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Warning alert interval in minutes.
        """
        return pulumi.get(self, "warning_interval")

    @warning_interval.setter
    def warning_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "warning_interval", value)

    @property
    @pulumi.getter(name="webfilterLogs")
    def webfilter_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable web filter logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webfilter_logs")

    @webfilter_logs.setter
    def webfilter_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_logs", value)


class Setting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_login_logs: Optional[pulumi.Input[str]] = None,
                 alert_interval: Optional[pulumi.Input[int]] = None,
                 amc_interface_bypass_mode: Optional[pulumi.Input[str]] = None,
                 antivirus_logs: Optional[pulumi.Input[str]] = None,
                 configuration_changes_logs: Optional[pulumi.Input[str]] = None,
                 critical_interval: Optional[pulumi.Input[int]] = None,
                 debug_interval: Optional[pulumi.Input[int]] = None,
                 email_interval: Optional[pulumi.Input[int]] = None,
                 emergency_interval: Optional[pulumi.Input[int]] = None,
                 error_interval: Optional[pulumi.Input[int]] = None,
                 fds_license_expiring_days: Optional[pulumi.Input[int]] = None,
                 fds_license_expiring_warning: Optional[pulumi.Input[str]] = None,
                 fds_update_logs: Optional[pulumi.Input[str]] = None,
                 filter_mode: Optional[pulumi.Input[str]] = None,
                 fips_cc_errors: Optional[pulumi.Input[str]] = None,
                 firewall_authentication_failure_logs: Optional[pulumi.Input[str]] = None,
                 fortiguard_log_quota_warning: Optional[pulumi.Input[str]] = None,
                 fsso_disconnect_logs: Optional[pulumi.Input[str]] = None,
                 ha_logs: Optional[pulumi.Input[str]] = None,
                 information_interval: Optional[pulumi.Input[int]] = None,
                 ips_logs: Optional[pulumi.Input[str]] = None,
                 ipsec_errors_logs: Optional[pulumi.Input[str]] = None,
                 local_disk_usage: Optional[pulumi.Input[int]] = None,
                 log_disk_usage_warning: Optional[pulumi.Input[str]] = None,
                 mailto1: Optional[pulumi.Input[str]] = None,
                 mailto2: Optional[pulumi.Input[str]] = None,
                 mailto3: Optional[pulumi.Input[str]] = None,
                 notification_interval: Optional[pulumi.Input[int]] = None,
                 ppp_errors_logs: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 ssh_logs: Optional[pulumi.Input[str]] = None,
                 sslvpn_authentication_errors_logs: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 violation_traffic_logs: Optional[pulumi.Input[str]] = None,
                 warning_interval: Optional[pulumi.Input[int]] = None,
                 webfilter_logs: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure alert email settings.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.alertemail.Setting("trname",
            admin_login_logs="disable",
            alert_interval=2,
            amc_interface_bypass_mode="disable",
            antivirus_logs="disable",
            configuration_changes_logs="disable",
            critical_interval=3,
            debug_interval=60,
            email_interval=5,
            emergency_interval=1,
            error_interval=5,
            fds_license_expiring_days=15,
            information_interval=30)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Alertemail Setting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:alertemail/setting:Setting labelname AlertemailSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:alertemail/setting:Setting labelname AlertemailSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_login_logs: Enable/disable administrator login/logout logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] alert_interval: Alert alert interval in minutes.
        :param pulumi.Input[str] amc_interface_bypass_mode: Enable/disable Fortinet Advanced Mezzanine Card (AMC) interface bypass mode logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] antivirus_logs: Enable/disable antivirus logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] configuration_changes_logs: Enable/disable configuration change logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] critical_interval: Critical alert interval in minutes.
        :param pulumi.Input[int] debug_interval: Debug alert interval in minutes.
        :param pulumi.Input[int] email_interval: Interval between sending alert emails (1 - 99999 min, default = 5).
        :param pulumi.Input[int] emergency_interval: Emergency alert interval in minutes.
        :param pulumi.Input[int] error_interval: Error alert interval in minutes.
        :param pulumi.Input[int] fds_license_expiring_days: Number of days to send alert email prior to FortiGuard license expiration (1 - 100 days). On FortiOS versions 6.2.0-7.2.0: default = 100. On FortiOS versions 7.2.1-7.2.6: default = 15.
        :param pulumi.Input[str] fds_license_expiring_warning: Enable/disable FortiGuard license expiration warnings in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fds_update_logs: Enable/disable FortiGuard update logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] filter_mode: How to filter log messages that are sent to alert emails. Valid values: `category`, `threshold`.
        :param pulumi.Input[str] fips_cc_errors: Enable/disable FIPS and Common Criteria error logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] firewall_authentication_failure_logs: Enable/disable firewall authentication failure logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortiguard_log_quota_warning: Enable/disable FortiCloud log quota warnings in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fsso_disconnect_logs: Enable/disable logging of FSSO collector agent disconnect. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ha_logs: Enable/disable HA logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] information_interval: Information alert interval in minutes.
        :param pulumi.Input[str] ips_logs: Enable/disable IPS logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipsec_errors_logs: Enable/disable IPsec error logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] local_disk_usage: Disk usage percentage at which to send alert email (1 - 99 percent, default = 75).
        :param pulumi.Input[str] log_disk_usage_warning: Enable/disable disk usage warnings in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mailto1: Email address to send alert email to (usually a system administrator). On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        :param pulumi.Input[str] mailto2: Optional second email address to send alert email to. On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        :param pulumi.Input[str] mailto3: Optional third email address to send alert email to. On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        :param pulumi.Input[int] notification_interval: Notification alert interval in minutes.
        :param pulumi.Input[str] ppp_errors_logs: Enable/disable PPP error logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] ssh_logs: Enable/disable SSH logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sslvpn_authentication_errors_logs: Enable/disable SSL-VPN authentication error logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] username: Name that appears in the From: field of alert emails. On FortiOS versions 6.2.0-6.4.0: max. 36 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] violation_traffic_logs: Enable/disable violation traffic logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] warning_interval: Warning alert interval in minutes.
        :param pulumi.Input[str] webfilter_logs: Enable/disable web filter logs in alert email. Valid values: `enable`, `disable`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SettingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure alert email settings.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.alertemail.Setting("trname",
            admin_login_logs="disable",
            alert_interval=2,
            amc_interface_bypass_mode="disable",
            antivirus_logs="disable",
            configuration_changes_logs="disable",
            critical_interval=3,
            debug_interval=60,
            email_interval=5,
            emergency_interval=1,
            error_interval=5,
            fds_license_expiring_days=15,
            information_interval=30)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Alertemail Setting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:alertemail/setting:Setting labelname AlertemailSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:alertemail/setting:Setting labelname AlertemailSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_login_logs: Optional[pulumi.Input[str]] = None,
                 alert_interval: Optional[pulumi.Input[int]] = None,
                 amc_interface_bypass_mode: Optional[pulumi.Input[str]] = None,
                 antivirus_logs: Optional[pulumi.Input[str]] = None,
                 configuration_changes_logs: Optional[pulumi.Input[str]] = None,
                 critical_interval: Optional[pulumi.Input[int]] = None,
                 debug_interval: Optional[pulumi.Input[int]] = None,
                 email_interval: Optional[pulumi.Input[int]] = None,
                 emergency_interval: Optional[pulumi.Input[int]] = None,
                 error_interval: Optional[pulumi.Input[int]] = None,
                 fds_license_expiring_days: Optional[pulumi.Input[int]] = None,
                 fds_license_expiring_warning: Optional[pulumi.Input[str]] = None,
                 fds_update_logs: Optional[pulumi.Input[str]] = None,
                 filter_mode: Optional[pulumi.Input[str]] = None,
                 fips_cc_errors: Optional[pulumi.Input[str]] = None,
                 firewall_authentication_failure_logs: Optional[pulumi.Input[str]] = None,
                 fortiguard_log_quota_warning: Optional[pulumi.Input[str]] = None,
                 fsso_disconnect_logs: Optional[pulumi.Input[str]] = None,
                 ha_logs: Optional[pulumi.Input[str]] = None,
                 information_interval: Optional[pulumi.Input[int]] = None,
                 ips_logs: Optional[pulumi.Input[str]] = None,
                 ipsec_errors_logs: Optional[pulumi.Input[str]] = None,
                 local_disk_usage: Optional[pulumi.Input[int]] = None,
                 log_disk_usage_warning: Optional[pulumi.Input[str]] = None,
                 mailto1: Optional[pulumi.Input[str]] = None,
                 mailto2: Optional[pulumi.Input[str]] = None,
                 mailto3: Optional[pulumi.Input[str]] = None,
                 notification_interval: Optional[pulumi.Input[int]] = None,
                 ppp_errors_logs: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 ssh_logs: Optional[pulumi.Input[str]] = None,
                 sslvpn_authentication_errors_logs: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 violation_traffic_logs: Optional[pulumi.Input[str]] = None,
                 warning_interval: Optional[pulumi.Input[int]] = None,
                 webfilter_logs: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingArgs.__new__(SettingArgs)

            __props__.__dict__["admin_login_logs"] = admin_login_logs
            __props__.__dict__["alert_interval"] = alert_interval
            __props__.__dict__["amc_interface_bypass_mode"] = amc_interface_bypass_mode
            __props__.__dict__["antivirus_logs"] = antivirus_logs
            __props__.__dict__["configuration_changes_logs"] = configuration_changes_logs
            __props__.__dict__["critical_interval"] = critical_interval
            __props__.__dict__["debug_interval"] = debug_interval
            __props__.__dict__["email_interval"] = email_interval
            __props__.__dict__["emergency_interval"] = emergency_interval
            __props__.__dict__["error_interval"] = error_interval
            __props__.__dict__["fds_license_expiring_days"] = fds_license_expiring_days
            __props__.__dict__["fds_license_expiring_warning"] = fds_license_expiring_warning
            __props__.__dict__["fds_update_logs"] = fds_update_logs
            __props__.__dict__["filter_mode"] = filter_mode
            __props__.__dict__["fips_cc_errors"] = fips_cc_errors
            __props__.__dict__["firewall_authentication_failure_logs"] = firewall_authentication_failure_logs
            __props__.__dict__["fortiguard_log_quota_warning"] = fortiguard_log_quota_warning
            __props__.__dict__["fsso_disconnect_logs"] = fsso_disconnect_logs
            __props__.__dict__["ha_logs"] = ha_logs
            __props__.__dict__["information_interval"] = information_interval
            __props__.__dict__["ips_logs"] = ips_logs
            __props__.__dict__["ipsec_errors_logs"] = ipsec_errors_logs
            __props__.__dict__["local_disk_usage"] = local_disk_usage
            __props__.__dict__["log_disk_usage_warning"] = log_disk_usage_warning
            __props__.__dict__["mailto1"] = mailto1
            __props__.__dict__["mailto2"] = mailto2
            __props__.__dict__["mailto3"] = mailto3
            __props__.__dict__["notification_interval"] = notification_interval
            __props__.__dict__["ppp_errors_logs"] = ppp_errors_logs
            __props__.__dict__["severity"] = severity
            __props__.__dict__["ssh_logs"] = ssh_logs
            __props__.__dict__["sslvpn_authentication_errors_logs"] = sslvpn_authentication_errors_logs
            __props__.__dict__["username"] = username
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["violation_traffic_logs"] = violation_traffic_logs
            __props__.__dict__["warning_interval"] = warning_interval
            __props__.__dict__["webfilter_logs"] = webfilter_logs
        super(Setting, __self__).__init__(
            'fortios:alertemail/setting:Setting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_login_logs: Optional[pulumi.Input[str]] = None,
            alert_interval: Optional[pulumi.Input[int]] = None,
            amc_interface_bypass_mode: Optional[pulumi.Input[str]] = None,
            antivirus_logs: Optional[pulumi.Input[str]] = None,
            configuration_changes_logs: Optional[pulumi.Input[str]] = None,
            critical_interval: Optional[pulumi.Input[int]] = None,
            debug_interval: Optional[pulumi.Input[int]] = None,
            email_interval: Optional[pulumi.Input[int]] = None,
            emergency_interval: Optional[pulumi.Input[int]] = None,
            error_interval: Optional[pulumi.Input[int]] = None,
            fds_license_expiring_days: Optional[pulumi.Input[int]] = None,
            fds_license_expiring_warning: Optional[pulumi.Input[str]] = None,
            fds_update_logs: Optional[pulumi.Input[str]] = None,
            filter_mode: Optional[pulumi.Input[str]] = None,
            fips_cc_errors: Optional[pulumi.Input[str]] = None,
            firewall_authentication_failure_logs: Optional[pulumi.Input[str]] = None,
            fortiguard_log_quota_warning: Optional[pulumi.Input[str]] = None,
            fsso_disconnect_logs: Optional[pulumi.Input[str]] = None,
            ha_logs: Optional[pulumi.Input[str]] = None,
            information_interval: Optional[pulumi.Input[int]] = None,
            ips_logs: Optional[pulumi.Input[str]] = None,
            ipsec_errors_logs: Optional[pulumi.Input[str]] = None,
            local_disk_usage: Optional[pulumi.Input[int]] = None,
            log_disk_usage_warning: Optional[pulumi.Input[str]] = None,
            mailto1: Optional[pulumi.Input[str]] = None,
            mailto2: Optional[pulumi.Input[str]] = None,
            mailto3: Optional[pulumi.Input[str]] = None,
            notification_interval: Optional[pulumi.Input[int]] = None,
            ppp_errors_logs: Optional[pulumi.Input[str]] = None,
            severity: Optional[pulumi.Input[str]] = None,
            ssh_logs: Optional[pulumi.Input[str]] = None,
            sslvpn_authentication_errors_logs: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            violation_traffic_logs: Optional[pulumi.Input[str]] = None,
            warning_interval: Optional[pulumi.Input[int]] = None,
            webfilter_logs: Optional[pulumi.Input[str]] = None) -> 'Setting':
        """
        Get an existing Setting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_login_logs: Enable/disable administrator login/logout logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] alert_interval: Alert alert interval in minutes.
        :param pulumi.Input[str] amc_interface_bypass_mode: Enable/disable Fortinet Advanced Mezzanine Card (AMC) interface bypass mode logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] antivirus_logs: Enable/disable antivirus logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] configuration_changes_logs: Enable/disable configuration change logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] critical_interval: Critical alert interval in minutes.
        :param pulumi.Input[int] debug_interval: Debug alert interval in minutes.
        :param pulumi.Input[int] email_interval: Interval between sending alert emails (1 - 99999 min, default = 5).
        :param pulumi.Input[int] emergency_interval: Emergency alert interval in minutes.
        :param pulumi.Input[int] error_interval: Error alert interval in minutes.
        :param pulumi.Input[int] fds_license_expiring_days: Number of days to send alert email prior to FortiGuard license expiration (1 - 100 days). On FortiOS versions 6.2.0-7.2.0: default = 100. On FortiOS versions 7.2.1-7.2.6: default = 15.
        :param pulumi.Input[str] fds_license_expiring_warning: Enable/disable FortiGuard license expiration warnings in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fds_update_logs: Enable/disable FortiGuard update logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] filter_mode: How to filter log messages that are sent to alert emails. Valid values: `category`, `threshold`.
        :param pulumi.Input[str] fips_cc_errors: Enable/disable FIPS and Common Criteria error logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] firewall_authentication_failure_logs: Enable/disable firewall authentication failure logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortiguard_log_quota_warning: Enable/disable FortiCloud log quota warnings in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fsso_disconnect_logs: Enable/disable logging of FSSO collector agent disconnect. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ha_logs: Enable/disable HA logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] information_interval: Information alert interval in minutes.
        :param pulumi.Input[str] ips_logs: Enable/disable IPS logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipsec_errors_logs: Enable/disable IPsec error logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] local_disk_usage: Disk usage percentage at which to send alert email (1 - 99 percent, default = 75).
        :param pulumi.Input[str] log_disk_usage_warning: Enable/disable disk usage warnings in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mailto1: Email address to send alert email to (usually a system administrator). On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        :param pulumi.Input[str] mailto2: Optional second email address to send alert email to. On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        :param pulumi.Input[str] mailto3: Optional third email address to send alert email to. On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        :param pulumi.Input[int] notification_interval: Notification alert interval in minutes.
        :param pulumi.Input[str] ppp_errors_logs: Enable/disable PPP error logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] ssh_logs: Enable/disable SSH logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sslvpn_authentication_errors_logs: Enable/disable SSL-VPN authentication error logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] username: Name that appears in the From: field of alert emails. On FortiOS versions 6.2.0-6.4.0: max. 36 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] violation_traffic_logs: Enable/disable violation traffic logs in alert email. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] warning_interval: Warning alert interval in minutes.
        :param pulumi.Input[str] webfilter_logs: Enable/disable web filter logs in alert email. Valid values: `enable`, `disable`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingState.__new__(_SettingState)

        __props__.__dict__["admin_login_logs"] = admin_login_logs
        __props__.__dict__["alert_interval"] = alert_interval
        __props__.__dict__["amc_interface_bypass_mode"] = amc_interface_bypass_mode
        __props__.__dict__["antivirus_logs"] = antivirus_logs
        __props__.__dict__["configuration_changes_logs"] = configuration_changes_logs
        __props__.__dict__["critical_interval"] = critical_interval
        __props__.__dict__["debug_interval"] = debug_interval
        __props__.__dict__["email_interval"] = email_interval
        __props__.__dict__["emergency_interval"] = emergency_interval
        __props__.__dict__["error_interval"] = error_interval
        __props__.__dict__["fds_license_expiring_days"] = fds_license_expiring_days
        __props__.__dict__["fds_license_expiring_warning"] = fds_license_expiring_warning
        __props__.__dict__["fds_update_logs"] = fds_update_logs
        __props__.__dict__["filter_mode"] = filter_mode
        __props__.__dict__["fips_cc_errors"] = fips_cc_errors
        __props__.__dict__["firewall_authentication_failure_logs"] = firewall_authentication_failure_logs
        __props__.__dict__["fortiguard_log_quota_warning"] = fortiguard_log_quota_warning
        __props__.__dict__["fsso_disconnect_logs"] = fsso_disconnect_logs
        __props__.__dict__["ha_logs"] = ha_logs
        __props__.__dict__["information_interval"] = information_interval
        __props__.__dict__["ips_logs"] = ips_logs
        __props__.__dict__["ipsec_errors_logs"] = ipsec_errors_logs
        __props__.__dict__["local_disk_usage"] = local_disk_usage
        __props__.__dict__["log_disk_usage_warning"] = log_disk_usage_warning
        __props__.__dict__["mailto1"] = mailto1
        __props__.__dict__["mailto2"] = mailto2
        __props__.__dict__["mailto3"] = mailto3
        __props__.__dict__["notification_interval"] = notification_interval
        __props__.__dict__["ppp_errors_logs"] = ppp_errors_logs
        __props__.__dict__["severity"] = severity
        __props__.__dict__["ssh_logs"] = ssh_logs
        __props__.__dict__["sslvpn_authentication_errors_logs"] = sslvpn_authentication_errors_logs
        __props__.__dict__["username"] = username
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["violation_traffic_logs"] = violation_traffic_logs
        __props__.__dict__["warning_interval"] = warning_interval
        __props__.__dict__["webfilter_logs"] = webfilter_logs
        return Setting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminLoginLogs")
    def admin_login_logs(self) -> pulumi.Output[str]:
        """
        Enable/disable administrator login/logout logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "admin_login_logs")

    @property
    @pulumi.getter(name="alertInterval")
    def alert_interval(self) -> pulumi.Output[int]:
        """
        Alert alert interval in minutes.
        """
        return pulumi.get(self, "alert_interval")

    @property
    @pulumi.getter(name="amcInterfaceBypassMode")
    def amc_interface_bypass_mode(self) -> pulumi.Output[str]:
        """
        Enable/disable Fortinet Advanced Mezzanine Card (AMC) interface bypass mode logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "amc_interface_bypass_mode")

    @property
    @pulumi.getter(name="antivirusLogs")
    def antivirus_logs(self) -> pulumi.Output[str]:
        """
        Enable/disable antivirus logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "antivirus_logs")

    @property
    @pulumi.getter(name="configurationChangesLogs")
    def configuration_changes_logs(self) -> pulumi.Output[str]:
        """
        Enable/disable configuration change logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "configuration_changes_logs")

    @property
    @pulumi.getter(name="criticalInterval")
    def critical_interval(self) -> pulumi.Output[int]:
        """
        Critical alert interval in minutes.
        """
        return pulumi.get(self, "critical_interval")

    @property
    @pulumi.getter(name="debugInterval")
    def debug_interval(self) -> pulumi.Output[int]:
        """
        Debug alert interval in minutes.
        """
        return pulumi.get(self, "debug_interval")

    @property
    @pulumi.getter(name="emailInterval")
    def email_interval(self) -> pulumi.Output[int]:
        """
        Interval between sending alert emails (1 - 99999 min, default = 5).
        """
        return pulumi.get(self, "email_interval")

    @property
    @pulumi.getter(name="emergencyInterval")
    def emergency_interval(self) -> pulumi.Output[int]:
        """
        Emergency alert interval in minutes.
        """
        return pulumi.get(self, "emergency_interval")

    @property
    @pulumi.getter(name="errorInterval")
    def error_interval(self) -> pulumi.Output[int]:
        """
        Error alert interval in minutes.
        """
        return pulumi.get(self, "error_interval")

    @property
    @pulumi.getter(name="fdsLicenseExpiringDays")
    def fds_license_expiring_days(self) -> pulumi.Output[int]:
        """
        Number of days to send alert email prior to FortiGuard license expiration (1 - 100 days). On FortiOS versions 6.2.0-7.2.0: default = 100. On FortiOS versions 7.2.1-7.2.6: default = 15.
        """
        return pulumi.get(self, "fds_license_expiring_days")

    @property
    @pulumi.getter(name="fdsLicenseExpiringWarning")
    def fds_license_expiring_warning(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiGuard license expiration warnings in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fds_license_expiring_warning")

    @property
    @pulumi.getter(name="fdsUpdateLogs")
    def fds_update_logs(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiGuard update logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fds_update_logs")

    @property
    @pulumi.getter(name="filterMode")
    def filter_mode(self) -> pulumi.Output[str]:
        """
        How to filter log messages that are sent to alert emails. Valid values: `category`, `threshold`.
        """
        return pulumi.get(self, "filter_mode")

    @property
    @pulumi.getter(name="fipsCcErrors")
    def fips_cc_errors(self) -> pulumi.Output[str]:
        """
        Enable/disable FIPS and Common Criteria error logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fips_cc_errors")

    @property
    @pulumi.getter(name="firewallAuthenticationFailureLogs")
    def firewall_authentication_failure_logs(self) -> pulumi.Output[str]:
        """
        Enable/disable firewall authentication failure logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "firewall_authentication_failure_logs")

    @property
    @pulumi.getter(name="fortiguardLogQuotaWarning")
    def fortiguard_log_quota_warning(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiCloud log quota warnings in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortiguard_log_quota_warning")

    @property
    @pulumi.getter(name="fssoDisconnectLogs")
    def fsso_disconnect_logs(self) -> pulumi.Output[str]:
        """
        Enable/disable logging of FSSO collector agent disconnect. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fsso_disconnect_logs")

    @property
    @pulumi.getter(name="haLogs")
    def ha_logs(self) -> pulumi.Output[str]:
        """
        Enable/disable HA logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_logs")

    @property
    @pulumi.getter(name="informationInterval")
    def information_interval(self) -> pulumi.Output[int]:
        """
        Information alert interval in minutes.
        """
        return pulumi.get(self, "information_interval")

    @property
    @pulumi.getter(name="ipsLogs")
    def ips_logs(self) -> pulumi.Output[str]:
        """
        Enable/disable IPS logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_logs")

    @property
    @pulumi.getter(name="ipsecErrorsLogs")
    def ipsec_errors_logs(self) -> pulumi.Output[str]:
        """
        Enable/disable IPsec error logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipsec_errors_logs")

    @property
    @pulumi.getter(name="localDiskUsage")
    def local_disk_usage(self) -> pulumi.Output[int]:
        """
        Disk usage percentage at which to send alert email (1 - 99 percent, default = 75).
        """
        return pulumi.get(self, "local_disk_usage")

    @property
    @pulumi.getter(name="logDiskUsageWarning")
    def log_disk_usage_warning(self) -> pulumi.Output[str]:
        """
        Enable/disable disk usage warnings in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_disk_usage_warning")

    @property
    @pulumi.getter
    def mailto1(self) -> pulumi.Output[str]:
        """
        Email address to send alert email to (usually a system administrator). On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        """
        return pulumi.get(self, "mailto1")

    @property
    @pulumi.getter
    def mailto2(self) -> pulumi.Output[str]:
        """
        Optional second email address to send alert email to. On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        """
        return pulumi.get(self, "mailto2")

    @property
    @pulumi.getter
    def mailto3(self) -> pulumi.Output[str]:
        """
        Optional third email address to send alert email to. On FortiOS versions 6.2.0-6.4.0: max. 64 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        """
        return pulumi.get(self, "mailto3")

    @property
    @pulumi.getter(name="notificationInterval")
    def notification_interval(self) -> pulumi.Output[int]:
        """
        Notification alert interval in minutes.
        """
        return pulumi.get(self, "notification_interval")

    @property
    @pulumi.getter(name="pppErrorsLogs")
    def ppp_errors_logs(self) -> pulumi.Output[str]:
        """
        Enable/disable PPP error logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ppp_errors_logs")

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Output[str]:
        """
        Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="sshLogs")
    def ssh_logs(self) -> pulumi.Output[str]:
        """
        Enable/disable SSH logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssh_logs")

    @property
    @pulumi.getter(name="sslvpnAuthenticationErrorsLogs")
    def sslvpn_authentication_errors_logs(self) -> pulumi.Output[str]:
        """
        Enable/disable SSL-VPN authentication error logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sslvpn_authentication_errors_logs")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        Name that appears in the From: field of alert emails. On FortiOS versions 6.2.0-6.4.0: max. 36 characters. On FortiOS versions >= 6.4.1: max. 63 characters.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="violationTrafficLogs")
    def violation_traffic_logs(self) -> pulumi.Output[str]:
        """
        Enable/disable violation traffic logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "violation_traffic_logs")

    @property
    @pulumi.getter(name="warningInterval")
    def warning_interval(self) -> pulumi.Output[int]:
        """
        Warning alert interval in minutes.
        """
        return pulumi.get(self, "warning_interval")

    @property
    @pulumi.getter(name="webfilterLogs")
    def webfilter_logs(self) -> pulumi.Output[str]:
        """
        Enable/disable web filter logs in alert email. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webfilter_logs")

