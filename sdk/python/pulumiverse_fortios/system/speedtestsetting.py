# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SpeedtestsettingArgs', 'Speedtestsetting']

@pulumi.input_type
class SpeedtestsettingArgs:
    def __init__(__self__, *,
                 latency_threshold: Optional[pulumi.Input[int]] = None,
                 multiple_tcp_stream: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Speedtestsetting resource.
        :param pulumi.Input[int] latency_threshold: Speed test latency threshold in milliseconds (0 - 2000, default = 60) for the Auto mode. If the latency exceeds this threshold, the speed test will use the UDP protocol; otherwise, it will use the TCP protocol.
        :param pulumi.Input[int] multiple_tcp_stream: Number of parallel client streams (1 - 64, default = 4) for the TCP protocol to run during the speed test.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if multiple_tcp_stream is not None:
            pulumi.set(__self__, "multiple_tcp_stream", multiple_tcp_stream)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Speed test latency threshold in milliseconds (0 - 2000, default = 60) for the Auto mode. If the latency exceeds this threshold, the speed test will use the UDP protocol; otherwise, it will use the TCP protocol.
        """
        return pulumi.get(self, "latency_threshold")

    @latency_threshold.setter
    def latency_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency_threshold", value)

    @property
    @pulumi.getter(name="multipleTcpStream")
    def multiple_tcp_stream(self) -> Optional[pulumi.Input[int]]:
        """
        Number of parallel client streams (1 - 64, default = 4) for the TCP protocol to run during the speed test.
        """
        return pulumi.get(self, "multiple_tcp_stream")

    @multiple_tcp_stream.setter
    def multiple_tcp_stream(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "multiple_tcp_stream", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SpeedtestsettingState:
    def __init__(__self__, *,
                 latency_threshold: Optional[pulumi.Input[int]] = None,
                 multiple_tcp_stream: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Speedtestsetting resources.
        :param pulumi.Input[int] latency_threshold: Speed test latency threshold in milliseconds (0 - 2000, default = 60) for the Auto mode. If the latency exceeds this threshold, the speed test will use the UDP protocol; otherwise, it will use the TCP protocol.
        :param pulumi.Input[int] multiple_tcp_stream: Number of parallel client streams (1 - 64, default = 4) for the TCP protocol to run during the speed test.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if multiple_tcp_stream is not None:
            pulumi.set(__self__, "multiple_tcp_stream", multiple_tcp_stream)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Speed test latency threshold in milliseconds (0 - 2000, default = 60) for the Auto mode. If the latency exceeds this threshold, the speed test will use the UDP protocol; otherwise, it will use the TCP protocol.
        """
        return pulumi.get(self, "latency_threshold")

    @latency_threshold.setter
    def latency_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency_threshold", value)

    @property
    @pulumi.getter(name="multipleTcpStream")
    def multiple_tcp_stream(self) -> Optional[pulumi.Input[int]]:
        """
        Number of parallel client streams (1 - 64, default = 4) for the TCP protocol to run during the speed test.
        """
        return pulumi.get(self, "multiple_tcp_stream")

    @multiple_tcp_stream.setter
    def multiple_tcp_stream(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "multiple_tcp_stream", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Speedtestsetting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 latency_threshold: Optional[pulumi.Input[int]] = None,
                 multiple_tcp_stream: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure speed test setting. Applies to FortiOS Version `7.2.6,7.4.1,7.4.2`.

        ## Import

        System SpeedTestSetting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/speedtestsetting:Speedtestsetting labelname SystemSpeedTestSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/speedtestsetting:Speedtestsetting labelname SystemSpeedTestSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] latency_threshold: Speed test latency threshold in milliseconds (0 - 2000, default = 60) for the Auto mode. If the latency exceeds this threshold, the speed test will use the UDP protocol; otherwise, it will use the TCP protocol.
        :param pulumi.Input[int] multiple_tcp_stream: Number of parallel client streams (1 - 64, default = 4) for the TCP protocol to run during the speed test.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SpeedtestsettingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure speed test setting. Applies to FortiOS Version `7.2.6,7.4.1,7.4.2`.

        ## Import

        System SpeedTestSetting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/speedtestsetting:Speedtestsetting labelname SystemSpeedTestSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/speedtestsetting:Speedtestsetting labelname SystemSpeedTestSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SpeedtestsettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SpeedtestsettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 latency_threshold: Optional[pulumi.Input[int]] = None,
                 multiple_tcp_stream: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SpeedtestsettingArgs.__new__(SpeedtestsettingArgs)

            __props__.__dict__["latency_threshold"] = latency_threshold
            __props__.__dict__["multiple_tcp_stream"] = multiple_tcp_stream
            __props__.__dict__["vdomparam"] = vdomparam
        super(Speedtestsetting, __self__).__init__(
            'fortios:system/speedtestsetting:Speedtestsetting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            latency_threshold: Optional[pulumi.Input[int]] = None,
            multiple_tcp_stream: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Speedtestsetting':
        """
        Get an existing Speedtestsetting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] latency_threshold: Speed test latency threshold in milliseconds (0 - 2000, default = 60) for the Auto mode. If the latency exceeds this threshold, the speed test will use the UDP protocol; otherwise, it will use the TCP protocol.
        :param pulumi.Input[int] multiple_tcp_stream: Number of parallel client streams (1 - 64, default = 4) for the TCP protocol to run during the speed test.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SpeedtestsettingState.__new__(_SpeedtestsettingState)

        __props__.__dict__["latency_threshold"] = latency_threshold
        __props__.__dict__["multiple_tcp_stream"] = multiple_tcp_stream
        __props__.__dict__["vdomparam"] = vdomparam
        return Speedtestsetting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> pulumi.Output[int]:
        """
        Speed test latency threshold in milliseconds (0 - 2000, default = 60) for the Auto mode. If the latency exceeds this threshold, the speed test will use the UDP protocol; otherwise, it will use the TCP protocol.
        """
        return pulumi.get(self, "latency_threshold")

    @property
    @pulumi.getter(name="multipleTcpStream")
    def multiple_tcp_stream(self) -> pulumi.Output[int]:
        """
        Number of parallel client streams (1 - 64, default = 4) for the TCP protocol to run during the speed test.
        """
        return pulumi.get(self, "multiple_tcp_stream")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

