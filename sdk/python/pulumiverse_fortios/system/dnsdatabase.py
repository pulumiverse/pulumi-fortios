# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DnsdatabaseArgs', 'Dnsdatabase']

@pulumi.input_type
class DnsdatabaseArgs:
    def __init__(__self__, *,
                 authoritative: pulumi.Input[str],
                 domain: pulumi.Input[str],
                 ttl: pulumi.Input[int],
                 type: pulumi.Input[str],
                 view: pulumi.Input[str],
                 allow_transfer: Optional[pulumi.Input[str]] = None,
                 contact: Optional[pulumi.Input[str]] = None,
                 dns_entries: Optional[pulumi.Input[Sequence[pulumi.Input['DnsdatabaseDnsEntryArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 forwarder: Optional[pulumi.Input[str]] = None,
                 forwarder6: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_master: Optional[pulumi.Input[str]] = None,
                 ip_primary: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary_name: Optional[pulumi.Input[str]] = None,
                 rr_max: Optional[pulumi.Input[int]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Dnsdatabase resource.
        :param pulumi.Input[str] authoritative: Enable/disable authoritative zone. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] domain: Domain name.
        :param pulumi.Input[int] ttl: Default time-to-live value for the entries of this DNS zone (0 - 2147483647 sec, default = 86400).
        :param pulumi.Input[str] type: Zone type (master to manage entries directly, slave to import entries from other zones).
        :param pulumi.Input[str] view: Zone view (public to serve public clients, shadow to serve internal clients).
        :param pulumi.Input[str] allow_transfer: DNS zone transfer IP address list.
        :param pulumi.Input[str] contact: Email address of the administrator for this zone.
               You can specify only the username (e.g. admin) or full email address (e.g. admin@test.com)
               When using a simple username, the domain of the email will be this zone.
        :param pulumi.Input[Sequence[pulumi.Input['DnsdatabaseDnsEntryArgs']]] dns_entries: DNS entry. The structure of `dns_entry` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] forwarder: DNS zone forwarder IP address list.
        :param pulumi.Input[str] forwarder6: Forwarder IPv6 address.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ip_master: IP address of master DNS server. Entries in this master DNS server and imported into the DNS zone.
        :param pulumi.Input[str] ip_primary: IP address of primary DNS server. Entries in this primary DNS server and imported into the DNS zone.
        :param pulumi.Input[str] name: Zone name.
        :param pulumi.Input[str] primary_name: Domain name of the default DNS server for this zone.
        :param pulumi.Input[int] rr_max: Maximum number of resource records (10 - 65536, 0 means infinite).
        :param pulumi.Input[str] source_ip: Source IP for forwarding to DNS server.
        :param pulumi.Input[str] source_ip6: IPv6 source IP address for forwarding to DNS server.
        :param pulumi.Input[str] status: Enable/disable this DNS zone. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "authoritative", authoritative)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "view", view)
        if allow_transfer is not None:
            pulumi.set(__self__, "allow_transfer", allow_transfer)
        if contact is not None:
            pulumi.set(__self__, "contact", contact)
        if dns_entries is not None:
            pulumi.set(__self__, "dns_entries", dns_entries)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if forwarder is not None:
            pulumi.set(__self__, "forwarder", forwarder)
        if forwarder6 is not None:
            pulumi.set(__self__, "forwarder6", forwarder6)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ip_master is not None:
            pulumi.set(__self__, "ip_master", ip_master)
        if ip_primary is not None:
            pulumi.set(__self__, "ip_primary", ip_primary)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary_name is not None:
            pulumi.set(__self__, "primary_name", primary_name)
        if rr_max is not None:
            pulumi.set(__self__, "rr_max", rr_max)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def authoritative(self) -> pulumi.Input[str]:
        """
        Enable/disable authoritative zone. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authoritative")

    @authoritative.setter
    def authoritative(self, value: pulumi.Input[str]):
        pulumi.set(self, "authoritative", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Domain name.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Input[int]:
        """
        Default time-to-live value for the entries of this DNS zone (0 - 2147483647 sec, default = 86400).
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: pulumi.Input[int]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Zone type (master to manage entries directly, slave to import entries from other zones).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def view(self) -> pulumi.Input[str]:
        """
        Zone view (public to serve public clients, shadow to serve internal clients).
        """
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: pulumi.Input[str]):
        pulumi.set(self, "view", value)

    @property
    @pulumi.getter(name="allowTransfer")
    def allow_transfer(self) -> Optional[pulumi.Input[str]]:
        """
        DNS zone transfer IP address list.
        """
        return pulumi.get(self, "allow_transfer")

    @allow_transfer.setter
    def allow_transfer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_transfer", value)

    @property
    @pulumi.getter
    def contact(self) -> Optional[pulumi.Input[str]]:
        """
        Email address of the administrator for this zone.
        You can specify only the username (e.g. admin) or full email address (e.g. admin@test.com)
        When using a simple username, the domain of the email will be this zone.
        """
        return pulumi.get(self, "contact")

    @contact.setter
    def contact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact", value)

    @property
    @pulumi.getter(name="dnsEntries")
    def dns_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsdatabaseDnsEntryArgs']]]]:
        """
        DNS entry. The structure of `dns_entry` block is documented below.
        """
        return pulumi.get(self, "dns_entries")

    @dns_entries.setter
    def dns_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsdatabaseDnsEntryArgs']]]]):
        pulumi.set(self, "dns_entries", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def forwarder(self) -> Optional[pulumi.Input[str]]:
        """
        DNS zone forwarder IP address list.
        """
        return pulumi.get(self, "forwarder")

    @forwarder.setter
    def forwarder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forwarder", value)

    @property
    @pulumi.getter
    def forwarder6(self) -> Optional[pulumi.Input[str]]:
        """
        Forwarder IPv6 address.
        """
        return pulumi.get(self, "forwarder6")

    @forwarder6.setter
    def forwarder6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forwarder6", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ipMaster")
    def ip_master(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of master DNS server. Entries in this master DNS server and imported into the DNS zone.
        """
        return pulumi.get(self, "ip_master")

    @ip_master.setter
    def ip_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_master", value)

    @property
    @pulumi.getter(name="ipPrimary")
    def ip_primary(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of primary DNS server. Entries in this primary DNS server and imported into the DNS zone.
        """
        return pulumi.get(self, "ip_primary")

    @ip_primary.setter
    def ip_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_primary", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryName")
    def primary_name(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name of the default DNS server for this zone.
        """
        return pulumi.get(self, "primary_name")

    @primary_name.setter
    def primary_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_name", value)

    @property
    @pulumi.getter(name="rrMax")
    def rr_max(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of resource records (10 - 65536, 0 means infinite).
        """
        return pulumi.get(self, "rr_max")

    @rr_max.setter
    def rr_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rr_max", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP for forwarding to DNS server.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 source IP address for forwarding to DNS server.
        """
        return pulumi.get(self, "source_ip6")

    @source_ip6.setter
    def source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip6", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this DNS zone. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _DnsdatabaseState:
    def __init__(__self__, *,
                 allow_transfer: Optional[pulumi.Input[str]] = None,
                 authoritative: Optional[pulumi.Input[str]] = None,
                 contact: Optional[pulumi.Input[str]] = None,
                 dns_entries: Optional[pulumi.Input[Sequence[pulumi.Input['DnsdatabaseDnsEntryArgs']]]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 forwarder: Optional[pulumi.Input[str]] = None,
                 forwarder6: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_master: Optional[pulumi.Input[str]] = None,
                 ip_primary: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary_name: Optional[pulumi.Input[str]] = None,
                 rr_max: Optional[pulumi.Input[int]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Dnsdatabase resources.
        :param pulumi.Input[str] allow_transfer: DNS zone transfer IP address list.
        :param pulumi.Input[str] authoritative: Enable/disable authoritative zone. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] contact: Email address of the administrator for this zone.
               You can specify only the username (e.g. admin) or full email address (e.g. admin@test.com)
               When using a simple username, the domain of the email will be this zone.
        :param pulumi.Input[Sequence[pulumi.Input['DnsdatabaseDnsEntryArgs']]] dns_entries: DNS entry. The structure of `dns_entry` block is documented below.
        :param pulumi.Input[str] domain: Domain name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] forwarder: DNS zone forwarder IP address list.
        :param pulumi.Input[str] forwarder6: Forwarder IPv6 address.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ip_master: IP address of master DNS server. Entries in this master DNS server and imported into the DNS zone.
        :param pulumi.Input[str] ip_primary: IP address of primary DNS server. Entries in this primary DNS server and imported into the DNS zone.
        :param pulumi.Input[str] name: Zone name.
        :param pulumi.Input[str] primary_name: Domain name of the default DNS server for this zone.
        :param pulumi.Input[int] rr_max: Maximum number of resource records (10 - 65536, 0 means infinite).
        :param pulumi.Input[str] source_ip: Source IP for forwarding to DNS server.
        :param pulumi.Input[str] source_ip6: IPv6 source IP address for forwarding to DNS server.
        :param pulumi.Input[str] status: Enable/disable this DNS zone. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ttl: Default time-to-live value for the entries of this DNS zone (0 - 2147483647 sec, default = 86400).
        :param pulumi.Input[str] type: Zone type (master to manage entries directly, slave to import entries from other zones).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] view: Zone view (public to serve public clients, shadow to serve internal clients).
        """
        if allow_transfer is not None:
            pulumi.set(__self__, "allow_transfer", allow_transfer)
        if authoritative is not None:
            pulumi.set(__self__, "authoritative", authoritative)
        if contact is not None:
            pulumi.set(__self__, "contact", contact)
        if dns_entries is not None:
            pulumi.set(__self__, "dns_entries", dns_entries)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if forwarder is not None:
            pulumi.set(__self__, "forwarder", forwarder)
        if forwarder6 is not None:
            pulumi.set(__self__, "forwarder6", forwarder6)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ip_master is not None:
            pulumi.set(__self__, "ip_master", ip_master)
        if ip_primary is not None:
            pulumi.set(__self__, "ip_primary", ip_primary)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary_name is not None:
            pulumi.set(__self__, "primary_name", primary_name)
        if rr_max is not None:
            pulumi.set(__self__, "rr_max", rr_max)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter(name="allowTransfer")
    def allow_transfer(self) -> Optional[pulumi.Input[str]]:
        """
        DNS zone transfer IP address list.
        """
        return pulumi.get(self, "allow_transfer")

    @allow_transfer.setter
    def allow_transfer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_transfer", value)

    @property
    @pulumi.getter
    def authoritative(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable authoritative zone. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authoritative")

    @authoritative.setter
    def authoritative(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authoritative", value)

    @property
    @pulumi.getter
    def contact(self) -> Optional[pulumi.Input[str]]:
        """
        Email address of the administrator for this zone.
        You can specify only the username (e.g. admin) or full email address (e.g. admin@test.com)
        When using a simple username, the domain of the email will be this zone.
        """
        return pulumi.get(self, "contact")

    @contact.setter
    def contact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact", value)

    @property
    @pulumi.getter(name="dnsEntries")
    def dns_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsdatabaseDnsEntryArgs']]]]:
        """
        DNS entry. The structure of `dns_entry` block is documented below.
        """
        return pulumi.get(self, "dns_entries")

    @dns_entries.setter
    def dns_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsdatabaseDnsEntryArgs']]]]):
        pulumi.set(self, "dns_entries", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def forwarder(self) -> Optional[pulumi.Input[str]]:
        """
        DNS zone forwarder IP address list.
        """
        return pulumi.get(self, "forwarder")

    @forwarder.setter
    def forwarder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forwarder", value)

    @property
    @pulumi.getter
    def forwarder6(self) -> Optional[pulumi.Input[str]]:
        """
        Forwarder IPv6 address.
        """
        return pulumi.get(self, "forwarder6")

    @forwarder6.setter
    def forwarder6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forwarder6", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ipMaster")
    def ip_master(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of master DNS server. Entries in this master DNS server and imported into the DNS zone.
        """
        return pulumi.get(self, "ip_master")

    @ip_master.setter
    def ip_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_master", value)

    @property
    @pulumi.getter(name="ipPrimary")
    def ip_primary(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of primary DNS server. Entries in this primary DNS server and imported into the DNS zone.
        """
        return pulumi.get(self, "ip_primary")

    @ip_primary.setter
    def ip_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_primary", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryName")
    def primary_name(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name of the default DNS server for this zone.
        """
        return pulumi.get(self, "primary_name")

    @primary_name.setter
    def primary_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_name", value)

    @property
    @pulumi.getter(name="rrMax")
    def rr_max(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of resource records (10 - 65536, 0 means infinite).
        """
        return pulumi.get(self, "rr_max")

    @rr_max.setter
    def rr_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rr_max", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP for forwarding to DNS server.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 source IP address for forwarding to DNS server.
        """
        return pulumi.get(self, "source_ip6")

    @source_ip6.setter
    def source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip6", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this DNS zone. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Default time-to-live value for the entries of this DNS zone (0 - 2147483647 sec, default = 86400).
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Zone type (master to manage entries directly, slave to import entries from other zones).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[str]]:
        """
        Zone view (public to serve public clients, shadow to serve internal clients).
        """
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view", value)


class Dnsdatabase(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_transfer: Optional[pulumi.Input[str]] = None,
                 authoritative: Optional[pulumi.Input[str]] = None,
                 contact: Optional[pulumi.Input[str]] = None,
                 dns_entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsdatabaseDnsEntryArgs']]]]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 forwarder: Optional[pulumi.Input[str]] = None,
                 forwarder6: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_master: Optional[pulumi.Input[str]] = None,
                 ip_primary: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary_name: Optional[pulumi.Input[str]] = None,
                 rr_max: Optional[pulumi.Input[int]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure DNS databases.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Dnsdatabase("trname",
            authoritative="enable",
            contact="hostmaster",
            dns_entries=[fortios.system.DnsdatabaseDnsEntryArgs(
                hostname="sghsgh.com",
                ttl=3,
                type="MX",
            )],
            domain="s.com",
            forwarder="\\"9.9.9.9\\" \\"3.3.3.3\\" ",
            ip_master="0.0.0.0",
            primary_name="dns",
            source_ip="0.0.0.0",
            status="enable",
            ttl=86400,
            type="master",
            view="shadow")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System DnsDatabase can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/dnsdatabase:Dnsdatabase labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/dnsdatabase:Dnsdatabase labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allow_transfer: DNS zone transfer IP address list.
        :param pulumi.Input[str] authoritative: Enable/disable authoritative zone. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] contact: Email address of the administrator for this zone.
               You can specify only the username (e.g. admin) or full email address (e.g. admin@test.com)
               When using a simple username, the domain of the email will be this zone.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsdatabaseDnsEntryArgs']]]] dns_entries: DNS entry. The structure of `dns_entry` block is documented below.
        :param pulumi.Input[str] domain: Domain name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] forwarder: DNS zone forwarder IP address list.
        :param pulumi.Input[str] forwarder6: Forwarder IPv6 address.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ip_master: IP address of master DNS server. Entries in this master DNS server and imported into the DNS zone.
        :param pulumi.Input[str] ip_primary: IP address of primary DNS server. Entries in this primary DNS server and imported into the DNS zone.
        :param pulumi.Input[str] name: Zone name.
        :param pulumi.Input[str] primary_name: Domain name of the default DNS server for this zone.
        :param pulumi.Input[int] rr_max: Maximum number of resource records (10 - 65536, 0 means infinite).
        :param pulumi.Input[str] source_ip: Source IP for forwarding to DNS server.
        :param pulumi.Input[str] source_ip6: IPv6 source IP address for forwarding to DNS server.
        :param pulumi.Input[str] status: Enable/disable this DNS zone. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ttl: Default time-to-live value for the entries of this DNS zone (0 - 2147483647 sec, default = 86400).
        :param pulumi.Input[str] type: Zone type (master to manage entries directly, slave to import entries from other zones).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] view: Zone view (public to serve public clients, shadow to serve internal clients).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DnsdatabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure DNS databases.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Dnsdatabase("trname",
            authoritative="enable",
            contact="hostmaster",
            dns_entries=[fortios.system.DnsdatabaseDnsEntryArgs(
                hostname="sghsgh.com",
                ttl=3,
                type="MX",
            )],
            domain="s.com",
            forwarder="\\"9.9.9.9\\" \\"3.3.3.3\\" ",
            ip_master="0.0.0.0",
            primary_name="dns",
            source_ip="0.0.0.0",
            status="enable",
            ttl=86400,
            type="master",
            view="shadow")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System DnsDatabase can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/dnsdatabase:Dnsdatabase labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/dnsdatabase:Dnsdatabase labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param DnsdatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsdatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_transfer: Optional[pulumi.Input[str]] = None,
                 authoritative: Optional[pulumi.Input[str]] = None,
                 contact: Optional[pulumi.Input[str]] = None,
                 dns_entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsdatabaseDnsEntryArgs']]]]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 forwarder: Optional[pulumi.Input[str]] = None,
                 forwarder6: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_master: Optional[pulumi.Input[str]] = None,
                 ip_primary: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary_name: Optional[pulumi.Input[str]] = None,
                 rr_max: Optional[pulumi.Input[int]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsdatabaseArgs.__new__(DnsdatabaseArgs)

            __props__.__dict__["allow_transfer"] = allow_transfer
            if authoritative is None and not opts.urn:
                raise TypeError("Missing required property 'authoritative'")
            __props__.__dict__["authoritative"] = authoritative
            __props__.__dict__["contact"] = contact
            __props__.__dict__["dns_entries"] = dns_entries
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["forwarder"] = forwarder
            __props__.__dict__["forwarder6"] = forwarder6
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ip_master"] = ip_master
            __props__.__dict__["ip_primary"] = ip_primary
            __props__.__dict__["name"] = name
            __props__.__dict__["primary_name"] = primary_name
            __props__.__dict__["rr_max"] = rr_max
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["source_ip6"] = source_ip6
            __props__.__dict__["status"] = status
            if ttl is None and not opts.urn:
                raise TypeError("Missing required property 'ttl'")
            __props__.__dict__["ttl"] = ttl
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["vdomparam"] = vdomparam
            if view is None and not opts.urn:
                raise TypeError("Missing required property 'view'")
            __props__.__dict__["view"] = view
        super(Dnsdatabase, __self__).__init__(
            'fortios:system/dnsdatabase:Dnsdatabase',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_transfer: Optional[pulumi.Input[str]] = None,
            authoritative: Optional[pulumi.Input[str]] = None,
            contact: Optional[pulumi.Input[str]] = None,
            dns_entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsdatabaseDnsEntryArgs']]]]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            forwarder: Optional[pulumi.Input[str]] = None,
            forwarder6: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ip_master: Optional[pulumi.Input[str]] = None,
            ip_primary: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            primary_name: Optional[pulumi.Input[str]] = None,
            rr_max: Optional[pulumi.Input[int]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            source_ip6: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            ttl: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            view: Optional[pulumi.Input[str]] = None) -> 'Dnsdatabase':
        """
        Get an existing Dnsdatabase resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allow_transfer: DNS zone transfer IP address list.
        :param pulumi.Input[str] authoritative: Enable/disable authoritative zone. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] contact: Email address of the administrator for this zone.
               You can specify only the username (e.g. admin) or full email address (e.g. admin@test.com)
               When using a simple username, the domain of the email will be this zone.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsdatabaseDnsEntryArgs']]]] dns_entries: DNS entry. The structure of `dns_entry` block is documented below.
        :param pulumi.Input[str] domain: Domain name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] forwarder: DNS zone forwarder IP address list.
        :param pulumi.Input[str] forwarder6: Forwarder IPv6 address.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ip_master: IP address of master DNS server. Entries in this master DNS server and imported into the DNS zone.
        :param pulumi.Input[str] ip_primary: IP address of primary DNS server. Entries in this primary DNS server and imported into the DNS zone.
        :param pulumi.Input[str] name: Zone name.
        :param pulumi.Input[str] primary_name: Domain name of the default DNS server for this zone.
        :param pulumi.Input[int] rr_max: Maximum number of resource records (10 - 65536, 0 means infinite).
        :param pulumi.Input[str] source_ip: Source IP for forwarding to DNS server.
        :param pulumi.Input[str] source_ip6: IPv6 source IP address for forwarding to DNS server.
        :param pulumi.Input[str] status: Enable/disable this DNS zone. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ttl: Default time-to-live value for the entries of this DNS zone (0 - 2147483647 sec, default = 86400).
        :param pulumi.Input[str] type: Zone type (master to manage entries directly, slave to import entries from other zones).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] view: Zone view (public to serve public clients, shadow to serve internal clients).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsdatabaseState.__new__(_DnsdatabaseState)

        __props__.__dict__["allow_transfer"] = allow_transfer
        __props__.__dict__["authoritative"] = authoritative
        __props__.__dict__["contact"] = contact
        __props__.__dict__["dns_entries"] = dns_entries
        __props__.__dict__["domain"] = domain
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["forwarder"] = forwarder
        __props__.__dict__["forwarder6"] = forwarder6
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ip_master"] = ip_master
        __props__.__dict__["ip_primary"] = ip_primary
        __props__.__dict__["name"] = name
        __props__.__dict__["primary_name"] = primary_name
        __props__.__dict__["rr_max"] = rr_max
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["source_ip6"] = source_ip6
        __props__.__dict__["status"] = status
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["type"] = type
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["view"] = view
        return Dnsdatabase(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowTransfer")
    def allow_transfer(self) -> pulumi.Output[str]:
        """
        DNS zone transfer IP address list.
        """
        return pulumi.get(self, "allow_transfer")

    @property
    @pulumi.getter
    def authoritative(self) -> pulumi.Output[str]:
        """
        Enable/disable authoritative zone. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authoritative")

    @property
    @pulumi.getter
    def contact(self) -> pulumi.Output[str]:
        """
        Email address of the administrator for this zone.
        You can specify only the username (e.g. admin) or full email address (e.g. admin@test.com)
        When using a simple username, the domain of the email will be this zone.
        """
        return pulumi.get(self, "contact")

    @property
    @pulumi.getter(name="dnsEntries")
    def dns_entries(self) -> pulumi.Output[Optional[Sequence['outputs.DnsdatabaseDnsEntry']]]:
        """
        DNS entry. The structure of `dns_entry` block is documented below.
        """
        return pulumi.get(self, "dns_entries")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain name.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def forwarder(self) -> pulumi.Output[str]:
        """
        DNS zone forwarder IP address list.
        """
        return pulumi.get(self, "forwarder")

    @property
    @pulumi.getter
    def forwarder6(self) -> pulumi.Output[str]:
        """
        Forwarder IPv6 address.
        """
        return pulumi.get(self, "forwarder6")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="ipMaster")
    def ip_master(self) -> pulumi.Output[str]:
        """
        IP address of master DNS server. Entries in this master DNS server and imported into the DNS zone.
        """
        return pulumi.get(self, "ip_master")

    @property
    @pulumi.getter(name="ipPrimary")
    def ip_primary(self) -> pulumi.Output[str]:
        """
        IP address of primary DNS server. Entries in this primary DNS server and imported into the DNS zone.
        """
        return pulumi.get(self, "ip_primary")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Zone name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryName")
    def primary_name(self) -> pulumi.Output[str]:
        """
        Domain name of the default DNS server for this zone.
        """
        return pulumi.get(self, "primary_name")

    @property
    @pulumi.getter(name="rrMax")
    def rr_max(self) -> pulumi.Output[int]:
        """
        Maximum number of resource records (10 - 65536, 0 means infinite).
        """
        return pulumi.get(self, "rr_max")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        """
        Source IP for forwarding to DNS server.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> pulumi.Output[str]:
        """
        IPv6 source IP address for forwarding to DNS server.
        """
        return pulumi.get(self, "source_ip6")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable this DNS zone. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[int]:
        """
        Default time-to-live value for the entries of this DNS zone (0 - 2147483647 sec, default = 86400).
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Zone type (master to manage entries directly, slave to import entries from other zones).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def view(self) -> pulumi.Output[str]:
        """
        Zone view (public to serve public clients, shadow to serve internal clients).
        """
        return pulumi.get(self, "view")

