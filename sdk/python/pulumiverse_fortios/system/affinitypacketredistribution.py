# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['AffinitypacketredistributionArgs', 'Affinitypacketredistribution']

@pulumi.input_type
class AffinitypacketredistributionArgs:
    def __init__(__self__, *,
                 affinity_cpumask: pulumi.Input[str],
                 fosid: pulumi.Input[int],
                 interface: pulumi.Input[str],
                 rxqid: pulumi.Input[int],
                 round_robin: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Affinitypacketredistribution resource.
        :param pulumi.Input[str] affinity_cpumask: Affinity setting for VM throughput (64-bit hexadecimal value in the format of 0xxxxxxxxxxxxxxxxx).
        :param pulumi.Input[int] fosid: ID of the packet redistribution setting.
        :param pulumi.Input[str] interface: Physical interface name on which to perform packet redistribution.
        :param pulumi.Input[int] rxqid: ID of the receive queue (when the interface has multiple queues) on which to perform packet redistribution.
        :param pulumi.Input[str] round_robin: Enable/disable round-robin redistribution to multiple CPUs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "affinity_cpumask", affinity_cpumask)
        pulumi.set(__self__, "fosid", fosid)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "rxqid", rxqid)
        if round_robin is not None:
            pulumi.set(__self__, "round_robin", round_robin)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="affinityCpumask")
    def affinity_cpumask(self) -> pulumi.Input[str]:
        """
        Affinity setting for VM throughput (64-bit hexadecimal value in the format of 0xxxxxxxxxxxxxxxxx).
        """
        return pulumi.get(self, "affinity_cpumask")

    @affinity_cpumask.setter
    def affinity_cpumask(self, value: pulumi.Input[str]):
        pulumi.set(self, "affinity_cpumask", value)

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Input[int]:
        """
        ID of the packet redistribution setting.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: pulumi.Input[int]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        """
        Physical interface name on which to perform packet redistribution.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def rxqid(self) -> pulumi.Input[int]:
        """
        ID of the receive queue (when the interface has multiple queues) on which to perform packet redistribution.
        """
        return pulumi.get(self, "rxqid")

    @rxqid.setter
    def rxqid(self, value: pulumi.Input[int]):
        pulumi.set(self, "rxqid", value)

    @property
    @pulumi.getter(name="roundRobin")
    def round_robin(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable round-robin redistribution to multiple CPUs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "round_robin")

    @round_robin.setter
    def round_robin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "round_robin", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _AffinitypacketredistributionState:
    def __init__(__self__, *,
                 affinity_cpumask: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 round_robin: Optional[pulumi.Input[str]] = None,
                 rxqid: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Affinitypacketredistribution resources.
        :param pulumi.Input[str] affinity_cpumask: Affinity setting for VM throughput (64-bit hexadecimal value in the format of 0xxxxxxxxxxxxxxxxx).
        :param pulumi.Input[int] fosid: ID of the packet redistribution setting.
        :param pulumi.Input[str] interface: Physical interface name on which to perform packet redistribution.
        :param pulumi.Input[str] round_robin: Enable/disable round-robin redistribution to multiple CPUs. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] rxqid: ID of the receive queue (when the interface has multiple queues) on which to perform packet redistribution.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if affinity_cpumask is not None:
            pulumi.set(__self__, "affinity_cpumask", affinity_cpumask)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if round_robin is not None:
            pulumi.set(__self__, "round_robin", round_robin)
        if rxqid is not None:
            pulumi.set(__self__, "rxqid", rxqid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="affinityCpumask")
    def affinity_cpumask(self) -> Optional[pulumi.Input[str]]:
        """
        Affinity setting for VM throughput (64-bit hexadecimal value in the format of 0xxxxxxxxxxxxxxxxx).
        """
        return pulumi.get(self, "affinity_cpumask")

    @affinity_cpumask.setter
    def affinity_cpumask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "affinity_cpumask", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the packet redistribution setting.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Physical interface name on which to perform packet redistribution.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="roundRobin")
    def round_robin(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable round-robin redistribution to multiple CPUs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "round_robin")

    @round_robin.setter
    def round_robin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "round_robin", value)

    @property
    @pulumi.getter
    def rxqid(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the receive queue (when the interface has multiple queues) on which to perform packet redistribution.
        """
        return pulumi.get(self, "rxqid")

    @rxqid.setter
    def rxqid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rxqid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Affinitypacketredistribution(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 affinity_cpumask: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 round_robin: Optional[pulumi.Input[str]] = None,
                 rxqid: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure packet redistribution.

        ## Import

        System AffinityPacketRedistribution can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/affinitypacketredistribution:Affinitypacketredistribution labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/affinitypacketredistribution:Affinitypacketredistribution labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] affinity_cpumask: Affinity setting for VM throughput (64-bit hexadecimal value in the format of 0xxxxxxxxxxxxxxxxx).
        :param pulumi.Input[int] fosid: ID of the packet redistribution setting.
        :param pulumi.Input[str] interface: Physical interface name on which to perform packet redistribution.
        :param pulumi.Input[str] round_robin: Enable/disable round-robin redistribution to multiple CPUs. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] rxqid: ID of the receive queue (when the interface has multiple queues) on which to perform packet redistribution.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AffinitypacketredistributionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure packet redistribution.

        ## Import

        System AffinityPacketRedistribution can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/affinitypacketredistribution:Affinitypacketredistribution labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/affinitypacketredistribution:Affinitypacketredistribution labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param AffinitypacketredistributionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AffinitypacketredistributionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 affinity_cpumask: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 round_robin: Optional[pulumi.Input[str]] = None,
                 rxqid: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AffinitypacketredistributionArgs.__new__(AffinitypacketredistributionArgs)

            if affinity_cpumask is None and not opts.urn:
                raise TypeError("Missing required property 'affinity_cpumask'")
            __props__.__dict__["affinity_cpumask"] = affinity_cpumask
            if fosid is None and not opts.urn:
                raise TypeError("Missing required property 'fosid'")
            __props__.__dict__["fosid"] = fosid
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            __props__.__dict__["round_robin"] = round_robin
            if rxqid is None and not opts.urn:
                raise TypeError("Missing required property 'rxqid'")
            __props__.__dict__["rxqid"] = rxqid
            __props__.__dict__["vdomparam"] = vdomparam
        super(Affinitypacketredistribution, __self__).__init__(
            'fortios:system/affinitypacketredistribution:Affinitypacketredistribution',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            affinity_cpumask: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            round_robin: Optional[pulumi.Input[str]] = None,
            rxqid: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Affinitypacketredistribution':
        """
        Get an existing Affinitypacketredistribution resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] affinity_cpumask: Affinity setting for VM throughput (64-bit hexadecimal value in the format of 0xxxxxxxxxxxxxxxxx).
        :param pulumi.Input[int] fosid: ID of the packet redistribution setting.
        :param pulumi.Input[str] interface: Physical interface name on which to perform packet redistribution.
        :param pulumi.Input[str] round_robin: Enable/disable round-robin redistribution to multiple CPUs. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] rxqid: ID of the receive queue (when the interface has multiple queues) on which to perform packet redistribution.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AffinitypacketredistributionState.__new__(_AffinitypacketredistributionState)

        __props__.__dict__["affinity_cpumask"] = affinity_cpumask
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["interface"] = interface
        __props__.__dict__["round_robin"] = round_robin
        __props__.__dict__["rxqid"] = rxqid
        __props__.__dict__["vdomparam"] = vdomparam
        return Affinitypacketredistribution(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="affinityCpumask")
    def affinity_cpumask(self) -> pulumi.Output[str]:
        """
        Affinity setting for VM throughput (64-bit hexadecimal value in the format of 0xxxxxxxxxxxxxxxxx).
        """
        return pulumi.get(self, "affinity_cpumask")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        """
        ID of the packet redistribution setting.
        """
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Physical interface name on which to perform packet redistribution.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="roundRobin")
    def round_robin(self) -> pulumi.Output[str]:
        """
        Enable/disable round-robin redistribution to multiple CPUs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "round_robin")

    @property
    @pulumi.getter
    def rxqid(self) -> pulumi.Output[int]:
        """
        ID of the receive queue (when the interface has multiple queues) on which to perform packet redistribution.
        """
        return pulumi.get(self, "rxqid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

