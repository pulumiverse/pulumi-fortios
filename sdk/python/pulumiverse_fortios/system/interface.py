# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InterfaceArgs', 'Interface']

@pulumi.input_type
class InterfaceArgs:
    def __init__(__self__, *,
                 vdom: pulumi.Input[str],
                 ac_name: Optional[pulumi.Input[str]] = None,
                 aggregate: Optional[pulumi.Input[str]] = None,
                 aggregate_type: Optional[pulumi.Input[str]] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 ap_discover: Optional[pulumi.Input[str]] = None,
                 arpforward: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_portal_addr: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 auto_auth_extension_device: Optional[pulumi.Input[str]] = None,
                 autogenerated: Optional[pulumi.Input[str]] = None,
                 bandwidth_measure_time: Optional[pulumi.Input[int]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 bfd_desired_min_tx: Optional[pulumi.Input[int]] = None,
                 bfd_detect_mult: Optional[pulumi.Input[int]] = None,
                 bfd_required_min_rx: Optional[pulumi.Input[int]] = None,
                 broadcast_forticlient_discovery: Optional[pulumi.Input[str]] = None,
                 broadcast_forward: Optional[pulumi.Input[str]] = None,
                 captive_portal: Optional[pulumi.Input[int]] = None,
                 cli_conn_status: Optional[pulumi.Input[int]] = None,
                 client_options: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceClientOptionArgs']]]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 dedicated_to: Optional[pulumi.Input[str]] = None,
                 default_purdue_level: Optional[pulumi.Input[str]] = None,
                 defaultgw: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 detected_peer_mtu: Optional[pulumi.Input[int]] = None,
                 detectprotocol: Optional[pulumi.Input[str]] = None,
                 detectserver: Optional[pulumi.Input[str]] = None,
                 device_access_list: Optional[pulumi.Input[str]] = None,
                 device_identification: Optional[pulumi.Input[str]] = None,
                 device_identification_active_scan: Optional[pulumi.Input[str]] = None,
                 device_netscan: Optional[pulumi.Input[str]] = None,
                 device_user_identification: Optional[pulumi.Input[str]] = None,
                 devindex: Optional[pulumi.Input[int]] = None,
                 dhcp_broadcast_flag: Optional[pulumi.Input[str]] = None,
                 dhcp_classless_route_addition: Optional[pulumi.Input[str]] = None,
                 dhcp_client_identifier: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_agent_option: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_circuit_id: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_interface: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_interface_select_method: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_ip: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_link_selection: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_request_all_server: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_service: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_source_ip: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_type: Optional[pulumi.Input[str]] = None,
                 dhcp_renew_time: Optional[pulumi.Input[int]] = None,
                 dhcp_smart_relay: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping_server_lists: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceDhcpSnoopingServerListArgs']]]] = None,
                 disc_retry_timeout: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dns_server_override: Optional[pulumi.Input[str]] = None,
                 dns_server_protocol: Optional[pulumi.Input[str]] = None,
                 drop_fragment: Optional[pulumi.Input[str]] = None,
                 drop_overlapped_fragment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 eap_ca_cert: Optional[pulumi.Input[str]] = None,
                 eap_identity: Optional[pulumi.Input[str]] = None,
                 eap_method: Optional[pulumi.Input[str]] = None,
                 eap_password: Optional[pulumi.Input[str]] = None,
                 eap_supplicant: Optional[pulumi.Input[str]] = None,
                 eap_user_cert: Optional[pulumi.Input[str]] = None,
                 egress_shaping_profile: Optional[pulumi.Input[str]] = None,
                 endpoint_compliance: Optional[pulumi.Input[str]] = None,
                 estimated_downstream_bandwidth: Optional[pulumi.Input[int]] = None,
                 estimated_upstream_bandwidth: Optional[pulumi.Input[int]] = None,
                 explicit_ftp_proxy: Optional[pulumi.Input[str]] = None,
                 explicit_web_proxy: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 fail_action_on_extender: Optional[pulumi.Input[str]] = None,
                 fail_alert_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceFailAlertInterfaceArgs']]]] = None,
                 fail_alert_method: Optional[pulumi.Input[str]] = None,
                 fail_detect: Optional[pulumi.Input[str]] = None,
                 fail_detect_option: Optional[pulumi.Input[str]] = None,
                 fortiheartbeat: Optional[pulumi.Input[str]] = None,
                 fortilink: Optional[pulumi.Input[str]] = None,
                 fortilink_backup_link: Optional[pulumi.Input[int]] = None,
                 fortilink_neighbor_detect: Optional[pulumi.Input[str]] = None,
                 fortilink_split_interface: Optional[pulumi.Input[str]] = None,
                 fortilink_stacking: Optional[pulumi.Input[str]] = None,
                 forward_domain: Optional[pulumi.Input[int]] = None,
                 forward_error_correction: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gwdetect: Optional[pulumi.Input[str]] = None,
                 ha_priority: Optional[pulumi.Input[int]] = None,
                 icmp_accept_redirect: Optional[pulumi.Input[str]] = None,
                 icmp_send_redirect: Optional[pulumi.Input[str]] = None,
                 ident_accept: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 ike_saml_server: Optional[pulumi.Input[str]] = None,
                 inbandwidth: Optional[pulumi.Input[int]] = None,
                 ingress_shaping_profile: Optional[pulumi.Input[str]] = None,
                 ingress_spillover_threshold: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 internal: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ip_managed_by_fortiipam: Optional[pulumi.Input[str]] = None,
                 ipmac: Optional[pulumi.Input[str]] = None,
                 ips_sniffer_mode: Optional[pulumi.Input[str]] = None,
                 ipunnumbered: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input['InterfaceIpv6Args']] = None,
                 l2forward: Optional[pulumi.Input[str]] = None,
                 lacp_ha_secondary: Optional[pulumi.Input[str]] = None,
                 lacp_ha_slave: Optional[pulumi.Input[str]] = None,
                 lacp_mode: Optional[pulumi.Input[str]] = None,
                 lacp_speed: Optional[pulumi.Input[str]] = None,
                 lcp_echo_interval: Optional[pulumi.Input[int]] = None,
                 lcp_max_echo_fails: Optional[pulumi.Input[int]] = None,
                 link_up_delay: Optional[pulumi.Input[int]] = None,
                 lldp_network_policy: Optional[pulumi.Input[str]] = None,
                 lldp_reception: Optional[pulumi.Input[str]] = None,
                 lldp_transmission: Optional[pulumi.Input[str]] = None,
                 macaddr: Optional[pulumi.Input[str]] = None,
                 managed_devices: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceManagedDeviceArgs']]]] = None,
                 managed_subnetwork_size: Optional[pulumi.Input[str]] = None,
                 management_ip: Optional[pulumi.Input[str]] = None,
                 measured_downstream_bandwidth: Optional[pulumi.Input[int]] = None,
                 measured_upstream_bandwidth: Optional[pulumi.Input[int]] = None,
                 mediatype: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceMemberArgs']]]] = None,
                 min_links: Optional[pulumi.Input[int]] = None,
                 min_links_down: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 monitor_bandwidth: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 mtu_override: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ndiscforward: Optional[pulumi.Input[str]] = None,
                 netbios_forward: Optional[pulumi.Input[str]] = None,
                 netflow_sampler: Optional[pulumi.Input[str]] = None,
                 outbandwidth: Optional[pulumi.Input[int]] = None,
                 padt_retry_timeout: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ping_serv_status: Optional[pulumi.Input[int]] = None,
                 polling_interval: Optional[pulumi.Input[int]] = None,
                 pppoe_unnumbered_negotiate: Optional[pulumi.Input[str]] = None,
                 pptp_auth_type: Optional[pulumi.Input[str]] = None,
                 pptp_client: Optional[pulumi.Input[str]] = None,
                 pptp_password: Optional[pulumi.Input[str]] = None,
                 pptp_server_ip: Optional[pulumi.Input[str]] = None,
                 pptp_timeout: Optional[pulumi.Input[int]] = None,
                 pptp_user: Optional[pulumi.Input[str]] = None,
                 preserve_session_route: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 priority_override: Optional[pulumi.Input[str]] = None,
                 proxy_captive_portal: Optional[pulumi.Input[str]] = None,
                 reachable_time: Optional[pulumi.Input[int]] = None,
                 redundant_interface: Optional[pulumi.Input[str]] = None,
                 remote_ip: Optional[pulumi.Input[str]] = None,
                 replacemsg_override_group: Optional[pulumi.Input[str]] = None,
                 ring_rx: Optional[pulumi.Input[int]] = None,
                 ring_tx: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 sample_direction: Optional[pulumi.Input[str]] = None,
                 sample_rate: Optional[pulumi.Input[int]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 secondary_ip: Optional[pulumi.Input[str]] = None,
                 secondaryips: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceSecondaryipArgs']]]] = None,
                 security_exempt_list: Optional[pulumi.Input[str]] = None,
                 security_external_logout: Optional[pulumi.Input[str]] = None,
                 security_external_web: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceSecurityGroupArgs']]]] = None,
                 security_mac_auth_bypass: Optional[pulumi.Input[str]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 security_redirect_url: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 sflow_sampler: Optional[pulumi.Input[str]] = None,
                 snmp_index: Optional[pulumi.Input[int]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 spillover_threshold: Optional[pulumi.Input[int]] = None,
                 src_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 stp: Optional[pulumi.Input[str]] = None,
                 stp_ha_secondary: Optional[pulumi.Input[str]] = None,
                 stpforward: Optional[pulumi.Input[str]] = None,
                 stpforward_mode: Optional[pulumi.Input[str]] = None,
                 subst: Optional[pulumi.Input[str]] = None,
                 substitute_dst_mac: Optional[pulumi.Input[str]] = None,
                 swc_first_create: Optional[pulumi.Input[int]] = None,
                 swc_vlan: Optional[pulumi.Input[int]] = None,
                 switch: Optional[pulumi.Input[str]] = None,
                 switch_controller_access_vlan: Optional[pulumi.Input[str]] = None,
                 switch_controller_arp_inspection: Optional[pulumi.Input[str]] = None,
                 switch_controller_dhcp_snooping: Optional[pulumi.Input[str]] = None,
                 switch_controller_dhcp_snooping_option82: Optional[pulumi.Input[str]] = None,
                 switch_controller_dhcp_snooping_verify_mac: Optional[pulumi.Input[str]] = None,
                 switch_controller_dynamic: Optional[pulumi.Input[str]] = None,
                 switch_controller_feature: Optional[pulumi.Input[str]] = None,
                 switch_controller_igmp_snooping: Optional[pulumi.Input[str]] = None,
                 switch_controller_igmp_snooping_fast_leave: Optional[pulumi.Input[str]] = None,
                 switch_controller_igmp_snooping_proxy: Optional[pulumi.Input[str]] = None,
                 switch_controller_iot_scanning: Optional[pulumi.Input[str]] = None,
                 switch_controller_learning_limit: Optional[pulumi.Input[int]] = None,
                 switch_controller_mgmt_vlan: Optional[pulumi.Input[int]] = None,
                 switch_controller_nac: Optional[pulumi.Input[str]] = None,
                 switch_controller_netflow_collect: Optional[pulumi.Input[str]] = None,
                 switch_controller_offload: Optional[pulumi.Input[str]] = None,
                 switch_controller_offload_gw: Optional[pulumi.Input[str]] = None,
                 switch_controller_offload_ip: Optional[pulumi.Input[str]] = None,
                 switch_controller_rspan_mode: Optional[pulumi.Input[str]] = None,
                 switch_controller_source_ip: Optional[pulumi.Input[str]] = None,
                 switch_controller_traffic_policy: Optional[pulumi.Input[str]] = None,
                 system_id: Optional[pulumi.Input[str]] = None,
                 system_id_type: Optional[pulumi.Input[str]] = None,
                 taggings: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTaggingArgs']]]] = None,
                 tcp_mss: Optional[pulumi.Input[int]] = None,
                 trunk: Optional[pulumi.Input[str]] = None,
                 trust_ip1: Optional[pulumi.Input[str]] = None,
                 trust_ip2: Optional[pulumi.Input[str]] = None,
                 trust_ip3: Optional[pulumi.Input[str]] = None,
                 trust_ip61: Optional[pulumi.Input[str]] = None,
                 trust_ip62: Optional[pulumi.Input[str]] = None,
                 trust_ip63: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vindex: Optional[pulumi.Input[int]] = None,
                 vlan_protocol: Optional[pulumi.Input[str]] = None,
                 vlanforward: Optional[pulumi.Input[str]] = None,
                 vlanid: Optional[pulumi.Input[int]] = None,
                 vrf: Optional[pulumi.Input[int]] = None,
                 vrrp_virtual_mac: Optional[pulumi.Input[str]] = None,
                 vrrps: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceVrrpArgs']]]] = None,
                 wccp: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 wins_ip: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Interface resource.
        :param pulumi.Input[str] vdom: Interface is in this virtual domain (VDOM).
        :param pulumi.Input[str] ac_name: PPPoE server name.
        :param pulumi.Input[str] aggregate: Aggregate interface.
        :param pulumi.Input[str] aggregate_type: Type of aggregation. Valid values: `physical`, `vxlan`.
        :param pulumi.Input[str] algorithm: Frame distribution algorithm.
        :param pulumi.Input[str] alias: Alias will be displayed with the interface name to make it easier to distinguish.
        :param pulumi.Input[str] allowaccess: Permitted types of management access to this interface.
        :param pulumi.Input[str] ap_discover: Enable/disable automatic registration of unknown FortiAP devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] arpforward: Enable/disable ARP forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_cert: HTTPS server certificate.
        :param pulumi.Input[str] auth_portal_addr: Address of captive portal.
        :param pulumi.Input[str] auth_type: PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        :param pulumi.Input[str] auto_auth_extension_device: Enable/disable automatic authorization of dedicated Fortinet extension device on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] autogenerated: Indicates whether the interface is automatically created by FortiGate, for example, created during the VPN creation process. If it is, set it to "auto", else keep it empty.
        :param pulumi.Input[int] bandwidth_measure_time: Bandwidth measure time
        :param pulumi.Input[str] bfd: Bidirectional Forwarding Detection (BFD) settings. Valid values: `global`, `enable`, `disable`.
        :param pulumi.Input[int] bfd_desired_min_tx: BFD desired minimal transmit interval.
        :param pulumi.Input[int] bfd_detect_mult: BFD detection multiplier.
        :param pulumi.Input[int] bfd_required_min_rx: BFD required minimal receive interval.
        :param pulumi.Input[str] broadcast_forticlient_discovery: Enable/disable broadcasting FortiClient discovery messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] broadcast_forward: Enable/disable broadcast forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] captive_portal: Enable/disable captive portal.
        :param pulumi.Input[int] cli_conn_status: CLI connection status.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceClientOptionArgs']]] client_options: DHCP client options. The structure of `client_options` block is documented below.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] dedicated_to: Configure interface for single purpose. Valid values: `none`, `management`.
        :param pulumi.Input[str] default_purdue_level: default purdue level of device detected on this interface. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
        :param pulumi.Input[str] defaultgw: Enable to get the gateway IP from the DHCP or PPPoE server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] detected_peer_mtu: MTU of detected peer (0 - 4294967295).
        :param pulumi.Input[str] detectprotocol: Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
        :param pulumi.Input[str] detectserver: Gateway's ping server for this IP.
        :param pulumi.Input[str] device_access_list: Device access list.
        :param pulumi.Input[str] device_identification: Enable/disable passively gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] device_identification_active_scan: Enable/disable active gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] device_netscan: Enable/disable inclusion of devices detected on this interface in network vulnerability scans. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] device_user_identification: Enable/disable passive gathering of user identity information about users on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] devindex: Device Index.
        :param pulumi.Input[str] dhcp_broadcast_flag: Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp_classless_route_addition: Enable/disable addition of classless static routes retrieved from DHCP server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhcp_client_identifier: DHCP client identifier.
        :param pulumi.Input[str] dhcp_relay_agent_option: Enable/disable DHCP relay agent option. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhcp_relay_circuit_id: DHCP relay circuit ID.
        :param pulumi.Input[str] dhcp_relay_interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] dhcp_relay_interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] dhcp_relay_ip: DHCP relay IP address.
        :param pulumi.Input[str] dhcp_relay_link_selection: DHCP relay link selection.
        :param pulumi.Input[str] dhcp_relay_request_all_server: Enable/disable sending DHCP request to all servers. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp_relay_service: Enable/disable allowing this interface to act as a DHCP relay. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp_relay_source_ip: IP address used by the DHCP relay as its source IP.
        :param pulumi.Input[str] dhcp_relay_type: DHCP relay type (regular or IPsec). Valid values: `regular`, `ipsec`.
        :param pulumi.Input[int] dhcp_renew_time: DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
        :param pulumi.Input[str] dhcp_smart_relay: Enable/disable DHCP smart relay. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceDhcpSnoopingServerListArgs']]] dhcp_snooping_server_lists: Configure DHCP server access list. The structure of `dhcp_snooping_server_list` block is documented below.
        :param pulumi.Input[int] disc_retry_timeout: Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
        :param pulumi.Input[int] disconnect_threshold: Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
        :param pulumi.Input[int] distance: Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
        :param pulumi.Input[str] dns_server_override: Enable/disable use DNS acquired by DHCP or PPPoE. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dns_server_protocol: DNS transport protocols. Valid values: `cleartext`, `dot`, `doh`.
        :param pulumi.Input[str] drop_fragment: Enable/disable drop fragment packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] drop_overlapped_fragment: Enable/disable drop overlapped fragment packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] eap_ca_cert: EAP CA certificate name.
        :param pulumi.Input[str] eap_identity: EAP identity.
        :param pulumi.Input[str] eap_method: EAP method. Valid values: `tls`, `peap`.
        :param pulumi.Input[str] eap_password: EAP password.
        :param pulumi.Input[str] eap_supplicant: Enable/disable EAP-Supplicant. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] eap_user_cert: EAP user certificate name.
        :param pulumi.Input[str] egress_shaping_profile: Outgoing traffic shaping profile.
        :param pulumi.Input[str] endpoint_compliance: Enable/disable endpoint compliance enforcement. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] estimated_downstream_bandwidth: Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
        :param pulumi.Input[int] estimated_upstream_bandwidth: Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
        :param pulumi.Input[str] explicit_ftp_proxy: Enable/disable the explicit FTP proxy on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] explicit_web_proxy: Enable/disable the explicit web proxy on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] external: Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fail_action_on_extender: Action on extender when interface fail . Valid values: `soft-restart`, `hard-restart`, `reboot`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceFailAlertInterfaceArgs']]] fail_alert_interfaces: Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `fail_alert_interfaces` block is documented below.
        :param pulumi.Input[str] fail_alert_method: Select link-failed-signal or link-down method to alert about a failed link. Valid values: `link-failed-signal`, `link-down`.
        :param pulumi.Input[str] fail_detect: Enable/disable fail detection features for this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fail_detect_option: Options for detecting that this interface has failed. Valid values: `detectserver`, `link-down`.
        :param pulumi.Input[str] fortiheartbeat: Enable/disable FortiHeartBeat (FortiTelemetry on GUI). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortilink: Enable FortiLink to dedicate this interface to manage other Fortinet devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] fortilink_backup_link: fortilink split interface backup link.
        :param pulumi.Input[str] fortilink_neighbor_detect: Protocol for FortiGate neighbor discovery. Valid values: `lldp`, `fortilink`.
        :param pulumi.Input[str] fortilink_split_interface: Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortilink_stacking: Enable/disable FortiLink switch-stacking on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] forward_domain: Transparent mode forward domain.
        :param pulumi.Input[str] forward_error_correction: Configure forward error correction (FEC). Valid values: `none`, `disable`, `cl91-rs-fec`, `cl74-fc-fec`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] gwdetect: Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ha_priority: HA election priority for the PING server.
        :param pulumi.Input[str] icmp_accept_redirect: Enable/disable ICMP accept redirect. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] icmp_send_redirect: Enable/disable ICMP send redirect. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ident_accept: Enable/disable authentication for this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] idle_timeout: PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
        :param pulumi.Input[str] ike_saml_server: Configure IKE authentication SAML server.
        :param pulumi.Input[int] inbandwidth: Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
        :param pulumi.Input[str] ingress_shaping_profile: Incoming traffic shaping profile.
        :param pulumi.Input[int] ingress_spillover_threshold: Ingress Spillover threshold (0 - 16776000 kbps).
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[int] internal: Implicitly created.
        :param pulumi.Input[str] ip: Interface IPv4 address and subnet mask, syntax: X.X.X.X/24.
        :param pulumi.Input[str] ip_managed_by_fortiipam: Enable/disable automatic IP address assignment of this interface by FortiIPAM.
        :param pulumi.Input[str] ipmac: Enable/disable IP/MAC binding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sniffer_mode: Enable/disable the use of this interface as a one-armed sniffer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipunnumbered: Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
        :param pulumi.Input['InterfaceIpv6Args'] ipv6: IPv6 of interface. The structure of `ipv6` block is documented below.
        :param pulumi.Input[str] l2forward: Enable/disable l2 forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] lacp_ha_secondary: LACP HA secondary member. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] lacp_ha_slave: LACP HA slave. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] lacp_mode: LACP mode. Valid values: `static`, `passive`, `active`.
        :param pulumi.Input[str] lacp_speed: How often the interface sends LACP messages. Valid values: `slow`, `fast`.
        :param pulumi.Input[int] lcp_echo_interval: Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
        :param pulumi.Input[int] lcp_max_echo_fails: Maximum missed LCP echo messages before disconnect.
        :param pulumi.Input[int] link_up_delay: Number of milliseconds to wait before considering a link is up.
        :param pulumi.Input[str] lldp_network_policy: LLDP-MED network policy profile.
        :param pulumi.Input[str] lldp_reception: Enable/disable Link Layer Discovery Protocol (LLDP) reception. Valid values: `enable`, `disable`, `vdom`.
        :param pulumi.Input[str] lldp_transmission: Enable/disable Link Layer Discovery Protocol (LLDP) transmission. Valid values: `enable`, `disable`, `vdom`.
        :param pulumi.Input[str] macaddr: Change the interface's MAC address.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceManagedDeviceArgs']]] managed_devices: Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managed_device` block is documented below.
        :param pulumi.Input[str] managed_subnetwork_size: Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
        :param pulumi.Input[str] management_ip: High Availability in-band management IP address of this interface.
        :param pulumi.Input[int] measured_downstream_bandwidth: Measured downstream bandwidth (kbps).
        :param pulumi.Input[int] measured_upstream_bandwidth: Measured upstream bandwidth (kbps).
        :param pulumi.Input[str] mediatype: Select SFP media interface type Valid values: `none`, `gmii`, `sgmii`, `sr`, `lr`, `cr`, `sr4`, `lr4`, `cr4`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceMemberArgs']]] members: Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
        :param pulumi.Input[int] min_links: Minimum number of aggregated ports that must be up.
        :param pulumi.Input[str] min_links_down: Action to take when less than the configured minimum number of links are active. Valid values: `operational`, `administrative`.
        :param pulumi.Input[str] mode: Addressing mode (static, DHCP, PPPoE). Valid values: `static`, `dhcp`, `pppoe`.
        :param pulumi.Input[str] monitor_bandwidth: Enable monitoring bandwidth on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mtu: MTU value for this interface.
        :param pulumi.Input[str] mtu_override: Enable to set a custom MTU for this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] ndiscforward: Enable/disable NDISC forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] netbios_forward: Enable/disable NETBIOS forwarding. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] netflow_sampler: Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both). Valid values: `disable`, `tx`, `rx`, `both`.
        :param pulumi.Input[int] outbandwidth: Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
        :param pulumi.Input[int] padt_retry_timeout: PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
        :param pulumi.Input[str] password: PPPoE account's password.
        :param pulumi.Input[int] ping_serv_status: PING server status.
        :param pulumi.Input[int] polling_interval: sFlow polling interval (1 - 255 sec).
        :param pulumi.Input[str] pppoe_unnumbered_negotiate: Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pptp_auth_type: PPTP authentication type. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        :param pulumi.Input[str] pptp_client: Enable/disable PPTP client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pptp_password: PPTP password.
        :param pulumi.Input[str] pptp_server_ip: PPTP server IP address.
        :param pulumi.Input[int] pptp_timeout: Idle timer in minutes (0 for disabled).
        :param pulumi.Input[str] pptp_user: PPTP user name.
        :param pulumi.Input[str] preserve_session_route: Enable/disable preservation of session route when dirty. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Priority of learned routes.
        :param pulumi.Input[str] priority_override: Enable/disable fail back to higher priority port once recovered. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] proxy_captive_portal: Enable/disable proxy captive portal on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] reachable_time: IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
        :param pulumi.Input[str] redundant_interface: Redundant interface.
        :param pulumi.Input[str] remote_ip: Remote IP address of tunnel.
        :param pulumi.Input[str] replacemsg_override_group: Replacement message override group.
        :param pulumi.Input[int] ring_rx: RX ring size.
        :param pulumi.Input[int] ring_tx: TX ring size.
        :param pulumi.Input[str] role: Interface role. Valid values: `lan`, `wan`, `dmz`, `undefined`.
        :param pulumi.Input[str] sample_direction: Data that NetFlow collects (rx, tx, or both). Valid values: `tx`, `rx`, `both`.
        :param pulumi.Input[int] sample_rate: sFlow sample rate (10 - 99999).
        :param pulumi.Input[str] scan_botnet_connections: Enable monitoring or blocking connections to Botnet servers through this interface. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] secondary_ip: Enable/disable adding a secondary IP to this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceSecondaryipArgs']]] secondaryips: Second IP address of interface. The structure of `secondaryip` block is documented below.
        :param pulumi.Input[str] security_exempt_list: Name of security-exempt-list.
        :param pulumi.Input[str] security_external_logout: URL of external authentication logout server.
        :param pulumi.Input[str] security_external_web: URL of external authentication web server.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceSecurityGroupArgs']]] security_groups: User groups that can authenticate with the captive portal. The structure of `security_groups` block is documented below.
        :param pulumi.Input[str] security_mac_auth_bypass: Enable/disable MAC authentication bypass. Valid values: `mac-auth-only`, `enable`, `disable`.
        :param pulumi.Input[str] security_mode: Turn on captive portal authentication for this interface. Valid values: `none`, `captive-portal`, `802.1X`.
        :param pulumi.Input[str] security_redirect_url: URL redirection after disclaimer/authentication.
        :param pulumi.Input[str] service_name: PPPoE service name.
        :param pulumi.Input[str] sflow_sampler: Enable/disable sFlow on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] snmp_index: Permanent SNMP Index of the interface.
        :param pulumi.Input[str] speed: Interface speed. The default setting and the options available depend on the interface hardware.
        :param pulumi.Input[int] spillover_threshold: Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
        :param pulumi.Input[str] src_check: Enable/disable source IP check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Bring the interface up or shut the interface down. Valid values: `up`, `down`.
        :param pulumi.Input[str] stp: Enable/disable STP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] stp_ha_secondary: Control STP behaviour on HA secondary. Valid values: `disable`, `enable`, `priority-adjust`.
        :param pulumi.Input[str] stpforward: Enable/disable STP forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] stpforward_mode: Configure STP forwarding mode. Valid values: `rpl-all-ext-id`, `rpl-bridge-ext-id`, `rpl-nothing`.
        :param pulumi.Input[str] subst: Enable to always send packets from this interface to a destination MAC address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] substitute_dst_mac: Destination MAC address that all packets are sent to from this interface.
        :param pulumi.Input[int] swc_first_create: Initial create for switch-controller VLANs.
        :param pulumi.Input[int] swc_vlan: Creation status for switch-controller VLANs.
        :param pulumi.Input[str] switch: Contained in switch.
        :param pulumi.Input[str] switch_controller_access_vlan: Block FortiSwitch port-to-port traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_arp_inspection: Enable/disable FortiSwitch ARP inspection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_dhcp_snooping: Switch controller DHCP snooping. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_dhcp_snooping_option82: Switch controller DHCP snooping option82. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_dhcp_snooping_verify_mac: Switch controller DHCP snooping verify MAC. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_dynamic: Integrated FortiLink settings for managed FortiSwitch.
        :param pulumi.Input[str] switch_controller_feature: Interface's purpose when assigning traffic (read only).
        :param pulumi.Input[str] switch_controller_igmp_snooping: Switch controller IGMP snooping. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_igmp_snooping_fast_leave: Switch controller IGMP snooping fast-leave. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_igmp_snooping_proxy: Switch controller IGMP snooping proxy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_iot_scanning: Enable/disable managed FortiSwitch IoT scanning. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] switch_controller_learning_limit: Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
        :param pulumi.Input[int] switch_controller_mgmt_vlan: VLAN to use for FortiLink management purposes.
        :param pulumi.Input[str] switch_controller_nac: Integrated NAC settings for managed FortiSwitch.
        :param pulumi.Input[str] switch_controller_netflow_collect: NetFlow collection and processing. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_controller_offload: Enable/disable managed FortiSwitch routing offload. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_offload_gw: Enable/disable managed FortiSwitch routing offload gateway. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_offload_ip: IP for routing offload on FortiSwitch.
        :param pulumi.Input[str] switch_controller_rspan_mode: Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_controller_source_ip: Source IP address used in FortiLink over L3 connections. Valid values: `outbound`, `fixed`.
        :param pulumi.Input[str] switch_controller_traffic_policy: Switch controller traffic policy for the VLAN.
        :param pulumi.Input[str] system_id: Define a system ID for the aggregate interface.
        :param pulumi.Input[str] system_id_type: Method in which system ID is generated. Valid values: `auto`, `user`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceTaggingArgs']]] taggings: Config object tagging. The structure of `tagging` block is documented below.
        :param pulumi.Input[int] tcp_mss: TCP maximum segment size. 0 means do not change segment size.
        :param pulumi.Input[str] trunk: Enable/disable VLAN trunk. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] trust_ip1: Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        :param pulumi.Input[str] trust_ip2: Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        :param pulumi.Input[str] trust_ip3: Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        :param pulumi.Input[str] trust_ip61: Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        :param pulumi.Input[str] trust_ip62: Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        :param pulumi.Input[str] trust_ip63: Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        :param pulumi.Input[str] type: Interface type.
        :param pulumi.Input[str] username: Username of the PPPoE account, provided by your ISP.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] vindex: Switch control interface VLAN ID.
        :param pulumi.Input[str] vlan_protocol: Ethernet protocol of VLAN. Valid values: `8021q`, `8021ad`.
        :param pulumi.Input[str] vlanforward: Enable/disable traffic forwarding between VLANs on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] vlanid: VLAN ID (1 - 4094).
        :param pulumi.Input[int] vrf: Virtual Routing Forwarding ID.
        :param pulumi.Input[str] vrrp_virtual_mac: Enable/disable use of virtual MAC for VRRP. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceVrrpArgs']]] vrrps: VRRP configuration. The structure of `vrrp` block is documented below.
        :param pulumi.Input[str] wccp: Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] weight: Default weight for static routes (if route has no weight configured).
        :param pulumi.Input[str] wins_ip: WINS server IP.
        """
        pulumi.set(__self__, "vdom", vdom)
        if ac_name is not None:
            pulumi.set(__self__, "ac_name", ac_name)
        if aggregate is not None:
            pulumi.set(__self__, "aggregate", aggregate)
        if aggregate_type is not None:
            pulumi.set(__self__, "aggregate_type", aggregate_type)
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if ap_discover is not None:
            pulumi.set(__self__, "ap_discover", ap_discover)
        if arpforward is not None:
            pulumi.set(__self__, "arpforward", arpforward)
        if auth_cert is not None:
            pulumi.set(__self__, "auth_cert", auth_cert)
        if auth_portal_addr is not None:
            pulumi.set(__self__, "auth_portal_addr", auth_portal_addr)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if auto_auth_extension_device is not None:
            pulumi.set(__self__, "auto_auth_extension_device", auto_auth_extension_device)
        if autogenerated is not None:
            pulumi.set(__self__, "autogenerated", autogenerated)
        if bandwidth_measure_time is not None:
            pulumi.set(__self__, "bandwidth_measure_time", bandwidth_measure_time)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if bfd_desired_min_tx is not None:
            pulumi.set(__self__, "bfd_desired_min_tx", bfd_desired_min_tx)
        if bfd_detect_mult is not None:
            pulumi.set(__self__, "bfd_detect_mult", bfd_detect_mult)
        if bfd_required_min_rx is not None:
            pulumi.set(__self__, "bfd_required_min_rx", bfd_required_min_rx)
        if broadcast_forticlient_discovery is not None:
            pulumi.set(__self__, "broadcast_forticlient_discovery", broadcast_forticlient_discovery)
        if broadcast_forward is not None:
            pulumi.set(__self__, "broadcast_forward", broadcast_forward)
        if captive_portal is not None:
            pulumi.set(__self__, "captive_portal", captive_portal)
        if cli_conn_status is not None:
            pulumi.set(__self__, "cli_conn_status", cli_conn_status)
        if client_options is not None:
            pulumi.set(__self__, "client_options", client_options)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if dedicated_to is not None:
            pulumi.set(__self__, "dedicated_to", dedicated_to)
        if default_purdue_level is not None:
            pulumi.set(__self__, "default_purdue_level", default_purdue_level)
        if defaultgw is not None:
            pulumi.set(__self__, "defaultgw", defaultgw)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detected_peer_mtu is not None:
            pulumi.set(__self__, "detected_peer_mtu", detected_peer_mtu)
        if detectprotocol is not None:
            pulumi.set(__self__, "detectprotocol", detectprotocol)
        if detectserver is not None:
            pulumi.set(__self__, "detectserver", detectserver)
        if device_access_list is not None:
            pulumi.set(__self__, "device_access_list", device_access_list)
        if device_identification is not None:
            pulumi.set(__self__, "device_identification", device_identification)
        if device_identification_active_scan is not None:
            pulumi.set(__self__, "device_identification_active_scan", device_identification_active_scan)
        if device_netscan is not None:
            pulumi.set(__self__, "device_netscan", device_netscan)
        if device_user_identification is not None:
            pulumi.set(__self__, "device_user_identification", device_user_identification)
        if devindex is not None:
            pulumi.set(__self__, "devindex", devindex)
        if dhcp_broadcast_flag is not None:
            pulumi.set(__self__, "dhcp_broadcast_flag", dhcp_broadcast_flag)
        if dhcp_classless_route_addition is not None:
            pulumi.set(__self__, "dhcp_classless_route_addition", dhcp_classless_route_addition)
        if dhcp_client_identifier is not None:
            pulumi.set(__self__, "dhcp_client_identifier", dhcp_client_identifier)
        if dhcp_relay_agent_option is not None:
            pulumi.set(__self__, "dhcp_relay_agent_option", dhcp_relay_agent_option)
        if dhcp_relay_circuit_id is not None:
            pulumi.set(__self__, "dhcp_relay_circuit_id", dhcp_relay_circuit_id)
        if dhcp_relay_interface is not None:
            pulumi.set(__self__, "dhcp_relay_interface", dhcp_relay_interface)
        if dhcp_relay_interface_select_method is not None:
            pulumi.set(__self__, "dhcp_relay_interface_select_method", dhcp_relay_interface_select_method)
        if dhcp_relay_ip is not None:
            pulumi.set(__self__, "dhcp_relay_ip", dhcp_relay_ip)
        if dhcp_relay_link_selection is not None:
            pulumi.set(__self__, "dhcp_relay_link_selection", dhcp_relay_link_selection)
        if dhcp_relay_request_all_server is not None:
            pulumi.set(__self__, "dhcp_relay_request_all_server", dhcp_relay_request_all_server)
        if dhcp_relay_service is not None:
            pulumi.set(__self__, "dhcp_relay_service", dhcp_relay_service)
        if dhcp_relay_source_ip is not None:
            pulumi.set(__self__, "dhcp_relay_source_ip", dhcp_relay_source_ip)
        if dhcp_relay_type is not None:
            pulumi.set(__self__, "dhcp_relay_type", dhcp_relay_type)
        if dhcp_renew_time is not None:
            pulumi.set(__self__, "dhcp_renew_time", dhcp_renew_time)
        if dhcp_smart_relay is not None:
            pulumi.set(__self__, "dhcp_smart_relay", dhcp_smart_relay)
        if dhcp_snooping_server_lists is not None:
            pulumi.set(__self__, "dhcp_snooping_server_lists", dhcp_snooping_server_lists)
        if disc_retry_timeout is not None:
            pulumi.set(__self__, "disc_retry_timeout", disc_retry_timeout)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if dns_server_override is not None:
            pulumi.set(__self__, "dns_server_override", dns_server_override)
        if dns_server_protocol is not None:
            pulumi.set(__self__, "dns_server_protocol", dns_server_protocol)
        if drop_fragment is not None:
            pulumi.set(__self__, "drop_fragment", drop_fragment)
        if drop_overlapped_fragment is not None:
            pulumi.set(__self__, "drop_overlapped_fragment", drop_overlapped_fragment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if eap_ca_cert is not None:
            pulumi.set(__self__, "eap_ca_cert", eap_ca_cert)
        if eap_identity is not None:
            pulumi.set(__self__, "eap_identity", eap_identity)
        if eap_method is not None:
            pulumi.set(__self__, "eap_method", eap_method)
        if eap_password is not None:
            pulumi.set(__self__, "eap_password", eap_password)
        if eap_supplicant is not None:
            pulumi.set(__self__, "eap_supplicant", eap_supplicant)
        if eap_user_cert is not None:
            pulumi.set(__self__, "eap_user_cert", eap_user_cert)
        if egress_shaping_profile is not None:
            pulumi.set(__self__, "egress_shaping_profile", egress_shaping_profile)
        if endpoint_compliance is not None:
            pulumi.set(__self__, "endpoint_compliance", endpoint_compliance)
        if estimated_downstream_bandwidth is not None:
            pulumi.set(__self__, "estimated_downstream_bandwidth", estimated_downstream_bandwidth)
        if estimated_upstream_bandwidth is not None:
            pulumi.set(__self__, "estimated_upstream_bandwidth", estimated_upstream_bandwidth)
        if explicit_ftp_proxy is not None:
            pulumi.set(__self__, "explicit_ftp_proxy", explicit_ftp_proxy)
        if explicit_web_proxy is not None:
            pulumi.set(__self__, "explicit_web_proxy", explicit_web_proxy)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if fail_action_on_extender is not None:
            pulumi.set(__self__, "fail_action_on_extender", fail_action_on_extender)
        if fail_alert_interfaces is not None:
            pulumi.set(__self__, "fail_alert_interfaces", fail_alert_interfaces)
        if fail_alert_method is not None:
            pulumi.set(__self__, "fail_alert_method", fail_alert_method)
        if fail_detect is not None:
            pulumi.set(__self__, "fail_detect", fail_detect)
        if fail_detect_option is not None:
            pulumi.set(__self__, "fail_detect_option", fail_detect_option)
        if fortiheartbeat is not None:
            pulumi.set(__self__, "fortiheartbeat", fortiheartbeat)
        if fortilink is not None:
            pulumi.set(__self__, "fortilink", fortilink)
        if fortilink_backup_link is not None:
            pulumi.set(__self__, "fortilink_backup_link", fortilink_backup_link)
        if fortilink_neighbor_detect is not None:
            pulumi.set(__self__, "fortilink_neighbor_detect", fortilink_neighbor_detect)
        if fortilink_split_interface is not None:
            pulumi.set(__self__, "fortilink_split_interface", fortilink_split_interface)
        if fortilink_stacking is not None:
            pulumi.set(__self__, "fortilink_stacking", fortilink_stacking)
        if forward_domain is not None:
            pulumi.set(__self__, "forward_domain", forward_domain)
        if forward_error_correction is not None:
            pulumi.set(__self__, "forward_error_correction", forward_error_correction)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gwdetect is not None:
            pulumi.set(__self__, "gwdetect", gwdetect)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if icmp_accept_redirect is not None:
            pulumi.set(__self__, "icmp_accept_redirect", icmp_accept_redirect)
        if icmp_send_redirect is not None:
            pulumi.set(__self__, "icmp_send_redirect", icmp_send_redirect)
        if ident_accept is not None:
            pulumi.set(__self__, "ident_accept", ident_accept)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if ike_saml_server is not None:
            pulumi.set(__self__, "ike_saml_server", ike_saml_server)
        if inbandwidth is not None:
            pulumi.set(__self__, "inbandwidth", inbandwidth)
        if ingress_shaping_profile is not None:
            pulumi.set(__self__, "ingress_shaping_profile", ingress_shaping_profile)
        if ingress_spillover_threshold is not None:
            pulumi.set(__self__, "ingress_spillover_threshold", ingress_spillover_threshold)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if internal is not None:
            pulumi.set(__self__, "internal", internal)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip_managed_by_fortiipam is not None:
            pulumi.set(__self__, "ip_managed_by_fortiipam", ip_managed_by_fortiipam)
        if ipmac is not None:
            pulumi.set(__self__, "ipmac", ipmac)
        if ips_sniffer_mode is not None:
            pulumi.set(__self__, "ips_sniffer_mode", ips_sniffer_mode)
        if ipunnumbered is not None:
            pulumi.set(__self__, "ipunnumbered", ipunnumbered)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if l2forward is not None:
            pulumi.set(__self__, "l2forward", l2forward)
        if lacp_ha_secondary is not None:
            pulumi.set(__self__, "lacp_ha_secondary", lacp_ha_secondary)
        if lacp_ha_slave is not None:
            pulumi.set(__self__, "lacp_ha_slave", lacp_ha_slave)
        if lacp_mode is not None:
            pulumi.set(__self__, "lacp_mode", lacp_mode)
        if lacp_speed is not None:
            pulumi.set(__self__, "lacp_speed", lacp_speed)
        if lcp_echo_interval is not None:
            pulumi.set(__self__, "lcp_echo_interval", lcp_echo_interval)
        if lcp_max_echo_fails is not None:
            pulumi.set(__self__, "lcp_max_echo_fails", lcp_max_echo_fails)
        if link_up_delay is not None:
            pulumi.set(__self__, "link_up_delay", link_up_delay)
        if lldp_network_policy is not None:
            pulumi.set(__self__, "lldp_network_policy", lldp_network_policy)
        if lldp_reception is not None:
            pulumi.set(__self__, "lldp_reception", lldp_reception)
        if lldp_transmission is not None:
            pulumi.set(__self__, "lldp_transmission", lldp_transmission)
        if macaddr is not None:
            pulumi.set(__self__, "macaddr", macaddr)
        if managed_devices is not None:
            pulumi.set(__self__, "managed_devices", managed_devices)
        if managed_subnetwork_size is not None:
            pulumi.set(__self__, "managed_subnetwork_size", managed_subnetwork_size)
        if management_ip is not None:
            pulumi.set(__self__, "management_ip", management_ip)
        if measured_downstream_bandwidth is not None:
            pulumi.set(__self__, "measured_downstream_bandwidth", measured_downstream_bandwidth)
        if measured_upstream_bandwidth is not None:
            pulumi.set(__self__, "measured_upstream_bandwidth", measured_upstream_bandwidth)
        if mediatype is not None:
            pulumi.set(__self__, "mediatype", mediatype)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if min_links is not None:
            pulumi.set(__self__, "min_links", min_links)
        if min_links_down is not None:
            pulumi.set(__self__, "min_links_down", min_links_down)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if monitor_bandwidth is not None:
            pulumi.set(__self__, "monitor_bandwidth", monitor_bandwidth)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_override is not None:
            pulumi.set(__self__, "mtu_override", mtu_override)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ndiscforward is not None:
            pulumi.set(__self__, "ndiscforward", ndiscforward)
        if netbios_forward is not None:
            pulumi.set(__self__, "netbios_forward", netbios_forward)
        if netflow_sampler is not None:
            pulumi.set(__self__, "netflow_sampler", netflow_sampler)
        if outbandwidth is not None:
            pulumi.set(__self__, "outbandwidth", outbandwidth)
        if padt_retry_timeout is not None:
            pulumi.set(__self__, "padt_retry_timeout", padt_retry_timeout)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ping_serv_status is not None:
            pulumi.set(__self__, "ping_serv_status", ping_serv_status)
        if polling_interval is not None:
            pulumi.set(__self__, "polling_interval", polling_interval)
        if pppoe_unnumbered_negotiate is not None:
            pulumi.set(__self__, "pppoe_unnumbered_negotiate", pppoe_unnumbered_negotiate)
        if pptp_auth_type is not None:
            pulumi.set(__self__, "pptp_auth_type", pptp_auth_type)
        if pptp_client is not None:
            pulumi.set(__self__, "pptp_client", pptp_client)
        if pptp_password is not None:
            pulumi.set(__self__, "pptp_password", pptp_password)
        if pptp_server_ip is not None:
            pulumi.set(__self__, "pptp_server_ip", pptp_server_ip)
        if pptp_timeout is not None:
            pulumi.set(__self__, "pptp_timeout", pptp_timeout)
        if pptp_user is not None:
            pulumi.set(__self__, "pptp_user", pptp_user)
        if preserve_session_route is not None:
            pulumi.set(__self__, "preserve_session_route", preserve_session_route)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_override is not None:
            pulumi.set(__self__, "priority_override", priority_override)
        if proxy_captive_portal is not None:
            pulumi.set(__self__, "proxy_captive_portal", proxy_captive_portal)
        if reachable_time is not None:
            pulumi.set(__self__, "reachable_time", reachable_time)
        if redundant_interface is not None:
            pulumi.set(__self__, "redundant_interface", redundant_interface)
        if remote_ip is not None:
            pulumi.set(__self__, "remote_ip", remote_ip)
        if replacemsg_override_group is not None:
            pulumi.set(__self__, "replacemsg_override_group", replacemsg_override_group)
        if ring_rx is not None:
            pulumi.set(__self__, "ring_rx", ring_rx)
        if ring_tx is not None:
            pulumi.set(__self__, "ring_tx", ring_tx)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if sample_direction is not None:
            pulumi.set(__self__, "sample_direction", sample_direction)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if secondary_ip is not None:
            pulumi.set(__self__, "secondary_ip", secondary_ip)
        if secondaryips is not None:
            pulumi.set(__self__, "secondaryips", secondaryips)
        if security_exempt_list is not None:
            pulumi.set(__self__, "security_exempt_list", security_exempt_list)
        if security_external_logout is not None:
            pulumi.set(__self__, "security_external_logout", security_external_logout)
        if security_external_web is not None:
            pulumi.set(__self__, "security_external_web", security_external_web)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if security_mac_auth_bypass is not None:
            pulumi.set(__self__, "security_mac_auth_bypass", security_mac_auth_bypass)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if security_redirect_url is not None:
            pulumi.set(__self__, "security_redirect_url", security_redirect_url)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if sflow_sampler is not None:
            pulumi.set(__self__, "sflow_sampler", sflow_sampler)
        if snmp_index is not None:
            pulumi.set(__self__, "snmp_index", snmp_index)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if spillover_threshold is not None:
            pulumi.set(__self__, "spillover_threshold", spillover_threshold)
        if src_check is not None:
            pulumi.set(__self__, "src_check", src_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stp is not None:
            pulumi.set(__self__, "stp", stp)
        if stp_ha_secondary is not None:
            pulumi.set(__self__, "stp_ha_secondary", stp_ha_secondary)
        if stpforward is not None:
            pulumi.set(__self__, "stpforward", stpforward)
        if stpforward_mode is not None:
            pulumi.set(__self__, "stpforward_mode", stpforward_mode)
        if subst is not None:
            pulumi.set(__self__, "subst", subst)
        if substitute_dst_mac is not None:
            pulumi.set(__self__, "substitute_dst_mac", substitute_dst_mac)
        if swc_first_create is not None:
            pulumi.set(__self__, "swc_first_create", swc_first_create)
        if swc_vlan is not None:
            pulumi.set(__self__, "swc_vlan", swc_vlan)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if switch_controller_access_vlan is not None:
            pulumi.set(__self__, "switch_controller_access_vlan", switch_controller_access_vlan)
        if switch_controller_arp_inspection is not None:
            pulumi.set(__self__, "switch_controller_arp_inspection", switch_controller_arp_inspection)
        if switch_controller_dhcp_snooping is not None:
            pulumi.set(__self__, "switch_controller_dhcp_snooping", switch_controller_dhcp_snooping)
        if switch_controller_dhcp_snooping_option82 is not None:
            pulumi.set(__self__, "switch_controller_dhcp_snooping_option82", switch_controller_dhcp_snooping_option82)
        if switch_controller_dhcp_snooping_verify_mac is not None:
            pulumi.set(__self__, "switch_controller_dhcp_snooping_verify_mac", switch_controller_dhcp_snooping_verify_mac)
        if switch_controller_dynamic is not None:
            pulumi.set(__self__, "switch_controller_dynamic", switch_controller_dynamic)
        if switch_controller_feature is not None:
            pulumi.set(__self__, "switch_controller_feature", switch_controller_feature)
        if switch_controller_igmp_snooping is not None:
            pulumi.set(__self__, "switch_controller_igmp_snooping", switch_controller_igmp_snooping)
        if switch_controller_igmp_snooping_fast_leave is not None:
            pulumi.set(__self__, "switch_controller_igmp_snooping_fast_leave", switch_controller_igmp_snooping_fast_leave)
        if switch_controller_igmp_snooping_proxy is not None:
            pulumi.set(__self__, "switch_controller_igmp_snooping_proxy", switch_controller_igmp_snooping_proxy)
        if switch_controller_iot_scanning is not None:
            pulumi.set(__self__, "switch_controller_iot_scanning", switch_controller_iot_scanning)
        if switch_controller_learning_limit is not None:
            pulumi.set(__self__, "switch_controller_learning_limit", switch_controller_learning_limit)
        if switch_controller_mgmt_vlan is not None:
            pulumi.set(__self__, "switch_controller_mgmt_vlan", switch_controller_mgmt_vlan)
        if switch_controller_nac is not None:
            pulumi.set(__self__, "switch_controller_nac", switch_controller_nac)
        if switch_controller_netflow_collect is not None:
            pulumi.set(__self__, "switch_controller_netflow_collect", switch_controller_netflow_collect)
        if switch_controller_offload is not None:
            pulumi.set(__self__, "switch_controller_offload", switch_controller_offload)
        if switch_controller_offload_gw is not None:
            pulumi.set(__self__, "switch_controller_offload_gw", switch_controller_offload_gw)
        if switch_controller_offload_ip is not None:
            pulumi.set(__self__, "switch_controller_offload_ip", switch_controller_offload_ip)
        if switch_controller_rspan_mode is not None:
            pulumi.set(__self__, "switch_controller_rspan_mode", switch_controller_rspan_mode)
        if switch_controller_source_ip is not None:
            pulumi.set(__self__, "switch_controller_source_ip", switch_controller_source_ip)
        if switch_controller_traffic_policy is not None:
            pulumi.set(__self__, "switch_controller_traffic_policy", switch_controller_traffic_policy)
        if system_id is not None:
            pulumi.set(__self__, "system_id", system_id)
        if system_id_type is not None:
            pulumi.set(__self__, "system_id_type", system_id_type)
        if taggings is not None:
            pulumi.set(__self__, "taggings", taggings)
        if tcp_mss is not None:
            pulumi.set(__self__, "tcp_mss", tcp_mss)
        if trunk is not None:
            pulumi.set(__self__, "trunk", trunk)
        if trust_ip1 is not None:
            pulumi.set(__self__, "trust_ip1", trust_ip1)
        if trust_ip2 is not None:
            pulumi.set(__self__, "trust_ip2", trust_ip2)
        if trust_ip3 is not None:
            pulumi.set(__self__, "trust_ip3", trust_ip3)
        if trust_ip61 is not None:
            pulumi.set(__self__, "trust_ip61", trust_ip61)
        if trust_ip62 is not None:
            pulumi.set(__self__, "trust_ip62", trust_ip62)
        if trust_ip63 is not None:
            pulumi.set(__self__, "trust_ip63", trust_ip63)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vindex is not None:
            pulumi.set(__self__, "vindex", vindex)
        if vlan_protocol is not None:
            pulumi.set(__self__, "vlan_protocol", vlan_protocol)
        if vlanforward is not None:
            pulumi.set(__self__, "vlanforward", vlanforward)
        if vlanid is not None:
            pulumi.set(__self__, "vlanid", vlanid)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)
        if vrrp_virtual_mac is not None:
            pulumi.set(__self__, "vrrp_virtual_mac", vrrp_virtual_mac)
        if vrrps is not None:
            pulumi.set(__self__, "vrrps", vrrps)
        if wccp is not None:
            pulumi.set(__self__, "wccp", wccp)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if wins_ip is not None:
            pulumi.set(__self__, "wins_ip", wins_ip)

    @property
    @pulumi.getter
    def vdom(self) -> pulumi.Input[str]:
        """
        Interface is in this virtual domain (VDOM).
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: pulumi.Input[str]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter(name="acName")
    def ac_name(self) -> Optional[pulumi.Input[str]]:
        """
        PPPoE server name.
        """
        return pulumi.get(self, "ac_name")

    @ac_name.setter
    def ac_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ac_name", value)

    @property
    @pulumi.getter
    def aggregate(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregate interface.
        """
        return pulumi.get(self, "aggregate")

    @aggregate.setter
    def aggregate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregate", value)

    @property
    @pulumi.getter(name="aggregateType")
    def aggregate_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of aggregation. Valid values: `physical`, `vxlan`.
        """
        return pulumi.get(self, "aggregate_type")

    @aggregate_type.setter
    def aggregate_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregate_type", value)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Frame distribution algorithm.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Alias will be displayed with the interface name to make it easier to distinguish.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        """
        Permitted types of management access to this interface.
        """
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter(name="apDiscover")
    def ap_discover(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic registration of unknown FortiAP devices. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_discover")

    @ap_discover.setter
    def ap_discover(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_discover", value)

    @property
    @pulumi.getter
    def arpforward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ARP forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "arpforward")

    @arpforward.setter
    def arpforward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arpforward", value)

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> Optional[pulumi.Input[str]]:
        """
        HTTPS server certificate.
        """
        return pulumi.get(self, "auth_cert")

    @auth_cert.setter
    def auth_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_cert", value)

    @property
    @pulumi.getter(name="authPortalAddr")
    def auth_portal_addr(self) -> Optional[pulumi.Input[str]]:
        """
        Address of captive portal.
        """
        return pulumi.get(self, "auth_portal_addr")

    @auth_portal_addr.setter
    def auth_portal_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_portal_addr", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="autoAuthExtensionDevice")
    def auto_auth_extension_device(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic authorization of dedicated Fortinet extension device on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_auth_extension_device")

    @auto_auth_extension_device.setter
    def auto_auth_extension_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_auth_extension_device", value)

    @property
    @pulumi.getter
    def autogenerated(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates whether the interface is automatically created by FortiGate, for example, created during the VPN creation process. If it is, set it to "auto", else keep it empty.
        """
        return pulumi.get(self, "autogenerated")

    @autogenerated.setter
    def autogenerated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autogenerated", value)

    @property
    @pulumi.getter(name="bandwidthMeasureTime")
    def bandwidth_measure_time(self) -> Optional[pulumi.Input[int]]:
        """
        Bandwidth measure time
        """
        return pulumi.get(self, "bandwidth_measure_time")

    @bandwidth_measure_time.setter
    def bandwidth_measure_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_measure_time", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Bidirectional Forwarding Detection (BFD) settings. Valid values: `global`, `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="bfdDesiredMinTx")
    def bfd_desired_min_tx(self) -> Optional[pulumi.Input[int]]:
        """
        BFD desired minimal transmit interval.
        """
        return pulumi.get(self, "bfd_desired_min_tx")

    @bfd_desired_min_tx.setter
    def bfd_desired_min_tx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_desired_min_tx", value)

    @property
    @pulumi.getter(name="bfdDetectMult")
    def bfd_detect_mult(self) -> Optional[pulumi.Input[int]]:
        """
        BFD detection multiplier.
        """
        return pulumi.get(self, "bfd_detect_mult")

    @bfd_detect_mult.setter
    def bfd_detect_mult(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_detect_mult", value)

    @property
    @pulumi.getter(name="bfdRequiredMinRx")
    def bfd_required_min_rx(self) -> Optional[pulumi.Input[int]]:
        """
        BFD required minimal receive interval.
        """
        return pulumi.get(self, "bfd_required_min_rx")

    @bfd_required_min_rx.setter
    def bfd_required_min_rx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_required_min_rx", value)

    @property
    @pulumi.getter(name="broadcastForticlientDiscovery")
    def broadcast_forticlient_discovery(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable broadcasting FortiClient discovery messages. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "broadcast_forticlient_discovery")

    @broadcast_forticlient_discovery.setter
    def broadcast_forticlient_discovery(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadcast_forticlient_discovery", value)

    @property
    @pulumi.getter(name="broadcastForward")
    def broadcast_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable broadcast forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "broadcast_forward")

    @broadcast_forward.setter
    def broadcast_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadcast_forward", value)

    @property
    @pulumi.getter(name="captivePortal")
    def captive_portal(self) -> Optional[pulumi.Input[int]]:
        """
        Enable/disable captive portal.
        """
        return pulumi.get(self, "captive_portal")

    @captive_portal.setter
    def captive_portal(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "captive_portal", value)

    @property
    @pulumi.getter(name="cliConnStatus")
    def cli_conn_status(self) -> Optional[pulumi.Input[int]]:
        """
        CLI connection status.
        """
        return pulumi.get(self, "cli_conn_status")

    @cli_conn_status.setter
    def cli_conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cli_conn_status", value)

    @property
    @pulumi.getter(name="clientOptions")
    def client_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceClientOptionArgs']]]]:
        """
        DHCP client options. The structure of `client_options` block is documented below.
        """
        return pulumi.get(self, "client_options")

    @client_options.setter
    def client_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceClientOptionArgs']]]]):
        pulumi.set(self, "client_options", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[int]]:
        """
        Color of icon on the GUI.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="dedicatedTo")
    def dedicated_to(self) -> Optional[pulumi.Input[str]]:
        """
        Configure interface for single purpose. Valid values: `none`, `management`.
        """
        return pulumi.get(self, "dedicated_to")

    @dedicated_to.setter
    def dedicated_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dedicated_to", value)

    @property
    @pulumi.getter(name="defaultPurdueLevel")
    def default_purdue_level(self) -> Optional[pulumi.Input[str]]:
        """
        default purdue level of device detected on this interface. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
        """
        return pulumi.get(self, "default_purdue_level")

    @default_purdue_level.setter
    def default_purdue_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_purdue_level", value)

    @property
    @pulumi.getter
    def defaultgw(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to get the gateway IP from the DHCP or PPPoE server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "defaultgw")

    @defaultgw.setter
    def defaultgw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "defaultgw", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="detectedPeerMtu")
    def detected_peer_mtu(self) -> Optional[pulumi.Input[int]]:
        """
        MTU of detected peer (0 - 4294967295).
        """
        return pulumi.get(self, "detected_peer_mtu")

    @detected_peer_mtu.setter
    def detected_peer_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "detected_peer_mtu", value)

    @property
    @pulumi.getter
    def detectprotocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
        """
        return pulumi.get(self, "detectprotocol")

    @detectprotocol.setter
    def detectprotocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detectprotocol", value)

    @property
    @pulumi.getter
    def detectserver(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway's ping server for this IP.
        """
        return pulumi.get(self, "detectserver")

    @detectserver.setter
    def detectserver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detectserver", value)

    @property
    @pulumi.getter(name="deviceAccessList")
    def device_access_list(self) -> Optional[pulumi.Input[str]]:
        """
        Device access list.
        """
        return pulumi.get(self, "device_access_list")

    @device_access_list.setter
    def device_access_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_access_list", value)

    @property
    @pulumi.getter(name="deviceIdentification")
    def device_identification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable passively gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "device_identification")

    @device_identification.setter
    def device_identification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_identification", value)

    @property
    @pulumi.getter(name="deviceIdentificationActiveScan")
    def device_identification_active_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable active gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "device_identification_active_scan")

    @device_identification_active_scan.setter
    def device_identification_active_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_identification_active_scan", value)

    @property
    @pulumi.getter(name="deviceNetscan")
    def device_netscan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable inclusion of devices detected on this interface in network vulnerability scans. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "device_netscan")

    @device_netscan.setter
    def device_netscan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_netscan", value)

    @property
    @pulumi.getter(name="deviceUserIdentification")
    def device_user_identification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable passive gathering of user identity information about users on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "device_user_identification")

    @device_user_identification.setter
    def device_user_identification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_user_identification", value)

    @property
    @pulumi.getter
    def devindex(self) -> Optional[pulumi.Input[int]]:
        """
        Device Index.
        """
        return pulumi.get(self, "devindex")

    @devindex.setter
    def devindex(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "devindex", value)

    @property
    @pulumi.getter(name="dhcpBroadcastFlag")
    def dhcp_broadcast_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp_broadcast_flag")

    @dhcp_broadcast_flag.setter
    def dhcp_broadcast_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_broadcast_flag", value)

    @property
    @pulumi.getter(name="dhcpClasslessRouteAddition")
    def dhcp_classless_route_addition(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable addition of classless static routes retrieved from DHCP server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_classless_route_addition")

    @dhcp_classless_route_addition.setter
    def dhcp_classless_route_addition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_classless_route_addition", value)

    @property
    @pulumi.getter(name="dhcpClientIdentifier")
    def dhcp_client_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP client identifier.
        """
        return pulumi.get(self, "dhcp_client_identifier")

    @dhcp_client_identifier.setter
    def dhcp_client_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_client_identifier", value)

    @property
    @pulumi.getter(name="dhcpRelayAgentOption")
    def dhcp_relay_agent_option(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DHCP relay agent option. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_relay_agent_option")

    @dhcp_relay_agent_option.setter
    def dhcp_relay_agent_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_agent_option", value)

    @property
    @pulumi.getter(name="dhcpRelayCircuitId")
    def dhcp_relay_circuit_id(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP relay circuit ID.
        """
        return pulumi.get(self, "dhcp_relay_circuit_id")

    @dhcp_relay_circuit_id.setter
    def dhcp_relay_circuit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_circuit_id", value)

    @property
    @pulumi.getter(name="dhcpRelayInterface")
    def dhcp_relay_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "dhcp_relay_interface")

    @dhcp_relay_interface.setter
    def dhcp_relay_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_interface", value)

    @property
    @pulumi.getter(name="dhcpRelayInterfaceSelectMethod")
    def dhcp_relay_interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "dhcp_relay_interface_select_method")

    @dhcp_relay_interface_select_method.setter
    def dhcp_relay_interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_interface_select_method", value)

    @property
    @pulumi.getter(name="dhcpRelayIp")
    def dhcp_relay_ip(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP relay IP address.
        """
        return pulumi.get(self, "dhcp_relay_ip")

    @dhcp_relay_ip.setter
    def dhcp_relay_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_ip", value)

    @property
    @pulumi.getter(name="dhcpRelayLinkSelection")
    def dhcp_relay_link_selection(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP relay link selection.
        """
        return pulumi.get(self, "dhcp_relay_link_selection")

    @dhcp_relay_link_selection.setter
    def dhcp_relay_link_selection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_link_selection", value)

    @property
    @pulumi.getter(name="dhcpRelayRequestAllServer")
    def dhcp_relay_request_all_server(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending DHCP request to all servers. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp_relay_request_all_server")

    @dhcp_relay_request_all_server.setter
    def dhcp_relay_request_all_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_request_all_server", value)

    @property
    @pulumi.getter(name="dhcpRelayService")
    def dhcp_relay_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing this interface to act as a DHCP relay. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp_relay_service")

    @dhcp_relay_service.setter
    def dhcp_relay_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_service", value)

    @property
    @pulumi.getter(name="dhcpRelaySourceIp")
    def dhcp_relay_source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address used by the DHCP relay as its source IP.
        """
        return pulumi.get(self, "dhcp_relay_source_ip")

    @dhcp_relay_source_ip.setter
    def dhcp_relay_source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_source_ip", value)

    @property
    @pulumi.getter(name="dhcpRelayType")
    def dhcp_relay_type(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP relay type (regular or IPsec). Valid values: `regular`, `ipsec`.
        """
        return pulumi.get(self, "dhcp_relay_type")

    @dhcp_relay_type.setter
    def dhcp_relay_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_type", value)

    @property
    @pulumi.getter(name="dhcpRenewTime")
    def dhcp_renew_time(self) -> Optional[pulumi.Input[int]]:
        """
        DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
        """
        return pulumi.get(self, "dhcp_renew_time")

    @dhcp_renew_time.setter
    def dhcp_renew_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp_renew_time", value)

    @property
    @pulumi.getter(name="dhcpSmartRelay")
    def dhcp_smart_relay(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DHCP smart relay. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp_smart_relay")

    @dhcp_smart_relay.setter
    def dhcp_smart_relay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_smart_relay", value)

    @property
    @pulumi.getter(name="dhcpSnoopingServerLists")
    def dhcp_snooping_server_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceDhcpSnoopingServerListArgs']]]]:
        """
        Configure DHCP server access list. The structure of `dhcp_snooping_server_list` block is documented below.
        """
        return pulumi.get(self, "dhcp_snooping_server_lists")

    @dhcp_snooping_server_lists.setter
    def dhcp_snooping_server_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceDhcpSnoopingServerListArgs']]]]):
        pulumi.set(self, "dhcp_snooping_server_lists", value)

    @property
    @pulumi.getter(name="discRetryTimeout")
    def disc_retry_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
        """
        return pulumi.get(self, "disc_retry_timeout")

    @disc_retry_timeout.setter
    def disc_retry_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disc_retry_timeout", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
        """
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter(name="dnsServerOverride")
    def dns_server_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use DNS acquired by DHCP or PPPoE. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dns_server_override")

    @dns_server_override.setter
    def dns_server_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server_override", value)

    @property
    @pulumi.getter(name="dnsServerProtocol")
    def dns_server_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        DNS transport protocols. Valid values: `cleartext`, `dot`, `doh`.
        """
        return pulumi.get(self, "dns_server_protocol")

    @dns_server_protocol.setter
    def dns_server_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server_protocol", value)

    @property
    @pulumi.getter(name="dropFragment")
    def drop_fragment(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable drop fragment packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "drop_fragment")

    @drop_fragment.setter
    def drop_fragment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_fragment", value)

    @property
    @pulumi.getter(name="dropOverlappedFragment")
    def drop_overlapped_fragment(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable drop overlapped fragment packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "drop_overlapped_fragment")

    @drop_overlapped_fragment.setter
    def drop_overlapped_fragment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_overlapped_fragment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="eapCaCert")
    def eap_ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        EAP CA certificate name.
        """
        return pulumi.get(self, "eap_ca_cert")

    @eap_ca_cert.setter
    def eap_ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_ca_cert", value)

    @property
    @pulumi.getter(name="eapIdentity")
    def eap_identity(self) -> Optional[pulumi.Input[str]]:
        """
        EAP identity.
        """
        return pulumi.get(self, "eap_identity")

    @eap_identity.setter
    def eap_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_identity", value)

    @property
    @pulumi.getter(name="eapMethod")
    def eap_method(self) -> Optional[pulumi.Input[str]]:
        """
        EAP method. Valid values: `tls`, `peap`.
        """
        return pulumi.get(self, "eap_method")

    @eap_method.setter
    def eap_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_method", value)

    @property
    @pulumi.getter(name="eapPassword")
    def eap_password(self) -> Optional[pulumi.Input[str]]:
        """
        EAP password.
        """
        return pulumi.get(self, "eap_password")

    @eap_password.setter
    def eap_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_password", value)

    @property
    @pulumi.getter(name="eapSupplicant")
    def eap_supplicant(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable EAP-Supplicant. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eap_supplicant")

    @eap_supplicant.setter
    def eap_supplicant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_supplicant", value)

    @property
    @pulumi.getter(name="eapUserCert")
    def eap_user_cert(self) -> Optional[pulumi.Input[str]]:
        """
        EAP user certificate name.
        """
        return pulumi.get(self, "eap_user_cert")

    @eap_user_cert.setter
    def eap_user_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_user_cert", value)

    @property
    @pulumi.getter(name="egressShapingProfile")
    def egress_shaping_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Outgoing traffic shaping profile.
        """
        return pulumi.get(self, "egress_shaping_profile")

    @egress_shaping_profile.setter
    def egress_shaping_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_shaping_profile", value)

    @property
    @pulumi.getter(name="endpointCompliance")
    def endpoint_compliance(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable endpoint compliance enforcement. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "endpoint_compliance")

    @endpoint_compliance.setter
    def endpoint_compliance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_compliance", value)

    @property
    @pulumi.getter(name="estimatedDownstreamBandwidth")
    def estimated_downstream_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
        """
        return pulumi.get(self, "estimated_downstream_bandwidth")

    @estimated_downstream_bandwidth.setter
    def estimated_downstream_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "estimated_downstream_bandwidth", value)

    @property
    @pulumi.getter(name="estimatedUpstreamBandwidth")
    def estimated_upstream_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
        """
        return pulumi.get(self, "estimated_upstream_bandwidth")

    @estimated_upstream_bandwidth.setter
    def estimated_upstream_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "estimated_upstream_bandwidth", value)

    @property
    @pulumi.getter(name="explicitFtpProxy")
    def explicit_ftp_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the explicit FTP proxy on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "explicit_ftp_proxy")

    @explicit_ftp_proxy.setter
    def explicit_ftp_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "explicit_ftp_proxy", value)

    @property
    @pulumi.getter(name="explicitWebProxy")
    def explicit_web_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the explicit web proxy on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "explicit_web_proxy")

    @explicit_web_proxy.setter
    def explicit_web_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "explicit_web_proxy", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter(name="failActionOnExtender")
    def fail_action_on_extender(self) -> Optional[pulumi.Input[str]]:
        """
        Action on extender when interface fail . Valid values: `soft-restart`, `hard-restart`, `reboot`.
        """
        return pulumi.get(self, "fail_action_on_extender")

    @fail_action_on_extender.setter
    def fail_action_on_extender(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_action_on_extender", value)

    @property
    @pulumi.getter(name="failAlertInterfaces")
    def fail_alert_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceFailAlertInterfaceArgs']]]]:
        """
        Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `fail_alert_interfaces` block is documented below.
        """
        return pulumi.get(self, "fail_alert_interfaces")

    @fail_alert_interfaces.setter
    def fail_alert_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceFailAlertInterfaceArgs']]]]):
        pulumi.set(self, "fail_alert_interfaces", value)

    @property
    @pulumi.getter(name="failAlertMethod")
    def fail_alert_method(self) -> Optional[pulumi.Input[str]]:
        """
        Select link-failed-signal or link-down method to alert about a failed link. Valid values: `link-failed-signal`, `link-down`.
        """
        return pulumi.get(self, "fail_alert_method")

    @fail_alert_method.setter
    def fail_alert_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_alert_method", value)

    @property
    @pulumi.getter(name="failDetect")
    def fail_detect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable fail detection features for this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fail_detect")

    @fail_detect.setter
    def fail_detect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_detect", value)

    @property
    @pulumi.getter(name="failDetectOption")
    def fail_detect_option(self) -> Optional[pulumi.Input[str]]:
        """
        Options for detecting that this interface has failed. Valid values: `detectserver`, `link-down`.
        """
        return pulumi.get(self, "fail_detect_option")

    @fail_detect_option.setter
    def fail_detect_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_detect_option", value)

    @property
    @pulumi.getter
    def fortiheartbeat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiHeartBeat (FortiTelemetry on GUI). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortiheartbeat")

    @fortiheartbeat.setter
    def fortiheartbeat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiheartbeat", value)

    @property
    @pulumi.getter
    def fortilink(self) -> Optional[pulumi.Input[str]]:
        """
        Enable FortiLink to dedicate this interface to manage other Fortinet devices. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortilink")

    @fortilink.setter
    def fortilink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortilink", value)

    @property
    @pulumi.getter(name="fortilinkBackupLink")
    def fortilink_backup_link(self) -> Optional[pulumi.Input[int]]:
        """
        fortilink split interface backup link.
        """
        return pulumi.get(self, "fortilink_backup_link")

    @fortilink_backup_link.setter
    def fortilink_backup_link(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortilink_backup_link", value)

    @property
    @pulumi.getter(name="fortilinkNeighborDetect")
    def fortilink_neighbor_detect(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol for FortiGate neighbor discovery. Valid values: `lldp`, `fortilink`.
        """
        return pulumi.get(self, "fortilink_neighbor_detect")

    @fortilink_neighbor_detect.setter
    def fortilink_neighbor_detect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortilink_neighbor_detect", value)

    @property
    @pulumi.getter(name="fortilinkSplitInterface")
    def fortilink_split_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortilink_split_interface")

    @fortilink_split_interface.setter
    def fortilink_split_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortilink_split_interface", value)

    @property
    @pulumi.getter(name="fortilinkStacking")
    def fortilink_stacking(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiLink switch-stacking on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortilink_stacking")

    @fortilink_stacking.setter
    def fortilink_stacking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortilink_stacking", value)

    @property
    @pulumi.getter(name="forwardDomain")
    def forward_domain(self) -> Optional[pulumi.Input[int]]:
        """
        Transparent mode forward domain.
        """
        return pulumi.get(self, "forward_domain")

    @forward_domain.setter
    def forward_domain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "forward_domain", value)

    @property
    @pulumi.getter(name="forwardErrorCorrection")
    def forward_error_correction(self) -> Optional[pulumi.Input[str]]:
        """
        Configure forward error correction (FEC). Valid values: `none`, `disable`, `cl91-rs-fec`, `cl74-fc-fec`.
        """
        return pulumi.get(self, "forward_error_correction")

    @forward_error_correction.setter
    def forward_error_correction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_error_correction", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def gwdetect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gwdetect")

    @gwdetect.setter
    def gwdetect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gwdetect", value)

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[pulumi.Input[int]]:
        """
        HA election priority for the PING server.
        """
        return pulumi.get(self, "ha_priority")

    @ha_priority.setter
    def ha_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ha_priority", value)

    @property
    @pulumi.getter(name="icmpAcceptRedirect")
    def icmp_accept_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ICMP accept redirect. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "icmp_accept_redirect")

    @icmp_accept_redirect.setter
    def icmp_accept_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icmp_accept_redirect", value)

    @property
    @pulumi.getter(name="icmpSendRedirect")
    def icmp_send_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ICMP send redirect. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "icmp_send_redirect")

    @icmp_send_redirect.setter
    def icmp_send_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icmp_send_redirect", value)

    @property
    @pulumi.getter(name="identAccept")
    def ident_accept(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable authentication for this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ident_accept")

    @ident_accept.setter
    def ident_accept(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ident_accept", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
        """
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter(name="ikeSamlServer")
    def ike_saml_server(self) -> Optional[pulumi.Input[str]]:
        """
        Configure IKE authentication SAML server.
        """
        return pulumi.get(self, "ike_saml_server")

    @ike_saml_server.setter
    def ike_saml_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_saml_server", value)

    @property
    @pulumi.getter
    def inbandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
        """
        return pulumi.get(self, "inbandwidth")

    @inbandwidth.setter
    def inbandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "inbandwidth", value)

    @property
    @pulumi.getter(name="ingressShapingProfile")
    def ingress_shaping_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Incoming traffic shaping profile.
        """
        return pulumi.get(self, "ingress_shaping_profile")

    @ingress_shaping_profile.setter
    def ingress_shaping_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ingress_shaping_profile", value)

    @property
    @pulumi.getter(name="ingressSpilloverThreshold")
    def ingress_spillover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Ingress Spillover threshold (0 - 16776000 kbps).
        """
        return pulumi.get(self, "ingress_spillover_threshold")

    @ingress_spillover_threshold.setter
    def ingress_spillover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ingress_spillover_threshold", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def internal(self) -> Optional[pulumi.Input[int]]:
        """
        Implicitly created.
        """
        return pulumi.get(self, "internal")

    @internal.setter
    def internal(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internal", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Interface IPv4 address and subnet mask, syntax: X.X.X.X/24.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="ipManagedByFortiipam")
    def ip_managed_by_fortiipam(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic IP address assignment of this interface by FortiIPAM.
        """
        return pulumi.get(self, "ip_managed_by_fortiipam")

    @ip_managed_by_fortiipam.setter
    def ip_managed_by_fortiipam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_managed_by_fortiipam", value)

    @property
    @pulumi.getter
    def ipmac(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IP/MAC binding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipmac")

    @ipmac.setter
    def ipmac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipmac", value)

    @property
    @pulumi.getter(name="ipsSnifferMode")
    def ips_sniffer_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the use of this interface as a one-armed sniffer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_sniffer_mode")

    @ips_sniffer_mode.setter
    def ips_sniffer_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sniffer_mode", value)

    @property
    @pulumi.getter
    def ipunnumbered(self) -> Optional[pulumi.Input[str]]:
        """
        Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
        """
        return pulumi.get(self, "ipunnumbered")

    @ipunnumbered.setter
    def ipunnumbered(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipunnumbered", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input['InterfaceIpv6Args']]:
        """
        IPv6 of interface. The structure of `ipv6` block is documented below.
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input['InterfaceIpv6Args']]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter
    def l2forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable l2 forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "l2forward")

    @l2forward.setter
    def l2forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "l2forward", value)

    @property
    @pulumi.getter(name="lacpHaSecondary")
    def lacp_ha_secondary(self) -> Optional[pulumi.Input[str]]:
        """
        LACP HA secondary member. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "lacp_ha_secondary")

    @lacp_ha_secondary.setter
    def lacp_ha_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lacp_ha_secondary", value)

    @property
    @pulumi.getter(name="lacpHaSlave")
    def lacp_ha_slave(self) -> Optional[pulumi.Input[str]]:
        """
        LACP HA slave. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "lacp_ha_slave")

    @lacp_ha_slave.setter
    def lacp_ha_slave(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lacp_ha_slave", value)

    @property
    @pulumi.getter(name="lacpMode")
    def lacp_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LACP mode. Valid values: `static`, `passive`, `active`.
        """
        return pulumi.get(self, "lacp_mode")

    @lacp_mode.setter
    def lacp_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lacp_mode", value)

    @property
    @pulumi.getter(name="lacpSpeed")
    def lacp_speed(self) -> Optional[pulumi.Input[str]]:
        """
        How often the interface sends LACP messages. Valid values: `slow`, `fast`.
        """
        return pulumi.get(self, "lacp_speed")

    @lacp_speed.setter
    def lacp_speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lacp_speed", value)

    @property
    @pulumi.getter(name="lcpEchoInterval")
    def lcp_echo_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
        """
        return pulumi.get(self, "lcp_echo_interval")

    @lcp_echo_interval.setter
    def lcp_echo_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lcp_echo_interval", value)

    @property
    @pulumi.getter(name="lcpMaxEchoFails")
    def lcp_max_echo_fails(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum missed LCP echo messages before disconnect.
        """
        return pulumi.get(self, "lcp_max_echo_fails")

    @lcp_max_echo_fails.setter
    def lcp_max_echo_fails(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lcp_max_echo_fails", value)

    @property
    @pulumi.getter(name="linkUpDelay")
    def link_up_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Number of milliseconds to wait before considering a link is up.
        """
        return pulumi.get(self, "link_up_delay")

    @link_up_delay.setter
    def link_up_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "link_up_delay", value)

    @property
    @pulumi.getter(name="lldpNetworkPolicy")
    def lldp_network_policy(self) -> Optional[pulumi.Input[str]]:
        """
        LLDP-MED network policy profile.
        """
        return pulumi.get(self, "lldp_network_policy")

    @lldp_network_policy.setter
    def lldp_network_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_network_policy", value)

    @property
    @pulumi.getter(name="lldpReception")
    def lldp_reception(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Link Layer Discovery Protocol (LLDP) reception. Valid values: `enable`, `disable`, `vdom`.
        """
        return pulumi.get(self, "lldp_reception")

    @lldp_reception.setter
    def lldp_reception(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_reception", value)

    @property
    @pulumi.getter(name="lldpTransmission")
    def lldp_transmission(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Link Layer Discovery Protocol (LLDP) transmission. Valid values: `enable`, `disable`, `vdom`.
        """
        return pulumi.get(self, "lldp_transmission")

    @lldp_transmission.setter
    def lldp_transmission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_transmission", value)

    @property
    @pulumi.getter
    def macaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Change the interface's MAC address.
        """
        return pulumi.get(self, "macaddr")

    @macaddr.setter
    def macaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "macaddr", value)

    @property
    @pulumi.getter(name="managedDevices")
    def managed_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceManagedDeviceArgs']]]]:
        """
        Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managed_device` block is documented below.
        """
        return pulumi.get(self, "managed_devices")

    @managed_devices.setter
    def managed_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceManagedDeviceArgs']]]]):
        pulumi.set(self, "managed_devices", value)

    @property
    @pulumi.getter(name="managedSubnetworkSize")
    def managed_subnetwork_size(self) -> Optional[pulumi.Input[str]]:
        """
        Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
        """
        return pulumi.get(self, "managed_subnetwork_size")

    @managed_subnetwork_size.setter
    def managed_subnetwork_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_subnetwork_size", value)

    @property
    @pulumi.getter(name="managementIp")
    def management_ip(self) -> Optional[pulumi.Input[str]]:
        """
        High Availability in-band management IP address of this interface.
        """
        return pulumi.get(self, "management_ip")

    @management_ip.setter
    def management_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_ip", value)

    @property
    @pulumi.getter(name="measuredDownstreamBandwidth")
    def measured_downstream_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Measured downstream bandwidth (kbps).
        """
        return pulumi.get(self, "measured_downstream_bandwidth")

    @measured_downstream_bandwidth.setter
    def measured_downstream_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "measured_downstream_bandwidth", value)

    @property
    @pulumi.getter(name="measuredUpstreamBandwidth")
    def measured_upstream_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Measured upstream bandwidth (kbps).
        """
        return pulumi.get(self, "measured_upstream_bandwidth")

    @measured_upstream_bandwidth.setter
    def measured_upstream_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "measured_upstream_bandwidth", value)

    @property
    @pulumi.getter
    def mediatype(self) -> Optional[pulumi.Input[str]]:
        """
        Select SFP media interface type Valid values: `none`, `gmii`, `sgmii`, `sr`, `lr`, `cr`, `sr4`, `lr4`, `cr4`.
        """
        return pulumi.get(self, "mediatype")

    @mediatype.setter
    def mediatype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mediatype", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceMemberArgs']]]]:
        """
        Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="minLinks")
    def min_links(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of aggregated ports that must be up.
        """
        return pulumi.get(self, "min_links")

    @min_links.setter
    def min_links(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_links", value)

    @property
    @pulumi.getter(name="minLinksDown")
    def min_links_down(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take when less than the configured minimum number of links are active. Valid values: `operational`, `administrative`.
        """
        return pulumi.get(self, "min_links_down")

    @min_links_down.setter
    def min_links_down(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_links_down", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Addressing mode (static, DHCP, PPPoE). Valid values: `static`, `dhcp`, `pppoe`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="monitorBandwidth")
    def monitor_bandwidth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable monitoring bandwidth on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "monitor_bandwidth")

    @monitor_bandwidth.setter
    def monitor_bandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_bandwidth", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        MTU value for this interface.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="mtuOverride")
    def mtu_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to set a custom MTU for this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mtu_override")

    @mtu_override.setter
    def mtu_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu_override", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ndiscforward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NDISC forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ndiscforward")

    @ndiscforward.setter
    def ndiscforward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ndiscforward", value)

    @property
    @pulumi.getter(name="netbiosForward")
    def netbios_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NETBIOS forwarding. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "netbios_forward")

    @netbios_forward.setter
    def netbios_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netbios_forward", value)

    @property
    @pulumi.getter(name="netflowSampler")
    def netflow_sampler(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both). Valid values: `disable`, `tx`, `rx`, `both`.
        """
        return pulumi.get(self, "netflow_sampler")

    @netflow_sampler.setter
    def netflow_sampler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netflow_sampler", value)

    @property
    @pulumi.getter
    def outbandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
        """
        return pulumi.get(self, "outbandwidth")

    @outbandwidth.setter
    def outbandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outbandwidth", value)

    @property
    @pulumi.getter(name="padtRetryTimeout")
    def padt_retry_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
        """
        return pulumi.get(self, "padt_retry_timeout")

    @padt_retry_timeout.setter
    def padt_retry_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "padt_retry_timeout", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        PPPoE account's password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="pingServStatus")
    def ping_serv_status(self) -> Optional[pulumi.Input[int]]:
        """
        PING server status.
        """
        return pulumi.get(self, "ping_serv_status")

    @ping_serv_status.setter
    def ping_serv_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ping_serv_status", value)

    @property
    @pulumi.getter(name="pollingInterval")
    def polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        sFlow polling interval (1 - 255 sec).
        """
        return pulumi.get(self, "polling_interval")

    @polling_interval.setter
    def polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "polling_interval", value)

    @property
    @pulumi.getter(name="pppoeUnnumberedNegotiate")
    def pppoe_unnumbered_negotiate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pppoe_unnumbered_negotiate")

    @pppoe_unnumbered_negotiate.setter
    def pppoe_unnumbered_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pppoe_unnumbered_negotiate", value)

    @property
    @pulumi.getter(name="pptpAuthType")
    def pptp_auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        PPTP authentication type. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        """
        return pulumi.get(self, "pptp_auth_type")

    @pptp_auth_type.setter
    def pptp_auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pptp_auth_type", value)

    @property
    @pulumi.getter(name="pptpClient")
    def pptp_client(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PPTP client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pptp_client")

    @pptp_client.setter
    def pptp_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pptp_client", value)

    @property
    @pulumi.getter(name="pptpPassword")
    def pptp_password(self) -> Optional[pulumi.Input[str]]:
        """
        PPTP password.
        """
        return pulumi.get(self, "pptp_password")

    @pptp_password.setter
    def pptp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pptp_password", value)

    @property
    @pulumi.getter(name="pptpServerIp")
    def pptp_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        PPTP server IP address.
        """
        return pulumi.get(self, "pptp_server_ip")

    @pptp_server_ip.setter
    def pptp_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pptp_server_ip", value)

    @property
    @pulumi.getter(name="pptpTimeout")
    def pptp_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Idle timer in minutes (0 for disabled).
        """
        return pulumi.get(self, "pptp_timeout")

    @pptp_timeout.setter
    def pptp_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pptp_timeout", value)

    @property
    @pulumi.getter(name="pptpUser")
    def pptp_user(self) -> Optional[pulumi.Input[str]]:
        """
        PPTP user name.
        """
        return pulumi.get(self, "pptp_user")

    @pptp_user.setter
    def pptp_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pptp_user", value)

    @property
    @pulumi.getter(name="preserveSessionRoute")
    def preserve_session_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable preservation of session route when dirty. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "preserve_session_route")

    @preserve_session_route.setter
    def preserve_session_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preserve_session_route", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of learned routes.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="priorityOverride")
    def priority_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable fail back to higher priority port once recovered. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "priority_override")

    @priority_override.setter
    def priority_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_override", value)

    @property
    @pulumi.getter(name="proxyCaptivePortal")
    def proxy_captive_portal(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable proxy captive portal on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_captive_portal")

    @proxy_captive_portal.setter
    def proxy_captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_captive_portal", value)

    @property
    @pulumi.getter(name="reachableTime")
    def reachable_time(self) -> Optional[pulumi.Input[int]]:
        """
        IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
        """
        return pulumi.get(self, "reachable_time")

    @reachable_time.setter
    def reachable_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reachable_time", value)

    @property
    @pulumi.getter(name="redundantInterface")
    def redundant_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Redundant interface.
        """
        return pulumi.get(self, "redundant_interface")

    @redundant_interface.setter
    def redundant_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_interface", value)

    @property
    @pulumi.getter(name="remoteIp")
    def remote_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Remote IP address of tunnel.
        """
        return pulumi.get(self, "remote_ip")

    @remote_ip.setter
    def remote_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_ip", value)

    @property
    @pulumi.getter(name="replacemsgOverrideGroup")
    def replacemsg_override_group(self) -> Optional[pulumi.Input[str]]:
        """
        Replacement message override group.
        """
        return pulumi.get(self, "replacemsg_override_group")

    @replacemsg_override_group.setter
    def replacemsg_override_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_override_group", value)

    @property
    @pulumi.getter(name="ringRx")
    def ring_rx(self) -> Optional[pulumi.Input[int]]:
        """
        RX ring size.
        """
        return pulumi.get(self, "ring_rx")

    @ring_rx.setter
    def ring_rx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ring_rx", value)

    @property
    @pulumi.getter(name="ringTx")
    def ring_tx(self) -> Optional[pulumi.Input[int]]:
        """
        TX ring size.
        """
        return pulumi.get(self, "ring_tx")

    @ring_tx.setter
    def ring_tx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ring_tx", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Interface role. Valid values: `lan`, `wan`, `dmz`, `undefined`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="sampleDirection")
    def sample_direction(self) -> Optional[pulumi.Input[str]]:
        """
        Data that NetFlow collects (rx, tx, or both). Valid values: `tx`, `rx`, `both`.
        """
        return pulumi.get(self, "sample_direction")

    @sample_direction.setter
    def sample_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sample_direction", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[pulumi.Input[int]]:
        """
        sFlow sample rate (10 - 99999).
        """
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        """
        Enable monitoring or blocking connections to Botnet servers through this interface. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter(name="secondaryIp")
    def secondary_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding a secondary IP to this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "secondary_ip")

    @secondary_ip.setter
    def secondary_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_ip", value)

    @property
    @pulumi.getter
    def secondaryips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceSecondaryipArgs']]]]:
        """
        Second IP address of interface. The structure of `secondaryip` block is documented below.
        """
        return pulumi.get(self, "secondaryips")

    @secondaryips.setter
    def secondaryips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceSecondaryipArgs']]]]):
        pulumi.set(self, "secondaryips", value)

    @property
    @pulumi.getter(name="securityExemptList")
    def security_exempt_list(self) -> Optional[pulumi.Input[str]]:
        """
        Name of security-exempt-list.
        """
        return pulumi.get(self, "security_exempt_list")

    @security_exempt_list.setter
    def security_exempt_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_exempt_list", value)

    @property
    @pulumi.getter(name="securityExternalLogout")
    def security_external_logout(self) -> Optional[pulumi.Input[str]]:
        """
        URL of external authentication logout server.
        """
        return pulumi.get(self, "security_external_logout")

    @security_external_logout.setter
    def security_external_logout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_external_logout", value)

    @property
    @pulumi.getter(name="securityExternalWeb")
    def security_external_web(self) -> Optional[pulumi.Input[str]]:
        """
        URL of external authentication web server.
        """
        return pulumi.get(self, "security_external_web")

    @security_external_web.setter
    def security_external_web(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_external_web", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceSecurityGroupArgs']]]]:
        """
        User groups that can authenticate with the captive portal. The structure of `security_groups` block is documented below.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceSecurityGroupArgs']]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="securityMacAuthBypass")
    def security_mac_auth_bypass(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MAC authentication bypass. Valid values: `mac-auth-only`, `enable`, `disable`.
        """
        return pulumi.get(self, "security_mac_auth_bypass")

    @security_mac_auth_bypass.setter
    def security_mac_auth_bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mac_auth_bypass", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Turn on captive portal authentication for this interface. Valid values: `none`, `captive-portal`, `802.1X`.
        """
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="securityRedirectUrl")
    def security_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL redirection after disclaimer/authentication.
        """
        return pulumi.get(self, "security_redirect_url")

    @security_redirect_url.setter
    def security_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_redirect_url", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        PPPoE service name.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="sflowSampler")
    def sflow_sampler(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sFlow on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sflow_sampler")

    @sflow_sampler.setter
    def sflow_sampler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sflow_sampler", value)

    @property
    @pulumi.getter(name="snmpIndex")
    def snmp_index(self) -> Optional[pulumi.Input[int]]:
        """
        Permanent SNMP Index of the interface.
        """
        return pulumi.get(self, "snmp_index")

    @snmp_index.setter
    def snmp_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "snmp_index", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        """
        Interface speed. The default setting and the options available depend on the interface hardware.
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter(name="spilloverThreshold")
    def spillover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
        """
        return pulumi.get(self, "spillover_threshold")

    @spillover_threshold.setter
    def spillover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spillover_threshold", value)

    @property
    @pulumi.getter(name="srcCheck")
    def src_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable source IP check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "src_check")

    @src_check.setter
    def src_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Bring the interface up or shut the interface down. Valid values: `up`, `down`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def stp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable STP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "stp")

    @stp.setter
    def stp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stp", value)

    @property
    @pulumi.getter(name="stpHaSecondary")
    def stp_ha_secondary(self) -> Optional[pulumi.Input[str]]:
        """
        Control STP behaviour on HA secondary. Valid values: `disable`, `enable`, `priority-adjust`.
        """
        return pulumi.get(self, "stp_ha_secondary")

    @stp_ha_secondary.setter
    def stp_ha_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stp_ha_secondary", value)

    @property
    @pulumi.getter
    def stpforward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable STP forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "stpforward")

    @stpforward.setter
    def stpforward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stpforward", value)

    @property
    @pulumi.getter(name="stpforwardMode")
    def stpforward_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure STP forwarding mode. Valid values: `rpl-all-ext-id`, `rpl-bridge-ext-id`, `rpl-nothing`.
        """
        return pulumi.get(self, "stpforward_mode")

    @stpforward_mode.setter
    def stpforward_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stpforward_mode", value)

    @property
    @pulumi.getter
    def subst(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to always send packets from this interface to a destination MAC address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "subst")

    @subst.setter
    def subst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subst", value)

    @property
    @pulumi.getter(name="substituteDstMac")
    def substitute_dst_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Destination MAC address that all packets are sent to from this interface.
        """
        return pulumi.get(self, "substitute_dst_mac")

    @substitute_dst_mac.setter
    def substitute_dst_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "substitute_dst_mac", value)

    @property
    @pulumi.getter(name="swcFirstCreate")
    def swc_first_create(self) -> Optional[pulumi.Input[int]]:
        """
        Initial create for switch-controller VLANs.
        """
        return pulumi.get(self, "swc_first_create")

    @swc_first_create.setter
    def swc_first_create(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "swc_first_create", value)

    @property
    @pulumi.getter(name="swcVlan")
    def swc_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Creation status for switch-controller VLANs.
        """
        return pulumi.get(self, "swc_vlan")

    @swc_vlan.setter
    def swc_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "swc_vlan", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        Contained in switch.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="switchControllerAccessVlan")
    def switch_controller_access_vlan(self) -> Optional[pulumi.Input[str]]:
        """
        Block FortiSwitch port-to-port traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_access_vlan")

    @switch_controller_access_vlan.setter
    def switch_controller_access_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_access_vlan", value)

    @property
    @pulumi.getter(name="switchControllerArpInspection")
    def switch_controller_arp_inspection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiSwitch ARP inspection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_arp_inspection")

    @switch_controller_arp_inspection.setter
    def switch_controller_arp_inspection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_arp_inspection", value)

    @property
    @pulumi.getter(name="switchControllerDhcpSnooping")
    def switch_controller_dhcp_snooping(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller DHCP snooping. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_dhcp_snooping")

    @switch_controller_dhcp_snooping.setter
    def switch_controller_dhcp_snooping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_dhcp_snooping", value)

    @property
    @pulumi.getter(name="switchControllerDhcpSnoopingOption82")
    def switch_controller_dhcp_snooping_option82(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller DHCP snooping option82. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_dhcp_snooping_option82")

    @switch_controller_dhcp_snooping_option82.setter
    def switch_controller_dhcp_snooping_option82(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_dhcp_snooping_option82", value)

    @property
    @pulumi.getter(name="switchControllerDhcpSnoopingVerifyMac")
    def switch_controller_dhcp_snooping_verify_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller DHCP snooping verify MAC. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_dhcp_snooping_verify_mac")

    @switch_controller_dhcp_snooping_verify_mac.setter
    def switch_controller_dhcp_snooping_verify_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_dhcp_snooping_verify_mac", value)

    @property
    @pulumi.getter(name="switchControllerDynamic")
    def switch_controller_dynamic(self) -> Optional[pulumi.Input[str]]:
        """
        Integrated FortiLink settings for managed FortiSwitch.
        """
        return pulumi.get(self, "switch_controller_dynamic")

    @switch_controller_dynamic.setter
    def switch_controller_dynamic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_dynamic", value)

    @property
    @pulumi.getter(name="switchControllerFeature")
    def switch_controller_feature(self) -> Optional[pulumi.Input[str]]:
        """
        Interface's purpose when assigning traffic (read only).
        """
        return pulumi.get(self, "switch_controller_feature")

    @switch_controller_feature.setter
    def switch_controller_feature(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_feature", value)

    @property
    @pulumi.getter(name="switchControllerIgmpSnooping")
    def switch_controller_igmp_snooping(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller IGMP snooping. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_igmp_snooping")

    @switch_controller_igmp_snooping.setter
    def switch_controller_igmp_snooping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_igmp_snooping", value)

    @property
    @pulumi.getter(name="switchControllerIgmpSnoopingFastLeave")
    def switch_controller_igmp_snooping_fast_leave(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller IGMP snooping fast-leave. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_igmp_snooping_fast_leave")

    @switch_controller_igmp_snooping_fast_leave.setter
    def switch_controller_igmp_snooping_fast_leave(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_igmp_snooping_fast_leave", value)

    @property
    @pulumi.getter(name="switchControllerIgmpSnoopingProxy")
    def switch_controller_igmp_snooping_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller IGMP snooping proxy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_igmp_snooping_proxy")

    @switch_controller_igmp_snooping_proxy.setter
    def switch_controller_igmp_snooping_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_igmp_snooping_proxy", value)

    @property
    @pulumi.getter(name="switchControllerIotScanning")
    def switch_controller_iot_scanning(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable managed FortiSwitch IoT scanning. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_iot_scanning")

    @switch_controller_iot_scanning.setter
    def switch_controller_iot_scanning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_iot_scanning", value)

    @property
    @pulumi.getter(name="switchControllerLearningLimit")
    def switch_controller_learning_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
        """
        return pulumi.get(self, "switch_controller_learning_limit")

    @switch_controller_learning_limit.setter
    def switch_controller_learning_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_controller_learning_limit", value)

    @property
    @pulumi.getter(name="switchControllerMgmtVlan")
    def switch_controller_mgmt_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN to use for FortiLink management purposes.
        """
        return pulumi.get(self, "switch_controller_mgmt_vlan")

    @switch_controller_mgmt_vlan.setter
    def switch_controller_mgmt_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_controller_mgmt_vlan", value)

    @property
    @pulumi.getter(name="switchControllerNac")
    def switch_controller_nac(self) -> Optional[pulumi.Input[str]]:
        """
        Integrated NAC settings for managed FortiSwitch.
        """
        return pulumi.get(self, "switch_controller_nac")

    @switch_controller_nac.setter
    def switch_controller_nac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_nac", value)

    @property
    @pulumi.getter(name="switchControllerNetflowCollect")
    def switch_controller_netflow_collect(self) -> Optional[pulumi.Input[str]]:
        """
        NetFlow collection and processing. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "switch_controller_netflow_collect")

    @switch_controller_netflow_collect.setter
    def switch_controller_netflow_collect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_netflow_collect", value)

    @property
    @pulumi.getter(name="switchControllerOffload")
    def switch_controller_offload(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable managed FortiSwitch routing offload. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_offload")

    @switch_controller_offload.setter
    def switch_controller_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_offload", value)

    @property
    @pulumi.getter(name="switchControllerOffloadGw")
    def switch_controller_offload_gw(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable managed FortiSwitch routing offload gateway. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_offload_gw")

    @switch_controller_offload_gw.setter
    def switch_controller_offload_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_offload_gw", value)

    @property
    @pulumi.getter(name="switchControllerOffloadIp")
    def switch_controller_offload_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP for routing offload on FortiSwitch.
        """
        return pulumi.get(self, "switch_controller_offload_ip")

    @switch_controller_offload_ip.setter
    def switch_controller_offload_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_offload_ip", value)

    @property
    @pulumi.getter(name="switchControllerRspanMode")
    def switch_controller_rspan_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "switch_controller_rspan_mode")

    @switch_controller_rspan_mode.setter
    def switch_controller_rspan_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_rspan_mode", value)

    @property
    @pulumi.getter(name="switchControllerSourceIp")
    def switch_controller_source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address used in FortiLink over L3 connections. Valid values: `outbound`, `fixed`.
        """
        return pulumi.get(self, "switch_controller_source_ip")

    @switch_controller_source_ip.setter
    def switch_controller_source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_source_ip", value)

    @property
    @pulumi.getter(name="switchControllerTrafficPolicy")
    def switch_controller_traffic_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller traffic policy for the VLAN.
        """
        return pulumi.get(self, "switch_controller_traffic_policy")

    @switch_controller_traffic_policy.setter
    def switch_controller_traffic_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_traffic_policy", value)

    @property
    @pulumi.getter(name="systemId")
    def system_id(self) -> Optional[pulumi.Input[str]]:
        """
        Define a system ID for the aggregate interface.
        """
        return pulumi.get(self, "system_id")

    @system_id.setter
    def system_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_id", value)

    @property
    @pulumi.getter(name="systemIdType")
    def system_id_type(self) -> Optional[pulumi.Input[str]]:
        """
        Method in which system ID is generated. Valid values: `auto`, `user`.
        """
        return pulumi.get(self, "system_id_type")

    @system_id_type.setter
    def system_id_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_id_type", value)

    @property
    @pulumi.getter
    def taggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTaggingArgs']]]]:
        """
        Config object tagging. The structure of `tagging` block is documented below.
        """
        return pulumi.get(self, "taggings")

    @taggings.setter
    def taggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTaggingArgs']]]]):
        pulumi.set(self, "taggings", value)

    @property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> Optional[pulumi.Input[int]]:
        """
        TCP maximum segment size. 0 means do not change segment size.
        """
        return pulumi.get(self, "tcp_mss")

    @tcp_mss.setter
    def tcp_mss(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss", value)

    @property
    @pulumi.getter
    def trunk(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VLAN trunk. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "trunk")

    @trunk.setter
    def trunk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trunk", value)

    @property
    @pulumi.getter(name="trustIp1")
    def trust_ip1(self) -> Optional[pulumi.Input[str]]:
        """
        Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        """
        return pulumi.get(self, "trust_ip1")

    @trust_ip1.setter
    def trust_ip1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_ip1", value)

    @property
    @pulumi.getter(name="trustIp2")
    def trust_ip2(self) -> Optional[pulumi.Input[str]]:
        """
        Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        """
        return pulumi.get(self, "trust_ip2")

    @trust_ip2.setter
    def trust_ip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_ip2", value)

    @property
    @pulumi.getter(name="trustIp3")
    def trust_ip3(self) -> Optional[pulumi.Input[str]]:
        """
        Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        """
        return pulumi.get(self, "trust_ip3")

    @trust_ip3.setter
    def trust_ip3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_ip3", value)

    @property
    @pulumi.getter(name="trustIp61")
    def trust_ip61(self) -> Optional[pulumi.Input[str]]:
        """
        Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        """
        return pulumi.get(self, "trust_ip61")

    @trust_ip61.setter
    def trust_ip61(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_ip61", value)

    @property
    @pulumi.getter(name="trustIp62")
    def trust_ip62(self) -> Optional[pulumi.Input[str]]:
        """
        Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        """
        return pulumi.get(self, "trust_ip62")

    @trust_ip62.setter
    def trust_ip62(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_ip62", value)

    @property
    @pulumi.getter(name="trustIp63")
    def trust_ip63(self) -> Optional[pulumi.Input[str]]:
        """
        Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        """
        return pulumi.get(self, "trust_ip63")

    @trust_ip63.setter
    def trust_ip63(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_ip63", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Interface type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username of the PPPoE account, provided by your ISP.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vindex(self) -> Optional[pulumi.Input[int]]:
        """
        Switch control interface VLAN ID.
        """
        return pulumi.get(self, "vindex")

    @vindex.setter
    def vindex(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vindex", value)

    @property
    @pulumi.getter(name="vlanProtocol")
    def vlan_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Ethernet protocol of VLAN. Valid values: `8021q`, `8021ad`.
        """
        return pulumi.get(self, "vlan_protocol")

    @vlan_protocol.setter
    def vlan_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_protocol", value)

    @property
    @pulumi.getter
    def vlanforward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable traffic forwarding between VLANs on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vlanforward")

    @vlanforward.setter
    def vlanforward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlanforward", value)

    @property
    @pulumi.getter
    def vlanid(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID (1 - 4094).
        """
        return pulumi.get(self, "vlanid")

    @vlanid.setter
    def vlanid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlanid", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[int]]:
        """
        Virtual Routing Forwarding ID.
        """
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrf", value)

    @property
    @pulumi.getter(name="vrrpVirtualMac")
    def vrrp_virtual_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of virtual MAC for VRRP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vrrp_virtual_mac")

    @vrrp_virtual_mac.setter
    def vrrp_virtual_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrrp_virtual_mac", value)

    @property
    @pulumi.getter
    def vrrps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceVrrpArgs']]]]:
        """
        VRRP configuration. The structure of `vrrp` block is documented below.
        """
        return pulumi.get(self, "vrrps")

    @vrrps.setter
    def vrrps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceVrrpArgs']]]]):
        pulumi.set(self, "vrrps", value)

    @property
    @pulumi.getter
    def wccp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wccp")

    @wccp.setter
    def wccp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wccp", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Default weight for static routes (if route has no weight configured).
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter(name="winsIp")
    def wins_ip(self) -> Optional[pulumi.Input[str]]:
        """
        WINS server IP.
        """
        return pulumi.get(self, "wins_ip")

    @wins_ip.setter
    def wins_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_ip", value)


@pulumi.input_type
class _InterfaceState:
    def __init__(__self__, *,
                 ac_name: Optional[pulumi.Input[str]] = None,
                 aggregate: Optional[pulumi.Input[str]] = None,
                 aggregate_type: Optional[pulumi.Input[str]] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 ap_discover: Optional[pulumi.Input[str]] = None,
                 arpforward: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_portal_addr: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 auto_auth_extension_device: Optional[pulumi.Input[str]] = None,
                 autogenerated: Optional[pulumi.Input[str]] = None,
                 bandwidth_measure_time: Optional[pulumi.Input[int]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 bfd_desired_min_tx: Optional[pulumi.Input[int]] = None,
                 bfd_detect_mult: Optional[pulumi.Input[int]] = None,
                 bfd_required_min_rx: Optional[pulumi.Input[int]] = None,
                 broadcast_forticlient_discovery: Optional[pulumi.Input[str]] = None,
                 broadcast_forward: Optional[pulumi.Input[str]] = None,
                 captive_portal: Optional[pulumi.Input[int]] = None,
                 cli_conn_status: Optional[pulumi.Input[int]] = None,
                 client_options: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceClientOptionArgs']]]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 dedicated_to: Optional[pulumi.Input[str]] = None,
                 default_purdue_level: Optional[pulumi.Input[str]] = None,
                 defaultgw: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 detected_peer_mtu: Optional[pulumi.Input[int]] = None,
                 detectprotocol: Optional[pulumi.Input[str]] = None,
                 detectserver: Optional[pulumi.Input[str]] = None,
                 device_access_list: Optional[pulumi.Input[str]] = None,
                 device_identification: Optional[pulumi.Input[str]] = None,
                 device_identification_active_scan: Optional[pulumi.Input[str]] = None,
                 device_netscan: Optional[pulumi.Input[str]] = None,
                 device_user_identification: Optional[pulumi.Input[str]] = None,
                 devindex: Optional[pulumi.Input[int]] = None,
                 dhcp_broadcast_flag: Optional[pulumi.Input[str]] = None,
                 dhcp_classless_route_addition: Optional[pulumi.Input[str]] = None,
                 dhcp_client_identifier: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_agent_option: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_circuit_id: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_interface: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_interface_select_method: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_ip: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_link_selection: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_request_all_server: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_service: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_source_ip: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_type: Optional[pulumi.Input[str]] = None,
                 dhcp_renew_time: Optional[pulumi.Input[int]] = None,
                 dhcp_smart_relay: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping_server_lists: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceDhcpSnoopingServerListArgs']]]] = None,
                 disc_retry_timeout: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dns_server_override: Optional[pulumi.Input[str]] = None,
                 dns_server_protocol: Optional[pulumi.Input[str]] = None,
                 drop_fragment: Optional[pulumi.Input[str]] = None,
                 drop_overlapped_fragment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 eap_ca_cert: Optional[pulumi.Input[str]] = None,
                 eap_identity: Optional[pulumi.Input[str]] = None,
                 eap_method: Optional[pulumi.Input[str]] = None,
                 eap_password: Optional[pulumi.Input[str]] = None,
                 eap_supplicant: Optional[pulumi.Input[str]] = None,
                 eap_user_cert: Optional[pulumi.Input[str]] = None,
                 egress_shaping_profile: Optional[pulumi.Input[str]] = None,
                 endpoint_compliance: Optional[pulumi.Input[str]] = None,
                 estimated_downstream_bandwidth: Optional[pulumi.Input[int]] = None,
                 estimated_upstream_bandwidth: Optional[pulumi.Input[int]] = None,
                 explicit_ftp_proxy: Optional[pulumi.Input[str]] = None,
                 explicit_web_proxy: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 fail_action_on_extender: Optional[pulumi.Input[str]] = None,
                 fail_alert_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceFailAlertInterfaceArgs']]]] = None,
                 fail_alert_method: Optional[pulumi.Input[str]] = None,
                 fail_detect: Optional[pulumi.Input[str]] = None,
                 fail_detect_option: Optional[pulumi.Input[str]] = None,
                 fortiheartbeat: Optional[pulumi.Input[str]] = None,
                 fortilink: Optional[pulumi.Input[str]] = None,
                 fortilink_backup_link: Optional[pulumi.Input[int]] = None,
                 fortilink_neighbor_detect: Optional[pulumi.Input[str]] = None,
                 fortilink_split_interface: Optional[pulumi.Input[str]] = None,
                 fortilink_stacking: Optional[pulumi.Input[str]] = None,
                 forward_domain: Optional[pulumi.Input[int]] = None,
                 forward_error_correction: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gwdetect: Optional[pulumi.Input[str]] = None,
                 ha_priority: Optional[pulumi.Input[int]] = None,
                 icmp_accept_redirect: Optional[pulumi.Input[str]] = None,
                 icmp_send_redirect: Optional[pulumi.Input[str]] = None,
                 ident_accept: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 ike_saml_server: Optional[pulumi.Input[str]] = None,
                 inbandwidth: Optional[pulumi.Input[int]] = None,
                 ingress_shaping_profile: Optional[pulumi.Input[str]] = None,
                 ingress_spillover_threshold: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 internal: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ip_managed_by_fortiipam: Optional[pulumi.Input[str]] = None,
                 ipmac: Optional[pulumi.Input[str]] = None,
                 ips_sniffer_mode: Optional[pulumi.Input[str]] = None,
                 ipunnumbered: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input['InterfaceIpv6Args']] = None,
                 l2forward: Optional[pulumi.Input[str]] = None,
                 lacp_ha_secondary: Optional[pulumi.Input[str]] = None,
                 lacp_ha_slave: Optional[pulumi.Input[str]] = None,
                 lacp_mode: Optional[pulumi.Input[str]] = None,
                 lacp_speed: Optional[pulumi.Input[str]] = None,
                 lcp_echo_interval: Optional[pulumi.Input[int]] = None,
                 lcp_max_echo_fails: Optional[pulumi.Input[int]] = None,
                 link_up_delay: Optional[pulumi.Input[int]] = None,
                 lldp_network_policy: Optional[pulumi.Input[str]] = None,
                 lldp_reception: Optional[pulumi.Input[str]] = None,
                 lldp_transmission: Optional[pulumi.Input[str]] = None,
                 macaddr: Optional[pulumi.Input[str]] = None,
                 managed_devices: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceManagedDeviceArgs']]]] = None,
                 managed_subnetwork_size: Optional[pulumi.Input[str]] = None,
                 management_ip: Optional[pulumi.Input[str]] = None,
                 measured_downstream_bandwidth: Optional[pulumi.Input[int]] = None,
                 measured_upstream_bandwidth: Optional[pulumi.Input[int]] = None,
                 mediatype: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceMemberArgs']]]] = None,
                 min_links: Optional[pulumi.Input[int]] = None,
                 min_links_down: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 monitor_bandwidth: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 mtu_override: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ndiscforward: Optional[pulumi.Input[str]] = None,
                 netbios_forward: Optional[pulumi.Input[str]] = None,
                 netflow_sampler: Optional[pulumi.Input[str]] = None,
                 outbandwidth: Optional[pulumi.Input[int]] = None,
                 padt_retry_timeout: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ping_serv_status: Optional[pulumi.Input[int]] = None,
                 polling_interval: Optional[pulumi.Input[int]] = None,
                 pppoe_unnumbered_negotiate: Optional[pulumi.Input[str]] = None,
                 pptp_auth_type: Optional[pulumi.Input[str]] = None,
                 pptp_client: Optional[pulumi.Input[str]] = None,
                 pptp_password: Optional[pulumi.Input[str]] = None,
                 pptp_server_ip: Optional[pulumi.Input[str]] = None,
                 pptp_timeout: Optional[pulumi.Input[int]] = None,
                 pptp_user: Optional[pulumi.Input[str]] = None,
                 preserve_session_route: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 priority_override: Optional[pulumi.Input[str]] = None,
                 proxy_captive_portal: Optional[pulumi.Input[str]] = None,
                 reachable_time: Optional[pulumi.Input[int]] = None,
                 redundant_interface: Optional[pulumi.Input[str]] = None,
                 remote_ip: Optional[pulumi.Input[str]] = None,
                 replacemsg_override_group: Optional[pulumi.Input[str]] = None,
                 ring_rx: Optional[pulumi.Input[int]] = None,
                 ring_tx: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 sample_direction: Optional[pulumi.Input[str]] = None,
                 sample_rate: Optional[pulumi.Input[int]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 secondary_ip: Optional[pulumi.Input[str]] = None,
                 secondaryips: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceSecondaryipArgs']]]] = None,
                 security_exempt_list: Optional[pulumi.Input[str]] = None,
                 security_external_logout: Optional[pulumi.Input[str]] = None,
                 security_external_web: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceSecurityGroupArgs']]]] = None,
                 security_mac_auth_bypass: Optional[pulumi.Input[str]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 security_redirect_url: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 sflow_sampler: Optional[pulumi.Input[str]] = None,
                 snmp_index: Optional[pulumi.Input[int]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 spillover_threshold: Optional[pulumi.Input[int]] = None,
                 src_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 stp: Optional[pulumi.Input[str]] = None,
                 stp_ha_secondary: Optional[pulumi.Input[str]] = None,
                 stpforward: Optional[pulumi.Input[str]] = None,
                 stpforward_mode: Optional[pulumi.Input[str]] = None,
                 subst: Optional[pulumi.Input[str]] = None,
                 substitute_dst_mac: Optional[pulumi.Input[str]] = None,
                 swc_first_create: Optional[pulumi.Input[int]] = None,
                 swc_vlan: Optional[pulumi.Input[int]] = None,
                 switch: Optional[pulumi.Input[str]] = None,
                 switch_controller_access_vlan: Optional[pulumi.Input[str]] = None,
                 switch_controller_arp_inspection: Optional[pulumi.Input[str]] = None,
                 switch_controller_dhcp_snooping: Optional[pulumi.Input[str]] = None,
                 switch_controller_dhcp_snooping_option82: Optional[pulumi.Input[str]] = None,
                 switch_controller_dhcp_snooping_verify_mac: Optional[pulumi.Input[str]] = None,
                 switch_controller_dynamic: Optional[pulumi.Input[str]] = None,
                 switch_controller_feature: Optional[pulumi.Input[str]] = None,
                 switch_controller_igmp_snooping: Optional[pulumi.Input[str]] = None,
                 switch_controller_igmp_snooping_fast_leave: Optional[pulumi.Input[str]] = None,
                 switch_controller_igmp_snooping_proxy: Optional[pulumi.Input[str]] = None,
                 switch_controller_iot_scanning: Optional[pulumi.Input[str]] = None,
                 switch_controller_learning_limit: Optional[pulumi.Input[int]] = None,
                 switch_controller_mgmt_vlan: Optional[pulumi.Input[int]] = None,
                 switch_controller_nac: Optional[pulumi.Input[str]] = None,
                 switch_controller_netflow_collect: Optional[pulumi.Input[str]] = None,
                 switch_controller_offload: Optional[pulumi.Input[str]] = None,
                 switch_controller_offload_gw: Optional[pulumi.Input[str]] = None,
                 switch_controller_offload_ip: Optional[pulumi.Input[str]] = None,
                 switch_controller_rspan_mode: Optional[pulumi.Input[str]] = None,
                 switch_controller_source_ip: Optional[pulumi.Input[str]] = None,
                 switch_controller_traffic_policy: Optional[pulumi.Input[str]] = None,
                 system_id: Optional[pulumi.Input[str]] = None,
                 system_id_type: Optional[pulumi.Input[str]] = None,
                 taggings: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTaggingArgs']]]] = None,
                 tcp_mss: Optional[pulumi.Input[int]] = None,
                 trunk: Optional[pulumi.Input[str]] = None,
                 trust_ip1: Optional[pulumi.Input[str]] = None,
                 trust_ip2: Optional[pulumi.Input[str]] = None,
                 trust_ip3: Optional[pulumi.Input[str]] = None,
                 trust_ip61: Optional[pulumi.Input[str]] = None,
                 trust_ip62: Optional[pulumi.Input[str]] = None,
                 trust_ip63: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vindex: Optional[pulumi.Input[int]] = None,
                 vlan_protocol: Optional[pulumi.Input[str]] = None,
                 vlanforward: Optional[pulumi.Input[str]] = None,
                 vlanid: Optional[pulumi.Input[int]] = None,
                 vrf: Optional[pulumi.Input[int]] = None,
                 vrrp_virtual_mac: Optional[pulumi.Input[str]] = None,
                 vrrps: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceVrrpArgs']]]] = None,
                 wccp: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 wins_ip: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Interface resources.
        :param pulumi.Input[str] ac_name: PPPoE server name.
        :param pulumi.Input[str] aggregate: Aggregate interface.
        :param pulumi.Input[str] aggregate_type: Type of aggregation. Valid values: `physical`, `vxlan`.
        :param pulumi.Input[str] algorithm: Frame distribution algorithm.
        :param pulumi.Input[str] alias: Alias will be displayed with the interface name to make it easier to distinguish.
        :param pulumi.Input[str] allowaccess: Permitted types of management access to this interface.
        :param pulumi.Input[str] ap_discover: Enable/disable automatic registration of unknown FortiAP devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] arpforward: Enable/disable ARP forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_cert: HTTPS server certificate.
        :param pulumi.Input[str] auth_portal_addr: Address of captive portal.
        :param pulumi.Input[str] auth_type: PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        :param pulumi.Input[str] auto_auth_extension_device: Enable/disable automatic authorization of dedicated Fortinet extension device on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] autogenerated: Indicates whether the interface is automatically created by FortiGate, for example, created during the VPN creation process. If it is, set it to "auto", else keep it empty.
        :param pulumi.Input[int] bandwidth_measure_time: Bandwidth measure time
        :param pulumi.Input[str] bfd: Bidirectional Forwarding Detection (BFD) settings. Valid values: `global`, `enable`, `disable`.
        :param pulumi.Input[int] bfd_desired_min_tx: BFD desired minimal transmit interval.
        :param pulumi.Input[int] bfd_detect_mult: BFD detection multiplier.
        :param pulumi.Input[int] bfd_required_min_rx: BFD required minimal receive interval.
        :param pulumi.Input[str] broadcast_forticlient_discovery: Enable/disable broadcasting FortiClient discovery messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] broadcast_forward: Enable/disable broadcast forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] captive_portal: Enable/disable captive portal.
        :param pulumi.Input[int] cli_conn_status: CLI connection status.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceClientOptionArgs']]] client_options: DHCP client options. The structure of `client_options` block is documented below.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] dedicated_to: Configure interface for single purpose. Valid values: `none`, `management`.
        :param pulumi.Input[str] default_purdue_level: default purdue level of device detected on this interface. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
        :param pulumi.Input[str] defaultgw: Enable to get the gateway IP from the DHCP or PPPoE server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] detected_peer_mtu: MTU of detected peer (0 - 4294967295).
        :param pulumi.Input[str] detectprotocol: Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
        :param pulumi.Input[str] detectserver: Gateway's ping server for this IP.
        :param pulumi.Input[str] device_access_list: Device access list.
        :param pulumi.Input[str] device_identification: Enable/disable passively gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] device_identification_active_scan: Enable/disable active gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] device_netscan: Enable/disable inclusion of devices detected on this interface in network vulnerability scans. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] device_user_identification: Enable/disable passive gathering of user identity information about users on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] devindex: Device Index.
        :param pulumi.Input[str] dhcp_broadcast_flag: Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp_classless_route_addition: Enable/disable addition of classless static routes retrieved from DHCP server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhcp_client_identifier: DHCP client identifier.
        :param pulumi.Input[str] dhcp_relay_agent_option: Enable/disable DHCP relay agent option. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhcp_relay_circuit_id: DHCP relay circuit ID.
        :param pulumi.Input[str] dhcp_relay_interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] dhcp_relay_interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] dhcp_relay_ip: DHCP relay IP address.
        :param pulumi.Input[str] dhcp_relay_link_selection: DHCP relay link selection.
        :param pulumi.Input[str] dhcp_relay_request_all_server: Enable/disable sending DHCP request to all servers. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp_relay_service: Enable/disable allowing this interface to act as a DHCP relay. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp_relay_source_ip: IP address used by the DHCP relay as its source IP.
        :param pulumi.Input[str] dhcp_relay_type: DHCP relay type (regular or IPsec). Valid values: `regular`, `ipsec`.
        :param pulumi.Input[int] dhcp_renew_time: DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
        :param pulumi.Input[str] dhcp_smart_relay: Enable/disable DHCP smart relay. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceDhcpSnoopingServerListArgs']]] dhcp_snooping_server_lists: Configure DHCP server access list. The structure of `dhcp_snooping_server_list` block is documented below.
        :param pulumi.Input[int] disc_retry_timeout: Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
        :param pulumi.Input[int] disconnect_threshold: Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
        :param pulumi.Input[int] distance: Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
        :param pulumi.Input[str] dns_server_override: Enable/disable use DNS acquired by DHCP or PPPoE. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dns_server_protocol: DNS transport protocols. Valid values: `cleartext`, `dot`, `doh`.
        :param pulumi.Input[str] drop_fragment: Enable/disable drop fragment packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] drop_overlapped_fragment: Enable/disable drop overlapped fragment packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] eap_ca_cert: EAP CA certificate name.
        :param pulumi.Input[str] eap_identity: EAP identity.
        :param pulumi.Input[str] eap_method: EAP method. Valid values: `tls`, `peap`.
        :param pulumi.Input[str] eap_password: EAP password.
        :param pulumi.Input[str] eap_supplicant: Enable/disable EAP-Supplicant. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] eap_user_cert: EAP user certificate name.
        :param pulumi.Input[str] egress_shaping_profile: Outgoing traffic shaping profile.
        :param pulumi.Input[str] endpoint_compliance: Enable/disable endpoint compliance enforcement. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] estimated_downstream_bandwidth: Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
        :param pulumi.Input[int] estimated_upstream_bandwidth: Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
        :param pulumi.Input[str] explicit_ftp_proxy: Enable/disable the explicit FTP proxy on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] explicit_web_proxy: Enable/disable the explicit web proxy on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] external: Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fail_action_on_extender: Action on extender when interface fail . Valid values: `soft-restart`, `hard-restart`, `reboot`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceFailAlertInterfaceArgs']]] fail_alert_interfaces: Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `fail_alert_interfaces` block is documented below.
        :param pulumi.Input[str] fail_alert_method: Select link-failed-signal or link-down method to alert about a failed link. Valid values: `link-failed-signal`, `link-down`.
        :param pulumi.Input[str] fail_detect: Enable/disable fail detection features for this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fail_detect_option: Options for detecting that this interface has failed. Valid values: `detectserver`, `link-down`.
        :param pulumi.Input[str] fortiheartbeat: Enable/disable FortiHeartBeat (FortiTelemetry on GUI). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortilink: Enable FortiLink to dedicate this interface to manage other Fortinet devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] fortilink_backup_link: fortilink split interface backup link.
        :param pulumi.Input[str] fortilink_neighbor_detect: Protocol for FortiGate neighbor discovery. Valid values: `lldp`, `fortilink`.
        :param pulumi.Input[str] fortilink_split_interface: Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortilink_stacking: Enable/disable FortiLink switch-stacking on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] forward_domain: Transparent mode forward domain.
        :param pulumi.Input[str] forward_error_correction: Configure forward error correction (FEC). Valid values: `none`, `disable`, `cl91-rs-fec`, `cl74-fc-fec`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] gwdetect: Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ha_priority: HA election priority for the PING server.
        :param pulumi.Input[str] icmp_accept_redirect: Enable/disable ICMP accept redirect. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] icmp_send_redirect: Enable/disable ICMP send redirect. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ident_accept: Enable/disable authentication for this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] idle_timeout: PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
        :param pulumi.Input[str] ike_saml_server: Configure IKE authentication SAML server.
        :param pulumi.Input[int] inbandwidth: Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
        :param pulumi.Input[str] ingress_shaping_profile: Incoming traffic shaping profile.
        :param pulumi.Input[int] ingress_spillover_threshold: Ingress Spillover threshold (0 - 16776000 kbps).
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[int] internal: Implicitly created.
        :param pulumi.Input[str] ip: Interface IPv4 address and subnet mask, syntax: X.X.X.X/24.
        :param pulumi.Input[str] ip_managed_by_fortiipam: Enable/disable automatic IP address assignment of this interface by FortiIPAM.
        :param pulumi.Input[str] ipmac: Enable/disable IP/MAC binding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sniffer_mode: Enable/disable the use of this interface as a one-armed sniffer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipunnumbered: Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
        :param pulumi.Input['InterfaceIpv6Args'] ipv6: IPv6 of interface. The structure of `ipv6` block is documented below.
        :param pulumi.Input[str] l2forward: Enable/disable l2 forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] lacp_ha_secondary: LACP HA secondary member. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] lacp_ha_slave: LACP HA slave. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] lacp_mode: LACP mode. Valid values: `static`, `passive`, `active`.
        :param pulumi.Input[str] lacp_speed: How often the interface sends LACP messages. Valid values: `slow`, `fast`.
        :param pulumi.Input[int] lcp_echo_interval: Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
        :param pulumi.Input[int] lcp_max_echo_fails: Maximum missed LCP echo messages before disconnect.
        :param pulumi.Input[int] link_up_delay: Number of milliseconds to wait before considering a link is up.
        :param pulumi.Input[str] lldp_network_policy: LLDP-MED network policy profile.
        :param pulumi.Input[str] lldp_reception: Enable/disable Link Layer Discovery Protocol (LLDP) reception. Valid values: `enable`, `disable`, `vdom`.
        :param pulumi.Input[str] lldp_transmission: Enable/disable Link Layer Discovery Protocol (LLDP) transmission. Valid values: `enable`, `disable`, `vdom`.
        :param pulumi.Input[str] macaddr: Change the interface's MAC address.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceManagedDeviceArgs']]] managed_devices: Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managed_device` block is documented below.
        :param pulumi.Input[str] managed_subnetwork_size: Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
        :param pulumi.Input[str] management_ip: High Availability in-band management IP address of this interface.
        :param pulumi.Input[int] measured_downstream_bandwidth: Measured downstream bandwidth (kbps).
        :param pulumi.Input[int] measured_upstream_bandwidth: Measured upstream bandwidth (kbps).
        :param pulumi.Input[str] mediatype: Select SFP media interface type Valid values: `none`, `gmii`, `sgmii`, `sr`, `lr`, `cr`, `sr4`, `lr4`, `cr4`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceMemberArgs']]] members: Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
        :param pulumi.Input[int] min_links: Minimum number of aggregated ports that must be up.
        :param pulumi.Input[str] min_links_down: Action to take when less than the configured minimum number of links are active. Valid values: `operational`, `administrative`.
        :param pulumi.Input[str] mode: Addressing mode (static, DHCP, PPPoE). Valid values: `static`, `dhcp`, `pppoe`.
        :param pulumi.Input[str] monitor_bandwidth: Enable monitoring bandwidth on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mtu: MTU value for this interface.
        :param pulumi.Input[str] mtu_override: Enable to set a custom MTU for this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] ndiscforward: Enable/disable NDISC forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] netbios_forward: Enable/disable NETBIOS forwarding. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] netflow_sampler: Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both). Valid values: `disable`, `tx`, `rx`, `both`.
        :param pulumi.Input[int] outbandwidth: Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
        :param pulumi.Input[int] padt_retry_timeout: PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
        :param pulumi.Input[str] password: PPPoE account's password.
        :param pulumi.Input[int] ping_serv_status: PING server status.
        :param pulumi.Input[int] polling_interval: sFlow polling interval (1 - 255 sec).
        :param pulumi.Input[str] pppoe_unnumbered_negotiate: Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pptp_auth_type: PPTP authentication type. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        :param pulumi.Input[str] pptp_client: Enable/disable PPTP client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pptp_password: PPTP password.
        :param pulumi.Input[str] pptp_server_ip: PPTP server IP address.
        :param pulumi.Input[int] pptp_timeout: Idle timer in minutes (0 for disabled).
        :param pulumi.Input[str] pptp_user: PPTP user name.
        :param pulumi.Input[str] preserve_session_route: Enable/disable preservation of session route when dirty. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Priority of learned routes.
        :param pulumi.Input[str] priority_override: Enable/disable fail back to higher priority port once recovered. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] proxy_captive_portal: Enable/disable proxy captive portal on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] reachable_time: IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
        :param pulumi.Input[str] redundant_interface: Redundant interface.
        :param pulumi.Input[str] remote_ip: Remote IP address of tunnel.
        :param pulumi.Input[str] replacemsg_override_group: Replacement message override group.
        :param pulumi.Input[int] ring_rx: RX ring size.
        :param pulumi.Input[int] ring_tx: TX ring size.
        :param pulumi.Input[str] role: Interface role. Valid values: `lan`, `wan`, `dmz`, `undefined`.
        :param pulumi.Input[str] sample_direction: Data that NetFlow collects (rx, tx, or both). Valid values: `tx`, `rx`, `both`.
        :param pulumi.Input[int] sample_rate: sFlow sample rate (10 - 99999).
        :param pulumi.Input[str] scan_botnet_connections: Enable monitoring or blocking connections to Botnet servers through this interface. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] secondary_ip: Enable/disable adding a secondary IP to this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceSecondaryipArgs']]] secondaryips: Second IP address of interface. The structure of `secondaryip` block is documented below.
        :param pulumi.Input[str] security_exempt_list: Name of security-exempt-list.
        :param pulumi.Input[str] security_external_logout: URL of external authentication logout server.
        :param pulumi.Input[str] security_external_web: URL of external authentication web server.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceSecurityGroupArgs']]] security_groups: User groups that can authenticate with the captive portal. The structure of `security_groups` block is documented below.
        :param pulumi.Input[str] security_mac_auth_bypass: Enable/disable MAC authentication bypass. Valid values: `mac-auth-only`, `enable`, `disable`.
        :param pulumi.Input[str] security_mode: Turn on captive portal authentication for this interface. Valid values: `none`, `captive-portal`, `802.1X`.
        :param pulumi.Input[str] security_redirect_url: URL redirection after disclaimer/authentication.
        :param pulumi.Input[str] service_name: PPPoE service name.
        :param pulumi.Input[str] sflow_sampler: Enable/disable sFlow on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] snmp_index: Permanent SNMP Index of the interface.
        :param pulumi.Input[str] speed: Interface speed. The default setting and the options available depend on the interface hardware.
        :param pulumi.Input[int] spillover_threshold: Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
        :param pulumi.Input[str] src_check: Enable/disable source IP check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Bring the interface up or shut the interface down. Valid values: `up`, `down`.
        :param pulumi.Input[str] stp: Enable/disable STP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] stp_ha_secondary: Control STP behaviour on HA secondary. Valid values: `disable`, `enable`, `priority-adjust`.
        :param pulumi.Input[str] stpforward: Enable/disable STP forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] stpforward_mode: Configure STP forwarding mode. Valid values: `rpl-all-ext-id`, `rpl-bridge-ext-id`, `rpl-nothing`.
        :param pulumi.Input[str] subst: Enable to always send packets from this interface to a destination MAC address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] substitute_dst_mac: Destination MAC address that all packets are sent to from this interface.
        :param pulumi.Input[int] swc_first_create: Initial create for switch-controller VLANs.
        :param pulumi.Input[int] swc_vlan: Creation status for switch-controller VLANs.
        :param pulumi.Input[str] switch: Contained in switch.
        :param pulumi.Input[str] switch_controller_access_vlan: Block FortiSwitch port-to-port traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_arp_inspection: Enable/disable FortiSwitch ARP inspection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_dhcp_snooping: Switch controller DHCP snooping. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_dhcp_snooping_option82: Switch controller DHCP snooping option82. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_dhcp_snooping_verify_mac: Switch controller DHCP snooping verify MAC. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_dynamic: Integrated FortiLink settings for managed FortiSwitch.
        :param pulumi.Input[str] switch_controller_feature: Interface's purpose when assigning traffic (read only).
        :param pulumi.Input[str] switch_controller_igmp_snooping: Switch controller IGMP snooping. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_igmp_snooping_fast_leave: Switch controller IGMP snooping fast-leave. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_igmp_snooping_proxy: Switch controller IGMP snooping proxy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_iot_scanning: Enable/disable managed FortiSwitch IoT scanning. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] switch_controller_learning_limit: Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
        :param pulumi.Input[int] switch_controller_mgmt_vlan: VLAN to use for FortiLink management purposes.
        :param pulumi.Input[str] switch_controller_nac: Integrated NAC settings for managed FortiSwitch.
        :param pulumi.Input[str] switch_controller_netflow_collect: NetFlow collection and processing. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_controller_offload: Enable/disable managed FortiSwitch routing offload. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_offload_gw: Enable/disable managed FortiSwitch routing offload gateway. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_offload_ip: IP for routing offload on FortiSwitch.
        :param pulumi.Input[str] switch_controller_rspan_mode: Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_controller_source_ip: Source IP address used in FortiLink over L3 connections. Valid values: `outbound`, `fixed`.
        :param pulumi.Input[str] switch_controller_traffic_policy: Switch controller traffic policy for the VLAN.
        :param pulumi.Input[str] system_id: Define a system ID for the aggregate interface.
        :param pulumi.Input[str] system_id_type: Method in which system ID is generated. Valid values: `auto`, `user`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceTaggingArgs']]] taggings: Config object tagging. The structure of `tagging` block is documented below.
        :param pulumi.Input[int] tcp_mss: TCP maximum segment size. 0 means do not change segment size.
        :param pulumi.Input[str] trunk: Enable/disable VLAN trunk. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] trust_ip1: Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        :param pulumi.Input[str] trust_ip2: Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        :param pulumi.Input[str] trust_ip3: Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        :param pulumi.Input[str] trust_ip61: Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        :param pulumi.Input[str] trust_ip62: Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        :param pulumi.Input[str] trust_ip63: Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        :param pulumi.Input[str] type: Interface type.
        :param pulumi.Input[str] username: Username of the PPPoE account, provided by your ISP.
        :param pulumi.Input[str] vdom: Interface is in this virtual domain (VDOM).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] vindex: Switch control interface VLAN ID.
        :param pulumi.Input[str] vlan_protocol: Ethernet protocol of VLAN. Valid values: `8021q`, `8021ad`.
        :param pulumi.Input[str] vlanforward: Enable/disable traffic forwarding between VLANs on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] vlanid: VLAN ID (1 - 4094).
        :param pulumi.Input[int] vrf: Virtual Routing Forwarding ID.
        :param pulumi.Input[str] vrrp_virtual_mac: Enable/disable use of virtual MAC for VRRP. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceVrrpArgs']]] vrrps: VRRP configuration. The structure of `vrrp` block is documented below.
        :param pulumi.Input[str] wccp: Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] weight: Default weight for static routes (if route has no weight configured).
        :param pulumi.Input[str] wins_ip: WINS server IP.
        """
        if ac_name is not None:
            pulumi.set(__self__, "ac_name", ac_name)
        if aggregate is not None:
            pulumi.set(__self__, "aggregate", aggregate)
        if aggregate_type is not None:
            pulumi.set(__self__, "aggregate_type", aggregate_type)
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if ap_discover is not None:
            pulumi.set(__self__, "ap_discover", ap_discover)
        if arpforward is not None:
            pulumi.set(__self__, "arpforward", arpforward)
        if auth_cert is not None:
            pulumi.set(__self__, "auth_cert", auth_cert)
        if auth_portal_addr is not None:
            pulumi.set(__self__, "auth_portal_addr", auth_portal_addr)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if auto_auth_extension_device is not None:
            pulumi.set(__self__, "auto_auth_extension_device", auto_auth_extension_device)
        if autogenerated is not None:
            pulumi.set(__self__, "autogenerated", autogenerated)
        if bandwidth_measure_time is not None:
            pulumi.set(__self__, "bandwidth_measure_time", bandwidth_measure_time)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if bfd_desired_min_tx is not None:
            pulumi.set(__self__, "bfd_desired_min_tx", bfd_desired_min_tx)
        if bfd_detect_mult is not None:
            pulumi.set(__self__, "bfd_detect_mult", bfd_detect_mult)
        if bfd_required_min_rx is not None:
            pulumi.set(__self__, "bfd_required_min_rx", bfd_required_min_rx)
        if broadcast_forticlient_discovery is not None:
            pulumi.set(__self__, "broadcast_forticlient_discovery", broadcast_forticlient_discovery)
        if broadcast_forward is not None:
            pulumi.set(__self__, "broadcast_forward", broadcast_forward)
        if captive_portal is not None:
            pulumi.set(__self__, "captive_portal", captive_portal)
        if cli_conn_status is not None:
            pulumi.set(__self__, "cli_conn_status", cli_conn_status)
        if client_options is not None:
            pulumi.set(__self__, "client_options", client_options)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if dedicated_to is not None:
            pulumi.set(__self__, "dedicated_to", dedicated_to)
        if default_purdue_level is not None:
            pulumi.set(__self__, "default_purdue_level", default_purdue_level)
        if defaultgw is not None:
            pulumi.set(__self__, "defaultgw", defaultgw)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detected_peer_mtu is not None:
            pulumi.set(__self__, "detected_peer_mtu", detected_peer_mtu)
        if detectprotocol is not None:
            pulumi.set(__self__, "detectprotocol", detectprotocol)
        if detectserver is not None:
            pulumi.set(__self__, "detectserver", detectserver)
        if device_access_list is not None:
            pulumi.set(__self__, "device_access_list", device_access_list)
        if device_identification is not None:
            pulumi.set(__self__, "device_identification", device_identification)
        if device_identification_active_scan is not None:
            pulumi.set(__self__, "device_identification_active_scan", device_identification_active_scan)
        if device_netscan is not None:
            pulumi.set(__self__, "device_netscan", device_netscan)
        if device_user_identification is not None:
            pulumi.set(__self__, "device_user_identification", device_user_identification)
        if devindex is not None:
            pulumi.set(__self__, "devindex", devindex)
        if dhcp_broadcast_flag is not None:
            pulumi.set(__self__, "dhcp_broadcast_flag", dhcp_broadcast_flag)
        if dhcp_classless_route_addition is not None:
            pulumi.set(__self__, "dhcp_classless_route_addition", dhcp_classless_route_addition)
        if dhcp_client_identifier is not None:
            pulumi.set(__self__, "dhcp_client_identifier", dhcp_client_identifier)
        if dhcp_relay_agent_option is not None:
            pulumi.set(__self__, "dhcp_relay_agent_option", dhcp_relay_agent_option)
        if dhcp_relay_circuit_id is not None:
            pulumi.set(__self__, "dhcp_relay_circuit_id", dhcp_relay_circuit_id)
        if dhcp_relay_interface is not None:
            pulumi.set(__self__, "dhcp_relay_interface", dhcp_relay_interface)
        if dhcp_relay_interface_select_method is not None:
            pulumi.set(__self__, "dhcp_relay_interface_select_method", dhcp_relay_interface_select_method)
        if dhcp_relay_ip is not None:
            pulumi.set(__self__, "dhcp_relay_ip", dhcp_relay_ip)
        if dhcp_relay_link_selection is not None:
            pulumi.set(__self__, "dhcp_relay_link_selection", dhcp_relay_link_selection)
        if dhcp_relay_request_all_server is not None:
            pulumi.set(__self__, "dhcp_relay_request_all_server", dhcp_relay_request_all_server)
        if dhcp_relay_service is not None:
            pulumi.set(__self__, "dhcp_relay_service", dhcp_relay_service)
        if dhcp_relay_source_ip is not None:
            pulumi.set(__self__, "dhcp_relay_source_ip", dhcp_relay_source_ip)
        if dhcp_relay_type is not None:
            pulumi.set(__self__, "dhcp_relay_type", dhcp_relay_type)
        if dhcp_renew_time is not None:
            pulumi.set(__self__, "dhcp_renew_time", dhcp_renew_time)
        if dhcp_smart_relay is not None:
            pulumi.set(__self__, "dhcp_smart_relay", dhcp_smart_relay)
        if dhcp_snooping_server_lists is not None:
            pulumi.set(__self__, "dhcp_snooping_server_lists", dhcp_snooping_server_lists)
        if disc_retry_timeout is not None:
            pulumi.set(__self__, "disc_retry_timeout", disc_retry_timeout)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if dns_server_override is not None:
            pulumi.set(__self__, "dns_server_override", dns_server_override)
        if dns_server_protocol is not None:
            pulumi.set(__self__, "dns_server_protocol", dns_server_protocol)
        if drop_fragment is not None:
            pulumi.set(__self__, "drop_fragment", drop_fragment)
        if drop_overlapped_fragment is not None:
            pulumi.set(__self__, "drop_overlapped_fragment", drop_overlapped_fragment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if eap_ca_cert is not None:
            pulumi.set(__self__, "eap_ca_cert", eap_ca_cert)
        if eap_identity is not None:
            pulumi.set(__self__, "eap_identity", eap_identity)
        if eap_method is not None:
            pulumi.set(__self__, "eap_method", eap_method)
        if eap_password is not None:
            pulumi.set(__self__, "eap_password", eap_password)
        if eap_supplicant is not None:
            pulumi.set(__self__, "eap_supplicant", eap_supplicant)
        if eap_user_cert is not None:
            pulumi.set(__self__, "eap_user_cert", eap_user_cert)
        if egress_shaping_profile is not None:
            pulumi.set(__self__, "egress_shaping_profile", egress_shaping_profile)
        if endpoint_compliance is not None:
            pulumi.set(__self__, "endpoint_compliance", endpoint_compliance)
        if estimated_downstream_bandwidth is not None:
            pulumi.set(__self__, "estimated_downstream_bandwidth", estimated_downstream_bandwidth)
        if estimated_upstream_bandwidth is not None:
            pulumi.set(__self__, "estimated_upstream_bandwidth", estimated_upstream_bandwidth)
        if explicit_ftp_proxy is not None:
            pulumi.set(__self__, "explicit_ftp_proxy", explicit_ftp_proxy)
        if explicit_web_proxy is not None:
            pulumi.set(__self__, "explicit_web_proxy", explicit_web_proxy)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if fail_action_on_extender is not None:
            pulumi.set(__self__, "fail_action_on_extender", fail_action_on_extender)
        if fail_alert_interfaces is not None:
            pulumi.set(__self__, "fail_alert_interfaces", fail_alert_interfaces)
        if fail_alert_method is not None:
            pulumi.set(__self__, "fail_alert_method", fail_alert_method)
        if fail_detect is not None:
            pulumi.set(__self__, "fail_detect", fail_detect)
        if fail_detect_option is not None:
            pulumi.set(__self__, "fail_detect_option", fail_detect_option)
        if fortiheartbeat is not None:
            pulumi.set(__self__, "fortiheartbeat", fortiheartbeat)
        if fortilink is not None:
            pulumi.set(__self__, "fortilink", fortilink)
        if fortilink_backup_link is not None:
            pulumi.set(__self__, "fortilink_backup_link", fortilink_backup_link)
        if fortilink_neighbor_detect is not None:
            pulumi.set(__self__, "fortilink_neighbor_detect", fortilink_neighbor_detect)
        if fortilink_split_interface is not None:
            pulumi.set(__self__, "fortilink_split_interface", fortilink_split_interface)
        if fortilink_stacking is not None:
            pulumi.set(__self__, "fortilink_stacking", fortilink_stacking)
        if forward_domain is not None:
            pulumi.set(__self__, "forward_domain", forward_domain)
        if forward_error_correction is not None:
            pulumi.set(__self__, "forward_error_correction", forward_error_correction)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gwdetect is not None:
            pulumi.set(__self__, "gwdetect", gwdetect)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if icmp_accept_redirect is not None:
            pulumi.set(__self__, "icmp_accept_redirect", icmp_accept_redirect)
        if icmp_send_redirect is not None:
            pulumi.set(__self__, "icmp_send_redirect", icmp_send_redirect)
        if ident_accept is not None:
            pulumi.set(__self__, "ident_accept", ident_accept)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if ike_saml_server is not None:
            pulumi.set(__self__, "ike_saml_server", ike_saml_server)
        if inbandwidth is not None:
            pulumi.set(__self__, "inbandwidth", inbandwidth)
        if ingress_shaping_profile is not None:
            pulumi.set(__self__, "ingress_shaping_profile", ingress_shaping_profile)
        if ingress_spillover_threshold is not None:
            pulumi.set(__self__, "ingress_spillover_threshold", ingress_spillover_threshold)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if internal is not None:
            pulumi.set(__self__, "internal", internal)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip_managed_by_fortiipam is not None:
            pulumi.set(__self__, "ip_managed_by_fortiipam", ip_managed_by_fortiipam)
        if ipmac is not None:
            pulumi.set(__self__, "ipmac", ipmac)
        if ips_sniffer_mode is not None:
            pulumi.set(__self__, "ips_sniffer_mode", ips_sniffer_mode)
        if ipunnumbered is not None:
            pulumi.set(__self__, "ipunnumbered", ipunnumbered)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if l2forward is not None:
            pulumi.set(__self__, "l2forward", l2forward)
        if lacp_ha_secondary is not None:
            pulumi.set(__self__, "lacp_ha_secondary", lacp_ha_secondary)
        if lacp_ha_slave is not None:
            pulumi.set(__self__, "lacp_ha_slave", lacp_ha_slave)
        if lacp_mode is not None:
            pulumi.set(__self__, "lacp_mode", lacp_mode)
        if lacp_speed is not None:
            pulumi.set(__self__, "lacp_speed", lacp_speed)
        if lcp_echo_interval is not None:
            pulumi.set(__self__, "lcp_echo_interval", lcp_echo_interval)
        if lcp_max_echo_fails is not None:
            pulumi.set(__self__, "lcp_max_echo_fails", lcp_max_echo_fails)
        if link_up_delay is not None:
            pulumi.set(__self__, "link_up_delay", link_up_delay)
        if lldp_network_policy is not None:
            pulumi.set(__self__, "lldp_network_policy", lldp_network_policy)
        if lldp_reception is not None:
            pulumi.set(__self__, "lldp_reception", lldp_reception)
        if lldp_transmission is not None:
            pulumi.set(__self__, "lldp_transmission", lldp_transmission)
        if macaddr is not None:
            pulumi.set(__self__, "macaddr", macaddr)
        if managed_devices is not None:
            pulumi.set(__self__, "managed_devices", managed_devices)
        if managed_subnetwork_size is not None:
            pulumi.set(__self__, "managed_subnetwork_size", managed_subnetwork_size)
        if management_ip is not None:
            pulumi.set(__self__, "management_ip", management_ip)
        if measured_downstream_bandwidth is not None:
            pulumi.set(__self__, "measured_downstream_bandwidth", measured_downstream_bandwidth)
        if measured_upstream_bandwidth is not None:
            pulumi.set(__self__, "measured_upstream_bandwidth", measured_upstream_bandwidth)
        if mediatype is not None:
            pulumi.set(__self__, "mediatype", mediatype)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if min_links is not None:
            pulumi.set(__self__, "min_links", min_links)
        if min_links_down is not None:
            pulumi.set(__self__, "min_links_down", min_links_down)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if monitor_bandwidth is not None:
            pulumi.set(__self__, "monitor_bandwidth", monitor_bandwidth)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_override is not None:
            pulumi.set(__self__, "mtu_override", mtu_override)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ndiscforward is not None:
            pulumi.set(__self__, "ndiscforward", ndiscforward)
        if netbios_forward is not None:
            pulumi.set(__self__, "netbios_forward", netbios_forward)
        if netflow_sampler is not None:
            pulumi.set(__self__, "netflow_sampler", netflow_sampler)
        if outbandwidth is not None:
            pulumi.set(__self__, "outbandwidth", outbandwidth)
        if padt_retry_timeout is not None:
            pulumi.set(__self__, "padt_retry_timeout", padt_retry_timeout)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ping_serv_status is not None:
            pulumi.set(__self__, "ping_serv_status", ping_serv_status)
        if polling_interval is not None:
            pulumi.set(__self__, "polling_interval", polling_interval)
        if pppoe_unnumbered_negotiate is not None:
            pulumi.set(__self__, "pppoe_unnumbered_negotiate", pppoe_unnumbered_negotiate)
        if pptp_auth_type is not None:
            pulumi.set(__self__, "pptp_auth_type", pptp_auth_type)
        if pptp_client is not None:
            pulumi.set(__self__, "pptp_client", pptp_client)
        if pptp_password is not None:
            pulumi.set(__self__, "pptp_password", pptp_password)
        if pptp_server_ip is not None:
            pulumi.set(__self__, "pptp_server_ip", pptp_server_ip)
        if pptp_timeout is not None:
            pulumi.set(__self__, "pptp_timeout", pptp_timeout)
        if pptp_user is not None:
            pulumi.set(__self__, "pptp_user", pptp_user)
        if preserve_session_route is not None:
            pulumi.set(__self__, "preserve_session_route", preserve_session_route)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_override is not None:
            pulumi.set(__self__, "priority_override", priority_override)
        if proxy_captive_portal is not None:
            pulumi.set(__self__, "proxy_captive_portal", proxy_captive_portal)
        if reachable_time is not None:
            pulumi.set(__self__, "reachable_time", reachable_time)
        if redundant_interface is not None:
            pulumi.set(__self__, "redundant_interface", redundant_interface)
        if remote_ip is not None:
            pulumi.set(__self__, "remote_ip", remote_ip)
        if replacemsg_override_group is not None:
            pulumi.set(__self__, "replacemsg_override_group", replacemsg_override_group)
        if ring_rx is not None:
            pulumi.set(__self__, "ring_rx", ring_rx)
        if ring_tx is not None:
            pulumi.set(__self__, "ring_tx", ring_tx)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if sample_direction is not None:
            pulumi.set(__self__, "sample_direction", sample_direction)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if secondary_ip is not None:
            pulumi.set(__self__, "secondary_ip", secondary_ip)
        if secondaryips is not None:
            pulumi.set(__self__, "secondaryips", secondaryips)
        if security_exempt_list is not None:
            pulumi.set(__self__, "security_exempt_list", security_exempt_list)
        if security_external_logout is not None:
            pulumi.set(__self__, "security_external_logout", security_external_logout)
        if security_external_web is not None:
            pulumi.set(__self__, "security_external_web", security_external_web)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if security_mac_auth_bypass is not None:
            pulumi.set(__self__, "security_mac_auth_bypass", security_mac_auth_bypass)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if security_redirect_url is not None:
            pulumi.set(__self__, "security_redirect_url", security_redirect_url)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if sflow_sampler is not None:
            pulumi.set(__self__, "sflow_sampler", sflow_sampler)
        if snmp_index is not None:
            pulumi.set(__self__, "snmp_index", snmp_index)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if spillover_threshold is not None:
            pulumi.set(__self__, "spillover_threshold", spillover_threshold)
        if src_check is not None:
            pulumi.set(__self__, "src_check", src_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stp is not None:
            pulumi.set(__self__, "stp", stp)
        if stp_ha_secondary is not None:
            pulumi.set(__self__, "stp_ha_secondary", stp_ha_secondary)
        if stpforward is not None:
            pulumi.set(__self__, "stpforward", stpforward)
        if stpforward_mode is not None:
            pulumi.set(__self__, "stpforward_mode", stpforward_mode)
        if subst is not None:
            pulumi.set(__self__, "subst", subst)
        if substitute_dst_mac is not None:
            pulumi.set(__self__, "substitute_dst_mac", substitute_dst_mac)
        if swc_first_create is not None:
            pulumi.set(__self__, "swc_first_create", swc_first_create)
        if swc_vlan is not None:
            pulumi.set(__self__, "swc_vlan", swc_vlan)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if switch_controller_access_vlan is not None:
            pulumi.set(__self__, "switch_controller_access_vlan", switch_controller_access_vlan)
        if switch_controller_arp_inspection is not None:
            pulumi.set(__self__, "switch_controller_arp_inspection", switch_controller_arp_inspection)
        if switch_controller_dhcp_snooping is not None:
            pulumi.set(__self__, "switch_controller_dhcp_snooping", switch_controller_dhcp_snooping)
        if switch_controller_dhcp_snooping_option82 is not None:
            pulumi.set(__self__, "switch_controller_dhcp_snooping_option82", switch_controller_dhcp_snooping_option82)
        if switch_controller_dhcp_snooping_verify_mac is not None:
            pulumi.set(__self__, "switch_controller_dhcp_snooping_verify_mac", switch_controller_dhcp_snooping_verify_mac)
        if switch_controller_dynamic is not None:
            pulumi.set(__self__, "switch_controller_dynamic", switch_controller_dynamic)
        if switch_controller_feature is not None:
            pulumi.set(__self__, "switch_controller_feature", switch_controller_feature)
        if switch_controller_igmp_snooping is not None:
            pulumi.set(__self__, "switch_controller_igmp_snooping", switch_controller_igmp_snooping)
        if switch_controller_igmp_snooping_fast_leave is not None:
            pulumi.set(__self__, "switch_controller_igmp_snooping_fast_leave", switch_controller_igmp_snooping_fast_leave)
        if switch_controller_igmp_snooping_proxy is not None:
            pulumi.set(__self__, "switch_controller_igmp_snooping_proxy", switch_controller_igmp_snooping_proxy)
        if switch_controller_iot_scanning is not None:
            pulumi.set(__self__, "switch_controller_iot_scanning", switch_controller_iot_scanning)
        if switch_controller_learning_limit is not None:
            pulumi.set(__self__, "switch_controller_learning_limit", switch_controller_learning_limit)
        if switch_controller_mgmt_vlan is not None:
            pulumi.set(__self__, "switch_controller_mgmt_vlan", switch_controller_mgmt_vlan)
        if switch_controller_nac is not None:
            pulumi.set(__self__, "switch_controller_nac", switch_controller_nac)
        if switch_controller_netflow_collect is not None:
            pulumi.set(__self__, "switch_controller_netflow_collect", switch_controller_netflow_collect)
        if switch_controller_offload is not None:
            pulumi.set(__self__, "switch_controller_offload", switch_controller_offload)
        if switch_controller_offload_gw is not None:
            pulumi.set(__self__, "switch_controller_offload_gw", switch_controller_offload_gw)
        if switch_controller_offload_ip is not None:
            pulumi.set(__self__, "switch_controller_offload_ip", switch_controller_offload_ip)
        if switch_controller_rspan_mode is not None:
            pulumi.set(__self__, "switch_controller_rspan_mode", switch_controller_rspan_mode)
        if switch_controller_source_ip is not None:
            pulumi.set(__self__, "switch_controller_source_ip", switch_controller_source_ip)
        if switch_controller_traffic_policy is not None:
            pulumi.set(__self__, "switch_controller_traffic_policy", switch_controller_traffic_policy)
        if system_id is not None:
            pulumi.set(__self__, "system_id", system_id)
        if system_id_type is not None:
            pulumi.set(__self__, "system_id_type", system_id_type)
        if taggings is not None:
            pulumi.set(__self__, "taggings", taggings)
        if tcp_mss is not None:
            pulumi.set(__self__, "tcp_mss", tcp_mss)
        if trunk is not None:
            pulumi.set(__self__, "trunk", trunk)
        if trust_ip1 is not None:
            pulumi.set(__self__, "trust_ip1", trust_ip1)
        if trust_ip2 is not None:
            pulumi.set(__self__, "trust_ip2", trust_ip2)
        if trust_ip3 is not None:
            pulumi.set(__self__, "trust_ip3", trust_ip3)
        if trust_ip61 is not None:
            pulumi.set(__self__, "trust_ip61", trust_ip61)
        if trust_ip62 is not None:
            pulumi.set(__self__, "trust_ip62", trust_ip62)
        if trust_ip63 is not None:
            pulumi.set(__self__, "trust_ip63", trust_ip63)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vindex is not None:
            pulumi.set(__self__, "vindex", vindex)
        if vlan_protocol is not None:
            pulumi.set(__self__, "vlan_protocol", vlan_protocol)
        if vlanforward is not None:
            pulumi.set(__self__, "vlanforward", vlanforward)
        if vlanid is not None:
            pulumi.set(__self__, "vlanid", vlanid)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)
        if vrrp_virtual_mac is not None:
            pulumi.set(__self__, "vrrp_virtual_mac", vrrp_virtual_mac)
        if vrrps is not None:
            pulumi.set(__self__, "vrrps", vrrps)
        if wccp is not None:
            pulumi.set(__self__, "wccp", wccp)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if wins_ip is not None:
            pulumi.set(__self__, "wins_ip", wins_ip)

    @property
    @pulumi.getter(name="acName")
    def ac_name(self) -> Optional[pulumi.Input[str]]:
        """
        PPPoE server name.
        """
        return pulumi.get(self, "ac_name")

    @ac_name.setter
    def ac_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ac_name", value)

    @property
    @pulumi.getter
    def aggregate(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregate interface.
        """
        return pulumi.get(self, "aggregate")

    @aggregate.setter
    def aggregate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregate", value)

    @property
    @pulumi.getter(name="aggregateType")
    def aggregate_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of aggregation. Valid values: `physical`, `vxlan`.
        """
        return pulumi.get(self, "aggregate_type")

    @aggregate_type.setter
    def aggregate_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregate_type", value)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Frame distribution algorithm.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Alias will be displayed with the interface name to make it easier to distinguish.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        """
        Permitted types of management access to this interface.
        """
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter(name="apDiscover")
    def ap_discover(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic registration of unknown FortiAP devices. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_discover")

    @ap_discover.setter
    def ap_discover(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_discover", value)

    @property
    @pulumi.getter
    def arpforward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ARP forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "arpforward")

    @arpforward.setter
    def arpforward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arpforward", value)

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> Optional[pulumi.Input[str]]:
        """
        HTTPS server certificate.
        """
        return pulumi.get(self, "auth_cert")

    @auth_cert.setter
    def auth_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_cert", value)

    @property
    @pulumi.getter(name="authPortalAddr")
    def auth_portal_addr(self) -> Optional[pulumi.Input[str]]:
        """
        Address of captive portal.
        """
        return pulumi.get(self, "auth_portal_addr")

    @auth_portal_addr.setter
    def auth_portal_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_portal_addr", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="autoAuthExtensionDevice")
    def auto_auth_extension_device(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic authorization of dedicated Fortinet extension device on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_auth_extension_device")

    @auto_auth_extension_device.setter
    def auto_auth_extension_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_auth_extension_device", value)

    @property
    @pulumi.getter
    def autogenerated(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates whether the interface is automatically created by FortiGate, for example, created during the VPN creation process. If it is, set it to "auto", else keep it empty.
        """
        return pulumi.get(self, "autogenerated")

    @autogenerated.setter
    def autogenerated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autogenerated", value)

    @property
    @pulumi.getter(name="bandwidthMeasureTime")
    def bandwidth_measure_time(self) -> Optional[pulumi.Input[int]]:
        """
        Bandwidth measure time
        """
        return pulumi.get(self, "bandwidth_measure_time")

    @bandwidth_measure_time.setter
    def bandwidth_measure_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_measure_time", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Bidirectional Forwarding Detection (BFD) settings. Valid values: `global`, `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="bfdDesiredMinTx")
    def bfd_desired_min_tx(self) -> Optional[pulumi.Input[int]]:
        """
        BFD desired minimal transmit interval.
        """
        return pulumi.get(self, "bfd_desired_min_tx")

    @bfd_desired_min_tx.setter
    def bfd_desired_min_tx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_desired_min_tx", value)

    @property
    @pulumi.getter(name="bfdDetectMult")
    def bfd_detect_mult(self) -> Optional[pulumi.Input[int]]:
        """
        BFD detection multiplier.
        """
        return pulumi.get(self, "bfd_detect_mult")

    @bfd_detect_mult.setter
    def bfd_detect_mult(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_detect_mult", value)

    @property
    @pulumi.getter(name="bfdRequiredMinRx")
    def bfd_required_min_rx(self) -> Optional[pulumi.Input[int]]:
        """
        BFD required minimal receive interval.
        """
        return pulumi.get(self, "bfd_required_min_rx")

    @bfd_required_min_rx.setter
    def bfd_required_min_rx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_required_min_rx", value)

    @property
    @pulumi.getter(name="broadcastForticlientDiscovery")
    def broadcast_forticlient_discovery(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable broadcasting FortiClient discovery messages. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "broadcast_forticlient_discovery")

    @broadcast_forticlient_discovery.setter
    def broadcast_forticlient_discovery(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadcast_forticlient_discovery", value)

    @property
    @pulumi.getter(name="broadcastForward")
    def broadcast_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable broadcast forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "broadcast_forward")

    @broadcast_forward.setter
    def broadcast_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadcast_forward", value)

    @property
    @pulumi.getter(name="captivePortal")
    def captive_portal(self) -> Optional[pulumi.Input[int]]:
        """
        Enable/disable captive portal.
        """
        return pulumi.get(self, "captive_portal")

    @captive_portal.setter
    def captive_portal(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "captive_portal", value)

    @property
    @pulumi.getter(name="cliConnStatus")
    def cli_conn_status(self) -> Optional[pulumi.Input[int]]:
        """
        CLI connection status.
        """
        return pulumi.get(self, "cli_conn_status")

    @cli_conn_status.setter
    def cli_conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cli_conn_status", value)

    @property
    @pulumi.getter(name="clientOptions")
    def client_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceClientOptionArgs']]]]:
        """
        DHCP client options. The structure of `client_options` block is documented below.
        """
        return pulumi.get(self, "client_options")

    @client_options.setter
    def client_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceClientOptionArgs']]]]):
        pulumi.set(self, "client_options", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[int]]:
        """
        Color of icon on the GUI.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="dedicatedTo")
    def dedicated_to(self) -> Optional[pulumi.Input[str]]:
        """
        Configure interface for single purpose. Valid values: `none`, `management`.
        """
        return pulumi.get(self, "dedicated_to")

    @dedicated_to.setter
    def dedicated_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dedicated_to", value)

    @property
    @pulumi.getter(name="defaultPurdueLevel")
    def default_purdue_level(self) -> Optional[pulumi.Input[str]]:
        """
        default purdue level of device detected on this interface. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
        """
        return pulumi.get(self, "default_purdue_level")

    @default_purdue_level.setter
    def default_purdue_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_purdue_level", value)

    @property
    @pulumi.getter
    def defaultgw(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to get the gateway IP from the DHCP or PPPoE server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "defaultgw")

    @defaultgw.setter
    def defaultgw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "defaultgw", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="detectedPeerMtu")
    def detected_peer_mtu(self) -> Optional[pulumi.Input[int]]:
        """
        MTU of detected peer (0 - 4294967295).
        """
        return pulumi.get(self, "detected_peer_mtu")

    @detected_peer_mtu.setter
    def detected_peer_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "detected_peer_mtu", value)

    @property
    @pulumi.getter
    def detectprotocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
        """
        return pulumi.get(self, "detectprotocol")

    @detectprotocol.setter
    def detectprotocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detectprotocol", value)

    @property
    @pulumi.getter
    def detectserver(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway's ping server for this IP.
        """
        return pulumi.get(self, "detectserver")

    @detectserver.setter
    def detectserver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detectserver", value)

    @property
    @pulumi.getter(name="deviceAccessList")
    def device_access_list(self) -> Optional[pulumi.Input[str]]:
        """
        Device access list.
        """
        return pulumi.get(self, "device_access_list")

    @device_access_list.setter
    def device_access_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_access_list", value)

    @property
    @pulumi.getter(name="deviceIdentification")
    def device_identification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable passively gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "device_identification")

    @device_identification.setter
    def device_identification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_identification", value)

    @property
    @pulumi.getter(name="deviceIdentificationActiveScan")
    def device_identification_active_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable active gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "device_identification_active_scan")

    @device_identification_active_scan.setter
    def device_identification_active_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_identification_active_scan", value)

    @property
    @pulumi.getter(name="deviceNetscan")
    def device_netscan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable inclusion of devices detected on this interface in network vulnerability scans. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "device_netscan")

    @device_netscan.setter
    def device_netscan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_netscan", value)

    @property
    @pulumi.getter(name="deviceUserIdentification")
    def device_user_identification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable passive gathering of user identity information about users on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "device_user_identification")

    @device_user_identification.setter
    def device_user_identification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_user_identification", value)

    @property
    @pulumi.getter
    def devindex(self) -> Optional[pulumi.Input[int]]:
        """
        Device Index.
        """
        return pulumi.get(self, "devindex")

    @devindex.setter
    def devindex(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "devindex", value)

    @property
    @pulumi.getter(name="dhcpBroadcastFlag")
    def dhcp_broadcast_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp_broadcast_flag")

    @dhcp_broadcast_flag.setter
    def dhcp_broadcast_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_broadcast_flag", value)

    @property
    @pulumi.getter(name="dhcpClasslessRouteAddition")
    def dhcp_classless_route_addition(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable addition of classless static routes retrieved from DHCP server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_classless_route_addition")

    @dhcp_classless_route_addition.setter
    def dhcp_classless_route_addition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_classless_route_addition", value)

    @property
    @pulumi.getter(name="dhcpClientIdentifier")
    def dhcp_client_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP client identifier.
        """
        return pulumi.get(self, "dhcp_client_identifier")

    @dhcp_client_identifier.setter
    def dhcp_client_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_client_identifier", value)

    @property
    @pulumi.getter(name="dhcpRelayAgentOption")
    def dhcp_relay_agent_option(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DHCP relay agent option. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_relay_agent_option")

    @dhcp_relay_agent_option.setter
    def dhcp_relay_agent_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_agent_option", value)

    @property
    @pulumi.getter(name="dhcpRelayCircuitId")
    def dhcp_relay_circuit_id(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP relay circuit ID.
        """
        return pulumi.get(self, "dhcp_relay_circuit_id")

    @dhcp_relay_circuit_id.setter
    def dhcp_relay_circuit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_circuit_id", value)

    @property
    @pulumi.getter(name="dhcpRelayInterface")
    def dhcp_relay_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "dhcp_relay_interface")

    @dhcp_relay_interface.setter
    def dhcp_relay_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_interface", value)

    @property
    @pulumi.getter(name="dhcpRelayInterfaceSelectMethod")
    def dhcp_relay_interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "dhcp_relay_interface_select_method")

    @dhcp_relay_interface_select_method.setter
    def dhcp_relay_interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_interface_select_method", value)

    @property
    @pulumi.getter(name="dhcpRelayIp")
    def dhcp_relay_ip(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP relay IP address.
        """
        return pulumi.get(self, "dhcp_relay_ip")

    @dhcp_relay_ip.setter
    def dhcp_relay_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_ip", value)

    @property
    @pulumi.getter(name="dhcpRelayLinkSelection")
    def dhcp_relay_link_selection(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP relay link selection.
        """
        return pulumi.get(self, "dhcp_relay_link_selection")

    @dhcp_relay_link_selection.setter
    def dhcp_relay_link_selection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_link_selection", value)

    @property
    @pulumi.getter(name="dhcpRelayRequestAllServer")
    def dhcp_relay_request_all_server(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending DHCP request to all servers. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp_relay_request_all_server")

    @dhcp_relay_request_all_server.setter
    def dhcp_relay_request_all_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_request_all_server", value)

    @property
    @pulumi.getter(name="dhcpRelayService")
    def dhcp_relay_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing this interface to act as a DHCP relay. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp_relay_service")

    @dhcp_relay_service.setter
    def dhcp_relay_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_service", value)

    @property
    @pulumi.getter(name="dhcpRelaySourceIp")
    def dhcp_relay_source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address used by the DHCP relay as its source IP.
        """
        return pulumi.get(self, "dhcp_relay_source_ip")

    @dhcp_relay_source_ip.setter
    def dhcp_relay_source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_source_ip", value)

    @property
    @pulumi.getter(name="dhcpRelayType")
    def dhcp_relay_type(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP relay type (regular or IPsec). Valid values: `regular`, `ipsec`.
        """
        return pulumi.get(self, "dhcp_relay_type")

    @dhcp_relay_type.setter
    def dhcp_relay_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_relay_type", value)

    @property
    @pulumi.getter(name="dhcpRenewTime")
    def dhcp_renew_time(self) -> Optional[pulumi.Input[int]]:
        """
        DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
        """
        return pulumi.get(self, "dhcp_renew_time")

    @dhcp_renew_time.setter
    def dhcp_renew_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp_renew_time", value)

    @property
    @pulumi.getter(name="dhcpSmartRelay")
    def dhcp_smart_relay(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DHCP smart relay. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp_smart_relay")

    @dhcp_smart_relay.setter
    def dhcp_smart_relay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_smart_relay", value)

    @property
    @pulumi.getter(name="dhcpSnoopingServerLists")
    def dhcp_snooping_server_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceDhcpSnoopingServerListArgs']]]]:
        """
        Configure DHCP server access list. The structure of `dhcp_snooping_server_list` block is documented below.
        """
        return pulumi.get(self, "dhcp_snooping_server_lists")

    @dhcp_snooping_server_lists.setter
    def dhcp_snooping_server_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceDhcpSnoopingServerListArgs']]]]):
        pulumi.set(self, "dhcp_snooping_server_lists", value)

    @property
    @pulumi.getter(name="discRetryTimeout")
    def disc_retry_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
        """
        return pulumi.get(self, "disc_retry_timeout")

    @disc_retry_timeout.setter
    def disc_retry_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disc_retry_timeout", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
        """
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter(name="dnsServerOverride")
    def dns_server_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use DNS acquired by DHCP or PPPoE. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dns_server_override")

    @dns_server_override.setter
    def dns_server_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server_override", value)

    @property
    @pulumi.getter(name="dnsServerProtocol")
    def dns_server_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        DNS transport protocols. Valid values: `cleartext`, `dot`, `doh`.
        """
        return pulumi.get(self, "dns_server_protocol")

    @dns_server_protocol.setter
    def dns_server_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server_protocol", value)

    @property
    @pulumi.getter(name="dropFragment")
    def drop_fragment(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable drop fragment packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "drop_fragment")

    @drop_fragment.setter
    def drop_fragment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_fragment", value)

    @property
    @pulumi.getter(name="dropOverlappedFragment")
    def drop_overlapped_fragment(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable drop overlapped fragment packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "drop_overlapped_fragment")

    @drop_overlapped_fragment.setter
    def drop_overlapped_fragment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_overlapped_fragment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="eapCaCert")
    def eap_ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        EAP CA certificate name.
        """
        return pulumi.get(self, "eap_ca_cert")

    @eap_ca_cert.setter
    def eap_ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_ca_cert", value)

    @property
    @pulumi.getter(name="eapIdentity")
    def eap_identity(self) -> Optional[pulumi.Input[str]]:
        """
        EAP identity.
        """
        return pulumi.get(self, "eap_identity")

    @eap_identity.setter
    def eap_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_identity", value)

    @property
    @pulumi.getter(name="eapMethod")
    def eap_method(self) -> Optional[pulumi.Input[str]]:
        """
        EAP method. Valid values: `tls`, `peap`.
        """
        return pulumi.get(self, "eap_method")

    @eap_method.setter
    def eap_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_method", value)

    @property
    @pulumi.getter(name="eapPassword")
    def eap_password(self) -> Optional[pulumi.Input[str]]:
        """
        EAP password.
        """
        return pulumi.get(self, "eap_password")

    @eap_password.setter
    def eap_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_password", value)

    @property
    @pulumi.getter(name="eapSupplicant")
    def eap_supplicant(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable EAP-Supplicant. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eap_supplicant")

    @eap_supplicant.setter
    def eap_supplicant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_supplicant", value)

    @property
    @pulumi.getter(name="eapUserCert")
    def eap_user_cert(self) -> Optional[pulumi.Input[str]]:
        """
        EAP user certificate name.
        """
        return pulumi.get(self, "eap_user_cert")

    @eap_user_cert.setter
    def eap_user_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_user_cert", value)

    @property
    @pulumi.getter(name="egressShapingProfile")
    def egress_shaping_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Outgoing traffic shaping profile.
        """
        return pulumi.get(self, "egress_shaping_profile")

    @egress_shaping_profile.setter
    def egress_shaping_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_shaping_profile", value)

    @property
    @pulumi.getter(name="endpointCompliance")
    def endpoint_compliance(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable endpoint compliance enforcement. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "endpoint_compliance")

    @endpoint_compliance.setter
    def endpoint_compliance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_compliance", value)

    @property
    @pulumi.getter(name="estimatedDownstreamBandwidth")
    def estimated_downstream_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
        """
        return pulumi.get(self, "estimated_downstream_bandwidth")

    @estimated_downstream_bandwidth.setter
    def estimated_downstream_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "estimated_downstream_bandwidth", value)

    @property
    @pulumi.getter(name="estimatedUpstreamBandwidth")
    def estimated_upstream_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
        """
        return pulumi.get(self, "estimated_upstream_bandwidth")

    @estimated_upstream_bandwidth.setter
    def estimated_upstream_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "estimated_upstream_bandwidth", value)

    @property
    @pulumi.getter(name="explicitFtpProxy")
    def explicit_ftp_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the explicit FTP proxy on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "explicit_ftp_proxy")

    @explicit_ftp_proxy.setter
    def explicit_ftp_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "explicit_ftp_proxy", value)

    @property
    @pulumi.getter(name="explicitWebProxy")
    def explicit_web_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the explicit web proxy on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "explicit_web_proxy")

    @explicit_web_proxy.setter
    def explicit_web_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "explicit_web_proxy", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter(name="failActionOnExtender")
    def fail_action_on_extender(self) -> Optional[pulumi.Input[str]]:
        """
        Action on extender when interface fail . Valid values: `soft-restart`, `hard-restart`, `reboot`.
        """
        return pulumi.get(self, "fail_action_on_extender")

    @fail_action_on_extender.setter
    def fail_action_on_extender(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_action_on_extender", value)

    @property
    @pulumi.getter(name="failAlertInterfaces")
    def fail_alert_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceFailAlertInterfaceArgs']]]]:
        """
        Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `fail_alert_interfaces` block is documented below.
        """
        return pulumi.get(self, "fail_alert_interfaces")

    @fail_alert_interfaces.setter
    def fail_alert_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceFailAlertInterfaceArgs']]]]):
        pulumi.set(self, "fail_alert_interfaces", value)

    @property
    @pulumi.getter(name="failAlertMethod")
    def fail_alert_method(self) -> Optional[pulumi.Input[str]]:
        """
        Select link-failed-signal or link-down method to alert about a failed link. Valid values: `link-failed-signal`, `link-down`.
        """
        return pulumi.get(self, "fail_alert_method")

    @fail_alert_method.setter
    def fail_alert_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_alert_method", value)

    @property
    @pulumi.getter(name="failDetect")
    def fail_detect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable fail detection features for this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fail_detect")

    @fail_detect.setter
    def fail_detect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_detect", value)

    @property
    @pulumi.getter(name="failDetectOption")
    def fail_detect_option(self) -> Optional[pulumi.Input[str]]:
        """
        Options for detecting that this interface has failed. Valid values: `detectserver`, `link-down`.
        """
        return pulumi.get(self, "fail_detect_option")

    @fail_detect_option.setter
    def fail_detect_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_detect_option", value)

    @property
    @pulumi.getter
    def fortiheartbeat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiHeartBeat (FortiTelemetry on GUI). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortiheartbeat")

    @fortiheartbeat.setter
    def fortiheartbeat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiheartbeat", value)

    @property
    @pulumi.getter
    def fortilink(self) -> Optional[pulumi.Input[str]]:
        """
        Enable FortiLink to dedicate this interface to manage other Fortinet devices. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortilink")

    @fortilink.setter
    def fortilink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortilink", value)

    @property
    @pulumi.getter(name="fortilinkBackupLink")
    def fortilink_backup_link(self) -> Optional[pulumi.Input[int]]:
        """
        fortilink split interface backup link.
        """
        return pulumi.get(self, "fortilink_backup_link")

    @fortilink_backup_link.setter
    def fortilink_backup_link(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortilink_backup_link", value)

    @property
    @pulumi.getter(name="fortilinkNeighborDetect")
    def fortilink_neighbor_detect(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol for FortiGate neighbor discovery. Valid values: `lldp`, `fortilink`.
        """
        return pulumi.get(self, "fortilink_neighbor_detect")

    @fortilink_neighbor_detect.setter
    def fortilink_neighbor_detect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortilink_neighbor_detect", value)

    @property
    @pulumi.getter(name="fortilinkSplitInterface")
    def fortilink_split_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortilink_split_interface")

    @fortilink_split_interface.setter
    def fortilink_split_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortilink_split_interface", value)

    @property
    @pulumi.getter(name="fortilinkStacking")
    def fortilink_stacking(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiLink switch-stacking on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortilink_stacking")

    @fortilink_stacking.setter
    def fortilink_stacking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortilink_stacking", value)

    @property
    @pulumi.getter(name="forwardDomain")
    def forward_domain(self) -> Optional[pulumi.Input[int]]:
        """
        Transparent mode forward domain.
        """
        return pulumi.get(self, "forward_domain")

    @forward_domain.setter
    def forward_domain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "forward_domain", value)

    @property
    @pulumi.getter(name="forwardErrorCorrection")
    def forward_error_correction(self) -> Optional[pulumi.Input[str]]:
        """
        Configure forward error correction (FEC). Valid values: `none`, `disable`, `cl91-rs-fec`, `cl74-fc-fec`.
        """
        return pulumi.get(self, "forward_error_correction")

    @forward_error_correction.setter
    def forward_error_correction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_error_correction", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def gwdetect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gwdetect")

    @gwdetect.setter
    def gwdetect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gwdetect", value)

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[pulumi.Input[int]]:
        """
        HA election priority for the PING server.
        """
        return pulumi.get(self, "ha_priority")

    @ha_priority.setter
    def ha_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ha_priority", value)

    @property
    @pulumi.getter(name="icmpAcceptRedirect")
    def icmp_accept_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ICMP accept redirect. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "icmp_accept_redirect")

    @icmp_accept_redirect.setter
    def icmp_accept_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icmp_accept_redirect", value)

    @property
    @pulumi.getter(name="icmpSendRedirect")
    def icmp_send_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ICMP send redirect. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "icmp_send_redirect")

    @icmp_send_redirect.setter
    def icmp_send_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icmp_send_redirect", value)

    @property
    @pulumi.getter(name="identAccept")
    def ident_accept(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable authentication for this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ident_accept")

    @ident_accept.setter
    def ident_accept(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ident_accept", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
        """
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter(name="ikeSamlServer")
    def ike_saml_server(self) -> Optional[pulumi.Input[str]]:
        """
        Configure IKE authentication SAML server.
        """
        return pulumi.get(self, "ike_saml_server")

    @ike_saml_server.setter
    def ike_saml_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_saml_server", value)

    @property
    @pulumi.getter
    def inbandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
        """
        return pulumi.get(self, "inbandwidth")

    @inbandwidth.setter
    def inbandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "inbandwidth", value)

    @property
    @pulumi.getter(name="ingressShapingProfile")
    def ingress_shaping_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Incoming traffic shaping profile.
        """
        return pulumi.get(self, "ingress_shaping_profile")

    @ingress_shaping_profile.setter
    def ingress_shaping_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ingress_shaping_profile", value)

    @property
    @pulumi.getter(name="ingressSpilloverThreshold")
    def ingress_spillover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Ingress Spillover threshold (0 - 16776000 kbps).
        """
        return pulumi.get(self, "ingress_spillover_threshold")

    @ingress_spillover_threshold.setter
    def ingress_spillover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ingress_spillover_threshold", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def internal(self) -> Optional[pulumi.Input[int]]:
        """
        Implicitly created.
        """
        return pulumi.get(self, "internal")

    @internal.setter
    def internal(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internal", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Interface IPv4 address and subnet mask, syntax: X.X.X.X/24.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="ipManagedByFortiipam")
    def ip_managed_by_fortiipam(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic IP address assignment of this interface by FortiIPAM.
        """
        return pulumi.get(self, "ip_managed_by_fortiipam")

    @ip_managed_by_fortiipam.setter
    def ip_managed_by_fortiipam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_managed_by_fortiipam", value)

    @property
    @pulumi.getter
    def ipmac(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IP/MAC binding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipmac")

    @ipmac.setter
    def ipmac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipmac", value)

    @property
    @pulumi.getter(name="ipsSnifferMode")
    def ips_sniffer_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the use of this interface as a one-armed sniffer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_sniffer_mode")

    @ips_sniffer_mode.setter
    def ips_sniffer_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sniffer_mode", value)

    @property
    @pulumi.getter
    def ipunnumbered(self) -> Optional[pulumi.Input[str]]:
        """
        Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
        """
        return pulumi.get(self, "ipunnumbered")

    @ipunnumbered.setter
    def ipunnumbered(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipunnumbered", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input['InterfaceIpv6Args']]:
        """
        IPv6 of interface. The structure of `ipv6` block is documented below.
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input['InterfaceIpv6Args']]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter
    def l2forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable l2 forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "l2forward")

    @l2forward.setter
    def l2forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "l2forward", value)

    @property
    @pulumi.getter(name="lacpHaSecondary")
    def lacp_ha_secondary(self) -> Optional[pulumi.Input[str]]:
        """
        LACP HA secondary member. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "lacp_ha_secondary")

    @lacp_ha_secondary.setter
    def lacp_ha_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lacp_ha_secondary", value)

    @property
    @pulumi.getter(name="lacpHaSlave")
    def lacp_ha_slave(self) -> Optional[pulumi.Input[str]]:
        """
        LACP HA slave. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "lacp_ha_slave")

    @lacp_ha_slave.setter
    def lacp_ha_slave(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lacp_ha_slave", value)

    @property
    @pulumi.getter(name="lacpMode")
    def lacp_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LACP mode. Valid values: `static`, `passive`, `active`.
        """
        return pulumi.get(self, "lacp_mode")

    @lacp_mode.setter
    def lacp_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lacp_mode", value)

    @property
    @pulumi.getter(name="lacpSpeed")
    def lacp_speed(self) -> Optional[pulumi.Input[str]]:
        """
        How often the interface sends LACP messages. Valid values: `slow`, `fast`.
        """
        return pulumi.get(self, "lacp_speed")

    @lacp_speed.setter
    def lacp_speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lacp_speed", value)

    @property
    @pulumi.getter(name="lcpEchoInterval")
    def lcp_echo_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
        """
        return pulumi.get(self, "lcp_echo_interval")

    @lcp_echo_interval.setter
    def lcp_echo_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lcp_echo_interval", value)

    @property
    @pulumi.getter(name="lcpMaxEchoFails")
    def lcp_max_echo_fails(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum missed LCP echo messages before disconnect.
        """
        return pulumi.get(self, "lcp_max_echo_fails")

    @lcp_max_echo_fails.setter
    def lcp_max_echo_fails(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lcp_max_echo_fails", value)

    @property
    @pulumi.getter(name="linkUpDelay")
    def link_up_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Number of milliseconds to wait before considering a link is up.
        """
        return pulumi.get(self, "link_up_delay")

    @link_up_delay.setter
    def link_up_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "link_up_delay", value)

    @property
    @pulumi.getter(name="lldpNetworkPolicy")
    def lldp_network_policy(self) -> Optional[pulumi.Input[str]]:
        """
        LLDP-MED network policy profile.
        """
        return pulumi.get(self, "lldp_network_policy")

    @lldp_network_policy.setter
    def lldp_network_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_network_policy", value)

    @property
    @pulumi.getter(name="lldpReception")
    def lldp_reception(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Link Layer Discovery Protocol (LLDP) reception. Valid values: `enable`, `disable`, `vdom`.
        """
        return pulumi.get(self, "lldp_reception")

    @lldp_reception.setter
    def lldp_reception(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_reception", value)

    @property
    @pulumi.getter(name="lldpTransmission")
    def lldp_transmission(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Link Layer Discovery Protocol (LLDP) transmission. Valid values: `enable`, `disable`, `vdom`.
        """
        return pulumi.get(self, "lldp_transmission")

    @lldp_transmission.setter
    def lldp_transmission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_transmission", value)

    @property
    @pulumi.getter
    def macaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Change the interface's MAC address.
        """
        return pulumi.get(self, "macaddr")

    @macaddr.setter
    def macaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "macaddr", value)

    @property
    @pulumi.getter(name="managedDevices")
    def managed_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceManagedDeviceArgs']]]]:
        """
        Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managed_device` block is documented below.
        """
        return pulumi.get(self, "managed_devices")

    @managed_devices.setter
    def managed_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceManagedDeviceArgs']]]]):
        pulumi.set(self, "managed_devices", value)

    @property
    @pulumi.getter(name="managedSubnetworkSize")
    def managed_subnetwork_size(self) -> Optional[pulumi.Input[str]]:
        """
        Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
        """
        return pulumi.get(self, "managed_subnetwork_size")

    @managed_subnetwork_size.setter
    def managed_subnetwork_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_subnetwork_size", value)

    @property
    @pulumi.getter(name="managementIp")
    def management_ip(self) -> Optional[pulumi.Input[str]]:
        """
        High Availability in-band management IP address of this interface.
        """
        return pulumi.get(self, "management_ip")

    @management_ip.setter
    def management_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_ip", value)

    @property
    @pulumi.getter(name="measuredDownstreamBandwidth")
    def measured_downstream_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Measured downstream bandwidth (kbps).
        """
        return pulumi.get(self, "measured_downstream_bandwidth")

    @measured_downstream_bandwidth.setter
    def measured_downstream_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "measured_downstream_bandwidth", value)

    @property
    @pulumi.getter(name="measuredUpstreamBandwidth")
    def measured_upstream_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Measured upstream bandwidth (kbps).
        """
        return pulumi.get(self, "measured_upstream_bandwidth")

    @measured_upstream_bandwidth.setter
    def measured_upstream_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "measured_upstream_bandwidth", value)

    @property
    @pulumi.getter
    def mediatype(self) -> Optional[pulumi.Input[str]]:
        """
        Select SFP media interface type Valid values: `none`, `gmii`, `sgmii`, `sr`, `lr`, `cr`, `sr4`, `lr4`, `cr4`.
        """
        return pulumi.get(self, "mediatype")

    @mediatype.setter
    def mediatype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mediatype", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceMemberArgs']]]]:
        """
        Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="minLinks")
    def min_links(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of aggregated ports that must be up.
        """
        return pulumi.get(self, "min_links")

    @min_links.setter
    def min_links(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_links", value)

    @property
    @pulumi.getter(name="minLinksDown")
    def min_links_down(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take when less than the configured minimum number of links are active. Valid values: `operational`, `administrative`.
        """
        return pulumi.get(self, "min_links_down")

    @min_links_down.setter
    def min_links_down(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_links_down", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Addressing mode (static, DHCP, PPPoE). Valid values: `static`, `dhcp`, `pppoe`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="monitorBandwidth")
    def monitor_bandwidth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable monitoring bandwidth on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "monitor_bandwidth")

    @monitor_bandwidth.setter
    def monitor_bandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_bandwidth", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        MTU value for this interface.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="mtuOverride")
    def mtu_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to set a custom MTU for this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mtu_override")

    @mtu_override.setter
    def mtu_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu_override", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ndiscforward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NDISC forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ndiscforward")

    @ndiscforward.setter
    def ndiscforward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ndiscforward", value)

    @property
    @pulumi.getter(name="netbiosForward")
    def netbios_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NETBIOS forwarding. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "netbios_forward")

    @netbios_forward.setter
    def netbios_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netbios_forward", value)

    @property
    @pulumi.getter(name="netflowSampler")
    def netflow_sampler(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both). Valid values: `disable`, `tx`, `rx`, `both`.
        """
        return pulumi.get(self, "netflow_sampler")

    @netflow_sampler.setter
    def netflow_sampler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netflow_sampler", value)

    @property
    @pulumi.getter
    def outbandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
        """
        return pulumi.get(self, "outbandwidth")

    @outbandwidth.setter
    def outbandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outbandwidth", value)

    @property
    @pulumi.getter(name="padtRetryTimeout")
    def padt_retry_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
        """
        return pulumi.get(self, "padt_retry_timeout")

    @padt_retry_timeout.setter
    def padt_retry_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "padt_retry_timeout", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        PPPoE account's password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="pingServStatus")
    def ping_serv_status(self) -> Optional[pulumi.Input[int]]:
        """
        PING server status.
        """
        return pulumi.get(self, "ping_serv_status")

    @ping_serv_status.setter
    def ping_serv_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ping_serv_status", value)

    @property
    @pulumi.getter(name="pollingInterval")
    def polling_interval(self) -> Optional[pulumi.Input[int]]:
        """
        sFlow polling interval (1 - 255 sec).
        """
        return pulumi.get(self, "polling_interval")

    @polling_interval.setter
    def polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "polling_interval", value)

    @property
    @pulumi.getter(name="pppoeUnnumberedNegotiate")
    def pppoe_unnumbered_negotiate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pppoe_unnumbered_negotiate")

    @pppoe_unnumbered_negotiate.setter
    def pppoe_unnumbered_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pppoe_unnumbered_negotiate", value)

    @property
    @pulumi.getter(name="pptpAuthType")
    def pptp_auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        PPTP authentication type. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        """
        return pulumi.get(self, "pptp_auth_type")

    @pptp_auth_type.setter
    def pptp_auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pptp_auth_type", value)

    @property
    @pulumi.getter(name="pptpClient")
    def pptp_client(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PPTP client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pptp_client")

    @pptp_client.setter
    def pptp_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pptp_client", value)

    @property
    @pulumi.getter(name="pptpPassword")
    def pptp_password(self) -> Optional[pulumi.Input[str]]:
        """
        PPTP password.
        """
        return pulumi.get(self, "pptp_password")

    @pptp_password.setter
    def pptp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pptp_password", value)

    @property
    @pulumi.getter(name="pptpServerIp")
    def pptp_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        PPTP server IP address.
        """
        return pulumi.get(self, "pptp_server_ip")

    @pptp_server_ip.setter
    def pptp_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pptp_server_ip", value)

    @property
    @pulumi.getter(name="pptpTimeout")
    def pptp_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Idle timer in minutes (0 for disabled).
        """
        return pulumi.get(self, "pptp_timeout")

    @pptp_timeout.setter
    def pptp_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pptp_timeout", value)

    @property
    @pulumi.getter(name="pptpUser")
    def pptp_user(self) -> Optional[pulumi.Input[str]]:
        """
        PPTP user name.
        """
        return pulumi.get(self, "pptp_user")

    @pptp_user.setter
    def pptp_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pptp_user", value)

    @property
    @pulumi.getter(name="preserveSessionRoute")
    def preserve_session_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable preservation of session route when dirty. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "preserve_session_route")

    @preserve_session_route.setter
    def preserve_session_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preserve_session_route", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of learned routes.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="priorityOverride")
    def priority_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable fail back to higher priority port once recovered. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "priority_override")

    @priority_override.setter
    def priority_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_override", value)

    @property
    @pulumi.getter(name="proxyCaptivePortal")
    def proxy_captive_portal(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable proxy captive portal on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_captive_portal")

    @proxy_captive_portal.setter
    def proxy_captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_captive_portal", value)

    @property
    @pulumi.getter(name="reachableTime")
    def reachable_time(self) -> Optional[pulumi.Input[int]]:
        """
        IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
        """
        return pulumi.get(self, "reachable_time")

    @reachable_time.setter
    def reachable_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reachable_time", value)

    @property
    @pulumi.getter(name="redundantInterface")
    def redundant_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Redundant interface.
        """
        return pulumi.get(self, "redundant_interface")

    @redundant_interface.setter
    def redundant_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_interface", value)

    @property
    @pulumi.getter(name="remoteIp")
    def remote_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Remote IP address of tunnel.
        """
        return pulumi.get(self, "remote_ip")

    @remote_ip.setter
    def remote_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_ip", value)

    @property
    @pulumi.getter(name="replacemsgOverrideGroup")
    def replacemsg_override_group(self) -> Optional[pulumi.Input[str]]:
        """
        Replacement message override group.
        """
        return pulumi.get(self, "replacemsg_override_group")

    @replacemsg_override_group.setter
    def replacemsg_override_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_override_group", value)

    @property
    @pulumi.getter(name="ringRx")
    def ring_rx(self) -> Optional[pulumi.Input[int]]:
        """
        RX ring size.
        """
        return pulumi.get(self, "ring_rx")

    @ring_rx.setter
    def ring_rx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ring_rx", value)

    @property
    @pulumi.getter(name="ringTx")
    def ring_tx(self) -> Optional[pulumi.Input[int]]:
        """
        TX ring size.
        """
        return pulumi.get(self, "ring_tx")

    @ring_tx.setter
    def ring_tx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ring_tx", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Interface role. Valid values: `lan`, `wan`, `dmz`, `undefined`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="sampleDirection")
    def sample_direction(self) -> Optional[pulumi.Input[str]]:
        """
        Data that NetFlow collects (rx, tx, or both). Valid values: `tx`, `rx`, `both`.
        """
        return pulumi.get(self, "sample_direction")

    @sample_direction.setter
    def sample_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sample_direction", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[pulumi.Input[int]]:
        """
        sFlow sample rate (10 - 99999).
        """
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        """
        Enable monitoring or blocking connections to Botnet servers through this interface. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter(name="secondaryIp")
    def secondary_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding a secondary IP to this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "secondary_ip")

    @secondary_ip.setter
    def secondary_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_ip", value)

    @property
    @pulumi.getter
    def secondaryips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceSecondaryipArgs']]]]:
        """
        Second IP address of interface. The structure of `secondaryip` block is documented below.
        """
        return pulumi.get(self, "secondaryips")

    @secondaryips.setter
    def secondaryips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceSecondaryipArgs']]]]):
        pulumi.set(self, "secondaryips", value)

    @property
    @pulumi.getter(name="securityExemptList")
    def security_exempt_list(self) -> Optional[pulumi.Input[str]]:
        """
        Name of security-exempt-list.
        """
        return pulumi.get(self, "security_exempt_list")

    @security_exempt_list.setter
    def security_exempt_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_exempt_list", value)

    @property
    @pulumi.getter(name="securityExternalLogout")
    def security_external_logout(self) -> Optional[pulumi.Input[str]]:
        """
        URL of external authentication logout server.
        """
        return pulumi.get(self, "security_external_logout")

    @security_external_logout.setter
    def security_external_logout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_external_logout", value)

    @property
    @pulumi.getter(name="securityExternalWeb")
    def security_external_web(self) -> Optional[pulumi.Input[str]]:
        """
        URL of external authentication web server.
        """
        return pulumi.get(self, "security_external_web")

    @security_external_web.setter
    def security_external_web(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_external_web", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceSecurityGroupArgs']]]]:
        """
        User groups that can authenticate with the captive portal. The structure of `security_groups` block is documented below.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceSecurityGroupArgs']]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="securityMacAuthBypass")
    def security_mac_auth_bypass(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MAC authentication bypass. Valid values: `mac-auth-only`, `enable`, `disable`.
        """
        return pulumi.get(self, "security_mac_auth_bypass")

    @security_mac_auth_bypass.setter
    def security_mac_auth_bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mac_auth_bypass", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Turn on captive portal authentication for this interface. Valid values: `none`, `captive-portal`, `802.1X`.
        """
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="securityRedirectUrl")
    def security_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL redirection after disclaimer/authentication.
        """
        return pulumi.get(self, "security_redirect_url")

    @security_redirect_url.setter
    def security_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_redirect_url", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        PPPoE service name.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="sflowSampler")
    def sflow_sampler(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sFlow on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sflow_sampler")

    @sflow_sampler.setter
    def sflow_sampler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sflow_sampler", value)

    @property
    @pulumi.getter(name="snmpIndex")
    def snmp_index(self) -> Optional[pulumi.Input[int]]:
        """
        Permanent SNMP Index of the interface.
        """
        return pulumi.get(self, "snmp_index")

    @snmp_index.setter
    def snmp_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "snmp_index", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        """
        Interface speed. The default setting and the options available depend on the interface hardware.
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter(name="spilloverThreshold")
    def spillover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
        """
        return pulumi.get(self, "spillover_threshold")

    @spillover_threshold.setter
    def spillover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spillover_threshold", value)

    @property
    @pulumi.getter(name="srcCheck")
    def src_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable source IP check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "src_check")

    @src_check.setter
    def src_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Bring the interface up or shut the interface down. Valid values: `up`, `down`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def stp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable STP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "stp")

    @stp.setter
    def stp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stp", value)

    @property
    @pulumi.getter(name="stpHaSecondary")
    def stp_ha_secondary(self) -> Optional[pulumi.Input[str]]:
        """
        Control STP behaviour on HA secondary. Valid values: `disable`, `enable`, `priority-adjust`.
        """
        return pulumi.get(self, "stp_ha_secondary")

    @stp_ha_secondary.setter
    def stp_ha_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stp_ha_secondary", value)

    @property
    @pulumi.getter
    def stpforward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable STP forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "stpforward")

    @stpforward.setter
    def stpforward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stpforward", value)

    @property
    @pulumi.getter(name="stpforwardMode")
    def stpforward_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure STP forwarding mode. Valid values: `rpl-all-ext-id`, `rpl-bridge-ext-id`, `rpl-nothing`.
        """
        return pulumi.get(self, "stpforward_mode")

    @stpforward_mode.setter
    def stpforward_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stpforward_mode", value)

    @property
    @pulumi.getter
    def subst(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to always send packets from this interface to a destination MAC address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "subst")

    @subst.setter
    def subst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subst", value)

    @property
    @pulumi.getter(name="substituteDstMac")
    def substitute_dst_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Destination MAC address that all packets are sent to from this interface.
        """
        return pulumi.get(self, "substitute_dst_mac")

    @substitute_dst_mac.setter
    def substitute_dst_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "substitute_dst_mac", value)

    @property
    @pulumi.getter(name="swcFirstCreate")
    def swc_first_create(self) -> Optional[pulumi.Input[int]]:
        """
        Initial create for switch-controller VLANs.
        """
        return pulumi.get(self, "swc_first_create")

    @swc_first_create.setter
    def swc_first_create(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "swc_first_create", value)

    @property
    @pulumi.getter(name="swcVlan")
    def swc_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Creation status for switch-controller VLANs.
        """
        return pulumi.get(self, "swc_vlan")

    @swc_vlan.setter
    def swc_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "swc_vlan", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        Contained in switch.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="switchControllerAccessVlan")
    def switch_controller_access_vlan(self) -> Optional[pulumi.Input[str]]:
        """
        Block FortiSwitch port-to-port traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_access_vlan")

    @switch_controller_access_vlan.setter
    def switch_controller_access_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_access_vlan", value)

    @property
    @pulumi.getter(name="switchControllerArpInspection")
    def switch_controller_arp_inspection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiSwitch ARP inspection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_arp_inspection")

    @switch_controller_arp_inspection.setter
    def switch_controller_arp_inspection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_arp_inspection", value)

    @property
    @pulumi.getter(name="switchControllerDhcpSnooping")
    def switch_controller_dhcp_snooping(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller DHCP snooping. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_dhcp_snooping")

    @switch_controller_dhcp_snooping.setter
    def switch_controller_dhcp_snooping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_dhcp_snooping", value)

    @property
    @pulumi.getter(name="switchControllerDhcpSnoopingOption82")
    def switch_controller_dhcp_snooping_option82(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller DHCP snooping option82. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_dhcp_snooping_option82")

    @switch_controller_dhcp_snooping_option82.setter
    def switch_controller_dhcp_snooping_option82(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_dhcp_snooping_option82", value)

    @property
    @pulumi.getter(name="switchControllerDhcpSnoopingVerifyMac")
    def switch_controller_dhcp_snooping_verify_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller DHCP snooping verify MAC. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_dhcp_snooping_verify_mac")

    @switch_controller_dhcp_snooping_verify_mac.setter
    def switch_controller_dhcp_snooping_verify_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_dhcp_snooping_verify_mac", value)

    @property
    @pulumi.getter(name="switchControllerDynamic")
    def switch_controller_dynamic(self) -> Optional[pulumi.Input[str]]:
        """
        Integrated FortiLink settings for managed FortiSwitch.
        """
        return pulumi.get(self, "switch_controller_dynamic")

    @switch_controller_dynamic.setter
    def switch_controller_dynamic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_dynamic", value)

    @property
    @pulumi.getter(name="switchControllerFeature")
    def switch_controller_feature(self) -> Optional[pulumi.Input[str]]:
        """
        Interface's purpose when assigning traffic (read only).
        """
        return pulumi.get(self, "switch_controller_feature")

    @switch_controller_feature.setter
    def switch_controller_feature(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_feature", value)

    @property
    @pulumi.getter(name="switchControllerIgmpSnooping")
    def switch_controller_igmp_snooping(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller IGMP snooping. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_igmp_snooping")

    @switch_controller_igmp_snooping.setter
    def switch_controller_igmp_snooping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_igmp_snooping", value)

    @property
    @pulumi.getter(name="switchControllerIgmpSnoopingFastLeave")
    def switch_controller_igmp_snooping_fast_leave(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller IGMP snooping fast-leave. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_igmp_snooping_fast_leave")

    @switch_controller_igmp_snooping_fast_leave.setter
    def switch_controller_igmp_snooping_fast_leave(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_igmp_snooping_fast_leave", value)

    @property
    @pulumi.getter(name="switchControllerIgmpSnoopingProxy")
    def switch_controller_igmp_snooping_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller IGMP snooping proxy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_igmp_snooping_proxy")

    @switch_controller_igmp_snooping_proxy.setter
    def switch_controller_igmp_snooping_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_igmp_snooping_proxy", value)

    @property
    @pulumi.getter(name="switchControllerIotScanning")
    def switch_controller_iot_scanning(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable managed FortiSwitch IoT scanning. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_iot_scanning")

    @switch_controller_iot_scanning.setter
    def switch_controller_iot_scanning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_iot_scanning", value)

    @property
    @pulumi.getter(name="switchControllerLearningLimit")
    def switch_controller_learning_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
        """
        return pulumi.get(self, "switch_controller_learning_limit")

    @switch_controller_learning_limit.setter
    def switch_controller_learning_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_controller_learning_limit", value)

    @property
    @pulumi.getter(name="switchControllerMgmtVlan")
    def switch_controller_mgmt_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN to use for FortiLink management purposes.
        """
        return pulumi.get(self, "switch_controller_mgmt_vlan")

    @switch_controller_mgmt_vlan.setter
    def switch_controller_mgmt_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_controller_mgmt_vlan", value)

    @property
    @pulumi.getter(name="switchControllerNac")
    def switch_controller_nac(self) -> Optional[pulumi.Input[str]]:
        """
        Integrated NAC settings for managed FortiSwitch.
        """
        return pulumi.get(self, "switch_controller_nac")

    @switch_controller_nac.setter
    def switch_controller_nac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_nac", value)

    @property
    @pulumi.getter(name="switchControllerNetflowCollect")
    def switch_controller_netflow_collect(self) -> Optional[pulumi.Input[str]]:
        """
        NetFlow collection and processing. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "switch_controller_netflow_collect")

    @switch_controller_netflow_collect.setter
    def switch_controller_netflow_collect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_netflow_collect", value)

    @property
    @pulumi.getter(name="switchControllerOffload")
    def switch_controller_offload(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable managed FortiSwitch routing offload. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_offload")

    @switch_controller_offload.setter
    def switch_controller_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_offload", value)

    @property
    @pulumi.getter(name="switchControllerOffloadGw")
    def switch_controller_offload_gw(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable managed FortiSwitch routing offload gateway. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_offload_gw")

    @switch_controller_offload_gw.setter
    def switch_controller_offload_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_offload_gw", value)

    @property
    @pulumi.getter(name="switchControllerOffloadIp")
    def switch_controller_offload_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP for routing offload on FortiSwitch.
        """
        return pulumi.get(self, "switch_controller_offload_ip")

    @switch_controller_offload_ip.setter
    def switch_controller_offload_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_offload_ip", value)

    @property
    @pulumi.getter(name="switchControllerRspanMode")
    def switch_controller_rspan_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "switch_controller_rspan_mode")

    @switch_controller_rspan_mode.setter
    def switch_controller_rspan_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_rspan_mode", value)

    @property
    @pulumi.getter(name="switchControllerSourceIp")
    def switch_controller_source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address used in FortiLink over L3 connections. Valid values: `outbound`, `fixed`.
        """
        return pulumi.get(self, "switch_controller_source_ip")

    @switch_controller_source_ip.setter
    def switch_controller_source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_source_ip", value)

    @property
    @pulumi.getter(name="switchControllerTrafficPolicy")
    def switch_controller_traffic_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller traffic policy for the VLAN.
        """
        return pulumi.get(self, "switch_controller_traffic_policy")

    @switch_controller_traffic_policy.setter
    def switch_controller_traffic_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_traffic_policy", value)

    @property
    @pulumi.getter(name="systemId")
    def system_id(self) -> Optional[pulumi.Input[str]]:
        """
        Define a system ID for the aggregate interface.
        """
        return pulumi.get(self, "system_id")

    @system_id.setter
    def system_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_id", value)

    @property
    @pulumi.getter(name="systemIdType")
    def system_id_type(self) -> Optional[pulumi.Input[str]]:
        """
        Method in which system ID is generated. Valid values: `auto`, `user`.
        """
        return pulumi.get(self, "system_id_type")

    @system_id_type.setter
    def system_id_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_id_type", value)

    @property
    @pulumi.getter
    def taggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTaggingArgs']]]]:
        """
        Config object tagging. The structure of `tagging` block is documented below.
        """
        return pulumi.get(self, "taggings")

    @taggings.setter
    def taggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTaggingArgs']]]]):
        pulumi.set(self, "taggings", value)

    @property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> Optional[pulumi.Input[int]]:
        """
        TCP maximum segment size. 0 means do not change segment size.
        """
        return pulumi.get(self, "tcp_mss")

    @tcp_mss.setter
    def tcp_mss(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss", value)

    @property
    @pulumi.getter
    def trunk(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VLAN trunk. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "trunk")

    @trunk.setter
    def trunk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trunk", value)

    @property
    @pulumi.getter(name="trustIp1")
    def trust_ip1(self) -> Optional[pulumi.Input[str]]:
        """
        Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        """
        return pulumi.get(self, "trust_ip1")

    @trust_ip1.setter
    def trust_ip1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_ip1", value)

    @property
    @pulumi.getter(name="trustIp2")
    def trust_ip2(self) -> Optional[pulumi.Input[str]]:
        """
        Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        """
        return pulumi.get(self, "trust_ip2")

    @trust_ip2.setter
    def trust_ip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_ip2", value)

    @property
    @pulumi.getter(name="trustIp3")
    def trust_ip3(self) -> Optional[pulumi.Input[str]]:
        """
        Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        """
        return pulumi.get(self, "trust_ip3")

    @trust_ip3.setter
    def trust_ip3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_ip3", value)

    @property
    @pulumi.getter(name="trustIp61")
    def trust_ip61(self) -> Optional[pulumi.Input[str]]:
        """
        Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        """
        return pulumi.get(self, "trust_ip61")

    @trust_ip61.setter
    def trust_ip61(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_ip61", value)

    @property
    @pulumi.getter(name="trustIp62")
    def trust_ip62(self) -> Optional[pulumi.Input[str]]:
        """
        Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        """
        return pulumi.get(self, "trust_ip62")

    @trust_ip62.setter
    def trust_ip62(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_ip62", value)

    @property
    @pulumi.getter(name="trustIp63")
    def trust_ip63(self) -> Optional[pulumi.Input[str]]:
        """
        Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        """
        return pulumi.get(self, "trust_ip63")

    @trust_ip63.setter
    def trust_ip63(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_ip63", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Interface type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username of the PPPoE account, provided by your ISP.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        """
        Interface is in this virtual domain (VDOM).
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vindex(self) -> Optional[pulumi.Input[int]]:
        """
        Switch control interface VLAN ID.
        """
        return pulumi.get(self, "vindex")

    @vindex.setter
    def vindex(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vindex", value)

    @property
    @pulumi.getter(name="vlanProtocol")
    def vlan_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Ethernet protocol of VLAN. Valid values: `8021q`, `8021ad`.
        """
        return pulumi.get(self, "vlan_protocol")

    @vlan_protocol.setter
    def vlan_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_protocol", value)

    @property
    @pulumi.getter
    def vlanforward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable traffic forwarding between VLANs on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vlanforward")

    @vlanforward.setter
    def vlanforward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlanforward", value)

    @property
    @pulumi.getter
    def vlanid(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID (1 - 4094).
        """
        return pulumi.get(self, "vlanid")

    @vlanid.setter
    def vlanid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlanid", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[int]]:
        """
        Virtual Routing Forwarding ID.
        """
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrf", value)

    @property
    @pulumi.getter(name="vrrpVirtualMac")
    def vrrp_virtual_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of virtual MAC for VRRP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vrrp_virtual_mac")

    @vrrp_virtual_mac.setter
    def vrrp_virtual_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrrp_virtual_mac", value)

    @property
    @pulumi.getter
    def vrrps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceVrrpArgs']]]]:
        """
        VRRP configuration. The structure of `vrrp` block is documented below.
        """
        return pulumi.get(self, "vrrps")

    @vrrps.setter
    def vrrps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceVrrpArgs']]]]):
        pulumi.set(self, "vrrps", value)

    @property
    @pulumi.getter
    def wccp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wccp")

    @wccp.setter
    def wccp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wccp", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Default weight for static routes (if route has no weight configured).
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter(name="winsIp")
    def wins_ip(self) -> Optional[pulumi.Input[str]]:
        """
        WINS server IP.
        """
        return pulumi.get(self, "wins_ip")

    @wins_ip.setter
    def wins_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_ip", value)


class Interface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ac_name: Optional[pulumi.Input[str]] = None,
                 aggregate: Optional[pulumi.Input[str]] = None,
                 aggregate_type: Optional[pulumi.Input[str]] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 ap_discover: Optional[pulumi.Input[str]] = None,
                 arpforward: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_portal_addr: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 auto_auth_extension_device: Optional[pulumi.Input[str]] = None,
                 autogenerated: Optional[pulumi.Input[str]] = None,
                 bandwidth_measure_time: Optional[pulumi.Input[int]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 bfd_desired_min_tx: Optional[pulumi.Input[int]] = None,
                 bfd_detect_mult: Optional[pulumi.Input[int]] = None,
                 bfd_required_min_rx: Optional[pulumi.Input[int]] = None,
                 broadcast_forticlient_discovery: Optional[pulumi.Input[str]] = None,
                 broadcast_forward: Optional[pulumi.Input[str]] = None,
                 captive_portal: Optional[pulumi.Input[int]] = None,
                 cli_conn_status: Optional[pulumi.Input[int]] = None,
                 client_options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceClientOptionArgs']]]]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 dedicated_to: Optional[pulumi.Input[str]] = None,
                 default_purdue_level: Optional[pulumi.Input[str]] = None,
                 defaultgw: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 detected_peer_mtu: Optional[pulumi.Input[int]] = None,
                 detectprotocol: Optional[pulumi.Input[str]] = None,
                 detectserver: Optional[pulumi.Input[str]] = None,
                 device_access_list: Optional[pulumi.Input[str]] = None,
                 device_identification: Optional[pulumi.Input[str]] = None,
                 device_identification_active_scan: Optional[pulumi.Input[str]] = None,
                 device_netscan: Optional[pulumi.Input[str]] = None,
                 device_user_identification: Optional[pulumi.Input[str]] = None,
                 devindex: Optional[pulumi.Input[int]] = None,
                 dhcp_broadcast_flag: Optional[pulumi.Input[str]] = None,
                 dhcp_classless_route_addition: Optional[pulumi.Input[str]] = None,
                 dhcp_client_identifier: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_agent_option: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_circuit_id: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_interface: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_interface_select_method: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_ip: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_link_selection: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_request_all_server: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_service: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_source_ip: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_type: Optional[pulumi.Input[str]] = None,
                 dhcp_renew_time: Optional[pulumi.Input[int]] = None,
                 dhcp_smart_relay: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping_server_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceDhcpSnoopingServerListArgs']]]]] = None,
                 disc_retry_timeout: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dns_server_override: Optional[pulumi.Input[str]] = None,
                 dns_server_protocol: Optional[pulumi.Input[str]] = None,
                 drop_fragment: Optional[pulumi.Input[str]] = None,
                 drop_overlapped_fragment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 eap_ca_cert: Optional[pulumi.Input[str]] = None,
                 eap_identity: Optional[pulumi.Input[str]] = None,
                 eap_method: Optional[pulumi.Input[str]] = None,
                 eap_password: Optional[pulumi.Input[str]] = None,
                 eap_supplicant: Optional[pulumi.Input[str]] = None,
                 eap_user_cert: Optional[pulumi.Input[str]] = None,
                 egress_shaping_profile: Optional[pulumi.Input[str]] = None,
                 endpoint_compliance: Optional[pulumi.Input[str]] = None,
                 estimated_downstream_bandwidth: Optional[pulumi.Input[int]] = None,
                 estimated_upstream_bandwidth: Optional[pulumi.Input[int]] = None,
                 explicit_ftp_proxy: Optional[pulumi.Input[str]] = None,
                 explicit_web_proxy: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 fail_action_on_extender: Optional[pulumi.Input[str]] = None,
                 fail_alert_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceFailAlertInterfaceArgs']]]]] = None,
                 fail_alert_method: Optional[pulumi.Input[str]] = None,
                 fail_detect: Optional[pulumi.Input[str]] = None,
                 fail_detect_option: Optional[pulumi.Input[str]] = None,
                 fortiheartbeat: Optional[pulumi.Input[str]] = None,
                 fortilink: Optional[pulumi.Input[str]] = None,
                 fortilink_backup_link: Optional[pulumi.Input[int]] = None,
                 fortilink_neighbor_detect: Optional[pulumi.Input[str]] = None,
                 fortilink_split_interface: Optional[pulumi.Input[str]] = None,
                 fortilink_stacking: Optional[pulumi.Input[str]] = None,
                 forward_domain: Optional[pulumi.Input[int]] = None,
                 forward_error_correction: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gwdetect: Optional[pulumi.Input[str]] = None,
                 ha_priority: Optional[pulumi.Input[int]] = None,
                 icmp_accept_redirect: Optional[pulumi.Input[str]] = None,
                 icmp_send_redirect: Optional[pulumi.Input[str]] = None,
                 ident_accept: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 ike_saml_server: Optional[pulumi.Input[str]] = None,
                 inbandwidth: Optional[pulumi.Input[int]] = None,
                 ingress_shaping_profile: Optional[pulumi.Input[str]] = None,
                 ingress_spillover_threshold: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 internal: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ip_managed_by_fortiipam: Optional[pulumi.Input[str]] = None,
                 ipmac: Optional[pulumi.Input[str]] = None,
                 ips_sniffer_mode: Optional[pulumi.Input[str]] = None,
                 ipunnumbered: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[pulumi.InputType['InterfaceIpv6Args']]] = None,
                 l2forward: Optional[pulumi.Input[str]] = None,
                 lacp_ha_secondary: Optional[pulumi.Input[str]] = None,
                 lacp_ha_slave: Optional[pulumi.Input[str]] = None,
                 lacp_mode: Optional[pulumi.Input[str]] = None,
                 lacp_speed: Optional[pulumi.Input[str]] = None,
                 lcp_echo_interval: Optional[pulumi.Input[int]] = None,
                 lcp_max_echo_fails: Optional[pulumi.Input[int]] = None,
                 link_up_delay: Optional[pulumi.Input[int]] = None,
                 lldp_network_policy: Optional[pulumi.Input[str]] = None,
                 lldp_reception: Optional[pulumi.Input[str]] = None,
                 lldp_transmission: Optional[pulumi.Input[str]] = None,
                 macaddr: Optional[pulumi.Input[str]] = None,
                 managed_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceManagedDeviceArgs']]]]] = None,
                 managed_subnetwork_size: Optional[pulumi.Input[str]] = None,
                 management_ip: Optional[pulumi.Input[str]] = None,
                 measured_downstream_bandwidth: Optional[pulumi.Input[int]] = None,
                 measured_upstream_bandwidth: Optional[pulumi.Input[int]] = None,
                 mediatype: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceMemberArgs']]]]] = None,
                 min_links: Optional[pulumi.Input[int]] = None,
                 min_links_down: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 monitor_bandwidth: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 mtu_override: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ndiscforward: Optional[pulumi.Input[str]] = None,
                 netbios_forward: Optional[pulumi.Input[str]] = None,
                 netflow_sampler: Optional[pulumi.Input[str]] = None,
                 outbandwidth: Optional[pulumi.Input[int]] = None,
                 padt_retry_timeout: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ping_serv_status: Optional[pulumi.Input[int]] = None,
                 polling_interval: Optional[pulumi.Input[int]] = None,
                 pppoe_unnumbered_negotiate: Optional[pulumi.Input[str]] = None,
                 pptp_auth_type: Optional[pulumi.Input[str]] = None,
                 pptp_client: Optional[pulumi.Input[str]] = None,
                 pptp_password: Optional[pulumi.Input[str]] = None,
                 pptp_server_ip: Optional[pulumi.Input[str]] = None,
                 pptp_timeout: Optional[pulumi.Input[int]] = None,
                 pptp_user: Optional[pulumi.Input[str]] = None,
                 preserve_session_route: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 priority_override: Optional[pulumi.Input[str]] = None,
                 proxy_captive_portal: Optional[pulumi.Input[str]] = None,
                 reachable_time: Optional[pulumi.Input[int]] = None,
                 redundant_interface: Optional[pulumi.Input[str]] = None,
                 remote_ip: Optional[pulumi.Input[str]] = None,
                 replacemsg_override_group: Optional[pulumi.Input[str]] = None,
                 ring_rx: Optional[pulumi.Input[int]] = None,
                 ring_tx: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 sample_direction: Optional[pulumi.Input[str]] = None,
                 sample_rate: Optional[pulumi.Input[int]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 secondary_ip: Optional[pulumi.Input[str]] = None,
                 secondaryips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceSecondaryipArgs']]]]] = None,
                 security_exempt_list: Optional[pulumi.Input[str]] = None,
                 security_external_logout: Optional[pulumi.Input[str]] = None,
                 security_external_web: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceSecurityGroupArgs']]]]] = None,
                 security_mac_auth_bypass: Optional[pulumi.Input[str]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 security_redirect_url: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 sflow_sampler: Optional[pulumi.Input[str]] = None,
                 snmp_index: Optional[pulumi.Input[int]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 spillover_threshold: Optional[pulumi.Input[int]] = None,
                 src_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 stp: Optional[pulumi.Input[str]] = None,
                 stp_ha_secondary: Optional[pulumi.Input[str]] = None,
                 stpforward: Optional[pulumi.Input[str]] = None,
                 stpforward_mode: Optional[pulumi.Input[str]] = None,
                 subst: Optional[pulumi.Input[str]] = None,
                 substitute_dst_mac: Optional[pulumi.Input[str]] = None,
                 swc_first_create: Optional[pulumi.Input[int]] = None,
                 swc_vlan: Optional[pulumi.Input[int]] = None,
                 switch: Optional[pulumi.Input[str]] = None,
                 switch_controller_access_vlan: Optional[pulumi.Input[str]] = None,
                 switch_controller_arp_inspection: Optional[pulumi.Input[str]] = None,
                 switch_controller_dhcp_snooping: Optional[pulumi.Input[str]] = None,
                 switch_controller_dhcp_snooping_option82: Optional[pulumi.Input[str]] = None,
                 switch_controller_dhcp_snooping_verify_mac: Optional[pulumi.Input[str]] = None,
                 switch_controller_dynamic: Optional[pulumi.Input[str]] = None,
                 switch_controller_feature: Optional[pulumi.Input[str]] = None,
                 switch_controller_igmp_snooping: Optional[pulumi.Input[str]] = None,
                 switch_controller_igmp_snooping_fast_leave: Optional[pulumi.Input[str]] = None,
                 switch_controller_igmp_snooping_proxy: Optional[pulumi.Input[str]] = None,
                 switch_controller_iot_scanning: Optional[pulumi.Input[str]] = None,
                 switch_controller_learning_limit: Optional[pulumi.Input[int]] = None,
                 switch_controller_mgmt_vlan: Optional[pulumi.Input[int]] = None,
                 switch_controller_nac: Optional[pulumi.Input[str]] = None,
                 switch_controller_netflow_collect: Optional[pulumi.Input[str]] = None,
                 switch_controller_offload: Optional[pulumi.Input[str]] = None,
                 switch_controller_offload_gw: Optional[pulumi.Input[str]] = None,
                 switch_controller_offload_ip: Optional[pulumi.Input[str]] = None,
                 switch_controller_rspan_mode: Optional[pulumi.Input[str]] = None,
                 switch_controller_source_ip: Optional[pulumi.Input[str]] = None,
                 switch_controller_traffic_policy: Optional[pulumi.Input[str]] = None,
                 system_id: Optional[pulumi.Input[str]] = None,
                 system_id_type: Optional[pulumi.Input[str]] = None,
                 taggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceTaggingArgs']]]]] = None,
                 tcp_mss: Optional[pulumi.Input[int]] = None,
                 trunk: Optional[pulumi.Input[str]] = None,
                 trust_ip1: Optional[pulumi.Input[str]] = None,
                 trust_ip2: Optional[pulumi.Input[str]] = None,
                 trust_ip3: Optional[pulumi.Input[str]] = None,
                 trust_ip61: Optional[pulumi.Input[str]] = None,
                 trust_ip62: Optional[pulumi.Input[str]] = None,
                 trust_ip63: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vindex: Optional[pulumi.Input[int]] = None,
                 vlan_protocol: Optional[pulumi.Input[str]] = None,
                 vlanforward: Optional[pulumi.Input[str]] = None,
                 vlanid: Optional[pulumi.Input[int]] = None,
                 vrf: Optional[pulumi.Input[int]] = None,
                 vrrp_virtual_mac: Optional[pulumi.Input[str]] = None,
                 vrrps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceVrrpArgs']]]]] = None,
                 wccp: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 wins_ip: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure interfaces.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Interface("trname",
            algorithm="L4",
            defaultgw="enable",
            description="Created by Terraform Provider for FortiOS",
            distance=5,
            ip="0.0.0.0 0.0.0.0",
            ipv6=fortios.system.InterfaceIpv6Args(
                nd_mode="basic",
            ),
            mode="dhcp",
            mtu=1500,
            mtu_override="disable",
            snmp_index=3,
            type="physical",
            vdom="root")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Interface can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/interface:Interface labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/interface:Interface labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ac_name: PPPoE server name.
        :param pulumi.Input[str] aggregate: Aggregate interface.
        :param pulumi.Input[str] aggregate_type: Type of aggregation. Valid values: `physical`, `vxlan`.
        :param pulumi.Input[str] algorithm: Frame distribution algorithm.
        :param pulumi.Input[str] alias: Alias will be displayed with the interface name to make it easier to distinguish.
        :param pulumi.Input[str] allowaccess: Permitted types of management access to this interface.
        :param pulumi.Input[str] ap_discover: Enable/disable automatic registration of unknown FortiAP devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] arpforward: Enable/disable ARP forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_cert: HTTPS server certificate.
        :param pulumi.Input[str] auth_portal_addr: Address of captive portal.
        :param pulumi.Input[str] auth_type: PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        :param pulumi.Input[str] auto_auth_extension_device: Enable/disable automatic authorization of dedicated Fortinet extension device on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] autogenerated: Indicates whether the interface is automatically created by FortiGate, for example, created during the VPN creation process. If it is, set it to "auto", else keep it empty.
        :param pulumi.Input[int] bandwidth_measure_time: Bandwidth measure time
        :param pulumi.Input[str] bfd: Bidirectional Forwarding Detection (BFD) settings. Valid values: `global`, `enable`, `disable`.
        :param pulumi.Input[int] bfd_desired_min_tx: BFD desired minimal transmit interval.
        :param pulumi.Input[int] bfd_detect_mult: BFD detection multiplier.
        :param pulumi.Input[int] bfd_required_min_rx: BFD required minimal receive interval.
        :param pulumi.Input[str] broadcast_forticlient_discovery: Enable/disable broadcasting FortiClient discovery messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] broadcast_forward: Enable/disable broadcast forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] captive_portal: Enable/disable captive portal.
        :param pulumi.Input[int] cli_conn_status: CLI connection status.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceClientOptionArgs']]]] client_options: DHCP client options. The structure of `client_options` block is documented below.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] dedicated_to: Configure interface for single purpose. Valid values: `none`, `management`.
        :param pulumi.Input[str] default_purdue_level: default purdue level of device detected on this interface. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
        :param pulumi.Input[str] defaultgw: Enable to get the gateway IP from the DHCP or PPPoE server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] detected_peer_mtu: MTU of detected peer (0 - 4294967295).
        :param pulumi.Input[str] detectprotocol: Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
        :param pulumi.Input[str] detectserver: Gateway's ping server for this IP.
        :param pulumi.Input[str] device_access_list: Device access list.
        :param pulumi.Input[str] device_identification: Enable/disable passively gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] device_identification_active_scan: Enable/disable active gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] device_netscan: Enable/disable inclusion of devices detected on this interface in network vulnerability scans. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] device_user_identification: Enable/disable passive gathering of user identity information about users on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] devindex: Device Index.
        :param pulumi.Input[str] dhcp_broadcast_flag: Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp_classless_route_addition: Enable/disable addition of classless static routes retrieved from DHCP server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhcp_client_identifier: DHCP client identifier.
        :param pulumi.Input[str] dhcp_relay_agent_option: Enable/disable DHCP relay agent option. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhcp_relay_circuit_id: DHCP relay circuit ID.
        :param pulumi.Input[str] dhcp_relay_interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] dhcp_relay_interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] dhcp_relay_ip: DHCP relay IP address.
        :param pulumi.Input[str] dhcp_relay_link_selection: DHCP relay link selection.
        :param pulumi.Input[str] dhcp_relay_request_all_server: Enable/disable sending DHCP request to all servers. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp_relay_service: Enable/disable allowing this interface to act as a DHCP relay. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp_relay_source_ip: IP address used by the DHCP relay as its source IP.
        :param pulumi.Input[str] dhcp_relay_type: DHCP relay type (regular or IPsec). Valid values: `regular`, `ipsec`.
        :param pulumi.Input[int] dhcp_renew_time: DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
        :param pulumi.Input[str] dhcp_smart_relay: Enable/disable DHCP smart relay. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceDhcpSnoopingServerListArgs']]]] dhcp_snooping_server_lists: Configure DHCP server access list. The structure of `dhcp_snooping_server_list` block is documented below.
        :param pulumi.Input[int] disc_retry_timeout: Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
        :param pulumi.Input[int] disconnect_threshold: Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
        :param pulumi.Input[int] distance: Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
        :param pulumi.Input[str] dns_server_override: Enable/disable use DNS acquired by DHCP or PPPoE. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dns_server_protocol: DNS transport protocols. Valid values: `cleartext`, `dot`, `doh`.
        :param pulumi.Input[str] drop_fragment: Enable/disable drop fragment packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] drop_overlapped_fragment: Enable/disable drop overlapped fragment packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] eap_ca_cert: EAP CA certificate name.
        :param pulumi.Input[str] eap_identity: EAP identity.
        :param pulumi.Input[str] eap_method: EAP method. Valid values: `tls`, `peap`.
        :param pulumi.Input[str] eap_password: EAP password.
        :param pulumi.Input[str] eap_supplicant: Enable/disable EAP-Supplicant. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] eap_user_cert: EAP user certificate name.
        :param pulumi.Input[str] egress_shaping_profile: Outgoing traffic shaping profile.
        :param pulumi.Input[str] endpoint_compliance: Enable/disable endpoint compliance enforcement. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] estimated_downstream_bandwidth: Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
        :param pulumi.Input[int] estimated_upstream_bandwidth: Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
        :param pulumi.Input[str] explicit_ftp_proxy: Enable/disable the explicit FTP proxy on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] explicit_web_proxy: Enable/disable the explicit web proxy on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] external: Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fail_action_on_extender: Action on extender when interface fail . Valid values: `soft-restart`, `hard-restart`, `reboot`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceFailAlertInterfaceArgs']]]] fail_alert_interfaces: Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `fail_alert_interfaces` block is documented below.
        :param pulumi.Input[str] fail_alert_method: Select link-failed-signal or link-down method to alert about a failed link. Valid values: `link-failed-signal`, `link-down`.
        :param pulumi.Input[str] fail_detect: Enable/disable fail detection features for this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fail_detect_option: Options for detecting that this interface has failed. Valid values: `detectserver`, `link-down`.
        :param pulumi.Input[str] fortiheartbeat: Enable/disable FortiHeartBeat (FortiTelemetry on GUI). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortilink: Enable FortiLink to dedicate this interface to manage other Fortinet devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] fortilink_backup_link: fortilink split interface backup link.
        :param pulumi.Input[str] fortilink_neighbor_detect: Protocol for FortiGate neighbor discovery. Valid values: `lldp`, `fortilink`.
        :param pulumi.Input[str] fortilink_split_interface: Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortilink_stacking: Enable/disable FortiLink switch-stacking on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] forward_domain: Transparent mode forward domain.
        :param pulumi.Input[str] forward_error_correction: Configure forward error correction (FEC). Valid values: `none`, `disable`, `cl91-rs-fec`, `cl74-fc-fec`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] gwdetect: Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ha_priority: HA election priority for the PING server.
        :param pulumi.Input[str] icmp_accept_redirect: Enable/disable ICMP accept redirect. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] icmp_send_redirect: Enable/disable ICMP send redirect. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ident_accept: Enable/disable authentication for this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] idle_timeout: PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
        :param pulumi.Input[str] ike_saml_server: Configure IKE authentication SAML server.
        :param pulumi.Input[int] inbandwidth: Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
        :param pulumi.Input[str] ingress_shaping_profile: Incoming traffic shaping profile.
        :param pulumi.Input[int] ingress_spillover_threshold: Ingress Spillover threshold (0 - 16776000 kbps).
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[int] internal: Implicitly created.
        :param pulumi.Input[str] ip: Interface IPv4 address and subnet mask, syntax: X.X.X.X/24.
        :param pulumi.Input[str] ip_managed_by_fortiipam: Enable/disable automatic IP address assignment of this interface by FortiIPAM.
        :param pulumi.Input[str] ipmac: Enable/disable IP/MAC binding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sniffer_mode: Enable/disable the use of this interface as a one-armed sniffer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipunnumbered: Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
        :param pulumi.Input[pulumi.InputType['InterfaceIpv6Args']] ipv6: IPv6 of interface. The structure of `ipv6` block is documented below.
        :param pulumi.Input[str] l2forward: Enable/disable l2 forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] lacp_ha_secondary: LACP HA secondary member. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] lacp_ha_slave: LACP HA slave. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] lacp_mode: LACP mode. Valid values: `static`, `passive`, `active`.
        :param pulumi.Input[str] lacp_speed: How often the interface sends LACP messages. Valid values: `slow`, `fast`.
        :param pulumi.Input[int] lcp_echo_interval: Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
        :param pulumi.Input[int] lcp_max_echo_fails: Maximum missed LCP echo messages before disconnect.
        :param pulumi.Input[int] link_up_delay: Number of milliseconds to wait before considering a link is up.
        :param pulumi.Input[str] lldp_network_policy: LLDP-MED network policy profile.
        :param pulumi.Input[str] lldp_reception: Enable/disable Link Layer Discovery Protocol (LLDP) reception. Valid values: `enable`, `disable`, `vdom`.
        :param pulumi.Input[str] lldp_transmission: Enable/disable Link Layer Discovery Protocol (LLDP) transmission. Valid values: `enable`, `disable`, `vdom`.
        :param pulumi.Input[str] macaddr: Change the interface's MAC address.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceManagedDeviceArgs']]]] managed_devices: Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managed_device` block is documented below.
        :param pulumi.Input[str] managed_subnetwork_size: Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
        :param pulumi.Input[str] management_ip: High Availability in-band management IP address of this interface.
        :param pulumi.Input[int] measured_downstream_bandwidth: Measured downstream bandwidth (kbps).
        :param pulumi.Input[int] measured_upstream_bandwidth: Measured upstream bandwidth (kbps).
        :param pulumi.Input[str] mediatype: Select SFP media interface type Valid values: `none`, `gmii`, `sgmii`, `sr`, `lr`, `cr`, `sr4`, `lr4`, `cr4`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceMemberArgs']]]] members: Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
        :param pulumi.Input[int] min_links: Minimum number of aggregated ports that must be up.
        :param pulumi.Input[str] min_links_down: Action to take when less than the configured minimum number of links are active. Valid values: `operational`, `administrative`.
        :param pulumi.Input[str] mode: Addressing mode (static, DHCP, PPPoE). Valid values: `static`, `dhcp`, `pppoe`.
        :param pulumi.Input[str] monitor_bandwidth: Enable monitoring bandwidth on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mtu: MTU value for this interface.
        :param pulumi.Input[str] mtu_override: Enable to set a custom MTU for this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] ndiscforward: Enable/disable NDISC forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] netbios_forward: Enable/disable NETBIOS forwarding. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] netflow_sampler: Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both). Valid values: `disable`, `tx`, `rx`, `both`.
        :param pulumi.Input[int] outbandwidth: Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
        :param pulumi.Input[int] padt_retry_timeout: PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
        :param pulumi.Input[str] password: PPPoE account's password.
        :param pulumi.Input[int] ping_serv_status: PING server status.
        :param pulumi.Input[int] polling_interval: sFlow polling interval (1 - 255 sec).
        :param pulumi.Input[str] pppoe_unnumbered_negotiate: Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pptp_auth_type: PPTP authentication type. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        :param pulumi.Input[str] pptp_client: Enable/disable PPTP client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pptp_password: PPTP password.
        :param pulumi.Input[str] pptp_server_ip: PPTP server IP address.
        :param pulumi.Input[int] pptp_timeout: Idle timer in minutes (0 for disabled).
        :param pulumi.Input[str] pptp_user: PPTP user name.
        :param pulumi.Input[str] preserve_session_route: Enable/disable preservation of session route when dirty. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Priority of learned routes.
        :param pulumi.Input[str] priority_override: Enable/disable fail back to higher priority port once recovered. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] proxy_captive_portal: Enable/disable proxy captive portal on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] reachable_time: IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
        :param pulumi.Input[str] redundant_interface: Redundant interface.
        :param pulumi.Input[str] remote_ip: Remote IP address of tunnel.
        :param pulumi.Input[str] replacemsg_override_group: Replacement message override group.
        :param pulumi.Input[int] ring_rx: RX ring size.
        :param pulumi.Input[int] ring_tx: TX ring size.
        :param pulumi.Input[str] role: Interface role. Valid values: `lan`, `wan`, `dmz`, `undefined`.
        :param pulumi.Input[str] sample_direction: Data that NetFlow collects (rx, tx, or both). Valid values: `tx`, `rx`, `both`.
        :param pulumi.Input[int] sample_rate: sFlow sample rate (10 - 99999).
        :param pulumi.Input[str] scan_botnet_connections: Enable monitoring or blocking connections to Botnet servers through this interface. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] secondary_ip: Enable/disable adding a secondary IP to this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceSecondaryipArgs']]]] secondaryips: Second IP address of interface. The structure of `secondaryip` block is documented below.
        :param pulumi.Input[str] security_exempt_list: Name of security-exempt-list.
        :param pulumi.Input[str] security_external_logout: URL of external authentication logout server.
        :param pulumi.Input[str] security_external_web: URL of external authentication web server.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceSecurityGroupArgs']]]] security_groups: User groups that can authenticate with the captive portal. The structure of `security_groups` block is documented below.
        :param pulumi.Input[str] security_mac_auth_bypass: Enable/disable MAC authentication bypass. Valid values: `mac-auth-only`, `enable`, `disable`.
        :param pulumi.Input[str] security_mode: Turn on captive portal authentication for this interface. Valid values: `none`, `captive-portal`, `802.1X`.
        :param pulumi.Input[str] security_redirect_url: URL redirection after disclaimer/authentication.
        :param pulumi.Input[str] service_name: PPPoE service name.
        :param pulumi.Input[str] sflow_sampler: Enable/disable sFlow on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] snmp_index: Permanent SNMP Index of the interface.
        :param pulumi.Input[str] speed: Interface speed. The default setting and the options available depend on the interface hardware.
        :param pulumi.Input[int] spillover_threshold: Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
        :param pulumi.Input[str] src_check: Enable/disable source IP check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Bring the interface up or shut the interface down. Valid values: `up`, `down`.
        :param pulumi.Input[str] stp: Enable/disable STP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] stp_ha_secondary: Control STP behaviour on HA secondary. Valid values: `disable`, `enable`, `priority-adjust`.
        :param pulumi.Input[str] stpforward: Enable/disable STP forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] stpforward_mode: Configure STP forwarding mode. Valid values: `rpl-all-ext-id`, `rpl-bridge-ext-id`, `rpl-nothing`.
        :param pulumi.Input[str] subst: Enable to always send packets from this interface to a destination MAC address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] substitute_dst_mac: Destination MAC address that all packets are sent to from this interface.
        :param pulumi.Input[int] swc_first_create: Initial create for switch-controller VLANs.
        :param pulumi.Input[int] swc_vlan: Creation status for switch-controller VLANs.
        :param pulumi.Input[str] switch: Contained in switch.
        :param pulumi.Input[str] switch_controller_access_vlan: Block FortiSwitch port-to-port traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_arp_inspection: Enable/disable FortiSwitch ARP inspection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_dhcp_snooping: Switch controller DHCP snooping. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_dhcp_snooping_option82: Switch controller DHCP snooping option82. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_dhcp_snooping_verify_mac: Switch controller DHCP snooping verify MAC. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_dynamic: Integrated FortiLink settings for managed FortiSwitch.
        :param pulumi.Input[str] switch_controller_feature: Interface's purpose when assigning traffic (read only).
        :param pulumi.Input[str] switch_controller_igmp_snooping: Switch controller IGMP snooping. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_igmp_snooping_fast_leave: Switch controller IGMP snooping fast-leave. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_igmp_snooping_proxy: Switch controller IGMP snooping proxy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_iot_scanning: Enable/disable managed FortiSwitch IoT scanning. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] switch_controller_learning_limit: Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
        :param pulumi.Input[int] switch_controller_mgmt_vlan: VLAN to use for FortiLink management purposes.
        :param pulumi.Input[str] switch_controller_nac: Integrated NAC settings for managed FortiSwitch.
        :param pulumi.Input[str] switch_controller_netflow_collect: NetFlow collection and processing. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_controller_offload: Enable/disable managed FortiSwitch routing offload. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_offload_gw: Enable/disable managed FortiSwitch routing offload gateway. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_offload_ip: IP for routing offload on FortiSwitch.
        :param pulumi.Input[str] switch_controller_rspan_mode: Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_controller_source_ip: Source IP address used in FortiLink over L3 connections. Valid values: `outbound`, `fixed`.
        :param pulumi.Input[str] switch_controller_traffic_policy: Switch controller traffic policy for the VLAN.
        :param pulumi.Input[str] system_id: Define a system ID for the aggregate interface.
        :param pulumi.Input[str] system_id_type: Method in which system ID is generated. Valid values: `auto`, `user`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceTaggingArgs']]]] taggings: Config object tagging. The structure of `tagging` block is documented below.
        :param pulumi.Input[int] tcp_mss: TCP maximum segment size. 0 means do not change segment size.
        :param pulumi.Input[str] trunk: Enable/disable VLAN trunk. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] trust_ip1: Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        :param pulumi.Input[str] trust_ip2: Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        :param pulumi.Input[str] trust_ip3: Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        :param pulumi.Input[str] trust_ip61: Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        :param pulumi.Input[str] trust_ip62: Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        :param pulumi.Input[str] trust_ip63: Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        :param pulumi.Input[str] type: Interface type.
        :param pulumi.Input[str] username: Username of the PPPoE account, provided by your ISP.
        :param pulumi.Input[str] vdom: Interface is in this virtual domain (VDOM).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] vindex: Switch control interface VLAN ID.
        :param pulumi.Input[str] vlan_protocol: Ethernet protocol of VLAN. Valid values: `8021q`, `8021ad`.
        :param pulumi.Input[str] vlanforward: Enable/disable traffic forwarding between VLANs on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] vlanid: VLAN ID (1 - 4094).
        :param pulumi.Input[int] vrf: Virtual Routing Forwarding ID.
        :param pulumi.Input[str] vrrp_virtual_mac: Enable/disable use of virtual MAC for VRRP. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceVrrpArgs']]]] vrrps: VRRP configuration. The structure of `vrrp` block is documented below.
        :param pulumi.Input[str] wccp: Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] weight: Default weight for static routes (if route has no weight configured).
        :param pulumi.Input[str] wins_ip: WINS server IP.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InterfaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure interfaces.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Interface("trname",
            algorithm="L4",
            defaultgw="enable",
            description="Created by Terraform Provider for FortiOS",
            distance=5,
            ip="0.0.0.0 0.0.0.0",
            ipv6=fortios.system.InterfaceIpv6Args(
                nd_mode="basic",
            ),
            mode="dhcp",
            mtu=1500,
            mtu_override="disable",
            snmp_index=3,
            type="physical",
            vdom="root")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Interface can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/interface:Interface labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/interface:Interface labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param InterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ac_name: Optional[pulumi.Input[str]] = None,
                 aggregate: Optional[pulumi.Input[str]] = None,
                 aggregate_type: Optional[pulumi.Input[str]] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 ap_discover: Optional[pulumi.Input[str]] = None,
                 arpforward: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_portal_addr: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 auto_auth_extension_device: Optional[pulumi.Input[str]] = None,
                 autogenerated: Optional[pulumi.Input[str]] = None,
                 bandwidth_measure_time: Optional[pulumi.Input[int]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 bfd_desired_min_tx: Optional[pulumi.Input[int]] = None,
                 bfd_detect_mult: Optional[pulumi.Input[int]] = None,
                 bfd_required_min_rx: Optional[pulumi.Input[int]] = None,
                 broadcast_forticlient_discovery: Optional[pulumi.Input[str]] = None,
                 broadcast_forward: Optional[pulumi.Input[str]] = None,
                 captive_portal: Optional[pulumi.Input[int]] = None,
                 cli_conn_status: Optional[pulumi.Input[int]] = None,
                 client_options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceClientOptionArgs']]]]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 dedicated_to: Optional[pulumi.Input[str]] = None,
                 default_purdue_level: Optional[pulumi.Input[str]] = None,
                 defaultgw: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 detected_peer_mtu: Optional[pulumi.Input[int]] = None,
                 detectprotocol: Optional[pulumi.Input[str]] = None,
                 detectserver: Optional[pulumi.Input[str]] = None,
                 device_access_list: Optional[pulumi.Input[str]] = None,
                 device_identification: Optional[pulumi.Input[str]] = None,
                 device_identification_active_scan: Optional[pulumi.Input[str]] = None,
                 device_netscan: Optional[pulumi.Input[str]] = None,
                 device_user_identification: Optional[pulumi.Input[str]] = None,
                 devindex: Optional[pulumi.Input[int]] = None,
                 dhcp_broadcast_flag: Optional[pulumi.Input[str]] = None,
                 dhcp_classless_route_addition: Optional[pulumi.Input[str]] = None,
                 dhcp_client_identifier: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_agent_option: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_circuit_id: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_interface: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_interface_select_method: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_ip: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_link_selection: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_request_all_server: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_service: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_source_ip: Optional[pulumi.Input[str]] = None,
                 dhcp_relay_type: Optional[pulumi.Input[str]] = None,
                 dhcp_renew_time: Optional[pulumi.Input[int]] = None,
                 dhcp_smart_relay: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping_server_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceDhcpSnoopingServerListArgs']]]]] = None,
                 disc_retry_timeout: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dns_server_override: Optional[pulumi.Input[str]] = None,
                 dns_server_protocol: Optional[pulumi.Input[str]] = None,
                 drop_fragment: Optional[pulumi.Input[str]] = None,
                 drop_overlapped_fragment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 eap_ca_cert: Optional[pulumi.Input[str]] = None,
                 eap_identity: Optional[pulumi.Input[str]] = None,
                 eap_method: Optional[pulumi.Input[str]] = None,
                 eap_password: Optional[pulumi.Input[str]] = None,
                 eap_supplicant: Optional[pulumi.Input[str]] = None,
                 eap_user_cert: Optional[pulumi.Input[str]] = None,
                 egress_shaping_profile: Optional[pulumi.Input[str]] = None,
                 endpoint_compliance: Optional[pulumi.Input[str]] = None,
                 estimated_downstream_bandwidth: Optional[pulumi.Input[int]] = None,
                 estimated_upstream_bandwidth: Optional[pulumi.Input[int]] = None,
                 explicit_ftp_proxy: Optional[pulumi.Input[str]] = None,
                 explicit_web_proxy: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 fail_action_on_extender: Optional[pulumi.Input[str]] = None,
                 fail_alert_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceFailAlertInterfaceArgs']]]]] = None,
                 fail_alert_method: Optional[pulumi.Input[str]] = None,
                 fail_detect: Optional[pulumi.Input[str]] = None,
                 fail_detect_option: Optional[pulumi.Input[str]] = None,
                 fortiheartbeat: Optional[pulumi.Input[str]] = None,
                 fortilink: Optional[pulumi.Input[str]] = None,
                 fortilink_backup_link: Optional[pulumi.Input[int]] = None,
                 fortilink_neighbor_detect: Optional[pulumi.Input[str]] = None,
                 fortilink_split_interface: Optional[pulumi.Input[str]] = None,
                 fortilink_stacking: Optional[pulumi.Input[str]] = None,
                 forward_domain: Optional[pulumi.Input[int]] = None,
                 forward_error_correction: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gwdetect: Optional[pulumi.Input[str]] = None,
                 ha_priority: Optional[pulumi.Input[int]] = None,
                 icmp_accept_redirect: Optional[pulumi.Input[str]] = None,
                 icmp_send_redirect: Optional[pulumi.Input[str]] = None,
                 ident_accept: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 ike_saml_server: Optional[pulumi.Input[str]] = None,
                 inbandwidth: Optional[pulumi.Input[int]] = None,
                 ingress_shaping_profile: Optional[pulumi.Input[str]] = None,
                 ingress_spillover_threshold: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 internal: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ip_managed_by_fortiipam: Optional[pulumi.Input[str]] = None,
                 ipmac: Optional[pulumi.Input[str]] = None,
                 ips_sniffer_mode: Optional[pulumi.Input[str]] = None,
                 ipunnumbered: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[pulumi.InputType['InterfaceIpv6Args']]] = None,
                 l2forward: Optional[pulumi.Input[str]] = None,
                 lacp_ha_secondary: Optional[pulumi.Input[str]] = None,
                 lacp_ha_slave: Optional[pulumi.Input[str]] = None,
                 lacp_mode: Optional[pulumi.Input[str]] = None,
                 lacp_speed: Optional[pulumi.Input[str]] = None,
                 lcp_echo_interval: Optional[pulumi.Input[int]] = None,
                 lcp_max_echo_fails: Optional[pulumi.Input[int]] = None,
                 link_up_delay: Optional[pulumi.Input[int]] = None,
                 lldp_network_policy: Optional[pulumi.Input[str]] = None,
                 lldp_reception: Optional[pulumi.Input[str]] = None,
                 lldp_transmission: Optional[pulumi.Input[str]] = None,
                 macaddr: Optional[pulumi.Input[str]] = None,
                 managed_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceManagedDeviceArgs']]]]] = None,
                 managed_subnetwork_size: Optional[pulumi.Input[str]] = None,
                 management_ip: Optional[pulumi.Input[str]] = None,
                 measured_downstream_bandwidth: Optional[pulumi.Input[int]] = None,
                 measured_upstream_bandwidth: Optional[pulumi.Input[int]] = None,
                 mediatype: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceMemberArgs']]]]] = None,
                 min_links: Optional[pulumi.Input[int]] = None,
                 min_links_down: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 monitor_bandwidth: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 mtu_override: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ndiscforward: Optional[pulumi.Input[str]] = None,
                 netbios_forward: Optional[pulumi.Input[str]] = None,
                 netflow_sampler: Optional[pulumi.Input[str]] = None,
                 outbandwidth: Optional[pulumi.Input[int]] = None,
                 padt_retry_timeout: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ping_serv_status: Optional[pulumi.Input[int]] = None,
                 polling_interval: Optional[pulumi.Input[int]] = None,
                 pppoe_unnumbered_negotiate: Optional[pulumi.Input[str]] = None,
                 pptp_auth_type: Optional[pulumi.Input[str]] = None,
                 pptp_client: Optional[pulumi.Input[str]] = None,
                 pptp_password: Optional[pulumi.Input[str]] = None,
                 pptp_server_ip: Optional[pulumi.Input[str]] = None,
                 pptp_timeout: Optional[pulumi.Input[int]] = None,
                 pptp_user: Optional[pulumi.Input[str]] = None,
                 preserve_session_route: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 priority_override: Optional[pulumi.Input[str]] = None,
                 proxy_captive_portal: Optional[pulumi.Input[str]] = None,
                 reachable_time: Optional[pulumi.Input[int]] = None,
                 redundant_interface: Optional[pulumi.Input[str]] = None,
                 remote_ip: Optional[pulumi.Input[str]] = None,
                 replacemsg_override_group: Optional[pulumi.Input[str]] = None,
                 ring_rx: Optional[pulumi.Input[int]] = None,
                 ring_tx: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 sample_direction: Optional[pulumi.Input[str]] = None,
                 sample_rate: Optional[pulumi.Input[int]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 secondary_ip: Optional[pulumi.Input[str]] = None,
                 secondaryips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceSecondaryipArgs']]]]] = None,
                 security_exempt_list: Optional[pulumi.Input[str]] = None,
                 security_external_logout: Optional[pulumi.Input[str]] = None,
                 security_external_web: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceSecurityGroupArgs']]]]] = None,
                 security_mac_auth_bypass: Optional[pulumi.Input[str]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 security_redirect_url: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 sflow_sampler: Optional[pulumi.Input[str]] = None,
                 snmp_index: Optional[pulumi.Input[int]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 spillover_threshold: Optional[pulumi.Input[int]] = None,
                 src_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 stp: Optional[pulumi.Input[str]] = None,
                 stp_ha_secondary: Optional[pulumi.Input[str]] = None,
                 stpforward: Optional[pulumi.Input[str]] = None,
                 stpforward_mode: Optional[pulumi.Input[str]] = None,
                 subst: Optional[pulumi.Input[str]] = None,
                 substitute_dst_mac: Optional[pulumi.Input[str]] = None,
                 swc_first_create: Optional[pulumi.Input[int]] = None,
                 swc_vlan: Optional[pulumi.Input[int]] = None,
                 switch: Optional[pulumi.Input[str]] = None,
                 switch_controller_access_vlan: Optional[pulumi.Input[str]] = None,
                 switch_controller_arp_inspection: Optional[pulumi.Input[str]] = None,
                 switch_controller_dhcp_snooping: Optional[pulumi.Input[str]] = None,
                 switch_controller_dhcp_snooping_option82: Optional[pulumi.Input[str]] = None,
                 switch_controller_dhcp_snooping_verify_mac: Optional[pulumi.Input[str]] = None,
                 switch_controller_dynamic: Optional[pulumi.Input[str]] = None,
                 switch_controller_feature: Optional[pulumi.Input[str]] = None,
                 switch_controller_igmp_snooping: Optional[pulumi.Input[str]] = None,
                 switch_controller_igmp_snooping_fast_leave: Optional[pulumi.Input[str]] = None,
                 switch_controller_igmp_snooping_proxy: Optional[pulumi.Input[str]] = None,
                 switch_controller_iot_scanning: Optional[pulumi.Input[str]] = None,
                 switch_controller_learning_limit: Optional[pulumi.Input[int]] = None,
                 switch_controller_mgmt_vlan: Optional[pulumi.Input[int]] = None,
                 switch_controller_nac: Optional[pulumi.Input[str]] = None,
                 switch_controller_netflow_collect: Optional[pulumi.Input[str]] = None,
                 switch_controller_offload: Optional[pulumi.Input[str]] = None,
                 switch_controller_offload_gw: Optional[pulumi.Input[str]] = None,
                 switch_controller_offload_ip: Optional[pulumi.Input[str]] = None,
                 switch_controller_rspan_mode: Optional[pulumi.Input[str]] = None,
                 switch_controller_source_ip: Optional[pulumi.Input[str]] = None,
                 switch_controller_traffic_policy: Optional[pulumi.Input[str]] = None,
                 system_id: Optional[pulumi.Input[str]] = None,
                 system_id_type: Optional[pulumi.Input[str]] = None,
                 taggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceTaggingArgs']]]]] = None,
                 tcp_mss: Optional[pulumi.Input[int]] = None,
                 trunk: Optional[pulumi.Input[str]] = None,
                 trust_ip1: Optional[pulumi.Input[str]] = None,
                 trust_ip2: Optional[pulumi.Input[str]] = None,
                 trust_ip3: Optional[pulumi.Input[str]] = None,
                 trust_ip61: Optional[pulumi.Input[str]] = None,
                 trust_ip62: Optional[pulumi.Input[str]] = None,
                 trust_ip63: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vindex: Optional[pulumi.Input[int]] = None,
                 vlan_protocol: Optional[pulumi.Input[str]] = None,
                 vlanforward: Optional[pulumi.Input[str]] = None,
                 vlanid: Optional[pulumi.Input[int]] = None,
                 vrf: Optional[pulumi.Input[int]] = None,
                 vrrp_virtual_mac: Optional[pulumi.Input[str]] = None,
                 vrrps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceVrrpArgs']]]]] = None,
                 wccp: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 wins_ip: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InterfaceArgs.__new__(InterfaceArgs)

            __props__.__dict__["ac_name"] = ac_name
            __props__.__dict__["aggregate"] = aggregate
            __props__.__dict__["aggregate_type"] = aggregate_type
            __props__.__dict__["algorithm"] = algorithm
            __props__.__dict__["alias"] = alias
            __props__.__dict__["allowaccess"] = allowaccess
            __props__.__dict__["ap_discover"] = ap_discover
            __props__.__dict__["arpforward"] = arpforward
            __props__.__dict__["auth_cert"] = auth_cert
            __props__.__dict__["auth_portal_addr"] = auth_portal_addr
            __props__.__dict__["auth_type"] = auth_type
            __props__.__dict__["auto_auth_extension_device"] = auto_auth_extension_device
            __props__.__dict__["autogenerated"] = autogenerated
            __props__.__dict__["bandwidth_measure_time"] = bandwidth_measure_time
            __props__.__dict__["bfd"] = bfd
            __props__.__dict__["bfd_desired_min_tx"] = bfd_desired_min_tx
            __props__.__dict__["bfd_detect_mult"] = bfd_detect_mult
            __props__.__dict__["bfd_required_min_rx"] = bfd_required_min_rx
            __props__.__dict__["broadcast_forticlient_discovery"] = broadcast_forticlient_discovery
            __props__.__dict__["broadcast_forward"] = broadcast_forward
            __props__.__dict__["captive_portal"] = captive_portal
            __props__.__dict__["cli_conn_status"] = cli_conn_status
            __props__.__dict__["client_options"] = client_options
            __props__.__dict__["color"] = color
            __props__.__dict__["dedicated_to"] = dedicated_to
            __props__.__dict__["default_purdue_level"] = default_purdue_level
            __props__.__dict__["defaultgw"] = defaultgw
            __props__.__dict__["description"] = description
            __props__.__dict__["detected_peer_mtu"] = detected_peer_mtu
            __props__.__dict__["detectprotocol"] = detectprotocol
            __props__.__dict__["detectserver"] = detectserver
            __props__.__dict__["device_access_list"] = device_access_list
            __props__.__dict__["device_identification"] = device_identification
            __props__.__dict__["device_identification_active_scan"] = device_identification_active_scan
            __props__.__dict__["device_netscan"] = device_netscan
            __props__.__dict__["device_user_identification"] = device_user_identification
            __props__.__dict__["devindex"] = devindex
            __props__.__dict__["dhcp_broadcast_flag"] = dhcp_broadcast_flag
            __props__.__dict__["dhcp_classless_route_addition"] = dhcp_classless_route_addition
            __props__.__dict__["dhcp_client_identifier"] = dhcp_client_identifier
            __props__.__dict__["dhcp_relay_agent_option"] = dhcp_relay_agent_option
            __props__.__dict__["dhcp_relay_circuit_id"] = dhcp_relay_circuit_id
            __props__.__dict__["dhcp_relay_interface"] = dhcp_relay_interface
            __props__.__dict__["dhcp_relay_interface_select_method"] = dhcp_relay_interface_select_method
            __props__.__dict__["dhcp_relay_ip"] = dhcp_relay_ip
            __props__.__dict__["dhcp_relay_link_selection"] = dhcp_relay_link_selection
            __props__.__dict__["dhcp_relay_request_all_server"] = dhcp_relay_request_all_server
            __props__.__dict__["dhcp_relay_service"] = dhcp_relay_service
            __props__.__dict__["dhcp_relay_source_ip"] = dhcp_relay_source_ip
            __props__.__dict__["dhcp_relay_type"] = dhcp_relay_type
            __props__.__dict__["dhcp_renew_time"] = dhcp_renew_time
            __props__.__dict__["dhcp_smart_relay"] = dhcp_smart_relay
            __props__.__dict__["dhcp_snooping_server_lists"] = dhcp_snooping_server_lists
            __props__.__dict__["disc_retry_timeout"] = disc_retry_timeout
            __props__.__dict__["disconnect_threshold"] = disconnect_threshold
            __props__.__dict__["distance"] = distance
            __props__.__dict__["dns_server_override"] = dns_server_override
            __props__.__dict__["dns_server_protocol"] = dns_server_protocol
            __props__.__dict__["drop_fragment"] = drop_fragment
            __props__.__dict__["drop_overlapped_fragment"] = drop_overlapped_fragment
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["eap_ca_cert"] = eap_ca_cert
            __props__.__dict__["eap_identity"] = eap_identity
            __props__.__dict__["eap_method"] = eap_method
            __props__.__dict__["eap_password"] = None if eap_password is None else pulumi.Output.secret(eap_password)
            __props__.__dict__["eap_supplicant"] = eap_supplicant
            __props__.__dict__["eap_user_cert"] = eap_user_cert
            __props__.__dict__["egress_shaping_profile"] = egress_shaping_profile
            __props__.__dict__["endpoint_compliance"] = endpoint_compliance
            __props__.__dict__["estimated_downstream_bandwidth"] = estimated_downstream_bandwidth
            __props__.__dict__["estimated_upstream_bandwidth"] = estimated_upstream_bandwidth
            __props__.__dict__["explicit_ftp_proxy"] = explicit_ftp_proxy
            __props__.__dict__["explicit_web_proxy"] = explicit_web_proxy
            __props__.__dict__["external"] = external
            __props__.__dict__["fail_action_on_extender"] = fail_action_on_extender
            __props__.__dict__["fail_alert_interfaces"] = fail_alert_interfaces
            __props__.__dict__["fail_alert_method"] = fail_alert_method
            __props__.__dict__["fail_detect"] = fail_detect
            __props__.__dict__["fail_detect_option"] = fail_detect_option
            __props__.__dict__["fortiheartbeat"] = fortiheartbeat
            __props__.__dict__["fortilink"] = fortilink
            __props__.__dict__["fortilink_backup_link"] = fortilink_backup_link
            __props__.__dict__["fortilink_neighbor_detect"] = fortilink_neighbor_detect
            __props__.__dict__["fortilink_split_interface"] = fortilink_split_interface
            __props__.__dict__["fortilink_stacking"] = fortilink_stacking
            __props__.__dict__["forward_domain"] = forward_domain
            __props__.__dict__["forward_error_correction"] = forward_error_correction
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["gwdetect"] = gwdetect
            __props__.__dict__["ha_priority"] = ha_priority
            __props__.__dict__["icmp_accept_redirect"] = icmp_accept_redirect
            __props__.__dict__["icmp_send_redirect"] = icmp_send_redirect
            __props__.__dict__["ident_accept"] = ident_accept
            __props__.__dict__["idle_timeout"] = idle_timeout
            __props__.__dict__["ike_saml_server"] = ike_saml_server
            __props__.__dict__["inbandwidth"] = inbandwidth
            __props__.__dict__["ingress_shaping_profile"] = ingress_shaping_profile
            __props__.__dict__["ingress_spillover_threshold"] = ingress_spillover_threshold
            __props__.__dict__["interface"] = interface
            __props__.__dict__["internal"] = internal
            __props__.__dict__["ip"] = ip
            __props__.__dict__["ip_managed_by_fortiipam"] = ip_managed_by_fortiipam
            __props__.__dict__["ipmac"] = ipmac
            __props__.__dict__["ips_sniffer_mode"] = ips_sniffer_mode
            __props__.__dict__["ipunnumbered"] = ipunnumbered
            __props__.__dict__["ipv6"] = ipv6
            __props__.__dict__["l2forward"] = l2forward
            __props__.__dict__["lacp_ha_secondary"] = lacp_ha_secondary
            __props__.__dict__["lacp_ha_slave"] = lacp_ha_slave
            __props__.__dict__["lacp_mode"] = lacp_mode
            __props__.__dict__["lacp_speed"] = lacp_speed
            __props__.__dict__["lcp_echo_interval"] = lcp_echo_interval
            __props__.__dict__["lcp_max_echo_fails"] = lcp_max_echo_fails
            __props__.__dict__["link_up_delay"] = link_up_delay
            __props__.__dict__["lldp_network_policy"] = lldp_network_policy
            __props__.__dict__["lldp_reception"] = lldp_reception
            __props__.__dict__["lldp_transmission"] = lldp_transmission
            __props__.__dict__["macaddr"] = macaddr
            __props__.__dict__["managed_devices"] = managed_devices
            __props__.__dict__["managed_subnetwork_size"] = managed_subnetwork_size
            __props__.__dict__["management_ip"] = management_ip
            __props__.__dict__["measured_downstream_bandwidth"] = measured_downstream_bandwidth
            __props__.__dict__["measured_upstream_bandwidth"] = measured_upstream_bandwidth
            __props__.__dict__["mediatype"] = mediatype
            __props__.__dict__["members"] = members
            __props__.__dict__["min_links"] = min_links
            __props__.__dict__["min_links_down"] = min_links_down
            __props__.__dict__["mode"] = mode
            __props__.__dict__["monitor_bandwidth"] = monitor_bandwidth
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["mtu_override"] = mtu_override
            __props__.__dict__["name"] = name
            __props__.__dict__["ndiscforward"] = ndiscforward
            __props__.__dict__["netbios_forward"] = netbios_forward
            __props__.__dict__["netflow_sampler"] = netflow_sampler
            __props__.__dict__["outbandwidth"] = outbandwidth
            __props__.__dict__["padt_retry_timeout"] = padt_retry_timeout
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["ping_serv_status"] = ping_serv_status
            __props__.__dict__["polling_interval"] = polling_interval
            __props__.__dict__["pppoe_unnumbered_negotiate"] = pppoe_unnumbered_negotiate
            __props__.__dict__["pptp_auth_type"] = pptp_auth_type
            __props__.__dict__["pptp_client"] = pptp_client
            __props__.__dict__["pptp_password"] = None if pptp_password is None else pulumi.Output.secret(pptp_password)
            __props__.__dict__["pptp_server_ip"] = pptp_server_ip
            __props__.__dict__["pptp_timeout"] = pptp_timeout
            __props__.__dict__["pptp_user"] = pptp_user
            __props__.__dict__["preserve_session_route"] = preserve_session_route
            __props__.__dict__["priority"] = priority
            __props__.__dict__["priority_override"] = priority_override
            __props__.__dict__["proxy_captive_portal"] = proxy_captive_portal
            __props__.__dict__["reachable_time"] = reachable_time
            __props__.__dict__["redundant_interface"] = redundant_interface
            __props__.__dict__["remote_ip"] = remote_ip
            __props__.__dict__["replacemsg_override_group"] = replacemsg_override_group
            __props__.__dict__["ring_rx"] = ring_rx
            __props__.__dict__["ring_tx"] = ring_tx
            __props__.__dict__["role"] = role
            __props__.__dict__["sample_direction"] = sample_direction
            __props__.__dict__["sample_rate"] = sample_rate
            __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
            __props__.__dict__["secondary_ip"] = secondary_ip
            __props__.__dict__["secondaryips"] = secondaryips
            __props__.__dict__["security_exempt_list"] = security_exempt_list
            __props__.__dict__["security_external_logout"] = security_external_logout
            __props__.__dict__["security_external_web"] = security_external_web
            __props__.__dict__["security_groups"] = security_groups
            __props__.__dict__["security_mac_auth_bypass"] = security_mac_auth_bypass
            __props__.__dict__["security_mode"] = security_mode
            __props__.__dict__["security_redirect_url"] = security_redirect_url
            __props__.__dict__["service_name"] = service_name
            __props__.__dict__["sflow_sampler"] = sflow_sampler
            __props__.__dict__["snmp_index"] = snmp_index
            __props__.__dict__["speed"] = speed
            __props__.__dict__["spillover_threshold"] = spillover_threshold
            __props__.__dict__["src_check"] = src_check
            __props__.__dict__["status"] = status
            __props__.__dict__["stp"] = stp
            __props__.__dict__["stp_ha_secondary"] = stp_ha_secondary
            __props__.__dict__["stpforward"] = stpforward
            __props__.__dict__["stpforward_mode"] = stpforward_mode
            __props__.__dict__["subst"] = subst
            __props__.__dict__["substitute_dst_mac"] = substitute_dst_mac
            __props__.__dict__["swc_first_create"] = swc_first_create
            __props__.__dict__["swc_vlan"] = swc_vlan
            __props__.__dict__["switch"] = switch
            __props__.__dict__["switch_controller_access_vlan"] = switch_controller_access_vlan
            __props__.__dict__["switch_controller_arp_inspection"] = switch_controller_arp_inspection
            __props__.__dict__["switch_controller_dhcp_snooping"] = switch_controller_dhcp_snooping
            __props__.__dict__["switch_controller_dhcp_snooping_option82"] = switch_controller_dhcp_snooping_option82
            __props__.__dict__["switch_controller_dhcp_snooping_verify_mac"] = switch_controller_dhcp_snooping_verify_mac
            __props__.__dict__["switch_controller_dynamic"] = switch_controller_dynamic
            __props__.__dict__["switch_controller_feature"] = switch_controller_feature
            __props__.__dict__["switch_controller_igmp_snooping"] = switch_controller_igmp_snooping
            __props__.__dict__["switch_controller_igmp_snooping_fast_leave"] = switch_controller_igmp_snooping_fast_leave
            __props__.__dict__["switch_controller_igmp_snooping_proxy"] = switch_controller_igmp_snooping_proxy
            __props__.__dict__["switch_controller_iot_scanning"] = switch_controller_iot_scanning
            __props__.__dict__["switch_controller_learning_limit"] = switch_controller_learning_limit
            __props__.__dict__["switch_controller_mgmt_vlan"] = switch_controller_mgmt_vlan
            __props__.__dict__["switch_controller_nac"] = switch_controller_nac
            __props__.__dict__["switch_controller_netflow_collect"] = switch_controller_netflow_collect
            __props__.__dict__["switch_controller_offload"] = switch_controller_offload
            __props__.__dict__["switch_controller_offload_gw"] = switch_controller_offload_gw
            __props__.__dict__["switch_controller_offload_ip"] = switch_controller_offload_ip
            __props__.__dict__["switch_controller_rspan_mode"] = switch_controller_rspan_mode
            __props__.__dict__["switch_controller_source_ip"] = switch_controller_source_ip
            __props__.__dict__["switch_controller_traffic_policy"] = switch_controller_traffic_policy
            __props__.__dict__["system_id"] = system_id
            __props__.__dict__["system_id_type"] = system_id_type
            __props__.__dict__["taggings"] = taggings
            __props__.__dict__["tcp_mss"] = tcp_mss
            __props__.__dict__["trunk"] = trunk
            __props__.__dict__["trust_ip1"] = trust_ip1
            __props__.__dict__["trust_ip2"] = trust_ip2
            __props__.__dict__["trust_ip3"] = trust_ip3
            __props__.__dict__["trust_ip61"] = trust_ip61
            __props__.__dict__["trust_ip62"] = trust_ip62
            __props__.__dict__["trust_ip63"] = trust_ip63
            __props__.__dict__["type"] = type
            __props__.__dict__["username"] = username
            if vdom is None and not opts.urn:
                raise TypeError("Missing required property 'vdom'")
            __props__.__dict__["vdom"] = vdom
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vindex"] = vindex
            __props__.__dict__["vlan_protocol"] = vlan_protocol
            __props__.__dict__["vlanforward"] = vlanforward
            __props__.__dict__["vlanid"] = vlanid
            __props__.__dict__["vrf"] = vrf
            __props__.__dict__["vrrp_virtual_mac"] = vrrp_virtual_mac
            __props__.__dict__["vrrps"] = vrrps
            __props__.__dict__["wccp"] = wccp
            __props__.__dict__["weight"] = weight
            __props__.__dict__["wins_ip"] = wins_ip
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["eapPassword", "password", "pptpPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Interface, __self__).__init__(
            'fortios:system/interface:Interface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ac_name: Optional[pulumi.Input[str]] = None,
            aggregate: Optional[pulumi.Input[str]] = None,
            aggregate_type: Optional[pulumi.Input[str]] = None,
            algorithm: Optional[pulumi.Input[str]] = None,
            alias: Optional[pulumi.Input[str]] = None,
            allowaccess: Optional[pulumi.Input[str]] = None,
            ap_discover: Optional[pulumi.Input[str]] = None,
            arpforward: Optional[pulumi.Input[str]] = None,
            auth_cert: Optional[pulumi.Input[str]] = None,
            auth_portal_addr: Optional[pulumi.Input[str]] = None,
            auth_type: Optional[pulumi.Input[str]] = None,
            auto_auth_extension_device: Optional[pulumi.Input[str]] = None,
            autogenerated: Optional[pulumi.Input[str]] = None,
            bandwidth_measure_time: Optional[pulumi.Input[int]] = None,
            bfd: Optional[pulumi.Input[str]] = None,
            bfd_desired_min_tx: Optional[pulumi.Input[int]] = None,
            bfd_detect_mult: Optional[pulumi.Input[int]] = None,
            bfd_required_min_rx: Optional[pulumi.Input[int]] = None,
            broadcast_forticlient_discovery: Optional[pulumi.Input[str]] = None,
            broadcast_forward: Optional[pulumi.Input[str]] = None,
            captive_portal: Optional[pulumi.Input[int]] = None,
            cli_conn_status: Optional[pulumi.Input[int]] = None,
            client_options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceClientOptionArgs']]]]] = None,
            color: Optional[pulumi.Input[int]] = None,
            dedicated_to: Optional[pulumi.Input[str]] = None,
            default_purdue_level: Optional[pulumi.Input[str]] = None,
            defaultgw: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            detected_peer_mtu: Optional[pulumi.Input[int]] = None,
            detectprotocol: Optional[pulumi.Input[str]] = None,
            detectserver: Optional[pulumi.Input[str]] = None,
            device_access_list: Optional[pulumi.Input[str]] = None,
            device_identification: Optional[pulumi.Input[str]] = None,
            device_identification_active_scan: Optional[pulumi.Input[str]] = None,
            device_netscan: Optional[pulumi.Input[str]] = None,
            device_user_identification: Optional[pulumi.Input[str]] = None,
            devindex: Optional[pulumi.Input[int]] = None,
            dhcp_broadcast_flag: Optional[pulumi.Input[str]] = None,
            dhcp_classless_route_addition: Optional[pulumi.Input[str]] = None,
            dhcp_client_identifier: Optional[pulumi.Input[str]] = None,
            dhcp_relay_agent_option: Optional[pulumi.Input[str]] = None,
            dhcp_relay_circuit_id: Optional[pulumi.Input[str]] = None,
            dhcp_relay_interface: Optional[pulumi.Input[str]] = None,
            dhcp_relay_interface_select_method: Optional[pulumi.Input[str]] = None,
            dhcp_relay_ip: Optional[pulumi.Input[str]] = None,
            dhcp_relay_link_selection: Optional[pulumi.Input[str]] = None,
            dhcp_relay_request_all_server: Optional[pulumi.Input[str]] = None,
            dhcp_relay_service: Optional[pulumi.Input[str]] = None,
            dhcp_relay_source_ip: Optional[pulumi.Input[str]] = None,
            dhcp_relay_type: Optional[pulumi.Input[str]] = None,
            dhcp_renew_time: Optional[pulumi.Input[int]] = None,
            dhcp_smart_relay: Optional[pulumi.Input[str]] = None,
            dhcp_snooping_server_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceDhcpSnoopingServerListArgs']]]]] = None,
            disc_retry_timeout: Optional[pulumi.Input[int]] = None,
            disconnect_threshold: Optional[pulumi.Input[int]] = None,
            distance: Optional[pulumi.Input[int]] = None,
            dns_server_override: Optional[pulumi.Input[str]] = None,
            dns_server_protocol: Optional[pulumi.Input[str]] = None,
            drop_fragment: Optional[pulumi.Input[str]] = None,
            drop_overlapped_fragment: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            eap_ca_cert: Optional[pulumi.Input[str]] = None,
            eap_identity: Optional[pulumi.Input[str]] = None,
            eap_method: Optional[pulumi.Input[str]] = None,
            eap_password: Optional[pulumi.Input[str]] = None,
            eap_supplicant: Optional[pulumi.Input[str]] = None,
            eap_user_cert: Optional[pulumi.Input[str]] = None,
            egress_shaping_profile: Optional[pulumi.Input[str]] = None,
            endpoint_compliance: Optional[pulumi.Input[str]] = None,
            estimated_downstream_bandwidth: Optional[pulumi.Input[int]] = None,
            estimated_upstream_bandwidth: Optional[pulumi.Input[int]] = None,
            explicit_ftp_proxy: Optional[pulumi.Input[str]] = None,
            explicit_web_proxy: Optional[pulumi.Input[str]] = None,
            external: Optional[pulumi.Input[str]] = None,
            fail_action_on_extender: Optional[pulumi.Input[str]] = None,
            fail_alert_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceFailAlertInterfaceArgs']]]]] = None,
            fail_alert_method: Optional[pulumi.Input[str]] = None,
            fail_detect: Optional[pulumi.Input[str]] = None,
            fail_detect_option: Optional[pulumi.Input[str]] = None,
            fortiheartbeat: Optional[pulumi.Input[str]] = None,
            fortilink: Optional[pulumi.Input[str]] = None,
            fortilink_backup_link: Optional[pulumi.Input[int]] = None,
            fortilink_neighbor_detect: Optional[pulumi.Input[str]] = None,
            fortilink_split_interface: Optional[pulumi.Input[str]] = None,
            fortilink_stacking: Optional[pulumi.Input[str]] = None,
            forward_domain: Optional[pulumi.Input[int]] = None,
            forward_error_correction: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            gwdetect: Optional[pulumi.Input[str]] = None,
            ha_priority: Optional[pulumi.Input[int]] = None,
            icmp_accept_redirect: Optional[pulumi.Input[str]] = None,
            icmp_send_redirect: Optional[pulumi.Input[str]] = None,
            ident_accept: Optional[pulumi.Input[str]] = None,
            idle_timeout: Optional[pulumi.Input[int]] = None,
            ike_saml_server: Optional[pulumi.Input[str]] = None,
            inbandwidth: Optional[pulumi.Input[int]] = None,
            ingress_shaping_profile: Optional[pulumi.Input[str]] = None,
            ingress_spillover_threshold: Optional[pulumi.Input[int]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            internal: Optional[pulumi.Input[int]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            ip_managed_by_fortiipam: Optional[pulumi.Input[str]] = None,
            ipmac: Optional[pulumi.Input[str]] = None,
            ips_sniffer_mode: Optional[pulumi.Input[str]] = None,
            ipunnumbered: Optional[pulumi.Input[str]] = None,
            ipv6: Optional[pulumi.Input[pulumi.InputType['InterfaceIpv6Args']]] = None,
            l2forward: Optional[pulumi.Input[str]] = None,
            lacp_ha_secondary: Optional[pulumi.Input[str]] = None,
            lacp_ha_slave: Optional[pulumi.Input[str]] = None,
            lacp_mode: Optional[pulumi.Input[str]] = None,
            lacp_speed: Optional[pulumi.Input[str]] = None,
            lcp_echo_interval: Optional[pulumi.Input[int]] = None,
            lcp_max_echo_fails: Optional[pulumi.Input[int]] = None,
            link_up_delay: Optional[pulumi.Input[int]] = None,
            lldp_network_policy: Optional[pulumi.Input[str]] = None,
            lldp_reception: Optional[pulumi.Input[str]] = None,
            lldp_transmission: Optional[pulumi.Input[str]] = None,
            macaddr: Optional[pulumi.Input[str]] = None,
            managed_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceManagedDeviceArgs']]]]] = None,
            managed_subnetwork_size: Optional[pulumi.Input[str]] = None,
            management_ip: Optional[pulumi.Input[str]] = None,
            measured_downstream_bandwidth: Optional[pulumi.Input[int]] = None,
            measured_upstream_bandwidth: Optional[pulumi.Input[int]] = None,
            mediatype: Optional[pulumi.Input[str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceMemberArgs']]]]] = None,
            min_links: Optional[pulumi.Input[int]] = None,
            min_links_down: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            monitor_bandwidth: Optional[pulumi.Input[str]] = None,
            mtu: Optional[pulumi.Input[int]] = None,
            mtu_override: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            ndiscforward: Optional[pulumi.Input[str]] = None,
            netbios_forward: Optional[pulumi.Input[str]] = None,
            netflow_sampler: Optional[pulumi.Input[str]] = None,
            outbandwidth: Optional[pulumi.Input[int]] = None,
            padt_retry_timeout: Optional[pulumi.Input[int]] = None,
            password: Optional[pulumi.Input[str]] = None,
            ping_serv_status: Optional[pulumi.Input[int]] = None,
            polling_interval: Optional[pulumi.Input[int]] = None,
            pppoe_unnumbered_negotiate: Optional[pulumi.Input[str]] = None,
            pptp_auth_type: Optional[pulumi.Input[str]] = None,
            pptp_client: Optional[pulumi.Input[str]] = None,
            pptp_password: Optional[pulumi.Input[str]] = None,
            pptp_server_ip: Optional[pulumi.Input[str]] = None,
            pptp_timeout: Optional[pulumi.Input[int]] = None,
            pptp_user: Optional[pulumi.Input[str]] = None,
            preserve_session_route: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            priority_override: Optional[pulumi.Input[str]] = None,
            proxy_captive_portal: Optional[pulumi.Input[str]] = None,
            reachable_time: Optional[pulumi.Input[int]] = None,
            redundant_interface: Optional[pulumi.Input[str]] = None,
            remote_ip: Optional[pulumi.Input[str]] = None,
            replacemsg_override_group: Optional[pulumi.Input[str]] = None,
            ring_rx: Optional[pulumi.Input[int]] = None,
            ring_tx: Optional[pulumi.Input[int]] = None,
            role: Optional[pulumi.Input[str]] = None,
            sample_direction: Optional[pulumi.Input[str]] = None,
            sample_rate: Optional[pulumi.Input[int]] = None,
            scan_botnet_connections: Optional[pulumi.Input[str]] = None,
            secondary_ip: Optional[pulumi.Input[str]] = None,
            secondaryips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceSecondaryipArgs']]]]] = None,
            security_exempt_list: Optional[pulumi.Input[str]] = None,
            security_external_logout: Optional[pulumi.Input[str]] = None,
            security_external_web: Optional[pulumi.Input[str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceSecurityGroupArgs']]]]] = None,
            security_mac_auth_bypass: Optional[pulumi.Input[str]] = None,
            security_mode: Optional[pulumi.Input[str]] = None,
            security_redirect_url: Optional[pulumi.Input[str]] = None,
            service_name: Optional[pulumi.Input[str]] = None,
            sflow_sampler: Optional[pulumi.Input[str]] = None,
            snmp_index: Optional[pulumi.Input[int]] = None,
            speed: Optional[pulumi.Input[str]] = None,
            spillover_threshold: Optional[pulumi.Input[int]] = None,
            src_check: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            stp: Optional[pulumi.Input[str]] = None,
            stp_ha_secondary: Optional[pulumi.Input[str]] = None,
            stpforward: Optional[pulumi.Input[str]] = None,
            stpforward_mode: Optional[pulumi.Input[str]] = None,
            subst: Optional[pulumi.Input[str]] = None,
            substitute_dst_mac: Optional[pulumi.Input[str]] = None,
            swc_first_create: Optional[pulumi.Input[int]] = None,
            swc_vlan: Optional[pulumi.Input[int]] = None,
            switch: Optional[pulumi.Input[str]] = None,
            switch_controller_access_vlan: Optional[pulumi.Input[str]] = None,
            switch_controller_arp_inspection: Optional[pulumi.Input[str]] = None,
            switch_controller_dhcp_snooping: Optional[pulumi.Input[str]] = None,
            switch_controller_dhcp_snooping_option82: Optional[pulumi.Input[str]] = None,
            switch_controller_dhcp_snooping_verify_mac: Optional[pulumi.Input[str]] = None,
            switch_controller_dynamic: Optional[pulumi.Input[str]] = None,
            switch_controller_feature: Optional[pulumi.Input[str]] = None,
            switch_controller_igmp_snooping: Optional[pulumi.Input[str]] = None,
            switch_controller_igmp_snooping_fast_leave: Optional[pulumi.Input[str]] = None,
            switch_controller_igmp_snooping_proxy: Optional[pulumi.Input[str]] = None,
            switch_controller_iot_scanning: Optional[pulumi.Input[str]] = None,
            switch_controller_learning_limit: Optional[pulumi.Input[int]] = None,
            switch_controller_mgmt_vlan: Optional[pulumi.Input[int]] = None,
            switch_controller_nac: Optional[pulumi.Input[str]] = None,
            switch_controller_netflow_collect: Optional[pulumi.Input[str]] = None,
            switch_controller_offload: Optional[pulumi.Input[str]] = None,
            switch_controller_offload_gw: Optional[pulumi.Input[str]] = None,
            switch_controller_offload_ip: Optional[pulumi.Input[str]] = None,
            switch_controller_rspan_mode: Optional[pulumi.Input[str]] = None,
            switch_controller_source_ip: Optional[pulumi.Input[str]] = None,
            switch_controller_traffic_policy: Optional[pulumi.Input[str]] = None,
            system_id: Optional[pulumi.Input[str]] = None,
            system_id_type: Optional[pulumi.Input[str]] = None,
            taggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceTaggingArgs']]]]] = None,
            tcp_mss: Optional[pulumi.Input[int]] = None,
            trunk: Optional[pulumi.Input[str]] = None,
            trust_ip1: Optional[pulumi.Input[str]] = None,
            trust_ip2: Optional[pulumi.Input[str]] = None,
            trust_ip3: Optional[pulumi.Input[str]] = None,
            trust_ip61: Optional[pulumi.Input[str]] = None,
            trust_ip62: Optional[pulumi.Input[str]] = None,
            trust_ip63: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None,
            vdom: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vindex: Optional[pulumi.Input[int]] = None,
            vlan_protocol: Optional[pulumi.Input[str]] = None,
            vlanforward: Optional[pulumi.Input[str]] = None,
            vlanid: Optional[pulumi.Input[int]] = None,
            vrf: Optional[pulumi.Input[int]] = None,
            vrrp_virtual_mac: Optional[pulumi.Input[str]] = None,
            vrrps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceVrrpArgs']]]]] = None,
            wccp: Optional[pulumi.Input[str]] = None,
            weight: Optional[pulumi.Input[int]] = None,
            wins_ip: Optional[pulumi.Input[str]] = None) -> 'Interface':
        """
        Get an existing Interface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ac_name: PPPoE server name.
        :param pulumi.Input[str] aggregate: Aggregate interface.
        :param pulumi.Input[str] aggregate_type: Type of aggregation. Valid values: `physical`, `vxlan`.
        :param pulumi.Input[str] algorithm: Frame distribution algorithm.
        :param pulumi.Input[str] alias: Alias will be displayed with the interface name to make it easier to distinguish.
        :param pulumi.Input[str] allowaccess: Permitted types of management access to this interface.
        :param pulumi.Input[str] ap_discover: Enable/disable automatic registration of unknown FortiAP devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] arpforward: Enable/disable ARP forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_cert: HTTPS server certificate.
        :param pulumi.Input[str] auth_portal_addr: Address of captive portal.
        :param pulumi.Input[str] auth_type: PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        :param pulumi.Input[str] auto_auth_extension_device: Enable/disable automatic authorization of dedicated Fortinet extension device on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] autogenerated: Indicates whether the interface is automatically created by FortiGate, for example, created during the VPN creation process. If it is, set it to "auto", else keep it empty.
        :param pulumi.Input[int] bandwidth_measure_time: Bandwidth measure time
        :param pulumi.Input[str] bfd: Bidirectional Forwarding Detection (BFD) settings. Valid values: `global`, `enable`, `disable`.
        :param pulumi.Input[int] bfd_desired_min_tx: BFD desired minimal transmit interval.
        :param pulumi.Input[int] bfd_detect_mult: BFD detection multiplier.
        :param pulumi.Input[int] bfd_required_min_rx: BFD required minimal receive interval.
        :param pulumi.Input[str] broadcast_forticlient_discovery: Enable/disable broadcasting FortiClient discovery messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] broadcast_forward: Enable/disable broadcast forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] captive_portal: Enable/disable captive portal.
        :param pulumi.Input[int] cli_conn_status: CLI connection status.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceClientOptionArgs']]]] client_options: DHCP client options. The structure of `client_options` block is documented below.
        :param pulumi.Input[int] color: Color of icon on the GUI.
        :param pulumi.Input[str] dedicated_to: Configure interface for single purpose. Valid values: `none`, `management`.
        :param pulumi.Input[str] default_purdue_level: default purdue level of device detected on this interface. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
        :param pulumi.Input[str] defaultgw: Enable to get the gateway IP from the DHCP or PPPoE server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] detected_peer_mtu: MTU of detected peer (0 - 4294967295).
        :param pulumi.Input[str] detectprotocol: Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
        :param pulumi.Input[str] detectserver: Gateway's ping server for this IP.
        :param pulumi.Input[str] device_access_list: Device access list.
        :param pulumi.Input[str] device_identification: Enable/disable passively gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] device_identification_active_scan: Enable/disable active gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] device_netscan: Enable/disable inclusion of devices detected on this interface in network vulnerability scans. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] device_user_identification: Enable/disable passive gathering of user identity information about users on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] devindex: Device Index.
        :param pulumi.Input[str] dhcp_broadcast_flag: Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp_classless_route_addition: Enable/disable addition of classless static routes retrieved from DHCP server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhcp_client_identifier: DHCP client identifier.
        :param pulumi.Input[str] dhcp_relay_agent_option: Enable/disable DHCP relay agent option. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhcp_relay_circuit_id: DHCP relay circuit ID.
        :param pulumi.Input[str] dhcp_relay_interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] dhcp_relay_interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] dhcp_relay_ip: DHCP relay IP address.
        :param pulumi.Input[str] dhcp_relay_link_selection: DHCP relay link selection.
        :param pulumi.Input[str] dhcp_relay_request_all_server: Enable/disable sending DHCP request to all servers. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp_relay_service: Enable/disable allowing this interface to act as a DHCP relay. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp_relay_source_ip: IP address used by the DHCP relay as its source IP.
        :param pulumi.Input[str] dhcp_relay_type: DHCP relay type (regular or IPsec). Valid values: `regular`, `ipsec`.
        :param pulumi.Input[int] dhcp_renew_time: DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
        :param pulumi.Input[str] dhcp_smart_relay: Enable/disable DHCP smart relay. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceDhcpSnoopingServerListArgs']]]] dhcp_snooping_server_lists: Configure DHCP server access list. The structure of `dhcp_snooping_server_list` block is documented below.
        :param pulumi.Input[int] disc_retry_timeout: Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
        :param pulumi.Input[int] disconnect_threshold: Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
        :param pulumi.Input[int] distance: Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
        :param pulumi.Input[str] dns_server_override: Enable/disable use DNS acquired by DHCP or PPPoE. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dns_server_protocol: DNS transport protocols. Valid values: `cleartext`, `dot`, `doh`.
        :param pulumi.Input[str] drop_fragment: Enable/disable drop fragment packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] drop_overlapped_fragment: Enable/disable drop overlapped fragment packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] eap_ca_cert: EAP CA certificate name.
        :param pulumi.Input[str] eap_identity: EAP identity.
        :param pulumi.Input[str] eap_method: EAP method. Valid values: `tls`, `peap`.
        :param pulumi.Input[str] eap_password: EAP password.
        :param pulumi.Input[str] eap_supplicant: Enable/disable EAP-Supplicant. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] eap_user_cert: EAP user certificate name.
        :param pulumi.Input[str] egress_shaping_profile: Outgoing traffic shaping profile.
        :param pulumi.Input[str] endpoint_compliance: Enable/disable endpoint compliance enforcement. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] estimated_downstream_bandwidth: Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
        :param pulumi.Input[int] estimated_upstream_bandwidth: Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
        :param pulumi.Input[str] explicit_ftp_proxy: Enable/disable the explicit FTP proxy on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] explicit_web_proxy: Enable/disable the explicit web proxy on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] external: Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fail_action_on_extender: Action on extender when interface fail . Valid values: `soft-restart`, `hard-restart`, `reboot`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceFailAlertInterfaceArgs']]]] fail_alert_interfaces: Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `fail_alert_interfaces` block is documented below.
        :param pulumi.Input[str] fail_alert_method: Select link-failed-signal or link-down method to alert about a failed link. Valid values: `link-failed-signal`, `link-down`.
        :param pulumi.Input[str] fail_detect: Enable/disable fail detection features for this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fail_detect_option: Options for detecting that this interface has failed. Valid values: `detectserver`, `link-down`.
        :param pulumi.Input[str] fortiheartbeat: Enable/disable FortiHeartBeat (FortiTelemetry on GUI). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortilink: Enable FortiLink to dedicate this interface to manage other Fortinet devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] fortilink_backup_link: fortilink split interface backup link.
        :param pulumi.Input[str] fortilink_neighbor_detect: Protocol for FortiGate neighbor discovery. Valid values: `lldp`, `fortilink`.
        :param pulumi.Input[str] fortilink_split_interface: Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortilink_stacking: Enable/disable FortiLink switch-stacking on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] forward_domain: Transparent mode forward domain.
        :param pulumi.Input[str] forward_error_correction: Configure forward error correction (FEC). Valid values: `none`, `disable`, `cl91-rs-fec`, `cl74-fc-fec`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] gwdetect: Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ha_priority: HA election priority for the PING server.
        :param pulumi.Input[str] icmp_accept_redirect: Enable/disable ICMP accept redirect. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] icmp_send_redirect: Enable/disable ICMP send redirect. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ident_accept: Enable/disable authentication for this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] idle_timeout: PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
        :param pulumi.Input[str] ike_saml_server: Configure IKE authentication SAML server.
        :param pulumi.Input[int] inbandwidth: Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
        :param pulumi.Input[str] ingress_shaping_profile: Incoming traffic shaping profile.
        :param pulumi.Input[int] ingress_spillover_threshold: Ingress Spillover threshold (0 - 16776000 kbps).
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[int] internal: Implicitly created.
        :param pulumi.Input[str] ip: Interface IPv4 address and subnet mask, syntax: X.X.X.X/24.
        :param pulumi.Input[str] ip_managed_by_fortiipam: Enable/disable automatic IP address assignment of this interface by FortiIPAM.
        :param pulumi.Input[str] ipmac: Enable/disable IP/MAC binding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_sniffer_mode: Enable/disable the use of this interface as a one-armed sniffer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipunnumbered: Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
        :param pulumi.Input[pulumi.InputType['InterfaceIpv6Args']] ipv6: IPv6 of interface. The structure of `ipv6` block is documented below.
        :param pulumi.Input[str] l2forward: Enable/disable l2 forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] lacp_ha_secondary: LACP HA secondary member. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] lacp_ha_slave: LACP HA slave. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] lacp_mode: LACP mode. Valid values: `static`, `passive`, `active`.
        :param pulumi.Input[str] lacp_speed: How often the interface sends LACP messages. Valid values: `slow`, `fast`.
        :param pulumi.Input[int] lcp_echo_interval: Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
        :param pulumi.Input[int] lcp_max_echo_fails: Maximum missed LCP echo messages before disconnect.
        :param pulumi.Input[int] link_up_delay: Number of milliseconds to wait before considering a link is up.
        :param pulumi.Input[str] lldp_network_policy: LLDP-MED network policy profile.
        :param pulumi.Input[str] lldp_reception: Enable/disable Link Layer Discovery Protocol (LLDP) reception. Valid values: `enable`, `disable`, `vdom`.
        :param pulumi.Input[str] lldp_transmission: Enable/disable Link Layer Discovery Protocol (LLDP) transmission. Valid values: `enable`, `disable`, `vdom`.
        :param pulumi.Input[str] macaddr: Change the interface's MAC address.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceManagedDeviceArgs']]]] managed_devices: Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managed_device` block is documented below.
        :param pulumi.Input[str] managed_subnetwork_size: Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
        :param pulumi.Input[str] management_ip: High Availability in-band management IP address of this interface.
        :param pulumi.Input[int] measured_downstream_bandwidth: Measured downstream bandwidth (kbps).
        :param pulumi.Input[int] measured_upstream_bandwidth: Measured upstream bandwidth (kbps).
        :param pulumi.Input[str] mediatype: Select SFP media interface type Valid values: `none`, `gmii`, `sgmii`, `sr`, `lr`, `cr`, `sr4`, `lr4`, `cr4`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceMemberArgs']]]] members: Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
        :param pulumi.Input[int] min_links: Minimum number of aggregated ports that must be up.
        :param pulumi.Input[str] min_links_down: Action to take when less than the configured minimum number of links are active. Valid values: `operational`, `administrative`.
        :param pulumi.Input[str] mode: Addressing mode (static, DHCP, PPPoE). Valid values: `static`, `dhcp`, `pppoe`.
        :param pulumi.Input[str] monitor_bandwidth: Enable monitoring bandwidth on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mtu: MTU value for this interface.
        :param pulumi.Input[str] mtu_override: Enable to set a custom MTU for this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] ndiscforward: Enable/disable NDISC forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] netbios_forward: Enable/disable NETBIOS forwarding. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] netflow_sampler: Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both). Valid values: `disable`, `tx`, `rx`, `both`.
        :param pulumi.Input[int] outbandwidth: Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
        :param pulumi.Input[int] padt_retry_timeout: PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
        :param pulumi.Input[str] password: PPPoE account's password.
        :param pulumi.Input[int] ping_serv_status: PING server status.
        :param pulumi.Input[int] polling_interval: sFlow polling interval (1 - 255 sec).
        :param pulumi.Input[str] pppoe_unnumbered_negotiate: Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pptp_auth_type: PPTP authentication type. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        :param pulumi.Input[str] pptp_client: Enable/disable PPTP client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pptp_password: PPTP password.
        :param pulumi.Input[str] pptp_server_ip: PPTP server IP address.
        :param pulumi.Input[int] pptp_timeout: Idle timer in minutes (0 for disabled).
        :param pulumi.Input[str] pptp_user: PPTP user name.
        :param pulumi.Input[str] preserve_session_route: Enable/disable preservation of session route when dirty. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Priority of learned routes.
        :param pulumi.Input[str] priority_override: Enable/disable fail back to higher priority port once recovered. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] proxy_captive_portal: Enable/disable proxy captive portal on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] reachable_time: IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
        :param pulumi.Input[str] redundant_interface: Redundant interface.
        :param pulumi.Input[str] remote_ip: Remote IP address of tunnel.
        :param pulumi.Input[str] replacemsg_override_group: Replacement message override group.
        :param pulumi.Input[int] ring_rx: RX ring size.
        :param pulumi.Input[int] ring_tx: TX ring size.
        :param pulumi.Input[str] role: Interface role. Valid values: `lan`, `wan`, `dmz`, `undefined`.
        :param pulumi.Input[str] sample_direction: Data that NetFlow collects (rx, tx, or both). Valid values: `tx`, `rx`, `both`.
        :param pulumi.Input[int] sample_rate: sFlow sample rate (10 - 99999).
        :param pulumi.Input[str] scan_botnet_connections: Enable monitoring or blocking connections to Botnet servers through this interface. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] secondary_ip: Enable/disable adding a secondary IP to this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceSecondaryipArgs']]]] secondaryips: Second IP address of interface. The structure of `secondaryip` block is documented below.
        :param pulumi.Input[str] security_exempt_list: Name of security-exempt-list.
        :param pulumi.Input[str] security_external_logout: URL of external authentication logout server.
        :param pulumi.Input[str] security_external_web: URL of external authentication web server.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceSecurityGroupArgs']]]] security_groups: User groups that can authenticate with the captive portal. The structure of `security_groups` block is documented below.
        :param pulumi.Input[str] security_mac_auth_bypass: Enable/disable MAC authentication bypass. Valid values: `mac-auth-only`, `enable`, `disable`.
        :param pulumi.Input[str] security_mode: Turn on captive portal authentication for this interface. Valid values: `none`, `captive-portal`, `802.1X`.
        :param pulumi.Input[str] security_redirect_url: URL redirection after disclaimer/authentication.
        :param pulumi.Input[str] service_name: PPPoE service name.
        :param pulumi.Input[str] sflow_sampler: Enable/disable sFlow on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] snmp_index: Permanent SNMP Index of the interface.
        :param pulumi.Input[str] speed: Interface speed. The default setting and the options available depend on the interface hardware.
        :param pulumi.Input[int] spillover_threshold: Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
        :param pulumi.Input[str] src_check: Enable/disable source IP check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Bring the interface up or shut the interface down. Valid values: `up`, `down`.
        :param pulumi.Input[str] stp: Enable/disable STP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] stp_ha_secondary: Control STP behaviour on HA secondary. Valid values: `disable`, `enable`, `priority-adjust`.
        :param pulumi.Input[str] stpforward: Enable/disable STP forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] stpforward_mode: Configure STP forwarding mode. Valid values: `rpl-all-ext-id`, `rpl-bridge-ext-id`, `rpl-nothing`.
        :param pulumi.Input[str] subst: Enable to always send packets from this interface to a destination MAC address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] substitute_dst_mac: Destination MAC address that all packets are sent to from this interface.
        :param pulumi.Input[int] swc_first_create: Initial create for switch-controller VLANs.
        :param pulumi.Input[int] swc_vlan: Creation status for switch-controller VLANs.
        :param pulumi.Input[str] switch: Contained in switch.
        :param pulumi.Input[str] switch_controller_access_vlan: Block FortiSwitch port-to-port traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_arp_inspection: Enable/disable FortiSwitch ARP inspection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_dhcp_snooping: Switch controller DHCP snooping. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_dhcp_snooping_option82: Switch controller DHCP snooping option82. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_dhcp_snooping_verify_mac: Switch controller DHCP snooping verify MAC. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_dynamic: Integrated FortiLink settings for managed FortiSwitch.
        :param pulumi.Input[str] switch_controller_feature: Interface's purpose when assigning traffic (read only).
        :param pulumi.Input[str] switch_controller_igmp_snooping: Switch controller IGMP snooping. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_igmp_snooping_fast_leave: Switch controller IGMP snooping fast-leave. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_igmp_snooping_proxy: Switch controller IGMP snooping proxy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_iot_scanning: Enable/disable managed FortiSwitch IoT scanning. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] switch_controller_learning_limit: Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
        :param pulumi.Input[int] switch_controller_mgmt_vlan: VLAN to use for FortiLink management purposes.
        :param pulumi.Input[str] switch_controller_nac: Integrated NAC settings for managed FortiSwitch.
        :param pulumi.Input[str] switch_controller_netflow_collect: NetFlow collection and processing. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_controller_offload: Enable/disable managed FortiSwitch routing offload. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_offload_gw: Enable/disable managed FortiSwitch routing offload gateway. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] switch_controller_offload_ip: IP for routing offload on FortiSwitch.
        :param pulumi.Input[str] switch_controller_rspan_mode: Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_controller_source_ip: Source IP address used in FortiLink over L3 connections. Valid values: `outbound`, `fixed`.
        :param pulumi.Input[str] switch_controller_traffic_policy: Switch controller traffic policy for the VLAN.
        :param pulumi.Input[str] system_id: Define a system ID for the aggregate interface.
        :param pulumi.Input[str] system_id_type: Method in which system ID is generated. Valid values: `auto`, `user`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceTaggingArgs']]]] taggings: Config object tagging. The structure of `tagging` block is documented below.
        :param pulumi.Input[int] tcp_mss: TCP maximum segment size. 0 means do not change segment size.
        :param pulumi.Input[str] trunk: Enable/disable VLAN trunk. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] trust_ip1: Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        :param pulumi.Input[str] trust_ip2: Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        :param pulumi.Input[str] trust_ip3: Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        :param pulumi.Input[str] trust_ip61: Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        :param pulumi.Input[str] trust_ip62: Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        :param pulumi.Input[str] trust_ip63: Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        :param pulumi.Input[str] type: Interface type.
        :param pulumi.Input[str] username: Username of the PPPoE account, provided by your ISP.
        :param pulumi.Input[str] vdom: Interface is in this virtual domain (VDOM).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] vindex: Switch control interface VLAN ID.
        :param pulumi.Input[str] vlan_protocol: Ethernet protocol of VLAN. Valid values: `8021q`, `8021ad`.
        :param pulumi.Input[str] vlanforward: Enable/disable traffic forwarding between VLANs on this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] vlanid: VLAN ID (1 - 4094).
        :param pulumi.Input[int] vrf: Virtual Routing Forwarding ID.
        :param pulumi.Input[str] vrrp_virtual_mac: Enable/disable use of virtual MAC for VRRP. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceVrrpArgs']]]] vrrps: VRRP configuration. The structure of `vrrp` block is documented below.
        :param pulumi.Input[str] wccp: Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] weight: Default weight for static routes (if route has no weight configured).
        :param pulumi.Input[str] wins_ip: WINS server IP.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InterfaceState.__new__(_InterfaceState)

        __props__.__dict__["ac_name"] = ac_name
        __props__.__dict__["aggregate"] = aggregate
        __props__.__dict__["aggregate_type"] = aggregate_type
        __props__.__dict__["algorithm"] = algorithm
        __props__.__dict__["alias"] = alias
        __props__.__dict__["allowaccess"] = allowaccess
        __props__.__dict__["ap_discover"] = ap_discover
        __props__.__dict__["arpforward"] = arpforward
        __props__.__dict__["auth_cert"] = auth_cert
        __props__.__dict__["auth_portal_addr"] = auth_portal_addr
        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["auto_auth_extension_device"] = auto_auth_extension_device
        __props__.__dict__["autogenerated"] = autogenerated
        __props__.__dict__["bandwidth_measure_time"] = bandwidth_measure_time
        __props__.__dict__["bfd"] = bfd
        __props__.__dict__["bfd_desired_min_tx"] = bfd_desired_min_tx
        __props__.__dict__["bfd_detect_mult"] = bfd_detect_mult
        __props__.__dict__["bfd_required_min_rx"] = bfd_required_min_rx
        __props__.__dict__["broadcast_forticlient_discovery"] = broadcast_forticlient_discovery
        __props__.__dict__["broadcast_forward"] = broadcast_forward
        __props__.__dict__["captive_portal"] = captive_portal
        __props__.__dict__["cli_conn_status"] = cli_conn_status
        __props__.__dict__["client_options"] = client_options
        __props__.__dict__["color"] = color
        __props__.__dict__["dedicated_to"] = dedicated_to
        __props__.__dict__["default_purdue_level"] = default_purdue_level
        __props__.__dict__["defaultgw"] = defaultgw
        __props__.__dict__["description"] = description
        __props__.__dict__["detected_peer_mtu"] = detected_peer_mtu
        __props__.__dict__["detectprotocol"] = detectprotocol
        __props__.__dict__["detectserver"] = detectserver
        __props__.__dict__["device_access_list"] = device_access_list
        __props__.__dict__["device_identification"] = device_identification
        __props__.__dict__["device_identification_active_scan"] = device_identification_active_scan
        __props__.__dict__["device_netscan"] = device_netscan
        __props__.__dict__["device_user_identification"] = device_user_identification
        __props__.__dict__["devindex"] = devindex
        __props__.__dict__["dhcp_broadcast_flag"] = dhcp_broadcast_flag
        __props__.__dict__["dhcp_classless_route_addition"] = dhcp_classless_route_addition
        __props__.__dict__["dhcp_client_identifier"] = dhcp_client_identifier
        __props__.__dict__["dhcp_relay_agent_option"] = dhcp_relay_agent_option
        __props__.__dict__["dhcp_relay_circuit_id"] = dhcp_relay_circuit_id
        __props__.__dict__["dhcp_relay_interface"] = dhcp_relay_interface
        __props__.__dict__["dhcp_relay_interface_select_method"] = dhcp_relay_interface_select_method
        __props__.__dict__["dhcp_relay_ip"] = dhcp_relay_ip
        __props__.__dict__["dhcp_relay_link_selection"] = dhcp_relay_link_selection
        __props__.__dict__["dhcp_relay_request_all_server"] = dhcp_relay_request_all_server
        __props__.__dict__["dhcp_relay_service"] = dhcp_relay_service
        __props__.__dict__["dhcp_relay_source_ip"] = dhcp_relay_source_ip
        __props__.__dict__["dhcp_relay_type"] = dhcp_relay_type
        __props__.__dict__["dhcp_renew_time"] = dhcp_renew_time
        __props__.__dict__["dhcp_smart_relay"] = dhcp_smart_relay
        __props__.__dict__["dhcp_snooping_server_lists"] = dhcp_snooping_server_lists
        __props__.__dict__["disc_retry_timeout"] = disc_retry_timeout
        __props__.__dict__["disconnect_threshold"] = disconnect_threshold
        __props__.__dict__["distance"] = distance
        __props__.__dict__["dns_server_override"] = dns_server_override
        __props__.__dict__["dns_server_protocol"] = dns_server_protocol
        __props__.__dict__["drop_fragment"] = drop_fragment
        __props__.__dict__["drop_overlapped_fragment"] = drop_overlapped_fragment
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["eap_ca_cert"] = eap_ca_cert
        __props__.__dict__["eap_identity"] = eap_identity
        __props__.__dict__["eap_method"] = eap_method
        __props__.__dict__["eap_password"] = eap_password
        __props__.__dict__["eap_supplicant"] = eap_supplicant
        __props__.__dict__["eap_user_cert"] = eap_user_cert
        __props__.__dict__["egress_shaping_profile"] = egress_shaping_profile
        __props__.__dict__["endpoint_compliance"] = endpoint_compliance
        __props__.__dict__["estimated_downstream_bandwidth"] = estimated_downstream_bandwidth
        __props__.__dict__["estimated_upstream_bandwidth"] = estimated_upstream_bandwidth
        __props__.__dict__["explicit_ftp_proxy"] = explicit_ftp_proxy
        __props__.__dict__["explicit_web_proxy"] = explicit_web_proxy
        __props__.__dict__["external"] = external
        __props__.__dict__["fail_action_on_extender"] = fail_action_on_extender
        __props__.__dict__["fail_alert_interfaces"] = fail_alert_interfaces
        __props__.__dict__["fail_alert_method"] = fail_alert_method
        __props__.__dict__["fail_detect"] = fail_detect
        __props__.__dict__["fail_detect_option"] = fail_detect_option
        __props__.__dict__["fortiheartbeat"] = fortiheartbeat
        __props__.__dict__["fortilink"] = fortilink
        __props__.__dict__["fortilink_backup_link"] = fortilink_backup_link
        __props__.__dict__["fortilink_neighbor_detect"] = fortilink_neighbor_detect
        __props__.__dict__["fortilink_split_interface"] = fortilink_split_interface
        __props__.__dict__["fortilink_stacking"] = fortilink_stacking
        __props__.__dict__["forward_domain"] = forward_domain
        __props__.__dict__["forward_error_correction"] = forward_error_correction
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["gwdetect"] = gwdetect
        __props__.__dict__["ha_priority"] = ha_priority
        __props__.__dict__["icmp_accept_redirect"] = icmp_accept_redirect
        __props__.__dict__["icmp_send_redirect"] = icmp_send_redirect
        __props__.__dict__["ident_accept"] = ident_accept
        __props__.__dict__["idle_timeout"] = idle_timeout
        __props__.__dict__["ike_saml_server"] = ike_saml_server
        __props__.__dict__["inbandwidth"] = inbandwidth
        __props__.__dict__["ingress_shaping_profile"] = ingress_shaping_profile
        __props__.__dict__["ingress_spillover_threshold"] = ingress_spillover_threshold
        __props__.__dict__["interface"] = interface
        __props__.__dict__["internal"] = internal
        __props__.__dict__["ip"] = ip
        __props__.__dict__["ip_managed_by_fortiipam"] = ip_managed_by_fortiipam
        __props__.__dict__["ipmac"] = ipmac
        __props__.__dict__["ips_sniffer_mode"] = ips_sniffer_mode
        __props__.__dict__["ipunnumbered"] = ipunnumbered
        __props__.__dict__["ipv6"] = ipv6
        __props__.__dict__["l2forward"] = l2forward
        __props__.__dict__["lacp_ha_secondary"] = lacp_ha_secondary
        __props__.__dict__["lacp_ha_slave"] = lacp_ha_slave
        __props__.__dict__["lacp_mode"] = lacp_mode
        __props__.__dict__["lacp_speed"] = lacp_speed
        __props__.__dict__["lcp_echo_interval"] = lcp_echo_interval
        __props__.__dict__["lcp_max_echo_fails"] = lcp_max_echo_fails
        __props__.__dict__["link_up_delay"] = link_up_delay
        __props__.__dict__["lldp_network_policy"] = lldp_network_policy
        __props__.__dict__["lldp_reception"] = lldp_reception
        __props__.__dict__["lldp_transmission"] = lldp_transmission
        __props__.__dict__["macaddr"] = macaddr
        __props__.__dict__["managed_devices"] = managed_devices
        __props__.__dict__["managed_subnetwork_size"] = managed_subnetwork_size
        __props__.__dict__["management_ip"] = management_ip
        __props__.__dict__["measured_downstream_bandwidth"] = measured_downstream_bandwidth
        __props__.__dict__["measured_upstream_bandwidth"] = measured_upstream_bandwidth
        __props__.__dict__["mediatype"] = mediatype
        __props__.__dict__["members"] = members
        __props__.__dict__["min_links"] = min_links
        __props__.__dict__["min_links_down"] = min_links_down
        __props__.__dict__["mode"] = mode
        __props__.__dict__["monitor_bandwidth"] = monitor_bandwidth
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["mtu_override"] = mtu_override
        __props__.__dict__["name"] = name
        __props__.__dict__["ndiscforward"] = ndiscforward
        __props__.__dict__["netbios_forward"] = netbios_forward
        __props__.__dict__["netflow_sampler"] = netflow_sampler
        __props__.__dict__["outbandwidth"] = outbandwidth
        __props__.__dict__["padt_retry_timeout"] = padt_retry_timeout
        __props__.__dict__["password"] = password
        __props__.__dict__["ping_serv_status"] = ping_serv_status
        __props__.__dict__["polling_interval"] = polling_interval
        __props__.__dict__["pppoe_unnumbered_negotiate"] = pppoe_unnumbered_negotiate
        __props__.__dict__["pptp_auth_type"] = pptp_auth_type
        __props__.__dict__["pptp_client"] = pptp_client
        __props__.__dict__["pptp_password"] = pptp_password
        __props__.__dict__["pptp_server_ip"] = pptp_server_ip
        __props__.__dict__["pptp_timeout"] = pptp_timeout
        __props__.__dict__["pptp_user"] = pptp_user
        __props__.__dict__["preserve_session_route"] = preserve_session_route
        __props__.__dict__["priority"] = priority
        __props__.__dict__["priority_override"] = priority_override
        __props__.__dict__["proxy_captive_portal"] = proxy_captive_portal
        __props__.__dict__["reachable_time"] = reachable_time
        __props__.__dict__["redundant_interface"] = redundant_interface
        __props__.__dict__["remote_ip"] = remote_ip
        __props__.__dict__["replacemsg_override_group"] = replacemsg_override_group
        __props__.__dict__["ring_rx"] = ring_rx
        __props__.__dict__["ring_tx"] = ring_tx
        __props__.__dict__["role"] = role
        __props__.__dict__["sample_direction"] = sample_direction
        __props__.__dict__["sample_rate"] = sample_rate
        __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
        __props__.__dict__["secondary_ip"] = secondary_ip
        __props__.__dict__["secondaryips"] = secondaryips
        __props__.__dict__["security_exempt_list"] = security_exempt_list
        __props__.__dict__["security_external_logout"] = security_external_logout
        __props__.__dict__["security_external_web"] = security_external_web
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["security_mac_auth_bypass"] = security_mac_auth_bypass
        __props__.__dict__["security_mode"] = security_mode
        __props__.__dict__["security_redirect_url"] = security_redirect_url
        __props__.__dict__["service_name"] = service_name
        __props__.__dict__["sflow_sampler"] = sflow_sampler
        __props__.__dict__["snmp_index"] = snmp_index
        __props__.__dict__["speed"] = speed
        __props__.__dict__["spillover_threshold"] = spillover_threshold
        __props__.__dict__["src_check"] = src_check
        __props__.__dict__["status"] = status
        __props__.__dict__["stp"] = stp
        __props__.__dict__["stp_ha_secondary"] = stp_ha_secondary
        __props__.__dict__["stpforward"] = stpforward
        __props__.__dict__["stpforward_mode"] = stpforward_mode
        __props__.__dict__["subst"] = subst
        __props__.__dict__["substitute_dst_mac"] = substitute_dst_mac
        __props__.__dict__["swc_first_create"] = swc_first_create
        __props__.__dict__["swc_vlan"] = swc_vlan
        __props__.__dict__["switch"] = switch
        __props__.__dict__["switch_controller_access_vlan"] = switch_controller_access_vlan
        __props__.__dict__["switch_controller_arp_inspection"] = switch_controller_arp_inspection
        __props__.__dict__["switch_controller_dhcp_snooping"] = switch_controller_dhcp_snooping
        __props__.__dict__["switch_controller_dhcp_snooping_option82"] = switch_controller_dhcp_snooping_option82
        __props__.__dict__["switch_controller_dhcp_snooping_verify_mac"] = switch_controller_dhcp_snooping_verify_mac
        __props__.__dict__["switch_controller_dynamic"] = switch_controller_dynamic
        __props__.__dict__["switch_controller_feature"] = switch_controller_feature
        __props__.__dict__["switch_controller_igmp_snooping"] = switch_controller_igmp_snooping
        __props__.__dict__["switch_controller_igmp_snooping_fast_leave"] = switch_controller_igmp_snooping_fast_leave
        __props__.__dict__["switch_controller_igmp_snooping_proxy"] = switch_controller_igmp_snooping_proxy
        __props__.__dict__["switch_controller_iot_scanning"] = switch_controller_iot_scanning
        __props__.__dict__["switch_controller_learning_limit"] = switch_controller_learning_limit
        __props__.__dict__["switch_controller_mgmt_vlan"] = switch_controller_mgmt_vlan
        __props__.__dict__["switch_controller_nac"] = switch_controller_nac
        __props__.__dict__["switch_controller_netflow_collect"] = switch_controller_netflow_collect
        __props__.__dict__["switch_controller_offload"] = switch_controller_offload
        __props__.__dict__["switch_controller_offload_gw"] = switch_controller_offload_gw
        __props__.__dict__["switch_controller_offload_ip"] = switch_controller_offload_ip
        __props__.__dict__["switch_controller_rspan_mode"] = switch_controller_rspan_mode
        __props__.__dict__["switch_controller_source_ip"] = switch_controller_source_ip
        __props__.__dict__["switch_controller_traffic_policy"] = switch_controller_traffic_policy
        __props__.__dict__["system_id"] = system_id
        __props__.__dict__["system_id_type"] = system_id_type
        __props__.__dict__["taggings"] = taggings
        __props__.__dict__["tcp_mss"] = tcp_mss
        __props__.__dict__["trunk"] = trunk
        __props__.__dict__["trust_ip1"] = trust_ip1
        __props__.__dict__["trust_ip2"] = trust_ip2
        __props__.__dict__["trust_ip3"] = trust_ip3
        __props__.__dict__["trust_ip61"] = trust_ip61
        __props__.__dict__["trust_ip62"] = trust_ip62
        __props__.__dict__["trust_ip63"] = trust_ip63
        __props__.__dict__["type"] = type
        __props__.__dict__["username"] = username
        __props__.__dict__["vdom"] = vdom
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vindex"] = vindex
        __props__.__dict__["vlan_protocol"] = vlan_protocol
        __props__.__dict__["vlanforward"] = vlanforward
        __props__.__dict__["vlanid"] = vlanid
        __props__.__dict__["vrf"] = vrf
        __props__.__dict__["vrrp_virtual_mac"] = vrrp_virtual_mac
        __props__.__dict__["vrrps"] = vrrps
        __props__.__dict__["wccp"] = wccp
        __props__.__dict__["weight"] = weight
        __props__.__dict__["wins_ip"] = wins_ip
        return Interface(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acName")
    def ac_name(self) -> pulumi.Output[str]:
        """
        PPPoE server name.
        """
        return pulumi.get(self, "ac_name")

    @property
    @pulumi.getter
    def aggregate(self) -> pulumi.Output[str]:
        """
        Aggregate interface.
        """
        return pulumi.get(self, "aggregate")

    @property
    @pulumi.getter(name="aggregateType")
    def aggregate_type(self) -> pulumi.Output[str]:
        """
        Type of aggregation. Valid values: `physical`, `vxlan`.
        """
        return pulumi.get(self, "aggregate_type")

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Output[str]:
        """
        Frame distribution algorithm.
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def alias(self) -> pulumi.Output[str]:
        """
        Alias will be displayed with the interface name to make it easier to distinguish.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def allowaccess(self) -> pulumi.Output[str]:
        """
        Permitted types of management access to this interface.
        """
        return pulumi.get(self, "allowaccess")

    @property
    @pulumi.getter(name="apDiscover")
    def ap_discover(self) -> pulumi.Output[str]:
        """
        Enable/disable automatic registration of unknown FortiAP devices. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_discover")

    @property
    @pulumi.getter
    def arpforward(self) -> pulumi.Output[str]:
        """
        Enable/disable ARP forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "arpforward")

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> pulumi.Output[str]:
        """
        HTTPS server certificate.
        """
        return pulumi.get(self, "auth_cert")

    @property
    @pulumi.getter(name="authPortalAddr")
    def auth_portal_addr(self) -> pulumi.Output[str]:
        """
        Address of captive portal.
        """
        return pulumi.get(self, "auth_portal_addr")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[str]:
        """
        PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="autoAuthExtensionDevice")
    def auto_auth_extension_device(self) -> pulumi.Output[str]:
        """
        Enable/disable automatic authorization of dedicated Fortinet extension device on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_auth_extension_device")

    @property
    @pulumi.getter
    def autogenerated(self) -> pulumi.Output[str]:
        """
        Indicates whether the interface is automatically created by FortiGate, for example, created during the VPN creation process. If it is, set it to "auto", else keep it empty.
        """
        return pulumi.get(self, "autogenerated")

    @property
    @pulumi.getter(name="bandwidthMeasureTime")
    def bandwidth_measure_time(self) -> pulumi.Output[int]:
        """
        Bandwidth measure time
        """
        return pulumi.get(self, "bandwidth_measure_time")

    @property
    @pulumi.getter
    def bfd(self) -> pulumi.Output[str]:
        """
        Bidirectional Forwarding Detection (BFD) settings. Valid values: `global`, `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="bfdDesiredMinTx")
    def bfd_desired_min_tx(self) -> pulumi.Output[int]:
        """
        BFD desired minimal transmit interval.
        """
        return pulumi.get(self, "bfd_desired_min_tx")

    @property
    @pulumi.getter(name="bfdDetectMult")
    def bfd_detect_mult(self) -> pulumi.Output[int]:
        """
        BFD detection multiplier.
        """
        return pulumi.get(self, "bfd_detect_mult")

    @property
    @pulumi.getter(name="bfdRequiredMinRx")
    def bfd_required_min_rx(self) -> pulumi.Output[int]:
        """
        BFD required minimal receive interval.
        """
        return pulumi.get(self, "bfd_required_min_rx")

    @property
    @pulumi.getter(name="broadcastForticlientDiscovery")
    def broadcast_forticlient_discovery(self) -> pulumi.Output[str]:
        """
        Enable/disable broadcasting FortiClient discovery messages. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "broadcast_forticlient_discovery")

    @property
    @pulumi.getter(name="broadcastForward")
    def broadcast_forward(self) -> pulumi.Output[str]:
        """
        Enable/disable broadcast forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "broadcast_forward")

    @property
    @pulumi.getter(name="captivePortal")
    def captive_portal(self) -> pulumi.Output[int]:
        """
        Enable/disable captive portal.
        """
        return pulumi.get(self, "captive_portal")

    @property
    @pulumi.getter(name="cliConnStatus")
    def cli_conn_status(self) -> pulumi.Output[int]:
        """
        CLI connection status.
        """
        return pulumi.get(self, "cli_conn_status")

    @property
    @pulumi.getter(name="clientOptions")
    def client_options(self) -> pulumi.Output[Optional[Sequence['outputs.InterfaceClientOption']]]:
        """
        DHCP client options. The structure of `client_options` block is documented below.
        """
        return pulumi.get(self, "client_options")

    @property
    @pulumi.getter
    def color(self) -> pulumi.Output[int]:
        """
        Color of icon on the GUI.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="dedicatedTo")
    def dedicated_to(self) -> pulumi.Output[str]:
        """
        Configure interface for single purpose. Valid values: `none`, `management`.
        """
        return pulumi.get(self, "dedicated_to")

    @property
    @pulumi.getter(name="defaultPurdueLevel")
    def default_purdue_level(self) -> pulumi.Output[str]:
        """
        default purdue level of device detected on this interface. Valid values: `1`, `1.5`, `2`, `2.5`, `3`, `3.5`, `4`, `5`, `5.5`.
        """
        return pulumi.get(self, "default_purdue_level")

    @property
    @pulumi.getter
    def defaultgw(self) -> pulumi.Output[str]:
        """
        Enable to get the gateway IP from the DHCP or PPPoE server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "defaultgw")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="detectedPeerMtu")
    def detected_peer_mtu(self) -> pulumi.Output[int]:
        """
        MTU of detected peer (0 - 4294967295).
        """
        return pulumi.get(self, "detected_peer_mtu")

    @property
    @pulumi.getter
    def detectprotocol(self) -> pulumi.Output[str]:
        """
        Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
        """
        return pulumi.get(self, "detectprotocol")

    @property
    @pulumi.getter
    def detectserver(self) -> pulumi.Output[str]:
        """
        Gateway's ping server for this IP.
        """
        return pulumi.get(self, "detectserver")

    @property
    @pulumi.getter(name="deviceAccessList")
    def device_access_list(self) -> pulumi.Output[str]:
        """
        Device access list.
        """
        return pulumi.get(self, "device_access_list")

    @property
    @pulumi.getter(name="deviceIdentification")
    def device_identification(self) -> pulumi.Output[str]:
        """
        Enable/disable passively gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "device_identification")

    @property
    @pulumi.getter(name="deviceIdentificationActiveScan")
    def device_identification_active_scan(self) -> pulumi.Output[str]:
        """
        Enable/disable active gathering of device identity information about the devices on the network connected to this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "device_identification_active_scan")

    @property
    @pulumi.getter(name="deviceNetscan")
    def device_netscan(self) -> pulumi.Output[str]:
        """
        Enable/disable inclusion of devices detected on this interface in network vulnerability scans. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "device_netscan")

    @property
    @pulumi.getter(name="deviceUserIdentification")
    def device_user_identification(self) -> pulumi.Output[str]:
        """
        Enable/disable passive gathering of user identity information about users on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "device_user_identification")

    @property
    @pulumi.getter
    def devindex(self) -> pulumi.Output[int]:
        """
        Device Index.
        """
        return pulumi.get(self, "devindex")

    @property
    @pulumi.getter(name="dhcpBroadcastFlag")
    def dhcp_broadcast_flag(self) -> pulumi.Output[str]:
        """
        Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp_broadcast_flag")

    @property
    @pulumi.getter(name="dhcpClasslessRouteAddition")
    def dhcp_classless_route_addition(self) -> pulumi.Output[str]:
        """
        Enable/disable addition of classless static routes retrieved from DHCP server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_classless_route_addition")

    @property
    @pulumi.getter(name="dhcpClientIdentifier")
    def dhcp_client_identifier(self) -> pulumi.Output[str]:
        """
        DHCP client identifier.
        """
        return pulumi.get(self, "dhcp_client_identifier")

    @property
    @pulumi.getter(name="dhcpRelayAgentOption")
    def dhcp_relay_agent_option(self) -> pulumi.Output[str]:
        """
        Enable/disable DHCP relay agent option. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_relay_agent_option")

    @property
    @pulumi.getter(name="dhcpRelayCircuitId")
    def dhcp_relay_circuit_id(self) -> pulumi.Output[str]:
        """
        DHCP relay circuit ID.
        """
        return pulumi.get(self, "dhcp_relay_circuit_id")

    @property
    @pulumi.getter(name="dhcpRelayInterface")
    def dhcp_relay_interface(self) -> pulumi.Output[str]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "dhcp_relay_interface")

    @property
    @pulumi.getter(name="dhcpRelayInterfaceSelectMethod")
    def dhcp_relay_interface_select_method(self) -> pulumi.Output[str]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "dhcp_relay_interface_select_method")

    @property
    @pulumi.getter(name="dhcpRelayIp")
    def dhcp_relay_ip(self) -> pulumi.Output[str]:
        """
        DHCP relay IP address.
        """
        return pulumi.get(self, "dhcp_relay_ip")

    @property
    @pulumi.getter(name="dhcpRelayLinkSelection")
    def dhcp_relay_link_selection(self) -> pulumi.Output[str]:
        """
        DHCP relay link selection.
        """
        return pulumi.get(self, "dhcp_relay_link_selection")

    @property
    @pulumi.getter(name="dhcpRelayRequestAllServer")
    def dhcp_relay_request_all_server(self) -> pulumi.Output[str]:
        """
        Enable/disable sending DHCP request to all servers. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp_relay_request_all_server")

    @property
    @pulumi.getter(name="dhcpRelayService")
    def dhcp_relay_service(self) -> pulumi.Output[str]:
        """
        Enable/disable allowing this interface to act as a DHCP relay. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp_relay_service")

    @property
    @pulumi.getter(name="dhcpRelaySourceIp")
    def dhcp_relay_source_ip(self) -> pulumi.Output[str]:
        """
        IP address used by the DHCP relay as its source IP.
        """
        return pulumi.get(self, "dhcp_relay_source_ip")

    @property
    @pulumi.getter(name="dhcpRelayType")
    def dhcp_relay_type(self) -> pulumi.Output[str]:
        """
        DHCP relay type (regular or IPsec). Valid values: `regular`, `ipsec`.
        """
        return pulumi.get(self, "dhcp_relay_type")

    @property
    @pulumi.getter(name="dhcpRenewTime")
    def dhcp_renew_time(self) -> pulumi.Output[int]:
        """
        DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
        """
        return pulumi.get(self, "dhcp_renew_time")

    @property
    @pulumi.getter(name="dhcpSmartRelay")
    def dhcp_smart_relay(self) -> pulumi.Output[str]:
        """
        Enable/disable DHCP smart relay. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp_smart_relay")

    @property
    @pulumi.getter(name="dhcpSnoopingServerLists")
    def dhcp_snooping_server_lists(self) -> pulumi.Output[Optional[Sequence['outputs.InterfaceDhcpSnoopingServerList']]]:
        """
        Configure DHCP server access list. The structure of `dhcp_snooping_server_list` block is documented below.
        """
        return pulumi.get(self, "dhcp_snooping_server_lists")

    @property
    @pulumi.getter(name="discRetryTimeout")
    def disc_retry_timeout(self) -> pulumi.Output[int]:
        """
        Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
        """
        return pulumi.get(self, "disc_retry_timeout")

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> pulumi.Output[int]:
        """
        Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
        """
        return pulumi.get(self, "disconnect_threshold")

    @property
    @pulumi.getter
    def distance(self) -> pulumi.Output[int]:
        """
        Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter(name="dnsServerOverride")
    def dns_server_override(self) -> pulumi.Output[str]:
        """
        Enable/disable use DNS acquired by DHCP or PPPoE. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dns_server_override")

    @property
    @pulumi.getter(name="dnsServerProtocol")
    def dns_server_protocol(self) -> pulumi.Output[str]:
        """
        DNS transport protocols. Valid values: `cleartext`, `dot`, `doh`.
        """
        return pulumi.get(self, "dns_server_protocol")

    @property
    @pulumi.getter(name="dropFragment")
    def drop_fragment(self) -> pulumi.Output[str]:
        """
        Enable/disable drop fragment packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "drop_fragment")

    @property
    @pulumi.getter(name="dropOverlappedFragment")
    def drop_overlapped_fragment(self) -> pulumi.Output[str]:
        """
        Enable/disable drop overlapped fragment packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "drop_overlapped_fragment")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="eapCaCert")
    def eap_ca_cert(self) -> pulumi.Output[str]:
        """
        EAP CA certificate name.
        """
        return pulumi.get(self, "eap_ca_cert")

    @property
    @pulumi.getter(name="eapIdentity")
    def eap_identity(self) -> pulumi.Output[str]:
        """
        EAP identity.
        """
        return pulumi.get(self, "eap_identity")

    @property
    @pulumi.getter(name="eapMethod")
    def eap_method(self) -> pulumi.Output[str]:
        """
        EAP method. Valid values: `tls`, `peap`.
        """
        return pulumi.get(self, "eap_method")

    @property
    @pulumi.getter(name="eapPassword")
    def eap_password(self) -> pulumi.Output[Optional[str]]:
        """
        EAP password.
        """
        return pulumi.get(self, "eap_password")

    @property
    @pulumi.getter(name="eapSupplicant")
    def eap_supplicant(self) -> pulumi.Output[str]:
        """
        Enable/disable EAP-Supplicant. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eap_supplicant")

    @property
    @pulumi.getter(name="eapUserCert")
    def eap_user_cert(self) -> pulumi.Output[str]:
        """
        EAP user certificate name.
        """
        return pulumi.get(self, "eap_user_cert")

    @property
    @pulumi.getter(name="egressShapingProfile")
    def egress_shaping_profile(self) -> pulumi.Output[str]:
        """
        Outgoing traffic shaping profile.
        """
        return pulumi.get(self, "egress_shaping_profile")

    @property
    @pulumi.getter(name="endpointCompliance")
    def endpoint_compliance(self) -> pulumi.Output[str]:
        """
        Enable/disable endpoint compliance enforcement. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "endpoint_compliance")

    @property
    @pulumi.getter(name="estimatedDownstreamBandwidth")
    def estimated_downstream_bandwidth(self) -> pulumi.Output[int]:
        """
        Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
        """
        return pulumi.get(self, "estimated_downstream_bandwidth")

    @property
    @pulumi.getter(name="estimatedUpstreamBandwidth")
    def estimated_upstream_bandwidth(self) -> pulumi.Output[int]:
        """
        Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
        """
        return pulumi.get(self, "estimated_upstream_bandwidth")

    @property
    @pulumi.getter(name="explicitFtpProxy")
    def explicit_ftp_proxy(self) -> pulumi.Output[str]:
        """
        Enable/disable the explicit FTP proxy on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "explicit_ftp_proxy")

    @property
    @pulumi.getter(name="explicitWebProxy")
    def explicit_web_proxy(self) -> pulumi.Output[str]:
        """
        Enable/disable the explicit web proxy on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "explicit_web_proxy")

    @property
    @pulumi.getter
    def external(self) -> pulumi.Output[str]:
        """
        Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "external")

    @property
    @pulumi.getter(name="failActionOnExtender")
    def fail_action_on_extender(self) -> pulumi.Output[str]:
        """
        Action on extender when interface fail . Valid values: `soft-restart`, `hard-restart`, `reboot`.
        """
        return pulumi.get(self, "fail_action_on_extender")

    @property
    @pulumi.getter(name="failAlertInterfaces")
    def fail_alert_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.InterfaceFailAlertInterface']]]:
        """
        Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `fail_alert_interfaces` block is documented below.
        """
        return pulumi.get(self, "fail_alert_interfaces")

    @property
    @pulumi.getter(name="failAlertMethod")
    def fail_alert_method(self) -> pulumi.Output[str]:
        """
        Select link-failed-signal or link-down method to alert about a failed link. Valid values: `link-failed-signal`, `link-down`.
        """
        return pulumi.get(self, "fail_alert_method")

    @property
    @pulumi.getter(name="failDetect")
    def fail_detect(self) -> pulumi.Output[str]:
        """
        Enable/disable fail detection features for this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fail_detect")

    @property
    @pulumi.getter(name="failDetectOption")
    def fail_detect_option(self) -> pulumi.Output[str]:
        """
        Options for detecting that this interface has failed. Valid values: `detectserver`, `link-down`.
        """
        return pulumi.get(self, "fail_detect_option")

    @property
    @pulumi.getter
    def fortiheartbeat(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiHeartBeat (FortiTelemetry on GUI). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortiheartbeat")

    @property
    @pulumi.getter
    def fortilink(self) -> pulumi.Output[str]:
        """
        Enable FortiLink to dedicate this interface to manage other Fortinet devices. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortilink")

    @property
    @pulumi.getter(name="fortilinkBackupLink")
    def fortilink_backup_link(self) -> pulumi.Output[int]:
        """
        fortilink split interface backup link.
        """
        return pulumi.get(self, "fortilink_backup_link")

    @property
    @pulumi.getter(name="fortilinkNeighborDetect")
    def fortilink_neighbor_detect(self) -> pulumi.Output[str]:
        """
        Protocol for FortiGate neighbor discovery. Valid values: `lldp`, `fortilink`.
        """
        return pulumi.get(self, "fortilink_neighbor_detect")

    @property
    @pulumi.getter(name="fortilinkSplitInterface")
    def fortilink_split_interface(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortilink_split_interface")

    @property
    @pulumi.getter(name="fortilinkStacking")
    def fortilink_stacking(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiLink switch-stacking on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortilink_stacking")

    @property
    @pulumi.getter(name="forwardDomain")
    def forward_domain(self) -> pulumi.Output[int]:
        """
        Transparent mode forward domain.
        """
        return pulumi.get(self, "forward_domain")

    @property
    @pulumi.getter(name="forwardErrorCorrection")
    def forward_error_correction(self) -> pulumi.Output[str]:
        """
        Configure forward error correction (FEC). Valid values: `none`, `disable`, `cl91-rs-fec`, `cl74-fc-fec`.
        """
        return pulumi.get(self, "forward_error_correction")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def gwdetect(self) -> pulumi.Output[str]:
        """
        Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gwdetect")

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> pulumi.Output[int]:
        """
        HA election priority for the PING server.
        """
        return pulumi.get(self, "ha_priority")

    @property
    @pulumi.getter(name="icmpAcceptRedirect")
    def icmp_accept_redirect(self) -> pulumi.Output[str]:
        """
        Enable/disable ICMP accept redirect. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "icmp_accept_redirect")

    @property
    @pulumi.getter(name="icmpSendRedirect")
    def icmp_send_redirect(self) -> pulumi.Output[str]:
        """
        Enable/disable ICMP send redirect. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "icmp_send_redirect")

    @property
    @pulumi.getter(name="identAccept")
    def ident_accept(self) -> pulumi.Output[str]:
        """
        Enable/disable authentication for this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ident_accept")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> pulumi.Output[int]:
        """
        PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
        """
        return pulumi.get(self, "idle_timeout")

    @property
    @pulumi.getter(name="ikeSamlServer")
    def ike_saml_server(self) -> pulumi.Output[str]:
        """
        Configure IKE authentication SAML server.
        """
        return pulumi.get(self, "ike_saml_server")

    @property
    @pulumi.getter
    def inbandwidth(self) -> pulumi.Output[int]:
        """
        Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
        """
        return pulumi.get(self, "inbandwidth")

    @property
    @pulumi.getter(name="ingressShapingProfile")
    def ingress_shaping_profile(self) -> pulumi.Output[str]:
        """
        Incoming traffic shaping profile.
        """
        return pulumi.get(self, "ingress_shaping_profile")

    @property
    @pulumi.getter(name="ingressSpilloverThreshold")
    def ingress_spillover_threshold(self) -> pulumi.Output[int]:
        """
        Ingress Spillover threshold (0 - 16776000 kbps).
        """
        return pulumi.get(self, "ingress_spillover_threshold")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def internal(self) -> pulumi.Output[int]:
        """
        Implicitly created.
        """
        return pulumi.get(self, "internal")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[str]:
        """
        Interface IPv4 address and subnet mask, syntax: X.X.X.X/24.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="ipManagedByFortiipam")
    def ip_managed_by_fortiipam(self) -> pulumi.Output[str]:
        """
        Enable/disable automatic IP address assignment of this interface by FortiIPAM.
        """
        return pulumi.get(self, "ip_managed_by_fortiipam")

    @property
    @pulumi.getter
    def ipmac(self) -> pulumi.Output[str]:
        """
        Enable/disable IP/MAC binding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipmac")

    @property
    @pulumi.getter(name="ipsSnifferMode")
    def ips_sniffer_mode(self) -> pulumi.Output[str]:
        """
        Enable/disable the use of this interface as a one-armed sniffer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_sniffer_mode")

    @property
    @pulumi.getter
    def ipunnumbered(self) -> pulumi.Output[str]:
        """
        Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
        """
        return pulumi.get(self, "ipunnumbered")

    @property
    @pulumi.getter
    def ipv6(self) -> pulumi.Output['outputs.InterfaceIpv6']:
        """
        IPv6 of interface. The structure of `ipv6` block is documented below.
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def l2forward(self) -> pulumi.Output[str]:
        """
        Enable/disable l2 forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "l2forward")

    @property
    @pulumi.getter(name="lacpHaSecondary")
    def lacp_ha_secondary(self) -> pulumi.Output[str]:
        """
        LACP HA secondary member. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "lacp_ha_secondary")

    @property
    @pulumi.getter(name="lacpHaSlave")
    def lacp_ha_slave(self) -> pulumi.Output[str]:
        """
        LACP HA slave. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "lacp_ha_slave")

    @property
    @pulumi.getter(name="lacpMode")
    def lacp_mode(self) -> pulumi.Output[str]:
        """
        LACP mode. Valid values: `static`, `passive`, `active`.
        """
        return pulumi.get(self, "lacp_mode")

    @property
    @pulumi.getter(name="lacpSpeed")
    def lacp_speed(self) -> pulumi.Output[str]:
        """
        How often the interface sends LACP messages. Valid values: `slow`, `fast`.
        """
        return pulumi.get(self, "lacp_speed")

    @property
    @pulumi.getter(name="lcpEchoInterval")
    def lcp_echo_interval(self) -> pulumi.Output[int]:
        """
        Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
        """
        return pulumi.get(self, "lcp_echo_interval")

    @property
    @pulumi.getter(name="lcpMaxEchoFails")
    def lcp_max_echo_fails(self) -> pulumi.Output[int]:
        """
        Maximum missed LCP echo messages before disconnect.
        """
        return pulumi.get(self, "lcp_max_echo_fails")

    @property
    @pulumi.getter(name="linkUpDelay")
    def link_up_delay(self) -> pulumi.Output[int]:
        """
        Number of milliseconds to wait before considering a link is up.
        """
        return pulumi.get(self, "link_up_delay")

    @property
    @pulumi.getter(name="lldpNetworkPolicy")
    def lldp_network_policy(self) -> pulumi.Output[str]:
        """
        LLDP-MED network policy profile.
        """
        return pulumi.get(self, "lldp_network_policy")

    @property
    @pulumi.getter(name="lldpReception")
    def lldp_reception(self) -> pulumi.Output[str]:
        """
        Enable/disable Link Layer Discovery Protocol (LLDP) reception. Valid values: `enable`, `disable`, `vdom`.
        """
        return pulumi.get(self, "lldp_reception")

    @property
    @pulumi.getter(name="lldpTransmission")
    def lldp_transmission(self) -> pulumi.Output[str]:
        """
        Enable/disable Link Layer Discovery Protocol (LLDP) transmission. Valid values: `enable`, `disable`, `vdom`.
        """
        return pulumi.get(self, "lldp_transmission")

    @property
    @pulumi.getter
    def macaddr(self) -> pulumi.Output[str]:
        """
        Change the interface's MAC address.
        """
        return pulumi.get(self, "macaddr")

    @property
    @pulumi.getter(name="managedDevices")
    def managed_devices(self) -> pulumi.Output[Optional[Sequence['outputs.InterfaceManagedDevice']]]:
        """
        Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managed_device` block is documented below.
        """
        return pulumi.get(self, "managed_devices")

    @property
    @pulumi.getter(name="managedSubnetworkSize")
    def managed_subnetwork_size(self) -> pulumi.Output[str]:
        """
        Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
        """
        return pulumi.get(self, "managed_subnetwork_size")

    @property
    @pulumi.getter(name="managementIp")
    def management_ip(self) -> pulumi.Output[str]:
        """
        High Availability in-band management IP address of this interface.
        """
        return pulumi.get(self, "management_ip")

    @property
    @pulumi.getter(name="measuredDownstreamBandwidth")
    def measured_downstream_bandwidth(self) -> pulumi.Output[int]:
        """
        Measured downstream bandwidth (kbps).
        """
        return pulumi.get(self, "measured_downstream_bandwidth")

    @property
    @pulumi.getter(name="measuredUpstreamBandwidth")
    def measured_upstream_bandwidth(self) -> pulumi.Output[int]:
        """
        Measured upstream bandwidth (kbps).
        """
        return pulumi.get(self, "measured_upstream_bandwidth")

    @property
    @pulumi.getter
    def mediatype(self) -> pulumi.Output[str]:
        """
        Select SFP media interface type Valid values: `none`, `gmii`, `sgmii`, `sr`, `lr`, `cr`, `sr4`, `lr4`, `cr4`.
        """
        return pulumi.get(self, "mediatype")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Optional[Sequence['outputs.InterfaceMember']]]:
        """
        Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter(name="minLinks")
    def min_links(self) -> pulumi.Output[int]:
        """
        Minimum number of aggregated ports that must be up.
        """
        return pulumi.get(self, "min_links")

    @property
    @pulumi.getter(name="minLinksDown")
    def min_links_down(self) -> pulumi.Output[str]:
        """
        Action to take when less than the configured minimum number of links are active. Valid values: `operational`, `administrative`.
        """
        return pulumi.get(self, "min_links_down")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        Addressing mode (static, DHCP, PPPoE). Valid values: `static`, `dhcp`, `pppoe`.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="monitorBandwidth")
    def monitor_bandwidth(self) -> pulumi.Output[str]:
        """
        Enable monitoring bandwidth on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "monitor_bandwidth")

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[int]:
        """
        MTU value for this interface.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="mtuOverride")
    def mtu_override(self) -> pulumi.Output[str]:
        """
        Enable to set a custom MTU for this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mtu_override")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ndiscforward(self) -> pulumi.Output[str]:
        """
        Enable/disable NDISC forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ndiscforward")

    @property
    @pulumi.getter(name="netbiosForward")
    def netbios_forward(self) -> pulumi.Output[str]:
        """
        Enable/disable NETBIOS forwarding. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "netbios_forward")

    @property
    @pulumi.getter(name="netflowSampler")
    def netflow_sampler(self) -> pulumi.Output[str]:
        """
        Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both). Valid values: `disable`, `tx`, `rx`, `both`.
        """
        return pulumi.get(self, "netflow_sampler")

    @property
    @pulumi.getter
    def outbandwidth(self) -> pulumi.Output[int]:
        """
        Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
        """
        return pulumi.get(self, "outbandwidth")

    @property
    @pulumi.getter(name="padtRetryTimeout")
    def padt_retry_timeout(self) -> pulumi.Output[int]:
        """
        PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
        """
        return pulumi.get(self, "padt_retry_timeout")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        PPPoE account's password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="pingServStatus")
    def ping_serv_status(self) -> pulumi.Output[int]:
        """
        PING server status.
        """
        return pulumi.get(self, "ping_serv_status")

    @property
    @pulumi.getter(name="pollingInterval")
    def polling_interval(self) -> pulumi.Output[int]:
        """
        sFlow polling interval (1 - 255 sec).
        """
        return pulumi.get(self, "polling_interval")

    @property
    @pulumi.getter(name="pppoeUnnumberedNegotiate")
    def pppoe_unnumbered_negotiate(self) -> pulumi.Output[str]:
        """
        Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pppoe_unnumbered_negotiate")

    @property
    @pulumi.getter(name="pptpAuthType")
    def pptp_auth_type(self) -> pulumi.Output[str]:
        """
        PPTP authentication type. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        """
        return pulumi.get(self, "pptp_auth_type")

    @property
    @pulumi.getter(name="pptpClient")
    def pptp_client(self) -> pulumi.Output[str]:
        """
        Enable/disable PPTP client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pptp_client")

    @property
    @pulumi.getter(name="pptpPassword")
    def pptp_password(self) -> pulumi.Output[Optional[str]]:
        """
        PPTP password.
        """
        return pulumi.get(self, "pptp_password")

    @property
    @pulumi.getter(name="pptpServerIp")
    def pptp_server_ip(self) -> pulumi.Output[str]:
        """
        PPTP server IP address.
        """
        return pulumi.get(self, "pptp_server_ip")

    @property
    @pulumi.getter(name="pptpTimeout")
    def pptp_timeout(self) -> pulumi.Output[int]:
        """
        Idle timer in minutes (0 for disabled).
        """
        return pulumi.get(self, "pptp_timeout")

    @property
    @pulumi.getter(name="pptpUser")
    def pptp_user(self) -> pulumi.Output[str]:
        """
        PPTP user name.
        """
        return pulumi.get(self, "pptp_user")

    @property
    @pulumi.getter(name="preserveSessionRoute")
    def preserve_session_route(self) -> pulumi.Output[str]:
        """
        Enable/disable preservation of session route when dirty. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "preserve_session_route")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        Priority of learned routes.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="priorityOverride")
    def priority_override(self) -> pulumi.Output[str]:
        """
        Enable/disable fail back to higher priority port once recovered. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "priority_override")

    @property
    @pulumi.getter(name="proxyCaptivePortal")
    def proxy_captive_portal(self) -> pulumi.Output[str]:
        """
        Enable/disable proxy captive portal on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_captive_portal")

    @property
    @pulumi.getter(name="reachableTime")
    def reachable_time(self) -> pulumi.Output[int]:
        """
        IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
        """
        return pulumi.get(self, "reachable_time")

    @property
    @pulumi.getter(name="redundantInterface")
    def redundant_interface(self) -> pulumi.Output[str]:
        """
        Redundant interface.
        """
        return pulumi.get(self, "redundant_interface")

    @property
    @pulumi.getter(name="remoteIp")
    def remote_ip(self) -> pulumi.Output[str]:
        """
        Remote IP address of tunnel.
        """
        return pulumi.get(self, "remote_ip")

    @property
    @pulumi.getter(name="replacemsgOverrideGroup")
    def replacemsg_override_group(self) -> pulumi.Output[str]:
        """
        Replacement message override group.
        """
        return pulumi.get(self, "replacemsg_override_group")

    @property
    @pulumi.getter(name="ringRx")
    def ring_rx(self) -> pulumi.Output[int]:
        """
        RX ring size.
        """
        return pulumi.get(self, "ring_rx")

    @property
    @pulumi.getter(name="ringTx")
    def ring_tx(self) -> pulumi.Output[int]:
        """
        TX ring size.
        """
        return pulumi.get(self, "ring_tx")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        """
        Interface role. Valid values: `lan`, `wan`, `dmz`, `undefined`.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sampleDirection")
    def sample_direction(self) -> pulumi.Output[str]:
        """
        Data that NetFlow collects (rx, tx, or both). Valid values: `tx`, `rx`, `both`.
        """
        return pulumi.get(self, "sample_direction")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> pulumi.Output[int]:
        """
        sFlow sample rate (10 - 99999).
        """
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> pulumi.Output[str]:
        """
        Enable monitoring or blocking connections to Botnet servers through this interface. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @property
    @pulumi.getter(name="secondaryIp")
    def secondary_ip(self) -> pulumi.Output[str]:
        """
        Enable/disable adding a secondary IP to this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "secondary_ip")

    @property
    @pulumi.getter
    def secondaryips(self) -> pulumi.Output[Optional[Sequence['outputs.InterfaceSecondaryip']]]:
        """
        Second IP address of interface. The structure of `secondaryip` block is documented below.
        """
        return pulumi.get(self, "secondaryips")

    @property
    @pulumi.getter(name="securityExemptList")
    def security_exempt_list(self) -> pulumi.Output[str]:
        """
        Name of security-exempt-list.
        """
        return pulumi.get(self, "security_exempt_list")

    @property
    @pulumi.getter(name="securityExternalLogout")
    def security_external_logout(self) -> pulumi.Output[str]:
        """
        URL of external authentication logout server.
        """
        return pulumi.get(self, "security_external_logout")

    @property
    @pulumi.getter(name="securityExternalWeb")
    def security_external_web(self) -> pulumi.Output[str]:
        """
        URL of external authentication web server.
        """
        return pulumi.get(self, "security_external_web")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Optional[Sequence['outputs.InterfaceSecurityGroup']]]:
        """
        User groups that can authenticate with the captive portal. The structure of `security_groups` block is documented below.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="securityMacAuthBypass")
    def security_mac_auth_bypass(self) -> pulumi.Output[str]:
        """
        Enable/disable MAC authentication bypass. Valid values: `mac-auth-only`, `enable`, `disable`.
        """
        return pulumi.get(self, "security_mac_auth_bypass")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> pulumi.Output[str]:
        """
        Turn on captive portal authentication for this interface. Valid values: `none`, `captive-portal`, `802.1X`.
        """
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="securityRedirectUrl")
    def security_redirect_url(self) -> pulumi.Output[str]:
        """
        URL redirection after disclaimer/authentication.
        """
        return pulumi.get(self, "security_redirect_url")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Output[str]:
        """
        PPPoE service name.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="sflowSampler")
    def sflow_sampler(self) -> pulumi.Output[str]:
        """
        Enable/disable sFlow on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sflow_sampler")

    @property
    @pulumi.getter(name="snmpIndex")
    def snmp_index(self) -> pulumi.Output[int]:
        """
        Permanent SNMP Index of the interface.
        """
        return pulumi.get(self, "snmp_index")

    @property
    @pulumi.getter
    def speed(self) -> pulumi.Output[str]:
        """
        Interface speed. The default setting and the options available depend on the interface hardware.
        """
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter(name="spilloverThreshold")
    def spillover_threshold(self) -> pulumi.Output[int]:
        """
        Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
        """
        return pulumi.get(self, "spillover_threshold")

    @property
    @pulumi.getter(name="srcCheck")
    def src_check(self) -> pulumi.Output[str]:
        """
        Enable/disable source IP check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "src_check")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Bring the interface up or shut the interface down. Valid values: `up`, `down`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def stp(self) -> pulumi.Output[str]:
        """
        Enable/disable STP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "stp")

    @property
    @pulumi.getter(name="stpHaSecondary")
    def stp_ha_secondary(self) -> pulumi.Output[str]:
        """
        Control STP behaviour on HA secondary. Valid values: `disable`, `enable`, `priority-adjust`.
        """
        return pulumi.get(self, "stp_ha_secondary")

    @property
    @pulumi.getter
    def stpforward(self) -> pulumi.Output[str]:
        """
        Enable/disable STP forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "stpforward")

    @property
    @pulumi.getter(name="stpforwardMode")
    def stpforward_mode(self) -> pulumi.Output[str]:
        """
        Configure STP forwarding mode. Valid values: `rpl-all-ext-id`, `rpl-bridge-ext-id`, `rpl-nothing`.
        """
        return pulumi.get(self, "stpforward_mode")

    @property
    @pulumi.getter
    def subst(self) -> pulumi.Output[str]:
        """
        Enable to always send packets from this interface to a destination MAC address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "subst")

    @property
    @pulumi.getter(name="substituteDstMac")
    def substitute_dst_mac(self) -> pulumi.Output[str]:
        """
        Destination MAC address that all packets are sent to from this interface.
        """
        return pulumi.get(self, "substitute_dst_mac")

    @property
    @pulumi.getter(name="swcFirstCreate")
    def swc_first_create(self) -> pulumi.Output[int]:
        """
        Initial create for switch-controller VLANs.
        """
        return pulumi.get(self, "swc_first_create")

    @property
    @pulumi.getter(name="swcVlan")
    def swc_vlan(self) -> pulumi.Output[int]:
        """
        Creation status for switch-controller VLANs.
        """
        return pulumi.get(self, "swc_vlan")

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Output[str]:
        """
        Contained in switch.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="switchControllerAccessVlan")
    def switch_controller_access_vlan(self) -> pulumi.Output[str]:
        """
        Block FortiSwitch port-to-port traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_access_vlan")

    @property
    @pulumi.getter(name="switchControllerArpInspection")
    def switch_controller_arp_inspection(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiSwitch ARP inspection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_arp_inspection")

    @property
    @pulumi.getter(name="switchControllerDhcpSnooping")
    def switch_controller_dhcp_snooping(self) -> pulumi.Output[str]:
        """
        Switch controller DHCP snooping. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_dhcp_snooping")

    @property
    @pulumi.getter(name="switchControllerDhcpSnoopingOption82")
    def switch_controller_dhcp_snooping_option82(self) -> pulumi.Output[str]:
        """
        Switch controller DHCP snooping option82. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_dhcp_snooping_option82")

    @property
    @pulumi.getter(name="switchControllerDhcpSnoopingVerifyMac")
    def switch_controller_dhcp_snooping_verify_mac(self) -> pulumi.Output[str]:
        """
        Switch controller DHCP snooping verify MAC. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_dhcp_snooping_verify_mac")

    @property
    @pulumi.getter(name="switchControllerDynamic")
    def switch_controller_dynamic(self) -> pulumi.Output[str]:
        """
        Integrated FortiLink settings for managed FortiSwitch.
        """
        return pulumi.get(self, "switch_controller_dynamic")

    @property
    @pulumi.getter(name="switchControllerFeature")
    def switch_controller_feature(self) -> pulumi.Output[str]:
        """
        Interface's purpose when assigning traffic (read only).
        """
        return pulumi.get(self, "switch_controller_feature")

    @property
    @pulumi.getter(name="switchControllerIgmpSnooping")
    def switch_controller_igmp_snooping(self) -> pulumi.Output[str]:
        """
        Switch controller IGMP snooping. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_igmp_snooping")

    @property
    @pulumi.getter(name="switchControllerIgmpSnoopingFastLeave")
    def switch_controller_igmp_snooping_fast_leave(self) -> pulumi.Output[str]:
        """
        Switch controller IGMP snooping fast-leave. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_igmp_snooping_fast_leave")

    @property
    @pulumi.getter(name="switchControllerIgmpSnoopingProxy")
    def switch_controller_igmp_snooping_proxy(self) -> pulumi.Output[str]:
        """
        Switch controller IGMP snooping proxy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_igmp_snooping_proxy")

    @property
    @pulumi.getter(name="switchControllerIotScanning")
    def switch_controller_iot_scanning(self) -> pulumi.Output[str]:
        """
        Enable/disable managed FortiSwitch IoT scanning. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_iot_scanning")

    @property
    @pulumi.getter(name="switchControllerLearningLimit")
    def switch_controller_learning_limit(self) -> pulumi.Output[int]:
        """
        Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
        """
        return pulumi.get(self, "switch_controller_learning_limit")

    @property
    @pulumi.getter(name="switchControllerMgmtVlan")
    def switch_controller_mgmt_vlan(self) -> pulumi.Output[int]:
        """
        VLAN to use for FortiLink management purposes.
        """
        return pulumi.get(self, "switch_controller_mgmt_vlan")

    @property
    @pulumi.getter(name="switchControllerNac")
    def switch_controller_nac(self) -> pulumi.Output[str]:
        """
        Integrated NAC settings for managed FortiSwitch.
        """
        return pulumi.get(self, "switch_controller_nac")

    @property
    @pulumi.getter(name="switchControllerNetflowCollect")
    def switch_controller_netflow_collect(self) -> pulumi.Output[str]:
        """
        NetFlow collection and processing. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "switch_controller_netflow_collect")

    @property
    @pulumi.getter(name="switchControllerOffload")
    def switch_controller_offload(self) -> pulumi.Output[str]:
        """
        Enable/disable managed FortiSwitch routing offload. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_offload")

    @property
    @pulumi.getter(name="switchControllerOffloadGw")
    def switch_controller_offload_gw(self) -> pulumi.Output[str]:
        """
        Enable/disable managed FortiSwitch routing offload gateway. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switch_controller_offload_gw")

    @property
    @pulumi.getter(name="switchControllerOffloadIp")
    def switch_controller_offload_ip(self) -> pulumi.Output[str]:
        """
        IP for routing offload on FortiSwitch.
        """
        return pulumi.get(self, "switch_controller_offload_ip")

    @property
    @pulumi.getter(name="switchControllerRspanMode")
    def switch_controller_rspan_mode(self) -> pulumi.Output[str]:
        """
        Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "switch_controller_rspan_mode")

    @property
    @pulumi.getter(name="switchControllerSourceIp")
    def switch_controller_source_ip(self) -> pulumi.Output[str]:
        """
        Source IP address used in FortiLink over L3 connections. Valid values: `outbound`, `fixed`.
        """
        return pulumi.get(self, "switch_controller_source_ip")

    @property
    @pulumi.getter(name="switchControllerTrafficPolicy")
    def switch_controller_traffic_policy(self) -> pulumi.Output[str]:
        """
        Switch controller traffic policy for the VLAN.
        """
        return pulumi.get(self, "switch_controller_traffic_policy")

    @property
    @pulumi.getter(name="systemId")
    def system_id(self) -> pulumi.Output[str]:
        """
        Define a system ID for the aggregate interface.
        """
        return pulumi.get(self, "system_id")

    @property
    @pulumi.getter(name="systemIdType")
    def system_id_type(self) -> pulumi.Output[str]:
        """
        Method in which system ID is generated. Valid values: `auto`, `user`.
        """
        return pulumi.get(self, "system_id_type")

    @property
    @pulumi.getter
    def taggings(self) -> pulumi.Output[Optional[Sequence['outputs.InterfaceTagging']]]:
        """
        Config object tagging. The structure of `tagging` block is documented below.
        """
        return pulumi.get(self, "taggings")

    @property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> pulumi.Output[int]:
        """
        TCP maximum segment size. 0 means do not change segment size.
        """
        return pulumi.get(self, "tcp_mss")

    @property
    @pulumi.getter
    def trunk(self) -> pulumi.Output[str]:
        """
        Enable/disable VLAN trunk. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "trunk")

    @property
    @pulumi.getter(name="trustIp1")
    def trust_ip1(self) -> pulumi.Output[str]:
        """
        Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        """
        return pulumi.get(self, "trust_ip1")

    @property
    @pulumi.getter(name="trustIp2")
    def trust_ip2(self) -> pulumi.Output[str]:
        """
        Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        """
        return pulumi.get(self, "trust_ip2")

    @property
    @pulumi.getter(name="trustIp3")
    def trust_ip3(self) -> pulumi.Output[str]:
        """
        Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        """
        return pulumi.get(self, "trust_ip3")

    @property
    @pulumi.getter(name="trustIp61")
    def trust_ip61(self) -> pulumi.Output[str]:
        """
        Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        """
        return pulumi.get(self, "trust_ip61")

    @property
    @pulumi.getter(name="trustIp62")
    def trust_ip62(self) -> pulumi.Output[str]:
        """
        Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        """
        return pulumi.get(self, "trust_ip62")

    @property
    @pulumi.getter(name="trustIp63")
    def trust_ip63(self) -> pulumi.Output[str]:
        """
        Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        """
        return pulumi.get(self, "trust_ip63")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Interface type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        Username of the PPPoE account, provided by your ISP.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def vdom(self) -> pulumi.Output[str]:
        """
        Interface is in this virtual domain (VDOM).
        """
        return pulumi.get(self, "vdom")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vindex(self) -> pulumi.Output[int]:
        """
        Switch control interface VLAN ID.
        """
        return pulumi.get(self, "vindex")

    @property
    @pulumi.getter(name="vlanProtocol")
    def vlan_protocol(self) -> pulumi.Output[str]:
        """
        Ethernet protocol of VLAN. Valid values: `8021q`, `8021ad`.
        """
        return pulumi.get(self, "vlan_protocol")

    @property
    @pulumi.getter
    def vlanforward(self) -> pulumi.Output[str]:
        """
        Enable/disable traffic forwarding between VLANs on this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vlanforward")

    @property
    @pulumi.getter
    def vlanid(self) -> pulumi.Output[int]:
        """
        VLAN ID (1 - 4094).
        """
        return pulumi.get(self, "vlanid")

    @property
    @pulumi.getter
    def vrf(self) -> pulumi.Output[int]:
        """
        Virtual Routing Forwarding ID.
        """
        return pulumi.get(self, "vrf")

    @property
    @pulumi.getter(name="vrrpVirtualMac")
    def vrrp_virtual_mac(self) -> pulumi.Output[str]:
        """
        Enable/disable use of virtual MAC for VRRP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vrrp_virtual_mac")

    @property
    @pulumi.getter
    def vrrps(self) -> pulumi.Output[Optional[Sequence['outputs.InterfaceVrrp']]]:
        """
        VRRP configuration. The structure of `vrrp` block is documented below.
        """
        return pulumi.get(self, "vrrps")

    @property
    @pulumi.getter
    def wccp(self) -> pulumi.Output[str]:
        """
        Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wccp")

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Output[int]:
        """
        Default weight for static routes (if route has no weight configured).
        """
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter(name="winsIp")
    def wins_ip(self) -> pulumi.Output[str]:
        """
        WINS server IP.
        """
        return pulumi.get(self, "wins_ip")

