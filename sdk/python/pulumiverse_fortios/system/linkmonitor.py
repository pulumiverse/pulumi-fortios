# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LinkmonitorArgs', 'Linkmonitor']

@pulumi.input_type
class LinkmonitorArgs:
    def __init__(__self__, *,
                 servers: pulumi.Input[Sequence[pulumi.Input['LinkmonitorServerArgs']]],
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 class_id: Optional[pulumi.Input[int]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fail_weight: Optional[pulumi.Input[int]] = None,
                 failtime: Optional[pulumi.Input[int]] = None,
                 gateway_ip: Optional[pulumi.Input[str]] = None,
                 gateway_ip6: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_priority: Optional[pulumi.Input[int]] = None,
                 http_agent: Optional[pulumi.Input[str]] = None,
                 http_get: Optional[pulumi.Input[str]] = None,
                 http_match: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_size: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 probe_count: Optional[pulumi.Input[int]] = None,
                 probe_timeout: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 recoverytime: Optional[pulumi.Input[int]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['LinkmonitorRouteArgs']]]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_config: Optional[pulumi.Input[str]] = None,
                 server_lists: Optional[pulumi.Input[Sequence[pulumi.Input['LinkmonitorServerListArgs']]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 service_detection: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 srcintf: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_cascade_interface: Optional[pulumi.Input[str]] = None,
                 update_policy_route: Optional[pulumi.Input[str]] = None,
                 update_static_route: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Linkmonitor resource.
        :param pulumi.Input[Sequence[pulumi.Input['LinkmonitorServerArgs']]] servers: IP address of the server(s) to be monitored. The structure of `server` block is documented below.
        :param pulumi.Input[str] addr_mode: Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[int] class_id: Traffic class ID.
        :param pulumi.Input[str] diffservcode: Differentiated services code point (DSCP) in the IP header of the probe packet.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fail_weight: Threshold weight to trigger link failure alert.
        :param pulumi.Input[int] failtime: Number of retry attempts before the server is considered down (1 - 10, default = 5)
        :param pulumi.Input[str] gateway_ip: Gateway IP address used to probe the server.
        :param pulumi.Input[str] gateway_ip6: Gateway IPv6 address used to probe the server.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] ha_priority: HA election priority (1 - 50).
        :param pulumi.Input[str] http_agent: String in the http-agent field in the HTTP header.
        :param pulumi.Input[str] http_get: If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
        :param pulumi.Input[str] http_match: String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
        :param pulumi.Input[int] interval: Detection interval (1 - 3600 sec, default = 5).
        :param pulumi.Input[str] name: Link monitor name.
        :param pulumi.Input[int] packet_size: Packet size of a twamp test session,
        :param pulumi.Input[str] password: Twamp controller password in authentication mode
        :param pulumi.Input[int] port: Port number of the traffic to be used to monitor the server.
        :param pulumi.Input[int] probe_count: Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        :param pulumi.Input[int] probe_timeout: Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
        :param pulumi.Input[str] protocol: Protocols used to monitor the server.
        :param pulumi.Input[int] recoverytime: Number of successful responses received before server is considered recovered (1 - 10, default = 5).
        :param pulumi.Input[Sequence[pulumi.Input['LinkmonitorRouteArgs']]] routes: Subnet to monitor. The structure of `route` block is documented below.
        :param pulumi.Input[str] security_mode: Twamp controller security mode. Valid values: `none`, `authentication`.
        :param pulumi.Input[str] server_config: Mode of server configuration. Valid values: `default`, `individual`.
        :param pulumi.Input[Sequence[pulumi.Input['LinkmonitorServerListArgs']]] server_lists: Servers for link-monitor to monitor. The structure of `server_list` block is documented below.
        :param pulumi.Input[str] server_type: Server type (static or dynamic). Valid values: `static`, `dynamic`.
        :param pulumi.Input[str] service_detection: Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] source_ip: Source IP address used in packet to the server.
        :param pulumi.Input[str] source_ip6: Source IPv6 address used in packet to the server.
        :param pulumi.Input[str] srcintf: Interface that receives the traffic to be monitored.
        :param pulumi.Input[str] status: Enable/disable this link monitor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_cascade_interface: Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_policy_route: Enable/disable updating the policy route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_static_route: Enable/disable updating the static route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "servers", servers)
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if class_id is not None:
            pulumi.set(__self__, "class_id", class_id)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fail_weight is not None:
            pulumi.set(__self__, "fail_weight", fail_weight)
        if failtime is not None:
            pulumi.set(__self__, "failtime", failtime)
        if gateway_ip is not None:
            pulumi.set(__self__, "gateway_ip", gateway_ip)
        if gateway_ip6 is not None:
            pulumi.set(__self__, "gateway_ip6", gateway_ip6)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if http_agent is not None:
            pulumi.set(__self__, "http_agent", http_agent)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if http_match is not None:
            pulumi.set(__self__, "http_match", http_match)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_size is not None:
            pulumi.set(__self__, "packet_size", packet_size)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if probe_count is not None:
            pulumi.set(__self__, "probe_count", probe_count)
        if probe_timeout is not None:
            pulumi.set(__self__, "probe_timeout", probe_timeout)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if recoverytime is not None:
            pulumi.set(__self__, "recoverytime", recoverytime)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_config is not None:
            pulumi.set(__self__, "server_config", server_config)
        if server_lists is not None:
            pulumi.set(__self__, "server_lists", server_lists)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if service_detection is not None:
            pulumi.set(__self__, "service_detection", service_detection)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if srcintf is not None:
            pulumi.set(__self__, "srcintf", srcintf)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if update_cascade_interface is not None:
            pulumi.set(__self__, "update_cascade_interface", update_cascade_interface)
        if update_policy_route is not None:
            pulumi.set(__self__, "update_policy_route", update_policy_route)
        if update_static_route is not None:
            pulumi.set(__self__, "update_static_route", update_static_route)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def servers(self) -> pulumi.Input[Sequence[pulumi.Input['LinkmonitorServerArgs']]]:
        """
        IP address of the server(s) to be monitored. The structure of `server` block is documented below.
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: pulumi.Input[Sequence[pulumi.Input['LinkmonitorServerArgs']]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter(name="classId")
    def class_id(self) -> Optional[pulumi.Input[int]]:
        """
        Traffic class ID.
        """
        return pulumi.get(self, "class_id")

    @class_id.setter
    def class_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "class_id", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        """
        Differentiated services code point (DSCP) in the IP header of the probe packet.
        """
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="failWeight")
    def fail_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold weight to trigger link failure alert.
        """
        return pulumi.get(self, "fail_weight")

    @fail_weight.setter
    def fail_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fail_weight", value)

    @property
    @pulumi.getter
    def failtime(self) -> Optional[pulumi.Input[int]]:
        """
        Number of retry attempts before the server is considered down (1 - 10, default = 5)
        """
        return pulumi.get(self, "failtime")

    @failtime.setter
    def failtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failtime", value)

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway IP address used to probe the server.
        """
        return pulumi.get(self, "gateway_ip")

    @gateway_ip.setter
    def gateway_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_ip", value)

    @property
    @pulumi.getter(name="gatewayIp6")
    def gateway_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway IPv6 address used to probe the server.
        """
        return pulumi.get(self, "gateway_ip6")

    @gateway_ip6.setter
    def gateway_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_ip6", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[pulumi.Input[int]]:
        """
        HA election priority (1 - 50).
        """
        return pulumi.get(self, "ha_priority")

    @ha_priority.setter
    def ha_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ha_priority", value)

    @property
    @pulumi.getter(name="httpAgent")
    def http_agent(self) -> Optional[pulumi.Input[str]]:
        """
        String in the http-agent field in the HTTP header.
        """
        return pulumi.get(self, "http_agent")

    @http_agent.setter
    def http_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_agent", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input[str]]:
        """
        If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="httpMatch")
    def http_match(self) -> Optional[pulumi.Input[str]]:
        """
        String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
        """
        return pulumi.get(self, "http_match")

    @http_match.setter
    def http_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_match", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Detection interval (1 - 3600 sec, default = 5).
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Link monitor name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> Optional[pulumi.Input[int]]:
        """
        Packet size of a twamp test session,
        """
        return pulumi.get(self, "packet_size")

    @packet_size.setter
    def packet_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_size", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Twamp controller password in authentication mode
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number of the traffic to be used to monitor the server.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="probeCount")
    def probe_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        """
        return pulumi.get(self, "probe_count")

    @probe_count.setter
    def probe_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_count", value)

    @property
    @pulumi.getter(name="probeTimeout")
    def probe_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
        """
        return pulumi.get(self, "probe_timeout")

    @probe_timeout.setter
    def probe_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_timeout", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocols used to monitor the server.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def recoverytime(self) -> Optional[pulumi.Input[int]]:
        """
        Number of successful responses received before server is considered recovered (1 - 10, default = 5).
        """
        return pulumi.get(self, "recoverytime")

    @recoverytime.setter
    def recoverytime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recoverytime", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LinkmonitorRouteArgs']]]]:
        """
        Subnet to monitor. The structure of `route` block is documented below.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LinkmonitorRouteArgs']]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Twamp controller security mode. Valid values: `none`, `authentication`.
        """
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverConfig")
    def server_config(self) -> Optional[pulumi.Input[str]]:
        """
        Mode of server configuration. Valid values: `default`, `individual`.
        """
        return pulumi.get(self, "server_config")

    @server_config.setter
    def server_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_config", value)

    @property
    @pulumi.getter(name="serverLists")
    def server_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LinkmonitorServerListArgs']]]]:
        """
        Servers for link-monitor to monitor. The structure of `server_list` block is documented below.
        """
        return pulumi.get(self, "server_lists")

    @server_lists.setter
    def server_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LinkmonitorServerListArgs']]]]):
        pulumi.set(self, "server_lists", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Server type (static or dynamic). Valid values: `static`, `dynamic`.
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="serviceDetection")
    def service_detection(self) -> Optional[pulumi.Input[str]]:
        """
        Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "service_detection")

    @service_detection.setter
    def service_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_detection", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address used in packet to the server.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 address used in packet to the server.
        """
        return pulumi.get(self, "source_ip6")

    @source_ip6.setter
    def source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip6", value)

    @property
    @pulumi.getter
    def srcintf(self) -> Optional[pulumi.Input[str]]:
        """
        Interface that receives the traffic to be monitored.
        """
        return pulumi.get(self, "srcintf")

    @srcintf.setter
    def srcintf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcintf", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this link monitor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updateCascadeInterface")
    def update_cascade_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_cascade_interface")

    @update_cascade_interface.setter
    def update_cascade_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_cascade_interface", value)

    @property
    @pulumi.getter(name="updatePolicyRoute")
    def update_policy_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable updating the policy route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_policy_route")

    @update_policy_route.setter
    def update_policy_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_policy_route", value)

    @property
    @pulumi.getter(name="updateStaticRoute")
    def update_static_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable updating the static route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_static_route")

    @update_static_route.setter
    def update_static_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_static_route", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _LinkmonitorState:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 class_id: Optional[pulumi.Input[int]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fail_weight: Optional[pulumi.Input[int]] = None,
                 failtime: Optional[pulumi.Input[int]] = None,
                 gateway_ip: Optional[pulumi.Input[str]] = None,
                 gateway_ip6: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_priority: Optional[pulumi.Input[int]] = None,
                 http_agent: Optional[pulumi.Input[str]] = None,
                 http_get: Optional[pulumi.Input[str]] = None,
                 http_match: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_size: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 probe_count: Optional[pulumi.Input[int]] = None,
                 probe_timeout: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 recoverytime: Optional[pulumi.Input[int]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['LinkmonitorRouteArgs']]]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_config: Optional[pulumi.Input[str]] = None,
                 server_lists: Optional[pulumi.Input[Sequence[pulumi.Input['LinkmonitorServerListArgs']]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['LinkmonitorServerArgs']]]] = None,
                 service_detection: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 srcintf: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_cascade_interface: Optional[pulumi.Input[str]] = None,
                 update_policy_route: Optional[pulumi.Input[str]] = None,
                 update_static_route: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Linkmonitor resources.
        :param pulumi.Input[str] addr_mode: Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[int] class_id: Traffic class ID.
        :param pulumi.Input[str] diffservcode: Differentiated services code point (DSCP) in the IP header of the probe packet.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fail_weight: Threshold weight to trigger link failure alert.
        :param pulumi.Input[int] failtime: Number of retry attempts before the server is considered down (1 - 10, default = 5)
        :param pulumi.Input[str] gateway_ip: Gateway IP address used to probe the server.
        :param pulumi.Input[str] gateway_ip6: Gateway IPv6 address used to probe the server.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] ha_priority: HA election priority (1 - 50).
        :param pulumi.Input[str] http_agent: String in the http-agent field in the HTTP header.
        :param pulumi.Input[str] http_get: If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
        :param pulumi.Input[str] http_match: String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
        :param pulumi.Input[int] interval: Detection interval (1 - 3600 sec, default = 5).
        :param pulumi.Input[str] name: Link monitor name.
        :param pulumi.Input[int] packet_size: Packet size of a twamp test session,
        :param pulumi.Input[str] password: Twamp controller password in authentication mode
        :param pulumi.Input[int] port: Port number of the traffic to be used to monitor the server.
        :param pulumi.Input[int] probe_count: Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        :param pulumi.Input[int] probe_timeout: Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
        :param pulumi.Input[str] protocol: Protocols used to monitor the server.
        :param pulumi.Input[int] recoverytime: Number of successful responses received before server is considered recovered (1 - 10, default = 5).
        :param pulumi.Input[Sequence[pulumi.Input['LinkmonitorRouteArgs']]] routes: Subnet to monitor. The structure of `route` block is documented below.
        :param pulumi.Input[str] security_mode: Twamp controller security mode. Valid values: `none`, `authentication`.
        :param pulumi.Input[str] server_config: Mode of server configuration. Valid values: `default`, `individual`.
        :param pulumi.Input[Sequence[pulumi.Input['LinkmonitorServerListArgs']]] server_lists: Servers for link-monitor to monitor. The structure of `server_list` block is documented below.
        :param pulumi.Input[str] server_type: Server type (static or dynamic). Valid values: `static`, `dynamic`.
        :param pulumi.Input[Sequence[pulumi.Input['LinkmonitorServerArgs']]] servers: IP address of the server(s) to be monitored. The structure of `server` block is documented below.
        :param pulumi.Input[str] service_detection: Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] source_ip: Source IP address used in packet to the server.
        :param pulumi.Input[str] source_ip6: Source IPv6 address used in packet to the server.
        :param pulumi.Input[str] srcintf: Interface that receives the traffic to be monitored.
        :param pulumi.Input[str] status: Enable/disable this link monitor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_cascade_interface: Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_policy_route: Enable/disable updating the policy route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_static_route: Enable/disable updating the static route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if class_id is not None:
            pulumi.set(__self__, "class_id", class_id)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fail_weight is not None:
            pulumi.set(__self__, "fail_weight", fail_weight)
        if failtime is not None:
            pulumi.set(__self__, "failtime", failtime)
        if gateway_ip is not None:
            pulumi.set(__self__, "gateway_ip", gateway_ip)
        if gateway_ip6 is not None:
            pulumi.set(__self__, "gateway_ip6", gateway_ip6)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if http_agent is not None:
            pulumi.set(__self__, "http_agent", http_agent)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if http_match is not None:
            pulumi.set(__self__, "http_match", http_match)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_size is not None:
            pulumi.set(__self__, "packet_size", packet_size)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if probe_count is not None:
            pulumi.set(__self__, "probe_count", probe_count)
        if probe_timeout is not None:
            pulumi.set(__self__, "probe_timeout", probe_timeout)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if recoverytime is not None:
            pulumi.set(__self__, "recoverytime", recoverytime)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_config is not None:
            pulumi.set(__self__, "server_config", server_config)
        if server_lists is not None:
            pulumi.set(__self__, "server_lists", server_lists)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if service_detection is not None:
            pulumi.set(__self__, "service_detection", service_detection)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if srcintf is not None:
            pulumi.set(__self__, "srcintf", srcintf)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if update_cascade_interface is not None:
            pulumi.set(__self__, "update_cascade_interface", update_cascade_interface)
        if update_policy_route is not None:
            pulumi.set(__self__, "update_policy_route", update_policy_route)
        if update_static_route is not None:
            pulumi.set(__self__, "update_static_route", update_static_route)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter(name="classId")
    def class_id(self) -> Optional[pulumi.Input[int]]:
        """
        Traffic class ID.
        """
        return pulumi.get(self, "class_id")

    @class_id.setter
    def class_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "class_id", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        """
        Differentiated services code point (DSCP) in the IP header of the probe packet.
        """
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="failWeight")
    def fail_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold weight to trigger link failure alert.
        """
        return pulumi.get(self, "fail_weight")

    @fail_weight.setter
    def fail_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fail_weight", value)

    @property
    @pulumi.getter
    def failtime(self) -> Optional[pulumi.Input[int]]:
        """
        Number of retry attempts before the server is considered down (1 - 10, default = 5)
        """
        return pulumi.get(self, "failtime")

    @failtime.setter
    def failtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failtime", value)

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway IP address used to probe the server.
        """
        return pulumi.get(self, "gateway_ip")

    @gateway_ip.setter
    def gateway_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_ip", value)

    @property
    @pulumi.getter(name="gatewayIp6")
    def gateway_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway IPv6 address used to probe the server.
        """
        return pulumi.get(self, "gateway_ip6")

    @gateway_ip6.setter
    def gateway_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_ip6", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[pulumi.Input[int]]:
        """
        HA election priority (1 - 50).
        """
        return pulumi.get(self, "ha_priority")

    @ha_priority.setter
    def ha_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ha_priority", value)

    @property
    @pulumi.getter(name="httpAgent")
    def http_agent(self) -> Optional[pulumi.Input[str]]:
        """
        String in the http-agent field in the HTTP header.
        """
        return pulumi.get(self, "http_agent")

    @http_agent.setter
    def http_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_agent", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input[str]]:
        """
        If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="httpMatch")
    def http_match(self) -> Optional[pulumi.Input[str]]:
        """
        String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
        """
        return pulumi.get(self, "http_match")

    @http_match.setter
    def http_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_match", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Detection interval (1 - 3600 sec, default = 5).
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Link monitor name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> Optional[pulumi.Input[int]]:
        """
        Packet size of a twamp test session,
        """
        return pulumi.get(self, "packet_size")

    @packet_size.setter
    def packet_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_size", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Twamp controller password in authentication mode
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number of the traffic to be used to monitor the server.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="probeCount")
    def probe_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        """
        return pulumi.get(self, "probe_count")

    @probe_count.setter
    def probe_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_count", value)

    @property
    @pulumi.getter(name="probeTimeout")
    def probe_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
        """
        return pulumi.get(self, "probe_timeout")

    @probe_timeout.setter
    def probe_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_timeout", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocols used to monitor the server.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def recoverytime(self) -> Optional[pulumi.Input[int]]:
        """
        Number of successful responses received before server is considered recovered (1 - 10, default = 5).
        """
        return pulumi.get(self, "recoverytime")

    @recoverytime.setter
    def recoverytime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recoverytime", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LinkmonitorRouteArgs']]]]:
        """
        Subnet to monitor. The structure of `route` block is documented below.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LinkmonitorRouteArgs']]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Twamp controller security mode. Valid values: `none`, `authentication`.
        """
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverConfig")
    def server_config(self) -> Optional[pulumi.Input[str]]:
        """
        Mode of server configuration. Valid values: `default`, `individual`.
        """
        return pulumi.get(self, "server_config")

    @server_config.setter
    def server_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_config", value)

    @property
    @pulumi.getter(name="serverLists")
    def server_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LinkmonitorServerListArgs']]]]:
        """
        Servers for link-monitor to monitor. The structure of `server_list` block is documented below.
        """
        return pulumi.get(self, "server_lists")

    @server_lists.setter
    def server_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LinkmonitorServerListArgs']]]]):
        pulumi.set(self, "server_lists", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Server type (static or dynamic). Valid values: `static`, `dynamic`.
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LinkmonitorServerArgs']]]]:
        """
        IP address of the server(s) to be monitored. The structure of `server` block is documented below.
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LinkmonitorServerArgs']]]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter(name="serviceDetection")
    def service_detection(self) -> Optional[pulumi.Input[str]]:
        """
        Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "service_detection")

    @service_detection.setter
    def service_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_detection", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address used in packet to the server.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 address used in packet to the server.
        """
        return pulumi.get(self, "source_ip6")

    @source_ip6.setter
    def source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip6", value)

    @property
    @pulumi.getter
    def srcintf(self) -> Optional[pulumi.Input[str]]:
        """
        Interface that receives the traffic to be monitored.
        """
        return pulumi.get(self, "srcintf")

    @srcintf.setter
    def srcintf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcintf", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this link monitor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updateCascadeInterface")
    def update_cascade_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_cascade_interface")

    @update_cascade_interface.setter
    def update_cascade_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_cascade_interface", value)

    @property
    @pulumi.getter(name="updatePolicyRoute")
    def update_policy_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable updating the policy route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_policy_route")

    @update_policy_route.setter
    def update_policy_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_policy_route", value)

    @property
    @pulumi.getter(name="updateStaticRoute")
    def update_static_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable updating the static route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_static_route")

    @update_static_route.setter
    def update_static_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_static_route", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Linkmonitor(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 class_id: Optional[pulumi.Input[int]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fail_weight: Optional[pulumi.Input[int]] = None,
                 failtime: Optional[pulumi.Input[int]] = None,
                 gateway_ip: Optional[pulumi.Input[str]] = None,
                 gateway_ip6: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_priority: Optional[pulumi.Input[int]] = None,
                 http_agent: Optional[pulumi.Input[str]] = None,
                 http_get: Optional[pulumi.Input[str]] = None,
                 http_match: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_size: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 probe_count: Optional[pulumi.Input[int]] = None,
                 probe_timeout: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 recoverytime: Optional[pulumi.Input[int]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LinkmonitorRouteArgs']]]]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_config: Optional[pulumi.Input[str]] = None,
                 server_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LinkmonitorServerListArgs']]]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LinkmonitorServerArgs']]]]] = None,
                 service_detection: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 srcintf: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_cascade_interface: Optional[pulumi.Input[str]] = None,
                 update_policy_route: Optional[pulumi.Input[str]] = None,
                 update_static_route: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure Link Health Monitor.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Linkmonitor("trname",
            addr_mode="ipv4",
            failtime=5,
            gateway_ip="2.2.2.2",
            gateway_ip6="::",
            ha_priority=1,
            http_agent="Chrome/ Safari/",
            http_get="/",
            interval=1,
            packet_size=64,
            port=80,
            protocol="ping",
            recoverytime=5,
            security_mode="none",
            servers=[fortios.system.LinkmonitorServerArgs(
                address="3.3.3.3",
            )],
            source_ip="0.0.0.0",
            source_ip6="::",
            srcintf="port4",
            status="enable",
            update_cascade_interface="enable",
            update_static_route="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System LinkMonitor can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/linkmonitor:Linkmonitor labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/linkmonitor:Linkmonitor labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] addr_mode: Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[int] class_id: Traffic class ID.
        :param pulumi.Input[str] diffservcode: Differentiated services code point (DSCP) in the IP header of the probe packet.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fail_weight: Threshold weight to trigger link failure alert.
        :param pulumi.Input[int] failtime: Number of retry attempts before the server is considered down (1 - 10, default = 5)
        :param pulumi.Input[str] gateway_ip: Gateway IP address used to probe the server.
        :param pulumi.Input[str] gateway_ip6: Gateway IPv6 address used to probe the server.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] ha_priority: HA election priority (1 - 50).
        :param pulumi.Input[str] http_agent: String in the http-agent field in the HTTP header.
        :param pulumi.Input[str] http_get: If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
        :param pulumi.Input[str] http_match: String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
        :param pulumi.Input[int] interval: Detection interval (1 - 3600 sec, default = 5).
        :param pulumi.Input[str] name: Link monitor name.
        :param pulumi.Input[int] packet_size: Packet size of a twamp test session,
        :param pulumi.Input[str] password: Twamp controller password in authentication mode
        :param pulumi.Input[int] port: Port number of the traffic to be used to monitor the server.
        :param pulumi.Input[int] probe_count: Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        :param pulumi.Input[int] probe_timeout: Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
        :param pulumi.Input[str] protocol: Protocols used to monitor the server.
        :param pulumi.Input[int] recoverytime: Number of successful responses received before server is considered recovered (1 - 10, default = 5).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LinkmonitorRouteArgs']]]] routes: Subnet to monitor. The structure of `route` block is documented below.
        :param pulumi.Input[str] security_mode: Twamp controller security mode. Valid values: `none`, `authentication`.
        :param pulumi.Input[str] server_config: Mode of server configuration. Valid values: `default`, `individual`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LinkmonitorServerListArgs']]]] server_lists: Servers for link-monitor to monitor. The structure of `server_list` block is documented below.
        :param pulumi.Input[str] server_type: Server type (static or dynamic). Valid values: `static`, `dynamic`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LinkmonitorServerArgs']]]] servers: IP address of the server(s) to be monitored. The structure of `server` block is documented below.
        :param pulumi.Input[str] service_detection: Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] source_ip: Source IP address used in packet to the server.
        :param pulumi.Input[str] source_ip6: Source IPv6 address used in packet to the server.
        :param pulumi.Input[str] srcintf: Interface that receives the traffic to be monitored.
        :param pulumi.Input[str] status: Enable/disable this link monitor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_cascade_interface: Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_policy_route: Enable/disable updating the policy route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_static_route: Enable/disable updating the static route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LinkmonitorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure Link Health Monitor.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Linkmonitor("trname",
            addr_mode="ipv4",
            failtime=5,
            gateway_ip="2.2.2.2",
            gateway_ip6="::",
            ha_priority=1,
            http_agent="Chrome/ Safari/",
            http_get="/",
            interval=1,
            packet_size=64,
            port=80,
            protocol="ping",
            recoverytime=5,
            security_mode="none",
            servers=[fortios.system.LinkmonitorServerArgs(
                address="3.3.3.3",
            )],
            source_ip="0.0.0.0",
            source_ip6="::",
            srcintf="port4",
            status="enable",
            update_cascade_interface="enable",
            update_static_route="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System LinkMonitor can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/linkmonitor:Linkmonitor labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/linkmonitor:Linkmonitor labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param LinkmonitorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LinkmonitorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 class_id: Optional[pulumi.Input[int]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fail_weight: Optional[pulumi.Input[int]] = None,
                 failtime: Optional[pulumi.Input[int]] = None,
                 gateway_ip: Optional[pulumi.Input[str]] = None,
                 gateway_ip6: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_priority: Optional[pulumi.Input[int]] = None,
                 http_agent: Optional[pulumi.Input[str]] = None,
                 http_get: Optional[pulumi.Input[str]] = None,
                 http_match: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_size: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 probe_count: Optional[pulumi.Input[int]] = None,
                 probe_timeout: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 recoverytime: Optional[pulumi.Input[int]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LinkmonitorRouteArgs']]]]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_config: Optional[pulumi.Input[str]] = None,
                 server_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LinkmonitorServerListArgs']]]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LinkmonitorServerArgs']]]]] = None,
                 service_detection: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 srcintf: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_cascade_interface: Optional[pulumi.Input[str]] = None,
                 update_policy_route: Optional[pulumi.Input[str]] = None,
                 update_static_route: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LinkmonitorArgs.__new__(LinkmonitorArgs)

            __props__.__dict__["addr_mode"] = addr_mode
            __props__.__dict__["class_id"] = class_id
            __props__.__dict__["diffservcode"] = diffservcode
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fail_weight"] = fail_weight
            __props__.__dict__["failtime"] = failtime
            __props__.__dict__["gateway_ip"] = gateway_ip
            __props__.__dict__["gateway_ip6"] = gateway_ip6
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ha_priority"] = ha_priority
            __props__.__dict__["http_agent"] = http_agent
            __props__.__dict__["http_get"] = http_get
            __props__.__dict__["http_match"] = http_match
            __props__.__dict__["interval"] = interval
            __props__.__dict__["name"] = name
            __props__.__dict__["packet_size"] = packet_size
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["port"] = port
            __props__.__dict__["probe_count"] = probe_count
            __props__.__dict__["probe_timeout"] = probe_timeout
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["recoverytime"] = recoverytime
            __props__.__dict__["routes"] = routes
            __props__.__dict__["security_mode"] = security_mode
            __props__.__dict__["server_config"] = server_config
            __props__.__dict__["server_lists"] = server_lists
            __props__.__dict__["server_type"] = server_type
            if servers is None and not opts.urn:
                raise TypeError("Missing required property 'servers'")
            __props__.__dict__["servers"] = servers
            __props__.__dict__["service_detection"] = service_detection
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["source_ip6"] = source_ip6
            __props__.__dict__["srcintf"] = srcintf
            __props__.__dict__["status"] = status
            __props__.__dict__["update_cascade_interface"] = update_cascade_interface
            __props__.__dict__["update_policy_route"] = update_policy_route
            __props__.__dict__["update_static_route"] = update_static_route
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Linkmonitor, __self__).__init__(
            'fortios:system/linkmonitor:Linkmonitor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addr_mode: Optional[pulumi.Input[str]] = None,
            class_id: Optional[pulumi.Input[int]] = None,
            diffservcode: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fail_weight: Optional[pulumi.Input[int]] = None,
            failtime: Optional[pulumi.Input[int]] = None,
            gateway_ip: Optional[pulumi.Input[str]] = None,
            gateway_ip6: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ha_priority: Optional[pulumi.Input[int]] = None,
            http_agent: Optional[pulumi.Input[str]] = None,
            http_get: Optional[pulumi.Input[str]] = None,
            http_match: Optional[pulumi.Input[str]] = None,
            interval: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            packet_size: Optional[pulumi.Input[int]] = None,
            password: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            probe_count: Optional[pulumi.Input[int]] = None,
            probe_timeout: Optional[pulumi.Input[int]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            recoverytime: Optional[pulumi.Input[int]] = None,
            routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LinkmonitorRouteArgs']]]]] = None,
            security_mode: Optional[pulumi.Input[str]] = None,
            server_config: Optional[pulumi.Input[str]] = None,
            server_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LinkmonitorServerListArgs']]]]] = None,
            server_type: Optional[pulumi.Input[str]] = None,
            servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LinkmonitorServerArgs']]]]] = None,
            service_detection: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            source_ip6: Optional[pulumi.Input[str]] = None,
            srcintf: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            update_cascade_interface: Optional[pulumi.Input[str]] = None,
            update_policy_route: Optional[pulumi.Input[str]] = None,
            update_static_route: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Linkmonitor':
        """
        Get an existing Linkmonitor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] addr_mode: Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[int] class_id: Traffic class ID.
        :param pulumi.Input[str] diffservcode: Differentiated services code point (DSCP) in the IP header of the probe packet.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fail_weight: Threshold weight to trigger link failure alert.
        :param pulumi.Input[int] failtime: Number of retry attempts before the server is considered down (1 - 10, default = 5)
        :param pulumi.Input[str] gateway_ip: Gateway IP address used to probe the server.
        :param pulumi.Input[str] gateway_ip6: Gateway IPv6 address used to probe the server.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] ha_priority: HA election priority (1 - 50).
        :param pulumi.Input[str] http_agent: String in the http-agent field in the HTTP header.
        :param pulumi.Input[str] http_get: If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
        :param pulumi.Input[str] http_match: String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
        :param pulumi.Input[int] interval: Detection interval (1 - 3600 sec, default = 5).
        :param pulumi.Input[str] name: Link monitor name.
        :param pulumi.Input[int] packet_size: Packet size of a twamp test session,
        :param pulumi.Input[str] password: Twamp controller password in authentication mode
        :param pulumi.Input[int] port: Port number of the traffic to be used to monitor the server.
        :param pulumi.Input[int] probe_count: Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        :param pulumi.Input[int] probe_timeout: Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
        :param pulumi.Input[str] protocol: Protocols used to monitor the server.
        :param pulumi.Input[int] recoverytime: Number of successful responses received before server is considered recovered (1 - 10, default = 5).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LinkmonitorRouteArgs']]]] routes: Subnet to monitor. The structure of `route` block is documented below.
        :param pulumi.Input[str] security_mode: Twamp controller security mode. Valid values: `none`, `authentication`.
        :param pulumi.Input[str] server_config: Mode of server configuration. Valid values: `default`, `individual`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LinkmonitorServerListArgs']]]] server_lists: Servers for link-monitor to monitor. The structure of `server_list` block is documented below.
        :param pulumi.Input[str] server_type: Server type (static or dynamic). Valid values: `static`, `dynamic`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LinkmonitorServerArgs']]]] servers: IP address of the server(s) to be monitored. The structure of `server` block is documented below.
        :param pulumi.Input[str] service_detection: Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] source_ip: Source IP address used in packet to the server.
        :param pulumi.Input[str] source_ip6: Source IPv6 address used in packet to the server.
        :param pulumi.Input[str] srcintf: Interface that receives the traffic to be monitored.
        :param pulumi.Input[str] status: Enable/disable this link monitor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_cascade_interface: Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_policy_route: Enable/disable updating the policy route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_static_route: Enable/disable updating the static route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LinkmonitorState.__new__(_LinkmonitorState)

        __props__.__dict__["addr_mode"] = addr_mode
        __props__.__dict__["class_id"] = class_id
        __props__.__dict__["diffservcode"] = diffservcode
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fail_weight"] = fail_weight
        __props__.__dict__["failtime"] = failtime
        __props__.__dict__["gateway_ip"] = gateway_ip
        __props__.__dict__["gateway_ip6"] = gateway_ip6
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ha_priority"] = ha_priority
        __props__.__dict__["http_agent"] = http_agent
        __props__.__dict__["http_get"] = http_get
        __props__.__dict__["http_match"] = http_match
        __props__.__dict__["interval"] = interval
        __props__.__dict__["name"] = name
        __props__.__dict__["packet_size"] = packet_size
        __props__.__dict__["password"] = password
        __props__.__dict__["port"] = port
        __props__.__dict__["probe_count"] = probe_count
        __props__.__dict__["probe_timeout"] = probe_timeout
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["recoverytime"] = recoverytime
        __props__.__dict__["routes"] = routes
        __props__.__dict__["security_mode"] = security_mode
        __props__.__dict__["server_config"] = server_config
        __props__.__dict__["server_lists"] = server_lists
        __props__.__dict__["server_type"] = server_type
        __props__.__dict__["servers"] = servers
        __props__.__dict__["service_detection"] = service_detection
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["source_ip6"] = source_ip6
        __props__.__dict__["srcintf"] = srcintf
        __props__.__dict__["status"] = status
        __props__.__dict__["update_cascade_interface"] = update_cascade_interface
        __props__.__dict__["update_policy_route"] = update_policy_route
        __props__.__dict__["update_static_route"] = update_static_route
        __props__.__dict__["vdomparam"] = vdomparam
        return Linkmonitor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> pulumi.Output[str]:
        """
        Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter(name="classId")
    def class_id(self) -> pulumi.Output[int]:
        """
        Traffic class ID.
        """
        return pulumi.get(self, "class_id")

    @property
    @pulumi.getter
    def diffservcode(self) -> pulumi.Output[str]:
        """
        Differentiated services code point (DSCP) in the IP header of the probe packet.
        """
        return pulumi.get(self, "diffservcode")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="failWeight")
    def fail_weight(self) -> pulumi.Output[int]:
        """
        Threshold weight to trigger link failure alert.
        """
        return pulumi.get(self, "fail_weight")

    @property
    @pulumi.getter
    def failtime(self) -> pulumi.Output[int]:
        """
        Number of retry attempts before the server is considered down (1 - 10, default = 5)
        """
        return pulumi.get(self, "failtime")

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> pulumi.Output[str]:
        """
        Gateway IP address used to probe the server.
        """
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="gatewayIp6")
    def gateway_ip6(self) -> pulumi.Output[str]:
        """
        Gateway IPv6 address used to probe the server.
        """
        return pulumi.get(self, "gateway_ip6")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> pulumi.Output[int]:
        """
        HA election priority (1 - 50).
        """
        return pulumi.get(self, "ha_priority")

    @property
    @pulumi.getter(name="httpAgent")
    def http_agent(self) -> pulumi.Output[str]:
        """
        String in the http-agent field in the HTTP header.
        """
        return pulumi.get(self, "http_agent")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> pulumi.Output[str]:
        """
        If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="httpMatch")
    def http_match(self) -> pulumi.Output[str]:
        """
        String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
        """
        return pulumi.get(self, "http_match")

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Output[int]:
        """
        Detection interval (1 - 3600 sec, default = 5).
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Link monitor name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> pulumi.Output[int]:
        """
        Packet size of a twamp test session,
        """
        return pulumi.get(self, "packet_size")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Twamp controller password in authentication mode
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        Port number of the traffic to be used to monitor the server.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="probeCount")
    def probe_count(self) -> pulumi.Output[int]:
        """
        Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        """
        return pulumi.get(self, "probe_count")

    @property
    @pulumi.getter(name="probeTimeout")
    def probe_timeout(self) -> pulumi.Output[int]:
        """
        Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
        """
        return pulumi.get(self, "probe_timeout")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Protocols used to monitor the server.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def recoverytime(self) -> pulumi.Output[int]:
        """
        Number of successful responses received before server is considered recovered (1 - 10, default = 5).
        """
        return pulumi.get(self, "recoverytime")

    @property
    @pulumi.getter
    def routes(self) -> pulumi.Output[Optional[Sequence['outputs.LinkmonitorRoute']]]:
        """
        Subnet to monitor. The structure of `route` block is documented below.
        """
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> pulumi.Output[str]:
        """
        Twamp controller security mode. Valid values: `none`, `authentication`.
        """
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverConfig")
    def server_config(self) -> pulumi.Output[str]:
        """
        Mode of server configuration. Valid values: `default`, `individual`.
        """
        return pulumi.get(self, "server_config")

    @property
    @pulumi.getter(name="serverLists")
    def server_lists(self) -> pulumi.Output[Optional[Sequence['outputs.LinkmonitorServerList']]]:
        """
        Servers for link-monitor to monitor. The structure of `server_list` block is documented below.
        """
        return pulumi.get(self, "server_lists")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Output[str]:
        """
        Server type (static or dynamic). Valid values: `static`, `dynamic`.
        """
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter
    def servers(self) -> pulumi.Output[Sequence['outputs.LinkmonitorServer']]:
        """
        IP address of the server(s) to be monitored. The structure of `server` block is documented below.
        """
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter(name="serviceDetection")
    def service_detection(self) -> pulumi.Output[str]:
        """
        Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "service_detection")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        """
        Source IP address used in packet to the server.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> pulumi.Output[str]:
        """
        Source IPv6 address used in packet to the server.
        """
        return pulumi.get(self, "source_ip6")

    @property
    @pulumi.getter
    def srcintf(self) -> pulumi.Output[str]:
        """
        Interface that receives the traffic to be monitored.
        """
        return pulumi.get(self, "srcintf")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable this link monitor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateCascadeInterface")
    def update_cascade_interface(self) -> pulumi.Output[str]:
        """
        Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_cascade_interface")

    @property
    @pulumi.getter(name="updatePolicyRoute")
    def update_policy_route(self) -> pulumi.Output[str]:
        """
        Enable/disable updating the policy route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_policy_route")

    @property
    @pulumi.getter(name="updateStaticRoute")
    def update_static_route(self) -> pulumi.Output[str]:
        """
        Enable/disable updating the static route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_static_route")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

