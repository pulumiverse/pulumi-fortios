# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NtpArgs', 'Ntp']

@pulumi.input_type
class NtpArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['NtpInterfaceArgs']]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 ntpservers: Optional[pulumi.Input[Sequence[pulumi.Input['NtpNtpserverArgs']]]] = None,
                 ntpsync: Optional[pulumi.Input[str]] = None,
                 server_mode: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 syncinterval: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Ntp resource.
        :param pulumi.Input[str] authentication: Enable/disable authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input['NtpInterfaceArgs']]] interfaces: FortiGate interface(s) with NTP server mode enabled. Devices on your network can contact these interfaces for NTP services. The structure of `interface` block is documented below.
        :param pulumi.Input[str] key: Key for authentication.
        :param pulumi.Input[int] key_id: Key ID for authentication.
        :param pulumi.Input[str] key_type: Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
        :param pulumi.Input[Sequence[pulumi.Input['NtpNtpserverArgs']]] ntpservers: Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
        :param pulumi.Input[str] ntpsync: Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server_mode: Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] source_ip: Source IP address for communication to the NTP server.
        :param pulumi.Input[str] source_ip6: Source IPv6 address for communication to the NTP server.
        :param pulumi.Input[int] syncinterval: NTP synchronization interval (1 - 1440 min).
        :param pulumi.Input[str] type: Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if ntpservers is not None:
            pulumi.set(__self__, "ntpservers", ntpservers)
        if ntpsync is not None:
            pulumi.set(__self__, "ntpsync", ntpsync)
        if server_mode is not None:
            pulumi.set(__self__, "server_mode", server_mode)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if syncinterval is not None:
            pulumi.set(__self__, "syncinterval", syncinterval)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NtpInterfaceArgs']]]]:
        """
        FortiGate interface(s) with NTP server mode enabled. Devices on your network can contact these interfaces for NTP services. The structure of `interface` block is documented below.
        """
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NtpInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key for authentication.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[int]]:
        """
        Key ID for authentication.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[str]]:
        """
        Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter
    def ntpservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NtpNtpserverArgs']]]]:
        """
        Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
        """
        return pulumi.get(self, "ntpservers")

    @ntpservers.setter
    def ntpservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NtpNtpserverArgs']]]]):
        pulumi.set(self, "ntpservers", value)

    @property
    @pulumi.getter
    def ntpsync(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ntpsync")

    @ntpsync.setter
    def ntpsync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntpsync", value)

    @property
    @pulumi.getter(name="serverMode")
    def server_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "server_mode")

    @server_mode.setter
    def server_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_mode", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address for communication to the NTP server.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 address for communication to the NTP server.
        """
        return pulumi.get(self, "source_ip6")

    @source_ip6.setter
    def source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip6", value)

    @property
    @pulumi.getter
    def syncinterval(self) -> Optional[pulumi.Input[int]]:
        """
        NTP synchronization interval (1 - 1440 min).
        """
        return pulumi.get(self, "syncinterval")

    @syncinterval.setter
    def syncinterval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "syncinterval", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _NtpState:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['NtpInterfaceArgs']]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 ntpservers: Optional[pulumi.Input[Sequence[pulumi.Input['NtpNtpserverArgs']]]] = None,
                 ntpsync: Optional[pulumi.Input[str]] = None,
                 server_mode: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 syncinterval: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ntp resources.
        :param pulumi.Input[str] authentication: Enable/disable authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input['NtpInterfaceArgs']]] interfaces: FortiGate interface(s) with NTP server mode enabled. Devices on your network can contact these interfaces for NTP services. The structure of `interface` block is documented below.
        :param pulumi.Input[str] key: Key for authentication.
        :param pulumi.Input[int] key_id: Key ID for authentication.
        :param pulumi.Input[str] key_type: Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
        :param pulumi.Input[Sequence[pulumi.Input['NtpNtpserverArgs']]] ntpservers: Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
        :param pulumi.Input[str] ntpsync: Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server_mode: Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] source_ip: Source IP address for communication to the NTP server.
        :param pulumi.Input[str] source_ip6: Source IPv6 address for communication to the NTP server.
        :param pulumi.Input[int] syncinterval: NTP synchronization interval (1 - 1440 min).
        :param pulumi.Input[str] type: Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if ntpservers is not None:
            pulumi.set(__self__, "ntpservers", ntpservers)
        if ntpsync is not None:
            pulumi.set(__self__, "ntpsync", ntpsync)
        if server_mode is not None:
            pulumi.set(__self__, "server_mode", server_mode)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if syncinterval is not None:
            pulumi.set(__self__, "syncinterval", syncinterval)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NtpInterfaceArgs']]]]:
        """
        FortiGate interface(s) with NTP server mode enabled. Devices on your network can contact these interfaces for NTP services. The structure of `interface` block is documented below.
        """
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NtpInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key for authentication.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[int]]:
        """
        Key ID for authentication.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[str]]:
        """
        Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter
    def ntpservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NtpNtpserverArgs']]]]:
        """
        Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
        """
        return pulumi.get(self, "ntpservers")

    @ntpservers.setter
    def ntpservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NtpNtpserverArgs']]]]):
        pulumi.set(self, "ntpservers", value)

    @property
    @pulumi.getter
    def ntpsync(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ntpsync")

    @ntpsync.setter
    def ntpsync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntpsync", value)

    @property
    @pulumi.getter(name="serverMode")
    def server_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "server_mode")

    @server_mode.setter
    def server_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_mode", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address for communication to the NTP server.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 address for communication to the NTP server.
        """
        return pulumi.get(self, "source_ip6")

    @source_ip6.setter
    def source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip6", value)

    @property
    @pulumi.getter
    def syncinterval(self) -> Optional[pulumi.Input[int]]:
        """
        NTP synchronization interval (1 - 1440 min).
        """
        return pulumi.get(self, "syncinterval")

    @syncinterval.setter
    def syncinterval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "syncinterval", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Ntp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpInterfaceArgs']]]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 ntpservers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpNtpserverArgs']]]]] = None,
                 ntpsync: Optional[pulumi.Input[str]] = None,
                 server_mode: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 syncinterval: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure system NTP information.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Ntp("trname",
            ntpsync="enable",
            server_mode="disable",
            source_ip="0.0.0.0",
            source_ip6="::",
            syncinterval=1,
            type="fortiguard")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Ntp can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/ntp:Ntp labelname SystemNtp
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/ntp:Ntp labelname SystemNtp
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authentication: Enable/disable authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpInterfaceArgs']]]] interfaces: FortiGate interface(s) with NTP server mode enabled. Devices on your network can contact these interfaces for NTP services. The structure of `interface` block is documented below.
        :param pulumi.Input[str] key: Key for authentication.
        :param pulumi.Input[int] key_id: Key ID for authentication.
        :param pulumi.Input[str] key_type: Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpNtpserverArgs']]]] ntpservers: Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
        :param pulumi.Input[str] ntpsync: Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server_mode: Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] source_ip: Source IP address for communication to the NTP server.
        :param pulumi.Input[str] source_ip6: Source IPv6 address for communication to the NTP server.
        :param pulumi.Input[int] syncinterval: NTP synchronization interval (1 - 1440 min).
        :param pulumi.Input[str] type: Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NtpArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure system NTP information.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Ntp("trname",
            ntpsync="enable",
            server_mode="disable",
            source_ip="0.0.0.0",
            source_ip6="::",
            syncinterval=1,
            type="fortiguard")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Ntp can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/ntp:Ntp labelname SystemNtp
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/ntp:Ntp labelname SystemNtp
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param NtpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NtpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpInterfaceArgs']]]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 ntpservers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpNtpserverArgs']]]]] = None,
                 ntpsync: Optional[pulumi.Input[str]] = None,
                 server_mode: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 syncinterval: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NtpArgs.__new__(NtpArgs)

            __props__.__dict__["authentication"] = authentication
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["interfaces"] = interfaces
            __props__.__dict__["key"] = None if key is None else pulumi.Output.secret(key)
            __props__.__dict__["key_id"] = key_id
            __props__.__dict__["key_type"] = key_type
            __props__.__dict__["ntpservers"] = ntpservers
            __props__.__dict__["ntpsync"] = ntpsync
            __props__.__dict__["server_mode"] = server_mode
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["source_ip6"] = source_ip6
            __props__.__dict__["syncinterval"] = syncinterval
            __props__.__dict__["type"] = type
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["key"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Ntp, __self__).__init__(
            'fortios:system/ntp:Ntp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authentication: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpInterfaceArgs']]]]] = None,
            key: Optional[pulumi.Input[str]] = None,
            key_id: Optional[pulumi.Input[int]] = None,
            key_type: Optional[pulumi.Input[str]] = None,
            ntpservers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpNtpserverArgs']]]]] = None,
            ntpsync: Optional[pulumi.Input[str]] = None,
            server_mode: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            source_ip6: Optional[pulumi.Input[str]] = None,
            syncinterval: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Ntp':
        """
        Get an existing Ntp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authentication: Enable/disable authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpInterfaceArgs']]]] interfaces: FortiGate interface(s) with NTP server mode enabled. Devices on your network can contact these interfaces for NTP services. The structure of `interface` block is documented below.
        :param pulumi.Input[str] key: Key for authentication.
        :param pulumi.Input[int] key_id: Key ID for authentication.
        :param pulumi.Input[str] key_type: Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpNtpserverArgs']]]] ntpservers: Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
        :param pulumi.Input[str] ntpsync: Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server_mode: Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] source_ip: Source IP address for communication to the NTP server.
        :param pulumi.Input[str] source_ip6: Source IPv6 address for communication to the NTP server.
        :param pulumi.Input[int] syncinterval: NTP synchronization interval (1 - 1440 min).
        :param pulumi.Input[str] type: Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NtpState.__new__(_NtpState)

        __props__.__dict__["authentication"] = authentication
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["interfaces"] = interfaces
        __props__.__dict__["key"] = key
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["key_type"] = key_type
        __props__.__dict__["ntpservers"] = ntpservers
        __props__.__dict__["ntpsync"] = ntpsync
        __props__.__dict__["server_mode"] = server_mode
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["source_ip6"] = source_ip6
        __props__.__dict__["syncinterval"] = syncinterval
        __props__.__dict__["type"] = type
        __props__.__dict__["vdomparam"] = vdomparam
        return Ntp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Output[str]:
        """
        Enable/disable authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.NtpInterface']]]:
        """
        FortiGate interface(s) with NTP server mode enabled. Devices on your network can contact these interfaces for NTP services. The structure of `interface` block is documented below.
        """
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[str]]:
        """
        Key for authentication.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[int]:
        """
        Key ID for authentication.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> pulumi.Output[str]:
        """
        Key type for authentication (MD5, SHA1). Valid values: `MD5`, `SHA1`.
        """
        return pulumi.get(self, "key_type")

    @property
    @pulumi.getter
    def ntpservers(self) -> pulumi.Output[Optional[Sequence['outputs.NtpNtpserver']]]:
        """
        Configure the FortiGate to connect to any available third-party NTP server. The structure of `ntpserver` block is documented below.
        """
        return pulumi.get(self, "ntpservers")

    @property
    @pulumi.getter
    def ntpsync(self) -> pulumi.Output[str]:
        """
        Enable/disable setting the FortiGate system time by synchronizing with an NTP Server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ntpsync")

    @property
    @pulumi.getter(name="serverMode")
    def server_mode(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiGate NTP Server Mode. Your FortiGate becomes an NTP server for other devices on your network. The FortiGate relays NTP requests to its configured NTP server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "server_mode")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        """
        Source IP address for communication to the NTP server.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> pulumi.Output[str]:
        """
        Source IPv6 address for communication to the NTP server.
        """
        return pulumi.get(self, "source_ip6")

    @property
    @pulumi.getter
    def syncinterval(self) -> pulumi.Output[int]:
        """
        NTP synchronization interval (1 - 1440 min).
        """
        return pulumi.get(self, "syncinterval")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Use the FortiGuard NTP server or any other available NTP Server. Valid values: `fortiguard`, `custom`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

