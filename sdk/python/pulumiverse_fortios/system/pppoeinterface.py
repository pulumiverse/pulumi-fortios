# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PppoeinterfaceArgs', 'Pppoeinterface']

@pulumi.input_type
class PppoeinterfaceArgs:
    def __init__(__self__, *,
                 device: pulumi.Input[str],
                 ac_name: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 dial_on_demand: Optional[pulumi.Input[str]] = None,
                 disc_retry_timeout: Optional[pulumi.Input[int]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 ipunnumbered: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[str]] = None,
                 lcp_echo_interval: Optional[pulumi.Input[int]] = None,
                 lcp_max_echo_fails: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 padt_retry_timeout: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pppoe_unnumbered_negotiate: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Pppoeinterface resource.
        :param pulumi.Input[str] device: Name for the physical interface.
        :param pulumi.Input[str] ac_name: PPPoE AC name.
        :param pulumi.Input[str] auth_type: PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        :param pulumi.Input[str] dial_on_demand: Enable/disable dial on demand to dial the PPPoE interface when packets are routed to the PPPoE interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] disc_retry_timeout: PPPoE discovery init timeout value in (0-4294967295 sec).
        :param pulumi.Input[int] idle_timeout: PPPoE auto disconnect after idle timeout (0-4294967295 sec).
        :param pulumi.Input[str] ipunnumbered: PPPoE unnumbered IP.
        :param pulumi.Input[str] ipv6: Enable/disable IPv6 Control Protocol (IPv6CP). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] lcp_echo_interval: PPPoE LCP echo interval in (0-4294967295 sec, default = 5).
        :param pulumi.Input[int] lcp_max_echo_fails: Maximum missed LCP echo messages before disconnect (0-4294967295, default = 3).
        :param pulumi.Input[str] name: Name of the PPPoE interface.
        :param pulumi.Input[int] padt_retry_timeout: PPPoE terminate timeout value in (0-4294967295 sec).
        :param pulumi.Input[str] password: Enter the password.
        :param pulumi.Input[str] pppoe_unnumbered_negotiate: Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] service_name: PPPoE service name.
        :param pulumi.Input[str] username: User name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "device", device)
        if ac_name is not None:
            pulumi.set(__self__, "ac_name", ac_name)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if dial_on_demand is not None:
            pulumi.set(__self__, "dial_on_demand", dial_on_demand)
        if disc_retry_timeout is not None:
            pulumi.set(__self__, "disc_retry_timeout", disc_retry_timeout)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if ipunnumbered is not None:
            pulumi.set(__self__, "ipunnumbered", ipunnumbered)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if lcp_echo_interval is not None:
            pulumi.set(__self__, "lcp_echo_interval", lcp_echo_interval)
        if lcp_max_echo_fails is not None:
            pulumi.set(__self__, "lcp_max_echo_fails", lcp_max_echo_fails)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if padt_retry_timeout is not None:
            pulumi.set(__self__, "padt_retry_timeout", padt_retry_timeout)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if pppoe_unnumbered_negotiate is not None:
            pulumi.set(__self__, "pppoe_unnumbered_negotiate", pppoe_unnumbered_negotiate)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Input[str]:
        """
        Name for the physical interface.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: pulumi.Input[str]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="acName")
    def ac_name(self) -> Optional[pulumi.Input[str]]:
        """
        PPPoE AC name.
        """
        return pulumi.get(self, "ac_name")

    @ac_name.setter
    def ac_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ac_name", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="dialOnDemand")
    def dial_on_demand(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dial on demand to dial the PPPoE interface when packets are routed to the PPPoE interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dial_on_demand")

    @dial_on_demand.setter
    def dial_on_demand(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dial_on_demand", value)

    @property
    @pulumi.getter(name="discRetryTimeout")
    def disc_retry_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        PPPoE discovery init timeout value in (0-4294967295 sec).
        """
        return pulumi.get(self, "disc_retry_timeout")

    @disc_retry_timeout.setter
    def disc_retry_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disc_retry_timeout", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        PPPoE auto disconnect after idle timeout (0-4294967295 sec).
        """
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter
    def ipunnumbered(self) -> Optional[pulumi.Input[str]]:
        """
        PPPoE unnumbered IP.
        """
        return pulumi.get(self, "ipunnumbered")

    @ipunnumbered.setter
    def ipunnumbered(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipunnumbered", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 Control Protocol (IPv6CP). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter(name="lcpEchoInterval")
    def lcp_echo_interval(self) -> Optional[pulumi.Input[int]]:
        """
        PPPoE LCP echo interval in (0-4294967295 sec, default = 5).
        """
        return pulumi.get(self, "lcp_echo_interval")

    @lcp_echo_interval.setter
    def lcp_echo_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lcp_echo_interval", value)

    @property
    @pulumi.getter(name="lcpMaxEchoFails")
    def lcp_max_echo_fails(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum missed LCP echo messages before disconnect (0-4294967295, default = 3).
        """
        return pulumi.get(self, "lcp_max_echo_fails")

    @lcp_max_echo_fails.setter
    def lcp_max_echo_fails(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lcp_max_echo_fails", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the PPPoE interface.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="padtRetryTimeout")
    def padt_retry_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        PPPoE terminate timeout value in (0-4294967295 sec).
        """
        return pulumi.get(self, "padt_retry_timeout")

    @padt_retry_timeout.setter
    def padt_retry_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "padt_retry_timeout", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Enter the password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="pppoeUnnumberedNegotiate")
    def pppoe_unnumbered_negotiate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pppoe_unnumbered_negotiate")

    @pppoe_unnumbered_negotiate.setter
    def pppoe_unnumbered_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pppoe_unnumbered_negotiate", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        PPPoE service name.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        User name.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _PppoeinterfaceState:
    def __init__(__self__, *,
                 ac_name: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dial_on_demand: Optional[pulumi.Input[str]] = None,
                 disc_retry_timeout: Optional[pulumi.Input[int]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 ipunnumbered: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[str]] = None,
                 lcp_echo_interval: Optional[pulumi.Input[int]] = None,
                 lcp_max_echo_fails: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 padt_retry_timeout: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pppoe_unnumbered_negotiate: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Pppoeinterface resources.
        :param pulumi.Input[str] ac_name: PPPoE AC name.
        :param pulumi.Input[str] auth_type: PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        :param pulumi.Input[str] device: Name for the physical interface.
        :param pulumi.Input[str] dial_on_demand: Enable/disable dial on demand to dial the PPPoE interface when packets are routed to the PPPoE interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] disc_retry_timeout: PPPoE discovery init timeout value in (0-4294967295 sec).
        :param pulumi.Input[int] idle_timeout: PPPoE auto disconnect after idle timeout (0-4294967295 sec).
        :param pulumi.Input[str] ipunnumbered: PPPoE unnumbered IP.
        :param pulumi.Input[str] ipv6: Enable/disable IPv6 Control Protocol (IPv6CP). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] lcp_echo_interval: PPPoE LCP echo interval in (0-4294967295 sec, default = 5).
        :param pulumi.Input[int] lcp_max_echo_fails: Maximum missed LCP echo messages before disconnect (0-4294967295, default = 3).
        :param pulumi.Input[str] name: Name of the PPPoE interface.
        :param pulumi.Input[int] padt_retry_timeout: PPPoE terminate timeout value in (0-4294967295 sec).
        :param pulumi.Input[str] password: Enter the password.
        :param pulumi.Input[str] pppoe_unnumbered_negotiate: Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] service_name: PPPoE service name.
        :param pulumi.Input[str] username: User name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if ac_name is not None:
            pulumi.set(__self__, "ac_name", ac_name)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if dial_on_demand is not None:
            pulumi.set(__self__, "dial_on_demand", dial_on_demand)
        if disc_retry_timeout is not None:
            pulumi.set(__self__, "disc_retry_timeout", disc_retry_timeout)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if ipunnumbered is not None:
            pulumi.set(__self__, "ipunnumbered", ipunnumbered)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if lcp_echo_interval is not None:
            pulumi.set(__self__, "lcp_echo_interval", lcp_echo_interval)
        if lcp_max_echo_fails is not None:
            pulumi.set(__self__, "lcp_max_echo_fails", lcp_max_echo_fails)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if padt_retry_timeout is not None:
            pulumi.set(__self__, "padt_retry_timeout", padt_retry_timeout)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if pppoe_unnumbered_negotiate is not None:
            pulumi.set(__self__, "pppoe_unnumbered_negotiate", pppoe_unnumbered_negotiate)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="acName")
    def ac_name(self) -> Optional[pulumi.Input[str]]:
        """
        PPPoE AC name.
        """
        return pulumi.get(self, "ac_name")

    @ac_name.setter
    def ac_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ac_name", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        Name for the physical interface.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="dialOnDemand")
    def dial_on_demand(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dial on demand to dial the PPPoE interface when packets are routed to the PPPoE interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dial_on_demand")

    @dial_on_demand.setter
    def dial_on_demand(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dial_on_demand", value)

    @property
    @pulumi.getter(name="discRetryTimeout")
    def disc_retry_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        PPPoE discovery init timeout value in (0-4294967295 sec).
        """
        return pulumi.get(self, "disc_retry_timeout")

    @disc_retry_timeout.setter
    def disc_retry_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disc_retry_timeout", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        PPPoE auto disconnect after idle timeout (0-4294967295 sec).
        """
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter
    def ipunnumbered(self) -> Optional[pulumi.Input[str]]:
        """
        PPPoE unnumbered IP.
        """
        return pulumi.get(self, "ipunnumbered")

    @ipunnumbered.setter
    def ipunnumbered(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipunnumbered", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 Control Protocol (IPv6CP). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter(name="lcpEchoInterval")
    def lcp_echo_interval(self) -> Optional[pulumi.Input[int]]:
        """
        PPPoE LCP echo interval in (0-4294967295 sec, default = 5).
        """
        return pulumi.get(self, "lcp_echo_interval")

    @lcp_echo_interval.setter
    def lcp_echo_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lcp_echo_interval", value)

    @property
    @pulumi.getter(name="lcpMaxEchoFails")
    def lcp_max_echo_fails(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum missed LCP echo messages before disconnect (0-4294967295, default = 3).
        """
        return pulumi.get(self, "lcp_max_echo_fails")

    @lcp_max_echo_fails.setter
    def lcp_max_echo_fails(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lcp_max_echo_fails", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the PPPoE interface.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="padtRetryTimeout")
    def padt_retry_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        PPPoE terminate timeout value in (0-4294967295 sec).
        """
        return pulumi.get(self, "padt_retry_timeout")

    @padt_retry_timeout.setter
    def padt_retry_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "padt_retry_timeout", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Enter the password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="pppoeUnnumberedNegotiate")
    def pppoe_unnumbered_negotiate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pppoe_unnumbered_negotiate")

    @pppoe_unnumbered_negotiate.setter
    def pppoe_unnumbered_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pppoe_unnumbered_negotiate", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        PPPoE service name.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        User name.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Pppoeinterface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ac_name: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dial_on_demand: Optional[pulumi.Input[str]] = None,
                 disc_retry_timeout: Optional[pulumi.Input[int]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 ipunnumbered: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[str]] = None,
                 lcp_echo_interval: Optional[pulumi.Input[int]] = None,
                 lcp_max_echo_fails: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 padt_retry_timeout: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pppoe_unnumbered_negotiate: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure the PPPoE interfaces.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Pppoeinterface("trname",
            auth_type="auto",
            device="port3",
            dial_on_demand="disable",
            disc_retry_timeout=1,
            idle_timeout=0,
            ipunnumbered="0.0.0.0",
            ipv6="disable",
            lcp_echo_interval=5,
            lcp_max_echo_fails=3,
            padt_retry_timeout=1,
            pppoe_unnumbered_negotiate="enable")
        ```

        ## Import

        System PppoeInterface can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/pppoeinterface:Pppoeinterface labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/pppoeinterface:Pppoeinterface labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ac_name: PPPoE AC name.
        :param pulumi.Input[str] auth_type: PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        :param pulumi.Input[str] device: Name for the physical interface.
        :param pulumi.Input[str] dial_on_demand: Enable/disable dial on demand to dial the PPPoE interface when packets are routed to the PPPoE interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] disc_retry_timeout: PPPoE discovery init timeout value in (0-4294967295 sec).
        :param pulumi.Input[int] idle_timeout: PPPoE auto disconnect after idle timeout (0-4294967295 sec).
        :param pulumi.Input[str] ipunnumbered: PPPoE unnumbered IP.
        :param pulumi.Input[str] ipv6: Enable/disable IPv6 Control Protocol (IPv6CP). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] lcp_echo_interval: PPPoE LCP echo interval in (0-4294967295 sec, default = 5).
        :param pulumi.Input[int] lcp_max_echo_fails: Maximum missed LCP echo messages before disconnect (0-4294967295, default = 3).
        :param pulumi.Input[str] name: Name of the PPPoE interface.
        :param pulumi.Input[int] padt_retry_timeout: PPPoE terminate timeout value in (0-4294967295 sec).
        :param pulumi.Input[str] password: Enter the password.
        :param pulumi.Input[str] pppoe_unnumbered_negotiate: Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] service_name: PPPoE service name.
        :param pulumi.Input[str] username: User name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PppoeinterfaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure the PPPoE interfaces.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Pppoeinterface("trname",
            auth_type="auto",
            device="port3",
            dial_on_demand="disable",
            disc_retry_timeout=1,
            idle_timeout=0,
            ipunnumbered="0.0.0.0",
            ipv6="disable",
            lcp_echo_interval=5,
            lcp_max_echo_fails=3,
            padt_retry_timeout=1,
            pppoe_unnumbered_negotiate="enable")
        ```

        ## Import

        System PppoeInterface can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/pppoeinterface:Pppoeinterface labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/pppoeinterface:Pppoeinterface labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param PppoeinterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PppoeinterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ac_name: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dial_on_demand: Optional[pulumi.Input[str]] = None,
                 disc_retry_timeout: Optional[pulumi.Input[int]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 ipunnumbered: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[str]] = None,
                 lcp_echo_interval: Optional[pulumi.Input[int]] = None,
                 lcp_max_echo_fails: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 padt_retry_timeout: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pppoe_unnumbered_negotiate: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PppoeinterfaceArgs.__new__(PppoeinterfaceArgs)

            __props__.__dict__["ac_name"] = ac_name
            __props__.__dict__["auth_type"] = auth_type
            if device is None and not opts.urn:
                raise TypeError("Missing required property 'device'")
            __props__.__dict__["device"] = device
            __props__.__dict__["dial_on_demand"] = dial_on_demand
            __props__.__dict__["disc_retry_timeout"] = disc_retry_timeout
            __props__.__dict__["idle_timeout"] = idle_timeout
            __props__.__dict__["ipunnumbered"] = ipunnumbered
            __props__.__dict__["ipv6"] = ipv6
            __props__.__dict__["lcp_echo_interval"] = lcp_echo_interval
            __props__.__dict__["lcp_max_echo_fails"] = lcp_max_echo_fails
            __props__.__dict__["name"] = name
            __props__.__dict__["padt_retry_timeout"] = padt_retry_timeout
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["pppoe_unnumbered_negotiate"] = pppoe_unnumbered_negotiate
            __props__.__dict__["service_name"] = service_name
            __props__.__dict__["username"] = username
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Pppoeinterface, __self__).__init__(
            'fortios:system/pppoeinterface:Pppoeinterface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ac_name: Optional[pulumi.Input[str]] = None,
            auth_type: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            dial_on_demand: Optional[pulumi.Input[str]] = None,
            disc_retry_timeout: Optional[pulumi.Input[int]] = None,
            idle_timeout: Optional[pulumi.Input[int]] = None,
            ipunnumbered: Optional[pulumi.Input[str]] = None,
            ipv6: Optional[pulumi.Input[str]] = None,
            lcp_echo_interval: Optional[pulumi.Input[int]] = None,
            lcp_max_echo_fails: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            padt_retry_timeout: Optional[pulumi.Input[int]] = None,
            password: Optional[pulumi.Input[str]] = None,
            pppoe_unnumbered_negotiate: Optional[pulumi.Input[str]] = None,
            service_name: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Pppoeinterface':
        """
        Get an existing Pppoeinterface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ac_name: PPPoE AC name.
        :param pulumi.Input[str] auth_type: PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        :param pulumi.Input[str] device: Name for the physical interface.
        :param pulumi.Input[str] dial_on_demand: Enable/disable dial on demand to dial the PPPoE interface when packets are routed to the PPPoE interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] disc_retry_timeout: PPPoE discovery init timeout value in (0-4294967295 sec).
        :param pulumi.Input[int] idle_timeout: PPPoE auto disconnect after idle timeout (0-4294967295 sec).
        :param pulumi.Input[str] ipunnumbered: PPPoE unnumbered IP.
        :param pulumi.Input[str] ipv6: Enable/disable IPv6 Control Protocol (IPv6CP). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] lcp_echo_interval: PPPoE LCP echo interval in (0-4294967295 sec, default = 5).
        :param pulumi.Input[int] lcp_max_echo_fails: Maximum missed LCP echo messages before disconnect (0-4294967295, default = 3).
        :param pulumi.Input[str] name: Name of the PPPoE interface.
        :param pulumi.Input[int] padt_retry_timeout: PPPoE terminate timeout value in (0-4294967295 sec).
        :param pulumi.Input[str] password: Enter the password.
        :param pulumi.Input[str] pppoe_unnumbered_negotiate: Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] service_name: PPPoE service name.
        :param pulumi.Input[str] username: User name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PppoeinterfaceState.__new__(_PppoeinterfaceState)

        __props__.__dict__["ac_name"] = ac_name
        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["device"] = device
        __props__.__dict__["dial_on_demand"] = dial_on_demand
        __props__.__dict__["disc_retry_timeout"] = disc_retry_timeout
        __props__.__dict__["idle_timeout"] = idle_timeout
        __props__.__dict__["ipunnumbered"] = ipunnumbered
        __props__.__dict__["ipv6"] = ipv6
        __props__.__dict__["lcp_echo_interval"] = lcp_echo_interval
        __props__.__dict__["lcp_max_echo_fails"] = lcp_max_echo_fails
        __props__.__dict__["name"] = name
        __props__.__dict__["padt_retry_timeout"] = padt_retry_timeout
        __props__.__dict__["password"] = password
        __props__.__dict__["pppoe_unnumbered_negotiate"] = pppoe_unnumbered_negotiate
        __props__.__dict__["service_name"] = service_name
        __props__.__dict__["username"] = username
        __props__.__dict__["vdomparam"] = vdomparam
        return Pppoeinterface(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acName")
    def ac_name(self) -> pulumi.Output[str]:
        """
        PPPoE AC name.
        """
        return pulumi.get(self, "ac_name")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[str]:
        """
        PPP authentication type to use. Valid values: `auto`, `pap`, `chap`, `mschapv1`, `mschapv2`.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[str]:
        """
        Name for the physical interface.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="dialOnDemand")
    def dial_on_demand(self) -> pulumi.Output[str]:
        """
        Enable/disable dial on demand to dial the PPPoE interface when packets are routed to the PPPoE interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dial_on_demand")

    @property
    @pulumi.getter(name="discRetryTimeout")
    def disc_retry_timeout(self) -> pulumi.Output[int]:
        """
        PPPoE discovery init timeout value in (0-4294967295 sec).
        """
        return pulumi.get(self, "disc_retry_timeout")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> pulumi.Output[int]:
        """
        PPPoE auto disconnect after idle timeout (0-4294967295 sec).
        """
        return pulumi.get(self, "idle_timeout")

    @property
    @pulumi.getter
    def ipunnumbered(self) -> pulumi.Output[str]:
        """
        PPPoE unnumbered IP.
        """
        return pulumi.get(self, "ipunnumbered")

    @property
    @pulumi.getter
    def ipv6(self) -> pulumi.Output[str]:
        """
        Enable/disable IPv6 Control Protocol (IPv6CP). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter(name="lcpEchoInterval")
    def lcp_echo_interval(self) -> pulumi.Output[int]:
        """
        PPPoE LCP echo interval in (0-4294967295 sec, default = 5).
        """
        return pulumi.get(self, "lcp_echo_interval")

    @property
    @pulumi.getter(name="lcpMaxEchoFails")
    def lcp_max_echo_fails(self) -> pulumi.Output[int]:
        """
        Maximum missed LCP echo messages before disconnect (0-4294967295, default = 3).
        """
        return pulumi.get(self, "lcp_max_echo_fails")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the PPPoE interface.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="padtRetryTimeout")
    def padt_retry_timeout(self) -> pulumi.Output[int]:
        """
        PPPoE terminate timeout value in (0-4294967295 sec).
        """
        return pulumi.get(self, "padt_retry_timeout")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Enter the password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="pppoeUnnumberedNegotiate")
    def pppoe_unnumbered_negotiate(self) -> pulumi.Output[str]:
        """
        Enable/disable PPPoE unnumbered negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pppoe_unnumbered_negotiate")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Output[str]:
        """
        PPPoE service name.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        User name.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

